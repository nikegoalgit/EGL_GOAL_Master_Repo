package pw0d;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import pw.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PW0D ****
// This application allows a user to inquire rows in a DB2
// table.
// 
// The screen displays full case scheduled quantities by zone
// for a particular warehouse code.
// 
// The user must enter a warehouse code, and may opt to show
// planned or actual data.
// 
// MAINTENANCE HISTORY:
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  --------------------------------
// PK#0     06/13/91  OVAZQU  JUNE 1991 TABLE CHANGES:
//                            IN ROUTINE "PW0D150" (ACCUMULATE
//                            DATA FOR SCEEN OUTPUT) ADD THE
//                            NEW SKU FIELD IN THE PWBREC REC.
//                            TO SKU FIELDS IN WORK AREAS,
//                            INSTEAD OF JUST MOVING ZEROS TO
//                            THEM.
// *********************
Program PW0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PKWREC PKWREC; // record
  PW0DW00 PW0DW00; // record
  PW0DW01 PW0DW01; // record
  PW0DW02 PW0DW02; // record
  PW0DW03 PW0DW03; // record
  PW0DW04 PW0DW04; // record
  PW0DW05 PW0DW05; // record
  PWBREC PWBREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use PW0DM.PW0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
    set PW0DM001 initial; /* M001 input/output*/
    set PW0DW00 empty; /* Working storage*/
    set PW0DW05 empty; /* Working storage map area*/
    set PWBREC empty; /* Working storage DB area*/
    set PW0DW00 empty; /* Working storage commarea*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis info*/
    set TA1REC empty; /* Error diagnosis parms*/
    set TA5REC empty; /* Temporary storage parms*/

    PW0DW00.PW0DWSWR = "N"; /* Request for data switch*/
    PW0DW00.PW0DWSWF = "Y"; /* Format the map switch*/
    PW0DW00.PW0DWFLG = "Y"; /* Plan/Actual flag*/
    PW0DM001.XXXRVNBR = "1"; /* Revision number*/

    PW0DW00.XWHCD = PKWREC.XWHCD; /* Init warehouse code*/
    PW0DW00.XWHABRV = PKWREC.XWHABRV;

    if (COMMAREA.XWHCD > " ") /* Data was passed*/
      COMMAREA.CAITEM = " "; /* Clear passed data*/
    end

     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------*/

    goto PW0D001;


    PW0D001: PW0D001();
    goto PW0D001;
  end // end main
end // end PW0D

// Scheduled quantities by zone
Function PW0D001()
   /* ------------------------------------------------------------*/
   /* If data was requested, obtain the data to display.*/
   /* Format the map output area and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process input request if no errors found and not a cancel.*/
   /* ------------------------------------------------------------*/

  PW0D100(); /* Obtain the data to display*/

  PW0D200(); /* Format and display the map*/

  PW0D300(); /* Check attention identifier*/

  PW0D400(); /* Reset fields to normal intensity*/

  PW0D500(); /* Verify the entered data*/

  PW0D600(); /* Process valid input request*/

end // end PW0D001

// Fetch data processing
Function PW0D100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0DW00.PW0DWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0DW00.XXXTSLEN = 204; /* Length of storage record*/

   /* ------------------------------------------------------------*/
   /* If not message to display, reset page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0DW00.XXXMSGNO == 0)
    PW0DW00.XXXTSPAG = 1; /* Initialize page*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0D110();

  PW0DW00.XWHCD = PW0DM001.XWHCD; /* Warehouse code*/
  PW0DW00.PW0DWFLG = PW0DM001.PW0DWFLG; /* Plan/Actual flag*/
   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  PW0D120();

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PW0DW00.PW0DWSWC = "N"; /* Init end of data switch*/
  PW0DW00.PKVSSNBR = 0; /* Init schedule number*/
  PW0DW00.PW0DWSB1 = 0; /* Init set index*/

  while (PW0DW00.PW0DWSWC == "N") /* Until end of cursor*/
    PW0D130(); /* Fetch next row in cursor*/
    if (PW0DW00.PW0DWSWC == "N")
      PW0D150(); /* Accumulate data*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0DW00.PW0DWSB1 > 0) /* Page was formatted*/
    PW0D170(); /* Add page to temporary storage*/
    PW0DW00.PW0DWSWF = "Y"; /* Format map switch*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PW0D190(); /* Close selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0DW00.TA5TSQIX == 0) /* No pages formatted*/
    PW0DW00.XXXMODID = "100"; /* Module identification*/
    PW0DW00.XXXMSGNO = 110; /* No data was found to display*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0DW00.PW0DWSWR = "N"; /* Request for data switch*/


end // end PW0D100

// Purge temporary storage
Function PW0D110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0DW05 empty; /* M001 display storage*/

  PW0DW00.PW0DWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0DW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP;
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0DW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* Normal return code*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Unexpected error occured.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  PW0DW00.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW0DW00.XXXMODID;
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW0D110

// Select zone summary data
Function PW0D120()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PWBREC empty; /* Clear row storage area*/
  set PW0DW01 empty; /* Clear handstack work*/
  set PW0DW02 empty; /* Clear beltpick  work*/
  set PW0DW03 empty; /* Clear default   work*/
  set PW0DW04 empty; /* Clear totals    work*/

  PWBREC.XWHCD = PW0DW00.XWHCD; /* Selection criteria*/
  if (PW0DW00.PW0DWFLG == "Y")
    PWBREC.PKURUNMD = "P"; /* Plan/Actual flag*/
  end

  try
    call "IO2170" ("S1", SQLCA, PWBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(110); /* No records found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  PW0DW00.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN ZONE SUMMARY RECORD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW0DW00.XXXMODID;
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZNSUM01";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end PW0D120

// Get next zone summary data
Function PW0D130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2170" ("N1", SQLCA, PWBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PW0DW00.PW0DWSWC = "Y"; /* Indicate end of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  PW0DW00.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW0DW00.XXXMODID;
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZNSUM01";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end PW0D130

// Accumulate zone summary data
Function PW0D150()
   /* ------------------------------------------------------------*/
   /* Accumulate data for screen output.*/
   /* ------------------------------------------------------------*/

  if (PWBREC.YLTCD == "21" /* Full case totals*/
   || PWBREC.YLTCD == "22" 
   || PWBREC.YLTCD == "24")
    if (PWBREC.PKVSSNBR != PW0DW00.PKVSSNBR /* Schedule number change*/
     || PWBREC.PKVSSNBR == 0)              
      PW0DW00.PKVSSNBR = PWBREC.PKVSSNBR;
      PW0DW00.PW0DWSB1 = PW0DW00.PW0DWSB1 + 1; /* Set index*/
      if (PW0DW00.PW0DWSB1 >= 3) /* Full page*/
        PW0D170(); /* Add page to temporary storage*/
        set PW0DW01 empty; /* Init work areas*/
        set PW0DW02 empty;
        set PW0DW03 empty;
        set PW0DW04 empty;
        PW0DW00.PW0DWSB1 = 1; /* Init index*/
      end
    end
    PW0DW04.PW0DWUNT[PW0DWSB1] = PW0DW04.PW0DWUNT[PW0DWSB1] + PWBREC.PWBSLUNT;
    PW0DW04.PW0DWCRT[PW0DWSB1] = PW0DW04.PW0DWCRT[PW0DWSB1] + PWBREC.PWBSLCRT;
    PW0DW04.PW0DWPRD[PW0DWSB1] = PW0DW04.PW0DWPRD[PW0DWSB1] + PWBREC.PWBSLPRD;
    PW0DW04.PW0DWSKU[PW0DWSB1] = PW0DW04.PW0DWSKU[PW0DWSB1] + PWBREC.PWBSLSKU;
    PW0DW04.PW0DWLBR[PW0DWSB1] = PW0DW04.PW0DWLBR[PW0DWSB1] + PWBREC.PWBSLLBR;
  end

  if (PWBREC.YLTCD == "22") /* Handstack data*/
    PW0DW01.PKVSSNBR[PW0DWSB1] = PWBREC.PKVSSNBR;
    PW0DW01.PW0DWUNT[PW0DWSB1] = PW0DW01.PW0DWUNT[PW0DWSB1] + PWBREC.PWBSLUNT;
    PW0DW01.PW0DWCRT[PW0DWSB1] = PW0DW01.PW0DWCRT[PW0DWSB1] + PWBREC.PWBSLCRT;
    PW0DW01.PW0DWPRD[PW0DWSB1] = PW0DW01.PW0DWPRD[PW0DWSB1] + PWBREC.PWBSLPRD;
    PW0DW01.PW0DWSKU[PW0DWSB1] = PW0DW01.PW0DWSKU[PW0DWSB1] + PWBREC.PWBSLSKU;
    PW0DW01.PW0DWLBR[PW0DWSB1] = PW0DW01.PW0DWLBR[PW0DWSB1] + PWBREC.PWBSLLBR;
  else
    if (PWBREC.YLTCD == "24") /* Beltpick data*/
      PW0DW02.PKVSSNBR[PW0DWSB1] = PWBREC.PKVSSNBR;
      PW0DW02.PW0DWUNT[PW0DWSB1] = PW0DW02.PW0DWUNT[PW0DWSB1] + PWBREC.PWBSLUNT;
      PW0DW02.PW0DWCRT[PW0DWSB1] = PW0DW02.PW0DWCRT[PW0DWSB1] + PWBREC.PWBSLCRT;
      PW0DW02.PW0DWPRD[PW0DWSB1] = PW0DW02.PW0DWPRD[PW0DWSB1] + PWBREC.PWBSLPRD;
      PW0DW02.PW0DWSKU[PW0DWSB1] = PW0DW02.PW0DWSKU[PW0DWSB1] + PWBREC.PWBSLSKU;
      PW0DW02.PW0DWLBR[PW0DWSB1] = PW0DW02.PW0DWLBR[PW0DWSB1] + PWBREC.PWBSLLBR;
    else
      if (PWBREC.YLTCD == "21") /* Default data*/
        PW0DW03.PKVSSNBR[PW0DWSB1] = PWBREC.PKVSSNBR;
        PW0DW03.PW0DWUNT[PW0DWSB1] = PW0DW03.PW0DWUNT[PW0DWSB1] + PWBREC.PWBSLUNT;
        PW0DW03.PW0DWCRT[PW0DWSB1] = PW0DW03.PW0DWCRT[PW0DWSB1] + PWBREC.PWBSLCRT;
        PW0DW03.PW0DWPRD[PW0DWSB1] = PW0DW03.PW0DWPRD[PW0DWSB1] + PWBREC.PWBSLPRD;
        PW0DW03.PW0DWSKU[PW0DWSB1] = PW0DW03.PW0DWSKU[PW0DWSB1] + PWBREC.PWBSLSKU;
        PW0DW03.PW0DWLBR[PW0DWSB1] = PW0DW03.PW0DWLBR[PW0DWSB1] + PWBREC.PWBSLLBR;
      end
    end
  end


end // end PW0D150

// Add data to temporary storage
Function PW0D170()
   /* ------------------------------------------------------------*/
   /* Add full screen to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0DW05.PW0DW01G[1] = PW0DW01.PW0DW01G; /* Handstack*/
  PW0DW05.PW0DW01G[2] = PW0DW02.PW0DW01G; /* Beltpick*/
  PW0DW05.PW0DW01G[3] = PW0DW03.PW0DW01G; /* Default*/
  PW0DW05.PW0DW01G[4] = PW0DW04.PW0DW01G; /* Totals*/

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0DW05.XXXTSLEN = PW0DW00.XXXTSLEN;

  TA5REC.TA5APPID = COMMAREA.CACURRAP;
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0DW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage area and indicators to be used.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set PW0DW05 empty; /* M001 display storage*/
    PW0DW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  PW0DW00.XXXMODID = "170"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW0DW00.XXXMODID;
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW0D170

// Close zone summary table
Function PW0D190()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO2170" ("C1", SQLCA, PWBREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  PW0DW00.XXXMODID = "190"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW0DW00.XXXMODID;
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZNSUM01";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW0D190

// Format and converse map
Function PW0D200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0DW00.XXXMSGNO = converseVar.validationMsgNum;
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0DW00.PW0DWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (PW0DW00.PW0DWSWF == "Y") /* Map must be formatted*/
      PW0D210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0DM001.CATOAP = COMMAREA.CATOAP;
  PW0DM001.CAITEM = COMMAREA.CAITEM;

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0DW00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    if (PW0DW00.XXXMSGNO != 0) /* Message to display*/
      if (PW0DW00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW0DW00.XXXMSGNO);
      end
    else
      PW0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
    PW0DM001.XXXMODID = PW0DW00.XXXMODID;
    set PW0DM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0DM001 ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0DW00.XXXMODID = " "; /* Module identification*/
  PW0DW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0DM001.CAITEM; /* Application data*/


end // end PW0D200

// Format full screen
Function PW0D210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0DM001 initial; /* M001 input/output area*/

  PW0DW00.PW0DWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0DW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (PW0DW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (PW0DW00.PW0DWSWU == "Y") /* Current page was changed*/
        PW0DS21(); /* Update temporary storage page*/
        PW0DW00.PW0DWSWU = "N"; /* Storage update switch*/
      end
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (PW0DW00.XXXTSPAG > PW0DW00.TA5TSQIX) /* Desired greater highest*/
        PW0DW00.XXXTSPAG = PW0DW00.TA5TSQIX; /* Default to highest*/
      end
      PW0DS23(); /* Obtain temporary storage page*/
    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0DM001.XXXLITPG skip; /* "PAGE" literal*/
    PW0DM001.XXXTSPAG = PW0DW00.XXXTSPAG; /* Current page*/
    set PW0DM001.XXXLITOF skip; /* "OF" literal*/
    PW0DM001.TA5TSQIX = PW0DW00.TA5TSQIX; /* Highest page*/

    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/

    PW0DW00.PW0DWSB2 = 1; /* Init work indexes*/
    PW0DW00.PW0DWSB3 = 1;
    PW0DM001.PKVSSNBR = 0; /* Init schedule number*/

    while (PW0DW00.PW0DWSB2 <= 8) /* Until screen is full*/
      PW0DW01.PW0DW01G = PW0DW05.PW0DW01G[PW0DWSB3];

      if (PW0DW01.PKVSSNBR[1] != 0) /* Odd numbered screen data elements*/
        PW0DM001.PKVSSNBR[1] = PW0DW01.PKVSSNBR[1];
      end
      PW0DM001.PWBSLUNT[PW0DWSB2] = PW0DW01.PW0DWUNT[1];
      PW0DM001.PWBSLCRT[PW0DWSB2] = PW0DW01.PW0DWCRT[1];
      PW0DM001.PWBSLPRD[PW0DWSB2] = PW0DW01.PW0DWPRD[1];
      PW0DM001.PW0DWSKU[PW0DWSB2] = PW0DW01.PW0DWSKU[1];
      PW0DM001.PWBSLLBR[PW0DWSB2] = PW0DW01.PW0DWLBR[1];

      PW0DW00.PW0DWSB2 = PW0DW00.PW0DWSB2 + 1; /* Index equals 1,3,5,7*/

      if (PW0DW01.PKVSSNBR[2] != 0) /* Even numbered screen data elements*/
        PW0DM001.PKVSSNBR[2] = PW0DW01.PKVSSNBR[2];
      end
      PW0DM001.PWBSLUNT[PW0DWSB2] = PW0DW01.PW0DWUNT[2];
      PW0DM001.PWBSLCRT[PW0DWSB2] = PW0DW01.PW0DWCRT[2];
      PW0DM001.PWBSLPRD[PW0DWSB2] = PW0DW01.PW0DWPRD[2];
      PW0DM001.PW0DWSKU[PW0DWSB2] = PW0DW01.PW0DWSKU[2];
      PW0DM001.PWBSLLBR[PW0DWSB2] = PW0DW01.PW0DWLBR[2];

      PW0DW00.PW0DWSB2 = PW0DW00.PW0DWSB2 + 1; /* Index equals 2,4,6,8*/

      PW0DW00.PW0DWSB3 = PW0DW00.PW0DWSB3 + 1; /* Four sets of records*/
    end
  end

  set PW0DM001.XWHCD cursor; /* Position cursor*/
  PW0DM001.XWHCD = PW0DW00.XWHCD; /* Warehouse code*/
  PW0DM001.XWHABRV = PW0DW00.XWHABRV; /* Abbreviation*/
  PW0DM001.PW0DWFLG = PW0DW00.PW0DWFLG; /* Plan/Actual flag*/


end // end PW0D210

// Check PF key selection
Function PW0D300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (PW0DW00.PW0DWSWR == "Y") /* Request for data*/
      set PW0DW05 empty; /* M001 display storage*/
    end

    PW0DW00.PW0DWSWF = "Y"; /* Format the map switch*/
    PW0DW00.PW0DWSWR = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0DM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      PW0D110(); /* Purge temporary storage*/
      PW0D310(); /* Exit to another application*/
      set PW0DM001.CATOAP cursor, bold;
    else
      PW0DW00.XXXMODID = "300";
      converseLib.validationFailed(13); /* PA/PF key may not be used*/
    end

    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* Help*/
   || converseVar.eventKey is pf3  /* PW0D menu*/
   || converseVar.eventKey is pf4  /* Master menu*/
   || converseVar.eventKey is pf13 /* PK0B (ord inq ) transfer*/
   || converseVar.eventKey is pf14 /* PK0C (ln inq  ) transfer*/
   || converseVar.eventKey is pf15 /* PK0D (cust inq) transfer*/
   || converseVar.eventKey is pf16 /* PK0Z (sp&p inq) transfer*/
   || converseVar.eventKey is pf18 /* PK09 (hold/rls) transfer*/
   || converseVar.eventKey is pf19 /* PK0S (plan    ) transfer*/
   || converseVar.eventKey is pf20) /* PK07 (select  ) transfer*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0DM001";
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PW0D";
    end

    PW0D110(); /* Purge temporary storage*/
    PW0D310(); /* Exit to another application*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0DW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack;
  end


end // end PW0D300

// PF key TO applications
Function PW0D310()
   /* ----------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* ----------------------------------------------------------*/

  PKWREC.XWHCD = PW0DM001.XWHCD; /* Save warehouse in pick record*/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PK0A"; /* PICKING Master Menu*/
  else
    if (converseVar.eventKey is pf4)
      XSPF4(); /* Master menu*/
    else
      if (converseVar.eventKey is pf13)
        COMMAREA.CATOAP = "PK0B"; /* PICKING Order Inquiry*/
      else
        if (converseVar.eventKey is pf14)
          COMMAREA.CATOAP = "PK0C"; /* PICKING Line Item Inquiry*/
        else
          if (converseVar.eventKey is pf15)
            COMMAREA.CATOAP = "PK0D"; /* PICKING Customer Inquiry*/
          else
            if (converseVar.eventKey is pf16)
              COMMAREA.CATOAP = "PK0Z"; /* SP & P*/
            else
              if (converseVar.eventKey is pf18)
                COMMAREA.CATOAP = "PK09"; /* PICK hold/rlse inq.*/
              else
                if (converseVar.eventKey is pf19)
                  COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
                else
                  if (converseVar.eventKey is pf20)
                    COMMAREA.CATOAP = "PK07"; /* PICKING SELECT Menu*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PW0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/


end // end PW0D310

// Reset modifiable fields
Function PW0D400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0DM001.XWHCD initialAttributes; /* Warehouse code*/
  set PW0DM001.PW0DWFLG initialAttributes; /* Plan/Actual flag*/

  set PW0DM001.CATOAP initialAttributes; /* TO application*/
  set PW0DM001.CAITEM initialAttributes; /* Application data*/


end // end PW0D400

// Validate entered data
Function PW0D500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0DM001.CAITEM > " ") /* Application data was entered*/
    PW0DW00.XXXMODID = "500"; /* Module identification*/
    set PW0DM001.CAITEM cursor, bold;
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    PW0D510(); /* Verify scroll request*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the Warehouse Code exists and active.*/
   /* ------------------------------------------------------------*/

  if (PW0DM001.XWHCD in XWHTBL.XWHCD /* Check valid warehouse*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    PW0DM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/
  else
    PW0DW00.XXXMODID = "500";
    set PW0DM001.XWHCD cursor, bold;
    converseLib.validationFailed(249); /* Field missing or invalid*/
  end

  if (PW0DM001.PW0DWFLG != "Y" /* Plan/Actual switch check*/
   && PW0DM001.PW0DWFLG != "N")
    PW0DW00.XXXMODID = "500";
    set PW0DM001.PW0DWFLG cursor, bold;
    converseLib.validationFailed(249); /* Field missing or invalid*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end PW0D500

// Scroll pages (PF7/PF8)
Function PW0D510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0DW00.XXXTSPAG < 2)       /* and no previous pages*/
    PW0DW00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0DW00.XXXTSPAG >= PW0DW00.TA5TSQIX) /* and no more pages*/
    PW0DW00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (PW0DM001.XWHCD != PW0DW00.XWHCD) /* Warehouse changed*/
    PW0DW00.XXXMODID = "151";
    set PW0DM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0DM001.PW0DWFLG != PW0DW00.PW0DWFLG) /* Plan/Actual flag changed*/
    PW0DW00.XXXMODID = "151";
    set PW0DM001.PW0DWFLG cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/
  end


end // end PW0D510

// Process application
Function PW0D600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0DW00.PW0DWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = PW0DM001.XWHCD;

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (PW0DM001.XWHCD != PW0DW00.XWHCD /* Warehouse changed*/
   || PW0DM001.PW0DWFLG != PW0DW00.PW0DWFLG) /* Switch changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (PW0DM001.XWHCD > " ") /* Warehouse entered*/
      PW0DW00.PW0DWSWR = "Y"; /* Request for data switch*/
      PW0DW00.XWHABRV = PW0DM001.XWHABRV; /* Abbreviation*/
      PW0DW00.PW0DWFLG = PW0DM001.PW0DWFLG; /* Plan/Actual flag*/
    else
      PW0DW00.PW0DWSWR = "N"; /* Request for data switch*/
      PW0D110(); /* Purge any temporary storage*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PW0DW00.XXXTSPAG = PW0DW00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PW0DW00.XXXTSPAG = PW0DW00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If enter key pressed and selection criteria not changed,*/
   /* process request for data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    PW0DW00.PW0DWSWR = "Y"; /* Data requested*/
  end


end // end PW0D600

// Update temporary storage
Function PW0DS21()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0DW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  PW0DW00.XXXMODID = "S21"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW0DS21

// Read next page temp storage
Function PW0DS23()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0DW05.XXXTSLEN = PW0DW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0DW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0DW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  PW0DW00.XXXMODID = "S23"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW0DS23

//*** RECORD=PW0DW00 ****
// Working Storage - PW0D.
// 
// DATE CREATED:  04/08/91
// ***********************
Record PW0DW00 type basicRecord
  5 PW0DW00G PW0DW00G ; 
    10 PW0DWSB1 PW0DWSB1 ; 
    10 PW0DWSB2 PW0DWSB2 ; 
    10 PW0DWSB3 PW0DWSB3 ; 
    10 PW0DWFLG PW0DWFLG ; 
    10 PW0DWSWC PW0DWSWC ; 
    10 PW0DWSWF PW0DWSWF ; 
    10 PW0DWSWR PW0DWSWR ; 
    10 PW0DWSWU PW0DWSWU ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 PKVSSNBR PKVSSNBR ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XXXMODID XXXMODID ; 
    10 XXXMSGNO XXXMSGNO ; 
end // end PW0DW00

//*** RECORD=PW0DW01 ****
// Working Storage - PW0D.
// 
// Internal working storage array for full case location type
// '22' - handstack.
// 
// DATE CREATED:        04/08/91
// 
// ***********************
Record PW0DW01 type basicRecord
  5 PW0DW01G PW0DW01G ; 
    10 PKVSSNBR PKVSSNBR [2] ; 
    10 PW0DWUNT PW0DWUNT [2] ; 
    10 PW0DWCRT PW0DWCRT [2] ; 
    10 PW0DWPRD PW0DWPRD [2] ; 
    10 PW0DWSKU PW0DWSKU [2] ; 
    10 PW0DWLBR PW0DWLBR [2] ; 
end // end PW0DW01

//*** RECORD=PW0DW02 ****
// Working Storage - PW0D.
// 
// Internal working storage array for full case location type
// '24' - beltpick.
// 
// DATE CREATED:        04/08/91
// 
// ***********************
Record PW0DW02 type basicRecord
  5 PW0DW01G PW0DW01G ; 
    10 PKVSSNBR PKVSSNBR [2] ; 
    10 PW0DWUNT PW0DWUNT [2] ; 
    10 PW0DWCRT PW0DWCRT [2] ; 
    10 PW0DWPRD PW0DWPRD [2] ; 
    10 PW0DWSKU PW0DWSKU [2] ; 
    10 PW0DWLBR PW0DWLBR [2] ; 
end // end PW0DW02

//*** RECORD=PW0DW03 ****
// Working Storage - PW0D.
// 
// Internal working storage array for full case location type
// '21' - default.
// 
// DATE CREATED:        04/08/91
// 
// ***********************
Record PW0DW03 type basicRecord
  5 PW0DW01G PW0DW01G ; 
    10 PKVSSNBR PKVSSNBR [2] ; 
    10 PW0DWUNT PW0DWUNT [2] ; 
    10 PW0DWCRT PW0DWCRT [2] ; 
    10 PW0DWPRD PW0DWPRD [2] ; 
    10 PW0DWSKU PW0DWSKU [2] ; 
    10 PW0DWLBR PW0DWLBR [2] ; 
end // end PW0DW03

//*** RECORD=PW0DW04 ****
// Working Storage - PW0D.
// 
// Internal working storage array for totals accumulated for
// full case locations 21, 22, and 24.
// 
// DATE CREATED:        04/08/91
// 
// ***********************
Record PW0DW04 type basicRecord
  5 PW0DW01G PW0DW01G ; 
    10 PKVSSNBR PKVSSNBR [2] ; 
    10 PW0DWUNT PW0DWUNT [2] ; 
    10 PW0DWCRT PW0DWCRT [2] ; 
    10 PW0DWPRD PW0DWPRD [2] ; 
    10 PW0DWSKU PW0DWSKU [2] ; 
    10 PW0DWLBR PW0DWLBR [2] ; 
end // end PW0DW04

//*** RECORD=PW0DW05 ****
// Working Storage - PW0D.
// 
// Internal working storage array for total accumulations and
// screen collection.
// 
// DATE CREATED:        04/08/91
// 
// ***********************
Record PW0DW05 type basicRecord
  5 PW0DW05G PW0DW05G ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 PW0DW01G PW0DW01G [4] ; 
end // end PW0DW05

// Group Level of Record
DataItem PW0DW00G char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PW0DW01G char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PW0DW05G char(204)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-crtn
DataItem PW0DWCRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Plan/Actual flag
DataItem PW0DWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-lbr
DataItem PW0DWLBR num(7,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-sched-loc-prod
DataItem PW0DWPRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work subscript 1
DataItem PW0DWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work subscript 2
DataItem PW0DWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work subscript 3
DataItem PW0DWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-sku
DataItem PW0DWSKU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PW0DWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0DWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0DWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem PW0DWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-unt
DataItem PW0DWUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

