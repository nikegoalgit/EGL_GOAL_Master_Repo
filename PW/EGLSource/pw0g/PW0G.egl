package pw0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0G ****
// This program allows users to select Special Handling
// quantities by Do Not Ship Before date and Special Handling
// Code. The Do Not Ship Before date range must be entered
// before the detail line data can be formatted. Once the date
// is entered, and verified, the map will display quantities
// sorted by DNSB date and Special Handling Code. If the
// quantity displayed is non-special handling, the handling
// code field will be blank. The program will not allow any
// quantities to be selected if the Do Not Ship Before date is
// a Pack and Hold date, or the handling code field is blank.
// 
// The user can select quantities by order by placing an 's'
// next to a specific DNSB date/ Special Handling Code. This
// will take the user to a different program - PW0H where
// the user can select specific orders for picking.
// 
// The user can also transfer out of this application by using
// one of the PF keys displayed at the bottom of the map, or by
// entering fast-path information (also at the bottom of the
// map).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      01/21/91  jcarey  New application.
//          04/18/91  jcarey  Changed headings to take out
//                            the word 'prev' (previous).
//          08/01/91  mwalto  bug fix in pw0g120, allow sql 100
//                            and chk for row found in pw0g100
//          09/10/91  shende  change non-selected qtys to pick
//                            pool qtys in map.
//          09/16/91  shende  Changed so that program wouldn't
//                            display orders which are waiting
//                            to be approved for normal (pk_sel
//                            ind = 'L').
//          09/20/91  shende  Fetch vselor01 was inside loop
//                            causing an infinite loop within
//                            PW0G100.
//          10/08/91  jcampb  Table changes
//          10/09/91  shende  1. Display div. code in header
//                               which can be modifiable.
//                            2. Add fastpath to PW06 & PW0X.
//                            3. Perform XPPK004 to verify the
//                               division code.
//          03/03/92  SHENDE  Add xbc-brand-cd (xbccd) for
//                            March table changes.
//          04/20/92  SHENDE  Allow PW08 access and do not
//                            display in-store promo qty.
//          05/07/92  SHENDE  Add error diag to pw0g100.
//  tblchgs 06/22/92  MWALTO  move xgpcd to pwmrec before call
//                            to io5500 in pw0g150,610,620&630.
//                            pw0g600, don't move spaces to
//                            commarea.xgpcd.  Move div in 170.
//  Colehan 07/09/92  SHENDE  Display brand code and allow (*)
//                            for both division and brand cd.
//  Colehan 09/14/92  SHENDE  Move '*' to pkhrec for select
//                            in pw0g115 for xdvcd and xbccd.
//          12/11/92  SHENDE  Allow for wildcards in selqt updt
//  Canada  10/27/95  PSTROE  Pick-up new version of XPPK003
// Y2KFIX   02/18/98  DKENNY  Y2K MODIFICATIONS MADE TO:
//                            PW0GM100, PW0G500, PW0G520
// *********************
Program PW0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0GW00 PW0GW00; // record
  PW0GW01 PW0GW01; // record
  PW0GW20 PW0GW20; // record
  PW0GW30 PW0GW30; // record
  PW0GW40 PW0GW40; // record
  PW0GW50 PW0GW50; // record
  PW0GW60 PW0GW60; // record
  PWFREC PWFREC; // record
  PWIREC PWIREC; // record
  PWKREC PWKREC; // record
  PWMREC PWMREC; // record
  PWNREC PWNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XHDTBL; // table
  use XWHTBL; // table
  use XDVTBL; // table
  use XOTTBL; // table
  use XBCTBL; // table
  use PW0GM.PW0GM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0GM001 initial; /* M001 input/output*/
    set PW0GW00 empty; /* Working storage*/
    set PW0GW01 empty; /* M001 display storage*/
    set PW0GW20 empty; /* Order tbl*/
    set PW0GW30 empty; /* Quantity tbl*/
    set PW0GW40 empty; /* Non select tbl*/
    set PW0GW50 empty; /* Temp table*/
    set PW0GW60 empty; /* Merged tbl*/
    set SQLCA empty; /* SQL communication area*/
    set PK4REC empty; /* VPOOLH01 - Pool header tbl rec*/
    set PK9REC empty; /* VCUHLD01 - Customer hold rec*/
    set PKBREC empty; /* VORHLD01 - Order hold rec*/
    set PWNREC empty; /* VPHDIT01 - Picking hdr/item tbl rec*/
    set PWFREC empty; /* VCAHLD01 - Carrier hold tbl*/
    set PKHREC empty; /* VSELOR01 - Selected quant by order*/
    set PWKREC empty; /* Picking DNSB date array*/
    set PWMREC empty; /* VSELQT01 - Selected quant not by ord*/
    set PWIREC empty; /* IO1720 - Pick pool header rcd*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA9REC empty; /* ta0190 record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    PW0GW00.PW0GWSWF = "Y"; /* Format the map switch*/
    PW0GW00.PW0GWSWR = "N"; /* Request for data switch*/
    PW0GW00.PW0GWLMT = 101; /* Table limit (10 pages) +1*/

     /* ------------------------------------------------------------*/
     /* Determine whether the screen should be 'picking' or*/
     /* 'pick planning'. The screen can only be entered from*/
     /* PW0V, PW0W, PW0R, PW0M or PW0J. If from the last 3,*/
     /* the select switch will already be set. If from PW0V,*/
     /* it's picking. PW0W is pick planning.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "PW0V")
      PKWREC.PKWSELSW = "PK"; /* selection from picking*/
      PW0GW00.PKURUNMD = " "; /* picking run mode*/

    else
      if (COMMAREA.CAFROMAP == "PW0W")
        PKWREC.PKWSELSW = "PP"; /* selection from pick planning*/
        PW0GW00.PKURUNMD = "P"; /* pick planning run mode*/
      end

    end

    if (PKWREC.PKWSELSW == "PK")
      PW0GW00.PKURUNMD = " ";
    else
      if (PKWREC.PKWSELSW == "PP")
        PW0GW00.PKURUNMD = "P";
      end
    end

    if (PKWREC.PKWSELSW != "PK" /* Previous program did not update*/
     && PKWREC.PKWSELSW != "PP")

      PKWREC.PKWSELSW = "PK"; /* default to picking*/
      PW0GW00.PKURUNMD = " ";

    end

     /* ------------------------------------------------------------*/
     /* Set up map heading name*/
     /* ------------------------------------------------------------*/

    if (PKWREC.PKWSELSW == "PK")
      PW0GW00.PW0GWTIT = "   PICKING   "; /* map title*/

    else
      PW0GW00.PW0GWTIT = "PICK PLANNING"; /* map title*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0G000; /* Verify from appl & P&H min dt*/


    PW0G000: PW0G000();
     /* ----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ----------------------------------------------------------*/

    goto PW0G001; /* Converse the main process*/


    PW0G001: PW0G001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0G001; /* Converse the main process*/


  end // end main
end // end PW0G

// Verify from application
Function PW0G000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0H" /* From allowed application*/
   || COMMAREA.CAFROMAP == "PW0J" 
   || COMMAREA.CAFROMAP == "PW0K" 
   || COMMAREA.CAFROMAP == "PW0M" 
   || COMMAREA.CAFROMAP == "PW0P" 
   || COMMAREA.CAFROMAP == "PW0R" 
   || COMMAREA.CAFROMAP == "PW0V" 
   || COMMAREA.CAFROMAP == "PW0W" 
   || COMMAREA.CAFROMAP == "PW0X" 
   || COMMAREA.CAFROMAP == "PW06" 
   || COMMAREA.CAFROMAP == "PW08" 
   || COMMAREA.CAFROMAP == "GD00")

    PKWREC.PKWFRMAP = COMMAREA.CACURRAP; /* save curr application*/

  else

    /* ------------------------------------------------------------*/
    /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

  XPPK003(); /* Verify warehouse*/

   /* ---------------------------------------------------------*/
   /* Check to see if dates have been passed. If there*/
   /* are dates, move them in and set the request data to 'y'.*/
   /* ---------------------------------------------------------*/

  PW0GW00.PW0GWFDT = PKWREC.PKWFRMDT[1]; /* Move to work stor*/
  PW0GW00.PW0GWTDT = PKWREC.PKWTODT[1]; /* Move to work stor*/

  if (PW0GW00.PW0GWTDT != 0) /* date present*/

    PW0GW00.PW0GWSWR = "Y"; /* Request data*/

    /* ---- format "to" century ------*/
    if (PW0GW00.PW0GWTYY > 50
     && PW0GW00.PW0GWTYY <= 99)

      PW0GW00.PW0GWTCC = 19;
    else
      PW0GW00.PW0GWTCC = 20;
    end
  end

  if (PW0GW00.PW0GWFDT != 0)

    /* ---- format "from" century ----*/
    if (PW0GW00.PW0GWFYY > 50
     && PW0GW00.PW0GWFYY <= 99)

      PW0GW00.PW0GWFCC = 19;
    else
      PW0GW00.PW0GWFCC = 20;
    end
  end

  if (PW0GW00.PW0GWSWR != "Y") /* There is no date*/

    PKWREC.PKWFRMDT = 0; /* Reinitialize the pkwrec*/
    PKWREC.PKWTODT = 0; /* Reinitialize the pkwrec*/
    PW0GW00.PW0GWFDT = 0; /* Reinitialize work stor*/
    PW0GW00.PW0GWTDT = 0; /* Reinitialize work stor*/

  end

  PW0GW01.XWHCD = PKWREC.XWHCD; /* Warehouse*/
  PW0GM001.XWHCD = PKWREC.XWHCD; /* Move to map*/

   /* ------------------------------------------------------------*/
   /* Initial move of division code*/
   /* ------------------------------------------------------------*/

  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* Verify division code*/

    if (converseVar.validationMsgNum == 0) /* no errors*/
      PW0GW01.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
      PW0GM001.XDVCD = PKWREC.XDVCD[1]; /* Move to map*/

      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0GW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
        PW0GM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    end
  else
    PW0GW01.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
    PW0GM001.XDVCD = PKWREC.XDVCD[1]; /* Move to map*/
    PW0GW01.XDVDESC = "ALL DIVISIONS";
    PW0GM001.XDVDESC = "ALL DIVISIONS";
  end

   /* ------------------------------------------------------------*/
   /* Initial move of brand code*/
   /* ------------------------------------------------------------*/

  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414); /* *** INACTIVE BRAND CODE ****/
        set PW0GM001.XBCCD cursor, bold;
        TA1REC.TA1LOC = "000";
        return;
      end
    else
      converseLib.validationFailed(413); /* *** INVALID BRAND CODE ****/
      set PW0GM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "000";
      return;
    end

    if (converseVar.validationMsgNum == 0) /* no errors*/
      PW0GW01.XBCCD = PKWREC.XBCCD[1];
      PW0GM001.XBCCD = PKWREC.XBCCD[1];
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW0GW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW0GM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
    end
  else
    PW0GW00.PW0GMSGN = 421;
    PW0GW01.XBCCD = PKWREC.XBCCD[1];
    PW0GM001.XBCCD = PKWREC.XBCCD[1];
    PW0GW01.XBCABRV = " ";
    PW0GM001.XBCABRV = " ";
  end

   /* ------------------------------------------------------------*/
   /* Determine the minimum pack and hold date.*/
   /* ------------------------------------------------------------*/

  PW0GS20(); /* Call ta0190*/


end // end PW0G000

// Main process to display a map
Function PW0G001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0G100(); /* Obtain the data to display*/

  PW0G200(); /* Format and display the map*/

  PW0G300(); /* Check attention identifier*/

  PW0G400(); /* Reset fields to normal intensity*/

  PW0G500(); /* Verify the entered data*/

  PW0G600(); /* Process valid input request*/


end // end PW0G001

// Obtain the data to display
Function PW0G100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0GW00.XXXTSLEN = 403; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.XXXMSGNO == 0) /* No message to display*/
    PW0GW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0G110(); /* Purge any temporary storage*/

  PW0GW01.XWHCD = PW0GM001.XWHCD; /* Warehouse code*/
  PW0GW00.XWHCD = PW0GM001.XWHCD;

  PW0GW01.PW0GWFDT = PW0GW00.PW0GWFDT; /* From date*/
  PW0GW01.PW0GWTDT = PW0GW00.PW0GWTDT; /* To date*/


   /* ------------------------------------------------------------*/
   /* Obtain division code and brand code*/
   /* ------------------------------------------------------------*/

  PW0G105();

   /* ------------------------------------------------------------*/
   /* Build the Process Selected by Order table. DPICK.VSELOR01*/
   /* ------------------------------------------------------------*/

  PW0G115(); /* Open cursor dpick.vselor01*/

  PW0GW00.PW0GWSWC = "N"; /* Init eof - vselor01*/
  PW0GW00.PW0GWORI = 1; /* Select by order index*/
  PW0GW00.PW0GWIMX = 0; /* Init max tbl entries made*/

  PW0G117(); /* Fetch vselor01*/

  while (PW0GW00.PW0GWSWC == "N" /* While not vselor01 eof*/
   && PW0GW00.PW0GWIMX <= PW0GW00.PW0GWLMT) /* Under scrn +1 limit*/

    PW0GW00.PW0GWDCK = "N"; /* Init date flag check*/

    PW0GS22(); /* Check date*/

    if (PW0GW00.PW0GWDCK == "Y") /* Date checks passed*/
      /* --------------------------------------------*/
      /* Initialize the pk4rec for the vpoolh01 call*/
      /* --------------------------------------------*/

      set PK4REC empty; /* Initalize record*/
      PK4REC.XWHCD = PKHREC.XWHCD;
      PK4REC.PK1CUOID = PKHREC.PK1CUOID;
      PK4REC.PK1NORID = PKHREC.PK1NORID;

      PW0G120(); /* Select unique vpoolh01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

        PW0GW00.PW0GWCCF = "Y"; /* Init carrier check*/

        /* --------- Determine B-Grade and Closeouts -----------*/
        XPPK005(); /* Determine b-grade & closeouts*/

        if (PKWREC.PKW-ORDER-TYP-IND == "B" /* B-grade*/
         || PKWREC.PKW-ORDER-TYP-IND == "C") /* Closeouts*/

          PW0GW00.PW0GWCCF = "N"; /* Do not process*/
        end

        /* --------- Verify release flags / carrier ------------*/
        PW0G125();

        if (PW0GW00.PW0GWCCF == "Y")

          /* ---------------------------------------------*/
          /* Get the handling codes from pool/item table*/
          /* ---------------------------------------------*/

          PW0G140(); /* Open vphdit01*/
          PW0GW00.PW0GWFLG = "N"; /* Init loop flag*/

          while (PW0GW00.PW0GWFLG == "N") /* Loop not done*/

            PW0G141(); /* Get next vphdit01;*/
            if (PW0GW00.PW0GWFLG == "N")
              PW0G145(); /* Add to qt tables*/
            end
          end

          PW0G147(); /* Close vphdit01*/
        end
      end
    end
    PW0G117(); /* Fetch vselor01*/
  end

  PW0G149(); /* Close dpick.vselor01*/

   /* ------------------------------------------------------------*/
   /* Build the Process Selected by Quantity tbl. DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/

  PW0G150(); /* Open cursor dpick.vselqt01*/

  PW0GW00.PW0GWSWC = "N"; /* Init eof - vselqt01*/
  PW0GW00.PW0GWQTI = 1; /* Select by quantity index*/
  PW0GW00.PW0GWIMX = 0; /* Initialize max entries made*/

  PW0G151(); /* Fetch vselqt01*/

  while (PW0GW00.PW0GWSWC == "N" /* While not vselqt01 eof*/
   && PW0GW00.PW0GWIMX <= PW0GW00.PW0GWLMT) /* Under scrn +1 limit*/

    if (PWMREC.XHDCD != " ")

      if (PWMREC.PK-SEL-TYP-CD == " 1"
       || PWMREC.PK-SEL-TYP-CD == " 3")

        PW0GW00.PW0GWDCK = "Y"; /* Init date and type flag*/

        PW0G154(); /* Validate quantity record*/

        if (PW0GW00.PW0GWDCK == "Y")
          PW0G160(); /* Add to quantity tables*/
        end
      end
    end

    PW0G151(); /* Fetch vselqt01*/
  end

  PW0G167(); /* Close dpick.vselqt01*/

   /* ------------------------------------------------------------*/
   /* Build the Process Non-Selected Quantities tbl.*/
   /* A parm record is used to pass data to the io mod.*/
   /* ------------------------------------------------------------*/

  PW0G170(); /* Open dpick.vphdit01*/

  PW0GW00.PW0GWSWC = "N"; /* EOF - Vphdit01*/
  PW0GW00.PW0GWPLI = 1; /* Set pool index to 1*/
  PW0GW00.PW0GWIMX = 0; /* Initialize max tbl entries made*/

  PW0G171(); /* Fetch vphdit01*/

  while (PW0GW00.PW0GWSWC == "N" /* While not vphdit01 eof*/
   && PW0GW00.PW0GWIMX <= PW0GW00.PW0GWLMT) /* Under scrn + 1 limit*/

    if (PWNREC.XHDCD != " ") /* There is a handling code*/

      PW0GW00.PW0GWDCK = "N"; /* Init date check flag*/
      PW0GS36(); /* validate order*/

      if (PW0GW00.PW0GWDCK == "Y") /* Date checks passed*/

        PW0GW00.PW0GWFFL = "N"; /* Pool hdr not found*/

        /* --------------------------------------------*/
        /* Initialize the pk4rec for the vpoolh01 call*/
        /* --------------------------------------------*/

        set PK4REC empty; /* Initalize record*/
        PK4REC.XWHCD = PWNREC.XWHCD;
        PK4REC.PK1CUOID = PWNREC.PK1CUOID;
        PK4REC.PK1NORID = PWNREC.PK1NORID;

        PW0G120(); /* Select unique vpoolh01*/

        /* --------------------------------------------------------*/
        /* If you get SQLCODE = 100, there are rows present in*/
        /* Dpick.Vphdit01 that do not exist in Dpick.Vpoolh01.*/
        /* --------------------------------------------------------*/
        if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
          TA1REC.TA1LOC = "100";
          PW0GW00.XXXMSGNO = 29; /* unexpected error occurred*/
          return;
        end

        if (PW0GW00.PW0GWFFL == "N") /* Rec not found & not eof*/

          PW0GW00.PW0GWCCF = "Y"; /* Init carrier check*/

          /* --------- Determine B-Grade and Closeouts -----------*/
          XPPK005(); /* Determine b-grade & closeouts*/

          if (PKWREC.PKW-ORDER-TYP-IND == "B" /* B-grade*/
           || PKWREC.PKW-ORDER-TYP-IND == "C") /* Closeouts*/

            PW0GW00.PW0GWCCF = "N"; /* Do not process*/
          end

          /* --------- Check carrier -----------------------------*/
          PW0G125();

        end

        if (PW0GW00.PW0GWCCF == "Y")
          PW0G175(); /* Add to non-selected tbles*/
        end
      end
    end

    PW0G171(); /* Fetch vphdit01*/

  end

  PW0G177(); /* Close vphdit01*/

   /* -----------------------------------------------------------*/
   /* Merge the vselor01 and vselqt01 tables.*/
   /* -----------------------------------------------------------*/

  set PW0GW50 empty; /* Reinitialize the work table*/
  PW0GS42();

   /* -----------------------------------------------------------*/
   /* Merge the order/qty tbl with the non selected tbl*/
   /* -----------------------------------------------------------*/

  PW0GW00.PW0GWSMH = 0; /* Init total hours*/
  PW0GS44();

   /* -----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* -----------------------------------------------------------*/

  PW0GW00.PW0GWPGI = 1; /* Initialize page storage index*/
  PW0GW00.PW0GWIXM = 1; /* Display map line index*/
  PW0GW00.PW0GWIMX = 1; /* Temp store index*/
  PW0GW00.PW0GWSWC = "N"; /* End of cursor switch*/

  while (PW0GW00.PW0GWSWC == "N") /* Until end of cursor*/

    PW0GS46(); /* Check for eof*/

    /* -----------------------------------------------------*/
    /* If not eof, save the data in display storage.*/
    /* -----------------------------------------------------*/

    if (PW0GW00.PW0GWSWC == "N") /* Not eof*/
      PW0GS48(); /* Save data in display storage*/
    end

    /* -------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* -------------------------------------------------------*/

    if (PW0GW00.PW0GWIXM > 10) /* Page is full*/

      PW0G180(); /* Add page to temporary storage*/

      PW0GW00.PW0GWIXM = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWIXM > 1) /* Page was formatted*/
    PW0G180(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.TA5TSQIX == 0) /* No pages formatted*/

    TA1REC.TA1LOC = "100"; /* Module identification*/
    PW0GW00.XXXMSGNO = 8; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the more data flag is yes, set ezemno.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWMRE == "Y")
    TA1REC.TA1LOC = "100"; /* Module identification*/
    PW0GW00.XXXMSGNO = 304; /* Table overflow warning*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0GW00.PW0GWSWR = "N"; /* Request for data switch*/


end // end PW0G100

// Obtain Division & Brand Code
Function PW0G105()
   /* ------------------------------------------------------------*/
   /* Division code*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.XDVCD == " ")
    converseLib.validationFailed(393);
    set PW0GM001.XDVCD cursor, bold;
    TA1REC.TA1LOC = "105";
    exit stack;
  end

  PKWREC.XDVCD[1] = PW0GM001.XDVCD;

   /* ---------- verify division code -------------------------------*/
  if (PW0GM001.XDVCD != "*")
    XPPK004();

    /* ---------- move to w/s ----------------------------------------*/
    if (converseVar.validationMsgNum == 0) /* no errors*/
      PW0GW01.XDVCD = PKWREC.XDVCD[1];
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0GW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    else
      converseLib.validationFailed(393);
      set PW0GM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "105";
      exit stack;
    end
  else
    PW0GW01.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
    PW0GW01.XDVDESC = "ALL DIVISIONS";
  end


   /* ------------------------------------------------------------*/
   /* BRAND CODE*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.XBCCD == " ")
    converseLib.validationFailed(413); /* BRAND CODE INACTIVE*/
    set PW0GM001.XBCCD cursor, bold;
    TA1REC.TA1LOC = "105";
    exit stack;
  end

  PKWREC.XBCCD[1] = PW0GM001.XBCCD;

  if (PW0GM001.XBCCD != "*")

    /* ---------- verify brand code ---------------------------*/
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414); /* INVALID BRAND CODE*/
        set PW0GM001.XBCCD cursor, bold;
        TA1REC.TA1LOC = "105";
        exit stack;
      else
        PW0GW01.XBCCD = PKWREC.XBCCD[1];
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0GW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
      end
    else
      converseLib.validationFailed(413); /* BRAND CODE INACTIVE*/
      set PW0GM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "105";
      exit stack;
    end

  else
    PW0GW00.PW0GMSGN = 421;
    PW0GW01.XBCCD = PKWREC.XBCCD[1];
    PW0GW01.XBCABRV = " ";
  end

end // end PW0G105

// Purge any temporary storage
Function PW0G110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWFSH != "Y") /* Refresh everything*/
    PW0GW00.PW0GWIBX = 0; /* Initialize beginning index*/
    PW0GW00.PW0GWIEX = 0; /* Initialize ending index*/

    set PW0GW60 empty; /* Final merged table*/
    PW0GW00.PW0GWSWU = "N"; /* Storage update switch*/

  end

  set PW0GW20 empty; /* Process selected by order rcd*/
  set PW0GW30 empty; /* Process selected by qty rcd*/
  set PW0GW40 empty; /* Process non-select*/
  set PW0GW50 empty; /* Order/qty merge*/


  set TA5REC empty;
  set PW0GW01 empty; /* M001 display storage*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0GW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "110"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G110

// Open dpick.vselor01
Function PW0G115()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* Clear record*/

  PKHREC.XWHCD = PW0GW01.XWHCD; /* Warehouse code*/
  PKHREC.XDVCD = PW0GW01.XDVCD; /* Division code*/
  PKHREC.XBCCD = PW0GW01.XBCCD; /* Brand code*/
  PKHREC.PKURUNMD = PW0GW00.PKURUNMD; /* Run mode*/
  PKHREC.PK-SEL-TYP-CD = " 5"; /* Type*/
  PKHREC.OP1DSBDT = -1; /* Move wild card to DNSB*/

  try
    call "IO1740" ("S2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0G115

// Fetch next row in vselor01
Function PW0G117()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("N2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0GW00.PW0GWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "117"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G117

// Select unique vpoolh01
Function PW0G120()
   /* ------------------------------------------------------------*/
   /* Select unique on vpoolh01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* NOTE: it is possible to have an order in selor tbl and*/
         /* not in the pick pool due to deallocation*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0G120

// Check carrier/hold flags
Function PW0G125()
   /* -----------------------------------------------------------*/
   /* Validate order*/
   /* -----------------------------------------------------------*/

  if (PK4REC.XDVCD == "01" /* In-store promo*/
   && PK4REC.XGPCD == "01")

    PW0GW00.PW0GWCCF = "N"; /* Do not use*/
    return;
  end

  if (PW0GM001.XBCCD == "*") /* ColeHaan*/
    if (PK4REC.XBCCD == "08")
      PW0GW00.PW0GWCCF = "N"; /* Do not use*/
      return;
    end
  end

  if (PW0GW00.PKURUNMD == " ") /* Picking*/
    if (PK4REC.PK4SLIND == " " /* Previously selected*/
     || PK4REC.PK4SLIND == "S")
       /* next sentence*/
    else
      PW0GW00.PW0GWCCF = "N"; /* Do not use*/
      return;
    end
  end

  if (PW0GW00.PKURUNMD == "P") /* Pick Planning*/
    if (PK4REC.PK4SLIND == " " /* Previously selected*/
     || PK4REC.PK4SLIND == "S" 
     || PK4REC.PK4SLIND == "P")
       /* next sentence*/
    else

      PW0GW00.PW0GWCCF = "N"; /* Do not use*/
      return;
    end
  end

  if (PK4REC.PK4STKTF == "Y") /* Stock transfer cannot be 'y'*/
    PW0GW00.PW0GWCCF = "N"; /* ; Do not use*/
    return;
  end

   /* -----------------------------------------------------------*/
   /* Check carrier*/
   /* -----------------------------------------------------------*/
  PW0G126(); /* Open carrier vcahld01*/

  PW0GW00.PW0GWFLG = "N"; /* Init flag for loop*/

  while (PW0GW00.PW0GWFLG == "N" /* Not eof*/
   && PW0GW00.PW0GWCCF == "Y") /* Only good records found*/

    PW0G127(); /* Fetch next carrier*/
  end

  PW0G128(); /* Close carrier*/

  if (PW0GW00.PW0GWCCF == "N") /* Did not pass checks*/
    return;
  end

   /* -----------------------------------------------------------*/
   /* Check order hold*/
   /* -----------------------------------------------------------*/
  if (PK4REC.PK4ORHLD == "Y") /* Order on hold*/

    PW0G130(); /* Open order vorhld01*/

    PW0GW00.PW0GWFLG = "N"; /* Init flag for loop*/

    while (PW0GW00.PW0GWFLG == "N" /* Not eof*/
     && PW0GW00.PW0GWCCF == "Y") /* Only good recds found*/

      PW0G131(); /* Fetch order vorhld01*/
    end

    PW0G132(); /* Close vorhld01*/

    if (PW0GW00.PW0GWCCF == "N") /* Did not pass edits*/
      return;
    end

  end

   /* -----------------------------------------------------------*/
   /* Check customer hold*/
   /* -----------------------------------------------------------*/
  if (PK4REC.PK4CUHLD == "Y") /* Customer on hold*/

    PW0G135(); /* Open vcuhld01*/
    PW0GW00.PW0GWFLG = "N"; /* Init flag for loop*/

    while (PW0GW00.PW0GWFLG == "N" /* Not eof*/
     && PW0GW00.PW0GWCCF == "Y") /* Only good recds found*/

      PW0G136(); /* Fetch vcuhld01*/
    end

    PW0G137(); /* Close vcuhld01*/

  end

end // end PW0G125

// Open Vcahld01
Function PW0G126()
   /* -----------------------------------------------------------*/
   /* Check carrier using Vcahld01.*/
   /* -----------------------------------------------------------*/

  set PWFREC empty; /* Initialize record*/

  PWFREC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "126"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G126

// Fetch next vcahld01
Function PW0G127()
   /* -----------------------------------------------------------*/
   /* Fetch next Vcahld01.*/
   /* -----------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      if (SQLCA.VAGen_SQLCODE == 100)
        PW0GW00.PW0GWFLG = "Y";
        return; /* Return to previous process*/
      end

      if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
        PW0GS24(); /* Check carrier date*/
        return;
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "127"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G127

// Close vcahld01
Function PW0G128()
   /* ------------------------------------------------------------*/
   /* Close the carrier table - vcahld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "128"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G128

// Open vorhld01
Function PW0G130()
   /* -----------------------------------------------------------*/
   /* Open the Picking holds for orders - vorhld01 table*/
   /* -----------------------------------------------------------*/

  set PKBREC empty; /* Initialize record*/

  PKBREC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* pk-ord-stkrf-id*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* pk-nike-ord-id*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WITH A SCAN";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G130

// Fetch next vorhld01
Function PW0G131()
   /* -----------------------------------------------------------*/
   /* Fetch next Vorhld01.*/
   /* -----------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      if (SQLCA.VAGen_SQLCODE == 100)
        PW0GW00.PW0GWFLG = "Y";
        return; /* Return to previous process*/
      end

      if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
        PW0GS26(); /* Check carrier date*/
        return;
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G131

// Close vorhld01
Function PW0G132()
   /* ------------------------------------------------------------*/
   /* Close the picking hold orders - vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "132"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G132

// Open vcuhld01
Function PW0G135()
   /* -----------------------------------------------------------*/
   /* Open the Picking holds for customers - vcuhld01 table*/
   /* -----------------------------------------------------------*/

  set PK9REC empty; /* Initialize record*/

  PK9REC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID; /* cu-co-id*/
  PK9REC.KUMSTRID = PK4REC.KUMSTRID; /* cu-stor-id*/
  PK9REC.XNXCD = PK4REC.XNXCD; /* nike department code*/

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WITH A SCAN";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G135

// Fetch next vcuhld01
Function PW0G136()
   /* -----------------------------------------------------------*/
   /* Fetch next Vcuhld01.*/
   /* -----------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      if (SQLCA.VAGen_SQLCODE == 100)
        PW0GW00.PW0GWFLG = "Y";
        return; /* Return to previous process*/
      end

      if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
        PW0GS28(); /* Check carrier date*/
        return;
      end

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "136"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G136

// Close vcuhld01
Function PW0G137()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "137"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G137

// Open dpick.vphdit01
Function PW0G140()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  set PWNREC empty; /* Reinitialize record*/

  PWNREC.XWHCD = PKHREC.XWHCD; /* warehouse code*/
  PWNREC.PK1CUOID = PKHREC.PK1CUOID; /* cust id*/
  PWNREC.PK1NORID = PKHREC.PK1NORID; /* nike order id*/

  try
    call "IO5490" ("S2", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWNREC.PWNGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G140

// Fetch next row in vphdit01
Function PW0G141()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("N2", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0GW00.PW0GWFLG = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "141"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G141

// Create the order table
Function PW0G145()
   /* ----------------------------------------------------------*/
   /* Add to select by order tables. Only 10 pages are allowed.*/
   /* If there is more data, set a flag to tell users later.*/
   /* Move record data to a compare field.*/
   /* --------------------------------------------------------*/

  PW0GW00.PW0GWDAT = PWNREC.OP1DSBDT; /* Move date to compare*/
  PW0GW00.XHDCD = PWNREC.XHDCD; /* Move hndl code to compare*/
  PW0GW00.XGPCD = PWNREC.XGPCD; /* move gpc code to compare*/

   /* ---------------------------------------------------*/
   /* New key is less than the key currently being used.*/
   /* ---------------------------------------------------*/

  if (PW0GW00.PW0GWCKY < PW0GW20.PW0GWKEY[PW0GWORI]) /* Compare < curr key*/

    PW0GW00.PW0GWORI = 1; /* ; Set index to 1*/

  end

   /* ----------------------------------------------------*/
   /* Build onto the order table. Once a match or new*/
   /* key is built, ezertn is executed.*/
   /* ----------------------------------------------------*/

  while (PW0GW00.PW0GWIMX <= 100 /* Tbl max < 100*/
   && PW0GW00.PW0GWORI <= 101) /* Tbl index <= 101*/

    if (PW0GW00.PW0GWIMX == 100 /* Max # of entries*/
     && PW0GW00.PW0GWORI == 101) /* Maximum exceeded*/

      PW0GW00.PW0GWSWC = "Y"; /* Set eof*/
      PW0GW00.PW0GWMRE = "Y"; /* Set more flag*/
      return; /* Return to 100 process*/

    end

    if (PW0GW00.PW0GWCKY == PW0GW20.PW0GWKEY[PW0GWORI]) /* Keys =*/

      PW0GS30(); /* Add to tbl*/
      return; /* return to 100 process*/

    end

    PW0GW00.PW0GWZRO = "N";
    if (PW0GW20.PW0GWDAT[PW0GWORI] == 0 /* Zero values in tbl entry*/
     && PW0GW20.XHDCD[PW0GWORI] == " ")

      PW0GW00.PW0GWZRO = "Y"; /* Tag as zero entry*/

    end

    if (PW0GW00.PW0GWCKY < PW0GW20.PW0GWKEY[PW0GWORI]
     || PW0GW00.PW0GWZRO == "Y")

      if (PW0GW00.PW0GWZRO == "Y")

        PW0GW20.PW0GWKEY[PW0GWORI] = PW0GW00.PW0GWCKY;
        PW0GS30(); /* Add to order table*/
        PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;
        return;

      end

      if (PW0GW00.PW0GWCKY < PW0GW20.PW0GWKEY[PW0GWORI]) /* new entry*/
                                                        /* ; in middle*/
        /* ---------------------------------------------*/
         /* New entry in middle of table*/
        /* ---------------------------------------------*/

        PW0GW50.PW0GWTBL = PW0GW20.PW0GWTBL; /* Move tbl to temp stor*/

        /* ---------------------------------------------*/
         /* Initialize the current fields on the W20 tbl*/
        /* ---------------------------------------------*/

        PW0GW20.PW0GWKEY[PW0GWORI] = PW0GW00.PW0GWCKY;
        PW0GW20.PW0GWBOR[PW0GWORI] = 0; /* Init order*/
        PW0GW20.PW0GWPMM[PW0GWORI] = 0; /* Init tot min*/
        PW0GW20.PW0GW35M[PW0GWORI] = 0; /* Init 3/5 typ min*/

        /* ---------------------------------------------*/
         /* Build line data*/
        /* ---------------------------------------------*/

        PW0GS30(); /* Add the order tbl*/

        /* ----------------------------------------------*/
         /* Rebuild the remaining table*/
        /* ---------------------------------------------*/

        PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;

        if (PW0GW00.PW0GWIMX > 1)

          PW0GW00.PW0GW50I = PW0GW00.PW0GWORI; /* Set temp stor index*/
          PW0GW00.PW0GWORI = PW0GW00.PW0GWORI + 1;

          while (PW0GW00.PW0GWORI <= PW0GW00.PW0GWIMX
           && PW0GW00.PW0GWIMX <= 100)

            PW0GW20.PW0GWSOR[PW0GWORI] = PW0GW50.PW0GWSOR[PW0GW50I];

            PW0GW00.PW0GW50I = PW0GW00.PW0GW50I + 1; /* Increment index*/
            PW0GW00.PW0GWORI = PW0GW00.PW0GWORI + 1;

          end
          PW0GW00.PW0GWORI = PW0GW00.PW0GWIMX; /* Reset the ori index*/
        end

        return;
      end
    end

    PW0GW00.PW0GWORI = PW0GW00.PW0GWORI + 1;

  end


end // end PW0G145

// Close vphdit01
Function PW0G147()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("C2", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "147"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G147

// Close vselor01
Function PW0G149()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("C2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "149"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G149

// Open dpick.vselqt01
Function PW0G150()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PWMREC empty; /* Clear record*/

  PWMREC.XWHCD = PW0GW01.XWHCD; /* Warehouse code*/
  PWMREC.PKURUNMD = PW0GW00.PKURUNMD; /* Run mode*/
  PWMREC.PK-SEL-TYP-CD = "*"; /* Type*/
  PWMREC.OP1DSBDT = -1; /* wild card DNSB*/
  PWMREC.XHDCD = "*"; /* wild card handle code*/
  PWMREC.XGPCD = "*"; /* wild card gpc code*/
  PWMREC.TF1CARCD = "*"; /* wild card carrier*/
  if (PW0GW01.XDVCD == "*")
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0GW01.XDVCD; /* Division code*/
  end

  if (PW0GW01.XBCCD == "*")
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0GW01.XBCCD; /* Brand code*/
  end

  try
    call "IO5500" ("S1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0G150

// Fetch next row in vselqt01
Function PW0G151()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("N1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0GW00.PW0GWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G151

// Edit the quantity record
Function PW0G154()
   /* ------------------------------------------------------------*/
   /* Edit record for run mode, date and a non hold carrier*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK" /* Mode is picking*/
   && PWMREC.PKURUNMD == "P") /* Record is pick planning*/

    PW0GW00.PW0GWDCK = "N"; /* Conflicting modes*/
    return;
  end

  if (PKWREC.PKWSELSW == "PP" /* Mode is pick planning*/
   && PWMREC.PKURUNMD == " ") /* Record is picking*/

    PW0GW00.PW0GWDCK = "N"; /* Conflicting modes*/
    return;
  end

  if (PWMREC.OP1DSBDT > PW0GW01.PW0GWTDT) /* Out of date range*/
    PW0GW00.PW0GWDCK = "N";
    PW0GW00.PW0GWSWC = "Y";
    return;
  end

  if (PW0GM001.XBCCD == "*") /* ColeHaan*/
    if (PWMREC.XBCCD == "08")
      PW0GW00.PW0GWDCK = "N";
      return;
    end
  end

  if (PWMREC.XDVCD == "01" /* In-store promo*/
   && PWMREC.XGPCD == "01")

    PW0GW00.PW0GWDCK = "N";
    return;
  end

  if (PWMREC.OP1DSBDT >= PW0GW01.PW0GWFDT
   && PWMREC.OP1DSBDT <= PW0GW01.PW0GWTDT)
    /* next sentence*/
  else
    PW0GW00.PW0GWDCK = "N";
    return;
  end

   /* -------------------------------------------------------------*/
   /* check for carrier holds*/
   /* -------------------------------------------------------------*/

  PW0G155(); /* Open carrier*/

  PW0GW00.PW0GWFLG = "N"; /* Init flag for loop*/

  while (PW0GW00.PW0GWFLG == "N" /* Not eof*/
   && PW0GW00.PW0GWCCF == "Y") /* Only good records found*/

    PW0G127(); /* Fetch carrier*/
  end

  PW0G128(); /* Close carrier*/


end // end PW0G154

// select carrier record
Function PW0G155()
   /* -----------------------------------------------------------*/
   /* Check carrier using Vcahld01.*/
   /* -----------------------------------------------------------*/

  set PWFREC empty; /* Initialize record*/

  PWFREC.XWHCD = PWMREC.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PWMREC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "155"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G155

// Create the quantity table
Function PW0G160()
   /* ----------------------------------------------------------*/
   /* Add to select by quantity tables. Only 10 pages allowed.*/
   /* If there is more data, set a flag to tell users later.*/
   /* Move record data to a compare field.*/
   /* --------------------------------------------------------*/

  PW0GW00.PW0GWDAT = PWMREC.OP1DSBDT;
  PW0GW00.XHDCD = PWMREC.XHDCD; /* Move hndl code to compare*/
  PW0GW00.XGPCD = PWMREC.XGPCD; /* Move gpc code to compare*/

   /* ------------------------------------------------------*/
   /* New key is less than the key currently being accessed.*/
   /* ------------------------------------------------------*/

  if (PW0GW00.PW0GWCKY < PW0GW30.PW0GWKEY[PW0GWQTI]) /* Compare < curr key*/

    PW0GW00.PW0GWQTI = 1; /* ; Set index to 1*/

  end

   /* ------------------------------------------------------*/
   /* Build onto the quantity table.*/
   /* Once a match or new key is built, ezertn is executed.*/
   /* ------------------------------------------------------*/

  while (PW0GW00.PW0GWIMX <= 100 /* Tbl max <= 100*/
   && PW0GW00.PW0GWQTI <= 100) /* Tbl index <= 100*/

    if (PW0GW00.PW0GWIMX == 100 /* Max # of entries*/
     && PW0GW00.PW0GWQTI == 100) /* Maximum exceeded*/

      PW0GW00.PW0GWSWC = "Y"; /* Set eof*/
      PW0GW00.PW0GWMRE = "Y"; /* Set more flag*/
      PW0GW00.PW0GWFFL = "Y"; /* Move 'y' to done flag*/
      return; /* Return to 100 process*/

    end

    if (PW0GW00.PW0GWCKY == PW0GW30.PW0GWKEY[PW0GWQTI]) /* Keys =*/

      PW0GS34(); /* Add to tbl*/
      return; /* return to 100 process*/

    end

    PW0GW00.PW0GWZRO = "N";
    if (PW0GW30.PW0GWDAT[PW0GWQTI] == 0 /* Zero values in tbl entry*/
     && PW0GW30.XHDCD[PW0GWQTI] == " ")

      PW0GW00.PW0GWZRO = "Y"; /* Tag as zero entry*/
    end

    if (PW0GW00.PW0GWCKY < PW0GW30.PW0GWKEY[PW0GWQTI]
     || PW0GW00.PW0GWZRO == "Y")

      if (PW0GW00.PW0GWZRO == "Y")

        PW0GW30.PW0GWKEY[PW0GWQTI] = PW0GW00.PW0GWCKY;
        PW0GS34();
        PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;
        return;

      end

      if (PW0GW00.PW0GWCKY < PW0GW30.PW0GWKEY[PW0GWQTI])

        /* ---------------------------------------------------*/
        /* New entry is in middle of the table.*/
        /* ---------------------------------------------------*/

        PW0GW50.PW0GWTBL = PW0GW30.PW0GWTBL; /* move tbl to temp stor*/

        /* ---------------------------------------------------*/
        /* Initialize the current fields on the w30 tbl*/
        /* ---------------------------------------------------*/

        PW0GW30.PW0GWKEY[PW0GWQTI] = PW0GW00.PW0GWCKY;
        PW0GW30.PW0GWBOR[PW0GWQTI] = 0; /* Init order*/
        PW0GW30.PW0GWBQT[PW0GWQTI] = 0; /* Init qty*/
        PW0GW30.PW0GWPMM[PW0GWQTI] = 0; /* Init tot min*/
        PW0GW30.PW0GW35M[PW0GWQTI] = 0; /* Init type 3/5 min*/
        PW0GW30.PW0GW1MM[PW0GWQTI] = 0; /* Init type 1 min*/

        /* -------------------------------------------------*/
        /* Build line data*/
        /* -------------------------------------------------*/

        if (PWMREC.PK-SEL-TYP-CD == " 1")
          PW0GW00.PW0GWSUM = PWMREC.PKHPVSRP;
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PWMREC.PKHPVSFC;
          PW0GW30.PW0GWBQT[PW0GWQTI] = PW0GW00.PW0GWSUM;

          PW0GW30.PW0GWPMM[PW0GWQTI] = PWMREC.PKHPVSMM; /* Tot min*/
          PW0GW30.PW0GW1MM[PW0GWQTI] = PWMREC.PKHPVSMM; /* Type 1 min*/

        end

        if (PWMREC.PK-SEL-TYP-CD == " 3")
          PW0GW00.PW0GWSUM = PWMREC.PKHPVSRP;
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PWMREC.PKHPVSFC;
          PW0GW30.PW0GWBOR[PW0GWQTI] = PW0GW00.PW0GWSUM;

          PW0GW30.PW0GWPMM[PW0GWQTI] = PWMREC.PKHPVSMM; /* Tot min*/
          PW0GW30.PW0GW35M[PW0GWQTI] = PWMREC.PKHPVSMM; /* Type 1 min*/

        end

        /* ----------------------------------------*/
        /* Build the remaining table*/
        /* ----------------------------------------*/

        PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;

        if (PW0GW00.PW0GWIMX > 1)

          PW0GW00.PW0GW50I = PW0GW00.PW0GWQTI; /* Set temp stor indx*/
          PW0GW00.PW0GWQTI = PW0GW00.PW0GWQTI + 1;

          while (PW0GW00.PW0GWQTI <= PW0GW00.PW0GWIMX)

            PW0GW30.PW0GWSOR[PW0GWQTI] = PW0GW50.PW0GWSOR[PW0GW50I];
            PW0GW00.PW0GW50I = PW0GW00.PW0GW50I + 1;
            PW0GW00.PW0GWQTI = PW0GW00.PW0GWQTI + 1;

          end
          PW0GW00.PW0GWQTI = PW0GW00.PW0GWIMX; /* Reset the qti index*/
        end

        return;
      end
    end

    PW0GW00.PW0GWQTI = PW0GW00.PW0GWQTI + 1;

  end


end // end PW0G160

// Close vselqt01
Function PW0G167()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("C1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "167"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G167

// Open dpick.vphdit01
Function PW0G170()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  set PWNREC empty; /* Reinitialize record*/

  PWNREC.XWHCD = PW0GW01.XWHCD; /* warehouse code*/
  PWNREC.XDVCD = PKWREC.XDVCD; /* division code*/
  PWNREC.XBCCD = PKWREC.XBCCD; /* division code*/
  PWNREC.OP1DSBDT = -1; /* wild card DNSB*/
  PWNREC.XHDCD = "*"; /* wild card handling code*/
  PWNREC.XGPCD = "*"; /* wild card product code*/
  PWNREC.TF1CARCD = "*"; /* wild card carrier*/

  try
    call "IO5490" ("S1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWNREC.PWNGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G170

// Fetch next row in vphdit01
Function PW0G171()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("N1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0GW00.PW0GWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "171"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G171

// Add to pool tables
Function PW0G175()
   /* ----------------------------------------------------------*/
   /* Add to pool tables. Only 10 pages allowed.*/
   /* If there is more data, set a flag to tell users later.*/
   /* Move record data to a compare field.*/
   /* --------------------------------------------------------*/

  PW0GW00.PW0GWDAT = PWNREC.OP1DSBDT;
  PW0GW00.XHDCD = PWNREC.XHDCD; /* Move hndl code to compare*/
  PW0GW00.XGPCD = PWNREC.XGPCD; /* Move gpc  code to compare*/

   /* ------------------------------------------------------*/
   /* New key is less than the key currently being accessed.*/
   /* ------------------------------------------------------*/

  if (PW0GW00.PW0GWCKY < PW0GW40.PW0GWKEY[PW0GWPLI]) /* Compare < curr key*/

    PW0GW00.PW0GWPLI = 1; /* ; Set index to 1*/

  end

   /* ------------------------------------------------------*/
   /* Build onto the non selected table*/
   /* Once a match or new key is built, ezertn is executed.*/
   /* ------------------------------------------------------*/

  while (PW0GW00.PW0GWIMX <= 100 /* Tbl max < 100*/
   && PW0GW00.PW0GWPLI <= 101) /* Tbl index <= 101*/

    if (PW0GW00.PW0GWIMX == 100 /* Max # of entries*/
     && PW0GW00.PW0GWPLI == 101) /* Maximum exceeded*/

      PW0GW00.PW0GWSWC = "Y"; /* Set eof*/
      PW0GW00.PW0GWMRE = "Y"; /* Set more flag*/
      return; /* Return to 100 process*/

    end

    if (PW0GW00.PW0GWCKY == PW0GW40.PW0GWKEY[PW0GWPLI]) /* Keys =*/

      PW0GS40(); /* Add to tbl*/
      return; /* return to 100 process*/

    end

    PW0GW00.PW0GWZRO = "N";
    if (PW0GW40.PW0GWDAT[PW0GWPLI] == 0 /* Zero values in tbl entry*/
     && PW0GW40.XHDCD[PW0GWPLI] == " ")

      PW0GW00.PW0GWZRO = "Y"; /* Tag as zero entry*/

    end

    if (PW0GW00.PW0GWCKY < PW0GW40.PW0GWKEY[PW0GWPLI]
     || PW0GW00.PW0GWZRO == "Y")

      if (PW0GW00.PW0GWZRO == "Y")

        PW0GW40.PW0GWKEY[PW0GWPLI] = PW0GW00.PW0GWCKY; /* move key*/
        PW0GS40(); /* Add to tbl*/
        PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1; /* Increment index*/
        return; /* return to 100 process*/

      end

      if (PW0GW00.PW0GWCKY < PW0GW40.PW0GWKEY[PW0GWPLI]) /* new item in*/
                                                 /* ; middle of table*/
        /* ---------------------------------------------------*/
        /* New entry in middle of table*/
        /* ---------------------------------------------------*/

        PW0GW50.PW0GWTBL = PW0GW40.PW0GWTBL; /* move tbl to temp stor*/

        /* ---------------------------------------------------*/
        /* Initialize the current fields on the w40 tbl*/
        /* ---------------------------------------------------*/

        PW0GW40.PW0GWKEY[PW0GWPLI] = PW0GW00.PW0GWCKY;
        PW0GW40.PW0GWBOR[PW0GWPLI] = 0; /* Init order*/
        PW0GW40.PW0GWBQT[PW0GWPLI] = 0; /* Init qty*/
        PW0GW40.PW0GWPMM[PW0GWPLI] = 0; /* Init tot min*/
        PW0GW40.PW0GW35M[PW0GWPLI] = 0; /* Init type 3/5 min*/
        PW0GW40.PW0GW1MM[PW0GWPLI] = 0; /* Init type 1 min*/

        /* -------------------------------------------------*/
        /* Build line data*/
        /* -------------------------------------------------*/

        PW0GW40.PW0GWWRP[PW0GWPLI] = PWNREC.PWNRPQTY;
        PW0GW40.PW0GWWFC[PW0GWPLI] = PWNREC.PWNFCQTY;

        if (PW0GW00.XHDKEY in XHDTBL.XHDKEY)

          PW0GW00.PW0GWSUM = PWNREC.PWNFCQTY;
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PWNREC.PWNRPQTY;
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM * XHDTBL.XHDSHMM[sysVar.arrayIndex];
          PW0GW40.PW0GWNSH[PW0GWPLI] = PW0GW00.PW0GWSUM;

        end

        /* -----------------------------------*/
        /* Rebuild the remaining table*/
        /* -----------------------------------*/

        PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;

        if (PW0GW00.PW0GWIMX > 1)

          PW0GW00.PW0GW50I = PW0GW00.PW0GWPLI; /* Set temp stor indx*/
          PW0GW00.PW0GWPLI = PW0GW00.PW0GWPLI + 1;

          while (PW0GW00.PW0GWPLI <= PW0GW00.PW0GWIMX)

            PW0GW40.PW0GWSOR[PW0GWPLI] = PW0GW50.PW0GWSOR[PW0GW50I];
            PW0GW00.PW0GW50I = PW0GW00.PW0GW50I + 1;
            PW0GW00.PW0GWPLI = PW0GW00.PW0GWPLI + 1;
          end
          PW0GW00.PW0GWPLI = PW0GW00.PW0GWIMX; /* Reset the pli index*/
        end

        return;
      end
    end

    PW0GW00.PW0GWPLI = PW0GW00.PW0GWPLI + 1;

  end


end // end PW0G175

// Close vphdit01
Function PW0G177()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("C1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "177"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G177

// Add page to temporary storage
Function PW0G180()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0GW01.XXXTSLEN = PW0GW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW0GW01 empty; /* M001 display storage*/

    PW0GW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "180"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G180

// Format and converse the map
Function PW0G200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0GW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0GW00.PW0GWSWF == "Y") /* Map must be formatted*/
      PW0G210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0GM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0GM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GMSGN > 0) /* move informational message to screen*/
    PW0GW00.XXXMSGNO = PW0GW00.PW0GMSGN;
  end

  if (converseVar.validationMsgNum == 0)
    if (PW0GW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0GW00.XXXMSGNO != 0) /* Message to display*/
        if (PW0GW00.XXXTSPAG == 1) /* / First page*/
          if (PW0GW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0GW00.XXXMSGNO);
          end /* Message number*/
          PW0GM001.XXXMODID = TA1REC.TA1LOC; /* Module id*/
          set PW0GM001 alarm; /* Indicate sound alarm*/
        end
      else
        PW0GM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0GM001.XXXMODID = TA1REC.TA1LOC; /* Module id*/
        set PW0GM001 alarm; /* Indicate sound alarm*/
      end

    end
  else
    PW0GM001.XXXMODID = TA1REC.TA1LOC; /* Module id*/
    set PW0GM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0GM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOC = " "; /* Module identification*/
  PW0GW00.XXXMSGNO = 0; /* Message number*/
  PW0GW00.PW0GMSGN = 0; /* Informational message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0GM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0GM001.CAITEM; /* Application data*/


end // end PW0G200

// Format the display data
Function PW0G210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0GM001 initial; /* M001 input/output area*/

  PW0GW00.PW0GWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0GW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0GW00.PW0GWSWU == "Y") /* Current page was changed*/

        PW0GS50(); /* Update temporary storage page*/

        PW0GW00.PW0GWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0GW00.XXXTSPAG > PW0GW00.TA5TSQIX) /* Desired greater highest*/
        PW0GW00.XXXTSPAG = PW0GW00.TA5TSQIX; /* Default to highest*/
      end

      PW0GS52(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    PW0GM001.XXXTSPAG = PW0GW00.XXXTSPAG; /* Current page*/
    set PW0GM001.XXXLITPG skip; /* 'Page' literal*/
    PW0GM001.TA5TSQIX = PW0GW00.TA5TSQIX; /* Highest page*/
    set PW0GM001.XXXLITOF skip; /* 'Of' literal*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0GM001.PW0GMAPL = PW0GW00.PW0GWTIT; /* Title*/
  PW0GM001.XWHCD = PW0GW01.XWHCD; /* Warehouse code*/
  PW0GM001.XWHABRV = PKWREC.XWHABRV; /* Warehouse abbrev*/
  PW0GM001.XDVCD = PW0GW01.XDVCD; /* Division code*/
  PW0GM001.XDVDESC = PW0GW01.XDVDESC; /* Division desc*/
  PW0GM001.XBCCD = PW0GW01.XBCCD; /* Brand code*/
  PW0GM001.XBCABRV = PW0GW01.XBCABRV; /* Brand code*/
  PW0GM001.PW0GMFYY = PW0GW01.PW0GWFYY; /* From year*/
  PW0GM001.PW0GMFMM = PW0GW01.PW0GWFMM; /* From month*/
  PW0GM001.PW0GMFDD = PW0GW01.PW0GWFDD; /* From day*/
  PW0GM001.PW0GMTYY = PW0GW01.PW0GWTYY; /* To year*/
  PW0GM001.PW0GMTMM = PW0GW01.PW0GWTMM; /* To month*/
  PW0GM001.PW0GMTDD = PW0GW01.PW0GWTDD; /* To day*/

  PW0GW00.PW0GWMIT = PW0GW00.PW0GWSMH; /* time wo index*/
  PW0GW00.PW0GWHRS = PW0GW00.PW0GWMIT / 60; /* hours*/
  PW0GW00.PW0GWMIN = PW0GW00.PW0GWMIT % 60; /* minutes*/
  if (PW0GW00.PW0GWHRS == 0
   && PW0GW00.PW0GWMIN == 0)

    PW0GW00.PW0GWTIM = " "; /* Clear the zeroes*/
    PW0GM001.PW0GMTHR = PW0GW00.PW0GWTIM;
  else
    PW0GW00.PW0GWCOL = ":";
    PW0GM001.PW0GMTHR = PW0GW00.PW0GWTIM;
  end

  PW0GW00.PW0GWIXM = 1; /* Set index to 1*/

  while (PW0GW00.PW0GWIXM <= 10) /* Until end of screen*/

    if (PW0GW01.PW0GWDYY[PW0GWIXM] == 0 /* If line is empty*/
     && PW0GW01.PW0GWDMM[PW0GWIXM] == 0 
     && PW0GW01.PW0GWDDD[PW0GWIXM] == 0 
     && PW0GW01.PW0GWHCD[PW0GWIXM] == " ")

       /* next sentence*/

    else

      set PW0GM001.PW0GMSEL[PW0GWIXM] normal;
      set PW0GM001.PW0GMBQT[PW0GWIXM] normal;

      PW0GM001.PW0GMSEL[PW0GWIXM] = PW0GW01.PW0GWSEL[PW0GWIXM];
      if (PW0GW01.PW0GWDDT[PW0GWIXM] == 0) /* date is zeros*/
         /* next sentence*/
      else
        PW0GM001.PW0GMDYY[PW0GWIXM] = PW0GW01.PW0GWDYY[PW0GWIXM];
        PW0GM001.PW0GMDMM[PW0GWIXM] = PW0GW01.PW0GWDMM[PW0GWIXM];
        PW0GM001.PW0GMDDD[PW0GWIXM] = PW0GW01.PW0GWDDD[PW0GWIXM];
      end
      PW0GM001.PW0GMHCD[PW0GWIXM] = PW0GW01.PW0GWHCD[PW0GWIXM];
      PW0GM001.PW0GMRP[PW0GWIXM] = PW0GW01.PW0GWWRP[PW0GWIXM];
      PW0GM001.PW0GMFC[PW0GWIXM] = PW0GW01.PW0GWWFC[PW0GWIXM];

      /* ---------------------------------------------------*/
       /* Convert SPCL HNDL HOURS WORK minutes to HH:MM*/
      /* ---------------------------------------------------*/

      PW0GW00.PW0GWMIT = PW0GW01.PW0GWNSH[PW0GWIXM]; /* time wo index*/
      PW0GW00.PW0GWHRS = PW0GW00.PW0GWMIT / 60;
      PW0GW00.PW0GWMIN = PW0GW00.PW0GWMIT % 60;

      if (PW0GW00.PW0GWHRS == 0
       && PW0GW00.PW0GWMIN == 0)

        PW0GW00.PW0GWTIM = " "; /* Clear the zeroes*/
        PW0GM001.PW0GMWRK[PW0GWIXM] = PW0GW00.PW0GWTIM;
      else
        PW0GW00.PW0GWCOL = ":";
        PW0GM001.PW0GMWRK[PW0GWIXM] = PW0GW00.PW0GWTIM;
      end

      PW0GM001.PW0GMBOR[PW0GWIXM] = PW0GW01.PW0GWBOR[PW0GWIXM];
      PW0GM001.PW0GMBQT[PW0GWIXM] = PW0GW01.PW0GWBQT[PW0GWIXM];

      /* ---------------------------------------------------*/
       /* Convert SPCL HNDL HOURS WORK SEL minutes to HH:MM*/
      /* ---------------------------------------------------*/

      PW0GW00.PW0GWMIT = PW0GW01.PW0GWPMM[PW0GWIXM]; /* Time wo index*/
      PW0GW00.PW0GWHRS = PW0GW00.PW0GWMIT / 60;
      PW0GW00.PW0GWMIN = PW0GW00.PW0GWMIT % 60;
      if (PW0GW00.PW0GWHRS == 0
       && PW0GW00.PW0GWMIN == 0)

        PW0GW00.PW0GWTIM = " "; /* Clear the zeroes*/
        PW0GM001.PW0GMHRS[PW0GWIXM] = PW0GW00.PW0GWTIM;
      else
        PW0GW00.PW0GWCOL = ":";
        PW0GM001.PW0GMHRS[PW0GWIXM] = PW0GW00.PW0GWTIM;
      end

    end

    PW0GW00.PW0GWIXM = PW0GW00.PW0GWIXM + 1; /* Increment index*/

  end


end // end PW0G210

// Check attention identifier
Function PW0G300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0GW00.PW0GWSWR == "Y") /* Request for data*/
      set PW0GW01 empty; /* M001 display storage*/
    end

    PW0GW00.PW0GWSWF = "Y"; /* Format the map switch*/
    PW0GW00.PW0GWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PW0GM001.CATOAP == "PW0G")
        converseLib.validationFailed(1); /* Invalid fast path*/
        TA1REC.TA1LOC = "300"; /* Module identification*/
        set PW0GM001.CATOAP cursor, bold;
        exit stack;
      end

      PW0G110(); /* Purge temporary storage*/

      XSPKS01(); /* Exit to another application*/

      PW0GW00.PW0GWSWR = "Y"; /* Request data*/
      set PW0GM001.CATOAP cursor, bold; /* Highlight*/

    else

      TA1REC.TA1LOC = "300"; /* Module identification*/
      converseLib.validationFailed(13); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or pf5 was pressed*/
   || converseVar.eventKey is pf13 /* or pf13 was pressed*/
   || converseVar.eventKey is pf15 /* or pf15 was pressed*/
   || converseVar.eventKey is pf16 /* or pf16 was pressed*/
   || converseVar.eventKey is pf17 /* or pf17 was pressed*/
   || converseVar.eventKey is pf18 /* or pf18 was pressed*/
   || converseVar.eventKey is pf19) /* or pf18 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0GM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      if (PKWREC.PKWSELSW == "PK")
        COMMAREA.CATOAP = "PW0V"; /* TO application*/
      else
        COMMAREA.CATOAP = "PW0W"; /* TO application*/
      end

    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/

      COMMAREA.CATOAP = "PW0R"; /* TO application*/

    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/

      COMMAREA.CATOAP = "PW0J"; /* TO application*/

    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/

      COMMAREA.CATOAP = "PW0K"; /* TO application*/

    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/

      COMMAREA.CATOAP = "PW0M"; /* TO application*/

    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/

      COMMAREA.CATOAP = "PW0P"; /* TO application*/

    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/

      COMMAREA.CATOAP = "PW0X"; /* TO application*/

    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/

      COMMAREA.CATOAP = "PW06"; /* TO application*/

    end

    PW0G110(); /* Purge temporary storage*/

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    TA1REC.TA1LOC = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0G300

// Reset highlighted fields
Function PW0G400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0GM001.XWHCD initialAttributes; /* Warehouse code*/
  set PW0GM001.XDVCD initialAttributes; /* Division code*/
  set PW0GM001.XBCCD initialAttributes; /* Brand code*/
  set PW0GM001.PW0GMFYY initialAttributes; /* From year*/
  set PW0GM001.PW0GMFMM initialAttributes; /* From month*/
  set PW0GM001.PW0GMFDD initialAttributes; /* From day*/
  set PW0GM001.PW0GMTYY initialAttributes; /* From year*/
  set PW0GM001.PW0GMTMM initialAttributes; /* From month*/
  set PW0GM001.PW0GMTDD initialAttributes; /* From day*/

  PW0GW00.PW0GWIXM = 1; /* Initialize line index*/

  while (PW0GW00.PW0GWIXM <= 10) /* Until end of lines*/

    if (PW0GM001.PW0GMDYY[PW0GWIXM] == 0 /* No year*/
     && PW0GM001.PW0GMDMM[PW0GWIXM] == 0 /* No month*/
     && PW0GM001.PW0GMDDD[PW0GWIXM] == 0 /* No day*/
     && PW0GM001.PW0GMHCD[PW0GWIXM] == " ") /* No handle code*/

       /* next sentence*/
    else

      set PW0GM001.PW0GMSEL[PW0GWIXM] normal; /* Reset select flag*/
      set PW0GM001.PW0GMBQT[PW0GWIXM] normal; /* Reset select flag*/

    end

    PW0GW00.PW0GWIXM = PW0GW00.PW0GWIXM + 1; /* Increment line index*/

  end

  set PW0GM001.CATOAP initialAttributes; /* TO application*/
  set PW0GM001.CAITEM initialAttributes; /* Application data*/


end // end PW0G400

// Verify data that was entered
Function PW0G500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.CAITEM > " ") /* Application data was entered*/
    TA1REC.TA1LOC = "500"; /* Module identification*/
    set PW0GM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0G510(); /* Verify scroll request*/
  end

   /* ------------------------------------------------------*/
   /* Check to see if the screen key data has changed.*/
   /* If so, verify the new data*/
   /* ------------------------------------------------------*/

  PW0GW00.PW0GWKCH = "N"; /* Init key changed flag*/
  PW0GW00.PW0GWDTC = "N"; /* Init date check flag*/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF PW0GM001.PW0GMTMM EQ 0*/
  /* OR PW0GM001.PW0GMTDD EQ 0*/
  /* OR PW0GM001.PW0GMTYY EQ 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (PW0GM001.PW0GMTMM == 0
   || PW0GM001.PW0GMTDD == 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    PW0G520(); /* Perform date checks*/

  else

    if (PW0GM001.PW0GMFMM != PW0GW01.PW0GWFMM
     || PW0GM001.PW0GMFDD != PW0GW01.PW0GWFDD
     || PW0GM001.PW0GMFYY != PW0GW01.PW0GWFYY
     || PW0GM001.PW0GMTMM != PW0GW01.PW0GWTMM
     || PW0GM001.PW0GMTDD != PW0GW01.PW0GWTDD
     || PW0GM001.PW0GMTYY != PW0GW01.PW0GWTYY)

      PW0GW00.PW0GWKCH = "Y"; /* Key has changed*/
      PW0G520(); /* Perform date checks*/

    end
  end

  if (converseVar.validationMsgNum != 0) /* There is a heading error*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Verify division code.*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.XDVCD != PW0GW01.XDVCD) /* map value NE current value*/
    PW0GW00.PW0GWKCH = "Y"; /* key has changed*/

    if (PW0GM001.XDVCD == " ") /* if division code is blank*/
      converseLib.validationFailed(393); /* display error*/
      set PW0GM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end

    PKWREC.XDVCD[1] = PW0GM001.XDVCD; /* move new division code*/

    if (PW0GM001.XDVCD != "*")
      XPPK004();

      if (converseVar.validationMsgNum == 0) /* There is no error*/
        if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
          PW0GW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
        end
        PW0GW01.XDVCD = PKWREC.XDVCD[1];
      else
        converseLib.validationFailed(393); /* display error*/
        set PW0GM001.XDVCD cursor, bold;
        TA1REC.TA1LOC = "500"; /* Module identification*/
        exit stack;
      end
    else
      PW0GW01.XDVCD = PKWREC.XDVCD[1];
      PW0GW01.XDVDESC = "ALL DIVISIONS";
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify brand code*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.XBCCD != PW0GW01.XBCCD) /* map value NE current value*/
    PW0GW00.PW0GWKCH = "Y"; /* key has changed*/

    /* ------ Is brand code blank ----------------------------------*/
    if (PW0GM001.XBCCD == " ") /* if brand code is blank*/
      converseLib.validationFailed(413); /* invalide brand code*/
      set PW0GM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end

    /* ------ Verify brand code ------------------------------------*/
    PKWREC.XBCCD[1] = PW0GM001.XBCCD; /* move new brand code*/

    if (PW0GM001.XBCCD != "*")
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(414); /* inactive brand code*/
          set PW0GM001.XBCCD cursor, bold;
          TA1REC.TA1LOC = "500";
          exit stack;
        else
          if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
            PW0GW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
          end
          PW0GW01.XBCCD = PKWREC.XBCCD[1];
        end
      else
        converseLib.validationFailed(413); /* invalidey error*/
        set PW0GM001.XBCCD cursor, bold;
        TA1REC.TA1LOC = "500"; /* Module identification*/
        exit stack;
      end
    else
      PW0GW00.PW0GMSGN = 421;
      PW0GW01.XBCCD = PKWREC.XBCCD[1];
      PW0GW01.XBCABRV = " ";
    end
  end

  if (PW0GW00.PW0GWKCH == "Y") /* Key has changed*/
    return;
  end


   /* ----------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in detail.*/
   /* ----------------------------------------------------------*/

  if (PW0GW00.TA5TSQIX == 0)
    return; /* No detail to verify*/
  end

  PW0GW00.PW0GWQTR = "N"; /* Init quantity req to no*/
  PW0GW00.PW0GWORR = "N"; /* Init order req to no*/
  PW0GW00.PW0GWPHR = "N"; /* Init P&H req to no*/

  PW0GW00.PW0GWPGI = PW0GW00.XXXTSPAG; /* Page index*/
  PW0GW00.PW0GWIMX = PW0GW00.PW0GWIEX[PW0GWPGI]; /* W60 index*/

  PW0GW00.PW0GWIXM = 10; /* Initialize line index*/

  while (PW0GW00.PW0GWIXM > 0) /* Until end of lines*/

    if (PW0GM001.PW0GMSEL[PW0GWIXM] == PW0GW01.PW0GWSEL[PW0GWIXM]
     && PW0GM001.PW0GMBQT[PW0GWIXM] == PW0GW01.PW0GWBQT[PW0GWIXM])
       /* next sentence*/
    else
      PW0G530(); /* Verify data in the line*/
    end

    PW0GW00.PW0GWIXM = PW0GW00.PW0GWIXM - 1; /* Decrement line nu*/
    PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX - 1; /* Decrement w60 index*/

  end

  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

   /* ----------------------------------------------------------*/
   /* Check for conflicting order request and P&H request*/
   /* ----------------------------------------------------------*/

  PW0G540(); /* Check for order/P&H request*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/

    if (PW0GW00.PW0GWPRQ == "Y") /* Reinit P&H request*/
      PW0GW00.PW0GWPRQ = "N";
    end

    exit stack; /* Exit to display map*/
  end


end // end PW0G500

// Verify scroll request
Function PW0G510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0GW00.XXXTSPAG < 2)       /* and no previous pages*/

    TA1REC.TA1LOC = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0GW00.XXXTSPAG >= PW0GW00.TA5TSQIX) /* and no more pages*/

    TA1REC.TA1LOC = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end


end // end PW0G510

// Verify heading dates
Function PW0G520()
   /* -------------------------------------------*/
   /* Verify the to date.*/
   /* -------------------------------------------*/

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF PW0GM001.PW0GMTMM EQ 0*/
  /* OR PW0GM001.PW0GMTDD EQ 0*/
  /* OR PW0GM001.PW0GMTYY EQ 0;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (PW0GM001.PW0GMTMM == 0
   || PW0GM001.PW0GMTDD == 0)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    PW0GW00.PW0GWDTC = "Y"; /* Date check error*/
    TA1REC.TA1LOC = "520"; /* Module identification*/
    converseLib.validationFailed(158); /* Invalid date*/
    set PW0GM001.PW0GMTMM cursor, bold;
    set PW0GM001.PW0GMTDD bold;
    set PW0GM001.PW0GMTYY bold;

  end

  if (PW0GW00.PW0GWDTC == "Y") /* There is an error*/

    return;

  end

  PW0GW00.PW0GWTMM = PW0GM001.PW0GMTMM;
  PW0GW00.PW0GWTDD = PW0GM001.PW0GMTDD;
  PW0GW00.PW0GWTYY = PW0GM001.PW0GMTYY;
  PW0GW00.PW0GWTCC = 0;

  set TA2REC empty;

  if (PW0GW00.PW0GWTYY > 50
   && PW0GW00.PW0GWTYY <= 99)

    PW0GW00.PW0GWTCC = 19;
  else

    PW0GW00.PW0GWTCC = 20;
  end

  TA2REC.TA2GRGGN = PW0GW00.PW0GWTDT;
  TA2REC.TA2DTOPT = "GREGGREG"; /* Gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/
  PW0GS53(); /* Validate the date*/
  if (TA2REC.TA2RTNCD != 0)
    TA1REC.TA1LOC = "520";
    converseLib.validationFailed(158);
    set PW0GM001.PW0GMTYY bold;
    set PW0GM001.PW0GMTMM bold;
    set PW0GM001.PW0GMTDD cursor, bold;
  end

   /* ---------------------------------------------*/
   /* Verify the from date.*/
   /* ---------------------------------------------*/

  PW0GW00.PW0GWDTC = "N"; /* Reinit the date check flag*/

  PW0GW00.PW0GWFMM = PW0GM001.PW0GMFMM;
  PW0GW00.PW0GWFDD = PW0GM001.PW0GMFDD;
  PW0GW00.PW0GWFYY = PW0GM001.PW0GMFYY;
  PW0GW00.PW0GWFCC = 0;

  if (PW0GW00.PW0GWFDT != 0)
    if (PW0GW00.PW0GWFYY > 50
     && PW0GW00.PW0GWFYY <= 99)

      PW0GW00.PW0GWFCC = 19;
    else

      PW0GW00.PW0GWFCC = 20;
    end
    TA2REC.TA2GRGGN = PW0GW00.PW0GWFDT;
    TA2REC.TA2DTOPT = "GREGGREG"; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    PW0GS53(); /* Validate the date*/
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "520";
      converseLib.validationFailed(158);
      set PW0GM001.PW0GMFYY bold;
      set PW0GM001.PW0GMFMM bold;
      set PW0GM001.PW0GMFDD cursor, bold;
    end
  end

   /* -------------------------------------------------------*/
   /* Check that the beginning date is less than the to date*/
   /* -------------------------------------------------------*/

  if (PW0GW00.PW0GWFDT > PW0GW00.PW0GWTDT) /* FROM date > TO date*/

    TA1REC.TA1LOC = "520"; /* Module identification*/
    converseLib.validationFailed(286); /* From DNSB date must be < TO date*/
    set PW0GM001.PW0GMFMM cursor, bold;
    set PW0GM001.PW0GMFDD bold;
    set PW0GM001.PW0GMFYY bold;
    set PW0GM001.PW0GMTMM bold;
    set PW0GM001.PW0GMTDD bold;
    set PW0GM001.PW0GMTYY bold;

  end


end // end PW0G520

// Verify data in the line
Function PW0G530()
   /* ------------------------------------------------------------*/
   /* Loop through to find invalid values in the select field*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Negative values not allowed*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.PW0GMBQT[PW0GWIXM] < 0) /* Check for negative amounts*/

    converseLib.validationFailed(318);
    TA1REC.TA1LOC = "530";
    set PW0GM001.PW0GMBQT[PW0GWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Quantity fields cannot be updated on non P&H*/
   /* ------------------------------------------------------------*/

  PW0GW00.PW0GWDMM = PW0GM001.PW0GMDMM[PW0GWIXM];
  PW0GW00.PW0GWDDD = PW0GM001.PW0GMDDD[PW0GWIXM];
  PW0GW00.PW0GWDYY = PW0GM001.PW0GMDYY[PW0GWIXM];

  if (PW0GW00.PW0GWDMM == 0
   && PW0GW00.PW0GWDDD == 0
   && PW0GW00.PW0GWDYY == 0)

    PW0GW00.PW0GWDCC = 0;
  else

    if (PW0GW00.PW0GWDYY > 50
     && PW0GW00.PW0GWDYY <= 99)

      PW0GW00.PW0GWDCC = 19;

    else
      PW0GW00.PW0GWDCC = 20;
    end
  end

  if (PW0GM001.PW0GMBQT[PW0GWIXM] != PW0GW01.PW0GWBQT[PW0GWIXM]
   && PW0GW00.PW0GWDAT >= PW0GW00.PW0GWMDT)

    converseLib.validationFailed(319);
    TA1REC.TA1LOC = "530";
    set PW0GM001.PW0GMBQT[PW0GWIXM] cursor, bold;

  end

  if (PW0GM001.PW0GMSEL[PW0GWIXM] == "A" /* Validate action value*/
   || PW0GM001.PW0GMSEL[PW0GWIXM] == "D" 
   || PW0GM001.PW0GMSEL[PW0GWIXM] == "C")

    if (PW0GW00.PW0GWDAT >= PW0GW00.PW0GWMDT)
      converseLib.validationFailed(319);
      TA1REC.TA1LOC = "530";
      set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;
    end

  end
   /* ------------------------------------------------------------*/
   /* Action field can only be a,d,c,i or blank*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.PW0GMSEL[PW0GWIXM] == "A" /* Validate action value*/
   || PW0GM001.PW0GMSEL[PW0GWIXM] == "D" 
   || PW0GM001.PW0GMSEL[PW0GWIXM] == "C" 
   || PW0GM001.PW0GMSEL[PW0GWIXM] == "I" 
   || PW0GM001.PW0GMSEL[PW0GWIXM] == " ")

  else

    converseLib.validationFailed(35); /* Invalid action*/
    TA1REC.TA1LOC = "530";
    set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;

  end

  if (PW0GM001.PW0GMSEL[PW0GWIXM] == "A" /* Validate action value*/
   || PW0GM001.PW0GMSEL[PW0GWIXM] == "D" 
   || PW0GM001.PW0GMSEL[PW0GWIXM] == "C")

    if (PW0GW00.PW0GWDAT >= PW0GW00.PW0GWMDT)

      converseLib.validationFailed(319); /* Pack and hold cannot be updated*/
      TA1REC.TA1LOC = "530";
      set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* Adds must have a zero value before, and a non zero after*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.PW0GMSEL[PW0GWIXM] == "A"
   && PW0GW60.PW0GWBQT[PW0GWIMX] != 0)

    converseLib.validationFailed(358); /* Record already exits*/
    TA1REC.TA1LOC = "530";
    set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;

  end

  if (PW0GM001.PW0GMSEL[PW0GWIXM] == "A"
   && PW0GM001.PW0GMBQT[PW0GWIXM] == 0
   && PW0GM001.PW0GMRP[PW0GWIXM] == 0
   && PW0GM001.PW0GMFC[PW0GWIXM] == 0)

    converseLib.validationFailed(359); /* Cannot add a zero quantity*/
    TA1REC.TA1LOC = "530";
    set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Changes require a non zero value before and after.*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.PW0GMSEL[PW0GWIXM] == "C"
   && PW0GM001.PW0GMBQT[PW0GWIXM] == 0)

    converseLib.validationFailed(359); /* Cannot change a zero amount*/
    TA1REC.TA1LOC = "530";
    set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;

  end

  if (PW0GM001.PW0GMSEL[PW0GWIXM] == "C"
   && PW0GW60.PW0GWBQT[PW0GWIMX] == 0)

    converseLib.validationFailed(360); /* Record does not exist. Use add.*/
    TA1REC.TA1LOC = "530";
    set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Deletes require a non zero value before and zero after.*/
   /* ------------------------------------------------------------*/

  if (PW0GM001.PW0GMSEL[PW0GWIXM] == "D"
   && PW0GW60.PW0GWBQT[PW0GWIMX] == 0)

    converseLib.validationFailed(361); /* Record does not exist*/
    TA1REC.TA1LOC = "530";
    set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;

  end



end // end PW0G530

// Check for conflicting requests
Function PW0G540()
   /* ------------------------------------------------------------*/
   /* Verify that there is not an order and P&H request*/
   /* ------------------------------------------------------------*/

  PW0GW00.PW0GWIXM = PW0GW00.XXXTSPAG;
  PW0GW00.PW0GWIMX = 1; /* Init index*/

  while (PW0GW00.PW0GWIMX < PW0GW00.PW0GWIBX[PW0GWIXM]) /* Scan prev pgs*/

    if (PW0GW60.PW0GWSEL[PW0GWIMX] == "I") /* Inquiry*/

      if (PW0GW60.PW0GWDAT[PW0GWIMX] < PW0GW00.PW0GWMDT)
        PW0GW00.PW0GWORR = "Y"; /* Set order request flg to yes*/
      else
        PW0GW00.PW0GWPHR = "Y"; /* Set P&H request to yes*/
      end
    end

    if (PW0GW60.PW0GWSEL[PW0GWIMX] == "A"
     || PW0GW60.PW0GWSEL[PW0GWIMX] == "D"
     || PW0GW60.PW0GWSEL[PW0GWIMX] == "C")

      PW0GW00.PW0GWQTR = "Y"; /* Set quantity flag to 'y'*/
    end

    PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1; /* Increment index*/
  end

  PW0GW00.PW0GWIXM = PW0GW00.XXXTSPAG;
  PW0GW00.PW0GWIXM = PW0GW00.PW0GWIXM + 1; /* Go to next page*/

  if (PW0GW00.PW0GWIXM <= 10)

    if (PW0GW00.PW0GWIBX[PW0GWIXM] > 0) /* There is more data*/

      PW0GW00.PW0GWIMX = PW0GW00.PW0GWIBX[PW0GWIXM];

      PW0GW00.PW0GWSWC = "N"; /* Init the flag*/
      while (PW0GW00.PW0GWSWC == "N")

        PW0GS46(); /* Check for eof*/

        if (PW0GW00.PW0GWSWC == "N")
          if (PW0GW60.PW0GWSEL[PW0GWIMX] == "I") /* Inquiry entered*/

            if (PW0GW60.PW0GWDAT[PW0GWIMX] < PW0GW00.PW0GWMDT)
              PW0GW00.PW0GWORR = "Y"; /* Set order request flg to yes*/
            else
              PW0GW00.PW0GWPHR = "Y"; /* Set P&H request to yes*/
            end
          end
          if (PW0GW60.PW0GWSEL[PW0GWIMX] == "A"
           || PW0GW60.PW0GWSEL[PW0GWIMX] == "D"
           || PW0GW60.PW0GWSEL[PW0GWIMX] == "C")

            PW0GW00.PW0GWQTR = "Y"; /* Set quantity flag to yes*/
          end
        end
        PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1; /* Increment index*/
      end
    end
  end

  if (PW0GW00.PW0GWORR == "Y" /* Order was requested*/
   && PW0GW00.PW0GWPHR == "Y") /* P&H was requested*/

    converseLib.validationFailed(352); /* Order and P&H request invalid*/
    TA1REC.TA1LOC = "540"; /* Module identification*/
  end

  PW0GW00.PW0GWIXM = 10; /* Initialize line index*/

  while (PW0GW00.PW0GWIXM > 0) /* Until end of lines*/

    if (PW0GM001.PW0GMSEL[PW0GWIXM] == "I")

      PW0G541(); /* Set up date compare*/

      if (PW0GW00.PW0GWHDA < PW0GW00.PW0GWMDT)

        if (PW0GW00.PW0GWPHR == "Y")
          converseLib.validationFailed(352); /* Order and P&H request invalid*/
          TA1REC.TA1LOC = "540"; /* Module identification*/
          set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;

        else
          PW0GW00.PW0GWORR = "Y"; /* Set the order req flag*/
        end
      else

        if (PW0GW00.PW0GWORR == "Y")

          converseLib.validationFailed(352);
          TA1REC.TA1LOC = "500";
          set PW0GM001.PW0GMSEL[PW0GWIXM] cursor, bold;

        else

          PW0GW00.PW0GWPHR = "Y"; /* Set the P&H flag*/
        end
      end
    end
    if (PW0GM001.PW0GMSEL[PW0GWIXM] == "A"
     || PW0GM001.PW0GMSEL[PW0GWIXM] == "D"
     || PW0GM001.PW0GMSEL[PW0GWIXM] == "C")

      PW0GW00.PW0GWQTR = "Y"; /* Set quantity flag to yes*/
    end

    PW0GW00.PW0GWIXM = PW0GW00.PW0GWIXM - 1; /* Increment index*/

  end


end // end PW0G540

// Set up date comparison
Function PW0G541()
   /* ------------------------------------------------------------*/
   /* Set up the map DNSB date for comparison to minimum date.*/
   /* ------------------------------------------------------------*/

  PW0GW00.PW0GWHMM = PW0GM001.PW0GMDMM[PW0GWIXM];
  PW0GW00.PW0GWHDD = PW0GM001.PW0GMDDD[PW0GWIXM];
  PW0GW00.PW0GWHYY = PW0GM001.PW0GMDYY[PW0GWIXM];

  if (PW0GW00.PW0GWHMM == 0
   && PW0GW00.PW0GWHDD == 0
   && PW0GW00.PW0GWHYY == 0)

    PW0GWHCC = 0;
  else

    if (PW0GW00.PW0GWHYY > 50
     && PW0GW00.PW0GWHYY < 99)

      PW0GW00.PW0GWHCC = 19; /* Century*/

    else

      PW0GW00.PW0GWHCC = 20;
    end
  end


end // end PW0G541

// Process valid input request
Function PW0G600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0GW00.PW0GWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = PW0GM001.XWHCD; /* Warehouse code*/
  COMMAREA.XSOCD = " ";
  COMMAREA.XNDCD = " ";

   /* ------------------------------------------------------------*/
   /* Update the PKWREC.*/
   /* ------------------------------------------------------------*/

  PKWREC.XWHCD = PW0GM001.XWHCD; /* Warehouse code*/
  PKWREC.XDVCD[1] = PW0GW01.XDVCD; /* Division code*/
  PKWREC.XBCCD[1] = PW0GW01.XBCCD; /* Brand code*/
  PKWREC.PKWFRMDT[1] = PW0GW00.PW0GWFDT; /* From date*/
  PKWREC.PKWTODT[1] = PW0GW00.PW0GWTDT; /* From date*/
  PKWREC.PKWXWHCD = " ";
  PKWREC.PKWFRMAP[1] = "PW0G";
  PKWREC.PKWSLTYP[1] = " ";

   /* ------------------------------------------------------------*/
   /* If key has changed, ezertn.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWKCH == "Y") /* Key has changed*/

    PW0GW01.PW0GWFDT = PW0GW00.PW0GWFDT; /* Move new from dt*/
    PW0GW01.PW0GWTDT = PW0GW00.PW0GWTDT; /* Move new to date*/
    PW0GW00.PW0GWPIX = 1; /* Init parm storage index*/

    PW0GW00.PW0GWPRQ = "N"; /* Reinit previous request*/
    PW0GW00.PW0GWSWR = "Y"; /* Request new data*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Update the storage area with the map detail changes.*/
   /* ------------------------------------------------------------*/

  PW0GW00.PW0GWIXM = PW0GW00.XXXTSPAG; /* Index the page*/
  PW0GW00.PW0GWIMX = PW0GW00.PW0GWIBX[PW0GWIXM]; /* Beg pg ndx*/
  PW0GW00.PW0GWIXM = 1; /* Reset index to 1*/

  while (PW0GW00.PW0GWIXM <= 10)

    if (PW0GM001.PW0GMBQT[PW0GWIXM] != PW0GW01.PW0GWBQT[PW0GWIXM]
     || PW0GM001.PW0GMSEL[PW0GWIXM] != PW0GW01.PW0GWSEL[PW0GWIXM])

      PW0GW60.PW0GWSEL[PW0GWIMX] = PW0GM001.PW0GMSEL[PW0GWIXM];
      PW0GW60.PW0GWEQT[PW0GWIMX] = PW0GM001.PW0GMBQT[PW0GWIXM];
      PW0GW01.PW0GWSEL[PW0GWIXM] = PW0GM001.PW0GMSEL[PW0GWIXM];
      PW0GW01.PW0GWBQT[PW0GWIXM] = PW0GM001.PW0GMBQT[PW0GWIXM];

    end
    PW0GW00.PW0GWIXM = PW0GW00.PW0GWIXM + 1;
    PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;

  end

  PW0G605(); /* Update temp storage*/


   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0GW00.XXXTSPAG = PW0GW00.XXXTSPAG - 1; /* Decrement page numb*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0GW00.XXXTSPAG = PW0GW00.XXXTSPAG + 1; /* Increment page num*/

    return; /* Return to previous process*/

  end

   /* -----------------------------------------------------------*/
   /* Process the quantities that have been modified.*/
   /* -----------------------------------------------------------*/

  if (PW0GW00.PW0GWQTR == "Y") /* Quantity amounts entered*/

    XX0XS01(); /* Date and time routine*/

    PW0GW00.PW0GWIMX = 1; /* Initialize index*/
    PW0GW00.PW0GWSWC = "N"; /* Initialize eof flag*/

    while (PW0GW00.PW0GWSWC == "N") /* Not eof*/

      if (PW0GW60.PW0GWSEL[PW0GWIMX] == "D")

        PW0G610(); /* Process a delete*/

        /* -------------------------------------------------------*/
        /* Reduce the minutes for type 1 only & set by qty to zero*/
        /* -------------------------------------------------------*/

      end

      if (PW0GW60.PW0GWSEL[PW0GWIMX] == "A")

        PW0G620(); /* Process an add*/

      end

      if (PW0GW60.PW0GWSEL[PW0GWIMX] == "C")
        PW0G630(); /* Process an update*/
      end

      if (PW0GW60.PW0GWSEL[PW0GWIMX] != "I") /* inquiry*/
        PW0GW60.PW0GWSEL[PW0GWIMX] = " "; /* Blank out the action*/
      end

      PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;

      PW0GS46(); /* Check for eof*/
    end

    PW0G640(); /* Update temp storage*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();

    PW0GW00.XXXMSGNO = 32; /* Update successful*/
    TA1REC.TA1LOC = "600"; /* Module identification*/
    PW0GW00.PW0GWSWF = "Y"; /* Format the data on the map*/

  end
   /* ------------------------------------------------------------*/
   /* Process the pack & hold requests.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWPHR == "Y")

    if (PW0GW00.PW0GWPRQ == "Y") /* There is a previous request*/

      COMMAREA.CATOAP = "PW0M"; /* TO application*/

      PW0G110(); /* Purge temp storage*/

      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV;

      XSPKS01(); /* Exit to another application*/

    else

      PW0GW00.PW0GWPRQ = "Y";
      PW0GW00.XXXMSGNO = 364; /* Req tran to a P&H*/
      TA1REC.TA1LOC = "600";
      exit stack;

    end
  else

    PW0GW00.PW0GWPRQ = "N"; /* Reinit previous request*/

  end

   /* ------------------------------------------------------------*/
   /* Process the order requests.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWORR == "Y")

    PWKREC.XWHCD = PW0GW01.XWHCD;
    PWKREC.XWHABRV = PKWREC.XWHABRV;
    PWKREC.PWKFRDT = PW0GW01.PW0GWFDT;
    PWKREC.PWKTODT = PW0GW01.PW0GWTDT;

    PW0GW00.PW0GWIXM = 1; /* Used as PWK index*/
    PW0GW00.PW0GWPCT = 1; /* Used as page index*/
    PW0GW00.PW0GWIMX = 1; /* Used as W60 index*/
    PW0GW00.PW0GWSWC = "N"; /* Used as W60 eof*/
    PW0GW00.PW0GWODN = "N"; /* Init parm flag*/
    PWKREC.PWKARMAX = 0;

    while (PW0GW00.PW0GWSWC == "N")

      if (PW0GW60.PW0GWSEL[PW0GWIMX] == "I")

        PWKREC.OP1DSBDT[PW0GWIXM] = PW0GW60.PW0GWDAT[PW0GWIMX];
        PWKREC.TF1CARCD[PW0GWIXM] = " ";
        PWKREC.XHDCD[PW0GWIXM] = PW0GW60.XHDCD[PW0GWIMX];

        PWKREC.PWKARMAX = PWKREC.PWKARMAX + 1; /* # parm entries*/
        PW0GW00.PW0GWIXM = PW0GW00.PW0GWIXM + 1; /* parm index*/

        if (PWKREC.PWKARMAX == 25)
          PW0GW00.PW0GWODN = "Y"; /* Parm tbl limit reached*/
        end

        if (PW0GW00.PW0GWODN == "Y") /* Parm tbl limit reached*/
          PKWREC.PKWARRAY[PW0GWPCT] = PWKREC.PWKARRAY;
          PW0GW00.PW0GWPCT = PW0GW00.PW0GWPCT + 1; /* Increment page*/
          if (PW0GW00.PW0GWPCT > 3) /* Page limit exceeded*/
            PW0GW00.PW0GWSWC = "Y"; /* End of loop*/
          else
            PWKREC.PWKARMAX = 1;
            PW0GW00.PW0GWODN = "N"; /* Reset parm flag*/
            PW0GW00.PW0GWIXM = 1; /* Reset parm index*/
          end
        end

      end
      PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;
      PW0GS46();
    end

    COMMAREA.CATOAP = "PW0H"; /* TO application*/

    PW0G110(); /* Purge temp storage*/

    PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;

    XSPKS01(); /* Exit to another application*/

  end


end // end PW0G600

// Update temporary storage
Function PW0G605()
   /* ------------------------------------------------------------*/
   /* Update temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "605"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G605

// Delete vselqt01
Function PW0G610()
   /* ------------------------------------------------------------*/
   /* Delete a row in vselqt01.*/
   /* ------------------------------------------------------------*/

  PWMREC.XWHCD = PW0GW01.XWHCD; /* Warehouse code*/
  PWMREC.TF1CARCD = " "; /* Carrier*/
  PWMREC.PK-SEL-TYP-CD = " 1";
  PWMREC.OP1DSBDT = PW0GW60.PW0GWDAT[PW0GWIMX]; /* DNSB date*/
  PWMREC.XHDCD = PW0GW60.XHDCD[PW0GWIMX];
  PWMREC.XGPCD = PW0GW60.XGPCD[PW0GWIMX];

  if (PW0GW01.XDVCD == "*")
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0GW01.XDVCD;
  end

  if (PW0GW01.XBCCD == "*")
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0GW01.XBCCD;
  end

  PWMREC.PKURUNMD = PW0GW00.PKURUNMD; /* Run mode*/

  try
    call "IO5500" ("D ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0GW60.PW0GWBQT[PW0GWIMX] = 0; /* Set quantity to zero*/
      PW0GW60.PW0GWEQT[PW0GWIMX] = 0; /* Set quantity to zero*/
      PW0GW60.PW0GW1MM[PW0GWIMX] = 0; /* Set 1 type min to zero*/
      PW0GW60.PW0GWPMM[PW0GWIMX] = PW0GW60.PW0GW35M[PW0GWIMX];

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0G610

// Add row to vselqt01
Function PW0G620()
   /* ------------------------------------------------------------*/
   /* Add a quantity row to vselqt01.*/
   /* ------------------------------------------------------------*/

  set PWMREC empty;

  PWMREC.XWHCD = PW0GW01.XWHCD; /* Warehouse*/
  PWMREC.PKURUNMD = PW0GW00.PKURUNMD;
  PWMREC.TF1CARCD = " "; /* Carrier*/
  PWMREC.PK-SEL-TYP-CD = " 1"; /* Type*/
  PWMREC.OP1DSBDT = PW0GW60.PW0GWDAT[PW0GWIMX]; /* DNSB date*/
  PWMREC.XGPCD = PW0GW60.XGPCD[PW0GWIMX]; /* general product code*/
  PWMREC.XHDCD = PW0GW60.XHDCD[PW0GWIMX]; /* Handling code*/
  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

  if (PW0GW01.XDVCD == "*") /* Division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0GW01.XDVCD;
  end

  if (PW0GW01.XBCCD == "*") /* Brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0GW01.XBCCD;
  end

  if (PW0GW60.PW0GWEQT[PW0GWIMX] != 0)
    PWMREC.PKHPVSFC = PW0GW60.PW0GWEQT[PW0GWIMX]; /* Amt entered*/
  else
    PWMREC.PKHPVSFC = PW0GW60.PW0GWWFC[PW0GWIMX];
    PWMREC.PKHPVSFC = PWMREC.PKHPVSFC + PW0GW60.PW0GWWRP[PW0GWIMX];
  end

  if (PW0GW60.XHDCD[PW0GWIMX] in XHDTBL.XHDCD)
    PW0GW00.PW0GWSUM = PWMREC.PKHPVSFC;
    PW0GW00.PW0GWSUM = mathLib.round(PW0GW00.PW0GWSUM * XHDTBL.XHDSHMM[sysVar.arrayIndex], -mathLib.decimals(PW0GW00.PW0GWSUM));
    PWMREC.PKHPVSMM = PW0GW00.PW0GWSUM;
  end

  if (PW0GW60.PW0GWEQT[PW0GWIMX] != 0       /* There is a quantity*/
   && XHDTBL.XHDSHMM[sysVar.arrayIndex] > 0 /* There is a unit value*/
   && PW0GW00.PW0GWSUM == 0)                /* Less than 1 minute*/

    PWMREC.PKHPVSMM = 1; /* Round up to 1 minute*/
  end

   /* ----------------------------------------------------------*/
   /* Update the pw0gw60 record*/
   /* ----------------------------------------------------------*/

  PW0GW60.PW0GWPMM[PW0GWIMX] = PWMREC.PKHPVSMM; /* Tot min*/
  PW0GW60.PW0GW1MM[PW0GWIMX] = PWMREC.PKHPVSMM; /* Typ 1 min*/
  PW0GW60.PW0GWBQT[PW0GWIMX] = PWMREC.PKHPVSFC; /* Amt ent*/
  PW0GW60.PW0GWEQT[PW0GWIMX] = 0; /* Init entered amt*/

   /* ------------------------------------------------------------*/
   /* Add the row*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("A ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0G620

// Update vselqt01
Function PW0G630()
   /* ------------------------------------------------------------*/
   /* Update a row in vselqt01.*/
   /* ------------------------------------------------------------*/

  set PWMREC empty;

  PWMREC.XWHCD = PW0GW01.XWHCD; /* Warehouse*/
  PWMREC.TF1CARCD = " "; /* Carrier*/
  PWMREC.PK-SEL-TYP-CD = " 1"; /* Type*/
  PWMREC.PKURUNMD = PW0GW00.PKURUNMD; /* Run mode*/
  PWMREC.OP1DSBDT = PW0GW60.PW0GWDAT[PW0GWIMX]; /* DNSB date*/
  PWMREC.XHDCD = PW0GW60.XHDCD[PW0GWIMX]; /* Handling code*/
  PWMREC.XGPCD = PW0GW60.XGPCD[PW0GWIMX]; /* Product code*/

  if (PW0GW01.XDVCD == "*")
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0GW01.XDVCD;
  end

  if (PW0GW01.XBCCD == "*")
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0GW01.XBCCD;
  end

  PW0G631(); /* Select unique to get count*/

  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/
  PWMREC.PKHPVSFC = PW0GW60.PW0GWEQT[PW0GWIMX]; /* Amt entered*/

  if (PW0GW60.XHDCD[PW0GWIMX] in XHDTBL.XHDCD)
    PW0GW00.PW0GWSUM = PW0GW60.PW0GWEQT[PW0GWIMX];
    PW0GW00.PW0GWSUM = mathLib.round(PW0GW00.PW0GWSUM * XHDTBL.XHDSHMM[sysVar.arrayIndex], -mathLib.decimals(PW0GW00.PW0GWSUM));
    PWMREC.PKHPVSMM = PW0GW00.PW0GWSUM;
  end

  if (PW0GW60.PW0GWEQT[PW0GWIMX] > 0        /* There is an amount*/
   && XHDTBL.XHDSHMM[sysVar.arrayIndex] > 0 /* There is a unit value*/
   && PW0GW00.PW0GWSUM == 0)                /* Less than 1 minute calculated*/

    PWMREC.PKHPVSMM = 1;
  end

   /* ------------------------------------------------------------*/
   /* Update the row*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    try
      call "IO5500" ("U ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
    end

  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0G632(); /* Update the storage table*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0G630

// select unique - vselqt01
Function PW0G631()
   /* ------------------------------------------------------------*/
   /* Select unique on vselqt01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("S ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0G631

// Update the pw0gw60 table
Function PW0G632()
   /* ----------------------------------------------------------*/
   /* Update the pw0gw60 record*/
   /* ----------------------------------------------------------*/

  PW0GW60.PW0GW1MM[PW0GWIMX] = PWMREC.PKHPVSMM; /* Typ 1 min*/
  PW0GW00.PW0GWSUM = PW0GW60.PW0GW35M[PW0GWIMX];
  PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW60.PW0GW1MM[PW0GWIMX];
  PW0GW60.PW0GWPMM[PW0GWIMX] = PW0GW00.PW0GWSUM; /* New tot min*/

  PW0GW60.PW0GWBQT[PW0GWIMX] = PW0GW60.PW0GWEQT[PW0GWIMX]; /* Amt ent*/
  PW0GW60.PW0GWEQT[PW0GWIMX] = 0; /* Init entered amt*/


end // end PW0G632

// Update working storage
Function PW0G640()
   /* ---------------------------------------------------------*/
   /* Recreate temporary storage using updated pw0gw60 table*/
   /* ---------------------------------------------------------*/

  PW0GW00.PW0GWFSH = "Y"; /* Set the refresh flag*/

  PW0G110(); /* Purge temp storage*/

  PW0GW00.PW0GWFSH = "N"; /* Reinitalize the purge flag*/

  PW0GW01.XWHCD = PW0GW00.XWHCD; /* Warehouse code*/

  PW0GW01.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW0GW01.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0GW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW0GW01.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW0GW01.XBCABRV = " ";
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0GW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW0GW01.PW0GWFDT = PW0GW00.PW0GWFDT;
  PW0GW01.PW0GWTDT = PW0GW00.PW0GWTDT;

  PW0GW00.PW0GWSMH = 0; /* Init total hours*/

  PW0GW00.PW0GWPGI = 1; /* Page index*/
  PW0GW00.PW0GWIXM = 1; /* Display map line index*/
  PW0GW00.PW0GWIMX = 1; /* Temp store index*/
  PW0GW00.PW0GWSWC = "N"; /* End of cursor*/

  while (PW0GW00.PW0GWSWC == "N") /* UNTIL END OF CURSOR*/

    PW0GS46(); /* Check for eof*/

    /* ----------------------------------------------*/
     /* If not eof, save the data in display storage.*/
    /* ----------------------------------------------*/
    if (PW0GW00.PW0GWSWC == "N") /* Not eof*/

      PW0GW00.PW0GWSMH = PW0GW00.PW0GWSMH + PW0GW60.PW0GWPMM[PW0GWIMX];

      PW0GS48(); /* Save data in display storage*/

    end

    /* -------------------------------------------------------*/
     /* If the page is full, add the page to the storge queue.*/
    /* -------------------------------------------------------*/

    if (PW0GW00.PW0GWIXM > 10) /* Page is full*/

      PW0G180(); /* Add page to temporary storage*/

      PW0GW00.PW0GWIXM = 1; /* Display line index*/

    end
  end

   /* ------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------*/

  if (PW0GW00.PW0GWIXM > 1) /* Page was formatted*/
    PW0G180(); /* Add page to temporary storage*/
  end



end // end PW0G640

// determine min pack-hold date
Function PW0GS20()
   /* -------------------------------------------------------*/
   /* Determine the minimum pack & hold date.*/
   /* -------------------------------------------------------*/

  PW0GW00.PW0GWYMD = VGVar.currentShortGregorianDate; /* Move in current date*/

  if (PW0GW00.PW0GWMYY > 50 /* Year is 51 - 90*/
   && PW0GW00.PW0GWMYY <= 99)

    PW0GW00.PW0GWMCC = 19; /* tag as 19th century*/

  else

    PW0GW00.PW0GWMCC = 20; /* tag as 20th century*/
  end

  TA9REC.TA9BEGDT = PW0GW00.PW0GWMDT; /* move in begin date*/
  PW0GW00.PW0GWCD = PW0GW00.PW0GWMDT; /* move in begin date*/

  if (PKWREC.PKWSELSW == "PK") /* if picking*/

    TA9REC.TA9OFSET = 2; /* add 2 days*/

  else

    TA9REC.TA9OFSET = 3; /* add 3 days*/

  end

   /* ----------------------------------------------------------*/
   /* Call TA0190 to determine a minimum pack and hold date.*/
   /* TA0190 uses a 6 day work week.*/
   /* ----------------------------------------------------------*/

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};

  if (TA9REC.TA9RTNFL == 0) /* good return*/

    PW0GW00.PW0GWMCC = TA9REC.TA9RTNCC; /* century*/
    PW0GW00.PW0GWMYY = TA9REC.TA9RTNYY; /* year*/
    PW0GW00.PW0GWMMM = TA9REC.TA9RTNMM; /* month*/
    PW0GW00.PW0GWMDD = TA9REC.TA9RTNDD; /* day*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOC = "S20"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end PW0GS20

// Verify the date within range
Function PW0GS22()
   /* --------------------------------------------------------*/
   /* Verify that the date is within range.*/
   /* --------------------------------------------------------*/

  if (PKHREC.OP1DSBDT > PW0GW01.PW0GWTDT) /* Outside of range*/

    PW0GW00.PW0GWSWC = "Y"; /* Get out of loop*/
    return;

  end

  if (PKHREC.OP1DSBDT >= PW0GW01.PW0GWFDT /* >= from date*/
   && PKHREC.OP1DSBDT <= PW0GW01.PW0GWTDT) /* <= to date*/

    PW0GW00.PW0GWDCK = "Y"; /* Date is good*/

  end


end // end PW0GS22

// Check carrier date
Function PW0GS24()
   /* ------------------------------------------------------------*/
   /* Check carrier date from vcahld01*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK")
    if (PWFREC.PKBRELDT > PW0GW00.PW0GWCD) /* pk-rel-dt > curr dt*/

      PW0GW00.PW0GWCCF = "N"; /* Tag as bad*/

    end
  else

    if (PWFREC.PKBPLRDT > PW0GW00.PW0GWCD) /* pk-pic-pln-rel-dt >*/
                                           /* ; curr dt*/
      PW0GW00.PW0GWCCF = "N"; /* Tag as bad*/

    end
  end


end // end PW0GS24

// Check hold order date
Function PW0GS26()
   /* ------------------------------------------------------------*/
   /* Check carrier date from vorhld01*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK")
    if (PKBREC.PKBRELDT > PW0GW00.PW0GWCD) /* pk-rel-dt > curr dt*/

      PW0GW00.PW0GWCCF = "N"; /* Tag as bad*/

    end
  else

    if (PKBREC.PKBPLRDT > PW0GW00.PW0GWCD) /* pk-pic-pln-rel-dt >*/
                                           /* ; curr dt*/
      PW0GW00.PW0GWCCF = "N"; /* Tag as bad*/

    end
  end


end // end PW0GS26

// Check hold order date
Function PW0GS28()
   /* ------------------------------------------------------------*/
   /* Check carrier date from vorhld01*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK")
    if (PK9REC.PK9RELDT > PW0GW00.PW0GWCD) /* pk-rel-dt > curr dt*/

      PW0GW00.PW0GWCCF = "N"; /* Tag as bad*/

    end
  else

    if (PK9REC.PK9PLRDT > PW0GW00.PW0GWCD) /* pk-pic-pln-rel-dt >*/
                                           /* ; curr dt*/
      PW0GW00.PW0GWCCF = "N"; /* Tag as bad*/

    end
  end


end // end PW0GS28

// Add to the tables
Function PW0GS30()
   /* ---------------------------------------------------------*/
   /* Add FC and RP to selected by order. Add minutes to table.*/
   /* ---------------------------------------------------------*/

  PW0GW20.PW0GWBOR[PW0GWORI] = PW0GW20.PW0GWBOR[PW0GWORI] + PWNREC.PWNRPQTY;
  PW0GW20.PW0GWBOR[PW0GWORI] = PW0GW20.PW0GWBOR[PW0GWORI] + PWNREC.PWNFCQTY;

   /* -----------------------------------------------*/
   /* Calculate the minutes using the handle code*/
   /* and the handle code table. Do both total*/
   /* minutes and non quantity minutes*/
   /* -----------------------------------------------*/

  PW0GW00.PW0GWSUM = PWNREC.PWNFCQTY;
  PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PWNREC.PWNRPQTY;

  if (PW0GW00.XHDKEY in XHDTBL.XHDKEY)
    PW0GW00.PW0GWSUM = mathLib.round(PW0GW00.PW0GWSUM * XHDTBL.XHDSHMM[sysVar.arrayIndex], -mathLib.decimals(PW0GW00.PW0GWSUM));
    PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW20.PW0GWPMM[PW0GWORI];
    PW0GW20.PW0GWPMM[PW0GWORI] = PW0GW00.PW0GWSUM;

    PW0GW00.PW0GWSUM = PWNREC.PWNFCQTY;
    PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PWNREC.PWNRPQTY;
    PW0GW00.PW0GWSUM = mathLib.round(PW0GW00.PW0GWSUM * XHDTBL.XHDSHMM[sysVar.arrayIndex], -mathLib.decimals(PW0GW00.PW0GWSUM));
    PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW20.PW0GW35M[PW0GWORI];
    PW0GW20.PW0GW35M[PW0GWORI] = PW0GW00.PW0GWSUM;
  end

  if (PWNREC.PWNFCQTY != 0 /* There was an amount*/
   || PWNREC.PWNRPQTY != 0)

    if (PW0GW00.XHDKEY in XHDTBL.XHDKEY       
     && XHDTBL.XHDSHMM[sysVar.arrayIndex] > 0 /* Handling code has a value*/
     && PW0GW00.PW0GWSUM == 0)                /* Less than 1 minute*/

      PW0GW20.PW0GWPMM[PW0GWORI] = 1; /* Rounding up to 1 minutes*/
      PW0GW20.PW0GW35M[PW0GWORI] = 1;
    end
  end


end // end PW0GS30

// Add to the tables
Function PW0GS34()
   /* ---------------------------------------------------------*/
   /* Add FC and RP to selected by order or quantities.*/
   /* ---------------------------------------------------------*/

  if (PWMREC.PK-SEL-TYP-CD == " 1")

    PW0GW30.PW0GWBQT[PW0GWQTI] = PW0GW30.PW0GWBQT[PW0GWQTI] + PWMREC.PKHPVSRP;
    PW0GW30.PW0GWBQT[PW0GWQTI] = PW0GW30.PW0GWBQT[PW0GWQTI] + PWMREC.PKHPVSFC;
    PW0GW30.PW0GWPMM[PW0GWQTI] = PW0GW30.PW0GWPMM[PW0GWQTI] + PWMREC.PKHPVSMM;
    PW0GW30.PW0GW1MM[PW0GWQTI] = PW0GW30.PW0GW1MM[PW0GWQTI] + PWMREC.PKHPVSMM;

  else

    PW0GW30.PW0GWBOR[PW0GWQTI] = PW0GW30.PW0GWBOR[PW0GWQTI] + PWMREC.PKHPVSRP;
    PW0GW30.PW0GWBOR[PW0GWQTI] = PW0GW30.PW0GWBOR[PW0GWQTI] + PWMREC.PKHPVSFC;
    PW0GW30.PW0GWPMM[PW0GWQTI] = PW0GW30.PW0GWPMM[PW0GWQTI] + PWMREC.PKHPVSMM;
    PW0GW30.PW0GW35M[PW0GWQTI] = PW0GW30.PW0GW35M[PW0GWQTI] + PWMREC.PKHPVSMM;

  end


end // end PW0GS34

// Verify the date within range
Function PW0GS36()
   /* --------------------------------------------------------*/
   /* Verify that the date is within range. Use the non pack*/
   /* and hold dates, and the dates within the range.*/
   /* --------------------------------------------------------*/

  if (PWNREC.OP1DSBDT > PW0GW01.PW0GWTDT)
    PW0GW00.PW0GWSWC = "Y";
    return;
  end

  if (PWNREC.OP1DSBDT >= PW0GW01.PW0GWFDT /* >= from date*/
   && PWNREC.OP1DSBDT <= PW0GW01.PW0GWTDT) /* <= to date*/

    if (PW0GM001.XBCCD == "*") /* ColeHaan*/
      if (PWNREC.XBCCD != "08")

        if (PWNREC.XDVCD == "01" /* In-store promo*/
         && PWNREC.XGPCD == "01")
           /* /next sentence*/
        else
          PW0GW00.PW0GWDCK = "Y";
          return;
        end
      end
    else
      if (PWNREC.XDVCD == "01" /* In-store promo*/
       && PWNREC.XGPCD == "01")
         /* /next sentence*/
      else
        PW0GW00.PW0GWDCK = "Y";
        return;
      end
    end
  end


end // end PW0GS36

// Add non selected to tbls
Function PW0GS40()
   /* ---------------------------------------------------------*/
   /* Add FC and RP to non selected fields*/
   /* ---------------------------------------------------------*/

  PW0GW40.PW0GWWRP[PW0GWPLI] = PW0GW40.PW0GWWRP[PW0GWPLI] + PWNREC.PWNRPQTY;
  PW0GW40.PW0GWWFC[PW0GWPLI] = PW0GW40.PW0GWWFC[PW0GWPLI] + PWNREC.PWNFCQTY;

  if (PW0GW00.XHDKEY in XHDTBL.XHDKEY) /* Calculate minutes*/
    PW0GW00.PW0GWSUM = PWNREC.PWNRPQTY;
    PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PWNREC.PWNFCQTY;
    PW0GW00.PW0GWSUM = mathLib.round(PW0GW00.PW0GWSUM * XHDTBL.XHDSHMM[sysVar.arrayIndex], -mathLib.decimals(PW0GW00.PW0GWSUM));
    PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW40.PW0GWNSH[PW0GWPLI];
    PW0GW40.PW0GWNSH[PW0GWPLI] = PW0GW00.PW0GWSUM;
  end

  if (PWNREC.PWNFCQTY != 0 /* There is an amount*/
   || PWNREC.PWNRPQTY != 0)

    if (PW0GW00.XHDKEY in XHDTBL.XHDKEY       /* Calculate minutes*/
     && XHDTBL.XHDSHMM[sysVar.arrayIndex] > 0 /* Time unit value > 0*/
     && PW0GW00.PW0GWSUM == 0)                /* Less than 1 minute computed*/

      PW0GW40.PW0GWNSH[PW0GWPLI] = 1; /* Round up to 1 minute*/

    end
  end


end // end PW0GS40

// Merge the order and quant tbl
Function PW0GS42()
   /* -----------------------------------------------------------*/
   /* Merge the vselor01 and vselqt01 tables.*/
   /* -----------------------------------------------------------*/

  PW0GW00.PW0GWORI = 1; /* Vselor01 index*/
  PW0GW00.PW0GWQTI = 1; /* Vselqt01 index*/
  PW0GW00.PW0GWIMX = 0; /* Merge table index*/
  PW0GW00.PW0GWODN = "N"; /* Order table done switch*/
  PW0GW00.PW0GWQDN = "N"; /* Quantity table done switch*/

  PW0GS43(); /* Check for eofs*/

  while (PW0GW00.PW0GWODN == "N" /* Order table not done*/
   || PW0GW00.PW0GWQDN == "N") /* Quantity table not done*/

    PW0GS74(); /* Load the table*/

    PW0GS43(); /* Check for eof*/

    if (PW0GW00.PW0GWIMX == 100)
      if (PW0GW00.PW0GWODN == "N")
        PW0GW00.PW0GWMRE = "Y"; /* Set the more data flag*/
      end

      if (PW0GW00.PW0GWQDN == "N")
        PW0GW00.PW0GWMRE = "Y"; /* Set the more data flag*/
      end
      PW0GW00.PW0GWODN = "Y"; /* Order table done*/
      PW0GW00.PW0GWQDN = "Y"; /* Quantity table done*/
    end

  end


end // end PW0GS42

// Check for qty and order eof
Function PW0GS43()
   /* -----------------------------------------------------------*/
   /* Check for eof on the vselor01 and vselqt01 tables.*/
   /* -----------------------------------------------------------*/

  if (PW0GW00.PW0GWODN == "N")
    if (PW0GW20.PW0GWDAT[PW0GWORI] == 0 /* Order table done*/
     && PW0GW20.XHDCD[PW0GWORI] == " "  
     && PW0GW20.XGPCD[PW0GWORI] == " "  
     && PW0GW20.PW0GWWFC[PW0GWORI] == 0 
     && PW0GW20.PW0GWWRP[PW0GWORI] == 0 
     && PW0GW20.PW0GWNSH[PW0GWORI] == 0 
     && PW0GW20.PW0GWBOR[PW0GWORI] == 0 
     && PW0GW20.PW0GWBQT[PW0GWORI] == 0 
     && PW0GW20.PW0GWPMM[PW0GWORI] == 0)

      PW0GW00.PW0GWORI = 100;
      PW0GW20.PW0GWDAT[PW0GWORI] = 99999999;
      PW0GW20.XHDCD[PW0GWORI] = "999";
      PW0GW20.XGPCD[PW0GWORI] = "99";
      PW0GW00.PW0GWODN = "Y";

    end
  end

  if (PW0GW00.PW0GWQDN == "N")
    if (PW0GW30.PW0GWDAT[PW0GWQTI] == 0 /* Quantity table done*/
     && PW0GW30.XHDCD[PW0GWQTI] == " "  
     && PW0GW30.XGPCD[PW0GWQTI] == " "  
     && PW0GW30.PW0GWWFC[PW0GWQTI] == 0 
     && PW0GW30.PW0GWWRP[PW0GWQTI] == 0 
     && PW0GW30.PW0GWNSH[PW0GWQTI] == 0 
     && PW0GW30.PW0GWBOR[PW0GWQTI] == 0 
     && PW0GW30.PW0GWBQT[PW0GWQTI] == 0 
     && PW0GW30.PW0GWPMM[PW0GWQTI] == 0)

      PW0GW00.PW0GWQTI = 100;
      PW0GW30.PW0GWDAT[PW0GWQTI] = 99999999;
      PW0GW30.XHDCD[PW0GWQTI] = "999";
      PW0GW30.XGPCD[PW0GWQTI] = "99";
      PW0GW00.PW0GWQDN = "Y"; /* Max out the counter*/

    end
  end


end // end PW0GS43

// Merge ord/qty & non-sel tbles
Function PW0GS44()
   /* -----------------------------------------------------------*/
   /* Merge the order/quantity table with the non-selected tbl*/
   /* -----------------------------------------------------------*/

  PW0GW00.PW0GWORI = 1; /* Order/Quantity index*/
  PW0GW00.PW0GWPLI = 1; /* Pool - non selected index*/
  PW0GW00.PW0GWIMX = 0; /* Merge table index*/
  PW0GW00.PW0GWODN = "N"; /* Order table done switch*/
  PW0GW00.PW0GWPDN = "N"; /* Pool table not done switch*/

  PW0GS45(); /* Check for eofs*/

  while (PW0GW00.PW0GWODN == "N" /* Order table not done*/
   || PW0GW00.PW0GWPDN == "N") /* Pool table not done*/

    PW0GS84(); /* Load the table*/

    PW0GS45(); /* ; Check for eofs*/

    if (PW0GW00.PW0GWIMX == 100)
      if (PW0GW00.PW0GWODN == "N")
        PW0GW00.PW0GWMRE = "Y"; /* Set the more data flag*/
      end

      if (PW0GW00.PW0GWPDN == "N")
        PW0GW00.PW0GWMRE = "Y"; /* Set the more data flag*/
      end
      PW0GW00.PW0GWODN = "Y"; /* Order table done*/
      PW0GW00.PW0GWPDN = "Y"; /* Quantity table done*/
    end

  end


end // end PW0GS44

// Check for ord/qty/non-sel eof
Function PW0GS45()
   /* -----------------------------------------------------------*/
   /* Check the order/quantity & non-selected tbl eofs*/
   /* -----------------------------------------------------------*/

  if (PW0GW00.PW0GWPDN == "N")
    if (PW0GW40.PW0GWDAT[PW0GWPLI] == 0 /* There are no pool rcds*/
     && PW0GW40.XHDCD[PW0GWPLI] == " "  
     && PW0GW40.XGPCD[PW0GWPLI] == " "  
     && PW0GW40.PW0GWWFC[PW0GWPLI] == 0 
     && PW0GW40.PW0GWWRP[PW0GWPLI] == 0 
     && PW0GW40.PW0GWNSH[PW0GWPLI] == 0 
     && PW0GW40.PW0GWBOR[PW0GWPLI] == 0 
     && PW0GW40.PW0GWBQT[PW0GWPLI] == 0 
     && PW0GW40.PW0GWPMM[PW0GWPLI] == 0)

      PW0GW00.PW0GWPLI = 100;
      PW0GW40.PW0GWDAT[PW0GWPLI] = 99999999;
      PW0GW40.XHDCD[PW0GWPLI] = "999";
      PW0GW40.XGPCD[PW0GWPLI] = "99";
      PW0GW00.PW0GWPDN = "Y"; /* There are no records*/

    end
  end

  if (PW0GW00.PW0GWODN == "N")
    if (PW0GW50.PW0GWDAT[PW0GWORI] == 0 /* There are no ord/qty rcd*/
     && PW0GW50.XHDCD[PW0GWORI] == " "  
     && PW0GW50.XGPCD[PW0GWORI] == " "  
     && PW0GW50.PW0GWWFC[PW0GWORI] == 0 
     && PW0GW50.PW0GWWRP[PW0GWORI] == 0 
     && PW0GW50.PW0GWNSH[PW0GWORI] == 0 
     && PW0GW50.PW0GWBOR[PW0GWORI] == 0 
     && PW0GW50.PW0GWBQT[PW0GWORI] == 0 
     && PW0GW50.PW0GWPMM[PW0GWORI] == 0)

      PW0GW00.PW0GWORI = 100;
      PW0GW50.PW0GWDAT[PW0GWORI] = 99999999;
      PW0GW50.XHDCD[PW0GWORI] = "999";
      PW0GW50.XGPCD[PW0GWORI] = "99";
      PW0GW00.PW0GWODN = "Y";

    end
  end



end // end PW0GS45

// Check for merged tbl eof
Function PW0GS46()
   /* -----------------------------------------------------------*/
   /* Check for end of file on the merged table.*/
   /* -----------------------------------------------------------*/

  if (PW0GW00.PW0GWIMX == 101)

    PW0GW00.PW0GWSWC = "Y"; /* Set eof flag*/

  else

    if (PW0GW60.PW0GWDAT[PW0GWIMX] == 0 /* Merged table is done*/
     && PW0GW60.XHDCD[PW0GWIMX] == " "  
     && PW0GW60.XGPCD[PW0GWIMX] == " "  
     && PW0GW60.PW0GWWFC[PW0GWIMX] == 0 
     && PW0GW60.PW0GWWRP[PW0GWIMX] == 0 
     && PW0GW60.PW0GWNSH[PW0GWIMX] == 0 
     && PW0GW60.PW0GWBOR[PW0GWIMX] == 0 
     && PW0GW60.PW0GWBQT[PW0GWIMX] == 0 
     && PW0GW60.PW0GWPMM[PW0GWIMX] == 0)

      PW0GW00.PW0GWSWC = "Y"; /* EOF flag*/

    end
  end


end // end PW0GS46

// Move data to the map rcd
Function PW0GS48()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (PW0GW00.PW0GWIXM == 1)

    PW0GW00.PW0GWIBX[PW0GWPGI] = PW0GW00.PW0GWIMX; /* Store beg ndx*/
    PW0GW00.PW0GWIEX[PW0GWPGI] = PW0GW00.PW0GWIMX; /* Set ending ndx*/
    PW0GW00.PW0GWIEX[PW0GWPGI] = PW0GW00.PW0GWIEX[PW0GWPGI] + 9;
    PW0GW00.PW0GWPGI = PW0GW00.PW0GWPGI + 1;

  end

  if (PW0GW00.TA5TSQIX > 0 /* Not the first page*/
   && PW0GW00.PW0GWIXM == 1) /* first line on page*/

    PW0GW01.XWHCD = PW0GW00.XWHCD; /* Warehouse code*/
    PW0GW01.PW0GWFDT = PW0GW00.PW0GWFDT;
    PW0GW01.PW0GWTDT = PW0GW00.PW0GWTDT;

    PW0GW01.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
    if (PKWREC.XDVCD[1] == "*")
      PW0GW01.XDVDESC = "ALL DIVISIONS";
    else
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0GW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    end

    PW0GW01.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
    if (PKWREC.XBCCD[1] == "*")
      PW0GW01.XBCABRV = " ";
    else
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW0GW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
    end
  end

  PW0GW01.PW0GWSEL[PW0GWIXM] = PW0GW60.PW0GWSEL[PW0GWIMX]; /* Select*/
  PW0GW01.PW0GWDYY[PW0GWIXM] = PW0GW60.PW0GWDYY[PW0GWIMX]; /* DNSB yr*/
  PW0GW01.PW0GWDMM[PW0GWIXM] = PW0GW60.PW0GWDMM[PW0GWIMX]; /* DNSB mo*/
  PW0GW01.PW0GWDDD[PW0GWIXM] = PW0GW60.PW0GWDDD[PW0GWIMX]; /* DNSB da*/
  PW0GW01.PW0GWHCD[PW0GWIXM] = PW0GW60.XHDCD[PW0GWIMX]; /* Handle code*/
  PW0GW01.PW0GWGPC[PW0GWIXM] = PW0GW60.XGPCD[PW0GWIMX];
  PW0GW01.PW0GWWFC[PW0GWIXM] = PW0GW60.PW0GWWFC[PW0GWIMX]; /* FC*/
  PW0GW01.PW0GWWRP[PW0GWIXM] = PW0GW60.PW0GWWRP[PW0GWIMX]; /* RP*/
  PW0GW01.PW0GWNSH[PW0GWIXM] = PW0GW60.PW0GWNSH[PW0GWIMX]; /* NonSel min*/
  PW0GW01.PW0GWBOR[PW0GWIXM] = PW0GW60.PW0GWBOR[PW0GWIMX];
                                   /* By Order*/
  PW0GW01.PW0GWBQT[PW0GWIXM] = PW0GW60.PW0GWBQT[PW0GWIMX]; /* By Qty*/
  PW0GW01.PW0GWPMM[PW0GWIXM] = PW0GW60.PW0GWPMM[PW0GWIMX]; /* Sel min*/

  PW0GW00.PW0GWIXM = PW0GW00.PW0GWIXM + 1; /* Increment line index*/
  PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1; /* Increment storage index*/


end // end PW0GS48

// Update temporary storage page
Function PW0GS50()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0GS50

// Read temporary storage page
Function PW0GS52()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0GW01.XXXTSLEN = PW0GW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0GW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0GS52

// Read temporary storage page
Function PW0GS53()
   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'to'*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

    return; /* Normal return code*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "DNSB TO DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S53"; /* Module identification*/
    converseLib.validationFailed(29); /* System error occurred*/

    return; /* exit to display map*/

  end


end // end PW0GS53

// Merge the order and quant tbl
Function PW0GS74()
   /* --------------------------------------------*/
   /* Increment the combined table index*/
   /* --------------------------------------------*/

  PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;

   /* --------------------------------------------*/
   /* Order key is less than the quantity key*/
   /* --------------------------------------------*/

  if (PW0GW20.PW0GWKEY[PW0GWORI] < PW0GW30.PW0GWKEY[PW0GWQTI])

    PW0GW50.PW0GWSOR[PW0GWIMX] = PW0GW20.PW0GWSOR[PW0GWORI];
    PW0GW50.PW0GWPMM[PW0GWIMX] = PW0GW20.PW0GWPMM[PW0GWORI];
    PW0GW50.PW0GW35M[PW0GWIMX] = PW0GW20.PW0GW35M[PW0GWORI];
    PW0GW00.PW0GWORI = PW0GW00.PW0GWORI + 1;

  else

    if (PW0GW20.PW0GWKEY[PW0GWORI] > PW0GW30.PW0GWKEY[PW0GWQTI]
     || PW0GW20.PW0GWKEY[PW0GWORI] == PW0GW30.PW0GWKEY[PW0GWQTI])

      /* ------------------------------------------------------*/
       /* Quantity key is less than the order key*/
      /* ------------------------------------------------------*/

      if (PW0GW20.PW0GWKEY[PW0GWORI] > PW0GW30.PW0GWKEY[PW0GWQTI])

        PW0GW50.PW0GWSOR[PW0GWIMX] = PW0GW30.PW0GWSOR[PW0GWQTI];
        PW0GW50.PW0GWPMM[PW0GWIMX] = PW0GW30.PW0GWPMM[PW0GWQTI];
        PW0GW50.PW0GW1MM[PW0GWIMX] = PW0GW30.PW0GW1MM[PW0GWQTI];
        PW0GW50.PW0GW35M[PW0GWIMX] = PW0GW30.PW0GW35M[PW0GWQTI];
        PW0GW00.PW0GWQTI = PW0GW00.PW0GWQTI + 1;

      else

        /* ----------------------------------------------------*/
         /* Keys are equal*/
        /* ----------------------------------------------------*/

        if (PW0GW00.PW0GWODN == "N" /* A non zero rcd*/
         && PW0GW00.PW0GWQDN == "N") /* A non zero rcd*/

          PW0GW50.PW0GWKEY[PW0GWIMX] = PW0GW20.PW0GWKEY[PW0GWORI];

          PW0GW00.PW0GWSUM = 0; /* Add the by order amounts*/
          PW0GW00.PW0GWSUM = PW0GW20.PW0GWBOR[PW0GWORI];
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW30.PW0GWBOR[PW0GWQTI];
          PW0GW50.PW0GWBOR[PW0GWIMX] = PW0GW00.PW0GWSUM;

          PW0GW00.PW0GWSUM = 0; /* Add the by quantity amounts*/
          PW0GW00.PW0GWSUM = PW0GW20.PW0GWBQT[PW0GWORI];
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW30.PW0GWBQT[PW0GWQTI];
          PW0GW50.PW0GWBQT[PW0GWIMX] = PW0GW00.PW0GWSUM;

          PW0GW00.PW0GWSUM = 0; /* Add the minutes*/
          PW0GW00.PW0GWSUM = PW0GW20.PW0GWPMM[PW0GWORI];
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW30.PW0GWPMM[PW0GWQTI];
          PW0GW50.PW0GWPMM[PW0GWIMX] = PW0GW00.PW0GWSUM;

          PW0GW00.PW0GWSUM = 0; /* Add the minutes*/
          PW0GW00.PW0GWSUM = PW0GW20.PW0GW1MM[PW0GWORI];
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW30.PW0GW1MM[PW0GWQTI];
          PW0GW50.PW0GW1MM[PW0GWIMX] = PW0GW00.PW0GWSUM;

          PW0GW00.PW0GWSUM = 0; /* Add the minutes*/
          PW0GW00.PW0GWSUM = PW0GW20.PW0GW35M[PW0GWORI];
          PW0GW00.PW0GWSUM = PW0GW00.PW0GWSUM + PW0GW30.PW0GW35M[PW0GWQTI];
          PW0GW50.PW0GW35M[PW0GWIMX] = PW0GW00.PW0GWSUM;

          PW0GW00.PW0GWORI = PW0GW00.PW0GWORI + 1; /* Increment order index*/
          PW0GW00.PW0GWQTI = PW0GW00.PW0GWQTI + 1; /* Increment quant index*/

        end
      end
    end
  end


end // end PW0GS74

// Merge the order and quant tbl
Function PW0GS84()
   /* ---------------------------------------------*/
   /* Increment the combined table index*/
   /* ---------------------------------------------*/

  PW0GW00.PW0GWIMX = PW0GW00.PW0GWIMX + 1;

   /* --------------------------------------------*/
   /* Order/Quantity key less than non-sel key*/
   /* --------------------------------------------*/

  if (PW0GW50.PW0GWKEY[PW0GWORI] < PW0GW40.PW0GWKEY[PW0GWPLI])

    /* -------------------------------------------------*/
     /* Move the w50 item to w60*/
    /* -------------------------------------------------*/

    PW0GW60.PW0GWKEY[PW0GWIMX] = PW0GW50.PW0GWKEY[PW0GWORI];
    PW0GW60.PW0GWWFC[PW0GWIMX] = PW0GW50.PW0GWWFC[PW0GWORI];
    PW0GW60.PW0GWWRP[PW0GWIMX] = PW0GW50.PW0GWWRP[PW0GWORI];
    PW0GW60.PW0GWNSH[PW0GWIMX] = PW0GW50.PW0GWNSH[PW0GWORI];
    PW0GW60.PW0GWBOR[PW0GWIMX] = PW0GW50.PW0GWBOR[PW0GWORI];
    PW0GW60.PW0GWBQT[PW0GWIMX] = PW0GW50.PW0GWBQT[PW0GWORI];
    PW0GW60.PW0GWPMM[PW0GWIMX] = PW0GW50.PW0GWPMM[PW0GWORI];
    PW0GW60.PW0GW1MM[PW0GWIMX] = PW0GW50.PW0GW1MM[PW0GWORI];
    PW0GW60.PW0GW35M[PW0GWIMX] = PW0GW50.PW0GW35M[PW0GWORI];

    PW0GW00.PW0GWSMH = PW0GW00.PW0GWSMH + PW0GW50.PW0GWPMM[PW0GWORI];

    PW0GW00.PW0GWORI = PW0GW00.PW0GWORI + 1;

  else

    if (PW0GW50.PW0GWKEY[PW0GWORI] > PW0GW40.PW0GWKEY[PW0GWPLI]
     || PW0GW50.PW0GWKEY[PW0GWORI] == PW0GW40.PW0GWKEY[PW0GWPLI])

      /* ------------------------------------------------------*/
       /* Non-selected key is less than the ord/qty key*/
      /* ------------------------------------------------------*/

      if (PW0GW50.PW0GWKEY[PW0GWORI] > PW0GW40.PW0GWKEY[PW0GWPLI])

        /* ---------------------------------------------------*/
         /* Move the w40 item to w60*/
        /* ---------------------------------------------------*/

        PW0GW60.PW0GWKEY[PW0GWIMX] = PW0GW40.PW0GWKEY[PW0GWPLI];
        PW0GW60.PW0GWWFC[PW0GWIMX] = PW0GW40.PW0GWWFC[PW0GWPLI];
        PW0GW60.PW0GWWRP[PW0GWIMX] = PW0GW40.PW0GWWRP[PW0GWPLI];
        PW0GW60.PW0GWNSH[PW0GWIMX] = PW0GW40.PW0GWNSH[PW0GWPLI];
        PW0GW60.PW0GWBOR[PW0GWIMX] = PW0GW40.PW0GWBOR[PW0GWPLI];
        PW0GW60.PW0GWBQT[PW0GWIMX] = PW0GW40.PW0GWBQT[PW0GWPLI];
        PW0GW60.PW0GWPMM[PW0GWIMX] = PW0GW40.PW0GWPMM[PW0GWPLI];
        PW0GW60.PW0GW1MM[PW0GWIMX] = PW0GW40.PW0GW1MM[PW0GWPLI];
        PW0GW60.PW0GW35M[PW0GWIMX] = PW0GW40.PW0GW35M[PW0GWPLI];

        PW0GW00.PW0GWPLI = PW0GW00.PW0GWPLI + 1;
      else

        /* ----------------------------------------------------*/
         /* Keys are equal*/
        /* ----------------------------------------------------*/

        PW0GW60.PW0GWKEY[PW0GWIMX] = PW0GW40.PW0GWKEY[PW0GWPLI];
        PW0GW60.PW0GWWFC[PW0GWIMX] = PW0GW40.PW0GWWFC[PW0GWPLI];
        PW0GW60.PW0GWWRP[PW0GWIMX] = PW0GW40.PW0GWWRP[PW0GWPLI];
        PW0GW60.PW0GWNSH[PW0GWIMX] = PW0GW40.PW0GWNSH[PW0GWPLI];

        PW0GW60.PW0GWBOR[PW0GWIMX] = PW0GW50.PW0GWBOR[PW0GWORI];
        PW0GW60.PW0GWBQT[PW0GWIMX] = PW0GW50.PW0GWBQT[PW0GWORI];
        PW0GW60.PW0GWPMM[PW0GWIMX] = PW0GW50.PW0GWPMM[PW0GWORI];
        PW0GW60.PW0GW1MM[PW0GWIMX] = PW0GW50.PW0GW1MM[PW0GWORI];
        PW0GW60.PW0GW35M[PW0GWIMX] = PW0GW50.PW0GW35M[PW0GWORI];

        PW0GW00.PW0GWSMH = PW0GW00.PW0GWSMH + PW0GW50.PW0GWPMM[PW0GWORI];

        PW0GW00.PW0GWORI = PW0GW00.PW0GWORI + 1; /* Increment order index*/
        PW0GW00.PW0GWPLI = PW0GW00.PW0GWPLI + 1; /* Increment quant index*/

      end
    end
  end


end // end PW0GS84

//*** RECORD=PW0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0GW00 type basicRecord
  10 PW0GWSWF PW0GWSWF ; 
  10 PW0GWSWR PW0GWSWR ; 
  10 PW0GWQTI PW0GWQTI ; 
  10 PW0GWPGI PW0GWPGI ; 
  10 PW0GWCD PW0GWCD ; 
  10 PW0GWMDT PW0GWMDT ; 
    15 PW0GWMCC PW0GWMCC ; 
    15 PW0GWYMD PW0GWYMD ; 
      20 PW0GWMYY PW0GWMYY ; 
      20 PW0GWMMM PW0GWMMM ; 
      20 PW0GWMDD PW0GWMDD ; 
  10 PW0GWHDA PW0GWHDA ; 
    15 PW0GWHCC PW0GWHCC ; 
    15 PW0GWHMD PW0GWHMD ; 
      20 PW0GWHYY PW0GWHYY ; 
      20 PW0GWHMM PW0GWHMM ; 
      20 PW0GWHDD PW0GWHDD ; 
  10 PW0GMSGN PW0GMSGN ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXLOCID XXXLOCID ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PW0GWSWU PW0GWSWU ; 
  10 PW0GWIXM PW0GWIXM ; 
  10 PW0GWZRO PW0GWZRO ; 
  10 PW0GWSWC PW0GWSWC ; 
  10 PW0GWTIT PW0GWTIT ; 
  10 XWHCD XWHCD ; 
  10 PW0GWFDT PW0GWFDT ; 
    15 PW0GWFCC PW0GWFCC ; 
    15 PW0GWFRD PW0GWFRD ; 
      20 PW0GWFYY PW0GWFYY ; 
      20 PW0GWFMM PW0GWFMM ; 
      20 PW0GWFDD PW0GWFDD ; 
  10 PW0GWTDT PW0GWTDT ; 
    15 PW0GWTCC PW0GWTCC ; 
    15 PW0GWTOD PW0GWTOD ; 
      20 PW0GWTYY PW0GWTYY ; 
      20 PW0GWTMM PW0GWTMM ; 
      20 PW0GWTDD PW0GWTDD ; 
  10 PW0GWFFL PW0GWFFL ; 
  10 PW0GWORI PW0GWORI ; 
  10 PW0GWLMT PW0GWLMT ; 
  10 PW0GWCCF PW0GWCCF ; 
  10 PW0GWPLI PW0GWPLI ; 
  10 PW0GWFTM PW0GWFTM ; 
  10 PW0GWMRE PW0GWMRE ; 
  10 PW0GWMIT PW0GWMIT ; 
  10 PW0GWTIM PW0GWTIM ; 
    15 PW0GWHRS PW0GWHRS ; 
    15 PW0GWCOL PW0GWCOL ; 
    15 PW0GWMIN PW0GWMIN ; 
  10 PW0GWDCK PW0GWDCK ; 
  10 PW0GWCKY PW0GWCKY ; 
    15 PW0GWDAT PW0GWDAT ; 
      20 PW0GWDCC PW0GWDCC ; 
      20 PW0GWDYY PW0GWDYY ; 
      20 PW0GWDMM PW0GWDMM ; 
      20 PW0GWDDD PW0GWDDD ; 
    15 XHDKEY XHDKEY ; 
      20 XHDCD XHDCD ; 
      20 XGPCD XGPCD ; 
  10 PW0GWFLG PW0GWFLG ; 
  10 PW0GWIMX PW0GWIMX ; 
  10 PW0GW50I PW0GW50I ; 
  10 PW0GWODN PW0GWODN ; 
  10 PW0GWQDN PW0GWQDN ; 
  10 PW0GWPDN PW0GWPDN ; 
  10 PW0GWORR PW0GWORR ; 
  10 PW0GWPHR PW0GWPHR ; 
  10 PW0GWQTR PW0GWQTR ; 
  10 PW0GWSUM PW0GWSUM ; 
  10 PW0GWDTC PW0GWDTC ; 
  10 PW0GWIBX PW0GWIBX [10] ; 
  10 PW0GWIEX PW0GWIEX [10] ; 
  10 PW0GWFSH PW0GWFSH ; 
  10 PW0GWKCH PW0GWKCH ; 
  10 PW0GWSMH PW0GWSMH ; 
  10 PKURUNMD PKURUNMD ; 
  10 PW0GWPIX PW0GWPIX ; 
  10 PW0GWPCT PW0GWPCT ; 
  10 PW0GW80I PW0GW80I ; 
  10 PW0GW80F PW0GW80F ; 
  10 PW0GWPRQ PW0GWPRQ ; 
end // end PW0GW00

//*** RECORD=PW0GW01 ****
// ----------------------------
// Map work record
// ----------------------------
// ***********************
Record PW0GW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(403) ; 
    10 XWHCD XWHCD ; 
    10 XDVCD XDVCD ; 
    10 XDVDESC XDVDESC ; 
    10 XBCCD XBCCD ; 
    10 XBCABRV XBCABRV ; 
    10 PW0GWFDT PW0GWFDT ; 
      15 PW0GWFCC PW0GWFCC ; 
      15 PW0GWFRD PW0GWFRD ; 
        20 PW0GWFYY PW0GWFYY ; 
        20 PW0GWFMM PW0GWFMM ; 
        20 PW0GWFDD PW0GWFDD ; 
    10 PW0GWTDT PW0GWTDT ; 
      15 PW0GWTCC PW0GWTCC ; 
      15 PW0GWTOD PW0GWTOD ; 
        20 PW0GWTYY PW0GWTYY ; 
        20 PW0GWTMM PW0GWTMM ; 
        20 PW0GWTDD PW0GWTDD ; 
    10 PW0GWMAP PW0GWMAP [10] ; 
      15 PW0GWSEL PW0GWSEL ; 
      15 PW0GWDDT PW0GWDDT ; 
        20 PW0GWDYY PW0GWDYY ; 
        20 PW0GWDMM PW0GWDMM ; 
        20 PW0GWDDD PW0GWDDD ; 
      15 PW0GWHCD PW0GWHCD ; 
      15 PW0GWGPC PW0GWGPC ; 
      15 PW0GWWFC PW0GWWFC ; 
      15 PW0GWWRP PW0GWWRP ; 
      15 PW0GWNSH PW0GWNSH ; 
      15 PW0GWBOR PW0GWBOR ; 
      15 PW0GWBQT PW0GWBQT ; 
      15 PW0GWPMM PW0GWPMM ; 
end // end PW0GW01

//*** RECORD=PW0GW20 ****
// -----------------------------------
// Process Selected by Order
// -----------------------------------
// ***********************
Record PW0GW20 type basicRecord
  5 PW0GWTBL PW0GWTBL ; 
    10 PW0GWSOR PW0GWSOR [100] ; 
      15 PW0GWKEY PW0GWKEY ; 
        20 PW0GWDAT PW0GWDAT ; 
          25 PW0GWDCC PW0GWDCC ; 
          25 PW0GWDYY PW0GWDYY ; 
          25 PW0GWDMM PW0GWDMM ; 
          25 PW0GWDDD PW0GWDDD ; 
        20 XHDKEY XHDKEY ; 
          25 XHDCD XHDCD ; 
          25 XGPCD XGPCD ; 
      15 PW0GWWFC PW0GWWFC ; 
      15 PW0GWWRP PW0GWWRP ; 
      15 PW0GWNSH PW0GWNSH ; 
      15 PW0GWBOR PW0GWBOR ; 
      15 PW0GWBQT PW0GWBQT ; 
      15 PW0GWPMM PW0GWPMM ; 
      15 PW0GW35M PW0GW35M ; 
      15 PW0GW1MM PW0GW1MM ; 
end // end PW0GW20

//*** RECORD=PW0GW30 ****
// -----------------------------------
// Process Selected by Order
// -----------------------------------
// ***********************
Record PW0GW30 type basicRecord
  5 PW0GWTBL PW0GWTBL ; 
    10 PW0GWSOR PW0GWSOR [100] ; 
      15 PW0GWKEY PW0GWKEY ; 
        20 PW0GWDAT PW0GWDAT ; 
          25 PW0GWDCC PW0GWDCC ; 
          25 PW0GWDYY PW0GWDYY ; 
          25 PW0GWDMM PW0GWDMM ; 
          25 PW0GWDDD PW0GWDDD ; 
        20 XHDKEY XHDKEY ; 
          25 XHDCD XHDCD ; 
          25 XGPCD XGPCD ; 
      15 PW0GWWFC PW0GWWFC ; 
      15 PW0GWWRP PW0GWWRP ; 
      15 PW0GWNSH PW0GWNSH ; 
      15 PW0GWBOR PW0GWBOR ; 
      15 PW0GWBQT PW0GWBQT ; 
      15 PW0GWPMM PW0GWPMM ; 
      15 PW0GW35M PW0GW35M ; 
      15 PW0GW1MM PW0GW1MM ; 
end // end PW0GW30

//*** RECORD=PW0GW40 ****
// -----------------------------------
// Process Selected by Order
// -----------------------------------
// ***********************
Record PW0GW40 type basicRecord
  5 PW0GWTBL PW0GWTBL ; 
    10 PW0GWSOR PW0GWSOR [100] ; 
      15 PW0GWKEY PW0GWKEY ; 
        20 PW0GWDAT PW0GWDAT ; 
          25 PW0GWDCC PW0GWDCC ; 
          25 PW0GWDYY PW0GWDYY ; 
          25 PW0GWDMM PW0GWDMM ; 
          25 PW0GWDDD PW0GWDDD ; 
        20 XHDKEY XHDKEY ; 
          25 XHDCD XHDCD ; 
          25 XGPCD XGPCD ; 
      15 PW0GWWFC PW0GWWFC ; 
      15 PW0GWWRP PW0GWWRP ; 
      15 PW0GWNSH PW0GWNSH ; 
      15 PW0GWBOR PW0GWBOR ; 
      15 PW0GWBQT PW0GWBQT ; 
      15 PW0GWPMM PW0GWPMM ; 
      15 PW0GW35M PW0GW35M ; 
      15 PW0GW1MM PW0GW1MM ; 
end // end PW0GW40

//*** RECORD=PW0GW50 ****
// -----------------------------------
// Process Selected by Order
// -----------------------------------
// ***********************
Record PW0GW50 type basicRecord
  5 PW0GWTBL PW0GWTBL ; 
    10 PW0GWSOR PW0GWSOR [100] ; 
      15 PW0GWKEY PW0GWKEY ; 
        20 PW0GWDAT PW0GWDAT ; 
          25 PW0GWDCC PW0GWDCC ; 
          25 PW0GWDYY PW0GWDYY ; 
          25 PW0GWDMM PW0GWDMM ; 
          25 PW0GWDDD PW0GWDDD ; 
        20 XHDKEY XHDKEY ; 
          25 XHDCD XHDCD ; 
          25 XGPCD XGPCD ; 
      15 PW0GWWFC PW0GWWFC ; 
      15 PW0GWWRP PW0GWWRP ; 
      15 PW0GWNSH PW0GWNSH ; 
      15 PW0GWBOR PW0GWBOR ; 
      15 PW0GWBQT PW0GWBQT ; 
      15 PW0GWPMM PW0GWPMM ; 
      15 PW0GW35M PW0GW35M ; 
      15 PW0GW1MM PW0GW1MM ; 
end // end PW0GW50

//*** RECORD=PW0GW60 ****
// -----------------------------------
// Process Selected by Order
// -----------------------------------
// ***********************
Record PW0GW60 type basicRecord
  5 PW0GWTL PW0GWTL ; 
    10 PW0GWSR PW0GWSR [100] ; 
      15 PW0GWSEL PW0GWSEL ; 
      15 PW0GWKEY PW0GWKEY ; 
        20 PW0GWDAT PW0GWDAT ; 
          25 PW0GWDCC PW0GWDCC ; 
          25 PW0GWDYY PW0GWDYY ; 
          25 PW0GWDMM PW0GWDMM ; 
          25 PW0GWDDD PW0GWDDD ; 
        20 XHDKEY XHDKEY ; 
          25 XHDCD XHDCD ; 
          25 XGPCD XGPCD ; 
      15 PW0GWWFC PW0GWWFC ; 
      15 PW0GWWRP PW0GWWRP ; 
      15 PW0GWNSH PW0GWNSH ; 
      15 PW0GWBOR PW0GWBOR ; 
      15 PW0GWBQT PW0GWBQT ; 
      15 PW0GWEQT PW0GWEQT ; 
      15 PW0GWPMM PW0GWPMM ; 
      15 PW0GW35M PW0GW35M ; 
      15 PW0GW1MM PW0GW1MM ; 
end // end PW0GW60

// informational message
DataItem PW0GMSGN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold type 1 minutes
DataItem PW0GW1MM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold type 3,5 minutes
DataItem PW0GW35M int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp store tbl index
DataItem PW0GW50I smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Table 80 flag
DataItem PW0GW80F char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Table 80 index
DataItem PW0GW80I smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// by order amount
DataItem PW0GWBOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// by quantity amt
DataItem PW0GWBQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Carrier check flag
DataItem PW0GWCCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date
DataItem PW0GWCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Compare key
DataItem PW0GWCKY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Colon
DataItem PW0GWCOL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DNSB date
DataItem PW0GWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Do Not Ship Before Century
DataItem PW0GWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date check flag
DataItem PW0GWDCK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DNSB day
DataItem PW0GWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB date
DataItem PW0GWDDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB month
DataItem PW0GWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date check flag
DataItem PW0GWDTC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DNSB year
DataItem PW0GWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entered quantity
DataItem PW0GWEQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from century
DataItem PW0GWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from day
DataItem PW0GWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from date-ccyymmdd
DataItem PW0GWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record found flag
DataItem PW0GWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Loop done flag
DataItem PW0GWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map from month
DataItem PW0GWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from date yymmdd
DataItem PW0GWFRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Refresh w60 tbl
DataItem PW0GWFSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time flag
DataItem PW0GWFTM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map from year
DataItem PW0GWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0GWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H century
DataItem PW0GWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// handle code
DataItem PW0GWHCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H date
DataItem PW0GWHDA num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H day
DataItem PW0GWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum year/mo/day
DataItem PW0GWHMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H month
DataItem PW0GWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold selected hours
DataItem PW0GWHRS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H year
DataItem PW0GWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Begin index for page
DataItem PW0GWIBX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End index for page
DataItem PW0GWIEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Table entry max index
DataItem PW0GWIMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem PW0GWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key changed flag
DataItem PW0GWKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0GWKEY char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page item limit
DataItem PW0GWLMT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0GWMAP char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H century
DataItem PW0GWMCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H day
DataItem PW0GWMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H date
DataItem PW0GWMDT num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Hold minutes
DataItem PW0GWMIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold minutes
DataItem PW0GWMIT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H month
DataItem PW0GWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// More unreported data flag
DataItem PW0GWMRE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H year
DataItem PW0GWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// non-select hours
DataItem PW0GWNSH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order tbl done flag
DataItem PW0GWODN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select by order index
DataItem PW0GWORI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order request flag
DataItem PW0GWORR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm page index
DataItem PW0GWPCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pool tbl done flag
DataItem PW0GWPDN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page index
DataItem PW0GWPGI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P&H request flag
DataItem PW0GWPHR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Parm table index
DataItem PW0GWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Vpoolh01 index
DataItem PW0GWPLI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold selected minutes
DataItem PW0GWPMM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P&H request flag
DataItem PW0GWPRQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quant tbl done flag
DataItem PW0GWQDN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quantities selected index
DataItem PW0GWQTI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Quantity request flag
DataItem PW0GWQTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select field
DataItem PW0GWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Grand total hours
DataItem PW0GWSMH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0GWSOR char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0GWSR char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp sum field
DataItem PW0GWSUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem PW0GWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0GWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0GWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem PW0GWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0GWTBL char(4500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to century
DataItem PW0GWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to day
DataItem PW0GWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to date-ccyymmdd
DataItem PW0GWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Time in HH:MM
DataItem PW0GWTIM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map title
DataItem PW0GWTIT char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0GWTL char(5000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to month
DataItem PW0GWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to date yymmdd
DataItem PW0GWTOD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to year
DataItem PW0GWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// non spec hndl repack qty
DataItem PW0GWWFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special handling repack
DataItem PW0GWWRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum year/mo/day
DataItem PW0GWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Zero tbl entry value flag
DataItem PW0GWZRO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

