package pw0v;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PW0V ****
// This menu program gives users access to picking selection
// applications for warehouse 51(memphis) and warehouse 07
// (wilsonville).  To get to this menu, the user must first
// use the picking selection option(8), with whse '51' (memphis
// apparael) or whse '07' (wilsonville). If the user selects
// the picking selection option (8) for any other warehouse, he
// will be taken to pk07. these menus are very similiar. the
// difference is that there are more selection programs to
// choose from for memphis apparel and the carrier/spur
// prgrams have been rewritten to give more detail.
// 
// The selection menu gives the users the option to select
// by order, customer, or by quantites. If they select by
// quantities, they will have separate programs for special
// handling, non-special handling, and pack & hold quantites.
// 
// Although no other warehouses will be using these menus or
// programs, they will be used for other warehouses in the
// future.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      01/21/91  RGUTMA  New application.
//          09/25/91  SHENDE  1. Allow whse '07' access.
//                            2. Added option 8 to transfer to
//                               PW06 (Selection by B-Grade and
//                               Closeout).
//                            3. Add division code to map.
//                            4. Add DNSB date range to map.
//                            5. Add XPPK004 (validate division
//                               code) to be performed in
//                               PW0V000.
//          03/04/92  SHENDE  Add xbc-brand-code (xbccd) for
//                            March table changes.
//          04/07/92  SHENDE  Temp. change for Phase I (grnlnd)
//                            retrofit). Transfer whse 2 & 4 to
//                            old carr/spur screen (PW0B).
//          04/27/92  SHENDE  Add in-store promo option to menu
//          05/07/92  SHENDE  xfer whse '02' to new carr/spur
//          07/09/92  SHENDE  Display brand code, allow (*) for
//                            xbccd and xdvcd.  Also, transfer
//                            to new carr/spur screen.
//          08/17/92  SHENDE  Transfer to old carrier screen
//                            for pre-install.
//          08/19/92  SHENDE  Transfer to new carrier screen
//                            for installation of whole system.
//  pk#404  07/28/93  mwilso  remove pw0g & pw0k from selection
//                            list.  Reorder selection options.
//                            Make screen pick.
//                            added code changesto processes
//  Canada  10/25/95  pstroe  Pick-up new version of XPPK003
//  DCSPLIT 10/01/96  dhuffm  Add pick leveling.
//  Canada  12/31/97  VKAKUB  ADD PW0Z as 12th option
// ============================================================
// Y2K PROJ 02/10/98  NGANGO  Y2K Modifications, Map PW0VM001
//                            to remove leading zero suppress
//                            and Process PW0V500, PW0V510 to
//                            remove non zero validations of
//                            year fields in the map.
// ============================================================
// 
// *********************
Program PW0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PKWREC PKWREC; // record
  PW0VW00 PW0VW00; // record
  PW0VW01 PW0VW01; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use PW0VT {deleteAfterUse = yes}; // table
  use XDVTBL; // table
  use XBCTBL; // table
  use PW0VM.PW0VM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0VM001 initial; /* M001 input/output*/
    set PW0VW00 empty; /* Working storage*/
    set PW0VW01 empty; /* Working storage*/
    set TA1REC empty; /* ta1rec area*/
    set TAEREC empty; /* taerec area*/

    COMMAREA.CAITEM = " "; /* Clear CA item*/

    PW0VW00.PW0VWSWF = "Y"; /* Format the map switch*/
    PW0VW00.PW0VWSWR = "N"; /* Request for data switch*/
    PW0VW00.PW0VWSWS = "Y"; /* First time thru switch*/

    PKWREC.PKWSELSW = "PK"; /* picking selection*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.XWHCD > " ") /* IF a warehouse cd was passed*/
      PW0VW00.PW0VWSWR = "Y"; /* Request for data switch*/
    end

     /* ---- Initial move to PKWREC ---------------------------------*/
    if (PKWREC.XDVCD[1] == " ") /* if division code not passed*/
      PKWREC.XDVCD[1] = COMMAREA.XDVCD;
    end

    if (PKWREC.XBCCD[1] == " ") /* if brand code not passed*/
      PKWREC.XBCCD[1] = "*"; /* default to '*' wildcard*/
    end

     /* ------------------------------------------------------------*/
     /* Check to see that the warehouse and division code are valid*/
     /* for this application (whse 51 and 07).  If not, rerturn.*/
     /* ------------------------------------------------------------*/

    if (PKWREC.XWHCD == "51") /* Apparel warehouse*/
      COMMAREA.XGPCD = "03";
    else /* Footwear warehouse*/
      COMMAREA.XGPCD = "02";
    end

    goto PW0V000; /* Perform XPPK003 & XPPK004*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0V001; /* Converse the main process*/


    PW0V000: PW0V000();
    PW0V001: PW0V001();
     /* --------------------------------------------------------*/
     /* Flow to converse the main process used to display a map*/
     /* --------------------------------------------------------*/


    goto PW0V001; /* Flow the main process*/

  end // end main
end // end PW0V

// Check the FROM application
Function PW0V000()
   /* ------------------------------------------------------------*/
   /* Determine whether warehouse and division code are valid for*/
   /* this application.  If not, display message and return to*/
   /* application initiating transfer.*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* common procedure to validate passed warehouse*/

  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* common procedure to validate division code*/
  end


end // end PW0V000

// Main process to display a map
Function PW0V001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0V100(); /* Obtain the data to display*/

  PW0V200(); /* Format and display the map*/

  PW0V300(); /* Check attention identifier*/

  PW0V400(); /* Reset fields to normal intensity*/

  PW0V500(); /* Verify the data that was entered*/

  PW0V600(); /* Process valid input request*/


end // end PW0V001

// Obtain the data to display
Function PW0V100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0VW00.PW0VWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0VW00.PW0VWSWR = "N"; /* Request for data switch*/


end // end PW0V100

// Format and converse the map
Function PW0V200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0VW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0VW00.PW0VWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0VW00.PW0VWSWF == "Y") /* Map must be formatted*/
      PW0V210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if first time thru, move commarea warehouse to map*/
   /* ------------------------------------------------------------*/

  if (PW0VW00.PW0VWSWS == "Y") /* IF FIRST TIME THRU is YES*/
    PW0VM001.XWHCD = COMMAREA.XWHCD; /* move commarea whse cd to map*/
    PKWREC.XWHCD = COMMAREA.XWHCD; /* move commarea whse cd pkwrec*/

    PW0VW00.PW0VWSWS = "N"; /* no longer first time thru*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0VM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0VM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0VM001.CAITEM = COMMAREA.CAITEM; /* CA item*/

  PW0VM001.XDVCD = PKWREC.XDVCD[1]; /* division code*/
  PW0VM001.XBCCD = PKWREC.XBCCD[1]; /* brand code*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0VW00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW0VW00.XXXMSGNO != 0) /* Message to display*/

      if (PW0VW00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW0VW00.XXXMSGNO);
      end /* Message number*/
    else
      PW0VM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PW0VM001.XXXMODID = TA1REC.TA1LOC; /* Module ident*/

    set PW0VM001 alarm; /* Indicate sound alarm*/

  end

  converse PW0VM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOC = " "; /* Module identification*/
  PW0VW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0VM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PW0VM001.CAITEM; /* Application data*/

end // end PW0V200

// Format the display data
Function PW0V210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0VM001 initial; /* M001 input/output area*/

  PW0VW00.PW0VWSWF = "N"; /* Format the map switch*/


   /* ------- Format "From" Date Fields -----------------------------*/
  PW0VW00.PW0VMFDT = PKWREC.PKWFRMDT[1];
  PW0VW01.PW0VWFDT = PKWREC.PKWFRMDT[1];
  PW0VM001.PW0VMFMM = PW0VW01.PW0VWFMM;
  PW0VM001.PW0VMFDD = PW0VW01.PW0VWFDD;
  PW0VM001.PW0VMFYY = PW0VW01.PW0VWFYY;

   /* ------- Format "To" Date Fields -------------------------------*/
  PW0VW00.PW0VMTDT = PKWREC.PKWTODT[1];
  PW0VW01.PW0VWTDT = PKWREC.PKWTODT[1];
  PW0VM001.PW0VMTMM = PW0VW01.PW0VWTMM;
  PW0VM001.PW0VMTDD = PW0VW01.PW0VWTDD;
  PW0VM001.PW0VMTYY = PW0VW01.PW0VWTYY;

  set PW0VM001.PW0VMSEL cursor;

end // end PW0V210

// Check attention identifier
Function PW0V300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PW0VW00.PW0VWSWF = "Y"; /* Format the map switch*/
    PW0VW00.PW0VWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Reset commarea and pkwrec for fastpath/pf keys*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = PW0VM001.XWHCD; /* move map whse cd to commarea*/
  PKWREC.XWHCD = PW0VM001.XWHCD; /* move map whse cd to pkwrec*/
  PKWREC.XBCCD[1] = PW0VM001.XBCCD; /* move map brand cd to pkwrec*/

  if (PW0VM001.XDVCD != " ")
    PKWREC.XDVCD[1] = PW0VM001.XDVCD; /* move division cd to PKWREC*/
  end

  if (PW0VM001.XBCCD != " ")
    PKWREC.XBCCD[1] = PW0VM001.XBCCD; /* move map brand cd to pkwrec*/
  end

  PW0VW01.PW0VWFMM = PW0VM001.PW0VMFMM; /* move "from" DNSB dates*/
  PW0VW01.PW0VWFDD = PW0VM001.PW0VMFDD;
  PW0VW01.PW0VWFYY = PW0VM001.PW0VMFYY;
  PW0VW01.PW0VWFCC = 0;
  PKWREC.PKWFRMDT[1] = PW0VW01.PW0VWFDT;

  PW0VW01.PW0VWTMM = PW0VM001.PW0VMTMM; /* move "to" DNSB dates*/
  PW0VW01.PW0VWTDD = PW0VM001.PW0VMTDD;
  PW0VW01.PW0VWTYY = PW0VM001.PW0VMTYY;
  PW0VW01.PW0VWTCC = 0;
  PKWREC.PKWTODT[1] = PW0VW01.PW0VWTDT;

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* return pkwrec to commarea*/

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0VM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PW0VM001.CATOAP == "PW0V") /* FAST PATH is this application*/
        TA1REC.TA1LOC = "300"; /* Module identification*/
        set PW0VM001.CATOAP cursor, bold; /* Highlight*/
        converseLib.validationFailed(1); /* invalid fast path option*/
        exit stack; /* Exit to display map*/
      else
        XSPKS01(); /* Exit to another application*/
        set PW0VM001.CATOAP cursor, bold; /* Highlight*/
      end

    else
      TA1REC.TA1LOC = "300"; /* Module identification*/
      converseLib.validationFailed(13); /* INVALID Pf/PA key*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0VM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PK0A"; /* TO application*/
    end

    XSPKS01(); /* Exit to another application*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TA1REC.TA1LOC = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0V300

// Reset highlighted fields
Function PW0V400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0VM001.PW0VMSEL cursor, initialAttributes; /* Menu selection*/
  set PW0VM001.XWHCD initialAttributes; /* warehouse code*/
  set PW0VM001.XDVCD initialAttributes; /* division code*/
  set PW0VM001.XBCCD initialAttributes; /* brand code*/

  set PW0VM001.PW0VMFMM initialAttributes; /* dnsb "FROM" date*/
  set PW0VM001.PW0VMFDD initialAttributes; /* dnsb "FROM" date*/
  set PW0VM001.PW0VMFYY initialAttributes; /* dnsb "FROM" date*/

  set PW0VM001.PW0VMTMM initialAttributes; /* dnsb "TO" date*/
  set PW0VM001.PW0VMTDD initialAttributes; /* dnsb "TO" date*/
  set PW0VM001.PW0VMTYY initialAttributes; /* dnsb "TO" date*/

  set PW0VM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set PW0VM001.CAITEM initialAttributes; /* FAST PATH application data*/

end // end PW0V400

// Verify data that was entered
Function PW0V500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    TA1REC.TA1LOC = "500"; /* Module identification*/
    set PW0VM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Invalid pf key*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the menu selection that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0VM001.PW0VMSEL in PW0VT.PW0VMSEL) /* Selection in table*/
    /* NEXT SENTENCE*/

  else
    TA1REC.TA1LOC = "500"; /* Module identification*/
    set PW0VM001.PW0VMSEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(05); /* INVALID OPTION*/
    exit stack; /* exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the division code if it has changed.*/
   /* ------------------------------------------------------------*/

  if (PW0VM001.XDVCD == " ") /* division code not entered*/
    converseLib.validationFailed(393);
    set PW0VM001.XDVCD cursor, bold;
    TA1REC.TA1LOC = "500"; /* Module identification*/
    exit stack; /* exit to display map*/
  end

  PKWREC.XDVCD[1] = PW0VM001.XDVCD;

  if (PW0VM001.XDVCD != "*")
    XPPK004();

    if (converseVar.validationMsgNum != 0)
      converseLib.validationFailed(393);
      set PW0VM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the brand code*/
   /* ------------------------------------------------------------*/

  if (PW0VM001.XBCCD == " ") /* brand code not entered*/
    converseLib.validationFailed(413);
    set PW0VM001.XBCCD cursor, bold;
    TA1REC.TA1LOC = "500"; /* Module identification*/
    exit stack; /* exit to display map*/
  end

  PKWREC.XBCCD[1] = PW0VM001.XBCCD;

  if (PW0VM001.XBCCD != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0VM001.XBCCD cursor, bold;
        TA1REC.TA1LOC = "500";
        exit stack;
      end
    else
      converseLib.validationFailed(413);
      set PW0VM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "500";
    end

    if (converseVar.validationMsgNum != 0)
      converseLib.validationFailed(413);
      set PW0VM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the DNSB date*/
   /* ------------------------------------------------------------*/

  PW0VW00.PW0VWKCH = "N"; /* Init key changed flag*/
  PW0VW00.PW0VWDTC = "N"; /* Init date check flag*/

  if (PW0VM001.PW0VMTMM == 0
   || PW0VM001.PW0VMTDD == 0
  ) /**/
   /* --------------------- Y2K OUT BEGIN ----------------*/
   /*  */
   /* OR PW0VM001.PW0VMTYY EQ 0;*/
   /*  */
   /* --------------------- Y2K OUT END ------------------*/
   /*  */

    PW0V510(); /* Date check*/

  else

    if (PW0VM001.PW0VMFMM != PW0VW00.PW0VMFMM
     || PW0VM001.PW0VMFDD != PW0VW00.PW0VMFDD
     || PW0VM001.PW0VMFYY != PW0VW00.PW0VMFYY
     || PW0VM001.PW0VMTMM != PW0VW00.PW0VMTMM
     || PW0VM001.PW0VMTDD != PW0VW00.PW0VMTDD
     || PW0VM001.PW0VMTYY != PW0VW00.PW0VMTYY)

      PW0VW00.PW0VWKCH = "Y"; /* key has changed*/

      PW0V510();

    end
  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

  if (PW0VW00.PW0VWKCH == "Y") /* Key has changed*/
    return;
  end

end // end PW0V500

// Verify DNSB date range
Function PW0V510()
   /* ----------------------------------------------------------------*/
   /* Verify the DNSB date*/
   /* ----------------------------------------------------------------*/

  if (PW0VM001.PW0VMFMM == 0
   && PW0VM001.PW0VMFDD == 0
   /**/
   /* ------------- Y2K OUT BEGIN*/
   /* -----------*/
   /**/
   /* AND PW0VM001.PW0VMFYY EQ 0*/
   /**/
   /* ------------- Y2K OUT END*/
   /* -------------*/
   /**/
   && PW0VM001.PW0VMTMM == 0
   && PW0VM001.PW0VMTDD == 0)
    /*  */
    /* ------------- Y2K OUT BEGIN -----------*/
    /*  */
    /* AND PW0VM001.PW0VMTYY EQ 0;*/
    /*  */
    /* ------------- Y2K OUT END -------------*/
    /*  */

    /* ---------- "to" date field -----------------*/
    PW0VW00.PW0VMTMM = PW0VM001.PW0VMTMM; /* move to compare field*/
    PW0VW00.PW0VMTDD = PW0VM001.PW0VMTDD;
    PW0VW00.PW0VMTYY = PW0VM001.PW0VMTYY;
    PW0VW00.PW0VMTCC = 0;
    PW0VW01.PW0VWTDT = PW0VW00.PW0VMTDT; /* move to working storage*/

    /* ---------- "from" date field ---------------*/
    PW0VW00.PW0VMFMM = PW0VM001.PW0VMFMM; /* move to compare field*/
    PW0VW00.PW0VMFDD = PW0VM001.PW0VMFDD;
    PW0VW00.PW0VMFYY = PW0VM001.PW0VMFYY;
    PW0VW00.PW0VMFCC = 0;
    PW0VW01.PW0VWFDT = PW0VW00.PW0VMFDT; /* move to working storage*/

  else
    /* -------------------------------------------------------------*/
    /* Verify the "to" date*/
    /* -------------------------------------------------------------*/

    if (PW0VM001.PW0VMTMM == 0
     || PW0VM001.PW0VMTDD == 0)
      /*  */
      /* ------------- Y2K OUT BEGIN -----------*/
      /*  */
      /* OR PW0VM001.PW0VMTYY EQ 0;*/
      /*  */
      /* ------------- Y2K OUT BEGIN -----------*/
      /*  */

      PW0VW00.PW0VWDTC = "Y"; /* Date check error*/
      TA1REC.TA1LOC = "510"; /* Module identification*/
      converseLib.validationFailed(158); /* Invalid date*/
      set PW0VM001.PW0VMTMM cursor, bold;
      set PW0VM001.PW0VMTDD bold;
      set PW0VM001.PW0VMTYY bold;

    end

    if (PW0VW00.PW0VWDTC == "Y") /* There is an error*/
      return;
    end

    PW0VW00.PW0VMTMM = PW0VM001.PW0VMTMM; /* move to compare field*/
    PW0VW00.PW0VMTDD = PW0VM001.PW0VMTDD;
    PW0VW00.PW0VMTYY = PW0VM001.PW0VMTYY;

    if (PW0VW00.PW0VMTYY > 50
     && PW0VW00.PW0VMTYY <= 99)

      PW0VW00.PW0VMTCC = 19;
    else
      PW0VW00.PW0VMTCC = 20;
    end

    PW0VW01.PW0VWTDT = PW0VW00.PW0VMTDT; /* move to working storage*/

    set TA2REC empty;
    TA2REC.TA2GRGGN = PW0VW00.PW0VMTDT;
    PW0VS01(); /* Validate the date*/

    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "510";
      converseLib.validationFailed(158);
      set PW0VM001.PW0VMTMM cursor, bold;
      set PW0VM001.PW0VMTDD bold;
      set PW0VM001.PW0VMTYY bold;
    end

    /* ---------------------------------------------------------------*/
    /* Verify the "from" date*/
    /* ---------------------------------------------------------------*/

    PW0VW00.PW0VWDTC = "N";

    if (PW0VM001.PW0VMFMM == 0
     && PW0VM001.PW0VMFDD == 0
     && PW0VM001.PW0VMFYY == 0)

      PW0VW00.PW0VMFCC = 0;
    end

    PW0VW00.PW0VMFMM = PW0VM001.PW0VMFMM; /* move to compare field*/
    PW0VW00.PW0VMFDD = PW0VM001.PW0VMFDD;
    PW0VW00.PW0VMFYY = PW0VM001.PW0VMFYY;

    if (PW0VW00.PW0VMFDT != 0)
      if (PW0VW00.PW0VMFYY > 50
       && PW0VW00.PW0VMFYY <= 99)

        PW0VW00.PW0VMFCC = 19;
      else
        PW0VW00.PW0VMFCC = 20;
      end

      set TA2REC empty;
      TA2REC.TA2GRGGN = PW0VW00.PW0VMFDT;
      PW0VW01.PW0VWFDT = PW0VW00.PW0VMFDT; /* move to working storage*/
      PW0VS01(); /* Validate the date*/

      if (TA2REC.TA2RTNCD != 0)
        TA1REC.TA1LOC = "510";
        converseLib.validationFailed(158);
        set PW0VM001.PW0VMFMM cursor, bold;
        set PW0VM001.PW0VMFDD bold;
        set PW0VM001.PW0VMFYY bold;
      end
    end
  end

   /* -----------------------------------------------------------------*/
   /* Check that the "from" date is less than the "to" date*/
   /* -----------------------------------------------------------------*/

  if (PW0VW00.PW0VMFDT > PW0VW00.PW0VMTDT) /* FROM date > TO date*/

    TA1REC.TA1LOC = "510"; /* Module identification*/
    converseLib.validationFailed(286); /* FROM date must be < TO date*/
    set PW0VM001.PW0VMFMM cursor, bold;
    set PW0VM001.PW0VMFDD bold;
    set PW0VM001.PW0VMFYY bold;

    set PW0VM001.PW0VMTMM bold;
    set PW0VM001.PW0VMTDD bold;
    set PW0VM001.PW0VMTYY bold;

  end


end // end PW0V510

// Process valid input request
Function PW0V600()
   /* ------------------------------------------------------------*/
   /* Invoke the application indicated by the table entry.*/
   /* ------------------------------------------------------------*/

  if (PW0VM001.PW0VMSEL in PW0VT.PW0VMSEL)
    COMMAREA.CATOAP = PW0VT.CATOAP[sysVar.arrayIndex];
  end
  PW0VW00.PW0VMSEL = PW0VM001.PW0VMSEL; /* Move map select to rec*/

  XSPKS01(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  set PW0VM001.PW0VMSEL cursor, bold; /* Highlight*/


end // end PW0V600

// Validate the date
Function PW0VS01()
   /* ------------------------------------------------------------*/
   /* validate DNSB date "to"*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

    return; /* Normal return code*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "DNSB TO DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S01"; /* Module identification*/
    converseLib.validationFailed(29); /* System error occurred*/

    return; /* exit to display map*/

  end


end // end PW0VS01

//*** RECORD=PW0VW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0VW00 type basicRecord
  10 PW0VWSWF PW0VWSWF ; 
  10 PW0VWSWR PW0VWSWR ; 
  10 PW0VWSWS PW0VWSWS ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PW0VMSEL PW0VMSEL ; 
  10 PW0VMFDT PW0VMFDT ; 
    15 PW0VMFCC PW0VMFCC ; 
    15 PW0VMFYY PW0VMFYY ; 
    15 PW0VMFMM PW0VMFMM ; 
    15 PW0VMFDD PW0VMFDD ; 
  10 PW0VMTDT PW0VMTDT ; 
    15 PW0VMTCC PW0VMTCC ; 
    15 PW0VMTYY PW0VMTYY ; 
    15 PW0VMTMM PW0VMTMM ; 
    15 PW0VMTDD PW0VMTDD ; 
  10 PW0VWKCH PW0VWKCH ; 
  10 PW0VWDTC PW0VWDTC ; 
end // end PW0VW00

Record PW0VW01 type basicRecord
  10 PW0VWFDT PW0VWFDT ; 
    15 PW0VWFCC PW0VWFCC ; 
    15 PW0VWFYY PW0VWFYY ; 
    15 PW0VWFMM PW0VWFMM ; 
    15 PW0VWFDD PW0VWFDD ; 
  10 PW0VWTDT PW0VWTDT ; 
    15 PW0VWTCC PW0VWTCC ; 
    15 PW0VWTYY PW0VWTYY ; 
    15 PW0VWTMM PW0VWTMM ; 
    15 PW0VWTDD PW0VWTDD ; 
end // end PW0VW01

DataItem PW0VMFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VMFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VMFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VMFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VMFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VMTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VMTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VMTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VMTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VMTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VWDTC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0VWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0VWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first screen switch
DataItem PW0VWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0VWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0VWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

