package pw0h;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0H ****
// This program shows specific order numbers with their special
// handling and regular quantities. It displays a flag (sel
// flag) that lets the user know if this order has been
// previously selected for picking or not. This screen allows
// the user to select an order for picking, de-select an order,
// put an order on hold (there will be a pop-up window to
// display valid hold codes), or select for product inquiry.
// 
// The user can transfer out of this application by using one
// of the PF keys displayed at the bottom of the map, or by
// entering fast-path information (also at the bottom of the
// map).
// 
// CONTROL#    DATE      ID             COMMENTS
// --------  --------  ------  ------------------------------
// N/A       01/15/91  SBEAUC  New application.
//           09/16/91  SHENDE  Changed so that program wouldn't
//                             display orders waiting to be
//                             approved for normal (pk_sel_in =
//                             'L').
//           09/24/91  SHENDE  Set both pick plan release date
//                             and picking release date.
//           10/08/91  jcampb  table changes
//           11/15/91  SHENDE  Changes for Wilsonville.
//                             - add division code
//                             - don't process b-grade/closeout
//           03/03/92  SHENDE  Add brand code(xbccd) for March
//                             table changes.
//           04/22/92  SHENDE  Re-init page field ta5tsqix
//                             after add page to temp.storage.
//           04/23/92  SCLEME  Omit processing in-store promo.
// TBLCHGS   06/25/92  MWALTO  Move div before call io5490 in
//                             pw0h120.
// ColeHan   07/17/92  SHENDE  Display brand code
// ColeHan   09/14/92  SHENDE  Move poolh value of brand & div
//                             to selor tbl instead of '*'.
// Canada    10/25/95  PSTROE  Pick-up new version of XPPK003
// Y2KFIX    02/18/98  DKENNY  Y2K MODIFICATIONS MADE TO:
//                             PW0HM001, PW0H120, PW0H640
// *********************
Program PW0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0HW00 PW0HW00; // record
  PW0HW01 PW0HW01; // record
  PWFREC PWFREC; // record
  PWJREC PWJREC; // record
  PWKREC PWKREC; // record
  PWNREC PWNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XHRTBL; // table
  use XHDTBL; // table
  use XDVTBL; // table
  use XOTTBL; // table
  use XBCTBL; // table
  use PW0HM.PW0HM001,  // forms
      PW0HM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------*/

    set PW0HW00 empty; /* Initialize working storage*/
    set PW0HW01 empty; /* Initialize map working storage*/
    set PW0HM001 initial; /* Initialize map output area*/
    set PWJREC empty; /* Initialize pk array record*/
    set PWKREC empty; /* Initialize pk work record*/
    set PKBREC empty; /* Initialize io record*/
    set PKHREC empty; /* Initialize io record*/
    set PWFREC empty; /* Initialize io record*/
    set PWNREC empty; /* Initialize io record*/
    set PK4REC empty; /* Initialize io record*/
    set TAEREC empty; /* Initialize io record*/
    set TA5REC empty; /* Initialize io record*/
    set TA9REC empty; /* Initialize io record*/
    set SQLCA empty; /* Initialize io record*/

    PWKREC.PWKARRAY = PKWREC.PKWARRAY;

    PKWREC.PKWINDEX = 1; /* set index to 1*/
    PW0HW00.PW0HWAIX = 1; /* set ARRAY index to 1*/

    if (PKWREC.PKWSELSW == "PP") /* if pick planning run mode*/

      PW0HW00.PW0HWRUN = "P"; /* set run mode to 'p'*/

    end

    PW0HW01.XHDCD = PWKREC.XHDCD[PKWINDEX]; /* spec hdlg code*/

    PW0HW01.PW0HWSEL = "A"; /* set selection to 'a'*/
    PW0HM001.PW0HMSEL = "A"; /* set selection to 'a'*/

     /* move 'Do Not Ship Before' date from first occurrance to*/
     /* convert for map*/

    PW0HW00.PW0HWNDT = PWKREC.OP1DSBDT[PKWINDEX]; /* move to num date*/
    PW0HW01.PW0HWDMM = PW0HW00.PW0HWNMM;
    PW0HM001.PW0HMDMM = PW0HW00.PW0HWNMM;

    PW0HW01.PW0HWDDD = PW0HW00.PW0HWNDD;
    PW0HM001.PW0HMDDD = PW0HW00.PW0HWNDD;

    PW0HW01.PW0HWDYY = PW0HW00.PW0HWNYY;
    PW0HM001.PW0HMDYY = PW0HW00.PW0HWNYY;

    if (PWKREC.XWHCD != "  ")

      PW0HW01.XWHCD = PWKREC.XWHCD; /* store passed whse code*/
      PW0HM001.XWHCD = PWKREC.XWHCD; /* store passed whse code*/
      PW0HW01.XWHABRV = PWKREC.XWHABRV; /* store passed whse desc*/
      PW0HM001.XWHABRV = PWKREC.XWHABRV; /* store passed whse desc*/

    end

     /* -----------------------------------------------------------*/
      /* Convert current date to CCYYMMDD format for comparison*/
      /* purposes later in program.*/
     /* -----------------------------------------------------------*/

    PW0HW00.PW0HWEDT = VGVar.currentShortGregorianDate; /* get system date MM/DD/YY*/
    if (PW0HW00.PW0HWCYY > 80) /* if year gt 80*/

      PW0HW00.PW0HWCCC = 19; /* set century to 19*/

    else

      PW0HW00.PW0HWCCC = 20; /* otherwise, set century to 20*/

    end
    PW0HW00.PW0HWSWR = "Y"; /* request data*/
    PW0HW00.PW0HWSWF = "Y"; /* format screen*/

    goto PW0H000; /* Validate entry*/


    PW0H000: PW0H000();
    goto PW0H001; /* converse main process*/
    PW0H001: PW0H001();
     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------*/

    goto PW0H001; /* Converse the main process*/


  end // end main
end // end PW0H

// Validate entry
Function PW0H000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PW0G" /* From allowed application*/
   && COMMAREA.CAFROMAP != "PW0J" 
   && COMMAREA.CAFROMAP != "PW0I" 
   && COMMAREA.CAFROMAP != "PW0R" 
   && COMMAREA.CAFROMAP != "PW0X" 
   && COMMAREA.CAFROMAP != "GD00")

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether passed warehouse is valid...*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* Validate warehouse*/


end // end PW0H000

// Main process
Function PW0H001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0H100(); /* Obtain the data to display*/

  PW0H200(); /* Format and display the map*/

  PW0H300(); /* Check attention identifier*/

  PW0H400(); /* Reset fields to normal intensity*/

  PW0H500(); /* Verify the entered data*/

  PW0H600(); /* Process valid input request*/


end // end PW0H001

// Obtain the data to display
Function PW0H100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.PW0HWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0HW00.XXXTSLEN = 569; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.XXXMSGNO == 0) /* No message to display*/
    PW0HW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0H110(); /* Purge any temporary storage*/

  PW0HW01.XWHCD = PWKREC.XWHCD; /* warehouse code*/
  PW0HW01.XWHABRV = PWKREC.XWHABRV; /* warehouse abrv*/
  PW0HW00.PW0HWNDT = PWKREC.OP1DSBDT[PKWINDEX]; /* convert dnsb date*/
  PW0HW01.PW0HWDMM = PW0HW00.PW0HWNMM; /* move dnsb month*/
  PW0HW01.PW0HWDDD = PW0HW00.PW0HWNDD; /* move dnsb day*/
  PW0HW01.PW0HWDYY = PW0HW00.PW0HWNYY; /* move dnsb year*/

  PW0HW01.XHDCD = PWKREC.XHDCD[PKWINDEX]; /* special handling code*/
  PW0HW01.PW0HWSEL = PW0HM001.PW0HMSEL; /* Selection code*/

   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

   /* ----- obtain division desc ---------------------------*/
  PW0HW01.XDVCD = PKWREC.XDVCD[1];
  if (PKWREC.XDVCD[1] == "*")
    PW0HW01.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0HW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

   /* ----- obtain brand abrv ------------------------------*/
  PW0HW01.XBCCD = PKWREC.XBCCD[1];
  if (PKWREC.XBCCD[1] == "*")
    PW0HW01.XBCABRV = " ";
    PW0HW00.XXXMSGNO = 421;
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0HW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PW0H120(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PW0HW00.PW0HWIXM = 1; /* Display line index*/
  PW0HW00.PW0HWSWC = "N"; /* End of cursor switch*/

  while (PW0HW00.PW0HWSWC == "N") /* Until end of cursor*/

    PW0H121(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, retrieve corresponding data from*/
    /* pool header and carrier hold tables.*/
    /* ------------------------------------------------------------*/

    if (PW0HW00.PW0HWSWC == "N") /* Not end of cursor*/
      PW0HW00.PW0HWSWP = "N"; /* clear process switch*/
      PW0H130(); /* select order w/ carrier not on hold*/

      /* ------------------------------------------------------------*/
      /* If order qualifies, save the data in display storage.*/
      /* ------------------------------------------------------------*/

      if (PW0HW00.PW0HWSWP == "Y") /* okay to process order*/
        PW0H140(); /* Save data in display storage*/

        /* ------------------------------------------------------------*/
        /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (PW0HW00.PW0HWIXM > 10) /* Page is full*/

          PW0H150(); /* Add page to temporary storage*/

          set PW0HW01 empty; /* clear display storage*/
          PW0HW00.PW0HWIXM = 1; /* Display line index*/

          /* ----- save heading information ------------------------*/
          PW0HW01.XWHCD = PWKREC.XWHCD; /* Warehouse code*/
          PW0HW01.XWHABRV = PWKREC.XWHABRV; /* Warehouse code*/

          PW0HW01.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
          if (PKWREC.XDVCD[1] == "*")
            PW0HW01.XDVDESC = "ALL DIVISIONS";
          else
            if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
              PW0HW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
            end
          end

          PW0HW01.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
          if (PKWREC.XBCCD[1] == "*")
            PW0HW01.XBCABRV = " ";
            PW0HW00.XXXMSGNO = 421;
          else
            if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
              PW0HW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
            end
          end

          PW0HW01.XHDCD = PWKREC.XHDCD[PKWINDEX]; /* spec hdlg code*/
          PW0HW01.PW0HWDMM = PW0HW00.PW0HWNMM; /* DNSB date - MM*/
          PW0HW01.PW0HWDDD = PW0HW00.PW0HWNDD; /* DNSB date - dd*/
          PW0HW01.PW0HWDYY = PW0HW00.PW0HWNYY; /* DNSB date - yy*/
          PW0HW01.PW0HWSEL = PW0HM001.PW0HMSEL; /* Selection code*/

        end
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.PW0HWIXM > 1) /* Page was formatted*/
    PW0H150(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set - Dpick.Vphdit01*/
   /* ------------------------------------------------------------*/

  PW0H160(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  PW0HW00.PW0HWSWF = "Y"; /* format screen*/
  if (PW0HW00.TA5TSQIX == 0) /* No pages formatted*/

    PW0HW00.XXXMODID = "100"; /* Module identification*/
    PW0HW00.XXXMSGNO = 31; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0HW00.PW0HWSWR = "N"; /* Request for data switch*/


end // end PW0H100

// Purge temporary storage
Function PW0H110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0HW01 empty; /* M001 display storage*/

  PW0HW00.PW0HWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0HW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0HW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0HW00.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H110

// Open cursor-Dpick.vphdit01
Function PW0H120()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PWNREC empty; /* Clear row storage area*/

  PWNREC.XWHCD = PW0HW01.XWHCD; /* Warehouse code*/
  PW0HW00.PW0HWNMM = PW0HW01.PW0HWDMM; /* move month for conversion*/
  PW0HW00.PW0HWNDD = PW0HW01.PW0HWDDD; /* move day for conversion*/
  PW0HW00.PW0HWNYY = PW0HW01.PW0HWDYY; /* move year for conversion*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  PW0HW00.PW0HWNCC = 0; /* initialize century*/
  if (PW0HW00.PW0HWNDT > 0) /* a date has been entered*/
    if (PW0HW00.PW0HWNYY > 60)
      PW0HW00.PW0HWNCC = 19;
    else
      PW0HW00.PW0HWNCC = 20;
    end
  end
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

  PWNREC.OP1DSBDT = PW0HW00.PW0HWNDT; /* move converted dnsb date*/
  PWNREC.XHDCD = PWKREC.XHDCD[PKWINDEX]; /* move sp hdlg code*/
  PWNREC.TF1CARCD = "*"; /* Wildcard carrier code*/
  PWNREC.XGPCD = "*"; /* Wildcard product code*/
  PWNREC.XDVCD = "*";
  PWNREC.XBCCD = "*";

   /* F PKWREC.XDVCD(1) EQ '*';                 /* Division code*/
   /* MOVE ' ' TO PWNREC.XDVCD;*/
   /* ;SE;*/
   /* MOVE PKWREC.XDVCD(1) TO PWNREC.XDVCD;*/
   /* ND;*/

   /* F PKWREC.XBCCD(1) EQ '*';                 /* Brand code*/
   /* MOVE ' ' TO PWNREC.XBCCD;*/
   /* LSE;*/
   /* MOVE PKWREC.XBCCD(1) TO PWNREC.XBCCD;*/
   /* ND;*/


  try
    call "IO5490" ("S1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWNREC.PWNGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H120

// Fetch next row in the cursor
Function PW0H121()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("N1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0HW00.PW0HWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "121"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWNREC.PWNGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H121

// Process order
Function PW0H130()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  PW0HW00.PW0HWSWP = " "; /* clear process flag*/
  PW0H131(); /* Select unique - pool header*/

  if (SQLCA.VAGen_SQLCODE == 100)
    PW0HW00.PW0HWSWP = "N"; /* dont process this order*/
    return;
  end

  if (PW0HW01.XDVCD == "*")
    /* next sentence*/
  else
    if (PK4REC.XDVCD != PW0HW01.XDVCD)
      PW0HW00.PW0HWSWP = "N"; /* don't process this order*/
      return;
    end
  end

   /* ------ Determine if in-store promo ---------------------------*/

  if (PK4REC.XGPCD == "01"
   && PK4REC.XDVCD == "01")
    PW0HW00.PW0HWSWP = "N"; /* don't process this order*/
    return;
  end

   /* ------ Determine if stock transfer ---------------------------*/

  if (PK4REC.PK4STKTF == "Y")
    PW0HW00.PW0HWSWP = "N"; /* don't process this order*/
    return;
  end

   /* ------ Determine b-grade and closeout ------------------------*/
  XPPK005();

  if (PKWREC.PKW-ORDER-TYP-IND == "B" /* B-Grade*/
   || PKWREC.PKW-ORDER-TYP-IND == "C") /* Closeout*/

    PW0HW00.PW0HWSWP = "N"; /* don't process order*/
    return;

  end


  if (PW0HM001.PW0HMSEL == "A") /* selection criteria was 'a'll*/

    if (PW0HW00.PW0HWRUN == " ") /* picking run mode*/

      if (PK4REC.PK4SLIND == " " /* valid status for selection criteria*/
       || PK4REC.PK4SLIND == "S") /* ditto*/

        PW0H132(); /* get carrier hold record*/

      else

        PW0HW00.PW0HWSWP = "N"; /* don't process order*/
        return; /* return to process next Vphdit01*/

      end

    else

      if (PK4REC.PK4SLIND == " " /* valid status for selection criteria*/
       || PK4REC.PK4SLIND == "P" /* valid status too*/
       || PK4REC.PK4SLIND == "S") /* valid status too*/

        PW0H132(); /* get carrier hold record*/

      else

        PW0HW00.PW0HWSWP = "N"; /* don't process order*/
        return; /* return to process next Vphdit01*/

      end

    end

  end

  if (PW0HM001.PW0HMSEL == "S") /* selection criteria was 's'elected*/

    if (PW0HW00.PW0HWRUN == "P") /* planning run mode*/

      if (PK4REC.PK4SLIND == "S" /* ditto*/
       || PK4REC.PK4SLIND == "P") /* valid status too*/

        PW0H132(); /* get carrier hold record*/
      else

        PW0HW00.PW0HWSWP = "N"; /* don't process order*/
        return; /* return to process next Vphdit01*/

      end

    else
      if (PW0HM001.PW0HMSEL == "S")

        PW0H132();

      else

        PW0HW00.PW0HWSWP = "N"; /* don't process order*/
        return; /* return to process next Vphdit01*/

      end
    end

  end

  if (PW0HM001.PW0HMSEL == "N")
                                   /* selection criteria was 'n'ot selected*/

    if (PK4REC.PK4SLIND == " ") /* valid status*/

      PW0H132(); /* get carrier hold record*/

    else

      PW0HW00.PW0HWSWP = "N"; /* don't process order*/
      return; /* return to process next Vphdit01*/

    end

  end

   /* if process flag is no, due to bad carrier hold date,*/
   /* reject here*/

  if (PW0HW00.PW0HWSWP == "N")

    return;

  end

   /* --------------------------------------------------------*/
   /* Still here? Check if order hold flag is 'y'. If so,*/
   /* spin thru order hold file to see if there are any*/
   /* records for order with a rlse date > todays date.*/
   /* --------------------------------------------------------*/

  if (PK4REC.PK4ORHLD == "Y")

    PW0H138(); /* check rlse date*/
    if (PW0HW00.PW0HWSWP == "N")

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* Still here? Check if cust hold flag is 'y'. If so,*/
   /* spin thru customer hold file to see if there are any*/
   /* records for order with a rlse date > todays date.*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4CUHLD == "Y")

    PW0H139(); /* check rlse date*/
    if (PW0HW00.PW0HWSWP == "N")

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If order is okay to process, accumulate FC and RP qtys*/
   /* by reading the item file for the order.*/
   /* ------------------------------------------------------------*/

  PW0HW00.PW0HWSWP = "Y"; /* okay to process order*/

  PW0HW00.PW0HWSC2 = "N"; /* Set item table cursor flag to no*/
  PW0H133(); /* Set item table cursor*/
  PW0HW00.PW0HWNHF = 0; /* clear non-spec hdlg fc field*/
  PW0HW00.PW0HWNHR = 0; /* clear non-spec hdlg rp field*/
  PW0HW00.PW0HWSHF = 0; /* clear spec hdlg fc field*/
  PW0HW00.PW0HWSHR = 0; /* clear spec hdlg rp field*/

  PW0H136(); /* Fetch next item row*/
  while (PW0HW00.PW0HWSC2 == "N") /* Until at end of cursor*/

    PW0HW00.PW0HWNUM = 0; /* clear work field*/
    PW0HW00.PW0HWDFC = 0; /* clear detail fc field*/
    PW0HW00.PW0HWDRP = 0; /* clear detail repack field*/
    PW0HW00.PW0HWTFC = 0; /* clear total fc field*/
    PW0HW00.PW0HWTRP = 0; /* clear total repack field*/
    PW0H134(); /* Calculate FC and RP qtys*/
    PW0H136(); /* Fetch next item row*/

  end

  PW0H137(); /* Close item table cursor*/


end // end PW0H130

// select unique-Dpick.Vpoolh01
Function PW0H131()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PWKREC.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PWNREC.PK1CUOID; /* Customer order number*/
  PK4REC.PK1NORID = PWNREC.PK1NORID; /* Nike order number*/
  PK4REC.PK4ORHLD = "*"; /* order hold flag*/
  PK4REC.PK4CUHLD = "*"; /* customer hold flag*/
  PK4REC.OP1SPHDF = "Y"; /* special handling flag*/
  PK4REC.TF1CARCD = "*"; /* wildcard the carrier code*/

  if (PW0HM001.PW0HMSEL == "S") /* if selection code was 's'*/

    if (PW0HW00.PW0HWRUN == " ") /* if run mode is picking*/

      PK4REC.PK4SLIND = "S"; /* set to 's'*/

    else

      PK4REC.PK4SLIND = "*"; /* if planned picking, set to wildcard*/

    end

  else

    PK4REC.PK4SLIND = "*"; /* else, wildcard it*/

  end

  try
    call "IO1720" ("SA", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE (SA)";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H131

// Check the carrier hold file
Function PW0H132()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  PW0HS20(); /* set cursor*/

  PW0HW00.PW0HWSC2 = " "; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and check release date until no more rows.*/
   /* ------------------------------------------------------------*/

  while (PW0HW00.PW0HWSC2 == " " /* Until no more rows*/
   && PW0HW00.PW0HWSWP == " ") /* or rejection of order*/

    PW0HS21(); /* Fetch next*/

    if (PW0HW00.PW0HWSC2 == " ") /* not end of cursor*/

      PW0H135(); /* validate release date*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close cursor - Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  PW0HS22(); /* Close cursor*/


end // end PW0H132

// Set cursor - Dpick.Vpooli01
Function PW0H133()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK5REC empty; /* Clear row storage area*/

  PK5REC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  PK5REC.PK1CUOID = PK4REC.PK1CUOID; /* Customer order number*/
  PK5REC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1990" ("S1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "133"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H133

// Calculate FC and RP qtys
Function PW0H134()
   /* ------------------------------------------------------------*/
    /* Accumualte full case and repack totals.*/
   /* ------------------------------------------------------------*/


  PW0HW00.PW0HWTFC = PK5REC.PK5ITMFC;
  PW0HW00.PW0HWTRP = PK5REC.PK5ITMRP;

   /* add to appropriate fields - spec hdlg or non-spec hdlg*/

  if (PK5REC.XHDCD[1] == "   "
   && PK5REC.XHDCD[2] == "   "
   && PK5REC.XHDCD[3] == "   "
   && PK5REC.XHDCD[4] == "   "
   && PK5REC.XHDCD[5] == "   ")

     /* all blanks indicate non-special handling for line item*/

    PW0HW00.PW0HWNHF = PW0HW00.PW0HWNHF + PW0HW00.PW0HWTFC;
    PW0HW00.PW0HWNHR = PW0HW00.PW0HWNHR + PW0HW00.PW0HWTRP;

  else

    PW0HW00.PW0HWSHF = PW0HW00.PW0HWSHF + PW0HW00.PW0HWTFC;
    PW0HW00.PW0HWSHR = PW0HW00.PW0HWSHR + PW0HW00.PW0HWTRP;

  end


end // end PW0H134

// Validate carrier hold rlse dt
Function PW0H135()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.PW0HWRUN == " ") /* if run mode is picking*/

    if (PWFREC.PKBRELDT > PW0HW00.PW0HWCDT) /* rlse date gt current date*/

      PW0HW00.PW0HWSWP = "N"; /* reject this order*/

    else

      return;

    end

  else

    if (PWFREC.PKBPLRDT > PW0HW00.PW0HWCDT) /* rlse date gt current date*/

      PW0HW00.PW0HWSWP = "N"; /* reject this order*/

    end

  end


end // end PW0H135

// Fetch next-Dpick.Vpooli01
Function PW0H136()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("N1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0HW00.PW0HWSC2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "136"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK5REC.PK5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H136

// Close cursor-Dpick.Vpooli01
Function PW0H137()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1990" ("C1", SQLCA, PK5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "137"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLI01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H137

// Check order hold data
Function PW0H138()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  PW0HS30(); /* Set cursor*/

  PW0HW00.PW0HWSC2 = " "; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and validate the release date*/
   /* ------------------------------------------------------------*/

  while (PW0HW00.PW0HWSC2 == " " /* Until end of cursor*/
   && PW0HW00.PW0HWSWP == " ") /* or order is rejected*/

    PW0HS31(); /* Check order hold data*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PW0HS32(); /* Close cursor*/


end // end PW0H138

// Select the Dpick.Vcuhld01 row
Function PW0H139()
   /* ------------------------------------------------------------*/
   /* Set the cursor - Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  PW0HS40(); /* Set cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and check dates til end of cursor.*/
   /* ------------------------------------------------------------*/

  PW0HW00.PW0HWSC2 = " "; /* Clear cursor switch*/

  while (PW0HW00.PW0HWSC2 == " " /* Til end of cursor*/
   && PW0HW00.PW0HWSWP == " ") /* or order is rejected*/

    PW0HS41(); /* fetch next row*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PW0HS42(); /* Close cursor*/


end // end PW0H139

// Save data in display storage
Function PW0H140()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.PW0HWIXM == 1) /* first line on page*/

    PW0HW01.XWHCD = PWKREC.XWHCD; /* Warehouse code*/
    PW0HW01.XWHABRV = PWKREC.XWHABRV;

    PW0HW01.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
    if (PKWREC.XDVCD[1] == "*")
      PW0HW01.XDVDESC = "ALL DIVISIONS";
    else
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0HW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    end

    PW0HW01.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
    if (PKWREC.XBCCD[1] == "*")
      PW0HW01.XBCABRV = " ";
    else
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW0HW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
    end

    PW0HW01.XHDCD = PWKREC.XHDCD[PKWINDEX]; /* spec hdlg code*/
    PW0HW01.PW0HWDMM = PW0HW00.PW0HWNMM; /* DNSB date - MM*/
    PW0HW01.PW0HWDDD = PW0HW00.PW0HWNDD; /* DNSB date - dd*/
    PW0HW01.PW0HWDYY = PW0HW00.PW0HWNYY; /* DNSB date - yy*/
    PW0HW01.PW0HWSEL = PW0HM001.PW0HMSEL; /* Selection code*/

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PW0HW01.PW0HWACT[PW0HWIXM] = " "; /* Action code*/
  PW0HW01.PK1CUOID[PW0HWIXM] = PK4REC.PK1CUOID; /* Customer order number*/
  PW0HW01.PK1NORID[PW0HWIXM] = PK4REC.PK1NORID; /* Nike order number*/
  PW0HW01.PW0HWSHF[PW0HWIXM] = PW0HW00.PW0HWSHF; /* Spec hdlg full case*/
  PW0HW01.PW0HWSHR[PW0HWIXM] = PW0HW00.PW0HWSHR; /* Spec hdlg repack*/
  PW0HW01.PW0HWSHT[PW0HWIXM] = PW0HW00.PW0HWSHF + PW0HW00.PW0HWSHR;
  PW0HW01.PW0HWNHF[PW0HWIXM] = PW0HW00.PW0HWNHF; /* full case*/
  PW0HW01.PW0HWNHR[PW0HWIXM] = PW0HW00.PW0HWNHR; /* repack*/

  if (PK4REC.PK4SLIND == "S" /* status is 's'elected*/
   || PK4REC.PK4SLIND == "P") /* status is selected*/

    PW0HW01.PK4SLIND[PW0HWIXM] = "Y"; /* Selection code*/
  else
    PW0HW01.PK4SLIND[PW0HWIXM] = "N"; /* set selection code to 'n'*/
  end

  PW0HW00.PW0HWIXM = PW0HW00.PW0HWIXM + 1; /* Increment line index*/


end // end PW0H140

// Add page to temporary storage
Function PW0H150()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0HW01.XXXTSLEN = PW0HW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0HW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PW0HW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0HW00.XXXMODID = "150"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H150

// Close selected set cursor
Function PW0H160()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("C1", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "160"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H160

// Format and converse the map
Function PW0H200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0HW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.PW0HWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0HW00.PW0HWSWF == "Y") /* Map must be formatted*/
      PW0H210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.TA5TSQIX == 0) /* if no pages were formatted*/

    set PW0HM001.PW0HMSEL cursor; /* set cursor on selection field*/

  end

  PW0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  if (PW0HW00.PW0HWRUN == "P")

    PW0HM001.PW0HMTTL = "PICK PLANNING"; /* set heading title*/

  else

    PW0HM001.PW0HMTTL = "  PICKING   ";

  end

  PW0HM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0HM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0HW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0HW00.XXXMSGNO != 0) /* Message to display*/
        if (PW0HW00.XXXTSPAG == 1) /* First page*/

          if (PW0HW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0HW00.XXXMSGNO);
          end /* Message number*/
          PW0HM001.XXXMODID = PW0HW00.XXXMODID; /* Module id*/
          set PW0HM001 alarm; /* Indicate sound alarm*/
        end
      else
        PW0HM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0HM001.XXXMODID = PW0HW00.XXXMODID; /* Module id*/
        set PW0HM001 alarm; /* Indicate sound alarm*/
      end
    end
  else
    PW0HM001.XXXMODID = PW0HW00.XXXMODID; /* Module id*/
    set PW0HM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0HM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0HW00.XXXMODID = " "; /* Module identification*/
  PW0HW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0HM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0HM001.CAITEM; /* Application data*/


end // end PW0H200

// Format the display data
Function PW0H210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0HM001 initial; /* M001 input/output area*/

  PW0HW00.PW0HWSWF = "N"; /* Format the map switch*/

  set PW0HM001.PW0HMSEL cursor; /* Position cursor*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0HW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0HW00.PW0HWCUR == "Y") /* Current page was changed*/

        PW0HS01(); /* Update temporary storage page*/

        PW0HW00.PW0HWCUR = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0HW00.XXXTSPAG > PW0HW00.TA5TSQIX) /* Desired greater highest*/
        PW0HW00.XXXTSPAG = PW0HW00.TA5TSQIX; /* Default to highest*/
      end

      PW0HS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0HM001.XXXLITPG skip; /* "PAGE" literal*/
    PW0HM001.XXXTSPAG = PW0HW00.XXXTSPAG; /* Current page*/
    set PW0HM001.XXXLITOF skip; /* "OF" literal*/
    PW0HM001.TA5TSQIX = PW0HW00.TA5TSQIX; /* Highest page*/
    PW0HW00.PW0HWIXM = 1; /* Initialize line index*/

    while (PW0HW00.PW0HWIXM <= 10 /* Until screen is full*/
     && PW0HW01.PK1CUOID[PW0HWIXM] > 0) /* or end of data*/

      if (PW0HW00.PW0HWIXM == 1) /* First select field*/

        set PW0HM001.PW0HMACT[PW0HWIXM] cursor, normal; /* Position cursor*/
      else
        set PW0HM001.PW0HMACT[PW0HWIXM] normal; /* Unprotect*/

      end

      PW0HM001.PW0HMACT[PW0HWIXM] = PW0HW01.PW0HWACT[PW0HWIXM];
      PW0HM001.PK1CUOID[PW0HWIXM] = PW0HW01.PK1CUOID[PW0HWIXM];
      PW0HM001.PW0HMDOT[PW0HWIXM] = ".";
      PW0HM001.PK1NORID[PW0HWIXM] = PW0HW01.PK1NORID[PW0HWIXM];
      PW0HM001.PW0HMSHF[PW0HWIXM] = PW0HW01.PW0HWSHF[PW0HWIXM];
      PW0HM001.PW0HMSHR[PW0HWIXM] = PW0HW01.PW0HWSHR[PW0HWIXM];
      PW0HM001.PW0HMSHT[PW0HWIXM] = PW0HW01.PW0HWSHT[PW0HWIXM];
      PW0HM001.PW0HMNHF[PW0HWIXM] = PW0HW01.PW0HWNHF[PW0HWIXM];
      PW0HM001.PW0HMNHR[PW0HWIXM] = PW0HW01.PW0HWNHR[PW0HWIXM];
      PW0HM001.PK4SLIND[PW0HWIXM] = PW0HW01.PK4SLIND[PW0HWIXM];
      PW0HM001.XHRCD[PW0HWIXM] = PW0HW01.XHRCD[PW0HWIXM];
      PW0HM001.PW0HMRMM[PW0HWIXM] = PW0HW01.PW0HWRMM[PW0HWIXM];
      PW0HM001.PW0HMRDD[PW0HWIXM] = PW0HW01.PW0HWRDD[PW0HWIXM];
      PW0HM001.PW0HMRYY[PW0HWIXM] = PW0HW01.PW0HWRYY[PW0HWIXM];
      set PW0HM001.PW0HMACT[PW0HWIXM] normal;
                                   /* open action field for input*/
      set PW0HM001.XHRCD[PW0HWIXM] normal;
                                   /* open hold code field for input*/
      set PW0HM001.PW0HMRMM[PW0HWIXM] normal; /* open month field for input*/
      set PW0HM001.PW0HMRDD[PW0HWIXM] normal; /* open day field for input*/
      set PW0HM001.PW0HMRYY[PW0HWIXM] normal; /* open year field for input*/

      PW0HW00.PW0HWIXM = PW0HW00.PW0HWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0HM001.XWHCD = PW0HW01.XWHCD; /* Warehouse code*/
  PW0HM001.XWHABRV = PW0HW01.XWHABRV; /* Warehouse abrv*/
  PW0HM001.XDVCD = PW0HW01.XDVCD; /* division code*/
  PW0HM001.XDVDESC = PW0HW01.XDVDESC; /* Division desc*/
  PW0HM001.XBCCD = PW0HW01.XBCCD; /* brand code*/
  PW0HM001.XBCABRV = PW0HW01.XBCABRV; /* brand abrv*/

  PW0HM001.PW0HMDMM = PW0HW01.PW0HWDMM; /* 'Do not ship before' date-mm*/
  PW0HM001.PW0HMDDD = PW0HW01.PW0HWDDD; /* 'Do not ship before' date-dd*/
  PW0HM001.PW0HMDYY = PW0HW01.PW0HWDYY; /* 'Do not ship before' date-yy*/

  PW0HM001.XHDCD = PW0HW01.XHDCD; /* Special handling code*/
  PW0HM001.PW0HMSEL = PW0HW01.PW0HWSEL; /* Selection criteria*/
  PW0HM001.CATOAP = " ";
  PW0HM001.CAITEM = " ";


end // end PW0H210

// Check attention identifier
Function PW0H300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0HW00.PW0HWSWR == "Y") /* Request for data*/
      set PW0HW01 empty; /* M001 display storage*/
    end

    PW0HW00.PW0HWSWF = "Y"; /* Format the map switch*/
    PW0HW00.PW0HWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0HM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PW0HM001.CATOAP == COMMAREA.CACURRAP) /* FAST PATH TO SELF*/

        converseLib.validationFailed(1); /* INVALID FAST PATH OPTION*/
        set PW0HM001.CATOAP cursor, bold; /* HIGHLIGHT*/
        exit stack;

      end

      PW0H110(); /* Purge temporary storage*/

      XSPKS01(); /* Exit to another application*/

      set PW0HM001.CATOAP cursor, bold; /* Highlight*/
      PW0HW00.PW0HWSWR = "Y";
      PW0HW00.PW0HWSWF = "Y";

    else

      PW0HW00.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(13); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0HM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PW0G"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    PW0H110(); /* Purge temporary storage*/

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0HW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0H300

// Reset highlighted fields
Function PW0H400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0HM001.PW0HMSEL initialAttributes; /* Selection*/

  PW0HW00.PW0HWIXM = 1; /* Initialize line index*/

  while (PW0HW00.PW0HWIXM <= 10 /* Until end of lines*/
   && PW0HM001.PK1CUOID[PW0HWIXM] > 0) /* or end of display*/

    set PW0HM001.PW0HMACT[PW0HWIXM] normal; /* Reset select flag*/
    set PW0HM001.XHRCD[PW0HWIXM] normal; /* Reset hold reason code*/
    set PW0HM001.PW0HMRMM[PW0HWIXM] normal; /* Reset release date - month*/
    set PW0HM001.PW0HMRDD[PW0HWIXM] normal; /* Reset release date - day*/
    set PW0HM001.PW0HMRYY[PW0HWIXM] normal; /* Reset release date - year*/

    PW0HW00.PW0HWIXM = PW0HW00.PW0HWIXM + 1; /* Increment line index*/

  end

  set PW0HM001.CATOAP initialAttributes; /* TO application*/
  set PW0HM001.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a '?' found in any of the hold code fields, open a pop-*/
   /* up window for selection, then move the selected value to*/
   /* the original field holding the '?'.*/
   /* ------------------------------------------------------------*/

  if ("?" in PW0HM001.XHRCD) /* if a '?' in any of the hold codes*/

    if (converseVar.eventKey not enter) /* enter not pressed*/

      PW0HW00.XXXMODID = "400"; /* Module id*/
      converseLib.validationFailed(320); /* Not valid without enter key*/

      exit stack; /* exit to display map*/

    else

      PW0HW00.PW0HWIXM = sysVar.arrayIndex; /* set index*/

    end

  else

    return;

  end

   /* ------------------------------------------------------------*/
   /* Display pop-up window for hold codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* pop-up window initialization*/

  XX0XW02.XX0XWHDR = "        HOLD REASON CODES"; /* set window title*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/

    XPXHR01(); /* display the list*/

  end
  if (XX0XW02.XX0XWPIX == 0) /* no selection made*/

    PW0HM001.XHRCD[PW0HWIXM] = PW0HW01.XHRCD[PW0HWIXM];

  else

    PW0HM001.XHRCD[PW0HWIXM] = XHRTBL.XHRCD[XX0XWPIX];

  end

  converseLib.clearScreen();
  
  PW0HW00.XXXMODID = "400"; /* Module id*/


end // end PW0H400

// Verify data that was entered
Function PW0H500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0HM001.CAITEM > " ") /* Application data was entered*/

    PW0HW00.XXXMODID = "500"; /* Module identification*/
    set PW0HM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0HW00.PW0HWIXM = 10; /* Initialize line index*/

    while (PW0HW00.PW0HWIXM > 0) /* Until end of lines*/

      if (PW0HM001.PK1CUOID[PW0HWIXM] != 0) /* there is data on line*/
        if (PW0HM001.PW0HMACT[PW0HWIXM] != PW0HW01.PW0HWACT[PW0HWIXM]
         || PW0HM001.XHRCD[PW0HWIXM] != PW0HW01.XHRCD[PW0HWIXM]
         || PW0HM001.PW0HMRMM[PW0HWIXM] != PW0HW01.PW0HWRMM[PW0HWIXM]
         || PW0HM001.PW0HMRDD[PW0HWIXM] != PW0HW01.PW0HWRDD[PW0HWIXM]
         || PW0HM001.PW0HMRYY[PW0HWIXM] != PW0HW01.PW0HWRYY[PW0HWIXM])

          PW0H520(); /* Verify data in the line*/

        end
      end

      PW0HW00.PW0HWIXM = PW0HW00.PW0HWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0H510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Selection code.*/
   /* ------------------------------------------------------------*/

  if (PW0HM001.PW0HMSEL != PW0HW01.PW0HWSEL) /* Selection code changed*/

    if (PW0HM001.PW0HMSEL != "A" /* selection code must be 'a'*/
     && PW0HM001.PW0HMSEL != "N" /* or 'n'*/
     && PW0HM001.PW0HMSEL != "S") /* or 's'*/

      converseLib.validationFailed(322); /* only a,n or s allowed*/
      set PW0HM001.PW0HMSEL cursor, bold; /* highlight*/
      exit stack;

    end

  end

  if (converseVar.eventKey is enter /* enter was pressed*/
   && PW0HW00.PW0HWSWA == "Y")      /* no more array data*/

    converseLib.validationFailed(339);
    exit stack;

  end

  if (converseVar.eventKey is enter         /* enter was pressed*/
   && PW0HM001.PW0HMSEL == PW0HW01.PW0HWSEL /* no chg to criteria*/
   && PW0HW00.PW0HWSWU == "N"               /* no data was changed*/
   && converseVar.validationMsgNum == 0)    /* no pending changes*/

    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1; /* increment index*/
    if (PKWREC.PKWINDEX > 25) /* already showing last in array*/

      if (PW0HW00.PW0HWAIX >= 3) /* on last occurrance of array*/

        converseLib.validationFailed(339); /* no more data to display*/
        PW0HW00.PW0HWSWA = "Y"; /* set end of array data switch*/

      else

        PW0HW00.PW0HWAIX = PW0HW00.PW0HWAIX + 1; /* increment array index*/
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PW0HWAIX];
                                   /* next 25 please*/
        PKWREC.PKWINDEX = 1; /* start at first*/
        if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* no more entries in array*/

          converseLib.validationFailed(339); /* no more data to display*/
          PW0HW00.PW0HWSWA = "Y"; /* set end of array data switch*/

        end
      end
    else /* still within current array*/
      if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* if exceeds entries in array*/

        converseLib.validationFailed(339); /* no more data to display*/
        PW0HW00.PW0HWSWA = "Y"; /* set end of array data switch*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW0H500

// Verify scroll request
Function PW0H510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0HW00.XXXTSPAG < 2)       /* and no previous pages*/

    PW0HW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0HW00.XXXTSPAG >= PW0HW00.TA5TSQIX) /* and no more pages*/

    PW0HW00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if selection was changed.*/
   /* ------------------------------------------------------------*/

  if (PW0HM001.PW0HMSEL != PW0HW01.PW0HWSEL) /* Selection changed*/

    PW0HW00.XXXMODID = "510"; /* Module identification*/
    set PW0HM001.PW0HMSEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end


end // end PW0H510

// Verify data in the line
Function PW0H520()
   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "s", "d", "i", "h", " ",*/
   /* error*/
   /* ------------------------------------------------------------*/

  if (PW0HM001.PW0HMACT[PW0HWIXM] != PW0HW01.PW0HWACT[PW0HWIXM]
   && PW0HM001.PW0HMACT[PW0HWIXM] != "S" /* and is not a "s"*/
   && PW0HM001.PW0HMACT[PW0HWIXM] != "D" /* and is not a "d"*/
   && PW0HM001.PW0HMACT[PW0HWIXM] != "I" /* and is not a "i"*/
   && PW0HM001.PW0HMACT[PW0HWIXM] != "H" /* and is not a "h"*/
   && PW0HM001.PW0HMACT[PW0HWIXM] != " ") /* and is not a " "*/

    PW0HW00.XXXMODID = "520"; /* Module identification*/
    set PW0HM001.PW0HMACT[PW0HWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* If order has previously been put on hold, no more changes*/
   /* are allowed.*/
   /* ------------------------------------------------------------*/

  if (PW0HW01.PW0HWSWH[PW0HWIXM] == "Y") /* Order has been put on hold*/

    PW0HM001.PW0HMACT[PW0HWIXM] = PW0HW01.PW0HWACT[PW0HWIXM];
    PW0HM001.XHRCD[PW0HWIXM] = PW0HW01.XHRCD[PW0HWIXM];
    PW0HM001.PW0HMRMM[PW0HWIXM] = PW0HW01.PW0HWRMM[PW0HWIXM];
    PW0HM001.PW0HMRDD[PW0HWIXM] = PW0HW01.PW0HWRDD[PW0HWIXM];
    PW0HM001.PW0HMRYY[PW0HWIXM] = PW0HW01.PW0HWRYY[PW0HWIXM];
    converseLib.validationFailed(169); /* no more chgs allowed - order on hold*/
    set PW0HM001.PK1CUOID[PW0HWIXM] bold;
    set PW0HM001.PK1NORID[PW0HWIXM] bold;
    return;

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/

  if (PW0HM001.PW0HMACT[PW0HWIXM] == "S"
   || PW0HM001.PW0HMACT[PW0HWIXM] == "D"
   || PW0HM001.PW0HMACT[PW0HWIXM] == "I"
   || PW0HM001.PW0HMACT[PW0HWIXM] == "*"
   || PW0HM001.PW0HMACT[PW0HWIXM] == "V"
   || PW0HM001.PW0HMACT[PW0HWIXM] == " ")

    if (PW0HM001.XHRCD[PW0HWIXM] != "  ") /* hold code must be blank*/
      PW0HW00.XXXMODID = "520"; /* Module id*/
      converseLib.validationFailed(331);
      set PW0HM001.PW0HMACT[PW0HWIXM] cursor, bold;
      set PW0HM001.XHRCD[PW0HWIXM] bold;
    end

    if (PW0HM001.PW0HMRMM[PW0HWIXM] != 0 /* release month not blank*/
     || PW0HM001.PW0HMRDD[PW0HWIXM] != 0 /* release day not blank*/
     || PW0HM001.PW0HMRYY[PW0HWIXM] != 0) /* release year not blank*/

      PW0HW00.XXXMODID = "520"; /* Module id*/
      converseLib.validationFailed(331);
      set PW0HM001.PW0HMRMM[PW0HWIXM] bold;
      set PW0HM001.PW0HMRDD[PW0HWIXM] bold;
      set PW0HM001.PW0HMRYY[PW0HWIXM] bold;
      set PW0HM001.PW0HMACT[PW0HWIXM] cursor, bold;

    end
  else
    if (PW0HM001.PW0HMACT[PW0HWIXM] == "H")

      PW0H522(); /* validate release date*/
      if (PW0HM001.XHRCD[PW0HWIXM] == "  ")
        converseLib.validationFailed(60); /* reason code is required field*/
        PW0HW00.XXXMODID = "520"; /* Module id*/
        set PW0HM001.XHRCD[PW0HWIXM] cursor, bold;
      else
        if (PW0HM001.XHRCD[PW0HWIXM] in XHRTBL.XHRCD
         && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          converseLib.validationFailed(57);
          set PW0HM001.XHRCD[PW0HWIXM] cursor, bold;
        end
      end

    end
  end

  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW0HM001.PW0HMACT[PW0HWIXM] == " ") /* un-selecting action*/

    return;
  end

  PW0HW00.PW0HWSWU = "Y"; /* data has been updated*/
  PW0HW00.PW0HWCUR = "Y"; /* screen has been updated*/


end // end PW0H520

// Validate entered release date
Function PW0H522()
   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  if (PW0HM001.PW0HMRMM[PW0HWIXM] == 0 /* if release month is zero*/
   && PW0HM001.PW0HMRDD[PW0HWIXM] == 0 /* and release day is zero*/
   && PW0HM001.PW0HMRYY[PW0HWIXM] == 0) /* and release year is zero*/

    converseLib.validationFailed(61); /* release date is required msg*/
    PW0HW00.XXXMODID = "522";
    set PW0HM001.PW0HMRMM[PW0HWIXM] cursor, bold; /* highlight*/
    set PW0HM001.PW0HMRDD[PW0HWIXM] bold; /* highlight*/
    set PW0HM001.PW0HMRYY[PW0HWIXM] bold; /* highlight*/
    return;

  end

   /* Is date valid and fall on a work day?*/

  set TA9REC empty; /* clear date routine record*/
  TA9REC.TA9BEGMM = PW0HM001.PW0HMRMM[PW0HWIXM];
  TA9REC.TA9BEGDD = PW0HM001.PW0HMRDD[PW0HWIXM];
  TA9REC.TA9BEGYY = PW0HM001.PW0HMRYY[PW0HWIXM];
  if (PW0HM001.PW0HMRYY[PW0HWIXM] > 80)

    TA9REC.TA9BEGCC = 19; /* set century to 19*/

  else

    TA9REC.TA9BEGCC = 20; /* otherwise set century to 20*/

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (sysVar.errorCode != "00000000") /* unsuccessful call*/

    converseLib.validationFailed(29); /* unexpected error*/
    PW0HW00.XXXMODID = "522"; /* Module id*/
    set PW0HM001.PW0HMRMM[PW0HWIXM] cursor, bold; /* highlight*/
    set PW0HM001.PW0HMRDD[PW0HWIXM] bold; /* highlight*/
    set PW0HM001.PW0HMRYY[PW0HWIXM] bold; /* highlight*/
    return;

  end

  if (TA9REC.TA9RTNFL != 0) /* bad return code*/

    if (TA9REC.TA9RTNFL == 6) /* invalid date*/

      converseLib.validationFailed(158); /* invalid date msg*/
      PW0HW00.XXXMODID = "522"; /* Module id*/
      set PW0HM001.PW0HMRMM[PW0HWIXM] cursor, bold; /* highlight*/
      set PW0HM001.PW0HMRDD[PW0HWIXM] bold; /* highlight*/
      set PW0HM001.PW0HMRYY[PW0HWIXM] bold; /* highlight*/

    else
      if (TA9REC.TA9RTNFL == 3) /* invalid work date*/

        converseLib.validationFailed(56); /* not work date msg*/
        PW0HW00.XXXMODID = "522"; /* Module id*/
        set PW0HM001.PW0HMRMM[PW0HWIXM] cursor, bold; /* highlight*/
        set PW0HM001.PW0HMRDD[PW0HWIXM] bold; /* highlight*/
        set PW0HM001.PW0HMRYY[PW0HWIXM] bold; /* highlight*/

      else

        converseLib.validationFailed(29); /* unexpected error*/
        PW0HW00.XXXMODID = "522"; /* Module id*/
        set PW0HM001.PW0HMRMM[PW0HWIXM] cursor, bold; /* highlight*/
        set PW0HM001.PW0HMRDD[PW0HWIXM] bold; /* highlight*/
        set PW0HM001.PW0HMRYY[PW0HWIXM] bold; /* highlight*/

      end
    end
  end

  if (TA9REC.TA9RTNFL == 0) /* no date routine error*/

    if (TA9REC.TA9BEGDT < PW0HW00.PW0HWCDT) /* release dt before today*/

      converseLib.validationFailed(55); /* date in past msg*/
      PW0HW00.XXXMODID = "522"; /* Module id*/
      set PW0HM001.PW0HMRMM[PW0HWIXM] cursor, bold; /* highlight*/
      set PW0HM001.PW0HMRDD[PW0HWIXM] bold; /* highlight*/
      set PW0HM001.PW0HMRYY[PW0HWIXM] bold; /* highlight*/

    end
  end


end // end PW0H522

// Process valid input request
Function PW0H600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0HW00.PW0HWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If any data lines were changed, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.PW0HWCUR == "Y") /* data changed this screen*/

    PW0HW00.PW0HWIXM = 1; /* initialize index*/
    while (PW0HW00.PW0HWIXM <= 10 /* till all lines moved*/
     && PW0HM001.PK1CUOID[PW0HWIXM] != 0) /* and data exists*/

      PW0HW01.PW0HWACT[PW0HWIXM] = PW0HM001.PW0HMACT[PW0HWIXM];
      PW0HW01.XHRCD[PW0HWIXM] = PW0HM001.XHRCD[PW0HWIXM];
      PW0HW01.PK4SLIND[PW0HWIXM] = PW0HM001.PK4SLIND[PW0HWIXM];
      PW0HW01.PW0HWRMM[PW0HWIXM] = PW0HM001.PW0HMRMM[PW0HWIXM];
      PW0HW01.PW0HWRDD[PW0HWIXM] = PW0HM001.PW0HMRDD[PW0HWIXM];
      PW0HW01.PW0HWRYY[PW0HWIXM] = PW0HM001.PW0HMRYY[PW0HWIXM];

      PW0HW00.PW0HWIXM = PW0HW00.PW0HWIXM + 1;

    end

    TA5REC.TA5TSQIX = PW0HW00.XXXTSPAG; /* which page to update*/
    PW0HS01(); /* update t/s page*/

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/

    if (PW0HM001.PW0HMSEL != PW0HW01.PW0HWSEL) /* Selection changed*/

      PW0HW00.PW0HWSWR = "Y"; /* Request for data switch*/
      return; /* Return to previous process*/

    else

      if (PW0HW00.PW0HWSWU != "Y") /* no updates for current data*/

        PW0HW00.PW0HWSWR = "Y"; /* Request for data switch*/

        return; /* Return to previous process*/

      else

        XX0XS01(); /* get system date and time*/

        PW0H610(); /* perform updates*/

        PW0HW00.PW0HWSWU = "N"; /* clear change switch*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* commit all changes*/
        if (PW0HW00.PW0HWIDX > 1) /* there were orders to inquire on*/

          PWJREC.XWHCD = PKWREC.XWHCD;
          PWJREC.XWHABRV = PKWREC.XWHABRV;
          PW0H660(); /* xfer to PW0I*/

        else

          PW0HW00.XXXTSPAG = 1; /* force display to first page*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0HW00.XXXTSPAG = PW0HW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0HW00.XXXTSPAG = PW0HW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end



end // end PW0H600

// Process lines of data
Function PW0H610()
   /* ------------------------------------------------------------*/
   /* Process data*/
   /* ------------------------------------------------------------*/

  PW0HW00.PW0HWIXM = 1; /* initialize idx*/
  PW0HW00.PW0HWIDX = 1; /* initialize idx for inquiry array*/
  PW0HW00.XXXTSPAG = 1; /* first page of t/s*/
  TA5REC.TA5TSQIX = PW0HW00.XXXTSPAG; /* assign page*/
  PW0HS02(); /* read first t/s page*/

  while (PW0HW00.XXXTSPAG <= PW0HW00.TA5TSQIX) /* while there is still data*/

    if (PW0HW01.PK1CUOID[PW0HWIXM] != 0) /* if there is data on this line*/

      if (PW0HW01.PW0HWACT[PW0HWIXM] == "S") /* select to pick*/
        PW0H620();
      end

      if (PW0HW01.PW0HWACT[PW0HWIXM] == "D") /* deselect order*/
        PW0H630();
      end

      if (PW0HW01.PW0HWACT[PW0HWIXM] == "H") /* place order on hold*/
        PW0H640();
      end

      if (PW0HW01.PW0HWACT[PW0HWIXM] == "I") /* inquire on order*/
        PW0H650();
      end

    end

    PW0HW00.PW0HWIXM = PW0HW00.PW0HWIXM + 1;

    if (PW0HW00.PW0HWIXM > 10) /* if index > 10*/

      PW0HS01(); /* updt current t/s page*/
      PW0HW00.XXXTSPAG = PW0HW00.XXXTSPAG + 1;
      if (PW0HW00.XXXTSPAG <= PW0HW00.TA5TSQIX) /* more t/s pages*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* commit db updates for prior page data*/
        TA5REC.TA5TSQIX = PW0HW00.XXXTSPAG; /* assign page to get*/
        PW0HS02(); /* get next t/s page*/
        PW0HW00.PW0HWIXM = 1; /* reset index*/

      end
    end
  end


end // end PW0H610

// Select order for picking
Function PW0H620()
   /* ------------------------------------------------------------*/
   /* Select order for picking*/
   /* ------------------------------------------------------------*/

  PW0HS10(); /* select unique pool header*/

  if (PW0HW00.PW0HWRUN == " ") /* if run mode is picking*/
    PK4REC.PK4SLIND = "S"; /* set status to 's'*/
  else
    PK4REC.PK4SLIND = "P"; /* otherwise, set to 'p'*/
  end

  PW0HW01.PK4SLIND[PW0HWIXM] = "Y";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0HS11(); /* update pool header*/

   /* ------------------------------------------------------------*/
   /* See if row already exists in Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW0HW01.XWHCD;
  PKHREC.PK1CUOID = PW0HW01.PK1CUOID[PW0HWIXM];
  PKHREC.PK1NORID = PW0HW01.PK1NORID[PW0HWIXM];
  PKHREC.PKURUNMD = PW0HW00.PW0HWRUN;

  PW0H621(); /* select unique Dpick.Vselor01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/

    if (PW0HW00.XXXMSGNO == 0) /* if no other warning msgs*/

      PW0HW00.XXXMSGNO = 44; /* warning msg*/
      PW0HW00.XXXMODID = "620"; /* module id*/

    end
    PW0HW01.PW0HWACT[PW0HWIXM] = " "; /* clear action code*/
    return; /* return to calling process, dont need to add record*/

  end

   /* ------------------------------------------------------------*/
   /* Now, insert row into Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/

  PKHREC.XWHCD = PW0HW01.XWHCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.XBCCD = PK4REC.XBCCD;
  PKHREC.PK1CUOID = PW0HW01.PK1CUOID[PW0HWIXM];
  PKHREC.PK1NORID = PW0HW01.PK1NORID[PW0HWIXM];
  PKHREC.PK1PRTN = PK4REC.PK1PRTN;
  PKHREC.OP1DSBDT = PWKREC.OP1DSBDT[PKWINDEX];
  PKHREC.TF1CARCD = PK4REC.TF1CARCD;
  PKHREC.XPPCD = PK4REC.XPPCD;
  PKHREC.PKURUNMD = PW0HW00.PW0HWRUN;
  PKHREC.PK-SEL-TYP-CD = " 5";
  PKHREC.PKHPVSFC = PW0HW01.PW0HWSHF[PW0HWIXM];
  PKHREC.PKHPVSFC = PKHREC.PKHPVSFC + PW0HW01.PW0HWNHF[PW0HWIXM];
  PKHREC.PKHPVSRP = PW0HW01.PW0HWSHR[PW0HWIXM];
  PKHREC.PKHPVSRP = PKHREC.PKHPVSRP + PW0HW01.PW0HWNHR[PW0HWIXM];

   /* calculate special handling minutes...*/
  PW0H622(); /* calculate special handling minutes*/

  PKHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PKHREC.ZZZCHGCT = 0;

  PW0H623(); /* insert Dpick.Vselor01*/


end // end PW0H620

// Select Dpick.Vselor01
Function PW0H621()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("S ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H621

// Calculate sphdlg minutes
Function PW0H622()
   /* ------------------------------------------------------------*/
   /* Set cursor for vpooli01*/
   /* Fetch each item record for the current order*/

   /* For each line item with total qty > 0:*/
    /* 1) Loop through the 5 occurrances of special handling code*/
       /* and retrieve the minutes-per-unit from the sphdlg table*/
    /* 2) Multiply the total qty by the minutes-per-unit*/
   /* ------------------------------------------------------------*/

  PW0H133(); /* set cursor vpooli01*/

  PW0HW00.PW0HWSC2 = "N"; /* clear cursor switch*/
  PKHREC.PKHPVSMM = 0; /* clear minutes field*/

  while (PW0HW00.PW0HWSC2 == "N") /* til no more line items for order*/

    PW0HW00.PW0HWIDX = 1; /* reset index*/
    PW0H136(); /* fetch next vpooli01*/

    while (PW0HW00.PW0HWIDX <= 5   /* til all occurrances are checked*/
     && PW0HW00.PW0HWSC2 == "N" /* and have a line item row*/
     && PK5REC.PK5TIQTY != 0) /* and have a non-zero qty*/

      if (PK5REC.XHDCD[PW0HWIDX] != "   ") /* non-blank code*/

        PW0HW00.XHDCD = PK5REC.XHDCD[PW0HWIDX];
        PW0HW00.XGPCD = PK5REC.XGPCD;

        if (PW0HW00.XHDKEY in XHDTBL.XHDKEY)

          PW0HW00.PKHPVSMM = mathLib.round(XHDTBL.XHDSHMM[sysVar.arrayIndex] * PK5REC.PK5TIQTY, -mathLib.decimals(PW0HW00.PKHPVSMM));
          PKHREC.PKHPVSMM = PKHREC.PKHPVSMM + PW0HW00.PKHPVSMM;

        end

      end

      PW0HW00.PW0HWIDX = PW0HW00.PW0HWIDX + 1; /* increment index*/

    end

  end

  PW0H137(); /* close cursor - vpooli01*/


end // end PW0H622

// Insert Dpick.Vselor01
Function PW0H623()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("A ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0HW00.XXXMSGNO = 32; /* table update successful*/
      PW0HW01.PW0HWACT[PW0HWIXM] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW0HW00.XXXMSGNO = 44; /* Warning msg*/
      PW0HW00.XXXMODID = "623"; /* module id*/
      PW0HW01.PW0HWACT[PW0HWIXM] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "623"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H623

// De-select order
Function PW0H630()
   /* ------------------------------------------------------------*/
    /* De-select order*/
   /* ------------------------------------------------------------*/

   /* ----- first, clear status in pool header (select unique,*/
   /* ----- then update it)*/

  PW0HS10(); /* select unique pool header*/

  PK4REC.PK4SLIND = " "; /* clear status*/
  PW0HW01.PK4SLIND[PW0HWIXM] = "N"; /* set select flag to no*/

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0HS11(); /* update pool header*/

   /* ------------------------------------------------------------*/
    /* Now, delete row from Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW0HW01.XWHCD;
  PKHREC.PK1CUOID = PW0HW01.PK1CUOID[PW0HWIXM];
  PKHREC.PK1NORID = PW0HW01.PK1NORID[PW0HWIXM];
  if (PKWREC.PKWSELSW == "PP") /* if pick planning mode*/

    PKHREC.PKURUNMD = "P"; /* set run mode accordingly*/

  end

  PW0H631(); /* delete Dpick.Vselor01*/


end // end PW0H630

// Delete Dpick.Vselor01 row
Function PW0H631()
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("D ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0HW00.XXXMSGNO = 32; /* update successful*/
      PW0HW01.PW0HWACT[PW0HWIXM] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0HW00.XXXMSGNO = 201; /* warning msg*/
      PW0HW00.XXXMODID = "631"; /* Module id*/
      PW0HW01.PW0HWACT[PW0HWIXM] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H631

// Put order on hold
Function PW0H640()
   /* ------------------------------------------------------------*/
          /* Put order on hold*/
   /* ------------------------------------------------------------*/
    /* Insert row into Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* clear record*/
  PKBREC.XWHCD = PW0HW01.XWHCD;
  PKBREC.PK1CUOID = PW0HW01.PK1CUOID[PW0HWIXM];
  PKBREC.PK1NORID = PW0HW01.PK1NORID[PW0HWIXM];
  PKBREC.XHRCD = PW0HW01.XHRCD[PW0HWIXM]; /* hold reason code*/

   /* ----- convert release date to CCYYMMDD format*/

  PW0HW00.PW0HWNMM = PW0HW01.PW0HWRMM[PW0HWIXM];
  PW0HW00.PW0HWNDD = PW0HW01.PW0HWRDD[PW0HWIXM];
  PW0HW00.PW0HWNYY = PW0HW01.PW0HWRYY[PW0HWIXM];
  if (PW0HW00.PW0HWNYY > 80) /* if year > 80*/

    PW0HW00.PW0HWNCC = 19; /* set century to 19*/

  else

    PW0HW00.PW0HWNCC = 20; /* else, set to 20*/

  end

  PW0H641(); /* select Dpick.Vorhld01*/

  PKBREC.PKBRELDT = PW0HW00.PW0HWNDT; /* store as release date*/

   /* -----------------------------------------------------------------*/
   /* If release date is not '999999', subtract 1 from release date*/
    /* and move to the plan release date.*/
   /* -----------------------------------------------------------------*/

  if (PW0HW00.PW0HWNMM != 99
   || PW0HW00.PW0HWNDD != 99
   || PW0HW00.PW0HWNYY != 99)

    set TA9REC empty;
    TA9REC.TA9BEGDT = PW0HW00.PW0HWNDT;
    TA9REC.TA9OFSET = -1;

    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subtract -1 from date*/

    /* ----------------------------------------------------------------*/
     /* If successful, move date and continue through process*/
    /* ----------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return code*/

      PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;

    else
      /* --------------------------------------------------------------*/
       /* otherwise, indicate that a system error has occurred*/
      /* --------------------------------------------------------------*/

      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return codes*/
      TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program appl*/
      TA1REC.TA1PGMNO = "640"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map appl*/

   /* error diagnosis routine*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
   /* exit to display map*/
      exit stack;
    end
  else

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
    PW0HW00.PW0HWNCC = 99;
    PKBREC.PKBRELDT = PW0HW00.PW0HWNDT;
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    PKBREC.PKBPLRDT = PW0HW00.PW0HWNDT;

  end

  /* -----------------------  Y2K OUT BEGIN  ------------------------*/
  /*  */
  /* IF PKBREC.PKBRELDT GT 19991231;*/
  /*  */
  /* ------------------------  Y2K OUT END  -------------------------*/

  /* -----------------------  Y2K IN BEGIN  -------------------------*/
  /*  */
  if (PKBREC.PKBRELDT > 20431231)
  /*  */
  /* ------------------------  Y2K IN END  --------------------------*/

    PKBREC.PKBRELDT = 99999999;
    PKBREC.PKBPLRDT = 99999999;
  end

  PKBREC.XXXUSRID = COMMAREA.CAUSERID;

  PKBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (SQLCA.VAGen_SQLCODE == 0) /* record found on order hold file*/

    PW0H642(); /* update existing record*/

  else

    PKBREC.ZZZCHGCT = 0;
    PW0H643(); /* insert Dpick.Vorhld01*/

  end

   /* ----- Retrieve pool header, update order-hold-flag,*/
   /* ----- then update it)*/

  PW0HS10(); /* select unique pool header*/

  PK4REC.PK4ORHLD = "Y"; /* set order hold flag to yes*/

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0HS11(); /* update pool header*/


end // end PW0H640

// Select unique Dpick.vorhld01
Function PW0H641()
   /* ------------------------------------------------------------*/
   /* Select the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "641"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H641

// Update row Dpick.vorhld01
Function PW0H642()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("U ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0HW01.PW0HWACT[PW0HWIXM] = "*"; /* flag as processed*/
      PW0HW01.PW0HWSWH[PW0HWIXM] = "Y"; /* hold flag set*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "642"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H642

// Insert row Dpick.vorhld01
Function PW0H643()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("A ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      PW0HW00.XXXMSGNO = 32; /* update successful*/
      PW0HW01.PW0HWACT[PW0HWIXM] = "*"; /* flag as processed*/
      PW0HW01.PW0HWSWH[PW0HWIXM] = "Y"; /* hold flag set*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "643"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0H643

// Process order for inquiry
Function PW0H650()
   /* ------------------------------------------------------------*/
   /* Order was requested for inquiry - add to pwjrec array*/
   /* ------------------------------------------------------------*/

  if (PW0HW00.PW0HWIDX > 65)

    PW0HW00.XXXMSGNO = 346;
    return;

  end

  PWJREC.PWJORACT[PW0HWIDX] = "I"; /* flag for inquiry*/
  PWJREC.PK1CUOID[PW0HWIDX] = PW0HW01.PK1CUOID[PW0HWIXM];
  PWJREC.PK1NORID[PW0HWIDX] = PW0HW01.PK1NORID[PW0HWIXM];
  PWJREC.PWJARMAX = PW0HW00.PW0HWIDX; /* set # occ's in array*/

  PW0HW00.PW0HWIDX = PW0HW00.PW0HWIDX + 1;


end // end PW0H650

// Transfer control to PW0I
Function PW0H660()
   /* ------------------------------------------------------------*/
   /* Orders are in PKYREC for inquiry, xfer to PW0I.*/
   /* ------------------------------------------------------------*/

  PW0H110(); /* Purge temporary storage*/

  COMMAREA.CATOAP = "PW0I"; /* set target application*/
  PKWREC.PKWUSERB = PWJREC.PKWUSERB; /* store array for pw0i*/
  XSPKS01(); /* Exit to another application*/

  set PW0HM001.CATOAP cursor, bold; /* Highlight*/

  exit stack; /* Exit to display map*/


end // end PW0H660

// Update t/s page
Function PW0HS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0HW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0HW00.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS01

// Read t/s page
Function PW0HS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0HW01.XXXTSLEN = PW0HW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0HW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0HW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0HW00.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS02

// Select unique Dpick.Vpoolh01
Function PW0HS10()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0HW01.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PW0HW01.PK1CUOID[PW0HWIXM]; /* Customer order number*/
  PK4REC.PK1NORID = PW0HW01.PK1NORID[PW0HWIXM]; /* Nike order number*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(29); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(28); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS10

// Update Dpick.Vpoolh01
Function PW0HS11()
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0HW00.PW0HWSWR = "Y"; /* Request for data switch*/

      PW0HW00.XXXMODID = "S11"; /* Module identification*/
      PW0HW00.XXXMSGNO = 29; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(105); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS11

// Set cursor - Dpick.Vcahld01
Function PW0HS20()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table-Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PW0HW01.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0HW00.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS20

// Fetch next - Dpick.Vcahld01
Function PW0HS21()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0HW00.PW0HWSC2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS21

// Close cursor - Dpick.Vcahld01
Function PW0HS22()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "S22"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS22

// set cursor - Dpick.vorhld01
Function PW0HS30()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Row storage area*/

  PKBREC.XWHCD = PW0HW01.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* Order number*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0HW00.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS30

// Fetch next Dpick.Vorhld01
Function PW0HS31()
   /* ------------------------------------------------------------*/
   /* Fetch the next row and check rlrse dates-Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PW0HW00.PW0HWRUN == " ") /* run mode is picking*/

        if (PKBREC.PKBRELDT > PW0HW00.PW0HWCDT) /* rlse date gt current dt*/

          PW0HW00.PW0HWSWP = "N";
          return;

        else
          return;
        end

      else

        if (PKBREC.PKBPLRDT > PW0HW00.PW0HWCDT) /* rlse date gt current dt*/

          PW0HW00.PW0HWSWP = "N";
          return;

        else
          return;
        end
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW0HW00.PW0HWSC2 = "Y"; /* end of cursor switch*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0HW00.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS31

// Close cursor - Dpick.Vorhld01
Function PW0HS32()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "S32"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS32

// Set cursor - Dpick.Vcuhld01
Function PW0HS40()
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PW0HW01.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0HW00.XXXMODID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS40

// Fetch next - Dpick.Vcuhld01
Function PW0HS41()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to check rlrse dates-Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PW0HW00.PW0HWRUN == " ") /* run mode is picking*/

        if (PK9REC.PK9RELDT > PW0HW00.PW0HWCDT) /* rlse date gt current dt*/

          PW0HW00.PW0HWSWP = "N";
          return;

        else
          return;
        end

      else

        if (PK9REC.PK9PLRDT > PW0HW00.PW0HWCDT) /* rlse date gt current dt*/

          PW0HW00.PW0HWSWP = "N";
          return;

        else
          return;
        end
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW0HW00.PW0HWSC2 = "Y"; /* end of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0HW00.XXXMODID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS41

// Close cursor - Dpick.Vcuhld01
Function PW0HS42()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0HW00.XXXMODID = "S42"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0HW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0HS42

//*** RECORD=PW0HW00 ****
// Working storage for PW0H
// ***********************
Record PW0HW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0HWSWR PW0HWSWR ; 
  10 PW0HWSWA PW0HWSWA ; 
  10 PW0HWSWF PW0HWSWF ; 
  10 PW0HWSWU PW0HWSWU ; 
  10 PW0HWCUR PW0HWCUR ; 
  10 PW0HWSWP PW0HWSWP ; 
  10 PW0HWSWC PW0HWSWC ; 
  10 PW0HWSC2 PW0HWSC2 ; 
  10 PW0HWRUN PW0HWRUN ; 
  10 PW0HWIXM PW0HWIXM ; 
  10 PW0HWIDX PW0HWIDX ; 
  10 PW0HWAIX PW0HWAIX ; 
  10 * char(1) ; 
  10 PW0HWCDT PW0HWCDT ; 
    15 PW0HWCCC PW0HWCCC ; 
    15 PW0HWEDT PW0HWEDT ; 
      20 PW0HWCYY PW0HWCYY ; 
      20 * num(4) ; 
  10 PW0HWNDT PW0HWNDT ; 
    15 PW0HWNCC PW0HWNCC ; 
    15 PW0HWNYY PW0HWNYY ; 
    15 PW0HWNMM PW0HWNMM ; 
    15 PW0HWNDD PW0HWNDD ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PW0HWNUM PW0HWNUM ; 
  10 PW0HWNHF PW0HWNHF ; 
  10 PW0HWNHR PW0HWNHR ; 
  10 PW0HWSHF PW0HWSHF ; 
  10 PW0HWSHR PW0HWSHR ; 
  10 PW0HWDFC PW0HWDFC ; 
  10 PW0HWDRP PW0HWDRP ; 
  10 PW0HWTFC PW0HWTFC ; 
  10 PW0HWTRP PW0HWTRP ; 
  10 PKHPVSMM PKHPVSMM ; 
  10 XHDKEY XHDKEY ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
end // end PW0HW00

//*** RECORD=PW0HW01 ****
// Map working storage for PW0HM001
// ***********************
Record PW0HW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(569) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XDVCD XDVCD ; 
    10 XDVDESC XDVDESC ; 
    10 XBCCD XBCCD ; 
    10 XBCABRV XBCABRV ; 
    10 PW0HWDMM PW0HWDMM ; 
    10 PW0HWDDD PW0HWDDD ; 
    10 PW0HWDYY PW0HWDYY ; 
    10 XHDCD XHDCD ; 
    10 PW0HWSEL PW0HWSEL ; 
    10 * char(52) [10] ; 
      15 PW0HWACT PW0HWACT ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 PW0HWSHF PW0HWSHF ; 
      15 PW0HWSHR PW0HWSHR ; 
      15 PW0HWSHT PW0HWSHT ; 
      15 PW0HWNHF PW0HWNHF ; 
      15 PW0HWNHR PW0HWNHR ; 
      15 PK4SLIND PK4SLIND ; 
      15 XHRCD XHRCD ; 
      15 PW0HWRMM PW0HWRMM ; 
      15 PW0HWRDD PW0HWRDD ; 
      15 PW0HWRYY PW0HWRYY ; 
      15 PW0HWSWH PW0HWSWH ; 
end // end PW0HW01

// Action
DataItem PW0HWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ARRAY INDEX
DataItem PW0HWAIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date CC
DataItem PW0HWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date for comparison
DataItem PW0HWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current screen chgd
DataItem PW0HWCUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date YY
DataItem PW0HWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map DNSB date - DD
DataItem PW0HWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail full case qty
DataItem PW0HWDFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map DNSB date - MM
DataItem PW0HWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail repack qty
DataItem PW0HWDRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map DNSB date - YY
DataItem PW0HWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EZEDTE date YYMMDD
DataItem PW0HWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work index
DataItem PW0HWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem PW0HWIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date century
DataItem PW0HWNCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date day
DataItem PW0HWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric field to convert date
DataItem PW0HWNDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Non-special handling-full case
DataItem PW0HWNHF num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Non-special handling-repack
DataItem PW0HWNHR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date month
DataItem PW0HWNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work number field
DataItem PW0HWNUM num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date year
DataItem PW0HWNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Release date - day
DataItem PW0HWRDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Release date - month
DataItem PW0HWRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Run mode
DataItem PW0HWRUN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Release date - year
DataItem PW0HWRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor switch for Vpoolh01
DataItem PW0HWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection criteria
DataItem PW0HWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Special handling - full case
DataItem PW0HWSHF num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Special handling - repack
DataItem PW0HWSHR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Special handling - total
DataItem PW0HWSHT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array data switch
DataItem PW0HWSWA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for Vphdit01
DataItem PW0HWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format screen switch
DataItem PW0HWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold switch
DataItem PW0HWSWH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Okay to process switch
DataItem PW0HWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0HWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data chgd switch (all pgs)
DataItem PW0HWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total full case qty
DataItem PW0HWTFC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total repack qty
DataItem PW0HWTRP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

