package pw0w;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PW0W ****
// This menu program gives users access to Pick Planning
// Selection applications for warehouse 51 (Memphis) and
// warehouse 07 (Wilsonvill).  The user has already entered
// the Pick Planning Selection option (9) with warehouse "51"
// or warehouse "07".  If the user selects the picking
// selection option (8) for any other warehouse, he will be
// taken to pk0S. These menus are very similiar. The difference
// is that there are more selection programs to choose from
// for memphis apparel and wilsonville and the carrier/spur
// prgrams have been rewritten to give more detail.
// 
// The selction menu gives the users the option to select
// by order, customer, or by quantites. If they select by
// quantities, they will have separate programs for special
// handling, non-special handling, and pack & hold quantites.
// 
// Although no other warehouses will be using these menus or
// programs, they will be used for other warehouses in the
// future.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      01/21/91  RGUTMA  New application.
//          10/01/91  SHENDE  1. Allow whse '07' access.
//                            2. Added option 8 to transfer to
//                               PW06 (Selection by B-Grade and
//                               Closeouts).
//                            3. Add division code to map.
//                            4. Add DNSB date range to map.
//                            5. Add XPPK004 to validate the
//                               division code.
//          04/07/92  SHENDE  Temp. change for Phase I (grnlnd
//                            retrofit) Transfer whse 2 & 4 to
//                            old carr/spur screen (PW0A).
//          04/27/92  SHENDE  Add in-store promo option to menu
//          05/07/92  SHENDE  xfer whse '02' to new carr/spur
// Mem ftw  05/19/92  TGLENN  Change title for option 11 from
// Retrofit                   CARRIER/SPUR CONFIRMATION  to
//                            CARRIER/SPUR PRE-ASSIGNMENT.
// Colehaan 07/07/92  SHENDE  1. Add brand code
//                            2. Xfer to PW0T (new carr/spur)
// Colehaan 08/17/92  SHENDE  Transfer to old carrier screen
//                            for pre-install.
// Colehaan 08/19/92  SHENDE  Transfer to new carrier screen.
//                            for installation of whole system.
// pk#404   07/28/93  mwilso  remove pw0g & pw0k from menu.
//                            reorder selection options.
//                           changed map to pink
// Canada   10/25/95  pstroe  Pick-up new version of XPPK003
// DCSPLIT  10/01/96  dhuffm  Add pick leveling
// Canada   12/31/97  VKAKUB  ADD PW0Z as 12th Option
// Y2K      02/16/98  nfield Y2K Compliance -changes to PW0W510
//                           PW0W500, PW0WM001
// *********************
Program PW0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PKWREC PKWREC; // record
  PW0WW00 PW0WW00; // record
  PW0WW01 PW0WW01; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XDVTBL; // table
  use XBCTBL; // table
  use PW0WT {deleteAfterUse = yes}; // table
  use PW0WM.PW0WM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0WM001 initial; /* M001 input/output*/
    set PW0WW00 empty; /* Working storage*/
    set TA1REC empty; /* ta1rec area*/
    set TAEREC empty; /* taerec area*/
    COMMAREA.CAITEM = " "; /* Clear commrea item*/

    PW0WW00.PW0WWSWF = "Y"; /* Format the map switch*/
    PW0WW00.PW0WWSWR = "N"; /* Request for data switch*/
    PW0WW00.PW0WWSWS = "Y"; /* First time thru switch*/

    PKWREC.PKWSELSW = "PP"; /* pick planning*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.XWHCD > " ") /* IF a warehouse cd was passed*/
      PW0WW00.PW0WWSWR = "Y"; /* Request for data switch*/
    end

     /* ------- Initial move to PKWREC ------------------------------*/
    if (PKWREC.XDVCD[1] == " ") /* if division code not passed*/
      PKWREC.XDVCD = COMMAREA.XDVCD;
    end

    if (PKWREC.XBCCD[1] == " ") /* if brand code not passed*/
      PKWREC.XBCCD[1] = "*"; /* default to '*' wildcard*/
    end

     /* ------------------------------------------------------------*/
     /* Check that the whse & division code are valid for this*/
     /* application.  If not, then discontinue.*/
     /* ------------------------------------------------------------*/

    if (PKWREC.XWHCD == "51") /* Apparel warehouse*/
      COMMAREA.XGPCD = "03";
    else /* Footwear warehouse*/
      COMMAREA.XGPCD = "02";
    end

    goto PW0W000; /* Perform XPPK003 & XPPK004*/


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0W001; /* Converse the main process*/


    PW0W000: PW0W000();

    PW0W001: PW0W001();
     /* --------------------------------------------------------*/
     /* Flow to converse the main process used to display a map*/
     /* --------------------------------------------------------*/


    goto PW0W001; /* Flow the main process*/

  end // end main
end // end PW0W

// Check the FROM application
Function PW0W000()

   /* ------------------------------------------------------------*/
   /* Determine whether warehouse code and division code are*/
   /* valid.  If valid, proceed; otherwise, display message*/
   /* and return to application initiating transfer.*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* common procedure to validate passed warehouse*/


  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* common procedure to validate division code*/
  end


end // end PW0W000

// Main process to display a map
Function PW0W001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0W100(); /* Obtain the data to display*/

  PW0W200(); /* Format and display the map*/

  PW0W300(); /* Check attention identifier*/

  PW0W400(); /* Reset fields to normal intensity*/

  PW0W500(); /* Verify the data that was entered*/

  PW0W600(); /* Process valid input request*/


end // end PW0W001

// Obtain the data to display
Function PW0W100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0WW00.PW0WWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0WW00.PW0WWSWR = "N"; /* Request for data switch*/


end // end PW0W100

// Format and converse the map
Function PW0W200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0WW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0WW00.PW0WWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0WW00.PW0WWSWF == "Y") /* Map must be formatted*/
      PW0W210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if first time thru, move commarea warehouse to map*/
   /* ------------------------------------------------------------*/

  if (PW0WW00.PW0WWSWS == "Y") /* IF FIRST TIME THRU is YES*/
    PW0WM001.XWHCD = COMMAREA.XWHCD; /* move commarea whse cd to map*/
    PKWREC.XWHCD = COMMAREA.XWHCD; /* move commarea whse cd pkwrec*/
    PW0WW00.PW0WWSWS = "N"; /* no longer first time thru*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0WM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0WM001.CAITEM = COMMAREA.CAITEM; /* CA item*/

  PW0WM001.XDVCD = PKWREC.XDVCD[1]; /* move division code to map*/
  PW0WM001.XBCCD = PKWREC.XBCCD[1]; /* move brand code to map*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0WW00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW0WW00.XXXMSGNO != 0) /* Message to display*/

      if (PW0WW00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW0WW00.XXXMSGNO);
      end /* Message number*/
    else
      PW0WM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PW0WM001.XXXMODID = TA1REC.TA1LOC; /* Module ident*/

    set PW0WM001 alarm; /* Indicate sound alarm*/

  end

  converse PW0WM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOC = " "; /* Module identification*/
  PW0WW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0WM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = PW0WM001.CAITEM; /* Application data*/

end // end PW0W200

// Format the display data
Function PW0W210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0WM001 initial; /* M001 input/output area*/

  PW0WW00.PW0WWSWF = "N"; /* Format the map switch*/


   /* ------- format "from" date fields --------*/
  PW0WW00.PW0WMFDT = PKWREC.PKWFRMDT[1];
  PW0WW01.PW0WWFDT = PKWREC.PKWFRMDT[1];
  PW0WM001.PW0WMFMM = PW0WW01.PW0WWFMM;
  PW0WM001.PW0WMFDD = PW0WW01.PW0WWFDD;
  PW0WM001.PW0WMFYY = PW0WW01.PW0WWFYY;
   /* ------- format "to" date fields ----------*/
  PW0WW00.PW0WMTDT = PKWREC.PKWTODT[1];
  PW0WW01.PW0WWTDT = PKWREC.PKWTODT[1];
  PW0WM001.PW0WMTMM = PW0WW01.PW0WWTMM;
  PW0WM001.PW0WMTDD = PW0WW01.PW0WWTDD;
  PW0WM001.PW0WMTYY = PW0WW01.PW0WWTYY;


end // end PW0W210

// Check attention identifier
Function PW0W300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PW0WW00.PW0WWSWF = "Y"; /* Format the map switch*/
    PW0WW00.PW0WWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Reset commarea and pkwrec for fastpath/pf keys*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = PW0WM001.XWHCD; /* move map whse cd to commarea*/
  PKWREC.XWHCD = PW0WM001.XWHCD; /* move map whse cd to pkwrec*/

  if (PW0WM001.XBCCD != " ")
    PKWREC.XBCCD[1] = PW0WM001.XBCCD; /* move map brand code*/
  end

  if (PW0WM001.XDVCD != " ")
    PKWREC.XDVCD[1] = PW0WM001.XDVCD; /* move map division code*/
  end

  PW0WW01.PW0WWFMM = PW0WM001.PW0WMFMM; /* move "from" DNSB dates*/
  PW0WW01.PW0WWFDD = PW0WM001.PW0WMFDD;
  PW0WW01.PW0WWFYY = PW0WM001.PW0WMFYY;
  PW0WW01.PW0WWFCC = 0;
  PKWREC.PKWFRMDT[1] = PW0WW01.PW0WWFDT;

  PW0WW01.PW0WWTMM = PW0WM001.PW0WMTMM; /* move "to" DNSB dates*/
  PW0WW01.PW0WWTDD = PW0WM001.PW0WMTDD;
  PW0WW01.PW0WWTYY = PW0WM001.PW0WMTYY;
  PW0WW01.PW0WWTCC = 0;
  PKWREC.PKWTODT[1] = PW0WW01.PW0WWTDT;

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* return pkwrec to commarea*/

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0WM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PW0WM001.CATOAP == "PW0W") /* FAST PATH is this application*/
        TA1REC.TA1LOC = "300"; /* Module identification*/
        set PW0WM001.CATOAP cursor, bold; /* to appl*/
        converseLib.validationFailed(1); /* INVALID Pf/PA key*/

        exit stack; /* Exit to display map*/

      else
        XSPKS01(); /* Exit to another application*/
        set PW0WM001.CATOAP cursor, bold; /* Highlight*/
      end

    else

      TA1REC.TA1LOC = "300"; /* Module identification*/
      set PW0WM001.PW0WMSEL cursor; /* cursor to slection*/
      converseLib.validationFailed(13); /* INVALID Pf/PA key*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/


    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0WM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PK0A"; /* TO application*/
    end

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TA1REC.TA1LOC = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0W300

// Reset highlighted fields
Function PW0W400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0WM001.PW0WMSEL initialAttributes; /* Menu selection*/
  set PW0WM001.XWHCD initialAttributes; /* warehouse code*/
  set PW0WM001.XDVCD initialAttributes; /* division code*/
  set PW0WM001.XBCCD initialAttributes; /* brand code*/

  set PW0WM001.PW0WMFMM initialAttributes; /* "from" DNSB date*/
  set PW0WM001.PW0WMFDD initialAttributes;
  set PW0WM001.PW0WMFYY initialAttributes;

  set PW0WM001.PW0WMTMM initialAttributes; /* "to" DNSB date*/
  set PW0WM001.PW0WMTDD initialAttributes;
  set PW0WM001.PW0WMTYY initialAttributes;

  set PW0WM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set PW0WM001.CAITEM initialAttributes; /* FAST PATH application data*/

end // end PW0W400

// Verify data that was entered
Function PW0W500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    TA1REC.TA1LOC = "500"; /* Module identification*/
    set PW0WM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Invalid pf key*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the menu selection that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0WM001.PW0WMSEL in PW0WT.PW0WMSEL) /* Selection in table*/

     /* NEXT SENTENCE*/

  else

    TA1REC.TA1LOC = "500"; /* Module identification*/
    set PW0WM001.PW0WMSEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(05); /* INVALID OPTION*/
    exit stack;

  end


   /* ------------------------------------------------------------*/
   /* Verify the division code if it has changed.*/
   /* ------------------------------------------------------------*/

  if (PW0WM001.XDVCD == " ") /* Division code entered*/
    converseLib.validationFailed(393);
    set PW0WM001.XDVCD cursor, bold;
    TA1REC.TA1LOC = "500"; /* Module identification*/
    exit stack;
  end

  PKWREC.XDVCD[1] = PW0WM001.XDVCD;

  if (PW0WM001.XDVCD != "*")
    XPPK004();

    if (converseVar.validationMsgNum != 0)
      converseLib.validationFailed(393);
      set PW0WM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the brand code if it has changed.*/
   /* ------------------------------------------------------------*/

  if (PW0WM001.XBCCD == " ") /* Division code entered*/
    converseLib.validationFailed(413);
    set PW0WM001.XBCCD cursor, bold;
    TA1REC.TA1LOC = "500"; /* Module identification*/
    exit stack;
  end

  PKWREC.XBCCD[1] = PW0WM001.XBCCD;

  if (PW0WM001.XBCCD != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414); /* Brand code is inactive*/
        set PW0WM001.XBCCD cursor, bold;
        TA1REC.TA1LOC = "500";
        exit stack;
      end
    else
      converseLib.validationFailed(413); /* Invalid brand code*/
      set PW0WM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end

    if (converseVar.validationMsgNum != 0)
      converseLib.validationFailed(413);
      set PW0WM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify DNSB date range.*/
   /* ------------------------------------------------------------*/

  PW0WW00.PW0WWKCH = "N"; /* Init key changed flag*/
  PW0WW00.PW0WWDTC = "N"; /* Init date check flag*/

  if (PW0WM001.PW0WMTMM == 0
   || PW0WM001.PW0WMTDD == 0)
   /* -------Y2K OUT---------------*/
   /* OR PW0WM001.PW0WMTYY EQ 0;*/
   /* -------Y2K OUT---------------*/

    PW0W510(); /* date check*/

  else

    if (PW0WM001.PW0WMFMM != PW0WW00.PW0WMFMM
     || PW0WM001.PW0WMFDD != PW0WW00.PW0WMFDD
     || PW0WM001.PW0WMFYY != PW0WW00.PW0WMFYY
     || PW0WM001.PW0WMTMM != PW0WW00.PW0WMTMM
     || PW0WM001.PW0WMTDD != PW0WW00.PW0WMTDD
     || PW0WM001.PW0WMTYY != PW0WW00.PW0WMTYY)

      PW0WW00.PW0WWKCH = "Y"; /* key has changed*/
      PW0W510(); /* date check*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


  if (PW0WW00.PW0WWKCH == "Y") /* Key has changed*/
    return;
  end

end // end PW0W500

// Verify DNSB date range
Function PW0W510()
   /* ----------------------------------------------------------------*/
   /* Verify the "to" date*/
   /* ----------------------------------------------------------------*/

  if (PW0WM001.PW0WMFMM == 0
   && PW0WM001.PW0WMFDD == 0
   && PW0WM001.PW0WMFYY == 0
   && PW0WM001.PW0WMTMM == 0
   && PW0WM001.PW0WMTDD == 0
   && PW0WM001.PW0WMTYY == 0)

   /* ---------- "to" date field -----------------*/
    PW0WW00.PW0WMTMM = PW0WM001.PW0WMTMM; /* move to compare field*/
    PW0WW00.PW0WMTDD = PW0WM001.PW0WMTDD;
    PW0WW00.PW0WMTYY = PW0WM001.PW0WMTYY;
    PW0WW00.PW0WMTCC = 0;
    PW0WW01.PW0WWTDT = PW0WW00.PW0WMTDT; /* move to working storage*/

   /* ---------- "from" date field ---------------*/
    PW0WW00.PW0WMFMM = PW0WM001.PW0WMFMM; /* move to compare field*/
    PW0WW00.PW0WMFDD = PW0WM001.PW0WMFDD;
    PW0WW00.PW0WMFYY = PW0WM001.PW0WMFYY;
    PW0WW00.PW0WMFCC = 0;
    PW0WW01.PW0WWFDT = PW0WW00.PW0WMFDT; /* move to working storage*/

  else
   /* ---------------------------------------------------------------*/
   /* Verify the "to" Date*/
   /* ---------------------------------------------------------------*/
    if (PW0WM001.PW0WMTMM == 0
     || PW0WM001.PW0WMTDD == 0)
   /* --------Y2K OUT--------------*/
   /* OR PW0WM001.PW0WMTYY EQ 0;*/
   /* --------Y2K OUT--------------*/

      PW0WW00.PW0WWDTC = "Y"; /* Date check error*/
      TA1REC.TA1LOC = "510"; /* Module identification*/
      converseLib.validationFailed(158); /* Invalid date*/
      set PW0WM001.PW0WMTMM cursor, bold;
      set PW0WM001.PW0WMTDD bold;
      set PW0WM001.PW0WMTYY bold;

    end

    if (PW0WW00.PW0WWDTC == "Y") /* There is an error*/
      return;
    end

    PW0WW00.PW0WMTDD = PW0WM001.PW0WMTDD;
    PW0WW00.PW0WMTMM = PW0WM001.PW0WMTMM; /* move to compare field*/
    PW0WW00.PW0WMTYY = PW0WM001.PW0WMTYY;

    if (PW0WW00.PW0WMTYY > 50
     && PW0WW00.PW0WMTYY <= 99)

      PW0WW00.PW0WMTCC = 19;

    else
      PW0WW00.PW0WMTCC = 20;

    end

    set TA2REC empty;
    TA2REC.TA2GRGGN = PW0WW00.PW0WMTDT;
   /* ----------Y2K IN---------------*/
    PW0WW01.PW0WWTDT = PW0WW00.PW0WMTDT; /* move to working storage*/
   /* ----------Y2K IN---------------*/
    PW0WS01(); /* Validate the date*/

    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "510";
      converseLib.validationFailed(158);
      set PW0WM001.PW0WMTMM cursor, bold;
      set PW0WM001.PW0WMTDD bold;
      set PW0WM001.PW0WMTYY bold;
    end

   /* ------------------------------------------------------------------*/
   /* Verify the "from" date*/
   /* ------------------------------------------------------------------*/

    PW0WW00.PW0WWDTC = "N";

   /* ---------Y2K OUT----------*/
   /* IF PW0WM001.PW0WMFMM EQ 0*/
   /* OR PW0WM001.PW0WMFDD EQ 0*/
   /* OR PW0WM001.PW0WMFYY EQ 0;*/
   /* ---------Y2K OUT----------*/
   /* ---------Y2K IN-----------*/
    if (PW0WM001.PW0WMFMM == 0
     && PW0WM001.PW0WMFDD == 0
     && PW0WM001.PW0WMFYY == 0)
   /* ---------Y2K IN-----------*/

      PW0WW00.PW0WMFCC = "0";

    end

    PW0WW00.PW0WMFMM = PW0WM001.PW0WMFMM; /* move to compare field*/
    PW0WW00.PW0WMFDD = PW0WM001.PW0WMFDD;
    PW0WW00.PW0WMFYY = PW0WM001.PW0WMFYY;

    if (PW0WW00.PW0WMFDT != 0)
      if (PW0WW00.PW0WMFYY > 50
       && PW0WW00.PW0WMFYY <= 99)

        PW0WW00.PW0WMFCC = 19;

      else
        PW0WW00.PW0WMFCC = 20;

      end

      set TA2REC empty;
   /* ---------Y2K OUT----------*/
   /* MOVE PW0WW00.PW0WMTDT TO TA2REC.TA2GRGGN;*/
   /* ---------Y2K OUT----------*/
   /* ---------Y2K IN-----------*/
      TA2REC.TA2GRGGN = PW0WW00.PW0WMFDT;
   /* ---------Y2K IN-----------*/
      PW0WW01.PW0WWFDT = PW0WW00.PW0WMFDT;
      PW0WS01(); /* Validate the date*/

      if (TA2REC.TA2RTNCD != 0)
        TA1REC.TA1LOC = "510";
        converseLib.validationFailed(158);
        set PW0WM001.PW0WMFMM cursor, bold;
        set PW0WM001.PW0WMFDD bold;
        set PW0WM001.PW0WMFYY bold;
      end
    end
  end

   /* -----------------------------------------------------------------*/
   /* Check that the "from" date is less than the "to" date*/
   /* -----------------------------------------------------------------*/

  if (PW0WW00.PW0WMFDT > PW0WW00.PW0WMTDT) /* FROM date > TO date*/

    TA1REC.TA1LOC = "510"; /* Module identification*/
    converseLib.validationFailed(286); /* FROM date must be < TO date*/
    set PW0WM001.PW0WMFMM cursor, bold;
    set PW0WM001.PW0WMFDD bold;
    set PW0WM001.PW0WMFYY bold;

    set PW0WM001.PW0WMTMM bold;
    set PW0WM001.PW0WMTDD bold;
    set PW0WM001.PW0WMTYY bold;

  end


end // end PW0W510

// Process valid input request
Function PW0W600()
   /* ------------------------------------------------------------*/
   /* Invoke the application indicated by the table entry.*/
   /* ------------------------------------------------------------*/

  if (PW0WM001.PW0WMSEL in PW0WT.PW0WMSEL)
    COMMAREA.CATOAP = PW0WT.CATOAP[sysVar.arrayIndex];
  end
  PW0WW00.PW0WMSEL = PW0WM001.PW0WMSEL; /* Move map select to rec*/

  XSPKS01(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  set PW0WM001.PW0WMSEL cursor, bold; /* Highlight*/


end // end PW0W600

// Validate the date
Function PW0WS01()
   /* ------------------------------------------------------------*/
   /* validate DNSB date "to"*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

    return; /* Normal return code*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "DNSB TO DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S01"; /* Module identification*/
    converseLib.validationFailed(29); /* System error occurred*/

    return; /* exit to display map*/

  end


end // end PW0WS01

//*** RECORD=PW0WW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0WW00 type basicRecord
  10 PW0WWSWF PW0WWSWF ; 
  10 PW0WWSWR PW0WWSWR ; 
  10 PW0WWSWS PW0WWSWS ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 PW0WMSEL PW0WMSEL ; 
  10 PW0WMFDT PW0WMFDT ; 
    15 PW0WMFCC PW0WMFCC ; 
    15 PW0WMFYY PW0WMFYY ; 
    15 PW0WMFMM PW0WMFMM ; 
    15 PW0WMFDD PW0WMFDD ; 
  10 PW0WMTDT PW0WMTDT ; 
    15 PW0WMTCC PW0WMTCC ; 
    15 PW0WMTYY PW0WMTYY ; 
    15 PW0WMTMM PW0WMTMM ; 
    15 PW0WMTDD PW0WMTDD ; 
  10 PW0WWDTC PW0WWDTC ; 
  10 PW0WWKCH PW0WWKCH ; 
end // end PW0WW00

Record PW0WW01 type basicRecord
  10 PW0WWFDT PW0WWFDT ; 
    15 PW0WWFCC PW0WWFCC ; 
    15 PW0WWFYY PW0WWFYY ; 
    15 PW0WWFMM PW0WWFMM ; 
    15 PW0WWFDD PW0WWFDD ; 
  10 PW0WWTDT PW0WWTDT ; 
    15 PW0WWTCC PW0WWTCC ; 
    15 PW0WWTYY PW0WWTYY ; 
    15 PW0WWTMM PW0WWTMM ; 
    15 PW0WWTDD PW0WWTDD ; 
end // end PW0WW01

DataItem PW0WMFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WMFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0WMFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WMFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0WMFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0WMTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WMTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0WMTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WMTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0WMTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0WWDTC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0WWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0WWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0WWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first screen switch
DataItem PW0WWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0WWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0WWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

