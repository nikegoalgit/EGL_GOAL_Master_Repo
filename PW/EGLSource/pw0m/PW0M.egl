package pw0m;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0M ****
// This program allows users to select P & H Special Handling
// quantities. The DNSB date range must be entered before the
// detail line data can be formatted. Once the date range is
// entered, and verified, the map will display quantities
// sorted by Do Not Ship Before dates (DNSB), carrier codes,
// and special handling codes. There is a maximum of 50 pages
// displayed. If a requested date is a non P&H date, the user
// is not allowed to update the quantities.
// 
// If the user selects quantities by pack & hold DNSB date/
// carrier code/spcl hndl code, they won't be selected by
// specific order numbers. The user can select quantities by
// order by placing an 'I' next to a specific DNSB date/carr
// cd/spcl hndl cd. This will take the user to a different
// program (PW0N) where he/she can select specific pack
// and hold orders for picking.
// 
// The user can also transfer out of this application by using
// one of the PF keys displayed at the bottom of the map,
// or by entering fast-path information (also at the bottom of
// the map).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      01/21/91  jcarey  New application.
//          04/18/91  jcarey  Changed headings to take out the
//                            word 'prev' (previous).
//          08/01/91  mwalto  allow sql 100 in pw0m120, and chk
//                            for row found in pw0m100.
//          09/10/91  shende  change non-selected qtys to pick
//                            pool qtys in map.
//          10/08/91  JCAMPB  Table changes
//          10/09/91  shende  1. Allow access to whse '07'.
//                            2. Display division code (XDVCD)
//                               which can be modified in the
//                               header.
//                            3. Do not display B-Grade and
//                               Closeout quantities.
//                            4. Allow fastpath from PW06, PW0X
//                               and PW0J.
//          03/06/92  SHENDE  Add xbc-brand-code (XBCCD) for
//                            March table changes.
//          04/20/92  SHENDE  Allow PW08 access and do not
//                            display in-store promo.
//          06/22/92  SHENDE  Table changes
//          07/13/92  SHENDE  Display brand code.  Also, allow
//                            wild card division and brand cd.
//          09/14/92  SHENDE  Move '*' instead of blank to
//                            pkhrec in pw0m115.
//          12/15/92  SHENDE  Correct pw0m125 where it was
//                            referring to xdvcd instead of
//                            xbccd to validate wildcard brand.
//          10/12/93  kande1  renamed new procs created by
//                            rcream but not documented
// pk#349   10/25/93  kande1  fixed mapping problem of losing
//                            all data after data range selcted
//                            chg to allow to dnsb date to be
//                            zero to process non pack and hold
// pk00     12/06/93  hchapm  added "extra qty" logic
// tblchg   03/03/94  mpluth  fixed a bug in pw0m620 that was
//                            causing an abend.  Added a
//                            "if xhdcd in xhdtbl" statement
//                            to prevent an index overflow
//                            error.
// Canada   10/25/95  PSTROE  Pick-up new version of XPPK003
// APRLPRJ  12/15/95  PANDER  Pick Planning Rewrite:
//                            remove 10 page limitation
//                            change 'extra' special handling
// APRLPRJ  01/23/96  PANDER  Pick Planning Rewrite:
//                            add unit of measure
//                            remove special handling time
// BASICS   04/15/97  PANDER  Do not include Basics orders -
//                            XOTCD = 'FV'.
// y2kfix   02/09/98  pharwo  y2k changes to pw0mmfyy, pw0mmtyy
//                            on map001,2 and pw0m-52001 and
//                            pw0m-52002.
// *********************
Program PW0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0MW00 PW0MW00; // record
  PW0MW01 PW0MW01; // record
  PW0MW20 PW0MW20; // record
  PW0MW30 PW0MW30; // record
  PW0MW40 PW0MW40; // record
  PW0MW50 PW0MW50; // record
  PW0MW60 PW0MW60; // record
  PW0MW70 PW0MW70; // record
  PWEREC PWEREC; // record
  PWFREC PWFREC; // record
  PWKREC PWKREC; // record
  PWVREC PWVREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XHDTBL; // table
  use XWHTBL; // table
  use XDVTBL; // table
  use XOTTBL; // table
  use XBCTBL; // table
  use PW0MM.PW0MM001,  // forms
      PW0MM.PW0MM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0MM001 initial; /* M001 input/output*/
    set PW0MM002 initial; /* M002 input/output*/
    set PW0MW00 empty; /* Working storage*/
    set PW0MW01 empty; /* M001 display storage*/
    set PW0MW20 empty; /* Order tbl*/
    set PW0MW30 empty; /* Quantity tbl*/
    set PW0MW40 empty; /* Non select tbl*/
    set PW0MW50 empty; /* Temp table*/
    set PW0MW60 empty; /* Merged tbl*/
    set PW0MW70 empty; /* EXTRA INFO*/
    set SQLCA empty; /* SQL communication area*/
    set PK4REC empty; /* VPOOLH01 - Pool header tbl rec*/
    set PK9REC empty; /* VCUHLD01 - Customer hold rec*/
    set PKBREC empty; /* VORHLD01 - Order hold rec*/
    set PWEREC empty; /* VPHDIT02 - Picking hdr/item tbl rec*/
    set PWFREC empty; /* VCAHLD01 - Carrier hold tbl*/
    set PKHREC empty; /* VSELOR01 - Selected quant by order*/
    set PWKREC empty; /* Picking DNSB date array*/
    set PWVREC empty; /* VSELQT02 - Selected quant not by ord*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA9REC empty; /* ta0190 record*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    PW0MW00.PW0MWSWF = "Y"; /* Format the map switch*/
    PW0MW00.PW0MWSWR = "Y"; /* Request for data switch*/
    PW0MW00.PW0MWIQF = "N"; /* Select inquire switch*/
    PW0MW00.PW0MW-MAP-IDX-MAX = 10; /* Map limit (10 lines)*/
    PW0MW00.PW0MW-ORD-IDX-MAX = 200; /* Order table limit (200 orders)*/
    PW0MW00.PW0MW-QTY-IDX-MAX = 200; /* Qty table limit (200 recs)*/
    PW0MW00.PW0MW-NSEL-IDX-MAX = 600; /* Pool table limit (600 recs)*/
    PW0MW00.PW0MWLMT = 601; /* Table limit (60 pages) +1*/

     /* ------------------------------------------------------------*/
     /* Determine whether the screen should be 'picking' or*/
     /* 'pick planning'. The screen can only be entered from*/
     /* PW0V, PW0W, PW0R, PW0M or PW0J. If from the last 3,*/
     /* the select switch will already be set. If from PW0V,*/
     /* it's picking. PW0W is pick planning.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "PW0V")
      PKWREC.PKWSELSW = "PK"; /* selection from picking*/

    else
      if (COMMAREA.CAFROMAP == "PW0W")
        PKWREC.PKWSELSW = "PP"; /* selection from pick planning*/
      end

    end

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      PW0MW00.PKURUNMD = "P";
      PW0MW00.PW0MWTIT = "PICK PLANNING";
    else /* default to picking*/
      PW0MW00.PKURUNMD = " ";
      PW0MW00.PW0MWTIT = "   PICKING   ";
      if (PKWREC.PKWSELSW != "PK") /* if select flag not 'pk'*/
        PKWREC.PKWSELSW = "PK"; /* set to picking*/
      end
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0M000; /* Verify from appl & P&H min dt*/


    PW0M000: PW0M000();
     /* ----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ----------------------------------------------------------*/

    goto PW0M001; /* Converse the main process*/


    PW0M001: PW0M001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW0M001; /* Converse the main process*/


  end // end main
end // end PW0M

// Format and converse the map
Function PW0M-20001()

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0MM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0MM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0MW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0MW00.XXXMSGNO != 0) /* Message to display*/
        /* IF PW0MW00.XXXTSPAG EQ 1;  /* First page*/
        if (PW0MW00.XXXMSGNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(PW0MW00.XXXMSGNO);
        end /* Message number*/
        PW0MM001.XXXMODID = TA1REC.TA1LOC; /* Module id*/
        set PW0MM001 alarm; /* Indicate sound alarm*/
        /* END;*/
      else
        PW0MM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0MM001.XXXMODID = TA1REC.TA1LOC; /* Module id*/
        set PW0MM001 alarm; /* Indicate sound alarm*/
      end

    end
  else
    PW0MM001.XXXMODID = TA1REC.TA1LOC; /* Module identification*/
    set PW0MM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0MM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOC = " "; /* Module identification*/
  PW0MW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0MM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0MM001.CAITEM; /* Application data*/


end // end PW0M-20001

// Format and converse the map
Function PW0M-20002()

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0MM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0MM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0MM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0MW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0MW00.XXXMSGNO != 0) /* Message to display*/
        /* IF PW0MW00.XXXTSPAG EQ 1;  /* First page*/
        if (PW0MW00.XXXMSGNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(PW0MW00.XXXMSGNO);
        end /* Message number*/
        PW0MM002.XXXMODID = TA1REC.TA1LOC; /* Module id*/
        set PW0MM002 alarm; /* Indicate sound alarm*/
        /* END;*/
      else
        PW0MM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0MM002.XXXMODID = TA1REC.TA1LOC; /* Module id*/
        set PW0MM002 alarm; /* Indicate sound alarm*/
      end

    end
  else
    PW0MM002.XXXMODID = TA1REC.TA1LOC; /* Module identification*/
    set PW0MM002 alarm; /* Indicate sound alarm*/
  end

  converse PW0MM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOC = " "; /* Module identification*/
  PW0MW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0MM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0MM002.CAITEM; /* Application data*/


end // end PW0M-20002

// Format the display data
Function PW0M-21001()
   /* ------------------------------------------------------------*/
   /* Note: Apply all changes to pw0m-21002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0MM001.PW0MMAPL = PW0MW00.PW0MWTIT; /* Title*/
  PW0MM001.XWHCD = PW0MW01.XWHCD; /* Warehouse code*/
  PW0MM001.XWHABRV = PKWREC.XWHABRV;
  PW0MM001.XDVCD = PW0MW01.XDVCD; /* Division code*/
  PW0MM001.XDVDESC = PW0MW01.XDVDESC;
  PW0MM001.XBCCD = PW0MW01.XBCCD; /* Brand code*/
  PW0MM001.XBCABRV = PW0MW01.XBCABRV;
  PW0MM001.PW0MMFYY = PW0MW01.PW0MWFYY; /* From year*/
  PW0MM001.PW0MMFMM = PW0MW01.PW0MWFMM; /* From month*/
  PW0MM001.PW0MMFDD = PW0MW01.PW0MWFDD; /* From day*/
  PW0MM001.PW0MMTYY = PW0MW01.PW0MWTYY; /* To year*/
  PW0MM001.PW0MMTMM = PW0MW01.PW0MWTMM; /* To month*/
  PW0MM001.PW0MMTDD = PW0MW01.PW0MWTDD; /* To day*/

  PW0MW00.PW0MWIXM = 1; /* Set index to 1*/

  while (PW0MW00.PW0MWIXM <= PW0MW00.PW0MW-MAP-IDX-MAX)
                                  /* Until end of screen*/
    if (PW0MW01.PW0MWDYY[PW0MWIXM] == 0 /* line is empty*/
     && PW0MW01.PW0MWDMM[PW0MWIXM] == 0 
     && PW0MW01.PW0MWDDD[PW0MWIXM] == 0 
     && PW0MW01.XHDCD[PW0MWIXM] == " "  
     && PW0MW01.TF1CARCD[PW0MWIXM] == " ")

       /* next sentence*/

    else

      set PW0MM001.PW0MMSEL[PW0MWIXM] normal;
      set PW0MM001.PW0MMBQT[PW0MWIXM] normal;

      PW0MM001.PW0MMSEL[PW0MWIXM] = PW0MW01.PW0MWSEL[PW0MWIXM];
      if (PW0MW01.PW0MWDDT[PW0MWIXM] == 0) /* date is zeros*/
         /* next sentence*/
      else
        PW0MM001.PW0MMDYY[PW0MWIXM] = PW0MW01.PW0MWDYY[PW0MWIXM];
        PW0MM001.PW0MMDMM[PW0MWIXM] = PW0MW01.PW0MWDMM[PW0MWIXM];
        PW0MM001.PW0MMDDD[PW0MWIXM] = PW0MW01.PW0MWDDD[PW0MWIXM];
      end

      PW0MM001.TF1CARCD[PW0MWIXM] = PW0MW01.TF1CARCD[PW0MWIXM];
      PW0MM001.PW0MMHCD[PW0MWIXM] = PW0MW01.XHDCD[PW0MWIXM];
      PW0MM001.XUM-UOM-CD[PW0MWIXM] = PW0MW01.XUM-UOM-CD[PW0MWIXM];
      PW0MM001.PW0MMRP[PW0MWIXM] = PW0MW01.PW0MWWRP[PW0MWIXM];
      PW0MM001.PW0MMFC[PW0MWIXM] = PW0MW01.PW0MWWFC[PW0MWIXM];

      PW0MM001.PW0MMBOR[PW0MWIXM] = PW0MW01.PW0MWBOR[PW0MWIXM];
      PW0MM001.PW0MMBQT[PW0MWIXM] = PW0MW01.PW0MWBQT[PW0MWIXM];

    end

    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1; /* Increment index*/

  end


end // end PW0M-21001

// Format the display data
Function PW0M-21002()
   /* ------------------------------------------------------------*/
   /* Note: Apply all changes to pw0m-21001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0MM002.PW0MMAPL = PW0MW00.PW0MWTIT; /* Title*/
  PW0MM002.XWHCD = PW0MW01.XWHCD; /* Warehouse code*/
  PW0MM002.XWHABRV = PKWREC.XWHABRV;
  PW0MM002.XDVCD = PW0MW01.XDVCD; /* Division code*/
  PW0MM002.XDVDESC = PW0MW01.XDVDESC;
  PW0MM002.XBCCD = PW0MW01.XBCCD; /* Brand code*/
  PW0MM002.XBCABRV = PW0MW01.XBCABRV;
  PW0MM002.PW0MMFYY = PW0MW01.PW0MWFYY; /* From year*/
  PW0MM002.PW0MMFMM = PW0MW01.PW0MWFMM; /* From month*/
  PW0MM002.PW0MMFDD = PW0MW01.PW0MWFDD; /* From day*/
  PW0MM002.PW0MMTYY = PW0MW01.PW0MWTYY; /* To year*/
  PW0MM002.PW0MMTMM = PW0MW01.PW0MWTMM; /* To month*/
  PW0MM002.PW0MMTDD = PW0MW01.PW0MWTDD; /* To day*/

  PW0MW00.PW0MWIXM = 1; /* Set index to 1*/

  while (PW0MW00.PW0MWIXM <= PW0MW00.PW0MW-MAP-IDX-MAX)
                                  /* Until end of screen*/
    if (PW0MW01.PW0MWDYY[PW0MWIXM] == 0 /* line is empty*/
     && PW0MW01.PW0MWDMM[PW0MWIXM] == 0 
     && PW0MW01.PW0MWDDD[PW0MWIXM] == 0 
     && PW0MW01.XHDCD[PW0MWIXM] == " "  
     && PW0MW01.TF1CARCD[PW0MWIXM] == " ")

       /* next sentence*/

    else

      set PW0MM002.PW0MMSEL[PW0MWIXM] normal;
      set PW0MM002.PW0MMBQT[PW0MWIXM] normal;

      PW0MM002.PW0MMSEL[PW0MWIXM] = PW0MW01.PW0MWSEL[PW0MWIXM];
      if (PW0MW01.PW0MWDDT[PW0MWIXM] == 0) /* date is zeros*/
         /* next sentence*/
      else
        PW0MM002.PW0MMDYY[PW0MWIXM] = PW0MW01.PW0MWDYY[PW0MWIXM];
        PW0MM002.PW0MMDMM[PW0MWIXM] = PW0MW01.PW0MWDMM[PW0MWIXM];
        PW0MM002.PW0MMDDD[PW0MWIXM] = PW0MW01.PW0MWDDD[PW0MWIXM];
      end

      PW0MM002.TF1CARCD[PW0MWIXM] = PW0MW01.TF1CARCD[PW0MWIXM];
      PW0MM002.PW0MMHCD[PW0MWIXM] = PW0MW01.XHDCD[PW0MWIXM];
      PW0MM002.XUM-UOM-CD[PW0MWIXM] = PW0MW01.XUM-UOM-CD[PW0MWIXM];
      PW0MM002.PW0MMRP[PW0MWIXM] = PW0MW01.PW0MWWRP[PW0MWIXM];
      PW0MM002.PW0MMFC[PW0MWIXM] = PW0MW01.PW0MWWFC[PW0MWIXM];

      PW0MM002.PW0MMBOR[PW0MWIXM] = PW0MW01.PW0MWBOR[PW0MWIXM];
      PW0MM002.PW0MMBQT[PW0MWIXM] = PW0MW01.PW0MWBQT[PW0MWIXM];

    end

    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1; /* Increment index*/

  end


end // end PW0M-21002

// Verify data that was entered
Function PW0M-50001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0m-50002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0MM001.CAITEM > " ") /* Application data was entered*/

    TA1REC.TA1LOC = "500"; /* Module identification*/
    set PW0MM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0M510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------*/
   /* Check to see if the screen key data has changed.*/
   /* If so, verify the new data*/
   /* ------------------------------------------------------*/

  PW0MW00.PW0MWKCH = "N"; /* Init key changed flag*/

  if (PW0MM001.PW0MMFMM != PW0MW01.PW0MWFMM
   || PW0MM001.PW0MMFDD != PW0MW01.PW0MWFDD
   || PW0MM001.PW0MMFYY != PW0MW01.PW0MWFYY
   || PW0MM001.PW0MMTMM != PW0MW01.PW0MWTMM
   || PW0MM001.PW0MMTDD != PW0MW01.PW0MWTDD
   || PW0MM001.PW0MMTYY != PW0MW01.PW0MWTYY)

    PW0MW00.PW0MWKCH = "Y"; /* Key has changed*/

    PW0M-52001(); /* Perform date checks*/

  end

  if (converseVar.validationMsgNum != 0) /* There is a heading error*/
    exit stack;
  end


   /* ----------------------------------------------------------*/
   /* Verify Division Code*/
   /* ----------------------------------------------------------*/

  if (PW0MM001.XDVCD != PW0MW01.XDVCD) /* map value ne current value*/
    PW0MW00.PW0MWKCH = "Y"; /* key has changed*/

    if (PW0MM001.XDVCD == " ") /* if division code blank*/
      converseLib.validationFailed(393);
      set PW0MM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XDVCD[1] = PW0MM001.XDVCD; /* move div. code to Commarea*/

  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* verify new division code*/

    if (converseVar.validationMsgNum == 0) /* no error*/
      PW0MW01.XDVCD = PKWREC.XDVCD[1];
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0MW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    else
      converseLib.validationFailed(393);
      set PW0MM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  else
    PW0MW01.XDVCD = PKWREC.XDVCD[1];
    PW0MW01.XDVDESC = "ALL DIVISIONS";
  end


   /* ----------------------------------------------------------*/
   /* Verify Brand Code*/
   /* ----------------------------------------------------------*/

  if (PW0MM001.XBCCD != PW0MW01.XBCCD) /* map value ne current value*/
    PW0MW00.PW0MWKCH = "Y"; /* key has changed*/

    if (PW0MM001.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0MM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XBCCD[1] = PW0MM001.XBCCD;

  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0MM001.XBCCD cursor, bold;
        TA1REC.TA1LOC = "500";
        exit stack;
      else
        PW0MW01.XBCCD = PKWREC.XBCCD[1];
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0MW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
      end
    else
      converseLib.validationFailed(413);
      set PW0MM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "500";
      exit stack;
    end
  else
    PW0MW00.XXXMSGNO = 421;
    PW0MW01.XBCABRV = " ";
    PW0MW01.XBCCD = PKWREC.XBCCD[1];
  end

  if (PW0MW00.PW0MWKCH == "Y") /* Key has changed*/
    return;
  end


   /* ----------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in detail.*/
   /* ----------------------------------------------------------*/

  if (PW0MW00.TA5TSQIX == 0)

    return; /* No detail to verify*/

  end

  PW0MW00.PW0MWQTR = "N"; /* Init quantity req to no*/

  PW0MW00.PW0MWPGI = PW0MW00.XXXTSPAG; /* Page index*/
  PW0MW00.PW0MWIMX = PW0MW00.PW0MWIEX[PW0MWPGI]; /* w60 index*/

  PW0MW00.PW0MWIXM = PW0MW00.PW0MW-MAP-IDX-MAX; /* Init line index*/

  while (PW0MW00.PW0MWIXM > 0) /* Until end of lines*/

    if (PW0MM001.PW0MMSEL[PW0MWIXM] == PW0MW01.PW0MWSEL[PW0MWIXM]
     && PW0MM001.PW0MMBQT[PW0MWIXM] == PW0MW01.PW0MWBQT[PW0MWIXM])
       /* next sentence*/
    else

      PW0M-53001(); /* Verify data in the line*/

    end

    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM - 1; /* Decrement line nu*/
    PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX - 1; /* Decrement w60 index*/

  end


   /* ----------------------------------------------------------*/
   /* Check for conflicting order request and P&H request*/
   /* ----------------------------------------------------------*/

  PW0M540(); /* Check for order/P&H request*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/

    exit stack; /* Exit to display map*/
  end


end // end PW0M-50001

// Verify data that was entered
Function PW0M-50002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0m-50001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0MM002.CAITEM > " ") /* Application data was entered*/

    TA1REC.TA1LOC = "500"; /* Module identification*/
    set PW0MM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0M510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------*/
   /* Check to see if the screen key data has changed.*/
   /* If so, verify the new data*/
   /* ------------------------------------------------------*/

  PW0MW00.PW0MWKCH = "N"; /* Init key changed flag*/

  if (PW0MM002.PW0MMFMM != PW0MW01.PW0MWFMM
   || PW0MM002.PW0MMFDD != PW0MW01.PW0MWFDD
   || PW0MM002.PW0MMFYY != PW0MW01.PW0MWFYY
   || PW0MM002.PW0MMTMM != PW0MW01.PW0MWTMM
   || PW0MM002.PW0MMTDD != PW0MW01.PW0MWTDD
   || PW0MM002.PW0MMTYY != PW0MW01.PW0MWTYY)

    PW0MW00.PW0MWKCH = "Y"; /* Key has changed*/

    PW0M-52002(); /* Perform date checks*/

  end

  if (converseVar.validationMsgNum != 0) /* There is a heading error*/
    exit stack;
  end


   /* ----------------------------------------------------------*/
   /* Verify Division Code*/
   /* ----------------------------------------------------------*/

  if (PW0MM002.XDVCD != PW0MW01.XDVCD) /* map value ne current value*/
    PW0MW00.PW0MWKCH = "Y"; /* key has changed*/

    if (PW0MM002.XDVCD == " ") /* if division code blank*/
      converseLib.validationFailed(393);
      set PW0MM002.XDVCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XDVCD[1] = PW0MM002.XDVCD; /* move div. code to Commarea*/

  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* verify new division code*/

    if (converseVar.validationMsgNum == 0) /* no error*/
      PW0MW01.XDVCD = PKWREC.XDVCD[1];
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0MW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    else
      converseLib.validationFailed(393);
      set PW0MM002.XDVCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  else
    PW0MW01.XDVCD = PKWREC.XDVCD[1];
    PW0MW01.XDVDESC = "ALL DIVISIONS";
  end


   /* ----------------------------------------------------------*/
   /* Verify Brand Code*/
   /* ----------------------------------------------------------*/

  if (PW0MM002.XBCCD != PW0MW01.XBCCD) /* map value ne current value*/
    PW0MW00.PW0MWKCH = "Y"; /* key has changed*/

    if (PW0MM002.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0MM002.XBCCD cursor, bold;
      TA1REC.TA1LOC = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XBCCD[1] = PW0MM002.XBCCD;

  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0MM002.XBCCD cursor, bold;
        TA1REC.TA1LOC = "500";
        exit stack;
      else
        PW0MW01.XBCCD = PKWREC.XBCCD[1];
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0MW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
      end
    else
      converseLib.validationFailed(413);
      set PW0MM002.XBCCD cursor, bold;
      TA1REC.TA1LOC = "500";
      exit stack;
    end
  else
    PW0MW00.XXXMSGNO = 421;
    PW0MW01.XBCABRV = " ";
    PW0MW01.XBCCD = PKWREC.XBCCD[1];
  end

  if (PW0MW00.PW0MWKCH == "Y") /* Key has changed*/
    return;
  end


   /* ----------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in detail.*/
   /* ----------------------------------------------------------*/

  if (PW0MW00.TA5TSQIX == 0)

    return; /* No detail to verify*/

  end

  PW0MW00.PW0MWQTR = "N"; /* Init quantity req to no*/

  PW0MW00.PW0MWPGI = PW0MW00.XXXTSPAG; /* Page index*/
  PW0MW00.PW0MWIMX = PW0MW00.PW0MWIEX[PW0MWPGI]; /* w60 index*/

  PW0MW00.PW0MWIXM = PW0MW00.PW0MW-MAP-IDX-MAX; /* Init line index*/

  while (PW0MW00.PW0MWIXM > 0) /* Until end of lines*/

    if (PW0MM002.PW0MMSEL[PW0MWIXM] == PW0MW01.PW0MWSEL[PW0MWIXM]
     && PW0MM002.PW0MMBQT[PW0MWIXM] == PW0MW01.PW0MWBQT[PW0MWIXM])
       /* next sentence*/
    else

      PW0M-53002(); /* Verify data in the line*/

    end

    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM - 1; /* Decrement line nu*/
    PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX - 1; /* Decrement w60 index*/

  end


   /* ----------------------------------------------------------*/
   /* Check for conflicting order request and P&H request*/
   /* ----------------------------------------------------------*/

  PW0M540(); /* Check for order/P&H request*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/

    exit stack; /* Exit to display map*/
  end


end // end PW0M-50002

// Verify heading dates
Function PW0M-52001()
   /* -------------------------------------------*/
   /* Note: Apply changes to pw0m-52002 also.*/
   /* -------------------------------------------*/
   /* -------------------------------------------*/
   /* Verify the to date.*/
   /* -------------------------------------------*/

  PW0MW00.PW0MWTMM = PW0MM001.PW0MMTMM;
  PW0MW00.PW0MWTDD = PW0MM001.PW0MMTDD;
  PW0MW00.PW0MWTYY = PW0MM001.PW0MMTYY;
  PW0MW00.PW0MWTCC = 0;

  set TA2REC empty;

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PW0MW00.PW0MWTDT NE 0;*/
   /* IF PW0MW01.PW0MWTYY GT 50*/
   /* AND PW0MW01.PW0MWTYY LE 99;*/
   /* ;*/
   /* MOVE 19 TO PW0MW01.PW0MWTCC;*/
   /* ELSE;*/
   /* ;*/
   /* MOVE 20 TO PW0MW01.PW0MWTCC;*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PW0MW00.PW0MWTDT != 0)
    if (PW0MW00.PW0MWTYY > 50
     && PW0MW00.PW0MWTYY <= 99)

      PW0MW00.PW0MWTCC = 19;
    else

      PW0MW00.PW0MWTCC = 20;
    end
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    TA2REC.TA2GRGGN = PW0MW00.PW0MWTDT;
    TA2REC.TA2DTOPT = "GREGGREG"; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    PW0MS53(); /* Validate the date*/
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "520";
      converseLib.validationFailed(158);
      set PW0MM001.PW0MMTYY bold;
      set PW0MM001.PW0MMTMM bold;
      set PW0MM001.PW0MMTDD cursor, bold;
    end
  end

   /* ---------------------------------------------*/
   /* Verify the from date.*/
   /* ---------------------------------------------*/

  PW0MW00.PW0MWFMM = PW0MM001.PW0MMFMM;
  PW0MW00.PW0MWFDD = PW0MM001.PW0MMFDD;
  PW0MW00.PW0MWFYY = PW0MM001.PW0MMFYY;
  PW0MW00.PW0MWFCC = 0;

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PW0MW00.PW0MWFDT NE 0;*/
   /* IF PW0MW01.PW0MWFYY GT 50*/
   /* AND PW0MW01.PW0MWFYY LE 99;*/
   /* ;*/
   /* MOVE 19 TO PW0MW01.PW0MWFCC;*/
   /* ELSE;*/
   /* ;*/
   /* MOVE 20 TO PW0MW01.PW0MWFCC;*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set TA2REC empty;

  if (PW0MW00.PW0MWFDT != 0)
    if (PW0MW00.PW0MWFYY > 50
     && PW0MW00.PW0MWFYY <= 99)

      PW0MW00.PW0MWFCC = 19;
    else

      PW0MW00.PW0MWFCC = 20;
    end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
    TA2REC.TA2GRGGN = PW0MW00.PW0MWFDT;
    TA2REC.TA2DTOPT = "GREGGREG"; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    PW0MS53(); /* Validate the date*/
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "520";
      converseLib.validationFailed(158);
      set PW0MM001.PW0MMFYY bold;
      set PW0MM001.PW0MMFMM bold;
      set PW0MM001.PW0MMFDD cursor, bold;
    end
  end

   /* -------------------------------------------------*/
   /* Set up date for comparison. FROM date must be*/
   /* less than the TO date.*/
   /* -------------------------------------------------*/

  if (PW0MM001.PW0MMFMM == 0
   && PW0MM001.PW0MMFDD == 0
   && PW0MM001.PW0MMFYY == 0)

    PW0MW00.PW0MWFCC = 0;
  else

    if (PW0MW00.PW0MWFYY > 50 /* Set up 'FROM' century*/
     && PW0MW00.PW0MWFYY <= 99)

      PW0MW00.PW0MWFCC = 19;
    else

      PW0MW00.PW0MWFCC = 20;
    end
  end

  if (PW0MM001.PW0MMTMM == 0
   && PW0MM001.PW0MMTDD == 0
   && PW0MM001.PW0MMTYY == 0)

    PW0MW00.PW0MWTCC = 0;
  else
    if (PW0MW00.PW0MWTYY > 50 /* Set up 'TO' century*/
     && PW0MW00.PW0MWTYY <= 99)

      PW0MW00.PW0MWTCC = 19;

    else

      PW0MW00.PW0MWTCC = 20;
    end
  end

   /* -------------------------------------------------------*/
   /* Check that the beginning date is less than the to date*/
   /* -------------------------------------------------------*/

  if (PW0MW00.PW0MWFDT > PW0MW00.PW0MWTDT) /* FROM date > TO date*/

    TA1REC.TA1LOC = "520"; /* Module identification*/
    converseLib.validationFailed(286); /* From DNSB date must be < TO date*/
    set PW0MM001.PW0MMFMM cursor, bold;
    set PW0MM001.PW0MMFDD bold;
    set PW0MM001.PW0MMFYY bold;
    set PW0MM001.PW0MMTMM bold;
    set PW0MM001.PW0MMTDD bold;
    set PW0MM001.PW0MMTYY bold;

  end


end // end PW0M-52001
// Verify heading dates
Function PW0M-52002()
   /* -------------------------------------------*/
   /* Note: Apply changes to pw0m-52001 also.*/
   /* -------------------------------------------*/
   /* -------------------------------------------*/
   /* Verify the to date.*/
   /* -------------------------------------------*/

  PW0MW00.PW0MWTMM = PW0MM002.PW0MMTMM;
  PW0MW00.PW0MWTDD = PW0MM002.PW0MMTDD;
  PW0MW00.PW0MWTYY = PW0MM002.PW0MMTYY;
  PW0MW00.PW0MWTCC = 0;

  set TA2REC empty;

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PW0MW00.PW0MWFDT NE 0;*/
   /* IF PW0MW01.PW0MWTYY GT 50*/
   /* AND PW0MW01.PW0MWTYY LE 99;*/
   /* ;*/
   /* MOVE 19 TO PW0MW01.PW0MWTCC;*/
   /* ELSE;*/
   /* ;*/
   /* MOVE 20 TO PW0MW01.PW0MWTCC;*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (PW0MW00.PW0MWFDT != 0)
    if (PW0MW00.PW0MWTYY > 50
     && PW0MW00.PW0MWTYY <= 99)

      PW0MW00.PW0MWTCC = 19;
    else

      PW0MW00.PW0MWTCC = 20;
    end
    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/
    TA2REC.TA2GRGGN = PW0MW00.PW0MWTDT;
    TA2REC.TA2DTOPT = "GREGGREG"; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    PW0MS53(); /* Validate the date*/
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "520";
      converseLib.validationFailed(158);
      set PW0MM002.PW0MMTYY bold;
      set PW0MM002.PW0MMTMM bold;
      set PW0MM002.PW0MMTDD cursor, bold;
    end
  end

   /* ---------------------------------------------*/
   /* Verify the from date.*/
   /* ---------------------------------------------*/

  PW0MW00.PW0MWFMM = PW0MM002.PW0MMFMM;
  PW0MW00.PW0MWFDD = PW0MM002.PW0MMFDD;
  PW0MW00.PW0MWFYY = PW0MM002.PW0MMFYY;
  PW0MW00.PW0MWFCC = 0;

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* IF PW0MW00.PW0MWFDT NE 0;*/
   /* IF PW0MW01.PW0MWFYY GT 50*/
   /* AND PW0MW01.PW0MWFYY LE 99;*/
   /* ;*/
   /* MOVE 19 TO PW0MW01.PW0MWFCC;*/
   /* ELSE;*/
   /* ;*/
   /* MOVE 20 TO PW0MW01.PW0MWFCC;*/
   /* END;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set TA2REC empty;

  if (PW0MW00.PW0MWFDT != 0)
    if (PW0MW00.PW0MWFYY > 50
     && PW0MW00.PW0MWFYY <= 99)

      PW0MW00.PW0MWFCC = 19;
    else

      PW0MW00.PW0MWFCC = 20;
    end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
    TA2REC.TA2GRGGN = PW0MW00.PW0MWFDT;
    TA2REC.TA2DTOPT = "GREGGREG"; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    PW0MS53(); /* Validate the date*/
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1LOC = "520";
      converseLib.validationFailed(158);
      set PW0MM002.PW0MMFYY bold;
      set PW0MM002.PW0MMFMM bold;
      set PW0MM002.PW0MMFDD cursor, bold;
    end
  end

   /* -------------------------------------------------*/
   /* Set up date for comparison. FROM date must be*/
   /* less than the TO date.*/
   /* -------------------------------------------------*/

  if (PW0MM002.PW0MMFMM == 0
   && PW0MM002.PW0MMFDD == 0
   && PW0MM002.PW0MMFYY == 0)

    PW0MW00.PW0MWFCC = 0;
  else

    if (PW0MW00.PW0MWFYY > 50 /* Set up 'FROM' century*/
     && PW0MW00.PW0MWFYY <= 99)

      PW0MW00.PW0MWFCC = 19;
    else

      PW0MW00.PW0MWFCC = 20;
    end
  end

  if (PW0MM002.PW0MMTMM == 0
   && PW0MM002.PW0MMTDD == 0
   && PW0MM002.PW0MMTYY == 0)

    PW0MW00.PW0MWTCC = 0;
  else

    if (PW0MW00.PW0MWTYY > 50 /* Set up 'TO' century*/
     && PW0MW00.PW0MWTYY <= 99)

      PW0MW00.PW0MWTCC = 19;
    else

      PW0MW00.PW0MWTCC = 20;
    end
  end

   /* -------------------------------------------------------*/
   /* Check that the beginning date is less than the to date*/
   /* -------------------------------------------------------*/

  if (PW0MW00.PW0MWFDT > PW0MW00.PW0MWTDT) /* FROM date > TO date*/

    TA1REC.TA1LOC = "520"; /* Module identification*/
    converseLib.validationFailed(286); /* From DNSB date must be < TO date*/
    set PW0MM002.PW0MMFMM cursor, bold;
    set PW0MM002.PW0MMFDD bold;
    set PW0MM002.PW0MMFYY bold;
    set PW0MM002.PW0MMTMM bold;
    set PW0MM002.PW0MMTDD bold;
    set PW0MM002.PW0MMTYY bold;

  end


end // end PW0M-52002

// Verify data in the line
Function PW0M-53001()
   /* ------------------------------------------------------------*/
   /* Note:  Apply changes to pw0m-53002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Loop through to find invalid values in the select field*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Negative values not allowed*/
   /* ------------------------------------------------------------*/

  if (PW0MM001.PW0MMBQT[PW0MWIXM] < 0) /* Check for negative amounts*/

    converseLib.validationFailed(318);
    TA1REC.TA1LOC = "530";
    set PW0MM001.PW0MMBQT[PW0MWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Quantity fields cannot be updated on non P&H*/
   /* ------------------------------------------------------------*/

  PW0MW00.PW0MWDMM = PW0MM001.PW0MMDMM[PW0MWIXM];
  PW0MW00.PW0MWDDD = PW0MM001.PW0MMDDD[PW0MWIXM];
  PW0MW00.PW0MWDYY = PW0MM001.PW0MMDYY[PW0MWIXM];

  if (PW0MW00.PW0MWDMM == 0
   && PW0MW00.PW0MWDDD == 0
   && PW0MW00.PW0MWDYY == 0)

    PW0MW00.PW0MWDCC = 0;
  else

    if (PW0MW00.PW0MWDYY > 50
     && PW0MW00.PW0MWDYY <= 99)

      PW0MW00.PW0MWDCC = 19;

    else
      PW0MW00.PW0MWDCC = 20;
    end
  end

   /* ------------------------------------------------------------*/
   /* Action field can only be a,d,c,i or blank*/
   /* ------------------------------------------------------------*/

  if (PW0MM001.PW0MMSEL[PW0MWIXM] == "A" /* Validate action value*/
   || PW0MM001.PW0MMSEL[PW0MWIXM] == "D" 
   || PW0MM001.PW0MMSEL[PW0MWIXM] == "C" 
   || PW0MM001.PW0MMSEL[PW0MWIXM] == "I" 
   || PW0MM001.PW0MMSEL[PW0MWIXM] == " ")

  else

    converseLib.validationFailed(35); /* Invalid action*/
    TA1REC.TA1LOC = "530";
    set PW0MM001.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Action field cannot be i for extra quantity records*/
   /* ------------------------------------------------------------*/

  if (PW0MM001.PW0MMSEL[PW0MWIXM] == "I" /* Validate action value*/
   && PW0MM001.TF1CARCD[PW0MWIXM] == "    ")

    converseLib.validationFailed(35); /* Invalid action*/
    PW0MW00.PW0MWIQF = "N"; /* Turn off inquiry flag*/
    TA1REC.TA1LOC = "530";
    set PW0MM001.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

  if (PW0MM001.PW0MMSEL[PW0MWIXM] == "I" /* Inquire action*/
   && PW0MM001.TF1CARCD[PW0MWIXM] > " ") /* Non-blank carrier*/
    PW0MW00.PW0MWIQF = "Y";
  end

   /* ------------------------------------------------------------*/
   /* Adds must have a zero value before, and a non zero after*/
   /* ------------------------------------------------------------*/

  if (PW0MM001.PW0MMSEL[PW0MWIXM] == "A"
   && PW0MW60.PW0MWBQT[PW0MWIMX] != 0)

    converseLib.validationFailed(358); /* Record already exits*/
    TA1REC.TA1LOC = "530";
    set PW0MM001.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

  if (PW0MM001.PW0MMSEL[PW0MWIXM] == "A"
   && PW0MM001.PW0MMBQT[PW0MWIXM] == 0
   && PW0MM001.PW0MMRP[PW0MWIXM] == 0
   && PW0MM001.PW0MMFC[PW0MWIXM] == 0)

    converseLib.validationFailed(359); /* Cannot add a zero quantity*/
    TA1REC.TA1LOC = "530";
    set PW0MM001.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Changes require a non zero value before and after.*/
   /* ------------------------------------------------------------*/

  if (PW0MM001.PW0MMSEL[PW0MWIXM] == "C"
   && PW0MM001.PW0MMBQT[PW0MWIXM] == 0)

    converseLib.validationFailed(359); /* Cannot change a zero amount*/
    TA1REC.TA1LOC = "530";
    set PW0MM001.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

  if (PW0MM001.PW0MMSEL[PW0MWIXM] == "C"
   && PW0MW60.PW0MWBQT[PW0MWIMX] == 0)

    converseLib.validationFailed(360); /* Record does not exist. Use add.*/
    TA1REC.TA1LOC = "530";
    set PW0MM001.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Deletes require a non zero value before and zero after.*/
   /* ------------------------------------------------------------*/

  if (PW0MM001.PW0MMSEL[PW0MWIXM] == "D"
   && PW0MW60.PW0MWBQT[PW0MWIMX] == 0)

    converseLib.validationFailed(361); /* Record already exits*/
    TA1REC.TA1LOC = "530";
    set PW0MM001.PW0MMSEL[PW0MWIXM] cursor, bold;

  end


end // end PW0M-53001

// Verify data in the line
Function PW0M-53002()
   /* ------------------------------------------------------------*/
   /* Note:  Apply changes to pw0m-53001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Loop through to find invalid values in the select field*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Negative values not allowed*/
   /* ------------------------------------------------------------*/

  if (PW0MM002.PW0MMBQT[PW0MWIXM] < 0) /* Check for negative amounts*/

    converseLib.validationFailed(318);
    TA1REC.TA1LOC = "530";
    set PW0MM002.PW0MMBQT[PW0MWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Quantity fields cannot be updated on non P&H*/
   /* ------------------------------------------------------------*/

  PW0MW00.PW0MWDMM = PW0MM002.PW0MMDMM[PW0MWIXM];
  PW0MW00.PW0MWDDD = PW0MM002.PW0MMDDD[PW0MWIXM];
  PW0MW00.PW0MWDYY = PW0MM002.PW0MMDYY[PW0MWIXM];

  if (PW0MW00.PW0MWDMM == 0
   && PW0MW00.PW0MWDDD == 0
   && PW0MW00.PW0MWDYY == 0)

    PW0MW00.PW0MWDCC = 0;
  else

    if (PW0MW00.PW0MWDYY > 50
     && PW0MW00.PW0MWDYY <= 99)

      PW0MW00.PW0MWDCC = 19;

    else
      PW0MW00.PW0MWDCC = 20;
    end
  end

   /* ------------------------------------------------------------*/
   /* Action field can only be a,d,c,i or blank*/
   /* ------------------------------------------------------------*/

  if (PW0MM002.PW0MMSEL[PW0MWIXM] == "A" /* Validate action value*/
   || PW0MM002.PW0MMSEL[PW0MWIXM] == "D" 
   || PW0MM002.PW0MMSEL[PW0MWIXM] == "C" 
   || PW0MM002.PW0MMSEL[PW0MWIXM] == "I" 
   || PW0MM002.PW0MMSEL[PW0MWIXM] == " ")

  else

    converseLib.validationFailed(35); /* Invalid action*/
    TA1REC.TA1LOC = "530";
    set PW0MM002.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Action field cannot be i for extra quantity records*/
   /* ------------------------------------------------------------*/

  if (PW0MM002.PW0MMSEL[PW0MWIXM] == "I" /* Validate action value*/
   && PW0MM002.TF1CARCD[PW0MWIXM] == "    ")

    converseLib.validationFailed(35); /* Invalid action*/
    PW0MW00.PW0MWIQF = "N"; /* Turn off inquiry flag*/
    TA1REC.TA1LOC = "530";
    set PW0MM002.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

  if (PW0MM002.PW0MMSEL[PW0MWIXM] == "I" /* Inquiry action*/
   && PW0MM002.TF1CARCD[PW0MWIXM] > " ") /* Non-blank carrier*/
    PW0MW00.PW0MWIQF = "Y";
  end

   /* ------------------------------------------------------------*/
   /* Adds must have a zero value before, and a non zero after*/
   /* ------------------------------------------------------------*/

  if (PW0MM002.PW0MMSEL[PW0MWIXM] == "A"
   && PW0MW60.PW0MWBQT[PW0MWIMX] != 0)

    converseLib.validationFailed(358); /* Record already exits*/
    TA1REC.TA1LOC = "530";
    set PW0MM002.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

  if (PW0MM002.PW0MMSEL[PW0MWIXM] == "A"
   && PW0MM002.PW0MMBQT[PW0MWIXM] == 0
   && PW0MM002.PW0MMRP[PW0MWIXM] == 0
   && PW0MM002.PW0MMFC[PW0MWIXM] == 0)

    converseLib.validationFailed(359); /* Cannot add a zero quantity*/
    TA1REC.TA1LOC = "530";
    set PW0MM002.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Changes require a non zero value before and after.*/
   /* ------------------------------------------------------------*/

  if (PW0MM002.PW0MMSEL[PW0MWIXM] == "C"
   && PW0MM002.PW0MMBQT[PW0MWIXM] == 0)

    converseLib.validationFailed(359); /* Cannot change a zero amount*/
    TA1REC.TA1LOC = "530";
    set PW0MM002.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

  if (PW0MM002.PW0MMSEL[PW0MWIXM] == "C"
   && PW0MW60.PW0MWBQT[PW0MWIMX] == 0)

    converseLib.validationFailed(360); /* Record does not exist. Use add.*/
    TA1REC.TA1LOC = "530";
    set PW0MM002.PW0MMSEL[PW0MWIXM] cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Deletes require a non zero value before and zero after.*/
   /* ------------------------------------------------------------*/

  if (PW0MM002.PW0MMSEL[PW0MWIXM] == "D"
   && PW0MW60.PW0MWBQT[PW0MWIMX] == 0)

    converseLib.validationFailed(361); /* Record already exits*/
    TA1REC.TA1LOC = "530";
    set PW0MM002.PW0MMSEL[PW0MWIXM] cursor, bold;

  end


end // end PW0M-53002

// Verify from application
Function PW0M000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0V" /* From allowed application*/
   || COMMAREA.CAFROMAP == "PW0W" 
   || COMMAREA.CAFROMAP == "PW0R" 
   || COMMAREA.CAFROMAP == "PW0N" 
   || COMMAREA.CAFROMAP == "PW0P" 
   || COMMAREA.CAFROMAP == "PW0X" 
   || COMMAREA.CAFROMAP == "PW0J" 
   || COMMAREA.CAFROMAP == "PW06" 
   || COMMAREA.CAFROMAP == "PW08" 
   || COMMAREA.CAFROMAP == "GD00")

    PKWREC.PKWFRMAP = COMMAREA.CACURRAP; /* save curr application*/

  else

    /* ------------------------------------------------------------*/
    /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSNOWAY(); /* Invalid transfer was attempted*/

  end

  XPPK003(); /* Verify warehouse*/

   /* ---------------------------------------------------------*/
   /* format dates and set the request data to 'y'*/
   /* ---------------------------------------------------------*/

  PW0MW00.PW0MWFDT = PKWREC.PKWFRMDT[1]; /* Move to work stor*/
  PW0MW00.PW0MWTDT = PKWREC.PKWTODT[1]; /* Move to work stor*/

   /* ---- format "to" century ------*/
  if (PW0MW00.PW0MWTDT != 0) /* date present*/
    if (PW0MW00.PW0MWTYY > 50
     && PW0MW00.PW0MWTYY <= 99)

      PW0MW00.PW0MWTCC = 19;
    else
      PW0MW00.PW0MWTCC = 20;
    end
  end

   /* ---- format "from" century ----*/
  if (PW0MW00.PW0MWFDT != 0)
    if (PW0MW00.PW0MWFYY > 50
     && PW0MW00.PW0MWFYY <= 99)

      PW0MW00.PW0MWFCC = 19;
    else
      PW0MW00.PW0MWFCC = 20;
    end
  end

  PW0MW00.PW0MWSWR = "Y"; /* Request data*/

  PW0MW01.XWHCD = PKWREC.XWHCD; /* Warehouse*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0MM002.XWHCD = PKWREC.XWHCD;
  else
    PW0MM001.XWHCD = PKWREC.XWHCD;
  end

   /* ------- division code ----------------------------------------*/
  PW0MW01.XDVCD = PKWREC.XDVCD[1];

  if (PKWREC.XDVCD[1] == "*")
    PW0MW01.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0MW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0MM002.XDVCD = PKWREC.XDVCD[1];
    PW0MM002.XDVDESC = PW0MW01.XDVDESC;
  else
    PW0MM001.XDVCD = PKWREC.XDVCD[1];
    PW0MM001.XDVDESC = PW0MW01.XDVDESC;
  end


   /* ------- brand code -------------------------------------------*/

  PW0MW01.XBCCD = PKWREC.XBCCD[1];

  if (PKWREC.XBCCD[1] == "*")
    PW0MW01.XBCABRV = " ";
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0MW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0MM002.XBCCD = PKWREC.XBCCD[1];
    PW0MM002.XBCABRV = PW0MW01.XBCABRV;
  else
    PW0MM001.XBCCD = PKWREC.XBCCD[1];
    PW0MM001.XBCABRV = PW0MW01.XBCABRV;
  end


   /* ------------------------------------------------------------*/
   /* Determine the minimum pack and hold date.*/
   /* ------------------------------------------------------------*/

  PW0MS20(); /* Call ta0190*/


end // end PW0M000

// Main process to display a map
Function PW0M001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0M100(); /* Obtain the data to display*/

  PW0M200(); /* Format and display the map*/

  PW0M300(); /* Check attention identifier*/

  PW0M400(); /* Reset fields to normal intensity*/

  PW0M500(); /* Verify the entered data*/

  PW0M600(); /* Process valid input request*/


end // end PW0M001

// Obtain the data to display
Function PW0M100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.PW0MWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0MW00.XXXTSLEN = 383; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.XXXMSGNO == 0) /* No message to display*/
    PW0MW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0M110(); /* Purge any temporary storage*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0MW01.XWHCD = PW0MM002.XWHCD; /* Warehouse code*/
  else /* pick planning*/
    PW0MW01.XWHCD = PW0MM001.XWHCD; /* Warehouse code*/
  end

  PW0MW00.XWHCD = PW0MW01.XWHCD;

   /* ------------------------------------------------------------*/
   /* verify and save division code*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0MM002.XDVCD == " ")
      converseLib.validationFailed(393);
      set PW0MM002.XDVCD cursor, bold;
      TA1REC.TA1LOC = "100"; /* Module identification*/
      exit stack;
    end
  else /* pick planning*/
    if (PW0MM001.XDVCD == " ")
      converseLib.validationFailed(393);
      set PW0MM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "100"; /* Module identification*/
      exit stack;
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PKWREC.XDVCD[1] = PW0MM002.XDVCD;
  else /* pick planning*/
    PKWREC.XDVCD[1] = PW0MM001.XDVCD;
  end

  if (PKWREC.XDVCD[1] != "*")
    XPPK004();

    if (converseVar.validationMsgNum == 0)
      PW0MW01.XDVCD = PKWREC.XDVCD[1];
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0MW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    else
      converseLib.validationFailed(393);

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        set PW0MM002.XDVCD cursor, bold;
      else /* pick planning*/
        set PW0MM001.XDVCD cursor, bold;
      end

      TA1REC.TA1LOC = "100"; /* Module identification*/
      exit stack;
    end
  else
    PW0MW01.XDVCD = PKWREC.XDVCD[1];
    PW0MW01.XDVDESC = "ALL DIVISIONS";
  end

   /* -------------------------------------------------------------*/
   /* verify and save brand code*/
   /* -------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0MM002.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0MM002.XBCCD cursor, bold;
      TA1REC.TA1LOC = "100"; /* Module identification*/
      exit stack;
    end
  else /* pick planning*/
    if (PW0MM001.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0MM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "100"; /* Module identification*/
      exit stack;
    end
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PKWREC.XBCCD[1] = PW0MM002.XBCCD;
  else /* pick planning*/
    PKWREC.XBCCD[1] = PW0MM001.XBCCD;
  end


  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        if (PKWREC.PKWSELSW == "PK") /* picking*/
          set PW0MM002.XBCCD cursor, bold;
        else /* pick planning*/
          set PW0MM001.XBCCD cursor, bold;
        end
        TA1REC.TA1LOC = "100";
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0MW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0MW01.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        set PW0MM002.XBCCD cursor, bold;
      else /* pick planning*/
        set PW0MM001.XBCCD cursor, bold;
      end
      TA1REC.TA1LOC = "100"; /* Module identification*/
      exit stack;
    end
  else
    PW0MW00.XXXMSGNO = 421;
    PW0MW01.XBCABRV = " ";
    PW0MW01.XBCCD = PKWREC.XBCCD[1];
  end

  PW0MW01.PW0MWFDT = PW0MW00.PW0MWFDT; /* From date*/
  PW0MW01.PW0MWTDT = PW0MW00.PW0MWTDT; /* To date*/

   /* ------------------------------------------------------------*/
   /* Build the Process Selected by Order table. DPICK.VSELOR01*/
   /* ------------------------------------------------------------*/

  PW0M115(); /* Open cursor dpick.vselor01*/

  PW0MW00.PW0MWSWC = "N"; /* Init eof - vselor01*/
  PW0MW00.PW0MWORI = 1; /* Select by order index*/
  PW0MW00.PW0MWIMX = 0; /* Init max tbl entries made*/

  PW0M117(); /* Fetch vselor01*/

  while (PW0MW00.PW0MWSWC == "N" /* While not vselor01 eof*/
   && PW0MW00.PW0MWIMX <= PW0MW00.PW0MWLMT) /* Under scrn +1 limit*/

    PW0MW00.PW0MWDCK = "N"; /* Init date flag check*/
    PW0MS22(); /* Check date*/

    if (PW0MW00.PW0MWDCK == "Y") /* Date checks passed*/

      /* --------------------------------------------*/
      /* Initialize the pk4rec for the vpoolh01 call*/
      /* --------------------------------------------*/

      set PK4REC empty; /* Initalize record*/
      PK4REC.XWHCD = PKHREC.XWHCD;
      PK4REC.PK1CUOID = PKHREC.PK1CUOID;
      PK4REC.PK1NORID = PKHREC.PK1NORID;

      PW0M120(); /* Select unique vpoolh01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

        PW0MW00.PW0MWCCF = "Y"; /* Init carrier check*/

        PW0M122(); /* Verify B-Grade and Closeouts*/

        if (PW0MW00.PW0MWCCF == "Y")

          PW0M125(); /* Verify release flags/carrier*/

        end

        if (PW0MW00.PW0MWCCF == "Y")

          PW0M140(); /* Open vphdit02*/

          PW0MW00.PW0MWFLG = "N"; /* Init loop flag*/

          while (PW0MW00.PW0MWFLG == "N") /* Loop not done*/

            PW0M141(); /* Get next vphdit02;*/
            if (PW0MW00.PW0MWFLG == "N")
              PW0M145(); /* Add to qt tables*/
            end
          end

          PW0M147(); /* Close vphdit02*/
        end
      end
    end

    PW0M117(); /* Fetch vselor01*/
  end

  PW0M149(); /* Close dpick.vselor01*/

   /* ------------------------------------------------------------*/
   /* Build the Process Selected by Quantity tbl. DPICK.VSELQT02*/
   /* ------------------------------------------------------------*/

  PW0M150(); /* Open cursor dpick.vselqt02*/

  PW0MW00.PW0MWSWC = "N"; /* Init eof - vselqt02*/
  PW0MW00.PW0MWQTI = 1; /* Select by quantity index*/
  PW0MW00.PW0MWIMX = 0; /* Initialize max entries made*/

  PW0M151(); /* Fetch vselqt02*/

  while (PW0MW00.PW0MWSWC == "N" /* While not vselqt02 eof*/
   && PW0MW00.PW0MWIMX <= PW0MW00.PW0MWLMT) /* Under scrn +1 limit*/

    if (PWVREC.XHDCD != " ")

      if (PWVREC.PK-SEL-TYP-CD == " 1"
       || PWVREC.PK-SEL-TYP-CD == " 3")

        PW0MW00.PW0MWDCK = "Y"; /* Init date and type flag*/

        PW0M154(); /* Verify quantity records*/

        if (PW0MW00.PW0MWDCK == "Y") /* Date checks passed*/
          PW0M160(); /* Add to quantity tables*/
        end
      end
    end

    PW0M151(); /* Fetch vselqt02*/
  end
  PW0M167(); /* Close dpick.vselqt02*/


   /* ------------------------------------------------------------*/
   /* Build the Process Non-Selected Quantities tbl.*/
   /* A parm record is used to pass data to the io mod.*/
   /* ------------------------------------------------------------*/

  PW0M170(); /* Open dpick.vphdit02*/

  PW0MW00.PW0MWSWC = "N"; /* EOF - Vphdit02*/
  PW0MW00.PW0MWPLI = 1; /* Set pool index to 1*/
  PW0MW00.PW0MWIMX = 0; /* Initialize max tbl entries made*/

  PW0M171(); /* Fetch vphdit02*/

  while (PW0MW00.PW0MWSWC == "N" /* While not vphdit02 eof*/
   && PW0MW00.PW0MWIMX <= PW0MW00.PW0MWLMT) /* Under scrn + 1 limit*/

    PW0MW00.PW0MWDCK = "N"; /* Init date check flag*/
    PW0MS36(); /* Check date*/

    if (PW0MW00.PW0MWDCK == "Y") /* Date checks passed*/

      /* --------------------------------------------*/
      /* Initialize the pk4rec for the vpoolh01 call*/
      /* --------------------------------------------*/

      set PK4REC empty; /* Initalize record*/
      PK4REC.XWHCD = PWEREC.XWH-WHSE-CD;
      PK4REC.PK1CUOID = PWEREC.PK1CUOID;
      PK4REC.PK1NORID = PWEREC.PK1NORID;

      PW0M120(); /* Select unique vpoolh01*/

      if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
        return; /* Display map*/
      end

      PW0MW00.PW0MWCCF = "Y"; /* Init carrier check*/

      PW0M122(); /* Verify B-Grade and Closeouts*/

      if (PW0MW00.PW0MWCCF == "Y")
        PW0M125(); /* Check carrier*/
      end

      if (PW0MW00.PW0MWCCF == "Y")
        PW0M175(); /* Add to non-selected tbles*/
      end
    end

    PW0M171(); /* Fetch vphdit02*/

  end

  PW0M177(); /* Close vphdit02*/

   /* -----------------------------------------------------------*/
   /* Merge the vselor01 and vselqt02 tables.*/
   /* -----------------------------------------------------------*/

  set PW0MW50 empty; /* Reinitialize the work table*/

  PW0MS42();

   /* -----------------------------------------------------------*/
   /* Merge the order/qty tbl with the non selected tbl*/
   /* -----------------------------------------------------------*/

  PW0MS44();

   /* ------------------------------------------------------------*/
   /* Build and format the extra special handling quantity records.*/
   /* Only for pick planning*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP")
    PW0MS-EXTRA-QTY(); /* Format extra quantity*/
    PW0MS-MOVE-EXTRA(); /* Move extra quantity to table*/
  end

   /* -----------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* -----------------------------------------------------------*/

  PW0MW00.PW0MWPGI = 1; /* Initialize page storage index*/
  PW0MW00.PW0MWIXM = 1; /* Display map line index*/
  PW0MW00.PW0MWIMX = 1; /* Temp store index*/
  PW0MW00.PW0MWSWC = "N"; /* End of cursor switch*/

  while (PW0MW00.PW0MWSWC == "N") /* Until end of cursor*/

    PW0MS46(); /* Check for eof*/

    /* -----------------------------------------------------*/
    /* If not eof, save the data in display storage.*/
    /* -----------------------------------------------------*/

    if (PW0MW00.PW0MWSWC == "N") /* Not eof*/
      PW0MS48(); /* Save data in display storage*/
    end

    /* -------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* -------------------------------------------------------*/

    if (PW0MW00.PW0MWIXM > PW0MW00.PW0MW-MAP-IDX-MAX) /* Page is full*/

      PW0M180(); /* Add page to temporary storage*/

      PW0MW00.PW0MWIXM = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.PW0MWIXM > 1) /* Page was formatted*/
    PW0M180(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.TA5TSQIX == 0) /* No pages formatted*/

    TA1REC.TA1LOC = "100"; /* Module identification*/
    PW0MW00.XXXMSGNO = 8; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the more data flag is yes, set ezemno.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.PW0MWMRE == "Y")
    TA1REC.TA1LOC = "100"; /* Module identification*/
    PW0MW00.XXXMSGNO = 304; /* Table overflow warning*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0MW00.PW0MWSWR = "N"; /* Request for data switch*/


end // end PW0M100

// Purge any temporary storage
Function PW0M110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.PW0MWFSH != "Y") /* Refresh everything*/
    PW0MW00.PW0MWIBX = 0; /* Initialize beginning index*/
    PW0MW00.PW0MWIEX = 0; /* Initialize ending index*/

    set PW0MW60 empty; /* Final merged table*/
  end

  set PW0MW20 empty; /* Process selected by order rcd*/
  set PW0MW30 empty; /* Process selected by qty rcd*/
  set PW0MW40 empty; /* Process non-select*/
  set PW0MW50 empty; /* Order/qty merge*/

  set TA5REC empty;
  set PW0MW01 empty; /* M001 display storage*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0MW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "110"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M110

// Open dpick.vselor01
Function PW0M115()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* Clear record*/

  PKHREC.XWHCD = PW0MW01.XWHCD; /* Warehouse code*/
  PKHREC.XDVCD = PW0MW01.XDVCD; /* Division code*/
  PKHREC.XBCCD = PW0MW01.XBCCD; /* Brand code*/
  PKHREC.PKURUNMD = PW0MW00.PKURUNMD; /* Run mode*/
  PKHREC.PK-SEL-TYP-CD = " 5"; /* Type*/
  PKHREC.OP1DSBDT = -1; /* Move wild card to DNSB*/

  try
    call "IO1740" ("S2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0M115

// Fetch next row in vselor01
Function PW0M117()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("N2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0MW00.PW0MWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "117"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M117

// Select unique vpoolh01
Function PW0M120()
   /* ------------------------------------------------------------*/
   /* Select unique on vpoolh01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* NOTE: sql 100 is valid because it is possible to have a row*/
         /* in selected order table and not in the pick pool due*/
         /* to deallocation*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0M120

// Verify B-Grades and Closeouts
Function PW0M122()
   /* -----------------------------------------------------------------*/
   /* This process determines whether the order is b-grade or*/
   /* closeout and a flag is set NOT to process those orders.*/
   /*  */
   /* XPPK005 passes a return code in PKW-ORDER-TYP-IND field.*/
   /* 'B' for b-grade*/
   /* 'C' for closeout*/
   /* ' ' for regular order*/
   /*  */
   /* The order type is found from the sales office number (XSOCD) and*/
   /* base order type code (XOBCD).*/
   /* -------------------------------------------------------------------*/


  XPPK005();

  if (PKWREC.PKW-ORDER-TYP-IND == "B"
   || PKWREC.PKW-ORDER-TYP-IND == "C")

    PW0MW00.PW0MWCCF = "N"; /* do not process*/

  end


end // end PW0M122

// Check carrier/hold flags
Function PW0M125()
   /* -----------------------------------------------------------*/
   /* Check carrier and hold flags from vpoolh01.*/
   /* -----------------------------------------------------------*/

  if (PK4REC.XDVCD == "01" /* In-store promo*/
   && PK4REC.XGPCD == "01")

    PW0MW00.PW0MWCCF = "N"; /* Do not use*/
    return;

  end

  if (PW0MW00.PKURUNMD == " ") /* Picking*/
    if (PK4REC.PK4SLIND == " " /* Previously selected*/
     || PK4REC.PK4SLIND == "S")
       /* next sentence*/
    else
      PW0MW00.PW0MWCCF = "N"; /* Do not use*/
      return;
    end
  end

  if (PW0MW00.PKURUNMD == "P") /* Pick Planning*/
    if (PK4REC.PK4SLIND == " " /* Previously selected*/
     || PK4REC.PK4SLIND == "P")
       /* next sentence*/
    else
      PW0MW00.PW0MWCCF = "N"; /* Do not use*/
      return;
    end
  end

  if (PK4REC.PK4STKTF == "Y") /* Stock transfer cannot be 'y'*/

    PW0MW00.PW0MWCCF = "N"; /* ; Do not use*/
    return;

  end

  if (PK4REC.XOTCD == "FV") /* Cannot be Basics order*/

    PW0MW00.PW0MWCCF = "N"; /* ; Do not use*/
    return;

  end

  PW0M126(); /* Open carrier vcahld01*/

  PW0MW00.PW0MWFLG = "N"; /* Init flag for loop*/

  while (PW0MW00.PW0MWFLG == "N" /* Not eof*/
   && PW0MW00.PW0MWCCF == "Y") /* Only good records found*/

    PW0M127(); /* Fetch next carrier*/

  end

  PW0M128(); /* Close carrier*/

  if (PW0MW00.PW0MWCCF == "N") /* Did not pass checks*/
    return;
  end

  if (PK4REC.PK4ORHLD == "Y") /* Order on hold*/

    PW0M130(); /* Open order vorhld01*/

    PW0MW00.PW0MWFLG = "N"; /* Init flag for loop*/

    while (PW0MW00.PW0MWFLG == "N" /* Not eof*/
     && PW0MW00.PW0MWCCF == "Y") /* Only good recds found*/

      PW0M131(); /* Fetch order vorhld01*/
    end

    PW0M132(); /* Close vorhld01*/

    if (PW0MW00.PW0MWCCF == "N") /* Did not pass edits*/
      return;
    end

  end

  if (PK4REC.PK4CUHLD == "Y") /* Customer on hold*/

    PW0M135(); /* Open vcuhld01*/

    PW0MW00.PW0MWFLG = "N"; /* Init flag for loop*/

    while (PW0MW00.PW0MWFLG == "N" /* Not eof*/
     && PW0MW00.PW0MWCCF == "Y") /* Only good recds found*/

      PW0M136(); /* Fetch vcuhld01*/
    end

    PW0M137(); /* Close vcuhld01*/

  end

end // end PW0M125

// Open Vcahld01
Function PW0M126()
   /* -----------------------------------------------------------*/
   /* Check carrier using Vcahld01.*/
   /* -----------------------------------------------------------*/

  set PWFREC empty; /* Initialize record*/

  PWFREC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "126"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M126

// Fetch next vcahld01
Function PW0M127()
   /* -----------------------------------------------------------*/
   /* Fetch next Vcahld01.*/
   /* -----------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PW0MS24(); /* Check carrier date*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      PW0MW00.PW0MWFLG = "Y";
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "127"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M127

// Close vcahld01
Function PW0M128()
   /* ------------------------------------------------------------*/
   /* Close the carrier table - vcahld01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "128"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M128

// Open vorhld01
Function PW0M130()
   /* -----------------------------------------------------------*/
   /* Open the Picking holds for orders - vorhld01 table*/
   /* -----------------------------------------------------------*/

  set PKBREC empty; /* Initialize record*/

  PKBREC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* pk-ord-stktf-id*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* pk-nike-ord-id*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WITH A SCAN";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M130

// Fetch next vorhld01
Function PW0M131()
   /* -----------------------------------------------------------*/
   /* Fetch next Vorhld01.*/
   /* -----------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
      PW0MS26(); /* Check carrier date*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      PW0MW00.PW0MWFLG = "Y";
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "131"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M131

// Close vorhld01
Function PW0M132()
   /* ------------------------------------------------------------*/
   /* Close the picking hold orders - vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "132"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M132

// Open vcuhld01
Function PW0M135()
   /* -----------------------------------------------------------*/
   /* Open the Picking holds for customers - vcuhld01 table*/
   /* -----------------------------------------------------------*/

  set PK9REC empty; /* Initialize record*/

  PK9REC.XWHCD = PK4REC.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID; /* cu-co-id*/
  PK9REC.KUMSTRID = PK4REC.KUMSTRID; /* cu-stor-id*/
  PK9REC.XNXCD = PK4REC.XNXCD; /* nike department code*/

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN WITH A SCAN";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M135

// Fetch next vcuhld01
Function PW0M136()
   /* -----------------------------------------------------------*/
   /* Fetch next Vcuhld01.*/
   /* -----------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
      PW0MS28(); /* Check carrier date*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Record not found*/
      PW0MW00.PW0MWFLG = "Y";
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "136"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M136

// Close vcuhld01
Function PW0M137()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "137"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M137

// Open dpick.vphdit02
Function PW0M140()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  set PWEREC empty; /* Reinitialize record*/

  PWEREC.XWH-WHSE-CD = PKHREC.XWHCD; /* warehouse code*/
  PWEREC.PK1CUOID = PKHREC.PK1CUOID; /* cust id*/
  PWEREC.PK1NORID = PKHREC.PK1NORID; /* nike order id*/

  try
    call "VPHDIT02" ("S2", SQLCA, PWEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = PWEREC.PWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M140

// Fetch next row in vphdit02
Function PW0M141()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPHDIT02" ("N2", SQLCA, PWEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0MW00.PW0MWFLG = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "141"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M141

// Create the order table
Function PW0M145()
   /* ----------------------------------------------------------*/
   /* Add to select by order tables.*/
   /* If the table size is exceeded, set a flag to tell users later.*/
   /* Move record data to a compare field.*/
   /* --------------------------------------------------------*/

  PW0MW00.PW0MWDAT = PWEREC.OP1DSBDT; /* Move DNSB*/
  PW0MW00.XHDCD = PWEREC.XHD-HNDL-CD; /* Move hndl code*/
  PW0MW00.XGPCD = PWEREC.XGP-GPC-CD; /* Move gpc code*/
  PW0MW00.TF1CARCD = PWEREC.TF-CARR-CD; /* Move carrier code*/
  PW0MW00.XUM-UOM-CD = PWEREC.XUM-UOM-CD; /* Move UOM code*/

   /* ---------------------------------------------------*/
   /* New key is less than the key currently being used.*/
   /* ---------------------------------------------------*/

  if (PW0MW00.PW0MWCKY < PW0MW20.PW0MWKEY[PW0MWORI]) /* Compare < curr key*/

    PW0MW00.PW0MWORI = 1; /* ; Set index to 1*/

  end

   /* ----------------------------------------------------*/
   /* Build onto the order table. Once a match or new*/
   /* key is built, ezertn is executed.*/
   /* ----------------------------------------------------*/

  while (PW0MW00.PW0MWIMX <= PW0MW00.PW0MW-ORD-IDX-MAX /* <= Tbl index max*/
   && PW0MW00.PW0MWORI <= PW0MW00.PW0MW-ORD-IDX-MAX) /* <= Index max*/

    if (PW0MW00.PW0MWIMX == PW0MW00.PW0MW-ORD-IDX-MAX /* Max # of entries*/
     && PW0MW00.PW0MWORI == PW0MW00.PW0MW-ORD-IDX-MAX) /* Maximum exceeded*/

      PW0MW00.PW0MWSWC = "Y"; /* Set eof*/
      PW0MW00.PW0MWMRE = "Y"; /* Set more flag*/
      return; /* Return to 100 process*/

    end

    if (PW0MW00.PW0MWCKY == PW0MW20.PW0MWKEY[PW0MWORI]) /* Keys =*/

      PW0MS30(); /* Add to tbl*/
      return; /* return to 100 process*/

    end

    if (PW0MW20.PW0MWDAT[PW0MWORI] == 0 /* Zero values in tbl entry*/
     && PW0MW20.XHDCD[PW0MWORI] == " ")

      PW0MW20.PW0MWKEY[PW0MWORI] = PW0MW00.PW0MWCKY;
      PW0MS30(); /* Add to order table*/
      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;
      return;

    end

    if (PW0MW00.PW0MWCKY < PW0MW20.PW0MWKEY[PW0MWORI]) /* new entry*/
                                                      /* ; in middle*/
      /* ---------------------------------------------*/
       /* New entry in middle of table*/
      /* ---------------------------------------------*/

      PW0MW20.PW0MW-SAVE-ORD-TBL = PW0MW20.PW0MW-SEL-ORD-TBL;
                                                      /* Save sel ord tbl*/
      /* ---------------------------------------------*/
       /* Initialize the current fields on the W20 tbl*/
      /* ---------------------------------------------*/

      PW0MW20.PW0MWKEY[PW0MWORI] = PW0MW00.PW0MWCKY;
      PW0MW20.PW0MWBOR[PW0MWORI] = 0; /* Init order*/

      /* ---------------------------------------------*/
       /* Build line data*/
      /* ---------------------------------------------*/

      PW0MS30(); /* Add the order tbl*/

      /* ----------------------------------------------*/
       /* Rebuild the remaining table*/
      /* ---------------------------------------------*/

      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;

      if (PW0MW00.PW0MWIMX > 1)

        PW0MW00.PW0MW-SAVE-ORD-IDX = PW0MW00.PW0MWORI; /* Set index*/
        PW0MW00.PW0MWORI = PW0MW00.PW0MWORI + 1;

        while (PW0MW00.PW0MWORI <= PW0MW00.PW0MWIMX
         && PW0MW00.PW0MWIMX <= PW0MW00.PW0MW-ORD-IDX-MAX)

          PW0MW20.PW0MW-SEL-ORD-REC[PW0MWORI] = PW0MW20.PW0MW-SAVE-ORD-REC[PW0MW-SAVE-ORD-IDX];

          PW0MW00.PW0MWORI = PW0MW00.PW0MWORI + 1; /* Increment indexes*/
          PW0MW00.PW0MW-SAVE-ORD-IDX = PW0MW00.PW0MW-SAVE-ORD-IDX + 1;

        end
        PW0MW00.PW0MWORI = PW0MW00.PW0MWIMX; /* Reset the ori index*/
      end

      return;
    end

    PW0MW00.PW0MWORI = PW0MW00.PW0MWORI + 1;

  end


end // end PW0M145

// Close vphdit02
Function PW0M147()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VPHDIT02" ("C2", SQLCA, PWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "147"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M147

// Close vselor01
Function PW0M149()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("C2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "149"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M149

// Open dpick.vselqt02
Function PW0M150()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PWVREC empty; /* Clear record*/

  PWVREC.XWHCD = PW0MW01.XWHCD; /* Warehouse code*/
  PWVREC.PKURUNMD = PW0MW00.PKURUNMD; /* Run mode*/
  PWVREC.TF1CARCD = "*"; /* wild card carrier*/
  PWVREC.XUM-UOM-CD = PW0MW01.XUM-UOM-CD; /* UOM code*/
  PWVREC.PK-SEL-TYP-CD = "*"; /* Type*/
  PWVREC.OP1DSBDT = -1; /* wild card DNSB*/
  PWVREC.XHDCD = "*"; /* wild card handle code*/
  PWVREC.XGPCD = "*"; /* wild card general product*/

  if (PW0MW01.XDVCD == "*") /* division code*/
    PWVREC.XDVCD = " ";
  else
    PWVREC.XDVCD = PW0MW01.XDVCD;
  end

  if (PW0MW01.XBCCD == "*") /* brand code*/
    PWVREC.XBCCD = " ";
  else
    PWVREC.XBCCD = PW0MW01.XBCCD;
  end

  try
    call "VSELQT02" ("S1", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0M150

// Fetch next row in vselqt02
Function PW0M151()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSELQT02" ("N1", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0MW00.PW0MWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "151"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M151

// Edit the quantity record
Function PW0M154()
   /* ------------------------------------------------------------*/
   /* Edit record for run mode, date and a non hold carrier*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK" /* Mode is picking*/
   && PWVREC.PKURUNMD == "P") /* Record is pick planning*/

    PW0MW00.PW0MWDCK = "N"; /* Conflicting modes*/
    return;
  end

  if (PKWREC.PKWSELSW == "PP" /* Mode is pick planning*/
   && PWVREC.PKURUNMD == " ") /* Record is picking*/

    PW0MW00.PW0MWDCK = "N"; /* Conflicting modes*/
    return;
  end

  if (PW0MW01.PW0MWTDT == 0)
    /* next sentence*/
  else
    if (PWVREC.OP1DSBDT > PW0MW01.PW0MWTDT)
      PW0MW00.PW0MWDCK = "N";
      PW0MW00.PW0MWSWC = "Y";
      return;
    end
  end

  if (PWVREC.OP1DSBDT >= PW0MW01.PW0MWFDT
   && PWVREC.OP1DSBDT <= PW0MW01.PW0MWTDT)
    /* next sentence*/
  else
    if (PW0MW01.PW0MWFDT == 0
     && PW0MW01.PW0MWTDT == 0)
      /* next sentence*/
    else
      PW0MW00.PW0MWDCK = "N";
      return;
    end
  end

  if (PW0MW01.XBCCD == "*" /* Cole Haan*/
   && PWVREC.XBCCD == "08")

    PW0MW00.PW0MWDCK = "N";
    return;
  end

  if (PWVREC.XDVCD == "01" /* * In-store promo*/
   && PWVREC.XGPCD == "01")

    PW0MW00.PW0MWDCK = "N";
    return;
  end

  PW0M155(); /* Open carrier*/

  PW0MW00.PW0MWFLG = "N"; /* Init EOF for loop*/
  PW0MW00.PW0MWCCF = "Y"; /* Init carrier flag for loop*/

  while (PW0MW00.PW0MWFLG == "N" /* Not eof*/
   && PW0MW00.PW0MWCCF == "Y") /* Only good records found*/

    PW0M127(); /* Fetch carrier*/

  end

  PW0M128(); /* Close carrier*/

  if (PW0MW00.PW0MWCCF != "Y") /* Bad carrier found*/

    PW0MW00.PW0MWDCK = "N";
    return;
  end


end // end PW0M154

// Check carrier using Vcahld01
Function PW0M155()
   /* -----------------------------------------------------------*/
   /* Check carrier using Vcahld01.*/
   /* -----------------------------------------------------------*/

  set PWFREC empty; /* Initialize record*/

  PWFREC.XWHCD = PWVREC.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PWVREC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "155"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M155

// Create the quantity table
Function PW0M160()
   /* ----------------------------------------------------------*/
   /* Add to select by quantity tables.*/
   /* If the table size is exceeded, set a flag to tell users later.*/
   /* Move record data to a compare field.*/
   /* --------------------------------------------------------*/

  PW0MW00.PW0MWDAT = PWVREC.OP1DSBDT;
  PW0MW00.TF1CARCD = PWVREC.TF1CARCD; /* Move carrier to compare*/
  PW0MW00.XHDCD = PWVREC.XHDCD; /* Move hndl code to compare*/
  PW0MW00.XGPCD = PWVREC.XGPCD; /* Move product cd to compare*/
  PW0MW00.XUM-UOM-CD = PWVREC.XUM-UOM-CD; /* Move uom cd to compare*/

   /* ------------------------------------------------------*/
   /* New key is less than the key currently being accessed.*/
   /* ------------------------------------------------------*/

  if (PW0MW00.PW0MWCKY < PW0MW30.PW0MWKEY[PW0MWQTI]) /* Compare < curr key*/

    PW0MW00.PW0MWQTI = 1; /* ; Set index to 1*/

  end

   /* ------------------------------------------------------*/
   /* Build onto the quantity table.*/
   /* Once a match or new key is built, ezertn is executed.*/
   /* ------------------------------------------------------*/

  while (PW0MW00.PW0MWIMX <= PW0MW00.PW0MW-QTY-IDX-MAX /* <= tbl max*/
   && PW0MW00.PW0MWQTI <= PW0MW00.PW0MW-QTY-IDX-MAX) /* <= tbl max*/

    if (PW0MW00.PW0MWIMX == PW0MW00.PW0MW-QTY-IDX-MAX /* Max # of entries*/
     && PW0MW00.PW0MWQTI == PW0MW00.PW0MW-QTY-IDX-MAX) /* Maximum exceeded*/

      PW0MW00.PW0MWSWC = "Y"; /* Set eof*/
      PW0MW00.PW0MWMRE = "Y"; /* Set more flag*/
      return; /* Return to 100 process*/

    end

    if (PW0MW00.PW0MWCKY == PW0MW30.PW0MWKEY[PW0MWQTI]) /* Keys =*/

      PW0MS34(); /* Add to tbl*/
      return; /* return to 100 process*/

    end

    if (PW0MW30.PW0MWDAT[PW0MWQTI] == 0 /* Zero values in tbl entry*/
     && PW0MW30.XHDCD[PW0MWQTI] == " ")

      PW0MW30.PW0MWKEY[PW0MWQTI] = PW0MW00.PW0MWCKY;
      PW0MS34(); /* Add to table*/
      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;
      return;

    end

    if (PW0MW00.PW0MWCKY < PW0MW30.PW0MWKEY[PW0MWQTI])

      /* ---------------------------------------------------*/
      /* New entry is in middle of the table.*/
      /* ---------------------------------------------------*/

      PW0MW30.PW0MW-SAVE-QTY-TBL = PW0MW30.PW0MW-SEL-QTY-TBL;
                                           /* Save selected by qty table*/
      /* ---------------------------------------------------*/
      /* Initialize the current fields on the w30 tbl*/
      /* ---------------------------------------------------*/

      PW0MW30.PW0MWKEY[PW0MWQTI] = PW0MW00.PW0MWCKY;
      PW0MW30.PW0MWBQT[PW0MWQTI] = 0; /* Init qty*/

      /* -------------------------------------------------*/
      /* Build line data*/
      /* -------------------------------------------------*/

      PW0MW30.PW0MWBQT[PW0MWQTI] = PWVREC.PKHPVSRP + PWVREC.PKHPVSFC;

      /* ----------------------------------------*/
      /* Build the remaining table*/
      /* ----------------------------------------*/

      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;

      if (PW0MW00.PW0MWIMX > 1)

        PW0MW00.PW0MW-SAVE-QTY-IDX = PW0MW00.PW0MWQTI; /* Save index*/
        PW0MW00.PW0MWQTI = PW0MW00.PW0MWQTI + 1;

        while (PW0MW00.PW0MWQTI <= PW0MW00.PW0MWIMX)

          PW0MW30.PW0MW-SEL-QTY-REC[PW0MWQTI] = PW0MW30.PW0MW-SAVE-QTY-REC[PW0MW-SAVE-QTY-IDX];
          PW0MW00.PW0MWQTI = PW0MW00.PW0MWQTI + 1; /* Increment indexes*/
          PW0MW00.PW0MW-SAVE-QTY-IDX = PW0MW00.PW0MW-SAVE-QTY-IDX + 1;

        end
        PW0MW00.PW0MWQTI = PW0MW00.PW0MWIMX; /* Reset the qti index*/
      end

      return;
    end

    PW0MW00.PW0MWQTI = PW0MW00.PW0MWQTI + 1;

  end


end // end PW0M160

// Close vselqt02
Function PW0M167()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VSELQT02" ("C1", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "167"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M167

// Open dpick.vphdit02
Function PW0M170()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  set PWEREC empty; /* Initialize record*/

  PWEREC.XWH-WHSE-CD = PW0MW01.XWHCD; /* warehouse code*/
  PWEREC.XDV-DIV-CD = PW0MW01.XDVCD; /* division code*/
  PWEREC.XBC-BRAND-CD = PW0MW01.XBCCD; /* brand code*/
  PWEREC.OP1DSBDT = -1; /* wild card DNSB*/
  PWEREC.XHD-HNDL-CD = "*"; /* wild card handling code*/
  PWEREC.XGP-GPC-CD = "*"; /* wild card general procuct cd*/
  PWEREC.TF-CARR-CD = "*"; /* wild card carrier*/

  try
    call "VPHDIT02" ("S4", SQLCA, PWEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "170"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT02"; /* Table view name*/
  TA1REC.TA1TBLKE = PWEREC.PWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M170

// Fetch next row in vphdit02
Function PW0M171()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPHDIT02" ("N4", SQLCA, PWEREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0MW00.PW0MWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "171"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M171

// Add to pool tables
Function PW0M175()
   /* ----------------------------------------------------------*/
   /* Add to pool tables.*/
   /* If the table size is exceeded, set a flat to tell users later.*/
   /* Move record data to a compare field.*/
   /* --------------------------------------------------------*/

  PW0MW00.PW0MWDAT = PWEREC.OP1DSBDT;
  PW0MW00.TF1CARCD = PWEREC.TF-CARR-CD; /* Move carrier code*/
  PW0MW00.XHDCD = PWEREC.XHD-HNDL-CD; /* Move hndl code*/
  PW0MW00.XGPCD = PWEREC.XGP-GPC-CD; /* Move gpc code*/
  PW0MW00.XUM-UOM-CD = PWEREC.XUM-UOM-CD; /* Move uom code*/

   /* ------------------------------------------------------*/
   /* New key is less than the key currently being accessed.*/
   /* ------------------------------------------------------*/

  if (PW0MW00.PW0MWCKY < PW0MW40.PW0MWKEY[PW0MWPLI]) /* Compare < curr key*/

    PW0MW00.PW0MWPLI = 1; /* ; Set index to 1*/

  end

   /* ------------------------------------------------------*/
   /* Build onto the non selected table*/
   /* Once a match or new key is built, ezertn is executed.*/
   /* ------------------------------------------------------*/

  while (PW0MW00.PW0MWIMX <= PW0MW00.PW0MW-NSEL-IDX-MAX /* < tbl max*/
   && PW0MW00.PW0MWPLI <= PW0MW00.PW0MW-NSEL-IDX-MAX) /* <= tbl max*/

    if (PW0MW00.PW0MWIMX == PW0MW00.PW0MW-NSEL-IDX-MAX /* Max # of entries*/
     && PW0MW00.PW0MWPLI == PW0MW00.PW0MW-NSEL-IDX-MAX) /* Maximum exceeded*/

      PW0MW00.PW0MWSWC = "Y"; /* Set eof*/
      PW0MW00.PW0MWMRE = "Y"; /* Set more flag*/
      return; /* Return to 100 process*/

    end

    if (PW0MW00.PW0MWCKY == PW0MW40.PW0MWKEY[PW0MWPLI]) /* Keys =*/

      PW0MS40(); /* Add to tbl*/
      return; /* return to 100 process*/

    end

    if (PW0MW40.PW0MWDAT[PW0MWPLI] == 0 /* Zero values in tbl entry*/
     && PW0MW40.XHDCD[PW0MWPLI] == " ")

      PW0MW40.PW0MWKEY[PW0MWPLI] = PW0MW00.PW0MWCKY; /* move key*/
      PW0MS40(); /* Add to tbl*/
      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1; /* Increment index*/
      return; /* return to 100 process*/

    end

    if (PW0MW00.PW0MWCKY < PW0MW40.PW0MWKEY[PW0MWPLI]) /* new item in*/
                                              /* ; middle of table*/
      /* ---------------------------------------------------*/
      /* New entry in middle of table*/
      /* ---------------------------------------------------*/

      PW0MW40.PW0MW-SAVE-NSEL-TBL = PW0MW40.PW0MW-NON-SEL-TBL;
                                               /* Save non selected table*/
      PW0MW40.PW0MWKEY[PW0MWPLI] = PW0MW00.PW0MWCKY; /* Move key*/

      PW0MS40(); /* Add to tbl*/

      /* -----------------------------------*/
      /* Rebuild the remaining table*/
      /* -----------------------------------*/

      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;

      if (PW0MW00.PW0MWIMX > 1)

        PW0MW00.PW0MW-SAVE-NSEL-IDX = PW0MW00.PW0MWPLI; /* Save index*/
        PW0MW00.PW0MWPLI = PW0MW00.PW0MWPLI + 1;

        while (PW0MW00.PW0MWPLI <= PW0MW00.PW0MWIMX)

          PW0MW40.PW0MW-NON-SEL-REC[PW0MWPLI] = PW0MW40.PW0MW-SAVE-NSEL-REC[PW0MW-SAVE-NSEL-IDX];
          PW0MW00.PW0MWPLI = PW0MW00.PW0MWPLI + 1; /* Increment indexes*/
          PW0MW00.PW0MW-SAVE-NSEL-IDX = PW0MW00.PW0MW-SAVE-NSEL-IDX + 1;
        end
        PW0MW00.PW0MWPLI = PW0MW00.PW0MWIMX; /* Reset the pli index*/
      end

      return;
    end

    PW0MW00.PW0MWPLI = PW0MW00.PW0MWPLI + 1;

  end


end // end PW0M175

// Close vphdit02
Function PW0M177()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VPHDIT02" ("C4", SQLCA, PWEREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "177"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M177

// Add page to temporary storage
Function PW0M180()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0MW01.XXXTSLEN = PW0MW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW0MW01 empty; /* M001 display storage*/

    PW0MW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "180"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M180

// Format and converse the map
Function PW0M200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0MW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.PW0MWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0MW00.PW0MWSWF == "Y") /* Map must be formatted*/
      PW0M220(); /* Format the data on the map*/
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0M-20002();
  else
    PW0M-20001(); /* pick planning*/
  end


end // end PW0M200

// Format the data on the map
Function PW0M220()
  PW0MW00.PW0MWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* Picking*/
    set PW0MM002 initial; /* M002 input/output area*/
  else /* Pick Planning*/
    set PW0MM001 initial; /* M001 input/output area*/
  end

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.TA5TSQIX > 0) /* Pages were formatted*/
    if (PW0MW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0MW00.XXXTSPAG > PW0MW00.TA5TSQIX) /* Desired greater highest*/
        PW0MW00.XXXTSPAG = PW0MW00.TA5TSQIX; /* Default to highest*/
      end

      PW0MS52(); /* Obtain temporary storage page*/

    end

    if (PKWREC.PKWSELSW == "PK") /* Picking*/
      PW0MM002.XXXTSPAG = PW0MW00.XXXTSPAG; /* Current page*/
      PW0MM002.TA5TSQIX = PW0MW00.TA5TSQIX; /* Highest page*/
      set PW0MM002.XXXLITPG skip; /* page literal*/
      set PW0MM002.XXXLITOF skip; /* of literal*/
    else /* Pick Planning*/
      PW0MM001.XXXTSPAG = PW0MW00.XXXTSPAG; /* Current page*/
      PW0MM001.TA5TSQIX = PW0MW00.TA5TSQIX; /* Highest page*/
      set PW0MM001.XXXLITPG skip; /* page literal*/
      set PW0MM001.XXXLITOF skip; /* of literal*/
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* Picking*/
    PW0M-21002(); /* Format data on the map*/
  else /* Pick Planning*/
    PW0M-21001(); /* Format data on the map*/
  end


end // end PW0M220

// Check attention identifier
Function PW0M300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0MW00.PW0MWSWR == "Y") /* Request for data*/
      set PW0MW01 empty; /* M001 display storage*/
    end

    PW0MW00.PW0MWSWF = "Y"; /* Format the map switch*/
    PW0MW00.PW0MWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (COMMAREA.CATOAP == "PW0M") /* Cannot fast path to yourself*/

        converseLib.validationFailed(1); /* Invalid fast path*/
        TA1REC.TA1LOC = "300"; /* Module identification*/

        if (PKWREC.PKWSELSW == "PK") /* picking*/

          set PW0MM002.CATOAP cursor, bold;
        else /* pick planning*/

          set PW0MM001.CATOAP cursor, bold;
        end
        exit stack;

      end

      PW0M110(); /* Purge temporary storage*/

      XSPKS01(); /* Exit to another application*/

      PW0MW00.PW0MWSWR = "Y"; /* Request data*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        set PW0MM002.CATOAP cursor, bold; /* Highlight*/
      else
        set PW0MM001.CATOAP cursor, bold; /* Highlight*/
      end

    else

      TA1REC.TA1LOC = "300"; /* Module identification*/
      converseLib.validationFailed(13); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or pf5 was pressed*/
   || converseVar.eventKey is pf13 /* or pf13 was pressed*/
   || converseVar.eventKey is pf17 /* or pf17 was pressed*/
   || converseVar.eventKey is pf18 /* or pf18 was pressed*/
   || converseVar.eventKey is pf19) /* or pf19 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CAITEM = "PW0MM002"; /* Application find code*/
      else
        COMMAREA.CAITEM = "PW0MM001"; /* Application find code*/
      end

    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      if (COMMAREA.CAFROMAP == "PW0J")

        COMMAREA.CATOAP = "PW0J"; /* TO application*/

      else

        if (PKWREC.PKWSELSW == "PK")
          COMMAREA.CATOAP = "PW0V"; /* TO application*/
        else
          COMMAREA.CATOAP = "PW0W"; /* TO application*/
        end

      end
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/

      COMMAREA.CATOAP = "PW0R"; /* TO application*/

    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/

      COMMAREA.CATOAP = "PW0J"; /* TO application*/

    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/

      COMMAREA.CATOAP = "PW0P"; /* TO application*/

    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/

      COMMAREA.CATOAP = "PW0X"; /* TO application*/

    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/

      COMMAREA.CATOAP = "PW06"; /* TO application*/

    end

    PW0M110(); /* Purge temporary storage*/

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    TA1REC.TA1LOC = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0M300

// Reset highlighted fields
Function PW0M400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    set PW0MM002.XWHCD initialAttributes; /* Warehouse code*/
    set PW0MM002.XDVCD initialAttributes; /* Division code*/
    set PW0MM002.XBCCD initialAttributes; /* Brand code*/
    set PW0MM002.PW0MMFYY initialAttributes; /* From year*/
    set PW0MM002.PW0MMFMM initialAttributes; /* From month*/
    set PW0MM002.PW0MMFDD initialAttributes; /* From day*/
    set PW0MM002.PW0MMTYY initialAttributes; /* From year*/
    set PW0MM002.PW0MMTMM initialAttributes; /* From month*/
    set PW0MM002.PW0MMTDD initialAttributes; /* From day*/
  else
    set PW0MM001.XWHCD initialAttributes; /* Warehouse code*/
    set PW0MM001.XDVCD initialAttributes; /* Division code*/
    set PW0MM001.XBCCD initialAttributes; /* Brand code*/
    set PW0MM001.PW0MMFYY initialAttributes; /* From year*/
    set PW0MM001.PW0MMFMM initialAttributes; /* From month*/
    set PW0MM001.PW0MMFDD initialAttributes; /* From day*/
    set PW0MM001.PW0MMTYY initialAttributes; /* From year*/
    set PW0MM001.PW0MMTMM initialAttributes; /* From month*/
    set PW0MM001.PW0MMTDD initialAttributes; /* From day*/
  end

  PW0MW00.PW0MWIXM = 1; /* Initialize line index*/

  while (PW0MW00.PW0MWIXM <= PW0MW00.PW0MW-MAP-IDX-MAX) /* Until end of lines*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/

      if (PW0MM001.PW0MMDYY[PW0MWIXM] == 0 /* No year*/
       && PW0MM001.PW0MMDMM[PW0MWIXM] == 0 /* No month*/
       && PW0MM001.PW0MMDDD[PW0MWIXM] == 0 /* No day*/
       && PW0MM001.TF1CARCD[PW0MWIXM] == " "
       && PW0MM001.PW0MMHCD[PW0MWIXM] == " ") /* No handle code*/

        /* next sentence*/
      else

        set PW0MM001.PW0MMSEL[PW0MWIXM] normal; /* Reset select flag*/
        set PW0MM001.PW0MMBQT[PW0MWIXM] normal; /* Reset select flag*/

      end

    else
      if (PW0MM001.PW0MMDYY[PW0MWIXM] == 0 /* No year*/
       && PW0MM001.PW0MMDMM[PW0MWIXM] == 0 /* No month*/
       && PW0MM001.PW0MMDDD[PW0MWIXM] == 0 /* No day*/
       && PW0MM001.TF1CARCD[PW0MWIXM] == " "
       && PW0MM001.PW0MMHCD[PW0MWIXM] == " ") /* No handle code*/

        /* next sentence*/
      else

        set PW0MM001.PW0MMSEL[PW0MWIXM] normal; /* Reset select flag*/
        set PW0MM001.PW0MMBQT[PW0MWIXM] normal; /* Reset select flag*/

      end
    end

    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1; /* Increment line index*/

  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    set PW0MM002.CATOAP initialAttributes; /* TO application*/
    set PW0MM002.CAITEM initialAttributes; /* Application data*/
  else
    set PW0MM001.CATOAP initialAttributes; /* TO application*/
    set PW0MM001.CAITEM initialAttributes; /* Application data*/
  end


end // end PW0M400

// Verify data that was entered
Function PW0M500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0M-50002();
  else
    PW0M-50001();
  end


end // end PW0M500

// Verify scroll request
Function PW0M510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0MW00.XXXTSPAG < 2)       /* and no previous pages*/

    TA1REC.TA1LOC = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0MW00.XXXTSPAG >= PW0MW00.TA5TSQIX) /* and no more pages*/

    TA1REC.TA1LOC = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end


end // end PW0M510

// Check for conflicting requests
Function PW0M540()
   /* ------------------------------------------------------------*/
   /* Verify that there is not an order and P&H request*/
   /* ------------------------------------------------------------*/

  PW0MW00.PW0MWIXM = PW0MW00.XXXTSPAG;
  PW0MW00.PW0MWIMX = 1; /* Init index*/

  while (PW0MW00.PW0MWIMX < PW0MW00.PW0MWIBX[PW0MWIXM]) /* Scan prev pgs*/

    if (PW0MW60.PW0MWSEL[PW0MWIMX] == "I" /* Inquiry*/
     && PW0MW60.TF1CARCD[PW0MWIMX] > " ") /* Non-blank carrier*/
      PW0MW00.PW0MWIQF = "Y"; /* Set inquire flag*/

    end

    if (PW0MW60.PW0MWSEL[PW0MWIMX] == "A"
     || PW0MW60.PW0MWSEL[PW0MWIMX] == "D"
     || PW0MW60.PW0MWSEL[PW0MWIMX] == "C")

      PW0MW00.PW0MWQTR = "Y"; /* Set quantity flag to 'y'*/
    end

    PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1; /* Increment index*/
  end

  PW0MW00.PW0MWIXM = PW0MW00.XXXTSPAG;
  PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1; /* Go to next page*/

  if (PW0MW00.PW0MWIXM <= PW0MW00.PW0MW-MAP-IDX-MAX)

    if (PW0MW00.PW0MWIBX[PW0MWIXM] > 0) /* There is more data*/

      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIBX[PW0MWIXM];

      PW0MW00.PW0MWSWC = "N"; /* Init the flag*/
      while (PW0MW00.PW0MWSWC == "N")

        PW0MS46(); /* Check for eof*/

        if (PW0MW00.PW0MWSWC == "N")
          if (PW0MW60.PW0MWSEL[PW0MWIMX] == "I" /* Inquiry entered*/
           && PW0MW60.TF1CARCD[PW0MWIMX] > " ") /* Non-blank carrier*/
            PW0MW00.PW0MWIQF = "Y";

          end
          if (PW0MW60.PW0MWSEL[PW0MWIMX] == "A"
           || PW0MW60.PW0MWSEL[PW0MWIMX] == "D"
           || PW0MW60.PW0MWSEL[PW0MWIMX] == "C")

            PW0MW00.PW0MWQTR = "Y"; /* Set quantity flag to yes*/
          end
        end
        PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1; /* Increment index*/
      end
    end
  end

  PW0MW00.PW0MWIXM = PW0MW00.PW0MW-MAP-IDX-MAX; /* Init line index*/

  while (PW0MW00.PW0MWIXM > 0) /* Until end of lines*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      if (PW0MM002.PW0MMSEL[PW0MWIXM] == "I")
        PW0M541();
      end
      if (PW0MM002.PW0MMSEL[PW0MWIXM] == "A"
       || PW0MM002.PW0MMSEL[PW0MWIXM] == "D"
       || PW0MM002.PW0MMSEL[PW0MWIXM] == "C")

        PW0MW00.PW0MWQTR = "Y"; /* Set quantity flag to yes*/
      end

    else
      if (PW0MM001.PW0MMSEL[PW0MWIXM] == "I")

        PW0M541();

      end
      if (PW0MM001.PW0MMSEL[PW0MWIXM] == "A"
       || PW0MM001.PW0MMSEL[PW0MWIXM] == "D"
       || PW0MM001.PW0MMSEL[PW0MWIXM] == "C")

        PW0MW00.PW0MWQTR = "Y"; /* Set quantity flag to yes*/
      end

    end

    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM - 1; /* Decrement index*/

  end


end // end PW0M540

// Set up date comparison
Function PW0M541()
   /* ------------------------------------------------------------*/
   /* Set up the map DNSB date for comparison to minimum date.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    PW0MW00.PW0MWHMM = PW0MM002.PW0MMDMM[PW0MWIXM];
    PW0MW00.PW0MWHDD = PW0MM002.PW0MMDDD[PW0MWIXM];
    PW0MW00.PW0MWHYY = PW0MM002.PW0MMDYY[PW0MWIXM];
  else
    PW0MW00.PW0MWHMM = PW0MM001.PW0MMDMM[PW0MWIXM];
    PW0MW00.PW0MWHDD = PW0MM001.PW0MMDDD[PW0MWIXM];
    PW0MW00.PW0MWHYY = PW0MM001.PW0MMDYY[PW0MWIXM];
  end


  if (PW0MW00.PW0MWHMM == 0
   && PW0MW00.PW0MWHDD == 0
   && PW0MW00.PW0MWHYY == 0)

    PW0MWHCC = 0;
  else

    if (PW0MW00.PW0MWHYY > 50
     && PW0MW00.PW0MWHYY < 99)

      PW0MW00.PW0MWHCC = 19; /* Century*/

    else

      PW0MW00.PW0MWHCC = 20;
    end
  end


end // end PW0M541

// Process valid input request
Function PW0M600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0MW00.PW0MWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update warehouse code and abbreviation.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    COMMAREA.XWHCD = PW0MM002.XWHCD; /* Warehouse code*/
    PKWREC.XWHCD = PW0MM002.XWHCD; /* Warehouse code*/
    PKWREC.XWHABRV = PW0MM002.XWHABRV; /* Warehouse abrv*/
  else /* pick planning*/
    COMMAREA.XWHCD = PW0MM001.XWHCD; /* Warehouse code*/
    PKWREC.XWHCD = PW0MM001.XWHCD; /* Warehouse code*/
    PKWREC.XWHABRV = PW0MM001.XWHABRV; /* Warehouse abrv*/
  end

  COMMAREA.XNDCD = " ";

  PKWREC.XDVCD[1] = PW0MW01.XDVCD; /* Division code*/
  PKWREC.XBCCD[1] = PW0MW01.XBCCD; /* Brand code*/

  PKWREC.PKWFRMDT[1] = PW0MW00.PW0MWFDT; /* From date*/
  PKWREC.PKWTODT[1] = PW0MW00.PW0MWTDT; /* From date*/
  PKWREC.PKWXWHCD = " ";
  PKWREC.PKWFRMAP[1] = "PW0M";
  PKWREC.PKWSLTYP[1] = " ";

   /* ------------------------------------------------------------*/
   /* If key has changed, ezertn.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.PW0MWKCH == "Y") /* Key has changed*/

    PW0MW01.PW0MWFDT = PW0MW00.PW0MWFDT; /* Move new from dt*/
    PW0MW01.PW0MWTDT = PW0MW00.PW0MWTDT; /* Move new to date*/

    PW0MW00.PW0MWSWR = "Y"; /* Request new data*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Update the storage area with the map detail changes.*/
   /* ------------------------------------------------------------*/

  PW0MW00.PW0MWIXM = PW0MW00.XXXTSPAG; /* Index the page*/
  PW0MW00.PW0MWIMX = PW0MW00.PW0MWIBX[PW0MWIXM]; /* Beg pg ndx*/
  PW0MW00.PW0MWIXM = 1; /* Reset index to 1*/
  PW0MW00.PW0MW-QTY-ENTERED = "N";

  while (PW0MW00.PW0MWIXM <= PW0MW00.PW0MW-MAP-IDX-MAX)

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      if (PW0MM002.PW0MMBQT[PW0MWIXM] != PW0MW01.PW0MWBQT[PW0MWIXM]
       || PW0MM002.PW0MMSEL[PW0MWIXM] != PW0MW01.PW0MWSEL[PW0MWIXM])

        PW0MW60.PW0MWSEL[PW0MWIMX] = PW0MM002.PW0MMSEL[PW0MWIXM];
        PW0MW60.PW0MWEQT[PW0MWIMX] = PW0MM002.PW0MMBQT[PW0MWIXM];
        PW0MW01.PW0MWSEL[PW0MWIXM] = PW0MM002.PW0MMSEL[PW0MWIXM];
        PW0MW01.PW0MWBQT[PW0MWIXM] = PW0MM002.PW0MMBQT[PW0MWIXM];
        PW0MW00.PW0MW-QTY-ENTERED = "Y";

      end
    else
      if (PW0MM001.PW0MMBQT[PW0MWIXM] != PW0MW01.PW0MWBQT[PW0MWIXM]
       || PW0MM001.PW0MMSEL[PW0MWIXM] != PW0MW01.PW0MWSEL[PW0MWIXM])

        PW0MW60.PW0MWSEL[PW0MWIMX] = PW0MM001.PW0MMSEL[PW0MWIXM];
        PW0MW60.PW0MWEQT[PW0MWIMX] = PW0MM001.PW0MMBQT[PW0MWIXM];
        PW0MW01.PW0MWSEL[PW0MWIXM] = PW0MM001.PW0MMSEL[PW0MWIXM];
        PW0MW01.PW0MWBQT[PW0MWIXM] = PW0MM001.PW0MMBQT[PW0MWIXM];
        PW0MW00.PW0MW-QTY-ENTERED = "Y";

      end
    end


    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1;
    PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;

  end

  if (PW0MW00.PW0MW-QTY-ENTERED == "Y")
    PW0M605(); /* Update temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0MW00.XXXTSPAG = PW0MW00.XXXTSPAG - 1; /* Decrement page numb*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0MW00.XXXTSPAG = PW0MW00.XXXTSPAG + 1; /* Increment page num*/

    return; /* Return to previous process*/

  end

   /* -----------------------------------------------------------*/
   /* Process the quantities that have been modified.*/
   /* -----------------------------------------------------------*/

  if (PW0MW00.PW0MWQTR == "Y") /* Quantity amounts entered*/

    XX0XS01(); /* Date and time routine*/

    PW0MW00.PW0MWIMX = 1; /* Initialize index*/
    PW0MW00.PW0MWSWC = "N"; /* Initialize eof flag*/

    while (PW0MW00.PW0MWSWC == "N") /* Not eof*/

      if (PW0MW60.PW0MWSEL[PW0MWIMX] > " ")
        if (PW0MW60.PW0MWSEL[PW0MWIMX] == "D")

          PW0M610(); /* Process a delete*/

        end

        if (PW0MW60.PW0MWSEL[PW0MWIMX] == "A")

          PW0M620(); /* Process an add*/

        end

        if (PW0MW60.PW0MWSEL[PW0MWIMX] == "C")
          PW0M630(); /* Process an update*/
        end

        if (PW0MW60.PW0MWSEL[PW0MWIMX] != "I")
          PW0MW60.PW0MWSEL[PW0MWIMX] = " "; /* Blank out the action*/

        end
      end
      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;

      PW0MS46(); /* Check for eof*/
    end

    PW0M640(); /* Update temp storage*/
    PW0MW00.PW0MWSWR = "Y"; /* request new data*/

  end

   /* ------------------------------------------------------------*/
   /* Process the order requests.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.PW0MWIQF == "Y")
    PW0MW00.PW0MWIQF = "N";

    PWKREC.XWHCD = PW0MW01.XWHCD;
    PWKREC.XWHABRV = PKWREC.XWHABRV;
    PWKREC.PWKFRDT = PW0MW01.PW0MWFDT;
    PWKREC.PWKTODT = PW0MW01.PW0MWTDT;

    PW0MW00.PW0MWIXM = 1; /* Used as PWK index*/
    PW0MW00.PW0MWPCT = 1; /* Used as page index*/
    PW0MW00.PW0MWIMX = 1; /* Used as W60 index*/
    PW0MW00.PW0MWSWC = "N"; /* Used as W60 eof*/
    PW0MW00.PW0MWODN = "N"; /* Init parm flag*/
    PWKREC.PWKARMAX = 0;

    while (PW0MW00.PW0MWSWC == "N")

      if (PW0MW60.PW0MWSEL[PW0MWIMX] == "I")
        PWKREC.OP1DSBDT[PW0MWIXM] = PW0MW60.PW0MWDAT[PW0MWIMX];
        PWKREC.TF1CARCD[PW0MWIXM] = PW0MW60.TF1CARCD[PW0MWIMX];
        PWKREC.XHDCD[PW0MWIXM] = PW0MW60.XHDCD[PW0MWIMX];

        PWKREC.PWKARMAX = PWKREC.PWKARMAX + 1; /* # parm entries*/
        PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1; /* parm index*/

        if (PWKREC.PWKARMAX == 25)
          PW0MW00.PW0MWODN = "Y"; /* Parm tbl limit reached*/
        end

        if (PW0MW00.PW0MWODN == "Y") /* Parm tbl limit reached*/
          PKWREC.PKWARRAY[PW0MWPCT] = PWKREC.PWKARRAY;
          PW0MW00.PW0MWPCT = PW0MW00.PW0MWPCT + 1; /* Increment page*/
          if (PW0MW00.PW0MWPCT > 3) /* Page limit exceeded*/
            PW0MW00.PW0MWSWC = "Y"; /* End of loop*/
          else
            PWKREC.PWKARMAX = 1;
            PW0MW00.PW0MWODN = "N"; /* Reset parm flag*/
            PW0MW00.PW0MWIXM = 1; /* Reset parm index*/
          end
        end
      end
      PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;
      PW0MS46();
    end

    COMMAREA.CATOAP = "PW0N"; /* TO application*/
    PW0M110(); /* Purge temp storage*/
    PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV;
    XSPKS01(); /* Exit to another application*/

  end

    /* ------------------------------------------------*/
    /* commit all changes to protect resources.*/
    /* ------------------------------------------------*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit all changes*/
  PW0MW00.XXXMSGNO = 32; /* Update successful*/
  TA1REC.TA1LOC = "600"; /* Module identification*/
  PW0MW00.PW0MWSWF = "Y"; /* Format the data on the map*/

end // end PW0M600

// Update temporary storage
Function PW0M605()
   /* ------------------------------------------------------------*/
   /* Update temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/
  PW0MW01.XXXTSLEN = PW0MW00.XXXTSLEN;

  try
    call "TA0050" (PW0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "605"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M605

// Delete vselqt02
Function PW0M610()
   /* ------------------------------------------------------------*/
   /* Delete a row in vselqt02.*/
   /* ------------------------------------------------------------*/

  PWVREC.XWHCD = PW0MW01.XWHCD; /* Warehouse code*/

  if (PW0MW60.PW0MWDAT[PW0MWIMX] < PW0MW00.PW0MWMDT)
    PWVREC.PK-SEL-TYP-CD = " 1";
  else
    PWVREC.PK-SEL-TYP-CD = " 3";
  end

  PWVREC.PKURUNMD = PW0MW00.PKURUNMD; /* Run mode*/
  PWVREC.TF1CARCD = PW0MW60.TF1CARCD[PW0MWIMX]; /* Carrier*/
  PWVREC.XUM-UOM-CD = PW0MW60.XUM-UOM-CD[PW0MWIMX]; /* UOM*/
  PWVREC.OP1DSBDT = PW0MW60.PW0MWDAT[PW0MWIMX]; /* DNSB date*/
  PWVREC.XHDCD = PW0MW60.XHDCD[PW0MWIMX];
  PWVREC.XGPCD = PW0MW60.XGPCD[PW0MWIMX];

  if (PW0MW01.XDVCD == "*") /* Division code*/
    PWVREC.XDVCD = " ";
  else
    PWVREC.XDVCD = PW0MW01.XDVCD;
  end

  if (PW0MW01.XBCCD == "*") /* Brand code*/
    PWVREC.XBCCD = " ";
  else
    PWVREC.XBCCD = PW0MW01.XBCCD;
  end

  if (PWVREC.TF1CARCD == "    ") /* Extra quantity record*/
    PWVREC.PK-SEL-TYP-CD = "16"; /* Extra special handling*/
    PWVREC.XUM-UOM-CD = "  ";
    PWVREC.OP1DSBDT = 0;
  end

  try
    call "VSELQT02" ("D ", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0MW60.PW0MWBQT[PW0MWIMX] = 0; /* Set quantity to zero*/
      PW0MW60.PW0MWEQT[PW0MWIMX] = 0; /* Set quantity to zero*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0M610

// Add row to vselqt02
Function PW0M620()
   /* ------------------------------------------------------------*/
   /* Add a quantity row to vselqt02.*/
   /* ------------------------------------------------------------*/

  set PWVREC empty;

  PWVREC.XWHCD = PW0MW01.XWHCD; /* Warehouse*/
  PWVREC.PKURUNMD = PW0MW00.PKURUNMD;

  if (PW0MW60.PW0MWDAT[PW0MWIMX] < PW0MW00.PW0MWMDT)
    PWVREC.PK-SEL-TYP-CD = " 1"; /* Type*/
  else
    PWVREC.PK-SEL-TYP-CD = " 3"; /* Type*/
  end

  PWVREC.OP1DSBDT = PW0MW60.PW0MWDAT[PW0MWIMX]; /* DNSB date*/
  PWVREC.TF1CARCD = PW0MW60.TF1CARCD[PW0MWIMX]; /* Carrier*/
  PWVREC.XUM-UOM-CD = PW0MW60.XUM-UOM-CD[PW0MWIMX]; /* UOM*/
  PWVREC.XHDCD = PW0MW60.XHDCD[PW0MWIMX]; /* Handling code*/
  PWVREC.XGPCD = PW0MW60.XGPCD[PW0MWIMX]; /* Product code*/
  PWVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
  PWVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

  if (PW0MW01.XDVCD == "*") /* Division code*/
    PWVREC.XDVCD = " ";
  else
    PWVREC.XDVCD = PW0MW01.XDVCD;
  end

  if (PW0MW01.XBCCD == "*") /* Brand code*/
    PWVREC.XBCCD = " ";
  else
    PWVREC.XBCCD = PW0MW01.XBCCD;
  end

  if (PW0MW60.TF1CARCD[PW0MWIMX] == "    ") /* Extra quantity record*/
    PWVREC.PK-SEL-TYP-CD = "16"; /* Extra special handling*/
    PWVREC.XUM-UOM-CD = "  ";
    PWVREC.OP1DSBDT = 0;
  end

  if (PW0MW60.PW0MWEQT[PW0MWIMX] > 0)
    PWVREC.PKHPVSFC = PW0MW60.PW0MWEQT[PW0MWIMX]; /* Amt entered*/
  else
    PWVREC.PKHPVSFC = PW0MW60.PW0MWWFC[PW0MWIMX] +                   +PW0MW60.PW0MWWRP[PW0MWIMX];
  end

  if (PW0MW60.XHDCD[PW0MWIMX] in XHDTBL.XHDCD
   && PWVREC.PK-SEL-TYP-CD != "16" /* Do not total for extra qty*/
   && PWVREC.PKHPVSFC > 0)         /* There is a quantity*/
    PWVREC.PKHPVSMM = mathLib.round(PWVREC.PKHPVSFC * XHDTBL.XHDSHMM[sysVar.arrayIndex], -mathLib.decimals(PWVREC.PKHPVSMM));

    if (PWVREC.PKHPVSMM == 0 /* Less than 1 minute*/
     && XHDTBL.XHDSHMM[sysVar.arrayIndex] > 0) /* There is a unit value*/

      PWVREC.PKHPVSMM = 1; /* Round up to 1 minute*/
    end
  end

   /* ----------------------------------------------------------*/
   /* Update the pw0mw60 record*/
   /* ----------------------------------------------------------*/

  PW0MW60.PW0MWBQT[PW0MWIMX] = PWVREC.PKHPVSFC; /* Amt ent*/
  PW0MW60.PW0MWEQT[PW0MWIMX] = 0; /* Init entered amt*/

   /* ------------------------------------------------------------*/
   /* Add the row*/
   /* ------------------------------------------------------------*/

  try
    call "VSELQT02" ("A ", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "620"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0M620

// Update vselqt02
Function PW0M630()
   /* ------------------------------------------------------------*/
   /* Update a row in vselqt02.*/
   /* ------------------------------------------------------------*/

  set PWVREC empty;

  PWVREC.XWHCD = PW0MW01.XWHCD; /* Warehouse*/
  PWVREC.PKURUNMD = PW0MW00.PKURUNMD; /* Run mode*/
  PWVREC.OP1DSBDT = PW0MW60.PW0MWDAT[PW0MWIMX]; /* DNSB date*/
  PWVREC.TF1CARCD = PW0MW60.TF1CARCD[PW0MWIMX]; /* Carrier*/
  PWVREC.XUM-UOM-CD = PW0MW60.XUM-UOM-CD[PW0MWIMX]; /* UOM*/
  PWVREC.XHDCD = PW0MW60.XHDCD[PW0MWIMX]; /* Handling code*/
  PWVREC.XGPCD = PW0MW60.XGPCD[PW0MWIMX]; /* Product code*/

  if (PW0MW60.PW0MWDAT[PW0MWIMX] < PW0MW00.PW0MWMDT)
    PWVREC.PK-SEL-TYP-CD = " 1"; /* Type*/
  else
    PWVREC.PK-SEL-TYP-CD = " 3"; /* Type*/
  end

  if (PW0MW01.XDVCD == "*") /* Division code*/
    PWVREC.XDVCD = " ";
  else
    PWVREC.XDVCD = PW0MW01.XDVCD;
  end

  if (PW0MW01.XBCCD == "*") /* Brand code*/
    PWVREC.XBCCD = " ";
  else
    PWVREC.XBCCD = PW0MW01.XBCCD;
  end

  if (PW0MW60.TF1CARCD[PW0MWIMX] == "    ") /* Extra quantity rec*/
    PWVREC.PK-SEL-TYP-CD = "16"; /* Extra special handling*/
    PWVREC.XUM-UOM-CD = "  ";
    PWVREC.OP1DSBDT = 0;
  end

  PW0M631(); /* Select unique to get count*/

  PWVREC.PKHPVSFC = PW0MW60.PW0MWEQT[PW0MWIMX]; /* Amt entered*/
  PWVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
  PWVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

  if (PW0MW60.XHDCD[PW0MWIMX] in XHDTBL.XHDCD
   && PWVREC.PK-SEL-TYP-CD != "16" /* Do not total for extra qty*/
   && PWVREC.PKHPVSFC > 0)         /* There is an amount*/
    PWVREC.PKHPVSMM = mathLib.round(PWVREC.PKHPVSFC * XHDTBL.XHDSHMM[sysVar.arrayIndex], -mathLib.decimals(PWVREC.PKHPVSMM));

    if (XHDTBL.XHDSHMM[sysVar.arrayIndex] > 0 /* There is a unit value*/
     && PWVREC.PKHPVSMM == 0)                 /* Less than 1 minute calculated*/

      PWVREC.PKHPVSMM = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Update the row*/
   /* ------------------------------------------------------------*/

  try
    call "VSELQT02" ("U ", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0M632(); /* Update the storage table*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0M630

// Select Unique selqt02
Function PW0M631()
   /* ------------------------------------------------------------*/
   /* Select unique on vselqt02.*/
   /* ------------------------------------------------------------*/

  try
    call "VSELQT02" ("S ", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0M631

// Update the pw0mw60 table
Function PW0M632()
   /* ----------------------------------------------------------*/
   /* Update the pw0mw60 record*/
   /* ----------------------------------------------------------*/

  PW0MW60.PW0MWBQT[PW0MWIMX] = PW0MW60.PW0MWEQT[PW0MWIMX]; /* Amt ent*/
  PW0MW60.PW0MWEQT[PW0MWIMX] = 0; /* Init entered amt*/


end // end PW0M632

// Update working storage
Function PW0M640()
   /* -----------------------------------------------*/
   /* Recreate temporary storage using an updated*/
   /* pw0mw60 table.*/
   /* -----------------------------------------------*/

  PW0MW00.PW0MWFSH = "Y"; /* Set the refresh flag*/

  PW0M110(); /* Purge temp storage*/

  PW0MW00.PW0MWFSH = "N"; /* Reinitalize the purge flag*/
  PW0MW01.XWHCD = PW0MW00.XWHCD; /* Warehouse code*/

  PW0MW01.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW0MW01.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW0MW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW0MW01.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW0MW01.XBCABRV = " ";
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW0MW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW0MW01.PW0MWFDT = PW0MW00.PW0MWFDT;
  PW0MW01.PW0MWTDT = PW0MW00.PW0MWTDT;

  PW0MW00.PW0MWPGI = 1; /* Page index*/
  PW0MW00.PW0MWIXM = 1; /* Display map line index*/
  PW0MW00.PW0MWIMX = 1; /* Temp store index*/
  PW0MW00.PW0MWSWC = "N"; /* End of cursor*/

  while (PW0MW00.PW0MWSWC == "N") /* UNTIL END OF CURSOR*/

    PW0MS46(); /* Check for eof*/

    /* ----------------------------------------------*/
    /* If not eof, save the data in display storage.*/
    /* ----------------------------------------------*/
    if (PW0MW00.PW0MWSWC == "N") /* Not eof*/

      PW0MS48(); /* Save data in display storage*/

    end

    /* -------------------------------------------------------*/
    /* If the page is full, add the page to the storge queue.*/
    /* -------------------------------------------------------*/

    if (PW0MW00.PW0MWIXM > PW0MW00.PW0MW-MAP-IDX-MAX) /* Page is full*/

      PW0M180(); /* Add page to temporary storage*/

      PW0MW00.PW0MWIXM = 1; /* Display line index*/

    end
  end

   /* ------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------*/

  if (PW0MW00.PW0MWIXM > 1) /* Page was formatted*/
    PW0M180(); /* Add page to temporary storage*/
  end


end // end PW0M640

// Build extra quantity recs
Function PW0MS-EXTRA-QTY()
   /* ---------------------------------------------*/
   /* Move handle codes*/
   /* ---------------------------------------------*/

  PW0MW70.XHDCD[1] = "CAT";
  PW0MW70.XHDCD[2] = "DMP";
  PW0MW70.XHDCD[3] = "FLB";
  PW0MW70.XHDCD[4] = "HNG";
  PW0MW70.XHDCD[5] = "LBL";
  PW0MW70.XHDCD[6] = "OCR";
  PW0MW70.XHDCD[7] = "OFL";
  PW0MW70.XHDCD[8] = "PLB";

   /* ---------------------------------------------*/
   /* Set index to control extra special handle codes*/
   /* ---------------------------------------------*/

  PW0MW00.PW0MWIXM = 1;

   /* --------------------------------------------*/
   /* Format extra special handling quantity records*/
   /* --------------------------------------------*/

  while (PW0MW00.PW0MWIXM <= 8)

    PW0MS-FMT-EXTRA();
    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1;

  end


end // end PW0MS-EXTRA-QTY

// Format extra quantity recs
Function PW0MS-FMT-EXTRA()
   /* --------------------------------------------*/
   /* Format extra special handling quantity records*/
   /* --------------------------------------------*/

  PW0MW70.XGPCD[PW0MWIXM] = COMMAREA.XGPCD; /* General product code*/

  set PWVREC empty; /* Initialize record*/
  PWVREC.XWHCD = PW0MW01.XWHCD; /* Warehouse code*/
  PWVREC.XGPCD = PW0MW70.XGPCD[PW0MWIXM]; /* General product code*/

  if (PW0MW01.XDVCD == "*") /* Division code*/
    PWVREC.XDVCD = " ";
  else
    PWVREC.XDVCD = PW0MW01.XDVCD;
  end

  if (PW0MW01.XBCCD == "*") /* Brand code*/
    PWVREC.XBCCD = " ";
  else
    PWVREC.XBCCD = PW0MW01.XBCCD;
  end

  PWVREC.PKURUNMD = PW0MW00.PKURUNMD; /* Run mode*/
  PWVREC.OP1DSBDT = 0; /* DNSB date*/
  PWVREC.XHDCD = PW0MW70.XHDCD[PW0MWIXM]; /* Handling code*/
  PWVREC.TF1CARCD = " "; /* Carrier code*/
  PWVREC.XUM-UOM-CD = " "; /* UOM code*/
  PWVREC.PK-SEL-TYP-CD = "16"; /* Sel type code*/

  PW0MS-S-SELQT02(); /* Select selqt02 rec*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Record found*/
    PW0MW70.PW0MW-QTY-RP[PW0MWIXM] = PWVREC.PKHPVSFC;
  else
    PW0MW70.PW0MW-QTY-RP[PW0MWIXM] = 0;
  end


end // end PW0MS-FMT-EXTRA

// Move extra quantity recs
Function PW0MS-MOVE-EXTRA()
   /* --------------------------------------------*/
   /* Add extra special handling quantity records to table*/
   /* --------------------------------------------*/

  PW0MW00.PW0MWIXM = 1; /* Initialize qty index*/

  while (PW0MW00.PW0MWIXM <= 8) /* For all extra qty*/
    PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1; /* Non-sel order index*/
    PW0MW60.PW0MWDAT[PW0MWIMX] = 0;
    PW0MW60.TF1CARCD[PW0MWIMX] = "    ";
    PW0MW60.XHDCD[PW0MWIMX] = PW0MW70.XHDCD[PW0MWIXM];
    PW0MW60.XGPCD[PW0MWIMX] = PW0MW70.XGPCD[PW0MWIXM];
    PW0MW60.XUM-UOM-CD[PW0MWIMX] = "  ";
    PW0MW60.PW0MWWFC[PW0MWIMX] = 0;
    PW0MW60.PW0MWWRP[PW0MWIMX] = 0;
    PW0MW60.PW0MWBOR[PW0MWIMX] = 0;
    PW0MW60.PW0MWBQT[PW0MWIMX] = PW0MW70.PW0MW-QTY-RP[PW0MWIXM];
    PW0MW60.PW0MWEQT[PW0MWIMX] = 0;
    PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1; /* Extra qty index*/
  end


end // end PW0MS-MOVE-EXTRA

// Select selqt02 record
Function PW0MS-S-SELQT02()

  try
    call "VSELQT02" ("S ", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ---------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ---------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Records not found*/
      return; /* Return to previous process*/
    end

  end

   /* ---------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate than an unexpected error has occurred.*/
   /* ---------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0MS-S-SELQT02

// Sum selqt02 records
Function PW0MS-S2-SELQT02()

  try
    call "VSELQT02" ("S2", SQLCA, PWVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ---------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ---------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ---------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate than an unexpected error has occurred.*/
   /* ---------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1LOC = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  end

  converseLib.clearScreen();
   /* Clear screen before display*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/


end // end PW0MS-S2-SELQT02

// Subtract summed selected qty
Function PW0MS-SUB-SELQT02()
   /* ---------------------------------------------------------*/
   /* Sum FC and RP quantities and subtract from planning quantities*/
   /* ---------------------------------------------------------*/

  set PWVREC empty; /* Clear vselqt02 record*/

  PWVREC.XWHCD = PW0MW01.XWHCD; /* Warehouse code*/

  if (PW0MW01.XDVCD == "*") /* Division code*/
    PWVREC.XDVCD = "*";
  else
    PWVREC.XDVCD = PW0MW01.XDVCD;
  end

  if (PW0MW01.XBCCD == "*") /* Brand code*/
    PWVREC.XBCCD = "*";
  else
    PWVREC.XBCCD = PW0MW01.XBCCD;
  end

  PWVREC.PKURUNMD = " "; /* Run mode - picking*/

  PWVREC.OP1DSBDT = PW0MW40.PW0MWDAT[PW0MWPLI]; /* DNSB date*/

  PWVREC.XGPCD = PW0MW40.XGPCD[PW0MWPLI]; /* Product code*/
  PWVREC.XHDCD = PW0MW40.XHDCD[PW0MWPLI]; /* Special handle code*/
  PWVREC.TF1CARCD = PW0MW40.TF1CARCD[PW0MWPLI]; /* Carrier code*/
  PWVREC.XUM-UOM-CD = PW0MW40.XUM-UOM-CD[PW0MWPLI]; /* UOM code*/
  PWVREC.PK-SEL-TYP-CD = " 1"; /* Spcl hndl select type*/

  PW0MS-S2-SELQT02(); /* Sum selected qty*/

   /* ---------------------------------------------------------*/
   /* If non-zero quantity found, reduce repack quantity*/
   /* ---------------------------------------------------------*/

  if (PWVREC.PKHPVSFC > 0) /* Non-zero qty*/
    if (PWVREC.PKHPVSFC >= PW0MW40.PW0MWWFC[PW0MWPLI]) /* Reduce full case*/
      PWVREC.PKHPVSFC = PWVREC.PKHPVSFC - PW0MW40.PW0MWWFC[PW0MWPLI];
      PW0MW40.PW0MWWFC[PW0MWPLI] = 0;
    else
      PW0MW40.PW0MWWFC[PW0MWPLI] = PW0MW40.PW0MWWFC[PW0MWPLI] -                                                   PWVREC.PKHPVSFC;
      PWVREC.PKHPVSFC = 0;
    end
    if (PWVREC.PKHPVSFC >= PW0MW40.PW0MWWRP[PW0MWPLI]) /* Reduce repack*/
      PW0MW40.PW0MWWRP[PW0MWPLI] = 0;
    else
      PW0MW40.PW0MWWRP[PW0MWPLI] = PW0MW40.PW0MWWRP[PW0MWPLI] -                                                   PWVREC.PKHPVSFC;
    end

  end


end // end PW0MS-SUB-SELQT02

// Determine min Pack-hold Date
Function PW0MS20()
   /* -------------------------------------------------------*/
   /* Determine the minimum pack & hold date.*/
   /* -------------------------------------------------------*/

  PW0MW00.PW0MWYMD = VGVar.currentShortGregorianDate; /* Move in current date*/

  if (PW0MW00.PW0MWMYY > 50 /* Year is 51 - 90*/
   && PW0MW00.PW0MWMYY <= 99)

    PW0MW00.PW0MWMCC = 19; /* tag as 19th century*/

  else

    PW0MW00.PW0MWMCC = 20; /* tag as 20th century*/
  end

  TA9REC.TA9BEGDT = PW0MW00.PW0MWMDT; /* move in begin date*/
  PW0MW00.PW0MWCD = PW0MW00.PW0MWMDT; /* move in begin date*/

  if (PKWREC.PKWSELSW == "PK") /* if picking*/

    TA9REC.TA9OFSET = 2; /* add 2 days*/

  else

    TA9REC.TA9OFSET = 3; /* add 3 days*/

  end

   /* ----------------------------------------------------------*/
   /* Call TA0190 to determine a minimum pack and hold date.*/
   /* TA0190 uses a 6 day work week.*/
   /* ----------------------------------------------------------*/

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};

  if (TA9REC.TA9RTNFL == 0) /* good return*/

    PW0MW00.PW0MWMCC = TA9REC.TA9RTNCC; /* century*/
    PW0MW00.PW0MWMYY = TA9REC.TA9RTNYY; /* year*/
    PW0MW00.PW0MWMMM = TA9REC.TA9RTNMM; /* month*/
    PW0MW00.PW0MWMDD = TA9REC.TA9RTNDD; /* day*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1LOC = "S20"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end PW0MS20

// Verify the date within range
Function PW0MS22()
   /* --------------------------------------------------------*/
   /* Verify that the date is within range. Use the non pack*/
   /* and hold dates, and the dates within the range.*/
   /* --------------------------------------------------------*/

  if (PW0MW01.PW0MWTDT != 0) /* if to date not zero chk range*/
    if (PKHREC.OP1DSBDT > PW0MW01.PW0MWTDT) /* Out of date range*/

      PW0MW00.PW0MWSWC = "Y";
      return;

    end
  end

  if (PKHREC.OP1DSBDT >= PW0MW01.PW0MWFDT /* >= from date*/
   && PKHREC.OP1DSBDT <= PW0MW01.PW0MWTDT) /* <= to date*/

    PW0MW00.PW0MWDCK = "Y";

  else
    if (PW0MW01.PW0MWFDT == 0 /* zero from date*/
     && PW0MW01.PW0MWTDT == 0) /* zero to date*/

      PW0MW00.PW0MWDCK = "Y";

    end
  end

  if (PW0MW00.PW0MWDCK == "Y")
    if (PW0MW01.XBCCD == "*" /* ColeHaan*/
     && PKHREC.XBCCD == "08")

      PW0MW00.PW0MWDCK = "N"; /* Do not use*/

    end
  end


end // end PW0MS22

// Check carrier date
Function PW0MS24()
   /* ------------------------------------------------------------*/
   /* Check carrier date from vcahld01*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK")
    if (PWFREC.PKBRELDT > PW0MW00.PW0MWCD) /* pk-rel-dt > curr dt*/

      PW0MW00.PW0MWCCF = "N"; /* Tag as bad*/

    end
  else

    if (PWFREC.PKBPLRDT > PW0MW00.PW0MWCD) /* pk-pic-pln-rel-dt >*/
                                           /* ; curr dt*/
      PW0MW00.PW0MWCCF = "N"; /* Tag as bad*/

    end
  end


end // end PW0MS24

// Check hold order date
Function PW0MS26()
   /* ------------------------------------------------------------*/
   /* Check carrier date from vorhld01*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK")
    if (PKBREC.PKBRELDT > PW0MW00.PW0MWCD) /* pk-rel-dt > curr dt*/

      PW0MW00.PW0MWCCF = "N"; /* Tag as bad*/

    end
  else

    if (PKBREC.PKBPLRDT > PW0MW00.PW0MWCD) /* pk-pic-pln-rel-dt >*/
                                           /* ; curr dt*/
      PW0MW00.PW0MWCCF = "N"; /* Tag as bad*/

    end
  end


end // end PW0MS26

// Check hold order date
Function PW0MS28()
   /* ------------------------------------------------------------*/
   /* Check carrier date from vorhld01*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK")
    if (PK9REC.PK9RELDT > PW0MW00.PW0MWCD) /* pk-rel-dt > curr dt*/

      PW0MW00.PW0MWCCF = "N"; /* Tag as bad*/

    end
  else

    if (PK9REC.PK9PLRDT > PW0MW00.PW0MWCD) /* pk-pic-pln-rel-dt >*/
                                           /* ; curr dt*/
      PW0MW00.PW0MWCCF = "N"; /* Tag as bad*/

    end
  end


end // end PW0MS28

// Add to the tables
Function PW0MS30()
   /* ---------------------------------------------------------*/
   /* Add FC and RP to selected by order.*/
   /* ---------------------------------------------------------*/

  PW0MW20.PW0MWBOR[PW0MWORI] = PW0MW20.PW0MWBOR[PW0MWORI] +                              PWEREC.PK-ALOC-FUL-CS-QTY;

  PW0MW20.PW0MWBOR[PW0MWORI] = PW0MW20.PW0MWBOR[PW0MWORI] +                              PWEREC.PK-ALOC-REPK-QTY;

end // end PW0MS30

// Add to the tables
Function PW0MS34()
   /* ---------------------------------------------------------*/
   /* Add FC and RP to selected by quantity.*/
   /* ---------------------------------------------------------*/

  PW0MW30.PW0MWBQT[PW0MWQTI] = PW0MW30.PW0MWBQT[PW0MWQTI] + PWVREC.PKHPVSRP;
  PW0MW30.PW0MWBQT[PW0MWQTI] = PW0MW30.PW0MWBQT[PW0MWQTI] + PWVREC.PKHPVSFC;

end // end PW0MS34

// Verify the date within range
Function PW0MS36()
   /* --------------------------------------------------------*/
   /* Verify that the date is within range. Use the non pack*/
   /* and hold dates, and the dates within the range.*/
   /* --------------------------------------------------------*/

  if (PWEREC.OP1DSBDT > PW0MW01.PW0MWTDT) /* Beyond date range*/
    PW0MW00.PW0MWSWC = "Y";
    return;
  end

  if (PWEREC.OP1DSBDT >= PW0MW01.PW0MWFDT /* >= from date*/
   && PWEREC.OP1DSBDT <= PW0MW01.PW0MWTDT) /* <= to date*/

    if (PW0MW01.XBCCD == "*" /* ColeHaan*/
     && PWEREC.XBC-BRAND-CD == "08")
      return; /* do not pass edit check*/
    end
    if (PWEREC.XDV-DIV-CD == "01" /* In-store promo*/
     && PWEREC.XGP-GPC-CD == "01")
      return; /* do not pass edit check*/
    end

    PW0MW00.PW0MWDCK = "Y"; /* pass edit check*/

  end


end // end PW0MS36

// Add non selected to tbls
Function PW0MS40()
   /* ---------------------------------------------------------*/
   /* Add FC and RP to non selected fields*/
   /* ---------------------------------------------------------*/

  PW0MW40.PW0MWWRP[PW0MWPLI] = PW0MW40.PW0MWWRP[PW0MWPLI] +                              PWEREC.PK-ALOC-REPK-QTY;

  PW0MW40.PW0MWWFC[PW0MWPLI] = PW0MW40.PW0MWWFC[PW0MWPLI] +                              PWEREC.PK-ALOC-FUL-CS-QTY;


end // end PW0MS40

// Merge the order and quant tbl
Function PW0MS42()
   /* -----------------------------------------------------------*/
   /* Merge the vselor01 and vselqt02 tables.*/
   /* -----------------------------------------------------------*/

  PW0MW00.PW0MWORI = 1; /* Vselor01 index*/
  PW0MW00.PW0MWQTI = 1; /* Vselqt02 index*/
  PW0MW00.PW0MWIMX = 0; /* Merge table index*/
  PW0MW00.PW0MWODN = "N"; /* Order table done switch*/
  PW0MW00.PW0MWQDN = "N"; /* Quantity table done switch*/

  PW0MS43(); /* Check for eofs*/

  while (PW0MW00.PW0MWODN == "N" /* Order table not done*/
   || PW0MW00.PW0MWQDN == "N") /* Quantity table not done*/

    PW0MS74(); /* Load the table*/

    PW0MS43(); /* Check for eof*/

    if (PW0MW00.PW0MWIMX == PW0MW00.PW0MW-ORD-IDX-MAX)
      if (PW0MW00.PW0MWODN == "N")
        PW0MW00.PW0MWMRE = "Y"; /* Set the more data flag*/
      end

      if (PW0MW00.PW0MWQDN == "N")
        PW0MW00.PW0MWMRE = "Y"; /* Set the more data flag*/
      end
      PW0MW00.PW0MWODN = "Y"; /* Order table done*/
      PW0MW00.PW0MWQDN = "Y"; /* Quantity table done*/
    end

  end


end // end PW0MS42

// Check for qty and order eof
Function PW0MS43()
   /* -----------------------------------------------------------*/
   /* Check for eof on the vselor01 and vselqt02 tables.*/
   /* -----------------------------------------------------------*/

  if (PW0MW00.PW0MWODN == "N")
    if (PW0MW20.PW0MWDAT[PW0MWORI] == 0 /* Order table done*/
     && PW0MW20.TF1CARCD[PW0MWORI] == " "
     && PW0MW20.XHDCD[PW0MWORI] == " "  
     && PW0MW20.XUM-UOM-CD[PW0MWORI] == "  "
     && PW0MW20.PW0MWBOR[PW0MWORI] == 0 
    )                                  
      PW0MW00.PW0MWORI = PW0MW00.PW0MW-ORD-IDX-MAX;
      PW0MW20.PW0MWDAT[PW0MWORI] = 99999999;
      PW0MW20.TF1CARCD[PW0MWORI] = "9999";
      PW0MW20.XHDCD[PW0MWORI] = "999";
      PW0MW00.PW0MWODN = "Y";

    end
  end

  if (PW0MW00.PW0MWQDN == "N")
    if (PW0MW30.PW0MWDAT[PW0MWQTI] == 0 /* Quantity table done*/
     && PW0MW30.TF1CARCD[PW0MWQTI] == " "
     && PW0MW30.XHDCD[PW0MWQTI] == " "  
     && PW0MW30.XUM-UOM-CD[PW0MWQTI] == "  "
     && PW0MW30.PW0MWBQT[PW0MWQTI] == 0 
    )                                  
      PW0MW00.PW0MWQTI = PW0MW00.PW0MW-QTY-IDX-MAX;
      PW0MW30.PW0MWDAT[PW0MWQTI] = 99999999;
      PW0MW30.TF1CARCD[PW0MWQTI] = "9999";
      PW0MW30.XHDCD[PW0MWQTI] = "999";
      PW0MW00.PW0MWQDN = "Y"; /* Max out the counter*/

    end
  end


end // end PW0MS43

// Merge ord/qty & non-sel tbles
Function PW0MS44()
   /* -----------------------------------------------------------*/
   /* Merge the order/quantity table with the non-selected tbl*/
   /* -----------------------------------------------------------*/

  PW0MW00.PW0MWORI = 1; /* Order/Quantity index*/
  PW0MW00.PW0MWPLI = 1; /* Pool - non selected index*/
  PW0MW00.PW0MWIMX = 0; /* Merge table index*/
  PW0MW00.PW0MWODN = "N"; /* Order table done switch*/
  PW0MW00.PW0MWPDN = "N"; /* Pool table not done switch*/

  PW0MS45(); /* Check for eofs*/

  while (PW0MW00.PW0MWODN == "N" /* Order table not done*/
   || PW0MW00.PW0MWPDN == "N") /* Pool table not done*/

    PW0MS84(); /* Load the table*/

    PW0MS45(); /* ; Check for eofs*/

    if (PW0MW00.PW0MWIMX == PW0MW00.PW0MW-NSEL-IDX-MAX)
      if (PW0MW00.PW0MWODN == "N")
        PW0MW00.PW0MWMRE = "Y"; /* Set the more data flag*/
      end

      if (PW0MW00.PW0MWPDN == "N")
        PW0MW00.PW0MWMRE = "Y"; /* Set the more data flag*/
      end
      PW0MW00.PW0MWODN = "Y"; /* Order table done*/
      PW0MW00.PW0MWPDN = "Y"; /* Quantity table done*/
    end

  end


end // end PW0MS44

// Check for ord/qty/non-sel eof
Function PW0MS45()
   /* -----------------------------------------------------------*/
   /* Check the order/quantity & non-selected tbl eofs*/
   /* -----------------------------------------------------------*/

  if (PW0MW00.PW0MWPDN == "N")
    if (PW0MW40.PW0MWDAT[PW0MWPLI] == 0 /* There are no pool rcds*/
     && PW0MW40.TF1CARCD[PW0MWPLI] == " "
     && PW0MW40.XHDCD[PW0MWPLI] == " "  
     && PW0MW40.XUM-UOM-CD[PW0MWPLI] == "  "
     && PW0MW40.PW0MWWFC[PW0MWPLI] == 0 
     && PW0MW40.PW0MWWRP[PW0MWPLI] == 0 
    )                                  
      PW0MW00.PW0MWPLI = PW0MW00.PW0MW-NSEL-IDX-MAX;
      PW0MW40.PW0MWDAT[PW0MWPLI] = 99999999;
      PW0MW40.TF1CARCD[PW0MWPLI] = "9999";
      PW0MW40.XHDCD[PW0MWPLI] = "999";
      PW0MW00.PW0MWPDN = "Y"; /* There are no records*/

    end
  end

  if (PW0MW00.PW0MWODN == "N")
    if (PW0MW50.PW0MWDAT[PW0MWORI] == 0 /* There are no ord/qty rcd*/
     && PW0MW50.TF1CARCD[PW0MWORI] == " "
     && PW0MW50.XHDCD[PW0MWORI] == " "  
     && PW0MW50.XUM-UOM-CD[PW0MWORI] == "  "
     && PW0MW50.PW0MWBOR[PW0MWORI] == 0 
     && PW0MW50.PW0MWBQT[PW0MWORI] == 0 
    )                                  
      PW0MW00.PW0MWORI = PW0MW00.PW0MW-ORD-IDX-MAX;
      PW0MW50.PW0MWDAT[PW0MWORI] = 99999999;
      PW0MW50.TF1CARCD[PW0MWORI] = "9999";
      PW0MW50.XHDCD[PW0MWORI] = "999";
      PW0MW00.PW0MWODN = "Y";

    end
  end


end // end PW0MS45

// Check for merged tbl eof
Function PW0MS46()
   /* -----------------------------------------------------------*/
   /* Check for end of file on the merged table.*/
   /* -----------------------------------------------------------*/

  if (PW0MW00.PW0MWIMX == PW0MW00.PW0MWLMT)

    PW0MW00.PW0MWSWC = "Y"; /* Set eof flag*/

  else

    if (PW0MW60.PW0MWDAT[PW0MWIMX] == 0 /* Merged table is done*/
     && PW0MW60.TF1CARCD[PW0MWIMX] == " "
     && PW0MW60.XHDCD[PW0MWIMX] == " "  
     && PW0MW60.XUM-UOM-CD[PW0MWIMX] == "  "
     && PW0MW60.PW0MWWFC[PW0MWIMX] == 0 
     && PW0MW60.PW0MWWRP[PW0MWIMX] == 0 
     && PW0MW60.PW0MWBOR[PW0MWIMX] == 0 
     && PW0MW60.PW0MWBQT[PW0MWIMX] == 0 
    )                                  
      PW0MW00.PW0MWSWC = "Y"; /* EOF flag*/

    end
  end


end // end PW0MS46

// Move data to the map rcd
Function PW0MS48()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (PW0MW00.PW0MWIXM == 1)

    PW0MW00.PW0MWIBX[PW0MWPGI] = PW0MW00.PW0MWIMX; /* Store beg ndx*/
    PW0MW00.PW0MWIEX[PW0MWPGI] = PW0MW00.PW0MWIMX; /* Set ending ndx*/
    PW0MW00.PW0MWIEX[PW0MWPGI] = PW0MW00.PW0MWIEX[PW0MWPGI] +                                PW0MW00.PW0MW-MAP-IDX-MAX;
    PW0MW00.PW0MWIEX[PW0MWPGI] = PW0MW00.PW0MWIEX[PW0MWPGI] - 1;
    PW0MW00.PW0MWPGI = PW0MW00.PW0MWPGI + 1;

  end

  if (PW0MW00.TA5TSQIX > 0 /* Not the first page*/
   && PW0MW00.PW0MWIXM == 1) /* first line on page*/

    PW0MW01.XWHCD = PW0MW00.XWHCD; /* Warehouse code*/
    PW0MW01.PW0MWFDT = PW0MW00.PW0MWFDT;
    PW0MW01.PW0MWTDT = PW0MW00.PW0MWTDT;

    PW0MW01.XDVCD = PKWREC.XDVCD; /* division code*/
    if (PKWREC.XDVCD == "*")
      PW0MW01.XDVDESC = "ALL DIVISIONS";
    else
      if (PKWREC.XDVCD in XDVTBL.XDVCD)
        PW0MW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    end

    PW0MW01.XBCCD = PKWREC.XBCCD; /* brand code*/
    if (PKWREC.XBCCD == "*")
      PW0MW01.XBCABRV = " ";
    else
      if (PKWREC.XBCCD in XBCTBL.XBCCD)
        PW0MW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
    end

  end

  PW0MW01.PW0MWSEL[PW0MWIXM] = PW0MW60.PW0MWSEL[PW0MWIMX]; /* Select*/
  PW0MW01.PW0MWDYY[PW0MWIXM] = PW0MW60.PW0MWDYY[PW0MWIMX]; /* DNSB yr*/
  PW0MW01.PW0MWDMM[PW0MWIXM] = PW0MW60.PW0MWDMM[PW0MWIMX]; /* DNSB mo*/
  PW0MW01.PW0MWDDD[PW0MWIXM] = PW0MW60.PW0MWDDD[PW0MWIMX]; /* DNSB da*/
  PW0MW01.XHDCD[PW0MWIXM] = PW0MW60.XHDCD[PW0MWIMX]; /* Handle code*/
  PW0MW01.XUM-UOM-CD[PW0MWIXM] = PW0MW60.XUM-UOM-CD[PW0MWIMX]; /* UOM*/
  PW0MW01.TF1CARCD[PW0MWIXM] = PW0MW60.TF1CARCD[PW0MWIMX]; /* Carrier*/
  PW0MW01.PW0MWWFC[PW0MWIXM] = PW0MW60.PW0MWWFC[PW0MWIMX]; /* FC*/
  PW0MW01.PW0MWWRP[PW0MWIXM] = PW0MW60.PW0MWWRP[PW0MWIMX]; /* RP*/
  PW0MW01.PW0MWBOR[PW0MWIXM] = PW0MW60.PW0MWBOR[PW0MWIMX];
                                  /* By Order*/
  PW0MW01.PW0MWBQT[PW0MWIXM] = PW0MW60.PW0MWBQT[PW0MWIMX]; /* By Qty*/

  PW0MW00.PW0MWIXM = PW0MW00.PW0MWIXM + 1; /* Increment line index*/
  PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1; /* Increment storage index*/


end // end PW0MS48

// Read temporary storage page
Function PW0MS52()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0MW01.XXXTSLEN = PW0MW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0MW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1LOC = "S52"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TA1REC.TA1LOC; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0MS52

// Read temporary storage page
Function PW0MS53()
   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'to'*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

    return; /* Normal return code*/

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "DNSB TO DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S53"; /* Module identification*/
    converseLib.validationFailed(29); /* System error occurred*/

    return; /* exit to display map*/

  end


end // end PW0MS53

// Merge the order and quant tbl
Function PW0MS74()
   /* --------------------------------------------*/
   /* Increment the combined table index*/
   /* --------------------------------------------*/

  PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;

   /* --------------------------------------------*/
   /* Order key is less than the quantity key*/
   /* --------------------------------------------*/

  if (PW0MW20.PW0MWKEY[PW0MWORI] < PW0MW30.PW0MWKEY[PW0MWQTI])

    PW0MW50.PW0MWKEY[PW0MWIMX] = PW0MW20.PW0MWKEY[PW0MWORI];
    PW0MW50.PW0MWBOR[PW0MWIMX] = PW0MW20.PW0MWBOR[PW0MWORI];
    PW0MW00.PW0MWORI = PW0MW00.PW0MWORI + 1;

  else

    /* --------------------------------------------*/
     /* Quantity key is less than the order key*/
    /* --------------------------------------------*/

    if (PW0MW20.PW0MWKEY[PW0MWORI] > PW0MW30.PW0MWKEY[PW0MWQTI]
    )
      PW0MW50.PW0MWKEY[PW0MWIMX] = PW0MW30.PW0MWKEY[PW0MWQTI];
      PW0MW50.PW0MWBQT[PW0MWIMX] = PW0MW30.PW0MWBQT[PW0MWQTI];
      PW0MW00.PW0MWQTI = PW0MW00.PW0MWQTI + 1;

    else

      /* ----------------------------------------------------*/
       /* Keys are equal*/
      /* ----------------------------------------------------*/

      if (PW0MW00.PW0MWODN == "N" /* A non zero rcd*/
       && PW0MW00.PW0MWQDN == "N") /* A non zero rcd*/

        PW0MW50.PW0MWKEY[PW0MWIMX] = PW0MW20.PW0MWKEY[PW0MWORI];
                                        /* Move the by order amount*/
        PW0MW50.PW0MWBOR[PW0MWIMX] = PW0MW20.PW0MWBOR[PW0MWORI];
                                        /* Move the by quantity amount*/
        PW0MW50.PW0MWBQT[PW0MWIMX] = PW0MW30.PW0MWBQT[PW0MWQTI];

        PW0MW00.PW0MWORI = PW0MW00.PW0MWORI + 1; /* Increment order index*/
        PW0MW00.PW0MWQTI = PW0MW00.PW0MWQTI + 1; /* Increment quant index*/

      end
    end
  end


end // end PW0MS74

// Merge the order and quant tbl
Function PW0MS84()
   /* ---------------------------------------------*/
   /* Increment the combined table index*/
   /* ---------------------------------------------*/

  PW0MW00.PW0MWIMX = PW0MW00.PW0MWIMX + 1;

   /* --------------------------------------------*/
   /* Order/Quantity key less than non-sel key*/
   /* --------------------------------------------*/

  if (PW0MW50.PW0MWKEY[PW0MWORI] < PW0MW40.PW0MWKEY[PW0MWPLI])

    /* -------------------------------------------------*/
     /* Move the w50 item to w60*/
    /* -------------------------------------------------*/

    PW0MW60.PW0MWKEY[PW0MWIMX] = PW0MW50.PW0MWKEY[PW0MWORI];
    PW0MW60.PW0MWWFC[PW0MWIMX] = 0;
    PW0MW60.PW0MWWRP[PW0MWIMX] = 0;
    PW0MW60.PW0MWBOR[PW0MWIMX] = PW0MW50.PW0MWBOR[PW0MWORI];
    PW0MW60.PW0MWBQT[PW0MWIMX] = PW0MW50.PW0MWBQT[PW0MWORI];

    PW0MW00.PW0MWORI = PW0MW00.PW0MWORI + 1;

  else

    if (PKWREC.PKWSELSW == "PP") /* Pick planning*/
      PW0MS-SUB-SELQT02(); /* Subtract selected qty*/
    end
    /* ---------------------------------------------------*/
     /* Move the w40 item to w60*/
    /* ---------------------------------------------------*/

    PW0MW60.PW0MWKEY[PW0MWIMX] = PW0MW40.PW0MWKEY[PW0MWPLI];
    PW0MW60.PW0MWWFC[PW0MWIMX] = PW0MW40.PW0MWWFC[PW0MWPLI];
    PW0MW60.PW0MWWRP[PW0MWIMX] = PW0MW40.PW0MWWRP[PW0MWPLI];

    /* ------------------------------------------------------*/
     /* Non-selected key is less than the ord/qty key*/
    /* ------------------------------------------------------*/

    if (PW0MW50.PW0MWKEY[PW0MWORI] > PW0MW40.PW0MWKEY[PW0MWPLI]
    )
      /* ---------------------------------------------------*/
       /* Initialize ord/qty fields*/
      /* ---------------------------------------------------*/

      PW0MW60.PW0MWBOR[PW0MWIMX] = 0;
      PW0MW60.PW0MWBQT[PW0MWIMX] = 0;

      PW0MW00.PW0MWPLI = PW0MW00.PW0MWPLI + 1;
    else

      /* ----------------------------------------------------*/
       /* Keys are equal*/
      /* ----------------------------------------------------*/

      PW0MW60.PW0MWBOR[PW0MWIMX] = PW0MW50.PW0MWBOR[PW0MWORI];
      PW0MW60.PW0MWBQT[PW0MWIMX] = PW0MW50.PW0MWBQT[PW0MWORI];

      PW0MW00.PW0MWORI = PW0MW00.PW0MWORI + 1; /* Increment order index*/
      PW0MW00.PW0MWPLI = PW0MW00.PW0MWPLI + 1; /* Increment quant index*/

    end
  end


end // end PW0MS84

//*** RECORD=PW0MW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0MW00 type basicRecord
  10 PW0MWSWF PW0MWSWF ; 
  10 PW0MWSWR PW0MWSWR ; 
  10 PW0MWQTI PW0MWQTI ; 
  10 PW0MW-SAVE-QTY-IDX PW0MW-SAVE-QTY-IDX ; 
  10 PW0MWPGI PW0MWPGI ; 
  10 PW0MWCD PW0MWCD ; 
  10 PW0MWMDT PW0MWMDT ; 
    15 PW0MWMCC PW0MWMCC ; 
    15 PW0MWYMD PW0MWYMD ; 
      20 PW0MWMYY PW0MWMYY ; 
      20 PW0MWMMM PW0MWMMM ; 
      20 PW0MWMDD PW0MWMDD ; 
  10 PW0MWHDA PW0MWHDA ; 
    15 PW0MWHCC PW0MWHCC ; 
    15 PW0MWHMD PW0MWHMD ; 
      20 PW0MWHYY PW0MWHYY ; 
      20 PW0MWHMM PW0MWHMM ; 
      20 PW0MWHDD PW0MWHDD ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PW0MWIXM PW0MWIXM ; 
  10 PW0MW-MAP-IDX-MAX PW0MW-MAP-IDX-MAX ; 
  10 PW0MW-NSEL-IDX-MAX PW0MW-NSEL-IDX-MAX ; 
  10 PW0MW-ORD-IDX-MAX PW0MW-ORD-IDX-MAX ; 
  10 PW0MW-QTY-IDX-MAX PW0MW-QTY-IDX-MAX ; 
  10 PW0MWSWC PW0MWSWC ; 
  10 PW0MWTIT PW0MWTIT ; 
  10 XWHCD XWHCD ; 
  10 PW0MWFDT PW0MWFDT ; 
    15 PW0MWFCC PW0MWFCC ; 
    15 PW0MWFRD PW0MWFRD ; 
      20 PW0MWFYY PW0MWFYY ; 
      20 PW0MWFMM PW0MWFMM ; 
      20 PW0MWFDD PW0MWFDD ; 
  10 PW0MWTDT PW0MWTDT ; 
    15 PW0MWTCC PW0MWTCC ; 
    15 * num(6) ; 
      20 PW0MWTYY PW0MWTYY ; 
      20 PW0MWTMM PW0MWTMM ; 
      20 PW0MWTDD PW0MWTDD ; 
  10 PW0MWORI PW0MWORI ; 
  10 PW0MW-SAVE-ORD-IDX PW0MW-SAVE-ORD-IDX ; 
  10 PW0MWLMT PW0MWLMT ; 
  10 PW0MWCCF PW0MWCCF ; 
  10 PW0MWPLI PW0MWPLI ; 
  10 PW0MW-SAVE-NSEL-IDX PW0MW-SAVE-NSEL-IDX ; 
  10 PW0MWMRE PW0MWMRE ; 
  10 PW0MWDCK PW0MWDCK ; 
  10 PW0MWCKY PW0MWCKY ; 
    15 PW0MWDAT PW0MWDAT ; 
      20 PW0MWDCC PW0MWDCC ; 
      20 PW0MWDYY PW0MWDYY ; 
      20 PW0MWDMM PW0MWDMM ; 
      20 PW0MWDDD PW0MWDDD ; 
    15 TF1CARCD TF1CARCD ; 
    15 XHDKEY XHDKEY ; 
      20 XHDCD XHDCD ; 
      20 XGPCD XGPCD ; 
    15 XUM-UOM-CD XUM-UOM-CD ; 
  10 PW0MWFLG PW0MWFLG ; 
  10 PW0MWIMX PW0MWIMX ; 
  10 PW0MWODN PW0MWODN ; 
  10 PW0MWQDN PW0MWQDN ; 
  10 PW0MWPDN PW0MWPDN ; 
  10 PW0MWQTR PW0MWQTR ; 
  10 PW0MWIBX PW0MWIBX [60] ; 
  10 PW0MWIEX PW0MWIEX [60] ; 
  10 PW0MWFSH PW0MWFSH ; 
  10 PW0MWKCH PW0MWKCH ; 
  10 PKURUNMD PKURUNMD ; 
  10 PW0MWPCT PW0MWPCT ; 
  10 PW0MWIQF PW0MWIQF ; 
  10 PW0MW-QTY-ENTERED PW0MW-QTY-ENTERED ; 
end // end PW0MW00

//*** RECORD=PW0MW01 ****
// ----------------------------
// Map work record
// ----------------------------
// ***********************
Record PW0MW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(383) ; 
    10 XWHCD XWHCD ; 
    10 XDVCD XDVCD ; 
    10 XDVDESC XDVDESC ; 
    10 XBCCD XBCCD ; 
    10 XBCABRV XBCABRV ; 
    10 PW0MWFDT PW0MWFDT ; 
      15 PW0MWFCC PW0MWFCC ; 
      15 PW0MWFRD PW0MWFRD ; 
        20 PW0MWFYY PW0MWFYY ; 
        20 PW0MWFMM PW0MWFMM ; 
        20 PW0MWFDD PW0MWFDD ; 
    10 PW0MWTDT PW0MWTDT ; 
      15 PW0MWTCC PW0MWTCC ; 
      15 * char(6) ; 
        20 PW0MWTYY PW0MWTYY ; 
        20 PW0MWTMM PW0MWTMM ; 
        20 PW0MWTDD PW0MWTDD ; 
    10 * char(34) [10] ; 
      15 PW0MWSEL PW0MWSEL ; 
      15 PW0MWDDT PW0MWDDT ; 
        20 PW0MWDYY PW0MWDYY ; 
        20 PW0MWDMM PW0MWDMM ; 
        20 PW0MWDDD PW0MWDDD ; 
      15 TF1CARCD TF1CARCD ; 
      15 XHDCD XHDCD ; 
      15 XUM-UOM-CD XUM-UOM-CD ; 
      15 XGPCD XGPCD ; 
      15 PW0MWWFC PW0MWWFC ; 
      15 PW0MWWRP PW0MWWRP ; 
      15 PW0MWBOR PW0MWBOR ; 
      15 PW0MWBQT PW0MWBQT ; 
end // end PW0MW01

//*** RECORD=PW0MW20 ****
// ------------------------------------------------------------
// Process Selected by Order
// This record contains order information from DPICK.VSELOR01
// ------------------------------------------------------------
// ***********************
Record PW0MW20 type basicRecord
  5 PW0MW-SEL-ORD-TBL PW0MW-SEL-ORD-TBL ; 
    10 PW0MW-SEL-ORD-REC char(23) [200] ; // Record for select by order
      15 PW0MWKEY PW0MWKEY ; 
        20 PW0MWDAT PW0MWDAT ; 
          25 PW0MWDCC PW0MWDCC ; 
          25 PW0MWDYY PW0MWDYY ; 
          25 PW0MWDMM PW0MWDMM ; 
          25 PW0MWDDD PW0MWDDD ; 
        20 TF1CARCD TF1CARCD ; 
        20 XHDKEY XHDKEY ; 
          25 XHDCD XHDCD ; 
          25 XGPCD XGPCD ; 
        20 XUM-UOM-CD XUM-UOM-CD ; 
      15 PW0MWBOR PW0MWBOR ; 
  5 PW0MW-SAVE-ORD-TBL PW0MW-SAVE-ORD-TBL ; 
    10 PW0MW-SAVE-ORD-REC char(23) [200] ; // Saved select by order record
end // end PW0MW20

//*** RECORD=PW0MW30 ****
// ------------------------------------------------------------
// Process Selected by Quantity
// This record contains qty information from DPICK.VSELQT02
// ------------------------------------------------------------
// ***********************
Record PW0MW30 type basicRecord
  5 PW0MW-SEL-QTY-TBL PW0MW-SEL-QTY-TBL ; 
    10 PW0MW-SEL-QTY-REC char(23) [200] ; // Select by qty rec
      15 PW0MWKEY PW0MWKEY ; 
        20 PW0MWDAT PW0MWDAT ; 
          25 PW0MWDCC PW0MWDCC ; 
          25 PW0MWDYY PW0MWDYY ; 
          25 PW0MWDMM PW0MWDMM ; 
          25 PW0MWDDD PW0MWDDD ; 
        20 TF1CARCD TF1CARCD ; 
        20 XHDCD XHDCD ; 
        20 XGPCD XGPCD ; 
        20 XUM-UOM-CD XUM-UOM-CD ; 
      15 PW0MWBQT PW0MWBQT ; 
  5 PW0MW-SAVE-QTY-TBL PW0MW-SAVE-QTY-TBL ; 
    10 PW0MW-SAVE-QTY-REC char(23) [200] ; // Saved select by qty rec
end // end PW0MW30

//*** RECORD=PW0MW40 ****
// ------------------------------------------------------------
// Process Orders in Picking Pool
// This record contains order information from DPICK.VPHDIT01
// ------------------------------------------------------------
// ***********************
Record PW0MW40 type basicRecord
  5 PW0MW-NON-SEL-TBL PW0MW-NON-SEL-TBL ; 
    10 PW0MW-NON-SEL-REC char(27) [600] ; // Non-select qty rec
      15 PW0MWKEY PW0MWKEY ; 
        20 PW0MWDAT PW0MWDAT ; 
          25 PW0MWDCC PW0MWDCC ; 
          25 PW0MWDYY PW0MWDYY ; 
          25 PW0MWDMM PW0MWDMM ; 
          25 PW0MWDDD PW0MWDDD ; 
        20 TF1CARCD TF1CARCD ; 
        20 XHDKEY XHDKEY ; 
          25 XHDCD XHDCD ; 
          25 XGPCD XGPCD ; 
        20 XUM-UOM-CD XUM-UOM-CD ; 
      15 PW0MWWFC PW0MWWFC ; 
      15 PW0MWWRP PW0MWWRP ; 
  5 PW0MW-SAVE-NSEL-TBL PW0MW-SAVE-NSEL-TBL ; 
    10 PW0MW-SAVE-NSEL-REC char(27) [600] ; // Saved non-select qty rec
end // end PW0MW40

//*** RECORD=PW0MW50 ****
// ------------------------------------------------------------
// Merge Selected by Order (PW0MW20) and Selected by Quantity
// (PW0MW30)
// ------------------------------------------------------------
// ***********************
Record PW0MW50 type basicRecord
  5 PW0MWTBL PW0MWTBL ; 
    10 * char(35) [600] ; 
      15 PW0MWKEY PW0MWKEY ; 
        20 PW0MWDAT PW0MWDAT ; 
          25 PW0MWDCC PW0MWDCC ; 
          25 PW0MWDYY PW0MWDYY ; 
          25 PW0MWDMM PW0MWDMM ; 
          25 PW0MWDDD PW0MWDDD ; 
        20 TF1CARCD TF1CARCD ; 
        20 XHDCD XHDCD ; 
        20 XGPCD XGPCD ; 
        20 XUM-UOM-CD XUM-UOM-CD ; 
      15 PW0MWWFC PW0MWWFC ; 
      15 PW0MWWRP PW0MWWRP ; 
      15 PW0MWBOR PW0MWBOR ; 
      15 PW0MWBQT PW0MWBQT ; 
end // end PW0MW50

//*** RECORD=PW0MW60 ****
// ------------------------------------------------------------
// Merge Selected (PW0MW50) and Non-Selected Orders (PW0MW40)
// ------------------------------------------------------------
// ***********************
Record PW0MW60 type basicRecord
  5 * char(24000) ; 
    10 * char(40) [600] ; 
      15 PW0MWSEL PW0MWSEL ; 
      15 PW0MWKEY PW0MWKEY ; 
        20 PW0MWDAT PW0MWDAT ; 
          25 PW0MWDCC PW0MWDCC ; 
          25 PW0MWDYY PW0MWDYY ; 
          25 PW0MWDMM PW0MWDMM ; 
          25 PW0MWDDD PW0MWDDD ; 
        20 TF1CARCD TF1CARCD ; 
        20 XHDKEY XHDKEY ; 
          25 XHDCD XHDCD ; 
          25 XGPCD XGPCD ; 
        20 XUM-UOM-CD XUM-UOM-CD ; 
      15 PW0MWWFC PW0MWWFC ; 
      15 PW0MWWRP PW0MWWRP ; 
      15 PW0MWBOR PW0MWBOR ; 
      15 PW0MWBQT PW0MWBQT ; 
      15 PW0MWEQT PW0MWEQT ; 
end // end PW0MW60

//*** RECORD=PW0MW70 ****
// ------------------------------------------------------------
// This record is used to format Extra Special Handling qty
// ------------------------------------------------------------
// ***********************
Record PW0MW70 type basicRecord
  5 PW0MW-EXTRA-TBL PW0MW-EXTRA-TBL ; 
    10 * char(9) [10] ; // Extra spcl handling qty rec
      15 XHDCD XHDCD ; 
      15 XGPCD XGPCD ; 
      15 PW0MW-QTY-RP PW0MW-QTY-RP ; 
end // end PW0MW70

//*** RECORD=PWEREC ****
// ************* PICKING HEADER/ITEM RECORD *******************
// 
// CSP RECORD:                PWEREC
// 
// DB2 TABLE:                 DPICK.VPHDIT02
// 
// COPYLIB MEMBER:            DPHDIT02
// 
// DB2 TABLE KEY:             XWHCD
// 
// DATE CREATED:              01/30/96
// 
// MAINTENANCE LOG:
// 
//   DATE       NAME     COMMENTS
// --------   --------   --------------------------------------
// 01/30/96   PANDER     New CSP Record
// ************************************************************
// **********************
Record PWEREC type basicRecord
  5 PWEGROUP PWEGROUP ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 PK1PRTN PK1PRTN ; 
    10 PK1CUOID PK1CUOID ; 
    10 PK1NORID PK1NORID ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 XHD-HNDL-CD XHD-HNDL-CD ; 
    10 TF-CARR-CD TF-CARR-CD ; 
    10 XUM-UOM-CD XUM-UOM-CD ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 XDV-DIV-CD XDV-DIV-CD ; 
    10 XBC-BRAND-CD XBC-BRAND-CD ; 
    10 PK-ALOC-FUL-CS-QTY PK-ALOC-FUL-CS-QTY ; 
    10 PK-ALOC-REPK-QTY PK-ALOC-REPK-QTY ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PWEREC

//*** RECORD=PWVREC ****
// **************** PICKING SELECTED QTY TABLE ****************
// 
// DB2 TABLE VIEW:       DPICK.VSELQT02
// 
// COPYLIB MEMBER:       DSELQT02
// 
// I/O MODULE:           VSELQT02
// 
// KEY TO DB2 TABLE:     XWHCD
// 
// DATE CREATED:         02/06/96
// 
// MAINTENANCE LOG:
// 
//   DATE      NAME     COMMENT
// --------  --------   ---------------------------------------
// 02/06/96  PANDER     New Record Definition
// ************************************************************
// **********************
Record PWVREC type basicRecord
  5 PWVGROUP PWVGROUP ; 
    10 PWVKEY PWVKEY ; 
      15 XWHCD XWHCD ; 
      15 XGPCD XGPCD ; 
      15 XDVCD XDVCD ; 
      15 XBCCD XBCCD ; 
      15 PKURUNMD PKURUNMD ; 
      15 OP1DSBDT OP1DSBDT ; 
      15 XHDCD XHDCD ; 
      15 TF1CARCD TF1CARCD ; 
      15 XUM-UOM-CD XUM-UOM-CD ; 
    10 PKHPVSMM PKHPVSMM ; 
    10 PKHPVSFC PKHPVSFC ; 
    10 PKHPVSRP PKHPVSRP ; 
    10 PK-SEL-TYP-CD PK-SEL-TYP-CD ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PWVREC

// pk-aloc-ful-cs-qty
DataItem PK-ALOC-FUL-CS-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-aloc-repk-qty
DataItem PK-ALOC-REPK-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Extra spcl handling qty tble
DataItem PW0MW-EXTRA-TBL char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum map index value
DataItem PW0MW-MAP-IDX-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Non-select qty table
DataItem PW0MW-NON-SEL-TBL char(16200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maximum table index value
DataItem PW0MW-NSEL-IDX-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max order table index value
DataItem PW0MW-ORD-IDX-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquire flag
DataItem PW0MW-QTY-ENTERED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max qty table index value
DataItem PW0MW-QTY-IDX-MAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Repack quantity
DataItem PW0MW-QTY-RP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp vpoolh01 index
DataItem PW0MW-SAVE-NSEL-IDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved non-select qty table
DataItem PW0MW-SAVE-NSEL-TBL char(16200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp select by order index
DataItem PW0MW-SAVE-ORD-IDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved select by order table
DataItem PW0MW-SAVE-ORD-TBL char(4600)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp quantities selected index
DataItem PW0MW-SAVE-QTY-IDX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Saved select by qty table
DataItem PW0MW-SAVE-QTY-TBL char(4600)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select by order table
DataItem PW0MW-SEL-ORD-TBL char(4600)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select by qty table
DataItem PW0MW-SEL-QTY-TBL char(4600)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// by order amount
DataItem PW0MWBOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// by quantity amt
DataItem PW0MWBQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Carrier check flag
DataItem PW0MWCCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date
DataItem PW0MWCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Compare key
DataItem PW0MWCKY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DNSB date
DataItem PW0MWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Do Not Ship Before Century
DataItem PW0MWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date check flag
DataItem PW0MWDCK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DNSB day
DataItem PW0MWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB date
DataItem PW0MWDDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB month
DataItem PW0MWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB year
DataItem PW0MWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entered quantity
DataItem PW0MWEQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from century
DataItem PW0MWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from day
DataItem PW0MWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from date-ccyymmdd
DataItem PW0MWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Loop done flag
DataItem PW0MWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map from month
DataItem PW0MWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map from date yymmdd
DataItem PW0MWFRD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Refresh w60 tbl
DataItem PW0MWFSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map from year
DataItem PW0MWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H century
DataItem PW0MWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H date
DataItem PW0MWHDA num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H day
DataItem PW0MWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum year/mo/day
DataItem PW0MWHMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H month
DataItem PW0MWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H year
DataItem PW0MWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Begin index for page
DataItem PW0MWIBX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End index for page
DataItem PW0MWIEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Table entry max index
DataItem PW0MWIMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquire flag
DataItem PW0MWIQF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem PW0MWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key changed flag
DataItem PW0MWKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0MWKEY char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page item limit
DataItem PW0MWLMT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H century
DataItem PW0MWMCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H day
DataItem PW0MWMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H date
DataItem PW0MWMDT num(8)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H month
DataItem PW0MWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// More unreported data flag
DataItem PW0MWMRE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H year
DataItem PW0MWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Order tbl done flag
DataItem PW0MWODN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select by order index
DataItem PW0MWORI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parm page count
DataItem PW0MWPCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pool tbl done flag
DataItem PW0MWPDN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page index
DataItem PW0MWPGI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Vpoolh01 index
DataItem PW0MWPLI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Quant tbl done flag
DataItem PW0MWQDN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quantities selected index
DataItem PW0MWQTI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Quantity request flag
DataItem PW0MWQTR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select field
DataItem PW0MWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PW0MWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0MWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0MWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0MWTBL char(21000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to century
DataItem PW0MWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to day
DataItem PW0MWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to date-ccyymmdd
DataItem PW0MWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map title
DataItem PW0MWTIT char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to month
DataItem PW0MWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to year
DataItem PW0MWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// non spec hndl repack qty
DataItem PW0MWWFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special handling repack
DataItem PW0MWWRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum year/mo/day
DataItem PW0MWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working Storage Group Level
DataItem PWEGROUP char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record Group Level
DataItem PWVGROUP char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pwvrec key
DataItem PWVKEY char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

