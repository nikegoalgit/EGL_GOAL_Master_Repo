package pw0p;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0P ****
// This program allows users to select P & H non-Special handl-
// ing quantities.  The DNSB date range, must be entered before
// the detail line data can be formatted.  Once the date range
// is entered, and verified, the map will display quantities
// sorted by Do Not Ship Before dates (DNSB)/ carrier code.  If
// part of the date range contains non pack and hold dates, the
// quantities for those dates will be grouped into DNSB date of
// zeroes displayed as (spaces), will be sorted by carrier code
// and cannot be updated.  There will be a maximun of 10 pages
// displayed.
// 
// If the user selects quantities by pack & hold DNSB dates/
// carrier code they won't be selected by specific order
// numbers.  The user can select quantities by order numbers.
// The user can sleect quantites by order by placing a 'i' next
// to a specific DNSB date/carrier code, this will take the
// user to a different program (pw0q) where he/she can select
// specific orders for picking.
// 
// The user can also transfer out of this application by
// using one of the PF keys displayed at the bottom of the map,
// or by entering fast-path information (also at the bottom of
// the map).
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          02/08/91  jmoore  New application.
//          04/18/91  jcarey  Changed headings to take out the
//                            word 'prev' (previous).
//          10/08/91  jcampb  Table changes
//          10/07/91  shende  1. Allow access from whse '07'.
//                            2. Display division code,which is
//                               modifiable, in the header.
//                            3. Do not display B-Grade and
//                               Closeouts quantities.
//                            4. Allow fast path from PW0X,
//                               PW06, and PW0J.
//          12/09/91  shende  Add division code to 'S6' select
//                            on dpick.vpoolh01.
//          03/09/92  shende  Add xbc-brand-cd (xbccd) for
//                            March table changes.
//          03/16/92  SHENDE  Allow whse 02 & 04 access
//          04/20/92  SHENDE  Allow access to PW08 and do not
//                            display in-store promo qty.
//          05/11/92  SHENDE  Move division code to PWMREC.
//  tblchgs 06/22/92  MWALTO  Chg pw0ps08,s17,s19 & s21 to add
//                            xgpcd before calling io5500.
//  Colehan 07/14/92  SHENDE  Display brand code.  Also, allow
//                            (*) for division and brand cd.
//  Colehan 09/14/92  SHENDE  Move '*' instead of blank to
//                            pkhrec for 's2'.
//          09/29/92  SHENDE  Remove PK5REC from record list.
//          10/13/93  kande1  renamed procs for standards by
//                            rcream but not documented
//  pk#349  10/26/93  kande1  allow dnsb data to be zero in
//                            select to process non pack & hold
//                            fix index on inquiry to pw0q
//                            which was over stated by one.
//  pk00    12/06/93  hchapm  added "extra qty" logic
//  pk#0    08/30/95  Ryonke  Added warehouse specific logic
//                            for Canada warehouse (whse=42).
//  Basics  04/15/97  PANDER  Do not include Basics orders -
//                            XOTCD = 'FV'.
// y2kfix   02/09/98  pharwo  zero fill pw0pmfyy, pw0pmtyy and
//                            pw0pmsyy on map001 and map002.
// *********************
Program PW0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0PW00 PW0PW00; // record
  PW0PW01 PW0PW01; // record
  PW0PW02 PW0PW02; // record
  PW0PW03 PW0PW03; // record
  PW0PW05 PW0PW05; // record
  PW0PW06 PW0PW06; // record
  PW0PW07 PW0PW07; // record
  PW0PW08 PW0PW08; // record
  PW0PW09 PW0PW09; // record
  PWFREC PWFREC; // record
  PWHREC PWHREC; // record
  PWIREC PWIREC; // record
  PWKREC PWKREC; // record
  PWMREC PWMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XDVTBL; // table
  use XHDTBL; // table
  use XOTTBL; // table
  use XBCTBL; // table
  use PW0PM.PW0PM001,  // forms
      PW0PM.PW0PM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0PM001 initial; /* M001 input/output*/
    set PW0PM002 initial; /* M002 input/output*/
    set PW0PW00 empty; /* Working storage*/
    set PW0PW01 empty; /* M001 header*/
    set PW0PW02 empty; /* temporary storage*/
    set PW0PW03 empty; /* m001 footer*/
    set PW0PW05 empty; /* sel ord array*/
    set PW0PW06 empty; /* sel qty array*/
    set PW0PW07 empty; /* pool array*/
    set PW0PW08 empty; /* selection array*/
    set PW0PW09 empty; /* selection EXTRA*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Error diagnosis information*/
    set TA9REC empty; /* Error diagnosis information*/
    set TA5REC empty; /* Error diagnosis information*/
    set PWKREC empty; /* picking dnsb date array*/
    set PWIREC empty; /* picking record io mod*/
    set PKBREC empty; /* dpick.vorhld01*/
    set PK4REC empty; /* dpick.vpoolh01*/
    set PK9REC empty; /* dpick.vcuhld01*/
    set PWFREC empty; /* dpick.vcahld01*/
    set PWHREC empty; /* dpick.vselor01*/
    set PWMREC empty; /* dpick.vselqt01*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    PW0PW00.XXXTSLEN = 454; /* temp storage length*/

    PW0PW00.PW0PWDTF = "Y"; /* Request for data flag*/
    PW0PW00.PW0PWMPF = "Y"; /* format map*/
    PW0PW00.PW0PWIQF = "N"; /* inquiry flag*/
    PW0PW00.PW0PWFPH = "Y"; /* format Pack & Hold date- once only*/
    PW0PW00.PW0PWQTF = "N"; /* quantities selected flag*/
    PW0PW00.CACHGFL = "N"; /* change flag*/
    PW0PW00.PW0PWUPF = "N"; /* update flag*/
    PKWREC.PKWFRMAP = COMMAREA.CACURRAP;

     /* ------------------------------------------------------------*/
     /* determine from map*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "PW0W") /* pick planning selection menu*/
      PKWREC.PKWSELSW = "PP"; /* pick planning*/
    end

    if (COMMAREA.CAFROMAP == "PW0V") /* picking selection menu*/
      PKWREC.PKWSELSW = "PK"; /* picking*/
    end

    if (PKWREC.PKWSELSW == " ") /* pk select empty*/
      PKWREC.PKWSELSW = "PK"; /* picking*/
    end

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      PW0PW01.PKURUNMD = "P"; /* run mode*/
    else /* picking*/
      PW0PW01.PKURUNMD = " "; /* run mode*/
    end

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/


    if (PKWREC.XWHCD == "51" /* memphis warehouse*/
     || PKWREC.XWHCD == "07" /* wilsonville warehouse*/
     || PKWREC.XWHCD == "04" /* memphis footwear*/
     || PKWREC.XWHCD == "02" /* greenland warehouse*/
     || PKWREC.XWHCD == "42") /* Canada warehouse*/

      PW0PW01.XWHCD = PKWREC.XWHCD; /* warehouse code*/
      PW0PM001.XWHCD = PKWREC.XWHCD;
      PW0PM002.XWHCD = PKWREC.XWHCD;
      PW0PW01.XWHABRV = PKWREC.XWHABRV; /* warehouse description*/
      PW0PM001.XWHABRV = PKWREC.XWHABRV;
      PW0PM002.XWHABRV = PKWREC.XWHABRV;
    end

     /* ------------------------------------------------------------*/
     /* Get DNSB to and from date range from pkwrec*/
     /* ------------------------------------------------------------*/

    PW0PW01.PW0PWFDT = PKWREC.PKWFRMDT[1]; /* from date*/
    PW0PW01.PW0PWTDT = PKWREC.PKWTODT[1]; /* to date*/

    if (PW0PW01.PW0PWFDT == 0 /* from date*/
     && PW0PW01.PW0PWTDT == 0) /* to date*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        set PW0PM002.PW0PMFMM cursor; /* DNSB from mm*/
      else
        set PW0PM001.PW0PMFMM cursor; /* DNSB from mm*/
      end

    else

      /* ---- format "to" century -------*/
      if (PW0PW01.PW0PWTDT != 0)
        if (PW0PW01.PW0PWTYY > 50
         && PW0PW01.PW0PWTYY <= 99)

          PW0PW01.PW0PWTCC = 19;
        else
          PW0PW01.PW0PWTCC = 20;
        end
      end

      /* ---- format "from" century -----*/
      if (PW0PW01.PW0PWFDT != 0)
        if (PW0PW01.PW0PWFYY > 50
         && PW0PW01.PW0PWFYY <= 99)

          PW0PW01.PW0PWFCC = 19;
        else
          PW0PW01.PW0PWFCC = 20;
        end
      end

      /* ---------------------------------------------------------*/
      /* move DNSB to and from date range to the map*/
      /* ---------------------------------------------------------*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/

        PW0PM002.PW0PMFMM = PW0PW01.PW0PWFMM; /* from month*/
        PW0PM002.PW0PMFDD = PW0PW01.PW0PWFDD; /* from month*/
        PW0PM002.PW0PMFYY = PW0PW01.PW0PWFYY; /* from month*/
        PW0PW00.PW0PWFRD = PW0PW01.PW0PWFDT; /* from date*/

        PW0PM002.PW0PMTMM = PW0PW01.PW0PWTMM; /* to month*/
        PW0PM002.PW0PMTDD = PW0PW01.PW0PWTDD; /* to month*/
        PW0PM002.PW0PMTYY = PW0PW01.PW0PWTYY; /* to month*/
        PW0PW00.PW0PWTOD = PW0PW01.PW0PWTDT; /* to date*/

      else
        PW0PM001.PW0PMFMM = PW0PW01.PW0PWFMM; /* from month*/
        PW0PM001.PW0PMFDD = PW0PW01.PW0PWFDD; /* from month*/
        PW0PM001.PW0PMFYY = PW0PW01.PW0PWFYY; /* from month*/
        PW0PW00.PW0PWFRD = PW0PW01.PW0PWFDT; /* from date*/

        PW0PM001.PW0PMTMM = PW0PW01.PW0PWTMM; /* to month*/
        PW0PM001.PW0PMTDD = PW0PW01.PW0PWTDD; /* to month*/
        PW0PM001.PW0PMTYY = PW0PW01.PW0PWTYY; /* to month*/
        PW0PW00.PW0PWTOD = PW0PW01.PW0PWTDT; /* to date*/
      end

      PW0PW00.PW0PWDTF = "Y"; /* request for data*/

    end


     /* ------------------------------------------------------------*/
     /* Flow to check security*/
     /* ------------------------------------------------------------*/

    goto PW0P000; /* allow certain appl to enter*/

    PW0P000: PW0P000();
     /* --------------------------------------------------------*/
          /* CONVERSE TO MAIN PROCESS*/
     /* --------------------------------------------------------*/
    goto PW0P001; /* converse to main process*/
    PW0P001: PW0P001();
    goto PW0P001;
  end // end main
end // end PW0P

// Format and converse the map
Function PW0P-20001()
   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.TA5TSQIX > 0)
    set PW0PM001.PW0PMPAG skip; /* current page*/
    PW0PM001.XXXTSPAG = PW0PW00.XXXTSPAG;
    set PW0PM001.PW0PMOF skip; /* current page*/
    PW0PM001.XXXTSQIX = PW0PW00.TA5TSQIX; /* max pages*/
  end

  PW0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0PM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0PM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* Error message*/
    if (PW0PW00.PW0PWWAR != 0 /* Warning Message*/
     || COMMAREA.CAMSG != " ") /* Message test*/
      if (PW0PW00.PW0PWWAR != 0) /* Warning Message*/
        if (PW0PW00.XXXTSPAG == 1) /* first page*/
          if (PW0PW00.PW0PWWAR == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0PW00.PW0PWWAR);
          end /* warning message number*/
          PW0PM001.XXXMODID = TA1REC.TA1PGMNO; /* Module id*/
          set PW0PM001 alarm; /* Indicate sound alarm*/
        end
        PW0PW00.PW0PWWAR = 0; /* warning message number*/
      else
        PW0PM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message test*/
        PW0PM001.XXXMODID = TA1REC.TA1PGMNO; /* Module id*/
        set PW0PM001 alarm; /* Indicate sound alarm*/
      end
    end
  else
    PW0PM001.XXXMODID = TA1REC.TA1PGMNO; /* Module id*/
    set PW0PM001 alarm; /* Indicate sound alarm*/
  end

  PW0PM001.PW0PMPAG = "PAGE";
  PW0PM001.PW0PMOF = "OF";

  converse PW0PM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNO = " "; /* Module identification*/
  converseLib.validationFailed(0); /* error number*/
  COMMAREA.CAMSG = " "; /* Message test*/

  COMMAREA.CATOAP = PW0PM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0PM001.CAITEM; /* Application data*/


end // end PW0P-20001

// Format and converse the map
Function PW0P-20002()
   /* ------------------------------------------------------------*/
   /* Format page, date, and FATH PATH information*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.TA5TSQIX > 0)
    set PW0PM002.PW0PMPAG skip; /* current page*/
    PW0PM002.XXXTSPAG = PW0PW00.XXXTSPAG;
    set PW0PM002.PW0PMOF skip; /* current page*/
    PW0PM002.XXXTSQIX = PW0PW00.TA5TSQIX;
  end


  PW0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0PM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0PM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* Error message*/
    if (PW0PW00.PW0PWWAR != 0 /* Warning Message*/
     || COMMAREA.CAMSG != " ") /* Message test*/
      if (PW0PW00.PW0PWWAR != 0) /* Warning Message*/
        if (PW0PW00.XXXTSPAG == 1) /* first page*/
          if (PW0PW00.PW0PWWAR == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0PW00.PW0PWWAR);
          end /* warning message number*/
          PW0PM002.XXXMODID = TA1REC.TA1PGMNO; /* Module id*/
          set PW0PM002 alarm; /* Indicate sound alarm*/
        end
        PW0PW00.PW0PWWAR = 0; /* warning message number*/
      else
        PW0PM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message test*/
        PW0PM002.XXXMODID = TA1REC.TA1PGMNO; /* Module id*/
        set PW0PM002 alarm; /* Indicate sound alarm*/
      end
    end
  else
    PW0PM002.XXXMODID = TA1REC.TA1PGMNO; /* Module id*/
    set PW0PM002 alarm; /* Indicate sound alarm*/
  end

  PW0PM002.PW0PMPAG = "PAGE";
  PW0PM002.PW0PMOF = "OF";

  converse PW0PM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNO = " "; /* Module identification*/
  converseLib.validationFailed(0); /* error number*/
  COMMAREA.CAMSG = " "; /* Message test*/

  COMMAREA.CATOAP = PW0PM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0PM002.CAITEM; /* Application data*/


end // end PW0P-20002

// Format the display data
Function PW0P-21001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-21002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* init map pw0pm001*/
   /* ------------------------------------------------------------*/

  set PW0PM001 initial; /* m001 input/ouput area*/

  PW0PW00.PW0PWMPF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format pw0pm001 using passed data*/
   /* ------------------------------------------------------------*/

  PW0PM001.XWHCD = PW0PW01.XWHCD;
  PW0PM001.XWHABRV = PW0PW01.XWHABRV;
  PW0PM001.XDVCD = PW0PW01.XDVCD;
  PW0PM001.XDVDESC = PW0PW01.XDVDESC;
  PW0PM001.XBCCD = PW0PW01.XBCCD;
  PW0PM001.XBCABRV = PW0PW01.XBCABRV;
  PW0PM001.PW0PMFMM = PW0PW01.PW0PWFMM;
  PW0PM001.PW0PMFDD = PW0PW01.PW0PWFDD;
  PW0PM001.PW0PMFYY = PW0PW01.PW0PWFYY;
  PW0PM001.PW0PMTMM = PW0PW01.PW0PWTMM;
  PW0PM001.PW0PMTDD = PW0PW01.PW0PWTDD;
  PW0PM001.PW0PMTYY = PW0PW01.PW0PWTYY;
  /* MOVE PW0PW09.PW0PW-QTY-ACT TO PW0PM001.PW0P-QTY-ACT;*/
  PW0PM001.PW0P-QTY-FC = PW0PW09.PW0PW-QTY-FC;
  PW0PM001.PW0P-QTY-RP = PW0PW09.PW0PW-QTY-RP;

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if data has been updated, display message - tables updated*/
     /* and redisplay the same page.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWUPF == "Y") /* tables updated*/
    PW0PW00.PW0PWUPF = "N"; /* reset update flag*/
    converseLib.validationFailed(32); /* update successful*/
    PW0PW00.PW0PWMSG = converseVar.validationMsgNum; /* display message on map*/
    PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* current page*/
  end

   /* ------------------------------------------------------------*/
   /* redisplay the same page.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWPGF == "Y") /* redisplay current page*/
    PW0PW00.PW0PWPGF = "N"; /* reset page flag*/
    PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* current page*/
  end

   /* ------------------------------------------------------------*/
   /* obtain plan summary by lane category from tempory storage*/
   /* ------------------------------------------------------------*/

  PW0PW00.PW0PWPIX = 1;

  PW0PS03(); /* read temporary storage*/

  while (PW0PW00.PW0PWPIX <= PW0PW02.PW0PW2MX) /* process temp*/

    PW0PM001.PW0PMACT[PW0PWPIX] = PW0PW02.PW0PWACT[PW0PWPIX];
    set PW0PM001.PW0PMACT[PW0PWPIX] normal;

    PW0PW02.PW0PWDDT[PW0PWPIX] = PW0PW02.OP1DSBDT[PW0PWPIX];
    PW0PM001.PW0PMSMM[PW0PWPIX] = PW0PW02.PW0PWSMM[PW0PWPIX];
    PW0PM001.PW0PMSDD[PW0PWPIX] = PW0PW02.PW0PWSDD[PW0PWPIX];
    PW0PM001.PW0PMSYY[PW0PWPIX] = PW0PW02.PW0PWSYY[PW0PWPIX];
    PW0PM001.TF1CARCD[PW0PWPIX] = PW0PW02.TF1CARCD[PW0PWPIX];
    PW0PM001.PW0PMSHQ[PW0PWPIX] = PW0PW02.PW0PWSHQ[PW0PWPIX];
    PW0PM001.PW0PMRGF[PW0PWPIX] = PW0PW02.PW0PWPFC[PW0PWPIX];
    PW0PM001.PW0PMRGR[PW0PWPIX] = PW0PW02.PW0PWPRP[PW0PWPIX];
    PW0PM001.PW0PMOQF[PW0PWPIX] = PW0PW02.PW0PWOQF[PW0PWPIX];
    PW0PM001.PW0PMOQR[PW0PWPIX] = PW0PW02.PW0PWOQR[PW0PWPIX];
    PW0PM001.PW0PMRQF[PW0PWPIX] = PW0PW02.PW0PWRQF[PW0PWPIX];
    set PW0PM001.PW0PMRQF[PW0PWPIX] normal;
    PW0PM001.PW0PMRQR[PW0PWPIX] = PW0PW02.PW0PWRQR[PW0PWPIX];
    PW0PM001.PW0PMRQR[PW0PWPIX] = PW0PW02.PW0PWRQR[PW0PWPIX];
    set PW0PM001.PW0PMRQR[PW0PWPIX] normal;


    PW0PW00.PW0PWPIX = PW0PW00.PW0PWPIX + 1; /* increment load*/

  end

   /* ------------------------------------------------------------*/
   /* error found when updating, send message and hilight action.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWUPE == "Y") /* update error found*/
    PW0PW00.PW0PWUPE = "N"; /* reset update error flag*/
    set PW0PM001.PW0PMACT[PW0PWHIX] cursor, bold; /* hilite action*/
  end

  PW0PM001.PW0PMSHT = PW0PW03.PW0PWSHT; /* special handling total*/

   /* convert minutes to hhh:mm*/

  PW0PW00.PW0PWMIN = PW0PW03.PW0PWTHW; /* minutes*/
  PW0PW00.PW0PWHR = PW0PW00.PW0PWMIN / 60; /* hours*/
  PW0PW00.PW0PWMN = PW0PW00.PW0PWMIN % 60; /* remainder minutes*/
  PW0PW00.PW0PWHH = PW0PW00.PW0PWHR;

  if (PW0PW00.PW0PWH1 == "0") /* blank fill*/
    PW0PW00.PW0PWH1 = " ";
    if (PW0PW00.PW0PWH2 == "0") /* blank fill*/
      PW0PW00.PW0PWH2 = " ";
      if (PW0PW00.PW0PWH3 == "0") /* blank fill*/
        PW0PW00.PW0PWH3 = " ";
      end
    end
  end

  PW0PW00.PW0PWCOL = ":";
  PW0PW00.PW0PWMM = PW0PW00.PW0PWMN;
  PW0PM001.PW0PMTHW = PW0PW00.PW0PWSPH; /* total hrs of work*/

  PW0PM001.PW0PMTOF = PW0PW03.PW0PWTOF; /* total selord full case*/
  PW0PM001.PW0PMTOR = PW0PW03.PW0PWTOR; /* total selord repack*/
  PW0PM001.PW0PMTQF = PW0PW03.PW0PWTQF; /* total selqty full case*/
  PW0PM001.PW0PMTQR = PW0PW03.PW0PWTQR; /* total selqty repack*/

end // end PW0P-21001

// Format the display data
Function PW0P-21002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-21001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* init map pw0pm002*/
   /* ------------------------------------------------------------*/

  set PW0PM002 initial; /* m002 input/ouput area*/

  PW0PW00.PW0PWMPF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format pw0pm002 using passed data*/
   /* ------------------------------------------------------------*/

  PW0PM002.XWHCD = PW0PW01.XWHCD;
  PW0PM002.XWHABRV = PW0PW01.XWHABRV;
  PW0PM002.XDVCD = PW0PW01.XDVCD;
  PW0PM002.XDVDESC = PW0PW01.XDVDESC;
  PW0PM002.XBCCD = PW0PW01.XBCCD;
  PW0PM002.XBCABRV = PW0PW01.XBCABRV;
  PW0PM002.PW0PMFMM = PW0PW01.PW0PWFMM;
  PW0PM002.PW0PMFDD = PW0PW01.PW0PWFDD;
  PW0PM002.PW0PMFYY = PW0PW01.PW0PWFYY;
  PW0PM002.PW0PMTMM = PW0PW01.PW0PWTMM;
  PW0PM002.PW0PMTDD = PW0PW01.PW0PWTDD;
  PW0PM002.PW0PMTYY = PW0PW01.PW0PWTYY;
   /* MOVE PW0PW09.PW0PW-QTY-ACT TO PW0PM002.PW0P-QTY-ACT;*/
  PW0PM002.PW0P-QTY-FC = PW0PW09.PW0PW-QTY-FC;
  PW0PM002.PW0P-QTY-RP = PW0PW09.PW0PW-QTY-RP;

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if data has been updated, display message - tables updated*/
     /* and redisplay the same page.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWUPF == "Y") /* tables updated*/
    PW0PW00.PW0PWUPF = "N"; /* reset update flag*/
    converseLib.validationFailed(32); /* update successful*/
    PW0PW00.PW0PWMSG = converseVar.validationMsgNum; /* display message on map*/
    PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* current page*/
  end

   /* ------------------------------------------------------------*/
   /* redisplay the same page.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWPGF == "Y") /* redisplay current page*/
    PW0PW00.PW0PWPGF = "N"; /* reset page flag*/
    PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* current page*/
  end

   /* ------------------------------------------------------------*/
   /* obtain plan summary by lane category from tempory storage*/
   /* ------------------------------------------------------------*/

  PW0PW00.PW0PWPIX = 1;

  PW0PS03(); /* read temporary storage*/

  while (PW0PW00.PW0PWPIX <= PW0PW02.PW0PW2MX) /* process temp*/

    PW0PM002.PW0PMACT[PW0PWPIX] = PW0PW02.PW0PWACT[PW0PWPIX];
    set PW0PM002.PW0PMACT[PW0PWPIX] normal;

    PW0PW02.PW0PWDDT[PW0PWPIX] = PW0PW02.OP1DSBDT[PW0PWPIX];
    PW0PM002.PW0PMSMM[PW0PWPIX] = PW0PW02.PW0PWSMM[PW0PWPIX];
    PW0PM002.PW0PMSDD[PW0PWPIX] = PW0PW02.PW0PWSDD[PW0PWPIX];
    PW0PM002.PW0PMSYY[PW0PWPIX] = PW0PW02.PW0PWSYY[PW0PWPIX];
    PW0PM002.TF1CARCD[PW0PWPIX] = PW0PW02.TF1CARCD[PW0PWPIX];
    PW0PM002.PW0PMSHQ[PW0PWPIX] = PW0PW02.PW0PWSHQ[PW0PWPIX];
    PW0PM002.PW0PMRGF[PW0PWPIX] = PW0PW02.PW0PWPFC[PW0PWPIX];
    PW0PM002.PW0PMRGR[PW0PWPIX] = PW0PW02.PW0PWPRP[PW0PWPIX];
    PW0PM002.PW0PMOQF[PW0PWPIX] = PW0PW02.PW0PWOQF[PW0PWPIX];
    PW0PM002.PW0PMOQR[PW0PWPIX] = PW0PW02.PW0PWOQR[PW0PWPIX];
    PW0PM002.PW0PMRQF[PW0PWPIX] = PW0PW02.PW0PWRQF[PW0PWPIX];
    set PW0PM002.PW0PMRQF[PW0PWPIX] normal;
    PW0PM002.PW0PMRQR[PW0PWPIX] = PW0PW02.PW0PWRQR[PW0PWPIX];
    PW0PM002.PW0PMRQR[PW0PWPIX] = PW0PW02.PW0PWRQR[PW0PWPIX];
    set PW0PM002.PW0PMRQR[PW0PWPIX] normal;


    PW0PW00.PW0PWPIX = PW0PW00.PW0PWPIX + 1; /* increment load*/

  end

   /* ------------------------------------------------------------*/
   /* error found when updating, send message and hilight action.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWUPE == "Y") /* update error found*/
    PW0PW00.PW0PWUPE = "N"; /* reset update error flag*/
    set PW0PM002.PW0PMACT[PW0PWHIX] cursor, bold; /* hilite action*/
  end

  PW0PM002.PW0PMSHT = PW0PW03.PW0PWSHT; /* special handling total*/

   /* convert minutes to hhh:mm*/

  PW0PW00.PW0PWMIN = PW0PW03.PW0PWTHW; /* minutes*/
  PW0PW00.PW0PWHR = PW0PW00.PW0PWMIN / 60; /* hours*/
  PW0PW00.PW0PWMN = PW0PW00.PW0PWMIN % 60; /* remainder minutes*/
  PW0PW00.PW0PWHH = PW0PW00.PW0PWHR;

  if (PW0PW00.PW0PWH1 == "0") /* blank fill*/
    PW0PW00.PW0PWH1 = " ";
    if (PW0PW00.PW0PWH2 == "0") /* blank fill*/
      PW0PW00.PW0PWH2 = " ";
      if (PW0PW00.PW0PWH3 == "0") /* blank fill*/
        PW0PW00.PW0PWH3 = " ";
      end
    end
  end

  PW0PW00.PW0PWCOL = ":";
  PW0PW00.PW0PWMM = PW0PW00.PW0PWMN;
  PW0PM002.PW0PMTHW = PW0PW00.PW0PWSPH; /* total hrs of work*/

  PW0PM002.PW0PMTOF = PW0PW03.PW0PWTOF; /* total selord full case*/
  PW0PM002.PW0PMTOR = PW0PW03.PW0PWTOR; /* total selord repack*/
  PW0PM002.PW0PMTQF = PW0PW03.PW0PWTQF; /* total selqty full case*/
  PW0PM002.PW0PMTQR = PW0PW03.PW0PWTQR; /* total selqty repack*/

end // end PW0P-21002

// Verify the entered data
Function PW0P-50001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-50002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    TA1REC.TA1PGMNO = "500"; /* Module identification*/
    set PW0PM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* check key fields for modification.*/
   /* ------------------------------------------------------------*/

  PW0P-51001(); /* validate DNSB range*/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    if (PW0PW00.PW0PWCHF == "Y") /* key field change*/
      return; /* return to main processing*/
    end
  else /* errors*/
    exit stack; /* return to main processing*/
  end


   /* ------------------------------------------------------------*/
   /* verify division code.*/
   /* ------------------------------------------------------------*/

  if (PW0PM001.XDVCD != PW0PW01.XDVCD) /* map value NE current value*/
    PW0PW00.PW0PWCHF = "Y"; /* key has changed*/

    if (PW0PM001.XDVCD == " ") /* division code is blank*/
      converseLib.validationFailed(393);
      set PW0PM001.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XDVCD[1] = PW0PM001.XDVCD;

  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* verify division code*/

    if (converseVar.validationMsgNum == 0) /* no errors*/
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0PW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      PW0PW01.XDVCD = PKWREC.XDVCD[1];
    else
      converseLib.validationFailed(393);
      set PW0PM001.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "500"; /* Module identification*/
      exit stack;
    end
  else
    PW0PW01.XDVDESC = "ALL DIVISIONS";
    PW0PW01.XDVCD = PKWREC.XDVCD[1];
  end

   /* ------------------------------------------------------------*/
   /* verify brand code*/
   /* ------------------------------------------------------------*/

  if (PW0PM001.XBCCD != PW0PW01.XBCCD) /* map value NE current value*/
    PW0PW00.PW0PWCHF = "Y"; /* key has changed*/

    if (PW0PM001.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0PM001.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "500";
      exit stack;
    end
  end

  PKWREC.XBCCD[1] = PW0PM001.XBCCD;

  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0PM001.XBCCD cursor, bold;
        TA1REC.TA1PGMNO = "500";
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0PW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0PW01.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      set PW0PM001.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "500";
      exit stack;
    end
  else
    PW0PW01.XBCABRV = " ";
    PW0PW00.PW0PWWAR = 421;
    PW0PW01.XBCCD = PKWREC.XBCCD[1];
  end

  if (PW0PW00.PW0PWCHF == "Y") /* key has changed*/
    return;
  end


  PW0P-51401(); /* validate action*/

  if (converseVar.eventKey is pf7 /* scroll backward*/
   || converseVar.eventKey is pf8) /* scroll forward*/
    PW0P520(); /* validate scroll request*/
  end

  if (converseVar.validationMsgNum != 0) /* errors*/
    exit stack; /* return to main processing*/
  end

  if (converseVar.eventKey is enter) /* enter to update*/
    PW0P530(); /* validate actions requested*/
  end
end // end PW0P-50001

// Verify the entered data
Function PW0P-50002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-50001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    TA1REC.TA1PGMNO = "500"; /* Module identification*/
    set PW0PM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* check key fields for modification.*/
   /* ------------------------------------------------------------*/

  PW0P-51002(); /* validate DNSB range*/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    if (PW0PW00.PW0PWCHF == "Y") /* key field change*/
      return; /* return to main processing*/
    end
  else /* errors*/
    exit stack; /* return to main processing*/
  end


   /* ------------------------------------------------------------*/
   /* verify division code.*/
   /* ------------------------------------------------------------*/

  if (PW0PM002.XDVCD != PW0PW01.XDVCD) /* map value NE current value*/
    PW0PW00.PW0PWCHF = "Y"; /* key has changed*/

    if (PW0PM002.XDVCD == " ") /* division code is blank*/
      converseLib.validationFailed(393);
      set PW0PM002.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XDVCD[1] = PW0PM002.XDVCD;

  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* verify division code*/

    if (converseVar.validationMsgNum == 0) /* no errors*/
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0PW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      PW0PW01.XDVCD = PKWREC.XDVCD[1];
    else
      converseLib.validationFailed(393);
      set PW0PM002.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "500"; /* Module identification*/
      exit stack;
    end
  else
    PW0PW01.XDVDESC = "ALL DIVISIONS";
    PW0PW01.XDVCD = PKWREC.XDVCD[1];
  end

   /* ------------------------------------------------------------*/
   /* verify brand code*/
   /* ------------------------------------------------------------*/

  if (PW0PM002.XBCCD != PW0PW01.XBCCD) /* map value NE current value*/
    PW0PW00.PW0PWCHF = "Y"; /* key has changed*/

    if (PW0PM002.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0PM002.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "500";
      exit stack;
    end
  end

  PKWREC.XBCCD[1] = PW0PM002.XBCCD;

  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0PM002.XBCCD cursor, bold;
        TA1REC.TA1PGMNO = "500";
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0PW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0PW01.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      set PW0PM002.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "500";
      exit stack;
    end
  else
    PW0PW01.XBCABRV = " ";
    PW0PW00.PW0PWWAR = 421;
    PW0PW01.XBCCD = PKWREC.XBCCD[1];
  end

  if (PW0PW00.PW0PWCHF == "Y") /* key has changed*/
    return;
  end


  PW0P-51402(); /* validate action*/

  if (converseVar.eventKey is pf7 /* scroll backward*/
   || converseVar.eventKey is pf8) /* scroll forward*/
    PW0P520(); /* validate scroll request*/
  end

  if (converseVar.validationMsgNum != 0) /* errors*/
    exit stack; /* return to main processing*/
  end

  if (converseVar.eventKey is enter) /* enter to update*/
    PW0P530(); /* validate actions requested*/
  end
end // end PW0P-50002

// Verify key data
Function PW0P-51001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-51002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate dont ship before 'FROM' and 'TO' dates*/
   /* ------------------------------------------------------------*/

  PW0PW00.PW0PWCHF = "N"; /* key fields changed*/
  if (PW0PM001.PW0PMTMM != PW0PW01.PW0PWTMM /* dont ship to month*/
   || PW0PM001.PW0PMTDD != PW0PW01.PW0PWTDD /* dont ship to day*/
   || PW0PM001.PW0PMTYY != PW0PW01.PW0PWTYY /* dont ship to year*/
   || PW0PM001.PW0PMFMM != PW0PW01.PW0PWFMM /* dont ship from month*/
   || PW0PM001.PW0PMFDD != PW0PW01.PW0PWFDD /* dont ship from day*/
   || PW0PM001.PW0PMFYY != PW0PW01.PW0PWFYY) /* dont ship from year*/
    PW0PW00.PW0PWCHF = "Y"; /* key field changed*/
  end

  if (PW0PW00.PW0PWCHF == "Y") /* key field changed*/
    PW0P-51201(); /* validate dates*/
    if (converseVar.validationMsgNum == 0) /* no errors*/
      if (PW0PW00.PW0PWFDT > PW0PW00.PW0PWTDT) /* from dt not > to dt*/
        set PW0PM001.PW0PMFMM cursor, bold; /* hilight set cursor*/
        set PW0PM001.PW0PMFDD bold; /* hilight*/
        set PW0PM001.PW0PMFYY bold; /* hilight*/
        TA1REC.TA1PGMNO = "510";
        converseLib.validationFailed(286); /* from dnsb must be less to dnsb*/
      end
    end
  end

end // end PW0P-51001

// Verify key data
Function PW0P-51002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-51001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate dont ship before 'FROM' and 'TO' dates*/
   /* ------------------------------------------------------------*/

  PW0PW00.PW0PWCHF = "N"; /* key fields changed*/
  if (PW0PM002.PW0PMTMM != PW0PW01.PW0PWTMM /* dont ship to month*/
   || PW0PM002.PW0PMTDD != PW0PW01.PW0PWTDD /* dont ship to day*/
   || PW0PM002.PW0PMTYY != PW0PW01.PW0PWTYY /* dont ship to year*/
   || PW0PM002.PW0PMFMM != PW0PW01.PW0PWFMM /* dont ship from month*/
   || PW0PM002.PW0PMFDD != PW0PW01.PW0PWFDD /* dont ship from day*/
   || PW0PM002.PW0PMFYY != PW0PW01.PW0PWFYY) /* dont ship from year*/
    PW0PW00.PW0PWCHF = "Y"; /* key field changed*/
  end

  if (PW0PW00.PW0PWCHF == "Y") /* key field changed*/
    PW0P-51202(); /* validate dates*/
    if (converseVar.validationMsgNum == 0) /* no errors*/
      if (PW0PW00.PW0PWFDT > PW0PW00.PW0PWTDT) /* from dt not > to dt*/
        set PW0PM002.PW0PMFMM cursor, bold; /* hilight set cursor*/
        set PW0PM002.PW0PMFDD bold; /* hilight*/
        set PW0PM002.PW0PMFYY bold; /* hilight*/
        TA1REC.TA1PGMNO = "510";
        converseLib.validationFailed(286); /* from dnsb must be less to dnsb*/
      end
    end
  end

end // end PW0P-51002

// Validate DNSB Range
Function PW0P-51201()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-51202 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'to'*/
   /* ------------------------------------------------------------*/

  PW0PW00.PW0PWTMM = PW0PM001.PW0PMTMM; /* DNSB to month*/
  PW0PW00.PW0PWTDD = PW0PM001.PW0PMTDD; /* DNSB to day*/
  PW0PW00.PW0PWTYY = PW0PM001.PW0PMTYY; /* DNSB to year*/

  if (PW0PM001.PW0PMTMM == 0 /* DNSB from month*/
   && PW0PM001.PW0PMTDD == 0 /* DNSB from day*/
   && PW0PM001.PW0PMTYY == 0) /* DNSB from year*/
    PW0PW00.PW0PWTCC = 0; /* DNSB from century*/
  else
    set TA2REC empty; /* clear row storage area*/

    if (PW0PM001.PW0PMTYY > 56) /* after 1956*/
      PW0PW00.PW0PWTCC = 19; /* century 19*/
    else
      PW0PW00.PW0PWTCC = 20; /* centruy 20*/
    end

    TA2REC.TA2GRGGN = PW0PW00.PW0PWTDT; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/

    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

      if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
        /* next sentence*/

      else
        TA1REC.TA1PGMNO = "512"; /* Module identification*/
        set PW0PM001.PW0PMTMM cursor, bold; /* Highlight*/
        set PW0PM001.PW0PMTDD bold; /* Highlight*/
        set PW0PM001.PW0PMTYY bold; /* Highlight*/
        converseLib.validationFailed(158); /* invalid date*/

      end

    else

      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "DNSB TO DATE";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      TA1REC.TA1PGMNO = "512"; /* Module identification*/
      converseLib.validationFailed(29); /* System error occurred*/

      return; /* exit to display map*/

    end
  end
   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'from'*/
   /* ------------------------------------------------------------*/

  PW0PW00.PW0PWFMM = PW0PM001.PW0PMFMM;
  PW0PW00.PW0PWFDD = PW0PM001.PW0PMFDD;
  PW0PW00.PW0PWFYY = PW0PM001.PW0PMFYY;

  if (PW0PM001.PW0PMFMM == 0 /* DNSB from month*/
   && PW0PM001.PW0PMFDD == 0 /* DNSB from day*/
   && PW0PM001.PW0PMFYY == 0) /* DNSB from year*/
    PW0PW00.PW0PWFCC = 0; /* DNSB from century*/
  else
    set TA2REC empty; /* clear row storage area*/

    if (PW0PM001.PW0PMFYY > 56) /* after 1956*/
      PW0PW00.PW0PWFCC = 19; /* century 19*/
    else
      PW0PW00.PW0PWFCC = 20; /* centruy 20*/
    end

    TA2REC.TA2GRGGN = PW0PW00.PW0PWFDT; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/


    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/

    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

      if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

        /* next sentence*/
      else
        TA1REC.TA1PGMNO = "512"; /* Module identification*/
        set PW0PM001.PW0PMFMM cursor, bold; /* Highlight*/
        set PW0PM001.PW0PMFDD bold; /* Highlight*/
        set PW0PM001.PW0PMFYY bold; /* Highlight*/
        converseLib.validationFailed(158); /* invalid date*/

      end

    else

      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "DNSB FROM DATE";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      TA1REC.TA1PGMNO = "512"; /* Module identification*/
      converseLib.validationFailed(29); /* System error occurred*/

      return; /* exit to display map*/

    end
  end

end // end PW0P-51201

// Validate DNSB Range
Function PW0P-51202()
   /* ------------------------------------------------------------*/
   /* Note: Apply chaaanges to pw0p-51201 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'to'*/
   /* ------------------------------------------------------------*/

  PW0PW00.PW0PWTMM = PW0PM002.PW0PMTMM; /* DNSB to month*/
  PW0PW00.PW0PWTDD = PW0PM002.PW0PMTDD; /* DNSB to day*/
  PW0PW00.PW0PWTYY = PW0PM002.PW0PMTYY; /* DNSB to year*/

  if (PW0PM002.PW0PMTMM == 0 /* DNSB to   month*/
   && PW0PM002.PW0PMTDD == 0 /* DNSB to   day*/
   && PW0PM002.PW0PMTYY == 0) /* DNSB to   year*/
    PW0PW00.PW0PWTCC = 0; /* DNSB to   century*/
  else
    set TA2REC empty; /* clear row storage area*/

    if (PW0PM002.PW0PMTYY > 56) /* after 1956*/
      PW0PW00.PW0PWTCC = 19; /* century 19*/
    else
      PW0PW00.PW0PWTCC = 20; /* centruy 20*/
    end

    TA2REC.TA2GRGGN = PW0PW00.PW0PWTDT; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/

    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

      if (TA2REC.TA2RTNCD == 0) /* Normal return code*/
        /* next sentence*/

      else
        TA1REC.TA1PGMNO = "512"; /* Module identification*/
        set PW0PM002.PW0PMTMM cursor, bold; /* Highlight*/
        set PW0PM002.PW0PMTDD bold; /* Highlight*/
        set PW0PM002.PW0PMTYY bold; /* Highlight*/
        converseLib.validationFailed(158); /* invalid date*/

      end

    else

      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "DNSB TO DATE";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      TA1REC.TA1PGMNO = "512"; /* Module identification*/
      converseLib.validationFailed(29); /* System error occurred*/

      return; /* exit to display map*/

    end
  end
   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'from'*/
   /* ------------------------------------------------------------*/

  PW0PW00.PW0PWFMM = PW0PM002.PW0PMFMM;
  PW0PW00.PW0PWFDD = PW0PM002.PW0PMFDD;
  PW0PW00.PW0PWFYY = PW0PM002.PW0PMFYY;

  if (PW0PM002.PW0PMFMM == 0 /* DNSB from month*/
   && PW0PM002.PW0PMFDD == 0 /* DNSB from day*/
   && PW0PM002.PW0PMFYY == 0) /* DNSB from year*/
    PW0PW00.PW0PWFCC = 0; /* DNSB from century*/
  else
    set TA2REC empty; /* clear row storage area*/

    if (PW0PM002.PW0PMFYY > 56) /* after 1956*/
      PW0PW00.PW0PWFCC = 19; /* century 19*/
    else
      PW0PW00.PW0PWFCC = 20; /* centruy 20*/
    end

    TA2REC.TA2GRGGN = PW0PW00.PW0PWFDT; /* Gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* date option*/


    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/

    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

      if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

        /* next sentence*/
      else
        TA1REC.TA1PGMNO = "512"; /* Module identification*/
        set PW0PM002.PW0PMFMM cursor, bold; /* Highlight*/
        set PW0PM002.PW0PMFDD bold; /* Highlight*/
        set PW0PM002.PW0PMFYY bold; /* Highlight*/
        converseLib.validationFailed(158); /* invalid date*/

      end

    else

      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "DNSB FROM DATE";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      TA1REC.TA1PGMNO = "512"; /* Module identification*/
      converseLib.validationFailed(29); /* System error occurred*/

      return; /* exit to display map*/

    end
  end

end // end PW0P-51202

// validate SEL and FC & RP Qty
Function PW0P-51401()
   /* --------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-51401 also.*/
   /* --------------------------------------------------------------*/

   /* ******************************************************************/
   /* VALIDATE EXTRA NON-SPECIAL ACTION CODE*/
   /* ******************************************************************/

   /* ---------------------------------------------------------------------*/
   /* make sure action is valid with existing qty*/
   /* ---------------------------------------------------------------------*/
  PW0PS38(); /* sel unq dpick.vselqt01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    if (PW0PM001.PW0P-QTY-ACT == "A")
      TA1REC.TA1PGMNO = "600"; /* module identification*/
      converseLib.validationFailed(263); /* already exists*/
      set PW0PM001.PW0P-QTY-ACT bold;
      exit stack; /* exit to display map*/
    end
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
    if (PW0PM001.PW0P-QTY-ACT == "D")
      TA1REC.TA1PGMNO = "600"; /* module identification*/
      converseLib.validationFailed(201); /* no record found to delete*/
      set PW0PM001.PW0P-QTY-ACT bold;
      exit stack; /* exit to display map*/
    else
      if (PW0PM001.PW0P-QTY-ACT == "C")
        TA1REC.TA1PGMNO = "600"; /* module identification*/
        converseLib.validationFailed(8); /* no record found*/
        set PW0PM001.PW0P-QTY-ACT bold;
        exit stack; /* exit to display map*/

      end
    end
  end
  if (PW0PM001.PW0P-QTY-ACT == "A" /* add*/
   || PW0PM001.PW0P-QTY-ACT == "C" /* add*/
   || PW0PM001.PW0P-QTY-ACT == "D" /* add*/
   || PW0PM001.PW0P-QTY-ACT <= " ") /* no selection*/
      /* next sentence;*/
  else
    set PW0PM001.PW0P-QTY-ACT cursor, bold; /* select picking*/
    TA1REC.TA1PGMNO = "514"; /* module identification*/
    converseLib.validationFailed(35); /* invalid action*/

  end
         /* change must have entered a quantity*/

  if (PW0PM001.PW0P-QTY-ACT == "C") /* change*/
    if (PW0PM001.PW0P-QTY-FC == 0
     && PW0PM001.PW0P-QTY-RP == 0)
      set PW0PM001.PW0P-QTY-RP cursor, bold; /* highlight qty*/
      set PW0PM001.PW0P-QTY-FC bold; /* hilight qty*/
      TA1REC.TA1PGMNO = "514"; /* module identification*/
      converseLib.validationFailed(366); /* invalid action*/
    end
  end

         /* add must have entered a quantity*/

  if (PW0PM001.PW0P-QTY-ACT == "A") /* add*/
    if (PW0PM001.PW0P-QTY-FC == 0
     && PW0PM001.PW0P-QTY-RP == 0)
      set PW0PM001.PW0PMRQF[PW0PW2IX] cursor, bold; /* highlight qty*/
      set PW0PM001.PW0PMRQR[PW0PW2IX] bold; /* hilight qty*/
      TA1REC.TA1PGMNO = "514"; /* module identification*/
      converseLib.validationFailed(366); /* invalid action*/
    end
  end
  PW0PW02.PW0PW2IX = PW0PW02.PW0PW2MX; /* set index to max and work*/
   /* backwards*/

  while (PW0PW02.PW0PW2IX >= 1) /* work bottom to top*/

     /* validate ACT function -*/

    if (PW0PM001.PW0PMACT[PW0PW2IX] == "A" /* add*/
     || PW0PM001.PW0PMACT[PW0PW2IX] == "C" /* change*/
     || PW0PM001.PW0PMACT[PW0PW2IX] == "D" /* delete*/
     || PW0PM001.PW0PMACT[PW0PW2IX] == "I" /* inquiry*/
     || PW0PM001.PW0PMACT[PW0PW2IX] <= " ") /* no selection*/
      /* next sentence;*/
    else
      set PW0PM001.PW0PMACT[PW0PW2IX] cursor, bold; /* select picking*/
      TA1REC.TA1PGMNO = "514"; /* module identification*/
      converseLib.validationFailed(35); /* invalid action*/

    end

    if (PW0PM001.PW0PMACT[PW0PW2IX] == "I") /* inquire*/
      PW0PW00.PW0PWIQF = "Y";
    end


     /* validate REGULAR SELECTION - full case and repack*/

         /* change must have entered a quantity*/

    if (PW0PM001.PW0PMACT[PW0PW2IX] == "C") /* change*/
      if (PW0PM001.PW0PMRQR[PW0PW2IX] == 0
       && PW0PM001.PW0PMRQF[PW0PW2IX] == 0)
        set PW0PM001.PW0PMRQF[PW0PW2IX] cursor, bold; /* highlight qty*/
        set PW0PM001.PW0PMRQR[PW0PW2IX] bold; /* hilight qty*/
        TA1REC.TA1PGMNO = "514"; /* module identification*/
        converseLib.validationFailed(366); /* invalid action*/
      end
    end

         /* add must have entered a quantity*/

    if (PW0PM001.PW0PMACT[PW0PW2IX] == "A") /* add*/
      if (PW0PM001.PW0PMRQR[PW0PW2IX] == 0
       && PW0PM001.PW0PMRQF[PW0PW2IX] == 0)
        if (PW0PM001.PW0PMRGR[PW0PW2IX] == 0
         && PW0PM001.PW0PMRGF[PW0PW2IX] == 0)
          set PW0PM001.PW0PMRQF[PW0PW2IX] cursor, bold; /* highlight qty*/
          set PW0PM001.PW0PMRQR[PW0PW2IX] bold; /* hilight qty*/
          TA1REC.TA1PGMNO = "514"; /* module identification*/
          converseLib.validationFailed(366); /* invalid action*/
        else
          PW0PM001.PW0PMRQR[PW0PW2IX] = PW0PM001.PW0PMRGR[PW0PW2IX];
          PW0PM001.PW0PMRQF[PW0PW2IX] = PW0PM001.PW0PMRGF[PW0PW2IX];
        end
      end
    end

    PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX - 1; /* decrement*/

  end
end // end PW0P-51401

// validate SEL and FC & RP Qty
Function PW0P-51402()
   /* --------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-51401 also.*/
   /* --------------------------------------------------------------*/

   /* ***********************************************************************/
   /* VALIDATE EXTRA NON-SPECIAL ACTION*/
   /* ***********************************************************************/

   /* ---------------------------------------------------------------------*/
   /* make sure action is valid with existing qty*/
   /* ---------------------------------------------------------------------*/
  PW0PS38(); /* sel unq dpick.vselqt01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    if (PW0PM002.PW0P-QTY-ACT == "A")
      TA1REC.TA1PGMNO = "600"; /* module identification*/
      converseLib.validationFailed(263); /* already exists*/
      set PW0PM002.PW0P-QTY-ACT bold;
      exit stack; /* exit to display map*/
    end
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
    if (PW0PM002.PW0P-QTY-ACT == "D")
      TA1REC.TA1PGMNO = "600"; /* module identification*/
      converseLib.validationFailed(201); /* no record found to delete*/
      set PW0PM002.PW0P-QTY-ACT bold;
      exit stack; /* exit to display map*/
    else
      if (PW0PM002.PW0P-QTY-ACT == "C")
        TA1REC.TA1PGMNO = "600"; /* module identification*/
        converseLib.validationFailed(8); /* no record found*/
        set PW0PM002.PW0P-QTY-ACT bold;
        exit stack; /* exit to display map*/

      end
    end
  end
  if (PW0PM002.PW0P-QTY-ACT == "A" /* add*/
   || PW0PM002.PW0P-QTY-ACT == "C" /* change*/
   || PW0PM002.PW0P-QTY-ACT == "D" /* delete*/
   || PW0PM002.PW0P-QTY-ACT <= " ") /* no selection*/
      /* next sentence;*/
  else
    set PW0PM002.PW0P-QTY-ACT cursor, bold; /* select picking*/
    TA1REC.TA1PGMNO = "514"; /* module identification*/
    converseLib.validationFailed(35); /* invalid action*/

  end
         /* change must have entered a quantity*/

  if (PW0PM002.PW0P-QTY-ACT == "C") /* change*/
    if (PW0PM002.PW0P-QTY-FC == 0
     && PW0PM002.PW0P-QTY-RP == 0)
      set PW0PM002.PW0P-QTY-RP cursor, bold; /* highlight qty*/
      set PW0PM002.PW0P-QTY-FC bold; /* hilight qty*/
      TA1REC.TA1PGMNO = "514"; /* module identification*/
      converseLib.validationFailed(366); /* invalid action*/
    end
  end

         /* add must have entered a quantity*/

  if (PW0PM002.PW0P-QTY-ACT == "A") /* add*/
    if (PW0PM002.PW0P-QTY-FC == 0
     && PW0PM002.PW0P-QTY-RP == 0)
      set PW0PM002.PW0P-QTY-RP cursor, bold; /* highlight qty*/
      set PW0PM002.PW0P-QTY-FC bold; /* hilight qty*/
      TA1REC.TA1PGMNO = "514"; /* module identification*/
      converseLib.validationFailed(366); /* invalid action*/

    end
  end
  PW0PW02.PW0PW2IX = PW0PW02.PW0PW2MX; /* set index to max and work*/
   /* backwards*/

  while (PW0PW02.PW0PW2IX >= 1) /* work bottom to top*/

     /* validate ACT function -*/

    if (PW0PM002.PW0PMACT[PW0PW2IX] == "A" /* add*/
     || PW0PM002.PW0PMACT[PW0PW2IX] == "C" /* change*/
     || PW0PM002.PW0PMACT[PW0PW2IX] == "D" /* delete*/
     || PW0PM002.PW0PMACT[PW0PW2IX] == "I" /* inquiry*/
     || PW0PM002.PW0PMACT[PW0PW2IX] <= " ") /* no selection*/
      /* next sentence;*/
    else
      set PW0PM002.PW0PMACT[PW0PW2IX] cursor, bold; /* select picking*/
      TA1REC.TA1PGMNO = "514"; /* module identification*/
      converseLib.validationFailed(35); /* invalid action*/

    end

    if (PW0PM002.PW0PMACT[PW0PW2IX] == "I") /* inquire*/
      PW0PW00.PW0PWIQF = "Y";
    end

     /* validate REGULAR SELECTION - full case and repack*/

         /* change must have entered a quantity*/

    if (PW0PM002.PW0PMACT[PW0PW2IX] == "C") /* change*/
      if (PW0PM002.PW0PMRQR[PW0PW2IX] == 0
       && PW0PM002.PW0PMRQF[PW0PW2IX] == 0)
        set PW0PM002.PW0PMRQF[PW0PW2IX] cursor, bold; /* highlight qty*/
        set PW0PM002.PW0PMRQR[PW0PW2IX] bold; /* hilight qty*/
        TA1REC.TA1PGMNO = "514"; /* module identification*/
        converseLib.validationFailed(366); /* invalid action*/
      end
    end

         /* add must have entered a quantity*/

    if (PW0PM002.PW0PMACT[PW0PW2IX] == "A") /* add*/
      if (PW0PM002.PW0PMRQR[PW0PW2IX] == 0
       && PW0PM002.PW0PMRQF[PW0PW2IX] == 0)
        if (PW0PM002.PW0PMRGR[PW0PW2IX] == 0
         && PW0PM002.PW0PMRGF[PW0PW2IX] == 0)
          set PW0PM002.PW0PMRQF[PW0PW2IX] cursor, bold; /* highlight qty*/
          set PW0PM002.PW0PMRQR[PW0PW2IX] bold; /* hilight qty*/
          TA1REC.TA1PGMNO = "514"; /* module identification*/
          converseLib.validationFailed(366); /* invalid action*/
        else
          PW0PM002.PW0PMRQR[PW0PW2IX] = PW0PM002.PW0PMRGR[PW0PW2IX];
          PW0PM002.PW0PMRQF[PW0PW2IX] = PW0PM002.PW0PMRGF[PW0PW2IX];
        end
      end
    end

    PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX - 1; /* decrement*/

  end

end // end PW0P-51402

// validate action on m001
Function PW0P-53401()
   /* -------------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-53402 also.*/
   /* -------------------------------------------------------------------*/

  PW0PW02.PW0PW2IX = PW0PW02.PW0PW2MX; /* set index to max and work*/
   /* backwards*/

  while (PW0PW02.PW0PW2IX >= 1) /* work bottom to top*/

     /* For add, change or delete set update flag on.*/

    if (PW0PM001.PW0PMACT[PW0PW2IX] == "A" /* add*/
     || PW0PM001.PW0PMACT[PW0PW2IX] == "C" /* change*/
     || PW0PM001.PW0PMACT[PW0PW2IX] == "D") /* delete*/
      PW0PW00.PW0PWQTF = "Y"; /* update quantities*/
    end

    PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX - 1; /* decrement*/

  end
end // end PW0P-53401

// validate action on m001
Function PW0P-53402()
   /* -------------------------------------------------------------------*/
   /* Note: Apply changes to pw0p-53401 also.*/
   /* -------------------------------------------------------------------*/

  PW0PW02.PW0PW2IX = PW0PW02.PW0PW2MX; /* set index to max and work*/
   /* backwards*/

  while (PW0PW02.PW0PW2IX >= 1) /* work bottom to top*/

     /* For add, change or delete set update flag on.*/

    if (PW0PM002.PW0PMACT[PW0PW2IX] == "A" /* add*/
     || PW0PM002.PW0PMACT[PW0PW2IX] == "C" /* change*/
     || PW0PM002.PW0PMACT[PW0PW2IX] == "D") /* delete*/
      PW0PW00.PW0PWQTF = "Y"; /* update quantities*/
    end

    PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX - 1; /* decrement*/

  end
end // end PW0P-53402

// check security
Function PW0P000()
  if (COMMAREA.CAFROMAP == "PW0J"
   || COMMAREA.CAFROMAP == "PW0M"
   || COMMAREA.CAFROMAP == "PW0Q"
   || COMMAREA.CAFROMAP == "PW0R"
   || COMMAREA.CAFROMAP == "PW0S"
   || COMMAREA.CAFROMAP == "PW0V"
   || COMMAREA.CAFROMAP == "PW0W"
   || COMMAREA.CAFROMAP == "PW0X"
   || COMMAREA.CAFROMAP == "PW06"
   || COMMAREA.CAFROMAP == "PW08"
   || COMMAREA.CAFROMAP == "GD00")

    COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* save curr application*/
  else
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSNOWAY(); /* exit to another appl*/
  end

  PW0PS01(); /* get P&H date*/

   /* -----------------------------------------------------------------*/
   /* Initial move to working storage and map*/
   /* -----------------------------------------------------------------*/

   /* ------- division code ----------------------------------------------*/
  if (PKWREC.XDVCD[1] != "*")
    XPPK004();

    if (converseVar.validationMsgNum == 0)
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0PW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0PM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0PM002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      PW0PW01.XDVCD = PKWREC.XDVCD[1];
      PW0PM001.XDVCD = PKWREC.XDVCD[1];
      PW0PM002.XDVCD = PKWREC.XDVCD[1];
    end
  else
    PW0PW01.XDVDESC = "ALL DIVISIONS";
    PW0PM001.XDVDESC = "ALL DIVISIONS";
    PW0PM002.XDVDESC = "ALL DIVISIONS";
    PW0PW01.XDVCD = PKWREC.XDVCD[1];
    PW0PM001.XDVCD = PKWREC.XDVCD[1];
    PW0PM002.XDVCD = PKWREC.XDVCD[1];
  end

   /* ------- brand code -------------------------------------------------*/
  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0PM001.XBCCD cursor, bold;
        set PW0PM002.XBCCD cursor, bold;
        TA1REC.TA1PGMNO = "000";
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0PW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0PM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0PM002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0PW01.XBCCD = PKWREC.XBCCD[1];
        PW0PM001.XBCCD = PKWREC.XBCCD[1];
        PW0PM002.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      set PW0PM001.XBCCD cursor, bold;
      set PW0PM002.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "000";
      exit stack;
    end
  else
    PW0PW00.PW0PWWAR = 421;
    PW0PW01.XBCABRV = " ";
    PW0PM001.XBCABRV = " ";
    PW0PM002.XBCABRV = " ";
    PW0PW01.XBCCD = PKWREC.XBCCD[1];
    PW0PM001.XBCCD = PKWREC.XBCCD[1];
    PW0PM002.XBCCD = PKWREC.XBCCD[1];
  end

end // end PW0P000

// Inquire/maintain a table row
Function PW0P001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0P100(); /* Obtain the data to display*/

  PW0P200(); /* Format and display the map*/

  PW0P300(); /* Check attention identifier*/

  PW0P400(); /* Reset fields to normal intensity*/

  PW0P500(); /* Verify the entered data*/

  PW0P600(); /* Process valid input request*/

end // end PW0P001

// Obtain the data to display
Function PW0P100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWDTF != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Verify division code and move to working storage*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    if (PW0PM002.XDVCD == " ")
      converseLib.validationFailed(393);
      set PW0PM002.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "100"; /* module identification*/
      exit stack;
    end

    PKWREC.XDVCD[1] = PW0PM002.XDVCD;

  else

    if (PW0PM001.XDVCD == " ")
      converseLib.validationFailed(393);
      set PW0PM001.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "100"; /* module identification*/
      exit stack;
    end

    PKWREC.XDVCD[1] = PW0PM001.XDVCD;
  end

  if (PKWREC.XDVCD != "*")
    XPPK004();

    if (converseVar.validationMsgNum == 0) /* no errors*/
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0PW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      PW0PW01.XDVCD = PKWREC.XDVCD[1];
    else
      converseLib.validationFailed(393);
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        set PW0PM002.XDVCD cursor, bold;
      else
        set PW0PM001.XDVCD cursor, bold;
      end
      TA1REC.TA1PGMNO = "100"; /* module identification*/
      exit stack;
    end
  else
    PW0PW01.XDVDESC = "ALL DIVISIONS";
    PW0PW01.XDVCD = PKWREC.XDVCD[1];
  end

   /* ------------------------------------------------------------*/
   /* Verify brand code and move to working storage*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0PM002.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0PM002.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "100"; /* module identification*/
      exit stack;
    end

    PKWREC.XBCCD[1] = PW0PM002.XBCCD;
  else
    if (PW0PM001.XBCCD == " ")
      converseLib.validationFailed(413);
      set PW0PM001.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "100"; /* module identification*/
      exit stack;
    end

    PKWREC.XBCCD[1] = PW0PM001.XBCCD;
  end

  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0PM001.XBCCD cursor, bold;
        set PW0PM002.XBCCD cursor, bold;
        TA1REC.TA1PGMNO = "100";
        exit stack;
      else
        PW0PW01.XBCCD = PKWREC.XBCCD[1];
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0PW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
      end
    else
      converseLib.validationFailed(413);
      set PW0PM001.XBCCD cursor, bold;
      set PW0PM002.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "100";
      exit stack;
    end
  else
    PW0PW00.PW0PWWAR = 421;
    PW0PW01.XBCABRV = " ";
    PW0PW01.XBCCD = PKWREC.XBCCD[1];
  end

  PW0PS02();
                                  /* initialize w02 and purge temp storage*/
  set PW0PW03 empty; /* initialize w03*/
  set PW0PW05 empty; /* initialize w05*/
  set PW0PW06 empty; /* initialize w06*/
  set PW0PW07 empty; /* initialize w07*/
  set PW0PW08 empty; /* initialize w08*/
  set PW0PW09 empty; /* initialize w09*/

   /* ------------------------------------------------------------*/
   /* process selected by order*/
   /* ------------------------------------------------------------*/

  PW0P110(); /* dpick.vselor01*/

   /* ------------------------------------------------------------*/
   /* process selected by quantity*/
   /* ------------------------------------------------------------*/

  PW0P120(); /* dpick.vselqt01*/

   /* ------------------------------------------------------------*/
   /* process non-selected by quantities*/
   /* ------------------------------------------------------------*/

  PW0P130(); /* dpick.vpoolh01*/

   /* ------------------------------------------------------------*/
   /* sort selected quantities by DNSB date into selsort*/
   /* ------------------------------------------------------------*/

  PW0P140(); /* sort selord and selqty tables*/

   /* ------------------------------------------------------------*/
   /* process DNSB date sort*/
   /* ------------------------------------------------------------*/

  PW0P150(); /* sort selsort and pool tables*/

   /* ------------------------------------------------------------*/
   /* if no pages were formatted, indicate no data to display*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.TA5TSQIX == 0) /* no pages formatted*/
    TA1REC.TA1PGMNO = "100"; /* module identification*/
    converseLib.validationFailed(110); /* indicate no data to display*/
    PW0PW00.CACHGFL = "N"; /* change flag*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0PW00.XXXTSPAG = 1; /* Desired page number*/
  PW0PW00.PW0PWDTF = "N"; /* Request for data switch*/
  PW0PW00.CACHGFL = "Y"; /* change flag*/

end // end PW0P100

// process selected by order
Function PW0P110()

  PW0PS05(); /* open dpick.vselor01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0PW00.PW0PWCRF = "N"; /* close cursor switch*/
    PW0PW00.PW0PWFTF = "Y"; /* first time flag*/
    PW0PW05.PW0PW5IX = 1; /* w05 index*/

    PW0PS06(); /* fetch dpick.vselor01*/

    while (PW0PW00.PW0PWCRF == "N") /* selord not eof*/

      if (PKHREC.OP1DSBDT > PW0PW00.PW0PWTOD) /* DNSB to date*/
        PW0PW00.PW0PWCRF = "Y"; /* stop processing*/
      else

        if (PKHREC.PK-SEL-TYP-CD < "10")

          if (PKHREC.OP1DSBDT >= PW0PW00.PW0PWFRD) /* DNSB from date*/
            PW0PW01.TF1CARCD = PKHREC.TF1CARCD; /* carrier cd*/
            PW0PW00.PW0PWVLD = "Y"; /* continue to process*/
            PW0PS20(); /* check valid status*/

            if (PW0PW00.PW0PWVLD == "Y") /* continue to process*/
              PW0P111(); /* check for break*/
            end

          end
          PW0PS06(); /* fetch dpick.vselor01*/

        else
          PW0PS06(); /* fetch dpick.vselor01*/

        end
      end
    end
  end

  PW0PS07(); /* close dpick.vselor01*/

end // end PW0P110

// check DNSB dates
Function PW0P111()

   /* If first time move DNSB to first occurence*/

  if (PW0PW00.PW0PWFTF == "Y") /* first time*/
    PW0PW00.PW0PWFTF = "N"; /* not first time*/
    PW0PW05.OP1DSBDT[PW0PW5IX] = PKHREC.OP1DSBDT; /* DNSB*/
    PW0PW05.TF1CARCD[PW0PW5IX] = PKHREC.TF1CARCD; /* carrier code*/
    PW0PW05.PW0PW5MX = PW0PW05.PW0PW5IX; /* table max*/
  end
   /* -----------------------------------------------*/
   /* check the DNSB date range and carrier code*/
   /* -----------------------------------------------*/

  if (PKHREC.OP1DSBDT >= PW0PW00.PW0PWFRD) /* DNSB from date*/

      /* change DNSB*/

    if (PKHREC.OP1DSBDT > PW0PW05.OP1DSBDT[PW0PW5IX]) /* DNSB date*/
      PW0PW05.PW0PW5IX = PW0PW05.PW0PW5IX + 1; /* increment w05 index*/
  /* ldavi3 - increase to 990*/
      if (PW0PW05.PW0PW5IX > 990) /* table max*/
        PW0PW00.PW0PWCRF = "Y"; /* stop processing*/
        PW0PW05.PW0PW5IX = 990; /* table max*/
        PW0PW00.PW0PWWAR = 304; /* table overflow*/
        TA1REC.TA1PGMNO = "111";
        return; /* return to prev process*/
      end
      PW0PW05.OP1DSBDT[PW0PW5IX] = PKHREC.OP1DSBDT; /* DNSB*/
      PW0PW05.TF1CARCD[PW0PW5IX] = PKHREC.TF1CARCD; /* carr cd*/
      PW0PW05.PW0PW5MX = PW0PW05.PW0PW5IX; /* table max*/
    else

        /* same DNSB, check carrier code*/

      if (PKHREC.TF1CARCD != PW0PW05.TF1CARCD[PW0PW5IX]) /* carrier code*/
        PW0PW05.PW0PW5IX = PW0PW05.PW0PW5IX + 1; /* increment w05 index*/
  /* ldavi3 - increase to 990*/
        if (PW0PW05.PW0PW5IX > 990) /* table max*/
          PW0PW00.PW0PWCRF = "Y"; /* stop processing*/
          PW0PW05.PW0PW5IX = 990; /* table max*/
          PW0PW00.PW0PWWAR = 304; /* table overflow*/
          TA1REC.TA1PGMNO = "111";
          return; /* return to prev process*/
        end
        PW0PW05.OP1DSBDT[PW0PW5IX] = PKHREC.OP1DSBDT; /* DNSB*/
        PW0PW05.TF1CARCD[PW0PW5IX] = PKHREC.TF1CARCD; /* carrier code*/
        PW0PW05.PW0PW5MX = PW0PW05.PW0PW5IX; /* table max*/
      end
    end
  end

  PW0P112(); /* move data to w05*/

end // end PW0P111

// move data to w05
Function PW0P112()

  if (PKHREC.PK-SEL-TYP-CD == " 1" /* special handling*/
   || PKHREC.PK-SEL-TYP-CD == " 3" 
   || PKHREC.PK-SEL-TYP-CD == " 5")

     /* SPECIAL HANDLING*/

    PW0PW00.PW0PWQTY = PW0PW05.PW0PWSHQ[PW0PW5IX];
    PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PKHREC.PKHPVSRP; /* repack*/
    PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PKHREC.PKHPVSFC; /* full case*/
    PW0PW05.PW0PWSHQ[PW0PW5IX] = PW0PW00.PW0PWQTY;
    PW0PW05.PW0PWTHW = PW0PW05.PW0PWTHW + PKHREC.PKHPVSMM;
                                   /* sel work minutes*/


     /* GRAND TOTAL SPECIAL HANDLING*/

    PW0PW05.PW0PWSHT = PW0PW05.PW0PWSHT + PKHREC.PKHPVSRP; /* repack*/
    PW0PW05.PW0PWSHT = PW0PW05.PW0PWSHT + PKHREC.PKHPVSFC; /* full case*/


  end

  if (PKHREC.PK-SEL-TYP-CD == " 2" /* non-special handling*/
   || PKHREC.PK-SEL-TYP-CD == " 4" 
   || PKHREC.PK-SEL-TYP-CD == " 6")

     /* REGULAR SELECTED ORDER*/

    PW0PW00.PW0PWQTY = PW0PW05.PW0PWORP[PW0PW5IX];
    PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PKHREC.PKHPVSRP; /* repack*/
    PW0PW05.PW0PWORP[PW0PW5IX] = PW0PW00.PW0PWQTY;

    PW0PW00.PW0PWQTY = PW0PW05.PW0PWOFC[PW0PW5IX];
    PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PKHREC.PKHPVSFC; /* full case*/
    PW0PW05.PW0PWOFC[PW0PW5IX] = PW0PW00.PW0PWQTY;


     /* GRAND TOTAL REGULAR SELECTED ORDER*/

    PW0PW05.PW0PWTOR = PW0PW05.PW0PWTOR + PKHREC.PKHPVSRP; /* repack*/
    PW0PW05.PW0PWTOF = PW0PW05.PW0PWTOF + PKHREC.PKHPVSFC; /* full case*/


  end

end // end PW0P112

// process selelcted by quantity
Function PW0P120()

  PW0PS08(); /* open dpick.vselqt01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0PW00.PW0PWCRF = "N"; /* close cursor switch*/
    PW0PW00.PW0PWFTF = "Y"; /* first time flag*/
    PW0PW06.PW0PW6IX = 1; /* w06 index*/
    PW0PS09(); /* fetch dpick.vselqt01*/

    while (PW0PW00.PW0PWCRF == "N") /* selqtd not eof*/

      if (PWMREC.PK-SEL-TYP-CD == "17") /* if extra non-special handl.*/

        PW0P123(); /* move data to w09*/

      end

      if (PWMREC.OP1DSBDT > PW0PW00.PW0PWTOD) /* DNSB to date*/
        PW0PW00.PW0PWCRF = "Y"; /* end processing*/
      else

        if (PWMREC.PK-SEL-TYP-CD < "10") /* not b-grade or closeout*/

          if (PWMREC.OP1DSBDT >= PW0PW00.PW0PWFRD) /* DNSB from date*/
            PW0PW01.TF1CARCD = PWMREC.TF1CARCD; /* carrier code*/
            PW0PW00.PW0PWSQF = "Y"; /* select qty flag*/
            PW0PW00.PW0PWVLD = "Y"; /* carrier flag*/
            PW0PS20(); /* check valid status*/
            PW0PW00.PW0PWSQF = "N"; /* select qty flag*/

            /* ------ in-store promo --------------------------------*/
            if (PWMREC.XDVCD == "01"
             && PWMREC.XGPCD == "01")

              PW0PW00.PW0PWVLD = "N";
            end

            /* ------ ColeHaan --------------------------------------*/

            if (PKWREC.PKWSELSW == "PK") /* picking*/

              if (PW0PM002.XBCCD == "*"
               && PWMREC.XBCCD == "08")

                PW0PW00.PW0PWVLD = "N";
              end
            else
              if (PW0PM001.XBCCD == "*"
               && PWMREC.XBCCD == "08")

                PW0PW00.PW0PWVLD = "N";
              end
            end

            if (PW0PW00.PW0PWVLD == "Y") /* continue to process*/
              PW0P121(); /* check for break*/
            end
          end
          PW0PS09(); /* fetch dpick.vselqt01*/
        else
          PW0PS09(); /* fetch dpick.vselqt01*/
        end

      end
    end
  end

  PW0PS10(); /* close dpick.vselqt01*/

end // end PW0P120

// check DNSB dates
Function PW0P121()

   /* If first time move DNSB and carrier code to first occurence*/

  if (PW0PW00.PW0PWFTF == "Y") /* first time*/
    PW0PW00.PW0PWFTF = "N"; /* not first time*/
    PW0PW06.OP1DSBDT[PW0PW6IX] = PWMREC.OP1DSBDT; /* DNSB*/
    PW0PW06.TF1CARCD[PW0PW6IX] = PWMREC.TF1CARCD; /* carrier code*/
    PW0PW06.PW0PW6MX = PW0PW06.PW0PW6IX; /* w06 table max*/
  end
   /* ------------------------------------------------*/
   /* check the DNSB date range and carrier code*/
   /* ------------------------------------------------*/

    /* change DNSB date*/

  if (PWMREC.OP1DSBDT >= PW0PW00.PW0PWFRD) /* DNSB from date*/
    if (PWMREC.OP1DSBDT > PW0PW06.OP1DSBDT[PW0PW6IX]) /* DNSB date*/
      PW0PW06.PW0PW6IX = PW0PW06.PW0PW6IX + 1; /* increment w06 index*/
  /* ldavi3 - increase to 990*/
      if (PW0PW06.PW0PW6IX > 990) /* table max*/
        PW0PW00.PW0PWCRF = "Y"; /* stop processing*/
        PW0PW06.PW0PW6IX = 990; /* max table*/
        PW0PW00.PW0PWWAR = 304; /* table overflow*/
        TA1REC.TA1PGMNO = "121";
        return; /* return to prev process*/
      end
      PW0PW06.OP1DSBDT[PW0PW6IX] = PWMREC.OP1DSBDT; /* DNSB*/
      PW0PW06.TF1CARCD[PW0PW6IX] = PWMREC.TF1CARCD; /* carr cd*/
      PW0PW06.PW0PW6MX = PW0PW06.PW0PW6IX; /* w06 table max*/
    else

        /* same DNSB date, but change in carrier code*/

      if (PWMREC.TF1CARCD != PW0PW06.TF1CARCD[PW0PW6IX]) /* carrier code*/
        PW0PW06.PW0PW6IX = PW0PW06.PW0PW6IX + 1; /* increment w06 index*/
  /* ldavi3 - increase to 990*/
        if (PW0PW06.PW0PW6IX > 990) /* table max*/
          PW0PW00.PW0PWCRF = "Y"; /* stop processing*/
          PW0PW06.PW0PW6IX = 990; /* max table*/
          PW0PW00.PW0PWWAR = 304; /* table overflow*/
          TA1REC.TA1PGMNO = "121";
          return; /* return to prev process*/
        end
        PW0PW06.OP1DSBDT[PW0PW6IX] = PWMREC.OP1DSBDT; /* DNSB*/
        PW0PW06.TF1CARCD[PW0PW6IX] = PWMREC.TF1CARCD; /* carr cd*/
        PW0PW06.PW0PW6MX = PW0PW06.PW0PW6IX; /* w06 table max*/
      end
    end
  end

  PW0P122(); /* move data to w06*/

end // end PW0P121

// move data to w06
Function PW0P122()

  if (PWMREC.PK-SEL-TYP-CD == " 1" /* special handling*/
   || PWMREC.PK-SEL-TYP-CD == " 3" 
   || PWMREC.PK-SEL-TYP-CD == " 5")

     /* SPECIAL HANDLING*/

    PW0PW00.PW0PWQTY = PW0PW06.PW0PWSHQ[PW0PW6IX];
    PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PWMREC.PKHPVSRP; /* repack*/
    PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PWMREC.PKHPVSFC; /* full case*/
    PW0PW06.PW0PWSHQ[PW0PW6IX] = PW0PW00.PW0PWQTY;

    PW0PW06.PW0PWTHW = PW0PW06.PW0PWTHW + PWMREC.PKHPVSMM; /* sel work min*/


     /* GRAND TOTAL SPECIAL HANDLING*/

    PW0PW06.PW0PWSHT = PW0PW06.PW0PWSHT + PWMREC.PKHPVSRP; /* repack*/
    PW0PW06.PW0PWSHT = PW0PW06.PW0PWSHT + PWMREC.PKHPVSFC; /* full case*/


  end

  if (PWMREC.PK-SEL-TYP-CD == " 2" /* non-special handling*/
   || PWMREC.PK-SEL-TYP-CD == " 4" 
   || PWMREC.PK-SEL-TYP-CD == " 6")

     /* REGULAR SELECTED*/

    if (PWMREC.PK-SEL-TYP-CD == " 4"
     && PWMREC.XHDCD == " ") /* handling code*/

      PW0PW00.PW0PWQTY = PW0PW06.PW0PWRQF[PW0PW6IX];
      PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PWMREC.PKHPVSFC; /* full case*/
      PW0PW06.PW0PWRQF[PW0PW6IX] = PW0PW00.PW0PWQTY;

      PW0PW00.PW0PWQTY = PW0PW06.PW0PWRQR[PW0PW6IX];
      PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PWMREC.PKHPVSRP; /* repack*/
      PW0PW06.PW0PWRQR[PW0PW6IX] = PW0PW00.PW0PWQTY;

       /* GRAND TOTAL REGULAR QUANTITY*/

      PW0PW06.PW0PWTQF = PW0PW06.PW0PWTQF + PWMREC.PKHPVSFC; /* full case*/
      PW0PW06.PW0PWTQR = PW0PW06.PW0PWTQR + PWMREC.PKHPVSRP; /* repack*/

    else
      if (PWMREC.PK-SEL-TYP-CD == " 2"
       && PWMREC.XHDCD == " ") /* handling code*/

        PW0PW00.PW0PWQTY = PW0PW06.PW0PWRQF[PW0PW6IX];
        PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PWMREC.PKHPVSFC; /* full case*/
        PW0PW06.PW0PWRQF[PW0PW6IX] = PW0PW00.PW0PWQTY;

        PW0PW00.PW0PWQTY = PW0PW06.PW0PWRQR[PW0PW6IX];
        PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PWMREC.PKHPVSRP; /* repack*/
        PW0PW06.PW0PWRQR[PW0PW6IX] = PW0PW00.PW0PWQTY;

        /* GRAND TOTAL REGULAR QUANTITY*/

        PW0PW06.PW0PWTQF = PW0PW06.PW0PWTQF + PWMREC.PKHPVSFC; /* full case*/
        PW0PW06.PW0PWTQR = PW0PW06.PW0PWTQR + PWMREC.PKHPVSRP; /* repack*/

      else

        PW0PW00.PW0PWQTY = PW0PW06.PW0PWQFC[PW0PW6IX];
        PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PWMREC.PKHPVSFC; /* full case*/
        PW0PW06.PW0PWQFC[PW0PW6IX] = PW0PW00.PW0PWQTY;

        PW0PW00.PW0PWQTY = PW0PW06.PW0PWQRP[PW0PW6IX];
        PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PWMREC.PKHPVSRP; /* repack*/
        PW0PW06.PW0PWQRP[PW0PW6IX] = PW0PW00.PW0PWQTY;

        /* GRAND TOTAL SELECTED ORDER & QUANTITY*/

        PW0PW06.PW0PWTOR = PW0PW06.PW0PWTOR + PWMREC.PKHPVSRP; /* repack*/
        PW0PW06.PW0PWTOF = PW0PW06.PW0PWTOF + PWMREC.PKHPVSFC; /* full case*/

      end
    end

  end

end // end PW0P122

// move data to w06
Function PW0P123()
   /* ************ move extra non-special data to map storage ***********/

  PW0PW09.PW0PW-QTY-FC = PWMREC.PKHPVSFC;

  PW0PW09.PW0PW-QTY-RP = PWMREC.PKHPVSRP;


end // end PW0P123

// process non-select quantities
Function PW0P130()

  PW0PS11(); /* open vpick.vpoolh01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0PW07.PW0PW7IX = 1; /* pool index*/
    PW0PW00.PW0PWCRF = "N"; /* close cursor flag*/
    PW0PW00.PW0PWFTF = "Y"; /* first time flag*/
    PW0PW00.PW0PWVLD = "Y"; /* valid flag*/

    PW0PS12(); /* fetch vpick.vpoolh01*/

    while (PW0PW00.PW0PWCRF == "N") /* more pool header*/
      if (PK4REC.OP1DSBDT > PW0PW00.PW0PWTOD) /* DNSB to date*/
        PW0PW00.PW0PWCRF = "Y"; /* end processing*/
      else
  /* ldavi3 - bypass records that have been picked scheduled*/
        if (PKWREC.PKWSELSW == "PP" /* if pick planning*/
         && PK4REC.PK4SLIND == "S") /* already selected via picking*/
            /* next sentence*/
        else
          PW0P133(); /* Verify b-grade and closeout*/

          if (PK4REC.OP1DSBDT >= PW0PW00.PW0PWFRD) /* DNSB from date*/
            if (PW0PW00.PW0PWVLD == "Y") /* valid flag*/
              PW0PW01.TF1CARCD = PK4REC.TF1CARCD; /* carrier code*/
              PW0PW00.PW0PWPLF = "Y"; /* pool header flag*/
              PW0PS20(); /* check carrier, order and customer*/
              PW0PW00.PW0PWPLF = "N"; /* pool header flag*/

              if (PW0PW00.PW0PWVLD == "Y") /* continue to process*/
                PW0P131(); /* process pool header*/
              end

            end
          end
        end
        PW0PW00.PW0PWVLD = "Y"; /* valid flag*/
        PW0PS12(); /* fetch vpick.vpoolh01*/

      end
    end
  end

  PW0PS13(); /* close vpick.vpoolh01*/
end // end PW0P130

// process pool item
Function PW0P131()

   /* If first time move DNSB & carrier code to first occurence*/

  if (PW0PW00.PW0PWFTF == "Y") /* first time*/
    PW0PW00.PW0PWFTF = "N"; /* not first time*/
    PW0PW07.OP1DSBDT[PW0PW7IX] = PK4REC.OP1DSBDT; /* DNSB*/
    PW0PW07.TF1CARCD[PW0PW7IX] = PK4REC.TF1CARCD; /* carrier code*/
    PW0PW07.PW0PW7MX = PW0PW07.PW0PW7IX; /* w07 table max*/
  end

     /* change in DNSB date*/

  if (PK4REC.OP1DSBDT > PW0PW07.OP1DSBDT[PW0PW7IX]) /* DNSB date*/
    PW0PW07.PW0PW7IX = PW0PW07.PW0PW7IX + 1; /* increment w07 index*/
  /* ldavi3 - increase to 990*/
    if (PW0PW07.PW0PW7IX > 990) /* table max*/
      PW0PW00.PW0PWCRF = "Y"; /* stop processing*/
      PW0PW07.PW0PW7IX = 990; /* table max*/
      PW0PW00.PW0PWWAR = 304; /* table overflow*/
      TA1REC.TA1PGMNO = "131";
      return; /* return to prev process*/
    end
    PW0PW07.OP1DSBDT[PW0PW7IX] = PK4REC.OP1DSBDT; /* DNSB*/
    PW0PW07.TF1CARCD[PW0PW7IX] = PK4REC.TF1CARCD; /* carr cd*/
    PW0PW07.PW0PW7MX = PW0PW07.PW0PW7IX; /* w07 table max*/
  else

       /* DNSB same, check carrier code*/

    if (PK4REC.TF1CARCD != PW0PW07.TF1CARCD[PW0PW7IX]) /* carrier code*/
      PW0PW07.PW0PW7IX = PW0PW07.PW0PW7IX + 1; /* increment w07 index*/
  /* ldavi3 - increase to 990*/
      if (PW0PW07.PW0PW7IX > 990) /* table max*/
        PW0PW07.PW0PW7IX = 990; /* table max*/
        PW0PW00.PW0PWWAR = 304; /* table overflow*/
        TA1REC.TA1PGMNO = "131";
        return; /* return to prev process*/
      end
      PW0PW07.OP1DSBDT[PW0PW7IX] = PK4REC.OP1DSBDT; /* DNSB*/
      PW0PW07.TF1CARCD[PW0PW7IX] = PK4REC.TF1CARCD; /* carrier code*/
      PW0PW07.PW0PW7MX = PW0PW07.PW0PW7IX; /* w07 table max*/
    end
  end

  PW0PW07.PW0PWPFC[PW0PW7IX] = PK4REC.PK4ORDFC +   PW0PW07.PW0PWPFC[PW0PW7IX]; /* pool full case*/

  PW0PW07.PW0PWPRP[PW0PW7IX] = PK4REC.PK4ORDRP +   PW0PW07.PW0PWPRP[PW0PW7IX]; /* pool repack*/

end // end PW0P131

// Verify B-Grades and Closeouts
Function PW0P133()
   /* -----------------------------------------------------------------*/
   /* This process determines whether the order is b-grade or*/
   /* closeout and a flag is set NOT to process those orders.*/
   /*  */
   /* XPPK005 passes a return code in PKW-ORDER-TYP-IND field.*/
   /* 'B' for b-grade*/
   /* 'C' for closeout*/
   /* ' ' for regular order*/
   /*  */
   /* The order type is found from the sales office number (XSOCD) and*/
   /* base order type code (XOBCD).*/
   /* -------------------------------------------------------------------*/


  XPPK005();

  if (PKWREC.PKW-ORDER-TYP-IND == "B"
   || PKWREC.PKW-ORDER-TYP-IND == "C")

    PW0PW00.PW0PWVLD = "N"; /* do not process*/

  end


end // end PW0P133

// sort selected qty by dnsb date
Function PW0P140()

  set PW0PW08 empty; /* initialize w08*/

  PW0PW05.PW0PW5IX = 1; /* first occurence*/
  PW0PW06.PW0PW6IX = 1; /* first occurence*/
  PW0PW08.PW0PW8IX = 1; /* first occurence*/

  while (PW0PW05.PW0PW5IX <= PW0PW05.PW0PW5MX /* pw0pw05 array*/
   || PW0PW06.PW0PW6IX <= PW0PW06.PW0PW6MX) /* pw0pw06 array*/

    PW0P141(); /* combine w05 & w06 into w08*/

  end

  PW0PW08.PW0PWSHT = PW0PW08.PW0PWSHT + PW0PW05.PW0PWSHT; /* ord spcl hndl*/
  PW0PW08.PW0PWSHT = PW0PW08.PW0PWSHT + PW0PW06.PW0PWSHT; /* qty spcl hndl*/

  PW0PW08.PW0PWTHW = PW0PW08.PW0PWTHW + PW0PW05.PW0PWTHW; /* ord spcl min*/
  PW0PW08.PW0PWTHW = PW0PW08.PW0PWTHW + PW0PW06.PW0PWTHW; /* qty spcl min*/

  PW0PW08.PW0PWTOF = PW0PW08.PW0PWTOF + PW0PW05.PW0PWTOF;
                                   /* total selord fc*/
  PW0PW08.PW0PWTOF = PW0PW08.PW0PWTOF + PW0PW06.PW0PWTOF;
                                   /* total selord fc*/
  PW0PW08.PW0PWTQF = PW0PW08.PW0PWTQF + PW0PW06.PW0PWTQF;
                                   /* total selqty fc*/

  PW0PW08.PW0PWTOR = PW0PW08.PW0PWTOR + PW0PW05.PW0PWTOR;
                                   /* total selord rp*/
  PW0PW08.PW0PWTOR = PW0PW08.PW0PWTOR + PW0PW06.PW0PWTOR;
                                   /* total selord rp*/
  PW0PW08.PW0PWTQR = PW0PW08.PW0PWTQR + PW0PW06.PW0PWTQR;
                                   /* total selqty rp*/

  PW0PW08.PW0PW8MX = PW0PW08.PW0PW8IX - 1; /* max w08 array*/

end // end PW0P140

// sort by DNSB and carrier code
Function PW0P141()

    /* Check DNSB dates*/

  if (PW0PW05.OP1DSBDT[PW0PW5IX] < PW0PW06.OP1DSBDT[PW0PW6IX] /* DNSB*/
   && PW0PW05.PW0PW5IX <= PW0PW05.PW0PW5MX)                   /* more pw0pw05*/

    PW0P144(); /* move w05 selord to w08*/

  else
    if (PW0PW05.OP1DSBDT[PW0PW5IX] > PW0PW06.OP1DSBDT[PW0PW6IX] /* DNSB*/
     && PW0PW06.PW0PW6IX <= PW0PW06.PW0PW6MX)                   /* more pw0pw06*/

      PW0P146(); /* move w06 selqty to w08*/

    else
      if (PW0PW05.OP1DSBDT[PW0PW5IX] == PW0PW06.OP1DSBDT[PW0PW6IX] /* DNSB*/
       && PW0PW05.PW0PW5IX <= PW0PW05.PW0PW5MX                     /* more pw0pw05*/
       && PW0PW06.PW0PW6IX <= PW0PW06.PW0PW6MX)                    /* more pw0pw06*/

        PW0P142(); /* add w05 selord + w06 selqty to w08*/

      else
        if (PW0PW05.PW0PW5IX > PW0PW05.PW0PW5MX /* w05 index*/
         && PW0PW06.PW0PW6IX <= PW0PW06.PW0PW6MX) /* more pw0pw06*/

          PW0P146(); /* move w06 selord to w08*/

        else
          if (PW0PW06.PW0PW6IX > PW0PW06.PW0PW6MX /* w06 index*/
           && PW0PW05.PW0PW5IX <= PW0PW05.PW0PW5MX) /* more pw0pw05*/

            PW0P144(); /* move w05 selqty to w08*/

          end
        end
      end
    end
  end
end // end PW0P141

// sort by DNSB and carrier code
Function PW0P142()

    /* Check carrier code*/

  if (PW0PW05.TF1CARCD[PW0PW5IX] < PW0PW06.TF1CARCD[PW0PW6IX] /* carr cd*/
   && PW0PW05.PW0PW5IX <= PW0PW05.PW0PW5MX)                   /* no more pw0pw05*/

    PW0P144(); /* move w05 selord to w08*/

  else
    if (PW0PW05.TF1CARCD[PW0PW5IX] > PW0PW06.TF1CARCD[PW0PW6IX] /* carr cd*/
     && PW0PW06.PW0PW6IX <= PW0PW06.PW0PW6MX)                   /* no more pw0pw06*/

      PW0P146(); /* move w06 selqty to w08*/
    else
      if (PW0PW05.TF1CARCD[PW0PW5IX] == PW0PW06.TF1CARCD[PW0PW6IX]) /* carr*/

        PW0P148(); /* add w05 selord + w06 selqty to w08*/

      end
    end
  end
end // end PW0P142

// move selord w05 to w08
Function PW0P144()

  PW0PW08.OP1DSBDT[PW0PW8IX] = PW0PW05.OP1DSBDT[PW0PW5IX]; /* DNSB*/
  PW0PW08.TF1CARCD[PW0PW8IX] = PW0PW05.TF1CARCD[PW0PW5IX]; /* carrier cd*/
  PW0PW08.PW0PWSHQ[PW0PW8IX] = PW0PW05.PW0PWSHQ[PW0PW5IX]; /* ord fc*/
  PW0PW08.PW0PWOQF[PW0PW8IX] = PW0PW05.PW0PWOFC[PW0PW5IX]; /* seld fc*/
  PW0PW08.PW0PWOQR[PW0PW8IX] = PW0PW05.PW0PWORP[PW0PW5IX]; /* seld rp*/

  PW0PW05.PW0PW5IX = PW0PW05.PW0PW5IX + 1; /* increment w05 index*/
  PW0PW08.PW0PW8IX = PW0PW08.PW0PW8IX + 1; /* increment w08 index*/

  /* ldavi3 - increase to 990*/
  if (PW0PW08.PW0PW8IX > 990) /* table max*/
    PW0PW08.PW0PW8IX = 990; /* table max*/
    PW0PW00.PW0PWWAR = 304; /* table overflow*/
    TA1REC.TA1PGMNO = "144";
    return; /* return to prev process*/
  end
end // end PW0P144

// move selqty w06 to w08
Function PW0P146()
  PW0PW08.OP1DSBDT[PW0PW8IX] = PW0PW06.OP1DSBDT[PW0PW6IX]; /* DNSB*/
  PW0PW08.TF1CARCD[PW0PW8IX] = PW0PW06.TF1CARCD[PW0PW6IX]; /* carr cd*/
  PW0PW08.PW0PWSHQ[PW0PW8IX] = PW0PW06.PW0PWSHQ[PW0PW6IX]; /* sh qty*/
  PW0PW08.PW0PWOQF[PW0PW8IX] = PW0PW06.PW0PWQFC[PW0PW6IX]; /* selqty fc*/
  PW0PW08.PW0PWOQR[PW0PW8IX] = PW0PW06.PW0PWQRP[PW0PW6IX]; /* selqty rp*/
  PW0PW08.PW0PWRQF[PW0PW8IX] = PW0PW06.PW0PWRQF[PW0PW6IX]; /* ns qty fc*/
  PW0PW08.PW0PWRQR[PW0PW8IX] = PW0PW06.PW0PWRQR[PW0PW6IX]; /* ns qty rp*/

  PW0PW06.PW0PW6IX = PW0PW06.PW0PW6IX + 1; /* increment w06 index*/
  PW0PW08.PW0PW8IX = PW0PW08.PW0PW8IX + 1; /* increment w08 index*/

  /* ldavi3 - increase to 990*/
  if (PW0PW08.PW0PW8IX > 990) /* table max*/
    PW0PW08.PW0PW8IX = 990; /* table max*/
    PW0PW00.PW0PWWAR = 304; /* table overflow*/
    TA1REC.TA1PGMNO = "146";
    return; /* return to prev process*/
  end
end // end PW0P146

// w05 selor + w06 selqt = w08
Function PW0P148()
  PW0PW08.OP1DSBDT[PW0PW8IX] = PW0PW05.OP1DSBDT[PW0PW5IX]; /* DNSB*/
  PW0PW08.TF1CARCD[PW0PW8IX] = PW0PW05.TF1CARCD[PW0PW5IX]; /* carr cd*/
  PW0PW08.PW0PWSHQ[PW0PW8IX] = PW0PW05.PW0PWSHQ[PW0PW5IX]; /* ord fc*/

  PW0PW00.PW0PWQTY = PW0PW05.PW0PWSHQ[PW0PW5IX]; /* hld sel fc*/
  PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PW0PW06.PW0PWSHQ[PW0PW6IX];
  PW0PW08.PW0PWSHQ[PW0PW8IX] = PW0PW00.PW0PWQTY; /* seld fc*/

  PW0PW00.PW0PWQTY = PW0PW05.PW0PWOFC[PW0PW5IX]; /* hld sel fc*/
  PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PW0PW06.PW0PWQFC[PW0PW6IX];
  PW0PW08.PW0PWOQF[PW0PW8IX] = PW0PW00.PW0PWQTY; /* seld fc*/

  PW0PW00.PW0PWQTY = PW0PW05.PW0PWORP[PW0PW5IX]; /* hld sel fc*/
  PW0PW00.PW0PWQTY = PW0PW00.PW0PWQTY + PW0PW06.PW0PWQRP[PW0PW6IX];
  PW0PW08.PW0PWOQR[PW0PW8IX] = PW0PW00.PW0PWQTY; /* seld fc*/

  PW0PW08.PW0PWRQF[PW0PW8IX] = PW0PW06.PW0PWRQF[PW0PW6IX]; /* selqty fc*/
  PW0PW08.PW0PWRQR[PW0PW8IX] = PW0PW06.PW0PWRQR[PW0PW6IX]; /* selqty rp*/

  PW0PW05.PW0PW5IX = PW0PW05.PW0PW5IX + 1; /* increment w05 index*/
  PW0PW06.PW0PW6IX = PW0PW06.PW0PW6IX + 1; /* increment w06 index*/
  PW0PW08.PW0PW8IX = PW0PW08.PW0PW8IX + 1; /* increment w08 index*/

  /* ldavi3 - increase to 990*/
  if (PW0PW08.PW0PW8IX > 990) /* table max*/
    PW0PW08.PW0PW8IX = 990; /* table max*/
    PW0PW00.PW0PWWAR = 304; /* table overflow*/
    TA1REC.TA1PGMNO = "148";
    return; /* return to prev process*/
  end
end // end PW0P148

// sort pool and sel
Function PW0P150()

  PW0PW08.PW0PW8IX = 1; /* first occurence*/
  PW0PW07.PW0PW7IX = 1; /* first occurence*/
  PW0PW02.PW0PW2IX = 1; /* first occurence*/

  while (PW0PW08.PW0PW8IX <= PW0PW08.PW0PW8MX /* pw0pw08 array*/
   || PW0PW07.PW0PW7IX <= PW0PW07.PW0PW7MX) /* pw0pw07 array*/

  /* ldavi3 - increase to 99*/
    if (PW0PW00.TA5TSQIX == 99) /* max 99 pages allowed*/
      PW0PW00.PW0PWWAR = 304; /* table overflow*/
      TA1REC.TA1PGMNO = "150"; /* application module*/
      return; /* return to prev processing*/
    end

    PW0P151(); /* combine w07 w08 into w02*/

    /* ------------------------------------------------------------*/
      /* If the page is full, add to temporary storage.*/
    /* ------------------------------------------------------------*/
    if (PW0PW02.PW0PW2IX > 10) /* page is full*/
      PW0PW02.PW0PW2MX = PW0PW02.PW0PW2IX - 1; /* total lines*/
      PW0PS04(); /* add page to temporary storage*/

      set PW0PW02 empty; /* initialize w02*/
      PW0PW02.PW0PW2IX = 1; /* w02 index*/

    end

  end


   /* ------------------------------------------------------------*/
    /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (PW0PW02.PW0PW2IX > 1) /* page is full*/
    PW0PW02.PW0PW2MX = PW0PW02.PW0PW2IX - 1; /* total lines*/
    PW0PS04(); /* add page to temporary storage*/
  end

    /* move totals to w03*/

  PW0PW03.PW0PWSHT = PW0PW03.PW0PWSHT + PW0PW08.PW0PWSHT;
                                   /* total spcl hndl*/
  PW0PW03.PW0PWTHW = PW0PW03.PW0PWTHW + PW0PW08.PW0PWTHW;
                                   /* total spcl hndl*/
  PW0PW03.PW0PWTOF = PW0PW03.PW0PWTOF + PW0PW08.PW0PWTOF;
                                   /* total selord fc*/
  PW0PW03.PW0PWTOR = PW0PW03.PW0PWTOR + PW0PW08.PW0PWTOR;
                                   /* total selord rp*/
  PW0PW03.PW0PWTQF = PW0PW03.PW0PWTQF + PW0PW08.PW0PWTQF;
                                   /* total selqty fc*/
  PW0PW03.PW0PWTQR = PW0PW03.PW0PWTQR + PW0PW08.PW0PWTQR;
                                   /* total selqty rp*/


end // end PW0P150

// sort pool and sel
Function PW0P151()

   /* check DNSB dates*/

  if (PW0PW08.OP1DSBDT[PW0PW8IX] < PW0PW07.OP1DSBDT[PW0PW7IX] /* DNSB*/
   && PW0PW08.PW0PW8IX <= PW0PW08.PW0PW8MX)                   /* more pw0pw08 array*/

    PW0P154(); /* move w08 selord to w02*/

  else
    if (PW0PW08.OP1DSBDT[PW0PW8IX] > PW0PW07.OP1DSBDT[PW0PW7IX] /* DNSB*/
     && PW0PW07.PW0PW7IX <= PW0PW07.PW0PW7MX)                   /* more pw0pw07 array*/

      PW0P156(); /* move w07 selqty to w02*/

    else
      if (PW0PW08.OP1DSBDT[PW0PW8IX] == PW0PW07.OP1DSBDT[PW0PW7IX] /* DNSB*/
       && PW0PW08.PW0PW8IX <= PW0PW08.PW0PW8MX                     /* more pw0pw08 array*/
       && PW0PW07.PW0PW7IX <= PW0PW07.PW0PW7MX)                    /* more pw0pw07 array*/

        PW0P152(); /* add w08 selord + w07 selqty to w02*/

      else
        if (PW0PW08.PW0PW8IX > PW0PW08.PW0PW8MX /* no more pw0pw08*/
         && PW0PW07.PW0PW7IX <= PW0PW07.PW0PW7MX) /* more pw0pw07*/
          PW0P156(); /* move w07 selqty to w02*/

        else
          if (PW0PW07.PW0PW7IX > PW0PW07.PW0PW7MX /* no more pw0pw07*/
           && PW0PW08.PW0PW8IX <= PW0PW08.PW0PW8MX) /* more pw0pw08*/
            PW0P154(); /* move w08 selord to w02*/

          end

        end
      end
    end
  end

end // end PW0P151

// sort pool and sel
Function PW0P152()

   /* Check carrier code*/

  if (PW0PW08.TF1CARCD[PW0PW8IX] < PW0PW07.TF1CARCD[PW0PW7IX] /* carr*/
   && PW0PW08.PW0PW8IX <= PW0PW08.PW0PW8MX)                   /* more pw0pw08 array*/

    PW0P154(); /* move w08 selord to w02*/

  else
    if (PW0PW08.TF1CARCD[PW0PW8IX] > PW0PW07.TF1CARCD[PW0PW7IX] /* carr*/
     && PW0PW07.PW0PW7IX <= PW0PW07.PW0PW7MX)                   /* more pw0pw07 array*/

      PW0P156(); /* move w07 selqty to w02*/

    else
      if (PW0PW08.TF1CARCD[PW0PW8IX] == PW0PW07.TF1CARCD[PW0PW7IX]) /* carr*/

        PW0P158(); /* add w08 selord + w07 selqty to w02*/

      end
    end
  end

end // end PW0P152

// move selord w08 to w02
Function PW0P154()

  PW0PW02.OP1DSBDT[PW0PW2IX] = PW0PW08.OP1DSBDT[PW0PW8IX]; /* DNSB*/
  PW0PW02.TF1CARCD[PW0PW2IX] = PW0PW08.TF1CARCD[PW0PW8IX]; /* carr cd*/
  PW0PW02.PW0PWSHQ[PW0PW2IX] = PW0PW08.PW0PWSHQ[PW0PW8IX];
                                   /* spcl qty*/
  PW0PW02.PW0PWOQF[PW0PW2IX] = PW0PW08.PW0PWOQF[PW0PW8IX]; /* qty fc*/
  PW0PW02.PW0PWOQR[PW0PW2IX] = PW0PW08.PW0PWOQR[PW0PW8IX]; /* qty rp*/
  PW0PW02.PW0PWRQF[PW0PW2IX] = PW0PW08.PW0PWRQF[PW0PW8IX]; /* qty fc*/
  PW0PW02.PW0PWRQR[PW0PW2IX] = PW0PW08.PW0PWRQR[PW0PW8IX]; /* qty rp*/

  PW0PW08.PW0PW8IX = PW0PW08.PW0PW8IX + 1; /* increment w08 index*/
  PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX + 1; /* increment w02 index*/

end // end PW0P154

// move selqty w07 to w02
Function PW0P156()
  PW0PW02.OP1DSBDT[PW0PW2IX] = PW0PW07.OP1DSBDT[PW0PW7IX]; /* DNSB*/
  PW0PW02.TF1CARCD[PW0PW2IX] = PW0PW07.TF1CARCD[PW0PW7IX]; /* carr cd*/
  PW0PW02.PW0PWPFC[PW0PW2IX] = PW0PW07.PW0PWPFC[PW0PW7IX]; /* reg fc*/
  PW0PW02.PW0PWPRP[PW0PW2IX] = PW0PW07.PW0PWPRP[PW0PW7IX]; /* reg rp*/
  /* -------------------------------------------------------------------*/
  /* -  ldavi3*/
  /* -  if pick planning screen - call io subroutine to sum up the*/
  /* -  totals that have been pick selected for this carrier. then*/
  /* -  subtract those totals from the amounts available to pick plan.*/
  /* -------------------------------------------------------------------*/
  if (PKWREC.PKWSELSW == "PP")
    PWMREC.TF1CARCD = PW0PW07.TF1CARCD[PW0PW7IX]; /* carrier id*/
    PWMREC.OP1DSBDT = PW0PW07.OP1DSBDT[PW0PW7IX]; /* dnsb date*/
    PWMREC.PK-SEL-TYP-CD = " 2";
    PW0PS39(); /* call subroutine to get select by qty*/
                                   /* that has been pick scheduled*/
    PW0PW02.PW0PWPFC[PW0PW2IX] = PW0PW02.PW0PWPFC[PW0PW2IX] -     PWMREC.PKHPVSFC; /* subtract picked amt. from plan amt*/
    if (PW0PW02.PW0PWPFC[PW0PW2IX] < 0) /* if negative number*/
      PW0PW02.PW0PWPFC[PW0PW2IX] = 0; /* display 0 on screen*/
    end
    PW0PW02.PW0PWPRP[PW0PW2IX] = PW0PW02.PW0PWPRP[PW0PW2IX] -     PWMREC.PKHPVSRP; /* subtract pick amt. from pool amt*/
    if (PW0PW02.PW0PWPRP[PW0PW2IX] < 0) /* if negative number*/
      PW0PW02.PW0PWPRP[PW0PW2IX] = 0; /* display 0 on screen*/
    end
  end

  PW0PW07.PW0PW7IX = PW0PW07.PW0PW7IX + 1; /* increment w07 index*/
  PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX + 1; /* increment w02 index*/

end // end PW0P156

// w08 selor + w07 selqt = w02
Function PW0P158()
  PW0PW02.OP1DSBDT[PW0PW2IX] = PW0PW07.OP1DSBDT[PW0PW7IX]; /* DNSB*/
  PW0PW02.TF1CARCD[PW0PW2IX] = PW0PW07.TF1CARCD[PW0PW7IX]; /* carr cd*/
  PW0PW02.PW0PWPFC[PW0PW2IX] = PW0PW07.PW0PWPFC[PW0PW7IX]; /* pool fc*/
  PW0PW02.PW0PWPRP[PW0PW2IX] = PW0PW07.PW0PWPRP[PW0PW7IX]; /* pool rp*/

  /* -----------------------------------------------------------------*/
  /* ldavi3*/
  /* if pick planning screen - call io subroutine to sum up the total*/
  /* that has been pick scheduled. then subtract that amount from the*/
  /* available amounts on the pick plan screen.*/
  /* -----------------------------------------------------------------*/
  if (PKWREC.PKWSELSW == "PP")
    PWMREC.TF1CARCD = PW0PW07.TF1CARCD[PW0PW7IX]; /* carrier id*/
    PWMREC.OP1DSBDT = PW0PW07.OP1DSBDT[PW0PW7IX]; /* dnsb date*/
    PWMREC.PK-SEL-TYP-CD = " 2";
    PW0PS39(); /* call subroutine to get select by qty*/
                                   /* that has been scheduled*/
    PW0PW02.PW0PWPFC[PW0PW2IX] = PW0PW02.PW0PWPFC[PW0PW2IX] -     PWMREC.PKHPVSFC; /* compute full case*/
    if (PW0PW02.PW0PWPFC[PW0PW2IX] < 0) /* if negative number*/
      PW0PW02.PW0PWPFC[PW0PW2IX] = 0; /* display 0 on screen*/
    end
    PW0PW02.PW0PWPRP[PW0PW2IX] = PW0PW02.PW0PWPRP[PW0PW2IX] -     PWMREC.PKHPVSRP; /* compute full case*/
    if (PW0PW02.PW0PWPRP[PW0PW2IX] < 0) /* if negative number*/
      PW0PW02.PW0PWPRP[PW0PW2IX] = 0; /* display 0 on screen*/
    end
  end

  PW0PW02.PW0PWSHQ[PW0PW2IX] = PW0PW08.PW0PWSHQ[PW0PW8IX]; /* spcl hndl*/
  PW0PW02.PW0PWOQF[PW0PW2IX] = PW0PW08.PW0PWOQF[PW0PW8IX]; /* ord fc*/
  PW0PW02.PW0PWOQR[PW0PW2IX] = PW0PW08.PW0PWOQR[PW0PW8IX]; /* ord rp*/
  PW0PW02.PW0PWRQF[PW0PW2IX] = PW0PW08.PW0PWRQF[PW0PW8IX]; /* ns qty fc*/
  PW0PW02.PW0PWRQR[PW0PW2IX] = PW0PW08.PW0PWRQR[PW0PW8IX]; /* ns qty rp*/

  PW0PW07.PW0PW7IX = PW0PW07.PW0PW7IX + 1; /* increment w07 index*/
  PW0PW08.PW0PW8IX = PW0PW08.PW0PW8IX + 1; /* increment w08 index*/
  PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX + 1; /* increment w02 index*/

end // end PW0P158

// Format and converse the map
Function PW0P200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0PW00.PW0PWMSG = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWDTF == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0PW00.PW0PWMPF == "Y") /* Map must be formatted*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW0P-21002(); /* Format the data on the map*/
      else
        PW0P-21001(); /* Format the data on the map*/
      end
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* pick planning*/
    PW0P-20002();
  else
    PW0P-20001(); /* picking*/
  end

end // end PW0P200

// Check attention identifier
Function PW0P300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PW0PW00.PW0PWPAG = PW0PW00.XXXTSPAG; /* hold current page*/

    converseLib.clearScreen();
     /* refresh map*/
    converseLib.clearScreen();
     /* refresh map*/
    PW0PS02(); /* purge temp storage and map changes*/

    PW0PW00.PW0PWDTF = "Y"; /* request for data*/
    PW0PW00.PW0PWMPF = "Y"; /* format screen m001*/
    PW0PW00.PW0PWPGF = "Y"; /* redisplay current page*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0PM002.CATOAP == "PW0P") /* FAST PATH to itself*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        TA1REC.TA1PGMNO = "300"; /* Module identification*/
        converseLib.validationFailed(001); /* Indicate PF key not valid*/
        set PW0PM002.CATOAP cursor, bold; /* Highlight*/
        exit stack; /* Exit to display map*/

      end
    end
  else
    if (PW0PM001.CATOAP == "PW0P") /* FAST PATH to itself*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/

        TA1REC.TA1PGMNO = "300"; /* Module identification*/
        converseLib.validationFailed(001); /* Indicate PF key not valid*/
        set PW0PM001.CATOAP cursor, bold; /* Highlight*/
        exit stack; /* Exit to display map*/

      end
    end
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW0PM002.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        PW0PS02(); /* purge temp storage*/

        XSPKS01(); /* Exit to another application*/

        PW0PW00.PW0PWDTF = "Y"; /* request for data*/
        PW0PW00.PW0PWMPF = "N"; /* request format map*/
        TA1REC.TA1PGMNO = "300"; /* Module identification*/
        converseLib.validationFailed(1); /* invalid fast path request*/

        set PW0PM002.CATOAP cursor, bold; /* Highlight*/
      else

        TA1REC.TA1PGMNO = "300"; /* Module identification*/
        set PW0PM002.CATOAP cursor, bold; /* Highlight*/
        converseLib.validationFailed(12); /* Indicate PF key not valid*/

      end
      exit stack; /* Exit to display map*/
    end
  else
    if (PW0PM001.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        PW0PS02(); /* purge temp storage*/

        XSPKS01(); /* Exit to another application*/

        PW0PW00.PW0PWDTF = "Y"; /* request for data*/
        PW0PW00.PW0PWMPF = "N"; /* request format map*/
        TA1REC.TA1PGMNO = "300"; /* Module identification*/
        converseLib.validationFailed(1); /* invalid fast path request*/

        set PW0PM001.CATOAP cursor, bold; /* Highlight*/
      else

        TA1REC.TA1PGMNO = "300"; /* Module identification*/
        set PW0PM001.CATOAP cursor, bold; /* Highlight*/
        converseLib.validationFailed(12); /* Indicate PF key not valid*/

      end
      exit stack; /* Exit to display map*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf19) /* or PF19 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD00"; /* Application find code*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CAITEM = "PW0PM002"; /* Map name*/
      else
        COMMAREA.CAITEM = "PW0PM001"; /* Map name*/
      end
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PW0V"; /* Application find code*/
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
      else
        if (PKWREC.PKWSELSW == "PP") /* pick planning*/
          COMMAREA.CATOAP = "PW0W"; /* Application find code*/
          COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
        end
      end
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PW0J"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "PW0M"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PW0X"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      COMMAREA.CATOAP = "PW06"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    PW0PS02(); /* purge temp storage*/

    XSPKS01(); /* Exit to another application*/

    COMMAREA.CAITEM = " "; /* clear map name from item*/
    PW0PW00.PW0PWDTF = "N"; /* request data*/
    PW0PW00.PW0PWMPF = "Y"; /* format map*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8)  /* pf8 was not pressed*/

    TA1REC.TA1PGMNO = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end PW0P300

// Reset highlighted fields
Function PW0P400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    set PW0PM002.XDVCD initialAttributes; /* division code*/
    set PW0PM002.XBCCD initialAttributes; /* brand code*/
    set PW0PM002.PW0PMFMM initialAttributes; /* dnsb from month*/
    set PW0PM002.PW0PMFDD initialAttributes; /* dnsb from day*/
    set PW0PM002.PW0PMFYY initialAttributes; /* dnsb from year*/
    set PW0PM002.PW0PMTMM initialAttributes; /* dnsb to month*/
    set PW0PM002.PW0PMTDD initialAttributes; /* dnsb to day*/
    set PW0PM002.PW0PMTYY initialAttributes; /* dnsb to year*/

    PW0PW02.PW0PW2IX = 1; /* initialize line index*/

    while (PW0PW02.PW0PW2IX <= PW0PW02.PW0PW2MX) /* until last line*/
      set PW0PM002.PW0PMACT[PW0PW2IX] normal; /* reset action*/
      set PW0PM002.PW0PMRQF[PW0PW2IX] normal; /* reset reg full case*/
      set PW0PM002.PW0PMRQR[PW0PW2IX] normal; /* reset reg repack*/
      PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX + 1; /* increment index*/
    end

    set PW0PM002.CATOAP initialAttributes; /* option*/
    set PW0PM002.CAITEM initialAttributes; /* item*/

  else
    set PW0PM001.XDVCD initialAttributes; /* division code*/
    set PW0PM001.XBCCD initialAttributes; /* brand code*/
    set PW0PM001.PW0PMFMM initialAttributes; /* dnsb from month*/
    set PW0PM001.PW0PMFDD initialAttributes; /* dnsb from day*/
    set PW0PM001.PW0PMFYY initialAttributes; /* dnsb from year*/
    set PW0PM001.PW0PMTMM initialAttributes; /* dnsb to month*/
    set PW0PM001.PW0PMTDD initialAttributes; /* dnsb to day*/
    set PW0PM001.PW0PMTYY initialAttributes; /* dnsb to year*/

    PW0PW02.PW0PW2IX = 1; /* initialize line index*/

    while (PW0PW02.PW0PW2IX <= PW0PW02.PW0PW2MX) /* until last line*/
      set PW0PM001.PW0PMACT[PW0PW2IX] normal; /* reset action*/
      set PW0PM001.PW0PMRQF[PW0PW2IX] normal; /* reset reg full case*/
      set PW0PM001.PW0PMRQR[PW0PW2IX] normal; /* reset reg repack*/
      PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX + 1; /* increment index*/
    end

    set PW0PM001.CATOAP initialAttributes; /* option*/
    set PW0PM001.CAITEM initialAttributes; /* item*/

  end


end // end PW0P400

// Verify the entered data
Function PW0P500()
   /* ------------------------------------------------------------*/
   /* verify the entered data.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0P-50002();
  else
    PW0P-50001();
  end


end // end PW0P500

// validate key fields
Function PW0P520()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    if (PW0PW00.XXXTSPAG < 2) /* no previous pages*/

      TA1REC.TA1PGMNO = "520"; /* Module identification*/
      converseLib.validationFailed(37); /* No previous page to display*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (PW0PW00.XXXTSPAG >= PW0PW00.TA5TSQIX) /* no more pages*/

      TA1REC.TA1PGMNO = "520"; /* Module identification*/
      converseLib.validationFailed(38); /* No more pages to display*/

    end
  end

end // end PW0P520

// validate action field
Function PW0P530()
  PW0PW00.PW0PWQTF = "N"; /* Update qty flag*/

  PW0PW00.PW0PWPAG = PW0PW00.XXXTSPAG; /* current page*/

  PW0P532(); /* validate inquiry on temp storage*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0P-53402(); /* validate inquiry on m002*/
  else
    PW0P-53401(); /* validate inquiry on m001*/
  end


end // end PW0P530

// validate action on temp strg
Function PW0P532()

  PW0PW00.PW0PWPAG = PW0PW00.XXXTSPAG; /* hold current page*/
  PW0PW00.XXXTSPAG = 1; /* set temp storage to 1*/

  while (PW0PW00.XXXTSPAG <= PW0PW00.TA5TSQIX) /* all temp storage*/
    if (PW0PW00.XXXTSPAG == PW0PW00.PW0PWPAG) /* current page*/
      /* next  sentence*/
    else
      PW0PS03(); /* read temp storage*/
      PW0PW00.PW0PWIDX = 1; /* set line index to 1*/
      while (PW0PW00.PW0PWIDX <= PW0PW02.PW0PW2MX) /* lines on map*/

        if (PW0PW02.PW0PWACT[PW0PWIDX] == "I") /* inquiry*/
          PW0PW00.PW0PWIQF = "Y"; /* inquiry flag*/
        end

        if (PW0PW02.PW0PWACT[PW0PWIDX] == "A" /* add*/
         || PW0PW02.PW0PWACT[PW0PWIDX] == "D" /* delete*/
         || PW0PW02.PW0PWACT[PW0PWIDX] == "C") /* change*/
          PW0PW00.PW0PWQTF = "Y"; /* update quantities*/
        end

        PW0PW00.PW0PWIDX = PW0PW00.PW0PWIDX + 1; /* increment map line*/
      end
    end
    PW0PW00.XXXTSPAG = PW0PW00.XXXTSPAG + 1; /* increment temp storage*/
  end

   /* read current page from temporary storage*/

  PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* hold current page*/
  if (PW0PW00.PW0PWPAG > 0) /* page to display*/
    PW0PS03(); /* read temp storage*/
  end
end // end PW0P532

// pass vaild input
Function PW0P600()

  PW0PW00.PW0PWMPF = "Y"; /* format map*/
  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0PW01.XWHCD = PW0PM002.XWHCD; /* warehouse*/
    COMMAREA.XWHCD = PW0PM002.XWHCD;
  else
    PW0PW01.XWHCD = PW0PM001.XWHCD; /* warehouse*/
    COMMAREA.XWHCD = PW0PM001.XWHCD;
  end


  PKWREC.XDVCD[1] = PW0PW01.XDVCD; /* division code*/
  PKWREC.XBCCD[1] = PW0PW01.XBCCD; /* brand code*/

  if (PW0PW00.PW0PWCHF == "Y")
    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0PW01.PW0PWFMM = PW0PM002.PW0PMFMM; /* DNSB from month*/
      PW0PW01.PW0PWFDD = PW0PM002.PW0PMFDD; /* DNSB from day*/
      PW0PW01.PW0PWFYY = PW0PM002.PW0PMFYY; /* DNSB from year*/

      if (PW0PM002.PW0PMFMM == 0 /* DNSB from month*/
       && PW0PM002.PW0PMFDD == 0 /* DNSB from day*/
       && PW0PM002.PW0PMFYY == 0) /* DNSB from year*/
        PW0PW01.PW0PWFCC = 0; /* DNSB from century*/
      else
        if (PW0PM002.PW0PMFYY > 56)
          PW0PW01.PW0PWFCC = 19; /* 19 century*/
        else
          PW0PW01.PW0PWFCC = 20; /* 20 century*/
        end
      end

      PW0PW01.PW0PWTMM = PW0PM002.PW0PMTMM; /* DNSB to month*/
      PW0PW01.PW0PWTDD = PW0PM002.PW0PMTDD; /* DNSB to day*/
      PW0PW01.PW0PWTYY = PW0PM002.PW0PMTYY; /* DNSB to year*/

      if (PW0PM002.PW0PMTMM == 0 /* DNSB to month*/
       && PW0PM002.PW0PMTDD == 0 /* DNSB to day*/
       && PW0PM002.PW0PMTYY == 0) /* DNSB to year*/
        PW0PW01.PW0PWTCC = 0; /* 19 century*/
      else
        if (PW0PM002.PW0PMTYY > 56)
          PW0PW01.PW0PWTCC = 19; /* 19 century*/
        else
          PW0PW01.PW0PWTCC = 20; /* 20 century*/
        end
      end
      PW0PW00.PW0PWDTF = "Y"; /* request for data*/

      PW0PW00.PW0PWTOD = PW0PW01.PW0PWTDT; /* DNSB to date (bin)*/
      PW0PW00.PW0PWFRD = PW0PW01.PW0PWFDT; /* DNSB from date (bin)*/
      set PWKREC empty; /* initialize*/
      PWKREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
      PWKREC.XWHABRV = PW0PW01.XWHABRV; /* warehouse description*/
      PKWREC.PKWFRMDT = PW0PW01.PW0PWFDT; /* DNSB from date*/
      PWKREC.PWKFRDT = PW0PW01.PW0PWFDT; /* DNSB from date*/
      PKWREC.PKWTODT = PW0PW01.PW0PWTDT; /* P & H to date*/
      PWKREC.PWKTODT = PW0PW01.PW0PWTDT; /* P & H to date*/

      PWKREC.PWKARMAX = 0; /* max array*/
      PKWREC.PKWARRAY[1] = PWKREC.PWKARRAY; /* array*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/

      return;

    else
      PW0PW01.PW0PWFMM = PW0PM001.PW0PMFMM; /* DNSB from month*/
      PW0PW01.PW0PWFDD = PW0PM001.PW0PMFDD; /* DNSB from day*/
      PW0PW01.PW0PWFYY = PW0PM001.PW0PMFYY; /* DNSB from year*/

      if (PW0PM001.PW0PMFMM == 0 /* DNSB from month*/
       && PW0PM001.PW0PMFDD == 0 /* DNSB from day*/
       && PW0PM001.PW0PMFYY == 0) /* DNSB from year*/
        PW0PW01.PW0PWFCC = 0; /* DNSB from century*/
      else
        if (PW0PM001.PW0PMFYY > 56)
          PW0PW01.PW0PWFCC = 19; /* 19 century*/
        else
          PW0PW01.PW0PWFCC = 20; /* 20 century*/
        end
      end

      PW0PW01.PW0PWTMM = PW0PM001.PW0PMTMM; /* DNSB to month*/
      PW0PW01.PW0PWTDD = PW0PM001.PW0PMTDD; /* DNSB to day*/
      PW0PW01.PW0PWTYY = PW0PM001.PW0PMTYY; /* DNSB to year*/

      if (PW0PM001.PW0PMTMM == 0 /* DNSB to month*/
       && PW0PM001.PW0PMTDD == 0 /* DNSB to day*/
       && PW0PM001.PW0PMTYY == 0) /* DNSB to year*/
        PW0PW01.PW0PWTCC = 0; /* 19 century*/
      else
        if (PW0PM001.PW0PMTYY > 56)
          PW0PW01.PW0PWTCC = 19; /* 19 century*/
        else
          PW0PW01.PW0PWTCC = 20; /* 20 century*/
        end
      end
      PW0PW00.PW0PWDTF = "Y"; /* request for data*/

      PW0PW00.PW0PWTOD = PW0PW01.PW0PWTDT; /* DNSB to date (bin)*/
      PW0PW00.PW0PWFRD = PW0PW01.PW0PWFDT; /* DNSB from date (bin)*/
      set PWKREC empty; /* initialize*/
      PWKREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
      PWKREC.XWHABRV = PW0PW01.XWHABRV; /* warehouse description*/
      PKWREC.PKWFRMDT = PW0PW01.PW0PWFDT; /* DNSB from date*/
      PWKREC.PWKFRDT = PW0PW01.PW0PWFDT; /* DNSB from date*/
      PKWREC.PKWTODT = PW0PW01.PW0PWTDT; /* P & H to date*/
      PWKREC.PWKTODT = PW0PW01.PW0PWTDT; /* P & H to date*/

      PWKREC.PWKARMAX = 0; /* max array*/
      PKWREC.PKWARRAY[1] = PWKREC.PWKARRAY; /* array*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/

      return;

    end
  end

  PW0P610(); /* move map fields to w02*/
  PW0P620(); /* move map fields to w09*/


   /* -------------------------------------------------*/
   /* Request to scroll back.*/
   /* -------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* scroll back*/
    PW0PW00.XXXTSPAG = PW0PW00.XXXTSPAG - 1; /* decrement page number*/
    exit stack; /* display previous page*/
  end

   /* -------------------------------------------------*/
   /* Request to scroll forward.*/
   /* -------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* scroll forward*/
    PW0PW00.XXXTSPAG = PW0PW00.XXXTSPAG + 1; /* increment page number*/
    exit stack; /* display next page*/
  end

   /* ***********************************************************************/
   /* update for extra non-special section*/
   /* ***********************************************************************/

  if (PW0PW09.PW0PW-QTY-ACT == "D") /* delete*/
    PW0PS38(); /* sel unq dpick.vselqt01*/

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
            /* --- row not found to delete -------------------------*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      PW0PW00.PW0PWUPE = "Y"; /* update error*/
      TA1REC.TA1PGMNO = "600"; /* module identification*/
      converseLib.validationFailed(201); /* no record found to delete*/
      set PW0PM001.PW0P-QTY-ACT bold;
      set PW0PM002.PW0P-QTY-ACT bold;
      exit stack; /* exit to display map*/
    end
    PW0PS35(); /* delete selqt*/
    PW0PW00.PW0PWUPF = "Y"; /* set update flag on*/
  end

  if (PW0PW09.PW0PW-QTY-ACT == "C") /* change*/
    PW0PS38(); /* sel unq dpick.vselqt01*/
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
            /* --- row not found to change---------------------------*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      PW0PW00.PW0PWUPE = "Y"; /* update error*/
      TA1REC.TA1PGMNO = "600"; /* module identification*/
      converseLib.validationFailed(8); /* no record found*/
      set PW0PM001.PW0P-QTY-ACT bold;
      set PW0PM002.PW0P-QTY-ACT bold;
      exit stack; /* exit to display map*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* normal*/
        PW0PS36(); /* change selqt*/
        PW0PW00.PW0PWUPF = "Y"; /* set update flag on*/
      end
    end
  end

  if (PW0PW09.PW0PW-QTY-ACT == "A") /* add*/
    PW0PS38(); /* sel unq dpick.vselqt01*/
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/

      PW0PS37(); /* add selqt*/
      PW0PW00.PW0PWUPF = "Y"; /* set update flag on*/

    else
      if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
              /* --- row found - cannot add ------------------------*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back all changes*/
        PW0PW00.PW0PWUPE = "Y"; /* update error*/
        TA1REC.TA1PGMNO = "600"; /* module identification*/
        converseLib.validationFailed(263); /* record already exists*/
        set PW0PM001.PW0P-QTY-ACT bold;
        set PW0PM002.PW0P-QTY-ACT bold;
        exit stack; /* exit to display map*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* request order inquiry*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWIQF == "Y") /* inquiry flag*/
    PW0PW00.PW0PWIQF = "N"; /* reset inquiry flag*/

    PW0PW00.PW0PWPWX = 0; /* clear pwkarray index*/
    PW0PW00.XXXTSPAG = 1; /* set temp storage to 1*/
    while (PW0PW00.XXXTSPAG <= PW0PW00.TA5TSQIX) /* all temp storage*/

      PW0PS03(); /* read temp storage*/
      PW0PW00.PW0PWIDX = 1; /* set line index to 1*/
      while (PW0PW00.PW0PWIDX <= PW0PW02.PW0PW2MX) /* lines on map*/

        if (PW0PW02.PW0PWACT[PW0PWIDX] == "I") /* select quantities*/
          PW0PW00.PW0PWPWX = PW0PW00.PW0PWPWX + 1; /* pwkarray idx*/
          PWKREC.PWKORACT[PW0PWPWX] = "I";
          PWKREC.OP1DSBDT[PW0PWPWX] = PW0PW02.OP1DSBDT[PW0PWIDX];
          PWKREC.TF1CARCD[PW0PWPWX] = PW0PW02.TF1CARCD[PW0PWIDX];

          if (PW0PW00.PW0PWPWX > 25) /* max array*/
            PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* current page*/
            TA1REC.TA1PGMNO = "600"; /* table overflo*/
            converseLib.validationFailed(304); /* table overflo*/
            exit stack; /* exit to display map*/
          end
        end

        PW0PW00.PW0PWIDX = PW0PW00.PW0PWIDX + 1; /* increment map line*/
      end
      PW0PW00.XXXTSPAG = PW0PW00.XXXTSPAG + 1; /* increment temp storage*/

    end

    if (converseVar.validationMsgNum == 0)

      COMMAREA.CATOAP = "PW0Q"; /* SPCL HNDL ORD SEL*/
      PW0PS02(); /* purge temp storage*/

      PWKREC.PWKARMAX = PW0PW00.PW0PWPWX; /* max array*/
      PKWREC.PKWARRAY[1] = PWKREC.PWKARRAY; /* array*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/

      XSPKS01(); /* exit to another appl*/
           /* --- IF REQUEST FAILS, display error message ------------*/

      COMMAREA.CATOAP = " "; /* TO APPLICATION*/

    end
  end

   /* ------------------------------------------------------------*/
   /* quantities selected*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWQTF == "Y") /* quantities selected flag*/

    PW0PW00.PW0PWQTF = "N"; /* set qty selected flag off*/
    PW0PW00.PW0PWUPE = "N"; /* update error flag*/
    PW0PW00.PW0PWMPF = "Y"; /* format map*/
    PW0PW00.PW0PWDTF = "Y"; /* request for data*/

    PW0PW00.XXXTSPAG = 1; /* set temp storage to 1*/

    while (PW0PW00.XXXTSPAG <= PW0PW00.TA5TSQIX) /* all temp storage*/
      PW0PS03(); /* read temp storage*/
      PW0PW00.PW0PWIDX = 1; /* set line index to 1*/
      while (PW0PW00.PW0PWIDX <= PW0PW02.PW0PW2MX) /* lines on map*/

        /* ------------------------------------------------------*/
        /* DELETE DPICK.VSELQT01*/
        /* ------------------------------------------------------*/
        if (PW0PW02.PW0PWACT[PW0PWIDX] == "D") /* delete*/
          PW0PS17(); /* sel unq dpick.vselqt01*/
          if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
            /* --- row not found to delete -------------------------*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* roll back all changes*/
            PW0PW00.PW0PWUPE = "Y"; /* update error*/
            PW0PW00.PW0PWHIX = PW0PW00.PW0PWIDX; /* hold index*/
            TA1REC.TA1PGMNO = "600"; /* module identification*/
            converseLib.validationFailed(201); /* no record found to delete*/
            PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* current page*/
            exit stack; /* exit to display map*/
          end
          PW0PS21(); /* delete selqt*/
        end
        /* -----------------------------------------------------------*/
        /* CHANGE DPICK.VSELQT01*/
        /* -----------------------------------------------------------*/

        if (PW0PW02.PW0PWACT[PW0PWIDX] == "C") /* change*/
          PW0PS17(); /* sel unq dpick.vselqt01*/
          if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
            /* --- row not found to change---------------------------*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* roll back all changes*/
            PW0PW00.PW0PWUPE = "Y"; /* update error*/
            PW0PW00.PW0PWHIX = PW0PW00.PW0PWIDX; /* hold index*/
            TA1REC.TA1PGMNO = "600"; /* module identification*/
            converseLib.validationFailed(8); /* no record found*/
            PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* current page*/
            exit stack; /* exit to display map*/
          else
            if (SQLCA.VAGen_SQLCODE == 0) /* normal*/
              PW0PS18(); /* change selqt*/
            end
          end
        end

        /* ----------------------------------------------------------*/
        /* INSERT DPICK.VSELQT01*/
        /* ----------------------------------------------------------*/

        if (PW0PW02.PW0PWACT[PW0PWIDX] == "A") /* add*/
          PW0PS17(); /* sel unq dpick.vselqt01*/
          if (SQLCA.VAGen_SQLCODE == 100) /* not found*/

            PW0PS19(); /* add selqt*/

          else
            if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
              /* --- row found - cannot add ------------------------*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* roll back all changes*/
              PW0PW00.PW0PWUPE = "Y"; /* update error*/
              PW0PW00.PW0PWHIX = PW0PW00.PW0PWIDX; /* hold index*/
              TA1REC.TA1PGMNO = "600"; /* module identification*/
              converseLib.validationFailed(263); /* record already exists*/
              PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* current page*/
              exit stack; /* exit to display map*/
            end
          end
        end

        PW0PW00.PW0PWIDX = PW0PW00.PW0PWIDX + 1; /* increment map line*/
      end
      PW0PW00.XXXTSPAG = PW0PW00.XXXTSPAG + 1; /* increment temp storage*/
    end
    /* ------------------------------------------------*/
    /* redisplay current page.*/
    /* ------------------------------------------------*/
    PW0PW00.PW0PWUPF = "Y"; /* set update flag on*/

  end
    /* ------------------------------------------------*/
    /* commit all changes to protect resources.*/
    /* ------------------------------------------------*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit all changes*/
  PW0PW00.XXXTSPAG = PW0PW00.PW0PWPAG; /* display current page*/

end // end PW0P600

// move m001 to w02
Function PW0P610()
   /* ------------------------------------------------------------*/
   /* move the regular actection to w02 (temp storage)*/
   /* ------------------------------------------------------------*/

  PW0PW02.PW0PW2IX = 1;
  PW0PW00.PW0PWMDF = "N"; /* modified flag*/

  while (PW0PW02.PW0PW2IX <= PW0PW02.PW0PW2MX) /* process temp*/

     /* action has changed- save action, full case and*/
                          /* repack quantities in w02*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/

      if (PW0PM002.PW0PMACT[PW0PW2IX] != PW0PW02.PW0PWACT[PW0PW2IX])
        PW0PW02.PW0PWACT[PW0PW2IX] = PW0PM002.PW0PMACT[PW0PW2IX];
        PW0PW02.PW0PWRQR[PW0PW2IX] = PW0PM002.PW0PMRQR[PW0PW2IX];
        PW0PW02.PW0PWRQF[PW0PW2IX] = PW0PM002.PW0PMRQF[PW0PW2IX];
        PW0PW00.PW0PWMDF = "Y"; /* modified flag*/
      end

    else
      if (PW0PM001.PW0PMACT[PW0PW2IX] != PW0PW02.PW0PWACT[PW0PW2IX])
        PW0PW02.PW0PWACT[PW0PW2IX] = PW0PM001.PW0PMACT[PW0PW2IX];
        PW0PW02.PW0PWRQR[PW0PW2IX] = PW0PM001.PW0PMRQR[PW0PW2IX];
        PW0PW02.PW0PWRQF[PW0PW2IX] = PW0PM001.PW0PMRQF[PW0PW2IX];
        PW0PW00.PW0PWMDF = "Y"; /* modified flag*/
      end
    end

    PW0PW02.PW0PW2IX = PW0PW02.PW0PW2IX + 1; /* increment load*/

  end

  if (PW0PW00.PW0PWMDF == "Y") /* quantities entered*/
    PW0PS22(); /* update temp storage*/
  end

end // end PW0P610

// move m001 to w02
Function PW0P620()
   /* ------------------------------------------------------------*/
   /* move extra non-special section to storage (w09)*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK"
  )
    PW0PW09.PW0PW-QTY-FC = PW0PM002.PW0P-QTY-FC;
    PW0PW09.PW0PW-QTY-RP = PW0PM002.PW0P-QTY-RP;
    PW0PW09.PW0PW-QTY-ACT = PW0PM002.PW0P-QTY-ACT;

  else

    PW0PW09.PW0PW-QTY-FC = PW0PM001.PW0P-QTY-FC;
    PW0PW09.PW0PW-QTY-RP = PW0PM001.PW0P-QTY-RP;
    PW0PW09.PW0PW-QTY-ACT = PW0PM001.PW0P-QTY-ACT;

  end
end // end PW0P620

// get min Pack & Hold date
Function PW0PS01()

  XX0XS01(); /* get current date*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT; /* yyyymmdd*/
  PW0PW00.PW0PWCUR = XX0XW01.XX0XWDAT; /* current date yyyymmdd*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    TA2REC.TA2DYAOD = 2; /* add 2 days to current date*/
  else

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      TA2REC.TA2DYAOD = 3; /* add 3 days to current date*/
    end

  end /* ;*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      PW0PW00.PW0PWPHD = TA2REC.TA2GRGGN; /* yyyymmdd*/

      return; /* exit to display map*/

    else

      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "CALC P & H DATE";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      TA1REC.TA1PGMNO = "S01"; /* Module identification*/
      converseLib.validationFailed(29); /* System error occurred*/

      return; /* exit to display map*/

    end

  end

end // end PW0PS01

// purge temporary storage
Function PW0PS02()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0PW02 empty; /* M001 temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0PW00.TA5TSQIX = 0; /* Highest page number*/
  PW0PW00.XXXTSPAG = 0; /* work storage page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PW0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA5REC.TA5RTNCD == 0 /* and normal return code*/
     || TA5REC.TA5RTNCD == 4) /* and not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1PGMNO = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS02

// read temporary storage
Function PW0PS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PW0P"; /* Application identification*/
  PW0PW02.XXXTSLEN = PW0PW00.XXXTSLEN;
  TA5REC.TA5TSQIX = PW0PW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1PGMNO = "S03"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS03

// add page to temporary storage
Function PW0PS04()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0PW02.XXXTSLEN = PW0PW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = "PW0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (PW0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PW0P190 "; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      TA1REC.TA1MAP = "PW0PM002"; /* Map name*/
    else
      TA1REC.TA1MAP = "PW0PM001"; /* Map name*/
    end
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S04 "; /* Error location*/
    return; /* Return to previous process*/

  end

  PW0PW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

end // end PW0PS04

// select vpick.vselor01
Function PW0PS05()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* Clear row storage area*/

  PKHREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PKHREC.XDVCD = PW0PW01.XDVCD; /* division code*/
  PKHREC.XBCCD = PW0PW01.XBCCD; /* brand code*/
  PKHREC.PKURUNMD = PW0PW01.PKURUNMD;
  PKHREC.OP1DSBDT = -1; /* don't ship before date*/
  PKHREC.PK-SEL-TYP-CD = "*"; /* select type code*/

  try
    call "IO1740" ("S2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS05

// fetch next row dpick.vselor01
Function PW0PS06()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("N2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0PW00.PW0PWCRF = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0PS06

// close cursor select set
Function PW0PS07()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("C2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S07"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS07

// select vpick.vselqt01
Function PW0PS08()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* * ------------------------------------------------------------*/

  set PWMREC empty; /* Clear row storage area*/

  PWMREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PWMREC.PKURUNMD = PW0PW01.PKURUNMD; /* run mode*/

  if (PW0PW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0PW01.XDVCD;
  end

  if (PW0PW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0PW01.XBCCD;
  end

  PWMREC.OP1DSBDT = -1; /* DNSB*/
  PWMREC.TF1CARCD = "*"; /* carrier code*/
  PWMREC.XHDCD = "*"; /* handling code*/
  PWMREC.XGPCD = "*"; /* gpc code*/
  PWMREC.PK-SEL-TYP-CD = "*"; /* select type code*/

  try
    call "IO5500" ("S1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS08

// fetch next row dpick.vselqt01
Function PW0PS09()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("N1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0PW00.PW0PWCRF = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS09

// close cursor select set
Function PW0PS10()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("C1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S10"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS10

// select vpick.vpoolh01
Function PW0PS11()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/
  set PWIREC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PK4REC.XDVCD = PW0PW01.XDVCD; /* division code*/
  PK4REC.XBCCD = PW0PW01.XBCCD; /* brand code*/
  PK4REC.OP1DSBDT = -1; /* DNSB date*/

  PK4REC.PK4ORHLD = "*"; /* order hold flag*/
  PK4REC.PK4CUHLD = "*"; /* customer hold flag*/
  PK4REC.TF1CARCD = "*"; /* carrier code*/
  PK4REC.PK4SLIND = "*"; /* status field*/
  PK4REC.OP1SPHDF = "N"; /* special handling flag*/

  PWIREC.PWIFUNC = "S6"; /* function*/
  try
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sel set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS11

// fetch next row dpick.vpoolh01
Function PW0PS12()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("N6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PW0PM002.XBCCD == "*" /* ColeHaan*/
         && PK4REC.XBCCD == "08")
          PW0PW00.PW0PWVLD = "N"; /* not valid*/
        end
      else
        if (PW0PM001.XBCCD == "*" /* ColeHaan*/
         && PK4REC.XBCCD == "08")
          PW0PW00.PW0PWVLD = "N"; /* not valid*/
        end
      end

      if (PK4REC.XDVCD == "01" /* in-store promo order*/
       && PK4REC.XGPCD == "01")

        PW0PW00.PW0PWVLD = "N"; /* not valid*/
      end

      if (PK4REC.PK4STKTF == "Y") /* stock transfer*/
        PW0PW00.PW0PWVLD = "N"; /* not valid*/
      end

      if (PK4REC.XOTCD == "FV") /* basics order*/
        PW0PW00.PW0PWVLD = "N"; /* not valid*/
      end

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PK4REC.PK4SLIND == " " /* not processed yet*/
         || PK4REC.PK4SLIND == "S") /* selected*/
          /* next sentence*/
        else
          PW0PW00.PW0PWVLD = "N"; /* not valid*/
        end
      end

      if (PKWREC.PKWSELSW == "PP") /* pick planning*/
        if (PK4REC.PK4SLIND == " " /* not processed yet*/
         || PK4REC.PK4SLIND == "S" /* selected*/
         || PK4REC.PK4SLIND == "P") /* picked*/
          /* next sentence*/
        else
          PW0PW00.PW0PWVLD = "N"; /* not valid*/
        end
      end
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0PW00.PW0PWCRF = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS12

// close cursor vpick.vpoolh01
Function PW0PS13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("C6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S10"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS13

// select unq vpick.vselqt01
Function PW0PS17()
   /* ------------------------------------------------------------*/
   /* set up select quantity key*/
   /* ------------------------------------------------------------*/

  set PWMREC empty; /* initialize pwmrec*/
  PWMREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW0PW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = PW0PW02.OP1DSBDT[PW0PWIDX]; /* DNSB*/
  PWMREC.TF1CARCD = PW0PW02.TF1CARCD[PW0PWIDX]; /* carrier code*/
  PWMREC.XHDCD = " "; /* handling code*/

  if (PW0PW02.OP1DSBDT[PW0PWIDX] < PW0PW00.PW0PWPHD)
    PWMREC.PK-SEL-TYP-CD = " 2"; /* sel type code*/
  else
    PWMREC.PK-SEL-TYP-CD = " 4"; /* sel type code*/
  end

  if (PW0PW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0PW01.XDVCD;
  end

  if (PW0PW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0PW01.XBCCD;
  end

   /* ------------------------------------------------------------*/
   /* select unique selqt table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("S ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* select unq*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S17"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS17

// update vpick.vselqt01
Function PW0PS18()
   /* ------------------------------------------------------------*/
   /* Format the data from w02 into the table row.*/
   /* ------------------------------------------------------------*/

  PWMREC.PKHPVSFC = PW0PW02.PW0PWRQF[PW0PWIDX]; /* full case*/
  PWMREC.PKHPVSRP = PW0PW02.PW0PWRQR[PW0PWIDX]; /* full case*/
  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("U ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0PW00.PW0PWDTF = "Y"; /* Request for data switch*/

      TA1REC.TA1PGMNO = "S18"; /* Module identification*/
      converseLib.validationFailed(105); /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS18

// insert vselqt01
Function PW0PS19()
  set PWMREC empty; /* initialize row*/
  PWMREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW0PW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = PW0PW02.OP1DSBDT[PW0PWIDX]; /* DNSB*/
  PWMREC.XHDCD = " "; /* handling code*/
  PWMREC.TF1CARCD = PW0PW02.TF1CARCD[PW0PWIDX]; /* carrier code*/

  if (PW0PW02.OP1DSBDT[PW0PWIDX] < PW0PW00.PW0PWPHD)
    PWMREC.PK-SEL-TYP-CD = " 2"; /* sel type code*/
  else
    PWMREC.PK-SEL-TYP-CD = " 4"; /* sel type code*/
  end

  if (PW0PW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0PW01.XDVCD;
  end

  if (PW0PW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0PW01.XBCCD;
  end

  if (PW0PW02.PW0PWRQF[PW0PWIDX] == 0 /* qty full case*/
   && PW0PW02.PW0PWRQR[PW0PWIDX] == 0) /* qty repack*/
    PWMREC.PKHPVSFC = PW0PW02.PW0PWPFC[PW0PWIDX]; /* qty full case*/
    PWMREC.PKHPVSRP = PW0PW02.PW0PWPRP[PW0PWIDX]; /* qty repack*/
  else
    PWMREC.PKHPVSFC = PW0PW02.PW0PWRQF[PW0PWIDX]; /* qty full case*/
    PWMREC.PKHPVSRP = PW0PW02.PW0PWRQR[PW0PWIDX]; /* qty repack*/
  end

  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* add the row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("A ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TA1REC.TA1PGMNO = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0PS19

// select unq vpick.vcahld01
Function PW0PS20()
   /* ------------------------------------------------------------*/
   /* check pool header for select order*/
   /* ------------------------------------------------------------*/

  if (PW0PW00.PW0PWPLF == "Y" /* pool header already read*/
   || PW0PW00.PW0PWSQF == "Y") /* select qty*/
    /* next sentence*/
  else

    PW0PS23(); /* select unq dpick.vpoolh01*/

    if (PW0PW00.PW0PWVLD == "N") /* invalid pool header*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* check carrier table*/
   /* ------------------------------------------------------------*/

  PW0PS24(); /* open vpick.vcahld01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0PW00.PW0PWEOF = "N"; /* eof flag*/
    while (PW0PW00.PW0PWEOF == "N") /* more carrier*/
      PW0PS25(); /* fetch vpick.vcahld01*/
    end

  end

  PW0PS26(); /* close vpick.vcahld01*/

  if (PW0PW00.PW0PWVLD == "N") /* invalid carrier*/
    return;
  end

  if (PW0PW00.PW0PWSQF == "Y") /* select qty*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* check order table*/
   /* ------------------------------------------------------------*/

  PW0PS27(); /* open vpick.vorhld01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0PW00.PW0PWEOF = "N"; /* eof flag*/
    while (PW0PW00.PW0PWEOF == "N") /* more orders*/
      PW0PS28(); /* fetch vpick.vorhld01*/
    end

  end

  PW0PS29(); /* close vpick.vorhld01*/

  if (PW0PW00.PW0PWVLD == "N") /* invalid order*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* check customer table*/
   /* ------------------------------------------------------------*/

  PW0PS30(); /* open vpick.vcuhld01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0PW00.PW0PWEOF = "N"; /* eof flag*/
    while (PW0PW00.PW0PWEOF == "N") /* more customer*/
      PW0PS31(); /* fetch vpick.vcuhld01*/
    end

  end

  PW0PS32(); /* close vpick.vcuhld01*/

  if (PW0PW00.PW0PWVLD == "N") /* invalid customer*/
    return;
  end


end // end PW0PS20

// delete vpick.vselqt01
Function PW0PS21()
   /* ------------------------------------------------------------*/
   /* set up selqt01 key.*/
   /* ------------------------------------------------------------*/

  PWMREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW0PW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = PW0PW02.OP1DSBDT[PW0PWIDX]; /* DNSB*/
  PWMREC.TF1CARCD = PW0PW02.TF1CARCD[PW0PWIDX]; /* carrier code*/
  PWMREC.XHDCD = " "; /* handling code*/

  if (PW0PW02.OP1DSBDT[PW0PWIDX] < PW0PW00.PW0PWPHD)
    PWMREC.PK-SEL-TYP-CD = " 2"; /* select type code*/
  else
    PWMREC.PK-SEL-TYP-CD = " 4"; /* select type code*/
  end

  if (PW0PW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0PW01.XDVCD;
  end

  if (PW0PW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0PW01.XBCCD;
  end

   /* ------------------------------------------------------------*/
   /* delete table row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("D ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S21"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS21

// update temporary storage
Function PW0PS22()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  PW0PW02.XXXTSLEN = PW0PW00.XXXTSLEN;
  TA5REC.TA5TSQIX = PW0PW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1PGMNO = "S03"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS22

// select vpick.vpoolh01
Function PW0PS23()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/
  set PWIREC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PK4REC.PK1CUOID = PKHREC.PK1CUOID; /* order stktf id*/
  PK4REC.PK1NORID = PKHREC.PK1NORID; /* nike order id*/

  PWIREC.PWIFUNC = "S "; /* function*/
  try
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sel set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      if (PK4REC.XDVCD == "01" /* in-store promo*/
       && PK4REC.XGPCD == "01")

        PW0PW00.PW0PWVLD = "N"; /* not valid*/
      end

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PW0PM002.XBCCD == "*" /* ColeHaan*/
         && PK4REC.XBCCD == "08")
          PW0PW00.PW0PWVLD = "N"; /* not valid*/
        end
      else
        if (PW0PM001.XBCCD == "*" /* ColeHaan*/
         && PK4REC.XBCCD == "08")
          PW0PW00.PW0PWVLD = "N"; /* not valid*/
        end
      end

      if (PK4REC.PK4STKTF == "Y") /* stock transfers*/
        PW0PW00.PW0PWVLD = "N"; /* not valid*/
      end

      if (PK4REC.XOTCD == "FV") /* basics orders*/
        PW0PW00.PW0PWVLD = "N"; /* not valid*/
      end

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PK4REC.PK4SLIND == " " /* not processed yet*/
         || PK4REC.PK4SLIND == "S") /* selected*/
          /* next sentence*/
        else
          PW0PW00.PW0PWVLD = "N"; /* not valid*/
        end
      end

      if (PKWREC.PKWSELSW == "PP") /* pick planning*/
        if (PK4REC.PK4SLIND == " " /* not processed yet*/
         || PK4REC.PK4SLIND == "S" /* selected*/
         || PK4REC.PK4SLIND == "P") /* picked*/
          /* next sentence*/
        else
          PW0PW00.PW0PWVLD = "N"; /* not valid*/
        end
      end

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0PW00.PW0PWVLD = "N"; /* not valid*/
        return; /* Return to previous process*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S23"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS23

// select set vpick.vcahld01
Function PW0PS24()
   /* ------------------------------------------------------------*/
   /* set up carrier key.*/
   /* ------------------------------------------------------------*/

  PWFREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PWFREC.TF1CARCD = PW0PW02.TF1CARCD; /* carrier code*/

   /* ------------------------------------------------------------*/
   /* select set carrier table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* select unq*/


   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0PS24

// fetch next row dpick.vcahld01
Function PW0PS25()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PWFREC.PKBRELDT > PW0PW00.PW0PWCUR) /* after today*/
          PW0PW00.PW0PWVLD = "N"; /* invalid*/
        end

      else
        if (PKWREC.PKWSELSW == "PP") /* pick planning*/
          if (PWFREC.PKBPLRDT > PW0PW00.PW0PWCUR) /* after today*/
            PW0PW00.PW0PWVLD = "N"; /* invalid*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0PW00.PW0PWEOF = "Y"; /* end of file*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S25"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS25

// close cursor vpick.vcahld01
Function PW0PS26()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S26"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS26

// select set vpick.vorhld01
Function PW0PS27()
   /* ------------------------------------------------------------*/
   /* set up order key.*/
   /* ------------------------------------------------------------*/

  PKBREC.XWHCD = PK4REC.XWHCD; /* warehouse*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* ord stktf id*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* nike order id*/

   /* ------------------------------------------------------------*/
   /* select set order table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* select unq*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S27"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS27

// fetch next row dpick.vorhld01
Function PW0PS28()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PKBREC.PKBRELDT > PW0PW00.PW0PWCUR) /* after today*/
          PW0PW00.PW0PWVLD = "N"; /* invalid*/
        end

      else
        if (PKWREC.PKWSELSW == "PP") /* pick planning*/
          if (PKBREC.PKBPLRDT > PW0PW00.PW0PWCUR) /* after today*/
            PW0PW00.PW0PWVLD = "N"; /* invalid*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0PW00.PW0PWEOF = "Y"; /* end of file*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S28"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS28

// close cursor vpick.vorhld01
Function PW0PS29()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S29"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS29

// select set vpick.vcuhld01
Function PW0PS30()
   /* ------------------------------------------------------------*/
   /* set up customer key.*/
   /* ------------------------------------------------------------*/

  PK9REC.XWHCD = PK4REC.XWHCD; /* warehouse*/
  PK9REC.KUCCOID = PK4REC.KUCCOID; /* cu co id*/
  PK9REC.KUMSTRID = PK4REC.KUMSTRID; /* cu store id*/
  PK9REC.XNXCD = PK4REC.XNXCD; /* nike dept code*/

   /* ------------------------------------------------------------*/
   /* select set order table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS30

// fetch next row dpick.vcuhld01
Function PW0PS31()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PK9REC.PK9RELDT > PW0PW00.PW0PWCUR) /* after today*/
          PW0PW00.PW0PWVLD = "N"; /* invalid*/
        end

      else
        if (PKWREC.PKWSELSW == "PP") /* pick planning*/
          if (PK9REC.PK9PLRDT > PW0PW00.PW0PWCUR) /* after today*/
            PW0PW00.PW0PWVLD = "N"; /* invalid*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0PW00.PW0PWEOF = "Y"; /* end of file*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S31"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS31

// close cursor vpick.vcuhld01
Function PW0PS32()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S29"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS32

// delete vpick.vselqt01
Function PW0PS35()
   /* ------------------------------------------------------------*/
   /* set up selqt01 key - EXTRA NON-SPEC - DELETE ACTION*/
   /* ------------------------------------------------------------*/

  PWMREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW0PW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = 0; /* DNSB*/
  PWMREC.TF1CARCD = " "; /* carrier code*/
  PWMREC.XHDCD = " "; /* handling code*/
  PWMREC.PKHPVSFC = PW0PW09.PW0PW-QTY-FC; /* full case qty*/
  PWMREC.PKHPVSRP = PW0PW09.PW0PW-QTY-RP; /* full case qty*/

  PWMREC.PK-SEL-TYP-CD = "17"; /* select type code*/

  if (PW0PW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0PW01.XDVCD;
  end

  if (PW0PW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0PW01.XBCCD;
  end

   /* ------------------------------------------------------------*/
   /* delete table row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("D ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S35"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS35

// update vpick.vselqt01
Function PW0PS36()
   /* ------------------------------------------------------------*/
   /* Format the data from w09 extra non special*/
   /* ------------------------------------------------------------*/

  PWMREC.PKHPVSFC = PW0PW09.PW0PW-QTY-FC; /* full case*/
  PWMREC.PKHPVSRP = PW0PW09.PW0PW-QTY-RP; /* full case*/
  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("U ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0PW00.PW0PWDTF = "Y"; /* Request for data switch*/

      TA1REC.TA1PGMNO = "S36"; /* Module identification*/
      converseLib.validationFailed(105); /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S36"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS36

// insert vselqt01
Function PW0PS37()
  set PWMREC empty; /* initialize row*/
  PWMREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW0PW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = 0; /* DNSB*/
  PWMREC.XHDCD = " "; /* handling code*/
  PWMREC.TF1CARCD = " "; /* carrier code*/
  PWMREC.PK-SEL-TYP-CD = "17"; /* sel type code*/
  PWMREC.PKHPVSFC = PW0PW09.PW0PW-QTY-FC; /* full case qty*/
  PWMREC.PKHPVSRP = PW0PW09.PW0PW-QTY-RP; /* repack qty*/

  if (PW0PW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0PW01.XDVCD;
  end

  if (PW0PW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0PW01.XBCCD;
  end

  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* add the row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("A ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TA1REC.TA1PGMNO = "S37"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0PS37

// select unq vpick.vselqt01
Function PW0PS38()
   /* ------------------------------------------------------------*/
   /* set up select quantity key*/
   /* ------------------------------------------------------------*/

  set PWMREC empty; /* initialize pwmrec*/
  PWMREC.XWHCD = PW0PW01.XWHCD; /* warehouse*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.PKURUNMD = PW0PW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = 0; /* DNSB*/
  PWMREC.TF1CARCD = " "; /* carrier code*/
  PWMREC.XHDCD = " "; /* handling code*/

  PWMREC.PK-SEL-TYP-CD = "17"; /* sel type code*/

  if (PW0PW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0PW01.XDVCD;
  end

  if (PW0PW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0PW01.XBCCD;
  end

   /* ------------------------------------------------------------*/
   /* select unique selqt table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("S ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* select unq*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S38"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0PS38

// select vselqt01 picked amounts
Function PW0PS39()
   /* ------------------------------------------------------------*/
   /* sum up records that have been picked scheduled.*/
   /* --------------------------------------------------------------*/
   /*  */
  PWMREC.PKURUNMD = " "; /* run mode for picked records*/
  PWMREC.XHDCD = " "; /* non special handle records*/

  try
    call "IO5500" ("S2", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    PWMREC.PKURUNMD = PW0PW01.PKURUNMD; /* reset runmd of current rec*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0PS39

//*** RECORD=PW0PW00 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record PW0PW00 type basicRecord
  10 PW0PWCRF PW0PWCRF ; 
  10 PW0PWVLD PW0PWVLD ; 
  10 PW0PWSQF PW0PWSQF ; 
  10 PW0PWPLF PW0PWPLF ; 
  10 PW0PWFTF PW0PWFTF ; 
  10 PW0PWCHF PW0PWCHF ; 
  10 PW0PWARF PW0PWARF ; 
  10 PW0PWUPF PW0PWUPF ; 
  10 PW0PWUPE PW0PWUPE ; 
  10 PW0PWPGF PW0PWPGF ; 
  10 PW0PWFPH PW0PWFPH ; 
  10 PW0PWEOF PW0PWEOF ; 
  10 PW0PWDTF PW0PWDTF ; 
  10 PW0PWMPF PW0PWMPF ; 
  10 PW0PWQTF PW0PWQTF ; 
  10 PW0PWMDF PW0PWMDF ; 
  10 PW0PWOIF PW0PWOIF ; 
  10 PW0PWIQF PW0PWIQF ; 
  10 CACHGFL CACHGFL ; 
  10 PW0PWPIX PW0PWPIX ; 
  10 PW0PWHIX PW0PWHIX ; 
  10 PW0PWPWX PW0PWPWX ; 
  10 PW0PWIDX PW0PWIDX ; 
  10 PW0PWMSG PW0PWMSG ; 
  10 PW0PWWAR PW0PWWAR ; 
  10 PW0PWQTY PW0PWQTY ; 
  10 PW0PWRMD PW0PWRMD ; 
  10 PW0PWMIN PW0PWMIN ; 
  10 PW0PWHR PW0PWHR ; 
  10 PW0PWMN PW0PWMN ; 
  10 PW0PWSPH PW0PWSPH ; 
    15 PW0PWHH PW0PWHH ; 
      20 PW0PWH1 PW0PWH1 ; 
      20 PW0PWH2 PW0PWH2 ; 
      20 PW0PWH3 PW0PWH3 ; 
    15 PW0PWCOL PW0PWCOL ; 
    15 PW0PWMM PW0PWMM ; 
  10 PW0PWTOT PW0PWTOT ; 
  10 PW0PWCUR PW0PWCUR ; 
  10 PW0PWFDT PW0PWFDT ; 
    15 PW0PWFCC PW0PWFCC ; 
    15 PW0PWFYY PW0PWFYY ; 
    15 PW0PWFMM PW0PWFMM ; 
    15 PW0PWFDD PW0PWFDD ; 
  10 PW0PWFRD PW0PWFRD ; 
  10 PW0PWTOD PW0PWTOD ; 
  10 PW0PWTDT PW0PWTDT ; 
    15 PW0PWTCC PW0PWTCC ; 
    15 PW0PWTYY PW0PWTYY ; 
    15 PW0PWTMM PW0PWTMM ; 
    15 PW0PWTDD PW0PWTDD ; 
  10 PW0PWPHD PW0PWPHD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0PWPAG PW0PWPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end PW0PW00

//*** RECORD=PW0PW01 ****
// ------------------------
// Map 001 header
// ------------------------
// 
// ***********************
Record PW0PW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XDVCD XDVCD ; 
  10 XDVDESC XDVDESC ; 
  10 XBCCD XBCCD ; 
  10 XBCABRV XBCABRV ; 
  10 TF1CARCD TF1CARCD ; 
  10 XWHABRV XWHABRV ; 
  10 PKURUNMD PKURUNMD ; 
  10 PW0PWFDT PW0PWFDT ; 
    15 PW0PWFCC PW0PWFCC ; 
    15 PW0PWFYY PW0PWFYY ; 
    15 PW0PWFMM PW0PWFMM ; 
    15 PW0PWFDD PW0PWFDD ; 
  10 PW0PWTDT PW0PWTDT ; 
    15 PW0PWTCC PW0PWTCC ; 
    15 PW0PWTYY PW0PWTYY ; 
    15 PW0PWTMM PW0PWTMM ; 
    15 PW0PWTDD PW0PWTDD ; 
end // end PW0PW01

//*** RECORD=PW0PW02 ****
// -------------------------------
// temporary storage - m001 array
// -------------------------------
// ***********************
Record PW0PW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(454) ; 
    10 PW0PW2IX PW0PW2IX ; 
    10 PW0PW2MX PW0PW2MX ; 
    10 * char(45) [10] ; 
      15 PW0PWACT PW0PWACT ; 
      15 OP1DSBDT OP1DSBDT ; 
      15 TF1CARCD TF1CARCD ; 
      15 PW0PWDDT PW0PWDDT ; 
        20 * num(2) ; 
        20 PW0PWSYY PW0PWSYY ; 
        20 PW0PWSMM PW0PWSMM ; 
        20 PW0PWSDD PW0PWSDD ; 
      15 PW0PWSHQ PW0PWSHQ ; 
      15 PW0PWPFC PW0PWPFC ; 
      15 PW0PWPRP PW0PWPRP ; 
      15 PW0PWOQF PW0PWOQF ; 
      15 PW0PWOQR PW0PWOQR ; 
      15 PW0PWRQF PW0PWRQF ; 
      15 PW0PWRQR PW0PWRQR ; 
end // end PW0PW02

//*** RECORD=PW0PW03 ****
// -------------------------
// map 001 totals
// -------------------------
// ***********************
Record PW0PW03 type basicRecord
  15 PW0PWSHT PW0PWSHT ; 
  15 PW0PWTHW PW0PWTHW ; 
  15 PW0PWTOF PW0PWTOF ; 
  15 PW0PWTOR PW0PWTOR ; 
  15 PW0PWTQF PW0PWTQF ; 
  15 PW0PWTQR PW0PWTQR ; 
end // end PW0PW03

//*** RECORD=PW0PW05 ****
// -------------------------
// W05 SELORD
// -------------------------
// ***********************
Record PW0PW05 type basicRecord
  5 PW0PW5IX PW0PW5IX ; 
  5 PW0PW5MX PW0PW5MX ; 
  5 * char(20) [990] ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 TF1CARCD TF1CARCD ; 
    10 PW0PWSHQ PW0PWSHQ ; 
    10 PW0PWOFC PW0PWOFC ; 
    10 PW0PWORP PW0PWORP ; 
  5 * char(14) ; 
    10 PW0PWSHT PW0PWSHT ; 
    10 PW0PWTHW PW0PWTHW ; 
    10 PW0PWTOF PW0PWTOF ; 
    10 PW0PWTOR PW0PWTOR ; 
end // end PW0PW05

//*** RECORD=PW0PW06 ****
// -------------------------
// W06 SELQTY
// -------------------------
// ***********************
Record PW0PW06 type basicRecord
  5 PW0PW6IX PW0PW6IX ; 
  5 PW0PW6MX PW0PW6MX ; 
  5 * char(28) [990] ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 TF1CARCD TF1CARCD ; 
    10 PW0PWSHQ PW0PWSHQ ; 
    10 PW0PWQFC PW0PWQFC ; 
    10 PW0PWQRP PW0PWQRP ; 
    10 PW0PWRQF PW0PWRQF ; 
    10 PW0PWRQR PW0PWRQR ; 
  5 * char(22) ; 
    10 PW0PWSHT PW0PWSHT ; 
    10 PW0PWTHW PW0PWTHW ; 
    10 PW0PWTOF PW0PWTOF ; 
    10 PW0PWTOR PW0PWTOR ; 
    10 PW0PWTQF PW0PWTQF ; 
    10 PW0PWTQR PW0PWTQR ; 
end // end PW0PW06

//*** RECORD=PW0PW07 ****
// -------------------------
// W07 POOL
// -------------------------
// ***********************
Record PW0PW07 type basicRecord
  5 * char(15844) ; 
    10 PW0PW7MX PW0PW7MX ; 
    10 PW0PW7IX PW0PW7IX ; 
    10 * char(16) [990] ; 
      15 OP1DSBDT OP1DSBDT ; 
      15 TF1CARCD TF1CARCD ; 
      15 PW0PWPFC PW0PWPFC ; 
      15 PW0PWPRP PW0PWPRP ; 
end // end PW0PW07

//*** RECORD=PW0PW08 ****
// -------------------------
// W08 SELORD + SELQTY
// -------------------------
// ***********************
Record PW0PW08 type basicRecord
  5 PW0PW8IX PW0PW8IX ; 
  5 PW0PW8MX PW0PW8MX ; 
  5 * char(36) [990] ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 TF1CARCD TF1CARCD ; 
    10 PW0PWSHQ PW0PWSHQ ; 
    10 PW0PWPFC PW0PWPFC ; 
    10 PW0PWPRP PW0PWPRP ; 
    10 PW0PWOQF PW0PWOQF ; 
    10 PW0PWOQR PW0PWOQR ; 
    10 PW0PWRQF PW0PWRQF ; 
    10 PW0PWRQR PW0PWRQR ; 
  5 * char(22) ; 
    10 PW0PWSHT PW0PWSHT ; 
    10 PW0PWTHW PW0PWTHW ; 
    10 PW0PWTOF PW0PWTOF ; 
    10 PW0PWTOR PW0PWTOR ; 
    10 PW0PWTQF PW0PWTQF ; 
    10 PW0PWTQR PW0PWTQR ; 
end // end PW0PW08

//*** RECORD=PW0PW09 ****
// ------------------------
// Map 001 header
// ------------------------
// 
// ***********************
Record PW0PW09 type basicRecord
  10 PW0PW-QTY-ACT PW0PW-QTY-ACT ; 
  10 PW0PW-QTY-FC PW0PW-QTY-FC ; 
  10 PW0PW-QTY-RP PW0PW-QTY-RP ; 
end // end PW0PW09

// XWH_WHSE_CD
DataItem PW0PW-QTY-ACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDV_DIV_CD
DataItem PW0PW-QTY-FC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDV_DIV_CD
DataItem PW0PW-QTY-RP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w02 index
DataItem PW0PW2IX smallint {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// w02 max index
DataItem PW0PW2MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w05 index
DataItem PW0PW5IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w05 max index
DataItem PW0PW5MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w06 index
DataItem PW0PW6IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w06 max index
DataItem PW0PW6MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines per page
DataItem PW0PW7IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum lines per page
DataItem PW0PW7MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w08 index
DataItem PW0PW8IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w08 max index
DataItem PW0PW8MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// action code
DataItem PW0PWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag
DataItem PW0PWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key fields changed flag
DataItem PW0PWCHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// colon
DataItem PW0PWCOL char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// cursor flag
DataItem PW0PWCRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date ccyymmdd
DataItem PW0PWCUR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// dnsb date
DataItem PW0PWDDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request for data flag
DataItem PW0PWDTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage eof flag
DataItem PW0PWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'from' cc
DataItem PW0PWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'from' dd
DataItem PW0PWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb from dateccyymmdd
DataItem PW0PWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not ship before 'from' mm
DataItem PW0PWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// format min P & H date 1x
DataItem PW0PWFPH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DNSB from date
DataItem PW0PWFRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// first time flag
DataItem PW0PWFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'from' yy
DataItem PW0PWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hours - 1st position
DataItem PW0PWH1 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hours - 2nd position
DataItem PW0PWH2 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hours - 3rd position
DataItem PW0PWH3 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hours
DataItem PW0PWHH char(3)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hold index
DataItem PW0PWHIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// hours
DataItem PW0PWHR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// work index
DataItem PW0PWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// inquiry flag
DataItem PW0PWIQF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified flag
DataItem PW0PWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PW0PWMIN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// minutes
DataItem PW0PWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minutes
DataItem PW0PWMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// request to format map
DataItem PW0PWMPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message number
DataItem PW0PWMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// reg selord full case
DataItem PW0PWOFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order inquiry flag
DataItem PW0PWOIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reg selord & selqty fc
DataItem PW0PWOQF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reg selord & selqty rp
DataItem PW0PWOQR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reg selord repack
DataItem PW0PWORP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold temporary storage page
DataItem PW0PWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pool full case
DataItem PW0PWPFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display current page flag
DataItem PW0PWPGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P & H date
DataItem PW0PWPHD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// work index
DataItem PW0PWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// pool header flag
DataItem PW0PWPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pool repack
DataItem PW0PWPRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem PW0PWPWX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// selqty fc
DataItem PW0PWQFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selqty rp
DataItem PW0PWQRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity selected flag
DataItem PW0PWQTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity
DataItem PW0PWQTY decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// remainder
DataItem PW0PWRMD num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// non-spcl hndl selqty fc
DataItem PW0PWRQF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// non-spcl hndl selqty rp
DataItem PW0PWRQR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dnsb day
DataItem PW0PWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selected specl hndl qty
DataItem PW0PWSHQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total spcl hndl
DataItem PW0PWSHT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dnsb month
DataItem PW0PWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hrs minutes
DataItem PW0PWSPH char(6)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// select quantity flag
DataItem PW0PWSQF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dnsb year
DataItem PW0PWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not ship before 'to' cc
DataItem PW0PWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'to' dd
DataItem PW0PWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb to dateccyymmdd
DataItem PW0PWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total spcl hndl hrs
DataItem PW0PWTHW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not ship before 'to' mm
DataItem PW0PWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// DNSB to date
DataItem PW0PWTOD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// total selord fc
DataItem PW0PWTOF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total selord rp
DataItem PW0PWTOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total quantity
DataItem PW0PWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// total selqty fc
DataItem PW0PWTQF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total selqty rp
DataItem PW0PWTQR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not ship before 'to' yy
DataItem PW0PWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// update error flag
DataItem PW0PWUPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag
DataItem PW0PWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carrier status flag
DataItem PW0PWVLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning message number
DataItem PW0PWWAR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

