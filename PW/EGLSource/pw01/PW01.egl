package pw01;
import al.common.*;
import az.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import iv.common.*;
import ku.common.*;
import op.common.*;
import os.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=PW01 ****
// This application is part of the PW0Y Picking Exceptions
// System. PW0Y will transfer to the application PW01 when the
// User requests to Add or Split a Carton for a specific whse,
// tote or carton sequence number.
// 
// It will update picking, shiprec and asn databases.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/21/98  MGoel   New Program
//          01/12/99  MGoel   Corrected the caluclation of the
//                            number of Products in a carton.
//          06/01/99  snaidu  Commented rnt230 for canada
//                            in proc PW01314P. Look for
//                            comment /*deactivate movers .....
// GDS4NSC  04/13/00  HKEMPE  Created a new process/statement
//                            that provides the option to
//                            verify/retrieve item-size data
//                            from VOSIZE01 or fromVOPPKI01.
//                            All facilities converting to SAP
//                            need to access VOPPKI01 since the
//                            orders won't be stored any longer
//                            on the main order tables.
// DLVRUSA  04/04/01  APHIL2  Rename Statement Group name from
//                             XX0XS-SELECT-ITM-SZ to
//                             XSPKS-SELECT-ITM-SZ
//          07/26/01  RNUNNA  Carton Quantity Mismatch:
//                            Corrected the indexing done
//                            while updating VAZCS01 table.
//                            The following modules are
//                            modified and added.
//                            Added:
//                               PW01S-VAZCSZ01-C1
//                               PW01S-VAZCSZ01-N1
//                               PW01S-VAZCSZ01-S1
//                               PW01S-MV-PW01W053
//                            Modified:
//                               PW01W00
//                               PW01S-PW013101
//                               PW01S-PW013301
// Kintana  10/18/03  bmahal  Modified for VICS BOL.
// 60938
// Kintana  12/12/03  bmahal  Default cursor position in the
//  screen 76349                     PW01M001 has been changed
//  from YNTCD to                                   ACTION-FL.
// KIN77296  01/30/04 rathal changed the server name in
//                           PW01314P,PW01314T from
//  SCARBORO-SVR-08
//                           to SCARBORO-SVR-34 for Canda(42)
//  whse scan code
//                           server change.
// KIN 80817  03/02/04  BMAHAL  A bug in PW01 causes the
//  application to assign a wrong VICS BOL when a carton is
//                                      added to a already
//  split BOL.
// *********************
Program PW01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AZFREC AZFREC; // record
  COMMAREA COMMAREA ; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OPBREC OPBREC; // record
  OPIREC OPIREC; // record
  PC2REC PC2REC; // record
  PKDREC PKDREC; // record
  PKNREC PKNREC; // record
  PKWREC PKWREC; // record
  PW01REC PW01REC; // record
  PW01W00 PW01W00; // record
  PW01W01 PW01W01; // record
  PW01W02 PW01W02; // record
  PW01W04 PW01W04; // record
  PW01W05 PW01W05; // record
  PW01W06 PW01W06; // record
  PW01W07 PW01W07; // record
  PW01W08 PW01W08; // record
  PW01W09 PW01W09; // record
  PW01W11 PW01W11; // record
  PW01W12 PW01W12; // record
  PW01W99 PW01W99; // record
  PWOREC PWOREC; // record
  PWPREC PWPREC; // record
  SL5REC SL5REC; // record
  SQLCA SQLCA; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR3REC SR3REC; // record
  SR5REC SR5REC; // record
  SYPREC SYPREC; // record
  SYUREC SYUREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VAZCIT01 VAZCIT01; // record
  VAZCIT02 VAZCIT02; // record
  VAZCSZ01 VAZCSZ01; // record
  VAZCSZ02 VAZCSZ02; // record
  VAZCTN01 VAZCTN01; // record
  VAZHDR01 VAZHDR01; // record
  VAZHDR02 VAZHDR02; // record
  VAZORD01 VAZORD01; // record
  VSPLSZ02 VSPLSZ02; // record
  WSY2000 WSY2000; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XX0XW03 XX0XW03; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use PW01TT1 {deleteAfterUse = yes}; // table
  use PW01TP1 {deleteAfterUse = yes}; // table
  use PW01TT2 {deleteAfterUse = yes}; // table
  use PW01TP2 {deleteAfterUse = yes}; // table
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XHDTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use YNTTBL; // table
  use PW01M.PW01M001,  // forms
      PW01M.TA0PM001, 
      PW01M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    PW01000: PW01000();
     /* ------------------------------------------------------------*/
     /* Initialise working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW01M001 initial; /* M001 input/output*/
    set PW01W00 empty; /* Working storage*/
    set PW01W01 empty; /* M001 display storage*/
    set PW01W02 empty; /* M001 temporary storage*/
    set PW01W04 empty; /**/
    set PW01W05 empty; /* PWPREC rows for table updates*/
    set PW01W06 empty; /* PWQREC rows for table updates*/
    set PW01W07 empty; /* PWOREC rows for table updates*/
    set PW01W12 empty; /**/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* temporary storage area*/
    set TA6REC empty; /* job request subprogram parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set SR5REC empty;

     /* ------------------------------------------------------------*/
     /* Determine default data to be loaded*/
     /* ------------------------------------------------------------*/
    PW01W00.XXXTSLEN = 374;

    PW01W00.PW01WSWR = "Y"; /* Request for data switch*/
    PW01W00.PW01WSWF = "Y"; /* format screen data switch*/

    PW01W01.XWHCD = PKWREC.XWHCD;
    PW01W01.XWHABRV = PKWREC.XWHABRV;

    PW01REC.PW01-COMMON-REC = COMMAREA.CA-USER-WORKAREA-4K;
    PW01M001.XWHCD = PW01REC.XWH-WHSE-CD;
    PW01M001.PW01MCTN = PW01REC.PK-CRTN-SEQ-NBR;
    PW01W01.PKDNCSQN = PW01REC.PK-CRTN-SEQ-NBR;
    PW01W01.PW01WCTN = PW01REC.PK-CRTN-SEQ-NBR;
    PW01M001.PW01MTOT = PW01REC.PK-TOTE-SEQ-NBR;
    PW01W01.PWPTOSQN = PW01REC.PK-TOTE-SEQ-NBR;
    PW01W01.PW01WTOT = PW01REC.PK-TOTE-SEQ-NBR;
    PW01W00.PW01W-NBR-PROD-CRTN = PW01REC.PK-CRTN-UNIT-QTY;

     /* ------------------------------------------------------------*/
     /* New Carton processing*/
     /* ------------------------------------------------------------*/

    PW01W00.PW01W-FIRST-TIME-SW = "Y";
    PW01W00.PW01W-SPLHD-UPD-SW = "N"; /* has not been updated yet*/
    PW01W00.PW01W-SRORD-UPD-SW = "N"; /* has not been updated yet*/
    PW01W00.PW01W-W05-IDX = 0; /* dpick.vpslit01 index*/
    PW01W00.PW01W-W06-IDX = 0; /* dpick.vsplsz01 index*/
    PW01W00.PW01W-W07-IDX = 0; /* dpick.vsplhd01 index*/
    PW01W00.PW01W-W08-IDX = 0; /* dship.vsrxcp01 index*/
    PW01W11.PW01WIDX2 = 1;
    PW01W00.PW01W-NEW-CRTN-WT = 0;
    PW01W00.PW01W-ORIG-CRTN-WT = 0;
    PW01W00.PW01WTAD = 0; /* total adj qty for orig crtn*/
    PW01W00.PW01W-TAD-NEW = 0; /* total adj qty for new crtn*/

     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/

    goto PW01001;

    PW01001: PW01001();
    goto PW01001;
  end // end main
end // end PW01

// CALC CHK DIGIT
Function PW01-CALC-UCC128()

  if (PW01W00.PW01W-BCF-4-LAST == 0)
    PW01W00.PW01W-DONE-CALC-FL = "Y";
  else
    PW01W00.PW01W-BCF-4 = PW01W00.PW01W-BCF-4 + 1;
    PW01W00.PW01W-BCF-5 = PW01W00.PW01W-BCF-5 + 1;
  end

end // end PW01-CALC-UCC128

// Application Initialization
Function PW01000()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The PICKING*/
   /* work record is formatted upon initial application entry.*/
   /* Warehouse code is validated and the warehouse abbreviation*/
   /* is obtained.  SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application Entry Validation*/

  XSSEGTR(); /* SET SEGMENTED TRANS ID*/

  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* Application has changed*/

    if (COMMAREA.CAFRMSYS == "PK" /* Came from within the PICKING system*/
     || COMMAREA.CAFRMSYS == "PW") /* or the Wilsonville subsystem*/

      PKWREC.PKWGRPLV = COMMAREA.CAUSERA; /* Restore work record*/

    else

      set PKWREC empty; /* Clear work record area*/
      PKWREC.XWHCD = COMMAREA.XWHCD; /* Set initial warehouse code*/

    end

    VGVar.handleHardIOErrors = 1; /* Return all file errors*/
    converseVar.commitOnConverse = 1; /* Commit on every converse*/

  end

end // end PW01000

// Main Process
Function PW01001()
   /* ------------------------------------------------------------*/
   /* This is the main process of the application PW01.*/
   /* Processing always returns to the top of this process and*/
   /* falls through subordinate processes until an error is*/
   /* found or a valid request is processed. The processing*/
   /* sequence is as follows:*/

   /* 1) Retrieve the data to be displayed.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit and*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW01100(); /* Retrieve data to be displayed*/

  PW01200(); /* Format and display the map*/

  PW01300(); /* Check attention identifier*/

  PW01400(); /* Reset fields to normal intensity*/

  PW01500(); /* Verify the entered data*/

  PW01600(); /* Process valid input request*/

end // end PW01001

// Retrieve Data to be displayed
Function PW01100()
   /* ------------------------------------------------------------*/
   /* If pf11 indicator is set, this is the initial entry to PW01*/
   /* and so it is necessary to do PF11 processing.*/
   /* ------------------------------------------------------------*/

  if (PW01REC.PW01W-PF11ACT-IND == "Y")

    /* --- new carton processing ---*/
    PW01110();

    /* --- reset PF11 indicator ---*/
    PW01REC.PW01W-PF11ACT-IND = "N";
  end

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW01W00.PW01WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  if (PW01W00.PW01WNDS == "Y") /* maintenance has been done*/
                                  /* display modified record*/
  else
                                  /* display modified record*/
    PW01S-NEW-VSPLIT01(); /* retrieve new pkg list item recs*/
  end

  if (PW01W00.PW01WPLS == "N") /* packing list item not found*/

    return; /* return to flow*/
  end

   /* ------------------------------------------------------------*/
   /* Purge temporary storage once next product is found.*/
   /* ------------------------------------------------------------*/

  PW01S01(); /* purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* A packing list item row was found and so set up the keys*/
   /* in the working storage record pw01W01.*/
   /* ------------------------------------------------------------*/

  PW01S-MV-PWPREC-01(); /* set up the keys in w01*/

   /* ------------------------------------------------------------*/
   /* Get the packing list header record.*/
   /* ------------------------------------------------------------*/

  set PWOREC empty; /* initialise database rows*/
  set SR1REC empty;
  set SR2REC empty;
  set VAZHDR01 empty;
  set VAZORD01 empty;
  set VAZCTN01 empty;
  set VAZCIT01 empty;
  set VAZCSZ01 empty;

  PWOREC.XWHCD = PW01W01.XWHCD; /* whse cd*/
  PWOREC.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list nbr*/
  PWOREC.OP1PARTN = PW01W01.OP1PARTN; /* order part char*/
  PWOREC.OP1CUOID = PW01W01.OP1CUOID; /* customer order id*/
  PWOREC.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/

  PW01S-VSPLHD01-S(); /* get packing list hdr row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* packing list hdr found*/

                                  /* store BOL details in w/s*/
    PW01W01.PK1BLLAD = PWOREC.PK1BLLAD; /* BOL nbr*/
    PW01W01.SR2BLLSU = PWOREC.SR2BLLSU; /* BOL sub nbr*/

                                               /* save key values*/
    VAZORD01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD;
    VAZORD01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

    VAZCTN01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD;
    VAZCTN01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

    VAZCIT01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD;
    VAZCIT01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

    VAZCSZ01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD;
    VAZCSZ01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU;

                                  /* populate asn header keys*/
    VAZHDR01.XWH-WHSE-CD = PW01W01.XWHCD; /* whse cd*/
    VAZHDR01.PK-BILL-OF-LADING = PWOREC.PK1BLLAD; /* BOL nbr*/
    VAZHDR01.PK-BOL-SUB-NBR = PWOREC.SR2BLLSU; /* BOL sub nbr*/

    PW01S-VAZHDR01-S(); /* get asn header record*/

                                  /* populate ship rec hdr keys*/
    SR1REC.XWHCD = PW01W01.XWHCD; /* whse cd*/
    SR1REC.PK1PKSCH = PW01W01.PK1PKSCH; /* picking schedule*/

    PW01S-VSRHDR01-S(); /* get ship rec batch sched hdr*/

  else
                                  /* packing list hdr not found*/
    converseLib.validationFailed(375); /* no data for display*/
    PW01W00.XXXLOCID = "100 ";
    return;
  end

                                  /* populate ship rec order key*/
  SR2REC.XWHCD = PW01W01.XWHCD; /* whse cd*/
  SR2REC.PK1PKSCH = PW01W01.PK1PKSCH; /* pick schedule nbr*/
  SR2REC.OP1CUOID = PW01W01.OP1CUOID; /* customer order id*/
  SR2REC.OP1NORID = PW01W01.OP1NORID; /* nike order id*/

  SR2REC.OP1NTMAL = 0; /* nbr of times alloc*/

  PW01S-VSRORD01-S(); /* get the ship rec order*/

  if (SQLCA.VAGen_SQLCODE == 0)

    if (SR2REC.SR-STOP-ORD-SHP-FL == "Y") /* stop ship*/

      converseLib.validationFailed(464); /* Stop ship cannot be changed*/
      PW01W00.XXXLOCID = "100 ";
      PW01W01.CACHGFL = "N";
      set PW01W01 empty;
      PW01W01.XWHCD = PW01M001.XWHCD;
      PW01W01.PW01WCTN = PW01M001.PW01MCTN;
      PW01W01.PW01WTOT = PW01M001.PW01MTOT;
      return;
    end
  end

  PW01S-LOAD-SIZE-TS(); /* Load size data to temp storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW01W00.XXXTSPAG = 1;
  PW01W00.PW01WSWR = "N"; /* Request for data switch*/
  PW01W01.CACHGFL = "Y"; /* data is available for change*/

end // end PW01100

// New Carton Request Processing
Function PW01110()
   /* ----------------------------------------------------------*/
   /* The working storage has been setup to allow up to 100 rows*/
   /* to be updated from the Packing List Item table.*/
   /* (dpick.vsplit01)*/
   /*  */
   /* Note: If the working storage array is increased, the*/
   /* message in PK00ENU must be changed to reflect the increase*/
   /* in the size of the array.*/
   /* -----------------------------------------------------------*/

  if (PW01W00.PW01W-NBR-PROD-CRTN > 100)
    PW01W00.PW01W-INFO-MSG = 457;
    PW01W00.XXXLOCID = "600";
  end

   /* --- Get the new Carton Nbr ---*/
  set PKDREC empty; /* initialise the database row*/
  PKDREC.XWHCD = PW01W01.XWHCD;

  PW01S-VPKCTL01-S(); /* 's ' dpick.vpkctl01*/

  XX0XS01(); /* get date and time*/

  set TA2REC empty;
  TA2REC.TA2GRGGN = PKDREC.PKDLBLDT[PW01WIDX2];
  TA2REC.TA2DTOPT = "GREGJUL";
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  PW01W01.PW01W-JUL-DT = TA2REC.TA2JULNN;

   /* --- update the picking control table with the new next ctn # ---*/
  PW01W01.PW01W-CRTN-SEQNBR = PKDREC.PKDNCSQN;

  PKDREC.PKDNCSQN = PKDREC.PKDNCSQN + 1;
  PKDREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKDREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW01S-VPKCTL01-U(); /* 'u ' dpick.vpkctl01*/

end // end PW01110

// Format and Converse the Map
Function PW01200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW01W00.PW01WMSG = converseVar.validationMsgNum; /* Message number*/
  else
    if (PW01W00.PW01W-INFO-MSG != 0)
      PW01W00.PW01WMSG = PW01W00.PW01W-INFO-MSG;
    end
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW01W00.PW01WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW01W00.PW01WSWF == "Y") /* Map must be formatted*/

      PW01210(); /* Format the data on the map*/

    else

      PW01W00.PW01WSWF = "Y";
    end

  end

   /* ------------------------------------------------------------*/
   /* Format Tote Number Field.*/
   /* ------------------------------------------------------------*/

  if (PW01M001.XWHCD == "51"
   || PW01M001.XWHCD == "42") /* Apparel warehouse*/
    PW01M001.PW01M-STUB = "TOTE: ";
    set PW01M001.PW01M-STUB initialAttributes;
    if (converseVar.validationMsgNum == 0)
      set PW01M001.PW01MTOT initialAttributes;
    end
  else /* Do not display tote*/
    PW01M001.PW01M-STUB = " ";
    set PW01M001.PW01M-STUB skip, invisible;
    set PW01M001.PW01MTOT skip, invisible;
  end

   /* --- set up Map Date and Commarea fields ---*/
  PW01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PW01M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW01M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW01W00.PW01WMSG != 0) /* Message to display*/
    if (PW01W00.PW01WMSG == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(PW01W00.PW01WMSG);
    end /* Error message number*/
    PW01M001.XXXLOCID = PW01W00.XXXLOCID;
                                     /* Module identification*/
    set PW01M001 alarm; /* Indicate sound alarm*/
  end

  converse PW01M001 ;

   /* --- Reset Detail Record Changed Indicator ---*/
  PW01W00.PW01WNDS = "N";

   /* --- Clear the message fields ---*/
  PW01W00.XXXLOCID = " "; /* Module identification*/
  PW01W00.PW01WMSG = 0;
  PW01W00.PW01W-INFO-MSG = 0;

   /* --- Save the FAST PATH Information ---*/
  COMMAREA.CATOAP = PW01M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW01M001.CAITEM; /* Application data*/

end // end PW01200

// Format display data
Function PW01210()
   /* ------------------------------------------------------------*/
   /* Initialise Map PW01M001*/
   /* ------------------------------------------------------------*/

  set PW01M001 initial; /* M001 input/ouput area*/

   /* ------------------------------------------------------------*/
   /* Format PW01M001 using key data from PW01W00.*/
   /* ------------------------------------------------------------*/

  PW01M001.XWHCD = PW01W01.XWHCD; /* warehouse code*/
  PW01M001.XWHABRV = PW01W01.XWHABRV; /* warehous abrv desc*/

   /* --- Tote number ---*/
  if (PW01W01.PWPTOSQN == 0)
    PW01M001.PW01MTOT = PW01W01.PW01WTOT;
  else
    PW01M001.PW01MTOT = PW01W01.PWPTOSQN;
  end

   /* --- Carton number ---*/
  if (PW01W01.PKDNCSQN == 0)
    PW01M001.PW01MCTN = PW01W01.PW01WCTN;
  else
    PW01M001.PW01MCTN = PW01W01.PKDNCSQN;
  end

   /* --- Packing List number ---*/
  PW01M001.PW01MPLN = PW01W01.TSIPLNBR;

   /* --- One of One flag ---*/
  if (PW01W01.PWP1OF1F == "Y")
    PW01M001.PW01M1O1 = "1 OF 1";
  else
    PW01M001.PW01M1O1 = " ";
  end

   /* --- Set up PF Key Definitions ---*/
  set PW01M001.PW01M-PFKEY07 initialAttributes;
  set PW01M001.PW01M-PFKEY08 initialAttributes;

  PW01M001.PW01M-TITLE = "ADD SPLIT MODE";

  set PW01M001.CAITEM skip;
  set PW01M001.CATOAP skip;
  set PW01M001.PW01M-PFKEY12 initialAttributes;

   /* --- Set up Map literals ---*/
  set PW01M001.PW01M-NEW-CRTN initialAttributes;
  set PW01M001.PW01M-NEWCRTN-LITERAL initialAttributes;
  set PW01M001.YNTCD initialAttributes;
  set PW01M001.YNTABRV initialAttributes;
  set PW01M001.PW01M-YNTCD-LITERAL initialAttributes;
  PW01M001.PW01M-NEW-CRTN = PW01W01.PW01W-NEW-CRTN;
  PW01M001.YNTCD = PW01W01.YNTCD;
  if (PW01W01.YNTCD in YNTTBL.YNTCD)
    PW01M001.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
  end

  set PW01M001.PW01M-PFKEY12 initialAttributes;

  PW01M001.PW01MSCH = PW01W01.PK1PKSCH;
  PW01M001.PW01MPKS = PW01W01.SWCLNENB;
  PW01M001.PW01MORD = PW01W01.OP1CUOID;
  PW01M001.PW01MSUB = PW01W01.OP1NORID;
  PW01M001.PW01MPRT = PW01W01.PW01WPRT;
  PW01M001.PK1BLLAD = PW01W01.PK1BLLAD;

  if (PW01W01.XGPCD == " ") /* GPC code*/
    PW01M001.XGPCD = PW01W01.PW01WGPC;
  else
    PW01M001.XGPCD = PW01W01.XGPCD;
  end

  if (PW01W01.SY1STNBR == " ") /* Style nbr*/
    PW01M001.SY1STNBR = PW01W01.PW01WSTY;
  else
    PW01M001.SY1STNBR = PW01W01.SY1STNBR;
  end

  if (PW01W01.SY2CLRID == " ") /* Colour id*/
    PW01M001.SY2CLRID = PW01W01.PW01WCLR;
  else
    PW01M001.SY2CLRID = PW01W01.SY2CLRID;
  end

  if (PW01W01.XDMCD == " ") /* Dimension code*/
    PW01M001.XDMCD = PW01W01.PW01WDIM;
  else
    PW01M001.XDMCD = PW01W01.XDMCD;
  end

  PW01M001.SY1SSTNM = PW01W01.SY1SSTNM; /* Style name*/

  if (PW01W01.XQACD == " ") /* Quality code*/
    PW01M001.XQACD = PW01W01.PW01WQUA;
  else
    PW01M001.XQACD = PW01W01.XQACD;
  end

  if (PW01W01.PC2INSEG == " ")
    PW01M001.PC2INSEG = PW01W01.PW01WISG;
  else
    PW01M001.PC2INSEG = PW01W01.PC2INSEG;
  end

  if (PW01W01.XEGCD == " ")
    PW01M001.XEGCD = PW01W01.PW01WEDF;
  else
    PW01M001.XEGCD = PW01W01.XEGCD;
  end

  if (PW01W01.XPGCD == " ")
    PW01M001.XPGCD = PW01W01.PW01WPKG;
  else
    PW01M001.XPGCD = PW01W01.XPGCD;
  end

  if (PW01W01.XUMCD == " ")
    PW01M001.XUMCD = PW01W01.PW01WUOM;
  else
    PW01M001.XUMCD = PW01W01.XUMCD;
  end

  if (PW01W01.XUMCD == " ")
    PW01M001.XOWCD = PW01W01.PW01WOGC;
  else
    PW01M001.XOWCD = PW01W01.XOWCD;
  end

   /* ----------------------------------------------------------------*/
   /* Set Map Action field for all 10 Detail lines.*/
   /* ----------------------------------------------------------------*/

  PW01W00.PW01WIDX = 1;
  while (PW01W00.PW01WIDX <= 10
  )
    set PW01M001.PW01M-ACTION[PW01WIDX] initialAttributes;

    PW01W00.PW01WIDX = PW01W00.PW01WIDX + 1;

  end

   /* ---------------------------------------------------------------*/
   /* Determine where the cursor should be located*/
   /* ---------------------------------------------------------------*/

  /*IF PW01W00.PW01W-FIRST-TIME-SW EQ 'Y';*/
  /*  SET PW01M001.YNTCD CURSOR;*/
  /*ELSE;*/
  set PW01M001.PW01M-ACTION[1] cursor;
  /*END;*/

   /* ------------------------------------------------------------*/
   /* If data has not been loaded, bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (PW01W01.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Load "current" and "new" product information from t/s*/
   /* ------------------------------------------------------------*/

  PW01S14(); /* Read temporary storage*/

   /* ----------------------------------------------------------------*/
   /* Fill detail lines for the data which exists*/
   /* ----------------------------------------------------------------*/

  PW01W00.PW01WIDX = 1;
  while (PW01W00.PW01WIDX <= PW01W02.PW01WNLD)
                                  /* Process temporary storage*/

    PW01M001.SY4IDDSC[PW01WIDX] = PW01W02.SY4IDDSC[PW01WIDX];
    PW01M001.PW01MARZ[PW01WIDX] = PW01W02.PW01WARZ[PW01WIDX];
    PW01M001.SL5LOCTN[PW01WIDX] = PW01W02.SL5LOCTN[PW01WIDX];
    PW01M001.PW01MQPK[PW01WIDX] = PW01W02.PK1QTY[PW01WIDX];
    PW01M001.PW01MQAL[PW01WIDX] = PW01W02.ALCQTY[PW01WIDX];
    PW01M001.PW01MADJ[PW01WIDX] = PW01W02.PW01WADJ[PW01WIDX];

    set PW01M001.SY4IDDSC[PW01WIDX] skip;

    PW01W00.PW01WIDX = PW01W00.PW01WIDX + 1;

  end

end // end PW01210

// Check Attention Identifier
Function PW01300()
   /* ------------------------------------------------------------*/
   /* This process will check the Attention Identifier.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PW01W01.XWHCD = PKWREC.XWHCD;
    PW01W01.XWHABRV = PKWREC.XWHABRV;

    COMMAREA.CATOAP = "PW0Y"; /* Application find code*/
    COMMAREA.CAITEM = " "; /* passed data*/

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FASTPATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW01M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PW01S01(); /* purge temp storage*/

      set PW01W05 empty;
      set PW01W06 empty;
      set PW01W07 empty;
      set PW01W08 empty;

      XSPKS01(); /* Exit to another application*/

      PW01W00.PW01WSWR = "N"; /* request for data*/
      PW01W00.PW01WSWF = "Y"; /* format screen m001*/

      set PW01M001.CATOAP cursor, bold; /* Highlight*/
    else

      PW01W00.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(12); /* Indicate PF key not valid*/
    end

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to the appropriate application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW01M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();

      COMMAREA.CATOAP = "PW0Y"; /* Application find code*/

      /* --- move key data to common record ---*/
      set PW01REC empty; /* initialise common area*/
      PW01REC.XWH-WHSE-CD = PW01W01.XWHCD;

      /* --- move original carton/tote numbers to map ---*/
      PW01REC.PK-CRTN-SEQ-NBR = PW01M001.PW01MCTN;

      if (PW01M001.PW01MTOT != 0)
        PW01REC.PW01W-TOTE-NBR-IND = "Y";
        PW01REC.PK-TOTE-SEQ-NBR = PW01M001.PW01MTOT;
      end

      PW01REC.PW01W-RETURN-IND = "Y";
      COMMAREA.CA-USER-WORKAREA-4K = PW01REC.PW01-COMMON-REC;
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0C"; /* Application find code*/
    end

    XSPKS01(); /* Exit to another application*/

    PW01W00.PW01WSWR = "N"; /* request for data*/
    PW01W00.PW01WSWF = "Y"; /* format screen m001*/

    exit stack; /* Exit to display map*/
  end

   /* --------------------------------------------------------*/
   /* Perform Close new carton processing.*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf12)
                      /* User has requested to close new crtn*/
    PW01310(); /* Close new crtn*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used.*/
   /* Display an error message to the User if the PF key pressed*/
   /* is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf5   
   && converseVar.eventKey not pf6   
   && converseVar.eventKey not pf3) 

    PW01W00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* Indicate invalid attention key*/

    exit stack; /* Exit to display map*/
  end

end // end PW01300

// Close New Carton Processing
Function PW01310()
   /* --------------------------------------------------------*/
   /* Perform Close new carton processing.*/
   /* --------------------------------------------------------*/

   /* --- process packing list size row ---*/
  PW01S-PW01310(); /* dpick.vsplsz01*/

   /* --- process packing list hdr row ---*/
  PW01S-PW01320(); /* dpick.vsplhd01*/

   /* --- process packing list item row ---*/
  PW01S-PW01330(); /* dpick.vsplit01*/

   /* --- move w/s values to ASN Item and ASN Carton rows ---*/
  PW01S-PW01335();

   /* --- Process 1of1 Flag for the packing list item ---*/
  PW01S-PW01340-1OF1();

   /* --- Update the pk-comd-cnsld-cd on the pkg list hdr ---*/
  PW01S-PW01350();

   /* --- Update the expected weight ---*/
  PW01S-PW01360-WGT();

   /* --- check if any adjustments were made ---*/
  if (PW01W00.PW01W-ORIG-CRTN-WT == 0
   && PW01W00.PW01W-NEW-CRTN-WT == 0)

    /* --- no adjustments were made ---*/

    converseLib.validationFailed(465); /* make adjustments press <enter>*/
    PW01W00.XXXLOCID = "310";
  else /* at least one adjustment was made*/

    /* --- process the ship rec tables ---*/
    PW01S-PW01370();

    /* --- Ship rec Picking Exception record processing ---*/
    PW01S-PW01380();

    /* --- carryout all other database updates for new crtn ---*/
    PW01312();

    /* --- Close Carton JCL Creation processing ---*/
    PW01314();

    /* --- Transfer to Application PW0Y ---*/
    PW01315();
  end

end // end PW01310

// New Carton Database Updates
Function PW01312()
   /* --------------------------------------------------------*/
   /* Perform Close New Carton Database Updates.*/
   /* --------------------------------------------------------*/

  if (PW01M001.XWHCD == "02" || 
  PW01M001.XWHCD == "04" || 
  PW01M001.XWHCD == "07" || 
  PW01M001.XWHCD == "51")

    PW01S-UCC128-CODE();
  else
    VAZCTN01.PK-UCC-128-CD = " ";
  end

   /* --- insert ASN Carton record ---*/
  VAZCTN01.PK-CRTN-UNIT-QTY = PW01W00.PW01W-TAD-NEW;
  VAZCTN01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VAZCTN01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZCTN01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
  VAZCTN01.PK-MOVERS-STAT-CD = "01";
  PW01S-VAZCTN01-A(); /* 'a ' dship.vazctn01*/

  PW01W00.PW01W-TAD-NEW = 0; /* initialise total qty*/

   /* --- get the ASN header record ---*/
  VAZHDR01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZHDR01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZHDR01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;

  PW01S-VAZHDR01-S(); /* 's ' dship.vazhdr01*/

   /* --- update the ASN header record ---*/
  VAZHDR01.SR-TOT-NBR-CARTONS = VAZHDR01.SR-TOT-NBR-CARTONS + 1;
  VAZHDR01.AZ-ASN-STAT-CD = "NS";
  VAZHDR01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZHDR01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

  PW01S-VAZHDR01-U(); /* 's ' dship.vazhdr01*/

   /* --- sum the pk-crtn-unit-qty on the ASN crtn ---*/
  VAZCTN01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCTN01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCTN01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCTN01.OP-CUST-ORD-ID = PW01M001.PW01MORD;
  VAZCTN01.OP-NIKE-ORD-ID = PW01W01.OP1NORID;
  VAZCTN01.PK-CRTN-SEQ-NBR = -1;
  VAZCTN01.PK-PICK-SCHED-NBR = -1;

  PW01S-VAZCTN01-SUM(); /* sum pk-crtn-unit-qty on azctn*/

   /* --- get the ASN Order record ---*/
  VAZORD01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZORD01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZORD01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZORD01.OP-CUST-ORD-ID = PW01M001.PW01MORD;
  VAZORD01.OP-NIKE-ORD-ID = PW01W01.OP1NORID;

  PW01S-VAZORD01-S(); /* 's ' dship.vazord01*/

   /* --- Update the ASN Order record ---*/
  VAZORD01.AZ-TOT-ORD-CARTONS = VAZORD01.AZ-TOT-ORD-CARTONS + 1;
  VAZORD01.OP-ORD-TOT-UNITS = AZFREC.IO-TOT-PK-CRTN-UNIT-QTY;
  VAZORD01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZORD01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

  PW01S-VAZORD01-U(); /* 'u ' dship.vazord01*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* commit changes*/

end // end PW01312

// New Carton JCL Creation
Function PW01314()
   /* ----------------------------------------------------*/
   /* Submit JCL using the TA0P Subprogram.*/
   /* ----------------------------------------------------*/

   /* --- Determine in which CICS Region the program is running ---*/
  PW01S-FIND-CICS();

  if (TA3REC.TA3RGNID == "03")
    PW01314P(); /* submit PROD JCL*/
  else
    PW01314T(); /* submit TEST JCL*/
  end

  if (PW01W00.PW01W-JOB-SUB-SW == "Y")
    PW01W00.PW01WMSG = 516;
    PW01W00.PW01W-JOB-SUB-SW = " ";
  else
    PW01W00.PW01WMSG = 32; /* Updates successful*/
  end

  PW01W00.XXXLOCID = "314";

  PW01W01.PW01WCTN = PW01W01.PW01W-NEW-CRTN;
  PW01W01.PKDNCSQN = PW01W01.PW01W-NEW-CRTN;

  if (PW01W01.XWHCD == "51"
   || PW01W01.XWHCD == "42")
    PW01W01.PW01WTOT = PW01W01.PWPTOSQN;
  end

  PW01W00.PW01WSWR = "Y"; /* data requested*/

end // end PW01314

// Format PROD JCL for download
Function PW01314P()
   /* ------------------------------------------------------------*/
   /* Clear JCL array rows*/
   /* ------------------------------------------------------------*/
  move " " to TA6REC.TA6ROW[1] for all;

   /* ------------------------------------------------------------*/
   /* Initialize index*/
   /* ------------------------------------------------------------*/
  TA6REC.TA6INDEX = 1;
  PW01W11.PW01WIDX2 = 1;

   /* ------------------------------------------------------------*/
   /* Build download record*/
   /* ------------------------------------------------------------*/

  PW01W99.PW01W-RECD-TYPE-A = "A";

  PW01W99.XWHCD = PW01W01.XWHCD;
  PW01W99.PW01W-ORIG-CRTN = PW01W01.PKDNCSQN;
  PW01W99.PW01W-NEW-CRTN = PW01W01.PW01W-NEW-CRTN;
  PW01W99.PW01W-NEW-CRTN-WT = PW01W00.PW01W-NEW-CRTN-WT;
  PW01W99.PW01W-OP1CUOID = PW01W01.OP1CUOID;
  PW01W99.PW01W-OP1NORID = PW01W01.OP1NORID;
  PW01W99.PW01W-TSIPLNBR = PW01W01.TSIPLNBR;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* (moving each line of JCL into TA6REC working storage)*/
   /* ------------------------------------------------------------*/

  while (PW01TP2.TARJCL[PW01WIDX2] != "/*EOF") /* Until end of table*/

    if (PW01TP2.TARTYPE[PW01WIDX2] == "J") /* Jobcard*/
      PW01W11.PW01W-JOB-CARD = PW01TP2.TARJCL[PW01WIDX2];
      PW01W11.PW01W-XWHCDJ = PW01W01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW01TP2.TARTYPE[PW01WIDX2] == "1") /* output statement*/
      if (PW01W01.XWHCD == "02"
       || PW01W01.XWHCD == "04"
       || PW01W01.XWHCD == "07"
       || PW01W01.XWHCD == "42") /* Deactivate movers for Canada*/
      else
        PW01W11.PW01W-OUTPUT-CARD = PW01TP2.TARJCL[PW01WIDX2];
        if (PW01W-OUTPUT-LIT == "OUTPUT") /* Deactivate movers for Canada*/
   /* IF PW01W01.XWHCD EQ '42';*/
   /* MOVE '230' TO PW01W11.PW01W-OUTPUT-RMT;*/
   /* END;*/
          if (PW01W01.XWHCD == "51")
            PW01W11.PW01W-OUTPUT-RMT = "123";
          end
        end
        TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW01TP2.TARTYPE[PW01WIDX2] == "W") /* whse field*/
      PW01W11.PW01W-WHSE-CARD = PW01TP2.TARJCL[PW01WIDX2];
      PW01W11.PW01W-XWHCDW = PW01W01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-WHSE-CARD; /* JCL*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW01TP2.TARTYPE[PW01WIDX2] == "P") /* pk1770 parm statement*/
      TA6REC.TARJCL[TA6INDEX] = PW01W99.PW01W-PK1770-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW01TP2.TARTYPE[PW01WIDX2] == "Q") /* az153d parm statement*/
      PW01W11.PW01W-AZ153D-PARM-CARD = " ";
      PW01W11.PW01W-AZ153D-PARM-TRAN-ID = "PW0Y";
      PW01W11.PW01W-AZ153D-PARM-WHSE-CD = PW01W01.XWHCD;
      PW01W11.PW01W-AZ153D-PARM-BILL-OF-LADING = PW01W01.PK1BLLAD;
      PW01W11.PW01W-AZ153D-PARM-BOL-SUB-NBR = PW01W01.SR2BLLSU;
      PW01W11.PW01W-AZ153D-PARM-MOVERS-STAT-CD = "01";
      TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-AZ153D-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW01TP2.TARTYPE[PW01WIDX2] == "F") /* ftp statements*/
      if (PW01W01.XWHCD == "02"
       || PW01W01.XWHCD == "04"
       || PW01W01.XWHCD == "07"
       || PW01W01.XWHCD == "42")

        PW01W11.PW01W-FTP-CARD = PW01TP2.TARJCL[PW01WIDX2];

        if (PW01W11.PW01W-FTP-LIT == "TARGET")
          if (PW01W01.XWHCD == "02")
            PW01W11.PW01W-FTP-TARGET = "grsun1";
          end
          if (PW01W01.XWHCD == "04")
            PW01W11.PW01W-FTP-TARGET = "memfware";
          end
          if (PW01W01.XWHCD == "07")
            PW01W11.PW01W-FTP-TARGET = "wilfware";
          end
          if (PW01W01.XWHCD == "42")
            PW01W11.PW01W-FTP-TARGET = "SCARBORO-SVR-34";
          end
        end

        if (PW01W11.PW01W-FTP-LIT == "FTPPAR")
          PW01W11.PW01W-FTPPARMS-WHSE-CD = PW01W01.XWHCD;
        end

        TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW01TP2.TARTYPE[PW01WIDX2] == "S") /* RSH statements*/
      if (PW01W01.XWHCD == "02"
       || PW01W01.XWHCD == "04"
       || PW01W01.XWHCD == "07")

        PW01W11.PW01W-RSH-CARD = PW01TP2.TARJCL[PW01WIDX2];
        if (PW01W11.PW01W-RSH-LIT == "TAR")
          if (PW01W01.XWHCD == "02")
            PW01W11.PW01W-RSH-TARGET = "grsun1";
          end
          if (PW01W01.XWHCD == "04")
            PW01W11.PW01W-RSH-TARGET = "memfware";
          end
          if (PW01W01.XWHCD == "07")
            PW01W11.PW01W-RSH-TARGET = "wilfware";
          end
        end

        if (PW01W11.PW01W-RSH-LIT == "CMD")
          PW01W11.PW01W-RSH-CMD-WHSE-CD = PW01W01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW01TP2.TARTYPE[PW01WIDX2] == " ")
      TA6REC.TARJCL[TA6INDEX] = PW01TP2.TARJCL[PW01WIDX2]; /* JCL*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    PW01W11.PW01WIDX2 = PW01W11.PW01WIDX2 + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = PW01TP2.TARJCL[PW01WIDX2]; /* JCL*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution*/
   /* using TA0P subprogram.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  PW01W00.XXXLOCID = "320"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PW01W00.PW01W-JOB-SUB-SW = "Y";

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
  end

  return; /* Exit to display map*/

end // end PW01314P

// Format TEST JCL for download
Function PW01314T()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

   /* --- Show module identification ---*/

  PW01W00.XXXLOCID = "330"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* Clear JCL array rows*/
   /* ------------------------------------------------------------*/
  move " " to TA6REC.TA6ROW[1] for all;

   /* ------------------------------------------------------------*/
   /* Initialize index*/
   /* ------------------------------------------------------------*/
  TA6REC.TA6INDEX = 1;
  PW01W11.PW01WIDX2 = 1;

   /* ------------------------------------------------------------*/
   /* Build download record*/
   /* ------------------------------------------------------------*/

  PW01W99.PW01W-RECD-TYPE-A = "A";

  PW01W99.XWHCD = PW01W01.XWHCD;
  PW01W99.PW01W-ORIG-CRTN = PW01W01.PKDNCSQN;
  PW01W99.PW01W-NEW-CRTN = PW01W01.PW01W-NEW-CRTN;
  PW01W99.PW01W-NEW-CRTN-WT = PW01W00.PW01W-NEW-CRTN-WT;
  PW01W99.PW01W-OP1CUOID = PW01W01.OP1CUOID;
  PW01W99.PW01W-OP1NORID = PW01W01.OP1NORID;
  PW01W99.PW01W-TSIPLNBR = PW01W01.TSIPLNBR;

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* (moving each line of JCL into TA6REC working storage)*/
   /* ------------------------------------------------------------*/

  while (PW01TT2.TARJCL[PW01WIDX2] != "/*EOF") /* Until end of table*/

    if (PW01TT2.TARTYPE[PW01WIDX2] == "J") /* whse field*/
      PW01W11.PW01W-JOB-CARD = PW01TT2.TARJCL[PW01WIDX2];
      PW01W11.PW01W-XWHCDJ = PW01W01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-JOB-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "N")
      TA6REC.TARJCL[TA6INDEX] = PW01TT2.TARJCL[PW01WIDX2]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = "N";
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "W") /* whse field*/
      PW01W11.PW01W-WHSE-CARD = PW01TT2.TARJCL[PW01WIDX2];
      PW01W11.PW01W-XWHCDW = PW01W01.XWHCD;
      TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-WHSE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "P") /* dwnld record*/
      TA6REC.TARJCL[TA6INDEX] = PW01W99.PW01W-PK1770-PARM-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "1") /* Parameters statement*/
      if (PW01W01.XWHCD == "02"
       || PW01W01.XWHCD == "04"
       || PW01W01.XWHCD == "07")
      else
        PW01W11.PW01W-OUTPUT-CARD = PW01TT2.TARJCL[PW01WIDX2];

        if (PW01W-OUTPUT-LIT == "OUTPUT")
          PW01W11.PW01W-OUTPUT-RMT = "950";
        end

        TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-OUTPUT-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "Q")
      PW01W11.PW01W-AZ153D-PARM-CARD = " ";
      PW01W11.PW01W-AZ153D-PARM-TRAN-ID = "PW0Y";
      PW01W11.PW01W-AZ153D-PARM-WHSE-CD = PW01W01.XWHCD;
      PW01W11.PW01W-AZ153D-PARM-BILL-OF-LADING = PW01W01.PK1BLLAD;
      PW01W11.PW01W-AZ153D-PARM-BOL-SUB-NBR = PW01W01.SR2BLLSU;
      PW01W11.PW01W-AZ153D-PARM-MOVERS-STAT-CD = "01";
      TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-AZ153D-PARM-CARD;

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "T")
      PW01W11.PW01W-TYPE-CARD = PW01TT2.TARJCL[PW01WIDX2];
      if (TA3REC.TA3RGNID == "04" /* MVSDEVL*/
       || TA3REC.TA3RGNID == "08")
        PW01W11.PW01W-TYPE-VALUE = "T";
      else
        if (TA3REC.TA3RGNID == "02")
          PW01W11.PW01W-TYPE-VALUE = "D";
        else
          if (TA3REC.TA3RGNID == "05")
            PW01W11.PW01W-TYPE-VALUE = "F";
          else
            if (TA3REC.TA3RGNID == "06")
              PW01W11.PW01W-TYPE-VALUE = "Y";
            else
              PW01W11.PW01W-TYPE-VALUE = "T";
            end
          end
        end
      end

      TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-TYPE-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "R")
      PW01W11.PW01W-SYSTSIN-CARD = PW01TT2.TARJCL[PW01WIDX2];
      if (TA3REC.TA3RGNID == "04" /* MVSDEVL*/
       || TA3REC.TA3RGNID == "08")
        PW01W11.PW01W-DSN-VALUE = "T";
      else
        if (TA3REC.TA3RGNID == "02")
          PW01W11.PW01W-DSN-VALUE = "D";
        else
          if (TA3REC.TA3RGNID == "05")
            PW01W11.PW01W-DSN-VALUE = "F";
          else
            if (TA3REC.TA3RGNID == "06")
              PW01W11.PW01W-DSN-VALUE = "Y";
            else
              PW01W11.PW01W-DSN-VALUE = "T";
            end
          end
        end
      end

      TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-SYSTSIN-CARD;
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "F") /* FTP statements*/
      if (PW01W01.XWHCD == "02"
       || PW01W01.XWHCD == "04"
       || PW01W01.XWHCD == "07"
       || PW01W01.XWHCD == "42")

        PW01W11.PW01W-FTP-CARD = PW01TT2.TARJCL[PW01WIDX2];
        if (PW01W11.PW01W-FTP-LIT == "TARGET")
          if (PW01W01.XWHCD == "02"
           || PW01W01.XWHCD == "04"
           || PW01W01.XWHCD == "07")

            PW01W11.PW01W-FTP-TARGET = "camware";
          end

          if (PW01W01.XWHCD == "42")
            PW01W11.PW01W-FTP-TARGET = "SCARBORO-SVR-34";
          end
        end

        if (PW01W11.PW01W-FTP-LIT == "FTPPAR")
          PW01W11.PW01W-FTPPARMS-WHSE-CD = PW01W01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-FTP-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == "S") /* RSH statements*/
      if (PW01W01.XWHCD == "02"
       || PW01W01.XWHCD == "04"
       || PW01W01.XWHCD == "07")

        PW01W11.PW01W-RSH-CARD = PW01TT2.TARJCL[PW01WIDX2];
        if (PW01W11.PW01W-RSH-LIT == "TAR")
          PW01W11.PW01W-RSH-TARGET = "camware";
        end
        if (PW01W11.PW01W-RSH-LIT == "CMD")
          PW01W11.PW01W-RSH-CMD-WHSE-CD = PW01W01.XWHCD;
        end
        TA6REC.TARJCL[TA6INDEX] = PW01W11.PW01W-RSH-CARD;
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      end
    end

    if (PW01TT2.TARTYPE[PW01WIDX2] == " ")
      TA6REC.TARJCL[TA6INDEX] = PW01TT2.TARJCL[PW01WIDX2]; /* JCL*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
    end

    PW01W11.PW01WIDX2 = PW01W11.PW01WIDX2 + 1;

  end

  TA6REC.TARJCL[TA6INDEX] = PW01TT2.TARJCL[PW01WIDX2]; /* JCL*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution*/
   /* using TA0P subprogram.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

  PW01W00.XXXLOCID = "330"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    PW01W00.PW01W-JOB-SUB-SW = "Y";
  end

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
  end

  return; /* Return to previous process*/

end // end PW01314T

// Transfer to PW0Y Application
Function PW01315()
   /* ----------------------------------------------------------*/
   /* Transfer Back to PW0Y.*/
   /* ----------------------------------------------------------*/

  COMMAREA.CATOAP = "PW0Y"; /* Application find code*/

   /* --- move key data to common record ---*/
  set PW01REC empty; /* initialise common record*/

  PW01REC.XWH-WHSE-CD = PW01W01.XWHCD;
  PW01REC.PK-CRTN-SEQ-NBR = PW01M001.PW01M-NEW-CRTN;

  if (PW01M001.PW01MTOT != 0)
    PW01REC.PW01W-TOTE-NBR-IND = "Y";
    PW01REC.PK-TOTE-SEQ-NBR = PW01M001.PW01MTOT;
  end

  PW01REC.PW01W-PW01WMSG = PW01W00.PW01WMSG;
  PW01REC.PW01W-RETURN-IND = "Y";

  COMMAREA.CA-USER-WORKAREA-4K = PW01REC.PW01-COMMON-REC;
  XSPKS01(); /* Exit to another application*/

  exit stack;

end // end PW01315

// Reset Highlighted Fields
Function PW01400()
   /* --- Display Pop-up window for Box Type Codes (YNTCD) ---*/
  PW01410();

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  set PW01M001.XWHCD initialAttributes; /* warehouse code*/

  set PW01M001.PW01M-PFKEY07 initialAttributes;
  set PW01M001.PW01M-PFKEY08 initialAttributes;

  set PW01M001.PW01M-NEWCRTN-LITERAL initialAttributes;
  set PW01M001.PW01M-NEW-CRTN initialAttributes;
  set PW01M001.PW01M-YNTCD-LITERAL initialAttributes;
  set PW01M001.YNTCD initialAttributes;
  set PW01M001.YNTABRV initialAttributes;

  set PW01M001.PW01M-PFKEY12 initialAttributes;

  set PW01M001.PW01MCTN initialAttributes; /* carton nbr*/
  set PW01M001.XGPCD initialAttributes; /* gpc code*/
  set PW01M001.SY1STNBR initialAttributes; /* style nbr*/
  set PW01M001.SY2CLRID initialAttributes; /* color id*/
  set PW01M001.XDMCD initialAttributes; /* dimension code*/
  set PW01M001.XQACD initialAttributes; /* quality code*/
  set PW01M001.PC2INSEG initialAttributes;
  set PW01M001.XEGCD initialAttributes;
  set PW01M001.XPGCD initialAttributes;
  set PW01M001.XUMCD initialAttributes;
  set PW01M001.XOWCD initialAttributes;

  PW01W00.PW01WIDX = 1;

  while (PW01W00.PW01WIDX <= 10) /* process temp storage*/

    set PW01M001.PW01MARZ[PW01WIDX] normal;
    set PW01M001.SL5LOCTN[PW01WIDX] normal;
    set PW01M001.SY4IDDSC[PW01WIDX] normal;
    set PW01M001.PW01MADJ[PW01WIDX] normal;

    set PW01M001.PW01M-ACTION[PW01WIDX] initialAttributes;

    PW01W00.PW01WIDX = PW01W00.PW01WIDX + 1; /* increment index*/
  end

  set PW01M001.CATOAP initialAttributes;
  set PW01M001.CAITEM initialAttributes;

end // end PW01400

// Box Code Pop-up window process
Function PW01410()
   /* ------------------------------------------------------------*/
   /* Process User request to display the Pop-uo window for*/
   /* Box Type Codes - YNTCD.*/
   /* ------------------------------------------------------------*/

  if (PW01M001.YNTCD == " ?")
    XPXX001(); /* initialisation*/

    XX0XW02.XX0XWHDR = "        BOX TYPE CODES";

    while (XX0XW02.XX0XWEND == "N") /* until end of request*/
      XPYNT01();
    end

    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      PW01M001.YNTCD = PW01W01.YNTCD;
    else
      PW01M001.YNTCD = YNTTBL.YNTCD[XX0XWPIX];
      if (PW01M001.YNTCD in YNTTBL.YNTCD)
        PW01M001.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
      end
    end

    converseLib.clearScreen();
    
    PW01W00.XXXLOCID = "400";
  end

end // end PW01410

// Verify the Entered Data
Function PW01500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    PW01W00.XXXLOCID = "500"; /* Module identification*/
    set PW01M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify User request to page by Product - either backwards*/
   /* (PF5) or forwards (PF6), or to page by Size - either*/
   /* backwards (PF7) or forwards (PF8).*/
   /* Check all modifiable fields except FCST Target.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)

    PW01510(); /* check all modifiable fields*/

    if (converseVar.validationMsgNum != 0)
      exit stack; /* display error message*/
    end

    PW01520(); /* verify scroll request*/

    if (converseVar.validationMsgNum != 0)
      exit stack; /* display error message*/
    end

    return;
  end

   /* ------------------------------------------------------------*/
   /* Close Carton request.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12)
    return;
  end

   /* ------------------------------------------------------------*/
   /* On Enter, Validate all modifiable fields*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter)

    /* --- check for change in detail line ---*/
    PW01530();

    if (PW01W00.PW01WNDS == "Y") /* detail line changed*/

      /* --- check box code ---*/
      if (PW01M001.YNTCD != PW01W01.YNTCD)
        PW01S-CHECK-BOX-CD();
      end

      /* --- validate detail changes ---*/
      PW01540();
    else

      /* --- no detail changes ---*/
      if (PW01W00.PW01W-FIRST-TIME-SW == "Y")
        if (PW01M001.YNTCD != PW01W01.YNTCD)

          /* --- check box code ---*/
          PW01S-CHECK-BOX-CD();
        end
      end
    end
  end

  if (PW01W00.PW01W-FIRST-TIME-SW == "Y")
    PW01W-FIRST-TIME-SW = "N";
  end

  if (converseVar.validationMsgNum != 0)
    exit stack; /* display error message*/
  end

end // end PW01500

// Check all Modifiable Fields
Function PW01510()
   /* ------------------------------------------------------*/
   /* If any field has been modified, display error message.*/
   /* ------------------------------------------------------*/

  PW01W00.PW01WIDX = PW01W02.PW01WNLD; /* nbr of lines loaded*/

  while (PW01W00.PW01WIDX > 0) /* process working storage*/

    if (PW01W02.PW01W-ACTION[PW01WIDX] != 
    PW01M001.PW01M-ACTION[PW01WIDX])

      set PW01M001.PW01M-ACTION[PW01WIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW01W00.XXXLOCID = "530";
    end

    if (PW01W02.PW01WADJ[PW01WIDX] != PW01M001.PW01MADJ[PW01WIDX])
      set PW01M001.PW01MADJ[PW01WIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW01W00.XXXLOCID = "530";
    end

    if (PW01W02.SY4IDDSC[PW01WIDX] != PW01M001.SY4IDDSC[PW01WIDX])
      set PW01M001.SY4IDDSC[PW01WIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW01W00.XXXLOCID = "530";
    end

    if (PW01W02.SL5LOCTN[PW01WIDX] != PW01M001.SL5LOCTN[PW01WIDX])
      set PW01M001.SL5LOCTN[PW01WIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW01W00.XXXLOCID = "530";
    end

    if (PW01W02.PW01WARZ[PW01WIDX] != PW01M001.PW01MARZ[PW01WIDX])
      set PW01M001.PW01MARZ[PW01WIDX] cursor, bold;
      converseLib.validationFailed(379);
      PW01W00.XXXLOCID = "530";
    end
    PW01W00.PW01WIDX = PW01W00.PW01WIDX - 1;
  end

end // end PW01510

// Verify Scroll Request
Function PW01520()
   /* ------------------------------------------------------------*/
   /* If User requested to scroll back by Product (PF5), check*/
   /* that the pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5
   && PW01W00.PW01W-IT-INDEX < 2)
    /* --- there are no previous pages to display ---*/

    PW01W00.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If User requested to scroll back by Size (PF7), check*/
   /* that the pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   && PW01W00.XXXTSPAG < 2)
    /* --- there are no previous pages to display ---*/

    PW01W00.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If User requested to scroll forward by size (PF8), check*/
   /* that the pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8
   && PW01W00.XXXTSPAG >= PW01W00.TA5TSQIX)
    /* --- there are no more pages to display ---*/

    PW01W00.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/
  end

end // end PW01520

// Check for detail fields chgs
Function PW01530()
   /* ------------------------------------------------------------*/
   /* Edit the detail fields starting at the bottomof the Screen.*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01WNDS = "N";
  PW01W00.PW01WIDX = 10;

  while (PW01W00.PW01WIDX > 0)

    if (PW01M001.PW01MARZ[PW01WIDX] != PW01W02.PW01WARZ[PW01WIDX]
     || PW01M001.SL5LOCTN[PW01WIDX] != PW01W02.SL5LOCTN[PW01WIDX]
     || PW01M001.SY4IDDSC[PW01WIDX] != PW01W02.SY4IDDSC[PW01WIDX]
     || PW01M001.PW01MADJ[PW01WIDX] != PW01W02.PW01WADJ[PW01WIDX]
     || PW01M001.PW01M-ACTION[PW01WIDX] != PW01W02.PW01W-ACTION[PW01WIDX])

      PW01W00.PW01WNDS = "Y";
      return;
    end

    PW01W00.PW01WIDX = PW01W00.PW01WIDX - 1;
  end

end // end PW01530

// Validate any Field changes
Function PW01540()
   /* ------------------------------------------------------------*/
   /* Edit the detail fields starting at the bottom of the Screen.*/
   /* ------------------------------------------------------------*/

  if (PW01M001.PW01M-ACTION[PW01WIDX] != 
  PW01W02.PW01W-ACTION[PW01WIDX])

    /* --- check if detail line has changed ---*/
    if (PW01M001.PW01MARZ[PW01WIDX] != PW01W02.PW01WARZ[PW01WIDX]
     || PW01M001.SL5LOCTN[PW01WIDX] != PW01W02.SL5LOCTN[PW01WIDX]
     || PW01M001.SY4IDDSC[PW01WIDX] != PW01W02.SY4IDDSC[PW01WIDX]
     || PW01M001.PW01MADJ[PW01WIDX] != 0)

      /* --- Validate adjustment quantity changes ---*/
      PW01541();

      /* --- Check if size is valid for area/zone/location ---*/
      PW01542();

      /* --- Validate the area/zone/location fields ---*/
      PW01543();

      /* ----------------------------------------------------------*/
      /* Check that both an 'A' and 'S' action code have not been*/
      /* entered. It is not possible to ADD and SPLIT a carton*/
      /* at the same time.*/
      /* ----------------------------------------------------------*/
      if (PW01M001.PW01M-ACTION[PW01WIDX] != 
      PW01W02.PW01W-ACTION[PW01WIDX])

        PW01550(); /* Check for different action cds*/
      end
    else
      /* --- no adj qty has been entered with the action code ---*/

      set PW01M001.PW01MADJ[PW01WIDX] cursor, bold;
      converseLib.validationFailed(341); /* required field*/
      PW01W00.XXXLOCID = "555";
      exit stack;
    end
  else

    /* --- check if detail line has changed ---*/
    if (PW01M001.PW01MARZ[PW01WIDX] != PW01W02.PW01WARZ[PW01WIDX]
     || PW01M001.SL5LOCTN[PW01WIDX] != PW01W02.SL5LOCTN[PW01WIDX]
     || PW01M001.SY4IDDSC[PW01WIDX] != PW01W02.SY4IDDSC[PW01WIDX]
     || PW01M001.PW01MADJ[PW01WIDX] != 0)

      /* --- action code has not been entered ---*/
      set PW01M001.PW01M-ACTION[PW01WIDX] cursor, bold;
      converseLib.validationFailed(341); /* required field, please re-enter*/
      PW01W00.XXXLOCID = "555";
      exit stack;
    end
  end

end // end PW01540

// Validate any Adj Qty Changes
Function PW01541()
   /* --- Edit the Adjustment Quantity fields ---*/

  if (PW01M001.PW01MADJ[PW01WIDX] == 0)
    set PW01M001.PW01MADJ[PW01WIDX] cursor, bold;
    converseLib.validationFailed(341); /* adj is required*/
    PW01W00.XXXLOCID = "555";
    exit stack;
  else
    if (PW01M001.PW01M-ACTION[PW01WIDX] == "A")
      if (PW01M001.PW01MADJ[PW01WIDX] > 0)

        /* --- Qty added to new carton ---*/
        PW01W00.PW01W-NEWCRTN-QTY[PW01WIDX] = PW01M001.PW01MADJ[PW01WIDX];

      else
        set PW01M001.PW01MADJ[PW01WIDX] cursor, bold;
        converseLib.validationFailed(381); /* cannot be less than zero*/
        PW01W00.XXXLOCID = "555";
        exit stack;
      end
    end

    if (PW01M001.PW01M-ACTION[PW01WIDX] == "S")
      if (PW01M001.PW01MADJ[PW01WIDX] > 0)

        /* --- Validate qty to be Split to new carton ---*/
        if (PW01M001.PW01MADJ[PW01WIDX] > PW01W02.PK1QTY[PW01WIDX])
          set PW01M001.PW01MADJ[PW01WIDX] cursor, bold;
          converseLib.validationFailed(381); /* cannot be less than zero*/
          PW01W00.XXXLOCID = "555";
          exit stack;
        else

          /* --- Qty split into a new carton ---*/
          PW01W00.PW01W-NEWCRTN-QTY[PW01WIDX] = PW01M001.PW01MADJ[PW01WIDX];

          /* --- Calculate Qty left in the original carton ---*/
          PW01W00.PW01W-ORIGCRTN-QTY[PW01WIDX] = PW01W02.PK1QTY[PW01WIDX] - PW01M001.PW01MADJ[PW01WIDX];

          PW01W00.PW01WQTY = PW01W02.PK1QTY[PW01WIDX] - PW01M001.PW01MADJ[PW01WIDX];

        end
      else
        /* --- Adj qty is less than zero ---*/
        set PW01M001.PW01MADJ[PW01WIDX] cursor, bold;
        converseLib.validationFailed(381); /* cannot be less than zero*/
        PW01W00.XXXLOCID = "555";
        exit stack;
      end
    end

    /* --- validate action field ---*/
    if (PW01M001.PW01M-ACTION[PW01WIDX] != "S" && 
    PW01M001.PW01M-ACTION[PW01WIDX] != "A")

      set PW01M001.PW01M-ACTION[PW01WIDX] cursor, bold;
      converseLib.validationFailed(517); /* requred field*/
      PW01W00.XXXLOCID = "555";
      exit stack;

    end
  end

end // end PW01541

// Validate Size Field Changes
Function PW01542()
   /* --- Check if Size is valid for the area/zone/location ---*/

  if (PW01M001.SY4IDDSC[PW01WIDX] == " ")
    set PW01M001.SY4IDDSC[PW01WIDX] cursor, bold;
    converseLib.validationFailed(341); /* size is a requred field*/
    PW01W00.XXXLOCID = "555";
    exit stack;
  else
    if (PW01M001.SY4IDDSC[PW01WIDX] != PW01W02.SY4IDDSC[PW01WIDX])

      /* --------------------------------------------------------*/
      /* It is not possible to change a size and therefore*/
      /* create a new detail line when splitting a carton.*/
      /* ie. can only split product currently in the carton.*/
      /* --------------------------------------------------------*/

      if (PW01M001.PW01M-ACTION[PW01WIDX] != "A")
        /* --- split was requested ---*/

        set PW01M001.PW01M-ACTION[PW01WIDX] cursor, bold;
        set PW01M001.PW01MARZ[PW01WIDX] bold;
        set PW01M001.SL5LOCTN[PW01WIDX] bold;
        set PW01M001.SY4IDDSC[PW01WIDX] bold;
        set PW01M001.PW01MADJ[PW01WIDX] bold;
        converseLib.validationFailed(453); /* size change allowed for ADD ctn only*/
        PW01W00.XXXLOCID = "555";
        exit stack;
      else
        /* --- check that new size is a valid size ---*/
        if (PW01M001.SY4IDDSC[PW01WIDX] in SYPREC.SY4IDDSC)
          PW01W02.PW01WSIZ[PW01WIDX] = SYPREC.SY5SZID[sysVar.arrayIndex];
        else
          set PW01M001.SY4IDDSC[PW01WIDX] cursor, bold;
          converseLib.validationFailed(342); /* invalid field*/
          PW01W00.XXXLOCID = "555";
          exit stack;
        end
      end

    end
  end

end // end PW01542

// Validate area/zone/loctn chgs
Function PW01543()
   /* --- Validate the location code ---*/

  if (PW01M001.SL5LOCTN[PW01WIDX] == " ")
    set PW01M001.SL5LOCTN[PW01WIDX] cursor, bold;
    converseLib.validationFailed(341); /* Location is a required field*/
    PW01W00.XXXLOCID = "555";
    exit stack;
  end

   /* --- Validate the area/zone fields ---*/

  if (PW01M001.PW01MARZ[PW01WIDX] == " ")
    set PW01M001.PW01MARZ[PW01WIDX] cursor, bold;
    converseLib.validationFailed(341); /* Area/Zone are required fields*/
    PW01W00.XXXLOCID = "555";
    exit stack;
  end

   /* --- Check that the area/zone/location is valid for the size ---*/
  if (PW01M001.PW01MARZ[PW01WIDX] != " "
   && PW01M001.SL5LOCTN[PW01WIDX] != " ")

    /* --- get Stock locate location  ---*/
    set SL5REC empty; /* initialise database row*/

    SL5REC.XWHCD = PW01W01.XWHCD;
    PW01W00.PW01WARZ = PW01M001.PW01MARZ[PW01WIDX];
    SL5REC.XARCD = PW01W00.XARCD;
    SL5REC.SL4ZONE = PW01W00.SL4ZONE;

    SL5REC.SL5LOCTN = PW01M001.SL5LOCTN[PW01WIDX];

    PW01S-VLOCAT01-S(); /* 's ' dstloc.vlocat01*/

    if (SQLCA.VAGen_SQLCODE != 0)
      set PW01M001.PW01MARZ[PW01WIDX] cursor, bold;
      set PW01M001.SL5LOCTN[PW01WIDX] bold;
      converseLib.validationFailed(238); /* invalid area/zone/location*/
      PW01W00.XXXLOCID = "555";
      exit stack;
    end
  end

end // end PW01543

// Check for different action cds
Function PW01550()
   /* ------------------------------------------------------------*/
   /* Validate that the User has not entered both 'A's and 'S's.*/
   /* It is not possible to Add and Split a carton at the same*/
   /* time.*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01WIX2 = 10;
  while (PW01W00.PW01WIX2 > 0)

    if (PW01M001.PW01M-ACTION[PW01WIX2] != 
    PW01M001.PW01M-ACTION[PW01WIDX]
     && PW01M001.PW01M-ACTION[PW01WIX2] != " ")

      set PW01M001.PW01M-ACTION[PW01WIDX] cursor, bold;
      set PW01M001.PW01M-ACTION[PW01WIX2] bold;
      set PW01M001.PW01MADJ[PW01WIDX] bold;
      set PW01M001.PW01MADJ[PW01WIX2] bold;
      converseLib.validationFailed(454);
                      /* cannot specify add and split at the same time*/
      PW01W00.XXXLOCID = "556";

    end

    PW01W00.PW01WIX2 = PW01W00.PW01WIX2 - 1;
  end

end // end PW01550

// Process Valid Input Request
Function PW01600()
   /* ------------------------------------------------------------*/
   /* Indicate map must be reformatted before display*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01WSWF = "Y"; /* set format map switch*/

   /* --------------------------------------------------------*/
   /* Close carton*/
   /* --------------------------------------------------------*/
  if (converseVar.eventKey is pf12)
    return;
  end

   /* --------------------------------------------------------*/
   /* Request to product scroll backwards*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf5)
    PW01616();
    return;
  end

   /* --------------------------------------------------------*/
   /* Request to product scroll forward*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf6)
    PW01617();
    return;
  end

   /* --------------------------------------------------------*/
   /* Request to size scroll backwards*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf7)
    PW01W00.XXXTSPAG = PW01W00.XXXTSPAG - 1;
    return;
  end

   /* --------------------------------------------------------*/
   /* Request to size scroll forward*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is pf8)
    PW01W00.XXXTSPAG = PW01W00.XXXTSPAG + 1;
    return;
  end

   /* ------------------------------------------------------------*/
   /* If detail data was changed, do updates.*/
   /* ------------------------------------------------------------*/

  if (PW01W00.PW01WNDS == "Y") /* detail data changed*/

    PW01630(); /* update all databases (A/S)*/

    PW01W00.PW01WMSG = 455; /* <enter> next product <pf12> clse*/
    PW01W00.XXXLOCID = "600";

  end

end // end PW01600

// Calculate Repack Time
Function PW01614()
   /* ------------------------------------------------------------*/
   /* Calculate Pack Time for the Original and New Carton*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01WPTM = 0;

  if (PWPREC.PWPPKTCD == "FC") /* full case*/
    return;
  end

   /* --- get picking control row ---*/
  set PKDREC empty; /* Clear row storage area*/
  PKDREC.XWHCD = PW01W01.XWHCD; /* whse code*/

  PW01S-VPKCTL01-S(); /* 's' dpick.vpkctl01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    PW01W00.PW01WPTM = PKDREC.PKDDHDPM;
  end

  PW01W00.XGPCD = PWPREC.XGPCD;

  if (PWPREC.XHDCD[1] > " ")
    PW01W00.XHDCD = PWPREC.XHDCD[1];
    if (PW01W00.XHDKEY in XHDTBL.XHDKEY)
      PW01W00.PW01WPTM = PW01W00.PW01WPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

  if (PWPREC.XHDCD[2] > " ")
    PW01W00.XHDCD = PWPREC.XHDCD[2];
    if (PW01W00.XHDKEY in XHDTBL.XHDKEY)
      PW01W00.PW01WPTM = PW01W00.PW01WPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

  if (PWPREC.XHDCD[3] > " ")
    PW01W00.XHDCD = PWPREC.XHDCD[3];
    if (PW01W00.XHDKEY in XHDTBL.XHDKEY)
      PW01W00.PW01WPTM = PW01W00.PW01WPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

  if (PWPREC.XHDCD[4] > " ")
    PW01W00.XHDCD = PWPREC.XHDCD[4];
    if (PW01W00.XHDKEY in XHDTBL.XHDKEY)
      PW01W00.PW01WPTM = PW01W00.PW01WPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

  if (PWPREC.XHDCD[5] > " ")
    PW01W00.XHDCD = PWPREC.XHDCD[5];
    if (PW01W00.XHDKEY in XHDTBL.XHDKEY)
      PW01W00.PW01WPTM = PW01W00.PW01WPTM + XHDTBL.XHDSHMM[sysVar.arrayIndex];
    end
  end

end // end PW01614

// Process Product Page Back -PF5
Function PW01616()
   /* ------------------------------------------------------------*/
   /* Read the previous packing list item record. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-IT-INDEX = PW01W00.PW01W-IT-INDEX - 1;

  PW01S-CRS-VSPLIT01(); /* set up csr for packing list item*/

  PW01W00.PW01WPLS = "N";

  while (SQLCA.VAGen_SQLCODE == 0
   && PW01W00.PW01WPLS != "Y")

    PW01S-NXT-VSPLIT01();

    if (PWPREC.XWHCD == PW01W00.XWH-WHSE-CD[PW01W-IT-INDEX]
     && PWPREC.PKDNCSQN == PW01W00.PK-CRTN-SEQ-NBR[PW01W-IT-INDEX]
     && PWPREC.PWPTOSQN == PW01W00.PK-TOTE-SEQ-NBR[PW01W-IT-INDEX])
      PW01W00.PW01WPLS = "Y"; /* Previous item record*/
    end
  end

  PW01S35(); /* Check packing list item*/

   /* ------------------------------------------------------------*/
   /* Purge temporary storage once next product is found*/
   /* ------------------------------------------------------------*/

  PW01S01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* A packing list item row was found and so set up the*/
   /* keys in w01.*/
   /* ------------------------------------------------------------*/

  PW01S-MV-PWPREC-01(); /* Set up the keys in w01*/

  PW01S-LOAD-SIZE-TS(); /* Load temporary storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW01W00.XXXTSPAG = 1;
  PW01W00.PW01WSWR = "N"; /* Request for data switch*/
  PW01W01.CACHGFL = "Y"; /* Data is available for change*/

end // end PW01616

// Process Product Page Fwd (PF6)
Function PW01617()
   /* ------------------------------------------------------------*/
   /* Get the next packing list item record. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01S-CRS-VSPLIT01();

  PW01W00.PW01WPLS = "N";

  while (SQLCA.VAGen_SQLCODE == 0
   && PW01W00.PW01WPLS != "Y")

    PW01S-NXT-VSPLIT01();
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(375); /* No more carton/tote data*/
      PW01W00.XXXLOCID = "617";

      PW01S-CLS-VSPLIT01();
      return;
    else

      PW01S-CMPARE-SPLIT(); /* Check fields for new item*/
    end
  end

  if (PW01W00.PW01WPLS == "Y") /* New item found*/
    PW01S-LOAD-ITEMS(); /* Load key fields for new item*/
  end

  PW01S35(); /* Check the packing list item*/

   /* ------------------------------------------------------------*/
   /* Purge temporary storage once next product is found*/
   /* ------------------------------------------------------------*/

  PW01S01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* A packing list item row (dpick.vsplit01) was found so set*/
   /* up the keys in w01.*/
   /* ------------------------------------------------------------*/

  PW01S-MV-PWPREC-01(); /* Set up the keys in w01*/

  PW01S-LOAD-SIZE-TS(); /* Load temporary storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW01W00.XXXTSPAG = 1;
  PW01W00.PW01WSWR = "N"; /* Request for data switch*/
  PW01W01.CACHGFL = "Y"; /* Data is available for change*/

end // end PW01617

// Update Databases
Function PW01630()
   /* ------------------------------------------------------------*/
   /* Update DB2 Tables with User's changes.*/
   /* ------------------------------------------------------------*/
   /*  */
   /* --- Get date and time ---*/

  XX0XS01();

   /* ------------------------------------------------------------*/
   /* Get Database rows that are needed for updates.*/
   /* ------------------------------------------------------------*/

  PW01631();

   /* ------------------------------------------------------------*/
   /* Initialise working storage fields.*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-ZERO-SZ-SW = "N";
                        /* split out all qty for a size indicator*/
  PW01W00.PW01WTQY = 0; /* total adj qty*/
  PW01W00.PW01WTDL = 0; /* total adj dollar amt*/
  PW01W00.PW01WIDX = 1; /* set index*/

   /* -------------------------------------------------------------*/
   /* Save current page and read first page of temporary storage.*/
   /* -------------------------------------------------------------*/

  PW01632();

   /* ------------------------------------------------------------*/
   /* Calculate Carton Repack Time.*/
   /* ------------------------------------------------------------*/

  PW01614();

  PW01W00.PW01W-HLD-PTM = PW01W00.PW01WPTM;

   /* ----------------------------------------------------------*/
   /* format and update the packing list item table.*/
   /* ----------------------------------------------------------*/

  PW01S-FMT-VSPLIT01();

   /* ----------------------------------------------------------*/
   /* Update the packing list header table.*/
   /* Note: Update the dpick.vsplhd01 only once per carton.*/
   /* ----------------------------------------------------------*/

  PW01633();

end // end PW01630

// Retrieve Database rows
Function PW01631()
   /* ------------------------------------------------------------*/
   /* Get all database rows that are needed for the updates.*/
   /* ------------------------------------------------------------*/

   /* --- DPICK Tables ---*/
   /* --- get packing list item row ---*/

  set PWPREC empty; /* initialise packing list item*/

  PWPREC.XWHCD = PW01W01.XWHCD; /* whse cd*/
  PWPREC.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list nbr*/
  PWPREC.OP1PARTN = PW01W01.OP1PARTN; /* order part char*/
  PWPREC.OP1CUOID = PW01W01.OP1CUOID; /* cust order id*/
  PWPREC.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/
  PWPREC.OP2LNINB = PW01W01.OP2LNINB; /* line item nbr*/
  PWPREC.PWPTOSQN = PW01W01.PWPTOSQN; /* tote seq nbr*/
  PWPREC.PKDNCSQN = PW01W01.PKDNCSQN; /* carton seq nbr*/

  PW01S-VSPLIT01-S(); /* 's' dpick.vsplit01*/

   /* --- get packing list header row ---*/

  set PWOREC empty; /* initialise packing list hdr*/

  PWOREC.XWHCD = PW01W01.XWHCD; /* whse cd*/
  PWOREC.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list nbr*/
  PWOREC.OP1PARTN = PW01W01.OP1PARTN; /* order part char*/
  PWOREC.OP1CUOID = PW01W01.OP1CUOID; /* cust order id*/
  PWOREC.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/

  PW01S-VSPLHD01-S(); /* 's' dpick.vsplhd01*/

  PW01W00.PW01W-PWOREC-ZZZSDT = PWOREC.ZZZSDT;

end // end PW01631

// Save curr page to Temp Storage
Function PW01632()
   /* -------------------------------------------------------------*/
   /* Save the current page and read page number one from*/
   /* temporary storage.*/
   /* -------------------------------------------------------------*/

   /* --- if map detail has changed, move map to temp storage ---*/
  PW01S-MOVE-MAP();

   /* --- update current page to temp storage ---*/
  PW01S-UPD-TEMP();

  PW01W00.PW01W-HOLD-PAGE = PW01W00.XXXTSPAG;
  PW01W00.XXXTSPAG = 1; /* read page one*/

  while (PW01W00.XXXTSPAG <= PW01W00.TA5TSQIX)
                                  /* current page LE high page*/

    PW01W00.PW01W-UPD-TEMPSTOR = "N";

    PW01S14(); /* read temporary storage*/

    /* --- format packing list size table ---*/
    PW01S-FMT-VSPLSZ01();

    if (PW01W00.PW01W-UPD-TEMPSTOR == "Y")
      PW01S-UPD-TEMP(); /* update temporary storage*/
    end

    PW01W00.XXXTSPAG = PW01W00.XXXTSPAG + 1;

  end

   /* ----------------------------------------------------------*/
   /* Reset working storage to current page of detail line*/
   /* ----------------------------------------------------------*/
  TA5REC.TA5TSQIX = PW01W00.PW01W-HOLD-PAGE;
  PW01W00.XXXTSPAG = PW01W00.PW01W-HOLD-PAGE;

   /* Read Temporary Storage ---*/
  PW01S14();

end // end PW01632

// Update the Packing List Hdr
Function PW01633()
   /* ----------------------------------------------------------*/
   /* Update the Packing List Header Table.*/
   /*  */
   /* Note: Dpick.vsplhd01 is only updated once for a Carton.*/
   /* (Format the pk-comb-cnsld-cd to the highest cd in the*/
   /* packing list item table for the packing list hdr).*/
   /* ----------------------------------------------------------*/

  if (PW01W00.PW01W-SPLHD-UPD-SW == "N")

    /* --- build a cursor on the packing list hdr table ---*/

    set PWOREC empty; /* Clear row storage area*/

    PWOREC.XWHCD = PW01W01.XWHCD;
    PWOREC.TSIPLNBR = PW01W01.TSIPLNBR;
    PWOREC.ZZZSDT = PW01W00.PW01W-PWOREC-ZZZSDT;

    PW01S-VSPLHD01-S2(); /* 's2' dpick.vsplhd01*/

    while (SQLCA.VAGen_SQLCODE == 0)

      /* --- get new packing list hdr row ---*/
      PW01S-VSPLHD01-N2(); /* 'n2' dpick.vsplhd01*/

      if (SQLCA.VAGen_SQLCODE == 0)
        PW01S-MV-PWOREC();

        /* --- pk-nbr-crtn-ord is based on order number ---*/
        /* --- pk-outer-ord-qty is based on order number ---*/

        if (PWOREC.OP1CUOID == PW01W01.OP1CUOID
         && PWOREC.OP1NORID == PW01W01.OP1NORID
         && PWOREC.OP1PARTN == PW01W01.OP1PARTN)

          PW01W07.PK-COMB-CNSLD-CD[PW01W-W07-IDX] = PW01W00.PW01W-HIGH-COMB-CD;

          PW01W07.PWONCTNO[PW01W-W07-IDX] = PWOREC.PWONCTNO + 1;

          if (PWOREC.XWHCD == "51"
           || PWOREC.XWHCD == "42") /* Apparel warehouses*/
            if (PWOREC.PK-INNER-CRTN-FL == "Y"
             && PWPREC.PK-OUTER-SEQ-NBR == 0)

              PW01W07.PK-OUTER-ORD-QTY[PW01W-W07-IDX] = PWOREC.PK-OUTER-ORD-QTY + 1;

            end
          end
        end

        /* --- pk-nbr-of-cartons is based on packing list ---*/
        PW01W07.PK1NBCTN[PW01W-W07-IDX] = PWOREC.PK1NBCTN + 1;

        /* --- pk-outer-crtn-qty is based on packing list ---*/
        if (PWOREC.XWHCD == "51"
         || PWOREC.XWHCD == "42") /* apparel warehouses*/
          if (PWOREC.PK-INNER-CRTN-FL == "Y"
           && PWPREC.PK-OUTER-SEQ-NBR == 0)

            PW01W07.PK-OUTER-CRTN-QTY[PW01W-W07-IDX] = PWOREC.PK-OUTER-CRTN-QTY + 1;

          end
        end

        PW01W07.PW01W-IO-FUNCTION[PW01W-W07-IDX] = "U";
      end
    end

    /* --- Close the packing list hdr cursor---*/
    PW01S-VSPLHD01-C2(); /* 'c2' dpick.vsplhd01*/

    PW01W00.PW01W-SPLHD-UPD-SW = "Y"; /* Updated*/
  end

end // end PW01633

// Process Split Carton
Function PW01635()
   /* ------------------------------------------------------------*/
   /* Perform Split cartons at the size level.*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-ACTION-IND = "S";

   /* --- Calculate the total adj for the original crtn ---*/
  PW01W00.PW01WTAD = PW01W00.PW01WTAD - PW01W02.PW01WADJ[PW01WIDX];

   /* --- Calculate the total adj for the new crtn ---*/
  PW01W00.PW01W-TAD-NEW = PW01W00.PW01W-TAD-NEW + PW01W02.PW01WADJ[PW01WIDX];

   /* ------------------------------------------------------------*/
   /* Process the Original Carton.*/
   /* ------------------------------------------------------------*/

  PW01636();

   /* ------------------------------------------------------------*/
   /* Check for Consolidated cartons.*/
   /* ------------------------------------------------------------*/

  PW01637();

   /* --- ASN Item Processing ---*/
  PW01S-PW016351();

   /* --- ASN Carton Processing ---*/
  PW01S-PW016352();

   /* ------------------------------------------------------------*/
   /* New Carton Processing.*/
   /* ------------------------------------------------------------*/

   /* Calculate New Carton weight*/
  PW01S-NEW-CRTNWT();

  PW01W00.PW01W-NEW-CRTN-WT = PW01W00.PW01W-NEW-CRTN-WT + PW01W00.PW01W-NEW-SIZE-WT;

  PW01S-MV-PWQREC-01();

  PW01W06.PKDNCSQN[PW01W-W06-IDX] = PW01M001.PW01M-NEW-CRTN;
  PW01W06.PK1QTY[PW01W-W06-IDX] = PW01W02.PW01WADJ[PW01WIDX];
  PW01W06.PW01W-IO-FUNCTION[PW01W-W06-IDX] = "A";
  PW01W06.PW01W-XCP-FL[PW01W-W06-IDX] = "N";

   /* ------------------------------------------------------------*/
   /* Clear Adj Qty and Action Fields After Processing.*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-UPD-TEMPSTOR = "Y";
  PW01W02.PW01WADJ[PW01WIDX] = 0; /* clear adj qty field*/
  PW01W02.PW01W-ACTION[PW01WIDX] = " ";

end // end PW01635

// Split Processing for Orig Crtn
Function PW01636()
   /* ------------------------------------------------------------*/
   /* Process the Original Carton.*/
   /* ------------------------------------------------------------*/

   /* --- get the packing list size row ---*/
  set VSPLSZ02 empty; /* initialise packing list size rec'd*/

  VSPLSZ02.XWHCD = PW01W01.XWHCD; /* whse cd*/
  VSPLSZ02.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list nbr*/
  VSPLSZ02.OP1PARTN = PW01W01.OP1PARTN; /* ord part char*/
  VSPLSZ02.OP1CUOID = PW01W01.OP1CUOID; /* cust order id*/
  VSPLSZ02.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/
  VSPLSZ02.OP2LNINB = PW01W01.OP2LNINB; /* line item nbr*/
  VSPLSZ02.PWPTOSQN = PW01W01.PWPTOSQN; /* tote seq nbr*/
  VSPLSZ02.PKDNCSQN = PW01W01.PKDNCSQN; /* carton seq nbr*/

  VSPLSZ02.XARCD = PW01W02.XARCD[PW01WIDX];
  VSPLSZ02.SL4ZONE = PW01W02.SL4ZONE[PW01WIDX];
  VSPLSZ02.SL5LOCTN = PW01W02.SL5LOCTN[PW01WIDX];
  VSPLSZ02.SY5SZID = PW01W02.SY5SZID[PW01WIDX]; /* new size*/

   /* 'S' dpick.vsplsz01*/
  PW01S-VSPLSZ01-S();
  PW01S-ORIG-CRTNWT();

  PW01W00.PW01W-ORIG-CRTN-WT = PW01W00.PW01W-ORIG-CRTN-WT + PW01W00.PW01W-ORIG-SIZE-WT;

  PW01S-MV-PWQREC-01();

  PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX] = PW01W02.PW01WADJ[PW01WIDX];
  PW01W06.PK1QTY[PW01W-W06-IDX] = VSPLSZ02.PK1QTY - PW01W02.PW01WADJ[PW01WIDX];

  PW01W00.PW01W-NBR-PROD-CRTN = PW01W00.PW01W-NBR-PROD-CRTN - PW01W02.PW01WADJ[PW01WIDX];

  PW01W06.PW01W-XCP-FL[PW01W-W06-IDX] = "N";

  if (PW01W06.PK1QTY[PW01W-W06-IDX] <= 0)
                                 /* split out all qty for size*/
    PW01W00.PW01W-ZERO-SZ-SW = "Y";

    /* --- check there is Product left in original ctn ---*/
    PW01S-ZERO-SZ();

    PW01W00.PW01W-NBR-DETAIL-LN = PW01W00.PW01W-NBR-DETAIL-LN - 1;
    PW01W06.PW01W-IO-FUNCTION[PW01W-W06-IDX] = "D";
  else
    PW01W06.PW01W-IO-FUNCTION[PW01W-W06-IDX] = "U";
  end

  PW01W02.PK1QTY[PW01WIDX] = PW01W06.PK1QTY[PW01W-W06-IDX];

end // end PW01636

// Consolidated Carton Process
Function PW01637()
   /* ------------------------------------------------------------*/
   /* Processing for Consolidated cartons.*/
   /* ------------------------------------------------------------*/

  set VAZCTN01 empty; /* initialise ASN Carton row*/
  set VAZCIT01 empty; /* initialise ASN Item row*/

  if (PWPREC.PK-CNSLD-FL == "Y"
   && PWPREC.PK-MSTR-CRTN-FL == "N")

    PWPREC.PK-MSTR-CRTN-FL = "Y";

    PW01S-VSPLIT01-SU(); /* retrieve master carton number*/

    VAZCSZ01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
    VAZCIT01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
    VAZCTN01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
  else
    VAZCSZ01.PK-CRTN-SEQ-NBR = PW01W01.PKDNCSQN;
    VAZCIT01.PK-CRTN-SEQ-NBR = PW01W01.PKDNCSQN;
    VAZCTN01.PK-CRTN-SEQ-NBR = PW01W01.PKDNCSQN;
  end

  if (PWPREC.PK-CNSLD-FL == "N"
   && PWPREC.PK-ZONE-CNSLD-FL == "Y"
   && PWPREC.PK-ZN-CNSLD-MSTRFL == "N")

    PWPREC.PK-ZN-CNSLD-MSTRFL = "Y";

    PW01S-VSPLIT01-SQ(); /* retrieve master carton number*/

    VAZCSZ01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
    VAZCIT01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
    VAZCTN01.PK-CRTN-SEQ-NBR = PWPREC.PKDNCSQN;
  end

end // end PW01637

// Get Apparel Packing List Items
Function PW01S-APPRL-VSPLIT()
   /* -----------------------------------------------------------*/
   /* If tote and carton number are entered, use s7.*/
   /* If only tote is entered, use s2.*/
   /* If only carton number is entered, use s1.*/
   /* -----------------------------------------------------------*/

  if (PW01M001.PW01MTOT != 0) /* tote entered*/
    if (PW01M001.PW01MCTN != 0) /* carton nbr entered*/
      PW01S-VSPLIT01-S7(); /* 's7' dpick.vsplit01*/
    else
      PW01S-VSPLIT01-S2(); /* 's2' dpick.vsplit01*/
    end
  else /* only carton nbr entered*/
    set PWPREC empty; /* initialise database row*/
    PWPREC.XWHCD = PW01M001.XWHCD;
    PWPREC.PKDNCSQN = PW01M001.PW01MCTN;
    PW01S-VSPLIT01-S1(); /* 's1' dpick.vsplit01*/
  end

end // end PW01S-APPRL-VSPLIT

// Calculate Crtn Pack Time
Function PW01S-CALC-PACKTM()
   /* ------------------------------------------------------------*/
   /* Calculate Crtn Pack Time*/
   /* pw01wptm --> based on spec/hnd per unit*/
   /* pkddfcpm --> dflt fullcase pack time per crtn*/
   /* pkddrppm --> dflt repack pack time per crtn*/
   /* ------------------------------------------------------------*/

  PWPREC.PWPCPKTM = PWPREC.PWPCPKTM + PW01W00.PW01WPTM;

  if (PWPREC.PWPPKTCD == "FC")
    PWPREC.PWPCPKTM = PWPREC.PWPCPKTM + PKDREC.PKDDFCPM;
  else
    if (PWPREC.PWPPKTCD == "RP")
      PWPREC.PWPCPKTM = PWPREC.PWPCPKTM + PKDREC.PKDDRPPM;
    end
  end

end // end PW01S-CALC-PACKTM

// Validate New Box Code
Function PW01S-CHECK-BOX-CD()
   /* ------------------------------------------------------------*/
   /* Check that the Box Code is valid.*/
   /* ------------------------------------------------------------*/

  if (PW01M001.YNTCD in YNTTBL.YNTCD)

    if (YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      PW01W01.YNTCD = PW01M001.YNTCD;
      PW01W01.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
      PW01M001.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
    else
      set PW01M001.YNTCD cursor, bold;
      converseLib.validationFailed(342);
      exit stack;
    end

  else
    set PW01M001.YNTCD cursor, bold;
    converseLib.validationFailed(342);
    exit stack;
  end

end // end PW01S-CHECK-BOX-CD

// Check for Carton Consolidation
Function PW01S-CHECK-CNSLD()
   /* -----------------------------------------------------------*/
   /* Determine if data is consolidated/zone consolidated.*/
   /* -----------------------------------------------------------*/

  if (PW01W01.XWHCD == "51" /* Memphis Apparel*/
   || PW01W01.XWHCD == "42") /* Canada Apparel*/

    /* --- no consolidation at these warehouses ---*/
    PW01S-RTV-APPAREL(); /* Retrieve all totes*/

  else
    if (PWPREC.PK-CNSLD-FL == "N" /* No consolidation*/
     && PWPREC.PK-ZONE-CNSLD-FL == "N") /* No zone consolidation*/

    else
      if (PWPREC.PK-CNSLD-FL == "Y") /* Consolidation*/
        PW01W00.PW01W-CNSLD-TYPE-IND = "1";
      else /* Zone consolidation*/
        PW01W00.PW01W-CNSLD-TYPE-IND = "2";
      end
      PW01S-CLS-VSPLIT01(); /* Close 'old' packing list item cursor*/
      PW01S-VSPLIT01-S6(); /* Declare 'new' packing list item cursor*/
      PW01S-NXT-VSPLIT01(); /* Retrieve first packing list item rec*/
    end
  end

end // end PW01S-CHECK-CNSLD

// Calculate UCC-128 check digit
Function PW01S-CHECK-DIGIT()

  PW01W00.PW01W-BCF-1 = PW01W00.PW01W-B-C[1] +               PW01W00.PW01W-B-C[3] +               PW01W00.PW01W-B-C[5] +               PW01W00.PW01W-B-C[7] +               PW01W00.PW01W-B-C[9] +               PW01W00.PW01W-B-C[11] +               PW01W00.PW01W-B-C[13] +               PW01W00.PW01W-B-C[15] +               PW01W00.PW01W-B-C[17] +               PW01W00.PW01W-B-C[19];

  PW01W00.PW01W-BCF-2 = PW01W00.PW01W-BCF-1 * 3;

  PW01W00.PW01W-BCF-3 = PW01W00.PW01W-B-C[2] +               PW01W00.PW01W-B-C[4] +               PW01W00.PW01W-B-C[6] +               PW01W00.PW01W-B-C[8] +               PW01W00.PW01W-B-C[10] +               PW01W00.PW01W-B-C[12] +               PW01W00.PW01W-B-C[14] +               PW01W00.PW01W-B-C[16] +               PW01W00.PW01W-B-C[18];

  PW01W00.PW01W-BCF-4 = PW01W00.PW01W-BCF-2 + PW01W00.PW01W-BCF-3;

  PW01W00.PW01W-DONE-CALC-FL = "N";
  PW01W00.PW01W-BCF-5 = 0;

  while (PW01W00.PW01W-DONE-CALC-FL == "N")
    PW01-CALC-UCC128();
  end

end // end PW01S-CHECK-DIGIT

// Check for Correct Carton/Tote
Function PW01S-CHECK-TOTE()
   /* -----------------------------------------------------------*/
   /* Check for correct carton/tote.*/
   /* -----------------------------------------------------------*/

  if (PW01M001.PW01MCTN == PWPREC.PKDNCSQN /* Correct carton*/
   && PW01M001.PW01MTOT == PWPREC.PWPTOSQN) /* Correct tote*/

  else
    while (SQLCA.VAGen_SQLCODE == 0
     && PW01M001.PW01MCTN != PWPREC.PKDNCSQN
     && PW01M001.PW01MTOT != PWPREC.PWPTOSQN)
      PW01S-NXT-VSPLIT01(); /* Fetch next item*/
    end
  end

end // end PW01S-CHECK-TOTE

// Close Packing List Item cursor
Function PW01S-CLS-VSPLIT01()
   /* -----------------------------------------------------------*/
   /* Close cursor for packing list item. (dpick.vsplit01)*/
   /* -----------------------------------------------------------*/

  if (PW01W00.PW01W-SPLIT-CSR-IND == "1")
    PW01S-VSPLIT01-C1(); /* close carton only csr*/
  else
    if (PW01W00.PW01W-SPLIT-CSR-IND == "2")
      PW01S-VSPLIT01-C2(); /* close tote only csr*/
    else
      if (PW01W00.PW01W-SPLIT-CSR-IND == "6")
        PW01S-VSPLIT01-C6(); /* close consolidated crtncsr*/
      else
        PW01S-VSPLIT01-C7(); /* close tote and carton csr*/
      end
    end
  end

end // end PW01S-CLS-VSPLIT01

// Check for new consolidated itm
Function PW01S-CMPARE-CNSLD()
   /* ------------------------------------------------------------*/
   /* Check for new consolidated item.*/
   /* ------------------------------------------------------------*/

  if (PWPREC.XGPCD > PW01W00.XGP-GPC-CD[PW01W-IT-INDEX]
   || PWPREC.SY1STNBR > PW01W00.SY-STY-NBR[PW01W-IT-INDEX])
    PW01W00.PW01WPLS = "Y";
  else
    if (PWPREC.XGPCD == PW01W00.XGP-GPC-CD[PW01W-IT-INDEX]
     && PWPREC.SY1STNBR == PW01W00.SY-STY-NBR[PW01W-IT-INDEX])
      if (PWPREC.SY2CLRID > PW01W00.SY-COLR-CD-ID[PW01W-IT-INDEX])
        PW01W00.PW01WPLS = "Y";
      else
        if (PWPREC.SY2CLRID == PW01W00.SY-COLR-CD-ID[PW01W-IT-INDEX])
          if (PWPREC.XDMCD > PW01W00.XDM-DIM-CD[PW01W-IT-INDEX]
           || PWPREC.XQACD > PW01W00.XQA-QUAL-CD[PW01W-IT-INDEX]
           || PWPREC.XOWCD > PW01W00.XOW-OWN-GRP-CD[PW01W-IT-INDEX]
           || PWPREC.PC2INSEG > PW01W00.PC-CU-IN-SEG-CD[PW01W-IT-INDEX]
           || PWPREC.XEGCD > PW01W00.XEG-ENGR-DIFF-CD[PW01W-IT-INDEX]
           || PWPREC.XPGCD > PW01W00.XPG-PKG-TYP-CD[PW01W-IT-INDEX]
           || PWPREC.XUMCD > PW01W00.XUM-UOM-CD[PW01W-IT-INDEX]
           || PWPREC.PKDNCSQN > PW01W00.PK-CRTN-SEQ-NBR[PW01W-IT-INDEX]
           || PWPREC.PWPTOSQN > PW01W00.PK-TOTE-SEQ-NBR[PW01W-IT-INDEX])
            PW01W00.PW01WPLS = "Y";
          end
        end
      end
    end
  end

end // end PW01S-CMPARE-CNSLD

// Check for New Item
Function PW01S-CMPARE-SPLIT()
   /* ------------------------------------------------------------*/
   /* Check Packing List Item key fields for new item.*/
   /* (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  if (PW01W00.PW01W-SPLIT-CSR-IND == "6") /* Consolidated Carton*/
    PW01S-CMPARE-CNSLD(); /* check for item*/
  else /* Non-consolidated Carton*/
    if (PWPREC.PKDNCSQN > PW01W00.PK-CRTN-SEQ-NBR[PW01W-IT-INDEX]
     || PWPREC.PWPTOSQN > PW01W00.PK-TOTE-SEQ-NBR[PW01W-IT-INDEX])
      PW01W00.PW01WPLS = "Y";
    end
  end

end // end PW01S-CMPARE-SPLIT

// Declare Cursor for vsplit01
Function PW01S-CRS-VSPLIT01()
   /* -----------------------------------------------------------*/
   /* Set up a cursor on the packing list item table.*/
   /* (dpick.vsplit01).*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pf5)
    PW01W00.PW01W-SPLIT-CSR-IND = PW01W12.SAVE-SPLIT-CSR-IND;
  else
    if (converseVar.eventKey is pf6)
      PW01W00.PW01W-SPLIT-CSR-IND = PW01W12.SAVE-SPLIT-CSR-IND;
    end
  end

  if (PW01REC.PW01W-PF11ACT-IND == "N") /* not PF11*/
    PW01W12.SAVE-SPLIT-CSR-IND = PW01W00.PW01W-SPLIT-CSR-IND;
  end

  if (PW01W00.PW01W-SPLIT-CSR-IND == "1")

    PW01S-VSPLIT01-S1(); /* build csr with crtn #*/

  else
    if (PW01W00.PW01W-SPLIT-CSR-IND == "2")

      PW01S-VSPLIT01-S2(); /* build csr with tote #*/

    else
      if (PW01W00.PW01W-SPLIT-CSR-IND == "6")

        PW01S-VSPLIT01-S6(); /* build consolidated crtn csr*/

      else

        PW01S-VSPLIT01-S7(); /* build csr with tote & crtn #*/

      end
    end
  end

end // end PW01S-CRS-VSPLIT01

// Delete zero size pack list Itm
Function PW01S-DEL-ZERO-ITM()
  if (PW01W00.PW01W-ZERO-SZ-SW == "Y")
    /* -----------------------------------------------------------*/
    /* Delete the Packing List Item for the Original Carton*/
    /* -----------------------------------------------------------*/

    PWPREC.XWHCD = PW01W01.XWHCD; /* whse cd*/
    PWPREC.OP1CUOID = PW01W01.OP1CUOID; /* cust ord id*/
    PWPREC.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/
    PWPREC.OP1PARTN = PW01W01.OP1PARTN; /* ord part char*/
    PWPREC.OP2LNINB = PW01W01.OP2LNINB; /* line item nbr*/
    PWPREC.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list #*/
    PWPREC.PKDNCSQN = PW01W01.PKDNCSQN; /* carton seq nbr*/
    PWPREC.PWPTOSQN = PW01W01.PWPTOSQN; /* tote seq nbr*/

    /* --- get packing list line item ---*/
    PW01S-VSPLIT01-S(); /* 's ' dpick.vsplit01*/

    /* --- move retrieved values to pw01w05 w/s record ---*/
    PW01S-MV-PWPREC();

    /* ---- Delete item from dpick.vsplit01 ------------*/
    PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] = "D";
    PW01W05.PW01W-XCP-FL[PW01W-W05-IDX] = "N";

  else
    /* -----------------------------------------------------------*/
    /* Update Packing List Item for the Original Carton*/
    /* -----------------------------------------------------------*/

    PWPREC.XWHCD = PW01W01.XWHCD; /* whse cd*/
    PWPREC.OP1CUOID = PW01W01.OP1CUOID; /* cust ord id*/
    PWPREC.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/
    PWPREC.OP1PARTN = PW01W01.OP1PARTN; /* ord part char*/
    PWPREC.OP2LNINB = PW01W01.OP2LNINB; /* line item nbr*/
    PWPREC.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list #*/
    PWPREC.PKDNCSQN = PW01W01.PKDNCSQN; /* carton seq nbr*/
    PWPREC.PWPTOSQN = PW01W01.PWPTOSQN; /* tote seq nbr*/

    /* --- get packing list line item ---*/
    PW01S-VSPLIT01-S(); /* 's ' dpick.vsplit01*/

    /* --- move retrieved values to pw01w05 w/s record ---*/
    PW01S-MV-PWPREC();

    PW01W00.PW01WPTM = PW01W00.PW01WPTM * PW01W00.PW01WTAD;
    PWPREC.PWPCPKTM = PWPREC.PWPCPKTM + PW01W00.PW01WPTM;

    PW01W05.PWPCPKTM[PW01W-W05-IDX] = PWPREC.PWPCPKTM;

    PW01W05.PK-PICK-XCEP-CD[PW01W-W05-IDX] = "03";
    PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] = "U";
    PW01W05.PW01W-XCP-FL[PW01W-W05-IDX] = "N";

  end

end // end PW01S-DEL-ZERO-ITM

// Determine CICS region
Function PW01S-FIND-CICS()
   /* ------------------------------------------------------------*/
   /* Find which enviorment the program is currently running in.*/
   /*  */
   /* If the Program is running in the Production Region,*/
   /* Production JCL will be executed.*/
   /*  */
   /* If the Program is running in the Test Region, Test JCL will*/
   /* be executed using DSNT, DSND or DSNF.*/
   /*  */
   /* All versions of JCL are found in TS09T01.*/
   /*  */
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ASSIGN";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)         

    return;

  end

end // end PW01S-FIND-CICS

// Format Packing List Item Table
Function PW01S-FMT-VSPLIT01()
   /* -------------------------------------------------------------*/
   /* Format the packing list item record for the table update.*/
   /*  */
   /* Values for the field pk-pick-xcep-cd :-*/
   /* '00' - no qty adjustment*/
   /* '01' - qty adjustment*/
   /* '03' - carton split*/
   /* ------------------------------------------------------------*/

  PW01S-GET-MAX-CRTN(); /* find max crtn nbr*/

  if (PW01W00.PW01W-ACTION-IND == "A")

    /* --- Add a Carton ---*/

    PW01S-INS-NEW-CRTN(); /* insert a new carton*/

    PW01W05.PK-PICK-XCEP-CD[PW01W-W05-IDX] = "01";
    PW01W05.PW01W-XCP-FL[PW01W-W05-IDX] = "Y";

  else
    /* --- Action code is Split Carton ---*/

    PW01S-UPD-ORG-CRTN(); /* update the original carton*/
    PW01S-INS-NEW-CRTN(); /* insert a new carton*/

    PW01W05.PW01W-XCP-FL[PW01W-W05-IDX] = "N";
  end

end // end PW01S-FMT-VSPLIT01

// Format Packing List Item Size
Function PW01S-FMT-VSPLSZ01()
   /* ------------------------------------------------------------*/
   /* Format Packing List Size record for table update and insert.*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01WIDX = 1;

  while (PW01W00.PW01WIDX <= 10) /* go through the entire map*/

    if (PW01W02.PW01W-ACTION[PW01WIDX] == "A")

      /* --- User wishes to Add a carton ---*/

      PW01W00.PW01W-ACTION-IND = "A";

      PW01W00.PW01WTAD = 0; /* adj qty of original crtn*/

      /* --- calculate adj qty of new crtn ---*/
      PW01W00.PW01W-TAD-NEW = PW01W00.PW01W-TAD-NEW + PW01W02.PW01WADJ[PW01WIDX];

      PW01S-NEW-CRTNWT(); /* calculate new crtn weight*/

      PW01W00.PW01W-NEW-CRTN-WT = PW01W00.PW01W-NEW-CRTN-WT + PW01W00.PW01W-NEW-SIZE-WT;

      /* --- insert packing list size rows for new crtn ---*/
      PW01S-MV-PWQREC-01();

      PW01W06.PKDNCSQN[PW01W-W06-IDX] = PW01M001.PW01M-NEW-CRTN;
      PW01W00.PW01WARZ = PW01W02.PW01WARZ[PW01WIDX];
      PW01W06.XARCD[PW01W-W06-IDX] = PW01W00.XARCD;
      PW01W06.SL4ZONE[PW01W-W06-IDX] = PW01W00.SL4ZONE;
      PW01W06.SL5LOCTN[PW01W-W06-IDX] = PW01W02.SL5LOCTN[PW01WIDX];

      if (PW01W02.SY4IDDSC[PW01WIDX] in SYPREC.SY4IDDSC)
        PW01W06.SY5SZID[PW01W-W06-IDX] = SYPREC.SY5SZID[sysVar.arrayIndex];
      end

      PW01W06.PK1QTY[PW01W-W06-IDX] = PW01W02.PW01WADJ[PW01WIDX];
      PW01W06.SR3QTYSH[PW01W-W06-IDX] = PW01W02.PW01WADJ[PW01WIDX];
      PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX] = PW01W02.PW01WADJ[PW01WIDX];
      PW01W06.SR5QTYXC[PW01W-W06-IDX] = PW01W02.PW01WADJ[PW01WIDX];
      PW01W06.ZZZCHGCT[PW01W-W06-IDX] = 0;
      PW01W06.PW01W-IO-FUNCTION[PW01W-W06-IDX] = "A";
      PW01W06.PW01W-XCP-FL[PW01W-W06-IDX] = "Y";

      /* --- Clear new carton map fields ---*/
      if (PW01W02.PW01W-NEW-LINE[PW01WIDX] == "Y")
        PW01W02.PW01WARZ[PW01WIDX] = " ";
        PW01W02.SL5LOCTN[PW01WIDX] = " ";
        PW01W02.SY4IDDSC[PW01WIDX] = " ";
      end

      PW01W02.PW01WADJ[PW01WIDX] = 0;
      PW01W02.PW01W-ACTION[PW01WIDX] = " ";
      PW01W00.PW01W-UPD-TEMPSTOR = "Y";
    else
      /* --- User wishes to Split a Carton ---*/
      if (PW01W02.PW01W-ACTION[PW01WIDX] == "S")

        PW01635(); /* process split carton*/

      end
    end
    PW01W00.PW01WIDX = PW01W00.PW01WIDX + 1;
  end

end // end PW01S-FMT-VSPLSZ01

// Get Max PK-CRTN-CNT-NBR
Function PW01S-GET-MAX-CNT()
   /* ------------------------------------------------------------*/
   /* Get Maximum PK-CRTN-CNT-NBR*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "M2";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PW01W00.PW01W-MAX-CNT-NBR = PW01W04.PW01W-IO-COUNT;
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-GET-MAX-CNT      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-GET-MAX-CNT

// Determine max pk-comb-cnsld-cd
Function PW01S-GET-MAX-COMB()
   /* -------------------------------------------------------------*/
   /* Determine the maximum value of the pk-comb-cnsld-cdfield.*/
   /* -------------------------------------------------------------*/

  PW01W00.PW01W-HIGH-COMB-CD = "00";

   /* --- set up a cursor on the packing list item table ---*/
  set PWPREC empty; /* initailise database row*/

  PWPREC.XWHCD = PW01W01.XWHCD;
  PWPREC.TSIPLNBR = PW01W01.TSIPLNBR;

  PW01S-VSPLIT01-S5(); /* 's5' dpick.vsplit01*/

  while (SQLCA.VAGen_SQLCODE == 0)

    /* --- fetch packing list item row ---*/
    PW01S-VSPLIT01-N5(); /* 'n5' dpick.vsplit01*/

    if (SQLCA.VAGen_SQLCODE == 0
     && PWPREC.OP1CUOID == PW01W01.OP1CUOID
     && PWPREC.OP1NORID == PW01W01.OP1NORID
     && PWPREC.OP1PARTN == PW01W01.OP1PARTN)

      if (PWPREC.PK-COMB-CNSLD-CD > PW01W00.PW01W-HIGH-COMB-CD)
        PW01W00.PW01W-HIGH-COMB-CD = PWPREC.PK-COMB-CNSLD-CD;
      end
    end
  end

   /* --- close the packing list item cursor ---*/
   /* 'c5' dpick.vsplit01*/
  PW01S-VSPLIT01-C5();
end // end PW01S-GET-MAX-COMB

// Get Max TS-CRTN-NBR
Function PW01S-GET-MAX-CRTN()
   /* ------------------------------------------------------------*/
   /* Get Maximum TS-CRTN-NBR*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "M1";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PW01W00.PW01W-MAX-CRTN-NBR = PW01W04.PW01W-IO-COUNT;
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Indicates that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-GET-MAX-CRTN     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-GET-MAX-CRTN

// Get Max PK-CRTN-INNER-NBR
Function PW01S-GET-MAX-INNR()
   /* ------------------------------------------------------------*/
   /* Get Maximum PK-CRTN-INNER-NBR*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "M3";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PW01W00.PW01W-MAX-INR-NBR = PW01W04.PW01W-IO-COUNT;
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-GET-MAX-INNR     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-GET-MAX-INNR

// Insert new carton on VSPLIT01
Function PW01S-INS-NEW-CRTN()
   /* -----------------------------------------------------------*/
   /* Insert a New Carton row.*/
   /* -----------------------------------------------------------*/
  PWPREC.XWHCD = PW01W01.XWHCD; /* whse code*/
  PWPREC.OP1CUOID = PW01W01.OP1CUOID; /* cust order id*/
  PWPREC.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/
  PWPREC.OP1PARTN = PW01W01.OP1PARTN; /* order part char*/
  PWPREC.OP2LNINB = PW01W01.OP2LNINB; /* line item nbr*/
  PWPREC.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list nbr*/
  PWPREC.PKDNCSQN = PW01W01.PKDNCSQN; /* carton seq nbr*/
  PWPREC.PWPTOSQN = PW01W01.PWPTOSQN; /* tote seq nbr*/

  PW01S-VSPLIT01-S(); /* get packing list item row*/

  PW01S-MV-PWPREC(); /* move PWPREC to PW01W05*/

  PW01W05.PKDNCSQN[PW01W-W05-IDX] = PW01M001.PW01M-NEW-CRTN;
  PW01W05.YNTCD[PW01W-W05-IDX] = PW01M001.YNTCD;

  PW01W05.TSOCRTNB[PW01W-W05-IDX] = PW01W00.PW01W-MAX-CRTN-NBR + 1;

  PW01W05.PK-NEW-CRTN-FL[PW01W-W05-IDX] = "M";
  PW01W05.PK-CNSLD-FL[PW01W-W05-IDX] = "N";
  PW01W05.PK-MSTR-CRTN-FL[PW01W-W05-IDX] = "N";
  PW01W05.PK-ZONE-CNSLD-FL[PW01W-W05-IDX] = "N";
  PW01W05.PK-ZN-CNSLD-MSTRFL[PW01W-W05-IDX] = "N";
  PW01W05.PWP1OF1F[PW01W-W05-IDX] = "N";
  PW01W05.PK-ZN-CNSLD-SEQNBR[PW01W-W05-IDX] = 0;
  PW01W05.PK-ZONE-CNSLD-CRTN[PW01W-W05-IDX] = 0;
  PW01W05.PWPTPKTM[PW01W-W05-IDX] = 0;

   /* --- format fields needed to determine if comb cnsld cd ---*/
  PWPREC.PK-ZONE-CNSLD-FL = "N";
  PWPREC.PK-CNSLD-FL = "N";
  PWPREC.PWP1OF1F = "N";

  PW01S-SET-COMB-CD();

  PW01W05.PK-COMB-CNSLD-CD[PW01W-W05-IDX] = PW01W00.PK-COMB-CNSLD-CD;

  PW01W00.PW01WPTM = PW01W00.PW01W-HLD-PTM * PW01W00.PW01W-TAD-NEW;
  PWPREC.PWPCPKTM = 0;

  PW01S-CALC-PACKTM(); /* calculate pack time*/

  PW01W05.PWPCPKTM[PW01W-W05-IDX] = PWPREC.PWPCPKTM;

   /* --- If apparel inner pack, update appropriate crtn nbr ---*/
  if (PWPREC.XWHCD == "51"
   || PWPREC.XWHCD == "42") /* apparel warehouses*/
    if (PWOREC.PK-INNER-CRTN-FL == "Y") /* inner carton*/
      PW01S-UPD-IN-CRTN(); /* update inner pack*/
    end
  end

  PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] = "A";

end // end PW01S-INS-NEW-CRTN

// Load packing list items to tbl
Function PW01S-LOAD-ITEMS()
   /* ------------------------------------------------------------*/
   /* Increment packing list item index*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-IT-INDEX = PW01W00.PW01W-IT-INDEX + 1;

   /* ------------------------------------------------------------*/
   /* Load packing list items into table*/
   /* ------------------------------------------------------------*/

  PW01W00.XWH-WHSE-CD[PW01W-IT-INDEX] = PWPREC.XWHCD;
  PW01W00.PK-CRTN-SEQ-NBR[PW01W-IT-INDEX] = PWPREC.PKDNCSQN;
  PW01W00.PK-TOTE-SEQ-NBR[PW01W-IT-INDEX] = PWPREC.PWPTOSQN;
  PW01W00.XGP-GPC-CD[PW01W-IT-INDEX] = PWPREC.XGPCD;
  PW01W00.SY-STY-NBR[PW01W-IT-INDEX] = PWPREC.SY1STNBR;
  PW01W00.SY-COLR-CD-ID[PW01W-IT-INDEX] = PWPREC.SY2CLRID;
  PW01W00.XDM-DIM-CD[PW01W-IT-INDEX] = PWPREC.XDMCD;
  PW01W00.XQA-QUAL-CD[PW01W-IT-INDEX] = PWPREC.XQACD;
  PW01W00.XOW-OWN-GRP-CD[PW01W-IT-INDEX] = PWPREC.XOWCD;
  PW01W00.PC-CU-IN-SEG-CD[PW01W-IT-INDEX] = PWPREC.PC2INSEG;
  PW01W00.XEG-ENGR-DIFF-CD[PW01W-IT-INDEX] = PWPREC.XEGCD;
  PW01W00.XPG-PKG-TYP-CD[PW01W-IT-INDEX] = PWPREC.XPGCD;
  PW01W00.XUM-UOM-CD[PW01W-IT-INDEX] = PWPREC.XUMCD;

end // end PW01S-LOAD-ITEMS

// Load Size Data to Temp Storage
Function PW01S-LOAD-SIZE-TS()
   /* ------------------------------------------------------------*/
   /* Get the style description*/
   /* ------------------------------------------------------------*/

  set PKNREC empty;

  PKNREC.XGPCD = PWPREC.XGPCD; /* group code*/
  PKNREC.SY1STNBR = PWPREC.SY1STNBR; /* style nbr*/
  PKNREC.SY2CLRID = PWPREC.SY2CLRID; /* colour id*/
  PKNREC.XDMCD = PWPREC.XDMCD; /* dimension code*/

  PW01S-VPKSTY01-S();

   /* ------------------------------------------------------------*/
   /* Move the rest of the keys*/
   /* ------------------------------------------------------------*/

  PW01W01.SWCLNENB = PWPREC.SWCLNENB;
  PW01W01.SY1SSTNM = PKNREC.SY1SSTNM;
  PW01W01.PW01WPRT = 0;

   /* ------------------------------------------------------------*/
   /* Get the size scale*/
   /* ------------------------------------------------------------*/

  PW01S34();

   /* ------------------------------------------------------------*/
   /* Get all sizes and load into temp storage*/
   /* ------------------------------------------------------------*/

  set VSPLSZ02 empty; /* Clear database record*/

  VSPLSZ02.XWHCD = PW01W01.XWHCD; /* whse cd*/
  VSPLSZ02.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list nbr*/
  VSPLSZ02.OP1PARTN = PW01W01.OP1PARTN; /* order part char*/
  VSPLSZ02.OP1CUOID = PW01W01.OP1CUOID; /* customer order nbr*/
  VSPLSZ02.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/
  VSPLSZ02.OP2LNINB = PW01W01.OP2LNINB; /* line item nbr*/
  VSPLSZ02.PWPTOSQN = PW01W01.PWPTOSQN; /* tote number*/
  VSPLSZ02.PKDNCSQN = PW01W01.PKDNCSQN; /* carton seq nbr*/

  PW01S-VSPLSZ01-S1(); /* build packing list size crsr*/

  PW01W00.PW01W-NBR-DETAIL-LN = 0;
  PW01W00.PW01W-NBR-DETAIL-SV = 0;

  PW01S-VSPLSZ01-N1(); /* fetch packing list size row*/

  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(375); /* no more data*/
    PW01W00.XXXLOCID = "100 ";
    PW01W01.CACHGFL = "N";
    return;
  end

  PW01W00.PW01WIDX = 1;
  while (SQLCA.VAGen_SQLCODE == 0)

    /* -----------------------------------------------------*/
    /* load size data into temporary storage*/
    /* -----------------------------------------------------*/

    PW01W00.PW01W-NBR-DETAIL-LN = PW01W00.PW01W-NBR-DETAIL-LN + 1;
    PW01W00.PW01W-NBR-DETAIL-SV = PW01W00.PW01W-NBR-DETAIL-SV + 1;
    PW01W02.SY5SZID[PW01WIDX] = VSPLSZ02.SY5SZID;
    PW01W02.PW01WSIZ[PW01WIDX] = VSPLSZ02.SY5SZID;

    if (VSPLSZ02.SY5SZID in SYPREC.SY5SZID)
      PW01W02.SY4IDDSC[PW01WIDX] = SYPREC.SY4IDDSC[sysVar.arrayIndex];
    end

    PW01W02.XARCD[PW01WIDX] = VSPLSZ02.XARCD;
    PW01W02.SL4ZONE[PW01WIDX] = VSPLSZ02.SL4ZONE;
    PW01W02.SL5LOCTN[PW01WIDX] = VSPLSZ02.SL5LOCTN;
    PW01W02.PK1QTY[PW01WIDX] = VSPLSZ02.PK1QTY;
    PW01W02.ALCQTY[PW01WIDX] = VSPLSZ02.ALCQTY;
    PW01W02.ZZZCHGCT[PW01WIDX] = VSPLSZ02.ZZZCHGCT;

    PW01W01.PW01WPRT = PW01W01.PW01WPRT + VSPLSZ02.PK1QTY;
    PW01W02.PW01WADJ[PW01WIDX] = 0;

    PW01S-VSPLSZ01-N1(); /* 'n1' dpick.vsplsz01*/

    /* -----------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* (after translating all sizes on the page)*/
    /* -----------------------------------------------------------*/

    if (PW01W00.PW01WIDX == 10) /* Page is full*/

      PW01W02.PW01WNLD = PW01W00.PW01WIDX;
                                   /* Nbr of lines loaded*/
      PW01S13(); /* Add page to temp storage*/
    else
      PW01W00.PW01WIDX = PW01W00.PW01WIDX + 1;
    end
  end

  PW01S-VSPLSZ01-C1(); /* close packing list size crsr*/

   /* -----------------------------------------------------------*/
   /* Add any partially filled page to the storage queue.*/
   /* -----------------------------------------------------------*/

  if (PW01W00.PW01WIDX > 1) /* Page is partially full*/

    PW01W02.PW01WNLD = PW01W00.PW01WIDX - 1;
    PW01S13(); /* Add page to temp storage*/
  end

   /* -----------------------------------------------------------*/
   /* Now add a blank page for adds*/
   /* -----------------------------------------------------------*/

  PW01W02.PW01WNLD = 0;
  PW01S13(); /* Add page to temp storage;*/

end // end PW01S-LOAD-SIZE-TS

// If Detail changed, Move Map
Function PW01S-MOVE-MAP()
   /* ------------------------------------------------------------*/
   /* Edit the detail fields; Starting at the bottom, move fields*/
   /* to working storage.*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01WNDS = "N";
  PW01W00.PW01WIDX = 10;

  while (PW01W00.PW01WIDX > 0)

    if (PW01M001.PW01MARZ[PW01WIDX] != PW01W02.PW01WARZ[PW01WIDX]
     || PW01M001.SL5LOCTN[PW01WIDX] != PW01W02.SL5LOCTN[PW01WIDX]
     || PW01M001.SY4IDDSC[PW01WIDX] != PW01W02.SY4IDDSC[PW01WIDX]
     || PW01M001.PW01MADJ[PW01WIDX] != PW01W02.PW01WADJ[PW01WIDX]
     || PW01M001.PW01M-ACTION[PW01WIDX] != PW01W02.PW01W-ACTION[PW01WIDX])

      if (PW01M001.SL5LOCTN[PW01WIDX] == PW01W02.SL5LOCTN[PW01WIDX]
       && PW01M001.PW01MARZ[PW01WIDX] == PW01W02.PW01WARZ[PW01WIDX]
       && PW01M001.SY4IDDSC[PW01WIDX] == PW01W02.SY4IDDSC[PW01WIDX])
        PW01W00.PW01WNDS = "Y";
        PW01W02.PW01W-NEW-LINE[PW01WIDX] = "N";
        PW01W02.PW01WADJ[PW01WIDX] = PW01M001.PW01MADJ[PW01WIDX];
        PW01W02.PW01W-ACTION[PW01WIDX] = PW01M001.PW01M-ACTION[PW01WIDX];
      else
        PW01W00.PW01WNDS = "Y";
        PW01W02.PW01W-NEW-LINE[PW01WIDX] = "Y";
        PW01W02.PW01WARZ[PW01WIDX] = PW01M001.PW01MARZ[PW01WIDX];
        PW01W02.SL5LOCTN[PW01WIDX] = PW01M001.SL5LOCTN[PW01WIDX];
        PW01W02.SY4IDDSC[PW01WIDX] = PW01M001.SY4IDDSC[PW01WIDX];
        PW01W02.PW01WADJ[PW01WIDX] = PW01M001.PW01MADJ[PW01WIDX];
        PW01W02.PW01W-ACTION[PW01WIDX] = PW01M001.PW01M-ACTION[PW01WIDX];
      end
    else
      PW01W02.PW01W-NEW-LINE[PW01WIDX] = "N";
    end

    PW01W00.PW01WIDX = PW01W00.PW01WIDX - 1;

  end

end // end PW01S-MOVE-MAP

// Move pw01w05 to pwqrec & azcit
Function PW01S-MV-PW01W05()
   /* -----------------------------------------------------------*/
   /* Move the PW01W05 working storage record data to pwprec*/
   /* for the Packing List Item database updates and to the*/
   /* ASN Item record for database updates.*/
   /* (dpick.vsplit01 and dship.vazcit01)*/
   /* -----------------------------------------------------------*/

  PWPREC.XWHCD = PW01W05.XWHCD[PW01W-W05-IDX];
  PWPREC.TSIPLNBR = PW01W05.TSIPLNBR[PW01W-W05-IDX];
  PWPREC.OP1PARTN = PW01W05.OP1PARTN[PW01W-W05-IDX];
  PWPREC.OP1CUOID = PW01W05.OP1CUOID[PW01W-W05-IDX];
  PWPREC.OP1NORID = PW01W05.OP1NORID[PW01W-W05-IDX];
  PWPREC.OP2LNINB = PW01W05.OP2LNINB[PW01W-W05-IDX];
  PWPREC.PKDNCSQN = PW01W05.PKDNCSQN[PW01W-W05-IDX];
  PWPREC.PWPTOSQN = PW01W05.PWPTOSQN[PW01W-W05-IDX];
  PWPREC.PK1PKSCH = PW01W05.PK1PKSCH[PW01W-W05-IDX];
  PWPREC.OP2CPLNB = PW01W05.OP2CPLNB[PW01W-W05-IDX];
  PWPREC.OSNPKGNB = PW01W05.OSNPKGNB[PW01W-W05-IDX];
  PWPREC.XGPCD = PW01W05.XGPCD[PW01W-W05-IDX];
  PWPREC.SY1STNBR = PW01W05.SY1STNBR[PW01W-W05-IDX];
  PWPREC.SY2CLRID = PW01W05.SY2CLRID[PW01W-W05-IDX];
  PWPREC.XDMCD = PW01W05.XDMCD[PW01W-W05-IDX];
  PWPREC.XQACD = PW01W05.XQACD[PW01W-W05-IDX];
  PWPREC.XOWCD = PW01W05.XOWCD[PW01W-W05-IDX];
  PWPREC.PC2INSEG = PW01W05.PC2INSEG[PW01W-W05-IDX];
  PWPREC.XEGCD = PW01W05.XEGCD[PW01W-W05-IDX];
  PWPREC.XPGCD = PW01W05.XPGCD[PW01W-W05-IDX];
  PWPREC.XUMCD = PW01W05.XUMCD[PW01W-W05-IDX];
  PWPREC.XBCCD = PW01W05.XBCCD[PW01W-W05-IDX];

  VAZCIT01.OP-NIKE-ORD-ID = PW01W05.OP1NORID[PW01W-W05-IDX];
  VAZCIT01.OP-LINE-ITEM-NBR = PW01W05.OP2LNINB[PW01W-W05-IDX];
  VAZCIT01.XGP-GPC-CD = PW01W05.XGPCD[PW01W-W05-IDX];
  VAZCIT01.SY-STY-NBR = PW01W05.SY1STNBR[PW01W-W05-IDX];
  VAZCIT01.SY-COLR-CD-ID = PW01W05.SY2CLRID[PW01W-W05-IDX];
  VAZCIT01.XDM-DIM-CD = PW01W05.XDMCD[PW01W-W05-IDX];
  VAZCIT01.XQA-QUAL-CD = PW01W05.XQACD[PW01W-W05-IDX];
  VAZCIT01.XOW-OWN-GRP-CD = PW01W05.XOWCD[PW01W-W05-IDX];
  VAZCIT01.PC-CU-IN-SEG-CD = PW01W05.PC2INSEG[PW01W-W05-IDX];
  VAZCIT01.XPG-PKG-TYP-CD = PW01W05.XPGCD[PW01W-W05-IDX];
  VAZCIT01.XEG-ENGR-DIFF-CD = PW01W05.XEGCD[PW01W-W05-IDX];
  VAZCIT01.XUM-UOM-CD = PW01W05.XUMCD[PW01W-W05-IDX];
  VAZCIT01.XBC-BRAND-CD = PW01W05.XBCCD[PW01W-W05-IDX];

  PWPREC.XHDCD[1] = PW01W05.PW01W-XHDCD1[PW01W-W05-IDX];
  PWPREC.XHDCD[2] = PW01W05.PW01W-XHDCD2[PW01W-W05-IDX];
  PWPREC.XHDCD[3] = PW01W05.PW01W-XHDCD3[PW01W-W05-IDX];
  PWPREC.XHDCD[4] = PW01W05.PW01W-XHDCD4[PW01W-W05-IDX];
  PWPREC.XHDCD[5] = PW01W05.PW01W-XHDCD5[PW01W-W05-IDX];
  PWPREC.YNTCD = PW01W05.YNTCD[PW01W-W05-IDX];
  PWPREC.PWRLBCD[1] = PW01W05.PW01W-PWRLBCD1[PW01W-W05-IDX];
  PWPREC.PWRLBCD[2] = PW01W05.PW01W-PWRLBCD2[PW01W-W05-IDX];
  PWPREC.YLACD[1] = PW01W05.PW01W-YLACD1[PW01W-W05-IDX];
  PWPREC.YLACD[2] = PW01W05.PW01W-YLACD2[PW01W-W05-IDX];
  PWPREC.PWP1OF1F = PW01W05.PWP1OF1F[PW01W-W05-IDX];
  PWPREC.PWPPKTCD = PW01W05.PWPPKTCD[PW01W-W05-IDX];
  PWPREC.PWPNBRTO = PW01W05.PWPNBRTO[PW01W-W05-IDX];
  PWPREC.PWPCPKTM = PW01W05.PWPCPKTM[PW01W-W05-IDX];
  PWPREC.PWPTPKTM = PW01W05.PWPTPKTM[PW01W-W05-IDX];
  PWPREC.SWCLNENB = PW01W05.SWCLNENB[PW01W-W05-IDX];
  PWPREC.PKVSSPNB = PW01W05.PKVSSPNB[PW01W-W05-IDX];
  PWPREC.PWCTLNBR = PW01W05.PWCTLNBR[PW01W-W05-IDX];
  PWPREC.TSOCRTNB = PW01W05.TSOCRTNB[PW01W-W05-IDX];

  PWPREC.PK-CRTN-INNER-NBR = PW01W05.PK-CRTN-INNER-NBR[PW01W-W05-IDX];

  PWPREC.PK-INNER-CRTN-QTY = PW01W05.PK-INNER-CRTN-QTY[PW01W-W05-IDX];

  PWPREC.PK-CRTN-CNT-NBR = PW01W05.PK-CRTN-CNT-NBR[PW01W-W05-IDX];

  PWPREC.PK-OUTER-SEQ-NBR = PW01W05.PK-OUTER-SEQ-NBR[PW01W-W05-IDX];

  PWPREC.PK-EXPC-CRTN-WT = PW01W05.PK-EXPC-CRTN-WT[PW01W-W05-IDX];
  PWPREC.PK-ACTL-CRTN-WT = 0;
  PWPREC.PK-CNSLD-FL = PW01W05.PK-CNSLD-FL[PW01W-W05-IDX];

  PWPREC.PK-UPS-CNSLD-CRTN = PW01W05.PK-UPS-CNSLD-CRTN[PW01W-W05-IDX];

  PWPREC.PK-MSTR-CRTN-FL = PW01W05.PK-MSTR-CRTN-FL[PW01W-W05-IDX];
  PWPREC.PWPPKGRP = PW01W05.PWPPKGRP[PW01W-W05-IDX];
  PWPREC.PK-ZONE-CNSLD-FL = PW01W05.PK-ZONE-CNSLD-FL[PW01W-W05-IDX];

  PWPREC.PK-ZN-CNSLD-MSTRFL = PW01W05.PK-ZN-CNSLD-MSTRFL[PW01W-W05-IDX];

  PWPREC.PK-ZN-CNSLD-SEQNBR = PW01W05.PK-ZN-CNSLD-SEQNBR[PW01W-W05-IDX];

  PWPREC.PK-ZONE-CNSLD-CRTN = PW01W05.PK-ZONE-CNSLD-CRTN[PW01W-W05-IDX];

  PWPREC.PK-COMB-CNSLD-CD = PW01W05.PK-COMB-CNSLD-CD[PW01W-W05-IDX];
  PWPREC.PK-CRTN-PSOV-FL = PW01W05.PK-CRTN-PSOV-FL[PW01W-W05-IDX];
  PWPREC.PK-OBND-QUAL-FL = PW01W05.PK-OBND-QUAL-FL[PW01W-W05-IDX];
  PWPREC.PK-PICK-XCEP-CD = PW01W05.PK-PICK-XCEP-CD[PW01W-W05-IDX];
  PWPREC.PK-NEW-CRTN-FL = PW01W05.PK-NEW-CRTN-FL[PW01W-W05-IDX];
  PWPREC.XXXUSRID = COMMAREA.CAUSERA;

end // end PW01S-MV-PW01W05

// Move PW01W01 to ship rec item
Function PW01S-MV-PW01W051()
   /* ------------------------------------------------------------*/
   /* Move PW01W01 working storage values to ship rec item record.*/
   /* ------------------------------------------------------------*/

  SR3REC.XWHCD = PW01W05.XWHCD[PW01W-W05-IDX];
  SR3REC.PK1PKSCH = PW01W05.PK1PKSCH[PW01W-W05-IDX];
  SR3REC.XGPCD = PW01W05.XGPCD[PW01W-W05-IDX];
  SR3REC.SY1STNBR = PW01W05.SY1STNBR[PW01W-W05-IDX];
  SR3REC.SY2CLRID = PW01W05.SY2CLRID[PW01W-W05-IDX];
  SR3REC.XDMCD = PW01W05.XDMCD[PW01W-W05-IDX];
  SR3REC.XQACD = PW01W05.XQACD[PW01W-W05-IDX];
  SR3REC.PC2INSEG = PW01W05.PC2INSEG[PW01W-W05-IDX];
  SR3REC.XEGCD = PW01W05.XEGCD[PW01W-W05-IDX];
  SR3REC.XPGCD = PW01W05.XPGCD[PW01W-W05-IDX];
  SR3REC.XUMCD = PW01W05.XUMCD[PW01W-W05-IDX];
  SR3REC.XOWCD = PW01W05.XOWCD[PW01W-W05-IDX];

end // end PW01S-MV-PW01W051

// Move PW01W05 to ASN Item recd
Function PW01S-MV-PW01W052()
   /* -----------------------------------------------------------*/
   /* Move the PW01W05 working storage record data to the ASN*/
   /* ASN Item record for database updates.*/
   /* (dship.vazcit01)*/
   /* -----------------------------------------------------------*/

  VAZCIT01.XGP-GPC-CD = PW01W05.XGPCD[PW01W-W05-IDX];
  VAZCIT01.SY-STY-NBR = PW01W05.SY1STNBR[PW01W-W05-IDX];
  VAZCIT01.SY-COLR-CD-ID = PW01W05.SY2CLRID[PW01W-W05-IDX];
  VAZCIT01.XDM-DIM-CD = PW01W05.XDMCD[PW01W-W05-IDX];
  VAZCIT01.XQA-QUAL-CD = PW01W05.XQACD[PW01W-W05-IDX];
  VAZCIT01.XOW-OWN-GRP-CD = PW01W05.XOWCD[PW01W-W05-IDX];
  VAZCIT01.PC-CU-IN-SEG-CD = PW01W05.PC2INSEG[PW01W-W05-IDX];
  VAZCIT01.XPG-PKG-TYP-CD = PW01W05.XPGCD[PW01W-W05-IDX];
  VAZCIT01.XEG-ENGR-DIFF-CD = PW01W05.XEGCD[PW01W-W05-IDX];
  VAZCIT01.XUM-UOM-CD = PW01W05.XUMCD[PW01W-W05-IDX];
  VAZCIT01.XBC-BRAND-CD = PW01W05.XBCCD[PW01W-W05-IDX];

end // end PW01S-MV-PW01W052

// Move PW01W05 to ASN Size recd
Function PW01S-MV-PW01W053()
   /* -----------------------------------------------------------*/
   /* Move the PW01W05 working storage record data to the ASN*/
   /* Size record for database updates.*/
   /* (dship.vazcsz01)*/
   /* -----------------------------------------------------------*/

  VAZCSZ01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCSZ01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCSZ01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCSZ01.OP-CUST-ORD-ID = PW01W05.OP1CUOID[PW01W-W05-IDX];
  VAZCSZ01.OP-NIKE-ORD-ID = PW01W05.OP1NORID[PW01W-W05-IDX];
  VAZCSZ01.PK-CRTN-SEQ-NBR = PW01W05.PKDNCSQN[PW01W-W05-IDX];
  VAZCSZ01.OP-LINE-ITEM-NBR = PW01W05.OP2LNINB[PW01W-W05-IDX];

end // end PW01S-MV-PW01W053

// Move PW0YW06 to splsz & azcsz
Function PW01S-MV-PW01W06()
   /* -----------------------------------------------------------*/
   /* Move the PW01W06 working storage record data to the*/
   /* Packing List size and ASN size records for database*/
   /* updates.*/
   /* (dpick.vsplsz01 and dship.vazcsz01)*/
   /* -----------------------------------------------------------*/

  VSPLSZ02.XWHCD = PW01W06.XWHCD[PW01W-W06-IDX];
  VSPLSZ02.TSIPLNBR = PW01W06.TSIPLNBR[PW01W-W06-IDX];
  VSPLSZ02.OP1PARTN = PW01W06.OP1PARTN[PW01W-W06-IDX];
  VSPLSZ02.OP1CUOID = PW01W06.OP1CUOID[PW01W-W06-IDX];
  VSPLSZ02.OP1NORID = PW01W06.OP1NORID[PW01W-W06-IDX];
  VSPLSZ02.OP2LNINB = PW01W06.OP2LNINB[PW01W-W06-IDX];
  VSPLSZ02.PWPTOSQN = PW01W06.PWPTOSQN[PW01W-W06-IDX];
  VSPLSZ02.PKDNCSQN = PW01W06.PKDNCSQN[PW01W-W06-IDX];
  VSPLSZ02.SY5SZID = PW01W06.SY5SZID[PW01W-W06-IDX];
  VSPLSZ02.XARCD = PW01W06.XARCD[PW01W-W06-IDX];
  VSPLSZ02.SL4ZONE = PW01W06.SL4ZONE[PW01W-W06-IDX];
  VSPLSZ02.SL5LOCTN = PW01W06.SL5LOCTN[PW01W-W06-IDX];
  VSPLSZ02.PK1QTY = PW01W06.PK1QTY[PW01W-W06-IDX];

  VAZCSZ01.OP-CUST-ORD-ID = PW01W06.OP1CUOID[PW01W-W06-IDX];
  VAZCSZ01.OP-NIKE-ORD-ID = PW01W06.OP1NORID[PW01W-W06-IDX];
  VAZCSZ01.OP-LINE-ITEM-NBR = PW01W06.OP2LNINB[PW01W-W06-IDX];
  VAZCSZ01.SY-SZ-ID = PW01W06.SY5SZID[PW01W-W06-IDX];
  VAZCSZ01.SY-SZ-ID-DESC = PW01W06.SY4IDDSC[PW01W-W06-IDX];
  VAZCSZ01.PK-ALOC-PICK-QTY = PW01W06.PK1QTY[PW01W-W06-IDX];

end // end PW01S-MV-PW01W06

// Move pw0yw07 data to pworec
Function PW01S-MV-PW01W07()
   /* -----------------------------------------------------------*/
   /* Move PW01W07 working storage values to PWOREC for the*/
   /* Packing List Header database updates.*/
   /* (dpick.vsplhd01)*/
   /* -----------------------------------------------------------*/

  PWOREC.XWHCD = PW01W07.XWHCD[PW01W-W07-IDX];
  PWOREC.TSIPLNBR = PW01W07.TSIPLNBR[PW01W-W07-IDX];
  PWOREC.OP1PARTN = PW01W07.OP1PARTN[PW01W-W07-IDX];
  PWOREC.OP1CUOID = PW01W07.OP1CUOID[PW01W-W07-IDX];
  PWOREC.OP1NORID = PW01W07.OP1NORID[PW01W-W07-IDX];
  PWOREC.PK1NBCTN = PW01W07.PK1NBCTN[PW01W-W07-IDX];
  PWOREC.PWONCTNO = PW01W07.PWONCTNO[PW01W-W07-IDX];
  PWOREC.PK-COMB-CNSLD-CD = PW01W07.PK-COMB-CNSLD-CD[PW01W-W07-IDX];
  PWOREC.PK-OUTER-ORD-QTY = PW01W07.PK-OUTER-ORD-QTY[PW01W-W07-IDX];

  PWOREC.PK-OUTER-CRTN-QTY = PW01W07.PK-OUTER-CRTN-QTY[PW01W-W07-IDX];

  PWOREC.ZZZSDT = PW01W07.ZZZSDT[PW01W-W07-IDX];

end // end PW01S-MV-PW01W07

// Move pw0yw06 data to pw0yw08
Function PW01S-MV-PW01W08()
   /* ------------------------------------------------------------*/
   /* Move data from pw01w06 to pw01w08.*/
   /* ------------------------------------------------------------*/
  PW01W00.PW01W-W06-IDX = 1;

  while (PW01W00.PW01W-W06-IDX <= 1000)

    if (PW01W05.OP1CUOID[PW01W-W05-IDX] == 
    PW01W06.OP1CUOID[PW01W-W06-IDX]
     && PW01W05.OP1NORID[PW01W-W05-IDX] == 
    PW01W06.OP1NORID[PW01W-W06-IDX]
     && PW01W05.OP2LNINB[PW01W-W05-IDX] == 
    PW01W06.OP2LNINB[PW01W-W06-IDX]
     && PW01W06.PW01W-XCP-FL[PW01W-W06-IDX] == "Y")

      /* --- increment index ---*/
      PW01W00.PW01W-W08-IDX = PW01W00.PW01W-W08-IDX + 1;

      /* --- move pw01w05 values to pw01w08*/
      PW01S-MV-PW01W081();

      PW01W08.XOBCD[PW01W-W08-IDX] = PW01W00.XOBCD;
      PW01W08.XOTCD[PW01W-W08-IDX] = PW01W00.XOTCD;
      PW01W08.OP1TBREP[PW01W-W08-IDX] = PW01W00.OP1TBREP;
      PW01W08.XARCD[PW01W-W08-IDX] = PW01W06.XARCD[PW01W-W06-IDX];

      PW01W08.SL4ZONE[PW01W-W08-IDX] = PW01W06.SL4ZONE[PW01W-W06-IDX];
      PW01W08.SY5SZID[PW01W-W08-IDX] = PW01W06.SY5SZID[PW01W-W06-IDX];
      PW01W08.SL5LOCTN[PW01W-W08-IDX] = PW01W06.SL5LOCTN[PW01W-W06-IDX];

      PW01W08.SR3QTYAL[PW01W-W08-IDX] = PW01W06.SR3QTYAL[PW01W-W06-IDX];

      PW01W08.SR3QTYSH[PW01W-W08-IDX] = PW01W06.SR3QTYSH[PW01W-W06-IDX];

      PW01W08.SR5QTYXC[PW01W-W08-IDX] = PW01W06.SR5QTYXC[PW01W-W06-IDX];
    else
      if (PW01W06.PW01W-IO-FUNCTION[PW01W-W06-IDX] == " ")

        PW01W00.PW01W-W06-IDX = 1000;
      end
    end

    PW01W00.PW01W-W06-IDX = PW01W00.PW01W-W06-IDX + 1;
  end

end // end PW01S-MV-PW01W08

// Move pw0yw05 data to pw0yw08
Function PW01S-MV-PW01W081()
   /* -----------------------------------------------------------*/
   /* Move pw01w05 data to pw01w08 for dship.vsrxcp01 updates*/
   /* -----------------------------------------------------------*/

  PW01W08.XWHCD[PW01W-W08-IDX] = PW01W05.XWHCD[PW01W-W05-IDX];
  PW01W08.PK1PKSCH[PW01W-W08-IDX] = PW01W05.PK1PKSCH[PW01W-W05-IDX];
  PW01W08.OP1CUOID[PW01W-W08-IDX] = PW01W05.OP1CUOID[PW01W-W05-IDX];
  PW01W08.OP1NORID[PW01W-W08-IDX] = PW01W05.OP1NORID[PW01W-W05-IDX];
  PW01W08.OP2LNINB[PW01W-W08-IDX] = PW01W05.OP2LNINB[PW01W-W05-IDX];
  PW01W08.XOWCD[PW01W-W08-IDX] = PW01W05.XOWCD[PW01W-W05-IDX];
  PW01W08.XGPCD[PW01W-W08-IDX] = PW01W05.XGPCD[PW01W-W05-IDX];
  PW01W08.SY1STNBR[PW01W-W08-IDX] = PW01W05.SY1STNBR[PW01W-W05-IDX];
  PW01W08.SY2CLRID[PW01W-W08-IDX] = PW01W05.SY2CLRID[PW01W-W05-IDX];
  PW01W08.XDMCD[PW01W-W08-IDX] = PW01W05.XDMCD[PW01W-W05-IDX];
  PW01W08.XQACD[PW01W-W08-IDX] = PW01W05.XQACD[PW01W-W05-IDX];
  PW01W08.PC2INSEG[PW01W-W08-IDX] = PW01W05.PC2INSEG[PW01W-W05-IDX];
  PW01W08.XEGCD[PW01W-W08-IDX] = PW01W05.XEGCD[PW01W-W05-IDX];
  PW01W08.XPGCD[PW01W-W08-IDX] = PW01W05.XPGCD[PW01W-W05-IDX];
  PW01W08.XUMCD[PW01W-W08-IDX] = PW01W05.XUMCD[PW01W-W05-IDX];
  PW01W08.XBCCD[PW01W-W08-IDX] = PW01W05.XBCCD[PW01W-W05-IDX];

end // end PW01S-MV-PW01W081

// Move pw0yw08 data to sr5rec
Function PW01S-MV-PW01W082()
  SR5REC.XWHCD = PW01W08.XWHCD[PW01W-W08-IDX];
  SR5REC.PK1PKSCH = PW01W08.PK1PKSCH[PW01W-W08-IDX];
  SR5REC.OP1CUOID = PW01W08.OP1CUOID[PW01W-W08-IDX];
  SR5REC.OP1NORID = PW01W08.OP1NORID[PW01W-W08-IDX];
  SR5REC.OP2LNINB = PW01W08.OP2LNINB[PW01W-W08-IDX];
  SR5REC.XOWCD = PW01W08.XOWCD[PW01W-W08-IDX];
  SR5REC.XARCD = PW01W08.XARCD[PW01W-W08-IDX];
  SR5REC.SL4ZONE = PW01W08.SL4ZONE[PW01W-W08-IDX];
  SR5REC.SL5LOCTN = PW01W08.SL5LOCTN[PW01W-W08-IDX];
  SR5REC.SY5SZID = PW01W08.SY5SZID[PW01W-W08-IDX];
  SR5REC.XGPCD = PW01W08.XGPCD[PW01W-W08-IDX];
  SR5REC.SY1STNBR = PW01W08.SY1STNBR[PW01W-W08-IDX];
  SR5REC.SY2CLRID = PW01W08.SY2CLRID[PW01W-W08-IDX];
  SR5REC.XDMCD = PW01W08.XDMCD[PW01W-W08-IDX];
  SR5REC.XQACD = PW01W08.XQACD[PW01W-W08-IDX];
  SR5REC.XLCCD = PW01W08.XLCCD[PW01W-W08-IDX];
  SR5REC.PC2INSEG = PW01W08.PC2INSEG[PW01W-W08-IDX];
  SR5REC.XEGCD = PW01W08.XEGCD[PW01W-W08-IDX];
  SR5REC.XPGCD = PW01W08.XPGCD[PW01W-W08-IDX];
  SR5REC.XUMCD = PW01W08.XUMCD[PW01W-W08-IDX];
  SR5REC.XBCCD = PW01W08.XBCCD[PW01W-W08-IDX];
  SR5REC.OP1TBREP = PW01W08.OP1TBREP[PW01W-W08-IDX];
  SR5REC.XOBCD = PW01W08.XOBCD[PW01W-W08-IDX];
  SR5REC.XOTCD = PW01W08.XOTCD[PW01W-W08-IDX];
  SR5REC.SR3QTYAL = PW01W08.SR3QTYAL[PW01W-W08-IDX];
  SR5REC.SR3QTYSH = PW01W08.SR3QTYSH[PW01W-W08-IDX];
  SR5REC.SR5QTYXC = PW01W08.SR5QTYXC[PW01W-W08-IDX];
  SR5REC.XXXUSRID = PW01W08.XXXUSRID[PW01W-W08-IDX];
end // end PW01S-MV-PW01W082

// Move PWOREC to PW01W07 w/s rec
Function PW01S-MV-PWOREC()
   /* -----------------------------------------------------------*/
   /* Move PWOREC data to pw01W07 for packing list hdr updates.*/
   /* (dpick.vsplhd01)*/
   /* -----------------------------------------------------------*/

  PW01W00.PW01W-W07-IDX = PW01W00.PW01W-W07-IDX + 1;

  PW01W07.XWHCD[PW01W-W07-IDX] = PWOREC.XWHCD;
  PW01W07.TSIPLNBR[PW01W-W07-IDX] = PWOREC.TSIPLNBR;
  PW01W07.OP1PARTN[PW01W-W07-IDX] = PWOREC.OP1PARTN;
  PW01W07.OP1CUOID[PW01W-W07-IDX] = PWOREC.OP1CUOID;
  PW01W07.OP1NORID[PW01W-W07-IDX] = PWOREC.OP1NORID;
  PW01W07.PK1NBCTN[PW01W-W07-IDX] = PWOREC.PK1NBCTN;
  PW01W07.PWONCTNO[PW01W-W07-IDX] = PWOREC.PWONCTNO;

  PW01W07.PK-OUTER-ORD-QTY[PW01W-W07-IDX] = PWOREC.PK-OUTER-ORD-QTY;

  PW01W07.PK-OUTER-CRTN-QTY[PW01W-W07-IDX] = PWOREC.PK-OUTER-CRTN-QTY;

  PW01W07.ZZZSDT[PW01W-W07-IDX] = PWOREC.ZZZSDT;
  PW01W07.ZZZCHGCT[PW01W-W07-IDX] = PWOREC.ZZZCHGCT;

end // end PW01S-MV-PWOREC

// Move PWPREC to PW01W05 W/S Rec
Function PW01S-MV-PWPREC()
   /* -----------------------------------------------------------*/
   /* Move PWPREC data to pw01W05 for packing list item updates.*/
   /* (dpick.vsplit01)*/
   /*  */
   /* Note: pw01W05 is an internal table for dpick.vsplit01.*/
   /* Any changes made to dpick.vsplit01 must be*/
   /* replicated in pw01W05.*/
   /* -----------------------------------------------------------*/

  PW01W00.PW01W-W05-IDX = PW01W00.PW01W-W05-IDX + 1;

  PW01W05.XWHCD[PW01W-W05-IDX] = PWPREC.XWHCD;
  PW01W05.TSIPLNBR[PW01W-W05-IDX] = PWPREC.TSIPLNBR;
  PW01W05.OP1PARTN[PW01W-W05-IDX] = PWPREC.OP1PARTN;
  PW01W05.OP1CUOID[PW01W-W05-IDX] = PWPREC.OP1CUOID;
  PW01W05.OP1NORID[PW01W-W05-IDX] = PWPREC.OP1NORID;
  PW01W05.OP2LNINB[PW01W-W05-IDX] = PWPREC.OP2LNINB;
  PW01W05.PWPTOSQN[PW01W-W05-IDX] = PWPREC.PWPTOSQN;
  PW01W05.PKDNCSQN[PW01W-W05-IDX] = PWPREC.PKDNCSQN;
  PW01W05.PK1PKSCH[PW01W-W05-IDX] = PWPREC.PK1PKSCH;
  PW01W05.OP2CPLNB[PW01W-W05-IDX] = PWPREC.OP2CPLNB;
  PW01W05.OSNPKGNB[PW01W-W05-IDX] = PWPREC.OSNPKGNB;
  PW01W05.XGPCD[PW01W-W05-IDX] = PWPREC.XGPCD;
  PW01W05.SY1STNBR[PW01W-W05-IDX] = PWPREC.SY1STNBR;
  PW01W05.SY2CLRID[PW01W-W05-IDX] = PWPREC.SY2CLRID;
  PW01W05.XDMCD[PW01W-W05-IDX] = PWPREC.XDMCD;
  PW01W05.XQACD[PW01W-W05-IDX] = PWPREC.XQACD;
  PW01W05.XOWCD[PW01W-W05-IDX] = PWPREC.XOWCD;
  PW01W05.PC2INSEG[PW01W-W05-IDX] = PWPREC.PC2INSEG;
  PW01W05.XEGCD[PW01W-W05-IDX] = PWPREC.XEGCD;
  PW01W05.XPGCD[PW01W-W05-IDX] = PWPREC.XPGCD;
  PW01W05.XUMCD[PW01W-W05-IDX] = PWPREC.XUMCD;
  PW01W05.XBCCD[PW01W-W05-IDX] = PWPREC.XBCCD;
  PW01W05.PW01W-XHDCD1[PW01W-W05-IDX] = PWPREC.XHDCD[1];
  PW01W05.PW01W-XHDCD2[PW01W-W05-IDX] = PWPREC.XHDCD[2];
  PW01W05.PW01W-XHDCD3[PW01W-W05-IDX] = PWPREC.XHDCD[3];
  PW01W05.PW01W-XHDCD4[PW01W-W05-IDX] = PWPREC.XHDCD[4];
  PW01W05.PW01W-XHDCD5[PW01W-W05-IDX] = PWPREC.XHDCD[5];
  PW01W05.YNTCD[PW01W-W05-IDX] = PWPREC.YNTCD;
  PW01W05.PW01W-PWRLBCD1[PW01W-W05-IDX] = PWPREC.PWRLBCD[1];
  PW01W05.PW01W-PWRLBCD2[PW01W-W05-IDX] = PWPREC.PWRLBCD[2];
  PW01W05.PW01W-YLACD1[PW01W-W05-IDX] = PWPREC.YLACD[1];
  PW01W05.PW01W-YLACD2[PW01W-W05-IDX] = PWPREC.YLACD[2];
  PW01W05.PWP1OF1F[PW01W-W05-IDX] = PWPREC.PWP1OF1F;
  PW01W05.PWPPKTCD[PW01W-W05-IDX] = PWPREC.PWPPKTCD;
  PW01W05.PWPNBRTO[PW01W-W05-IDX] = PWPREC.PWPNBRTO;
  PW01W05.PWPCPKTM[PW01W-W05-IDX] = PWPREC.PWPCPKTM;
  PW01W05.PWPTPKTM[PW01W-W05-IDX] = PWPREC.PWPTPKTM;
  PW01W05.SWCLNENB[PW01W-W05-IDX] = PWPREC.SWCLNENB;
  PW01W05.PKVSSPNB[PW01W-W05-IDX] = PWPREC.PKVSSPNB;
  PW01W05.PWCTLNBR[PW01W-W05-IDX] = PWPREC.PWCTLNBR;
  PW01W05.TSOCRTNB[PW01W-W05-IDX] = PWPREC.TSOCRTNB;

  PW01W05.PK-CRTN-INNER-NBR[PW01W-W05-IDX] = PWPREC.PK-CRTN-INNER-NBR;

  PW01W05.PK-INNER-CRTN-QTY[PW01W-W05-IDX] = PWPREC.PK-INNER-CRTN-QTY;

  PW01W05.PK-CRTN-CNT-NBR[PW01W-W05-IDX] = PWPREC.PK-CRTN-CNT-NBR;

  PW01W05.PK-OUTER-SEQ-NBR[PW01W-W05-IDX] = PWPREC.PK-OUTER-SEQ-NBR;

  PW01W05.PK-EXPC-CRTN-WT[PW01W-W05-IDX] = PWPREC.PK-EXPC-CRTN-WT;
  PW01W05.PK-ACTL-CRTN-WT[PW01W-W05-IDX] = PWPREC.PK-ACTL-CRTN-WT;
  PW01W05.PK-CNSLD-FL[PW01W-W05-IDX] = PWPREC.PK-CNSLD-FL;

  PW01W05.PK-UPS-CNSLD-CRTN[PW01W-W05-IDX] = PWPREC.PK-UPS-CNSLD-CRTN;

  PW01W05.PK-MSTR-CRTN-FL[PW01W-W05-IDX] = PWPREC.PK-MSTR-CRTN-FL;
  PW01W05.PWPPKGRP[PW01W-W05-IDX] = PWPREC.PWPPKGRP;
  PW01W05.PK-ZONE-CNSLD-FL[PW01W-W05-IDX] = PWPREC.PK-ZONE-CNSLD-FL;

  PW01W05.PK-ZN-CNSLD-MSTRFL[PW01W-W05-IDX] = PWPREC.PK-ZN-CNSLD-MSTRFL;

  PW01W05.PK-ZN-CNSLD-SEQNBR[PW01W-W05-IDX] = PWPREC.PK-ZN-CNSLD-SEQNBR;

  PW01W05.PK-ZONE-CNSLD-CRTN[PW01W-W05-IDX] = PWPREC.PK-ZONE-CNSLD-CRTN;

  PW01W05.PK-COMB-CNSLD-CD[PW01W-W05-IDX] = PWPREC.PK-COMB-CNSLD-CD;
  PW01W05.PK-CRTN-PSOV-FL[PW01W-W05-IDX] = PWPREC.PK-CRTN-PSOV-FL;
  PW01W05.PK-OBND-QUAL-FL[PW01W-W05-IDX] = PWPREC.PK-OBND-QUAL-FL;
  PW01W05.PK-PICK-XCEP-CD[PW01W-W05-IDX] = PWPREC.PK-PICK-XCEP-CD;
  PW01W05.PK-NEW-CRTN-FL[PW01W-W05-IDX] = PWPREC.PK-NEW-CRTN-FL;

end // end PW01S-MV-PWPREC

// Move PWPREC Data to PW01W01
Function PW01S-MV-PWPREC-01()
   /* -----------------------------------------------------------*/
   /* Set up the keys in the PW01W01 w/s record with the*/
   /* packing list item data.*/
   /* -----------------------------------------------------------*/

  PW01W01.TSIPLNBR = PWPREC.TSIPLNBR;
  PW01W01.OP1PARTN = PWPREC.OP1PARTN;
  PW01W01.OP1CUOID = PWPREC.OP1CUOID;
  PW01W01.OP1NORID = PWPREC.OP1NORID;
  PW01W01.OP2LNINB = PWPREC.OP2LNINB;
  PW01W01.PKDNCSQN = PWPREC.PKDNCSQN;
  PW01W01.PW01WCTN = PWPREC.PKDNCSQN; /* this will help paging*/
  PW01W01.PWPTOSQN = PWPREC.PWPTOSQN;
  PW01W01.PK1PKSCH = PWPREC.PK1PKSCH;
  PW01W01.XGPCD = PWPREC.XGPCD;
  PW01W01.SY1STNBR = PWPREC.SY1STNBR;
  PW01W01.SY2CLRID = PWPREC.SY2CLRID;
  PW01W01.XDMCD = PWPREC.XDMCD;
  PW01W01.XQACD = PWPREC.XQACD;
  PW01W01.XOWCD = PWPREC.XOWCD;
  PW01W01.PC2INSEG = PWPREC.PC2INSEG;
  PW01W01.XEGCD = PWPREC.XEGCD;
  PW01W01.XPGCD = PWPREC.XPGCD;
  PW01W01.XUMCD = PWPREC.XUMCD;
  PW01W01.YNTCD = PWPREC.YNTCD;
  PW01W01.PWP1OF1F = PWPREC.PWP1OF1F;
  PW01W01.PWPPKTCD = PWPREC.PWPPKTCD;
  PW01W01.TSOCRTNB = PWPREC.TSOCRTNB;

end // end PW01S-MV-PWPREC-01

// Move Pack List Size to PW01W06
Function PW01S-MV-PWQREC-01()
   /* --------------------------------------------------------*/
   /* Move Packing List Size to working storage record*/
   /* PW01W06 for table changes.*/
   /*  */
   /* Note: pw01w06 is an internal table for Packing List*/
   /* Size (dpick.vsplsz02). Any fields added or*/
   /* changed on the DB2 table must also be changed*/
   /* in pw01w06.*/
   /* --------------------------------------------------------*/

  PW01W00.PW01W-W06-IDX = PW01W00.PW01W-W06-IDX + 1;

  PW01W06.XWHCD[PW01W-W06-IDX] = VSPLSZ02.XWHCD;
  PW01W06.TSIPLNBR[PW01W-W06-IDX] = VSPLSZ02.TSIPLNBR;
  PW01W06.OP1PARTN[PW01W-W06-IDX] = VSPLSZ02.OP1PARTN;
  PW01W06.OP1CUOID[PW01W-W06-IDX] = VSPLSZ02.OP1CUOID;
  PW01W06.OP1NORID[PW01W-W06-IDX] = VSPLSZ02.OP1NORID;
  PW01W06.OP2LNINB[PW01W-W06-IDX] = VSPLSZ02.OP2LNINB;
  PW01W06.PWPTOSQN[PW01W-W06-IDX] = VSPLSZ02.PWPTOSQN;
  PW01W06.PKDNCSQN[PW01W-W06-IDX] = VSPLSZ02.PKDNCSQN;
  PW01W06.SY5SZID[PW01W-W06-IDX] = VSPLSZ02.SY5SZID;
  PW01W06.SY4IDDSC[PW01W-W06-IDX] = PW01M001.SY4IDDSC[PW01WIDX];
  PW01W06.XARCD[PW01W-W06-IDX] = VSPLSZ02.XARCD;
  PW01W06.SL4ZONE[PW01W-W06-IDX] = VSPLSZ02.SL4ZONE;
  PW01W06.SL5LOCTN[PW01W-W06-IDX] = VSPLSZ02.SL5LOCTN;
  PW01W06.PK1QTY[PW01W-W06-IDX] = VSPLSZ02.PK1QTY;
  PW01W06.ZZZSDT[PW01W-W06-IDX] = VSPLSZ02.ZZZSDT;
  PW01W06.ZZZCHGCT[PW01W-W06-IDX] = VSPLSZ02.ZZZCHGCT;

end // end PW01S-MV-PWQREC-01

// Calculate Expected Weight
Function PW01S-NEW-CRTNWT()
   /* ------------------------------------------------------------*/
   /* Calculate the expected weight for the new carton*/
   /* ------------------------------------------------------------*/

  set PKNREC empty; /* Clear row storage area*/

   /* --- get style/colour/size row ---*/
  PKNREC.XGPCD = PW01W01.XGPCD; /* group code*/
  PKNREC.SY1STNBR = PW01W01.SY1STNBR; /* style nbr*/
  PKNREC.SY2CLRID = PW01W01.SY2CLRID; /* colour code*/
  PKNREC.XDMCD = PW01W01.XDMCD; /* dimension code*/

  PW01S-VPKSTY01-S(); /* 's ' dpick.vpksty01*/

   /* --- get picking control row ---*/
  set PKDREC empty; /* Clear row storage area*/
  PKDREC.XWHCD = PW01W01.XWHCD; /* whse code*/

  PW01S-VPKCTL01-S(); /* 's ' dpick.vpkctl01*/

  PW01W00.PW01W-NEW-SIZE-WT = 0;

  if (PW01M001.SY4IDDSC[PW01WIDX] in SYPREC.SY4IDDSC)

    PW01W02.SY5SZID[PW01WIDX] = SYPREC.SY5SZID[sysVar.arrayIndex];

  end

  PW01W00.PW01W-SZ-INDEX = PW01W02.SY5SZID[PW01WIDX];

  if (PKNREC.SYGSZWT[PW01W-SZ-INDEX] > 0) /* size weight exists*/

     /* --- calc using size weight ---*/
    PW01W00.PW01W-NEW-SIZE-WT = PKNREC.SYGSZWT[PW01W-SZ-INDEX] * PW01M001.PW01MADJ[PW01WIDX];

  else /* no size weight*/

    if (PKNREC.SY1AVEWT > 0) /* average weight exists*/

      /* --- calc using average weight for the product ---*/
      PW01W00.PW01W-NEW-SIZE-WT = PKNREC.SY1AVEWT * PW01M001.PW01MADJ[PW01WIDX];

    else /* no average weight*/

      /* --- calc using the default weight ---*/
      PW01W00.PW01W-NEW-SIZE-WT = PKDREC.PKDDFWPU * PW01M001.PW01MADJ[PW01WIDX];
    end
  end

end // end PW01S-NEW-CRTNWT

// Get new packing list item
Function PW01S-NEW-VSPLIT01()
   /* -----------------------------------------------------------*/
   /* Get new packing list item record (dpick.vsplit01)*/
   /* -----------------------------------------------------------*/

  PW01W00.PW01W-IT-INDEX = 0;

  if (PW01M001.XWHCD == "51"
   || PW01M001.XWHCD == "42") /* apparel warehouses*/
    PW01S-APPRL-VSPLIT();
  else /* footwear warehouse*/
    set PWPREC empty; /* clear record storage area*/
    PWPREC.XWHCD = PW01M001.XWHCD;
    PWPREC.PKDNCSQN = PW01M001.PW01MCTN;
    PW01S-VSPLIT01-S1(); /* 's1' dpick.vsplit01*/
  end

  PW01W00.PW01WPLS = "N"; /* request for data switch*/

   /* -----------------------------------------------------------*/
   /* Get the first packing list item record*/
   /* -----------------------------------------------------------*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PW01W00.PW01WPLS == "N")

    PW01S-NXT-VSPLIT01();

    if (SQLCA.VAGen_SQLCODE == 0 /* items found*/
     && PW01M001.XWHCD == "51"   /* apparel warehouse*/
     && PW01M001.PW01MTOT != 0   /* tote entered*/
     && PW01M001.PW01MCTN != 0)  /* carton entered*/
      PW01S-CHECK-TOTE(); /* verify correct ctn found*/
    end

    if (SQLCA.VAGen_SQLCODE == 0 /* items found*/
     && PW01M001.XWHCD == "42"   /* apparel warehouse*/
     && PW01M001.PW01MTOT != 0   /* tote entered*/
     && PW01M001.PW01MCTN != 0)  /* carton entered*/
      PW01S-CHECK-TOTE(); /* verify correct ctn found*/
    end

    if (SQLCA.VAGen_SQLCODE == 0) /* items found*/
      PW01W00.PW01WPLS = "Y";
      PW01S-CHECK-CNSLD(); /* check for consolidation*/
      PW01S-LOAD-ITEMS(); /* load key fields for new item*/

    end
    PW01S35(); /* check dpick.vsplit01*/
  end

end // end PW01S-NEW-VSPLIT01

// Fetch next record for vsplit01
Function PW01S-NXT-VSPLIT01()
   /* -----------------------------------------------------------*/
   /* Fetch the next packing list item record. (dpick.vsplit01)*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pf5)
    PW01W00.PW01W-SPLIT-CSR-IND = PW01W12.SAVE-SPLIT-CSR-IND;
  else
    if (converseVar.eventKey is pf6)
      PW01W00.PW01W-SPLIT-CSR-IND = PW01W12.SAVE-SPLIT-CSR-IND;
    end
  end

  if (PW01REC.PW01W-PF11ACT-IND == "N") /* not PF11*/
    PW01W12.SAVE-SPLIT-CSR-IND = PW01W00.PW01W-SPLIT-CSR-IND;
  end

  if (PW01W00.PW01W-SPLIT-CSR-IND == "1") /* carton # only entered*/
    PW01S-VSPLIT01-N1(); /* 'n1' dpick.vsplit01*/

  else
    if (PW01W00.PW01W-SPLIT-CSR-IND == "2") /* tote # only entered*/
      PW01S-VSPLIT01-N2(); /* 'n2' dpick.vsplit01*/

    else
      if (PW01W00.PW01W-SPLIT-CSR-IND == "6")
                                           /* consolidated cartons*/
        PW01S-VSPLIT01-N6(); /* 'n6' dpick.vsplit01*/
      else
                                           /* tote and crtn entered*/
        PW01S-VSPLIT01-N7(); /* 'n7' dpick.vsplit01*/
      end
    end
  end

end // end PW01S-NXT-VSPLIT01

// Calculate Expected Weight
Function PW01S-ORIG-CRTNWT()
   /* ------------------------------------------------------------*/
   /* Calculate expected weight for original carton*/
   /* ------------------------------------------------------------*/

  set PKNREC empty; /* Clear row storage area*/

   /* --- get style/colour/size row ---*/
  PKNREC.XGPCD = PW01W01.XGPCD; /* group code*/
  PKNREC.SY1STNBR = PW01W01.SY1STNBR; /* style nbr*/
  PKNREC.SY2CLRID = PW01W01.SY2CLRID; /* colour code*/
  PKNREC.XDMCD = PW01W01.XDMCD; /* dimension code*/

  PW01S-VPKSTY01-S(); /* 's ' dpick.vpksty01*/

   /* --- get picking control row ---*/
  set PKDREC empty; /* Clear row storage area*/
  PKDREC.XWHCD = PW01W01.XWHCD; /* whse code*/

  PW01S-VPKCTL01-S(); /* 's ' dpick.vpkctl01*/

  PW01W00.PW01W-ORIG-SIZE-WT = 0;

  if (PW01W02.SY4IDDSC[PW01WIDX] in SYPREC.SY4IDDSC)

    PW01W02.SY5SZID[PW01WIDX] = SYPREC.SY5SZID[sysVar.arrayIndex];

  end

  PW01W00.PW01W-SZ-INDEX = PW01W02.SY5SZID[PW01WIDX];

  if (PKNREC.SYGSZWT[PW01W-SZ-INDEX] > 0) /* size weight exists*/

     /* --- calc using size weight ---*/
    PW01W00.PW01W-ORIG-SIZE-WT = PKNREC.SYGSZWT[PW01W-SZ-INDEX] * PW01M001.PW01MADJ[PW01WIDX];

  else
                                         /* no size weight*/
    if (PKNREC.SY1AVEWT > 0)

       /* --- calc using average weight for product ---*/
      PW01W00.PW01W-ORIG-SIZE-WT = PKNREC.SY1AVEWT * PW01M001.PW01MADJ[PW01WIDX];

    else

      /* --- calc using default weight ---*/
      PW01W00.PW01W-ORIG-SIZE-WT = PKDREC.PKDDFWPU * PW01M001.PW01MADJ[PW01WIDX];
    end
  end

end // end PW01S-ORIG-CRTNWT

Function PW01S-POP-VAZCIT02()

   /* *******************************************************************************/
   /* This statement group is added for VICS BOL changes*/
   /* The new view VAZCIT02 is populated from the old view VAZCIT01*/
   /* and PK-VICS-BOL is populated in the table.*/
   /* *******************************************************************************/

  PW01W00.PW01W-VICS-BOL-NBR = 0;

  PW01W00.PW01W-VICS-CONSTANT = 0;

  if (VAZCIT01.XWH-WHSE-CD == "07")
    PW01W00.PW01W-VICS-PREFIX-NBR = 91203;
  else
    if (VAZCIT01.XWH-WHSE-CD == "02")
      PW01W00.PW01W-VICS-PREFIX-NBR = 13816;
    else
      if (VAZCIT01.XWH-WHSE-CD == "42")
        PW01W00.PW01W-VICS-PREFIX-NBR = 91209;
      else
        if (VAZCIT01.XWH-WHSE-CD == "04")
          PW01W00.PW01W-VICS-PREFIX-NBR = 91202;
        else
          if (VAZCIT01.XWH-WHSE-CD == "09")
            PW01W00.PW01W-VICS-PREFIX-NBR = 91204;
          else
            if (VAZCIT01.XWH-WHSE-CD == "51")
              PW01W00.PW01W-VICS-PREFIX-NBR = 91205;
            end
          end
        end
      end
    end
  end

  PW01W00.PW01W-BOL-NBR = VAZCIT01.PK-BILL-OF-LADING;

  set VAZCIT02 empty;
  VAZCIT02.VAZCIT02-REC = VAZCIT01.VAZCIT01-REC;
  VAZCIT02.PK-VICS-BOL = PW01W00.PW01W-VICS-BOL-NBR;

   /* If the BOL is a partially split BOL then the VICS BOL will be different from the normal BOL*/

  if (VAZCIT01.PK-BOL-SUB-NBR > 0)
    set VAZHDR02 empty;
    VAZHDR02.XWH-WHSE-CD = VAZCIT01.XWH-WHSE-CD;
    VAZHDR02.PK-BILL-OF-LADING = VAZCIT01.PK-BILL-OF-LADING;
    VAZHDR02.PK-BOL-SUB-NBR = VAZCIT01.PK-BOL-SUB-NBR;
    PW01S-VAZHDR02-S(); /* / * get the vics bol for the split bol*/
    VAZCIT02.PK-VICS-BOL = VAZHDR02.PK-VICS-BOL;
  end

  VAZCIT02.ZZ-SDT = VAZCIT01.ZZ-SDT;
  VAZCIT02.ZZ-SETUP-HHMM = VAZCIT01.ZZ-SETUP-HHMM;
  VAZCIT02.ZZ-CHNG-DT = VAZCIT01.ZZ-CHNG-DT;
  VAZCIT02.ZZ-CHNG-HHMM = VAZCIT01.ZZ-CHNG-HHMM;
  VAZCIT02.ZZ-CHNG-CNT = VAZCIT01.ZZ-CHNG-CNT;

end // end PW01S-POP-VAZCIT02

Function PW01S-POP-VAZCSZ02()

   /* *******************************************************************************/
   /* This statement group is added for VICS BOL changes*/
   /* The new view VAZCSZ02 is populated from the old view VAZCSZ01*/
   /* and PK-VICS-BOL is populated in the table.*/
   /* *******************************************************************************/

   /* *******************************************************************************/
   /* This statement group is added for VICS BOL changes*/
   /* The new view VAZCSZ02 is populated from the old view VAZCSZ01*/
   /* and PK-VICS-BOL is populated in the table.*/
   /* *******************************************************************************/

  PW01W00.PW01W-VICS-BOL-NBR = 0;

  PW01W00.PW01W-VICS-CONSTANT = 0;

  if (VAZCSZ01.XWH-WHSE-CD == "07")
    PW01W00.PW01W-VICS-PREFIX-NBR = 91203;
  else
    if (VAZCSZ01.XWH-WHSE-CD == "02")
      PW01W00.PW01W-VICS-PREFIX-NBR = 13816;
    else
      if (VAZCSZ01.XWH-WHSE-CD == "42")
        PW01W00.PW01W-VICS-PREFIX-NBR = 91209;
      else
        if (VAZCSZ01.XWH-WHSE-CD == "04")
          PW01W00.PW01W-VICS-PREFIX-NBR = 91202;
        else
          if (VAZCSZ01.XWH-WHSE-CD == "09")
            PW01W00.PW01W-VICS-PREFIX-NBR = 91204;
          else
            if (VAZCSZ01.XWH-WHSE-CD == "51")
              PW01W00.PW01W-VICS-PREFIX-NBR = 91205;
            end
          end
        end
      end
    end
  end

  PW01W00.PW01W-BOL-NBR = VAZCSZ01.PK-BILL-OF-LADING;

  set VAZCSZ02 empty;
  VAZCSZ02.VAZCSZ02-REC = VAZCSZ01.VAZCSZ01-REC;
  VAZCSZ02.PK-VICS-BOL = PW01W00.PW01W-VICS-BOL-NBR;

   /* If the BOL is a partially split BOL then the VICS BOL will be different from the normal BOL*/

  if (VAZCSZ01.PK-BOL-SUB-NBR > 0)
    set VAZHDR02 empty;
    VAZHDR02.XWH-WHSE-CD = VAZCSZ01.XWH-WHSE-CD;
    VAZHDR02.PK-BILL-OF-LADING = VAZCSZ01.PK-BILL-OF-LADING;
    VAZHDR02.PK-BOL-SUB-NBR = VAZCSZ01.PK-BOL-SUB-NBR;
    PW01S-VAZHDR02-S(); /* / * get the vics bol for the split bol*/
    VAZCSZ02.PK-VICS-BOL = VAZHDR02.PK-VICS-BOL;
  end

  VAZCSZ02.ZZ-SDT = VAZCSZ01.ZZ-SDT;
  VAZCSZ02.ZZ-SETUP-HHMM = VAZCSZ01.ZZ-SETUP-HHMM;
  VAZCSZ02.ZZ-CHNG-DT = VAZCSZ01.ZZ-CHNG-DT;
  VAZCSZ02.ZZ-CHNG-HHMM = VAZCSZ01.ZZ-CHNG-HHMM;
  VAZCSZ02.ZZ-CHNG-CNT = VAZCSZ01.ZZ-CHNG-CNT;

end // end PW01S-POP-VAZCSZ02

// Update Pack List Sz and ASN Sz
Function PW01S-PW01310()

  while (PW01W00.PW01W-W06-IDX > 0)

    if (PW01W06.PW01W-IO-FUNCTION[PW01W-W06-IDX] == "A")

      PW01S-PW013101(); /* ADD function processing*/
    else
      if (PW01W06.PW01W-IO-FUNCTION[PW01W-W06-IDX] == "D")

        PW01S-PW013102(); /* DELETE function processing*/

      else
        if (PW01W06.PW01W-IO-FUNCTION[PW01W-W06-IDX] == "U")

          PW01S-PW013103(); /* UPDATE function processing*/
        end
      end
    end

    PW01W00.PW01W-W06-IDX = PW01W00.PW01W-W06-IDX - 1;
  end

end // end PW01S-PW01310

// ADD Pack List Sz and ASN Sz
Function PW01S-PW013101()
   /* --------------------------------------------------------*/
   /* ADD function processing for packing list size and ASN*/
   /* size tables (dpick.vsplsz01 and dship.vazcsz01)*/
   /* --------------------------------------------------------*/

  set VSPLSZ02 empty; /* initialise database recs*/
  set VAZCSZ01 empty;

   /* --- move PW01W06 values to vsplsz01 and vazcsz01 ---*/
  PW01S-MV-PW01W06();

  PW01S-VSPLSZ01-S(); /* check if vsplsz01 row exists*/

   /* DLVRUSA changes Start*/

  PW01W-W09-IDX = 0;
  PW01W-W09-IDX = PW01W-W06-IDX - 1;

  if (SQLCA.VAGen_SQLCODE == 0) /* vsplsz01 row already exists*/

    /* update the packing list size row*/
    VSPLSZ02.PK1QTY = VSPLSZ02.PK1QTY + PW01W06.PW01W-ADJ-QTY[PW01W-W09-IDX];
    /* DLVRUSA changes End*/

    VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;
    VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;

    PW01S-VSPLSZ01-U(); /* 'u ' dpick.vsplsz01*/

  else
                                  /* add a packing list item row*/

    VSPLSZ02.ZZZSDT = PWOREC.ZZZSDT; /* change date*/
    VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
    VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/

    PW01S-VSPLSZ01-A(); /* 'a ' dpick.vsplsz01*/
  end

   /* --- move w/s values to ASN size record ---*/
  VAZCSZ01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCSZ01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCSZ01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCSZ01.PK-CRTN-SEQ-NBR = PW01M001.PW01M-NEW-CRTN;

   /* --- get UPC code for ASN Item size ---*/
  PW01S-PW013101-UPC();

  set SQLCA empty;

  set OP3REC empty;

  OP3REC.OP1PARTN = PW01W01.OP1PARTN;
  OP3REC.OP1CUOID = PW01W06.OP1CUOID[PW01W-W06-IDX];
  OP3REC.OP1NORID = PW01W06.OP1NORID[PW01W-W06-IDX];
  OP3REC.OP2LNINB = PW01W06.OP2LNINB[PW01W-W06-IDX];

  set OP8REC empty;

  OP8REC.OP8TASK = "S ";
  OP8REC.OP8LOCAT[1] = "PW01S-PW0131";
  OP8REC.OP8LOCAT[2] = "         ";
  OP8REC.OP8LOCAT[3] = "        ";
  OP8REC.OP8LOCAT[4] = "01      ";
  OPBREC.OPBSZRC = +911; /* inform DB1000 not to abend*/

  XX0XW03.XWHCD = PW01W01.XWHCD;

   /* !!!!!! DLVRUSA CHANGES Starts !!!!!!!!*/

  XSPKS-SELCT-ITM-SZ(); /* SELECT OTP ITEM-SIZE FOR SAP WHSES*/
                                  /* Others will call DB1000*/
  if (PW01W01.XWHCD == "04" || 
  PW01W01.XWHCD == "07" || 
  PW01W01.XWHCD == "09" || 
  PW01W01.XWHCD == "42" || 
  PW01W01.XWHCD == "51")
    if (sysVar.errorCode == "00000000") /* Check for good Return*/
      OPBREC.OPBSZRC = SQLCA.VAGen_SQLCODE;
    end
  end
    /* !!!!!! DLVRUSA CHANGES Ends   !!!!!!!!*/

  if (OPBREC.OPBSZRC == 0) /* check for good return*/
    PW01W00.PW01W-WAZ-IDX = VAZCSZ01.SY-SZ-ID;
    if (OP3REC.OP3SZAFL[PW01W-WAZ-IDX] == "Y")
      VAZCSZ01.SY-PRC-PER-UNIT = OP3REC.SY5PRCUN[PW01W-WAZ-IDX];
    else
      PW01W00.PW01W-WAZ-IDX = 1;
      while (VAZCSZ01.SY-PRC-PER-UNIT == 0
       && PW01W00.PW01W-WAZ-IDX <= 40)
        if (OP3REC.OP3SZAFL[PW01W-WAZ-IDX] == "Y")
          VAZCSZ01.SY-PRC-PER-UNIT = OP3REC.SY5PRCUN[PW01W-WAZ-IDX];
        else
          PW01W00.PW01W-WAZ-IDX = PW01W00.PW01W-WAZ-IDX + 1;
        end
      end
    end
  end

   /* --- set change date and change time---*/
  VAZCSZ01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZCSZ01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

   /* --- get ASN size row ---*/
  PW01S-VAZCSZ01-S(); /* 's' dship.vazcsz01*/

   /* DLVRUSA changes Start*/

  if (SQLCA.VAGen_SQLCODE == 0)

    VAZCSZ01.PK-ALOC-PICK-QTY = VAZCSZ01.PK-ALOC-PICK-QTY + PW01W06.PW01W-ADJ-QTY[PW01W-W09-IDX];
    /* DLVRUSA changes End*/

    /* --- update ASN size row ---*/
    PW01S-VAZCSZ01-U(); /* 'u' dship.vazcsz01*/

  else
    /* --- add ASN size row ---*/
    /* --- format setup date setup time ---*/
    VAZCSZ01.ZZ-SDT = XX0XW01.XX0XWDAT;
    VAZCSZ01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM;

    PW01S-POP-VAZCSZ02(); /* populate the new view*/
  /*  PW01S-VAZCSZ01-A();            /* 'a' dship.vazcsz01*/
    PW01S-VAZCSZ02-A(); /* 'a' dship.vazcsz01*/
  end

end // end PW01S-PW013101

// Get UPC code for ASN Size row
Function PW01S-PW013101-UPC()
   /* ------------------------------------------------------*/
   /* Get UPC code for ASN Size row.*/
   /* (dship.vazcsz01)*/
   /* ------------------------------------------------------*/

  set SYUREC empty; /* initialise record*/

  SYUREC.SY1STNBR = PW01M001.SY1STNBR;
  SYUREC.SY2CLRID = PW01M001.SY2CLRID;
  SYUREC.XGPCD = PW01M001.XGPCD;
  SYUREC.XDMCD = PW01M001.XDMCD;
  SYUREC.XQACD = "01";
  SYUREC.SYUPCFCD = "D"; /* display option*/
  SYUREC.SYUPCDFN = "K"; /* search by key*/

  call "SY1280" (SYUREC) {isNoRefresh = yes, isExternal = yes};
  if (SYUREC.SYUPCRCD == 0) /* UPC data found*/

    PW01W00.PW01W-WAZ-IDX = VAZCSZ01.SY-SZ-ID;
    VAZCSZ01.SY-UPC-SYS-NBR = SYUREC.SYUPCSNB[PW01W-WAZ-IDX];
    VAZCSZ01.SY-UPC-MFG-ID-NBR = SYUREC.SYUPCMID[PW01W-WAZ-IDX];
    VAZCSZ01.SY-UPC-ITM-NBR = SYUREC.SYUPCIMN[PW01W-WAZ-IDX];
    VAZCSZ01.SY-UPC-CK-DGIT = SYUREC.SYUPCCKD[PW01W-WAZ-IDX];
  end

end // end PW01S-PW013101-UPC

// DELETE Pack List Sz and ASN Sz
Function PW01S-PW013102()
   /* --------------------------------------------------------*/
   /* DELETE function processing for packing list size and ASN*/
   /* size tables (dpick.vsplsz01 and dship.vazcsz01)*/
   /* --------------------------------------------------------*/

  set VSPLSZ02 empty; /* initialise database rows*/
  set VAZCSZ01 empty;

   /* --- move PW01W06 values to vsplsz01 and vazcsz01 ---*/
  PW01S-MV-PW01W06();

  PW01S-VSPLSZ01-S(); /* check if vsplsz01 row exists*/

  if (SQLCA.VAGen_SQLCODE == 0) /* vsplsz01 row already exists*/

    VSPLSZ02.PK1QTY = VSPLSZ02.PK1QTY - PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX];

    /* --- update the packing list size row ---*/

    VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW01S-VSPLSZ01-U(); /* 'u ' dpick.vsplsz01*/

  end

   /* --- move w/s values to ASN Item size record ---*/
  VAZCSZ01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCSZ01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCSZ01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCSZ01.PK-CRTN-SEQ-NBR = PW01M001.PW01MCTN;

   /* --- get ASN size row ---*/
  PW01S-VAZCSZ01-S(); /* 's' dship.vazcsz01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    VAZCSZ01.PK-ALOC-PICK-QTY = VAZCSZ01.PK-ALOC-PICK-QTY - PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX];

    if (VAZCSZ01.PK-ALOC-PICK-QTY <= 0)

      /* --- all qty for this size has been deleted ---*/
      PW01S-VAZCSZ01-D(); /* delete ASN size row*/
    else

      /* --- update the ASN size row ---*/

      VAZCSZ01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      VAZCSZ01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

      PW01S-VAZCSZ01-U(); /* 'u' dship.vazcsz01*/
    end
  end

end // end PW01S-PW013102

// UPDATE Pack List Sz and ASN Sz
Function PW01S-PW013103()
   /* --------------------------------------------------------*/
   /* UPDATE function processing for packing list size table.*/
   /* (dpick.vsplsz01)*/
   /* --------------------------------------------------------*/

  set VSPLSZ02 empty; /* initialise database rows*/
  set VAZCSZ01 empty;

   /* --- move PW01W06 values to vsplsz01 and vazcsz01 ---*/
  PW01S-MV-PW01W06();

  PW01S-VSPLSZ01-S(); /* check if vsplsz01 row exists*/

  if (SQLCA.VAGen_SQLCODE == 0) /* vsplsz01 row already exists*/

    /* --- update the packing list size row ---*/

    VSPLSZ02.PK1QTY = PW01W06.PK1QTY[PW01W-W06-IDX]; /* qty*/
    VSPLSZ02.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VSPLSZ02.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW01S-VSPLSZ01-U(); /* 'u ' dpick.vsplsz01*/

  end

   /* --- move w/s values to packing list size record*/
  VAZCSZ01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCSZ01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCSZ01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCSZ01.PK-CRTN-SEQ-NBR = PW01M001.PW01MCTN;

   /* --- get ASN size row ---*/
  PW01S-VAZCSZ01-S(); /* 's' dship.vazcsz01*/

  if (SQLCA.VAGen_SQLCODE == 0)

    /* --- save UPC code values ---*/
    PW01W00.SY-UPC-SYS-NBR[PW01W-W06-IDX] = VAZCSZ01.SY-UPC-SYS-NBR;
    PW01W00.SY-UPC-MFG-ID-NBR[PW01W-W06-IDX] = VAZCSZ01.SY-UPC-MFG-ID-NBR;
    PW01W00.SY-UPC-ITM-NBR[PW01W-W06-IDX] = VAZCSZ01.SY-UPC-ITM-NBR;
    PW01W00.SY-UPC-CK-DGIT[PW01W-W06-IDX] = VAZCSZ01.SY-UPC-CK-DGIT;

    VAZCSZ01.PK-ALOC-PICK-QTY = PW01W06.PK1QTY[PW01W-W06-IDX];

    VAZCSZ01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VAZCSZ01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

    /* --- update ASN size row ---*/
    PW01S-VAZCSZ01-U(); /* 'u' ship.vazcsz01*/

  end

end // end PW01S-PW013103

// Update Packing List Hdr rows
Function PW01S-PW01320()
   /* ------------------------------------------------------------*/
   /* Process the packing list header table updates.*/
   /* (dpick.vsplhd01)*/
   /* ------------------------------------------------------------*/

  while (PW01W00.PW01W-W07-IDX > 0)

    if (PW01W07.PW01W-IO-FUNCTION[PW01W-W07-IDX] == "U")
      /* perform UPDATE processing*/

      set PWOREC empty; /* initialise database row*/

      /* --- move pw01w07 values to vsplhd01 ---*/
      PW01S-MV-PW01W07();

      /* --- check that header exists ---*/
      PW01S-VSPLHD01-S(); /* 's ' dpick.vsplhd01*/

      /* --- format updated fields ---*/
      PW01S-MV-PW01W07();

      /* --- Update the Packing List Hdr row ---*/
      PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      PW01S-VSPLHD01-U(); /* 'u ' dpick.vsplhd01*/

      PW01W00.PW01W-W07-IDX = PW01W00.PW01W-W07-IDX - 1;
    end
  end

end // end PW01S-PW01320

// Update packing list item row
Function PW01S-PW01330()
   /* -------------------------------------------------------*/
   /* Process Packing List Item table updates.*/
   /* (dpick.vsplit01)*/
   /* -------------------------------------------------------*/

  while (PW01W00.PW01W-W05-IDX > 0)

    if (PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] == "D")

      PW01S-PW013301(); /* DELETE function processing*/

    else
      if (PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] == "U")

        PW01S-PW013302(); /* UPDATE function processing*/

      else
        if (PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] == "A")

          PW01S-PW013303(); /* ADD function processing*/

        else

          converseLib.validationFailed(29);
          PW01W00.XXXLOCID = "PW01W05";
          PW01S-TBL-ROLLBACK();
          exit stack;
        end
      end
    end

    PW01W00.PW01W-W05-IDX = PW01W00.PW01W-W05-IDX - 1;
  end

end // end PW01S-PW01330

// DELETE processing for vsplit01
Function PW01S-PW013301()
   /* -------------------------------------------------------*/
   /* DELETE Processing for ASN Item Table.*/
   /* -------------------------------------------------------*/

  set PWPREC empty; /* initialise database record*/

   /* --- move PW01W05 values to vsplit01 ---*/
  PW01S-MV-PW01W05();

   /* Start Changes Kalyani*/
   /* --- move w/s values to ASN Item size record ---*/
  VAZCIT01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCIT01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCIT01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCIT01.PK-CRTN-SEQ-NBR = PW01M001.PW01MCTN;

   /* End Changes Kalyani*/

   /* --- get the packing list item row ---*/
  PW01S-VAZCIT01-S(); /* 's ' dship.vazcit01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ASN Item record found*/

    /* DLVRUSA START*/

    set VAZCSZ01 empty;

     /* DLVRUSA changes Start*/

    /* --- move PW01W05 values to vazcsz01 ---*/
    PW01S-MV-PW01W053();

    /* Scan the AZ carton size row to check for any size existing*/
        /* for that line item before deleting the record in Carton Item*/
    PW01S-VAZCSZ01-S1(); /* 's1 ' dship.vazcsz01*/

    /* --- Fetch the AZ carton size row ---*/
    PW01S-VAZCSZ01-N1(); /* 'n1 ' dship.vazcsz01*/

    if (SQLCA.VAGen_SQLCODE == 100) /* ASN Size record not found*/

      /* --- delete the az carton item row ---*/
      PW01S-VAZCIT01-D(); /* 'd ' dship.vazcit01*/

    end

      /* --- Close the AZ carton size row ---*/
    PW01S-VAZCSZ01-C1(); /* 'c ' dship.vazcsz01*/

     /* DLVRUSA changes End*/
  end

end // end PW01S-PW013301

// UPDATE processing for vsplit01
Function PW01S-PW013302()
   /* -------------------------------------------------------*/
   /* Update processing for the Packing List Item table.*/
   /* (dpick.vsplit01)*/
   /* -------------------------------------------------------*/

  set PWPREC empty; /* initialise database record*/
   /* --- move PW01W05 values to vsplit01 and vazcit01 ---*/
  PW01S-MV-PW01W05();

   /* --- get the packing list item row ---*/
  PW01S-VSPLIT01-S(); /* 's ' dpick.vsplit01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* packing list item found*/
    /* --- re-format the vsplit01 and vazcit01 rows ---*/
    PW01S-MV-PW01W05();

    /* --- update the packing list item row ---*/
    PWPREC.XXXUSRID = COMMAREA.CAUSERID;
    PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW01S-VSPLIT01-U(); /* 'u ' dpick.vsplit01*/
  end

end // end PW01S-PW013302

// ADD process for split & azcit
Function PW01S-PW013303()
   /* -------------------------------------------------------*/
   /* ADD processing for the Packing List Item and ASN Item*/
   /* Tables.*/
   /* (dpick.vsplit01 and dship.vazcit01)*/
   /* -------------------------------------------------------*/

  set PWPREC empty; /* initialise database record*/

   /* --- move PW01W05 values to vsplit01 and vazcit01 ---*/
  PW01S-MV-PW01W05();

  PWPREC.PWPPKGRP = 000;

   /* --- check if packing list item already exists ---*/
  PW01S-VSPLIT01-S();

  if (SQLCA.VAGen_SQLCODE == 0)

    PW01S-MV-PW01W05();

    /* --- update the packing list item row ---*/
    PWPREC.XXXUSRID = COMMAREA.CAUSERID;
    PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW01S-VSPLIT01-U(); /* 'u ' dpick.vsplit01*/

  else

    PWPREC.PK-NEW-CRTN-FL = "M";
    PWPREC.XXXUSRID = COMMAREA.CAUSERID;
    PWPREC.ZZZSDT = PWOREC.ZZZSDT;
    PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW01S-VSPLIT01-A();
  end

   /* --- insert ASN item record ---*/

  VAZCIT01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCIT01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCIT01.PK-PICK-SCHED-NBR = PW01W01.PK1PKSCH;
  VAZCIT01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCIT01.OP-CUST-ORD-ID = PW01M001.PW01MORD;
  VAZCIT01.PK-CRTN-SEQ-NBR = PW01M001.PW01M-NEW-CRTN;

   /* --- ensure that ASN item record does not already exist ---*/
  PW01S-VAZCIT01-S();

  if (SQLCA.VAGen_SQLCODE == 100)

    /* --- insert ASN Item record ---*/
    PW01S-MV-PW01W052(); /* populate ASN item row*/

    VAZCIT01.SY-STY-NM = PW01M001.SY1SSTNM;
    VAZCIT01.SY-STY-COLR-DESC = PKNREC.SY2CLRAB;
    VAZCIT01.ZZ-SDT = XX0XW01.XX0XWDAT;
    VAZCIT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VAZCIT01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM;
    VAZCIT01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    VAZCIT01.ZZ-CHNG-CNT = 0;

    PW01S-POP-VAZCIT02(); /* populate new view*/
  /*  PW01S-VAZCIT01-A();              /* 'a ' dship.vazcit01*/
    PW01S-VAZCIT02-A(); /* 'a ' dship.vazcit02*/
  end

end // end PW01S-PW013303

// Move w/s data to azitm & azctn
Function PW01S-PW01335()
   /* -------------------------------------------------------*/
   /* Move working storage values to the ASN Item and ASN*/
   /* Carton table records.*/
   /* (dship.vazcit01 and dship.vazctn01)*/
   /* -------------------------------------------------------*/

  VAZCIT01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCIT01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCIT01.PK-PICK-SCHED-NBR = PW01W01.PK1PKSCH;
  VAZCIT01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCIT01.OP-CUST-ORD-ID = PW01M001.PW01MORD;
  VAZCIT01.PK-CRTN-SEQ-NBR = PW01M001.PW01M-NEW-CRTN;
  VAZCIT01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VAZCIT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZCIT01.ZZ-CHNG-CNT = 0;

  VAZCTN01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCTN01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCTN01.PK-PICK-SCHED-NBR = PW01W01.PK1PKSCH;
  VAZCTN01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCTN01.OP-CUST-ORD-ID = PW01M001.PW01MORD;
  VAZCTN01.OP-NIKE-ORD-ID = PW01W01.OP1NORID;
  VAZCTN01.TS-NIKE-PL-NBR = PW01W01.TSIPLNBR;
  VAZCTN01.PK-CRTN-SEQ-NBR = PW01M001.PW01M-NEW-CRTN;
  VAZCTN01.PK-RUN-NBR = PWOREC.PK-RUN-NBR;

  VAZCTN01.PK-UCC-128-CD = "                ";
  VAZCTN01.ZZ-SDT = XX0XW01.XX0XWDAT;
  VAZCTN01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZCTN01.ZZ-CHNG-CNT = 0;

  VAZCTN01.PK-MOVERS-STAT-CD = "01";

end // end PW01S-PW01335

// Process 1of1 Flag for vsplit01
Function PW01S-PW01340-1OF1()
   /* -----------------------------------------------------------*/
   /* Set all cartons/totes for the packing list item to*/
   /* NOT 1of1 since the add/split has caused an increase in*/
   /* the number of cartons.*/
   /* -----------------------------------------------------------*/

   /* --- Get the max pk comb cnsld cd ---*/
  PW01S-GET-MAX-COMB();

   /* --- build packing list item csr for whse and pl# ---*/
  PW01S-VSPLIT01-S5(); /* 's5' dpick.vsplit01*/

   /* --- fetch first packing list item row ---*/
  PW01S-VSPLIT01-N5(); /* 'n5' dpick.vsplit01*/

  while (SQLCA.VAGen_SQLCODE == 0)

    PWPREC.PWP1OF1F = "N";

    PW01S-SET-COMB-CD();

    if (PW01W00.PK-COMB-CNSLD-CD > PW01W00.PW01W-HIGH-COMB-CD)
      PW01W00.PW01W-HIGH-COMB-CD = PW01W00.PK-COMB-CNSLD-CD;
    end

    PWPREC.PK-COMB-CNSLD-CD = PW01W00.PK-COMB-CNSLD-CD;

    /* --- update the packing list item row ---*/
    PWPREC.XXXUSRID = COMMAREA.CAUSERID;
    PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW01S-VSPLIT01-U(); /* 'u'  dpick.vsplit01*/

    /* --- fetch next packing list item row ---*/
    PW01S-VSPLIT01-N5(); /* 'n5' dpick.vsplit01*/
  end

   /* --- close the packing list item csr ---*/
  PW01S-VSPLIT01-C5(); /* 'c5' dpick.vsplit01*/

end // end PW01S-PW01340-1OF1

// Update splhd max-comb-cnsld-cd
Function PW01S-PW01350()
   /* -----------------------------------------------------------*/
   /* Update the new max comb cnsld cd on the Packing list*/
   /* Header table.*/
   /* (dpick.vsplhd01)*/
   /* -----------------------------------------------------------*/

  PWOREC.XWHCD = PW01W01.XWHCD;
  PWOREC.TSIPLNBR = PW01W01.TSIPLNBR;
  PWOREC.OP1PARTN = PW01W01.OP1PARTN;
  PWOREC.OP1CUOID = PW01W01.OP1CUOID;
  PWOREC.OP1NORID = PW01W01.OP1NORID;

   /* --- get the packing list hdr row ---*/
  PW01S-VSPLHD01-S(); /* 's ' dpick.vsplhd01*/

  PWOREC.PK-COMB-CNSLD-CD = PW01W00.PW01W-HIGH-COMB-CD;

   /* --- update the packing list hdr row ---*/
  PWOREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWOREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW01S-VSPLHD01-U(); /* 'u ' dpick.vsplhd01*/

end // end PW01S-PW01350

// Process vsplit01 expected wght
Function PW01S-PW01360-WGT()
   /* -------------------------------------------------------------*/
   /* Update the Packing list item expected weight.*/
   /* -------------------------------------------------------------*/

   /* --- Add in the box weight ---*/
  if (PW01M001.YNTCD in YNTTBL.YNTCD)
    PW01W00.YNTCRWT = YNTTBL.YNTCRWT[sysVar.arrayIndex];
  end

  PW01W00.PW01W-NEW-CRTN-WT = PW01W00.PW01W-NEW-CRTN-WT + PW01W00.YNTCRWT;

   /* -------------------------------------------------------------*/
   /* Put the accumulated weight from all Products and sizes into*/
   /* the new carton.*/
   /* -------------------------------------------------------------*/

  if (PW01W00.PW01W-NEW-CRTN-WT == PW01W00.YNTCRWT)
    PW01W00.PW01W-NEW-CRTN-WT = 0;
  end

  if (PW01W00.PW01W-NEW-CRTN-WT > 0)

    set PWPREC empty; /* initialise database row*/

    /* --- build the packing list item csr ---*/
    PWPREC.XWHCD = PW01W01.XWHCD;
    PWPREC.PKDNCSQN = PW01W01.PW01W-NEW-CRTN;

    PW01S-VSPLIT01-S1(); /* 's1' dpick.vsplit01*/

    /* --- fetch the first packing list item row ---*/
    PW01S-VSPLIT01-N1(); /* 'n1' dpick.vsplit01*/

    while (SQLCA.VAGen_SQLCODE == 0)

      PW01S-UPDT-ADDWT();

      /* --- fetch the next packing list item row ---*/
      PW01S-VSPLIT01-N1(); /* 'n1' dpick.vsplit01*/
    end

    /* --- close the packing list item csr ---*/
    PW01S-VSPLIT01-C1(); /* 'c1' dpick.vsplit01*/
  end

   /* -------------------------------------------------------------*/
   /* Calculate the accumulated weight of all Products and sizes*/
   /* taken out of the original carton.*/
   /* -------------------------------------------------------------*/

  if (PW01W00.PW01W-ORIG-CRTN-WT > 0)

    set PWPREC empty; /* initialise database row*/

    /* --- build the packing list item csr ---*/
    PWPREC.XWHCD = PW01W01.XWHCD;
    PWPREC.PKDNCSQN = PW01W01.PW01W-NEW-CRTN;

    PW01S-VSPLIT01-S1(); /* 's1' dpick.vsplit01*/

    /* --- fetch the first packing list item row ---*/
    PW01S-VSPLIT01-N1(); /* 'n1' dpick.vsplit01*/

    while (SQLCA.VAGen_SQLCODE == 0)

      PW01S-UPDT-SPLITWT();

      /* --- fetch the next packing list item row ---*/
      PW01S-VSPLIT01-N1(); /* 'n1' dpick.vsplit01*/
    end

    /* --- close the packing list item csr ---*/
    PW01S-VSPLIT01-C1(); /* 'c1' dpick.vsplit01*/
  end

end // end PW01S-PW01360-WGT

// Update Ship Rec Tables
Function PW01S-PW01370()
   /* ------------------------------------------------------------*/
   /* Update the Ship Rec header, Ship Rec Order and Ship Rec*/
   /* Item tables.*/
   /* (dship.vsrhdr01, dship.vsrord01 and dship.vsritm01)*/
   /* ------------------------------------------------------------*/

   /* --- Update the Ship Rec Item table ---*/
  PW01S-PW013701();

   /* --- Update the Ship Rec Header table ---*/
  PW01S-PW013702();

   /* --- Update the Ship Rec Order table ---*/
  PW01S-PW013703();

end // end PW01S-PW01370

// Update Ship Rec Item Table
Function PW01S-PW013701()
   /* ------------------------------------------------------------*/
   /* Update the Ship Rec Item table.*/
   /* (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-W05-IDX = 1;

  while (PW01W00.PW01W-W05-IDX <= 100)

    if (PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] == "A")

      set SR3REC empty; /* initialise database row*/

      /* --- move pw01w05 w/s data to ship rec item row ---*/
      PW01S-MV-PW01W051();

      /* --- initialise shiprec item found flag ---*/
      PW01W00.PW01WSRS = "N"; /* shiprec found flag*/

      /* --- build a cursor on the ship rec item table ---*/
      PW01S-VSRITM01-SS(); /* 'ss' dship.vsritm01*/

      /* --- fetch first ship rec item row ---*/
      PW01S-VSRITM01-SN(); /* 'sn' dship.vsritm01*/

      /* --- find the ship rec item row ---*/
      PW01S-PW013701-SR1();

      /* --- close ship rec item csr ---*/
      PW01S-VSRITM01-CS(); /* 'cs' dship.vsritm01*/

      if (PW01W00.PW01WSRS == "Y")
        /* --- get ship rec item size/bin locations ---*/
        PW01S-VSRITM01-S(); /* 's ' dship.vsritm01*/

        /* --- loop through all sizes for ship rec item ---*/
        PW01S-PW013701-SR2();

        /* --- update ship rec item row ---*/
        SR3REC.XXXUSRID = COMMAREA.CAUSERID;
        SR3REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
        SR3REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        PW01S-VSRITM01-U(); /* 'u' dship.vsritm01*/
      end
    else
      if (PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] == " ")

        /* end of the internal table*/
        PW01W00.PW01W-W05-IDX = 100;
      end
    end

    PW01W00.PW01W-W05-IDX = PW01W00.PW01W-W05-IDX + 1;
  end

   /* --- initialise index ---*/
  PW01W00.PW01W-W05-IDX = 0;

end // end PW01S-PW013701

// Find Ship Rec Item on dbase
Function PW01S-PW013701-SR1()
   /* ------------------------------------------------------------*/
   /* Find the Ship Rec Item row on the database.*/
   /* (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  while (SQLCA.VAGen_SQLCODE == 0
   && PW01W00.PW01WSRS == "N")

    /* --- look for ship rec item match ---*/
    if (SR3REC.PK1PKSCH == PW01W05.PK1PKSCH[PW01W-W05-IDX]
     && SR3REC.OP1CUOID == PW01W05.OP1CUOID[PW01W-W05-IDX]
     && SR3REC.OP1NORID == PW01W05.OP1NORID[PW01W-W05-IDX]
     && SR3REC.OP2LNINB == PW01W05.OP2LNINB[PW01W-W05-IDX])

      /* --- ship rec item found ---*/
      PW01W00.PW01WSRS = "Y";
    else
      /* --- fetch next ship rec item row ---*/
      PW01S-VSRITM01-SN(); /* 'sn' dship.vsritm01*/
    end
  end

end // end PW01S-PW013701-SR1

// Get all sizes for ship rec itm
Function PW01S-PW013701-SR2()
   /* ------------------------------------------------------------*/
   /* Loop through all the ship rec sizes for the ship rec item.*/
   /* ------------------------------------------------------------*/

   /* initialise index*/
  PW01W00.PW01W-W06-IDX = 1;
  while (PW01W00.PW01W-W06-IDX <= 900 /* size of internal table*/
   && PW01W06.OP2LNINB[PW01W-W06-IDX] != 0)

    if (PW01W06.OP2LNINB[PW01W-W06-IDX] == PW01W05.OP2LNINB[PW01W-W05-IDX])

      /* --- process ship rec item sizes ---*/
      PW01S-PW013701-SZ();
    end

    PW01W00.PW01W-W06-IDX = PW01W00.PW01W-W06-IDX + 1;

  end

end // end PW01S-PW013701-SR2

// Process Ship Rec Item sizes
Function PW01S-PW013701-SZ()
   /* ------------------------------------------------------------*/
   /* Process ship rec item sizes.*/
   /* While looping through the sizes*/
   /* - look for existing detail line for ADD carton when units*/
   /* have been added for the same size. In this case add*/
   /* the adjustment qty to SR3REC.*/
   /* - look for existing detail line for ADD carton when units*/
   /* have been added for a new size. In this case move*/
   /* the adjustment qty to SR3REC.*/
   /* Note: Qty does not change when SPLITTING a carton.*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01WNEW = "N";
  PW01W00.PW01WIX2 = 1;

  while (PW01W00.PW01WIX2 <= 350
   && SR3REC.SY5SZID[PW01WIX2] != 0)

    /* --- find detail line in item table ---*/
    if (PW01W06.XARCD[PW01W-W06-IDX] == SR3REC.XARCD[PW01WIX2]
     && PW01W06.SL4ZONE[PW01W-W06-IDX] == SR3REC.SL4ZONE[PW01WIX2]
     && PW01W06.SL5LOCTN[PW01W-W06-IDX] == SR3REC.SL5LOCTN[PW01WIX2]
     && PW01W06.SY5SZID[PW01W-W06-IDX] == SR3REC.SY5SZID[PW01WIX2])

      /* --- detail line found ---*/
      PW01W00.PW01WNEW = "Y";

      if (PW01W00.PW01W-ACTION-IND == "A")

        SR3REC.SR3QTYSH[PW01WIX2] = SR3REC.SR3QTYSH[PW01WIX2] +         PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX];

        PW01W06.SR3QTYSH[PW01W-W06-IDX] = SR3REC.SR3QTYSH;

        PW01W06.SR5QTYXC[PW01W-W06-IDX] = PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX];

        PW01W06.SR3QTYAL[PW01W-W06-IDX] = 0;

        if (SR3REC.SR3QTYSH[PW01WIX2] < 0)
          PW01S-TBL-ROLLBACK();
          PW01S99(); /* abend*/
        end
      end

    end
    PW01W00.PW01WIX2 = PW01W00.PW01WIX2 + 1;
  end

   /* ------------------------------------------------------------*/
   /* If the item was not found, add the item to the end.*/
   /* ------------------------------------------------------------*/

  if (PW01W00.PW01WNEW == "N")
    /* --- new item key was not found ---*/
    SR3REC.XARCD[PW01WIX2] = PW01W06.XARCD[PW01W-W06-IDX];
    SR3REC.SL4ZONE[PW01WIX2] = PW01W06.SL4ZONE[PW01W-W06-IDX];
    SR3REC.SL5LOCTN[PW01WIX2] = PW01W06.SL5LOCTN[PW01W-W06-IDX];
    SR3REC.SY5SZID[PW01WIX2] = PW01W06.SY5SZID[PW01W-W06-IDX];

    SR3REC.SR3QTYSH[PW01WIX2] = PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX];

    PW01W06.SR3QTYSH[PW01W-W06-IDX] = PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX];

    PW01W06.SR5QTYXC[PW01W-W06-IDX] = PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX];

    PW01W06.SR3QTYAL[PW01W-W06-IDX] = 0;
  end

  if (PW01W00.PW01W-ACTION-IND == "A")

    PW01W00.PW01WADJ = PW01W06.PW01W-ADJ-QTY[PW01W-W06-IDX];

    PW01W00.PW01WTQY = PW01W00.PW01WTQY + PW01W00.PW01WADJ; /* total qty*/
    PW01W00.PW01WDOL = PW01W00.PW01WADJ * SR3REC.OP2AUPRC; /* adj dollar*/
    PW01W00.PW01WTDL = PW01W00.PW01WTDL + PW01W00.PW01WDOL; /* total dollar*/
  end

end // end PW01S-PW013701-SZ

// Update Ship Rec Hdr Table
Function PW01S-PW013702()
   /* ------------------------------------------------------------*/
   /* Update the Ship Rec header table.*/
   /* (dship.vsrhdr01)*/
   /* ------------------------------------------------------------*/

   /* --- get the ship rec header row ---*/
  set SR1REC empty; /* Clear row storage area*/

  SR1REC.XWHCD = PW01W01.XWHCD;
  SR1REC.PK1PKSCH = PW01W01.PK1PKSCH;

  PW01S-VSRHDR01-S(); /* 's' dship.vsrhdr01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* --- update ship rec header row ---*/

    SR1REC.SR1QTYSH = SR1REC.SR1QTYSH + PW01W00.PW01WTQY;
    SR1REC.SR1DLRAM = SR1REC.SR1DLRAM + PW01W00.PW01WTDL;

    SR1REC.XXXUSRID = COMMAREA.CAUSERID;
    SR1REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW01S-VSRHDR01-U(); /* 'u' dship.vsrhdr01*/
  end

end // end PW01S-PW013702

// Update Ship Rec Order Table
Function PW01S-PW013703()
   /* ------------------------------------------------------------*/
   /* Update the Ship Rec Order Table. (dship.vsrord01)*/
   /*  */
   /* Note: Update pk-nbr-of-cartons only once per carton. This*/
   /* is the number of cartons in order for the schedule.*/
   /* Update sr-tot-nbr-crtn; the number of cartons in the*/
   /* Bill of Lading.*/
   /* ------------------------------------------------------------*/

  set SR2REC empty; /* Initialise database row*/

   /* --- Build cursor on ship rec order table ---*/
  SR2REC.XWHCD = PW01W01.XWHCD;
  SR2REC.PK1BLLAD = PW01W01.PK1BLLAD;
  SR2REC.SR2BLLSU = PW01W01.SR2BLLSU;

  PW01S-VSRORD01-S3(); /* 's3' dship.vsrord01*/

   /* --- Fetch first row from ship rec order table ---*/
  PW01S-VSRORD01-N3(); /* 'f3' dship.vsrord01*/

  while (SQLCA.VAGen_SQLCODE == 0)

    if (PW01W01.PK1PKSCH == SR2REC.PK1PKSCH
     && PW01W01.OP1CUOID == SR2REC.OP1CUOID
     && PW01W01.OP1NORID == SR2REC.OP1NORID
     && SR3REC.OP1NTMAL == SR2REC.OP1NTMAL)

      if (PW01W00.PW01W-SRORD-UPD-SW == "N")

        SR2REC.SR2QTYSH = SR2REC.SR2QTYSH + PW01W00.PW01WTQY;
        SR2REC.SR2DLRAM = SR2REC.SR2DLRAM + PW01W00.PW01WTDL;

        /* --- add 1 to pk-nbr-of-cartons ---*/
        SR2REC.PK1NBCTN = SR2REC.PK1NBCTN + 1;

        PW01W00.PW01W-SRORD-UPD-SW = "Y";

        PW01W00.XOBCD = SR2REC.XOBCD;
        PW01W00.XOTCD = SR2REC.XOTCD;
        PW01W00.OP1TBREP = SR2REC.OP1TBREP;

      end
    end

    /* --- add 1 to nbr of cartons per bill of lading ---*/
    SR2REC.SR2TNBCT = SR2REC.SR2TNBCT + 1;

    /* --- Update the shiprec order row ---*/
    SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW01S-VSRORD01-U(); /* 'u' dship.vsrord01*/

    /* --- fetch next ship rec order row ---*/
    PW01S-VSRORD01-N3(); /* 'f3' dship.vsrord01*/
  end

   /* --- close ship rec order csr ---*/
  PW01S-VSRORD01-C3(); /* 'c3' dship.vsrord01*/

end // end PW01S-PW013703

// Process data for pw0yw08
Function PW01S-PW01380()
   /* -------------------------------------------------------------*/
   /* Get the data from the size and item table.*/
   /* -------------------------------------------------------------*/
  PW01W00.PW01W-W05-IDX = 1;

  while (PW01W00.PW01W-W05-IDX <= 100)
    if (PW01W05.PW01W-XCP-FL[PW01W-W05-IDX] == "Y")

      /* --- format pw01w08 values ---*/
      PW01S-MV-PW01W08();
    else

      if (PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] == " ")
        PW01W00.PW01W-W05-IDX = 100;
      end
    end

    PW01W00.PW01W-W05-IDX = PW01W00.PW01W-W05-IDX + 1;
  end

  PW01W00.PW01W-W05-IDX = 0;

   /* -------------------------------------------------------*/
   /* Loop through pw01w08 and update dship.vsrxcp01 table.*/
   /* -------------------------------------------------------*/
  while (PW01W00.PW01W-W08-IDX >= 1)

    /* --- move pw01w08 data to sr5rec database record ---*/
    PW01S-MV-PW01W082();

    /* --- insert a shiprec picking exception record ---*/
    SR5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
    SR5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* current date*/
    SR5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
    SR5REC.ZZZCHGCT = 0; /* change count*/

    PW01S-VSRXCP01-A(); /* 'a' dship.vsrxcp01*/

    PW01W00.PW01W-W08-IDX = PW01W00.PW01W-W08-IDX - 1;
  end

end // end PW01S-PW01380

// ASN Item process for Orig crtn
Function PW01S-PW016351()
   /* --------------------------------------------------------*/
   /* ASN Item Row processing.*/
   /* --------------------------------------------------------*/

  VAZCIT01.XWH-WHSE-CD = PW01W01.XWHCD;
  VAZCIT01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD;
  VAZCIT01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU;
  VAZCIT01.OP-CUST-ORD-ID = PW01M001.PW01MORD;
  VAZCIT01.OP-NIKE-ORD-ID = PW01W01.OP1NORID;

  VAZCIT01.OP-LINE-ITEM-NBR = PW01W01.OP2LNINB;
  VAZCIT01.PK-PICK-SCHED-NBR = PW01W01.PK1PKSCH;

   /* -- get ASN item row ---*/
  PW01S-VAZCIT01-S();

end // end PW01S-PW016351

// ASN Crtn process for orig crtn
Function PW01S-PW016352()
   /* ------------------------------------------------------------*/
   /* Process ASN Carton Record.*/
   /* ------------------------------------------------------------*/

  VAZCTN01.XWH-WHSE-CD = PW01W01.XWHCD; /* whse cd*/
  VAZCTN01.PK-BILL-OF-LADING = PW01M001.PK1BLLAD; /* BOL*/
  VAZCTN01.PK-BOL-SUB-NBR = PW01W01.SR2BLLSU; /* BOL sub #*/
  VAZCTN01.OP-CUST-ORD-ID = PW01M001.PW01MORD; /* cust ord*/
  VAZCTN01.OP-NIKE-ORD-ID = PW01W01.OP1NORID; /* nike ord*/
  VAZCTN01.PK-PICK-SCHED-NBR = PW01W01.PK1PKSCH; /* pk schd*/

   /* --- get ASN Carton row ---*/
  PW01S-VAZCTN01-S();

  VAZCTN01.PK-CRTN-UNIT-QTY = VAZCTN01.PK-CRTN-UNIT-QTY - PW01W02.PW01WADJ[PW01WIDX];

  VAZCTN01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
  VAZCTN01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

   /* --- update ASN Carton row ---*/
  PW01S-VAZCTN01-U();

end // end PW01S-PW016352

// Retrieve all Totes for Apparel
Function PW01S-RTV-APPAREL()
   /* -----------------------------------------------------------*/
   /* Retrieve all totes and position at requested tote.*/
   /* -----------------------------------------------------------*/

  PW01S-CLS-VSPLIT01(); /* Close 'old' cursor*/

  PWPREC.PWPTOSQN = 0; /* tote number*/
  PW01S-VSPLIT01-S1(); /* Select all totes*/
  PW01S-NXT-VSPLIT01(); /* Fetch next item*/

  if (PW01M001.PW01MTOT == 0) /* No tote entered*/
                                          /* Accept first tote found*/
  else /* Tote entered*/
    while (PWPREC.PWPTOSQN != PW01M001.PW01MTOT
     && SQLCA.VAGen_SQLCODE == 0) /* Position at entered tote*/
      PW01S-LOAD-ITEMS();
      PW01S-NXT-VSPLIT01(); /* Fetch next item*/

    end
  end

end // end PW01S-RTV-APPAREL

// 's' dprod.vsyreg01
Function PW01S-SEL-SY2000()
   /* -------------------------------------------------------------*/
   /* This statement group added for Canada - August, 1995*/
   /*  */
   /* Get the Product/Region Record*/
   /* -------------------------------------------------------------*/

  set SQLCA empty;
  set WSY2000 empty;
  WSY2000.XGP-GPC-CD = PKNREC.XGPCD;
  WSY2000.SY-STY-NBR = PKNREC.SY1STNBR;
  WSY2000.SY-COLR-CD-ID = PKNREC.SY2CLRID;
  WSY2000.XDM-DIM-CD = PKNREC.XDMCD;
  WSY2000.XDR-PROD-REG-CD = "05";
  WSY2000.WSY2000-OPTION-CODE = "S ";
  WSY2000.WSY2000-SUB-OPTION-CODE = "O";

  call "SY2000" (WSY2000) {isNoRefresh = yes, isExternal = yes};

  if (WSY2000.WSY2000-RETURN-CODE == "00")
    PKNREC.XPRCD = WSY2000.XPR-PROD-TYP-CD;
    PKNREC.XLCCD1 = WSY2000.XLC-LIFE-CYC-CD[1];
    PKNREC.XLCCD2 = WSY2000.XLC-LIFE-CYC-CD[2];
    PKNREC.XLCCD3 = WSY2000.XLC-LIFE-CYC-CD[3];
    PKNREC.XLCCD4 = WSY2000.XLC-LIFE-CYC-CD[4];
    PKNREC.SY2CEDT1 = WSY2000.SY-LIFE-CYC-EDT[1];
    PKNREC.SY2CEDT2 = WSY2000.SY-LIFE-CYC-EDT[2];
    PKNREC.SY2CEDT3 = WSY2000.SY-LIFE-CYC-EDT[3];
    PKNREC.SY2CEDT4 = WSY2000.SY-LIFE-CYC-EDT[4];
  else
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "PW01";
    TA1REC.TA1LOC = "PW01S-SEL-SY2000";
    PW01W09.PW01W-WSY2000-GPC-CD = PKNREC.XGPCD;
    PW01W09.PW01W-WSY2000-STY-NBR = PKNREC.SY1STNBR;
    PW01W09.PW01W-WSY2000-COLR-CD = PKNREC.SY2CLRID;
    PW01W09.PW01W-WSY2000-DIM-CD = PKNREC.XDMCD;
    PW01W09.PW01W-WSY2000-PROD-REG-CD = WSY2000.XDR-PROD-REG-CD;
    PW01W09.PW01W-WSY2000-RETURN-CD = WSY2000.WSY2000-RETURN-CODE;
    TAEREC.TAEDESC1 = PW01W09.PW01W-WSY2000-POST-1;
    TAEREC.TAEDESC2 = "RETURN FROM CALL TO SY2000 - BAD RETURN CODE";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "SYREG02";
    TA1REC.TA1MAP = "PW01M001";
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
  end

end // end PW01S-SEL-SY2000

// Set PK-COMB-CNSLD-CD
Function PW01S-SET-COMB-CD()
   /* -------------------------------------------------------------------*/
   /* Possible Values:*/
   /* All pre-cnsld     '24'*/
   /* All spcl/ivc      '20'*/
   /* All cnsld         '10'*/
   /* All other         '00'*/
   /*  */
   /* Format pk-comb-cnsld-cd*/
   /* 10  pk-comb-cnsld-cd*/
   /* 15   pw01w-comb-cd1    char(01)*/
   /* 15   pw01w-comb-cd2    char(01)*/
   /*  */
   /* If the record meets more than one criteria,*/
   /* take the highest value.*/
   /* -------------------------------------------------------------------*/

  PW01W00.PK-COMB-CNSLD-CD = "00";

   /* --------------------------------------------------------------------*/
   /* Format pre-cnsld fields (anything pre-cnsld will always have '24')*/
   /* --------------------------------------------------------------------*/
  if (PWPREC.PK-ZONE-CNSLD-FL == "Y")

    PW01W00.PK-COMB-CNSLD-CD = "24";
    return;
  end

   /* --------------------------------------------------------------------*/
   /* Format code for special handling and invoice with ship*/
   /* --------------------------------------------------------------------*/
  if (PWPREC.XHDCD[1] > " "
   || PWPREC.XHDCD[2] > " "
   || PWPREC.XHDCD[3] > " "
   || PWPREC.XHDCD[4] > " "
   || PWPREC.XHDCD[5] > " "
   || PWOREC.PK-IVC-REQ-FL == "Y")

    PW01W00.PK-COMB-CNSLD-CD = "20";
    return;
  end

   /* --------------------------------------------------------------------*/
   /* Format consolidation fields*/
   /* --------------------------------------------------------------------*/
  if (PWPREC.PK-CNSLD-FL == "Y")

    PW01W00.PK-COMB-CNSLD-CD = "10";
    return;
  end

end // end PW01S-SET-COMB-CD

// Internal table rollback
Function PW01S-TBL-ROLLBACK()
   /* --------------------------------------------------------*/
   /* Rollback all updates for new carton*/
   /* --------------------------------------------------------*/

  set PW01W05 empty; /* dpick.vsplit01*/
  set PW01W06 empty; /* dpick.vsplsz01*/
  set PW01W07 empty; /* dpick.vsplhd01*/
  set PW01W08 empty; /* dship.vsrxcp01*/
  set PW01W12 empty;

  PW01W00.PW01WSWR = "Y"; /* request data*/
  PW01W00.PW01WSWF = "Y"; /* format map*/

  PW01W00.PW01W-SPLHD-UPD-SW = "N";
  PW01W00.PW01W-SRORD-UPD-SW = "N";

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  exit stack; /* Exit to display map*/

end // end PW01S-TBL-ROLLBACK

// Create UCC-128 code
Function PW01S-UCC128-CODE()
  if (PW01M001.XWHCD == "02")
    PW01W00.PW01W-MANUF-ID = "0000013816";
  else
    if (PW01M001.XWHCD == "04")
      PW01W00.PW01W-MANUF-ID = "0000091202";
    else
      if (PW01M001.XWHCD == "07")
        PW01W00.PW01W-MANUF-ID = "0000091203";
      else
        if (PW01M001.XWHCD == "51")
          PW01W00.PW01W-MANUF-ID = "0000091205";
        end
      end
    end
  end

  PW01W00.PW01W-CRTN-SEQ-NBR = VAZCIT01.PK-CRTN-SEQ-NBR;
  PW01W00.PW01W-BAR-CODE-REDEF = PW01W00.PW01W-BAR-CODE;

  PW01S-CHECK-DIGIT();

  PW01W00.PW01W-CHECK-DIGIT = PW01W00.PW01W-BCF-5;

  VAZCTN01.PK-UCC-128-CD = PW01W00.PW01W-BAR-CODE;

end // end PW01S-UCC128-CODE

// Update Inner Crtn Nbr Fields
Function PW01S-UPD-IN-CRTN()
   /* -----------------------------------------------------------*/
   /* Update the Inner Carton Nbr data fields.*/
   /* -----------------------------------------------------------*/
  if (PWOREC.XPACD == "IN"
   && PWPREC.PK-OUTER-SEQ-NBR > 0)
    PW01S-GET-MAX-INNR(); /* max pk-crtn-inner-nbr*/

    PW01W05.PK-CRTN-INNER-NBR[PW01W-W05-IDX] = PW01W00.PW01W-MAX-INR-NBR + 1;

  else
    PW01S-GET-MAX-CNT(); /* 'm2' max pk-crtn-cnt-nbr*/

    PW01W05.PK-CRTN-CNT-NBR[PW01W-W05-IDX] = PW01W00.PW01W-MAX-CNT-NBR + 1;

  end

end // end PW01S-UPD-IN-CRTN

// Update Orignl Crtn on vsplit01
Function PW01S-UPD-ORG-CRTN()
   /* -----------------------------------------------------------*/
   /* Update the Original Carton.*/
   /* -----------------------------------------------------------*/
  if (PW01W00.PW01W-ZERO-SZ-SW == "Y")

    PW01S-DEL-ZERO-ITM();
  else
    PWPREC.XWHCD = PW01W01.XWHCD; /* whse code*/
    PWPREC.OP1CUOID = PW01W01.OP1CUOID; /* cust order id*/
    PWPREC.OP1NORID = PW01W01.OP1NORID; /* nike ord id*/
    PWPREC.OP1PARTN = PW01W01.OP1PARTN; /* ord part char*/
    PWPREC.OP2LNINB = PW01W01.OP2LNINB; /* line item nbr*/
    PWPREC.TSIPLNBR = PW01W01.TSIPLNBR; /* packing list #*/
    PWPREC.PKDNCSQN = PW01W01.PKDNCSQN; /* carton seq nbr*/
    PWPREC.PWPTOSQN = PW01W01.PWPTOSQN; /* tote seq nbr*/

    /* --- get the packing list item row ---*/
    PW01S-VSPLIT01-S(); /* 's ' dpick.vsplit01*/

    /* --- move values retrieved to PW01W05 ---*/
    PW01S-MV-PWPREC();

    PW01W00.PW01WPTM = PW01W00.PW01WPTM * PW01W00.PW01WTAD;
    PWPREC.PWPCPKTM = PWPREC.PWPCPKTM + PW01W00.PW01WPTM;

    PW01W05.PWPCPKTM[PW01W-W05-IDX] = PWPREC.PWPCPKTM;

    PW01W05.PK-PICK-XCEP-CD[PW01W-W05-IDX] = "03";
    PW01W05.PW01W-IO-FUNCTION[PW01W-W05-IDX] = "U";
    PW01W05.PW01W-XCP-FL[PW01W-W05-IDX] = "N";
  end

end // end PW01S-UPD-ORG-CRTN

// Update Temporary Storage
Function PW01S-UPD-TEMP()
   /* ------------------------------------------------------------*/
   /* Update temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW01W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-UPD-TEMP               ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-UPD-TEMP

// Update Add ctn expected weight
Function PW01S-UPDT-ADDWT()
   /* -------------------------------------------------------------*/
   /* Update Expected Weight*/
   /* ----------------------*/
   /*  */
   /* if cnsld     - update mstr crtn items*/
   /* if pre-cnsld - update zn mstr crtn items*/
   /* if non-cnsld - update all items for crtn*/
   /* -------------------------------------------------------------*/

  PWPREC.XXXUSRID = COMMAREA.CAUSERID;
  PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (PWPREC.PK-CNSLD-FL == "Y"
   && PWPREC.PK-MSTR-CRTN-FL == "Y")

    PWPREC.PK-EXPC-CRTN-WT = PW01W00.PW01W-NEW-CRTN-WT;

    /* --- update the packing list item row ---*/
    PW01S-VSPLIT01-U(); /* 'u ' dpick.vsplit01*/
  else
    if (PWPREC.PK-ZONE-CNSLD-FL == "Y"
     && PWPREC.PK-ZN-CNSLD-MSTRFL == "Y")

      PWPREC.PK-EXPC-CRTN-WT = PW01W00.PW01W-NEW-CRTN-WT;

      /* --- update the packing list item row ---*/
      PW01S-VSPLIT01-U(); /* 'u ' dpick.vsplit01*/
    else
      if (PWPREC.PK-ZONE-CNSLD-FL == "N"
       && PWPREC.PK-CNSLD-FL == "N")

        PWPREC.PK-EXPC-CRTN-WT = PW01W00.PW01W-NEW-CRTN-WT;

        /* --- update the packing list item row ---*/
        PW01S-VSPLIT01-U(); /* 'u ' dpick.vsplit01*/
      end
    end
  end

end // end PW01S-UPDT-ADDWT

// Update Split ctn expected wght
Function PW01S-UPDT-SPLITWT()
   /* -------------------------------------------------------------*/
   /* Update Expected Weight*/
   /* ----------------------*/
   /* The split carton weight is subtracted out of original crtn*/
   /*  */
   /* if cnsld     - update mstr crtn items*/
   /* if pre-cnsld - update zn mstr crtn items*/
   /* if non-cnsld - update all items for crtn*/
   /* -------------------------------------------------------------*/

  PWPREC.XXXUSRID = COMMAREA.CAUSERID;
  PWPREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PWPREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (PWPREC.PK-CNSLD-FL == "Y"
   && PWPREC.PK-MSTR-CRTN-FL == "Y")

    PWPREC.PK-EXPC-CRTN-WT = PWPREC.PK-EXPC-CRTN-WT - PW01W00.PW01W-ORIG-CRTN-WT;

    PW01W99.PW01W-ORIG-CRTN-WT = PWPREC.PK-EXPC-CRTN-WT;

    /* --- update the packing list item row ---*/
    PW01S-VSPLIT01-U(); /* 'u ' dpick.vsplit01*/
  else
    if (PWPREC.PK-ZONE-CNSLD-FL == "Y"
     && PWPREC.PK-ZN-CNSLD-MSTRFL == "Y")

      PWPREC.PK-EXPC-CRTN-WT = PWPREC.PK-EXPC-CRTN-WT - PW01W00.PW01W-ORIG-CRTN-WT;

      PW01W99.PW01W-ORIG-CRTN-WT = PWPREC.PK-EXPC-CRTN-WT;

      /* --- update the packing list item row ---*/
      PW01S-VSPLIT01-U(); /* 'u ' dpick.vsplit01*/
    else
      if (PWPREC.PK-ZONE-CNSLD-FL == "N"
       && PWPREC.PK-CNSLD-FL == "N")

        PWPREC.PK-EXPC-CRTN-WT = PWPREC.PK-EXPC-CRTN-WT - PW01W00.PW01W-ORIG-CRTN-WT;

        PW01W99.PW01W-ORIG-CRTN-WT = PWPREC.PK-EXPC-CRTN-WT;

        /* --- update the packing list item row ---*/
        PW01S-VSPLIT01-U(); /* 'u ' dpick.vsplit01*/
      end
    end
  end

end // end PW01S-UPDT-SPLITWT

// 'd' dship.vazcit01
Function PW01S-VAZCIT01-D()
   /* ------------------------------------------------------------*/
   /* Delete ASN Item row. (dship.vazcit01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCIT01" ("D ", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCIT01-A        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/
  /* ADD KEY MOVE HERE*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCIT01-D

// 's ' dship.vazcit01
Function PW01S-VAZCIT01-S()
   /* ------------------------------------------------------------*/
   /* Get the ASN Item row. (dship.vazcit01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCIT01" ("S ", SQLCA, VAZCIT01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100))  /* not found*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCIT01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCIT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCIT01-S

// 'a' dship.vazcit01
Function PW01S-VAZCIT02-A()
   /* ------------------------------------------------------------*/
   /* Add ASN item row. (dship.vazcit02)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCIT02" ("A ", SQLCA, VAZCIT02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    /**/
    return;
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCIT02-A        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCIT02"; /* Table view name*/
  /* ADD KEY MOVE HERE*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCIT02-A

// 'c1' dship.vazcsz01
Function PW01S-VAZCSZ01-C1()
   /* ------------------------------------------------------------*/
   /* Close cursor on dship.vazcsz01.*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZCSZ01" ("C1", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCSZ01-C1       "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY;

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCSZ01-C1

// 'd' dship.vazcsz01
Function PW01S-VAZCSZ01-D()
   /* ------------------------------------------------------------*/
   /* Delete the ASN size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ01" ("D ", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCSZ01-D        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCSZ01-D

// 'N1' dship.vazcsz01
Function PW01S-VAZCSZ01-N1()
   /* ------------------------------------------------------------*/
   /* Select ASN size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ01" ("N1", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == +100))  /* Not found*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCSZ01-N1   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCSZ01-N1

// 's' dship.vazcsz01
Function PW01S-VAZCSZ01-S()
   /* ------------------------------------------------------------*/
   /* Get unique ASN item size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ01" ("S ", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == +100))  /* Not found*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCSZ01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCSZ01-S

// 'S1' dship.vazcsz01
Function PW01S-VAZCSZ01-S1()
   /* ------------------------------------------------------------*/
   /* Select ASN size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ01" ("S1", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == +100))  /* Not found*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCSZ01-S1   "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZCSZ01.VAZCSZ01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCSZ01-S1

// 'u' dship.vazcsz01
Function PW01S-VAZCSZ01-U()
   /* ------------------------------------------------------------*/
   /* Update the ASN size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ01" ("U ", SQLCA, VAZCSZ01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW01S-VAZCSZ01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCSZ01-U

// Add dship.vazcsz01
Function PW01S-VAZCSZ02-A()
   /* ------------------------------------------------------------*/
   /* Add ASN size row. (dship.vazcsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCSZ02" ("A ", SQLCA, VAZCSZ02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCSZ02-A        "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCSZ02"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCSZ02-A

// 'a' dship.vazctn01
Function PW01S-VAZCTN01-A()
   /* ----------------------------------------------------------*/
   /* Add ASN Carton row. (dship.vazctn01)*/
   /* ----------------------------------------------------------*/

  try
    call "VAZCTN01" ("A ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCTN01-A  "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  /* MOVE VAZCTN01.VAZCTN01-KEY1 TO TA1REC.TA1TBLKE; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end PW01S-VAZCTN01-A

// 's ' dship.vazctn01
Function PW01S-VAZCTN01-S()
   /* ------------------------------------------------------------*/
   /* Get unique ASN carton row. (dship.vazctn01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCTN01" ("S ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end
                                                  /* verify BOL*/
  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCTN01-S  "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/
  /* MOVE VAZCTN01.VAZCTN01-KEY1 TO TA1REC.TA1TBLKE;  /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end PW01S-VAZCTN01-S

// Sum crtn unit qty (vazctn01)
Function PW01S-VAZCTN01-SUM()
   /* -------------------------------------------------------------*/
   /* Calculate sum of ASN carton row quantities. (dship.vazctn01)*/
   /* -------------------------------------------------------------*/

  AZFREC.AZFTASK = "SA";

  try
    call "VAZCTN01" (AZFREC, SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end /**/

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VAZCTN01-SUM"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/

end // end PW01S-VAZCTN01-SUM

// 'u' dship.vazctn01
Function PW01S-VAZCTN01-U()
   /* ------------------------------------------------------------*/
   /* Update the ASN Carton row. (dship.vazctn01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZCTN01" ("U ", SQLCA, VAZCTN01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(134); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW01S-VAZCTN01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZCTN01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZCTN01-U

// 's' dship.vazhdr01
Function PW01S-VAZHDR01-S()
   /* ------------------------------------------------------------*/
   /* Select the unique ASN header row. (dship.vazhdr01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZHDR01" ("S ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW01S-VAZHDR01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZHDR01.VAZHDR01-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZHDR01-S

// 'u' dship.vazhdr01
Function PW01S-VAZHDR01-U()
   /* ------------------------------------------------------------*/
   /* Update the ASN Header record. (dship.vazhdr01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZHDR01" ("U ", SQLCA, VAZHDR01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW01S-VAZHDR01-U    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZHDR01-U

// Select 'S' - Dship.vazhdr01
Function PW01S-VAZHDR02-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from DSHIP.VAZHDR02*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "VAZHDR02" ("S ", SQLCA, VAZHDR02) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                 
    if (SQLCA.VAGen_SQLCODE == 0)
      /**/
      return;
      /**/
    end
    /**/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    /**/
    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    /**/
  else
    /**/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    /**/
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    /**/
    converseLib.clearScreen();
     /* Clear screen before display*/
    /**/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW01S-VAZHDR02-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZHDR02"; /* Table view name*/
   /* Table key*/
  TA1REC.TA1TBLKE = VAZHDR02.VAZHDR02-KEY;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZHDR02-S

// 's' dship.vazord01
Function PW01S-VAZORD01-S()
   /* ------------------------------------------------------------*/
   /* Select ASN order rows. (dship.vazord01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZORD01" ("S ", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)     

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another appl*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "PW01S-VAZORD01-S    "; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZORD01-S

// 'u' dship.vazord01
Function PW01S-VAZORD01-U()
   /* ------------------------------------------------------------*/
   /* Update the ASN Order row. (dship.vazord01)*/
   /* ------------------------------------------------------------*/

  try
    call "VAZORD01" ("U ", SQLCA, VAZORD01) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1LOC = "UPDATE ON VSPLHD01"; /* Description*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAZORD01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit do display map*/

end // end PW01S-VAZORD01-U

// 's' dstloc.vlocat01
Function PW01S-VLOCAT01-S()
   /* ------------------------------------------------------------*/
   /* Get Stock Locate Location. (dstloc.vlocat01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VLOCAT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VLOCAT01-S

// 's' dpick.vpkctl01
Function PW01S-VPKCTL01-S()
   /* ------------------------------------------------------------*/
   /* Get the Picking control row for the whse. (dpick.vpkctl01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;
    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VPKCTL01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VPKCTL01-S

// 'u' dpick.vpkctl01
Function PW01S-VPKCTL01-U()
   /* ------------------------------------------------------------*/
   /* Update the Picking Control Table. (dpick.vpkctl01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO1890" ("U ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-UPD-VPKCTL01     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VPKCTL01-U

// 's ' dpick.vpksty01
Function PW01S-VPKSTY01-S()
   /* ------------------------------------------------------------*/
   /* Select the picking style/colour/size row. (dpick.vpksty01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (PW01W01.XCTCD == "CANA") /* CANA Canadian country code*/
        PW01S-SEL-SY2000(); /* CANA call SY2000*/
        if (WSY2000-RETURN-CODE == "00"
         || WSY2000-RETURN-CODE == "02")
          return;
        else
          converseLib.clearScreen();
           /* Clear screen before display*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "PW01S-VPKSTY01-S  ";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
          TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
          TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

                                            /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

          exit stack; /* Exit to display map*/
        end
      end
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        return;

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VPKSTY01-S  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VPKSTY01-S

// 'c2' dpick.vsplhd01
Function PW01S-VSPLHD01-C2()
   /* ------------------------------------------------------------*/
   /* Close packing list hdr cursor. (dpick.vsplhd01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("C2", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLHD01-C2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLHD01-C2

// 'f2' dpick.vsplhd01
Function PW01S-VSPLHD01-N2()
   /* ------------------------------------------------------------*/
   /* Fetch packing list hdr row. (dpick.vsplhd01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("N2", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLHD01-N2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLHD01-N2

// 's' dpick.vsplhd01
Function PW01S-VSPLHD01-S()
   /* ------------------------------------------------------------*/
   /* Get packing list header row. (dpick.vsplhd01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("S ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLHD01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLHD01-S

// 's2' dpick.vsplhd01
Function PW01S-VSPLHD01-S2()
   /* ------------------------------------------------------------*/
   /* Build the Packing List Hdr Cursor. (dpick.vsplhd01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("S2", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Build csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLHD01-S2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLHD01-S2

// 'u' dpick.vsplhd01
Function PW01S-VSPLHD01-U()
   /* ------------------------------------------------------------*/
   /* Update the Packing List Header row. (dpick.vsplhd01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO5770" ("U ", SQLCA, PWOREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DPICK.VSPLHD01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWOREC.PWOKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLHD01-U

// 'a' dpick.vsplit01
Function PW01S-VSPLIT01-A()
   /* ------------------------------------------------------------*/
   /* Add a Packing List Item row. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "A ";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Add*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW01W00.PW01WSWR = "Y"; /* Request for data switch*/

      PW01W00.XXXLOCID = "   "; /* Module identification*/
      converseLib.validationFailed(28); /* Indicate updated by another*/

      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DPICK.VSPLIT01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-A

// 'c1' dpick.vsplit01
Function PW01S-VSPLIT01-C1()
   /* ------------------------------------------------------------*/
   /* Close the packing list item cursor built when only the*/
   /* Carton number has been entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "C1";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-C1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-C1

// 'c2' dpick.vsplit01
Function PW01S-VSPLIT01-C2()
   /* ------------------------------------------------------------*/
   /* Close the packing list item cursor built when only the*/
   /* Tote number has been entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "C2";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-C2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-C2

// 'c5' dpick.vsplit01
Function PW01S-VSPLIT01-C5()
   /* ------------------------------------------------------------*/
   /* Close the packing list item cursor.*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "C5";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  PW01W00.XXXLOCID = "   ";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-C5   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-C5

// 'c6' dpick.vsplit01
Function PW01S-VSPLIT01-C6()
   /* ------------------------------------------------------------*/
   /* Close the packing list item csr (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "C6";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  PW01W00.XXXLOCID = "   ";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-C6   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-C6

// 'c7' dpick.vsplit01
Function PW01S-VSPLIT01-C7()
   /* ------------------------------------------------------------*/
   /* Close the packing list item cursor built when the tote*/
   /* number and the carton number have been entered.*/
   /* (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "C7";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-C7   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-C7

// 'n1' dpick.vsplit01
Function PW01S-VSPLIT01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next packing list item row from the cursor built*/
   /* when only the carton nbr has been entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "N1";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-N1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-N1

// 'n2' dpick.vsplit01
Function PW01S-VSPLIT01-N2()
   /* ------------------------------------------------------------*/
   /* Fetch the next packing list item row from the cursor built*/
   /* when only the tote number has been entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "N2";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-N2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-N2

// 'n5' dpick.vsplit01
Function PW01S-VSPLIT01-N5()
   /* ------------------------------------------------------------*/
   /* Fetch packing list item row.*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "N5";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-N5   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-N5

// 'n6' dpick.vsplit01
Function PW01S-VSPLIT01-N6()
   /* ------------------------------------------------------------*/
   /* fetch the next packing list item (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "N6";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-N6   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-N6

// 'n7' dpick.vsplit01
Function PW01S-VSPLIT01-N7()
   /* ------------------------------------------------------------*/
   /* Fetch the next packing list item row from the cursor built*/
   /* when tote number and carton number have been entered.*/
   /* (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "N7";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-N7   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-N7

// 's' dpick.vsplit01
Function PW01S-VSPLIT01-S()
   /* ------------------------------------------------------------*/
   /* Get packing list item row. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "S ";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row Not Found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-S

// 's1' dpick.vsplit01
Function PW01S-VSPLIT01-S1()
   /* ------------------------------------------------------------*/
   /* The Carton number has been entered. Retrieve the packing*/
   /* list item rows for the carton number. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-SPLIT-CSR-IND = "1"; /* Identify cursor used*/

  PW01W04.PW01W-IO-TASK = "S1";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-S1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-S1

// 's2' dpick.vsplit01
Function PW01S-VSPLIT01-S2()
   /* ------------------------------------------------------------*/
   /* Tote number has been entered.*/
   /* Retrieve the packing list item rows for the tote number.*/
   /* (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-SPLIT-CSR-IND = "2"; /* Indicate cursor used*/

  set PWPREC empty; /* Clear row storage area*/

  PWPREC.XWHCD = PW01M001.XWHCD;
  PWPREC.PWPTOSQN = PW01M001.PW01MTOT;
  PWPREC.PKDNCSQN = PW01M001.PW01MCTN;
  PW01W04.PW01W-IO-TASK = "S2";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-S2   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-S2

// 's5' dpick.vsplit01
Function PW01S-VSPLIT01-S5()
   /* ------------------------------------------------------------*/
   /* Build a cursor on the packing list item table.*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "S5";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Build csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-S5   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-S5

// 's6' dpick.vsplit01
Function PW01S-VSPLIT01-S6()
   /* ------------------------------------------------------------*/
   /* Check for consolidation/zone consolidation*/
   /* ------------------------------------------------------------*/

  if (PW01W00.PW01W-CNSLD-TYPE-IND == "1") /* Consolidation*/
    PWPREC.PK-ZN-CNSLD-SEQNBR = -1;
  else /* Zone consolidation*/
    PWPREC.PWPPKGRP = -1;
  end

   /* ------------------------------------------------------------*/
   /* Get the packing list item rows. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-SPLIT-CSR-IND = "6"; /* Indicate cursor used*/

  PW01W04.PW01W-IO-TASK = "S6";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-S6   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-S6

// 's7' dpick.vsplit01
Function PW01S-VSPLIT01-S7()
   /* ------------------------------------------------------------*/
   /* Tote number and Carton number have been entered.*/
   /* Retrieve the packing list item rows for the tote/carton*/
   /* number entered. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W00.PW01W-SPLIT-CSR-IND = "7"; /* Indicate cursor used*/

  set PWPREC empty; /* Clear row storage area*/

  PWPREC.XWHCD = PW01M001.XWHCD;
  PWPREC.PWPTOSQN = PW01M001.PW01MTOT;
  PWPREC.PKDNCSQN = PW01M001.PW01MCTN;
  PW01W04.PW01W-IO-TASK = "S7";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-S7   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-S7

// 'sq' dpick.vsplit01
Function PW01S-VSPLIT01-SQ()
   /* ------------------------------------------------------------*/
   /* Get packing list item row. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "SQ";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than 1 mstr rec*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-SC   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-SQ

// 'su' dpick.vsplit01
Function PW01S-VSPLIT01-SU()
   /* ------------------------------------------------------------*/
   /* Select dpick.vsplit01 table row*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "SU";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than 1 mstr rec*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-SU   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-SU

// 'u' dpick.vsplit01
Function PW01S-VSPLIT01-U()
   /* ------------------------------------------------------------*/
   /* Update the packing list item row. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  PW01W04.PW01W-IO-TASK = "U ";

  try
    call "IO5760" (PW01W04, SQLCA, PWPREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLIT01-U       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWPREC.PWPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLIT01-U

// 'a' dpick.vsplsz01
Function PW01S-VSPLSZ01-A()
   /* ------------------------------------------------------------*/
   /* Add packing list size row. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("A ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Add*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD DPICK.VSPLSZ01  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLSZ01-A

// 'c1' dpick.vsplsz01
Function PW01S-VSPLSZ01-C1()
   /* ------------------------------------------------------------*/
   /* close packing list size cursor. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("C1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* close csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

  PW01W00.XXXLOCID = "   ";
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLSZ01-C1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLSZ01-C1

// 'n1' dpick.vsplsz01
Function PW01S-VSPLSZ01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch packing list size row. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("N1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLSZ01-N1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLSZ01-N1

// 's' dpick.vsplsz01 - old
Function PW01S-VSPLSZ01-S()
   /* ------------------------------------------------------------*/
   /* Select old packing list size row. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("S ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLSZ01-S

// 's1' dpick.vsplsz01
Function PW01S-VSPLSZ01-S1()
   /* ------------------------------------------------------------*/
   /* Get the packing sizes. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("S1", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSPLSZ01-S1   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLSZ01-S1

// 'u' dpick.vsplsz01
Function PW01S-VSPLSZ01-U()
   /* ------------------------------------------------------------*/
   /* Update the packing list item row. (dpick.vsplsz01)*/
   /* ------------------------------------------------------------*/

  try
    call "VSPLSZ02" ("U ", SQLCA, VSPLSZ02) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW01W00.PW01WSWR = "Y"; /* Request for data switch*/

      PW01W00.XXXLOCID = "S17"; /* Module identification*/
      PW01W00.PW01WMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "S17"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPD DPICK.VSPLSZ01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPLSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPLSZ02.VSPKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSPLSZ01-U

// 's' dship.vsrhdr01
Function PW01S-VSRHDR01-S()
   /* ------------------------------------------------------------*/
   /* Get the ship rec batch schedule hdr row. (dship.vsrhdr01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSRHDR01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRHDR01-S

// 'u' dship.vsrhdr01
Function PW01S-VSRHDR01-U()
   /* ------------------------------------------------------------*/
   /* Update the shiprec batch schedule hdr row. (dship.vsrhdr01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0790" ("U ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW01W00.PW01WSWR = "Y"; /* Request for data switch*/

      PW01W00.XXXLOCID = "   "; /* Module identification*/
      PW01W00.PW01WMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSRHDR01-U       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRHDR01-U

// 'cs' dship.vsritm01
Function PW01S-VSRITM01-CS()
   /* ------------------------------------------------------------*/
   /* Close shiprec item cursor. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO2520" ("CS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-CLS-VSRITM01  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRITM01-CS

// 's' dship.vsritm01
Function PW01S-VSRITM01-S()
   /* ------------------------------------------------------------*/
   /* Select ship rec item rows. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "SR1100" ("S ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "S42"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT S UNIQUE     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRITM01-S

// 'sn' dship.vsritm01
Function PW01S-VSRITM01-SN()
   /* ------------------------------------------------------------*/
   /* fetch shiprec item row. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO2520" ("SN", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRITM01-SN

// 'ss' dship.vsritm01
Function PW01S-VSRITM01-SS()
   /* ------------------------------------------------------------*/
   /* Create ship rec items cursor. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO2520" ("SS", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SS SET       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRITM01-SS

// 'u' dship.vsritm01
Function PW01S-VSRITM01-U()
   /* ------------------------------------------------------------*/
   /* Update shiprec item row. (dship.vsritm01)*/
   /* ------------------------------------------------------------*/

  try
    call "SR1100" ("U ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW01W00.PW01WSWR = "Y"; /* Request for data switch*/

      PW01W00.XXXLOCID = "   "; /* Module identification*/
      PW01W00.PW01WMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSRITM01-U       ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRITM01-U

// 'c3' dship.vsrord01
Function PW01S-VSRORD01-C3()
   /* ------------------------------------------------------------*/
   /* Close Ship Rec order cursor. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("C3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSRORD01-C3   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRORD01-C3

// 'f3' dship.vsrord01
Function PW01S-VSRORD01-N3()
   /* ------------------------------------------------------------*/
   /* Fetch Ship Rec Order row. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("N3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSRORD01-N3   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRORD01-N3

// 's' dship.vsrord01
Function PW01S-VSRORD01-S()
   /* ------------------------------------------------------------*/
   /* Get the ship rec order row. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSRORD01-S    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRORD01-S

// 's3' dship.vsrord01
Function PW01S-VSRORD01-S3()
   /* ------------------------------------------------------------*/
   /* Build cursor on Ship Rec Order Table. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("S3", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Build csr*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSRORD01-S3   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEY2; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRORD01-S3

// 'u' dship.vsrord01
Function PW01S-VSRORD01-U()
   /* ------------------------------------------------------------*/
   /* Update the Ship rec order row. (dship.vsrord01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("U ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW01W00.PW01WSWR = "Y"; /* Request for data switch*/

      PW01W00.XXXLOCID = "   "; /* Module identification*/
      PW01W00.PW01WMSG = 143; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW01S-VSRORD01-U      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRORD01-U

// 'a' dship.vsrxcp01
Function PW01S-VSRXCP01-A()
   /* ------------------------------------------------------------*/
   /* Add Shiprec Picking Exceptions row. (dship.vsrxcp01)*/
   /* ------------------------------------------------------------*/

  try
    call "IO0830" ("A ", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW01W00.XXXLOCID = "S43"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S-VSRXCP01-A

// Format no qty size on vsplit01
Function PW01S-ZERO-SZ()
   /* ------------------------------------------------------------*/
   /* Do not allow all sizes from all products to be zero'd out*/
   /* ------------------------------------------------------------*/

  if (PW01W00.PW01W-NBR-PROD-CRTN <= 0)

    PW01W00.PW01W-SPLHD-UPD-SW = "N";
    PW01W00.PW01W-SRORD-UPD-SW = "N";

    PW01W00.PW01W-NBR-DETAIL-LN = PW01W00.PW01W-NBR-DETAIL-SV;
    PW01W00.PW01W-NBR-PROD-CRTN = PW01W00.PW01W-NBR-PROD-CRTN + 1;

    PW01W00.XXXLOCID = "FMT";
    converseLib.validationFailed(456); /* Msg 'cannot zero out crtn'*/

    PW01W00.PW01WIDX = 10;

    while (PW01W00.PW01WIDX >= 1)

      if (PW01M001.PW01MARZ[PW01WIDX] > " ")
        set PW01M001.PW01M-ACTION[PW01WIDX] cursor, bold;
        set PW01M001.PW01MADJ[PW01WIDX] bold;
        PW01W02.PK1QTY[PW01WIDX] = PW01W02.PK1QTY[PW01WIDX] + PW01M001.PW01MADJ[PW01WIDX];
      end

      PW01W00.PW01WIDX = PW01W00.PW01WIDX - 1;
    end

    exit stack;
  end

end // end PW01S-ZERO-SZ

// Purge Temporary Storage
Function PW01S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW01W02 empty; /* M001 temporary storage detail*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW01W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW01W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW01W00.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S01

// Add Page to Temporary Storage
Function PW01S13()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW01W02.XXXTSLEN = PW01W00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW01W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW01W02 empty; /* m001 display storage*/

    PW01W00.PW01WIDX = 1; /* Display line index*/

    PW01W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW01W00.XXXLOCID = "S13"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S13

// Read Temporary Storage
Function PW01S14()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  PW01W02.XXXTSLEN = PW01W00.XXXTSLEN;
  TA5REC.TA5TSQIX = PW01W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW01W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW01W00.XXXLOCID = "S14"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW01W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S14

// Get the Size Scale
Function PW01S34()
   /* ------------------------------------------------------------*/
   /* Select valid sizes using dpick.vpkscl01 and dpick.vpksty01*/
   /* If end of file, end processing.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  set SYPREC empty;
  SYPREC.SYPFC = "PC"; /* product code*/
  SYPREC.SYPCMPSW = "N"; /* compressed data*/
  SYPREC.XGPCD = PW01W01.XGPCD;
  SYPREC.SY1STNBR = PW01W01.SY1STNBR;
  SYPREC.SY2CLRID = PW01W01.SY2CLRID;
  SYPREC.XDMCD = PW01W01.XDMCD;
  SYPREC.XQACD = "**";

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes}; /* select the available sizes*/

  if (SYPREC.SYPRC < 9)
    return;
  end

  if (SYPREC.SYPRC == 9) /* Resource not available*/
    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "PW01S34 "; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN SIZE SCALE FOR PRODUCTS";
  TA1REC.TA1MAP = "PW01M001"; /* Map name*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SYPREC.SYPDATA; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  PW01M001.XXXLOCID = "PW01S34"; /* Error location*/
  exit stack; /* Return to previous process*/

end // end PW01S34

// Check the packing list item
Function PW01S35()
   /* ------------------------------------------------------------*/
   /* Check the packing list item row to see if the entered keys*/
   /* match. On finding the first key that does not match and*/
   /* is not spaces, perform ezertn. (dpick.vsplit01)*/
   /* ------------------------------------------------------------*/

  if (PW01W01.PW01WTOT == PWPREC.PWPTOSQN
   || PW01W01.PW01WTOT == 0)
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WCTN == PWPREC.PKDNCSQN
   || PW01W01.PW01WCTN == 0)
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WGPC == PWPREC.XGPCD
   || PW01W01.PW01WGPC == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WSTY == PWPREC.SY1STNBR
   || PW01W01.PW01WSTY == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WCLR == PWPREC.SY2CLRID
   || PW01W01.PW01WCLR == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WQUA == PWPREC.XQACD
   || PW01W01.PW01WQUA == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WISG == PWPREC.PC2INSEG
   || PW01W01.PW01WISG == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WEDF == PWPREC.XEGCD
   || PW01W01.PW01WEDF == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WDIM == PWPREC.XDMCD
   || PW01W01.PW01WDIM == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WUOM == PWPREC.XUMCD
   || PW01W01.PW01WUOM == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WOGC == PWPREC.XOWCD
   || PW01W01.PW01WOGC == " ")
    /* next sentence*/
  else
    return;
  end

  if (PW01W01.PW01WPKG == PWPREC.XPGCD
   || PW01W01.PW01WPKG == " ")
    /* next sentence*/
  else
    return;
  end

   /* *************************************************************/
   /* packing list item is found*/
   /* *************************************************************/

  PW01W00.PW01WPLS = "Y";

end // end PW01S35

// Abend Routine
Function PW01S99()
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  converseLib.validationFailed(29); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "SHIPREC DOES NOT MATCH PICKING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "612"; /* Program number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW01S99

//*** RECORD=PW01REC ****
// /* --- Record passed between PW0Y and PW01 ---
// ***********************
Record PW01REC type basicRecord
  5 PW01-COMMON-REC PW01-COMMON-REC ; 
    10 PW01-SYS-GRP PW01-SYS-GRP ; 
      15 PW01-INIT PW01-INIT ; 
      15 PW01-SYS-FILLER PW01-SYS-FILLER ; 
    10 PW01-PW-PASS-GRP PW01-PW-PASS-GRP ; 
      15 XWH-WHSE-CD XWH-WHSE-CD ; 
      15 PK-CRTN-SEQ-NBR PK-CRTN-SEQ-NBR ; 
      15 PK-TOTE-SEQ-NBR PK-TOTE-SEQ-NBR ; 
      15 PK-CRTN-UNIT-QTY PK-CRTN-UNIT-QTY ; 
      15 PW01W-TOTE-NBR-IND PW01W-TOTE-NBR-IND ; 
      15 PW01W-PF11ACT-IND PW01W-PF11ACT-IND ; 
      15 PW01W-PW01WMSG PW01W-PW01WMSG ; 
      15 PW01W-RETURN-IND PW01W-RETURN-IND ; 
end // end PW01REC

//*** RECORD=PW01W00 ****
// ----------------------------------------
// Application PW01 Working Storage Record.
// ----------------------------------------
// 
// ***********************
Record PW01W00 type basicRecord
  3 PW01WSWF PW01WSWF ; 
  3 PW01WSWR PW01WSWR ; 
  3 PW01WNDS PW01WNDS ; 
  3 PW01WPLS PW01WPLS ; 
  3 PW01WSRS PW01WSRS ; 
  3 PW01W-IT-INDEX PW01W-IT-INDEX ; 
  3 PW01W-W05-IDX PW01W-W05-IDX ; 
  3 PW01W-W06-IDX PW01W-W06-IDX ; 
  3 PW01W-W07-IDX PW01W-W07-IDX ; 
  3 PW01W-W08-IDX PW01W-W08-IDX ; 
  3 PW01W-W09-IDX PW01W-W09-IDX ; 
  3 PW01W-SZ-INDEX PW01W-SZ-INDEX ; 
  3 PW01W-WAZ-IDX PW01W-WAZ-IDX ; 
  3 PW01W-JOB-SUB-SW PW01W-JOB-SUB-SW ; 
  3 PW01WIDX PW01WIDX ; 
  3 PW01WIX2 PW01WIX2 ; 
  3 PW01WTQY PW01WTQY ; 
  3 PW01WTAD PW01WTAD ; 
  3 PW01WTDL PW01WTDL ; 
  3 PW01WNEW PW01WNEW ; 
  3 PW01W-TAD-NEW PW01W-TAD-NEW ; 
  3 PK-COMB-CNSLD-CD PK-COMB-CNSLD-CD ; 
    4 PW01W-COMB-CD1 PW01W-COMB-CD1 ; 
    4 PW01W-COMB-CD2 PW01W-COMB-CD2 ; 
  3 PW01W-HIGH-COMB-CD PW01W-HIGH-COMB-CD ; 
  3 XXXTSPAG XXXTSPAG ; 
  3 XXXLOCID XXXLOCID ; 
  3 XXXTSLEN XXXTSLEN ; 
  3 TA5TSQIX TA5TSQIX ; 
  3 PW01WADJ PW01WADJ ; 
  3 PW01WDOL PW01WDOL ; 
  3 PW01W-ACTION-IND PW01W-ACTION-IND ; 
  3 PW01W-NBR-DETAIL-LN PW01W-NBR-DETAIL-LN ; 
  3 PW01W-NBR-DETAIL-SV PW01W-NBR-DETAIL-SV ; 
  3 PW01W-SPLIT-CSR-IND PW01W-SPLIT-CSR-IND ; 
  3 PW01W-ZERO-SZ-SW PW01W-ZERO-SZ-SW ; 
  3 PW01W-SPLHD-UPD-SW PW01W-SPLHD-UPD-SW ; 
  3 PW01W-SRORD-UPD-SW PW01W-SRORD-UPD-SW ; 
  3 PW01W-HOLD-PAGE PW01W-HOLD-PAGE ; 
  3 PW01W-UPD-TEMPSTOR PW01W-UPD-TEMPSTOR ; 
  3 PW01W-HLD-PTM PW01W-HLD-PTM ; 
  3 PW01WPTM PW01WPTM ; 
  3 PW01W-PWOREC-ZZZSDT PW01W-PWOREC-ZZZSDT ; 
  3 PW01WMSG PW01WMSG ; 
  3 PW01W-INFO-MSG PW01W-INFO-MSG ; 
  3 PW01W-ORIG-CRTN-WT PW01W-ORIG-CRTN-WT ; 
  3 YNTCRWT YNTCRWT ; 
  3 PW01W-NEW-CRTN-WT PW01W-NEW-CRTN-WT ; 
  3 PW01W-NEW-SIZE-WT PW01W-NEW-SIZE-WT ; 
  3 PW01W-ORIG-SIZE-WT PW01W-ORIG-SIZE-WT ; 
  3 PW01W-NEWCRTN-QTY PW01W-NEWCRTN-QTY [10] ; 
  3 PW01W-ORIGCRTN-QTY PW01W-ORIGCRTN-QTY [10] ; 
  3 PW01WQTY PW01WQTY ; 
  3 PW01W-MAX-INR-NBR PW01W-MAX-INR-NBR ; 
  3 PW01W-MAX-CNT-NBR PW01W-MAX-CNT-NBR ; 
  3 PW01W-MAX-CRTN-NBR PW01W-MAX-CRTN-NBR ; 
  3 PW01W-PK-COMB-CNSLD-CD PW01W-PK-COMB-CNSLD-CD ; 
  3 PW01W-NBR-PROD-CRTN PW01W-NBR-PROD-CRTN ; 
  3 PW01W-FIRST-TIME-SW PW01W-FIRST-TIME-SW ; 
  3 PW01W-CNSLD-TYPE-IND PW01W-CNSLD-TYPE-IND ; 
  3 PW01W-DONE-CALC-FL PW01W-DONE-CALC-FL ; 
  3 PW01WARZ PW01WARZ ; 
    4 XARCD XARCD ; 
    4 SL4ZONE SL4ZONE ; 
  3 XHDKEY XHDKEY ; 
    4 XHDCD XHDCD ; 
    4 XGPCD XGPCD ; 
  3 XOBCD XOBCD ; 
  3 XOTCD XOTCD ; 
  3 OP1TBREP OP1TBREP ; 
  3 PW01W-BAR-CODE PW01W-BAR-CODE ; 
    4 PW01W-MANUF-ID PW01W-MANUF-ID ; 
    4 PW01W-CRTN-SEQ-NBR PW01W-CRTN-SEQ-NBR ; 
    4 PW01W-CHECK-DIGIT PW01W-CHECK-DIGIT ; 
  3 PW01W-BAR-CODE-REDEF PW01W-BAR-CODE-REDEF ; 
    4 PW01W-B-C PW01W-B-C [20] ; 
  3 PW01W-BCF-1 PW01W-BCF-1 ; 
  3 PW01W-BCF-2 PW01W-BCF-2 ; 
  3 PW01W-BCF-3 PW01W-BCF-3 ; 
  3 PW01W-BCF-4 PW01W-BCF-4 ; 
    4 PW01W-BCF-4-FILL PW01W-BCF-4-FILL ; 
    4 PW01W-BCF-4-LAST PW01W-BCF-4-LAST ; 
  3 PW01W-BCF-5 PW01W-BCF-5 ; 
  3 XWH-WHSE-CD XWH-WHSE-CD [50] ; 
  3 PK-CRTN-SEQ-NBR PK-CRTN-SEQ-NBR [50] ; 
  3 PK-TOTE-SEQ-NBR PK-TOTE-SEQ-NBR [50] ; 
  3 XGP-GPC-CD XGP-GPC-CD [50] ; 
  3 SY-STY-NBR SY-STY-NBR [50] ; 
  3 SY-COLR-CD-ID SY-COLR-CD-ID [50] ; 
  3 XDM-DIM-CD XDM-DIM-CD [50] ; 
  3 XQA-QUAL-CD XQA-QUAL-CD [50] ; 
  3 XOW-OWN-GRP-CD XOW-OWN-GRP-CD [50] ; 
  3 PC-CU-IN-SEG-CD PC-CU-IN-SEG-CD [50] ; 
  3 XEG-ENGR-DIFF-CD XEG-ENGR-DIFF-CD [50] ; 
  3 XPG-PKG-TYP-CD XPG-PKG-TYP-CD [50] ; 
  3 XUM-UOM-CD XUM-UOM-CD [50] ; 
  3 SY-UPC-SYS-NBR SY-UPC-SYS-NBR [10] ; 
  3 SY-UPC-MFG-ID-NBR SY-UPC-MFG-ID-NBR [10] ; 
  3 SY-UPC-ITM-NBR SY-UPC-ITM-NBR [10] ; 
  3 SY-UPC-CK-DGIT SY-UPC-CK-DGIT [10] ; 
  3 PW01W-VICS-BOL-NBR num(17) ; 
    4 PW01W-VICS-CONSTANT num(1) ; 
    4 PW01W-VICS-PREFIX-NBR num(6) ; 
    4 PW01W-BOL-NBR num(10) ; 
end // end PW01W00

//*** RECORD=PW01W01 ****
// -----------------------------
// Map PW01M001 Display Storage.
// -----------------------------
// 
// ***********************
Record PW01W01 type basicRecord
  5 PW01W01G PW01W01G ; 
    10 CACHGFL CACHGFL ; 
    10 PW01WDBK PW01WDBK ; 
      15 XWHCD XWHCD ; 
      15 XWHABRV XWHABRV ; 
      15 PWPTOSQN PWPTOSQN ; 
      15 PKDNCSQN PKDNCSQN ; 
      15 TSIPLNBR TSIPLNBR ; 
      15 TSVPLNBR TSVPLNBR ; 
      15 PWP1OF1F PWP1OF1F ; 
      15 PK1PKSCH PK1PKSCH ; 
      15 SWCLNENB SWCLNENB ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 PW01WPRT PW01WPRT ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XEGCD XEGCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XOWCD XOWCD ; 
      15 TSOCRTNB TSOCRTNB ; 
      15 OP2LNINB OP2LNINB ; 
      15 OP1PARTN OP1PARTN ; 
    10 PW01WLUK PW01WLUK ; 
      15 PW01WTOT PW01WTOT ; 
      15 PW01WCTN PW01WCTN ; 
      15 PW01WGPC PW01WGPC ; 
      15 PW01WSTY PW01WSTY ; 
      15 PW01WCLR PW01WCLR ; 
      15 PW01WDIM PW01WDIM ; 
      15 PW01WQUA PW01WQUA ; 
      15 PW01WISG PW01WISG ; 
      15 PW01WEDF PW01WEDF ; 
      15 PW01WPKG PW01WPKG ; 
      15 PW01WUOM PW01WUOM ; 
      15 PW01WOGC PW01WOGC ; 
    10 PK1BLLAD PK1BLLAD ; 
    10 PW01W-NEW-CRTN PW01W-NEW-CRTN ; 
      15 PW01W-JUL-DT PW01W-JUL-DT ; 
      15 PW01W-CRTN-SEQNBR PW01W-CRTN-SEQNBR ; 
    10 PWPPKTCD PWPPKTCD ; 
    10 YNTCD YNTCD ; 
    10 YNTABRV YNTABRV ; 
    10 SR2BLLSU SR2BLLSU ; 
    10 ZZZCHGCT ZZZCHGCT ; 
    10 XCTCD XCTCD ; 
end // end PW01W01

//*** RECORD=PW01W02 ****
//  --------------------------------------
//  Map PW01M001 temporary storage detail.
//  --------------------------------------
// 
// ***********************
Record PW01W02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(414) ; 
    10 PW01WNLD PW01WNLD ; 
    10 PW01W-ACTION PW01W-ACTION [10] ; 
    10 SY5SZID SY5SZID [10] ; 
    10 SY4IDDSC SY4IDDSC [10] ; 
    10 PW01WARZ PW01WARZ [10] ; 
      15 XARCD XARCD ; 
      15 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN [10] ; 
    10 PK1QTY PK1QTY [10] ; 
    10 ALCQTY ALCQTY [10] ; 
    10 PW01WADJ PW01WADJ [10] ; 
    10 PW01WSIZ PW01WSIZ [10] ; 
    10 SR3QTYAL SR3QTYAL [10] ; 
    10 SR3QTYSH SR3QTYSH [10] ; 
    10 ZZZCHGCT ZZZCHGCT [10] ; 
    10 PW01W-NEW-LINE PW01W-NEW-LINE [10] ; 
end // end PW01W02

//*** RECORD=PW01W04 ****
// --------------------------------------------------
// Working Storage record passed when calling IO5760.
// --------------------------------------------------
// ***********************
Record PW01W04 type basicRecord
  10 PW01W-IO-TASK PW01W-IO-TASK ; 
  10 PW01W-IO-COUNT PW01W-IO-COUNT ; 
end // end PW01W04

//*** RECORD=PW01W05 ****
// ---------- PICKING SHIP PACKING LIST ITEM TABLE ------------
// 
// DB2 TABLE VIEW:      DPICK.VSPLIT01
// 
// COPYLIB MEMBER:      DCL00938
// 
// I/O MODULE:          IO5760
// 
// KEY TO DB2 TABLE:    XWHCD
//                      TS_NIKE_PL_NBR
//                      OP_ORD_PART_CHAR
//                      OP_CUST_ORD_ID
//                      OP_NIKE_ORD_ID
//                      OP_LINE_ITEM_NBR
//                      PK_TOTE_SEQ_NBR
//                      PK_CRTN_SEQ_NBR
// 
// DATE CREATED:        11/23/98
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 11/23/98   MGOEL    New record definition.
// ***********************
Record PW01W05 type basicRecord
  10 PW01W-IO-FUNCTION PW01W-IO-FUNCTION [100] ; 
  10 PW01W-XCP-FL PW01W-XCP-FL [100] ; 
  10 XWHCD XWHCD [100] ; 
  10 TSIPLNBR TSIPLNBR [100] ; 
  10 OP1PARTN OP1PARTN [100] ; 
  10 OP1CUOID OP1CUOID [100] ; 
  10 OP1NORID OP1NORID [100] ; 
  10 OP2LNINB OP2LNINB [100] ; 
  10 PKDNCSQN PKDNCSQN [100] ; 
  10 PW01W-NEW-CRTN PW01W-NEW-CRTN [100] ; 
  10 PWPTOSQN PWPTOSQN [100] ; 
  10 PK1PKSCH PK1PKSCH [100] ; 
  10 OP2CPLNB OP2CPLNB [100] ; 
  10 OSNPKGNB OSNPKGNB [100] ; 
  10 XGPCD XGPCD [100] ; 
  10 SY1STNBR SY1STNBR [100] ; 
  10 SY2CLRID SY2CLRID [100] ; 
  10 XDMCD XDMCD [100] ; 
  10 XQACD XQACD [100] ; 
  10 XOWCD XOWCD [100] ; 
  10 PC2INSEG PC2INSEG [100] ; 
  10 XEGCD XEGCD [100] ; 
  10 XPGCD XPGCD [100] ; 
  10 XUMCD XUMCD [100] ; 
  10 XBCCD XBCCD [100] ; 
  10 PW01W-XHDCD1 PW01W-XHDCD1 [100] ; 
  10 PW01W-XHDCD2 PW01W-XHDCD2 [100] ; 
  10 PW01W-XHDCD3 PW01W-XHDCD3 [100] ; 
  10 PW01W-XHDCD4 PW01W-XHDCD4 [100] ; 
  10 PW01W-XHDCD5 PW01W-XHDCD5 [100] ; 
  10 YNTCD YNTCD [100] ; 
  10 PW01W-PWRLBCD1 PW01W-PWRLBCD1 [100] ; 
  10 PW01W-PWRLBCD2 PW01W-PWRLBCD2 [100] ; 
  10 PW01W-YLACD1 PW01W-YLACD1 [100] ; 
  10 PW01W-YLACD2 PW01W-YLACD2 [100] ; 
  10 PWP1OF1F PWP1OF1F [100] ; 
  10 PWPPKTCD PWPPKTCD [100] ; 
  10 PWPNBRTO PWPNBRTO [100] ; 
  10 PWPCPKTM PWPCPKTM [100] ; 
  10 PWPTPKTM PWPTPKTM [100] ; 
  10 SWCLNENB SWCLNENB [100] ; 
  10 PKVSSPNB PKVSSPNB [100] ; 
  10 PWCTLNBR PWCTLNBR [100] ; 
  10 TSOCRTNB TSOCRTNB [100] ; 
  10 PK-CRTN-INNER-NBR PK-CRTN-INNER-NBR [100] ; 
  10 PK-INNER-CRTN-QTY PK-INNER-CRTN-QTY [100] ; 
  10 PK-CRTN-CNT-NBR PK-CRTN-CNT-NBR [100] ; 
  10 PK-OUTER-SEQ-NBR PK-OUTER-SEQ-NBR [100] ; 
  10 PK-EXPC-CRTN-WT PK-EXPC-CRTN-WT [100] ; 
  10 PK-ACTL-CRTN-WT PK-ACTL-CRTN-WT [100] ; 
  10 PK-CNSLD-FL PK-CNSLD-FL [100] ; 
  10 PK-UPS-CNSLD-CRTN PK-UPS-CNSLD-CRTN [100] ; 
  10 PK-MSTR-CRTN-FL PK-MSTR-CRTN-FL [100] ; 
  10 PWPPKGRP PWPPKGRP [100] ; 
  10 PK-ZONE-CNSLD-FL PK-ZONE-CNSLD-FL [100] ; 
  10 PK-ZN-CNSLD-MSTRFL PK-ZN-CNSLD-MSTRFL [100] ; 
  10 PK-ZN-CNSLD-SEQNBR PK-ZN-CNSLD-SEQNBR [100] ; 
  10 PK-ZONE-CNSLD-CRTN PK-ZONE-CNSLD-CRTN [100] ; 
  10 PK-COMB-CNSLD-CD PK-COMB-CNSLD-CD [100] ; 
  10 PK-CRTN-PSOV-FL PK-CRTN-PSOV-FL [100] ; 
  10 PK-OBND-QUAL-FL PK-OBND-QUAL-FL [100] ; 
  10 PK-PICK-XCEP-CD PK-PICK-XCEP-CD [100] ; 
  10 PK-NEW-CRTN-FL PK-NEW-CRTN-FL [100] ; 
  10 XXXUSRID XXXUSRID [100] ; 
  10 ZZZSDT ZZZSDT [100] ; 
  10 ZZZCHGCT ZZZCHGCT [100] ; 
end // end PW01W05

//*** RECORD=PW01W06 ****
// -------------------------------------------------
// Working storage for DPICK.VSPLSZ01 Table Changes.
// -------------------------------------------------
// ***********************
Record PW01W06 type basicRecord
  10 PW01W-IO-FUNCTION PW01W-IO-FUNCTION [900] ; 
  10 PW01W-XCP-FL PW01W-XCP-FL [900] ; 
  10 XWHCD XWHCD [900] ; 
  10 TSIPLNBR TSIPLNBR [900] ; 
  10 OP1PARTN OP1PARTN [900] ; 
  10 OP1CUOID OP1CUOID [900] ; 
  10 OP1NORID OP1NORID [900] ; 
  10 OP2LNINB OP2LNINB [900] ; 
  10 PWPTOSQN PWPTOSQN [900] ; 
  10 PKDNCSQN PKDNCSQN [900] ; 
  10 PW01W-NEW-CRTN PW01W-NEW-CRTN [900] ; 
  10 SY5SZID SY5SZID [900] ; 
  10 SY4IDDSC SY4IDDSC [900] ; 
  10 XARCD XARCD [900] ; 
  10 SL4ZONE SL4ZONE [900] ; 
  10 SL5LOCTN SL5LOCTN [900] ; 
  10 PK1QTY PK1QTY [900] ; 
  10 ZZZCHGCT ZZZCHGCT [900] ; 
  10 ZZZSDT ZZZSDT [900] ; 
  10 PW01W-ADJ-QTY PW01W-ADJ-QTY [900] ; 
  10 SR3QTYSH SR3QTYSH [900] ; 
  10 SR3QTYAL SR3QTYAL [900] ; 
  10 SR5QTYXC SR5QTYXC [900] ; 
end // end PW01W06

//*** RECORD=PW01W07 ****
// ----------------------------------------------------------
// Working Storage record for packing list hdr table updates.
// (dpick.vsplhd01)
// ----------------------------------------------------------
// ***********************
Record PW01W07 type basicRecord
  10 PW01W-IO-FUNCTION PW01W-IO-FUNCTION [100] ; 
  10 XWHCD XWHCD [100] ; 
  10 TSIPLNBR TSIPLNBR [100] ; 
  10 OP1PARTN OP1PARTN [100] ; 
  10 OP1CUOID OP1CUOID [100] ; 
  10 OP1NORID OP1NORID [100] ; 
  10 PK1NBCTN PK1NBCTN [100] ; 
  10 PWONCTNO PWONCTNO [100] ; 
  10 PK-OUTER-ORD-QTY PK-OUTER-ORD-QTY [100] ; 
  10 PK-OUTER-CRTN-QTY PK-OUTER-CRTN-QTY [100] ; 
  10 PK-COMB-CNSLD-CD PK-COMB-CNSLD-CD [100] ; 
  10 ZZZSDT ZZZSDT [100] ; 
  10 ZZZCHGCT ZZZCHGCT [100] ; 
end // end PW01W07

//*** RECORD=PW01W08 ****
// ************* ship recon pick exception audit record********
// working storage record for dship.vsrxcp01 table updates
// ************************************************************
// ***********************
Record PW01W08 type basicRecord
  10 PW01W-IO-FUNCTION PW01W-IO-FUNCTION [500] ; 
  10 XWHCD XWHCD [500] ; 
  10 PK1PKSCH PK1PKSCH [500] ; 
  10 OP1CUOID OP1CUOID [500] ; 
  10 OP1NORID OP1NORID [500] ; 
  10 OP2LNINB OP2LNINB [500] ; 
  10 XOWCD XOWCD [500] ; 
  10 XARCD XARCD [500] ; 
  10 SL4ZONE SL4ZONE [500] ; 
  10 SL5LOCTN SL5LOCTN [500] ; 
  10 SY5SZID SY5SZID [500] ; 
  10 XGPCD XGPCD [500] ; 
  10 SY1STNBR SY1STNBR [500] ; 
  10 SY2CLRID SY2CLRID [500] ; 
  10 XDMCD XDMCD [500] ; 
  10 XQACD XQACD [500] ; 
  10 XLCCD XLCCD [500] ; 
  10 PC2INSEG PC2INSEG [500] ; 
  10 XEGCD XEGCD [500] ; 
  10 XPGCD XPGCD [500] ; 
  10 XUMCD XUMCD [500] ; 
  10 XBCCD XBCCD [500] ; 
  10 OP1TBREP OP1TBREP [500] ; 
  10 XOBCD XOBCD [500] ; 
  10 XOTCD XOTCD [500] ; 
  10 SR3QTYAL SR3QTYAL [500] ; 
  10 SR3QTYSH SR3QTYSH [500] ; 
  10 SR5QTYXC SR5QTYXC [500] ; 
  10 XXXUSRID XXXUSRID [500] ; 
end // end PW01W08

//*** RECORD=PW01W09 ****
// Working Storage to format application posting information
// on a bad return from a call to SY2000.
// 
// 08/11/95  CBRINE  Initial setup.
// ***********************
Record PW01W09 type basicRecord
  10 PW01W-WSY2000-POST-1 PW01W-WSY2000-POST-1 ; 
    15 PW01W-WSY2000-GPC-CD PW01W-WSY2000-GPC-CD ; 
    15 PW01W-WSY2000-DASH-1 PW01W-WSY2000-DASH-1 ; 
    15 PW01W-WSY2000-STY-NBR PW01W-WSY2000-STY-NBR ; 
    15 PW01W-WSY2000-DASH-2 PW01W-WSY2000-DASH-2 ; 
    15 PW01W-WSY2000-COLR-CD PW01W-WSY2000-COLR-CD ; 
    15 PW01W-WSY2000-DASH-3 PW01W-WSY2000-DASH-3 ; 
    15 PW01W-WSY2000-DIM-CD PW01W-WSY2000-DIM-CD ; 
    15 PW01W-WSY2000-DASH-4 PW01W-WSY2000-DASH-4 ; 
    15 PW01W-WSY2000-PROD-REG-CD PW01W-WSY2000-PROD-REG-CD ; 
    15 PW01W-WSY2000-DASH-5 PW01W-WSY2000-DASH-5 ; 
    15 PW01W-WSY2000-RETURN-CD PW01W-WSY2000-RETURN-CD ; 
end // end PW01W09

//*** RECORD=PW01W11 ****
// JCL variable card overrides for TARJCL table
// ***********************
Record PW01W11 type basicRecord
  10 PW01WIDX2 PW01WIDX2 ; 
  10 TA3APLID TA3APLID ; 
    15 PW01W-CICS-LIT PW01W-CICS-LIT ; 
    15 PW01W-CICS-VALUE PW01W-CICS-VALUE ; 
    15 * char(1) ; 
  10 PW01W-JOB-CARD char(80) ; // JCL Job card
    15 * char(4) ; 
    15 PW01W-XWHCDJ PW01W-XWHCDJ ; 
    15 * char(74) ; 
  10 PW01W-OUTPUT-CARD char(80) ; // OUTPUT Warehouse code
    15 * char(2) ; 
    15 PW01W-OUTPUT-LIT char(6) ; 
    15 * char(15) ; 
    15 PW01W-OUTPUT-RMT char(3) ; 
    15 * char(54) ; 
  10 PW01W-SYSTSIN-CARD char(80) ; // JCL Systsin card
    15 * char(14) ; 
    15 PW01W-DSN-VALUE char(1) ; // T,D,F,Y value
    15 * char(65) ; 
  10 PW01W-TYPE-CARD char(80) ; // JCL Systsin card
    15 * char(21) ; 
    15 PW01W-TYPE-VALUE char(1) ; // T,D,F,Y value
    15 * char(58) ; 
  10 PW01W-WHSE-CARD char(80) ; // JCL Warehouse card
    15 * char(20) ; 
    15 PW01W-XWHCDW char(2) ; // warehouse code
    15 * char(58) ; 
  10 PW01W-AZ153D-PARM-CARD char(80) ; // JCL Parm Card
    15 PW01W-AZ153D-PARM-TRAN-ID char(4) ; // whse code only
    15 PW01W-AZ153D-PARM-WHSE-CD char(2) ; // whse code only
    15 PW01W-AZ153D-PARM-BILL-OF-LADING decimal(13) ; // whse code only
    15 PW01W-AZ153D-PARM-BOL-SUB-NBR smallint ; // whse code only
    15 PW01W-AZ153D-PARM-MOVERS-STAT-CD char(2) ; // whse code only
    15 * char(63) ; 
  10 PW01W-FTP-CARD char(80) ; // JCL Parm Card
    15 * char(15) ; 
    15 PW01W-FTP-LIT char(6) ; // whse code only
    15 * char(2) ; 
    15 PW01W-FTP-TARGET char(20) ; // whse code only
      20 * char(4) ; 
      20 PW01W-FTPPARMS-WHSE-CD char(2) ; // whse code only
      20 * char(14) ; 
    15 * char(37) ; 
  10 PW01W-RSH-CARD char(80) ; // JCL Parm Card
    15 * char(15) ; 
    15 PW01W-RSH-LIT char(3) ; // whse code only
    15 * char(5) ; 
    15 PW01W-RSH-TARGET char(20) ; // whse code only
      20 * char(11) ; 
      20 PW01W-RSH-CMD-WHSE-CD char(2) ; // whse code only
      20 * char(7) ; 
    15 * char(37) ; 
end // end PW01W11

//*** RECORD=PW01W12 ****
// --------------------------------------------------
// Working Storage record for the vsplit01 indicator.
// --------------------------------------------------
// ***********************
Record PW01W12 type basicRecord
  10 SAVE-SPLIT-CSR-IND char(1) ; // saved vsplit01 csr indicator
end // end PW01W12

Record PW01W99 type basicRecord
  10 PW01W-PK1770-PARM-CARD PW01W-PK1770-PARM-CARD ; 
    15 PW01W-RECD-TYPE-A PW01W-RECD-TYPE-A ; 
    15 XWHCD XWHCD ; 
    15 PW01W-NEW-CRTN PW01W-NEW-CRTN ; 
    15 PW01W-NEW-CRTN-WT PW01W-NEW-CRTN-WT ; 
    15 PW01W-ORIG-CRTN PW01W-ORIG-CRTN ; 
    15 PW01W-ORIG-CRTN-WT PW01W-ORIG-CRTN-WT ; 
    15 PW01W-TSIPLNBR PW01W-TSIPLNBR ; 
    15 PW01W-OP1CUOID PW01W-OP1CUOID ; 
    15 PW01W-OP1NORID PW01W-OP1NORID ; 
    15 PW01W-FILLER-24 PW01W-FILLER-24 ; 
end // end PW01W99

// OP/OM TO AB COMMON PASS RECORD
DataItem PW01-COMMON-REC char(3774)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP0,OM0 INIT
DataItem PW01-INIT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP/OM TO AB SPECIFIC DATA
DataItem PW01-PW-PASS-GRP char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// REMAINDER OF SYSTEM REC
DataItem PW01-SYS-FILLER char(3754)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SYSTEM REC (OPWREC OR OMWREC)
DataItem PW01-SYS-GRP char(3757)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Action code
DataItem PW01W-ACTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action indicator 'A'dd-'S'plit
DataItem PW01W-ACTION-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjusted qty for detail line
DataItem PW01W-ADJ-QTY decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-B-C num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-BAR-CODE char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-BAR-CODE-REDEF char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-BCF-1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-BCF-2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-BCF-3 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-BCF-4 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW01W-BCF-4-FILL num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW01W-BCF-4-LAST num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-BCF-5 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-CHECK-DIGIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CICS Region literal (CICSD,T)
DataItem PW01W-CICS-LIT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CICS Region Id
DataItem PW01W-CICS-VALUE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Consolidation type indicator
DataItem PW01W-CNSLD-TYPE-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first char of pk-comb-cnsld-cd
DataItem PW01W-COMB-CD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// secnd char of pk-comb-cnsld-cd
DataItem PW01W-COMB-CD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-CRTN-SEQ-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new crtn sequence number
DataItem PW01W-CRTN-SEQNBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-DONE-CALC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler length char(22)
DataItem PW01W-FILLER-24 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time thru map (A/S mode)
DataItem PW01W-FIRST-TIME-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max pk-comb-cnsld-cd (vsplit01
DataItem PW01W-HIGH-COMB-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold field for pack time
DataItem PW01W-HLD-PTM decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holding for temp storage page
DataItem PW01W-HOLD-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// information message to display
DataItem PW01W-INFO-MSG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max ts-crtn-nbr passed IO mod
DataItem PW01W-IO-COUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// IOmod function
DataItem PW01W-IO-FUNCTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function passed in IO module
DataItem PW01W-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item index (1-10)
DataItem PW01W-IT-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// determine if sz is zero'd out
DataItem PW01W-JOB-SUB-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// julian date
DataItem PW01W-JUL-DT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XUM-UOM-CD
DataItem PW01W-MANUF-ID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max pk-crtn-cnt-nbr
DataItem PW01W-MAX-CNT-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max ts-crtn-nbr
DataItem PW01W-MAX-CRTN-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max pk-crtn-inner-nbr
DataItem PW01W-MAX-INR-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of detail lines filled
DataItem PW01W-NBR-DETAIL-LN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of detail lines (save)
DataItem PW01W-NBR-DETAIL-SV num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr of products in a carton
DataItem PW01W-NBR-PROD-CRTN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New crtn (pk-nxt-crtn-seqnbr)
DataItem PW01W-NEW-CRTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// expected weight
DataItem PW01W-NEW-CRTN-WT num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW01W-NEW-LINE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// expected weight
DataItem PW01W-NEW-SIZE-WT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new crtn qty for detail line
DataItem PW01W-NEWCRTN-QTY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem PW01W-OP1CUOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem PW01W-OP1NORID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW01W-ORIG-CRTN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// expected weight
DataItem PW01W-ORIG-CRTN-WT num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// expected weight
DataItem PW01W-ORIG-SIZE-WT num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// orig crtn qty for detail line
DataItem PW01W-ORIGCRTN-QTY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// action indicator 'A'dd-'S'plit
DataItem PW01W-PF11ACT-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-PK-COMB-CNSLD-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton data
DataItem PW01W-PK1770-PARM-CARD char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save msg no
DataItem PW01W-PW01WMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// dpick.vsplhd01 setup date
DataItem PW01W-PWOREC-ZZZSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk_LABL_CD
DataItem PW01W-PWRLBCD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_LABL_CD
DataItem PW01W-PWRLBCD2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type A
DataItem PW01W-RECD-TYPE-A char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// action indicator 'A'dd-'S'plit
DataItem PW01W-RETURN-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// switch to determine if updated
DataItem PW01W-SPLHD-UPD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time thru map (A/S mode)
DataItem PW01W-SPLIT-CSR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// switch to determine if updated
DataItem PW01W-SRORD-UPD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size index (1-40)
DataItem PW01W-SZ-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total adj qty for new crtn
DataItem PW01W-TAD-NEW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// action indicator 'A'dd-'S'plit
DataItem PW01W-TOTE-NBR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_NIKE_PL_NBR
DataItem PW01W-TSIPLNBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// switch to update temp storage
DataItem PW01W-UPD-TEMPSTOR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage index
DataItem PW01W-W05-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem PW01W-W06-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem PW01W-W07-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem PW01W-W08-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem PW01W-W09-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem PW01W-WAZ-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW01W-WSY2000-COLR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-DASH-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-DASH-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-DASH-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-DASH-4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-DASH-5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-POST-1 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-PROD-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW01W-WSY2000-RETURN-CD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW01W-WSY2000-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exception flag (Y/N)
DataItem PW01W-XCP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW01W-XHDCD1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW01W-XHDCD2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW01W-XHDCD3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW01W-XHDCD4 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XHD_HNDL_CD
DataItem PW01W-XHDCD5 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD (proc symbolic)
DataItem PW01W-XWHCDJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YLA_LABL_ATCH_CD
DataItem PW01W-YLACD1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YLA_LABL_ATCH_CD
DataItem PW01W-YLACD2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// determine if sz is zero'd out
DataItem PW01W-ZERO-SZ-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pw0yw03 group level
DataItem PW01W01G char(159)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment
DataItem PW01WADJ smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// area zone combination
DataItem PW01WARZ char(4)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem PW01WCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk_nxt_crtn_seqnbr
DataItem PW01WCTN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// db keys
DataItem PW01WDBK char(89)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem PW01WDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// adjustment dollar
DataItem PW01WDOL num(4,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// xeg-engr-diff-cd
DataItem PW01WEDF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem PW01WGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem PW01WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Index for JCL Table
DataItem PW01WIDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_CU_IN_SEG_CD
DataItem PW01WISG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem PW01WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// lookup keys
DataItem PW01WLUK char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save msg no
DataItem PW01WMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// new detail switch
DataItem PW01WNDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new item found switch
DataItem PW01WNEW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of lines per page
DataItem PW01WNLD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XOW_OWN_GRP_CD
DataItem PW01WOGC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XPG_PKG_TYP_CD
DataItem PW01WPKG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW01WPLS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product total on scrn
DataItem PW01WPRT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pack time adjustment
DataItem PW01WPTM decimal(5,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work quantity field
DataItem PW01WQTY smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem PW01WQUA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new scrn SY_SZ_ID
DataItem PW01WSIZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shiprec found switch
DataItem PW01WSRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem PW01WSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW01WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW01WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total adj qty for orig crtn
DataItem PW01WTAD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total dollar adjustment
DataItem PW01WTDL num(4,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk_tote_seq_nbr
DataItem PW01WTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total quantity adjustment
DataItem PW01WTQY smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XUM_UOM_CD
DataItem PW01WUOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end