package pw0x;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0X ****
// This program shows order numbers with their DNSB, DNSA, and
// ETA dates, full case and repack quantities and selection and
// hold flags. The user must enter a date range ( to date is
// required ) and selection (screen will default to 'A'll) 'A'=
// all, 'N'= not selected to pick, 'S'= selected to pick. The
// data will then be displayed and the user may inquier on an
// order by putting an 'I' in the action field and will be
// transfered to PW0I - order inquiery, or they may put an
// order on hold by putting an 'H' in the action field and will
// be transfered to PW0H - order hold screen, or they may put
// an 's' or a 'd' to de-select or select the order. If the
// user selects an order pick priority must also be selected
// (10=sameday, 20=rush, 30=normal), the screen will default to
// normal.
// The user can transfer out of this application by using one
// of the PF keys displayed at the bottom of the map, or by
// entering fast-path information (also at the bottom of the
// map).
// 
// CONTROL#    DATE      ID             COMMENTS
// --------  --------  ------  ------------------------------
// new       03/12/91  BGOFF   New application.
// pkfix     05/06/91  bgoff   Change 'S'elect to 'A'dd
//                             Update pk4slind DPICK.VPOOLH01
// 00000     06/12/91  sjohns  fix 0 from date problem
//           10/25/91  SHENDE  Allow fastpath from PW06
//                             (Wilsonville changes).
//           03/12/92  SHENDE  Table changes for March.
//           04/20/92  SHENDE  1.Remove 'L' as valid pk_sel_ind
//                             2.Allow PW08 access
//                             3.Add xgpcd to 'S7' select for
//                               Dpick.Vpoolh01
//                             4.Move correct indext to pwjrec
//                               for inquiry to PW0I.
//           05/06/92  SHENDE  Corrected the total for the
//                             totals column.
//           07/21/92  SHENDE  Display divison code and brand
//                             code.  Allow wild card (*) div
//                             and brand.
//  pk#349   08/04/93  MWILSO  If picking display a pink screen
//                             instead of traditional blue.
//                             Update PF keys.  Chgs made in:
//                             pw0x000, 110, 112, 113, 114,
//                             115, 120, 121, 130, 140, 150,
//                             151, 152, 153, 160, 166, 261,
//                             262, 263, s10, s11, s15, s20,
//                             s21, s30, s31, s40, s41, s60,
//                             s61, s62 & s63.  Plus created
//                             new modules broken out by map1
//                             and map3 (new picking map).
//            10/13/93 kande1  renamed new procs for standards
//  Canada   10/27/95  PSTROE  Pick-up new version of XPPK003
//  Y2K      02/16/98  nfield  Y2K Compliance - changes to
//                             PW0XM001, PW0XM002, PW0XM003,
//                             PW0XM004, PW0X-15301, PW0X-15303
//                             PW0X-16001, PW0X-16003, PW0X162
//                             PW0X260
// *********************
Program PW0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK5REC PK5REC; // record
  PK6REC PK6REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0XW00 PW0XW00; // record
  PW0XW01 PW0XW01; // record
  PW0XW02 PW0XW02; // record
  PWFREC PWFREC; // record
  PWJREC PWJREC; // record
  PWKREC PWKREC; // record
  PWNREC PWNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XHRTBL {deleteAfterUse = yes}; // table
  use XBCTBL; // table
  use XDVTBL; // table
  use PW0XM.PW0XM001,  // forms
      PW0XM.PW0XM002, 
      PW0XM.PW0XM003, 
      PW0XM.PW0XM004, 
      PW0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------*/

    set PW0XW00 empty; /* Initialize working storage*/
    set PW0XW01 empty; /* Initialize map working storage*/
    set PW0XW02 empty; /* Initialize map working storage*/
    set PW0XM001 initial; /* Initialize map output area*/
    set PW0XM002 initial; /* Initialize map output area*/
    set PW0XM003 initial; /* Initialize map output area*/
    set PW0XM004 initial; /* Initialize map output area*/
    set PWJREC empty; /* Initialize pk array record*/
    set PWKREC empty; /* Initialize pk work record*/
    set PKBREC empty; /* Initialize io record*/
    set PKHREC empty; /* Initialize io record*/
    set PWFREC empty; /* Initialize io record*/
    set PK4REC empty; /* Initialize io record*/
    set TAEREC empty; /* Initialize io record*/
    set TA5REC empty; /* Initialize io record*/
    set TA9REC empty; /* Initialize io record*/
    set SQLCA empty; /* Initialize io record*/

    PW0XW00.PW0XWSWR = "N"; /* request for data*/
    PW0XW00.PW0XWSWF = "Y"; /* format the map*/
    PW0XW00.PW0XWSWD = "1"; /* map display switch*/

    PWKREC.PWKARRAY = PKWREC.PKWARRAY;
    PKWREC.PKWINDEX = 1; /* set index to 1*/
    PW0XW00.PW0XWAIX = 1; /* set ARRAY index to 1*/

    if (PKWREC.PKWSELSW == "PP") /* if pick planning run mode*/
      PW0XW00.PW0XWRUN = "P"; /* set run mode to 'p'*/
    end


    PW0XW01.PW0XMSEL = "A"; /* set selection to 'a'*/
    PW0XM001.PW0XMSEL = "A"; /* set selection to 'a'*/
    PW0XM003.PW0XMSEL = "A"; /* set selection to 'a'*/

     /* ----------------------------------------------------------------*/
     /* move 'Do Not Ship Before' date from first occurrance to*/
     /* convert for map*/
     /* ----------------------------------------------------------------*/

    PW0XW00.PW0XWFDT = PKWREC.PKWFRMDT[PKWINDEX]; /* move to num date*/
    PW0XW00.PW0XWTDT = PKWREC.PKWTODT[PKWINDEX];

    if (PW0XW00.PW0XWFCC == 19 /* from century*/
     || PW0XW00.PW0XWFCC == 20 
     || PW0XW00.PW0XWFCC == 0)

      if (PW0XW00.PW0XWTCC == 19 /* to century*/
       || PW0XW00.PW0XWTCC == 20 
       || PW0XW00.PW0XWTCC == 0)

        PW0XW00.PW0XWSWR = "Y"; /* request for data switch*/
      end
    end

    if (PW0XW00.PW0XWSWR != "Y") /* not a good date*/

      PKWREC.PKWFRMDT = 0; /* reinit*/
      PKWREC.PKWTODT = 0; /* reinit*/
      PW0XW00.PW0XWFDT = 0;
      PW0XW00.PW0XWTDT = 0;

    end

    if (PW0XW00.PW0XWTDT != 0)
      if (PW0XW00.PW0XWTYY > 50
       && PW0XW00.PW0XWTYY <= 99)

        PW0XW00.PW0XWTCC = 19;
      else

        PW0XW00.PW0XWTCC = 20;
      end
    end

    if (PW0XW00.PW0XWFDT != 0)
      if (PW0XW00.PW0XWFYY > 50
       && PW0XW00.PW0XWFYY <= 99)

        PW0XW00.PW0XWFCC = 19;
      else
        PW0XW00.PW0XWFCC = 20;
      end
    end

    PW0XW01.PW0XMFMM = PW0XW00.PW0XWFMM; /* from mm*/
    PW0XM001.PW0XMFMM = PW0XW00.PW0XWFMM;
    PW0XM003.PW0XMFMM = PW0XW00.PW0XWFMM;
    PW0XW01.PW0XMFDD = PW0XW00.PW0XWFDD; /* from dd*/
    PW0XM001.PW0XMFDD = PW0XW00.PW0XWFDD;
    PW0XM003.PW0XMFDD = PW0XW00.PW0XWFDD;
    PW0XW01.PW0XMFYY = PW0XW00.PW0XWFYY; /* from yy*/
    PW0XM001.PW0XMFYY = PW0XW00.PW0XWFYY;
    PW0XM003.PW0XMFYY = PW0XW00.PW0XWFYY;

    PW0XW01.PW0XMTMM = PW0XW00.PW0XWTMM; /* to mm*/
    PW0XM001.PW0XMTMM = PW0XW00.PW0XWTMM;
    PW0XM003.PW0XMTMM = PW0XW00.PW0XWTMM;
    PW0XW01.PW0XMTDD = PW0XW00.PW0XWTDD; /* to dd*/
    PW0XM001.PW0XMTDD = PW0XW00.PW0XWTDD;
    PW0XM003.PW0XMTDD = PW0XW00.PW0XWTDD;
    PW0XW01.PW0XMTYY = PW0XW00.PW0XWTYY; /* to yy*/
    PW0XM001.PW0XMTYY = PW0XW00.PW0XWTYY;
    PW0XM003.PW0XMTYY = PW0XW00.PW0XWTYY;

    if (PKWREC.XWHCD != " ")
      PW0XW01.XWHCD = PKWREC.XWHCD; /* store passed whse code*/
      PW0XM001.XWHCD = PKWREC.XWHCD; /* store passed whse code*/
      PW0XM003.XWHCD = PKWREC.XWHCD; /* store passed whse code*/
      PW0XW01.XWHABRV = PKWREC.XWHABRV; /* store passed whse desc*/
     /* MOVE PKWREC.XWHABRV TO PW0XM001.XWHABRV; /* store passed whse desc*/
    end

    if (PKWREC.XDVCD[1] != " ")
      PW0XM001.XDVCD = PKWREC.XDVCD[1]; /* passed division code*/
      PW0XM003.XDVCD = PKWREC.XDVCD[1]; /* passed division code*/
      PW0XW01.XDVCD = PKWREC.XDVCD[1]; /**/
    end

    if (PKWREC.XBCCD[1] != " ")
      PW0XM001.XBCCD = PKWREC.XBCCD[1]; /* passed brand code*/
      PW0XM003.XBCCD = PKWREC.XBCCD[1]; /* passed brand code*/
      PW0XW01.XBCCD = PKWREC.XBCCD[1]; /**/
    end

     /* -----------------------------------------------------------*/
     /* Convert current date to CCYYMMDD format for comparison*/
     /* purposes later in program.*/
     /* -----------------------------------------------------------*/

    PW0XW00.PW0XWEDT = VGVar.currentShortGregorianDate; /* get system date MM/DD/YY*/

    if (PW0XW00.PW0XWCYY > 80) /* if year gt 80*/
      PW0XW00.PW0XWCCC = 19; /* set century to 19*/
    else
      PW0XW00.PW0XWCCC = 20; /* otherwise, set century to 20*/
    end

    goto PW0X000; /* Validate entry*/


    PW0X000: PW0X000();
    goto PW0X001; /* converse main process*/
    PW0X001: PW0X001();
     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------*/

    goto PW0X001; /* Converse the main process*/


  end // end main
end // end PW0X

// Format and display map1
Function PW0X-12001()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE, THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-12003.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0XW00.PW0XWSWF == "Y") /* Map must be formatted*/
      PW0X-12101(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/


  PW0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0XM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0XM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0XW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0XW00.XXXMSGNO != 0) /* Message to display*/

        if (PW0XW00.XXXTSPAG == 1) /* First page*/
          if (PW0XW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0XW00.XXXMSGNO);
          end /* Message number*/
          PW0XM001.XXXMODID = PW0XW00.XXXMODID; /* Module id*/
          set PW0XM001 alarm; /* Indicate sound alarm*/
        end
      else
        PW0XM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0XM001.XXXMODID = PW0XW00.XXXMODID; /* Module id*/
        set PW0XM001 alarm; /* Indicate sound alarm*/
      end

    end
  else
    PW0XM001.XXXMODID = PW0XW00.XXXMODID; /* Module identification*/
    set PW0XM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0XM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0XW00.XXXMODID = " "; /* Module identification*/
  PW0XW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0XM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0XM001.CAITEM; /* Application data*/


end // end PW0X-12001

// Format and display map3
Function PW0X-12003()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-12001*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0XW00.PW0XWSWF == "Y") /* Map must be formatted*/
      PW0X-12103(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/


  PW0XM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0XM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0XM003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0XW00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0XW00.XXXMSGNO != 0) /* Message to display*/

        if (PW0XW00.XXXTSPAG == 1) /* First page*/
          if (PW0XW00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0XW00.XXXMSGNO);
          end /* Message number*/
          PW0XM003.XXXMODID = PW0XW00.XXXMODID; /* Module id*/
          set PW0XM003 alarm; /* Indicate sound alarm*/
        end
      else
        PW0XM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW0XM003.XXXMODID = PW0XW00.XXXMODID; /* Module id*/
        set PW0XM003 alarm; /* Indicate sound alarm*/
      end

    end
  else
    PW0XM003.XXXMODID = PW0XW00.XXXMODID; /* Module identification*/
    set PW0XM003 alarm; /* Indicate sound alarm*/
  end

  converse PW0XM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0XW00.XXXMODID = " "; /* Module identification*/
  PW0XW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0XM003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0XM003.CAITEM; /* Application data*/


end // end PW0X-12003

// Format map1's display data
Function PW0X-12101()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-12103*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0XM001 initial; /* M001 input/output area*/

  PW0XW00.PW0XWSWF = "N"; /* Format the map switch*/

  set PW0XM001.PW0XMFMM cursor; /* set cursor*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0XW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0XW00.PW0XWCUR == "Y") /* Current page was changed*/

        PW0XS01(); /* Update temporary storage page*/

        PW0XW00.PW0XWCUR = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0XW00.XXXTSPAG > PW0XW00.TA5TSQIX) /* Desired greater highest*/
        PW0XW00.XXXTSPAG = PW0XW00.TA5TSQIX; /* Default to highest*/
      end

      PW0XS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0XM001.XXXLITPG skip; /* "PAGE" literal*/
    PW0XM001.XXXTSPAG = PW0XW00.XXXTSPAG; /* Current page*/
    set PW0XM001.XXXLITOF skip; /* "OF" literal*/
    PW0XM001.TA5TSQIX = PW0XW00.TA5TSQIX; /* Highest page*/
    PW0XW00.PW0XWIXM = 1; /* Initialize line index*/

    while (PW0XW00.PW0XWIXM <= 10 /* Until screen is full*/
     && PW0XW01.PK1CUOID[PW0XWIXM] > 0) /* or end of data*/

      if (PW0XW00.PW0XWIXM == 1) /* First select field*/
        set PW0XM001.PW0XMACT[PW0XWIXM] cursor, normal; /* Position cursor*/
      else
        set PW0XM001.PW0XMACT[PW0XWIXM] normal; /* Unprotect*/
      end

      PW0XM001.PW0XMACT[PW0XWIXM] = PW0XW01.PW0XMACT[PW0XWIXM];
      PW0XM001.XPPCD[PW0XWIXM] = PW0XW01.XPPCD[PW0XWIXM];
      PW0XM001.PK1CUOID[PW0XWIXM] = PW0XW01.PK1CUOID[PW0XWIXM];
      PW0XM001.PK1NORID[PW0XWIXM] = PW0XW01.PK1NORID[PW0XWIXM];
      PW0XM001.KUMSTSNM[PW0XWIXM] = PW0XW01.KUMSTSNM[PW0XWIXM];
      PW0XM001.PW0XMBMM[PW0XWIXM] = PW0XW01.PW0XMBMM[PW0XWIXM];
      PW0XM001.PW0XMBDD[PW0XWIXM] = PW0XW01.PW0XMBDD[PW0XWIXM];
      PW0XM001.PW0XMBYY[PW0XWIXM] = PW0XW01.PW0XMBYY[PW0XWIXM];
      PW0XM001.PW0XMAMM[PW0XWIXM] = PW0XW01.PW0XMAMM[PW0XWIXM];
      PW0XM001.PW0XMADD[PW0XWIXM] = PW0XW01.PW0XMADD[PW0XWIXM];
      PW0XM001.PW0XMAYY[PW0XWIXM] = PW0XW01.PW0XMAYY[PW0XWIXM];
      PW0XM001.PW0XMEMM[PW0XWIXM] = PW0XW01.PW0XMEMM[PW0XWIXM];
      PW0XM001.PW0XMEDD[PW0XWIXM] = PW0XW01.PW0XMEDD[PW0XWIXM];
      PW0XM001.PW0XMEYY[PW0XWIXM] = PW0XW01.PW0XMEYY[PW0XWIXM];
      PW0XM001.PK4ORDFC[PW0XWIXM] = PW0XW01.PK4ORDFC[PW0XWIXM];
      PW0XM001.PK4ORDRP[PW0XWIXM] = PW0XW01.PK4ORDRP[PW0XWIXM];
      PW0XM001.PW0XMFRT[PW0XWIXM] = PW0XW01.PW0XMFRT[PW0XWIXM];
      PW0XM001.PK4SLIND[PW0XWIXM] = PW0XW01.PK4SLIND[PW0XWIXM];
      PW0XM001.PK4ORHLD[PW0XWIXM] = PW0XW01.PK4ORHLD[PW0XWIXM];
      set PW0XM001.XPPCD[PW0XWIXM] normal; /* pick priority code*/
      set PW0XM001.PW0XMDOT[PW0XWIXM] skip; /* dot*/

      PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0XM001.XWHCD = PW0XW01.XWHCD; /* Warehouse code*/
   /* OVE PW0XW01.XWHABRV TO PW0XM001.XWHABRV; /* Warehouse desc*/
  PW0XM001.XDVCD = PW0XW01.XDVCD; /* Division code*/
  PW0XM001.XBCCD = PW0XW01.XBCCD; /* Brand code*/
  PW0XM001.PW0XMFMM = PW0XW01.PW0XMFMM; /* 'Do not ship before' date-mm*/
  PW0XM001.PW0XMFDD = PW0XW01.PW0XMFDD; /* 'Do not ship before' date-dd*/
  PW0XM001.PW0XMFYY = PW0XW01.PW0XMFYY; /* 'Do not ship before' date-yy*/
  PW0XM001.PW0XMTMM = PW0XW01.PW0XMTMM; /* 'Do not ship before' date-mm*/
  PW0XM001.PW0XMTDD = PW0XW01.PW0XMTDD; /* 'Do not ship before' date-dd*/
  PW0XM001.PW0XMTYY = PW0XW01.PW0XMTYY; /* 'Do not ship before' date-yy*/
  PW0XM001.PW0XMSEL = PW0XW01.PW0XMSEL; /* Selection criteria*/
  PW0XM001.PW0XMFCT = PW0XW00.PW0XMFCT; /* full case total*/
  PW0XM001.PW0XMRPT = PW0XW00.PW0XMRPT; /* repack total*/
  PW0XM001.PW0XMTOT = PW0XW00.PW0XMTOT; /* grand total*/

  PW0XM001.CATOAP = " ";
  PW0XM001.CAITEM = " ";


end // end PW0X-12101

// Format map3's display data
Function PW0X-12103()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-12101*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0XM003 initial; /* M001 input/output area*/

  PW0XW00.PW0XWSWF = "N"; /* Format the map switch*/

  set PW0XM003.PW0XMFMM cursor; /* set cursor*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0XW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0XW00.PW0XWCUR == "Y") /* Current page was changed*/

        PW0XS01(); /* Update temporary storage page*/

        PW0XW00.PW0XWCUR = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0XW00.XXXTSPAG > PW0XW00.TA5TSQIX) /* Desired greater highest*/
        PW0XW00.XXXTSPAG = PW0XW00.TA5TSQIX; /* Default to highest*/
      end

      PW0XS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0XM003.XXXLITPG skip; /* "PAGE" literal*/
    PW0XM003.XXXTSPAG = PW0XW00.XXXTSPAG; /* Current page*/
    set PW0XM003.XXXLITOF skip; /* "OF" literal*/
    PW0XM003.TA5TSQIX = PW0XW00.TA5TSQIX; /* Highest page*/
    PW0XW00.PW0XWIXM = 1; /* Initialize line index*/

    while (PW0XW00.PW0XWIXM <= 10 /* Until screen is full*/
     && PW0XW01.PK1CUOID[PW0XWIXM] > 0) /* or end of data*/

      if (PW0XW00.PW0XWIXM == 1) /* First select field*/
        set PW0XM003.PW0XMACT[PW0XWIXM] cursor, normal; /* Position cursor*/
      else
        set PW0XM003.PW0XMACT[PW0XWIXM] normal; /* Unprotect*/
      end

      PW0XM003.PW0XMACT[PW0XWIXM] = PW0XW01.PW0XMACT[PW0XWIXM];
      PW0XM003.XPPCD[PW0XWIXM] = PW0XW01.XPPCD[PW0XWIXM];
      PW0XM003.PK1CUOID[PW0XWIXM] = PW0XW01.PK1CUOID[PW0XWIXM];
      PW0XM003.PK1NORID[PW0XWIXM] = PW0XW01.PK1NORID[PW0XWIXM];
      PW0XM003.KUMSTSNM[PW0XWIXM] = PW0XW01.KUMSTSNM[PW0XWIXM];
      PW0XM003.PW0XMBMM[PW0XWIXM] = PW0XW01.PW0XMBMM[PW0XWIXM];
      PW0XM003.PW0XMBDD[PW0XWIXM] = PW0XW01.PW0XMBDD[PW0XWIXM];
      PW0XM003.PW0XMBYY[PW0XWIXM] = PW0XW01.PW0XMBYY[PW0XWIXM];
      PW0XM003.PW0XMAMM[PW0XWIXM] = PW0XW01.PW0XMAMM[PW0XWIXM];
      PW0XM003.PW0XMADD[PW0XWIXM] = PW0XW01.PW0XMADD[PW0XWIXM];
      PW0XM003.PW0XMAYY[PW0XWIXM] = PW0XW01.PW0XMAYY[PW0XWIXM];
      PW0XM003.PW0XMEMM[PW0XWIXM] = PW0XW01.PW0XMEMM[PW0XWIXM];
      PW0XM003.PW0XMEDD[PW0XWIXM] = PW0XW01.PW0XMEDD[PW0XWIXM];
      PW0XM003.PW0XMEYY[PW0XWIXM] = PW0XW01.PW0XMEYY[PW0XWIXM];
      PW0XM003.PK4ORDFC[PW0XWIXM] = PW0XW01.PK4ORDFC[PW0XWIXM];
      PW0XM003.PK4ORDRP[PW0XWIXM] = PW0XW01.PK4ORDRP[PW0XWIXM];
      PW0XM003.PW0XMFRT[PW0XWIXM] = PW0XW01.PW0XMFRT[PW0XWIXM];
      PW0XM003.PK4SLIND[PW0XWIXM] = PW0XW01.PK4SLIND[PW0XWIXM];
      PW0XM003.PK4ORHLD[PW0XWIXM] = PW0XW01.PK4ORHLD[PW0XWIXM];
      set PW0XM003.XPPCD[PW0XWIXM] normal; /* pick priority code*/
      set PW0XM003.PW0XMDOT[PW0XWIXM] skip; /* dot*/

      PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0XM003.XWHCD = PW0XW01.XWHCD; /* Warehouse code*/
  PW0XM003.XDVCD = PW0XW01.XDVCD; /* Division code*/
  PW0XM003.XBCCD = PW0XW01.XBCCD; /* Brand code*/
  PW0XM003.PW0XMFMM = PW0XW01.PW0XMFMM; /* 'Do not ship before' date-mm*/
  PW0XM003.PW0XMFDD = PW0XW01.PW0XMFDD; /* 'Do not ship before' date-dd*/
  PW0XM003.PW0XMFYY = PW0XW01.PW0XMFYY; /* 'Do not ship before' date-yy*/
  PW0XM003.PW0XMTMM = PW0XW01.PW0XMTMM; /* 'Do not ship before' date-mm*/
  PW0XM003.PW0XMTDD = PW0XW01.PW0XMTDD; /* 'Do not ship before' date-dd*/
  PW0XM003.PW0XMTYY = PW0XW01.PW0XMTYY; /* 'Do not ship before' date-yy*/
  PW0XM003.PW0XMSEL = PW0XW01.PW0XMSEL; /* Selection criteria*/
  PW0XM003.PW0XMFCT = PW0XW00.PW0XMFCT; /* full case total*/
  PW0XM003.PW0XMRPT = PW0XW00.PW0XMRPT; /* repack total*/
  PW0XM003.PW0XMTOT = PW0XW00.PW0XMTOT; /* grand total*/

  PW0XM003.CATOAP = " ";
  PW0XM003.CAITEM = " ";


end // end PW0X-12103

// Verify entered data map1
Function PW0X-15001()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-15003*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.CAITEM > " ") /* Application data was entered*/

    PW0XW00.XXXMODID = "150"; /* Module identification*/
    set PW0XM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0XW00.PW0XWIXM = 10; /* Initialize line index*/

    while (PW0XW00.PW0XWIXM > 0) /* Until end of lines*/

      if (PW0XM001.PK1CUOID[PW0XWIXM] != 0) /* there is data on line*/

        if (PW0XM001.PW0XMACT[PW0XWIXM] != PW0XW01.PW0XMACT[PW0XWIXM]
         || PW0XM001.XPPCD[PW0XWIXM] != PW0XW01.XPPCD[PW0XWIXM])

          PW0X-15201(); /* Verify data in the line*/

        end
      end

      PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM - 1; /* Decrement line number*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0X151(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Selection code.*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.PW0XMSEL != PW0XW01.PW0XMSEL) /* Selection code changed*/

    if (PW0XM001.PW0XMSEL != "A" /* selection code must be 'a'*/
     && PW0XM001.PW0XMSEL != "N" /* or 'n'*/
     && PW0XM001.PW0XMSEL != "S") /* or 's'*/

      converseLib.validationFailed(322); /* only a,n or s allowed*/
      set PW0XM001.PW0XMSEL cursor, bold; /* highlight*/
      exit stack;

    end

  end

  if (converseVar.eventKey is enter /* enter was pressed*/
   && PW0XW00.PW0XWSWA == "Y")      /* no more array data*/

    converseLib.validationFailed(339);
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Verify Division code*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.XDVCD != PW0XW01.XDVCD) /* map value has changed*/
   /* MOVE 'Y' TO PW0XW00.PW0XWSWU;  /* data has changed*/
    PW0XW00.PW0XWSWR = "Y"; /* request data switch*/

    if (PW0XM001.XDVCD == " ") /* blank division*/
      converseLib.validationFailed(393); /* INVALID DIVISION CODE*/
      set PW0XM001.XDVCD cursor, bold;
      TA1REC.TA1LOC = "150";
      exit stack;
    end

    PKWREC.XDVCD[1] = PW0XM001.XDVCD;

    if (PW0XM001.XDVCD != "*")
      XPPK004(); /* validate division*/

      if (converseVar.validationMsgNum == 0)
        PW0XW01.XDVCD = PKWREC.XDVCD[1];
      else
        converseLib.validationFailed(393); /* INVALID DIVISION CODE*/
        set PW0XM001.XDVCD cursor, bold;
        TA1REC.TA1LOC = "150";
        exit stack;
      end
    else
      PW0XW01.XDVCD = PKWREC.XDVCD[1];
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify Brand code*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.XBCCD != PW0XW01.XBCCD) /* map value changed*/
   /* MOVE 'Y' TO PW0XW00.PW0XWSWU;  /* data has changed*/
    PW0XW00.PW0XWSWR = "Y"; /* request data switch*/

    if (PW0XM001.XBCCD == " ") /* blank brand code*/
      converseLib.validationFailed(413); /* INVALID BRAND CODE*/
      set PW0XM001.XBCCD cursor, bold;
      TA1REC.TA1LOC = "150";
      exit stack;
    end

    PKWREC.XBCCD[1] = PW0XM001.XBCCD;

    if (PW0XM001.XBCCD != "*")
      if (PW0XM001.XBCCD in XBCTBL.XBCCD)
        if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(414); /* INACTIVE BRAND CODE*/
          set PW0XM001.XBCCD cursor, bold;
          TA1REC.TA1LOC = "150";
          exit stack;
        else
          PW0XW01.XBCCD = PW0XM001.XBCCD;
        end
      else
        converseLib.validationFailed(413); /* INVALID BRAND CODE*/
        set PW0XM001.XBCCD cursor, bold;
        TA1REC.TA1LOC = "150";
        exit stack;
      end
    else
      PW0XW01.XBCCD = PW0XM001.XBCCD;
      PW0XW00.XXXMSGNO = 421;
    end
  end


  if (converseVar.eventKey is enter         /* enter was pressed*/
   && PW0XM001.PW0XMSEL == PW0XW01.PW0XMSEL /* no chg to criteria*/
   && PW0XW00.PW0XWSWU == "N"               /* no data was changed*/
   && converseVar.validationMsgNum == 0)    /* no pending changes*/

    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1; /* increment index*/

    if (PKWREC.PKWINDEX > 25) /* already showing last in array*/
      if (PW0XW00.PW0XWAIX >= 3) /* on last occurrance of array*/

        converseLib.validationFailed(339); /* no more data to display*/
        PW0XW00.PW0XWSWA = "Y"; /* set end of array data switch*/

      else

        PW0XW00.PW0XWAIX = PW0XW00.PW0XWAIX + 1; /* increment array index*/
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PW0XWAIX]; /* next 25*/
        PKWREC.PKWINDEX = 1; /* start at first*/

        if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* no more entries in array*/
          converseLib.validationFailed(339); /* no more data to display*/
          PW0XW00.PW0XWSWA = "Y"; /* set end of array data switch*/
        end

      end
    else /* still within current array*/
      if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* if exceeds entries in array*/

        converseLib.validationFailed(339); /* no more data to display*/
        PW0XW00.PW0XWSWA = "Y"; /* set end of array data switch*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* verify entered date range.*/
   /* ------------------------------------------------------------*/

  PW0X-15301(); /* check date range*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW0X-15001

// Verify entered data map3
Function PW0X-15003()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-15001*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0XM003.CAITEM > " ") /* Application data was entered*/

    PW0XW00.XXXMODID = "150"; /* Module identification*/
    set PW0XM003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0XW00.PW0XWIXM = 10; /* Initialize line index*/

    while (PW0XW00.PW0XWIXM > 0) /* Until end of lines*/

      if (PW0XM003.PK1CUOID[PW0XWIXM] != 0) /* there is data on line*/

        if (PW0XM003.PW0XMACT[PW0XWIXM] != PW0XW01.PW0XMACT[PW0XWIXM]
         || PW0XM003.XPPCD[PW0XWIXM] != PW0XW01.XPPCD[PW0XWIXM])

          PW0X-15203(); /* Verify data in the line*/

        end
      end

      PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM - 1; /* Decrement line number*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0X151(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Selection code.*/
   /* ------------------------------------------------------------*/

  if (PW0XM003.PW0XMSEL != PW0XW01.PW0XMSEL) /* Selection code changed*/

    if (PW0XM003.PW0XMSEL != "A" /* selection code must be 'a'*/
     && PW0XM003.PW0XMSEL != "N" /* or 'n'*/
     && PW0XM003.PW0XMSEL != "S") /* or 's'*/

      converseLib.validationFailed(322); /* only a,n or s allowed*/
      set PW0XM003.PW0XMSEL cursor, bold; /* highlight*/
      exit stack;

    end

  end

  if (converseVar.eventKey is enter /* enter was pressed*/
   && PW0XW00.PW0XWSWA == "Y")      /* no more array data*/

    converseLib.validationFailed(339);
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Verify Division code*/
   /* ------------------------------------------------------------*/

  if (PW0XM003.XDVCD != PW0XW01.XDVCD) /* map value has changed*/
   /* MOVE 'Y' TO PW0XW00.PW0XWSWU;  /* data has changed*/
    PW0XW00.PW0XWSWR = "Y"; /* request data switch*/

    if (PW0XM003.XDVCD == " ") /* blank division*/
      converseLib.validationFailed(393); /* INVALID DIVISION CODE*/
      set PW0XM003.XDVCD cursor, bold;
      TA1REC.TA1LOC = "150";
      exit stack;
    end

    PKWREC.XDVCD[1] = PW0XM003.XDVCD;

    if (PW0XM003.XDVCD != "*")
      XPPK004(); /* validate division*/

      if (converseVar.validationMsgNum == 0)
        PW0XW01.XDVCD = PKWREC.XDVCD[1];
      else
        converseLib.validationFailed(393); /* INVALID DIVISION CODE*/
        set PW0XM003.XDVCD cursor, bold;
        TA1REC.TA1LOC = "150";
        exit stack;
      end
    else
      PW0XW01.XDVCD = PKWREC.XDVCD[1];
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify Brand code*/
   /* ------------------------------------------------------------*/

  if (PW0XM003.XBCCD != PW0XW01.XBCCD) /* map value changed*/
   /* MOVE 'Y' TO PW0XW00.PW0XWSWU;  /* data has changed*/
    PW0XW00.PW0XWSWR = "Y"; /* request data switch*/

    if (PW0XM003.XBCCD == " ") /* blank brand code*/
      converseLib.validationFailed(413); /* INVALID BRAND CODE*/
      set PW0XM003.XBCCD cursor, bold;
      TA1REC.TA1LOC = "150";
      exit stack;
    end

    PKWREC.XBCCD[1] = PW0XM003.XBCCD;

    if (PW0XM003.XBCCD != "*")
      if (PW0XM003.XBCCD in XBCTBL.XBCCD)
        if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          converseLib.validationFailed(414); /* INACTIVE BRAND CODE*/
          set PW0XM003.XBCCD cursor, bold;
          TA1REC.TA1LOC = "150";
          exit stack;
        else
          PW0XW01.XBCCD = PW0XM003.XBCCD;
        end
      else
        converseLib.validationFailed(413); /* INVALID BRAND CODE*/
        set PW0XM003.XBCCD cursor, bold;
        TA1REC.TA1LOC = "150";
        exit stack;
      end
    else
      PW0XW01.XBCCD = PW0XM003.XBCCD;
      PW0XW00.XXXMSGNO = 421;
    end
  end


  if (converseVar.eventKey is enter         /* enter was pressed*/
   && PW0XM003.PW0XMSEL == PW0XW01.PW0XMSEL /* no chg to criteria*/
   && PW0XW00.PW0XWSWU == "N"               /* no data was changed*/
   && converseVar.validationMsgNum == 0)    /* no pending changes*/

    PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1; /* increment index*/

    if (PKWREC.PKWINDEX > 25) /* already showing last in array*/
      if (PW0XW00.PW0XWAIX >= 3) /* on last occurrance of array*/

        converseLib.validationFailed(339); /* no more data to display*/
        PW0XW00.PW0XWSWA = "Y"; /* set end of array data switch*/

      else

        PW0XW00.PW0XWAIX = PW0XW00.PW0XWAIX + 1; /* increment array index*/
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PW0XWAIX]; /* next 25*/
        PKWREC.PKWINDEX = 1; /* start at first*/

        if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* no more entries in array*/
          converseLib.validationFailed(339); /* no more data to display*/
          PW0XW00.PW0XWSWA = "Y"; /* set end of array data switch*/
        end

      end
    else /* still within current array*/
      if (PKWREC.PKWINDEX > PWKREC.PWKARMAX) /* if exceeds entries in array*/

        converseLib.validationFailed(339); /* no more data to display*/
        PW0XW00.PW0XWSWA = "Y"; /* set end of array data switch*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* verify entered date range.*/
   /* ------------------------------------------------------------*/

  PW0X-15303(); /* check date range*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW0X-15003

// Verify data in line (map1)
Function PW0X-15201()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-15203*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "a", "d", "i", "h", " ",*/
   /* error*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.PW0XMACT[PW0XWIXM] != PW0XW01.PW0XMACT[PW0XWIXM]
   && PW0XM001.PW0XMACT[PW0XWIXM] != "A" /* and is not a "a"*/
   && PW0XM001.PW0XMACT[PW0XWIXM] != "D" /* and is not a "d"*/
   && PW0XM001.PW0XMACT[PW0XWIXM] != "I" /* and is not a "i"*/
   && PW0XM001.PW0XMACT[PW0XWIXM] != "H" /* and is not a "h"*/
   && PW0XM001.PW0XMACT[PW0XWIXM] != " ") /* and is not a " "*/

    PW0XW00.XXXMODID = "152"; /* Module identification*/
    set PW0XM001.PW0XMACT[PW0XWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.PW0XMACT[PW0XWIXM] == "A"
   || PW0XM001.PW0XMACT[PW0XWIXM] == "D"
   || PW0XM001.PW0XMACT[PW0XWIXM] == "I"
   || PW0XM001.PW0XMACT[PW0XWIXM] == "*"
   || PW0XM001.PW0XMACT[PW0XWIXM] == "V"
   || PW0XM001.PW0XMACT[PW0XWIXM] == " ")

    if (PW0XM001.PW0XMACT[PW0XWIXM] == "A")
      if (PW0XM001.XPPCD[PW0XWIXM] == "  ") /* priority code cannot be blank*/

        PW0XM001.XPPCD[PW0XWIXM] = "30"; /* default to normal*/

      else
        if (PW0XM001.XPPCD[PW0XWIXM] != "10"
         && PW0XM001.XPPCD[PW0XWIXM] != "20"
         && PW0XM001.XPPCD[PW0XWIXM] != "30")

          PW0XW00.XXXMODID = "152"; /* Module id*/
          converseLib.validationFailed(342); /* invalid field*/
          set PW0XM001.XPPCD[PW0XWIXM] cursor, bold; /* highlight*/

        end
      end
    end

    if (PW0XM001.PW0XMACT[PW0XWIXM] == " "
     && PW0XM001.XPPCD[PW0XWIXM] != PW0XW01.XPPCD[PW0XWIXM])

      PW0XW00.XXXMODID = "152"; /* Module identification*/
      set PW0XM001.PW0XMACT[PW0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(35); /* Only valid codes may be entered*/

    end
  end

  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW0XM001.PW0XMACT[PW0XWIXM] == " ") /* un-selecting action*/

    return;

  end

  PW0XW00.PW0XWSWU = "Y"; /* data has been updated*/
  PW0XW00.PW0XWCUR = "Y"; /* screen has been updated*/


end // end PW0X-15201

// Verify data in line (map3)
Function PW0X-15203()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-15201*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If action was entered and is not a "a", "d", "i", "h", " ",*/
   /* error*/
   /* ------------------------------------------------------------*/

  if (PW0XM003.PW0XMACT[PW0XWIXM] != PW0XW01.PW0XMACT[PW0XWIXM]
   && PW0XM003.PW0XMACT[PW0XWIXM] != "A" /* and is not a "a"*/
   && PW0XM003.PW0XMACT[PW0XWIXM] != "D" /* and is not a "d"*/
   && PW0XM003.PW0XMACT[PW0XWIXM] != "I" /* and is not a "i"*/
   && PW0XM003.PW0XMACT[PW0XWIXM] != "H" /* and is not a "h"*/
   && PW0XM003.PW0XMACT[PW0XWIXM] != " ") /* and is not a " "*/

    PW0XW00.XXXMODID = "152"; /* Module identification*/
    set PW0XM003.PW0XMACT[PW0XWIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/
    return; /* done with this line*/

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/

  if (PW0XM003.PW0XMACT[PW0XWIXM] == "A"
   || PW0XM003.PW0XMACT[PW0XWIXM] == "D"
   || PW0XM003.PW0XMACT[PW0XWIXM] == "I"
   || PW0XM003.PW0XMACT[PW0XWIXM] == "*"
   || PW0XM003.PW0XMACT[PW0XWIXM] == "V"
   || PW0XM003.PW0XMACT[PW0XWIXM] == " ")

    if (PW0XM003.PW0XMACT[PW0XWIXM] == "A")
      if (PW0XM003.XPPCD[PW0XWIXM] == "  ") /* priority code cannot be blank*/

        PW0XM003.XPPCD[PW0XWIXM] = "30"; /* default to normal*/

      else
        if (PW0XM003.XPPCD[PW0XWIXM] != "10"
         && PW0XM003.XPPCD[PW0XWIXM] != "20"
         && PW0XM003.XPPCD[PW0XWIXM] != "30")

          PW0XW00.XXXMODID = "152"; /* Module id*/
          converseLib.validationFailed(342); /* invalid field*/
          set PW0XM003.XPPCD[PW0XWIXM] cursor, bold; /* highlight*/

        end
      end
    end

    if (PW0XM003.PW0XMACT[PW0XWIXM] == " "
     && PW0XM003.XPPCD[PW0XWIXM] != PW0XW01.XPPCD[PW0XWIXM])

      PW0XW00.XXXMODID = "152"; /* Module identification*/
      set PW0XM003.PW0XMACT[PW0XWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(35); /* Only valid codes may be entered*/

    end
  end

  if (converseVar.validationMsgNum != 0 /* there are errors*/
   || PW0XM003.PW0XMACT[PW0XWIXM] == " ") /* un-selecting action*/

    return;

  end

  PW0XW00.PW0XWSWU = "Y"; /* data has been updated*/
  PW0XW00.PW0XWCUR = "Y"; /* screen has been updated*/


end // end PW0X-15203

// Verify date range (map1)
Function PW0X-15301()
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-15303*/
   /* -----------------------------------------------------------*/

   /* -----------------------------------------------------------*/
   /* verify "to" and "from" date ranges.*/
   /* -----------------------------------------------------------*/

  if (PW0XM001.PW0XMTMM == 0 /* check 'to' date range*/
   || PW0XM001.PW0XMTDD == 0)
   /* ------Y2K OUT-----------*/
   /* OR PW0XM001.PW0XMTYY EQ 0;*/
   /* ------Y2K OUT-----------*/

    converseLib.validationFailed(158);
    PW0XW00.XXXMODID = "153";
    set PW0XM001.PW0XMTMM cursor, bold;
    set PW0XM001.PW0XMTDD bold;
    set PW0XM001.PW0XMTYY bold;
    return;
  end

  if (PW0XW00.PW0XWTDT < PW0XW00.PW0XWFDT) /* to less than from date*/
    set PW0XM001.PW0XMTMM cursor, bold;
    set PW0XM001.PW0XMTDD bold;
    set PW0XM001.PW0XMTYY bold;
    PW0XW00.XXXMODID = "153";
    converseLib.validationFailed(286); /* invalid date*/
  end


     /* convert TO date to yyyymmdd*/

  XX0XW01.XX0XWMM = PW0XM001.PW0XMTMM;
  XX0XW01.XX0XWDD = PW0XM001.PW0XMTDD;
  XX0XW01.XX0XWYY = PW0XM001.PW0XMTYY;
  if (XX0XW01.XX0XWYY > 70)
    XX0XW01.XX0XW19 = 19;
  else
    XX0XW01.XX0XW19 = 20;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    PW0XW00.PW0XWTDT = TA2REC.TA2GRGGN;
  else
    set PW0XM001.PW0XMTMM cursor, bold;
    set PW0XM001.PW0XMTDD bold;
    set PW0XM001.PW0XMTYY bold;
    PW0XW00.XXXMODID = "153";
    converseLib.validationFailed(158); /* invalid date*/
  end

     /* convert from date to yyyymmdd*/

  if (PW0XM001.PW0XMFMM > 0 /* check 'to' date range*/
   || PW0XM001.PW0XMFDD > 0 
   || PW0XM001.PW0XMFYY > 0)
    XX0XW01.XX0XWMM = PW0XM001.PW0XMFMM;
    XX0XW01.XX0XWDD = PW0XM001.PW0XMFDD;
    XX0XW01.XX0XWYY = PW0XM001.PW0XMFYY;
    if (XX0XW01.XX0XWYY > 70)
      XX0XW01.XX0XW19 = 19;
    else
      XX0XW01.XX0XW19 = 20;
    end

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      PW0XW00.PW0XWFDT = TA2REC.TA2GRGGN;
    else
      set PW0XM001.PW0XMFMM cursor, bold;
      set PW0XM001.PW0XMFDD bold;
      set PW0XM001.PW0XMFYY bold;
      PW0XW00.XXXMODID = "153";
      converseLib.validationFailed(158); /* invalid date*/
    end
  else
    PW0XW00.PW0XWFDT = 0;
  end


end // end PW0X-15301

// Verify date range (map3)
Function PW0X-15303()
   /* -----------------------------------------------------------*/
   /* -----------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-15301*/
   /* -----------------------------------------------------------*/

   /* -----------------------------------------------------------*/
   /* verify "to" and "from" date ranges.*/
   /* -----------------------------------------------------------*/

  if (PW0XM003.PW0XMTMM == 0 /* check 'to' date range*/
   || PW0XM003.PW0XMTDD == 0)
   /* -------Y2K OUT-----------*/
   /* OR PW0XM003.PW0XMTYY EQ 0;*/
   /* -------Y2K OUT-----------*/

    converseLib.validationFailed(158);
    PW0XW00.XXXMODID = "153";
    set PW0XM003.PW0XMTMM cursor, bold;
    set PW0XM003.PW0XMTDD bold;
    set PW0XM003.PW0XMTYY bold;
    return;
  end

  if (PW0XW00.PW0XWTDT < PW0XW00.PW0XWFDT) /* to less than from date*/
    set PW0XM003.PW0XMTMM cursor, bold;
    set PW0XM003.PW0XMTDD bold;
    set PW0XM003.PW0XMTYY bold;
    PW0XW00.XXXMODID = "153";
    converseLib.validationFailed(286); /* invalid date*/
  end


     /* convert TO date to yyyymmdd*/

  XX0XW01.XX0XWMM = PW0XM003.PW0XMTMM;
  XX0XW01.XX0XWDD = PW0XM003.PW0XMTDD;
  XX0XW01.XX0XWYY = PW0XM003.PW0XMTYY;
  if (XX0XW01.XX0XWYY > 70)
    XX0XW01.XX0XW19 = 19;
  else
    XX0XW01.XX0XW19 = 20;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0)
    PW0XW00.PW0XWTDT = TA2REC.TA2GRGGN;
  else
    set PW0XM003.PW0XMTMM cursor, bold;
    set PW0XM003.PW0XMTDD bold;
    set PW0XM003.PW0XMTYY bold;
    PW0XW00.XXXMODID = "153";
    converseLib.validationFailed(158); /* invalid date*/
  end

     /* convert from date to yyyymmdd*/

  if (PW0XM003.PW0XMFMM > 0 /* check 'to' date range*/
   || PW0XM003.PW0XMFDD > 0 
   || PW0XM003.PW0XMFYY > 0)
    XX0XW01.XX0XWMM = PW0XM003.PW0XMFMM;
    XX0XW01.XX0XWDD = PW0XM003.PW0XMFDD;
    XX0XW01.XX0XWYY = PW0XM003.PW0XMFYY;
    if (XX0XW01.XX0XWYY > 70)
      XX0XW01.XX0XW19 = 19;
    else
      XX0XW01.XX0XW19 = 20;
    end

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    if (TA2REC.TA2RTNCD == 0)
      PW0XW00.PW0XWFDT = TA2REC.TA2GRGGN;
    else
      set PW0XM003.PW0XMFMM cursor, bold;
      set PW0XM003.PW0XMFDD bold;
      set PW0XM003.PW0XMFYY bold;
      PW0XW00.XXXMODID = "153";
      converseLib.validationFailed(158); /* invalid date*/
    end
  else
    PW0XW00.PW0XWFDT = 0;
  end


end // end PW0X-15303

// Process valid request (map1)
Function PW0X-16001()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-16003*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If a search key was entered, request the data to display.*/
   /* and set up date ranges for comparisons in processing*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.PW0XMFMM != PW0XW01.PW0XMFMM /* from month*/
   || PW0XM001.PW0XMFDD != PW0XW01.PW0XMFDD /* from day*/
   || PW0XM001.PW0XMFYY != PW0XW01.PW0XMFYY /* from year*/
   || PW0XM001.PW0XMTMM != PW0XW01.PW0XMTMM /* to month*/
   || PW0XM001.PW0XMTDD != PW0XW01.PW0XMTDD /* to day*/
   || PW0XM001.PW0XMTYY != PW0XW01.PW0XMTYY /* to year*/
   || PW0XM001.PW0XMSEL != PW0XW01.PW0XMSEL) /* selection*/

    PW0XW00.PW0XWSWR = "Y"; /* Request for data switch*/
    PW0XW00.PW0XWFDD = PW0XM001.PW0XMFDD; /* from day*/
    PW0XW01.PW0XMFDD = PW0XM001.PW0XMFDD; /* from day*/
    PW0XW00.PW0XWFMM = PW0XM001.PW0XMFMM; /* from month*/
    PW0XW01.PW0XMFMM = PW0XM001.PW0XMFMM; /* from month*/
    PW0XW00.PW0XWFYY = PW0XM001.PW0XMFYY; /* from year*/
    PW0XW01.PW0XMFYY = PW0XM001.PW0XMFYY; /* from year*/
    if (PW0XW00.PW0XWFDT > 0)
   /* -------Y2K OUT--------------*/
   /* MOVE PW0XW00.PW0XWCCC TO PW0XW00.PW0XWFCC; /* from century*/
   /* -------Y2K OUT--------------*/
   /* -------Y2K IN---------------*/
      if (PW0XW00.PW0XWFYY > 57)
        PW0XW00.PW0XWFCC = 19;
      else
        PW0XW00.PW0XWFCC = 20;
      end
   /* -------Y2K IN---------------*/
    end
    PW0XW00.PW0XWTDD = PW0XM001.PW0XMTDD; /* to day*/
    PW0XW01.PW0XMTDD = PW0XM001.PW0XMTDD; /* to day*/
    PW0XW00.PW0XWTMM = PW0XM001.PW0XMTMM; /* to month*/
    PW0XW01.PW0XMTMM = PW0XM001.PW0XMTMM; /* to month*/
    PW0XW00.PW0XWTYY = PW0XM001.PW0XMTYY; /* to year*/
    PW0XW01.PW0XMTYY = PW0XM001.PW0XMTYY; /* to year*/
   /* --------Y2K OUT--------------*/
   /* MOVE PW0XW00.PW0XWCCC TO PW0XW00.PW0XWTCC; /* to century*/
   /* --------Y2K OUT--------------*/
   /* --------Y2K IN---------------*/
    if (PW0XW00.PW0XWTYY > 57)
      PW0XW00.PW0XWTCC = 19;
    else
      PW0XW00.PW0XWTCC = 20;
    end
   /* -------Y2K IN---------------*/

    /* -------------------------------------------------------*/
     /* move data to pkwrec.*/
    /* -------------------------------------------------------*/

    PKWREC.XWHCD = PW0XM001.XWHCD;
    PKWREC.PKWFRMDT[1] = PW0XW00.PW0XWFDT;
    PKWREC.PKWTODT[1] = PW0XW00.PW0XWTDT;
    PKWREC.PKWXWHCD = " ";
    PKWREC.PKWFRMAP[1] = "PW0X";
    PKWREC.PKWSLTYP[1] = " ";

    return;
  end

   /* ------------------------------------------------------------*/
   /* If any data lines were changed, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWCUR == "Y") /* data changed this screen*/

    PW0XW00.PW0XWIXM = 1; /* initialize index*/
    while (PW0XW00.PW0XWIXM <= 10 /* till all lines moved*/
     && PW0XM001.PK1CUOID[PW0XWIXM] != 0) /* and data exists*/

      PW0XW01.PW0XMACT[PW0XWIXM] = PW0XM001.PW0XMACT[PW0XWIXM];
      PW0XW01.XPPCD[PW0XWIXM] = PW0XM001.XPPCD[PW0XWIXM];

      PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM + 1;

    end

    TA5REC.TA5TSQIX = PW0XW00.XXXTSPAG; /* which page to update*/
    PW0XS01(); /* update t/s page*/

  end

end // end PW0X-16001

// Process valid request (map3)
Function PW0X-16003()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* NOTE: IF CHANGES ARE MADE IN THIS MODULE THEY MUST ALSO*/
   /* BE CHANGED IN PW0X-16001*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If a search key was entered, request the data to display.*/
   /* and set up date ranges for comparisons in processing*/
   /* ------------------------------------------------------------*/

  if (PW0XM003.PW0XMFMM != PW0XW01.PW0XMFMM /* from month*/
   || PW0XM003.PW0XMFDD != PW0XW01.PW0XMFDD /* from day*/
   || PW0XM003.PW0XMFYY != PW0XW01.PW0XMFYY /* from year*/
   || PW0XM003.PW0XMTMM != PW0XW01.PW0XMTMM /* to month*/
   || PW0XM003.PW0XMTDD != PW0XW01.PW0XMTDD /* to day*/
   || PW0XM003.PW0XMTYY != PW0XW01.PW0XMTYY /* to year*/
   || PW0XM003.PW0XMSEL != PW0XW01.PW0XMSEL) /* selection*/

    PW0XW00.PW0XWSWR = "Y"; /* Request for data switch*/
    PW0XW00.PW0XWFDD = PW0XM003.PW0XMFDD; /* from day*/
    PW0XW01.PW0XMFDD = PW0XM003.PW0XMFDD; /* from day*/
    PW0XW00.PW0XWFMM = PW0XM003.PW0XMFMM; /* from month*/
    PW0XW01.PW0XMFMM = PW0XM003.PW0XMFMM; /* from month*/
    PW0XW00.PW0XWFYY = PW0XM003.PW0XMFYY; /* from year*/
    PW0XW01.PW0XMFYY = PW0XM003.PW0XMFYY; /* from year*/
    if (PW0XW00.PW0XWFDT > 0)
   /* --------Y2k OUT--------*/
   /* MOVE PW0XW00.PW0XWCCC TO PW0XW00.PW0XWFCC; /* from century*/
   /* --------Y2k OUT--------*/
   /* --------Y2k IN---------*/
      if (PW0XW00.PW0XWFYY > 57)
        PW0XW00.PW0XWFCC = 19;
      else
        PW0XW00.PW0XWFCC = 20;
      end
   /* --------Y2k IN---------*/
    end
    PW0XW00.PW0XWTDD = PW0XM003.PW0XMTDD; /* to day*/
    PW0XW01.PW0XMTDD = PW0XM003.PW0XMTDD; /* to day*/
    PW0XW00.PW0XWTMM = PW0XM003.PW0XMTMM; /* to month*/
    PW0XW01.PW0XMTMM = PW0XM003.PW0XMTMM; /* to month*/
    PW0XW00.PW0XWTYY = PW0XM003.PW0XMTYY; /* to year*/
    PW0XW01.PW0XMTYY = PW0XM003.PW0XMTYY; /* to year*/
   /* --------Y2K OUT---------*/
   /* MOVE PW0XW00.PW0XWCCC TO PW0XW00.PW0XWTCC; /* to century*/
   /* --------Y2K OUT---------*/
   /* --------Y2K IN----------*/
    if (PW0XW00.PW0XWTYY > 57)
      PW0XW00.PW0XWTCC = 19;
    else
      PW0XW00.PW0XWTCC = 20;
    end
   /* --------Y2K IN----------*/

    /* -------------------------------------------------------*/
     /* move data to pkwrec.*/
    /* -------------------------------------------------------*/

    PKWREC.XWHCD = PW0XM003.XWHCD;
    PKWREC.PKWFRMDT[1] = PW0XW00.PW0XWFDT;
    PKWREC.PKWTODT[1] = PW0XW00.PW0XWTDT;
    PKWREC.PKWXWHCD = " ";
    PKWREC.PKWFRMAP[1] = "PW0X";
    PKWREC.PKWSLTYP[1] = " ";

    return;
  end

   /* ------------------------------------------------------------*/
   /* If any data lines were changed, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWCUR == "Y") /* data changed this screen*/

    PW0XW00.PW0XWIXM = 1; /* initialize index*/
    while (PW0XW00.PW0XWIXM <= 10 /* till all lines moved*/
     && PW0XM003.PK1CUOID[PW0XWIXM] != 0) /* and data exists*/

      PW0XW01.PW0XMACT[PW0XWIXM] = PW0XM003.PW0XMACT[PW0XWIXM];
      PW0XW01.XPPCD[PW0XWIXM] = PW0XM003.XPPCD[PW0XWIXM];

      PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM + 1;

    end

    TA5REC.TA5TSQIX = PW0XW00.XXXTSPAG; /* which page to update*/
    PW0XS01(); /* update t/s page*/

  end

end // end PW0X-16003

// Format and display map
Function PW0X-22002()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0x-22004 also.*/
   /* ------------------------------------------------------------*/

  PW0XM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW0XW00.XXXMSGNO != 0) /* Message to display*/

      if (PW0XW00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW0XW00.XXXMSGNO);
      end /* Message number*/
    else
      PW0XM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PW0XM002.XXXMODID = PW0XW00.XXXMODID; /* Module identification*/

    set PW0XM002 alarm; /* Indicate sound alarm*/

  end

  converse PW0XM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0XW00.XXXMODID = " "; /* Module identification*/
  PW0XW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PW0X-22002

// Format and display map
Function PW0X-22004()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0x-22002 also.*/
   /* ------------------------------------------------------------*/

  PW0XM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW0XW00.XXXMSGNO != 0) /* Message to display*/

      if (PW0XW00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW0XW00.XXXMSGNO);
      end /* Message number*/
    else
      PW0XM004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PW0XM004.XXXMODID = PW0XW00.XXXMODID; /* Module identification*/

    set PW0XM004 alarm; /* Indicate sound alarm*/

  end

  converse PW0XM004 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0XW00.XXXMODID = " "; /* Module identification*/
  PW0XW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end PW0X-22004

// Format data to display
Function PW0X-22102()
   /* ------------------------------------------------------------*/
   /* Note:  Apply changes to pw0x-22104 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0XM002 initial; /* M001 input/output area*/

  PW0XW00.PW0XWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0XW02.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0XW02.XXXTSPAG != PW0XW02.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0XW02.XXXTSPAG > PW0XW02.TA5TSQIX) /* Desired greater highest*/
        PW0XW02.XXXTSPAG = PW0XW02.TA5TSQIX; /* Default to highest*/
      end

      PW0XW02.XX1 = PW0XW02.XXXTSPAG * 15; /* set end of page in array*/
      PW0XW02.XX1 = PW0XW02.XX1 - 14; /* set start of page in array*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0XM002.XXXLITPG skip; /* "PAGE" literal*/
    PW0XM002.XXXTSPAG = PW0XW02.XXXTSPAG; /* Current page*/
    set PW0XM002.XXXLITOF skip; /* "OF" literal*/
    PW0XM002.TA5TSQIX = PW0XW02.TA5TSQIX; /* Highest page*/

    PW0XW02.PW0XWIXS = 1; /* Initialize line index*/

    while (PW0XW02.PW0XWIXS <= 15 /* Until screen is full*/
     && PW0XW02.PK1CUOID[XX1] > 0) /* or end of data*/

      if (PW0XW02.PW0XWIXS == 1) /* First select field*/
        set PW0XM002.XHRCD[PW0XWIXS] cursor, normal; /* Position cursor*/
      else
        set PW0XM002.XHRCD[PW0XWIXS] normal; /* Unprotect*/
      end

      PW0XM002.XHRCD[PW0XWIXS] = PW0XW02.XHRCD[XX1];
      PW0XM002.PK1CUOID[PW0XWIXS] = PW0XW02.PK1CUOID[XX1];
      PW0XM002.PK1NORID[PW0XWIXS] = PW0XW02.PK1NORID[XX1];
      PW0XM002.KUMSTSNM[PW0XWIXS] = PW0XW02.KUMSTSNM[XX1];
      PW0XM002.PW0XMRMM[PW0XWIXS] = PW0XW02.PW0XMRMM[XX1];
      PW0XM002.PW0XMRDD[PW0XWIXS] = PW0XW02.PW0XMRDD[XX1];
      PW0XM002.PW0XMRYY[PW0XWIXS] = PW0XW02.PW0XMRYY[XX1];

      set PW0XM002.PW0XMRMM[PW0XWIXS] normal;
      set PW0XM002.PW0XMRDD[PW0XWIXS] normal;
      set PW0XM002.PW0XMRYY[PW0XWIXS] normal;
      set PW0XM002.PW0XMDOT[PW0XWIXS] skip; /* dot*/

      PW0XW02.PW0XWIXS = PW0XW02.PW0XWIXS + 1; /* Increment line index*/
      PW0XW02.XX1 = PW0XW02.XX1 + 1; /* increment array index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0XM002.XWHCD = PW0XW02.XWHCD; /* Warehouse code*/
  PW0XM002.XWHABRV = PW0XW02.XWHABRV; /* Warehouse desc*/



end // end PW0X-22102

// Format data to display
Function PW0X-22104()
   /* ------------------------------------------------------------*/
   /* Note:  Apply changes to pw0x-22102 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0XM004 initial; /* M004 input/output area*/

  PW0XW00.PW0XWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0XW02.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0XW02.XXXTSPAG != PW0XW02.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0XW02.XXXTSPAG > PW0XW02.TA5TSQIX) /* Desired greater highest*/
        PW0XW02.XXXTSPAG = PW0XW02.TA5TSQIX; /* Default to highest*/
      end

      PW0XW02.XX1 = PW0XW02.XXXTSPAG * 15; /* set end of page in array*/
      PW0XW02.XX1 = PW0XW02.XX1 - 14; /* set start of page in array*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0XM004.XXXLITPG skip; /* "PAGE" literal*/
    PW0XM004.XXXTSPAG = PW0XW02.XXXTSPAG; /* Current page*/
    set PW0XM004.XXXLITOF skip; /* "OF" literal*/
    PW0XM004.TA5TSQIX = PW0XW02.TA5TSQIX; /* Highest page*/

    PW0XW02.PW0XWIXS = 1; /* Initialize line index*/

    while (PW0XW02.PW0XWIXS <= 15 /* Until screen is full*/
     && PW0XW02.PK1CUOID[XX1] > 0) /* or end of data*/

      if (PW0XW02.PW0XWIXS == 1) /* First select field*/
        set PW0XM004.XHRCD[PW0XWIXS] cursor, normal; /* Position cursor*/
      else
        set PW0XM004.XHRCD[PW0XWIXS] normal; /* Unprotect*/
      end

      PW0XM004.XHRCD[PW0XWIXS] = PW0XW02.XHRCD[XX1];
      PW0XM004.PK1CUOID[PW0XWIXS] = PW0XW02.PK1CUOID[XX1];
      PW0XM004.PK1NORID[PW0XWIXS] = PW0XW02.PK1NORID[XX1];
      PW0XM004.KUMSTSNM[PW0XWIXS] = PW0XW02.KUMSTSNM[XX1];
      PW0XM004.PW0XMRMM[PW0XWIXS] = PW0XW02.PW0XMRMM[XX1];
      PW0XM004.PW0XMRDD[PW0XWIXS] = PW0XW02.PW0XMRDD[XX1];
      PW0XM004.PW0XMRYY[PW0XWIXS] = PW0XW02.PW0XMRYY[XX1];

      set PW0XM004.PW0XMRMM[PW0XWIXS] normal;
      set PW0XM004.PW0XMRDD[PW0XWIXS] normal;
      set PW0XM004.PW0XMRYY[PW0XWIXS] normal;
      set PW0XM004.PW0XMDOT[PW0XWIXS] skip; /* dot*/

      PW0XW02.PW0XWIXS = PW0XW02.PW0XWIXS + 1; /* Increment line index*/
      PW0XW02.XX1 = PW0XW02.XX1 + 1; /* increment array index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0XM004.XWHCD = PW0XW02.XWHCD; /* Warehouse code*/
  PW0XM004.XWHABRV = PW0XW02.XWHABRV; /* Warehouse desc*/



end // end PW0X-22104

// Verify data in line
Function PW0X-25202()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0x-25204 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* verify data entered in the line*/
   /* ------------------------------------------------------------*/

  if (PW0XM002.PW0XMRMM[PW0XWIXS] == 0 /* mm not entered*/
   && PW0XM002.PW0XMRDD[PW0XWIXS] == 0 /* dd not entered*/
   && PW0XM002.PW0XMRYY[PW0XWIXS] == 0) /* yy not entered*/

    set PW0XM002.PW0XMRYY[PW0XWIXS] bold; /* highlight*/
    set PW0XM002.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
    set PW0XM002.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
    PW0XW00.XXXMODID = "252"; /* module id*/
    converseLib.validationFailed(341); /* required field*/

  else

    /* ------------------------------------------------------------*/
     /* Validate a keyed release date.*/
    /* ------------------------------------------------------------*/

     /* Is date valid and fall on a work day?*/

    set TA9REC empty; /* clear date routine record*/
    TA9REC.TA9BEGMM = PW0XM002.PW0XMRMM[PW0XWIXS];
    TA9REC.TA9BEGDD = PW0XM002.PW0XMRDD[PW0XWIXS];
    TA9REC.TA9BEGYY = PW0XM002.PW0XMRYY[PW0XWIXS];
    if (PW0XM002.PW0XMRYY[PW0XWIXS] > 80)

      TA9REC.TA9BEGCC = 19; /* set century to 19*/

    else

      TA9REC.TA9BEGCC = 20; /* otherwise set century to 20*/

    end

    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

    if (sysVar.errorCode != "00000000") /* unsuccessful call*/

      converseLib.validationFailed(29); /* unexpected error*/
      PW0XW00.XXXMODID = "252"; /* Module id*/
      set PW0XM002.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
      set PW0XM002.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
      set PW0XM002.PW0XMRYY[PW0XWIXS] bold; /* highlight*/
      return;

    end

    if (TA9REC.TA9RTNFL != 0) /* bad return code*/

      if (TA9REC.TA9RTNFL == 6) /* invalid date*/

        converseLib.validationFailed(158); /* invalid date msg*/
        PW0XW00.XXXMODID = "252"; /* Module id*/
        set PW0XM002.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
        set PW0XM002.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
        set PW0XM002.PW0XMRYY[PW0XWIXS] bold; /* highlight*/

      else
        if (TA9REC.TA9RTNFL == 3) /* invalid work date*/

          converseLib.validationFailed(56); /* not work date msg*/
          PW0XW00.XXXMODID = "252"; /* Module id*/
          set PW0XM002.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
          set PW0XM002.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
          set PW0XM002.PW0XMRYY[PW0XWIXS] bold; /* highlight*/

        else

          converseLib.validationFailed(29); /* unexpected error*/
          PW0XW00.XXXMODID = "252"; /* Module id*/
          set PW0XM002.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
          set PW0XM002.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
          set PW0XM002.PW0XMRYY[PW0XWIXS] bold; /* highlight*/

        end
      end
    end

    if (TA9REC.TA9RTNFL == 0) /* no date routine error*/

      if (TA9REC.TA9BEGDT < PW0XW00.PW0XWCDT) /* release dt before today*/

        converseLib.validationFailed(55); /* date in past msg*/
        PW0XW00.XXXMODID = "252"; /* Module id*/
        set PW0XM002.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
        set PW0XM002.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
        set PW0XM002.PW0XMRYY[PW0XWIXS] bold; /* highlight*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate hold release code.*/
   /* ------------------------------------------------------------*/

  if (PW0XM002.XHRCD[PW0XWIXS] == " ") /* data not entered*/

    set PW0XM002.XHRCD[PW0XWIXS] cursor, bold; /* highlight*/
    PW0XW00.XXXMODID = "252"; /* module id*/
    converseLib.validationFailed(341); /* required field*/

  else

    if (PW0XM002.XHRCD[PW0XWIXS] in XHRTBL.XHRCD /* valid code*/
     && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
       /* next sentence*/
    else

      converseLib.validationFailed(57);
      set PW0XM002.XHRCD[PW0XWIXS] cursor, bold; /* highlight*/
      PW0XW00.XXXMODID = "252"; /* module id*/

    end
  end


end // end PW0X-25202

// Verify data in line
Function PW0X-25204()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0x-25202 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* verify data entered in the line*/
   /* ------------------------------------------------------------*/

  if (PW0XM004.PW0XMRMM[PW0XWIXS] == 0 /* mm not entered*/
   && PW0XM004.PW0XMRDD[PW0XWIXS] == 0 /* dd not entered*/
   && PW0XM004.PW0XMRYY[PW0XWIXS] == 0) /* yy not entered*/

    set PW0XM004.PW0XMRYY[PW0XWIXS] bold; /* highlight*/
    set PW0XM004.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
    set PW0XM004.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
    PW0XW00.XXXMODID = "252"; /* module id*/
    converseLib.validationFailed(341); /* required field*/

  else

    /* ------------------------------------------------------------*/
     /* Validate a keyed release date.*/
    /* ------------------------------------------------------------*/

     /* Is date valid and fall on a work day?*/

    set TA9REC empty; /* clear date routine record*/
    TA9REC.TA9BEGMM = PW0XM004.PW0XMRMM[PW0XWIXS];
    TA9REC.TA9BEGDD = PW0XM004.PW0XMRDD[PW0XWIXS];
    TA9REC.TA9BEGYY = PW0XM004.PW0XMRYY[PW0XWIXS];
    if (PW0XM004.PW0XMRYY[PW0XWIXS] > 80)

      TA9REC.TA9BEGCC = 19; /* set century to 19*/

    else

      TA9REC.TA9BEGCC = 20; /* otherwise set century to 20*/

    end

    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

    if (sysVar.errorCode != "00000000") /* unsuccessful call*/

      converseLib.validationFailed(29); /* unexpected error*/
      PW0XW00.XXXMODID = "252"; /* Module id*/
      set PW0XM004.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
      set PW0XM004.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
      set PW0XM004.PW0XMRYY[PW0XWIXS] bold; /* highlight*/
      return;

    end

    if (TA9REC.TA9RTNFL != 0) /* bad return code*/

      if (TA9REC.TA9RTNFL == 6) /* invalid date*/

        converseLib.validationFailed(158); /* invalid date msg*/
        PW0XW00.XXXMODID = "252"; /* Module id*/
        set PW0XM004.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
        set PW0XM004.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
        set PW0XM004.PW0XMRYY[PW0XWIXS] bold; /* highlight*/

      else
        if (TA9REC.TA9RTNFL == 3) /* invalid work date*/

          converseLib.validationFailed(56); /* not work date msg*/
          PW0XW00.XXXMODID = "252"; /* Module id*/
          set PW0XM004.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
          set PW0XM004.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
          set PW0XM004.PW0XMRYY[PW0XWIXS] bold; /* highlight*/

        else

          converseLib.validationFailed(29); /* unexpected error*/
          PW0XW00.XXXMODID = "252"; /* Module id*/
          set PW0XM004.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
          set PW0XM004.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
          set PW0XM004.PW0XMRYY[PW0XWIXS] bold; /* highlight*/

        end
      end
    end

    if (TA9REC.TA9RTNFL == 0) /* no date routine error*/

      if (TA9REC.TA9BEGDT < PW0XW00.PW0XWCDT) /* release dt before today*/

        converseLib.validationFailed(55); /* date in past msg*/
        PW0XW00.XXXMODID = "252"; /* Module id*/
        set PW0XM004.PW0XMRMM[PW0XWIXS] cursor, bold; /* highlight*/
        set PW0XM004.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
        set PW0XM004.PW0XMRYY[PW0XWIXS] bold; /* highlight*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate hold release code.*/
   /* ------------------------------------------------------------*/

  if (PW0XM004.XHRCD[PW0XWIXS] == " ") /* data not entered*/

    set PW0XM004.XHRCD[PW0XWIXS] cursor, bold; /* highlight*/
    PW0XW00.XXXMODID = "252"; /* module id*/
    converseLib.validationFailed(341); /* required field*/

  else

    if (PW0XM004.XHRCD[PW0XWIXS] in XHRTBL.XHRCD /* valid code*/
     && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
       /* next sentence*/
    else

      converseLib.validationFailed(57);
      set PW0XM004.XHRCD[PW0XWIXS] cursor, bold; /* highlight*/
      PW0XW00.XXXMODID = "252"; /* module id*/

    end
  end


end // end PW0X-25204

// Validate entry
Function PW0X000()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PW0I" /* from allowed application*/
   && COMMAREA.CAFROMAP != "PW0J" 
   && COMMAREA.CAFROMAP != "PW0M" 
   && COMMAREA.CAFROMAP != "PW0N" 
   && COMMAREA.CAFROMAP != "PW0O" 
   && COMMAREA.CAFROMAP != "PW0P" 
   && COMMAREA.CAFROMAP != "PW0Q" 
   && COMMAREA.CAFROMAP != "PW0R" 
   && COMMAREA.CAFROMAP != "PW0S" 
   && COMMAREA.CAFROMAP != "PW0T" 
   && COMMAREA.CAFROMAP != "PW0U" 
   && COMMAREA.CAFROMAP != "PW0V" 
   && COMMAREA.CAFROMAP != "PW0W" 
   && COMMAREA.CAFROMAP != "PW0X" 
   && COMMAREA.CAFROMAP != "PW06" 
   && COMMAREA.CAFROMAP != "PW07" 
   && COMMAREA.CAFROMAP != "PW08" 
   && COMMAREA.CAFROMAP != "GD00")

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether passed warehouse is valid...*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* Validate warehouse*/


end // end PW0X000

// Main process
Function PW0X001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWSWD == "1") /* Map 1 was requested*/

    PW0X100(); /* Display map 1*/

  else

    if (PW0XW00.PW0XWSWD == "2") /* Map 2 was requested*/

      PW0X200(); /* Display map 2*/

    else

      /* ------------------------------------------------------------*/
       /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      PW0XW00.XXXMODID = "001"; /* Module identification*/
      PW0XW00.XXXMSGNO = 29; /* Unexpected error occurred*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
      TA1REC.TA1MAPNO = PW0XW00.PW0XWSWD; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
      TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      /* ------------------------------------------------------------*/
       /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "PK0A"; /* TO application*/

      XSPKS01(); /* Exit to another application*/

      /* ------------------------------------------------------------*/
       /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end PW0X001

// Main process to display map 1
Function PW0X100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0X110(); /* Obtain the data to display*/

  PW0X120(); /* Format and display the map*/

  PW0X130(); /* Check attention identifier*/

  PW0X140(); /* Reset fields to normal intensity*/

  PW0X150(); /* Verify the entered data*/

  PW0X160(); /* Process valid input request*/


end // end PW0X100

// Obtain data to display
Function PW0X110()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0XW00.XXXTSLEN = 591; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.XXXMSGNO == 0) /* No message to display*/
    PW0XW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0X111(); /* Purge any temporary storage*/

  if (PKWREC.PKWSELSW == "PP") /* pick planning*/

    PW0XW01.XWHCD = PW0XM001.XWHCD; /* warehouse code*/
    PW0XW01.XDVCD = PW0XM001.XDVCD; /* division code*/
    PW0XW01.XBCCD = PW0XM001.XBCCD; /* brand code*/

    PW0XW01.PW0XMTMM = PW0XM001.PW0XMTMM; /* move dnsb month*/
    PW0XW01.PW0XMTDD = PW0XM001.PW0XMTDD; /* move dnsb day*/
    PW0XW01.PW0XMTYY = PW0XM001.PW0XMTYY; /* move dnsb year*/
    PW0XW01.PW0XMFMM = PW0XM001.PW0XMFMM; /* move dnsb month*/
    PW0XW01.PW0XMFDD = PW0XM001.PW0XMFDD; /* move dnsb day*/
    PW0XW01.PW0XMFYY = PW0XM001.PW0XMFYY; /* move dnsb year*/

    PW0XW01.PW0XMSEL = PW0XM001.PW0XMSEL; /* Selection code*/

  else /* picking*/

    PW0XW01.XWHCD = PW0XM003.XWHCD; /* warehouse code*/
    PW0XW01.XDVCD = PW0XM003.XDVCD; /* division code*/
    PW0XW01.XBCCD = PW0XM003.XBCCD; /* brand code*/

    PW0XW01.PW0XMTMM = PW0XM003.PW0XMTMM; /* move dnsb month*/
    PW0XW01.PW0XMTDD = PW0XM003.PW0XMTDD; /* move dnsb day*/
    PW0XW01.PW0XMTYY = PW0XM003.PW0XMTYY; /* move dnsb year*/
    PW0XW01.PW0XMFMM = PW0XM003.PW0XMFMM; /* move dnsb month*/
    PW0XW01.PW0XMFDD = PW0XM003.PW0XMFDD; /* move dnsb day*/
    PW0XW01.PW0XMFYY = PW0XM003.PW0XMFYY; /* move dnsb year*/

    PW0XW01.PW0XMSEL = PW0XM003.PW0XMSEL; /* Selection code*/

  end

  PW0XW00.PW0XMFCT = 0; /* zero out totals*/
  PW0XW00.PW0XMRPT = 0; /* ditto*/
  PW0XW00.PW0XMTOT = 0; /* ditto*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PW0X112(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWIXM = 1; /* Display line index*/
  PW0XW00.PW0XWSWC = "N"; /* End of cursor switch*/

  while (PW0XW00.PW0XWSWC == "N") /* Until end of cursor*/

    PW0X113(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, retrieve corresponding data from*/
    /* pool header and carrier hold tables.*/
    /* ------------------------------------------------------------*/

    if (PW0XW00.PW0XWSWC == "N") /* Not end of cursor*/
      PW0XW00.PW0XWSWP = "N"; /* clear process switch*/
      PW0X114(); /* select order w/ carrier not on hold*/

      /* ------------------------------------------------------------*/
      /* If order qualifies, save the data in display storage.*/
      /* ------------------------------------------------------------*/

      if (PW0XW00.PW0XWSWP == "Y") /* okay to process order*/
        PW0X115(); /* Save data in display storage*/

        /* ------------------------------------------------------------*/
        /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (PW0XW00.PW0XWIXM > 10) /* Page is full*/

          PW0X116(); /* Add page to temporary storage*/

          set PW0XW01 empty; /* clear display storage*/
          PW0XW00.PW0XWIXM = 1; /* Display line index*/

        end
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWIXM > 1) /* Page was formatted*/
    PW0X116(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set - Dpick.Vphdit01*/
   /* ------------------------------------------------------------*/

  PW0X117(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWF = "Y"; /* format screen*/
  if (PW0XW00.TA5TSQIX == 0) /* No pages formatted*/

    PW0XW00.XXXMODID = "100"; /* Module identification*/
    PW0XW00.XXXMSGNO = 31; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWR = "N"; /* Request for data switch*/


end // end PW0X110

// Purge temporary storage
Function PW0X111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0XW01 empty; /* M001 display storage*/

  PW0XW00.PW0XWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0XW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0XW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0XW00.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0X111

// Open cursor in DPICK.VPOOLH01
Function PW0X112()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select set on DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0XW01.XWHCD; /* warehouse*/
  PK4REC.XDVCD = PW0XW01.XDVCD; /* division code*/
  PK4REC.XBCCD = PW0XW01.XBCCD; /* brand code*/
  PK4REC.OP1DSBDT = -1; /* don't ship before date*/
  PK4REC.PK4ORHLD = "*"; /* order hold*/
  PK4REC.PK4CUHLD = "*"; /* customer hold*/
  PK4REC.TF1CARCD = "*"; /* carrier code*/
  PK4REC.OP1SPHDF = "*"; /* spec handle flag*/
  PK4REC.XGPCD = "*"; /* general product code*/

  if (PW0XM001.PW0XMSEL == "S" /* pick planning selection code*/
   || PW0XM003.PW0XMSEL == "S") /* picking selection code*/
    if (PW0XW00.PW0XWRUN == " ") /* run mode is picking*/
      PK4REC.PK4SLIND = "S";
    else
      PK4REC.PK4SLIND = "*"; /* if pick planning then wildcard*/
    end
  else
    PK4REC.PK4SLIND = "*"; /* else wildcard it*/
  end

  try
    call "IO1720" ("S7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0X"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0X112

// Fetch row in DPICK.VPOOLH01
Function PW0X113()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* fetch next DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/


  try
    call "IO1720" ("N7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
      PW0XW00.PW0XWSWC = "Y"; /* end of cursor*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0X"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0X113

// Process Order
Function PW0X114()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* clear process flag and check dnsb date and reject and fetch*/
   /* next order if not in dnsb range entered.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWP = " "; /* clear process flag*/

  if (PK4REC.OP1DSBDT > PW0XW00.PW0XWTDT) /* "to" date*/

    PW0XW00.PW0XWSWP = "N"; /* don't process this order*/
    return;

  else
    if (PK4REC.OP1DSBDT < PW0XW00.PW0XWFDT) /* "from" date*/

      PW0XW00.PW0XWSWP = "N"; /* don't process this order*/
      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* if stock transfer flag not 'Y' reject order and return and*/
   /* fetch next order, otherwise continue.*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4STKTF != "Y")

    PW0XW00.PW0XWSWP = "N"; /* don't process this order*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* if division code is wild card, reject order which is*/
   /* ColeHaan.*/
   /* ------------------------------------------------------------*/

  if (PW0XW01.XBCCD == "*"
   && PK4REC.XBCCD == "08")

    PW0XW00.PW0XWSWP = "N"; /* don't process this order*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* if 'A'll was selected and order not on hold continue.*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.PW0XMSEL == "A" /* pick planning 'a'll selected*/
   || PW0XM003.PW0XMSEL == "A") /* picking 'a'll selected*/
    if (PW0XW00.PW0XWRUN == " ") /* picking run mode*/
      if (PK4REC.PK4SLIND == " " /* valid status for selection criteria*/
       || PK4REC.PK4SLIND == "S") /* ditto*/
        PW0XS12(); /* get carrier hold record*/
      else
        PW0XW00.PW0XWSWP = "N"; /* don't process order*/
        return; /* return to process next VPOOLH01*/
      end
    else
      if (PK4REC.PK4SLIND == " " /* valid status for selection criteria*/
       || PK4REC.PK4SLIND == "P" /* valid status too*/
       || PK4REC.PK4SLIND == "S") /* valid status too*/
        PW0XS12(); /* get carrier hold record*/
      else
        PW0XW00.PW0XWSWP = "N"; /* don't process order*/
        return; /* return to process next VPOOLH01*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if 'S'elected to pick was selected and order not on hold*/
   /* continue.*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.PW0XMSEL == "S" /* selected data for pick planning*/
   || PW0XM003.PW0XMSEL == "S") /* selected data for picking*/
    if (PW0XW00.PW0XWRUN == "P") /* planning run mode*/
      if (PK4REC.PK4SLIND == "S" /* ditto*/
       || PK4REC.PK4SLIND == "P") /* valid status too*/
        PW0XS12(); /* get carrier hold record*/
      else
        PW0XW00.PW0XWSWP = "N"; /* don't process order*/
        return; /* return to process next VPOOLH01*/
      end
    else
      if (PW0XM001.PW0XMSEL == "S")
        PW0XS12();
      else
        PW0XW00.PW0XWSWP = "N"; /* don't process order*/
        return; /* return to process next VPOOLH01*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if 'N'ot selected to pick was selected and order not on*/
   /* hold continue.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP") /* pick planning*/

    if (PW0XM001.PW0XMSEL == "N")
      if (PK4REC.PK4SLIND == " ") /* valid status*/
        PW0XS12(); /* get carrier hold record*/
      else
        PW0XW00.PW0XWSWP = "N"; /* don't process order*/
        return; /* return to process next VPOOLH01*/
      end
    end

  else /* picking*/

    if (PW0XM003.PW0XMSEL == "N")
      if (PK4REC.PK4SLIND == " ") /* valid status*/
        PW0XS12(); /* get carrier hold record*/
      else
        PW0XW00.PW0XWSWP = "N"; /* don't process order*/
        return; /* return to process next VPOOLH01*/
      end
    end

  end

   /* --------------------------------------------------------*/
   /* if process flag is no, due to bad carrier hold date,*/
   /* reject here*/
   /* --------------------------------------------------------*/

  if (PW0XW00.PW0XWSWP == "N")

    return;

  end

   /* --------------------------------------------------------*/
   /* Still here? Check if order hold flag is 'y'. If so,*/
   /* spin thru order hold file to see if there are any*/
   /* records for order with a rlse date > todays date.*/
   /* --------------------------------------------------------*/

  if (PK4REC.PK4ORHLD == "Y")

    PW0XS13(); /* check rlse date*/
    if (PW0XW00.PW0XWSWP == "N")

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* Still here? Check if cust hold flag is 'y'. If so,*/
   /* spin thru customer hold file to see if there are any*/
   /* records for order with a rlse date > todays date.*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4CUHLD == "Y")

    PW0XS14(); /* check rlse date*/
    if (PW0XW00.PW0XWSWP == "N")

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* select customer name from customer table.*/
   /* ------------------------------------------------------------*/

  PW0XS15(); /* select unique DPICK.VPKCUS01*/

  PW0XW00.PW0XWSWP = "Y"; /* okay to process order*/


end // end PW0X114

// Save data in diplay storage
Function PW0X115()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWIXM == 1) /* and first line on page*/

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/

      PW0XW01.XWHCD = PW0XM001.XWHCD; /* Warehouse code*/
      PW0XW01.XDVCD = PW0XM001.XDVCD; /* Division code*/
      PW0XW01.XBCCD = PW0XM001.XBCCD; /* Brand code*/
      PW0XW01.PW0XMFMM = PW0XM001.PW0XMFMM; /* DNSB date - MM*/
      PW0XW01.PW0XMFDD = PW0XM001.PW0XMFDD; /* DNSB date - dd*/
      PW0XW01.PW0XMFYY = PW0XM001.PW0XMFYY; /* DNSB date - yy*/
      PW0XW01.PW0XMTMM = PW0XM001.PW0XMTMM; /* DNSB date - MM*/
      PW0XW01.PW0XMTDD = PW0XM001.PW0XMTDD; /* DNSB date - dd*/
      PW0XW01.PW0XMTYY = PW0XM001.PW0XMTYY; /* DNSB date - yy*/
      PW0XW01.PW0XMSEL = PW0XM001.PW0XMSEL; /* Selection code*/

    else /* picking*/

      PW0XW01.XWHCD = PW0XM003.XWHCD; /* Warehouse code*/
      PW0XW01.XDVCD = PW0XM003.XDVCD; /* Division code*/
      PW0XW01.XBCCD = PW0XM003.XBCCD; /* Brand code*/
      PW0XW01.PW0XMFMM = PW0XM003.PW0XMFMM; /* DNSB date - MM*/
      PW0XW01.PW0XMFDD = PW0XM003.PW0XMFDD; /* DNSB date - dd*/
      PW0XW01.PW0XMFYY = PW0XM003.PW0XMFYY; /* DNSB date - yy*/
      PW0XW01.PW0XMTMM = PW0XM003.PW0XMTMM; /* DNSB date - MM*/
      PW0XW01.PW0XMTDD = PW0XM003.PW0XMTDD; /* DNSB date - dd*/
      PW0XW01.PW0XMTYY = PW0XM003.PW0XMTYY; /* DNSB date - yy*/
      PW0XW01.PW0XMSEL = PW0XM003.PW0XMSEL; /* Selection code*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PW0XW01.PW0XMACT[PW0XWIXM] = " "; /* Action code*/
  PW0XW01.XPPCD[PW0XWIXM] = PK4REC.XPPCD; /* priority code*/
  PW0XW01.PK1CUOID[PW0XWIXM] = PK4REC.PK1CUOID; /* Cust order number*/
  PW0XW01.PK1NORID[PW0XWIXM] = PK4REC.PK1NORID; /* Nike order number*/
  PW0XW01.KUMSTSNM[PW0XWIXM] = PK6REC.KUMSTSNM; /* cust name*/
  PW0XW00.PW0XWHDT = PK4REC.OP1DSBDT; /* date hold*/
  PW0XW01.PW0XMBMM[PW0XWIXM] = PW0XW00.PW0XWHMM; /* dsnb mm*/
  PW0XW01.PW0XMBDD[PW0XWIXM] = PW0XW00.PW0XWHDD; /* dsnb dd*/
  PW0XW01.PW0XMBYY[PW0XWIXM] = PW0XW00.PW0XWHYY; /* dsnb yy*/
  PW0XW00.PW0XWHDT = PK4REC.OP1DSADT; /* date hold*/
  PW0XW01.PW0XMAMM[PW0XWIXM] = PW0XW00.PW0XWHMM; /* dsna mm*/
  PW0XW01.PW0XMADD[PW0XWIXM] = PW0XW00.PW0XWHDD; /* dsna dd*/
  PW0XW01.PW0XMAYY[PW0XWIXM] = PW0XW00.PW0XWHYY; /* dsna yy*/
  PW0XW00.PW0XWHDT = PK4REC.IN7STQDT; /* date hold*/
  PW0XW01.PW0XMEMM[PW0XWIXM] = PW0XW00.PW0XWHMM; /* eta mm*/
  PW0XW01.PW0XMEDD[PW0XWIXM] = PW0XW00.PW0XWHDD; /* eta dd*/
  PW0XW01.PW0XMEYY[PW0XWIXM] = PW0XW00.PW0XWHYY; /* eta yy*/
  PW0XW01.PK4ORDFC[PW0XWIXM] = PK4REC.PK4ORDFC; /* full case*/
  PW0XW01.PK4ORDRP[PW0XWIXM] = PK4REC.PK4ORDRP; /* repack*/
  PW0XW01.PW0XMFRT[PW0XWIXM] = PK4REC.PK4ORDFC + PK4REC.PK4ORDRP;
  PW0XW01.PK4SLIND[PW0XWIXM] = PK4REC.PK4SLIND; /* select indicator*/
  PW0XW01.PK4ORHLD[PW0XWIXM] = PK4REC.PK4ORHLD; /* hold flag*/

   /* ------------------------------------------------------------*/
   /* hold flag is 'Y' or 'N' for display*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4ORHLD == " ") /* hold flag*/

    PW0XW01.PK4ORHLD[PW0XWIXM] = "N"; /* set to 'n'*/

  end

   /* ------------------------------------------------------------*/
   /* * selction indicator is 'Y' or 'N' for display*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4SLIND == "S" /* status is 'S'elected*/
   || PK4REC.PK4SLIND == "P" /* status is selected*/
   || PK4REC.PK4SLIND == "L") /* status is selected*/

    PW0XW01.PK4SLIND[PW0XWIXM] = "Y"; /* Selection code*/

  else

    PW0XW01.PK4SLIND[PW0XWIXM] = "N"; /* set selection code to 'n'*/

  end

   /* ------------------------------------------------------------*/
   /* calculate totals.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XMFCT = PW0XW00.PW0XMFCT + PK4REC.PK4ORDFC; /* fc total*/
  PW0XW00.PW0XMRPT = PW0XW00.PW0XMRPT + PK4REC.PK4ORDRP; /* rp total*/
  PW0XW00.PW0XMTOT = PW0XW00.PW0XMFCT + PW0XW00.PW0XMRPT; /* grand tot*/

  PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM + 1; /* Increment line index*/


end // end PW0X115

// Add page to temporary storage
Function PW0X116()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0XW01.XXXTSLEN = PW0XW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0XW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PW0XW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0XW00.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0X116

// Close cursor in DPICK.VPOOLH01
Function PW0X117()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("C7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "117"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0X117

// Format and display map
Function PW0X120()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0XW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Call proper module to format and display correct map.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP") /* pick planning*/
    PW0X-12001();
  else /* picking*/
    PW0X-12003();
  end

end // end PW0X120

// Check attention identifier
Function PW0X130()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0XW00.PW0XWSWR == "Y") /* Request for data*/
      set PW0XW01 empty; /* M001 display storage*/
    end

    PW0XW00.PW0XWSWF = "Y"; /* Format the map switch*/
    PW0XW00.PW0XWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0XM001.CATOAP > " " /* FAST PATH was requested*/
   || PW0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PW0XM001.CATOAP == "PW0X" /* FAST PATH TO SELF*/
       || PW0XM001.CATOAP == "PW0X") /* FAST PATH TO SELF*/

        converseLib.validationFailed(1); /* INVALID FAST PATH OPTION*/
        set PW0XM001.CATOAP cursor, bold; /* HIGHLIGHT*/
        set PW0XM003.CATOAP cursor, bold; /* HIGHLIGHT*/
        exit stack;

      end

      PW0X111(); /* Purge temporary storage*/

      XSPKS01(); /* Exit to another application*/

      set PW0XM003.CATOAP cursor, bold; /* Highlight*/
      PW0XW00.PW0XWSWR = "Y";
      PW0XW00.PW0XWSWF = "Y";

    else

      PW0XW00.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(13); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* xfer to gd00*/
   || converseVar.eventKey is pf3  /* exit to previous screen*/
   || converseVar.eventKey is pf4  /* xfer to pk0a*/
   || converseVar.eventKey is pf5  /* xfer to pw0r*/
   || converseVar.eventKey is pf13 /* xfer to pw0j*/
   || converseVar.eventKey is pf14 /* xfer to pk0k or pk0t*/
   || converseVar.eventKey is pf15 /* xfer to pk0l or pk0u*/
   || converseVar.eventKey is pf16 /* xfer to pw0m*/
   || converseVar.eventKey is pf17 /* xfer to pw0p*/
   || converseVar.eventKey is pf18 /* xfer to pw0x*/
   || converseVar.eventKey is pf19 /* xfer to pw06*/
   || converseVar.eventKey is pf20) /* xfer to pw08*/
    /*  */
    if (PKWREC.PKWSELSW == "PP") /* pick planning*/

      if (converseVar.eventKey is pf1) /* PF1 was pressed*/
        COMMAREA.CAITEM = "PW0XM001"; /* Application find code*/
      end

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "PW0W"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      end

    else /* picking*/

      if (converseVar.eventKey is pf1) /* PF1 was pressed*/
        COMMAREA.CAITEM = "PW0XM003"; /* Application find code*/
      end

      if (converseVar.eventKey is pf3) /* PF3 was pressed*/
        COMMAREA.CATOAP = "PW0V"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      end

    end
    /*  */
    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PW0J"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* PICKING*/
        COMMAREA.CATOAP = "PK0K"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      else /* pick planning*/
        COMMAREA.CATOAP = "PK0T"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      end
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PK0L"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      else /* pick planning*/
        COMMAREA.CATOAP = "PK0U"; /* TO application*/
        PKWREC.PKWARRAY = PWKREC.PWKARRAY;
      end
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "PW0M"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PW0P"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      COMMAREA.CATOAP = "PW06"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    if (converseVar.eventKey is pf20) /* PF20 was pressed*/
      COMMAREA.CATOAP = "PW08"; /* TO application*/
      PKWREC.PKWARRAY = PWKREC.PWKARRAY;
    end

    PW0X111(); /* Purge temporary storage*/

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0XW00.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0X130

// Reset highlighted fields
Function PW0X140()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP") /* pick planning*/

    set PW0XM001.PW0XMFMM initialAttributes; /* "from" mm*/
    set PW0XM001.PW0XMFDD initialAttributes; /* "from" dd*/
    set PW0XM001.PW0XMFYY initialAttributes; /* "from" yy*/
    set PW0XM001.PW0XMTMM initialAttributes; /* "to" mm*/
    set PW0XM001.PW0XMTDD initialAttributes; /* "to" dd*/
    set PW0XM001.PW0XMTYY initialAttributes; /* "to" yy*/
    set PW0XM001.PW0XMSEL initialAttributes; /* Selection*/
    set PW0XM001.XDVCD initialAttributes; /* Division code*/
    set PW0XM001.XBCCD initialAttributes; /* Brand code*/

    PW0XW00.PW0XWIXM = 1; /* Initialize line index*/

    while (PW0XW00.PW0XWIXM <= 10 /* Until end of lines*/
     && PW0XM001.PK1CUOID[PW0XWIXM] > 0) /* or end of display*/

      set PW0XM001.PW0XMACT[PW0XWIXM] normal; /* Reset select flag*/
      set PW0XM001.XPPCD[PW0XWIXM] normal; /* Reset hold reason code*/

      PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM + 1; /* Increment line index*/

    end

    set PW0XM001.CATOAP initialAttributes; /* TO application*/
    set PW0XM001.CAITEM initialAttributes; /* Application data*/

  else /* picking*/

    set PW0XM003.PW0XMFMM initialAttributes; /* "from" mm*/
    set PW0XM003.PW0XMFDD initialAttributes; /* "from" dd*/
    set PW0XM003.PW0XMFYY initialAttributes; /* "from" yy*/
    set PW0XM003.PW0XMTMM initialAttributes; /* "to" mm*/
    set PW0XM003.PW0XMTDD initialAttributes; /* "to" dd*/
    set PW0XM003.PW0XMTYY initialAttributes; /* "to" yy*/
    set PW0XM003.PW0XMSEL initialAttributes; /* Selection*/
    set PW0XM003.XDVCD initialAttributes; /* Division code*/
    set PW0XM003.XBCCD initialAttributes; /* Brand code*/

    PW0XW00.PW0XWIXM = 1; /* Initialize line index*/

    while (PW0XW00.PW0XWIXM <= 10 /* Until end of lines*/
     && PW0XM003.PK1CUOID[PW0XWIXM] > 0) /* or end of display*/

      set PW0XM003.PW0XMACT[PW0XWIXM] normal; /* Reset select flag*/
      set PW0XM003.XPPCD[PW0XWIXM] normal; /* Reset hold reason code*/

      PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM + 1; /* Increment line index*/

    end

    set PW0XM001.CATOAP initialAttributes; /* TO application*/
    set PW0XM001.CAITEM initialAttributes; /* Application data*/

  end

end // end PW0X140

// Verify entered data
Function PW0X150()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Call proper module to edit data on the correct map.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP") /* pick planning*/

    PW0X-15001();

  else /* picking*/

    PW0X-15003();

  end

end // end PW0X150

// Verify scroll request
Function PW0X151()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0XW00.XXXTSPAG < 2)       /* and no previous pages*/

    PW0XW00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0XW00.XXXTSPAG >= PW0XW00.TA5TSQIX) /* and no more pages*/

    PW0XW00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if selection was changed.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP") /* pick planning*/

    if (PW0XM001.PW0XMSEL != PW0XW01.PW0XMSEL) /* Selection changed*/

      PW0XW00.XXXMODID = "151"; /* Module identification*/
      set PW0XM001.PW0XMSEL cursor, bold; /* Highlight*/
      converseLib.validationFailed(39); /* Field may not change*/

    end

  else /* picking*/

    if (PW0XM003.PW0XMSEL != PW0XW01.PW0XMSEL) /* Selection changed*/

      PW0XW00.XXXMODID = "151"; /* Module identification*/
      set PW0XM003.PW0XMSEL cursor, bold; /* Highlight*/
      converseLib.validationFailed(39); /* Field may not change*/

    end

  end


end // end PW0X151

// Process valid request
Function PW0X160()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a search key was entered, request the data to display.*/
   /* and set up date ranges for comparisons in processing*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP") /* Pick planning*/

    PW0X-16001();

  else /* Picking*/

    PW0X-16003();

  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/

    if (PKWREC.PKWSELSW == "PP") /* Pick planning*/
      if (PW0XM001.PW0XMSEL != PW0XW01.PW0XMSEL) /* Selection changed*/
        PW0XW00.PW0XWSWR = "Y"; /* Request for data switch*/
        return; /* Return to previous process*/
      end
    else /* Picking*/
      if (PW0XM003.PW0XMSEL != PW0XW01.PW0XMSEL) /* Selection changed*/
        PW0XW00.PW0XWSWR = "Y"; /* Request for data switch*/
        return; /* Return to previous process*/
      end
    end

    if (PW0XW00.PW0XWSWR != "Y") /* search key was not changed*/

      if (PW0XW00.PW0XWSWU != "Y") /* no updates for current data*/
        return; /* Return to previous process*/
      else

        XX0XS01(); /* get system date and time*/

        PW0X161(); /* perform updates*/

        PW0XW00.PW0XWSWU = "N"; /* clear change switch*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* commit all changes*/

        if (PW0XW00.PW0XWHDX > 1 /* there were orders to put on hold*/
         || PW0XW00.PW0XWIDX > 1) /* there were orders to inquire on*/

          if (PW0XW00.PW0XWHDX > 1) /* there were orders to hold*/

            PW0XW00.PW0XWSWD = "2"; /* display map 2*/
            PW0XW00.PW0XWSWR = "Y"; /* request for data switch*/
            return;

          end

          if (PW0XW00.PW0XWIDX > 1) /* orders to inquire on*/

            PWJREC.XWHCD = PKWREC.XWHCD;
            PWJREC.XWHABRV = PKWREC.XWHABRV;
            PW0X166(); /* xfer to PW0I*/

          end

        else

          PW0XW00.XXXTSPAG = 1; /* force display to first page*/

        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0XW00.XXXTSPAG = PW0XW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0XW00.XXXTSPAG = PW0XW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end



end // end PW0X160

// Process lines of data
Function PW0X161()
   /* ------------------------------------------------------------*/
   /* Process data*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWIXM = 1; /* initialize index*/
  PW0XW00.PW0XWHDX = 1; /* initialize index for hold array*/
  PW0XW00.PW0XWIDX = 1; /* initialize index for inquiry array*/
  PW0XW00.XXXTSPAG = 1; /* start at first page of t/s*/
  TA5REC.TA5TSQIX = PW0XW00.XXXTSPAG; /* tell it which page to get*/
  PW0XS02(); /* read first t/s page*/

  while (PW0XW00.XXXTSPAG <= PW0XW00.TA5TSQIX) /* while there is still data*/

    if (PW0XW01.PK1CUOID[PW0XWIXM] != 0) /* if there is data on this line*/

      if (PW0XW01.PW0XMACT[PW0XWIXM] == "A") /* select to pick*/

        PW0X162(); /* select to pick routine*/

      end

      if (PW0XW01.PW0XMACT[PW0XWIXM] == "D") /* deselect order*/

        PW0X163(); /* deselect routine*/

      end

      if (PW0XW01.PW0XMACT[PW0XWIXM] == "H") /* place order on hold*/

        PW0X164(); /* hold order routine*/

      end

      if (PW0XW01.PW0XMACT[PW0XWIXM] == "I") /* inquire on order*/

        PW0X165(); /* order inquiry routine*/

      end

    end
    PW0XW00.PW0XWIXM = PW0XW00.PW0XWIXM + 1;
    if (PW0XW00.PW0XWIXM > 10) /* if index > 10*/

      PW0XS01(); /* update current t/s page*/
      PW0XW00.XXXTSPAG = PW0XW00.XXXTSPAG + 1; /* increment t/s page number*/
      if (PW0XW00.XXXTSPAG <= PW0XW00.TA5TSQIX) /* still have more t/s pages*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit();
                                   /* commit db updates for prior page data*/
        TA5REC.TA5TSQIX = PW0XW00.XXXTSPAG; /* tell it which page to get*/
        PW0XS02(); /* get next t/s page*/
        PW0XW00.PW0XWIXM = 1; /* reset index*/

      end
    end
  end


end // end PW0X161

// Select order for picking
Function PW0X162()
   /* ------------------------------------------------------------*/
   /* Select order for picking*/
   /* ------------------------------------------------------------*/

  PW0XS10(); /* select unique pool header*/

  if (PW0XW00.PW0XWRUN == " ") /* if run mode is picking*/
    PK4REC.PK4SLIND = "S"; /* set status to 's'*/
  else
    PK4REC.PK4SLIND = "P"; /* otherwise, set to 'p'*/
  end

  PK4REC.XPPCD = PW0XW01.XPPCD[PW0XWIXM];
  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0XS11(); /* update pool header*/

  PW0XW01.PK4SLIND[PW0XWIXM] = "Y";

   /* ------------------------------------------------------------*/
   /* See if row already exists in Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW0XW01.XWHCD;
  PKHREC.PK1CUOID = PW0XW01.PK1CUOID[PW0XWIXM];
  PKHREC.PK1NORID = PW0XW01.PK1NORID[PW0XWIXM];
  PKHREC.PKURUNMD = PW0XW00.PW0XWRUN;

  PW0XS61(); /* select unique Dpick.Vselor01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/

    if (PW0XW00.XXXMSGNO == 0) /* if no other warning msgs*/

      PW0XW00.XXXMSGNO = 44; /* warning msg*/
      PW0XW00.XXXMODID = "162"; /* module id*/

    end
    PW0XW01.PW0XMACT[PW0XWIXM] = " "; /* clear action code*/
    return; /* return to calling process, dont need to add record*/

  end

   /* ------------------------------------------------------------*/
   /* Now, insert row into Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW0XW01.XWHCD;
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.XBCCD = PK4REC.XBCCD;
  PKHREC.PK1CUOID = PW0XW01.PK1CUOID[PW0XWIXM];
  PKHREC.PK1NORID = PW0XW01.PK1NORID[PW0XWIXM];
  PW0XW00.PW0XWHMM = PW0XW01.PW0XMBMM[PW0XWIXM];
  PW0XW00.PW0XWHDD = PW0XW01.PW0XMBDD[PW0XWIXM];
  PW0XW00.PW0XWHYY = PW0XW01.PW0XMBYY[PW0XWIXM];
   /* ------Y2K OUT------*/
   /* MOVE PW0XW00.PW0XWCCC TO PW0XW00.PW0XWHCC;*/
   /* ------Y2K OUT------*/
   /* ------Y2K IN-------*/
  if (PW0XW00.PW0XWHYY > 57)
    PW0XW00.PW0XWHCC = 19;
  else
    PW0XW00.PW0XWHCC = 20;
  end
   /* ------Y2K IN-------*/
  PKHREC.OP1DSBDT = PW0XW00.PW0XWHDT;
  PKHREC.TF1CARCD = PK4REC.TF1CARCD;
  PKHREC.PK1PRTN = PK4REC.PK1PRTN;
  PKHREC.XPPCD = PW0XW01.XPPCD[PW0XWIXM];
  PKHREC.PKURUNMD = PW0XW00.PW0XWRUN;
  PKHREC.PKHPVSFC = PW0XW01.PK4ORDFC[PW0XWIXM];
  PKHREC.PKHPVSRP = PW0XW01.PK4ORDRP[PW0XWIXM];

  if (PK4REC.OP1SPHDF == "Y") /* special handling*/
    PKHREC.PK-SEL-TYP-CD = " 5";
  else
    PKHREC.PK-SEL-TYP-CD = " 6";
  end

  PKHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PKHREC.ZZZCHGCT = 0;

  PW0XS62(); /* insert Dpick.Vselor01*/


end // end PW0X162

// De-select order
Function PW0X163()
   /* ------------------------------------------------------------*/
   /* De-select order*/
   /* ------------------------------------------------------------*/

  PW0XS10(); /* select unique pool header*/

  PK4REC.PK4SLIND = " "; /* clear status*/
  PW0XW01.PK4SLIND[PW0XWIXM] = "N"; /* set select flag to no*/
  PK4REC.XPPCD = "30";
  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW0XS11(); /* update pool header*/

   /* ------------------------------------------------------------*/
   /* Now, delete row from Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/
  PKHREC.XWHCD = PW0XW01.XWHCD;
  PKHREC.PK1CUOID = PW0XW01.PK1CUOID[PW0XWIXM];
  PKHREC.PK1NORID = PW0XW01.PK1NORID[PW0XWIXM];
  if (PKWREC.PKWSELSW == "PP") /* if pick planning mode*/

    PKHREC.PKURUNMD = "P"; /* set run mode accordingly*/

  end

  PW0XS63(); /* delete Dpick.Vselor01*/


end // end PW0X163

// Put order on hold
Function PW0X164()
   /* ------------------------------------------------------------*/
    /* To put order on hold move fields to working storage*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWHDX == 1) /* first line*/
    set PW0XW02 empty; /* clear record*/
    PW0XW02.XWHCD = PW0XW01.XWHCD;
    PW0XW02.XWHABRV = PW0XW01.XWHABRV;
  end

  PW0XW01.PW0XMACT[PW0XWIXM] = "*";
  PW0XW01.PK4ORHLD[PW0XWIXM] = "Y";
  PW0XW02.PK1CUOID[PW0XWHDX] = PW0XW01.PK1CUOID[PW0XWIXM];
  PW0XW02.PK1NORID[PW0XWHDX] = PW0XW01.PK1NORID[PW0XWIXM];
  PW0XW02.KUMSTSNM[PW0XWHDX] = PW0XW01.KUMSTSNM[PW0XWIXM];

  PW0XW00.PW0XWHDX = PW0XW00.PW0XWHDX + 1; /* increment index*/



end // end PW0X164

// Process order for inquiry
Function PW0X165()
   /* ------------------------------------------------------------*/
   /* Order was requested for inquiry - add to pkyrec array*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWIDX > 65)

    PW0XW00.XXXMSGNO = 346;
    return;

  end

  PWJREC.PWJORACT[PW0XWIDX] = "I"; /* flag for inquiry*/
  PWJREC.PK1CUOID[PW0XWIDX] = PW0XW01.PK1CUOID[PW0XWIXM];
  PWJREC.PK1NORID[PW0XWIDX] = PW0XW01.PK1NORID[PW0XWIXM];
  PWJREC.PWJARMAX = PW0XW00.PW0XWIDX; /* set # occ's in array*/

  PW0XW00.PW0XWIDX = PW0XW00.PW0XWIDX + 1;


end // end PW0X165

// Transfer control to PW0I
Function PW0X166()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Orders are in PKYREC for inquiry, xfer to PW0I.*/
   /* ------------------------------------------------------------*/

  PW0X111(); /* Purge temporary storage*/

  COMMAREA.CATOAP = "PW0I"; /* set target application*/
  PKWREC.PKWUSERB = PWJREC.PKWUSERB; /* store array for pw0i*/
  XSPKS01(); /* Exit to another application*/

  set PW0XM001.CATOAP cursor, bold; /* Highlight*/
  set PW0XM003.CATOAP cursor, bold; /* Highlight*/

  exit stack; /* Exit to display map*/


end // end PW0X166

// Main process to display map 2
Function PW0X200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0X210(); /* Obtain the data to display*/

  PW0X220(); /* Format and display the map*/

  PW0X230(); /* Check attention identifier*/

  PW0X240(); /* Reset fields to normal intensity*/

  PW0X250(); /* Verify the entered data*/

  PW0X260(); /* Process valid input request*/


end // end PW0X200

// Obtain data to display
Function PW0X210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

  PW0XW02.XX1 = 1; /* init array index*/
  PW0XW02.XXXTSPAG = 1; /* page num*/
  PW0XW02.TA5TSQIX = PW0XW00.PW0XWHDX / 15; /* highest page*/
  PW0XW02.ZZAMT = PW0XW02.TA5TSQIX * 15; /* lines*/
  if (PW0XW02.ZZAMT != PW0XW00.PW0XWHDX) /* lines don't equal*/
    PW0XW02.TA5TSQIX = PW0XW02.TA5TSQIX + 1; /* add remaining page*/
  end
   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWR = "N"; /* Request for data switch*/


end // end PW0X210

// Format and display map
Function PW0X220()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0XW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0XW00.PW0XWSWF == "Y") /* Map must be formatted*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        PW0X-22104(); /* Format the data on the map*/
      else
        PW0X-22102(); /* Format the data on the map*/
      end
    end
  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0X-22004();
  else
    PW0X-22002();
  end


end // end PW0X220

// Check attention identifier
Function PW0X230()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0XW00.PW0XWSWR == "Y") /* Request for data*/
      set PW0XW02 empty; /* M001 display storage*/
    end

    PW0XW00.PW0XWSWF = "Y"; /* Format the map switch*/
    PW0XW00.PW0XWSWR = "N"; /* Request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CAITEM = "PW0XM004"; /* Application find code*/
        PW0X111(); /* Purge temporary storage*/
        XSPKS01(); /* Exit to another application*/
        PW0XW00.PW0XWSWD = "1"; /* display map 1*/
      else
        COMMAREA.CAITEM = "PW0XM002"; /* Application find code*/
        PW0X111(); /* Purge temporary storage*/
        XSPKS01(); /* Exit to another application*/
        PW0XW00.PW0XWSWD = "1"; /* display map 1*/
      end

    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      PW0XW00.PW0XWSWD = "1"; /* display map 1*/
      PW0XW00.PW0XWSWF = "Y"; /* format the map*/
      if (PW0XW00.PW0XWIDX > 1) /* inquiry to view*/
        PW0XW00.PW0XWSWR = "N"; /* request for data*/
      else
        PW0XW00.PW0XWSWR = "Y"; /* ditto*/
      end
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0XW00.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0X230

// Reset highlighted fields
Function PW0X240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PW0XW02.PW0XWIXS = 1; /* Initialize line index*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    while (PW0XW02.PW0XWIXS <= 15 /* Until end of lines*/
     && PW0XM004.PK1CUOID[PW0XWIXS] > 0) /* or end of display*/

      set PW0XM004.XHRCD[PW0XWIXS] normal; /* Reset hold reason code*/
      set PW0XM004.PW0XMRMM[PW0XWIXS] normal; /* month*/
      set PW0XM004.PW0XMRDD[PW0XWIXS] normal; /* day*/
      set PW0XM004.PW0XMRYY[PW0XWIXS] normal; /* year*/

      PW0XW02.PW0XWIXS = PW0XW02.PW0XWIXS + 1; /* Increment line index*/

    end
  else
    while (PW0XW02.PW0XWIXS <= 15 /* Until end of lines*/
     && PW0XM002.PK1CUOID[PW0XWIXS] > 0) /* or end of display*/

      set PW0XM002.XHRCD[PW0XWIXS] normal; /* Reset hold reason code*/
      set PW0XM002.PW0XMRMM[PW0XWIXS] normal; /* month*/
      set PW0XM002.PW0XMRDD[PW0XWIXS] normal; /* day*/
      set PW0XM002.PW0XMRYY[PW0XWIXS] normal; /* year*/

      PW0XW02.PW0XWIXS = PW0XW02.PW0XWIXS + 1; /* Increment line index*/

    end

  end
   /* ------------------------------------------------------------*/
   /* pop-up window if requested.*/
   /* ------------------------------------------------------------*/

  if ("?" in PW0XM002.XHRCD /* if a '?' in any of the hold codes*/
   || "?" in PW0XM004.XHRCD) /* if a '?' in any of the hold codes*/

    if (converseVar.eventKey not enter) /* enter not pressed*/

      PW0XW00.XXXMODID = "240"; /* Module id*/
      converseLib.validationFailed(320); /* Not valid without enter key*/

      exit stack; /* exit to display map*/

    else

      PW0XW02.PW0XWIXS = sysVar.arrayIndex; /* set index*/

      PW0X241(); /* display pop-up window*/

    end

  else

    return;

  end

  converseLib.clearScreen();
  
  converseLib.clearScreen();
  
  PW0XW00.XXXMODID = "240"; /* Module id*/


end // end PW0X240

// Display pop-up window
Function PW0X241()
   /* ------------------------------------------------------------*/
   /* Display pop-up window for hold codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* pop-up window initialization*/

  XX0XW02.XX0XWHDR = "        HOLD REASON CODES"; /* set window title*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/

    XPXHR01(); /* display the list*/

  end
  if (XX0XW02.XX0XWPIX == 0) /* no selection made*/

    PW0XW02.XX1 = PW0XW02.XXXTSPAG * 15; /* bottom of page*/
    PW0XW02.XX1 = PW0XW02.XX1 - 15; /* bottom of previous page*/
    PW0XW02.XX1 = PW0XW02.XX1 + PW0XW02.PW0XWIXS; /* same line*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0XM004.XHRCD[PW0XWIXS] = PW0XW02.XHRCD[XX1];
                                   /* restore previous*/
    else
      PW0XM002.XHRCD[PW0XWIXS] = PW0XW02.XHRCD[XX1];
                                   /* restore previous*/
    end
  else

    PW0XM002.XHRCD[PW0XWIXS] = XHRTBL.XHRCD[XX0XWPIX];

  end


end // end PW0X241

// Verify entered data
Function PW0X250()
   /* ------------------------------------------------------------*/
   /* if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (PW0XW02.TA5TSQIX > 0) /* Page was formatted*/

    PW0XW02.PW0XWIXS = 15; /* Initialize line index*/

    while (PW0XW02.PW0XWIXS > 0) /* Until end of lines*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/

        if (PW0XM004.PK1CUOID[PW0XWIXS] != 0) /* there is data on line*/
          PW0X-25204(); /* Verify data in the line*/
        end
      else
        if (PW0XM002.PK1CUOID[PW0XWIXS] != 0) /* there is data on line*/
          PW0X-25202(); /* Verify data in the line*/
        end
      end

      PW0XW02.PW0XWIXS = PW0XW02.PW0XWIXS - 1; /* Decrement line number*/

    end
  end

   /* ------------------------------------------------------------*/
   /* if enter is pressed then all lines xhrcd's and release date*/
     /* must be entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* only if other edits pass*/
    if (converseVar.eventKey is enter) /* enter pressed*/
      PW0X253(); /* check that all data is entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0X251(); /* Verify scroll request*/

  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW0X250

// Verify scroll request
Function PW0X251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0XW02.XXXTSPAG < 2)       /* and no previous pages*/

    PW0XW00.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0XW02.XXXTSPAG >= PW0XW02.TA5TSQIX) /* and no more pages*/

    PW0XW00.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end


end // end PW0X251

// Verify all data entered
Function PW0X253()
   /* ------------------------------------------------------*/
  if (PW0XW02.XXXTSPAG < PW0XW02.TA5TSQIX) /* current < high page*/

    PW0XW02.XX1 = PW0XW02.XXXTSPAG * 15; /* bottom of current*/
    PW0XW02.XX1 = PW0XW02.XX1 + 1; /* top of next page*/
    PW0XW02.XXXTSPAG = PW0XW02.XX1 / 15; /* next page*/

  else
    return;
  end

  PW0XW02.PW0XWIXS = 15; /* init screen index*/

  while (PW0XW02.PW0XWIXS >= 1) /* until end*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/

      set PW0XM004.XHRCD[PW0XWIXS] cursor, bold; /* highlight*/
      set PW0XM004.PW0XMRMM[PW0XWIXS] bold; /* highlight*/
      set PW0XM004.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
      set PW0XM004.PW0XMRYY[PW0XWIXS] bold; /* highlight*/
      converseLib.validationFailed(341); /* required field*/
      PW0XW00.XXXMODID = "253"; /* module id*/

    else

      set PW0XM002.XHRCD[PW0XWIXS] cursor, bold; /* highlight*/
      set PW0XM002.PW0XMRMM[PW0XWIXS] bold; /* highlight*/
      set PW0XM002.PW0XMRDD[PW0XWIXS] bold; /* highlight*/
      set PW0XM002.PW0XMRYY[PW0XWIXS] bold; /* highlight*/
      converseLib.validationFailed(341); /* required field*/
      PW0XW00.XXXMODID = "253"; /* module id*/

    end

    PW0XW02.PW0XWIXS = PW0XW02.PW0XWIXS - 1; /* decrement index*/

  end


end // end PW0X253

// Process valid request
Function PW0X260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* save field in working storage.*/
   /* ------------------------------------------------------------*/

  PW0XW02.PW0XWIXS = 1; /* init screen index*/

  PW0XW02.XX1 = PW0XW02.XXXTSPAG * 15; /* bottom of page*/
  PW0XW02.XX1 = PW0XW02.XX1 - 14; /* top of page*/

  while (PW0XW02.PW0XWIXS <= 15) /* until end of lines*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/

      PW0XW02.XHRCD[XX1] = PW0XM004.XHRCD[PW0XWIXS];
      PW0XW02.PW0XMRMM[XX1] = PW0XM004.PW0XMRMM[PW0XWIXS];
      PW0XW02.PW0XMRDD[XX1] = PW0XM004.PW0XMRDD[PW0XWIXS];
      PW0XW02.PW0XMRYY[XX1] = PW0XM004.PW0XMRYY[PW0XWIXS];

    else

      PW0XW02.XHRCD[XX1] = PW0XM002.XHRCD[PW0XWIXS];
      PW0XW02.PW0XMRMM[XX1] = PW0XM002.PW0XMRMM[PW0XWIXS];
      PW0XW02.PW0XMRDD[XX1] = PW0XM002.PW0XMRDD[PW0XWIXS];
      PW0XW02.PW0XMRYY[XX1] = PW0XM002.PW0XMRYY[PW0XWIXS];

    end

    PW0XW02.PW0XWIXS = PW0XW02.PW0XWIXS + 1; /* increment index*/
    PW0XW02.XX1 = PW0XW02.XX1 + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0XW02.XXXTSPAG = PW0XW02.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0XW02.XXXTSPAG = PW0XW02.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* insert or update record in DPICK.VORHLD01, then update*/
     /* DPICK.VPOOLH01 (setting hold flag to 'Y')*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get current date and time*/

  PW0XW02.XX1 = 1; /* init index*/

  while (PW0XW02.XX1 <= 150 /* until end of array*/
   && PW0XW02.PK1CUOID[XX1] > 0) /* or end of data*/
    PKBREC.XWHCD = PW0XW02.XWHCD;
    PKBREC.PK1CUOID = PW0XW02.PK1CUOID[XX1];
    PKBREC.PK1NORID = PW0XW02.PK1NORID[XX1];
    PKBREC.XHRCD = PW0XW02.XHRCD[XX1];
   /* ------Y2K OUT---------*/
   /* MOVE PW0XW00.PW0XWCCC TO PW0XW02.PW0XMRCC(XX1);/* century*/
   /* ------Y2K OUT---------*/
   /* ------Y2K IN----------*/
    if (PW0XW02.PW0XMRYY[XX1] > 57)
      PW0XW02.PW0XMRCC[XX1] = 19;
    else
      PW0XW02.PW0XMRCC[XX1] = 20;
    end
   /* ------Y2K IN----------*/

    PW0X261(); /* select Dpick.Vorhld01*/

    if (PW0XW00.PW0XWRUN == " ") /* if run mode is picking*/

      PKBREC.PKBRELDT = PW0XW02.PW0XMRDT[XX1]; /* release date*/

    else

      PKBREC.PKBPLRDT = PW0XW02.PW0XMRDT[XX1]; /* planned rlse date*/

    end

    PKBREC.XXXUSRID = COMMAREA.CAUSERID;

    PKBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PKBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    if (SQLCA.VAGen_SQLCODE == 0) /* record found on order hold file*/

      PW0X262(); /* update existing record*/

    else

      PKBREC.ZZZCHGCT = 0;
      PW0X263(); /* insert Dpick.Vorhld01*/

    end

     /* ----- Retrieve pool header, update order-hold-flag,*/
     /* ----- then update it)*/

    PW0XS60(); /* select unique pool header*/

    PK4REC.PK4ORHLD = "Y"; /* set order hold flag to yes*/

    PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    PW0XS11(); /* update pool header*/

    PW0XW02.XX1 = PW0XW02.XX1 + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* commit updates, then go to map 1*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();

  PW0XW00.PW0XWSWD = "1"; /* display map 1*/
  PW0XW00.XXXTSPAG = 1; /* Display page 1*/

  if (PW0XW00.PW0XWIDX > 1) /* if inquiries left*/
    PW0XW00.PW0XWSWR = "N"; /* request for data*/
  end




end // end PW0X260

// Select unique - DPICK.VORHLD01
Function PW0X261()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWD = "1"; /* display map 1*/
  PW0XW00.PW0XWSWR = "Y"; /* request for data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0X261

// Update row in DPICK.VORHLD01
Function PW0X262()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("U ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWD = "1"; /* display map 1*/
  PW0XW00.PW0XWSWR = "Y"; /* request for data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "262"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0X262

// Insert row in DPICK.VORHLD01
Function PW0X263()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("A ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      PW0XW00.XXXMSGNO = 32; /* update successful*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWD = "1"; /* display map 1*/
  PW0XW00.PW0XWSWR = "Y"; /* request for data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "263"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0X263

// Update temporary storage page
Function PW0XS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0XW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0XW00.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS01

// Read temporary storage page
Function PW0XS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0XW01.XXXTSLEN = PW0XW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0XW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0XW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0XW00.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS02

// Select unique - DPICK.VPOOLH01
Function PW0XS10()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0XW01.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PW0XW01.PK1CUOID[PW0XWIXM]; /* Customer order number*/
  PK4REC.PK1NORID = PW0XW01.PK1NORID[PW0XWIXM]; /* Nike order number*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWD = "1"; /* display map 1*/
  PW0XW00.PW0XWSWR = "Y"; /* request for data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(29); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(28); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS10

// Update DPICK.VPOOLH01
Function PW0XS11()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0XW00.PW0XWSWR = "Y"; /* Request for data switch*/

      PW0XW00.XXXMODID = "S11"; /* Module identification*/
      PW0XW00.XXXMSGNO = 29; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWD = "1"; /* display map 1*/
  PW0XW00.PW0XWSWR = "Y"; /* request for data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(105); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS11

// Check carrier hold
Function PW0XS12()
   /* ------------------------------------------------------------*/
   /* open cursor - DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  PW0XS20(); /* set cursor*/

  PW0XW00.PW0XWSC2 = " "; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and check release date until no more rows.*/
   /* ------------------------------------------------------------*/

  while (PW0XW00.PW0XWSC2 == " " /* Until no more rows*/
   && PW0XW00.PW0XWSWP == " ") /* or rejection of order*/

    PW0XS21(); /* Fetch next*/

    if (PW0XW00.PW0XWSC2 == " ") /* not end of cursor*/

      PW0XS23(); /* validate release date*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Close cursor - DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  PW0XS22(); /* Close cursor*/


end // end PW0XS12

// Check order hold
Function PW0XS13()
   /* ------------------------------------------------------------*/
   /* Open cursor - DPICK.VORHLD01*/
   /* ------------------------------------------------------------*/

  PW0XS30(); /* Set cursor*/

  PW0XW00.PW0XWSC2 = " "; /* clear cursor switch*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and validate the release date*/
   /* ------------------------------------------------------------*/

  while (PW0XW00.PW0XWSC2 == " " /* Until end of cursor*/
   && PW0XW00.PW0XWSWP == " ") /* or order is rejected*/

    PW0XS31(); /* Fetch next row*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor in DPICK.VORHLD01*/
   /* ------------------------------------------------------------*/

  PW0XS32(); /* Close cursor*/


end // end PW0XS13

// Check customer hold
Function PW0XS14()
   /* ------------------------------------------------------------*/
   /* Open cursor in  DPICK.VCUHLD01*/
   /* ------------------------------------------------------------*/

  PW0XS40(); /* Set cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch next row and check dates til end of cursor.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSC2 = " "; /* Clear cursor switch*/

  while (PW0XW00.PW0XWSC2 == " " /* Til end of cursor*/
   && PW0XW00.PW0XWSWP == " ") /* or order is rejected*/

    PW0XS41(); /* fetch next row*/

  end

   /* ------------------------------------------------------------*/
   /* Close cursor*/
   /* ------------------------------------------------------------*/

  PW0XS42(); /* Close cursor*/


end // end PW0XS14

// Select unique - DPICK.VPKCUS01
Function PW0XS15()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select unique DPICK.VPKCUS01*/
   /* ------------------------------------------------------------*/

  set PK6REC empty; /* Clear row storage area*/
  PK6REC.KUCCOID = PK4REC.KUCCOID; /* order*/
  PK6REC.KUMSTRID = PK4REC.KUMSTRID;

  try
    call "IO1830" ("S ", SQLCA, PK6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/

        PK6REC.KUMSTSNM = "UNKNOWN"; /* cust name*/

      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "PW0X"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCUS01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK6REC.PK6GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS15

// Open cursor in DPICK.VCAHLD01
Function PW0XS20()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table-Dpick.Vcahld01*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* Row storage area*/

  PWFREC.XWHCD = PW0XW01.XWHCD; /* Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* Carrier code*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0XW00.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS20

// Fetch row in DPICK.VCAHLD01
Function PW0XS21()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0XW00.PW0XWSC2 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS21

// Close cursor in DPICK.VCAHLD01
Function PW0XS22()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S22"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS22

// Validate hold release date
Function PW0XS23()
   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

  if (PW0XW00.PW0XWRUN == " ") /* if run mode is picking*/

    if (PWFREC.PKBRELDT > PW0XW00.PW0XWCDT) /* rlse date gt current date*/

      PW0XW00.PW0XWSWP = "N"; /* reject this order*/

    else

      return;

    end

  else

    if (PWFREC.PKBPLRDT > PW0XW00.PW0XWCDT) /* rlse date gt current date*/

      PW0XW00.PW0XWSWP = "N"; /* reject this order*/

    end

  end


end // end PW0XS23

// Open cursor in DPICK.VORHLD01
Function PW0XS30()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Row storage area*/

  PKBREC.XWHCD = PW0XW01.XWHCD; /* Warehouse code*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* Order number*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* Nike order number*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0XW00.XXXMODID = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS30

// Fetch row in DPICK.VORHLD01
Function PW0XS31()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fetch the next row and check rlrse dates-Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PW0XW00.PW0XWRUN == " ") /* run mode is picking*/

        if (PKBREC.PKBRELDT > PW0XW00.PW0XWCDT) /* rlse date gt current dt*/

          PW0XW00.PW0XWSWP = "N";
          return;

        else
          return;
        end

      else

        if (PKBREC.PKBPLRDT > PW0XW00.PW0XWCDT) /* rlse date gt current dt*/

          PW0XW00.PW0XWSWP = "N";
          return;

        else
          return;
        end
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW0XW00.PW0XWSC2 = "Y"; /* end of cursor switch*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0XW00.XXXMODID = "S31"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS31

// Close cursor in DPICK.VORHLD01
Function PW0XS32()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S32"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS32

// Open cursor in DPICK.VCUHLD01
Function PW0XS40()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Set cursor - Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PW0XW01.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/


  PW0XW00.XXXMODID = "S40"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS40

// Fetch row in DPICK.VCUHLD01
Function PW0XS41()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Fetch the next row to check rlrse dates-Dpick.Vcuhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (PW0XW00.PW0XWRUN == " ") /* run mode is picking*/

        if (PK9REC.PK9RELDT > PW0XW00.PW0XWCDT) /* rlse date gt current dt*/

          PW0XW00.PW0XWSWP = "N";
          return;

        else
          return;
        end

      else

        if (PK9REC.PK9PLRDT > PW0XW00.PW0XWCDT) /* rlse date gt current dt*/

          PW0XW00.PW0XWSWP = "N";
          return;

        else
          return;
        end
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      PW0XW00.PW0XWSC2 = "Y"; /* end of cursor*/
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW0XW00.XXXMODID = "S41"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS41

// Close cursor in DPICK.VCUHLD01
Function PW0XS42()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S42"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS42

// select unique - DPICK.VPOOLH01
Function PW0XS60()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0XW02.XWHCD; /* Warehouse code*/
  PK4REC.PK1CUOID = PW0XW02.PK1CUOID[XX1]; /* Customer order number*/
  PK4REC.PK1NORID = PW0XW02.PK1NORID[XX1]; /* Nike order number*/

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  PW0XW00.PW0XWSWD = "1"; /* display map 1*/
  PW0XW00.PW0XWSWR = "Y"; /* request for data*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S60"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(29); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(28); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS60

// Select DPICK.VSELOR01
Function PW0XS61()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("S ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S61"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS61

// Insert into DPICK.VSELOR01
Function PW0XS62()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("A ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0XW00.XXXMSGNO = 32; /* table update successful*/
      PW0XW01.PW0XMACT[PW0XWIXM] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW0XW00.XXXMSGNO = 44; /* Warning msg*/
      PW0XW00.XXXMODID = "S62"; /* module id*/
      PW0XW01.PW0XMACT[PW0XWIXM] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S62"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS62

// Delete row in DPICK.VSELOR01
Function PW0XS63()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("D ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0XW00.XXXMSGNO = 32; /* update successful*/
      PW0XW01.PW0XMACT[PW0XWIXM] = "*"; /* flag as processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW0XW00.XXXMSGNO = 201; /* warning msg*/
      PW0XW00.XXXMODID = "S63"; /* Module id*/
      PW0XW01.PW0XMACT[PW0XWIXM] = " "; /* clear action code*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0XW00.XXXMODID = "S63"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW0XW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0XS63

//*** RECORD=PW0XW00 ****
// Working storage for PW0X
// ***********************
Record PW0XW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0XWSWR PW0XWSWR ; 
  10 PW0XWSWE PW0XWSWE ; 
  10 PW0XWSWD PW0XWSWD ; 
  10 PW0XWSWA PW0XWSWA ; 
  10 PW0XWSWF PW0XWSWF ; 
  10 PW0XWSWU PW0XWSWU ; 
  10 PW0XWCUR PW0XWCUR ; 
  10 PW0XWSWP PW0XWSWP ; 
  10 PW0XWSWC PW0XWSWC ; 
  10 PW0XWSC2 PW0XWSC2 ; 
  10 PW0XWRUN PW0XWRUN ; 
  10 PW0XWIXM PW0XWIXM ; 
  10 PW0XWIDX PW0XWIDX ; 
  10 PW0XWHDX PW0XWHDX ; 
  10 PW0XWAIX PW0XWAIX ; 
  10 * char(1) ; 
  10 PW0XWCDT PW0XWCDT ; 
    15 PW0XWCCC PW0XWCCC ; 
    15 PW0XWEDT PW0XWEDT ; 
      20 PW0XWCYY PW0XWCYY ; 
      20 * num(4) ; 
  10 PW0XWNDT PW0XWNDT ; 
    15 PW0XWNCC PW0XWNCC ; 
    15 PW0XWNYY PW0XWNYY ; 
    15 PW0XWNMM PW0XWNMM ; 
    15 PW0XWNDD PW0XWNDD ; 
  10 PW0XWHDT PW0XWHDT ; 
    15 PW0XWHCC PW0XWHCC ; 
    15 PW0XWHYY PW0XWHYY ; 
    15 PW0XWHMM PW0XWHMM ; 
    15 PW0XWHDD PW0XWHDD ; 
  10 PW0XWFDT PW0XWFDT ; 
    15 PW0XWFCC PW0XWFCC ; 
    15 PW0XWFYY PW0XWFYY ; 
    15 PW0XWFMM PW0XWFMM ; 
    15 PW0XWFDD PW0XWFDD ; 
  10 PW0XWTDT PW0XWTDT ; 
    15 PW0XWTCC PW0XWTCC ; 
    15 PW0XWTYY PW0XWTYY ; 
    15 PW0XWTMM PW0XWTMM ; 
    15 PW0XWTDD PW0XWTDD ; 
  10 PW0XMFCT PW0XMFCT ; 
  10 PW0XMRPT PW0XMRPT ; 
  10 PW0XMTOT PW0XMTOT ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
end // end PW0XW00

//*** RECORD=PW0XW01 ****
// Map working storage for PW0XM001
// ***********************
Record PW0XW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(591) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 PW0XMFMM PW0XMFMM ; 
    10 PW0XMFDD PW0XMFDD ; 
    10 PW0XMFYY PW0XMFYY ; 
    10 PW0XMTMM PW0XMTMM ; 
    10 PW0XMTDD PW0XMTDD ; 
    10 PW0XMTYY PW0XMTYY ; 
    10 PW0XMSEL PW0XMSEL ; 
    10 * char(56) [10] ; 
      15 PW0XMACT PW0XMACT ; 
      15 XPPCD XPPCD ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 KUMSTSNM KUMSTSNM ; 
      15 PW0XMBMM PW0XMBMM ; 
      15 PW0XMBDD PW0XMBDD ; 
      15 PW0XMBYY PW0XMBYY ; 
      15 PW0XMAMM PW0XMAMM ; 
      15 PW0XMADD PW0XMADD ; 
      15 PW0XMAYY PW0XMAYY ; 
      15 PW0XMEMM PW0XMEMM ; 
      15 PW0XMEDD PW0XMEDD ; 
      15 PW0XMEYY PW0XMEYY ; 
      15 PK4ORDFC PK4ORDFC ; 
      15 PK4ORDRP PK4ORDRP ; 
      15 PW0XMFRT PW0XMFRT ; 
      15 PK4SLIND PK4SLIND ; 
      15 PK4ORHLD PK4ORHLD ; 
      15 PW0XWSWH PW0XWSWH ; 
end // end PW0XW01

//*** RECORD=PW0XW02 ****
// Map working storage for PW0XM001
// ***********************
Record PW0XW02 type basicRecord
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PW0XWIXS PW0XWIXS ; 
  10 XX1 XX1 ; 
  10 ZZAMT ZZAMT ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 * char(26) [150] ; 
    15 XHRCD XHRCD ; 
    15 PW0XMRDT PW0XMRDT ; 
      20 PW0XMRCC PW0XMRCC ; 
      20 PW0XMRYY PW0XMRYY ; 
      20 PW0XMRMM PW0XMRMM ; 
      20 PW0XMRDD PW0XMRDD ; 
    15 PK1CUOID PK1CUOID ; 
    15 PK1NORID PK1NORID ; 
    15 KUMSTSNM KUMSTSNM ; 
end // end PW0XW02

DataItem PW0XMACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dnsa dd
DataItem PW0XMADD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsa mm
DataItem PW0XMAMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsa yy
DataItem PW0XMAYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb dd
DataItem PW0XMBDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb mm
DataItem PW0XMBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb yy
DataItem PW0XMBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// eta dd
DataItem PW0XMEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// eta mm
DataItem PW0XMEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// eta yy
DataItem PW0XMEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// full case total
DataItem PW0XMFCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" dd
DataItem PW0XMFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" mm
DataItem PW0XMFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// fc and rp total
DataItem PW0XMFRT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" yy
DataItem PW0XMFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// release cent
DataItem PW0XMRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// release dd
DataItem PW0XMRDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// release date
DataItem PW0XMRDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// release mm
DataItem PW0XMRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// repack total
DataItem PW0XMRPT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// release yy
DataItem PW0XMRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PK_sel_ind
DataItem PW0XMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to" dd
DataItem PW0XMTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "to" mm
DataItem PW0XMTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// grand total
DataItem PW0XMTOT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "to" yy
DataItem PW0XMTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ARRAY INDEX
DataItem PW0XWAIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date CC
DataItem PW0XWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date for comparison
DataItem PW0XWCDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current screen chgd
DataItem PW0XWCUR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date YY
DataItem PW0XWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EZEDTE date YYMMDD
DataItem PW0XWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "from" cc
DataItem PW0XWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "from" dd
DataItem PW0XWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" date
DataItem PW0XWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "from" mm
DataItem PW0XWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "from" yy
DataItem PW0XWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hold cc
DataItem PW0XWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holddd
DataItem PW0XWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold date
DataItem PW0XWHDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold Work index
DataItem PW0XWHDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holdmm
DataItem PW0XWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// holdyy
DataItem PW0XWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquiry Work index
DataItem PW0XWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem PW0XWIXM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem PW0XWIXS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date century
DataItem PW0XWNCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date day
DataItem PW0XWNDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric field to convert date
DataItem PW0XWNDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date month
DataItem PW0XWNMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Conversion date year
DataItem PW0XWNYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Run mode
DataItem PW0XWRUN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for Vpoolh01
DataItem PW0XWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Array data switch
DataItem PW0XWSWA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for Vphdit01
DataItem PW0XWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map display switch
DataItem PW0XWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Execution switch (valid entry)
DataItem PW0XWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format screen switch
DataItem PW0XWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold switch
DataItem PW0XWSWH char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Okay to process switch
DataItem PW0XWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0XWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data chgd switch (all pgs)
DataItem PW0XWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "to" cc
DataItem PW0XWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "to" dd
DataItem PW0XWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "to" date
DataItem PW0XWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "to" mm
DataItem PW0XWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// "to" yy
DataItem PW0XWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

