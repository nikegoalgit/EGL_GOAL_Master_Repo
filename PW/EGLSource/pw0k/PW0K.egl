package pw0k;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0K ****
// This program allows users to select non-Special Handling
// quantities.  The DNSB date range, must be entered before
// the detail line data can be formatted.  Once the date range
// is entered, and verified, the map will display quantities
// sorted by non-Pack and Holds (all grouped into DNSB date of
// zero), and Pack and Holds by DNSB date.  There will be a
// maximum of 10 pages displayed.
// 
// The program will not allow any quantities to be selected if
// the DNSB date is a Pack and Hold date, but inquiry is
// allowed.  If the user selects a Pack and Hold date for
// inquiry the program will transfer the user to the Pack and
// Hold non-Special Handling selection screen (PW0P).  If the
// user selects quantities for non-Pack and Hold dates they
// won't be selected by special order numbers.  The user can
// select quantities by order, by placing a 's' next the blank
// DNSB date, this will take the user to a different program
// (PW0L) where he/she can select specific orders for picking.
// 
// The user can also transfer out of this application by
// using one of the PF keys displayed at the bottom of the map,
// or by entering fast-path information (also at the bottom of
// the map).
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          01/30/91  jmoore  New application.
//          04/18/91  jcarey  Changed the headings to take out
//                            the word 'prev' (previous).
//          09/25/91  SHENDE  Allowed access to warehouse '07'.
//          10/08/91  jcampb  Table changes.
//          10/09/91  shende  1. Display division code on map
//                               header which can be modifiable
//                            2. Perform XPPK004 to verify the
//                               division code.
//                            3. Add fastpath options for
//                               PW0J, PW06.
//          01/02/92  SHENDE  Pwkarray index was passing wrong
//                            value to PWKREC.
//          03/05/92  SHENDE  Add xbc-brand-cd(xbccd) for March
//                            table changes.
//          03/16/92  SHENDE  Process whse 02 & 04 as valid.
//          04/20/92  SHENDE  Allow access to PW08 and do not
//                            display in-store promo orders.
//          05/11/92  SHENDE  Move division code to PWMREC.
//          06/22/92  SHENDE  Table changes
//          07/13/92  SHENDE  Display brand code.  Also, allow
//                            wild card for both div and brand.
//          09/14/92  SHENDE  Move '*' to pkhrec for wildcard
//                            in pw0ks05.
//          09/29/92  SHENDE  Remove PK5REC from record list.
//          08/29/95  RYONKE  Added warehouse specific logic
//                            for Canada warehouse (whse=42).
// y2kfix   02/08/98  pharwo  y2k changes to pw0kmfyy, pw0kmtyy
//                            pw0kmsyy on pw0km001.
// *********************
Program PW0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0KW00 PW0KW00; // record
  PW0KW01 PW0KW01; // record
  PW0KW02 PW0KW02; // record
  PW0KW03 PW0KW03; // record
  PW0KW05 PW0KW05; // record
  PW0KW06 PW0KW06; // record
  PW0KW07 PW0KW07; // record
  PW0KW08 PW0KW08; // record
  PWFREC PWFREC; // record
  PWHREC PWHREC; // record
  PWIREC PWIREC; // record
  PWKREC PWKREC; // record
  PWMREC PWMREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XHDTBL; // table
  use XDVTBL; // table
  use XOTTBL; // table
  use XBCTBL; // table
  use PW0KM.PW0KM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW0KM001 initial; /* M001 input/output*/
    set PW0KW00 empty; /* Working storage*/
    set PW0KW01 empty; /* M001 header*/
    set PW0KW02 empty; /* temporary storage*/
    set PW0KW03 empty; /* m001 footer*/
    set PW0KW05 empty; /* sel ord array*/
    set PW0KW06 empty; /* sel qty array*/
    set PW0KW07 empty; /* pool array*/
    set PW0KW08 empty; /* selection array*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* date validity*/
    set TA9REC empty; /* sunday work date*/
    set PWKREC empty; /* picking dnsb date array*/
    set PWIREC empty; /* picking record io mod*/
    set PKBREC empty; /* dpick.vorhld01*/
    set PK4REC empty; /* dpick.vpoolh01*/
    set PK9REC empty; /* dpick.vcuhld01*/
    set PWFREC empty; /* dpick.vcahld01*/
    set PWKREC empty; /* PK work area*/
    set PWHREC empty; /* dpick.vselor01*/
    set PWMREC empty; /* dpick.vselqt01*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    PW0KW00.XXXTSLEN = 414; /* temp storage length*/

    PW0KW00.PW0KWDTF = "Y"; /* Request for data flag*/
    PW0KW00.PW0KWMPF = "Y"; /* format map*/
    PW0KW00.PW0KWPHF = "N"; /* format Pack & hold selection*/
    PW0KW00.PW0KWFPH = "Y"; /* format Pack & Hold date- once only*/
    PW0KW00.PW0KWQTF = "N"; /* quantities selected flag*/
    PW0KW00.PW0KWOIF = "N"; /* order inquiry flag*/
    PW0KW00.CACHGFL = "N"; /* change flag*/
    PW0KW00.PW0KWUPF = "N"; /* update flag*/
    PW0KW00.PW0KWARF = "Y"; /* warning flag*/

    PKWREC.PKWFRMAP = COMMAREA.CACURRAP;

     /* ------------------------------------------------------------*/
     /* determine from map*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "PW0V") /* pick selection menu*/
      PKWREC.PKWSELSW = "PK"; /* picking*/
    end

    if (COMMAREA.CAFROMAP == "PW0W") /* pick planning selection menu*/
      PKWREC.PKWSELSW = "PP"; /* pick planning*/
    end

    if (PKWREC.PKWSELSW == " ") /* pk select sw empty*/
      PKWREC.PKWSELSW = "PK"; /* picking*/
    end

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      PW0KW01.PKURUNMD = " "; /* run mode*/
    end

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      PW0KW01.PKURUNMD = "P"; /* run mode*/
    end

     /* ------------------------------------------------------------*/
     /* determine default data to be loaded*/
     /* ------------------------------------------------------------*/

    if (PKWREC.XWHCD == "51" /* warehouse*/
     || PKWREC.XWHCD == "07" 
     || PKWREC.XWHCD == "04" 
     || PKWREC.XWHCD == "02" 
     || PKWREC.XWHCD == "42") /* Canada*/

      PW0KW01.XWHCD = PKWREC.XWHCD; /* warehouse code*/
      PW0KM001.XWHCD = PWKREC.XWHCD;
      PW0KW01.XWHABRV = PKWREC.XWHABRV; /* warehouse description*/
      PW0KM001.XWHABRV = PKWREC.XWHABRV;
    end

    PW0KW01.PW0KWFDT = PKWREC.PKWFRMDT[1]; /* DNSB from date*/
    PW0KW01.PW0KWTDT = PKWREC.PKWTODT[1]; /* DNSB to date*/

    if (PW0KW01.PW0KWFDT == 0 /* DNSB from date*/
     && PW0KW01.PW0KWTDT == 0) /* DNSB to date*/

      PW0KW00.PW0KWDTF = "N"; /* dont request data*/
      set PW0KM001.PW0KMFMM cursor; /* DNSB from mm*/

    else

      /* ---- format "to" century ------*/
      if (PW0KW01.PW0KWTYY != 0)
        if (PW0KW01.PW0KWTYY > 50
         && PW0KW01.PW0KWTYY <= 99)

          PW0KW01.PW0KWTCC = 19;
        else
          PW0KW01.PW0KWTCC = 20;
        end

      end

      /* ---- format "from" century ----*/
      if (PW0KW01.PW0KWFYY != 0)
        if (PW0KW01.PW0KWFYY > 50
         && PW0KW01.PW0KWFYY <= 99)

          PW0KW01.PW0KWFCC = 19;
        else
          PW0KW01.PW0KWFCC = 20;
        end
      end

      PW0KM001.PW0KMFMM = PW0KW01.PW0KWFMM; /* from month*/
      PW0KM001.PW0KMFDD = PW0KW01.PW0KWFDD; /* from day*/
      PW0KM001.PW0KMFYY = PW0KW01.PW0KWFYY; /* from year*/
      PW0KW00.PW0KWFRD = PW0KW01.PW0KWFDT; /* from date*/

      PW0KM001.PW0KMTMM = PW0KW01.PW0KWTMM; /* to month*/
      PW0KM001.PW0KMTDD = PW0KW01.PW0KWTDD; /* to day*/
      PW0KM001.PW0KMTYY = PW0KW01.PW0KWTYY; /* to year*/
      PW0KW00.PW0KWTOD = PW0KW01.PW0KWTDT; /* to date*/

      PW0KW00.PW0KWDTF = "Y"; /* request for data*/

    end


     /* ------------------------------------------------------------*/
     /* Flow to check security*/
     /* ------------------------------------------------------------*/

    goto PW0K000; /* allow certain appl to enter*/

    PW0K000: PW0K000();
     /* --------------------------------------------------------*/
          /* CONVERSE TO MAIN PROCESS*/
     /* --------------------------------------------------------*/
    goto PW0K001; /* converse to main process*/
    PW0K001: PW0K001();
    goto PW0K001;
  end // end main
end // end PW0K

// check security
Function PW0K000()

  if (COMMAREA.CAFROMAP == "PW0G"
   || COMMAREA.CAFROMAP == "PW0J"
   || COMMAREA.CAFROMAP == "PW0L"
   || COMMAREA.CAFROMAP == "PW0M"
   || COMMAREA.CAFROMAP == "PW0P"
   || COMMAREA.CAFROMAP == "PW0R"
   || COMMAREA.CAFROMAP == "PW0S"
   || COMMAREA.CAFROMAP == "PW0V"
   || COMMAREA.CAFROMAP == "PW0W"
   || COMMAREA.CAFROMAP == "PW0X"
   || COMMAREA.CAFROMAP == "GD00"
   || COMMAREA.CAFROMAP == "PW06"
   || COMMAREA.CAFROMAP == "PW08")

    COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* save curr application*/
  else
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    XSNOWAY(); /* exit to another appl*/
  end

  PW0KS01(); /* get Pack & Hold date*/

   /* ---------------------------------------------------------*/
   /* Initial move to working storage and map*/
   /* ---------------------------------------------------------*/

   /* ------ division code ---------------------------------------*/
  if (PKWREC.XDVCD[1] != "*")
    XPPK004();

    if (converseVar.validationMsgNum == 0)
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0KW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0KM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      PW0KW01.XDVCD = PKWREC.XDVCD[1];
      PW0KM001.XDVCD = PKWREC.XDVCD[1];
    end
  else
    PW0KW01.XDVDESC = "ALL DIVISIONS";
    PW0KM001.XDVDESC = "ALL DIVISIONS";
    PW0KW01.XDVCD = PKWREC.XDVCD[1];
    PW0KM001.XDVCD = PKWREC.XDVCD[1];
  end

   /* ------ brand code ------------------------------------------*/
  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0KM001.XBCCD cursor, bold;
        TA1REC.TA1PGMNO = "000";
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0KW01.XBCABRV = XBCTBL.XBCDESC[sysVar.arrayIndex];
        end
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0KM001.XBCABRV = XBCTBL.XBCDESC[sysVar.arrayIndex];
        end
        PW0KW01.XBCCD = PKWREC.XBCCD[1];
        PW0KM001.XBCCD = PKWREC.XBCCD[1];
      end
    else
      converseLib.validationFailed(413);
      set PW0KM001.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "000";
      exit stack;
    end
  else
    PW0KW00.PW0KWWAR = 421;
    PW0KW01.XBCABRV = " ";
    PW0KM001.XBCABRV = " ";
    PW0KW01.XBCCD = PKWREC.XBCCD[1];
    PW0KM001.XBCCD = PKWREC.XBCCD[1];
  end


end // end PW0K000

// Inquire/maintain a table row
Function PW0K001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0K100(); /* Obtain the data to display*/

  PW0K200(); /* Format and display the map*/

  PW0K300(); /* Check attention identifier*/

  PW0K400(); /* Reset fields to normal intensity*/

  PW0K500(); /* Verify the entered data*/

  PW0K600(); /* Process valid input request*/

end // end PW0K001

// Obtain the data to display
Function PW0K100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWDTF != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Verify division code and move to working storage.*/
   /* ------------------------------------------------------------*/

  if (PW0KM001.XDVCD == " ")
    converseLib.validationFailed(393);
    set PW0KM001.XDVCD cursor, bold;
    TA1REC.TA1PGMNO = "100"; /* module identification*/
    exit stack;
  end

  PKWREC.XDVCD[1] = PW0KM001.XDVCD;

  if (PKWREC.XDVCD[1] != "*")
    XPPK004();

    if (converseVar.validationMsgNum == 0) /* no errors*/
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0KW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0KM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      PW0KW01.XDVCD = PKWREC.XDVCD[1];
    else
      converseLib.validationFailed(393);
      set PW0KM001.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "100"; /* module identification*/
      exit stack;
    end
  else
    PW0KW01.XDVDESC = "ALL DIVISIONS";
    PW0KM001.XDVDESC = "ALL DIVISIONS";
    PW0KW01.XDVCD = PKWREC.XDVCD[1];
  end

   /* ------------------------------------------------------------*/
   /* Verify brand code and move to working storage.*/
   /* ------------------------------------------------------------*/

  if (PW0KM001.XBCCD == " ")
    converseLib.validationFailed(413);
    set PW0KM001.XBCCD cursor, bold;
    TA1REC.TA1PGMNO = "100"; /* module identification*/
    exit stack;
  end

  PKWREC.XBCCD[1] = PW0KM001.XBCCD;

  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0KM001.XBCCD cursor, bold;
        TA1REC.TA1PGMNO = "100";
        exit stack;
      else
        PW0KW01.XBCCD = PKWREC.XBCCD[1];
        if (PKWREC.XBCCD[1] in XBCTBL.XBCABRV)
          PW0KW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        if (PKWREC.XBCCD[1] in XBCTBL.XBCABRV)
          PW0KM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
      end
    else
      converseLib.validationFailed(413);
      set PW0KM001.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "100";
      exit stack;
    end
  else
    PW0KW00.PW0KWWAR = 421;
    PW0KW01.XBCCD = PKWREC.XBCCD[1];
    PW0KW01.XBCABRV = " ";
    PW0KM001.XBCABRV = " ";
  end

   /* ------------------------------------------------------------*/
   /* purge temporary storage*/
   /* ------------------------------------------------------------*/

  PW0KS02();
                                   /* initialize w02 and purge temp storage*/
  set PW0KW03 empty; /* initialize w03*/
  set PW0KW05 empty; /* initialize w05*/
  set PW0KW06 empty; /* initialize w06*/
  set PW0KW07 empty; /* initialize w07*/
  set PW0KW08 empty; /* initialize w08*/

   /* ------------------------------------------------------------*/
   /* process selected by order*/
   /* ------------------------------------------------------------*/

  PW0K110(); /* dpick.vselor01*/

   /* ------------------------------------------------------------*/
   /* process selected by quantity*/
   /* ------------------------------------------------------------*/

  PW0K120(); /* dpick.vselqt01*/

   /* ------------------------------------------------------------*/
   /* process non-selected by quantities*/
   /* ------------------------------------------------------------*/

  PW0K130(); /* dpick.vpoolh01*/

   /* ------------------------------------------------------------*/
   /* sort selected quantities by DNSB date into selsort*/
   /* ------------------------------------------------------------*/

  PW0K140(); /* sort selord and selqty tables*/

   /* ------------------------------------------------------------*/
   /* process DNSB date sort*/
   /* ------------------------------------------------------------*/

  PW0K150(); /* sort selsort and pool tables*/


   /* ------------------------------------------------------------*/
   /* if no pages were formatted, indicate no data to display*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.TA5TSQIX == 0) /* no pages formatted*/
    TA1REC.TA1PGMNO = "100"; /* module identification*/
    converseLib.validationFailed(110); /* indicate no data to display*/
    PW0KW00.CACHGFL = "N"; /* change flag*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0KW00.XXXTSPAG = 1; /* Desired page number*/
  PW0KW00.PW0KWDTF = "N"; /* Request for data switch*/
  PW0KW00.CACHGFL = "Y"; /* change flag*/

end // end PW0K100

// process selected by order
Function PW0K110()

  PW0KS05(); /* open dpick.vselor01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0KW00.PW0KWCRF = "N"; /* close cursor switch*/
    PW0KW00.PW0KWFTF = "Y"; /* first time flag*/
    PW0KW05.PW0KW5IX = 1; /* w05 index*/

    PW0KS06(); /* fetch dpick.vselor01*/

    while (PW0KW00.PW0KWCRF == "N") /* selord not eof*/

      if (PKHREC.OP1DSBDT > PW0KW00.PW0KWTOD) /* DNSB to date*/
        PW0KW00.PW0KWCRF = "Y"; /* stop processing*/
      else

        if (PKHREC.PK-SEL-TYP-CD < "10") /* not B-Grade or Closeout*/

          if (PKHREC.OP1DSBDT >= PW0KW00.PW0KWFRD) /* DNSB from date*/
            PW0KW01.TF1CARCD = PKHREC.TF1CARCD; /* carrier cd*/
            PW0KW00.PW0KWVLD = "Y"; /* continue to process*/
            PW0KS20(); /* check carrier status*/

            if (PW0KW00.PW0KWVLD == "Y") /* continue to process*/
              PW0K111(); /* process select order data*/
            end
          end

          PW0KS06(); /* fetch dpick.vselor01*/

        else
          PW0KS06(); /* fetch dpick.vselor01*/
        end
      end
    end

  end

  PW0KS07(); /* close dpick.vselor01*/

end // end PW0K110

// check DNSB dates
Function PW0K111()

   /* If first time move DNSB to first occurence*/

  if (PW0KW00.PW0KWFTF == "Y") /* first time*/
    PW0KW00.PW0KWFTF = "N"; /* not first time*/
    PW0KW05.OP1DSBDT[PW0KW5IX] = PKHREC.OP1DSBDT; /* DNSB*/
    PW0KW05.PW0KW5MX = PW0KW05.PW0KW5IX; /* table max*/
  end

   /* different DNSB*/

  if (PKHREC.OP1DSBDT != PW0KW05.OP1DSBDT[PW0KW5IX]) /* DNSB date*/
    PW0KW05.PW0KW5IX = PW0KW05.PW0KW5IX + 1; /* increment w05 index*/
    if (PW0KW05.PW0KW5IX > 100) /* table max*/
      PW0KW00.PW0KWCRF = "Y"; /* stop processing*/
      PW0KW05.PW0KW5IX = 100; /* set table max to 100*/
      PW0KW00.PW0KWWAR = 304; /* table overflow*/
      TA1REC.TA1PGMNO = "111"; /* application module*/
      return; /* return to prev process*/
    end
    PW0KW05.OP1DSBDT[PW0KW5IX] = PKHREC.OP1DSBDT; /* DNSB*/
    PW0KW05.PW0KW5MX = PW0KW05.PW0KW5IX; /* table max*/
  end

  PW0K112(); /* move data to w05*/

end // end PW0K111

// move data to w05
Function PW0K112()

  if (PKHREC.PK-SEL-TYP-CD == " 1" /* special handling*/
   || PKHREC.PK-SEL-TYP-CD == " 3" 
   || PKHREC.PK-SEL-TYP-CD == " 5")

    /* --------------------------------------------------------------*/
    /* SPECIAL HANDLING*/
    /* --------------------------------------------------------------*/
    PW0KW00.PW0KWQTY = PW0KW05.PW0KWSHQ[PW0KW5IX];
    PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PKHREC.PKHPVSRP; /* repack*/
    PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PKHREC.PKHPVSFC; /* full case*/
    PW0KW05.PW0KWSHQ[PW0KW5IX] = PW0KW00.PW0KWQTY;
    PW0KW05.PW0KWTHW = PW0KW05.PW0KWTHW + PKHREC.PKHPVSMM; /* sel wrk min.*/

    /* --------------------------------------------------------------*/
    /* GRAND TOTAL SPECIAL HANDLING*/
    /* --------------------------------------------------------------*/
    PW0KW05.PW0KWSHT = PW0KW05.PW0KWSHT + PKHREC.PKHPVSRP; /* repack*/
    PW0KW05.PW0KWSHT = PW0KW05.PW0KWSHT + PKHREC.PKHPVSFC; /* full case*/


  end

  if (PKHREC.PK-SEL-TYP-CD == " 2" /* non-special handling*/
   || PKHREC.PK-SEL-TYP-CD == " 4" 
   || PKHREC.PK-SEL-TYP-CD == " 6")

    /* --------------------------------------------------------------*/
    /* REGULAR SELECTED ORDER*/
    /* --------------------------------------------------------------*/
    PW0KW00.PW0KWQTY = PW0KW05.PW0KWORP[PW0KW5IX];
    PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PKHREC.PKHPVSRP; /* repack*/
    PW0KW05.PW0KWORP[PW0KW5IX] = PW0KW00.PW0KWQTY;

    PW0KW00.PW0KWQTY = PW0KW05.PW0KWOFC[PW0KW5IX];
    PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PKHREC.PKHPVSFC; /* full case*/
    PW0KW05.PW0KWOFC[PW0KW5IX] = PW0KW00.PW0KWQTY;

    /* --------------------------------------------------------------*/
    /* GRAND TOTAL REGULAR SELECTED ORDER*/
    /* --------------------------------------------------------------*/
    PW0KW05.PW0KWTOR = PW0KW05.PW0KWTOR + PKHREC.PKHPVSRP; /* repack*/
    PW0KW05.PW0KWTOF = PW0KW05.PW0KWTOF + PKHREC.PKHPVSFC; /* full case*/


  end

end // end PW0K112

// process selected by quantity
Function PW0K120()

  PW0KS08(); /* open dpick.vselqt01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0KW00.PW0KWCRF = "N"; /* close cursor switch*/
    PW0KW00.PW0KWFTF = "Y"; /* first time flag*/
    PW0KW06.PW0KW6IX = 1; /* w06 index*/
    PW0KS09(); /* fetch dpick.vselqt01*/

    while (PW0KW00.PW0KWCRF == "N") /* selqtd not eof*/

      if (PWMREC.OP1DSBDT > PW0KW00.PW0KWTOD) /* DNSB to date*/
        PW0KW00.PW0KWCRF = "Y"; /* end processing*/
      else

        if (PWMREC.PK-SEL-TYP-CD < "10") /* not B-Grade or Closeout*/

          if (PWMREC.OP1DSBDT >= PW0KW00.PW0KWFRD) /* DNSB from date*/
            PW0KW01.TF1CARCD = PWMREC.TF1CARCD; /* carrier code*/
            PW0KW00.PW0KWSQF = "Y"; /* select qty flag*/
            PW0KW00.PW0KWVLD = "Y"; /* carrier flag*/
            PW0KS20(); /* check carrier status*/

             /* ------- in-store promo --------------------------------*/
            if (PWMREC.XDVCD == "01"
             && PWMREC.XGPCD == "01")

              PW0KW00.PW0KWVLD = "N"; /* do not process*/
            end

             /* ------- colehaan --------------------------------------*/
            if (PW0KM001.XBCCD == "*"
             && PWMREC.XBCCD == "08")

              PW0KW00.PW0KWVLD = "N"; /* do not process*/
            end

            PW0KW00.PW0KWSQF = "N"; /* select qty flag*/
            if (PW0KW00.PW0KWVLD == "Y") /* continue to process*/
              PW0K121(); /* process select qty data*/
            end
          end

          PW0KS09(); /* fetch dpick.vselqt01*/
        else
          PW0KS09(); /* fetch dpick.vselqt01*/
        end
      end
    end
  end

  PW0KS10(); /* close dpick.vselqt01*/

end // end PW0K120

// check DNSB dates
Function PW0K121()

   /* If first time move DNSB to first occurence*/

  if (PW0KW00.PW0KWFTF == "Y") /* first time*/
    PW0KW00.PW0KWFTF = "N"; /* not first time*/
    PW0KW06.OP1DSBDT[PW0KW6IX] = PWMREC.OP1DSBDT; /* DNSB*/
    PW0KW06.PW0KW6MX = PW0KW06.PW0KW6IX; /* table max*/
  end

  if (PWMREC.OP1DSBDT != PW0KW06.OP1DSBDT[PW0KW6IX]) /* DNSB date*/
    PW0KW06.PW0KW6IX = PW0KW06.PW0KW6IX + 1; /* increment w06 index*/
    if (PW0KW06.PW0KW6IX > 100) /* table max*/
      PW0KW00.PW0KWCRF = "Y"; /* stop processing*/
      PW0KW06.PW0KW6IX = 100; /* table max*/
      PW0KW00.PW0KWWAR = 304; /* table overflow*/
      TA1REC.TA1PGMNO = "121";
      return; /* return to prev process*/
    end
    PW0KW06.OP1DSBDT[PW0KW6IX] = PWMREC.OP1DSBDT; /* DNSB*/
    PW0KW06.PW0KW6MX = PW0KW06.PW0KW6IX; /* table max*/
  end

  PW0K122(); /* move data to w06*/

end // end PW0K121

// move data to w06
Function PW0K122()

  if (PWMREC.PK-SEL-TYP-CD == " 1 " /* special handling*/
   || PWMREC.PK-SEL-TYP-CD == " 3"  
   || PWMREC.PK-SEL-TYP-CD == " 5")

    /* ---------------------------------------------------------------*/
    /* SPECIAL HANDLING*/
    /* ---------------------------------------------------------------*/
    PW0KW00.PW0KWQTY = PW0KW06.PW0KWSHQ[PW0KW6IX];
    PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PWMREC.PKHPVSRP; /* repack*/
    PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PWMREC.PKHPVSFC; /* full case*/
    PW0KW06.PW0KWSHQ[PW0KW6IX] = PW0KW00.PW0KWQTY;

    PW0KW06.PW0KWTHW = PW0KW06.PW0KWTHW + PWMREC.PKHPVSMM; /* sel work min*/

    /* ---------------------------------------------------------------*/
    /* GRAND TOTAL SPECIAL HANDLING*/
    /* ---------------------------------------------------------------*/
    PW0KW06.PW0KWSHT = PW0KW06.PW0KWSHT + PWMREC.PKHPVSRP; /* repack*/
    PW0KW06.PW0KWSHT = PW0KW06.PW0KWSHT + PWMREC.PKHPVSFC; /* full case*/


  end

  if (PWMREC.PK-SEL-TYP-CD == " 2" /* non-special handling*/
   || PWMREC.PK-SEL-TYP-CD == " 4" 
   || PWMREC.PK-SEL-TYP-CD == " 6")

    /* ---------------------------------------------------------------*/
    /* REGULAR SELECTED*/
    /* ---------------------------------------------------------------*/
    if (PWMREC.PK-SEL-TYP-CD == " 2" /* non-special handling*/
     && PWMREC.TF1CARCD == " "       /* carrier code*/
     && PWMREC.XHDCD == " ")         /* handling code*/

      PW0KW00.PW0KWQTY = PW0KW06.PW0KWRQF[PW0KW6IX];
      PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PWMREC.PKHPVSFC; /* full case*/
      PW0KW06.PW0KWRQF[PW0KW6IX] = PW0KW00.PW0KWQTY;

      PW0KW00.PW0KWQTY = PW0KW06.PW0KWRQR[PW0KW6IX];
      PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PWMREC.PKHPVSRP; /* repack*/
      PW0KW06.PW0KWRQR[PW0KW6IX] = PW0KW00.PW0KWQTY;

      /* ------------------------------------------------------------*/
      /* GRAND TOTAL REGULAR QUANTITY*/
      /* ------------------------------------------------------------*/
      PW0KW06.PW0KWTQF = PW0KW06.PW0KWTQF + PWMREC.PKHPVSFC; /* full case*/
      PW0KW06.PW0KWTQR = PW0KW06.PW0KWTQR + PWMREC.PKHPVSRP; /* repack*/

    else

      PW0KW00.PW0KWQTY = PW0KW06.PW0KWQFC[PW0KW6IX];
      PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PWMREC.PKHPVSFC; /* full case*/
      PW0KW06.PW0KWQFC[PW0KW6IX] = PW0KW00.PW0KWQTY;

      PW0KW00.PW0KWQTY = PW0KW06.PW0KWQRP[PW0KW6IX];
      PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PWMREC.PKHPVSRP; /* repack*/
      PW0KW06.PW0KWQRP[PW0KW6IX] = PW0KW00.PW0KWQTY;

      /* ------------------------------------------------------------*/
      /* GRAND TOTAL SELECTED ORDER & QUANTITY*/
      /* ------------------------------------------------------------*/
      PW0KW06.PW0KWTOR = PW0KW06.PW0KWTOR + PWMREC.PKHPVSRP; /* repack*/
      PW0KW06.PW0KWTOF = PW0KW06.PW0KWTOF + PWMREC.PKHPVSFC; /* full case*/

    end

  end

end // end PW0K122

// process non-select quantities
Function PW0K130()

  PW0KS11(); /* open vpick.vpoolh01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0KW07.PW0KW7IX = 1; /* pool index*/
    PW0KW00.PW0KWCRF = "N"; /* close cursor flag*/
    PW0KW00.PW0KWFTF = "Y"; /* first time flag*/
    PW0KW00.PW0KWVLD = "Y"; /* valid flag*/

    PW0KS12(); /* fetch vpick.vpoolh01*/

    while (PW0KW00.PW0KWCRF == "N") /* more pool header*/
      if (PK4REC.OP1DSBDT > PW0KW00.PW0KWTOD) /* DNSB to date*/
        PW0KW00.PW0KWCRF = "Y"; /* end processing*/
      else

        /* ----- Determine b-grade and closeout -----------------*/
        XPPK005();

        if (PKWREC.PKW-ORDER-TYP-IND == "B" /* b-grade*/
         || PKWREC.PKW-ORDER-TYP-IND == "C") /* closeout*/

          PW0KW00.PW0KWVLD = "N"; /* do not process*/
        end


        if (PK4REC.OP1DSBDT >= PW0KW00.PW0KWFRD) /* DNSB from date*/
          if (PW0KW00.PW0KWVLD == "Y") /* valid flag*/

            PW0KW01.TF1CARCD = PK4REC.TF1CARCD; /* check carrier*/
            PW0KW00.PW0KWPLF = "Y"; /* pool header flag*/
            PW0KS20(); /* check carrier, order and customer*/
            PW0KW00.PW0KWPLF = "N"; /* pool header flag*/

            if (PW0KW00.PW0KWVLD == "Y") /* continue to process*/
              PW0K131(); /* process pool header*/
            end

          end
        end

        PW0KW00.PW0KWVLD = "Y"; /* valid flag*/
        PW0KS12(); /* fetch vpick.vpoolh01*/
      end

    end
  end

  PW0KS13(); /* close vpick.vpoolh01*/

end // end PW0K130

// process pool item
Function PW0K131()

   /* If first time move DNSB to first occurence*/

  if (PW0KW00.PW0KWFTF == "Y") /* first time*/
    PW0KW00.PW0KWFTF = "N"; /* not first time*/
    PW0KW07.OP1DSBDT[PW0KW7IX] = PK4REC.OP1DSBDT; /* DNSB*/
    PW0KW07.PW0KW7MX = PW0KW07.PW0KW7IX; /* table max*/
  end

   /* check the DNSB date range*/

  if (PK4REC.OP1DSBDT != PW0KW07.OP1DSBDT[PW0KW7IX]) /* DNSB date*/
    PW0KW07.PW0KW7IX = PW0KW07.PW0KW7IX + 1; /* increment w07 index*/
    if (PW0KW07.PW0KW7IX > 100) /* table max*/
      PW0KW00.PW0KWCRF = "Y"; /* stop processing*/
      PW0KW07.PW0KW7IX = 100; /* table 100*/
      PW0KW00.PW0KWWAR = 304; /* table overflow*/
      TA1REC.TA1PGMNO = "131";
      return; /* return to main process*/
    end
    PW0KW07.OP1DSBDT[PW0KW7IX] = PK4REC.OP1DSBDT; /* DNSB*/
    PW0KW07.PW0KW7MX = PW0KW07.PW0KW7IX; /* table max*/
  end

    /* total regular full case and repack quantities*/

  PW0KW00.PW0KWTOT = PW0KW07.PW0KWPFC[PW0KW7IX];
  PW0KW00.PW0KWTOT = PK4REC.PK4ORDFC + PW0KW00.PW0KWTOT;
  PW0KW07.PW0KWPFC[PW0KW7IX] = PW0KW00.PW0KWTOT; /* full case*/

  PW0KW00.PW0KWTOT = PW0KW07.PW0KWPRP[PW0KW7IX];
  PW0KW00.PW0KWTOT = PK4REC.PK4ORDRP + PW0KW00.PW0KWTOT;
  PW0KW07.PW0KWPRP[PW0KW7IX] = PW0KW00.PW0KWTOT; /* repack*/


end // end PW0K131

// sort & merge sel ord & qty
Function PW0K140()

  set PW0KW08 empty; /* initialize w08*/

  PW0KW05.PW0KW5IX = 1; /* first occurence*/
  PW0KW06.PW0KW6IX = 1; /* first occurence*/
  PW0KW08.PW0KW8IX = 1; /* first occurence*/

  while (PW0KW05.PW0KW5IX <= PW0KW05.PW0KW5MX /* pw0kw05 array*/
   || PW0KW06.PW0KW6IX <= PW0KW06.PW0KW6MX) /* pw0kw06 array*/

    if (PW0KW05.OP1DSBDT[PW0KW5IX] < PW0KW06.OP1DSBDT[PW0KW6IX] /* DNSB*/
     && PW0KW05.PW0KW5IX <= PW0KW05.PW0KW5MX)                   /* more pw0kw05*/

      PW0K142(); /* move w05 selord to w08*/

    else
      if (PW0KW05.OP1DSBDT[PW0KW5IX] > PW0KW06.OP1DSBDT[PW0KW6IX] /* DNSB*/
       && PW0KW06.PW0KW6IX <= PW0KW06.PW0KW6MX)                   /* more pw0kw06*/

        PW0K144(); /* move w06 selqty to w08*/

      else
        if (PW0KW05.OP1DSBDT[PW0KW5IX] == PW0KW06.OP1DSBDT[PW0KW6IX] /* DNSB*/
         && PW0KW05.PW0KW5IX <= PW0KW05.PW0KW5MX                     /* more pw0kw05*/
         && PW0KW06.PW0KW6IX <= PW0KW06.PW0KW6MX)                    /* more pw0kw06*/

          PW0K146(); /* add w05 selord + w06 selqty to w08*/

        else
          if (PW0KW05.PW0KW5IX > PW0KW05.PW0KW5MX /* w05 index*/
           && PW0KW06.PW0KW6IX <= PW0KW06.PW0KW6MX) /* more pw0kw06*/

            PW0K144(); /* move w06 selord to w08*/

          else
            if (PW0KW06.PW0KW6IX > PW0KW06.PW0KW6MX /* w06 index*/
             && PW0KW05.PW0KW5IX <= PW0KW05.PW0KW5MX) /* more pw0kw05*/

              PW0K142(); /* move w05 selqty to w08*/

            end
          end
        end
      end
    end
  end

  PW0KW08.PW0KWSHT = PW0KW08.PW0KWSHT + PW0KW05.PW0KWSHT; /* ord spcl hndl*/
  PW0KW08.PW0KWSHT = PW0KW08.PW0KWSHT + PW0KW06.PW0KWSHT; /* qty spcl hndl*/

  PW0KW08.PW0KWTHW = PW0KW08.PW0KWTHW + PW0KW05.PW0KWTHW; /* ord spcl min*/
  PW0KW08.PW0KWTHW = PW0KW08.PW0KWTHW + PW0KW06.PW0KWTHW; /* qty spcl min*/

  PW0KW08.PW0KWTOF = PW0KW08.PW0KWTOF + PW0KW05.PW0KWTOF;
                                   /* total selord fc*/
  PW0KW08.PW0KWTOF = PW0KW08.PW0KWTOF + PW0KW06.PW0KWTOF;
                                   /* total selord fc*/
  PW0KW08.PW0KWTQF = PW0KW08.PW0KWTQF + PW0KW06.PW0KWTQF;
                                   /* total selqty fc*/

  PW0KW08.PW0KWTOR = PW0KW08.PW0KWTOR + PW0KW05.PW0KWTOR;
                                   /* total selord rp*/
  PW0KW08.PW0KWTOR = PW0KW08.PW0KWTOR + PW0KW06.PW0KWTOR;
                                   /* total selord rp*/
  PW0KW08.PW0KWTQR = PW0KW08.PW0KWTQR + PW0KW06.PW0KWTQR;
                                   /* total selqty rp*/


  PW0KW08.PW0KW8MX = PW0KW08.PW0KW8IX - 1; /* max w08 array*/

end // end PW0K140

// move selord w05 to w08
Function PW0K142()

  PW0KW08.OP1DSBDT[PW0KW8IX] = PW0KW05.OP1DSBDT[PW0KW5IX]; /* DNSB*/
  PW0KW08.PW0KWSHQ[PW0KW8IX] = PW0KW05.PW0KWSHQ[PW0KW5IX]; /* ord fc*/
  PW0KW08.PW0KWOQF[PW0KW8IX] = PW0KW05.PW0KWOFC[PW0KW5IX]; /* seld fc*/
  PW0KW08.PW0KWOQR[PW0KW8IX] = PW0KW05.PW0KWORP[PW0KW5IX]; /* seld rp*/

  PW0KW05.PW0KW5IX = PW0KW05.PW0KW5IX + 1; /* increment w05 index*/
  PW0KW08.PW0KW8IX = PW0KW08.PW0KW8IX + 1; /* increment w08 index*/

  if (PW0KW08.PW0KW8IX > 100) /* table max*/
    PW0KW08.PW0KW8IX = 100; /* table max*/
    PW0KW00.PW0KWWAR = 304; /* table overflow*/
    TA1REC.TA1PGMNO = "142";
    return; /* return to prev process*/
  end
end // end PW0K142

// move selqty w06 to w08
Function PW0K144()
  PW0KW08.OP1DSBDT[PW0KW8IX] = PW0KW06.OP1DSBDT[PW0KW6IX]; /* DNSB*/
  PW0KW08.PW0KWSHQ[PW0KW8IX] = PW0KW06.PW0KWSHQ[PW0KW6IX]; /* sh qty*/
  PW0KW08.PW0KWOQF[PW0KW8IX] = PW0KW06.PW0KWQFC[PW0KW6IX]; /* selqty fc*/
  PW0KW08.PW0KWOQR[PW0KW8IX] = PW0KW06.PW0KWQRP[PW0KW6IX]; /* selqty rp*/
  PW0KW08.PW0KWRQF[PW0KW8IX] = PW0KW06.PW0KWRQF[PW0KW6IX]; /* ns qty fc*/
  PW0KW08.PW0KWRQR[PW0KW8IX] = PW0KW06.PW0KWRQR[PW0KW6IX]; /* ns qty rp*/

  PW0KW06.PW0KW6IX = PW0KW06.PW0KW6IX + 1; /* increment w06 index*/
  PW0KW08.PW0KW8IX = PW0KW08.PW0KW8IX + 1; /* increment w08 index*/

  if (PW0KW08.PW0KW8IX > 100) /* table max*/
    PW0KW08.PW0KW8IX = 100; /* table max*/
    PW0KW00.PW0KWWAR = 304; /* table overflow*/
    TA1REC.TA1PGMNO = "144";
    return; /* return to prev process*/
  end
end // end PW0K144

// w05 selor + w06 selqt = w08
Function PW0K146()
  PW0KW08.OP1DSBDT[PW0KW8IX] = PW0KW05.OP1DSBDT[PW0KW5IX]; /* DNSB*/
  PW0KW08.PW0KWSHQ[PW0KW8IX] = PW0KW05.PW0KWSHQ[PW0KW5IX]; /* ord fc*/

  PW0KW00.PW0KWQTY = PW0KW05.PW0KWSHQ[PW0KW5IX]; /* hld sel fc*/
  PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PW0KW06.PW0KWSHQ[PW0KW6IX];
  PW0KW08.PW0KWSHQ[PW0KW8IX] = PW0KW00.PW0KWQTY; /* seld fc*/

  PW0KW00.PW0KWQTY = PW0KW05.PW0KWOFC[PW0KW5IX]; /* hld sel fc*/
  PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PW0KW06.PW0KWQFC[PW0KW6IX];
  PW0KW08.PW0KWOQF[PW0KW8IX] = PW0KW00.PW0KWQTY; /* seld fc*/

  PW0KW00.PW0KWQTY = PW0KW05.PW0KWORP[PW0KW5IX]; /* hld sel fc*/
  PW0KW00.PW0KWQTY = PW0KW00.PW0KWQTY + PW0KW06.PW0KWQRP[PW0KW6IX];
  PW0KW08.PW0KWOQR[PW0KW8IX] = PW0KW00.PW0KWQTY; /* seld fc*/

  PW0KW08.PW0KWRQF[PW0KW8IX] = PW0KW06.PW0KWRQF[PW0KW6IX]; /* selqty fc*/
  PW0KW08.PW0KWRQR[PW0KW8IX] = PW0KW06.PW0KWRQR[PW0KW6IX]; /* selqty rp*/

  PW0KW05.PW0KW5IX = PW0KW05.PW0KW5IX + 1; /* increment w05 index*/
  PW0KW06.PW0KW6IX = PW0KW06.PW0KW6IX + 1; /* increment w06 index*/
  PW0KW08.PW0KW8IX = PW0KW08.PW0KW8IX + 1; /* increment w08 index*/

  if (PW0KW08.PW0KW8IX > 100) /* table max*/
    PW0KW08.PW0KW8IX = 100; /* table max*/
    PW0KW00.PW0KWWAR = 304; /* table overflow*/
    TA1REC.TA1PGMNO = "146";
    return; /* return to prev process*/
  end
end // end PW0K146

// sort pool with sel ord & qty
Function PW0K150()

  PW0KW08.PW0KW8IX = 1; /* first occurence*/
  PW0KW07.PW0KW7IX = 1; /* first occurence*/
  PW0KW02.PW0KW2IX = 1; /* first occurence*/

  while (PW0KW08.PW0KW8IX <= PW0KW08.PW0KW8MX /* pw0kw08 array*/
   || PW0KW07.PW0KW7IX <= PW0KW07.PW0KW7MX) /* pw0kw07 array*/

    if (PW0KW00.TA5TSQIX == 10) /* max 10 pages allowed*/
      PW0KW00.PW0KWWAR = 304; /* table overflow*/
      TA1REC.TA1PGMNO = "150"; /* application module*/
      return; /* return to prev process*/
    end

    if (PW0KW08.OP1DSBDT[PW0KW8IX] < PW0KW07.OP1DSBDT[PW0KW7IX] /* DNSB*/
     && PW0KW08.PW0KW8IX <= PW0KW08.PW0KW8MX)                   /* more pw0kw08 array*/

      PW0K152(); /* move w08 selord to w02*/

    else
      if (PW0KW08.OP1DSBDT[PW0KW8IX] > PW0KW07.OP1DSBDT[PW0KW7IX] /* DNSB*/
       && PW0KW07.PW0KW7IX <= PW0KW07.PW0KW7MX)                   /* more pw0kw07 array*/

        PW0K154(); /* move w07 selqty to w02*/

      else
        if (PW0KW08.OP1DSBDT[PW0KW8IX] == PW0KW07.OP1DSBDT[PW0KW7IX] /* DNSB*/
         && PW0KW07.PW0KW7IX <= PW0KW07.PW0KW7MX                     /* more pw0kw07 array*/
         && PW0KW08.PW0KW8IX <= PW0KW08.PW0KW8MX)                    /* more pw0kw08 array*/

          PW0K156(); /* add w08 selord + w07 selqty to w02*/

        else
          if (PW0KW08.PW0KW8IX > PW0KW08.PW0KW8MX /* no more pw0kw08*/
           && PW0KW07.PW0KW7IX <= PW0KW07.PW0KW7MX) /* more pw0kw07*/
            PW0K154(); /* move w07 selqty to w02*/

          else
            if (PW0KW07.PW0KW7IX > PW0KW07.PW0KW7MX /* no more pw0kw07*/
             && PW0KW08.PW0KW8IX <= PW0KW08.PW0KW8MX) /* more pw0kw08*/
              PW0K152(); /* move w08 selord to w02*/

            end

          end
        end
      end
    end

    /* ------------------------------------------------------------*/
      /* If the page is full, add to temporary storage.*/
    /* ------------------------------------------------------------*/
    if (PW0KW02.PW0KW2IX > 10) /* page is full*/
      PW0KW02.PW0KW2MX = PW0KW02.PW0KW2IX - 1; /* total lines*/
      PW0KS04(); /* add page to temporary storage*/

      set PW0KW02 empty; /* initialize w02*/
      PW0KW02.PW0KW2IX = 1; /* w02 index*/

    end

  end


   /* ------------------------------------------------------------*/
    /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (PW0KW02.PW0KW2IX > 1) /* page is full*/
    PW0KW02.PW0KW2MX = PW0KW02.PW0KW2IX - 1; /* total lines*/
    PW0KS04(); /* add page to temporary storage*/
  end

    /* move totals to w03*/

  PW0KW03.PW0KWSHT = PW0KW03.PW0KWSHT + PW0KW08.PW0KWSHT;
                                   /* total spcl hndl*/
  PW0KW03.PW0KWTHW = PW0KW03.PW0KWTHW + PW0KW08.PW0KWTHW;
                                   /* total spcl hndl*/
  PW0KW03.PW0KWTOF = PW0KW03.PW0KWTOF + PW0KW08.PW0KWTOF;
                                   /* total selord fc*/
  PW0KW03.PW0KWTOR = PW0KW03.PW0KWTOR + PW0KW08.PW0KWTOR;
                                   /* total selord rp*/
  PW0KW03.PW0KWTQF = PW0KW03.PW0KWTQF + PW0KW08.PW0KWTQF;
                                   /* total selqty fc*/
  PW0KW03.PW0KWTQR = PW0KW03.PW0KWTQR + PW0KW08.PW0KWTQR;
                                   /* total selqty rp*/


end // end PW0K150

// move selord w08 to w02
Function PW0K152()

  PW0KW02.OP1DSBDT[PW0KW2IX] = PW0KW08.OP1DSBDT[PW0KW8IX]; /* DNSB*/
  PW0KW02.PW0KWSHQ[PW0KW2IX] = PW0KW08.PW0KWSHQ[PW0KW8IX];
                                   /* spcl qty*/
  PW0KW02.PW0KWOQF[PW0KW2IX] = PW0KW08.PW0KWOQF[PW0KW8IX]; /* qty fc*/
  PW0KW02.PW0KWOQR[PW0KW2IX] = PW0KW08.PW0KWOQR[PW0KW8IX]; /* qty rp*/
  PW0KW02.PW0KWRQF[PW0KW2IX] = PW0KW08.PW0KWRQF[PW0KW8IX]; /* qty fc*/
  PW0KW02.PW0KWRQR[PW0KW2IX] = PW0KW08.PW0KWRQR[PW0KW8IX]; /* qty rp*/

  PW0KW08.PW0KW8IX = PW0KW08.PW0KW8IX + 1; /* increment w08 index*/
  PW0KW02.PW0KW2IX = PW0KW02.PW0KW2IX + 1; /* increment w02 index*/

end // end PW0K152

// move selqty w07 to w02
Function PW0K154()
  PW0KW02.OP1DSBDT[PW0KW2IX] = PW0KW07.OP1DSBDT[PW0KW7IX]; /* DNSB*/
  PW0KW02.PW0KWPFC[PW0KW2IX] = PW0KW07.PW0KWPFC[PW0KW7IX]; /* reg fc*/
  PW0KW02.PW0KWPRP[PW0KW2IX] = PW0KW07.PW0KWPRP[PW0KW7IX]; /* reg rp*/

  PW0KW07.PW0KW7IX = PW0KW07.PW0KW7IX + 1; /* increment w07 index*/
  PW0KW02.PW0KW2IX = PW0KW02.PW0KW2IX + 1; /* increment w02 index*/

end // end PW0K154

// w08 selor + w07 selqt = w02
Function PW0K156()
  PW0KW02.OP1DSBDT[PW0KW2IX] = PW0KW07.OP1DSBDT[PW0KW7IX]; /* DNSB*/
  PW0KW02.PW0KWPFC[PW0KW2IX] = PW0KW07.PW0KWPFC[PW0KW7IX]; /* pool fc*/
  PW0KW02.PW0KWPRP[PW0KW2IX] = PW0KW07.PW0KWPRP[PW0KW7IX]; /* pool rp*/

  PW0KW02.OP1DSBDT[PW0KW2IX] = PW0KW08.OP1DSBDT[PW0KW8IX]; /* DNSB*/
  PW0KW02.PW0KWSHQ[PW0KW2IX] = PW0KW08.PW0KWSHQ[PW0KW8IX]; /* spcl hndl*/
  PW0KW02.PW0KWOQF[PW0KW2IX] = PW0KW08.PW0KWOQF[PW0KW8IX]; /* ord fc*/
  PW0KW02.PW0KWOQR[PW0KW2IX] = PW0KW08.PW0KWOQR[PW0KW8IX]; /* ord rp*/
  PW0KW02.PW0KWRQF[PW0KW2IX] = PW0KW08.PW0KWRQF[PW0KW8IX]; /* ns qty fc*/
  PW0KW02.PW0KWRQR[PW0KW2IX] = PW0KW08.PW0KWRQR[PW0KW8IX]; /* ns qty rp*/

  PW0KW07.PW0KW7IX = PW0KW07.PW0KW7IX + 1; /* increment w07 index*/
  PW0KW08.PW0KW8IX = PW0KW08.PW0KW8IX + 1; /* increment w08 index*/
  PW0KW02.PW0KW2IX = PW0KW02.PW0KW2IX + 1; /* increment w02 index*/

end // end PW0K156

// Format and converse the map
Function PW0K200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0KW00.PW0KWMSG = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWDTF == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0KW00.PW0KWMPF == "Y") /* Map must be formatted*/

      PW0K210(); /* Format the data on the map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Format page, date, and FAST PATH information.*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.TA5TSQIX > 0)
    set PW0KM001.PW0KMPAG skip; /* Current page*/
    PW0KM001.XXXTSPAG = PW0KW00.XXXTSPAG; /* Current page*/
    set PW0KM001.PW0KMOF skip; /* Current page*/
    PW0KM001.XXXTSQIX = PW0KW00.TA5TSQIX; /* max pages*/
  end

  PW0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0KM001.PW0KMHDG = "   PICKING   "; /* heading*/
  else
    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      PW0KM001.PW0KMHDG = "PICK PLANNING"; /* heading*/
    end
  end

  PW0KM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0KM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no fatal error*/
    if (PW0KW00.PW0KWWAR != 0 /* warning message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/
      if (PW0KW00.PW0KWWAR != 0) /* Message to display*/
        if (PW0KW00.XXXTSPAG == 1) /* first page*/
          if (PW0KW00.PW0KWWAR == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0KW00.PW0KWWAR);
          end /* error message number*/
          PW0KM001.XXXMODID = TA1REC.TA1PGMNO; /* Module id*/
          set PW0KM001 alarm; /* Indicate sound alarm*/
        end
        PW0KW00.PW0KWWAR = 0; /* error message number*/
      else
        PW0KM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* error message text*/
        PW0KM001.XXXMODID = TA1REC.TA1PGMNO; /* Module identification*/
        set PW0KM001 alarm; /* Indicate sound alarm*/
      end
    end
  else
    PW0KM001.XXXMODID = TA1REC.TA1PGMNO; /* Module identification*/
    set PW0KM001 alarm; /* Indicate sound alarm*/
  end

  converse PW0KM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNO = " "; /* Module identification*/
  converseLib.validationFailed(0); /* error number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = PW0KM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0KM001.CAITEM; /* Application data*/


end // end PW0K200

// Format the display data
Function PW0K210()

   /* ------------------------------------------------------------*/
   /* init map pw0km001*/
   /* ------------------------------------------------------------*/

  set PW0KM001 initial; /* m001 input/ouput area*/

  PW0KW00.PW0KWMPF = "N"; /* init map switch*/

   /* ------------------------------------------------------------*/
   /* Format pw0km001 using passed data*/
   /* ------------------------------------------------------------*/

  PW0KM001.XWHCD = PW0KW01.XWHCD;
  PW0KM001.XDVCD = PW0KW01.XDVCD;
  PW0KM001.XBCCD = PW0KW01.XBCCD;
  PW0KM001.XWHABRV = PW0KW01.XWHABRV;
  PW0KM001.XDVDESC = PW0KW01.XDVDESC;
  PW0KM001.XBCABRV = PW0KW01.XBCABRV;
  PW0KM001.PW0KMFMM = PW0KW01.PW0KWFMM;
  PW0KM001.PW0KMFDD = PW0KW01.PW0KWFDD;
  PW0KM001.PW0KMFYY = PW0KW01.PW0KWFYY;
  PW0KM001.PW0KMTMM = PW0KW01.PW0KWTMM;
  PW0KM001.PW0KMTDD = PW0KW01.PW0KWTDD;
  PW0KM001.PW0KMTYY = PW0KW01.PW0KWTYY;

   /* ------------------------------------------------------------*/
   /* if data has not been loaded bypass load map fields*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.CACHGFL != "Y")
    return;
  end

   /* ------------------------------------------------------------*/
   /* if data has been updated, display message - tables updated*/
     /* and redisplay the same page.*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWUPF == "Y") /* tables updated*/
    PW0KW00.PW0KWUPF = "N"; /* reset update flag*/
    converseLib.validationFailed(32); /* update successful*/
    PW0KW00.PW0KWMSG = converseVar.validationMsgNum; /* display message on map*/
    PW0KW00.XXXTSPAG = PW0KW00.PW0KWPAG; /* current page*/
  end

   /* ------------------------------------------------------------*/
   /* Redisplay the same page.*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWPGF == "Y") /* redisplay current page*/
    PW0KW00.PW0KWPGF = "N"; /* reset page flag*/
    PW0KW00.XXXTSPAG = PW0KW00.PW0KWPAG; /* current page*/
  end

   /* ------------------------------------------------------------*/
   /* obtain plan summary by lane category from tempory storage*/
   /* ------------------------------------------------------------*/

  PW0KW00.PW0KWPIX = 1;

  PW0KS03(); /* read temporary storage*/

  while (PW0KW00.PW0KWPIX <= PW0KW02.PW0KW2MX) /* process temp*/

    PW0KM001.PW0KMACT[PW0KWPIX] = PW0KW02.PW0KWACT[PW0KWPIX];
    set PW0KM001.PW0KMACT[PW0KWPIX] normal;
    PW0KW02.PW0KWDDT[PW0KWPIX] = PW0KW02.OP1DSBDT[PW0KWPIX];
    PW0KM001.PW0KMSMM[PW0KWPIX] = PW0KW02.PW0KWSMM[PW0KWPIX];
    PW0KM001.PW0KMSDD[PW0KWPIX] = PW0KW02.PW0KWSDD[PW0KWPIX];
    PW0KM001.PW0KMSYY[PW0KWPIX] = PW0KW02.PW0KWSYY[PW0KWPIX];
    PW0KM001.PW0KMSHQ[PW0KWPIX] = PW0KW02.PW0KWSHQ[PW0KWPIX];
    PW0KM001.PW0KMRGF[PW0KWPIX] = PW0KW02.PW0KWPFC[PW0KWPIX];
    PW0KM001.PW0KMRGR[PW0KWPIX] = PW0KW02.PW0KWPRP[PW0KWPIX];
    PW0KM001.PW0KMOQF[PW0KWPIX] = PW0KW02.PW0KWOQF[PW0KWPIX];
    PW0KM001.PW0KMOQR[PW0KWPIX] = PW0KW02.PW0KWOQR[PW0KWPIX];
    PW0KM001.PW0KMRQF[PW0KWPIX] = PW0KW02.PW0KWRQF[PW0KWPIX];
    set PW0KM001.PW0KMRQF[PW0KWPIX] normal;
    PW0KM001.PW0KMRQR[PW0KWPIX] = PW0KW02.PW0KWRQR[PW0KWPIX];
    set PW0KM001.PW0KMRQR[PW0KWPIX] normal;


    PW0KW00.PW0KWPIX = PW0KW00.PW0KWPIX + 1; /* increment load*/

  end

   /* ------------------------------------------------------------*/
   /* error found when updating, send message and hilight action.*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWUPE == "Y") /* update error found*/
    PW0KW00.PW0KWUPE = "N"; /* reset update error flag*/
    set PW0KM001.PW0KMACT[PW0KWHIX] cursor, bold; /* hilite action*/
  end

  PW0KM001.PW0KMSHT = PW0KW03.PW0KWSHT; /* special handling total*/

   /* convert minutes to hhh:mm*/

  PW0KW00.PW0KWMIN = PW0KW03.PW0KWTHW; /* minutes*/
  PW0KW00.PW0KWHR = PW0KW00.PW0KWMIN / 60; /* hours*/
  PW0KW00.PW0KWMN = PW0KW00.PW0KWMIN % 60; /* remainder minutes*/
  PW0KW00.PW0KWHH = PW0KW00.PW0KWHR;

  if (PW0KW00.PW0KWH1 == "0") /* blank fill*/
    PW0KW00.PW0KWH1 = " ";
    if (PW0KW00.PW0KWH2 == "0") /* blank fill*/
      PW0KW00.PW0KWH2 = " ";
      if (PW0KW00.PW0KWH3 == "0") /* blank fill*/
        PW0KW00.PW0KWH3 = " ";
      end
    end
  end

  PW0KW00.PW0KWCOL = ":";
  PW0KW00.PW0KWMM = PW0KW00.PW0KWMN;
  PW0KM001.PW0KMTHW = PW0KW00.PW0KWSPH; /* total hrs of work*/

  PW0KM001.PW0KMTOF = PW0KW03.PW0KWTOF; /* total selord full case*/
  PW0KM001.PW0KMTOR = PW0KW03.PW0KWTOR; /* total selord repack*/
  PW0KM001.PW0KMTQF = PW0KW03.PW0KWTQF; /* total selqty full case*/
  PW0KM001.PW0KMTQR = PW0KW03.PW0KWTQR; /* total selqty repack*/

end // end PW0K210

// Check attention identifier
Function PW0K300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    PW0KW00.PW0KWPAG = PW0KW00.XXXTSPAG; /* hold current page*/

    converseLib.clearScreen();
     /* refresh map*/

    PW0KS02(); /* purge temp storage and map changes*/

    PW0KW00.PW0KWDTF = "Y"; /* request for data*/
    PW0KW00.PW0KWMPF = "Y"; /* format screen m001*/
    PW0KW00.PW0KWPGF = "Y"; /* redisplay current page flag*/

    COMMAREA.CATOAP = " "; /* to application*/
    COMMAREA.CAITEM = " "; /* passed data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0KM001.CATOAP == "PW0K") /* FAST PATH to itself*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TA1REC.TA1PGMNO = "300"; /* Module identification*/
      converseLib.validationFailed(001); /* Indicate PF key not valid*/
      set PW0KM001.CATOAP cursor, bold; /* Highlight*/
      exit stack; /* Exit to display map*/

    end
  end
  if (PW0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PW0KS02(); /* purge temp storage*/

      XSPKS01(); /* Exit to another application*/

      PW0KW00.PW0KWDTF = "Y"; /* request for data*/
      PW0KW00.PW0KWMPF = "N"; /* request format map*/
      TA1REC.TA1PGMNO = "300"; /* Module identification*/
      converseLib.validationFailed(1); /* invalid fast path request*/
      set PW0KM001.CATOAP cursor, bold; /* Highlight*/

    else

      TA1REC.TA1PGMNO = "300"; /* Module identification*/
      converseLib.validationFailed(012); /* Indicate PF key not valid*/
      set PW0KM001.CATOAP cursor, bold; /* Highlight*/

    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf13 /* or PF13 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
   || converseVar.eventKey is pf16 /* or PF16 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf18 /* or PF18 was pressed*/
   || converseVar.eventKey is pf19) /* or PF19 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD00"; /* Application find code*/
      COMMAREA.CAITEM = "PW0KM001"; /* map name*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CATOAP = "PW0V"; /* Application find code*/
        COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
      else
        if (PKWREC.PKWSELSW == "PP") /* pick planning*/
          COMMAREA.CATOAP = "PW0W"; /* Application find code*/
          COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
        end
      end
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "PW0J"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "PW0G"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "PW0M"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "PW0P"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "PW0X"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    if (converseVar.eventKey is pf19) /* PF19 was pressed*/
      COMMAREA.CATOAP = "PW06"; /* Application find code*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/
    end

    PW0KS02(); /* purge temp storage*/

    XSPKS01(); /* Exit to another application*/

    PW0KW00.PW0KWDTF = "N"; /* request data*/
    PW0KW00.PW0KWMPF = "Y"; /* format map*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* pf7 was not pressed*/
   && converseVar.eventKey not pf8)  /* pf8 was not pressed*/

    TA1REC.TA1PGMNO = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW0K300

// Reset highlighted fields
Function PW0K400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0KM001.XDVCD initialAttributes; /* division code*/
  set PW0KM001.XBCCD initialAttributes; /* brand code*/
  set PW0KM001.PW0KMFMM initialAttributes; /* dnsb from month*/
  set PW0KM001.PW0KMFDD initialAttributes; /* dnsb from day*/
  set PW0KM001.PW0KMFYY initialAttributes; /* dnsb from year*/
  set PW0KM001.PW0KMTMM initialAttributes; /* dnsb to month*/
  set PW0KM001.PW0KMTDD initialAttributes; /* dnsb to day*/
  set PW0KM001.PW0KMTYY initialAttributes; /* dnsb to year*/

  PW0KW02.PW0KW2IX = 1; /* initialize line index*/

  while (PW0KW02.PW0KW2IX <= PW0KW02.PW0KW2MX) /* until last line*/
    set PW0KM001.PW0KMACT[PW0KW2IX] normal; /* reset action*/
    set PW0KM001.PW0KMRQF[PW0KW2IX] normal; /* reset reg full case*/
    set PW0KM001.PW0KMRQR[PW0KW2IX] normal; /* reset reg repack*/
    PW0KW02.PW0KW2IX = PW0KW02.PW0KW2IX + 1; /* increment index*/
  end

  set PW0KM001.CATOAP initialAttributes; /* option*/
  set PW0KM001.CAITEM initialAttributes; /* item*/


end // end PW0K400

// Verify the entered data
Function PW0K500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    TA1REC.TA1PGMNO = "500"; /* Module identification*/
    set PW0KM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* check key fields for modification.*/
   /* ------------------------------------------------------------*/

   /* ------- DNSB Date Range -------------*/
  PW0K510(); /* validate DNSB range*/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    if (PW0KW00.PW0KWCHF == "Y") /* errors*/
      return;
    end
  else /* errors*/
    exit stack;
  end

   /* -------- Division Code --------------*/
  if (PW0KM001.XDVCD != PW0KW01.XDVCD) /* map value NE current value*/
    PW0KW00.PW0KWCHF = "Y";

    if (PW0KM001.XDVCD == " ") /* validate division code*/
      converseLib.validationFailed(393);
      set PW0KM001.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XDVCD[1] = PW0KM001.XDVCD;

  if (PKWREC.XDVCD[1] != "*")
    XPPK004(); /* verify division code*/

    if (converseVar.validationMsgNum == 0) /* no errors*/
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW0KW01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      PW0KW01.XDVCD = PKWREC.XDVCD[1];

      if (PW0KW00.PW0KWCHF == "Y") /* key has changed*/
        return;
      end
    else
      converseLib.validationFailed(393);
      set PW0KM001.XDVCD cursor, bold;
      TA1REC.TA1PGMNO = "500"; /* Module identification*/
      exit stack;
    end
  else
    PW0KW01.XDVDESC = "ALL DIVISIONS";
    PW0KW01.XDVCD = PKWREC.XDVCD[1];
  end


   /* -------- Brand Code -----------------*/
  if (PW0KM001.XBCCD != PW0KW01.XBCCD) /* map value NE current value*/
    PW0KW00.PW0KWCHF = "Y";

    if (PW0KM001.XBCCD == " ") /* validate brand code*/
      converseLib.validationFailed(413);
      set PW0KM001.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "500"; /* Module identification*/
      exit stack;
    end
  end

  PKWREC.XBCCD[1] = PW0KM001.XBCCD;

  if (PKWREC.XBCCD[1] != "*")
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      if (XBCTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        converseLib.validationFailed(414);
        set PW0KM001.XBCCD cursor, bold;
        TA1REC.TA1PGMNO = "500";
        exit stack;
      else
        if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
          PW0KW01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
        end
        PW0KW01.XBCCD = PKWREC.XBCCD[1];

        if (PW0KW00.PW0KWCHF == "Y") /* key has changed*/
          return;
        end
      end
    else
      converseLib.validationFailed(413);
      set PW0KM001.XBCCD cursor, bold;
      TA1REC.TA1PGMNO = "500";
      exit stack;
    end
  else
    PW0KW00.PW0KWWAR = 421;
    PW0KW01.XBCABRV = " ";
    PW0KW01.XBCCD = PKWREC.XBCCD[1];
  end


   /* ----------- Action ----------------------------------------*/
  PW0K514(); /* validate action*/

  if (converseVar.eventKey is pf7 /* scroll backward*/
   || converseVar.eventKey is pf8) /* scroll forward*/
    PW0K520(); /* validate scroll request*/
  end

  if (converseVar.validationMsgNum != 0) /* errors*/
    exit stack;
  end

  if (converseVar.eventKey is enter) /* enter to process*/
    PW0K530(); /* validate inquiry*/
  end

end // end PW0K500

// Verify key data
Function PW0K510()
   /* ------------------------------------------------------------*/
   /* validate dont ship before 'FROM' and 'TO' dates*/
   /* ------------------------------------------------------------*/

  PW0KW00.PW0KWCHF = "N"; /* key fields changed*/
  if (PW0KM001.PW0KMTMM != PW0KW01.PW0KWTMM /* dont ship to month*/
   || PW0KM001.PW0KMTDD != PW0KW01.PW0KWTDD /* dont ship to day*/
   || PW0KM001.PW0KMTYY != PW0KW01.PW0KWTYY /* dont ship to year*/
   || PW0KM001.PW0KMFMM != PW0KW01.PW0KWFMM /* dont ship from month*/
   || PW0KM001.PW0KMFDD != PW0KW01.PW0KWFDD /* dont ship from day*/
   || PW0KM001.PW0KMFYY != PW0KW01.PW0KWFYY) /* dont ship from year*/
    PW0KW00.PW0KWCHF = "Y"; /* key field changed*/
  end


  if (PW0KM001.PW0KMTMM == 0 /* dont ship to month*/
   && PW0KM001.PW0KMTDD == 0 /* dont ship to day*/
   && PW0KM001.PW0KMTYY == 0) /* dont ship to year*/

    set PW0KM001.PW0KMTMM cursor, bold;
    set PW0KM001.PW0KMTDD bold;
    set PW0KM001.PW0KMTYY bold;
    TA1REC.TA1PGMNO = "510";
    converseLib.validationFailed(152); /* dont ship must be entered*/
  end

  if (converseVar.validationMsgNum != 0) /* errors*/
    return;
  end

  if (PW0KW00.PW0KWCHF == "Y") /* key field changed*/
    PW0K512(); /* validate dates*/
    if (converseVar.validationMsgNum == 0) /* no errors*/
      if (PW0KW00.PW0KWFDT > PW0KW00.PW0KWTDT) /* from dt not > to dt*/
        set PW0KM001.PW0KMFMM cursor, bold; /* hilight set cursor*/
        set PW0KM001.PW0KMFDD bold; /* hilight*/
        set PW0KM001.PW0KMFYY bold; /* hilight*/
        TA1REC.TA1PGMNO = "510";
        converseLib.validationFailed(286); /* from dnsb must be less to dnsb*/
      end
    end
  end

end // end PW0K510

// Validate DNSB Range
Function PW0K512()

   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'to'*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear row storage area*/

  if (PW0KM001.PW0KMTYY > 56) /* after 1956*/
    PW0KW00.PW0KWTCC = 19; /* century 19*/
  else
    PW0KW00.PW0KWTCC = 20; /* centruy 20*/
  end

  PW0KW00.PW0KWTMM = PW0KM001.PW0KMTMM; /* DNSB to month*/
  PW0KW00.PW0KWTDD = PW0KM001.PW0KMTDD; /* DNSB to day*/
  PW0KW00.PW0KWTYY = PW0KM001.PW0KMTYY; /* DNSB to year*/
  TA2REC.TA2GRGGN = PW0KW00.PW0KWTDT; /* ccyymmdd-num*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      /* next sentence*/
    else
      TA1REC.TA1PGMNO = "512"; /* Module identification*/
      set PW0KM001.PW0KMTMM cursor, bold; /* Highlight*/
      set PW0KM001.PW0KMTDD bold; /* Highlight*/
      set PW0KM001.PW0KMTYY bold; /* Highlight*/
      converseLib.validationFailed(158); /* invalid date*/

    end

  else

    TAEREC.TAEDESC1 = sysVar.errorCode;
    TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "DNSB TO DATE";

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "512"; /* Module identification*/
    converseLib.validationFailed(29); /* System error occurred*/

    return; /* exit to display map*/

  end
   /* ------------------------------------------------------------*/
   /* validate don't ship before date 'from'*/
   /* ------------------------------------------------------------*/

  if (PW0KM001.PW0KMFMM == 0 /* from month*/
   && PW0KM001.PW0KMFDD == 0 /* from day*/
   && PW0KM001.PW0KMFYY == 0) /* from year*/
    PW0KW00.PW0KWFCC = 0; /* from century*/
  else


    set TA2REC empty; /* clear row storage area*/

    if (PW0KM001.PW0KMFYY > 56) /* after 1956*/
      PW0KW00.PW0KWFCC = 19; /* century 19*/
    else
      PW0KW00.PW0KWFCC = 20; /* centruy 20*/
    end

    PW0KW00.PW0KWFMM = PW0KM001.PW0KMFMM;
    PW0KW00.PW0KWFDD = PW0KM001.PW0KMFDD;
    PW0KW00.PW0KWFYY = PW0KM001.PW0KMFYY;
    TA2REC.TA2GRGGN = PW0KW00.PW0KWFDT; /* ccyymmdd-num*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
    TA2REC.TA2GRTYP = "G"; /* type*/

    try
      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    end /* date routine*/

    /* ------------------------------------------------------------*/
     /* Indicate error if the date doesn't pass the verification.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && TA2REC.TA2RTNCD < 888)         /* subroutine completed*/

      if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

        /* next sentence*/
      else
        TA1REC.TA1PGMNO = "512"; /* Module identification*/
        set PW0KM001.PW0KMFMM cursor, bold; /* Highlight*/
        set PW0KM001.PW0KMFDD bold; /* Highlight*/
        set PW0KM001.PW0KMFYY bold; /* Highlight*/
        converseLib.validationFailed(158); /* invalid date*/

      end

    else

      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "DNSB FROM DATE";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      TA1REC.TA1PGMNO = "512"; /* Module identification*/
      converseLib.validationFailed(29); /* System error occurred*/

      return; /* exit to display map*/

    end
  end
end // end PW0K512

// validate SEL and FC & RP Qty
Function PW0K514()

  PW0KW02.PW0KW2IX = PW0KW02.PW0KW2MX; /* set index to max and work*/
   /* backwards*/

  while (PW0KW02.PW0KW2IX >= 1) /* work bottom to top*/

     /* validate ACT function -*/

    if (PW0KM001.PW0KMACT[PW0KW2IX] == "A" /* add*/
     || PW0KM001.PW0KMACT[PW0KW2IX] == "C" /* change*/
     || PW0KM001.PW0KMACT[PW0KW2IX] == "D" /* delete*/
     || PW0KM001.PW0KMACT[PW0KW2IX] == "I" /* inquiry*/
     || PW0KM001.PW0KMACT[PW0KW2IX] <= " ") /* no selection*/
      /* next sentence;*/
    else
      set PW0KM001.PW0KMACT[PW0KW2IX] cursor, bold; /* select picking*/
      TA1REC.TA1PGMNO = "514"; /* module identification*/
      converseLib.validationFailed(35); /* invalid action*/

    end

     /* change must have quantity entered*/


     /* validate REGULAR SELECTION - full case and repack*/

    if (PW0KM001.PW0KMACT[PW0KW2IX] == "A" /* add*/
     || PW0KM001.PW0KMACT[PW0KW2IX] == "C" /* change*/
     || PW0KM001.PW0KMACT[PW0KW2IX] == "D") /* delete*/
      if (PW0KW02.OP1DSBDT[PW0KW2IX] >= PW0KW00.PW0KWPHD)
        TA1REC.TA1PGMNO = "514";
        set PW0KM001.PW0KMACT[PW0KW2IX] cursor, bold; /* hilight*/
        set PW0KM001.PW0KMRQR[PW0KW2IX] bold; /* hilight*/
        set PW0KM001.PW0KMRQF[PW0KW2IX] bold; /* hilight*/
        converseLib.validationFailed(319); /* P & H cannot be updated*/

      else
        if (PW0KM001.PW0KMACT[PW0KW2IX] == "C") /* change*/
          if (PW0KM001.PW0KMRQR[PW0KW2IX] == 0 /* repack qty*/
           && PW0KM001.PW0KMRQF[PW0KW2IX] == 0) /* full case qty*/
            set PW0KM001.PW0KMRQF[PW0KW2IX] cursor, bold;
                                   /* quantity field*/
            set PW0KM001.PW0KMRQR[PW0KW2IX] bold; /* qty field*/
            TA1REC.TA1PGMNO = "514"; /* module identification*/
            converseLib.validationFailed(366); /* quantity required*/
          end

        end

         /* add must have quantity entered*/

        if (PW0KM001.PW0KMACT[PW0KW2IX] == "A") /* change*/
          if (PW0KM001.PW0KMRQR[PW0KW2IX] == 0 /* repack qty*/
           && PW0KM001.PW0KMRQF[PW0KW2IX] == 0) /* full case qty*/
            if (PW0KM001.PW0KMRGF[PW0KW2IX] == 0 /* repack qty*/
             && PW0KM001.PW0KMRGR[PW0KW2IX] == 0) /* full case qty*/
              set PW0KM001.PW0KMRQF[PW0KW2IX] cursor, bold; /* quantity field*/
              set PW0KM001.PW0KMRQR[PW0KW2IX] bold; /* qty field*/
              TA1REC.TA1PGMNO = "514"; /* module identification*/
              converseLib.validationFailed(366); /* quantity required*/
            else
              PW0KM001.PW0KMRQF[PW0KW2IX] = PW0KM001.PW0KMRGF[PW0KW2IX];
              PW0KM001.PW0KMRQR[PW0KW2IX] = PW0KM001.PW0KMRGR[PW0KW2IX];
            end
          end
        end
      end
    end

    PW0KW02.PW0KW2IX = PW0KW02.PW0KW2IX - 1; /* decrement*/

  end
end // end PW0K514

// validate key fields
Function PW0K520()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    if (PW0KW00.XXXTSPAG < 2) /* no previous pages*/

      TA1REC.TA1PGMNO = "520"; /* Module identification*/
      converseLib.validationFailed(37); /* No previous page to display*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (PW0KW00.XXXTSPAG >= PW0KW00.TA5TSQIX) /* no more pages*/

      TA1REC.TA1PGMNO = "520"; /* Module identification*/
      converseLib.validationFailed(38); /* No more pages to display*/

    end
  end

end // end PW0K520

// validate action field
Function PW0K530()
  PW0KW00.PW0KWPHF = "N"; /* P & H flag*/
  PW0KW00.PW0KWOIF = "N"; /* Order inquiry flag*/
  PW0KW00.PW0KWQTF = "N"; /* Update qty flag*/

  PW0KW00.PW0KWPAG = PW0KW00.XXXTSPAG; /* current page*/

  PW0K532(); /* validate inquiry on temp storage*/

  PW0K534(); /* validate inquiry on m001*/

  if (PW0KW00.PW0KWPHF == "Y") /* P & H flag*/
    if (PW0KW00.PW0KWOIF == "Y") /* Order inquiry flag*/
      converseLib.validationFailed(352); /* cannot request P&H and IO*/
      TA1REC.TA1PGMNO = "530"; /* appl module*/
    else
      if (PW0KW00.PW0KWARF == "Y") /* warning flag*/
        PW0KW00.PW0KWARF = "N"; /* warning flag*/
        converseLib.validationFailed(364); /* requested P&H*/
        TA1REC.TA1PGMNO = "530"; /* application module*/
      end
    end
  end

end // end PW0K530

// validate action on temp strg
Function PW0K532()

  PW0KW00.PW0KWPAG = PW0KW00.XXXTSPAG; /* hold current page*/
  PW0KW00.XXXTSPAG = 1; /* set temp storage to 1*/

  while (PW0KW00.XXXTSPAG <= PW0KW00.TA5TSQIX) /* all temp storage*/
    if (PW0KW00.XXXTSPAG == PW0KW00.PW0KWPAG) /* current page*/
      /* next  sentence*/
    else
      PW0KS03(); /* read temp storage*/
      PW0KW00.PW0KWIDX = 1; /* set line index to 1*/
      while (PW0KW00.PW0KWIDX <= PW0KW02.PW0KW2MX) /* lines on map*/

        if (PW0KW02.PW0KWACT[PW0KWIDX] == "I") /* inquiry*/
          if (PW0KW02.OP1DSBDT[PW0KWIDX] < PW0KW00.PW0KWPHD)
            PW0KW00.PW0KWOIF = "Y"; /* Order inquiry*/
          else
            PW0KW00.PW0KWPHF = "Y"; /* P&H inquiry*/
          end
        end

        if (PW0KW02.PW0KWACT[PW0KWIDX] == "A" /* add*/
         || PW0KW02.PW0KWACT[PW0KWIDX] == "C" /* change*/
         || PW0KW02.PW0KWACT[PW0KWIDX] == "D") /* delete*/
          PW0KW00.PW0KWQTF = "Y"; /* update qty flag*/
        end

        PW0KW00.PW0KWIDX = PW0KW00.PW0KWIDX + 1; /* increment map line*/

      end
    end
    PW0KW00.XXXTSPAG = PW0KW00.XXXTSPAG + 1; /* increment temp storage*/
  end

   /* read current page from temporary storage*/

  PW0KW00.XXXTSPAG = PW0KW00.PW0KWPAG; /* hold current page*/
  if (PW0KW00.PW0KWPAG > 0) /* page to display*/
    PW0KS03(); /* read temp storage*/
  end
end // end PW0K532

// validate action on m001
Function PW0K534()

  PW0KW02.PW0KW2IX = PW0KW02.PW0KW2MX; /* set index to max and work*/
   /* backwards*/

  while (PW0KW02.PW0KW2IX >= 1) /* work bottom to top*/

     /* Request for Pack & Hold and Order Inquiry are not allowed*/
    /* request one or the other, but not both at one time*/

    if (PW0KM001.PW0KMACT[PW0KW2IX] == "I") /* inquiry picking*/
      if (PW0KW02.OP1DSBDT[PW0KW2IX] < PW0KW00.PW0KWPHD)
        PW0KW00.PW0KWOIF = "Y"; /* request order inquiry*/
        if (PW0KW00.PW0KWPHF == "Y") /* request pack & hold inquiry*/
          set PW0KM001.PW0KMACT[PW0KW2IX] cursor, bold; /* hilite*/
        end
      else
        if (PW0KW02.OP1DSBDT[PW0KW2IX] >= PW0KW00.PW0KWPHD)
          PW0KW00.PW0KWPHF = "Y"; /* request pack & hold selection*/
          if (PW0KW00.PW0KWOIF == "Y") /* request order inquiry*/
            set PW0KM001.PW0KMACT[PW0KW2IX] cursor, bold; /* hilite*/
          end
        end
      end
    end

     /* For add, change or delete - set update flag on.*/

    if (PW0KM001.PW0KMACT[PW0KW2IX] == "A" /* add*/
     || PW0KM001.PW0KMACT[PW0KW2IX] == "C" /* change*/
     || PW0KM001.PW0KMACT[PW0KW2IX] == "D") /* delete*/
      PW0KW00.PW0KWQTF = "Y"; /* update qty flag*/
    end

    PW0KW02.PW0KW2IX = PW0KW02.PW0KW2IX - 1; /* decrement*/

  end
end // end PW0K534

// pass vaild input
Function PW0K600()

  PW0KW00.PW0KWMPF = "Y"; /* format map*/
  PW0KW01.XWHCD = PW0KM001.XWHCD; /* warehouse*/
  COMMAREA.XWHCD = PW0KM001.XWHCD;
  PKWREC.XDVCD[1] = PW0KW01.XDVCD; /* division code*/
  PKWREC.XBCCD[1] = PW0KW01.XBCCD; /* brand code*/

  if (PW0KW00.PW0KWCHF == "Y") /* key fields changed*/
    PW0KW01.PW0KWFMM = PW0KM001.PW0KMFMM; /* DNSB from month*/
    PW0KW01.PW0KWFDD = PW0KM001.PW0KMFDD; /* DNSB from day*/
    PW0KW01.PW0KWFYY = PW0KM001.PW0KMFYY; /* DNSB from year*/

    if (PW0KM001.PW0KMFMM == 0 /* DNSB from month*/
     && PW0KM001.PW0KMFDD == 0 /* DNSB from day*/
     && PW0KM001.PW0KMFYY == 0) /* DNSB from year*/
      PW0KW01.PW0KWFCC = 0; /* DNSB from century*/
    else
      if (PW0KM001.PW0KMFYY > 56)
        PW0KW01.PW0KWFCC = 19; /* 19 century*/
      else
        PW0KW01.PW0KWFCC = 20; /* 20 century*/
      end
    end

    PW0KW01.PW0KWTMM = PW0KM001.PW0KMTMM; /* DNSB to month*/
    PW0KW01.PW0KWTDD = PW0KM001.PW0KMTDD; /* DNSB to day*/
    PW0KW01.PW0KWTYY = PW0KM001.PW0KMTYY; /* DNSB to year*/

    if (PW0KM001.PW0KMTYY > 56)
      PW0KW01.PW0KWTCC = 19; /* 19 century*/
    else
      PW0KW01.PW0KWTCC = 20; /* 20 century*/
    end

    PW0KW00.PW0KWTOD = PW0KW01.PW0KWTDT; /* DNSB to date (bin)*/
    PW0KW00.PW0KWFRD = PW0KW01.PW0KWFDT; /* DNSB from date (bin)*/

    set PWKREC empty; /* initialize*/
    PWKREC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
    PWKREC.XWHABRV = PW0KW01.XWHABRV; /* warehouse description*/
    PKWREC.PKWFRMDT = PW0KW01.PW0KWFDT; /* DNSB from date*/
    PWKREC.PWKFRDT = PW0KW01.PW0KWFDT; /* DNSB from date*/
    PKWREC.PKWTODT = PW0KW01.PW0KWTDT; /* P & H to date*/
    PWKREC.PWKTODT = PW0KW01.PW0KWTDT; /* P & H to date*/
    PWKREC.PWKARMAX = 0; /* max array*/
    PKWREC.PKWARRAY[1] = PWKREC.PWKARRAY; /* array*/
    COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/

    PW0KW00.PW0KWDTF = "Y"; /* request for data*/
    return;
  end

  PW0K610(); /* move m001 to w02*/

   /* -------------------------------------------------*/
   /* Request to scroll back.*/
   /* -------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* scroll back*/
    PW0KW00.XXXTSPAG = PW0KW00.XXXTSPAG - 1; /* decrement page number*/
    exit stack; /* display previous page*/
  end

   /* -------------------------------------------------*/
   /* Request to scroll forward.*/
   /* -------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* scroll forward*/
    PW0KW00.XXXTSPAG = PW0KW00.XXXTSPAG + 1; /* increment page number*/
    exit stack; /* display next page*/
  end

   /* ------------------------------------------------------------*/
   /* request order inquiry*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWOIF == "Y") /* request for order inquiry*/
    PW0KW00.PW0KWOIF = "N"; /* order inquiry flag*/

    PW0KW00.PW0KWPWX = 1; /* first pwkarray index*/
    PW0KW00.XXXTSPAG = 1; /* set temp storage to 1*/
    while (PW0KW00.XXXTSPAG <= PW0KW00.TA5TSQIX) /* all temp storage*/

      PW0KS03(); /* read temp storage*/
      PW0KW00.PW0KWIDX = 1; /* set line index to 1*/
      while (PW0KW00.PW0KWIDX <= PW0KW02.PW0KW2MX) /* lines on map*/

        if (PW0KW02.PW0KWACT[PW0KWIDX] == "I") /* select quantities*/
          PWKREC.PWKORACT[PW0KWPWX] = "I";
          PWKREC.OP1DSBDT[PW0KWPWX] = PW0KW02.OP1DSBDT[PW0KWIDX];
          PWKREC.TF1CARCD[PW0KWPWX] = " ";
          PW0KW00.PW0KWPWX = PW0KW00.PW0KWPWX + 1; /* pwkarray index*/

          if (PW0KW00.PW0KWPWX > 25) /* max array*/
            PW0KW00.XXXTSPAG = PW0KW00.PW0KWPAG; /* current page*/
            TA1REC.TA1PGMNO = "600"; /* table overflo*/
            converseLib.validationFailed(304); /* table overflo*/
            exit stack; /* exit to display map*/
          end

        end

        PW0KW00.PW0KWIDX = PW0KW00.PW0KWIDX + 1; /* increment map line*/
      end
      PW0KW00.XXXTSPAG = PW0KW00.XXXTSPAG + 1; /* increment temp storage*/
    end

    if (converseVar.validationMsgNum == 0)

      COMMAREA.CATOAP = "PW0L"; /* SPCL HNDL ORD SEL*/

      PW0KS02(); /* purge temp storage*/

      PW0KW00.PW0KWPWX = PW0KW00.PW0KWPWX - 1; /* decrement idx to current*/
      PWKREC.PWKARMAX = PW0KW00.PW0KWPWX; /* max array*/
      PKWREC.PKWARRAY[1] = PWKREC.PWKARRAY; /* array*/
      COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* commarea*/

      XSPKS01(); /* exit to another appl*/

       /* IF REQUEST FAILS, display error message*/

      COMMAREA.CATOAP = " "; /* TO APPLICATION*/

    end
  end

   /* ------------------------------------------------------------*/
   /* request P & H selection*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWPHF == "Y") /* P & H flag*/
    PW0KW00.PW0KWPHF = "N"; /* P & H flag*/

    if (converseVar.validationMsgNum == 0)

      COMMAREA.CATOAP = "PW0P"; /* P & H NON-SPCL HNDL SEL*/

      PW0KS02(); /* purge temp storage*/

      XSPKS01(); /* exit to another appl*/

       /* IF REQUEST FAILS, display error message*/

      COMMAREA.CATOAP = " "; /* TO APPLICATION*/
    end

  end


   /* ------------------------------------------------------------*/
   /* quantities selected*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWQTF == "Y") /* quantities selected flag*/

    PW0KW00.PW0KWUPE = "N"; /* update error flag off*/
    PW0KW00.PW0KWQTF = "N"; /* set qty selected flag off*/
    PW0KW00.PW0KWMPF = "Y"; /* format map*/
    PW0KW00.PW0KWDTF = "Y"; /* request for data*/

    PW0KW00.XXXTSPAG = 1; /* set temp storage to 1*/

    while (PW0KW00.XXXTSPAG <= PW0KW00.TA5TSQIX) /* all temp storage*/
      PW0KS03(); /* read temp storage*/
      PW0KW00.PW0KWIDX = 1; /* set line index to 1*/
      while (PW0KW00.PW0KWIDX <= PW0KW02.PW0KW2MX) /* lines on map*/

        /* ------------------------------------------------------*/
        /* DELETE DPICK.VSELQT01*/
        /* ------------------------------------------------------*/
        if (PW0KW02.PW0KWACT[PW0KWIDX] == "D") /* delete*/
          PW0KS17(); /* sel unq dpick.vselqt01*/
          if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
               /* row not found to delete*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* roll back all changes*/
            PW0KW00.PW0KWUPE = "Y"; /* update error*/
            PW0KW00.PW0KWHIX = PW0KW00.PW0KWIDX; /* hold index*/
            TA1REC.TA1PGMNO = "600"; /* module identification*/
            converseLib.validationFailed(201); /* no record found to delete*/
            PW0KW00.XXXTSPAG = PW0KW00.PW0KWPAG; /* current page*/
            exit stack; /* exit to display map*/
          end
          PW0KS21(); /* delete selqt*/
        end

        /* ------------------------------------------------------*/
        /* CHANGE DPICK.VSELQT01*/
        /* ------------------------------------------------------*/
        if (PW0KW02.PW0KWACT[PW0KWIDX] == "C") /* change*/
          PW0KS17(); /* sel unq dpick.vselqt01*/
          if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
               /* row not found to change*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* roll back all changes*/
            PW0KW00.PW0KWUPE = "Y"; /* update error*/
            PW0KW00.PW0KWHIX = PW0KW00.PW0KWIDX; /* hold index*/
            TA1REC.TA1PGMNO = "600"; /* module identification*/
            converseLib.validationFailed(8); /* no record found*/
            PW0KW00.XXXTSPAG = PW0KW00.PW0KWPAG; /* current page*/
            exit stack; /* exit to display map*/
          else
            if (SQLCA.VAGen_SQLCODE == 0) /* normal*/
              PW0KS18(); /* change selqt*/
            end
          end
        end

        /* -----------------------------------------------------*/
        /* INSERT DPICK.VSELQT01*/
        /* -----------------------------------------------------*/
        if (PW0KW02.PW0KWACT[PW0KWIDX] == "A") /* add*/
          PW0KS17(); /* sel unq dpick.vselqt01*/
          if (SQLCA.VAGen_SQLCODE == 100) /* not found*/

            PW0KS19(); /* add selqt*/

          else
            if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
                 /* row found - cannot add*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* roll back all changes*/
              PW0KW00.PW0KWUPE = "Y"; /* update error*/
              PW0KW00.PW0KWHIX = PW0KW00.PW0KWIDX; /* hold index*/
              TA1REC.TA1PGMNO = "600"; /* module identification*/
              converseLib.validationFailed(263); /* record already exists*/
              PW0KW00.XXXTSPAG = PW0KW00.PW0KWPAG; /* current page*/
              exit stack; /* exit to display map*/
            end
          end
        end

        PW0KW00.PW0KWIDX = PW0KW00.PW0KWIDX + 1; /* increment map line*/
      end
      PW0KW00.XXXTSPAG = PW0KW00.XXXTSPAG + 1; /* increment temp storage*/
    end

    /* ------------------------------------------------*/
    /* commit all changes to protect resources.*/
    /* ------------------------------------------------*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit all changes*/
    PW0KW00.PW0KWUPF = "Y"; /* update flag*/
  end

  PW0KW00.XXXTSPAG = PW0KW00.PW0KWPAG; /* display current page*/
end // end PW0K600

// move m001 to w02
Function PW0K610()
   /* ------------------------------------------------------------*/
   /* move the regular action to w02 (temp storage)*/
   /* ------------------------------------------------------------*/

  PW0KW02.PW0KW2IX = 1;
  PW0KW00.PW0KWMDF = "N"; /* modified flag*/

  while (PW0KW02.PW0KW2IX <= PW0KW02.PW0KW2MX) /* process temp*/

    if (PW0KM001.PW0KMACT[PW0KW2IX] != PW0KW02.PW0KWACT[PW0KW2IX])
      PW0KW02.PW0KWACT[PW0KW2IX] = PW0KM001.PW0KMACT[PW0KW2IX];
      PW0KW02.PW0KWRQF[PW0KW2IX] = PW0KM001.PW0KMRQF[PW0KW2IX];
      PW0KW02.PW0KWRQR[PW0KW2IX] = PW0KM001.PW0KMRQR[PW0KW2IX];
      PW0KW00.PW0KWMDF = "Y"; /* modified flag*/
    end

    PW0KW02.PW0KW2IX = PW0KW02.PW0KW2IX + 1; /* increment load*/

  end

  if (PW0KW00.PW0KWMDF == "Y") /* quantities entered*/
    PW0KS22(); /* update temp storage*/
  end

end // end PW0K610

// get min Pack & Hold date
Function PW0KS01()

  XX0XS01(); /* get current date*/

  set TA2REC empty; /* clear row storage area*/

  TA2REC.TA2GRGGN = XX0XW01.XX0XWDAT; /* yyyymmdd*/
  PW0KW00.PW0KWCUR = XX0XW01.XX0XWDAT; /* current date yyyymmdd*/

  TA2REC.TA2DTOPT = "GREGGREG"; /* gregorian date*/
  TA2REC.TA2GRTYP = "G"; /* type*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    TA2REC.TA2DYAOD = 2; /* add 2 days to current date*/
  else

    if (PKWREC.PKWSELSW == "PP") /* pick planning*/
      TA2REC.TA2DYAOD = 3; /* add 3 days to current date*/
    end

  end

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* date routine*/

   /* ------------------------------------------------------------*/
   /* Indicate error if the date doesn't pass the verification.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA2REC.TA2RTNCD < 888)         /* and subroutine completed*/

    if (TA2REC.TA2RTNCD == 0) /* Normal return code*/

      PW0KW00.PW0KWPHD = TA2REC.TA2GRGGN; /* yyyymmdd*/

      return; /* exit to display map*/

    else

      TAEREC.TAEDESC1 = sysVar.errorCode;
      TAEREC.TAEDESC2 = TA2REC.TA2GROUP;

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "CALC P & H DATE";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      TA1REC.TA1PGMNO = "S01"; /* Module identification*/
      converseLib.validationFailed(29); /* System error occurred*/

      return; /* exit to display map*/

    end

  end

end // end PW0KS01

// purge temporary storage
Function PW0KS02()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0KW02 empty; /* M001 temporary storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0KW00.TA5TSQIX = 0; /* Highest page number*/
  PW0KW00.XXXTSPAG = 0; /* working storage page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PW0K"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (TA5REC.TA5RTNCD == 0 /* and normal return code*/
     || TA5REC.TA5RTNCD == 4) /* and not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1PGMNO = "S01"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0KS02

// read temporary storage
Function PW0KS03()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "PW0K"; /* Application identification*/
  PW0KW02.XXXTSLEN = PW0KW00.XXXTSLEN;
  TA5REC.TA5TSQIX = PW0KW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1PGMNO = "S03"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0KS03

// add page to temporary storage
Function PW0KS04()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0KW02.XXXTSLEN = PW0KW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = "PW0K"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (PW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "PW0K190 "; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "PW0KM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TA1REC.TA1PGMNO = "S04 "; /* Error location*/
    return; /* Return to previous process*/

  end

  PW0KW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

end // end PW0KS04

// select 's2' vpick.vselor01
Function PW0KS05()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* Clear row storage area*/

  PKHREC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
  PKHREC.XBCCD = PW0KW01.XBCCD; /* brand code*/
  PKHREC.XDVCD = PW0KW01.XDVCD; /* division code*/
  PKHREC.PKURUNMD = PW0KW01.PKURUNMD; /* run mode*/

  PKHREC.OP1DSBDT = -1; /* don't ship before date*/

  PKHREC.PK-SEL-TYP-CD = "*"; /* select type code*/


  try
    call "IO1740" ("S2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0KS05

// fetch 'n2' dpick.vselor01
Function PW0KS06()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("N2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0KW00.PW0KWCRF = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0KS06

// close 'c2' cursor
Function PW0KS07()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("C2", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S07"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS07

// select vpick.vselqt01
Function PW0KS08()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PWMREC empty; /* Clear row storage area*/

  PWMREC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
  PWMREC.PKURUNMD = PW0KW01.PKURUNMD; /* run mode*/

  PWMREC.OP1DSBDT = -1; /* DNSB*/
  PWMREC.TF1CARCD = "*"; /* carrier code*/
  PWMREC.XHDCD = "*"; /* handling code*/
  PWMREC.XGPCD = "*"; /* general product code*/
  PWMREC.PK-SEL-TYP-CD = "*"; /* select type code*/

  if (PW0KW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0KW01.XDVCD;
  end

  if (PW0KW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0KW01.XBCCD;
  end

  try
    call "IO5500" ("S1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0KS08

// fetch next row dpick.vselqt01
Function PW0KS09()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("N1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0KW00.PW0KWCRF = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS09

// close cursor select set
Function PW0KS10()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("C1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S10"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS10

// select vpick.vpoolh01
Function PW0KS11()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/
  set PWIREC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
  PK4REC.XDVCD = PW0KW01.XDVCD; /* division code*/
  PK4REC.XBCCD = PW0KW01.XBCCD; /* brand code*/
  PK4REC.OP1DSBDT = -1; /* DNSB date*/

  PK4REC.PK4ORHLD = "*"; /* order hold flag*/
  PK4REC.PK4CUHLD = "*"; /* customer hold flag*/
  PK4REC.TF1CARCD = "*"; /* carrier code*/
  PK4REC.PK4SLIND = "*"; /* status field*/
  PK4REC.OP1SPHDF = "N"; /* special handling flag*/

  PWIREC.PWIFUNC = "S6"; /* function*/
  try
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sel set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0KS11

// fetch next row dpick.vpoolh01
Function PW0KS12()
   /* -----------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* -----------------------------------------------------------*/

  try
    call "IO1720" ("N6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      /* ----- colehaan ------------------------------------------*/
      if (PW0KM001.XBCCD == "*"
       && PK4REC.XBCCD == "08")

        PW0KW00.PW0KWVLD = "N"; /* not valid*/
      end

      /* ----- in-store promo ------------------------------------*/
      if (PK4REC.XDVCD == "01"
       && PK4REC.XGPCD == "01")

        PW0KW00.PW0KWVLD = "N"; /* not valid*/
      end

      /* ------ stock transfer ----------------------------------*/
      if (PK4REC.PK4STKTF == "Y")
        PW0KW00.PW0KWVLD = "N"; /* not valid*/
      end

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PK4REC.PK4SLIND == " " /* not processed yet*/
         || PK4REC.PK4SLIND == "S") /* selected*/
           /* next sentence*/
        else
          PW0KW00.PW0KWVLD = "N"; /* not valid*/
        end
      end

      if (PKWREC.PKWSELSW == "PP") /* pick planning*/
        if (PK4REC.PK4SLIND == " " /* not processed yet*/
         || PK4REC.PK4SLIND == "P" /* picked*/
         || PK4REC.PK4SLIND == "S") /* selected*/
           /* next sentence*/
        else
          PW0KW00.PW0KWVLD = "N"; /* not valid*/
        end
      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0KW00.PW0KWCRF = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0KS12

// close cursor vpick.vpoolh01
Function PW0KS13()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("C6", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S10"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS13

// select unq vpick.vselqt01
Function PW0KS17()
   /* ------------------------------------------------------------*/
   /* set up select quantity key*/
   /* ------------------------------------------------------------*/

  set PWMREC empty; /* initialize pwmrec*/
  PWMREC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
  PWMREC.PKURUNMD = PW0KW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = PW0KW02.OP1DSBDT[PW0KWIDX]; /* DNSB*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.XHDCD = " "; /* handling code*/
  PWMREC.TF1CARCD = " "; /* carrier code*/
  PWMREC.PK-SEL-TYP-CD = " 2"; /* sel type code*/

  if (PW0KW01.XDVCD == "*")
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0KW01.XDVCD;
  end

  if (PW0KW01.XBCCD == "*")
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0KW01.XBCCD;
  end

   /* ------------------------------------------------------------*/
   /* select unique selqt table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("S ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* select unq*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S17"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS17

// update vpick.vselqt01
Function PW0KS18()
   /* ------------------------------------------------------------*/
   /* Format the data from w02 into the table row.*/
   /* ------------------------------------------------------------*/

  PWMREC.PKHPVSFC = PW0KW02.PW0KWRQF[PW0KWIDX]; /* full case*/
  PWMREC.PKHPVSRP = PW0KW02.PW0KWRQR[PW0KWIDX]; /* full case*/
  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("U ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0KW00.PW0KWDTF = "Y"; /* Request for data switch*/

      TA1REC.TA1PGMNO = "S18"; /* Module identification*/
      converseLib.validationFailed(105); /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS18

// insert vselqt01
Function PW0KS19()
  set PWMREC empty; /* initialize row*/
  PWMREC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
  PWMREC.PKURUNMD = PW0KW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = PW0KW02.OP1DSBDT[PW0KWIDX]; /* DNSB*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.XHDCD = " "; /* handling code*/
  PWMREC.TF1CARCD = " "; /* carrier code*/
  PWMREC.PK-SEL-TYP-CD = " 2"; /* sel type code*/

  if (PW0KW01.XDVCD == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0KW01.XDVCD;
  end

  if (PW0KW01.XBCCD == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0KW01.XBCCD;
  end


  if (PW0KW02.PW0KWRQF[PW0KWIDX] == 0 /* qty full case*/
   && PW0KW02.PW0KWRQR[PW0KWIDX] == 0) /* qty repack*/
    PWMREC.PKHPVSFC = PW0KW02.PW0KWPFC[PW0KWIDX]; /* pool qty full case*/
    PWMREC.PKHPVSRP = PW0KW02.PW0KWPRP[PW0KWIDX]; /* pool qty repack*/
  else
    PWMREC.PKHPVSFC = PW0KW02.PW0KWRQF[PW0KWIDX]; /* qty full case*/
    PWMREC.PKHPVSRP = PW0KW02.PW0KWRQR[PW0KWIDX]; /* qty repack*/
  end

  PWMREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PWMREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* add the row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("A ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TA1REC.TA1PGMNO = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK    "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0KS19

// select unq vpick.vcahld01
Function PW0KS20()
   /* ------------------------------------------------------------*/
   /* check pool header for select order*/
   /* ------------------------------------------------------------*/

  if (PW0KW00.PW0KWPLF == "Y" /* pool header already read*/
   || PW0KW00.PW0KWSQF == "Y") /* select qty*/
    /* next sentence*/
  else

    PW0KS23(); /* select unq dpick.vpoolh01*/

    if (PW0KW00.PW0KWVLD == "N") /* invalid pool header*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* check carrier table*/
   /* ------------------------------------------------------------*/
  PW0KS24(); /* open vpick.vcahld01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

    PW0KW00.PW0KWEOF = "N"; /* eof flag*/
    while (PW0KW00.PW0KWEOF == "N") /* more carrier*/
      PW0KS25(); /* fetch vpick.vcahld01*/
    end

  end

  PW0KS26(); /* close vpick.vcahld01*/

  if (PW0KW00.PW0KWVLD == "N") /* invalid carrier*/
    return;
  end

  if (PW0KW00.PW0KWSQF == "Y") /* select qty*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* check order table*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4ORHLD == "Y") /* ORDER ON HOLD*/
    PW0KS27(); /* open vpick.vorhld01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

      PW0KW00.PW0KWEOF = "N"; /* eof flag*/
      while (PW0KW00.PW0KWEOF == "N") /* more orders*/
        PW0KS28(); /* fetch vpick.vorhld01*/
      end

    end

    PW0KS29(); /* close vpick.vorhld01*/
  end

  if (PW0KW00.PW0KWVLD == "N") /* invalid order*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* check customer table*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4CUHLD == "Y") /* CUSTOMER ON HOLD*/
    PW0KS30(); /* open vpick.vcuhld01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal open*/

      PW0KW00.PW0KWEOF = "N"; /* eof flag*/
      while (PW0KW00.PW0KWEOF == "N") /* more customer*/
        PW0KS31(); /* fetch vpick.vcuhld01*/
      end

    end

    PW0KS32(); /* close vpick.vcuhld01*/
  end

  if (PW0KW00.PW0KWVLD == "N") /* invalid customer*/
    return;
  end


end // end PW0KS20

// delete vpick.vselqt01
Function PW0KS21()
   /* ------------------------------------------------------------*/
   /* set up selqt01 key.*/
   /* ------------------------------------------------------------*/

  PWMREC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
  PWMREC.PKURUNMD = PW0KW01.PKURUNMD; /* run mode*/
  PWMREC.OP1DSBDT = PW0KW02.OP1DSBDT[PW0KWIDX]; /* DNSB*/
  PWMREC.XGPCD = COMMAREA.XGPCD; /* general product code*/
  PWMREC.TF1CARCD = " "; /* carrier code*/
  PWMREC.XHDCD = " "; /* handling code*/
  PWMREC.PK-SEL-TYP-CD = " 2"; /* select type code*/

  if (PW0KW01.XDVCD == "*")
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PW0KW01.XDVCD;
  end

  if (PW0KW01.XBCCD == "*")
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PW0KW01.XBCCD;
  end
   /* ------------------------------------------------------------*/
   /* delete table row.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("D ", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S21"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWMREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS21

// update temporary storage
Function PW0KS22()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  PW0KW02.XXXTSLEN = PW0KW00.XXXTSLEN;
  TA5REC.TA5TSQIX = PW0KW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TA1REC.TA1PGMNO = "S03"; /* Module identification*/
  converseLib.validationFailed(29); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0KS22

// select vpick.vpoolh01
Function PW0KS23()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/
  set PWIREC empty; /* Clear row storage area*/

  PK4REC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
  PK4REC.PK1CUOID = PKHREC.PK1CUOID; /* order stktf id*/
  PK4REC.PK1NORID = PKHREC.PK1NORID; /* nike order id*/

  PWIREC.PWIFUNC = "S "; /* function*/
  try
    call "IO1720" (PWIREC, SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Sel set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* -----------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      /* ----- colehann -----------------------------------------*/
      if (PW0KM001.XBCCD == "*"
       && PK4REC.XBCCD == "08")

        PW0KW00.PW0KWVLD = "N"; /* not valid*/
      end

      /* ----- in-store promo -----------------------------------*/
      if (PK4REC.XDVCD == "01"
       && PK4REC.XGPCD == "01")

        PW0KW00.PW0KWVLD = "N"; /* not valid*/
      end

      /* ----- stock transfer -----------------------------------*/
      if (PK4REC.PK4STKTF == "Y") /* stock transfer*/
        PW0KW00.PW0KWVLD = "N"; /* not valid*/
      end

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PK4REC.PK4SLIND == " " /* not processed yet*/
         || PK4REC.PK4SLIND == "S") /* selected*/
           /* next sentence*/
        else
          PW0KW00.PW0KWVLD = "N"; /* not valid*/
        end
      end

      if (PKWREC.PKWSELSW == "PP") /* pick planning*/
        if (PK4REC.PK4SLIND == " " /* not processed yet*/
         || PK4REC.PK4SLIND == "P" /* picked*/
         || PK4REC.PK4SLIND == "S") /* selected*/
           /* next sentence*/
        else
          PW0KW00.PW0KWVLD = "N"; /* not valid*/
        end
      end

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0KW00.PW0KWVLD = "N"; /* not valid*/
        return; /* Return to previous process*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S23"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS23

// select set vpick.vcahld01
Function PW0KS24()
   /* ------------------------------------------------------------*/
   /* set up carrier key.*/
   /* ------------------------------------------------------------*/

  PWFREC.XWHCD = PW0KW01.XWHCD; /* warehouse*/
  PWFREC.TF1CARCD = PW0KW01.TF1CARCD; /* carrier code*/

   /* ------------------------------------------------------------*/
   /* select set carrier table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* select unq*/


   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S24"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0KS24

// fetch next row dpick.vcahld01
Function PW0KS25()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PWFREC.PKBRELDT > PW0KW00.PW0KWCUR) /* after today*/
          PW0KW00.PW0KWVLD = "N"; /* invalid*/
        end

      else
        if (PKWREC.PKWSELSW == "PP") /* pick planning*/
          if (PWFREC.PKBPLRDT > PW0KW00.PW0KWCUR) /* after today*/
            PW0KW00.PW0KWVLD = "N"; /* invalid*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0KW00.PW0KWEOF = "Y"; /* end of file*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S25"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS25

// close cursor vpick.vcahld01
Function PW0KS26()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S26"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS26

// select set vpick.vorhld01
Function PW0KS27()
   /* ------------------------------------------------------------*/
   /* set up order key.*/
   /* ------------------------------------------------------------*/

  PKBREC.XWHCD = PK4REC.XWHCD; /* warehouse*/
  PKBREC.PK1CUOID = PK4REC.PK1CUOID; /* ord stktf id*/
  PKBREC.PK1NORID = PK4REC.PK1NORID; /* nike order id*/

   /* ------------------------------------------------------------*/
   /* select set order table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* select unq*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S27"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0KS27

// fetch next row dpick.vorhld01
Function PW0KS28()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PKBREC.PKBRELDT > PW0KW00.PW0KWCUR) /* after today*/
          PW0KW00.PW0KWVLD = "N"; /* invalid*/
        end

      else
        if (PKWREC.PKWSELSW == "PP") /* pick planning*/
          if (PKBREC.PKBPLRDT > PW0KW00.PW0KWCUR) /* after today*/
            PW0KW00.PW0KWVLD = "N"; /* invalid*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0KW00.PW0KWEOF = "Y"; /* end of file*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S28"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS28

// close cursor vpick.vorhld01
Function PW0KS29()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S29"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS29

// select set vpick.vcuhld01
Function PW0KS30()
   /* ------------------------------------------------------------*/
   /* set up customer key.*/
   /* ------------------------------------------------------------*/

  PK9REC.XWHCD = PK4REC.XWHCD; /* warehouse*/
  PK9REC.KUCCOID = PK4REC.KUCCOID; /* cu co id*/
  PK9REC.KUMSTRID = PK4REC.KUMSTRID; /* cu store id*/
  PK9REC.XNXCD = PK4REC.XNXCD; /* nike dept code*/

   /* ------------------------------------------------------------*/
   /* select set order table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S30"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW0KS30

// fetch next row dpick.vcuhld01
Function PW0KS31()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      if (PKWREC.PKWSELSW == "PK") /* picking*/
        if (PK9REC.PK9RELDT > PW0KW00.PW0KWCUR) /* after today*/
          PW0KW00.PW0KWVLD = "N"; /* invalid*/
        end

      else
        if (PKWREC.PKWSELSW == "PP") /* pick planning*/
          if (PK9REC.PK9PLRDT > PW0KW00.PW0KWCUR) /* after today*/
            PW0KW00.PW0KWVLD = "N"; /* invalid*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0KW00.PW0KWEOF = "Y"; /* end of file*/
      end

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S31"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH TABLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS31

// close cursor vpick.vcuhld01
Function PW0KS32()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1PGMNO = "S29"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end PW0KS32

//*** RECORD=PW0KW00 ****
// ------------------------
// Map 001 display storage
// ------------------------
// 
// 10/4/90  ML D'Angelo - added FG0HWHPS array to hold the
// history percents displayed on the screen so that we can
// determine if they have been changed or not.  FF1029
// ***********************
Record PW0KW00 type basicRecord
  10 PW0KWCRF PW0KWCRF ; 
  10 PW0KWVLD PW0KWVLD ; 
  10 PW0KWSQF PW0KWSQF ; 
  10 PW0KWPLF PW0KWPLF ; 
  10 PW0KWFTF PW0KWFTF ; 
  10 PW0KWCHF PW0KWCHF ; 
  10 PW0KWUPF PW0KWUPF ; 
  10 PW0KWUPE PW0KWUPE ; 
  10 PW0KWARF PW0KWARF ; 
  10 PW0KWPGF PW0KWPGF ; 
  10 PW0KWFPH PW0KWFPH ; 
  10 PW0KWEOF PW0KWEOF ; 
  10 PW0KWDTF PW0KWDTF ; 
  10 PW0KWMPF PW0KWMPF ; 
  10 PW0KWQTF PW0KWQTF ; 
  10 PW0KWMDF PW0KWMDF ; 
  10 PW0KWOIF PW0KWOIF ; 
  10 PW0KWPHF PW0KWPHF ; 
  10 CACHGFL CACHGFL ; 
  10 PW0KWPIX PW0KWPIX ; 
  10 PW0KWHIX PW0KWHIX ; 
  10 PW0KWPWX PW0KWPWX ; 
  10 PW0KWIDX PW0KWIDX ; 
  10 PW0KWMSG PW0KWMSG ; 
  10 PW0KWWAR PW0KWWAR ; 
  10 PW0KWQTY PW0KWQTY ; 
  10 PW0KWRMD PW0KWRMD ; 
  10 PW0KWMIN PW0KWMIN ; 
  10 PW0KWHR PW0KWHR ; 
  10 PW0KWMN PW0KWMN ; 
  10 PW0KWSPH PW0KWSPH ; 
    15 PW0KWHH PW0KWHH ; 
      20 PW0KWH1 PW0KWH1 ; 
      20 PW0KWH2 PW0KWH2 ; 
      20 PW0KWH3 PW0KWH3 ; 
    15 PW0KWCOL PW0KWCOL ; 
    15 PW0KWMM PW0KWMM ; 
  10 PW0KWTOT PW0KWTOT ; 
  10 PW0KWCUR PW0KWCUR ; 
  10 PW0KWFDT PW0KWFDT ; 
    15 PW0KWFCC PW0KWFCC ; 
    15 PW0KWFYY PW0KWFYY ; 
    15 PW0KWFMM PW0KWFMM ; 
    15 PW0KWFDD PW0KWFDD ; 
  10 PW0KWTOD PW0KWTOD ; 
  10 PW0KWFRD PW0KWFRD ; 
  10 PW0KWTDT PW0KWTDT ; 
    15 PW0KWTCC PW0KWTCC ; 
    15 PW0KWTYY PW0KWTYY ; 
    15 PW0KWTMM PW0KWTMM ; 
    15 PW0KWTDD PW0KWTDD ; 
  10 PW0KWPHD PW0KWPHD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW0KWPAG PW0KWPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end PW0KW00

//*** RECORD=PW0KW01 ****
// ------------------------
// Map 001 header
// ------------------------
// 
// ***********************
Record PW0KW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XDVCD XDVCD ; 
  10 XDVDESC XDVDESC ; 
  10 XBCCD XBCCD ; 
  10 XBCABRV XBCABRV ; 
  10 TF1CARCD TF1CARCD ; 
  10 XWHABRV XWHABRV ; 
  10 PKURUNMD PKURUNMD ; 
  10 PW0KWFDT PW0KWFDT ; 
    15 PW0KWFCC PW0KWFCC ; 
    15 PW0KWFYY PW0KWFYY ; 
    15 PW0KWFMM PW0KWFMM ; 
    15 PW0KWFDD PW0KWFDD ; 
  10 PW0KWTDT PW0KWTDT ; 
    15 PW0KWTCC PW0KWTCC ; 
    15 PW0KWTYY PW0KWTYY ; 
    15 PW0KWTMM PW0KWTMM ; 
    15 PW0KWTDD PW0KWTDD ; 
end // end PW0KW01

//*** RECORD=PW0KW02 ****
// -------------------------------
// temporary storage - m001 array
// -------------------------------
// ***********************
Record PW0KW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 PW0KWGP2 PW0KWGP2 ; 
    10 PW0KW2IX PW0KW2IX ; 
    10 PW0KW2MX PW0KW2MX ; 
    10 * char(41) [10] ; 
      15 PW0KWACT PW0KWACT ; 
      15 OP1DSBDT OP1DSBDT ; 
      15 PW0KWDDT PW0KWDDT ; 
        20 * num(2) ; 
        20 PW0KWSYY PW0KWSYY ; 
        20 PW0KWSMM PW0KWSMM ; 
        20 PW0KWSDD PW0KWSDD ; 
      15 PW0KWSHQ PW0KWSHQ ; 
      15 PW0KWPFC PW0KWPFC ; 
      15 PW0KWPRP PW0KWPRP ; 
      15 PW0KWOQF PW0KWOQF ; 
      15 PW0KWOQR PW0KWOQR ; 
      15 PW0KWRQF PW0KWRQF ; 
      15 PW0KWRQR PW0KWRQR ; 
end // end PW0KW02

//*** RECORD=PW0KW03 ****
// -------------------------
// map 001 totals
// -------------------------
// ***********************
Record PW0KW03 type basicRecord
  15 PW0KWSHT PW0KWSHT ; 
  15 PW0KWTHW PW0KWTHW ; 
  15 PW0KWTOF PW0KWTOF ; 
  15 PW0KWTOR PW0KWTOR ; 
  15 PW0KWTQF PW0KWTQF ; 
  15 PW0KWTQR PW0KWTQR ; 
end // end PW0KW03

//*** RECORD=PW0KW05 ****
// -------------------------
// W05 SELORD
// -------------------------
// ***********************
Record PW0KW05 type basicRecord
  5 PW0KW5IX PW0KW5IX ; 
  5 PW0KW5MX PW0KW5MX ; 
  5 * char(16) [100] ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 PW0KWSHQ PW0KWSHQ ; 
    10 PW0KWOFC PW0KWOFC ; 
    10 PW0KWORP PW0KWORP ; 
  5 * char(14) ; 
    10 PW0KWSHT PW0KWSHT ; 
    10 PW0KWTHW PW0KWTHW ; 
    10 PW0KWTOF PW0KWTOF ; 
    10 PW0KWTOR PW0KWTOR ; 
end // end PW0KW05

//*** RECORD=PW0KW06 ****
// -------------------------
// W06 SELQTY
// -------------------------
// ***********************
Record PW0KW06 type basicRecord
  5 PW0KW6IX PW0KW6IX ; 
  5 PW0KW6MX PW0KW6MX ; 
  5 * char(24) [100] ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 PW0KWSHQ PW0KWSHQ ; 
    10 PW0KWQFC PW0KWQFC ; 
    10 PW0KWQRP PW0KWQRP ; 
    10 PW0KWRQF PW0KWRQF ; 
    10 PW0KWRQR PW0KWRQR ; 
  5 * char(22) ; 
    10 PW0KWSHT PW0KWSHT ; 
    10 PW0KWTHW PW0KWTHW ; 
    10 PW0KWTOF PW0KWTOF ; 
    10 PW0KWTOR PW0KWTOR ; 
    10 PW0KWTQF PW0KWTQF ; 
    10 PW0KWTQR PW0KWTQR ; 
end // end PW0KW06

//*** RECORD=PW0KW07 ****
// -------------------------
// W07 POOL
// -------------------------
// ***********************
Record PW0KW07 type basicRecord
  5 PW0KWGP7 PW0KWGP7 ; 
    10 PW0KW7MX PW0KW7MX ; 
    10 PW0KW7IX PW0KW7IX ; 
    10 * char(12) [100] ; 
      15 OP1DSBDT OP1DSBDT ; 
      15 PW0KWPFC PW0KWPFC ; 
      15 PW0KWPRP PW0KWPRP ; 
end // end PW0KW07

//*** RECORD=PW0KW08 ****
// -------------------------
// W08 SELORD + SELQTY
// -------------------------
// ***********************
Record PW0KW08 type basicRecord
  5 PW0KW8IX PW0KW8IX ; 
  5 PW0KW8MX PW0KW8MX ; 
  5 * char(32) [100] ; 
    10 OP1DSBDT OP1DSBDT ; 
    10 PW0KWSHQ PW0KWSHQ ; 
    10 PW0KWPFC PW0KWPFC ; 
    10 PW0KWPRP PW0KWPRP ; 
    10 PW0KWOQF PW0KWOQF ; 
    10 PW0KWOQR PW0KWOQR ; 
    10 PW0KWRQF PW0KWRQF ; 
    10 PW0KWRQR PW0KWRQR ; 
  5 * char(22) ; 
    10 PW0KWSHT PW0KWSHT ; 
    10 PW0KWTHW PW0KWTHW ; 
    10 PW0KWTOF PW0KWTOF ; 
    10 PW0KWTOR PW0KWTOR ; 
    10 PW0KWTQF PW0KWTQF ; 
    10 PW0KWTQR PW0KWTQR ; 
end // end PW0KW08

// w02 index
DataItem PW0KW2IX smallint {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = " ", inputRequired = no
}
end

// w02 max index
DataItem PW0KW2MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w05 index
DataItem PW0KW5IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w05 max index
DataItem PW0KW5MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w06 index
DataItem PW0KW6IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w06 max index
DataItem PW0KW6MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of lines per page
DataItem PW0KW7IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// maximum lines per page
DataItem PW0KW7MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w08 index
DataItem PW0KW8IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w08 max index
DataItem PW0KW8MX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// action code
DataItem PW0KWACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning flag
DataItem PW0KWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key fields changed flag
DataItem PW0KWCHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// colon
DataItem PW0KWCOL char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// cursor flag
DataItem PW0KWCRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date ccyymmdd
DataItem PW0KWCUR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// dnsb date
DataItem PW0KWDDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// request for data flag
DataItem PW0KWDTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage eof flag
DataItem PW0KWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'from' cc
DataItem PW0KWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'from' dd
DataItem PW0KWFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb from dateccyymmdd
DataItem PW0KWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not ship before 'from' mm
DataItem PW0KWFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// format min P & H date 1x
DataItem PW0KWFPH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DNSB from date
DataItem PW0KWFRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// first time flag
DataItem PW0KWFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'from' yy
DataItem PW0KWFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage layout
DataItem PW0KWGP2 char(414)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// w07 record layout
DataItem PW0KWGP7 char(1204)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// hours - 1st position
DataItem PW0KWH1 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hours - 2nd position
DataItem PW0KWH2 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hours - 3rd position
DataItem PW0KWH3 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hours
DataItem PW0KWHH char(3)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hold error index
DataItem PW0KWHIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// hours
DataItem PW0KWHR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// work index
DataItem PW0KWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// modified flag
DataItem PW0KWMDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PW0KWMIN num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// minutes
DataItem PW0KWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// minutes
DataItem PW0KWMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// request to format map
DataItem PW0KWMPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message number
DataItem PW0KWMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// reg selord full case
DataItem PW0KWOFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order inquiry flag
DataItem PW0KWOIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reg selord & selqty fc
DataItem PW0KWOQF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reg selord & selqty rp
DataItem PW0KWOQR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reg selord repack
DataItem PW0KWORP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold temporary storage page
DataItem PW0KWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pool full case
DataItem PW0KWPFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// redisplay current page flag
DataItem PW0KWPGF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P & H date
DataItem PW0KWPHD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// reg P & H selection flag
DataItem PW0KWPHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem PW0KWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// pool header flag
DataItem PW0KWPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pool repack
DataItem PW0KWPRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem PW0KWPWX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// selqty fc
DataItem PW0KWQFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selqty rp
DataItem PW0KWQRP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quantity selected flag
DataItem PW0KWQTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity
DataItem PW0KWQTY decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// remainder
DataItem PW0KWRMD num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// non-spcl hndl selqty fc
DataItem PW0KWRQF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// non-spcl hndl selqty rp
DataItem PW0KWRQR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dnsb day
DataItem PW0KWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selected specl hndl qty
DataItem PW0KWSHQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total spcl hndl
DataItem PW0KWSHT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dnsb month
DataItem PW0KWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hrs minutes
DataItem PW0KWSPH char(6)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// select quantity flag
DataItem PW0KWSQF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dnsb year
DataItem PW0KWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not ship before 'to' cc
DataItem PW0KWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// do not ship before 'to' dd
DataItem PW0KWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dnsb to dateccyymmdd
DataItem PW0KWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total spcl hndl hrs
DataItem PW0KWTHW smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not ship before 'to' mm
DataItem PW0KWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// DNSB to date
DataItem PW0KWTOD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// total selord fc
DataItem PW0KWTOF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total selord rp
DataItem PW0KWTOR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total quantity
DataItem PW0KWTOT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", dateFormat = "yy-MM-dd", inputRequired = no
}
end

// total selqty fc
DataItem PW0KWTQF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total selqty rp
DataItem PW0KWTQR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not ship before 'to' yy
DataItem PW0KWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// update error flag
DataItem PW0KWUPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag
DataItem PW0KWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carrier status flag
DataItem PW0KWVLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning message number
DataItem PW0KWWAR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

