package pw0s;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import gd00.GD00M;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW0S ****
// This program allows users to view the 'At Once' and 'Pack
// and Hold' selected quantities sorted by special handling
// code.  To get into this screen, the user must enter from
// PW0R (Selection Summary).  This screen is for inquiry only.
// 
// The user can transfer out of this application by using one
// of the PF keys displayed at the bottom of the map, or by
// entering FAST PATH information (also at the bottom of the
// map).
// 
// -------   --------   ------   ------------------------------
// CONTROL     DATE     USERID   DESCRIPTION OF CHANGE
// -------   --------   ------   ------------------------------
// NEW       01/31/91   MSMIT3   New Application.
//           10/08/91   jcampb   table changes
//           10/28/91   shende   1. Display division code which
//                                  cannot be modified in the
//                                  header.
//                               2. Add division total qty and
//                                  whse total qty.
//           12/05/91   shende   Change field definition in map
//                               for DNSB date in heading.
//           04/06/92   shende   Allow access to whse 02 & 04.
//  tblchgs  06/22/92   mwalto   chg pw0s131 to move gpc &
//                               brand to pwmrec before calling
//                               io5500.
//  ColeHan  07/21/92   SHENDE   Display brand code
//           07/29/93   RCREAM   Added a second map for Picking
//                               screen to be pink. Changed the
//                               logic in the following: 200,
//                               210. Also added 200-conv-map1,
//                               and 200-conv-map2.
//           10/13/93   kande1   renamed new proc for standards
//  PK00     08/30/95   Ryonke   Added warehouse specific logic
//                               for Canada warehouse (whse=42)
// *********************
Program PW0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW0SW00 PW0SW00; // record
  PW0SW01 PW0SW01; // record
  PW0SW02 PW0SW02; // record
  PW0SW03 PW0SW03; // record
  PWFREC PWFREC; // record
  PWKREC PWKREC; // record
  PWLREC PWLREC; // record
  PWMREC PWMREC; // record
  PWNREC PWNREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XHDTBL; // table
  use XWHTBL; // table
  use XDVTBL; // table
  use XOTTBL; // table
  use XBCTBL; // table
  use PW0SM.PW0SM001,  // forms
      PW0SM.PW0SM002
   {
    helpKey = pf1,
    pfKeyEquate = no
  };
  use GD00M {
    helpGroup = yes,
    helpKey = pf1,
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize Working Storage And Display Storage Areas.*/
     /* ------------------------------------------------------------*/

    set PW0SM001 initial; /* M001 input/output*/
    set PW0SW00 empty; /* Working storage*/
    set PW0SW01 empty; /* M001 display storage*/
    set PW0SW02 empty; /* W/S For Selected Order Array*/
    set PW0SW03 empty; /* W/S For Selected Qtys Array*/
    move "999" to PW0SW02.XHDCD[1] for all; /* fill with eof values*/
    move "999" to PW0SW03.XHDCD[1] for all; /* fill with eof values*/
    set SQLCA empty; /* SQL Communications Area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA9REC empty; /* Record for called routine TA0190*/

    PW0SW00.PW0SWSWF = "Y"; /* Format the map switch*/
    PW0SW00.PW0SWSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (PKWREC.XWHCD > "  ") /* Warehouse passed*/

      if (PKWREC.XWHCD == "51" /* Warehouse is valid*/
       || PKWREC.XWHCD == "07" 
       || PKWREC.XWHCD == "04" 
       || PKWREC.XWHCD == "02" 
       || PKWREC.XWHCD == "42") /* Canada*/

        PW0SM001.XWHCD = PKWREC.XWHCD; /* Move whse code to map*/
        PW0SM001.XWHABRV = PKWREC.XWHABRV; /* Move whse name to map*/
        PW0SM001.XDVCD = PKWREC.XDVCD[1]; /* Move division cd to map*/
        PW0SM001.XBCCD = PKWREC.XBCCD[1]; /* Move brand cd to map*/

        PW0SW00.PW0SWSWR = "Y"; /* Request for data switch*/

      end

    end

    PW0SW00.XWHCD = PKWREC.XWHCD; /* warehouse code*/

     /* -------------------------------------------------------------*/
     /* Use the high/low values for date range*/
     /* -------------------------------------------------------------*/
    PW0SW00.PKWFRMDT = -999999999;
    PW0SW00.PKWTODT = +999999999;

     /* ------------------------------------------------------------*/
     /* Flow To Converse The Main Process Used To Display A Map.*/
     /* ------------------------------------------------------------*/

    goto PW0S000;


    PW0S000: PW0S000();
     /* ------------------------------------------------------------*/
     /* Flow To Converse The Main Process Used To Display A Map.*/
     /* ------------------------------------------------------------*/

    goto PW0S001; /* converse the main process*/


    PW0S001: PW0S001();
     /* ------------------------------------------------------------*/
     /* Flow To Converse The Main Process Used To Display A Map.*/
     /* ------------------------------------------------------------*/

    goto PW0S001; /* converse the main process*/


  end // end main
end // end PW0S

// Format and Converse the Map
Function PW0S-20001()
   /* ------------------------------------------------------------*/
   /* Note: Apply changes to pw0s-20002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* converse the "pick planning" map*/
   /* ------------------------------------------------------------*/

  PW0SM001.XXXLITPG = "PAGE";
  PW0SM001.XXXLITOF = "OF";

  converse PW0SM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  PW0SW01.XXXMODID = " "; /* module identification*/
  PW0SW01.XXXMSGNO = 0; /* message number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = PW0SM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0SM001.CAITEM; /* application data*/

end // end PW0S-20001

// Format and Converse the Map
Function PW0S-20002()
   /* ------------------------------------------------------------*/
   /* Note: apply changes to pw0s-20001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* converse the "picking" map*/
   /* ------------------------------------------------------------*/

  PW0SM001.XXXLITPG = "PAGE";
  PW0SM001.XXXLITOF = "OF";
  move PW0SM001 to PW0SM002 byName;

  converse PW0SM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  PW0SW01.XXXMODID = " "; /* module identification*/
  PW0SW01.XXXMSGNO = 0; /* message number*/
  COMMAREA.CAMSG = " "; /* message text*/

  COMMAREA.CATOAP = PW0SM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0SM002.CAITEM; /* application data*/

end // end PW0S-20002

// Check the FROM Application
Function PW0S000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0R" /* from allowed application*/
   || COMMAREA.CAFROMAP == "GD00") /* from allowed application*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ------------------------------------------------------------*/
   /* Determine If Valid Warehouse Was Passed.*/
   /* If valid warehouse, proceed; otherwise, display message*/
   /* and return to the application initiating the transfer.*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* common procedure to validate passed*/
                                   /* warehouse*/


   /* ------------------------------------------------------------*/
   /* Determine Minimum Pack & Hold Date*/
   /* ------------------------------------------------------------*/

   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE EZEDTE TO PW0SW00.PW0SWEDT; /* save system date*/
   /* IF PW0SW00.PW0SWEYY GT 80;       /* if year gt 80*/
   /* ;*/
   /* MOVE 19 TO PW0SW00.PW0SWECC;   /* set century to 19*/
   /* ;*/
   /* ELSE;*/
   /* ;*/
   /* MOVE 20 TO PW0SW00.PW0SWECC;   /* else, set to 20*/
   /* ;*/
   /* END;*/
   /* ;*/
   /* SET TA9REC EMPTY;                /* clear record for TA0190*/
   /* MOVE 19 TO TA9REC.TA9BEGCC;      /* set century to 19*/
   /* MOVE PW0SW00.PW0SWEYY TO TA9REC.TA9BEGYY;/* move system year to ta9rec*/
   /* MOVE PW0SW00.PW0SWEMM TO TA9REC.TA9BEGMM;/* move system month to*/
   /* ta9rec*/
   /* MOVEPW0SW00.PW0SWEDDTOTA9REC.TA9BEGDD;/*movesystemdaytota9rec*/
   /* ;*/
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  set TA9REC empty; /* clear record for TA0190*/
  PW0SW00.PW0SWDAT = VGVar.currentGregorianDate;
  TA9REC.TA9BEGDT = PW0SW00.PW0SWDAT; /* move system date to ta9rec*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  if (PKWREC.PKWSELSW == "PK") /* if picking*/

    TA9REC.TA9OFSET = 2; /* add 2 working days to curr dt*/
    PW0SW00.PK4PVSEL = "S"; /* set status = 's'*/
    PW0SW00.PW0SMAPL = "  PICKING   ";

  else

    if (PKWREC.PKWSELSW == "PP") /* if pick planning*/

      TA9REC.TA9OFSET = 3; /* add 3 working days to curr dt*/
      PW0SW00.PK4PVSEL = "P"; /* set status = 'p'*/
      PW0SW00.PW0SMAPL = "PICK PLANNING";

    end

  end

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes}; /* call subroutine TA0190*/

  if (TA9REC.TA9RTNFL != 0) /* if not a valid date...*/

    PW0SW01.XXXMODID = "000"; /* set module identification*/
    converseLib.validationFailed(29); /* unexpected err has occured*/
    PW0SW00.PW0SWSWR = "N"; /* request for data switch*/

  else /* else, successful return...*/

    /* -----------------------  Y2K OUT BEGIN  ------------------------*/
    /*  */
                                  /* MOVE TA9REC.TA9RTNYY TO*/
                                   /* PW0SW00.PW0SWPYY;/* move return year*/
                                   /* to w/s*/
                                  /* MOVE TA9REC.TA9RTNMM TO*/
                                   /* PW0SW00.PW0SWPMM;/* move return month*/
                                   /* to w/s*/
    /* MOVE TA9REC.TA9RTNDD TO PW0SW00.PW0SWPDD;/* move return day to w/s*/
    /* ;*/
    /* IF PW0SW00.PW0SWPYY GT 80;     /* if year gt 80*/
    /* ;*/
    /* MOVE 19 TO PW0SW00.PW0SWPCC; /* set century to 19*/
    /* ;*/
    /* ELSE;*/
    /* ;*/
    /* MOVE 20 TO PW0SW00.PW0SWPCC; /* otherwise, set to 20*/
    /* ;*/
    /* END;*/
    /* ;*/
    /* END;                             /* end.*/
    /* ;*/
    /*  */
    /* ------------------------  Y2K OUT END  -------------------------*/
    /* -----------------------  Y2K IN BEGIN  -------------------------*/
    /*  */
    PW0SW00.PW0SWMPH = TA9REC.TA9RTNDT; /* move return day to w/s*/
  end /* end.*/

    /*  */
    /* ------------------------  Y2K IN END  --------------------------*/

end // end PW0S000

// Main Process
Function PW0S001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate process untial an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* re-display the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0S100(); /* Obtain the data to display*/

  PW0S200(); /* Format and display the map*/

  PW0S300(); /* Check attention identifier*/

  PW0S400(); /* Reset fields to normal intensity*/

  PW0S500(); /* Verify the entered data*/

  PW0S600(); /* Process valid input request*/


end // end PW0S001

// Obtain The Data To Display
Function PW0S100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0SW00.PW0SWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  PW0SW00.XXXTSLEN = 979; /* ts length*/

  PW0S151(); /* ; purge temporary storage*/

  PW0SW01.XWHCD = PW0SM001.XWHCD; /* Whse code*/
  PW0SW01.XWHABRV = PW0SM001.XWHABRV; /* Whse abbreviation*/
  PW0SW01.XDVCD = PW0SM001.XDVCD; /* Division code*/
  PW0SW01.XBCCD = PW0SM001.XBCCD; /* Brand code*/


   /* ------------------------------------------------------------*/
   /* Initialize Indexes and totals*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWX1 = 0; /* Process By Selected Order Index*/
  PW0SW00.PW0SWX2 = 0; /* Process By Qty Selected Index*/
  PW0SW00.PW0SWX3 = 0; /* Display Storage Index*/


  PW0SW02.PW0SMHRW = 0; /* hours worked - whse*/
  PW0SW02.PW0SMWHR = 0; /* hours worked - whse*/
  PW0SW02.PW0SMHRD = 0; /* hours worked - div. code*/
  PW0SW02.PW0SMDHR = 0; /* hours worked - div. code*/
  PW0SW02.PW0SMTDV = 0; /* total units by division code*/
  PW0SW02.PW0SMTWH = 0; /* total units by whse code*/

   /* ------------------------------------------------------------*/
   /* Obtain Data From Tables To Be Displayed.*/
   /* ------------------------------------------------------------*/

  PW0S110(); /* Process By Selected Order*/

  PW0S130(); /* Process Selected By Quantity*/

  PW0S150(); /* Sort By Selected Qtys & Orders By HC*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWSWR = "N"; /* Request for data switch*/


end // end PW0S100

// Calc whse qty - Dpick.vphdit01
Function PW0S105()

   /* ---------------------------------------------------------------------*/
   /* Accumualate quantities from Dpick.vphdit01.*/
   /* ---------------------------------------------------------------------*/

   /* ----- accumulate units by warehouse code -------------------------*/
  PW0SW02.PW0SMWHS[PW0SWX1] = PW0SW02.PW0SMWHS[PW0SWX1] + PWNREC.PWNRPQTY;
  PW0SW02.PW0SMWHS[PW0SWX1] = PW0SW02.PW0SMWHS[PW0SWX1] + PWNREC.PWNFCQTY;

  PW0SW02.PW0SMTWH = PW0SW02.PW0SMTWH + PWNREC.PWNFCQTY + PWNREC.PWNRPQTY;


   /* ----- accumulate hours by warehouse code -------------------------*/
  PW0SW00.PW0SWTQT = PWNREC.PWNFCQTY + PWNREC.PWNRPQTY;

  if (PWNREC.XHDCD in XHDTBL.XHDCD
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    PW0SW00.PW0SWTHR = mathLib.round(XHDTBL.XHDSHMM[sysVar.arrayIndex] * PW0SW00.PW0SWTQT, -mathLib.decimals(PW0SW00.PW0SWTHR));
    PW0SW02.PW0SMWHR[PW0SWX1] = PW0SW02.PW0SMWHR[PW0SWX1] + PW0SW00.PW0SWTHR;
    PW0SW02.PW0SMHRW = PW0SW02.PW0SMHRW + PW0SW00.PW0SWTHR;

  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate error*/
    /* ------------------------------------------------------------*/

    PW0SW01.XXXMODID = "105"; /* module identification*/
    converseLib.validationFailed(29);

    exit stack;
  end



end // end PW0S105

// Process By Selected Order
Function PW0S110()
   /* ------------------------------------------------------------*/
   /* Initialization For Processing By Selected Order*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWEOS = "N"; /* end of orders switch*/

  PW0S111(); /* Loop Initialization*/

   /* ------------------------------------------------------------*/
   /* Process Order/Special Handling Code*/
   /* ------------------------------------------------------------*/

  while (PW0SW00.PW0SWEOS != "Y") /* While rows exist in VPHDIT01*/

    if (PW0SW00.PW0SWEOS == "N") /* if not end*/

      PW0S112(); /* Process Order/Special Handling Code*/

      PW0S115(); /* fetch next DPICK.VPHDIT01*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Close Cursor DPICK.VPHDIT01*/
   /* ------------------------------------------------------------*/

  PW0S113(); /* close cursor*/


end // end PW0S110

// Initialize Process By Sel Ord
Function PW0S111()
   /* ------------------------------------------------------------*/
   /* Open And Declare Cursor For DPICK.VPHDIT01*/
   /* ------------------------------------------------------------*/

  PW0S114(); /* Open Cursor For DPICK.VPHDIT01*/


   /* ------------------------------------------------------------*/
   /* Fetch Next (First) Row From DPICK.VPHDIT01*/
   /* ------------------------------------------------------------*/

  PW0S115(); /* Fetch Next Row From DPICK.VPHDIT01*/


   /* ------------------------------------------------------------*/
   /* Initialize HDR/ITM Index To One (0)*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWX1 = 1; /* set index to 1*/
  PW0SW00.PW0SWFTT = "Y"; /* first time thru*/


end // end PW0S111

// Process Order/Spec Handling Cd
Function PW0S112()
   /* ------------------------------------------------------------*/
   /* Select Unique Row From DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/

  PW0S116(); /* Select unique DPICK.VPOOLH01*/

   /* ------------------------------------------------------------*/
   /* If row not found, skip to fetch;*/
   /* Otherwise, check carrier for hold and process quantities.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0) /* normal return code not received*/
    return;
  end

   /* -------------------------------------------------------------*/
   /* Process only for the divison code that is display on map*/
   /* -------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PP") /* if pick planning*/

    if (PK4REC.PK4SLIND != "P") /* valid selection ind*/
      return; /* return to previous process*/
    end
  end

  if (PK4REC.PK4STKTF == "Y") /* stock transfer flag*/
    return; /* return to previous process*/
  end

   /* ---- Determine b-grade and closeouts, Do not process them -----*/
  XPPK005();

  if (PKWREC.PKW-ORDER-TYP-IND == "B" /* B-Grade*/
   || PKWREC.PKW-ORDER-TYP-IND == "C") /* Closeout*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* Order is not on hold if:*/
   /* 1) No rows are found in order hold file for the order*/
   /* OR,*/
   /* 2) If row(s) is/are found, the applicable release date is*/
   /* less than or equal to the current date*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWHLD = "N"; /* set hold flag to 'N'o.*/

  if (PK4REC.PK4ORHLD == "Y") /* if order hold flag is yes*/
    PW0S122(); /* check order hold status*/
  end

   /* ------------------------------------------------------------*/
   /* Reject order if found to be on hold*/
   /* ------------------------------------------------------------*/
  if (PW0SW00.PW0SWHLD == "Y") /* if order on hold*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Customer is not on hold if:*/
   /* 1) No rows are found in customer hold file,*/
   /* OR,*/
   /* 2) If row(s) is/are found, the applicable release date is*/
   /* less than or equal to the current date*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4CUHLD == "Y") /* if customer hold flag is yes*/
    PW0S123(); /* check customer hold status*/
  end

    /* reject order if customer is found to be on hold*/

  if (PW0SW00.PW0SWHLD == "Y") /* if customer on hold*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Carrier is not on hold if:*/
   /* 1) No rows are found in carrier hold file,*/
   /* OR,*/
   /* 2) If row(s) is/are found, the applicable release date is*/
   /* less than or equal to the current date*/
   /* ------------------------------------------------------------*/

  PW0S117(); /* check for carrier status*/

   /* ------------------------------------------------------------*/
   /* reject order if carrier is found to be on hold*/
   /* ------------------------------------------------------------*/

  if (PW0SW00.PW0SWHLD == "Y") /* if carrier on hold*/
    return;
  end

  if (PW0SW01.XDVCD == "*")
    if (PW0SW01.XBCCD == "*"
     && PK4REC.XBCCD == "08")

      PW0S105(); /* process quantities by whse code*/
    else
      PW0S118(); /* process quantities by division code*/
      PW0S105(); /* process quantities by whse code*/
    end
  else
    if (PW0SW01.XDVCD == PK4REC.XDVCD)
      if (PW0SW01.XBCCD == "*"
       && PK4REC.XBCCD == "08")

        PW0S105(); /* process quantities by whse code*/
      else
        PW0S118(); /* process quantities by division code*/
        PW0S105(); /* process quantities by whse code*/
      end
    else
      PW0S105(); /* process quantities by whse code*/
    end
  end


end // end PW0S112

// Close Cursor: DPICK.VPHDIT01
Function PW0S113()
   /* ------------------------------------------------------------*/
   /* Close the file*/
   /* ------------------------------------------------------------*/

  PWLREC.PWLFUNC = "C3"; /* set function to close cursor*/

  try
    call "IO5490" (PWLREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "113"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* data in use message*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error has occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* table view name*/
  TA1REC.TA1TBLKE = PW0SW00.XWHCD; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack;


end // end PW0S113

// Open Cursor For DPICK.VPHDIT01
Function PW0S114()
   /* ------------------------------------------------------------*/
   /* Open Cursor For DPICK.VPHDIT01*/
   /* ------------------------------------------------------------*/

  set PWNREC empty; /* clear record*/

  PWNREC.XWHCD = PW0SW01.XWHCD; /* warehouse code*/
  PWLREC.PWLFRMDT = PW0SW00.PKWFRMDT; /* DNSB 'from' date*/
  PWLREC.PWLTODT = PW0SW00.PKWTODT; /* DNSB 'to' date*/
  PWLREC.PWLFUNC = "S3"; /* function for SQL call*/

  try
    call "IO5490" (PWLREC, SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code SQL*/

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "114"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* data in use*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* table view name*/
  TA1REC.TA1TBLKE = PW0SW01.XWHCD; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S114

// Fetch Row From DPICK.VPHDIT01
Function PW0S115()
   /* ------------------------------------------------------------*/
   /* Fetch Row Next Row From DPICK.VPHDIT01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5490" ("N3", SQLCA, PWNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch Next Row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process...*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0SW00.PW0SWEOS = "Y"; /* End Of Search*/
      end

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "115"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(28); /* data in use*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen B4 display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "FETCH ROW"; /* location id*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VPHDIT01"; /* table view namne*/
  TA1REC.TA1TBLKE = PW0SW01.XWHCD; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S115

// Select Unique DPICK.VPOOLH01
Function PW0S116()
   /* ------------------------------------------------------------*/
   /* Select Unique From DPICK.VPOOLH01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* clear record*/

  PK4REC.XWHCD = PWNREC.XWHCD; /* warehouse code*/
  PK4REC.PK1CUOID = PWNREC.PK1CUOID; /* customer order id*/
  PK4REC.PK1NORID = PWNREC.PK1NORID; /* nike order id*/
  if (PKWREC.PKWSELSW == "PK")

    PK4REC.PK4SLIND = "S"; /* status*/

  else

    PK4REC.PK4SLIND = "*"; /* status*/

  end
  PK4REC.PK4ORHLD = "*"; /* order hold flag*/
  PK4REC.PK4CUHLD = "*"; /* customer hold flag*/
  PK4REC.OP1SPHDF = "Y"; /* special hndl flag*/
  PK4REC.TF1CARCD = "*"; /* carrier code*/

  try
    call "IO1720" ("SA", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* select uniquerow*/


   /* ------------------------------------------------------------*/
   /* If successful (0 or +100 valid), return to previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* return to prev process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user,*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "116"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource locked*/

    converseLib.validationFailed(28); /* data in use*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear map b4 display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE"; /* location id*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VPOOL001"; /* table view name*/
  TA1REC.TA1TBLKE = PW0SW00.XWHCD; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnois routine*/

  exit stack; /* exit to display map*/


end // end PW0S116

// Check Carrier For Hold Status
Function PW0S117()
   /* ------------------------------------------------------------*/
   /* Select Set From DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* clear csp record*/

  PWFREC.XWHCD = PW0SW01.XWHCD; /* warehouse*/
  PWFREC.TF1CARCD = PWNREC.TF1CARCD; /* carrier code*/

  PW0S119(); /* select rows from DPICK.VCAHLD01*/

   /* ------------------------------------------------------------*/
   /* Find The Carrier And Check Hold Status*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWEND = "N"; /* end of select set?*/

  while (PW0SW00.PW0SWHLD == "N" /* while carrier is not on hold*/
   && PW0SW00.PW0SWEND == "N") /* and more rows*/

    PW0S120(); /* fetch row*/

    if (PW0SW00.PW0SWEND == "N") /* not end of cursor*/
      if (PW0SW00.PK4PVSEL == "S") /* picking*/
        if (PWFREC.PKBRELDT > PW0SW00.PW0SWDAT)

          PW0SW00.PW0SWHLD = "Y"; /* carrier on hold*/

        end
      end

      if (PW0SW00.PK4PVSEL == "P") /* pick planning*/
        if (PWFREC.PKBPLRDT > PW0SW00.PW0SWDAT)

          PW0SW00.PW0SWHLD = "Y"; /* carrier on hold*/

        end
      end
    end
  end

  PW0S121(); /* close cursor*/


end // end PW0S117

// Process Quantities
Function PW0S118()
   /* ------------------------------------------------------------*/
   /* Initialize Variables If New Special Handling Code*/
   /* ------------------------------------------------------------*/

  if (PWNREC.XHDCD in PW0SW02.XHDCD) /* if already have entry for cd*/
    PW0SW00.PW0SWX1 = sysVar.arrayIndex; /* set index to entry for code*/

  else
    if ("999" in PW0SW02.XHDCD) /* find first open entry*/

      PW0SW00.PW0SWX1 = sysVar.arrayIndex; /* set index to empty entry*/
      PW0SW02.XHDCD[PW0SWX1] = PWNREC.XHDCD; /* save new code*/

    end
  end

  PW0SW02.PW0SMTAO = 0; /* total 'at once' qtys*/
  PW0SW02.PW0SMTPH = 0; /* total 'pack & hold' qtys*/
  PW0SW02.PW0SMTDV = 0; /* units by division code*/

  PW0SW00.PW0SWTQT = 0; /* total full cs + repack qtys*/
  PW0SW00.PW0SWTHR = 0; /* total hours worked*/

   /* ------------------------------------------------------------*/
   /* Calculate Totals and add to table accum fields...*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWTQT = PWNREC.PWNRPQTY + PWNREC.PWNFCQTY; /* fc + rp qty*/

  if (PW0SW00.PW0SWMPH <= PWNREC.OP1DSBDT)

   /* ----- pack and hold ------------------*/
    PW0SW02.PW0SMPKH[PW0SWX1] = PW0SW02.PW0SMPKH[PW0SWX1] + PW0SW00.PW0SWTQT;

  else

   /* ----- at once ------------------------*/
    PW0SW02.PW0SMATO[PW0SWX1] = PW0SW02.PW0SMATO[PW0SWX1] + PW0SW00.PW0SWTQT;

  end

   /* ---- Division total --------------*/
  PW0SW02.PW0SMDIV[PW0SWX1] = PW0SW02.PW0SMDIV[PW0SWX1] + PW0SW00.PW0SWTQT;

   /* ---- Calculate hrs and add them to totals -----------------------*/

  PW0SW00.XHDCD = PWNREC.XHDCD;
  PW0SW00.XGPCD = PK4REC.XGPCD;

  if (PW0SW00.XHDKEY in XHDTBL.XHDKEY) /* handling code in CSP table*/

    PW0SW00.PW0SWTHR = mathLib.round(XHDTBL.XHDSHMM[sysVar.arrayIndex] * PW0SW00.PW0SWTQT, -mathLib.decimals(PW0SW00.PW0SWTHR));
   /* ------ Division hours worked ------------------------*/
    PW0SW02.PW0SMDHR[PW0SWX1] = PW0SW02.PW0SMDHR[PW0SWX1] + PW0SW00.PW0SWTHR;
    PW0SW02.PW0SMHRD = PW0SW02.PW0SMHRD + PW0SW00.PW0SWTHR;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate error*/
    /* ------------------------------------------------------------*/

    PW0SW01.XXXMODID = "118"; /* module identification*/
    converseLib.validationFailed(29); /* unexpected error occured*/

    exit stack; /* exit to display map*/

  end


end // end PW0S118

// Select Set From DPICK.VCAHLD01
Function PW0S119()
   /* ------------------------------------------------------------*/
   /* Select Unique From DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("S1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* return to prev process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "119"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource unavailable*/

    converseLib.validationFailed(28); /* data in use err msg*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error occurred msg*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "SELECT SET"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S119

// Fetch Row From DPICK.VCAHLD01
Function PW0S120()
   /* ------------------------------------------------------------*/
   /* Using I/O Mod, Fetch Next Row From Selected Set*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("N1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        PW0SW00.PW0SWEND = "Y"; /* End Of Set Flag*/

      end

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "120"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource unavailable*/

    converseLib.validationFailed(28); /* data in use err msg*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear map before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "FETCH ROW"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S120

// Close Cursor: DPICK.VCAHLD01
Function PW0S121()
   /* ------------------------------------------------------------*/
   /* Close the file*/
   /* ------------------------------------------------------------*/

  try
    call "IO3190" ("C1", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "121"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* data in use message*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error has occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack;


end // end PW0S121

// Check Order Hold Status
Function PW0S122()
   /* ------------------------------------------------------------*/
   /* Select Set From DPICK.VORHLD01*/
   /* ------------------------------------------------------------*/

  PW0S124(); /* select rows from DPICK.VORHLD01*/

   /* ------------------------------------------------------------*/
   /* Find Order And Check Hold Status*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWEND = "N"; /* end of select set?*/

  while (PW0SW00.PW0SWHLD == "N" /* until order is found on hold*/
   && PW0SW00.PW0SWEND == "N") /* and no more rows*/

    PW0S125(); /* fetch row from selected set*/

    if (SQLCA.VAGen_SQLCODE == 100) /* end of select set*/
      PW0S126(); /* close cursor*/
      return; /* return to previous process*/
    end

    if (PW0SW00.PK4PVSEL == "S") /* picking*/

       /* release date <= current date*/
      if (PKBREC.PKBRELDT > PW0SW00.PW0SWDAT)

        PW0SW00.PW0SWHLD = "Y"; /* order on hold*/

      end

    end

    if (PW0SW00.PK4PVSEL == "P") /* pick planning*/

       /* release date <= current date*/
      if (PKBREC.PKBPLRDT > PW0SW00.PW0SWDAT)

        PW0SW00.PW0SWHLD = "Y"; /* order on hold*/

      end
    end
  end

  PW0S126(); /* close cursor*/


end // end PW0S122

// Check Customer Hold Status
Function PW0S123()
   /* ------------------------------------------------------------*/
   /* Select Set From DPICK.VCUHLD01*/
   /* ------------------------------------------------------------*/

  PW0S127(); /* select row(s) from DPICK.VCUHLD01*/

   /* ------------------------------------------------------------*/
   /* Find The Customer And Check Hold Status*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWEND = "N"; /* end of selected set?*/

  while (PW0SW00.PW0SWHLD == "N" /* until customer is found on hold*/
   && PW0SW00.PW0SWEND == "N") /* and no more rows*/

    PW0S128(); /* fetch row from DPICK.VCUHLD01 set*/

    if (SQLCA.VAGen_SQLCODE == 100) /* customer not found or end of select set*/
      PW0S129(); /* close cursor*/
      return; /* return to previous process*/
    end

    if (PW0SW00.PK4PVSEL == "S") /* picking*/

      if (PK9REC.PK9RELDT > PW0SW00.PW0SWDAT)

        PW0SW00.PW0SWHLD = "Y"; /* customer on hold*/

      end

    end

    if (PW0SW00.PK4PVSEL == "P") /* pick planning*/

      if (PK9REC.PK9PLRDT > PW0SW00.PW0SWDAT)

        PW0SW00.PW0SWHLD = "Y"; /* customer on hold*/

      end

    end

  end

  PW0S129(); /* close cursor*/


end // end PW0S123

// Select Set From DPICK.VORHLD01
Function PW0S124()
   /* ------------------------------------------------------------*/
   /* Select A Set Of Rows From DPICK.VORHLD01*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* clear record*/

  PKBREC.XWHCD = PW0SW01.XWHCD; /* warehouse code*/
  PKBREC.PK1CUOID = PWNREC.PK1CUOID; /* customer order id*/
  PKBREC.PK1NORID = PWNREC.PK1NORID; /* NIKE order id*/

  try
    call "IO1770" ("S1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* select row(s)*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* return to prev process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "124"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource unavailable*/

    converseLib.validationFailed(28); /* data in use*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error msg*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clr screen b4 display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "SELECT SET"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S124

// Fetch Row From DPICK.VORHLD01
Function PW0S125()
   /* ------------------------------------------------------------*/
   /* Using I/O Mod, Fetch Next Row From Selected Set*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("N1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        PW0SW00.PW0SWEND = "Y"; /* End Of Set Flag*/

      end

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "125"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource unavailable*/

    converseLib.validationFailed(28); /* data in use err msg*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear map before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "FETCH ROW"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S125

// Close Cursor: DPICK.VORHLD01
Function PW0S126()
   /* ------------------------------------------------------------*/
   /* Close the file*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("C1", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "126"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* data in use message*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error has occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack;


end // end PW0S126

// Select Set From DPICK.VCUHLD01
Function PW0S127()
   /* ------------------------------------------------------------*/
   /* Select A Set Of Row(s) From DPICK.VCUHLD01*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* clear record*/

  PK9REC.XWHCD = PW0SW01.XWHCD; /* warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID; /* customer order id*/
  PK9REC.KUMSTRID = PK4REC.KUMSTRID; /* customer store id*/
  PK9REC.XNXCD = PK4REC.XNXCD; /* customer xref*/

  try
    call "IO1790" ("S1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* select row(s)*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call sucessful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "127"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource unavailable*/

    converseLib.validationFailed(28); /* data in use error message*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error occurred msg*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "SELECT SET"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S127

// Fetch Row From DPICK.VCUHLD01
Function PW0S128()
   /* ------------------------------------------------------------*/
   /* Using I/O Mod, Fetch Next Row From Selected Set*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("N1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        PW0SW00.PW0SWEND = "Y"; /* End Of Set Flag*/

      end

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "128"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource unavailable*/

    converseLib.validationFailed(28); /* data in use err msg*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear map before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "FETCH ROW"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S128

// Close Cursor: DPICK.VCUHLD01
Function PW0S129()
   /* ------------------------------------------------------------*/
   /* Close the file*/
   /* ------------------------------------------------------------*/

  try
    call "IO1790" ("C1", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "129"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* data in use message*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error has occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack;


end // end PW0S129

// Process 'Selected By Qty'
Function PW0S130()
   /* ------------------------------------------------------------*/
   /* Initialization For Processing By Selected Quantities*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWEOQ = "N"; /* qty end of file switch*/

  PW0S131(); /* Loop Initialization*/

   /* ------------------------------------------------------------*/
   /* Process Quantites*/
   /* ------------------------------------------------------------*/

  while (PW0SW00.PW0SWEOQ != "Y") /* While rows exist in Vselqt01*/

    if (PW0SW00.PW0SWEOQ == "N") /* in not end of cursor*/

      PW0S132(); /* Process Selected Quantities*/

      PW0S135(); /* Fetch Selected Quantities*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Close Cursor To DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/

  PW0S133(); /* Close cursor DPICK.VSELQT01*/


end // end PW0S130

// Initialize Loop Thru VSELQT01
Function PW0S131()
   /* -----------------------------------------------------------*/
   /* Declare and Open Cursor For DPICK.VSELQT01*/
   /* -----------------------------------------------------------*/

  set PWMREC empty; /* clear record*/

  if (PKWREC.XDVCD[1] == "*") /* division code*/
    PWMREC.XDVCD = " ";
  else
    PWMREC.XDVCD = PKWREC.XDVCD[1];
  end

  if (PKWREC.XBCCD[1] == "*") /* brand code*/
    PWMREC.XBCCD = " ";
  else
    PWMREC.XBCCD = PKWREC.XBCCD[1];
  end

  PWMREC.XWHCD = PKWREC.XWHCD; /* warehouse code*/
  PWMREC.PK-SEL-TYP-CD = "*"; /* selection type indicator*/
  PWMREC.OP1DSBDT = -1; /* dnsb date*/
  PWMREC.TF1CARCD = "*"; /* carrier code*/
  PWMREC.XHDCD = "*"; /* handling code*/
  PWMREC.XGPCD = "*"; /* general product code*/
   /* MOVE PW0SW00.PK4PVSEL TO PWMREC.PKURUNMD;was moving 's' to runmode*/
  PWMREC.PKURUNMD = " "; /* run mode*/

  PW0S134(); /* declare and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch Next (First) Row From DPICK.VSELQT01 Selected Set*/
   /* ------------------------------------------------------------*/

  PW0S135(); /* fetch next row*/


   /* ------------------------------------------------------------*/
   /* Initialize Variable For First Pass Thru Loop*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWX2 = 1; /* array index for VSELQT01*/
  PW0SW00.PW0SWFTT = "Y"; /* first time thru switch*/


end // end PW0S131

// Process Select Quantities
Function PW0S132()
   /* ------------------------------------------------------------*/
   /* If Selection Type = Spec Handling or Pack & Hold Spec Hndl*/
   /* And DNSB Date Is Equal Or Prior To The End Of The Passed*/
   /* Date Range, Continue... Otherwise, Return To Prior Process.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Process only those orders with div code displayed on map.*/
   /* ------------------------------------------------------------*/

  if (PWMREC.PK-SEL-TYP-CD == " 1" /* selection type = special handling*/
   || PWMREC.PK-SEL-TYP-CD == " 3") /* or = pack & hold special handling*/

    if (PWMREC.OP1DSBDT <= PKWREC.PKWTODT) /* dnsb dt <= end of dt range*/

      PW0S137(); /* check for carrier status*/

      /* --------------------------------------------------------*/
      /* If Valid Carrier Not Found And End Reached, Exit Loop*/
      /* --------------------------------------------------------*/

      if (PW0SW00.PW0SWHLD == "Y") /* if carrier on hold*/
        return; /* return to previous process*/
      end

      if (PW0SW01.XDVCD == "*")
        if (PW0SW01.XBCCD == "*"
         && PWMREC.XBCCD == "08")

          PW0S138(); /* calculate whse totals*/
        else
          PW0S136(); /* calculate division totals*/
          PW0S138(); /* calculate whse totals*/
        end
      else
        if (PWMREC.XDVCD == PW0SW01.XDVCD)
          if (PW0SW01.XBCCD == "*"
           && PWMREC.XBCCD == "08")

            PW0S138(); /* calculate whse totals*/
          else
            PW0S136(); /* calculate division totals*/
            PW0S138(); /* calculate whse totals*/
          end
        else
          PW0S138(); /* calculate whse totals*/
        end
      end

    end
  end


end // end PW0S132

// Close Cursor DPICK.VSELQT01
Function PW0S133()
   /* ------------------------------------------------------------*/
   /* Close the file*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("C1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "133"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* data in use message*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error has occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* table view name*/
  TA1REC.TA1TBLKE = PW0SW00.XWHCD; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack;


end // end PW0S133

// Open Cursor For DPICK.VSELQT01
Function PW0S134()
   /* ------------------------------------------------------------*/
   /* Open Cursor For DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("S1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* fetch row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code SQL*/

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "134"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* data in use*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* table view name*/
  TA1REC.TA1TBLKE = PW0SW01.XWHCD; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S134

// Fetch Row From DPICK.VSELQT01
Function PW0S135()
   /* ------------------------------------------------------------*/
   /* Fetch Row Next Row From DPICK.VSELQT01*/
   /* ------------------------------------------------------------*/

  try
    call "IO5500" ("N1", SQLCA, PWMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch Next Row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process...*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        PW0SW00.PW0SWEOQ = "Y"; /* End Of Search*/
      end

      return; /* return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW0SW01.XXXMODID = "135"; /* module identification*/

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(28); /* data in use*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(29); /* unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

    converseLib.clearScreen();
     /* clear screen B4 display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOC = "FETCH ROW"; /* location id*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* database name*/
  TA1REC.TA1TBLVU = "VSELQT01"; /* table view namne*/
  TA1REC.TA1TBLKE = PW0SW01.XWHCD; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S135

// Calculate Totals & Build Array
Function PW0S136()
   /* ------------------------------------------------------------*/
   /* Initialize Variables If New Special Handling Code*/
   /* ------------------------------------------------------------*/

  if (PWMREC.XHDCD in PW0SW02.XHDCD) /* if already have entry for cd*/
    PW0SW00.PW0SWX1 = sysVar.arrayIndex; /* set index to entry for code*/

  else
    if ("999" in PW0SW02.XHDCD) /* find first open entry*/
      PW0SW00.PW0SWX1 = sysVar.arrayIndex; /* set index to empty entry*/
      PW0SW02.XHDCD[PW0SWX1] = PWMREC.XHDCD; /* save new code*/

    end
  end

  PW0SW02.PW0SMTAO = 0; /* total 'at once' qtys*/
  PW0SW02.PW0SMTPH = 0; /* total 'pack & hold' qtys*/
  PW0SW02.PW0SMTDV = 0; /* total division qtys*/

  PW0SW00.PW0SWTQT = 0; /* total full cs + repack qtys*/
  PW0SW00.PW0SWTHR = 0; /* total hours worked*/


   /* ------------------------------------------------------------*/
   /* Calculate Totals and add to table accum fields...*/
   /* ------------------------------------------------------------*/

   /* -------- full case + repack --------------------------------*/
  PW0SW00.PW0SWTQT = PWMREC.PKHPVSFC + PWMREC.PKHPVSRP;

   /* -------- pack & hold ---------------------------------------*/
  if (PW0SW00.PW0SWMPH <= PWMREC.OP1DSBDT) /* if pack and hold*/

    PW0SW02.PW0SMPKH[PW0SWX1] = PW0SW02.PW0SMPKH[PW0SWX1] + PW0SW00.PW0SWTQT;
  else

   /* -------- at once -------------------------------------------*/

    PW0SW02.PW0SMATO[PW0SWX1] = PW0SW02.PW0SMATO[PW0SWX1] + PW0SW00.PW0SWTQT;
  end

   /* -------- units by division code ----------------------------*/
  PW0SW02.PW0SMDIV[PW0SWX1] = PW0SW02.PW0SMDIV[PW0SWX1] + PW0SW00.PW0SWTQT;


   /* -------- CALCULATE HOURS -----------------------------------*/
  PW0SW00.XHDCD = PWMREC.XHDCD;

  PW0SW00.XGPCD = "03";
  if (PWMREC.XWHCD != "51")
    PW0SW00.XGPCD = "02";
  end

  if (PW0SW00.XHDKEY in XHDTBL.XHDKEY /* handling code in CSP table*/
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    PW0SW00.PW0SWTHR = mathLib.round(XHDTBL.XHDSHMM[sysVar.arrayIndex] * PW0SW00.PW0SWTQT, -mathLib.decimals(PW0SW00.PW0SWTHR));
   /* -------- accumulate hours ----------------------------------*/
    PW0SW02.PW0SMDHR[PW0SWX1] = PW0SW02.PW0SMDHR[PW0SWX1] + PW0SW00.PW0SWTHR;
    PW0SW02.PW0SMHRD = PW0SW02.PW0SMHRD + PW0SW00.PW0SWTHR;

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate error*/
    /* ------------------------------------------------------------*/

    PW0SW01.XXXMODID = "136"; /* module identification*/
    converseLib.validationFailed(29); /* unexpected error occured*/

    exit stack; /* exit to display map*/

  end



end // end PW0S136

// Select Set From DPICK.VCAHLD01
Function PW0S137()
   /* ------------------------------------------------------------*/
   /* Select Set From DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* clear csp record*/

  PWFREC.XWHCD = PW0SW01.XWHCD; /* warehouse*/
  PWFREC.TF1CARCD = PWMREC.TF1CARCD; /* carrier code*/

  PW0S119(); /* select rows from DPICK.VCAHLD01*/

   /* ------------------------------------------------------------*/
   /* Find The Carrier And Check Hold Status*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWHLD = "N"; /* carrier on hold?*/
  PW0SW00.PW0SWEND = "N"; /* end of select set?*/

  while (PW0SW00.PW0SWHLD == "N" /* while carrier is not on hold*/
   && PW0SW00.PW0SWEND == "N") /* and more rows*/

    PW0S120(); /* fetch row*/

    if (PW0SW00.PW0SWEND == "N") /* not end*/
      if (PW0SW00.PK4PVSEL == "S") /* picking*/
        if (PWFREC.PKBRELDT > PW0SW00.PW0SWDAT)

          PW0SW00.PW0SWHLD = "Y"; /* carrier on hold*/

        end
      end

      if (PW0SW00.PK4PVSEL == "P") /* pick planning*/
        if (PWFREC.PKBPLRDT > PW0SW00.PW0SWDAT)

          PW0SW00.PW0SWHLD = "Y"; /* carrier on hold*/

        end
      end
    end
  end

  PW0S121(); /* close cursor*/


end // end PW0S137

// Calc whse qty - Dpick.vselqt01
Function PW0S138()

   /* ---------------------------------------------------------------------*/
   /* Warehouse totals from Dpick.vselqt01*/
   /* ---------------------------------------------------------------------*/

   /* ----- accumulate units by warehouse code -------------------------*/
  PW0SW02.PW0SMWHS[PW0SWX1] = PW0SW02.PW0SMWHS[PW0SWX1] + PWMREC.PKHPVSFC;
  PW0SW02.PW0SMWHS[PW0SWX1] = PW0SW02.PW0SMWHS[PW0SWX1] + PWMREC.PKHPVSRP;

  PW0SW02.PW0SMTWH = PW0SW02.PW0SMTWH + PWMREC.PKHPVSFC + PWMREC.PKHPVSRP;


   /* ----- accumulate hours by warehouse code -------------------------*/
  PW0SW00.PW0SWTQT = PWMREC.PKHPVSFC + PWMREC.PKHPVSRP;

  if (PWMREC.XHDCD in XHDTBL.XHDCD
   && XHDTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    PW0SW00.PW0SWTHR = mathLib.round(XHDTBL.XHDSHMM[sysVar.arrayIndex] * PW0SW00.PW0SWTQT, -mathLib.decimals(PW0SW00.PW0SWTHR));
    PW0SW02.PW0SMWHR[PW0SWX1] = PW0SW02.PW0SMWHR[PW0SWX1] + PW0SW00.PW0SWTHR;
    PW0SW02.PW0SMHRW = PW0SW02.PW0SMHRW + PW0SW00.PW0SWTHR;

  else
    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate error*/
    /* ------------------------------------------------------------*/

    PW0SW01.XXXMODID = "138"; /* module identification*/
    converseLib.validationFailed(29);

    exit stack;
  end



end // end PW0S138

// Sort Sel Qtys & Orders By H.C.
Function PW0S150()
   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no error messages*/
    PW0SW00.XXXTSPAG = 1; /* page number to display*/
  end

   /* establish w03 array for bubble sort...*/


   /* ------------------------------------------------------------*/
   /* Bubble sort to get array in spcl hndl code order.*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWX1 = 1; /* initialize source index*/
  PW0SW00.PW0SWX2 = 2; /* initialize target index*/
  PW0SW00.PW0SWX3 = 1; /* work index*/
  PW0SW00.PW0SWX4 = 1; /* work index*/
  PW0SW00.PW0SWOSW = "N"; /* sel-ord eof switch*/
  PW0SW00.PW0SWQSW = "N"; /* sel-qty eof switch*/

  while (PW0SW02.XHDCD[PW0SWX1] != "999") /* check for eof's*/

    while (PW0SW02.XHDCD[PW0SWX2] != "999") /* check for eof's*/

      if (PW0SW02.XHDCD[PW0SWX1] > PW0SW02.XHDCD[PW0SWX2]) /* source > target*/
         /* save target line...*/
        PW0SW03.XHDCD = PW0SW02.XHDCD[PW0SWX2]; /* save*/
        PW0SW03.PW0SMATO = PW0SW02.PW0SMATO[PW0SWX2]; /* save*/
        PW0SW03.PW0SMPKH = PW0SW02.PW0SMPKH[PW0SWX2]; /* save*/
        PW0SW03.PW0SMDIV = PW0SW02.PW0SMDIV[PW0SWX2]; /* save*/
        PW0SW03.PW0SMWHS = PW0SW02.PW0SMWHS[PW0SWX2]; /* save*/
        PW0SW03.PW0SMDHR = PW0SW02.PW0SMDHR[PW0SWX2]; /* save*/
        PW0SW03.PW0SMWHR = PW0SW02.PW0SMWHR[PW0SWX2]; /* save*/

         /* shift everyone else up from source entry until reach target*/

        PW0SW00.PW0SWX4 = PW0SW00.PW0SWX2; /* set 'to' work index*/
        PW0SW00.PW0SWX3 = PW0SW00.PW0SWX4 - 1; /* set 'from' work index*/
        while (PW0SW00.PW0SWX3 >= PW0SW00.PW0SWX1) /* till reached target*/

          PW0SW02.XHDCD[PW0SWX4] = PW0SW02.XHDCD[PW0SWX3];
          PW0SW02.PW0SMATO[PW0SWX4] = PW0SW02.PW0SMATO[PW0SWX3];
          PW0SW02.PW0SMPKH[PW0SWX4] = PW0SW02.PW0SMPKH[PW0SWX3];
          PW0SW02.PW0SMDIV[PW0SWX4] = PW0SW02.PW0SMDIV[PW0SWX3];
          PW0SW02.PW0SMWHS[PW0SWX4] = PW0SW02.PW0SMWHS[PW0SWX3];
          PW0SW02.PW0SMDHR[PW0SWX4] = PW0SW02.PW0SMDHR[PW0SWX3];
          PW0SW02.PW0SMWHR[PW0SWX4] = PW0SW02.PW0SMWHR[PW0SWX3];

          PW0SW00.PW0SWX3 = PW0SW00.PW0SWX3 - 1; /* decrement work index*/
          PW0SW00.PW0SWX4 = PW0SW00.PW0SWX4 - 1; /* decrement work index*/

        end
         /* now restore target to source location*/
        PW0SW02.XHDCD[PW0SWX1] = PW0SW03.XHDCD;
        PW0SW02.PW0SMATO[PW0SWX1] = PW0SW03.PW0SMATO;
        PW0SW02.PW0SMPKH[PW0SWX1] = PW0SW03.PW0SMPKH;
        PW0SW02.PW0SMDIV[PW0SWX1] = PW0SW03.PW0SMDIV;
        PW0SW02.PW0SMWHS[PW0SWX1] = PW0SW03.PW0SMWHS;
        PW0SW02.PW0SMDHR[PW0SWX1] = PW0SW03.PW0SMDHR;
        PW0SW02.PW0SMWHR[PW0SWX1] = PW0SW03.PW0SMWHR;

      end
      PW0SW00.PW0SWX2 = PW0SW00.PW0SWX2 + 1; /* increment target index*/
    end

    PW0SW00.PW0SWX1 = PW0SW00.PW0SWX1 + 1; /* increment source index*/
    PW0SW00.PW0SWX2 = PW0SW00.PW0SWX1 + 1; /* reset target index*/
  end

   /* ------------------------------------------------------------*/
   /* now, add for grand totals*/
   /* ------------------------------------------------------------*/


  PW0SW00.PW0SWX1 = 1; /* init 'from' index*/
  PW0SW00.PW0SWX2 = 1; /* init 'to' index*/

  while (PW0SW02.XHDCD[PW0SWX1] != "999") /* til no more handling codes*/

    PW0SW00.PW0SWATO = PW0SW00.PW0SWATO + PW0SW02.PW0SMATO[PW0SWX1];
    PW0SW00.PW0SWPKH = PW0SW00.PW0SWPKH + PW0SW02.PW0SMPKH[PW0SWX1];
    PW0SW00.PW0SWDIV = PW0SW00.PW0SWDIV + PW0SW02.PW0SMDIV[PW0SWX1];
    PW0SW00.PW0SWWHS = PW0SW00.PW0SWWHS + PW0SW02.PW0SMWHS[PW0SWX1];
    PW0SW00.PW0SWDHR = PW0SW00.PW0SWDHR + PW0SW02.PW0SMDHR[PW0SWX1];
    PW0SW00.PW0SWWHR = PW0SW00.PW0SWWHR + PW0SW02.PW0SMWHR[PW0SWX1];

    PW0SW00.PW0SWX1 = PW0SW00.PW0SWX1 + 1;

  end

   /* ------------------------------------------------------------*/
   /* now load t/s*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWX1 = 1; /* init 'from' index*/
  PW0SW00.PW0SWX2 = 1; /* init 'to' index*/

  while (PW0SW02.XHDCD[PW0SWX1] != "999") /* til no more handling codes*/

    PW0SW01.XHDCD[PW0SWX2] = PW0SW02.XHDCD[PW0SWX1];
    PW0SW01.PW0SMATO[PW0SWX2] = PW0SW02.PW0SMATO[PW0SWX1];
    PW0SW01.PW0SMPKH[PW0SWX2] = PW0SW02.PW0SMPKH[PW0SWX1];
    PW0SW01.PW0SMDIV[PW0SWX2] = PW0SW02.PW0SMDIV[PW0SWX1];
    PW0SW01.PW0SMWHS[PW0SWX2] = PW0SW02.PW0SMWHS[PW0SWX1];
    PW0SW01.PW0SMDHR[PW0SWX2] = PW0SW02.PW0SMDHR[PW0SWX1];
    PW0SW01.PW0SMWHR[PW0SWX2] = PW0SW02.PW0SMWHR[PW0SWX1];
    /* ----- hours and minutes ------------------------------------*/
    PW0SW01.PW0SMDHR[PW0SWX2] = PW0SW02.PW0SMDHR[PW0SWX1] / 60; /* hours*/
    PW0SW01.PW0SMDMN[PW0SWX2] = PW0SW02.PW0SMDHR[PW0SWX1] % 60; /* mins*/
    PW0SW01.PW0SMWHR[PW0SWX2] = PW0SW02.PW0SMWHR[PW0SWX1] / 60; /* hours*/
    PW0SW01.PW0SMWMN[PW0SWX2] = PW0SW02.PW0SMWHR[PW0SWX1] % 60; /* mins*/

    PW0SW00.PW0SWX1 = PW0SW00.PW0SWX1 + 1;
    PW0SW00.PW0SWX2 = PW0SW00.PW0SWX2 + 1;

    if (PW0SW00.PW0SWX2 > 13) /* if working storage is full*/

      PW0S152(); /* load w01 with header/footer stuff*/
      PW0S156(); /* add page to temporary storage*/

      PW0SW00.PW0SWX2 = 1; /* display line index*/

    end
  end

  if (PW0SW00.PW0SWX2 > 1) /* write last page if not full*/

    PW0S152(); /* load hdr/ftr*/
    PW0S156(); /* add page to temporary storage*/

  end


end // end PW0S150

// Purge Temporary Storage
Function PW0S151()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0SW01 empty; /* M001 display storage*/

  PW0SW00.PW0SWSWU = "N"; /* storage update switch*/

  TA5REC.TA5TSQIX = 0; /* current page number*/
  PW0SW00.TA5TSQIX = 0; /* highest page number*/

  PW0SW00.PW0SWX1 = 1; /* Selected Order Index*/
  PW0SW00.PW0SWX2 = 1; /* Selected Qty Index*/
  PW0SW00.PW0SWX3 = 1; /* Display Array Index*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  try
    call "TA0050" (PW0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW0SW01.XXXMODID = "151"; /* module identification*/
  converseLib.validationFailed(29); /* unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "PURGE TEMP STORAGE"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S151

// load w01 hdr/ftr data
Function PW0S152()
   /* -----------------------------------------------------------*/
   /* Load display storage with header and footer data.*/
   /* -----------------------------------------------------------*/

  PW0SW01.PW0SMTAO = PW0SW00.PW0SWATO; /* total at once*/
  PW0SW01.PW0SMTPH = PW0SW00.PW0SWPKH; /* total pack & hold*/
  PW0SW01.PW0SMTDV = PW0SW00.PW0SWDIV; /* total division*/
  PW0SW01.PW0SMTWH = PW0SW00.PW0SWWHS; /* total warehouse*/
   /* ----- hours by division code --------------------------*/
  PW0SW01.PW0SMHRD = PW0SW00.PW0SWDHR / 60; /* total hours*/
  PW0SW01.PW0SMMND = PW0SW00.PW0SWDHR % 60; /* remaining mins*/
   /* ----- hours by warehouse code -------------------------*/
  PW0SW01.PW0SMHRW = PW0SW00.PW0SWWHR / 60; /* total hours*/
  PW0SW01.PW0SMMNW = PW0SW00.PW0SWWHR % 60; /* remaining mins*/

  PW0SW01.XWHCD = PKWREC.XWHCD;
  PW0SW01.XWHABRV = PKWREC.XWHABRV;
  PW0SW01.XDVCD = PKWREC.XDVCD[1];
  PW0SW01.XBCCD = PKWREC.XBCCD[1];


end // end PW0S152

// Add Page To Temporary Storage
Function PW0S156()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage*/
   /* ------------------------------------------------------------*/

  PW0SW01.XXXTSLEN = PW0SW00.XXXTSLEN; /* temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/

  try
    call "TA0050" (PW0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW0SW01 empty; /* M001 display storage*/

    PW0SW00.TA5TSQIX = TA5REC.TA5TSQIX; /* highest page number*/
    TA5REC.TA5TSQIX = 0; /* current page number*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/

  PW0SW01.XXXMODID = "156"; /* module identification*/
  converseLib.validationFailed(29); /* unexpected error message*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "ADD PG TEMP STORAGE"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0S156

// Format and Converse the Map
Function PW0S200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* error was found*/
    PW0SW01.XXXMSGNO = converseVar.validationMsgNum; /* message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display*/
   /* ------------------------------------------------------------*/

  if (PW0SW00.PW0SWSWR == "Y" /* obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0SW00.PW0SWSWF == "Y") /* map must be formatted*/
      PW0S210(); /* format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current data*/

  PW0SM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0SM001.CAITEM = COMMAREA.CAITEM; /* application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW0SW01.XXXMSGNO != 0 /* message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW0SW01.XXXMSGNO != 0) /* message to display*/

        if (PW0SW00.XXXTSPAG == 1) /* first page*/
          if (PW0SW01.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW0SW01.XXXMSGNO);
          end /* message number*/
          PW0SM001.XXXMODID = PW0SW01.XXXMODID; /* module id*/
          set PW0SM001 alarm; /* indicate sound alarm*/
          set PW0SM002 alarm; /* indicate sound alarm*/
        end

      else
        PW0SM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* message text*/
        PW0SM001.XXXMODID = PW0SW01.XXXMODID; /* module id*/
        set PW0SM001 alarm; /* indicate sound alarm*/
        set PW0SM002 alarm; /* indicate sound alarm*/
      end

    end
  else
    PW0SM001.XXXMODID = PW0SW01.XXXMODID; /* module id*/
    set PW0SM001 alarm; /* indicate sound alarm*/
    set PW0SM002 alarm; /* indicate sound alarm*/
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW0S-20002();
  else
    PW0S-20001();
  end


end // end PW0S200

// Format The Display Data
Function PW0S210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0SM001 initial; /* M001 input/output area*/
  set PW0SM002 initial; /* M002 input/output area*/

  PW0SW00.PW0SWSWF = "N"; /* format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0SW00.TA5TSQIX > 0) /* page(s) were formatted*/

    if (PW0SW00.XXXTSPAG != TA5REC.TA5TSQIX) /* desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW0SW00.PW0SWSWU == "Y") /* current page was changed*/

        PW0SS01(); /* update temporary storage pg*/

        PW0SW00.PW0SWSWU = "N"; /* storage update switch*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0SW00.XXXTSPAG > PW0SW00.TA5TSQIX) /* desired > highest*/

        PW0SW00.XXXTSPAG = PW0SW00.TA5TSQIX; /* default to highest*/

      end

      PW0SS01(); /* obtain temp storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0SM001.XXXLITPG skip;
    set PW0SM002.XXXLITOF skip;
    PW0SM001.XXXTSPAG = PW0SW00.XXXTSPAG; /* current page*/
    PW0SM001.XXXTSQIX = PW0SW00.TA5TSQIX; /* highest page*/

  else /* no pages were formatted*/

    converseLib.validationFailed(110);

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0SM001.XWHCD = PW0SW01.XWHCD; /* warehouse code*/
  PW0SM001.XWHABRV = PW0SW01.XWHABRV; /* warehouse abbreviation*/
  PW0SM001.PW0SMAPL = PW0SW00.PW0SMAPL; /* map title*/
  PW0SM001.XDVCD = PW0SW01.XDVCD; /* division code*/
  PW0SM001.XBCCD = PW0SW01.XBCCD; /* brand code*/

  if (PW0SW01.XDVCD == "*")
    PW0SM001.XDVDESC = "ALL DIVISIONS";
  else
    if (PW0SW01.XDVCD in XDVTBL.XDVCD)
      PW0SM001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  if (PW0SW01.XBCCD == "*")
    /* check to make sure a prior message isn't cancelled out*/

    if (PW0SW00.XXXMSGNO == 0)
      PW0SW00.XXXMSGNO = 421;
    end
    PW0SM001.XBCABRV = " ";
  else
    if (PW0SW01.XBCCD in XBCTBL.XBCCD)
      PW0SM001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  PW0SW00.PW0SWX3 = 1; /* initialize line index*/

  while (PW0SW00.PW0SWX3 <= 13) /* until screen is full*/

    PW0SM001.XHDCD[PW0SWX3] = PW0SW01.XHDCD[PW0SWX3]; /* hndl cd*/
    PW0SM001.PW0SMATO[PW0SWX3] = PW0SW01.PW0SMATO[PW0SWX3]; /* at once*/
    PW0SM001.PW0SMPKH[PW0SWX3] = PW0SW01.PW0SMPKH[PW0SWX3]; /* p & h*/
    PW0SM001.PW0SMDIV[PW0SWX3] = PW0SW01.PW0SMDIV[PW0SWX3]; /* div cd*/
    PW0SM001.PW0SMWHS[PW0SWX3] = PW0SW01.PW0SMWHS[PW0SWX3]; /* whse*/

    if (PW0SW01.PW0SMWHR[PW0SWX3] == 0 /* no hrs*/
     && PW0SW01.PW0SMWMN[PW0SWX3] == 0) /* no mins too*/

       /* next sentence*/
    else
      /* ----- move w/s hrs & minutes by division code ----------*/
      PW0SW00.PW0SMHHH = PW0SW01.PW0SMDHR[PW0SWX3];
      PW0SW00.PW0SMMM = PW0SW01.PW0SMDMN[PW0SWX3];
      PW0SW00.PW0SMCLN = ":";
      PW0SM001.PW0SMDHR[PW0SWX3] = PW0SW00.PW0SMTIM;

      /* ----- move w/s hrs & minutes by warehouse code ---------*/
      PW0SW00.PW0SMHHH = PW0SW01.PW0SMWHR[PW0SWX3];
      PW0SW00.PW0SMMM = PW0SW01.PW0SMWMN[PW0SWX3];
      PW0SW00.PW0SMCLN = ":";
      PW0SM001.PW0SMWHR[PW0SWX3] = PW0SW00.PW0SMTIM;

    end

    PW0SW00.PW0SWX3 = PW0SW00.PW0SWX3 + 1; /* increment line index by 1*/

  end

  PW0SM001.PW0SMTAO = PW0SW01.PW0SMTAO; /* total "at once" units*/
  PW0SM001.PW0SMTPH = PW0SW01.PW0SMTPH; /* total "pack & hold" units*/
  PW0SM001.PW0SMTDV = PW0SW01.PW0SMTDV; /* total division units*/
  PW0SM001.PW0SMTWH = PW0SW01.PW0SMTWH; /* total warehouse units*/

  if (PW0SW01.PW0SMTWH == 0 /* no warehouse units*/
   && PW0SW01.PW0SMHRW == 0 /* no hours*/
   && PW0SW01.PW0SMMNW == 0) /* and no minutes*/
     /* next sentence*/

  else
    if (PW0SW01.PW0SMTDV == 0 /* no division code units*/
     && PW0SW01.PW0SMDHR == 0 /* no hours*/
     && PW0SW01.PW0SMDMN == 0) /* and no minutes*/
      /* next sentence*/
    else
      /* ----- move total hrs & min by division code ------------*/
      PW0SW00.PW0SMHHH = PW0SW01.PW0SMHRD; /* total hours worked*/
      PW0SW00.PW0SMCLN = ":";
      PW0SW00.PW0SMMM = PW0SW01.PW0SMMND; /* total minutes*/
      PW0SM001.PW0SMHRD = PW0SW00.PW0SMTIM; /* total hours worked*/

      /* ----- move total hrs & min by warehouse code -----------*/
      PW0SW00.PW0SMHHH = PW0SW01.PW0SMHRW; /* total hours worked*/
      PW0SW00.PW0SMCLN = ":";
      PW0SW00.PW0SMMM = PW0SW01.PW0SMMNW; /* total minutes*/
      PW0SM001.PW0SMHRW = PW0SW00.PW0SMTIM; /* total hours worked*/
    end
  end


end // end PW0S210

// Check Attention Identifier
Function PW0S300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0SW00.PW0SWSWR == "Y") /* request for data switch*/
      set PW0SW01 empty; /* M001 display storage*/
    end

    PW0SW00.PW0SWSWF = "Y"; /* format the map switch*/
    PW0SW00.PW0SWSWR = "N"; /* request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* application data*/

    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0SM001.CATOAP > " ") /* FAST PATH was entered*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (PW0SM001.CATOAP == "PW0S") /* itself*/

        PW0SW01.XXXMODID = "300"; /* module identification*/
        converseLib.validationFailed(1); /* PA/PF key may not be used*/
        set PW0SM001.CATOAP cursor, bold; /* highlight*/

        exit stack; /* exit to display map*/

      else

        PW0S151(); /* purge temporary storage*/

        XSPKS01(); /* exit to another application*/

        set PW0SM001.CATOAP cursor, bold; /* highlight*/

      end
    else

      PW0SW01.XXXMODID = "300"; /* module identification*/
      converseLib.validationFailed(13); /* PA/PF key may not be used*/

    end

    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP or exit to previous level requested, exit to*/
   /* another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0SM001"; /* application find code*/
      COMMAREA.CATOAP = "GD00"; /* TO application*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PW0R"; /* TO application*/
    end

    PW0S151(); /* purge temporary storage*/

    XSPKS01(); /* exit to another application*/

    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW0SW01.XXXMODID = "300"; /* module identification*/
    converseLib.validationFailed(12); /* invalid PF key pressed*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* clear screen before display*/
    end

    exit stack; /* exit to display map*/

  end

  if (converseVar.eventKey is enter /* ENTER was pressed*/
   && PW0SM001.CATOAP == " "        /* and TO application blank*/
   && PW0SM001.CAITEM == " ")       /* and application data blank*/

    PW0SW01.XXXMODID = "300"; /* module identification*/
    converseLib.validationFailed(15); /* enter valid only w/fastpath*/

    exit stack; /* exit to display map*/

  end


end // end PW0S300

// Reset Highlighted Fields
Function PW0S400()
   /* ------------------------------------------------------------*/
   /* Reset Field Attributes To Normal Intensity*/
   /* ------------------------------------------------------------*/

  set PW0SM001.XWHCD initialAttributes; /* warehouse code*/
  set PW0SM001.XWHABRV initialAttributes; /* warehouse abbreviation*/
  set PW0SM001.XDVCD initialAttributes; /* division code*/
  set PW0SM001.XDVDESC initialAttributes; /* division description*/
  set PW0SM001.XBCCD initialAttributes; /* brand code*/


  set PW0SM001.CATOAP initialAttributes; /* TO application*/
  set PW0SM001.CAITEM initialAttributes; /* application data*/


end // end PW0S400

// Verify Data That Was Entered
Function PW0S500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0SM001.CAITEM > " ") /* application data was entered*/

    PW0SW00.XXXMODID = "500"; /* module identification*/
    converseLib.validationFailed(329); /* error message*/
    set PW0SM001.CAITEM cursor, bold; /* highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    if (converseVar.eventKey is pf7 /* scroll back request*/
     && PW0SW00.XXXTSPAG < 2)       /* and no previous pages*/

      PW0SW01.XXXMODID = "500"; /* module identification*/
      converseLib.validationFailed(37); /* no previous page err msg*/

    end

    if (converseVar.eventKey is pf8 /* scroll forward request*/
     && PW0SW00.XXXTSPAG >= PW0SW00.TA5TSQIX) /* and no more pages*/

      PW0SW01.XXXMODID = "500"; /* module identification*/
      converseLib.validationFailed(38); /* no more pages err msg*/

    end

  end

  if (converseVar.validationMsgNum != 0) /* error messages exist*/

    exit stack; /* exit to display map*/

  end


end // end PW0S500

// Process Valid Input Request
Function PW0S600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display*/
   /* ------------------------------------------------------------*/

  PW0SW00.PW0SWSWF = "Y"; /* format the map switch*/


   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* scroll back request*/

    PW0SW00.XXXTSPAG = PW0SW00.XXXTSPAG - 1; /* decrement page number*/

    return; /* return to prev process*/

  end


   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* scroll forward request*/

    PW0SW00.XXXTSPAG = PW0SW00.XXXTSPAG + 1; /* increment page number*/

    return; /* return to prev process*/

  end


end // end PW0S600

// Read Temporary Storage Page
Function PW0SS01()
   /* ------------------------------------------------------------*/
   /* Obtain the nex page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0SW01.XXXTSLEN = PW0SW00.XXXTSLEN; /* temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application identification*/
  TA5REC.TA5TSQIX = PW0SW00.XXXTSPAG; /* page number*/
  TA5REC.TA5FNCCD = "R"; /* function code*/

  try
    call "TA0050" (PW0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* return to previous*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/

  PW0SW01.XXXMODID = "S01"; /* module identification*/
  converseLib.validationFailed(29); /* unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMP STORAGE"; /* location of error*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = PW0SW01.XXXMODID; /* program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map application*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

  exit stack; /* exit to display map*/


end // end PW0SS01

//*** RECORD=PW0SW00 ****
//           ------------------------------------
//           Working Storage For Application PW0S
//           ------------------------------------
// 
// 
//   DATE     USERID   COMMENTS
// --------   ------   ----------------------------------------
// 01/21/91   MSMIT3   Initial Record Creation
// 
// ***********************
Record PW0SW00 type basicRecord
  10 XWHCD XWHCD ; 
  10 PW0SWSWF PW0SWSWF ; 
  10 PW0SWSWR PW0SWSWR ; 
  10 PW0SWSWU PW0SWSWU ; 
  10 PW0SWOSW PW0SWOSW ; 
  10 PW0SWQSW PW0SWQSW ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PK4PVSEL PK4PVSEL ; 
  10 PW0SWDAT PW0SWDAT ; 
    15 PW0SWECC PW0SWECC ; 
    15 PW0SWEDT PW0SWEDT ; 
      20 PW0SWEYY PW0SWEYY ; 
      20 PW0SWEMM PW0SWEMM ; 
      20 PW0SWEDD PW0SWEDD ; 
  10 PW0SWMPH PW0SWMPH ; 
    15 PW0SWPCC PW0SWPCC ; 
    15 PW0SWPYY PW0SWPYY ; 
    15 PW0SWPMM PW0SWPMM ; 
    15 PW0SWPDD PW0SWPDD ; 
  10 PW0SWTDT PW0SWTDT ; 
    15 PW0SWTCC PW0SWTCC ; 
    15 * num(6) ; 
  10 PW0SWFDT PW0SWFDT ; 
    15 PW0SWFCC PW0SWFCC ; 
    15 * num(6) ; 
  10 PKWFRMDT PKWFRMDT ; 
  10 PKWTODT PKWTODT ; 
  10 PW0SWX1 PW0SWX1 ; 
  10 PW0SWX2 PW0SWX2 ; 
  10 PW0SWX3 PW0SWX3 ; 
  10 PW0SWX4 PW0SWX4 ; 
  10 PW0SWEOS PW0SWEOS ; 
  10 PW0SWEOQ PW0SWEOQ ; 
  10 PW0SWEND PW0SWEND ; 
  10 PW0SWFTT PW0SWFTT ; 
  10 PW0SWHLD PW0SWHLD ; 
  10 PW0SWTQT PW0SWTQT ; 
  10 PW0SWTHR PW0SWTHR ; 
  10 PW0SWDHR PW0SWDHR ; 
  10 PW0SWWHR PW0SWWHR ; 
  10 PW0SWATO PW0SWATO ; 
  10 PW0SWPKH PW0SWPKH ; 
  10 PW0SWDIV PW0SWDIV ; 
  10 PW0SWWHS PW0SWWHS ; 
  10 PW0SWAT1 PW0SWAT1 ; 
  10 PW0SWAT2 PW0SWAT2 ; 
  10 PW0SWPK1 PW0SWPK1 ; 
  10 PW0SWPK2 PW0SWPK2 ; 
  10 PW0SWHR1 PW0SWHR1 ; 
  10 PW0SWHR2 PW0SWHR2 ; 
  10 PW0SWTT1 PW0SWTT1 ; 
  10 PW0SWTT2 PW0SWTT2 ; 
  10 * char(10) ; 
  10 PW0SMTIM PW0SMTIM ; 
    15 PW0SMHHH PW0SMHHH ; 
    15 PW0SMCLN PW0SMCLN ; 
    15 PW0SMMM PW0SMMM ; 
  10 PW0SMAPL PW0SMAPL ; 
  10 XHDKEY XHDKEY ; 
    15 XHDCD XHDCD ; 
    15 XGPCD XGPCD ; 
end // end PW0SW00

//*** RECORD=PW0SW01 ****
//                -----------------------
//                Map 001 Display Storage
//                -----------------------
// 
// 
//   DATE    USERID  COMMENTS
// --------  ------  ------------------------------------------
// 01/24/91  MSMIT3  Initial Record Creation
// 
// ***********************
Record PW0SW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(979) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XDVCD XDVCD ; 
    10 XBCCD XBCCD ; 
    10 XXXMODID XXXMODID ; 
    10 XXXMSGNO XXXMSGNO ; 
    10 PW0SMTAO PW0SMTAO ; 
    10 PW0SMTPH PW0SMTPH ; 
    10 PW0SMTDV PW0SMTDV ; 
    10 PW0SMTWH PW0SMTWH ; 
    10 PW0SMHRD PW0SMHRD ; 
    10 PW0SMMND PW0SMMND ; 
    10 PW0SMHRW PW0SMHRW ; 
    10 PW0SMMNW PW0SMMNW ; 
    10 PW0SMTHR PW0SMTHR ; 
    10 PW0SMTMN PW0SMTMN ; 
    10 XHDCD XHDCD [13] ; 
    10 PW0SMATO PW0SMATO [13] ; 
    10 PW0SMPKH PW0SMPKH [13] ; 
    10 PW0SMDIV PW0SMDIV [13] ; 
    10 PW0SMWHS PW0SMWHS [13] ; 
    10 PW0SMTOT PW0SMTOT [13] ; 
    10 PW0SMHRS PW0SMHRS [13] ; 
    10 PW0SMMIN PW0SMMIN [13] ; 
    10 PW0SMDHR PW0SMDHR [13] ; 
    10 PW0SMDMN PW0SMDMN [13] ; 
    10 PW0SMWHR PW0SMWHR [13] ; 
    10 PW0SMWMN PW0SMWMN [13] ; 
end // end PW0SW01

//*** RECORD=PW0SW02 ****
//            ------------------------------------
//            Application Working Storage Record 2
//            ------------------------------------
// 
// 
//   DATE     USERID   COMMENTS
// --------   ------   ----------------------------------------
// 01/28/91   MSMIT3   New Record Creation.
// 
// 
// ***********************
Record PW0SW02 type basicRecord
  5 * char(12296) ; 
    10 XHDCD XHDCD [250] ; 
    10 PW0SMATO PW0SMATO [250] ; 
    10 PW0SMPKH PW0SMPKH [250] ; 
    10 PW0SMDIV PW0SMDIV [250] ; 
    10 PW0SMWHS PW0SMWHS [250] ; 
    10 PW0SMDHR PW0SMDHR [250] ; 
    10 PW0SMWHR PW0SMWHR [250] ; 
    10 PW0SMTAO PW0SMTAO ; 
    10 PW0SMTPH PW0SMTPH ; 
    10 PW0SMTDV PW0SMTDV ; 
    10 PW0SMTWH PW0SMTWH ; 
    10 PW0SMHRD PW0SMHRD ; 
    10 PW0SMHRW PW0SMHRW ; 
end // end PW0SW02

//*** RECORD=PW0SW03 ****
//           ------------------------------------
//           Application Working Storage Record 3
//           ------------------------------------
// 
// 
//   DATE     USERID   COMMENTS
// --------   ------   ----------------------------------------
// 01/28/91   MSMIT3   New Record Creation.
// 
// 
// ***********************
Record PW0SW03 type basicRecord
  5 * char(12296) ; 
    10 XHDCD XHDCD [250] ; 
    10 PW0SMATO PW0SMATO [250] ; 
    10 PW0SMPKH PW0SMPKH [250] ; 
    10 PW0SMDIV PW0SMDIV [250] ; 
    10 PW0SMWHS PW0SMWHS [250] ; 
    10 PW0SMDHR PW0SMDHR [250] ; 
    10 PW0SMWHR PW0SMWHR [250] ; 
    10 PW0SMTAO PW0SMTAO ; 
    10 PW0SMTPH PW0SMTPH ; 
    10 PW0SMTDV PW0SMTDV ; 
    10 PW0SMTWH PW0SMTWH ; 
    10 PW0SMHRD PW0SMHRD ; 
    10 PW0SMHRW PW0SMHRW ; 
end // end PW0SW03

// PK_PRV_SEL_FL
DataItem PK4PVSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// useage, picking or pk planning
DataItem PW0SMAPL char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// at once units
DataItem PW0SMATO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// colon
DataItem PW0SMCLN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// hours work by div code
DataItem PW0SMDHR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// units by division code
DataItem PW0SMDIV num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// minutes work by div code
DataItem PW0SMDMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hours
DataItem PW0SMHHH num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total hrs work by div. code
DataItem PW0SMHRD num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hours worked selected
DataItem PW0SMHRS num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total hrs work by whse code
DataItem PW0SMHRW num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// minutes worked selected
DataItem PW0SMMIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem PW0SMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total minutes work by div code
DataItem PW0SMMND num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total minutes work by whse cd
DataItem PW0SMMNW num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pack and hold units
DataItem PW0SMPKH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total at once units
DataItem PW0SMTAO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total units by division code
DataItem PW0SMTDV num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total hours work selected
DataItem PW0SMTHR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hours worked selected
DataItem PW0SMTIM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total minutes work selected
DataItem PW0SMTMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total of at once & p&h units
DataItem PW0SMTOT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total pack & hold units
DataItem PW0SMTPH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total units by warehouse
DataItem PW0SMTWH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hours work by whse
DataItem PW0SMWHR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// units by warehouse
DataItem PW0SMWHS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// minutes work by whse
DataItem PW0SMWMN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// At Once Sel Ord units temp
DataItem PW0SWAT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// At Once Sel Qty units temp
DataItem PW0SWAT2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// At Once Units
DataItem PW0SWATO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current date ccyymmdd
DataItem PW0SWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total hours work area - div cd
DataItem PW0SWDHR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// units by division code
DataItem PW0SWDIV num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PW0SWECC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day to pass to TA0190
DataItem PW0SWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date from EZEDATE
DataItem PW0SWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month to pass to TA0190
DataItem PW0SWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End Of Select Set for VCAHLD01
DataItem PW0SWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End Of Search Switch VSELQT01
DataItem PW0SWEOQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End Of Search Switch VPHDIT01
DataItem PW0SWEOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year to pass to TA0190
DataItem PW0SWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold "from" century
DataItem PW0SWFCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold "from" date
DataItem PW0SWFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First Time Thru Switch
DataItem PW0SWFTT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold Flag For Customer & Order
DataItem PW0SWHLD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hours Worked Sel Order temp
DataItem PW0SWHR1 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hours Worked Sel Qty temp
DataItem PW0SWHR2 num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum Pack & Hold Date
DataItem PW0SWMPH num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select order eof switch
DataItem PW0SWOSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minimum P&H Date Century
DataItem PW0SWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H Date Day
DataItem PW0SWPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pack Hold Sel Ord units temp
DataItem PW0SWPK1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pack Hold Sel Qty units temp
DataItem PW0SWPK2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pack & Hold Units
DataItem PW0SWPKH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H Date Month
DataItem PW0SWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minimum P&H Date Year
DataItem PW0SWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select qty eof switch
DataItem PW0SWQSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW0SWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW0SWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage update switch
DataItem PW0SWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold 'to' century
DataItem PW0SWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold to date
DataItem PW0SWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Grand Total Hours Work Area
DataItem PW0SWTHR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Grand Total Units Work Area
DataItem PW0SWTQT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total Sel Ord units temp
DataItem PW0SWTT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Total Sel Qty units temp
DataItem PW0SWTT2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total hours work area - whse
DataItem PW0SWWHR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// units by whse code
DataItem PW0SWWHS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Selected Order Index
DataItem PW0SWX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Qty Selected Index
DataItem PW0SWX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map 1 Display Index
DataItem PW0SWX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end
// Map 1 Display Index
DataItem PW0SWX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

