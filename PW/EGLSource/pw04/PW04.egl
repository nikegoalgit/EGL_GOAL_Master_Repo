package pw04;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import pw.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PW04 ****
// This application allows a user to inquire rows in a DB2
// table.
// 
// The screen displays scheduled picking quantities by level
// for a particular warehouse code.
// 
// The user must enter a warehouse code or it may be passed
// within the picking system.
// 
// *********************
Program PW04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PKWREC PKWREC; // record
  PW04W00 PW04W00; // record
  PW04W01 PW04W01; // record
  PW04W02 PW04W02; // record
  PW04W04 PW04W04; // record
  PW04W05 PW04W05; // record
  PWUREC PWUREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use PW04M.PW04M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
    set PW04M001 initial; /* M001 input/output*/
    set PW04W00 empty; /* Working storage*/
    set PW04W05 empty; /* Working storage map area*/
    set PWUREC empty; /* Working storage DB area*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error disgnosis info*/
    set TA1REC empty; /* Error disgnosis parms*/
    set TA5REC empty; /* Temporary storage parms*/

    PW04W00.PW04WSWR = "N"; /* Request for data switch*/
    PW04W00.PW04WSWF = "Y"; /* Format the map switch*/
    PW04W00.PW04WFLG = "Y"; /* Plan/Actual flag*/
    PW04M001.XXXRVNBR = "1"; /* Revision number*/

    PW04W00.XWHCD = PKWREC.XWHCD; /* Init warehouse code*/
    PW04W00.XWHABRV = PKWREC.XWHABRV;

    if (COMMAREA.XWHCD > " ") /* Data was passed*/
      COMMAREA.CAITEM = " "; /* Clear passed data*/
    end

     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map*/
     /* -----------------------------------------------------------*/
    goto PW04001;


    PW04001: PW04001();
    goto PW04001;
  end // end main
end // end PW04

// Scheduled picking quantities
Function PW04001()
   /* ------------------------------------------------------------*/
   /* If data was requested, obtain the data to display.*/
   /* Format the map output area and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process input request if no errors found and not a cancel.*/
   /* ------------------------------------------------------------*/

  PW04100(); /* Obtain the data to display*/

  PW04200(); /* Format and display the map*/

  PW04300(); /* Check attention identifier*/

  PW04400(); /* Reset fields to normal intensity*/

  PW04500(); /* Verify the entered data*/

  PW04600(); /* Process valid input request*/


end // end PW04001

// Fetch data processing
Function PW04100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW04W00.PW04WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW04W00.XXXTSLEN = 178; /* Length of storage record*/

   /* ------------------------------------------------------------*/
   /* If not message to display, reset page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW04W00.XXXMSGNO == 0)
    PW04W00.XXXTSPAG = 1; /* Initialize page*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW04110();

  PW04W00.XWHCD = PW04M001.XWHCD; /* Warehouse code*/
  PW04W00.PW04WFLG = PW04M001.PW04WFLG; /* Plan/Actual flag*/
   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  PW04120();

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PW04W00.PW04WSWC = "N"; /* Init end of data switch*/
  PW04W00.PKVSSNBR = 0; /* Init schedule number*/
  PW04W00.PW04WSB1 = 0; /* Init set index*/

  while (PW04W00.PW04WSWC == "N") /* Until end of cursor*/
    PW04130(); /* Fetch next row in cursor*/
    if (PW04W00.PW04WSWC == "N")
      PW04150(); /* Accumulate data*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW04W00.PW04WSB1 > 0) /* Page was formatted*/
    PW04170(); /* Add page to temporary storage*/
    PW04W00.PW04WSWF = "Y"; /* Format map switch*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PW04190(); /* Close selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW04W00.TA5TSQIX == 0) /* No pages formatted*/
    PW04W00.XXXMODID = "100"; /* Module identification*/
    PW04W00.XXXMSGNO = 110; /* No data was found to display*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW04W00.PW04WSWR = "N"; /* Request for data switch*/


end // end PW04100

// Purge temporary storage
Function PW04110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW04W05 empty; /* M001 display storage*/

  PW04W00.PW04WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW04W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP;
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW04W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* Normal return code*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Unexpected error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  PW04W00.XXXMODID = "110"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW04W00.XXXMODID;
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW04110

// Select level summary
Function PW04120()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PWUREC empty; /* Clear row storage area*/
  set PW04W01 empty; /* Clear level 1 work*/
  set PW04W02 empty; /* Clear level 2 work*/
  set PW04W04 empty; /* Clear totals work*/

  PWUREC.XWHCD = PW04W00.XWHCD; /* Selection criteria*/
  if (PW04W00.PW04WFLG == "Y")
    PWUREC.PKURUNMD = "P"; /* Plan/Actual flag*/
  end

  try
    call "IO5920" ("S1", SQLCA, PWUREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(110); /* No records found*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  PW04W00.XXXMODID = "120"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SCHEDULED PICKING QTY";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW04W00.XXXMODID;
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VLVQTY01";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end PW04120

// Get next level summary
Function PW04130()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5920" ("N1", SQLCA, PWUREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      PW04W00.PW04WSWC = "Y"; /* Indicate end of cursor*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  PW04W00.XXXMODID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW04W00.XXXMODID;
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VLVQTY01";

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;


end // end PW04130

// Accumulate level data
Function PW04150()
   /* ------------------------------------------------------------*/
   /* Accumulate data for screen output.*/
   /* ------------------------------------------------------------*/

  if (PWUREC.PWULVLNO == "1" /* Totals*/
   || PWUREC.PWULVLNO == "2")
    if (PWUREC.PKVSSNBR != PW04W00.PKVSSNBR
     || PW04W00.PW04WSB1 == 0) /* Catches schedule zero*/
      PW04W00.PKVSSNBR = PWUREC.PKVSSNBR;
      PW04W00.PW04WSB1 = PW04W00.PW04WSB1 + 1; /* Set index*/
      if (PW04W00.PW04WSB1 >= 3) /* Full page*/
        PW04170(); /* Add page to temporary storage*/
        set PW04W01 empty; /* Init work areas*/
        set PW04W02 empty;
        set PW04W04 empty;
        PW04W00.PW04WSB1 = 1; /* Init index*/
      end
    end
    PW04W04.PW04WUNT[PW04WSB1] = PW04W04.PW04WUNT[PW04WSB1] + PWUREC.PWBSLUNT;
    PW04W04.PW04WCRT[PW04WSB1] = PW04W04.PW04WCRT[PW04WSB1] + PWUREC.PWPNBRTO;
    PW04W04.PW04WORD[PW04WSB1] = PW04W04.PW04WORD[PW04WSB1] + PWUREC.PWBSLORD;
    PW04W04.PW04WPRD[PW04WSB1] = PW04W04.PW04WPRD[PW04WSB1] + PWUREC.PWBSLPRD;
    PW04W04.PW04WSKU[PW04WSB1] = PW04W04.PW04WSKU[PW04WSB1] + PWUREC.PWBSLSKU;
    PW04W04.PW04WLBR[PW04WSB1] = PW04W04.PW04WLBR[PW04WSB1] + PWUREC.PWBSLLBR;
  end

  if (PWUREC.PWULVLNO == "1") /* Level 1*/
    PW04W01.PKVSSNBR[PW04WSB1] = PWUREC.PKVSSNBR;
    PW04W01.PW04WUNT[PW04WSB1] = PW04W01.PW04WUNT[PW04WSB1] + PWUREC.PWBSLUNT;
    PW04W01.PW04WCRT[PW04WSB1] = PW04W01.PW04WCRT[PW04WSB1] + PWUREC.PWPNBRTO;
    PW04W01.PW04WORD[PW04WSB1] = PW04W01.PW04WORD[PW04WSB1] + PWUREC.PWBSLORD;
    PW04W01.PW04WPRD[PW04WSB1] = PW04W01.PW04WPRD[PW04WSB1] + PWUREC.PWBSLPRD;
    PW04W01.PW04WSKU[PW04WSB1] = PW04W01.PW04WSKU[PW04WSB1] + PWUREC.PWBSLSKU;
    PW04W01.PW04WLBR[PW04WSB1] = PW04W01.PW04WLBR[PW04WSB1] + PWUREC.PWBSLLBR;
  else
    if (PWUREC.PWULVLNO == "2") /* Level 2*/
      PW04W02.PKVSSNBR[PW04WSB1] = PWUREC.PKVSSNBR;
      PW04W02.PW04WUNT[PW04WSB1] = PW04W02.PW04WUNT[PW04WSB1] + PWUREC.PWBSLUNT;
      PW04W02.PW04WCRT[PW04WSB1] = PW04W02.PW04WCRT[PW04WSB1] + PWUREC.PWPNBRTO;
      PW04W02.PW04WORD[PW04WSB1] = PW04W02.PW04WORD[PW04WSB1] + PWUREC.PWBSLORD;
      PW04W02.PW04WPRD[PW04WSB1] = PW04W02.PW04WPRD[PW04WSB1] + PWUREC.PWBSLPRD;
      PW04W02.PW04WSKU[PW04WSB1] = PW04W02.PW04WSKU[PW04WSB1] + PWUREC.PWBSLSKU;
      PW04W02.PW04WLBR[PW04WSB1] = PW04W02.PW04WLBR[PW04WSB1] + PWUREC.PWBSLLBR;
    end
  end


end // end PW04150

// Add data to temporary storage
Function PW04170()
   /* ------------------------------------------------------------*/
   /* Add full screen to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW04W05.PW04W01G[1] = PW04W01.PW04W01G; /* Level 1*/
  PW04W05.PW04W01G[2] = PW04W02.PW04W01G; /* Level 2*/
  PW04W05.PW04W01G[3] = PW04W04.PW04W01G; /* Totals*/

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW04W05.XXXTSLEN = PW04W00.XXXTSLEN;

  TA5REC.TA5APPID = COMMAREA.CACURRAP;
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW04W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage area and indicators to be used.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set PW04W05 empty; /* M001 display storage*/
    PW04W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  PW04W00.XXXMODID = "170"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW04W00.XXXMODID;
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW04170

// Close level table
Function PW04190()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5920" ("C1", SQLCA, PWUREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  PW04W00.XXXMODID = "190"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = PW04W00.XXXMODID;
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VLVQTY01";

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW04190

// Format and converse map
Function PW04200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW04W00.XXXMSGNO = converseVar.validationMsgNum;
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW04W00.PW04WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (PW04W00.PW04WSWF == "Y") /* Map must be formatted*/
      PW04210(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW04M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW04M001.CATOAP = COMMAREA.CATOAP;
  PW04M001.CAITEM = COMMAREA.CAITEM;

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW04W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    if (PW04W00.XXXMSGNO != 0) /* Message to display*/
      if (PW04W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW04W00.XXXMSGNO);
      end
    else
      PW04M001.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
    PW04M001.XXXMODID = PW04W00.XXXMODID;
    set PW04M001 alarm; /* Indicate sound alarm*/
  end

  converse PW04M001 ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW04W00.XXXMODID = " "; /* Module identification*/
  PW04W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW04M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW04M001.CAITEM; /* Application data*/


end // end PW04200

// Format full screen
Function PW04210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW04M001 initial; /* M001 input/output area*/

  PW04W00.PW04WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW04W00.TA5TSQIX > 0) /* Pages were formatted*/
    if (PW04W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (PW04W00.PW04WSWU == "Y") /* Current page was changed*/
        PW04S21(); /* Update temporary storage page*/
        PW04W00.PW04WSWU = "N"; /* Storage update switch*/
      end
      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (PW04W00.XXXTSPAG > PW04W00.TA5TSQIX) /* Desired greater highest*/
        PW04W00.XXXTSPAG = PW04W00.TA5TSQIX; /* Default to highest*/
      end
      PW04S23(); /* Obtain temporary storage page*/
    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW04M001.XXXLITPG skip; /* "PAGE" literal*/
    PW04M001.XXXTSPAG = PW04W00.XXXTSPAG; /* Current page*/
    set PW04M001.XXXLITOF skip; /* "OF" literal*/
    PW04M001.TA5TSQIX = PW04W00.TA5TSQIX; /* Highest page*/

    /* ------------------------------------------------------------*/
     /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/

    PW04W00.PW04WSB2 = 1; /* Init work indexes*/
    PW04W00.PW04WSB3 = 1;
    PW04M001.PKVSSNBR = 0; /* Init schedule number*/

    while (PW04W00.PW04WSB2 <= 6) /* Until screen is full*/
      PW04W01.PW04W01G = PW04W05.PW04W01G[PW04WSB3];

      if (PW04W01.PKVSSNBR[1] != 0) /* Odd numbered screen data elements*/
        PW04M001.PKVSSNBR[1] = PW04W01.PKVSSNBR[1];
      end
      PW04M001.PWBSLUNT[PW04WSB2] = PW04W01.PW04WUNT[1];
      PW04M001.PWPNBRTO[PW04WSB2] = PW04W01.PW04WCRT[1];
      PW04M001.PWBSLORD[PW04WSB2] = PW04W01.PW04WORD[1];
      PW04M001.PWBSLPRD[PW04WSB2] = PW04W01.PW04WPRD[1];
      PW04M001.PWBSLSKU[PW04WSB2] = PW04W01.PW04WSKU[1];
      PW04M001.PWBSLLBR[PW04WSB2] = PW04W01.PW04WLBR[1];

      PW04W00.PW04WSB2 = PW04W00.PW04WSB2 + 1; /* Index equals 1,3,5*/

      if (PW04W01.PKVSSNBR[2] != 0) /* Even numbered screen data elements*/
        PW04M001.PKVSSNBR[2] = PW04W01.PKVSSNBR[2];
      end
      PW04M001.PWBSLUNT[PW04WSB2] = PW04W01.PW04WUNT[2];
      PW04M001.PWPNBRTO[PW04WSB2] = PW04W01.PW04WCRT[2];
      PW04M001.PWBSLORD[PW04WSB2] = PW04W01.PW04WORD[2];
      PW04M001.PWBSLPRD[PW04WSB2] = PW04W01.PW04WPRD[2];
      PW04M001.PWBSLSKU[PW04WSB2] = PW04W01.PW04WSKU[2];
      PW04M001.PWBSLLBR[PW04WSB2] = PW04W01.PW04WLBR[2];

      PW04W00.PW04WSB2 = PW04W00.PW04WSB2 + 1; /* Index equals 2,4,6*/

      PW04W00.PW04WSB3 = PW04W00.PW04WSB3 + 1; /* Three sets of records*/
    end
  end

  set PW04M001.XWHCD cursor; /* Position cursor*/
  PW04M001.XWHCD = PW04W00.XWHCD; /* Warehouse code*/
  PW04M001.XWHABRV = PW04W00.XWHABRV; /* Abbreviation*/
  PW04M001.PW04WFLG = PW04W00.PW04WFLG; /* Plan/Actual flag*/


end // end PW04210

// Check PF key selection
Function PW04300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (PW04W00.PW04WSWR == "Y") /* Request for data*/
      set PW04W05 empty; /* M001 display storage*/
    end

    PW04W00.PW04WSWF = "Y"; /* Format the map switch*/
    PW04W00.PW04WSWR = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW04M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      PW04110(); /* Purge temporary storage*/
      PW04310(); /* Exit to another application*/
      set PW04M001.CATOAP cursor, bold;
    else
      PW04W00.XXXMODID = "300";
      converseLib.validationFailed(13); /* PA/PF key may not be used*/
    end

    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* Help*/
   || converseVar.eventKey is pf3  /* PW04 menu*/
   || converseVar.eventKey is pf4  /* Master menu*/
   || converseVar.eventKey is pf13 /* PK0B (ord inq ) transfer*/
   || converseVar.eventKey is pf14 /* PK0C (ln inq  ) transfer*/
   || converseVar.eventKey is pf15 /* PK0D (cust inq) transfer*/
   || converseVar.eventKey is pf16 /* PK0Z (sp&p inq) transfer*/
   || converseVar.eventKey is pf18 /* PK09 (hold/rls) transfer*/
   || converseVar.eventKey is pf19 /* PK0S (plan    ) transfer*/
   || converseVar.eventKey is pf20) /* PK07 (select  ) transfer*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW04M001";
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PW04";
    end

    PW04110(); /* Purge temporary storage*/
    PW04310(); /* Exit to another application*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW04W00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack;
  end


end // end PW04300

// PF key TO application
Function PW04310()
   /* ----------------------------------------------------------*/
   /* Set the "TO" application according to the PF key pressed.*/
   /* ----------------------------------------------------------*/

  PKWREC.XWHCD = PW04M001.XWHCD; /* Save warehouse in pick record*/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "PK0A"; /* PICKING Master Menu*/
  else
    if (converseVar.eventKey is pf4)
      XSPF4(); /* Master menu*/
    else
      if (converseVar.eventKey is pf13)
        COMMAREA.CATOAP = "PK0B"; /* PICKING Order Inquiry*/
      else
        if (converseVar.eventKey is pf14)
          COMMAREA.CATOAP = "PK0C"; /* PICKING Line Item Inquiry*/
        else
          if (converseVar.eventKey is pf15)
            COMMAREA.CATOAP = "PK0D"; /* PICKING Customer Inquiry*/
          else
            if (converseVar.eventKey is pf16)
              COMMAREA.CATOAP = "PK0Z"; /* SP & P*/
            else
              if (converseVar.eventKey is pf18)
                COMMAREA.CATOAP = "PK09"; /* PICK hold/rlse inq.*/
              else
                if (converseVar.eventKey is pf19)
                  COMMAREA.CATOAP = "PK0S"; /* PICK PLANNING Menu*/
                else
                  if (converseVar.eventKey is pf20)
                    COMMAREA.CATOAP = "PK07"; /* PICKING SELECT Menu*/
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  COMMAREA.CAUSERA = PKWREC.PKWGRPLV; /* COMMAREA user area*/

  XSEXIT(); /* Invoke selected application*/

  PW04M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/


end // end PW04310

// Reset modifiable fields
Function PW04400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW04M001.XWHCD initialAttributes; /* Warehouse code*/
  set PW04M001.PW04WFLG initialAttributes; /* Plan/Actual flag*/

  set PW04M001.CATOAP initialAttributes; /* TO application*/
  set PW04M001.CAITEM initialAttributes; /* Application data*/


end // end PW04400

// Validate entered data
Function PW04500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW04M001.CAITEM > " ") /* Application data was entered*/
    PW04W00.XXXMODID = "500"; /* Module identification*/
    set PW04M001.CAITEM cursor, bold;
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    PW04510(); /* Verify scroll request*/
  end

   /* ------------------------------------------------------------*/
   /* Verify the Warehouse Code exists and active.*/
   /* ------------------------------------------------------------*/

  if (PW04M001.XWHCD in XWHTBL.XWHCD /* Check valid warehouse*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    PW04M001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/
  else
    PW04W00.XXXMODID = "500";
    set PW04M001.XWHCD cursor, bold;
    converseLib.validationFailed(249); /* Field missing or invalid*/
  end

  if (PW04M001.PW04WFLG != "Y" /* Plan/Actual switch check*/
   && PW04M001.PW04WFLG != "N")
    PW04W00.XXXMODID = "500";
    set PW04M001.PW04WFLG cursor, bold;
    converseLib.validationFailed(249); /* Field missing or invalid*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end


end // end PW04500

// Scroll pages (PF7/PF8)
Function PW04510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW04W00.XXXTSPAG < 2)       /* and no previous pages*/
    PW04W00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW04W00.XXXTSPAG >= PW04W00.TA5TSQIX) /* and no more pages*/
    PW04W00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (PW04M001.XWHCD != PW04W00.XWHCD) /* Warehouse changed*/
    PW04W00.XXXMODID = "151";
    set PW04M001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW04M001.PW04WFLG != PW04W00.PW04WFLG)
    PW04W00.XXXMODID = "151";
    set PW04M001.PW04WFLG cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/
  end


end // end PW04510

// Process application
Function PW04600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW04W00.PW04WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = PW04M001.XWHCD;

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (PW04M001.XWHCD != PW04W00.XWHCD /* Warehouse changed*/
   || PW04M001.PW04WFLG != PW04W00.PW04WFLG) /* Switch changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (PW04M001.XWHCD > " ") /* Warehouse entered*/
      PW04W00.PW04WSWR = "Y"; /* Request for data switch*/
      PW04W00.XWHABRV = PW04M001.XWHABRV; /* Abbreviation*/
      PW04W00.PW04WFLG = PW04M001.PW04WFLG; /* Plan/Actual flag*/
    else
      PW04W00.PW04WSWR = "N"; /* Request for data switch*/
      PW04110(); /* Purge any temporary storage*/
    end
    return;
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    PW04W00.XXXTSPAG = PW04W00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    PW04W00.XXXTSPAG = PW04W00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If enter key pressed and selection criteria not changed,*/
   /* process request for data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    PW04W00.PW04WSWR = "Y"; /* Data requested*/
  end


end // end PW04600

// Update temporary storage
Function PW04S21()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW04W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  PW04W00.XXXMODID = "S21"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW04W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW04S21

// Read next page temp storage
Function PW04S23()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW04W05.XXXTSLEN = PW04W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW04W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW04W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA;

  PW04W00.XXXMODID = "S23"; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW04W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;


end // end PW04S23

//*** RECORD=PW04W00 ****
// Working Storage - PW04.
// 
// DATE CREATED:  05/29/91
// ***********************
Record PW04W00 type basicRecord
  5 PW04W00G PW04W00G ; 
    10 PW04WSB1 PW04WSB1 ; 
    10 PW04WSB2 PW04WSB2 ; 
    10 PW04WSB3 PW04WSB3 ; 
    10 PW04WFLG PW04WFLG ; 
    10 PW04WSWC PW04WSWC ; 
    10 PW04WSWF PW04WSWF ; 
    10 PW04WSWR PW04WSWR ; 
    10 PW04WSWU PW04WSWU ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 PKVSSNBR PKVSSNBR ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XXXMODID XXXMODID ; 
    10 XXXMSGNO XXXMSGNO ; 
end // end PW04W00

//*** RECORD=PW04W01 ****
// Working Storage - PW04.
// 
// Internal working storage array for level 1 quantities.
// 
// DATE CREATED:        05/29/91
// 
// ***********************
Record PW04W01 type basicRecord
  5 PW04W01G PW04W01G ; 
    10 PKVSSNBR PKVSSNBR [2] ; 
    10 PW04WUNT PW04WUNT [2] ; 
    10 PW04WCRT PW04WCRT [2] ; 
    10 PW04WORD PW04WORD [2] ; 
    10 PW04WPRD PW04WPRD [2] ; 
    10 PW04WSKU PW04WSKU [2] ; 
    10 PW04WLBR PW04WLBR [2] ; 
end // end PW04W01

//*** RECORD=PW04W02 ****
// Working Storage - PW04.
// 
// Internal working storage array for level 2 quantities.
// 
// DATE CREATED:        05/29/91
// 
// ***********************
Record PW04W02 type basicRecord
  5 PW04W01G PW04W01G ; 
    10 PKVSSNBR PKVSSNBR [2] ; 
    10 PW04WUNT PW04WUNT [2] ; 
    10 PW04WCRT PW04WCRT [2] ; 
    10 PW04WORD PW04WORD [2] ; 
    10 PW04WPRD PW04WPRD [2] ; 
    10 PW04WSKU PW04WSKU [2] ; 
    10 PW04WLBR PW04WLBR [2] ; 
end // end PW04W02

//*** RECORD=PW04W04 ****
// Working Storage - PW04.
// 
// Internal working storage array for totals accumulated for
// appropriate levels.
// 
// DATE CREATED:        05/29/91
// 
// ***********************
Record PW04W04 type basicRecord
  5 PW04W01G PW04W01G ; 
    10 PKVSSNBR PKVSSNBR [2] ; 
    10 PW04WUNT PW04WUNT [2] ; 
    10 PW04WCRT PW04WCRT [2] ; 
    10 PW04WORD PW04WORD [2] ; 
    10 PW04WPRD PW04WPRD [2] ; 
    10 PW04WSKU PW04WSKU [2] ; 
    10 PW04WLBR PW04WLBR [2] ; 
end // end PW04W04

//*** RECORD=PW04W05 ****
// Working Storage - PW04.
// 
// Internal working storage array for total accumulations and
// screen collection.
// 
// DATE CREATED:        05/29/91
// 
// ***********************
Record PW04W05 type basicRecord
  5 PW04W05G PW04W05G ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 PW04W01G PW04W01G [3] ; 
end // end PW04W05

//*** RECORD=PWUREC ****
// *************** PICKING level summary TABLE ***************
// 
// DB2 TABLE VIEW:      DPICK.Vlvqty01
// 
// COPYLIB MEMBER:      DCL00958
// 
// I/O MODULE:          IO5920
// 
// KEY TO DB2 TABLE:    XWHCD
//                      PKURUNMD
//                      PKVSSNBR
//                      PWULVLNO
// 
// DATE CREATED:        05/29/91
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 09/08/87   tlewis   New record definition.
// 03/06/92   SHENDE   Resize PWBSLUNT to integer for March
//                     table changes.
// **********************
Record PWUREC type basicRecord
  5 PWUGROUP PWUGROUP ; 
    10 PWUKEY PWUKEY ; 
      15 XWHCD XWHCD ; 
      15 PKURUNMD PKURUNMD ; 
      15 PKVSSNBR PKVSSNBR ; 
      15 PWULVLNO PWULVLNO ; 
    10 PWBSLUNT PWBSLUNT ; 
    10 PWPNBRTO PWPNBRTO ; 
    10 PWBSLORD PWBSLORD ; 
    10 PWBSLPRD PWBSLPRD ; 
    10 PWBSLSKU PWBSLSKU ; 
    10 PWBSLLBR PWBSLLBR ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end PWUREC

// Group Level of Record
DataItem PW04W00G char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PW04W01G char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem PW04W05G char(178)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-crtn
DataItem PW04WCRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Plan/Actual flag
DataItem PW04WFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-lbr
DataItem PW04WLBR num(7,1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-sched-loc-ord
DataItem PW04WORD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-sched-loc-prod
DataItem PW04WPRD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work subscript 1
DataItem PW04WSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work subscript 2
DataItem PW04WSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Work subscript 3
DataItem PW04WSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-sku
DataItem PW04WSKU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem PW04WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem PW04WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem PW04WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem PW04WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-sched-loc-unt
DataItem PW04WUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem PWUGROUP char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PWUKEY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-lvl-nbr
DataItem PWULVLNO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

