package pw03;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=PW03 ****
// This application will display all types of orders.
// It is called from PW0Z, Selection screen based XOT order
// type.The user may narrow the orders displayed
// by changing the selection option: 'A' = all, 'N' = not
// selected to pick, 'S' = selected to pick.
// 
// The user may enter a 'S', 'D', 'I', or 'H' to select order,
// de-select an order, inquiry on the order, or put the order
// on hold.
// 
// The user can transfer out of this application by using one
// of the PF keys displayed at the bottom of the map, or by
// entering fast-path information (also at the bottom of the
// map).
// 
// 
// - -- --  --------  ------ ----------------------------------
// CONTROL    DATE     NAME  DESCRIPTION OF CHANGE
// -------  --------  ------ ----------------------------------
// PW#3     01/05/98  VKAKUB NEW APPLICATION FOR WHSE 42.
// tt#1306  02/14/00  kramal Include two more order type codes
//                    FB & EB included
// *********************
Program PW03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PK4REC PK4REC; // record
  PK9REC PK9REC; // record
  PKBREC PKBREC; // record
  PKHREC PKHREC; // record
  PKWREC PKWREC; // record
  PW03W00 PW03W00; // record
  PW03W01 PW03W01; // record
  PWFREC PWFREC; // record
  PWJREC PWJREC; // record
  PWKREC PWKREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOTTBL; // table
  use XHRTBL; // table
  use XDVTBL; // table
  use XWHTBL; // table
  use XBCTBL; // table
  use PW03M.PW03M001,  // forms
      PW03M.PW03M002, 
      PW03M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ----------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ----------------------------------------------------------------*/

    set PW03M001 initial; /* M001 input/output*/
    set PW03M002 initial; /* M002 input/output*/
    set PW03W00 empty; /* Working storage*/
    set PW03W01 empty; /* M001 display storage*/
    set XX0XW01 empty; /* Convert time storage*/
    set PK4REC empty; /* DPICK.VPOOLH01 record*/
    set PK9REC empty; /* DPICK.VCUHLD01 record*/
    set PKBREC empty; /* DPICK.VORHLD01 record*/
    set PKHREC empty; /* DPICK.VSELOR01 record*/
    set PWFREC empty; /* DPICK.VCAHLD01 record*/
    set PWJREC empty; /* picking order array*/
    set PWKREC empty; /* DNSB date array*/
    set SQLCA empty; /* SQL communications area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/


     /* ----------------------------------------------------------------*/
     /* Initialize work areas*/
     /* ----------------------------------------------------------------*/

     /* ---------- switches --------------------*/
    PW03W00.PW03W-FRMT-SCRN-SW = "Y"; /* Format screen switch*/
    PW03W00.PW03W-PROCESS-SW = "Y"; /* Process order switch*/
    PW03W00.PW03W-MORE-DNSB-SW = "Y"; /* Passed dates*/
    PW03W00.PW03W-REQST-DAT-SW = "N"; /* Request data switch*/
    PW03W00.PW03W-UPD-OK-SW = "N"; /* Update successful switch*/
    PW03W00.PW03W-BD-FSTPTH-SW = "N"; /* Bad fast path switch*/
    PW03W00.PW03W-MAP-DIS-SW = "N"; /* Map display switch*/
    PW03W00.PW03W-STOR-UPD-SW = "N"; /* Request update switch*/
    PW03W00.PW03W-SCRN-MDFY-SW = "N"; /* Screen modified switch*/
    PW03W00.PW03W-ORD-HLD-SW = "N"; /* Order on hold switch*/
     /* ---------- index -----------------------*/
    PW03W00.PW03W-MAP-IDX = 1; /* Map line index*/
    PW03W00.PW03W-DNSB-IDX = 1; /* DNSB date index (pwkrec)*/
    PW03W00.PW03W-ORD-INQ-IDX = 1; /* Order inquiry index*/
    PKWREC.PKWINDEX = 1; /* DNSB array index*/
     /* ---------- indicator -------------------*/
    PW03W00.PW03W-SEL-IND = "A"; /* Default "select all"*/


     /* ----------------------------------------------------------------*/
     /* Get first occruance of 25 DNSB dates from COMMAREA*/
     /* ----------------------------------------------------------------*/

    PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX];

    if (PWKREC.PWKARMAX > 0) /* Found data to process*/
      PW03W00.PW03W-REQST-DAT-SW = "Y";

    else
      PW03W00.PW03W-MORE-DNSB-SW = "N";
      PWKREC.OP1DSBDT[PW03W-DNSB-IDX] = 0;
      PW03W00.XXXMODID = "XPPK001";
      converseLib.validationFailed(339);
    end

     /* ----------------------------------------------------------------*/
     /* Build map heading area*/
     /* ----------------------------------------------------------------*/

     /* ------- map fields -----------------------*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/

      PW03M002.XWHCD = PKWREC.XWHCD;
      PW03M002.XDVCD = PKWREC.XDVCD[1];
      PW03M002.XBCCD = PKWREC.XBCCD[1];
      PW03M002.XWHABRV = PKWREC.XWHABRV;
      PW03M002.PW03M-SEL-IND = PW03W00.PW03W-SEL-IND;
    else
      PW03M001.XWHCD = PKWREC.XWHCD;
      PW03M001.XDVCD = PKWREC.XDVCD[1];
      PW03M001.XBCCD = PKWREC.XBCCD[1];
      PW03M001.XWHABRV = PKWREC.XWHABRV;
      PW03M001.PW03M-SEL-IND = PW03W00.PW03W-SEL-IND;
    end

     /* ------- working storage fields - W00 -----*/
    PW03W00.XWHCD = PKWREC.XWHCD;
    PW03W00.XDVCD = PKWREC.XDVCD[1];
    PW03W00.XBCCD = PKWREC.XBCCD[1];
    PW03W00.XWHABRV = PKWREC.XWHABRV;
    PW03W00.PW03W-PREV-DNSB-DT = PWKREC.OP1DSBDT[PW03W-DNSB-IDX];
    PW03W00.PW03W-PREV-TF1CARCD = PWKREC.TF1CARCD[PW03W-DNSB-IDX];

     /* ------- display storage fields - W01 -----*/
    PW03W01.XWHCD = PKWREC.XWHCD;
    PW03W01.XDVCD = PKWREC.XDVCD[1];
    PW03W01.XBCCD = PKWREC.XBCCD[1];
    PW03W01.XWHABRV = PKWREC.XWHABRV;
    PW03W01.PW03W-DNSB-DT = PWKREC.OP1DSBDT[PW03W-DNSB-IDX];
    PW03W01.TF1CARCD = PWKREC.TF1CARCD[PW03W-DNSB-IDX];

    if (PKWREC.XDVCD[1] == "*")
      PW03M001.XDVDESC = "ALL DIVISIONS";
      PW03M002.XDVDESC = "ALL DIVISIONS";
      PW03W01.XDVDESC = "ALL DIVISIONS";
      PW03W00.XDVDESC = "ALL DIVISIONS";
    else
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW03M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW03M002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW03W01.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
      if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
        PW03W00.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      end
    end

    if (PKWREC.XBCCD[1] == "*")
      PW03M001.XBCABRV = " ";
      PW03M002.XBCABRV = " ";
      PW03W01.XBCABRV = " ";
      PW03W00.XBCABRV = " ";
    else
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW03M001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW03M002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW03W01.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
      if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
        PW03W00.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
      end
    end

     /* ----------------------------------------------------------------*/
     /* Set run-mode based on picking selection code*/
     /* ----------------------------------------------------------------*/

    if (PKWREC.PKWSELSW == "PP") /* Selection code*/
      PW03W00.PW03W-RUN-MODE = "P";
    else
      PW03W00.PW03W-RUN-MODE = " ";
    end

     /* ----------------------------------------------------------------*/
     /* Set map title based on picking order type indicator*/
     /* ----------------------------------------------------------------*/

    PW03W00.PW03W-ORD-GRP-SW = PKWREC.PKW-ORD-GRP-SW;
    PW03W00.PW03W-ORD-GRP-SV = PKWREC.PKW-ORD-GRP-SW;

    if (PKWREC.PKW-ORD-GRP-SW == "FT") /* - FOOTWEAR*/
      PW03M001.PW03M-APPL-TITLE = "FT-TYPE";
      PW03M002.PW03M-APPL-TITLE = "FT-TYPE";
    end
    if (PKWREC.PKW-ORD-GRP-SW == "AP") /* - APPAREL*/
      PW03M001.PW03M-APPL-TITLE = "AP-TYPE ";
      PW03M002.PW03M-APPL-TITLE = "AP-TYPE ";
    end
    if (PKWREC.PKW-ORD-GRP-SW == "EQ") /* -EQUIPMENT*/
      PW03M001.PW03M-APPL-TITLE = "EQ-TYPE";
      PW03M002.PW03M-APPL-TITLE = "EQ-TYPE";
    end
    if (PKWREC.PKW-ORD-GRP-SW == "FC") /* - Footwear closeout*/
      PW03M001.PW03M-APPL-TITLE = "FC-TYPE ";
      PW03M002.PW03M-APPL-TITLE = "FC-TYPE ";
    end
    if (PKWREC.PKW-ORD-GRP-SW == "AC") /* - Apparel closeout*/
      PW03M001.PW03M-APPL-TITLE = "AC-TYPE ";
      PW03M002.PW03M-APPL-TITLE = "AC-TYPE ";
    end
     /* IF PKWREC.PKW-ORD-GRP-SW EQ '  ';/*         - Equipment closeout*/
     /* MOVE '  -TYPE ' TO PW03M001.PW03M-APPL-TITLE;*/
     /* MOVE '  -TYPE ' TO PW03M002.PW03M-APPL-TITLE;*/
     /* eND;*/
    if (PKWREC.PKW-ORD-GRP-SW == "FS") /* - Footwear sample*/
      PW03M001.PW03M-APPL-TITLE = "FS-TYPE ";
      PW03M002.PW03M-APPL-TITLE = "FS-TYPE ";
    end
    if (PKWREC.PKW-ORD-GRP-SW == "AS") /* - Apparel sample*/
      PW03M001.PW03M-APPL-TITLE = "AS-TYPE ";
      PW03M002.PW03M-APPL-TITLE = "AS-TYPE ";
    end
    if (PKWREC.PKW-ORD-GRP-SW == "ES") /* - Equipment sample*/
      PW03M001.PW03M-APPL-TITLE = "ES-TYPE ";
      PW03M002.PW03M-APPL-TITLE = "ES-TYPE ";
    end
    if (PKWREC.PKW-ORD-GRP-SW == "EC") /* - Equipment closeout*/
      PW03M001.PW03M-APPL-TITLE = "EC-TYPE ";
      PW03M002.PW03M-APPL-TITLE = "EC-TYPE ";
    end


     /* ----------------------------------------------------------------*/
     /* Flow to converse the main process used to display map*/
     /* ----------------------------------------------------------------*/

    goto PW03-000; /* Converse the main process*/


    PW03-000: PW03-000();
     /* -----------------------------------------------------------*/
     /* Flow to converse the main process used to display a map*/
     /* -----------------------------------------------------------*/

    goto PW03-001; /* Converse the main process*/

    PW03-001: PW03-001();
     /* ---------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map*/
     /* ---------------------------------------------------------------*/

    goto PW03-001; /* Converse the main process*/

  end // end main
end // end PW03

// check the FROM application
Function PW03-000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "PW0Z" /* From allowed application*/
   || COMMAREA.CAFROMAP == "PW0I" 
   || COMMAREA.CAFROMAP == "PW0R" 
   || COMMAREA.CAFROMAP == "GD00")

    COMMAREA.CAFROMAP = COMMAREA.CACURRAP; /* save curr application*/

    XPPK003(); /* Validate passed warehouse*/

  else

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end PW03-000

// main process to display a map
Function PW03-001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW03-100(); /* Obtain the data to display*/

  PW03-200(); /* Format and display the map*/

  PW03-300(); /* Check attention identifier*/

  PW03-400(); /* Reset fields to normal intensity*/

  PW03-500(); /* Verify the entered data*/

  PW03-600(); /* Process valid input request*/


end // end PW03-001

// obtain the Data to Display
Function PW03-100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.PW03W-REQST-DAT-SW == "N" /* Data was not requested*/
   || converseVar.validationMsgNum > 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW03W00.XXXTSLEN = 648; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Get system date*/
   /* ------------------------------------------------------------*/

  XX0XS01();
  PW03W00.PW03W-CURRENT-DT = XX0XW01.XX0XWDAT;

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.XXXMSGNO == 0) /* No message to display*/

    PW03W00.XXXTSPAG = 1; /* Page number to display*/

  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW03S-P-TEMP-STOR(); /* Purge any temporary storage*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/

    PW03W00.PW03W-SEL-IND = PW03M002.PW03M-SEL-IND;
    PW03W01.PW03W-SEL-IND = PW03M002.PW03M-SEL-IND;
    PW03W01.XDVCD = PW03M002.XDVCD; /* -division code*/
    PW03W01.XDVDESC = PW03M002.XDVDESC; /* -division desc*/
    PW03W01.XBCCD = PW03M002.XBCCD; /* -brand code*/
    PW03W01.XBCABRV = PW03M002.XBCABRV; /* -brand abrv*/
    PW03W01.XWHCD = PW03M002.XWHCD; /* -warehouse code*/
    PW03W01.XWHABRV = PW03M002.XWHABRV; /* -warehouse abrv*/
  else
    PW03W00.PW03W-SEL-IND = PW03M001.PW03M-SEL-IND;
    PW03W01.PW03W-SEL-IND = PW03M001.PW03M-SEL-IND;
    PW03W01.XDVCD = PW03M001.XDVCD; /* -division code*/
    PW03W01.XDVDESC = PW03M001.XDVDESC; /* -division desc*/
    PW03W01.XBCCD = PW03M001.XBCCD; /* -brand code*/
    PW03W01.XBCABRV = PW03M001.XBCABRV; /* -brand abrv*/
    PW03W01.XWHCD = PW03M001.XWHCD; /* -warehouse code*/
    PW03W01.XWHABRV = PW03M001.XWHABRV; /* -warehouse abrv*/
  end

   /* ------------------------------------------------------------*/
   /* OPEN CURSOR*/
   /* Open DPICK.VPOOLH01 cursor*/
   /* ------------------------------------------------------------*/


  PW03W00.PW03W-MAP-IDX = 1; /* -Display line index*/
  PW03W00.PW03W-POOLH-CSR-SW = "N"; /* -End of cursor switch*/

  PW03S-OPEN-POOLH(); /* -Open pool header cursor*/

   /* ------------------------------------------------------------*/
   /* FETCH CURSOR*/
   /* FETCH row from DPICK.VPOOLH01 and format pages until end*/
   /* of cursor.*/
   /*  */
   /* The flag PW03W-PROCESS-SW will be set to 'N' when there*/
   /* are orders found which are not valid.*/
   /* ------------------------------------------------------------*/

  while (PW03W00.PW03W-POOLH-CSR-SW == "N") /* -Until end of cursor*/

    /* ------- Assume that process order sw = yes ----------*/
    PW03W00.PW03W-PROCESS-SW = "Y";

    PW03S-FETCH-POOLH(); /* Fetch row in the cursor*/

     /* ---------------------------------------------------------*/
     /* See if it is ok to process the order*/
     /* ---------------------------------------------------------*/

     /* ------ poolh row found and okay to process --------------*/
    if (PW03W00.PW03W-POOLH-CSR-SW == "N"
     && PW03W00.PW03W-PROCESS-SW == "Y")

       /* ------------------------------------------------------*/
       /* Verify order - no stock transfers*/
       /* - valid select indicator*/
       /* - valid order type indicator*/
       /* ------------------------------------------------------*/

      if (PW03W-PROCESS-SW == "Y")
        PW03-110();
      end

       /* ------------------------------------------------------*/
       /* Check order hold status & order hold release date.*/
       /* ------------------------------------------------------*/

      if (PW03W-PROCESS-SW == "Y")
        PW03-120();
      end

       /* ------------------------------------------------------*/
       /* Check customer hold status & customer hold release date.*/
       /* ------------------------------------------------------*/

      if (PW03W-PROCESS-SW == "Y")
        PW03-130();
      end

       /* ------------------------------------------------------*/
       /* Check carrier code & carrier's release date.*/
       /* ------------------------------------------------------*/

      if (PW03W-PROCESS-SW == "Y")
        PW03-140();
      end

       /* --------------------------------------------------*/
       /* See if it is still ok to process the order*/
       /* --------------------------------------------------*/

      if (PW03W00.PW03W-PROCESS-SW == "Y")

         /* --------------------------------------------------*/
         /* Save the data in display storage.*/
         /* --------------------------------------------------*/

        PW03-150(); /* Save data in display storage*/

         /* ------------------------------------------------------*/
         /* If the page is full, add the page to the storage queue.*/
         /* ------------------------------------------------------*/

        if (PW03W00.PW03W-MAP-IDX > 12) /* -Page is full*/

          PW03S-A-TEMP-STOR(); /* -Add page to temp stor*/
          PW03W00.PW03W-MAP-IDX = 1; /* -Display line index*/

        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.PW03W-MAP-IDX > 1) /* Page was formatted*/

    PW03S-A-TEMP-STOR(); /* Add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PW03S-CLOSE-POOLH(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.TA5TSQIX > 0) /* Pages formatted*/
    PW03W00.PW03W-FRMT-SCRN-SW = "Y";

  else
    PW03W00.XXXMODID = "100"; /* Module identification*/
    PW03W00.XXXMSGNO = 31; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW03W00.PW03W-REQST-DAT-SW = "N"; /* Request for data switch*/


end // end PW03-100

// vERIFY POOL HEADER ORDER
Function PW03-110()
   /* ------------------------------------------------------------*/
   /* See if ok to process this order.*/
   /* ------------------------------------------------------------*/

   /* ---- Do not process "in-store promo" orders -------------------*/
  if (PK4REC.XGPCD == "01"
   && PK4REC.XDVCD == "01")
    PW03W00.PW03W-PROCESS-SW = "N";
    return;
  end


   /* ---- Do not process "ColeHaan" orders -------------------------*/
  if (PW03M001.XBCCD == "*"
   && PK4REC.XBCCD == "08")
    PW03W00.PW03W-PROCESS-SW = "N";
    return;
  end


   /* ---- Do not process "stock transfer" orders -------------------*/
  if (PK4REC.PK4STKTF == "Y")
    PW03W00.PW03W-PROCESS-SW = "N";
    return;
  end


   /* ------------------------------------------------------------*/
   /* Determine Order group type. process only those orders*/
   /* whose xot-order-type code belongs to the PW03w-ord-grp-sw*/
   /* ------------------------------------------------------------*/
  XPPK006();

   /* ---- Process orders with valid xot-order-type------------------*/
  if (PKWREC.PKW-ORD-GRP-SW != PW03W00.PW03W-ORD-GRP-SW)
    PW03W00.PW03W-PROCESS-SW = "N";
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Check for valid select indicator*/
   /*  */
   /* PICKING                     PICK PLANNING*/
   /* Sel-ind  pk4rec.pkslind      Sel-ind  pk4rec.pkslind*/
   /* -------  --------------      -------  --------------*/
   /* 'a'    blank, 's'            'a'    blank, 'p'*/
   /* 'n'    blank only            'n'    blank only*/
   /* 's'    's' only              's'    'p' only*/
   /* ------------------------------------------------------------*/

   /* -------- Picking ---------------------------------------------*/
  if (PW03W00.PW03W-RUN-MODE == " ")

    if (PW03M002.PW03M-SEL-IND == "A") /* All orders to be processed*/
      if (PK4REC.PK4SLIND != " "
       && PK4REC.PK4SLIND != "S")
        PW03W00.PW03W-PROCESS-SW = "N"; /* do not process order*/
      end
    else
      if (PW03M002.PW03M-SEL-IND == "S") /* Sel'd orders to be processed*/
        if (PK4REC.PK4SLIND != "S")
          PW03W00.PW03W-PROCESS-SW = "N"; /* do not process order*/
        end
      else /* Non-sel'd orders to be processed*/
        if (PK4REC.PK4SLIND != " ")
          PW03W00.PW03W-PROCESS-SW = "N"; /* do not process order*/
        end
      end
    end

   /* -------- Pick Planning ---------------------------------------*/
  else
    if (PW03M001.PW03M-SEL-IND == "A") /* All orders to be processed*/
      if (PK4REC.PK4SLIND != " "
       && PK4REC.PK4SLIND != "P")
        PW03W00.PW03W-PROCESS-SW = "N"; /* do not process order*/
      end
    else
      if (PW03M001.PW03M-SEL-IND == "S") /* Selected orders to be processed*/
        if (PK4REC.PK4SLIND != "P")
          PW03W00.PW03W-PROCESS-SW = "N"; /* do not process order*/
        end
      else /* Non-selected orders to be processed*/
        if (PK4REC.PK4SLIND != " ")
          PW03W00.PW03W-PROCESS-SW = "N"; /* do not process order*/
        end
      end
    end
  end


end // end PW03-110

// check order hold
Function PW03-120()
   /* ------------------------------------------------------------*/
   /* Check order hold status  - select unique vorhld01*/
   /* - verify release date*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4ORHLD == "Y")

    /* ----- format PKBREC -----------------*/
    set PKBREC empty;

    PKBREC.XWHCD = PW03W01.XWHCD;
    PKBREC.PK1CUOID = PK4REC.PK1CUOID;
    PKBREC.PK1NORID = PK4REC.PK1NORID;
    PKBREC.XHRCD = "*";

    PW03S-SELECT-ORHLD(); /* Select 'S ' - vorhld01*/

     /* ---------------------------------------------------------*/
     /* Validate the appropriate order hold release date, based*/
     /* on whether user is in 'picking' or 'pick planning' mode.*/
     /* ---------------------------------------------------------*/

     /* ------- Picking ---------------*/
    if (PW03W00.PW03W-RUN-MODE == " ")
      if (PKBREC.PKBRELDT > PW03W00.PW03W-CURRENT-DT)

        PW03W00.PW03W-PROCESS-SW = "N"; /* Not ok to process order*/

      end
    else
      /* ------- Pick Planning ---------*/
      if (PKBREC.PKBPLRDT > PW03W00.PW03W-CURRENT-DT)

        PW03W00.PW03W-PROCESS-SW = "N"; /* Not ok to process order*/

      end
    end
  end


end // end PW03-120

// check customer hold
Function PW03-130()
   /* ------------------------------------------------------------*/
   /* Check customer hold status - select unique vcuhld01*/
   /* - verify release date*/
   /* ------------------------------------------------------------*/

  if (PK4REC.PK4CUHLD == "Y")

    PW03S-SELECT-CUHLD();

    /* ------------------------------------------------------------*/
    /* Validate the appropriate customer hold release date, based*/
    /* on whether user is in 'picking' or 'pick planning' mode.*/
    /* ------------------------------------------------------------*/

    /* ------- Picking ---------------------------------*/
    if (PW03W00.PW03W-RUN-MODE == " ")

      if (PK9REC.PK9RELDT > PW03W00.PW03W-CURRENT-DT)

        PW03W00.PW03W-PROCESS-SW = "N"; /* Do not process order*/

      end
    else
    /* ------- Picking ---------------------------------*/
      if (PK9REC.PK9PLRDT > PW03W00.PW03W-CURRENT-DT)

        PW03W00.PW03W-PROCESS-SW = "N"; /* Do not process order*/

      end
    end
  end

end // end PW03-130

// check carrier code
Function PW03-140()
   /* ------------------------------------------------------------*/
   /* Check carrier code status*/
   /* ------------------------------------------------------------*/

  PW03S-SELECT-CAHLD();

   /* ------------------------------------------------------------*/
   /* Validate the appropriate carrier hold release date, based*/
   /* on whether user is in 'picking' or 'pick planning' mode.*/
   /* ------------------------------------------------------------*/

   /* ----- Picking --------------------------*/
  if (PW03W00.PW03W-RUN-MODE == " ")

    if (PWFREC.PKBRELDT > PW03W00.PW03W-CURRENT-DT)

      PW03W00.PW03W-PROCESS-SW = "N"; /* Do not process order*/

    end
  else

    /* ----- Picking --------------------------*/
    if (PWFREC.PKBPLRDT > PW03W00.PW03W-CURRENT-DT)

      PW03W00.PW03W-PROCESS-SW = "N"; /* Do not process order*/

    end
  end


end // end PW03-140

// save data in display storage
Function PW03-150()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

   /* ------ format header ----------------------------------------*/
  PW03W01.XWHCD = PW03W00.XWHCD;
  PW03W01.XWHABRV = PW03W00.XWHABRV;
  PW03W01.PW03W-SEL-IND = PKWREC.PKWSLTYP[PKWINDEX];

  PW03W01.XDVCD = PW03W00.XDVCD;
  if (PW03W00.XDVCD == "*")
    PW03W01.XDVDESC = "ALL DIVISIONS";
  else
    PW03W01.XDVDESC = PW03W00.XDVDESC;
  end

  PW03W01.XBCCD = PW03W00.XBCCD;
  if (PW03W00.XBCCD == "*")
    PW03W00.XXXMSGNO = 421;
    PW03W01.XBCABRV = " ";
  else
    PW03W01.XBCABRV = PW03W00.XBCABRV;
  end


   /* ------ format detail lines ----------------------------------*/
  PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = " ";
  PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX] = PK4REC.PK1CUOID;
  PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX] = PK4REC.PK1NORID;
  PW03W01.PW03W-FC-QTY[PW03W-MAP-IDX] = PK4REC.PK4ORDFC;
  PW03W01.PW03W-RP-QTY[PW03W-MAP-IDX] = PK4REC.PK4ORDRP;
  PW03W01.PW03W-TOT-QTY[PW03W-MAP-IDX] = PK4REC.PK4OTUNT;
  PW03W01.PW03W-SP-HNDL-FL[PW03W-MAP-IDX] = PK4REC.OP1SPHDF;

  if (PK4REC.PK4SLIND != " ") /* If order has been selected*/
    PW03W01.PW03W-SELECT-FL[PW03W-MAP-IDX] = "Y";

  else
    PW03W01.PW03W-SELECT-FL[PW03W-MAP-IDX] = "N";

  end

  PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX + 1; /* Increment line index*/


end // end PW03-150

// format and converse the map
Function PW03-200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    PW03W00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.PW03W-REQST-DAT-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW03W00.PW03W-FRMT-SCRN-SW == "Y") /* Map must be formatted*/

      if (PKWREC.PKWSELSW == "PK")
        PW03-21002(); /* Format picking data on map2*/
      else
        PW03-21001(); /* Format planning data on map1*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Set cursor, if needed*/
   /* ------------------------------------------------------------*/

  if (PW03W00.TA5TSQIX == 0) /* If no pages were formatted*/
    if (PKWREC.PKWSELSW == "PK") /* PICKING*/

      if (PWKREC.PWKARMAX > 0) /* At least one DNSB existed*/
        set PW03M002.PW03M-SEL-IND cursor; /* Set cursor on selection cd*/
      else
        set PW03M002.PW03M-SEL-IND cursor, skip, invisible; /* No entry allowed*/
      end

    else

      if (PWKREC.PWKARMAX > 0) /* At least one DNSB existed*/
        set PW03M001.PW03M-SEL-IND cursor; /* Set cursor on selection cd*/
      else
        set PW03M001.PW03M-SEL-IND cursor, skip, invisible; /* No entry allowed*/
      end
    end
  end

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    PW03-20002();
  else
    PW03-20001(); /* pick planning*/
  end


end // end PW03-200

// format and converse the map
Function PW03-20001()

   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to PW03-20002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW03M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PW03M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW03M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW03W00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW03W00.XXXMSGNO != 0) /* Message to display*/

        if (PW03W00.XXXTSPAG == 1) /* First page*/
          if (PW03W00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW03W00.XXXMSGNO);
          end /* Message number*/
          PW03M001.XXXMODID = PW03W00.XXXMODID; /* Module id*/
          set PW03M001 alarm; /* Indicate sound alarm*/
        end
      else
        PW03M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW03M001.XXXMODID = PW03W00.XXXMODID; /* Module id*/
        set PW03M001 alarm; /* Indicate sound alarm*/
      end

      /* -------- Fast path entered, but was in error ----------------*/
      if (PW03M001.CATOAP > " "
       && PW03W00.PW03W-BD-FSTPTH-SW == "Y")

        set PW03M001.CATOAP cursor, bold; /* Highlight*/
      end

    end
  else
    PW03M001.XXXMODID = PW03W00.XXXMODID; /* Module id*/
    set PW03M001 alarm; /* Indicate sound alarm*/
  end

  converse PW03M001 ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(0); /* Message number*/
  PW03W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  PW03W00.XXXMODID = " "; /* Module identification*/
  PW03W00.PW03W-BD-FSTPTH-SW = "N";
  PW03W00.PW03W-ORD-HLD-SW = "N";

  COMMAREA.CATOAP = PW03M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW03M001.CAITEM; /* Application data*/


end // end PW03-20001

// format and converse the map
Function PW03-20002()

   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to PW03-20001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW03M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  PW03M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW03M002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (PW03W00.XXXMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (PW03W00.XXXMSGNO != 0) /* Message to display*/

        if (PW03W00.XXXTSPAG == 1) /* First page*/
          if (PW03W00.XXXMSGNO == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(PW03W00.XXXMSGNO);
          end /* Message number*/
          PW03M002.XXXMODID = PW03W00.XXXMODID; /* Module id*/
          set PW03M002 alarm; /* Indicate sound alarm*/
        end
      else
        PW03M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        PW03M002.XXXMODID = PW03W00.XXXMODID; /* Module id*/
        set PW03M002 alarm; /* Indicate sound alarm*/
      end

      /* -------- Fast path entered, but was in error ----------------*/
      if (PW03M002.CATOAP > " "
       && PW03W00.PW03W-BD-FSTPTH-SW == "Y")

        set PW03M002.CATOAP cursor, bold; /* Highlight*/
      end
    end
  else
    PW03M002.XXXMODID = PW03W00.XXXMODID; /* Module id*/
    set PW03M002 alarm; /* Indicate sound alarm*/
  end


  converse PW03M002 ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(0); /* Message number*/
  PW03W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  PW03W00.XXXMODID = " "; /* Module identification*/
  PW03W00.PW03W-BD-FSTPTH-SW = "N";
  PW03W00.PW03W-ORD-HLD-SW = "N";

  COMMAREA.CATOAP = PW03M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW03M002.CAITEM; /* Application data*/


end // end PW03-20002

// format the display data
Function PW03-21001()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to PW03-21002 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW03M001 initial; /* M001 input/output area*/

  PW03W00.PW03W-FRMT-SCRN-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW03W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW03W00.PW03W-STOR-UPD-SW == "Y")

        PW03S-U-TEMP-STOR(); /* Update temporary storage page*/
        PW03W00.PW03W-STOR-UPD-SW = "N"; /* Reset switch*/
      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW03W00.XXXTSPAG > PW03W00.TA5TSQIX) /* Desired greater highest*/

        PW03W00.XXXTSPAG = PW03W00.TA5TSQIX; /* Default to highest*/
      end

      PW03S-R-TEMP-STOR(); /* Read temporary storage page*/
    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW03M001.XXXLITPG skip;
    PW03M001.XXXLITPG = "PAGE"; /* "page" constant*/
    set PW03M001.XXXLITOF skip;
    PW03M001.XXXLITOF = "OF"; /* "of" constant*/
    PW03M001.XXXTSPAG = PW03W00.XXXTSPAG; /* Current page*/
    PW03M001.XXXTSQIX = PW03W00.TA5TSQIX; /* Highest page*/

    PW03W00.PW03W-MAP-IDX = 1; /* Initialize line index*/

    /* ----- Until screen is full & data exists ---------------*/
    while (PW03W00.PW03W-MAP-IDX <= 12
     && PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX] != 0)

      PW03M001.PW03M-MAP-DOT[PW03W-MAP-IDX] = ".";
      PW03M001.PW03M-ACTION[PW03W-MAP-IDX] = PW03W01.PW03W-ACTION[PW03W-MAP-IDX];
      PW03M001.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] = PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX];
      PW03M001.PW03M-NIKE-ORD-ID[PW03W-MAP-IDX] = PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX];
      PW03M001.PW03M-FC-QTY[PW03W-MAP-IDX] = PW03W01.PW03W-FC-QTY[PW03W-MAP-IDX];
      PW03M001.PW03M-RP-QTY[PW03W-MAP-IDX] = PW03W01.PW03W-RP-QTY[PW03W-MAP-IDX];
      PW03M001.PW03M-TOT-QTY[PW03W-MAP-IDX] = PW03W01.PW03W-TOT-QTY[PW03W-MAP-IDX];
      PW03M001.PW03M-SP-HNDL-FL[PW03W-MAP-IDX] = PW03W01.PW03W-SP-HNDL-FL[PW03W-MAP-IDX];
      PW03M001.PW03M-SELECT-FL[PW03W-MAP-IDX] = PW03W01.PW03W-SELECT-FL[PW03W-MAP-IDX];
      PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] = PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX];
      PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] = PW03W01.PW03W-REL-MM[PW03W-MAP-IDX];
      PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] = PW03W01.PW03W-REL-DD[PW03W-MAP-IDX];
      PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] = PW03W01.PW03W-REL-YY[PW03W-MAP-IDX];

      /* -------- set fields to normal -------------------------*/
      if (PW03W00.PW03W-MAP-IDX == 1) /* First select field*/
        set PW03M001.PW03M-ACTION[PW03W-MAP-IDX] cursor, normal;
      else
        set PW03M001.PW03M-ACTION[PW03W-MAP-IDX] normal;
      end

      set PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] normal;
      set PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] normal;
      set PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] normal;
      set PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] normal;

      PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX + 1;

    end
  end


   /* ------------------------------------------------------------*/
   /* Display the header information on the screen.*/
   /* ------------------------------------------------------------*/

  PW03M001.XWHCD = PW03W01.XWHCD; /* Whse cd*/
  PW03M001.XWHABRV = PW03W01.XWHABRV;

  PW03M001.XDVCD = PW03W01.XDVCD; /* Division code*/
  if (PW03W01.XDVCD == "*")
    PW03M001.XDVDESC = "ALL DIVISIONS";
  else
    PW03M001.XDVDESC = PW03W01.XDVDESC;
  end

  PW03M001.XBCCD = PW03W01.XBCCD;
  if (PW03W01.XBCCD == "*")
    PW03M001.XBCABRV = " ";
    if (PW03W00.XXXMSGNO == 0) /* no other msg to display*/
      PW03W00.XXXMSGNO = 421;
    end
  else
    PW03M001.XBCABRV = PW03W01.XBCABRV;
  end

  PW03M001.PW03M-SEL-IND = PW03W00.PW03W-SEL-IND;
  PW03W01.PW03W-DNSB-DT = PWKREC.OP1DSBDT[PW03W-DNSB-IDX];
  PW03M001.PW03M-DNSB-MM = PW03W01.PW03W-DNSB-MM;
  PW03M001.PW03M-DNSB-DD = PW03W01.PW03W-DNSB-DD;
  PW03M001.PW03M-DNSB-YY = PW03W01.PW03W-DNSB-YY;
  PW03M001.TF1CARCD = PWKREC.TF1CARCD[PW03W-DNSB-IDX];


   /* ------- format run mode -------------------------*/
  if (PW03W00.PW03W-RUN-MODE == "P")
    PW03M001.PW03M-MAP-APPL = "PICK PLANNING";
  end

   /* ------- format map title ------------------------*/

  if (PW03W00.PW03W-ORD-GRP-SW == "FT") /* - FOOTWEAR*/
    PW03M001.PW03M-APPL-TITLE = "FT-TYPE";
    PW03M002.PW03M-APPL-TITLE = "FT-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "AP") /* - APPAREL*/
    PW03M001.PW03M-APPL-TITLE = "AP-TYPE";
    PW03M002.PW03M-APPL-TITLE = "AP-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "EQ") /* - EQUIPMENT*/
    PW03M001.PW03M-APPL-TITLE = "EQ-TYPE";
    PW03M002.PW03M-APPL-TITLE = "EQ-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "FC") /* - FOOTWEAR CLOSEOUT*/
    PW03M001.PW03M-APPL-TITLE = "FC-TYPE";
    PW03M002.PW03M-APPL-TITLE = "FC-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "AC") /* - APPAREL CLOSEOUT*/
    PW03M001.PW03M-APPL-TITLE = "AC-TYPE";
    PW03M002.PW03M-APPL-TITLE = "AC-TYPE";
  end

   /* IF PW03W00.PW03W-ORD-GRP-SW = '  ';/*         - EQUIPMENT CLOSEOUT*/
   /* MOVE '  -TYPE' TO PW03M001.PW03M-APPL-TITLE;*/
   /* MOVE '  -TYPE' TO PW03M002.PW03M-APPL-TITLE;*/
   /* END;*/

  if (PW03W00.PW03W-ORD-GRP-SW == "FS") /* - FOOTWEAR SAMPLES*/
    PW03M001.PW03M-APPL-TITLE = "FS-TYPE";
    PW03M002.PW03M-APPL-TITLE = "FS-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "AS") /* - APPAREL SAMPLES*/
    PW03M001.PW03M-APPL-TITLE = "AS-TYPE";
    PW03M002.PW03M-APPL-TITLE = "AS-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "ES") /* - EQUIPMENT SAMPLES*/
    PW03M001.PW03M-APPL-TITLE = "ES-TYPE";
    PW03M002.PW03M-APPL-TITLE = "ES-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "EC") /* - EQUIPMENT CLOSEOUT*/
    PW03M001.PW03M-APPL-TITLE = "EC-TYPE";
    PW03M002.PW03M-APPL-TITLE = "EC-TYPE";
  end


  if (PW03W00.PW03W-ORD-GRP-SW == "FB") /* - FOOTWEAR  B-GRADE*/
    PW03M001.PW03M-APPL-TITLE = "FB-TYPE";
    PW03M002.PW03M-APPL-TITLE = "FB-TYPE";
  end


  if (PW03W00.PW03W-ORD-GRP-SW == "EB") /* - EQUIPMENT B-GRADE*/
    PW03M001.PW03M-APPL-TITLE = "EB-TYPE";
    PW03M002.PW03M-APPL-TITLE = "EB-TYPE";
  end


  if (PW03W00.PW03W-SEL-IND <= " ") /* Selection code not present*/
    set PW03M001.PW03M-SEL-IND cursor; /* Position cursor*/
  end


end // end PW03-21001

// format the display data
Function PW03-21002()
   /* ------------------------------------------------------------*/
   /* Note: Apply the same changes to PW03-21001 also.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW03M002 initial; /* M002 input/output area*/

  PW03W00.PW03W-FRMT-SCRN-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW03W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW03W00.PW03W-STOR-UPD-SW == "Y")

        PW03S-U-TEMP-STOR(); /* Update temporary storage page*/
        PW03W00.PW03W-STOR-UPD-SW = "N"; /* Reset switch*/
      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW03W00.XXXTSPAG > PW03W00.TA5TSQIX) /* Desired greater highest*/

        PW03W00.XXXTSPAG = PW03W00.TA5TSQIX; /* Default to highest*/
      end

      PW03S-R-TEMP-STOR(); /* Read temporary storage page*/
    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW03M002.XXXLITPG skip;
    PW03M002.XXXLITPG = "PAGE"; /* "page" constant*/
    set PW03M002.XXXLITOF skip;
    PW03M002.XXXLITOF = "OF"; /* "of" constant*/
    PW03M002.XXXTSPAG = PW03W00.XXXTSPAG; /* Current page*/
    PW03M002.XXXTSQIX = PW03W00.TA5TSQIX; /* Highest page*/

    PW03W00.PW03W-MAP-IDX = 1; /* Initialize line index*/

    /* ----- Until screen is full & data exists ---------------*/
    while (PW03W00.PW03W-MAP-IDX <= 12
     && PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX] != 0)

      PW03M001.PW03M-MAP-DOT[PW03W-MAP-IDX] = ".";
      PW03M002.PW03M-ACTION[PW03W-MAP-IDX] = PW03W01.PW03W-ACTION[PW03W-MAP-IDX];
      PW03M002.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] = PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX];
      PW03M002.PW03M-NIKE-ORD-ID[PW03W-MAP-IDX] = PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX];
      PW03M002.PW03M-FC-QTY[PW03W-MAP-IDX] = PW03W01.PW03W-FC-QTY[PW03W-MAP-IDX];
      PW03M002.PW03M-RP-QTY[PW03W-MAP-IDX] = PW03W01.PW03W-RP-QTY[PW03W-MAP-IDX];
      PW03M002.PW03M-TOT-QTY[PW03W-MAP-IDX] = PW03W01.PW03W-TOT-QTY[PW03W-MAP-IDX];
      PW03M002.PW03M-SP-HNDL-FL[PW03W-MAP-IDX] = PW03W01.PW03W-SP-HNDL-FL[PW03W-MAP-IDX];
      PW03M002.PW03M-SELECT-FL[PW03W-MAP-IDX] = PW03W01.PW03W-SELECT-FL[PW03W-MAP-IDX];
      PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] = PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX];
      PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] = PW03W01.PW03W-REL-MM[PW03W-MAP-IDX];
      PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] = PW03W01.PW03W-REL-DD[PW03W-MAP-IDX];
      PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] = PW03W01.PW03W-REL-YY[PW03W-MAP-IDX];

      /* -------- set fields to normal -------------------------*/
      if (PW03W00.PW03W-MAP-IDX == 1) /* First select field*/
        set PW03M002.PW03M-ACTION[PW03W-MAP-IDX] cursor, normal;
      else
        set PW03M002.PW03M-ACTION[PW03W-MAP-IDX] normal;
      end

      set PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] normal;
      set PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] normal;
      set PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] normal;
      set PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] normal;

      PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX + 1;

    end
  end


   /* ------------------------------------------------------------*/
   /* Display the header information on the screen.*/
   /* ------------------------------------------------------------*/

  PW03M002.XWHCD = PW03W01.XWHCD; /* Whse cd*/
  PW03M002.XWHABRV = PW03W01.XWHABRV;

  PW03M002.XDVCD = PW03W01.XDVCD; /* Division code*/
  if (PW03W01.XDVCD == "*")
    PW03M002.XDVDESC = "ALL DIVISIONS";
  else
    PW03M002.XDVDESC = PW03W01.XDVDESC;
  end

  PW03M002.XBCCD = PW03W01.XBCCD;
  if (PW03W01.XBCCD == "*")
    PW03M002.XBCABRV = " ";
    if (PW03W00.XXXMSGNO == 0) /* no other msg to display*/
      PW03W00.XXXMSGNO = 421;
    end
  else
    PW03M002.XBCABRV = PW03W01.XBCABRV;
  end

  PW03M002.PW03M-SEL-IND = PW03W00.PW03W-SEL-IND;
  PW03W01.PW03W-DNSB-DT = PWKREC.OP1DSBDT[PW03W-DNSB-IDX];
  PW03M002.PW03M-DNSB-MM = PW03W01.PW03W-DNSB-MM;
  PW03M002.PW03M-DNSB-DD = PW03W01.PW03W-DNSB-DD;
  PW03M002.PW03M-DNSB-YY = PW03W01.PW03W-DNSB-YY;
  PW03M002.TF1CARCD = PWKREC.TF1CARCD[PW03W-DNSB-IDX];


   /* ------- format run mode -------------------------*/
  if (PW03W00.PW03W-RUN-MODE == "P")
     /* NEXT SENTENCE;*/
  else
    PW03M002.PW03M-MAP-APPL = "   PICKING   ";
  end

   /* ------- format map title ------------------------*/

  if (PW03W00.PW03W-ORD-GRP-SW == "FT") /* - FOOTWEAR*/
    PW03M001.PW03M-APPL-TITLE = "FT-TYPE";
    PW03M002.PW03M-APPL-TITLE = "FT-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "AP") /* - APPAREL*/
    PW03M001.PW03M-APPL-TITLE = "AP-TYPE";
    PW03M002.PW03M-APPL-TITLE = "AP-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "EQ") /* - EQUIPMENT*/
    PW03M001.PW03M-APPL-TITLE = "EQ-TYPE";
    PW03M002.PW03M-APPL-TITLE = "EQ-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "FC") /* - FOOTWEAR CLOSEOUT*/
    PW03M001.PW03M-APPL-TITLE = "FC-TYPE";
    PW03M002.PW03M-APPL-TITLE = "FC-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "AC") /* - APPAREL CLOSEOUT*/
    PW03M001.PW03M-APPL-TITLE = "AC-TYPE";
    PW03M002.PW03M-APPL-TITLE = "AC-TYPE";
  end

   /* IF PW03W00.PW03W-ORD-GRP-SW = '  ';/*         - EQUIPMENT CLOSEOUT*/
   /* MOVE '  -TYPE' TO PW03M001.PW03M-APPL-TITLE;*/
   /* MOVE '  -TYPE' TO PW03M002.PW03M-APPL-TITLE;*/
   /* END;*/

  if (PW03W00.PW03W-ORD-GRP-SW == "FS") /* - FOOTWEAR SAMPLES*/
    PW03M001.PW03M-APPL-TITLE = "FS-TYPE";
    PW03M002.PW03M-APPL-TITLE = "FS-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "AS") /* - APPAREL SAMPLES*/
    PW03M001.PW03M-APPL-TITLE = "AS-TYPE";
    PW03M002.PW03M-APPL-TITLE = "AS-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "ES") /* - EQUIPMENT SAMPLES*/
    PW03M001.PW03M-APPL-TITLE = "ES-TYPE";
    PW03M002.PW03M-APPL-TITLE = "ES-TYPE";
  end

  if (PW03W00.PW03W-ORD-GRP-SW == "EC") /* - EQUIPMENT CLOSEOUT*/
    PW03M001.PW03M-APPL-TITLE = "EC-TYPE";
    PW03M002.PW03M-APPL-TITLE = "EC-TYPE";
  end


  if (PW03W00.PW03W-ORD-GRP-SW == "FB") /* - footwear  b-grade*/
    PW03M001.PW03M-APPL-TITLE = "FB-TYPE";
    PW03M002.PW03M-APPL-TITLE = "FB-TYPE";
  end


  if (PW03W00.PW03W-ORD-GRP-SW == "EB") /* - EQUIPMENT b-grade*/
    PW03M001.PW03M-APPL-TITLE = "EB-TYPE";
    PW03M002.PW03M-APPL-TITLE = "EB-TYPE";
  end


  if (PW03W00.PW03W-SEL-IND <= " ") /* Selection code not present*/
    set PW03M002.PW03M-SEL-IND cursor; /* Position cursor*/
  end


end // end PW03-21002

// check Attention Identifier
Function PW03-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW03W00.PW03W-REQST-DAT-SW == "Y") /* Request for data*/

      set PW03W01 empty; /* M001 display storage*/
    end

    PW03W00.PW03W-FRMT-SCRN-SW = "Y"; /* Format map sw on*/
    PW03W00.PW03W-REQST-DAT-SW = "N"; /* Request for data sw off*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, this is an error.*/
   /* ------------------------------------------------------------*/

  if (PW03M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (PW03M001.CATOAP != "PW03") /* FAST PATH not to itself*/
        PW03S-P-TEMP-STOR(); /* Purge temporary storage*/
        XSPKS01(); /* Exit to another application*/
        PW03W00.PW03W-REQST-DAT-SW = "Y"; /* recreate t/s*/
        PW03W00.PW03W-FRMT-SCRN-SW = "Y"; /* format screen*/
        PW03W00.PW03W-BD-FSTPTH-SW = "Y"; /* bad fastpath on*/
      end
      converseLib.validationFailed(1); /* Invalid FAST PATH*/
    else
      converseLib.validationFailed(13); /* PA/PF key may not be used*/
    end
    PW03W00.XXXMODID = "300"; /* Module identification*/
    set PW03M001.CATOAP cursor, bold; /* Highlight*/
    exit stack; /* Exit to display map*/
  else
    if (PW03M002.CATOAP > " ") /* FAST PATH was requested*/
      if (converseVar.eventKey is enter) /* ENTER was pressed*/
        if (PW03M002.CATOAP != "PW03") /* FAST PATH not to itself*/
          PW03S-P-TEMP-STOR(); /* Purge temporary storage*/
          XSPKS01(); /* Exit to another application*/
          PW03W00.PW03W-REQST-DAT-SW = "Y"; /* recreate t/s*/
          PW03W00.PW03W-FRMT-SCRN-SW = "Y"; /* format screen*/
          PW03W00.PW03W-BD-FSTPTH-SW = "Y"; /* bad fastpath on*/
        end
        converseLib.validationFailed(1); /* Invalid FAST PATH*/
      else
        converseLib.validationFailed(13); /* PA/PF key may not be used*/
      end
      PW03W00.XXXMODID = "300"; /* Module identification*/
      set PW03M002.CATOAP cursor, bold; /* Highlight*/
      exit stack; /* Exit to display map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF1, PF3, PF4, or PF5 exit to another application*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      if (PKWREC.PKWSELSW == "PK") /* picking*/
        COMMAREA.CAITEM = "PW03M002"; /* Application find code*/
      else
        COMMAREA.CAITEM = "PW03M001"; /* Application find code*/
      end

    else
      if (converseVar.eventKey is pf3) /* PF3 was pressed*/

        COMMAREA.CATOAP = "PW0Z"; /* TO application*/

      else
        if (converseVar.eventKey is pf5) /* PF5 was pressed*/

          COMMAREA.CATOAP = "PW0R"; /* TO application*/

        end
      end
    end

    PW03S-P-TEMP-STOR(); /* Purge temporary storage*/

    PKWREC.PKW-ORD-GRP-SW = PW03W00.PW03W-ORD-GRP-SW;
    PKWREC.PKWARRAY[PKWINDEX] = PWKREC.PWKARRAY;
    XSPKS01(); /* Exit to another application*/


    PW03W00.XXXMODID = "300"; /* Module identification*/
    PW03W00.PW03W-REQST-DAT-SW = "Y"; /* recreate t/s*/
    PW03W00.PW03W-FRMT-SCRN-SW = "Y"; /* format screen*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW03W00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If no more DNSB Dates, do not allow ENTER, PF7, or PF8.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.PW03W-MORE-DNSB-SW == "N") /* No more dnsb dates*/

    PW03W00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(339); /* No more DNSB to display*/

    exit stack; /* Exit to display map*/

  end


end // end PW03-300

// reset Highlighted Fields
Function PW03-400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    set PW03M002.PW03M-SEL-IND initialAttributes; /* select code*/
    set PW03M002.XWHCD initialAttributes; /* warehouse code*/
    set PW03M002.XWHABRV initialAttributes; /* warehouse abrv*/
    set PW03M002.XDVCD initialAttributes; /* division code*/
    set PW03M002.XDVDESC initialAttributes; /* division desc*/
    set PW03M002.XBCCD initialAttributes; /* brand code*/
    set PW03M002.XBCABRV initialAttributes; /* brand abrv*/

  else
    set PW03M001.PW03M-SEL-IND initialAttributes; /* select code*/
    set PW03M001.XWHCD initialAttributes; /* warehouse code*/
    set PW03M001.XWHABRV initialAttributes; /* warehouse abrv*/
    set PW03M001.XDVCD initialAttributes; /* division code*/
    set PW03M001.XDVDESC initialAttributes; /* division desc*/
    set PW03M001.XBCCD initialAttributes; /* brand code*/
    set PW03M001.XBCABRV initialAttributes; /* brand abrv*/

  end
  PW03W00.PW03W-MAP-IDX = 1; /* Initialize line index*/

   /* ----- Until end of line or no more data -------------*/
  while (PW03W00.PW03W-MAP-IDX <= 12
   && PW03M001.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] > 0
   && PW03M002.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] > 0)

    /* ------- reset attributes ------------------*/

    if (PKWREC.PKWSELSW == "PK") /* picking*/
      set PW03M002.PW03M-ACTION[PW03W-MAP-IDX] normal;
      set PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] normal;
      set PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] normal;
      set PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] normal;
      set PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] normal;

      PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX + 1;

    else

      set PW03M001.PW03M-ACTION[PW03W-MAP-IDX] normal;
      set PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] normal;
      set PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] normal;
      set PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] normal;
      set PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] normal;

      PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX + 1;

    end
  end

  set PW03M001.CATOAP initialAttributes; /* TO application*/
  set PW03M002.CATOAP initialAttributes; /* TO application*/
  set PW03M001.CAITEM initialAttributes; /* Application data*/
  set PW03M002.CAITEM initialAttributes; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If any '?' found in hold cd, display pop-up window for cds*/
   /* ------------------------------------------------------------*/

  if ("?" in PW03M001.PW03M-HOLD-CD /* If a '?' in any of the hold codes*/
   || "?" in PW03M002.PW03M-HOLD-CD)

    if (converseVar.eventKey is enter)

        /* ------- display pop-up window ---------------------*/
      PW03W00.PW03W-MAP-IDX = sysVar.arrayIndex; /* set index*/
      PW03-410();

    else

        /* ------- option only valid with ENTER --------------*/
      set PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] bold; /* Highlight*/
      set PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] bold; /* Highlight*/
      PW03W00.XXXMODID = "400"; /* Module id*/
      converseLib.validationFailed(320); /* Error message*/

      exit stack; /* Exit to display map*/

    end
  end


end // end PW03-400

// display pop-up window for hold
Function PW03-410()
   /* ------------------------------------------------------------*/
   /* Display pop-up window for hold codes.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* pop-up window initialization*/

  XX0XW02.XX0XWHDR = "        HOLD REASON CODES"; /* set window title*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/

    XPXHR01(); /* display the list*/

  end


  if (PKWREC.PKWSELSW == "PK") /* picking*/

    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] = PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX];
    else
      PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] = XHRTBL.XHRCD[XX0XWPIX];
    end
  else
    if (XX0XW02.XX0XWPIX == 0) /* no selection made*/
      PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] = PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX];
    else
      PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] = XHRTBL.XHRCD[XX0XWPIX];
    end
  end


  converseLib.clearScreen();
  
  converseLib.clearScreen();
  
  PW03W00.XXXMODID = "410"; /* Module id*/


end // end PW03-410

// verify the Entered Data
Function PW03-500()
   /* ------------------------------------------------------------*/
   /* main module to control processing for both map1 and map2*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* PICKING*/
    PW03-50002();
  else
    PW03-50001();
  end


end // end PW03-500

// verify the Entered Data
Function PW03-50001()
   /* ------------------------------------------------------------*/
   /* NOTE:  When making changes, they must be done in both modules*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Check for item in fast path*/
   /* ------------------------------------------------------------*/

  if (PW03M001.CAITEM > " " /* Application data was entered*/
  )                        
    PW03W00.XXXMODID = "500"; /* Module identification*/
    set PW03M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(16); /* Item invalid w/o FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW03-510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If selection code was entered, validate it.*/
   /* ------------------------------------------------------------*/

  if (PW03M001.PW03M-SEL-IND != PW03W00.PW03W-SEL-IND)
    if (PW03M001.PW03M-SEL-IND == "A"
     || PW03M001.PW03M-SEL-IND == "N"
     || PW03M001.PW03M-SEL-IND == "S")

      PW03W-REQST-DAT-SW = "Y"; /* request data switch*/

    else
      set PW03M001.PW03M-SEL-IND cursor, bold; /* Highlight*/
      PW03W00.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(322); /* Invalid selection code*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If page was formatted, verify action and data in line.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.TA5TSQIX > 0) /* Page was formatted*/

    PW03W00.PW03W-MAP-IDX = 12; /* Initialize line index*/

    while (PW03W00.PW03W-MAP-IDX > 0) /* Until end of lines*/

      /* -------- if there is data ------------------------------*/
      if (PW03M001.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] > 0)

         /* ----- if map not equal to w/s W01 ------------------*/
        if (PW03M001.PW03M-ACTION[PW03W-MAP-IDX] != 
        PW03W01.PW03W-ACTION[PW03W-MAP-IDX]  /* -action*/
                                             
         || PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] != 
        PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX] /* -hold code*/
                                             
         || PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] != 
        PW03W01.PW03W-REL-MM[PW03W-MAP-IDX]  /* -release mm*/
                                             
         || PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] != 
        PW03W01.PW03W-REL-DD[PW03W-MAP-IDX]  /* -release dd*/
                                             
         || PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] != 
        PW03W01.PW03W-REL-YY[PW03W-MAP-IDX]) /* -release yy*/

          PW03-52001(); /* Verify data in the line*/

        end
      end

      PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX - 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/

    exit stack; /* Exit to display map*/

  end

   /* ---- if no enter key hit, get out of routine --------------*/
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* ENTER key hit -- Is there more inquirys to display*/
   /*  */
   /* If any changes, get out of routine.*/
   /* ------------------------------------------------------------*/

  if (PW03M001.PW03M-SEL-IND != PW03W00.PW03W-SEL-IND
   || PW03W00.PW03W-STOR-UPD-SW == "Y")

    return;

  end

   /* ------------------------------------------------------------*/
   /* A new DNSB date is needed.*/
   /* ------------------------------------------------------------*/

  PW03-530();


end // end PW03-50001

// verify the Entered Data
Function PW03-50002()
   /* ------------------------------------------------------------*/
   /* NOTE:  When making changes, they must be done in both modules*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Check for item in fast path*/
   /* ------------------------------------------------------------*/

  if (PW03M002.CAITEM > " " /* Application data was entered*/
  )                        
    PW03W00.XXXMODID = "500"; /* Module identification*/
    set PW03M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(16); /* Item invalid w/o FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW03-510(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If selection code was entered, validate it.*/
   /* ------------------------------------------------------------*/

  if (PW03M002.PW03M-SEL-IND != PW03W00.PW03W-SEL-IND)
    if (PW03M002.PW03M-SEL-IND == "A"
     || PW03M002.PW03M-SEL-IND == "N"
     || PW03M002.PW03M-SEL-IND == "S")

      PW03W-REQST-DAT-SW = "Y"; /* request data switch*/

    else
      set PW03M002.PW03M-SEL-IND cursor, bold; /* Highlight*/
      PW03W00.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(322); /* Invalid selection code*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If page was formatted, verify action and data in line.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.TA5TSQIX > 0) /* Page was formatted*/

    PW03W00.PW03W-MAP-IDX = 12; /* Initialize line index*/

    while (PW03W00.PW03W-MAP-IDX > 0) /* Until end of lines*/

      /* -------- if there is data ------------------------------*/
      if (PW03M002.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] > 0)

         /* ----- if map not equal to w/s W01 ------------------*/
        if (PW03M002.PW03M-ACTION[PW03W-MAP-IDX] != 
        PW03W01.PW03W-ACTION[PW03W-MAP-IDX]  /* -action*/
                                             
         || PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] != 
        PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX] /* -hold code*/
                                             
         || PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] != 
        PW03W01.PW03W-REL-MM[PW03W-MAP-IDX]  /* -release mm*/
                                             
         || PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] != 
        PW03W01.PW03W-REL-DD[PW03W-MAP-IDX]  /* -release dd*/
                                             
         || PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] != 
        PW03W01.PW03W-REL-YY[PW03W-MAP-IDX]) /* -release yy*/

          PW03-52002(); /* Verify data in the line*/

        end
      end

      PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX - 1;

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/

    exit stack; /* Exit to display map*/

  end

   /* ---- if no enter key hit, get out of routine --------------*/
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* ENTER key hit -- Is there more inquirys to display*/
   /*  */
   /* If any changes, get out of routine.*/
   /* ------------------------------------------------------------*/

  if (PW03M002.PW03M-SEL-IND != PW03W00.PW03W-SEL-IND
   || PW03W00.PW03W-STOR-UPD-SW == "Y")

    return;

  end

   /* ------------------------------------------------------------*/
   /* A new DNSB date is needed.*/
   /* ------------------------------------------------------------*/

  PW03-530();


end // end PW03-50002

// verify scroll request
Function PW03-510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW03W00.XXXTSPAG < 2)       /* and no previous pages*/

    PW03W00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW03W00.XXXTSPAG >= PW03W00.TA5TSQIX) /* and no more pages*/

    PW03W00.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error if selection cd was changed.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW03M002.PW03M-SEL-IND != PW03W00.PW03W-SEL-IND) /* Sel cd changed*/

      set PW03M002.PW03M-SEL-IND cursor, bold; /* Highlight*/
      PW03W00.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(39); /* No change allowed when scrolling*/

    end
  else
    if (PW03M001.PW03M-SEL-IND != PW03W00.PW03W-SEL-IND) /* Sel cd changed*/

      set PW03M001.PW03M-SEL-IND cursor, bold; /* Highlight*/
      PW03W00.XXXMODID = "510"; /* Module identification*/
      converseLib.validationFailed(39); /* No change allowed when scrolling*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors, go to display map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0)

    exit stack; /* Exit to display map*/

  end


end // end PW03-510

// verify data in the line
Function PW03-52001()
   /* ------------------------------------------------------------*/
   /* If action code entered, edit it.*/
   /* ------------------------------------------------------------*/

   /* ------ action changed and not 's', 'd', 'i', 'h', or ' '-----*/
  if (PW03M001.PW03M-ACTION[PW03W-MAP-IDX] != 
  PW03W01.PW03W-ACTION[PW03W-MAP-IDX]
   && PW03M001.PW03M-ACTION[PW03W-MAP-IDX] != "S"
   && PW03M001.PW03M-ACTION[PW03W-MAP-IDX] != "D"
   && PW03M001.PW03M-ACTION[PW03W-MAP-IDX] != "I"
   && PW03M001.PW03M-ACTION[PW03W-MAP-IDX] != "H"
   && PW03M001.PW03M-ACTION[PW03W-MAP-IDX] != " ")

    set PW03M001.PW03M-ACTION[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
    PW03W00.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* If order has previously been put on hold, no more changes*/
   /* are allowed.*/
   /* ------------------------------------------------------------*/

   /* ----- map not equal to display storage -----*/
  if (PW03M001.PW03M-ACTION[PW03W-MAP-IDX] != 
  PW03W01.PW03W-ACTION[PW03W-MAP-IDX]
  
   || PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] != 
  PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX]
  
   || PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] != 
  PW03W01.PW03W-REL-MM[PW03W-MAP-IDX]
  
   || PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] != 
  PW03W01.PW03W-REL-DD[PW03W-MAP-IDX]
  
   || PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] != 
  PW03W01.PW03W-REL-YY[PW03W-MAP-IDX])

    /* ----- order has been put on hold ---------*/
    if (PW03W00.PW03W-ORD-HLD-SW == "Y")
      PW03M001.PW03M-ACTION[PW03W-MAP-IDX] = PW03W01.PW03W-ACTION[PW03W-MAP-IDX];
      PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] = PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX];
      PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] = PW03W01.PW03W-REL-MM[PW03W-MAP-IDX];
      PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] = PW03W01.PW03W-REL-DD[PW03W-MAP-IDX];
      PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] = PW03W01.PW03W-REL-YY[PW03W-MAP-IDX];
      set PW03M001.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] bold;
      set PW03M001.PW03M-NIKE-ORD-ID[PW03W-MAP-IDX] bold;
      converseLib.validationFailed(169); /* no more chgs allowed - order on hold*/

      return; /* Go back to previous routine*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Validate rest of data entered based on action code.*/
   /* ------------------------------------------------------------*/
   /* ----- if action code is ' ', 's', 'd', or 'i'----------------*/


  if (PW03M001.PW03M-ACTION[PW03W-MAP-IDX] == " "
   || PW03M001.PW03M-ACTION[PW03W-MAP-IDX] == "S"
   || PW03M001.PW03M-ACTION[PW03W-MAP-IDX] == "D"
   || PW03M001.PW03M-ACTION[PW03W-MAP-IDX] == "I")

      /* ------ if hold code or release date not blank -------------*/
    if (PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] > " "
     || PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] > 0
     || PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] > 0
     || PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] > 0)

      set PW03M001.PW03M-ACTION[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
      set PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] bold;
      set PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] bold;
      set PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] bold;
      set PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] bold;
      PW03W00.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(331); /* Invalid action code*/

    end
  else
      /* ------- hold action code ---------------------*/
    if (PW03M001.PW03M-ACTION[PW03W-MAP-IDX] == "H")

      PW03-52101(); /* Edit hold date*/
      PW03-52201(); /* Edit hold reason code*/
    end
  end

   /* -----------------------------------------------------------*/
   /* If error found, return to previous routine*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* Errors found*/
    return; /* Go back to previous routine*/
  end

  PW03W00.PW03W-SCRN-MDFY-SW = "Y"; /* Screen modify switch*/
  PW03W00.PW03W-STOR-UPD-SW = "Y"; /* Update requested*/


end // end PW03-52001

// verify data in the line
Function PW03-52002()
   /* ------------------------------------------------------------*/
   /* If action code entered, edit it.*/
   /* ------------------------------------------------------------*/

   /* ------ action changed and not 's', 'd', 'i', 'h', or ' '-----*/
  if (PW03M002.PW03M-ACTION[PW03W-MAP-IDX] != 
  PW03W01.PW03W-ACTION[PW03W-MAP-IDX]
   && PW03M002.PW03M-ACTION[PW03W-MAP-IDX] != "S"
   && PW03M002.PW03M-ACTION[PW03W-MAP-IDX] != "D"
   && PW03M002.PW03M-ACTION[PW03W-MAP-IDX] != "I"
   && PW03M002.PW03M-ACTION[PW03W-MAP-IDX] != "H"
   && PW03M002.PW03M-ACTION[PW03W-MAP-IDX] != " ")

    set PW03M002.PW03M-ACTION[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
    PW03W00.XXXMODID = "520"; /* Module identification*/
    converseLib.validationFailed(35); /* Only valid codes may be entered*/

    return; /* Go back to previous routine*/

  end

   /* ------------------------------------------------------------*/
   /* If order has previously been put on hold, no more changes*/
   /* are allowed.*/
   /* ------------------------------------------------------------*/

   /* ----- map not equal to display storage -----*/
  if (PW03M002.PW03M-ACTION[PW03W-MAP-IDX] != 
  PW03W01.PW03W-ACTION[PW03W-MAP-IDX]
  
   || PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] != 
  PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX]
  
   || PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] != 
  PW03W01.PW03W-REL-MM[PW03W-MAP-IDX]
  
   || PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] != 
  PW03W01.PW03W-REL-DD[PW03W-MAP-IDX]
  
   || PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] != 
  PW03W01.PW03W-REL-YY[PW03W-MAP-IDX])

    /* ----- order has been put on hold ---------*/
    if (PW03W00.PW03W-ORD-HLD-SW == "Y")

      PW03M002.PW03M-ACTION[PW03W-MAP-IDX] = PW03W01.PW03W-ACTION[PW03W-MAP-IDX];
      PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] = PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX];
      PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] = PW03W01.PW03W-REL-MM[PW03W-MAP-IDX];
      PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] = PW03W01.PW03W-REL-DD[PW03W-MAP-IDX];
      PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] = PW03W01.PW03W-REL-YY[PW03W-MAP-IDX];
      set PW03M002.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] bold;
      set PW03M002.PW03M-NIKE-ORD-ID[PW03W-MAP-IDX] bold;
      converseLib.validationFailed(169); /* no more chgs allowed - order on hold*/

      return; /* Go back to previous routine*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Validate rest of data entered based on action code.*/
   /* ------------------------------------------------------------*/
   /* ----- if action code is ' ', 's', 'd', or 'i'----------------*/


  if (PW03M002.PW03M-ACTION[PW03W-MAP-IDX] == " "
   || PW03M002.PW03M-ACTION[PW03W-MAP-IDX] == "S"
   || PW03M002.PW03M-ACTION[PW03W-MAP-IDX] == "D"
   || PW03M002.PW03M-ACTION[PW03W-MAP-IDX] == "I")

      /* ------ if hold code or release date not blank -------------*/
    if (PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] > " "
     || PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] > 0
     || PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] > 0
     || PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] > 0)

      set PW03M002.PW03M-ACTION[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
      set PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] bold;
      set PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] bold;
      set PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] bold;
      set PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] bold;
      PW03W00.XXXMODID = "520"; /* Module identification*/
      converseLib.validationFailed(331); /* Invalid action code*/

    end
  else
      /* ------- hold action code ---------------------*/
    if (PW03M002.PW03M-ACTION[PW03W-MAP-IDX] == "H")

      PW03-52102(); /* Edit hold date*/
      PW03-52202(); /* Edit hold reason code*/
    end
  end

   /* -----------------------------------------------------------*/
   /* If error found, return to previous routine*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* Errors found*/
    return; /* Go back to previous routine*/
  end

  PW03W00.PW03W-SCRN-MDFY-SW = "Y"; /* Screen modify switch*/
  PW03W00.PW03W-STOR-UPD-SW = "Y"; /* Update requested*/


end // end PW03-52002

// edit release date
Function PW03-52101()
   /* ------------------------------------------------------------*/
   /* See if release date was entered.*/
   /* ------------------------------------------------------------*/

     /* --------- release date exists ---------------*/
  if (PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] > 0
   || PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] > 0
   || PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] > 0)

       /* next sentence*/

  else
       /* ------- release date doesn't exist --------*/
    converseLib.validationFailed(61); /* Release date is required msg*/
    PW03W00.XXXMODID = "521";
    set PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
    set PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] bold;
    set PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] bold;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  if (PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] != 99
   || PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] != 99
   || PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] != 99)




    set TA9REC empty; /* clear date routine record*/
    TA9REC.TA9BEGMM = PW03M001.PW03M-REL-MM[PW03W-MAP-IDX];
    TA9REC.TA9BEGDD = PW03M001.PW03M-REL-DD[PW03W-MAP-IDX];
    TA9REC.TA9BEGYY = PW03M001.PW03M-REL-YY[PW03W-MAP-IDX];

   /* ------ format century ----------------------*/
    if (PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] > 80)
      TA9REC.TA9BEGCC = 19;
    else
      TA9REC.TA9BEGCC = 20;
    end

   /* ------ validate release date ---------------*/
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};

    if (sysVar.errorCode == "00000000") /* Successful call*/
      if (TA9REC.TA9RTNFL == 0) /* If date routine ok*/

        PW03W01.PW03W-REL-MM = PW03M001.PW03M-REL-MM[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-DD = PW03M001.PW03M-REL-DD[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-YY = PW03M001.PW03M-REL-YY[PW03W-MAP-IDX];

        if (TA9REC.TA9BEGDT < PW03W00.PW03W-CURRENT-DT)
          converseLib.validationFailed(55); /* Date in past msg*/
          PW03W00.XXXMODID = "521"; /* Module id*/
           /* ---- highlight map fields ---------------------------*/
          set PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] cursor, bold;
          set PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] bold;
          set PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] bold;
        end
      else /* Routine error*/

        PW03W00.XXXMODID = "521"; /* Module id*/
       /* ---- highlight map fields ---------------------------*/
        set PW03M001.PW03M-REL-MM[PW03W-MAP-IDX] cursor, bold;
        set PW03M001.PW03M-REL-DD[PW03W-MAP-IDX] bold;
        set PW03M001.PW03M-REL-YY[PW03W-MAP-IDX] bold;

        if (TA9REC.TA9RTNFL == 3) /* Invalid work date*/
          converseLib.validationFailed(56); /* Not work date msg*/
        else
          converseLib.validationFailed(158); /* Invalid date msg*/
        end
      end
      return;
    end

   /* ------------------------------------------------------------*/
   /* Unsuccessful call.*/
   /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    PW03W00.XXXMODID = "521"; /* Module id*/
    converseLib.validationFailed(29); /* Unexpected error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "VERIFY RELEASE DATE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M001"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack;

  end


end // end PW03-52101

// edit release date
Function PW03-52102()
   /* ------------------------------------------------------------*/
   /* See if release date was entered.*/
   /* ------------------------------------------------------------*/

     /* --------- release date exists ---------------*/
  if (PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] > 0
   || PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] > 0
   || PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] > 0)

       /* next sentence*/

  else
       /* ------- release date doesn't exist --------*/
    converseLib.validationFailed(61); /* Release date is required msg*/
    PW03W00.XXXMODID = "521";
    set PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
    set PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] bold;
    set PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] bold;

    return;

  end

   /* ------------------------------------------------------------*/
   /* Validate a keyed release date.*/
   /* ------------------------------------------------------------*/

  if (PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] != 99
   || PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] != 99
   || PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] != 99)




    set TA9REC empty; /* clear date routine record*/
    TA9REC.TA9BEGMM = PW03M002.PW03M-REL-MM[PW03W-MAP-IDX];
    TA9REC.TA9BEGDD = PW03M002.PW03M-REL-DD[PW03W-MAP-IDX];
    TA9REC.TA9BEGYY = PW03M002.PW03M-REL-YY[PW03W-MAP-IDX];

   /* ------ format century ----------------------*/
    if (PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] > 80)
      TA9REC.TA9BEGCC = 19;
    else
      TA9REC.TA9BEGCC = 20;
    end

   /* ------ validate release date ---------------*/
    call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};

    if (sysVar.errorCode == "00000000") /* Successful call*/
      if (TA9REC.TA9RTNFL == 0) /* If date routine ok*/

        PW03W01.PW03W-REL-MM = PW03M002.PW03M-REL-MM[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-DD = PW03M002.PW03M-REL-DD[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-YY = PW03M002.PW03M-REL-YY[PW03W-MAP-IDX];

        if (TA9REC.TA9BEGDT < PW03W00.PW03W-CURRENT-DT)
          converseLib.validationFailed(55); /* Date in past msg*/
          PW03W00.XXXMODID = "521"; /* Module id*/
           /* ---- highlight map fields ---------------------------*/
          set PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] cursor, bold;
          set PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] bold;
          set PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] bold;
        end
      else /* Routine error*/

        PW03W00.XXXMODID = "521"; /* Module id*/
       /* ---- highlight map fields ---------------------------*/
        set PW03M002.PW03M-REL-MM[PW03W-MAP-IDX] cursor, bold;
        set PW03M002.PW03M-REL-DD[PW03W-MAP-IDX] bold;
        set PW03M002.PW03M-REL-YY[PW03W-MAP-IDX] bold;

        if (TA9REC.TA9RTNFL == 3) /* Invalid work date*/
          converseLib.validationFailed(56); /* Not work date msg*/
        else
          converseLib.validationFailed(158); /* Invalid date msg*/
        end
      end
      return;
    end

   /* ------------------------------------------------------------*/
   /* Unsuccessful call.*/
   /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* Subroutine parameters*/

    PW03W00.XXXMODID = "521"; /* Module id*/
    converseLib.validationFailed(29); /* Unexpected error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "VERIFY RELEASE DATE";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
    TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
    TA1REC.TA1MAPNO = "M002"; /* Map number*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack;

  end


end // end PW03-52102

// edit hold reason code
Function PW03-52201()
   /* ------------------------------------------------------------*/
   /* Edit the hold reason code entered.*/
   /* ------------------------------------------------------------*/
   /* ------ no hold code entered -------*/

  if (PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] <= " ")

    set PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
    PW03W00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(60); /* Reason code required*/

    return; /* Return to previous process*/
  end
   /* ------------------------------------------------------------*/
   /* Check the hold reason code corporate table.*/
   /* ------------------------------------------------------------*/

   /* ---- if hold code exists and active ----------*/
  if (PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] in XHRTBL.XHRCD
   && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A")

      /* next sentence*/

  else

    set PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
    PW03W00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(57); /* Invalid reason code*/

  end

end // end PW03-52201

// edit hold reason code
Function PW03-52202()
   /* ------------------------------------------------------------*/
   /* Edit the hold reason code entered.*/
   /* ------------------------------------------------------------*/
   /* ------ no hold code entered -------*/

  if (PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] <= " ")

    set PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
    PW03W00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(60); /* Reason code required*/

    return; /* Return to previous process*/
  end
   /* ------------------------------------------------------------*/
   /* Check the hold reason code corporate table.*/
   /* ------------------------------------------------------------*/

   /* ---- if hold code exists and active ----------*/
  if (PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] in XHRTBL.XHRCD
   && XHRTBL.XXXSTAT[sysVar.arrayIndex] == "A")

      /* next sentence*/

  else

    set PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX] cursor, bold; /* Highlight*/
    PW03W00.XXXMODID = "522"; /* Module identification*/
    converseLib.validationFailed(57); /* Invalid reason code*/

  end

end // end PW03-52202

// format next DNSB date, If any
Function PW03-530()
   /* ------------------------------------------------------------*/
   /* A new DNSB Date is needed, look for it.*/
   /* ------------------------------------------------------------*/

  PW03W00.PW03W-MORE-DNSB-SW = "Y"; /* Assume more DNSB Dates*/

   /* ----- More DNSB dates and not the same as previous ----------*/
  while (PW03W00.PW03W-MORE-DNSB-SW == "Y"
   && PWKREC.OP1DSBDT[PW03W-DNSB-IDX] == PW03W00.PW03W-PREV-DNSB-DT
   && PWKREC.TF1CARCD[PW03W-DNSB-IDX] == PW03W00.PW03W-PREV-TF1CARCD)

    PW03W00.PW03W-DNSB-IDX = PW03W00.PW03W-DNSB-IDX + 1;

    /* --------------------------------------------------------------*/
    /* Determine if there are more DNSB dates passed.  There are*/
    /* 3 occurances of array 25.*/
    /*  */
    /* PKWINDEX varies from 1 to 3.*/
    /* PW03W-DNSB-IDX varies from 1 to 25.*/
    /* PWKARMAX is the # of DNSB dates passed from last application.*/
    /* --------------------------------------------------------------*/
    if (PW03W00.PW03W-DNSB-IDX > PWKREC.PWKARMAX)

      if (PW03W00.PW03W-DNSB-IDX > 25 /* Array was full,*/
       && PKWREC.PKWINDEX < 3)        /* but there are other arrays*/

        PKWREC.PKWINDEX = PKWREC.PKWINDEX + 1;
        PWKREC.PWKARRAY = PKWREC.PKWARRAY[PKWINDEX]; /* Get next 25*/
        PW03W00.PW03W-DNSB-IDX = 1;

        if (PW03W00.PW03W-DNSB-IDX > PWKREC.PWKARMAX)
          PW03W00.PW03W-MORE-DNSB-SW = "N"; /* No more dates*/

        end
      else
        PW03W00.PW03W-MORE-DNSB-SW = "N"; /* No more dates*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* See if new DNSB Date was found.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.PW03W-MORE-DNSB-SW == "Y") /* More DNSB Dates in array*/

    /* ----- save new DNSB date ------------------------*/
    PW03W00.PW03W-PREV-DNSB-DT = PWKREC.OP1DSBDT[PW03W-DNSB-IDX];
    PW03W00.PW03W-PREV-TF1CARCD = PWKREC.TF1CARCD[PW03W-DNSB-IDX];

    return; /* Get out of this routine*/

  end

   /* ------------------------------------------------------------*/
   /* No more DNSB Dates found.*/
   /* ------------------------------------------------------------*/

  set PW03M001 initial;
  set PW03M002 initial;

  PW03M001.XWHCD = PKWREC.XWHCD; /* Warehouse cd to map*/
  PW03M002.XWHCD = PKWREC.XWHCD; /* Warehouse cd to map*/
  PW03M001.XWHABRV = PKWREC.XWHABRV; /* Warehouse abrv*/
  PW03M002.XWHABRV = PKWREC.XWHABRV; /* Warehouse abrv*/

  PW03M001.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  PW03M002.XDVCD = PKWREC.XDVCD[1]; /* Division code*/
  if (PKWREC.XDVCD[1] == "*")
    PW03M001.XDVDESC = "ALL DIVISIONS";
    PW03M002.XDVDESC = "ALL DIVISIONS";
  else
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW03M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
    if (PKWREC.XDVCD[1] in XDVTBL.XDVCD)
      PW03M002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    end
  end

  PW03M001.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  PW03M002.XBCCD = PKWREC.XBCCD[1]; /* Brand code*/
  if (PKWREC.XBCCD[1] == "*")
    PW03W00.XXXMSGNO = 421;
    PW03M001.XBCABRV = " ";
  else
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW03M001.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
    if (PKWREC.XBCCD[1] in XBCTBL.XBCCD)
      PW03M002.XBCABRV = XBCTBL.XBCABRV[sysVar.arrayIndex];
    end
  end

  set PW03M001.PW03M-SEL-IND cursor, skip;
  set PW03M002.PW03M-SEL-IND cursor, skip;
  PW03M001.PW03M-SEL-IND = PW03W01.PW03W-SEL-IND;
  PW03M002.PW03M-SEL-IND = PW03W01.PW03W-SEL-IND;
  PW03M001.PW03M-DNSB-MM = PW03W01.PW03W-DNSB-MM;
  PW03M002.PW03M-DNSB-MM = PW03W01.PW03W-DNSB-MM;
  PW03M001.PW03M-DNSB-DD = PW03W01.PW03W-DNSB-DD;
  PW03M002.PW03M-DNSB-DD = PW03W01.PW03W-DNSB-DD;
  PW03M001.PW03M-DNSB-YY = PW03W01.PW03W-DNSB-YY;
  PW03M002.PW03M-DNSB-YY = PW03W01.PW03W-DNSB-YY;
  PW03M001.TF1CARCD = PW03W01.TF1CARCD;
  PW03M002.TF1CARCD = PW03W01.TF1CARCD;

  PW03W00.PW03W-REQST-DAT-SW = "N"; /* Reset request data switch*/
  PW03W00.XXXMODID = "530"; /* Module identification*/
  converseLib.validationFailed(339); /* No more dnsb dates*/

  exit stack; /* Exit to display map*/


end // end PW03-530

// process valid input request
Function PW03-600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW03W00.PW03W-FRMT-SCRN-SW = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Save the entered data, save and update t/s.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.PW03W-SCRN-MDFY-SW == "Y" /* Screen modified*/
  )                                    
    PW03W00.PW03W-SCRN-MDFY-SW = "N"; /* Reset switch*/
    PW03W00.PW03W-MAP-IDX = 1; /* Initialize line index*/

    /* ------- until end of lines and data exists ----------*/
    if (PKWREC.PKWSELSW == "PK") /* picking*/

      while (PW03W00.PW03W-MAP-IDX <= 12
       && PW03M002.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] > 0)

        PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = PW03M002.PW03M-ACTION[PW03W-MAP-IDX];
        PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX] = PW03M002.PW03M-HOLD-CD[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-MM[PW03W-MAP-IDX] = PW03M002.PW03M-REL-MM[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-DD[PW03W-MAP-IDX] = PW03M002.PW03M-REL-DD[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-YY[PW03W-MAP-IDX] = PW03M002.PW03M-REL-YY[PW03W-MAP-IDX];

        PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX + 1;
      end

    else /* pick planning*/

      while (PW03W00.PW03W-MAP-IDX <= 12
       && PW03M001.PW03M-ORD-STKTF-ID[PW03W-MAP-IDX] > 0)

        PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = PW03M001.PW03M-ACTION[PW03W-MAP-IDX];
        PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX] = PW03M001.PW03M-HOLD-CD[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-MM[PW03W-MAP-IDX] = PW03M001.PW03M-REL-MM[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-DD[PW03W-MAP-IDX] = PW03M001.PW03M-REL-DD[PW03W-MAP-IDX];
        PW03W01.PW03W-REL-YY[PW03W-MAP-IDX] = PW03M001.PW03M-REL-YY[PW03W-MAP-IDX];

        PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX + 1;
      end
    end

    TA5REC.TA5TSQIX = PW03W00.XXXTSPAG; /* Page# to update*/
    PW03S-U-TEMP-STOR(); /* Update t/s page*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW03W00.XXXTSPAG = PW03W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW03W00.XXXTSPAG = PW03W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If the selection cd was changed, go back to rebuild data.*/
   /* ------------------------------------------------------------*/

  if (PKWREC.PKWSELSW == "PK") /* picking*/
    if (PW03M002.PW03M-SEL-IND != PW03W00.PW03W-SEL-IND)

      PW03W00.PW03W-REQST-DAT-SW = "Y"; /* Request for data switch*/

      return; /* Return to previous process*/

    end
  else
    if (PW03M001.PW03M-SEL-IND != PW03W00.PW03W-SEL-IND)

      PW03W00.PW03W-REQST-DAT-SW = "Y"; /* Request for data switch*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If action requested, perform them.*/
   /* ------------------------------------------------------------*/

  if (PW03W00.PW03W-STOR-UPD-SW == "Y") /* Data updates found*/

    XX0XS01(); /* Get system date and time*/

    PW03W00.PW03W-UPD-OK-SW = "N"; /* clr successful updates*/

    PW03-610(); /* Process action (S,D,H,I)*/

    PW03W00.PW03W-STOR-UPD-SW = "N"; /* clr updates requested sw*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

     /* ------ Successful updates -----------*/
    if (PW03W00.PW03W-UPD-OK-SW == "Y")

      if (PW03W00.XXXMSGNO == 0) /* If no warnings*/

        PW03W00.XXXMSGNO = 32; /* Updates successful*/
        PW03W00.XXXMODID = "600"; /* Module identification*/

      end
    end

     /* ------ Orders to inquiry on ---------*/
    if (PW03W00.PW03W-ORD-INQ-IDX > 1)
      PW03-620(); /* Xfer to PW0I*/

    else
      PW03W00.XXXTSPAG = 1; /* Force display to first page*/

    end
    return; /* Go back to previous routine*/
  end

   /* ------------------------------------------------------------*/
   /* ***** Finished processing current DNSB date ******/

   /* Go get the next one*/
   /* ------------------------------------------------------------*/

  PW03W00.PW03W-REQST-DAT-SW = "Y"; /* Request for data switch*/


end // end PW03-600

// process action (S,D,H,I)
Function PW03-610()
   /* ------------------------------------------------------------*/
   /* Process action (Select, De-select, Hold, Inquiry)*/
   /* ------------------------------------------------------------*/

  PW03W00.PW03W-MAP-IDX = 1; /* -Initialize map index*/
  PW03W00.PW03W-ORD-INQ-IDX = 1; /* -Init order inquiry array idx*/
  PW03W00.XXXTSPAG = 1; /* -Start at first page of t/s*/

  PW03S-R-TEMP-STOR(); /* -Read first t/s page*/

  while (PW03W00.XXXTSPAG <= PW03W00.TA5TSQIX) /* While there is still data*/

    /* ------- Data present on line ---------*/
    if (PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX] > 0)

       /* ------ Select to pick -----------------*/
      if (PW03W01.PW03W-ACTION[PW03W-MAP-IDX] == "S")

        PW03-611();
        PW03W00.PW03W-UPD-OK-SW = "Y"; /* Successful update*/

      end

       /* ------ De-Select to pick --------------*/
      if (PW03W01.PW03W-ACTION[PW03W-MAP-IDX] == "D")

        PW03-612();
        PW03W00.PW03W-UPD-OK-SW = "Y"; /* Successful update*/

      end

       /* ------ Place order on hold ------------*/
      if (PW03W01.PW03W-ACTION[PW03W-MAP-IDX] == "H")

        PW03-613();
        PW03W00.PW03W-UPD-OK-SW = "Y"; /* Successful update*/

      end

       /* ------ Inquiry on order ---------------*/
      if (PW03W01.PW03W-ACTION[PW03W-MAP-IDX] == "I")

        PW03-614();
        PW03W00.PW03W-UPD-OK-SW = "Y"; /* Successful update*/

      end
    end

    PW03W00.PW03W-MAP-IDX = PW03W00.PW03W-MAP-IDX + 1; /* Increment index*/

    /* ------------------------------------------------------------*/
     /* If t/s page processed, update & get next page.*/
    /* ------------------------------------------------------------*/

    if (PW03W00.PW03W-MAP-IDX > 12) /* If index > 12*/

      PW03S-U-TEMP-STOR(); /* Update current t/s page*/

      PW03W00.XXXTSPAG = PW03W00.XXXTSPAG + 1; /* Increment t/s page number*/

      if (PW03W00.XXXTSPAG <= PW03W00.TA5TSQIX) /* Still have more t/s pages*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* Commit DB updates for prior page data*/

        PW03S-R-TEMP-STOR(); /* Read next t/s page*/

        PW03W00.PW03W-MAP-IDX = 1; /* Reset index*/

      end
    end
  end


end // end PW03-610

// Select order for picking
Function PW03-611()
   /* ------------------------------------------------------------*/
   /* Select order for picking*/
   /* ------------------------------------------------------------*/

  PW03S-SELECT-POOLH(); /* select unique pool header*/

  if (PW03W00.PW03W-RUN-MODE == " ") /* if run mode is picking*/
    PK4REC.PK4SLIND = "S"; /* set status to 's'*/

  else
    PK4REC.PK4SLIND = "P"; /* otherwise, set to 'p'*/

  end

  PW03W01.PW03W-SELECT-FL[PW03W-MAP-IDX] = "Y";
  PW03M001.PW03M-SELECT-FL[PW03W-MAP-IDX] = "Y";
  PW03M002.PW03M-SELECT-FL[PW03W-MAP-IDX] = "Y";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW03S-UPDATE-POOLH(); /* update pool header*/

   /* ------------------------------------------------------------*/
   /* See if row already exists in Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/

  PKHREC.XWHCD = PW03W01.XWHCD;
  PKHREC.PK1CUOID = PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX];
  PKHREC.PK1NORID = PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX];
  PKHREC.PKURUNMD = PW03W00.PW03W-RUN-MODE;

  PW03S-SELECT-SELOR(); /* select unique Dpick.Vselor01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/

    if (PW03W00.XXXMSGNO == 0) /* if no other warning msgs*/
      PW03W00.XXXMSGNO = 44; /* warning msg*/
      PW03W00.XXXMODID = "   "; /* module id*/
    end

    PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = " "; /* clear action*/

    return; /* return to prev process, don't need to*/
                                   /* add rec*/
  end

   /* ------------------------------------------------------------*/
   /* Insert row into Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* clear record*/

  PW03S-FRMT-SEL-IND(); /* determine sel type indicator*/
   /* MOVE '10' TO PW03W00.PW03W-SEL-TYP-CD  /* Ddetermine*/
                                  /* sel type indicator*/

   /* ------ Format record from w/s -------------------------------*/
  PKHREC.XWHCD = PW03W01.XWHCD;
  PKHREC.PK1CUOID = PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX];
  PKHREC.PK1NORID = PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX];
  PKHREC.PKHPVSFC = PW03W01.PW03W-FC-QTY[PW03W-MAP-IDX];
  PKHREC.PKHPVSRP = PW03W01.PW03W-RP-QTY[PW03W-MAP-IDX];
  PKHREC.OP1DSBDT = PW03W01.PW03W-DNSB-DT;
  PKHREC.PKURUNMD = PW03W00.PW03W-RUN-MODE;
  PKHREC.PK-SEL-TYP-CD = PW03W00.PW03W-SEL-TYP-CD;

   /* ------ Format record from pool header -----------------------*/
  PKHREC.XDVCD = PK4REC.XDVCD;
  PKHREC.XBCCD = PK4REC.XBCCD;
  PKHREC.PK1PRTN = PK4REC.PK1PRTN; /* part char*/
  PKHREC.TF1CARCD = PK4REC.TF1CARCD; /* carrier cd*/
  PKHREC.XPPCD = PK4REC.XPPCD; /* pick prior cd*/
  PKHREC.PKHPVSMM = PK4REC.PK4ORDTM; /* sel wrk min*/

   /* ------ Format record with current date/time -----------------*/
  PKHREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKHREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  PKHREC.ZZZCHGCT = 0;

  PW03S-INSERT-SELOR(); /* insert Dpick.Vselor01*/


end // end PW03-611

// de-select order
Function PW03-612()
   /* ------------------------------------------------------------*/
   /* De-select order - Change sel-ind to ' '*/
   /* - Delete order from selected order table*/
   /* ------------------------------------------------------------*/

  PW03S-SELECT-POOLH(); /* Select unique pool header*/

  PK4REC.PK4SLIND = " "; /* Set status to 'deselected'*/
  PW03W01.PW03W-SELECT-FL[PW03W-MAP-IDX] = "N";
  PW03M001.PW03M-SELECT-FL[PW03W-MAP-IDX] = "N";
  PW03M002.PW03M-SELECT-FL[PW03W-MAP-IDX] = "N";

  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW03S-UPDATE-POOLH(); /* Update pool header*/

   /* ------------------------------------------------------------*/
    /* Delete row from Dpick.Vselor01*/
   /* ------------------------------------------------------------*/

  set PKHREC empty; /* Clear record*/

  PKHREC.XWHCD = PW03W01.XWHCD;
  PKHREC.PK1CUOID = PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX];
  PKHREC.PK1NORID = PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX];
  PKHREC.PKURUNMD = PW03W00.PW03W-RUN-MODE;

  PW03S-DELETE-SELOR(); /* Delete Dpick.Vselor01*/


end // end PW03-612

// put order on hold
Function PW03-613()
   /* ------------------------------------------------------------*/
   /* Update pool header row for order on hold*/
   /* ------------------------------------------------------------*/

  PW03S-SELECT-POOLH(); /* Select unique pool header*/

  PK4REC.PK4ORHLD = "Y"; /* Set order hold flag to yes*/
  PK4REC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PK4REC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  PW03S-UPDATE-POOLH(); /* Update pool header*/

   /* ------------------------------------------------------------*/
   /* Put order on hold*/
   /* ------------------------------------------------------------*/

  set PKBREC empty; /* Clear record*/

  PKBREC.XWHCD = PW03W01.XWHCD;
  PKBREC.PK1CUOID = PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX];
  PKBREC.PK1NORID = PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX];
  PKBREC.XHRCD = PW03W01.PW03W-HOLD-CD[PW03W-MAP-IDX];
  PKBREC.PK1PRTN = PK4REC.PK1PRTN;

  PW03S-SELECT-ORHLD(); /* Select unique Dpick.Vorhld01*/

   /* ------------------------------------------------------------*/
   /* Prepare release order from map to be moved into pkbrec.*/
   /* ------------------------------------------------------------*/

  PW03W00.PW03W-WRK-MM = PW03W01.PW03W-REL-MM[PW03W-MAP-IDX];
  PW03W00.PW03W-WRK-DD = PW03W01.PW03W-REL-DD[PW03W-MAP-IDX];
  PW03W00.PW03W-WRK-YY = PW03W01.PW03W-REL-YY[PW03W-MAP-IDX];

  if (PW03W00.PW03W-WRK-YY > 80) /* If year > 80*/
    PW03W00.PW03W-WRK-CC = 19; /* set century to 19*/

  else
    PW03W00.PW03W-WRK-CC = 20; /* else, set to 20*/

  end

  PKBREC.PKBRELDT = PW03W00.PW03W-WRK-DT; /* store as release date*/

   /* ---------------------------------------------------------------*/
   /* If release date is not '999999', subtract 1 from release date*/
    /* and move to the plan release date.*/
   /* ---------------------------------------------------------------*/

  if (PW03W00.PW03W-WRK-MM != 99
   || PW03W00.PW03W-WRK-DD != 99
   || PW03W00.PW03W-WRK-YY != 99)

    set TA9REC empty;
    TA9REC.TA9BEGDT = PW03W00.PW03W-WRK-DT;
    TA9REC.TA9OFSET = -1;

    try
      call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};
    end /* subract 1 from date*/

    /* -----------------------------------------------------------------*/
     /* if successful, move date and continue through process*/
    /* -----------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* call successful*/
     && TA9REC.TA9RTNFL == 0)          /* and normal return code*/

      PKBREC.PKBPLRDT = TA9REC.TA9RTNDT;

    else
      /* ---------------------------------------------------------------*/
       /* otherwise, indicate that a system error has occurred*/
      /* ---------------------------------------------------------------*/

      TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
      TAEREC.TAEDESC2 = TA9REC.TA9GRP; /* subroutine parameters*/
      converseLib.validationFailed(29); /* fatal error*/
      TA1REC.TA1FUNC = "RETN"; /* termination function*/
      TA1REC.TA1TYPE = "APPL"; /* type of error*/
      TA1REC.TA1LOC = "UPDATE PLAN RELEASE DATE";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program appl*/
      TA1REC.TA1PGMNO = "613"; /* program number*/
      TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* map appl*/

   /* error diagnosis routine*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      exit stack; /* exit to display map*/

    end
  else
    PKBREC.PKBPLRDT = PW03W00.PW03W-WRK-DT;

  end

  if (PKBREC.PKBRELDT > 19991231)
    PKBREC.PKBRELDT = 99999999;
    PKBREC.PKBRELDT = 99999999;
  end

   /* ------------------------------------------------------------*/
    /* If order hold row found, update it, otherwise, add it.*/
   /* ------------------------------------------------------------*/

  PKBREC.XXXUSRID = COMMAREA.CAUSERID;
  PKBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  PKBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  if (SQLCA.VAGen_SQLCODE == 0) /* Row was found*/
    PW03S-UPDATE-ORHLD(); /* Update Dpick.Vorhld01 row*/

  else
    PKBREC.ZZZCHGCT = 0;
    PW03S-INSERT-ORHLD(); /* Insert Dpick.Vorhld01 row*/

  end


end // end PW03-613

// process order for inquiry
Function PW03-614()
   /* ------------------------------------------------------------*/
   /* Order was requested for inquiry - add to pwjrec array*/
   /* ------------------------------------------------------------*/

  if (PW03W00.PW03W-ORD-INQ-IDX > 65)

    PW03W00.XXXMSGNO = 346; /* order inquiry limit exceeded*/

    return;

  end

   /* ------ Format order inquiry record --------------------------*/
  PWJREC.PWJORACT[PW03W-ORD-INQ-IDX] = "I";
  PWJREC.XWHCD = PW03W01.XWHCD;
  PWJREC.XWHABRV = PW03W01.XWHABRV;
  PWJREC.PK1CUOID[PW03W-ORD-INQ-IDX] = PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX];
  PWJREC.PK1NORID[PW03W-ORD-INQ-IDX] = PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX];

  PW03W00.PW03W-ORD-INQ-IDX = PW03W00.PW03W-ORD-INQ-IDX + 1;


end // end PW03-614

// transfer to PW0I
Function PW03-620()
   /* ------------------------------------------------------------*/
   /* Orders are in PWJREC for inquiry, xfer to PW0I.*/
   /* ------------------------------------------------------------*/

  PW03S-P-TEMP-STOR(); /* Purge temporary storage*/

  COMMAREA.CATOAP = "PW0I"; /* Set target application*/
  PW03W00.PW03W-ORD-INQ-IDX = PW03W00.PW03W-ORD-INQ-IDX - 1;
  PWJREC.PWJARMAX = PW03W00.PW03W-ORD-INQ-IDX;
  PKWREC.PKWUSERB = PWJREC.PKWUSERB;
  PKWREC.PKW-ORD-GRP-SW = PW03W00.PW03W-ORD-GRP-SV;

  XSPKS01(); /* Exit to another application*/

  set PW03M001.CATOAP cursor, bold; /* Highlight*/
  set PW03M002.CATOAP cursor, bold; /* Highlight*/

  exit stack; /* Exit to display map*/


end // end PW03-620

// add Page to Temporary Storage
Function PW03S-A-TEMP-STOR()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW03W01.XXXTSLEN = PW03W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  set PW03W01 empty; /* M001 display storage*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    PW03W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW03W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-A-TEMP-STOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-A-TEMP-STOR

// cLOSE CURSOR - DPICK.VPOOLH01
Function PW03S-CLOSE-POOLH()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("C7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-CLOSE-POOLH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-CLOSE-POOLH

// delete - DPICK.VSELOR01
Function PW03S-DELETE-SELOR()
   /* ------------------------------------------------------------*/
   /* Delete the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("D ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = "*"; /* processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      PW03W00.XXXMSGNO = 201; /* Row to be deleted not found*/
      PW03W00.XXXMODID = "   "; /* Module identification*/
      PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = " "; /* processed*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-DELETE-SELOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-DELETE-SELOR

// fETCH CURSOR - DPICK.VPOOLH01
Function PW03S-FETCH-POOLH()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("N7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW03W00.PW03W-POOLH-CSR-SW = "Y";

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-FETCH-POOLH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-FETCH-POOLH

// Format select type indicator
Function PW03S-FRMT-SEL-IND()
   /* -------------------------------------------------------------*/
   /* Determine the selection type indicator ( 10, 11, 12, & 13)*/
   /* depending on special handling and order type.*/
   /* -------------------------------------------------------------*/

   /* -------- B-grade Special Handling ------------*/
  if (PK4REC.OP1SPHDF == "Y"
   && (PK4REC.XOTCD == "DA"
   || PK4REC.XOTCD == "DB"
   || PK4REC.XOTCD == "DD"
   || PK4REC.XOTCD == "DF"
   || PK4REC.XOTCD == "01"
   || PK4REC.XOTCD == "02"
   || PK4REC.XOTCD == "03"
   || PK4REC.XOTCD == "04"
   || PK4REC.XOTCD == "13"
   || PK4REC.XOTCD == "14"
   || PK4REC.XOTCD == "16"
   || PK4REC.XOTCD == "80"
   || PK4REC.XOTCD == "81"
   || PK4REC.XOTCD == "84"
   || PK4REC.XOTCD == "RP"))

    PW03W00.PW03W-SEL-TYP-CD = "22";
  else
    if (PK4REC.OP1SPHDF == "Y"
     && (PK4REC.XOTCD == "DC"
     || PK4REC.XOBCD == "DE"
     || PK4REC.XOBCD == "DG"
     || PK4REC.XOBCD == "DI"))

      PW03W00.PW03W-SEL-TYP-CD = "24";
    else
      if (PK4REC.OP1SPHDF == "Y"
       && (PK4REC.XOTCD == "FA"
       || PK4REC.XOTCD == "FB"
       || PK4REC.XOTCD == "FC"
       || PK4REC.XOTCD == "FD"
       || PK4REC.XOTCD == "FF"
       || PK4REC.XOTCD == "FG"
       || PK4REC.XOTCD == "FH"
       || PK4REC.XOTCD == "FI"
       || PK4REC.XOTCD == "HG"
       || PK4REC.XOTCD == "HH"
       || PK4REC.XOTCD == "HI"
       || PK4REC.XOTCD == "HJ"
       || PK4REC.XOTCD == "FQ"
       || PK4REC.XOTCD == "FR"
       || PK4REC.XOTCD == "FS"
       || PK4REC.XOTCD == "FT"
       || PK4REC.XOTCD == "ED"
       || PK4REC.XOTCD == "EF"
       || PK4REC.XOTCD == "EG"
       || PK4REC.XOTCD == "EK"
       || PK4REC.XOTCD == "HB"
       || PK4REC.XOTCD == "HC"
       || PK4REC.XOTCD == "HD"
       || PK4REC.XOTCD == "HE"
       || PK4REC.XOTCD == "HT"
       || PK4REC.XOTCD == "HU"
       || PK4REC.XOTCD == "HV"
       || PK4REC.XOTCD == "IH"
       || PK4REC.XOTCD == "IG"
       || PK4REC.XOTCD == "IF"
       || PK4REC.XOTCD == "HW"
       || PK4REC.XOTCD == "MR"))

        PW03W00.PW03W-SEL-TYP-CD = "26";
      else
        if (PK4REC.OP1SPHDF == "Y"
         && (PK4REC.XOTCD == "DN"
         || PK4REC.XOTCD == "DW"
         || PK4REC.XOTCD == "DO"
         || PK4REC.XOTCD == "17"
         || PK4REC.XOTCD == "29"))

          PW03W00.PW03W-SEL-TYP-CD = "28";
        else
          if (PK4REC.OP1SPHDF == "Y"
           && (PK4REC.XOTCD == "DP"
           || PK4REC.XOTCD == "DV"
           || PK4REC.XOTCD == "DQ"))

            PW03W00.PW03W-SEL-TYP-CD = "30";
          else
            if (PK4REC.OP1SPHDF == "Y"
             && (PK4REC.XOTCD == "DL"
             || PK4REC.XOTCD == "11"
             || PK4REC.XOTCD == "30"
             || PK4REC.XOTCD == "31"
             || PK4REC.XOTCD == "34"
             || PK4REC.XOTCD == "44"
             || PK4REC.XOTCD == "48"
             || PK4REC.XOTCD == "60"
             || PK4REC.XOTCD == "63"
             || PK4REC.XOTCD == "66"
             || PK4REC.XOTCD == "AM"
             || PK4REC.XOTCD == "AZ"
             || PK4REC.XOTCD == "BS"
             || PK4REC.XOTCD == "BX"
             || PK4REC.XOTCD == "BZ"
             || PK4REC.XOTCD == "QX"
             || PK4REC.XOTCD == "RA"))

              PW03W00.PW03W-SEL-TYP-CD = "32";
            else
              if (PK4REC.OP1SPHDF == "Y"
               && (PK4REC.XOTCD == "DM"))

                PW03W00.PW03W-SEL-TYP-CD = "34";
              else
                if (PK4REC.OP1SPHDF == "Y"
                 && (PK4REC.XOTCD == "FE"
                 || PK4REC.XOTCD == "FJ"
                 || PK4REC.XOTCD == "FU"
                 || PK4REC.XOTCD == "HK"
                 || PK4REC.XOTCD == "LM"
                 || PK4REC.XOTCD == "LL"
                 || PK4REC.XOTCD == "LK"
                 || PK4REC.XOTCD == "LJ"
                 || PK4REC.XOTCD == "LI"
                 || PK4REC.XOTCD == "LH"
                 || PK4REC.XOTCD == "LG"
                 || PK4REC.XOTCD == "LF"
                 || PK4REC.XOTCD == "II"
                 || PK4REC.XOTCD == "HX"
                 || PK4REC.XOTCD == "HF"
                 || PK4REC.XOTCD == "EC"))

                  PW03W00.PW03W-SEL-TYP-CD = "36";
                else
                  if (PK4REC.OP1SPHDF == "Y"
                   && (PK4REC.XOTCD == "JF"
                   || PK4REC.XOTCD == "JG"
                   || PK4REC.XOTCD == "JH"
                   || PK4REC.XOTCD == "JI"
                   || PK4REC.XOTCD == "JJ"
                   || PK4REC.XOTCD == "JK"
                   || PK4REC.XOTCD == "KF"
                   || PK4REC.XOTCD == "KG"
                   || PK4REC.XOTCD == "KH"
                   || PK4REC.XOTCD == "KI"
                   || PK4REC.XOTCD == "KJ"
                   || PK4REC.XOTCD == "KK"
                   || PK4REC.XOTCD == "IC"
                   || PK4REC.XOTCD == "IB"
                   || PK4REC.XOTCD == "QM"))

                    PW03W00.PW03W-SEL-TYP-CD = "38";
                  else
                    if (PK4REC.OP1SPHDF == "Y"
                     && (PK4REC.XOTCD == "85"
                     || PK4REC.XOTCD == "RC"
                     || PK4REC.XOTCD == "BB"))

                      PW03W00.PW03W-SEL-TYP-CD = "40";
                    else
                      if (PK4REC.OP1SPHDF == "Y"
                       && (PK4REC.XOTCD == "IE"
                       || PK4REC.XOTCD == "ID"
                       || PK4REC.XOTCD == "QN"))

                        PW03W00.PW03W-SEL-TYP-CD = "42";
                      else
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  if (PK4REC.OP1SPHDF == "N"
   && (PK4REC.XOTCD == "DA"
   || PK4REC.XOTCD == "DB"
   || PK4REC.XOTCD == "DD"
   || PK4REC.XOTCD == "DF"
   || PK4REC.XOTCD == "01"
   || PK4REC.XOTCD == "02"
   || PK4REC.XOTCD == "03"
   || PK4REC.XOTCD == "04"
   || PK4REC.XOTCD == "13"
   || PK4REC.XOTCD == "14"
   || PK4REC.XOTCD == "16"
   || PK4REC.XOTCD == "80"
   || PK4REC.XOTCD == "81"
   || PK4REC.XOTCD == "84"
   || PK4REC.XOTCD == "RP"))

    PW03W00.PW03W-SEL-TYP-CD = "23";
  else
    if (PK4REC.OP1SPHDF == "N"
     && (PK4REC.XOTCD == "DC"
     || PK4REC.XOBCD == "DE"
     || PK4REC.XOBCD == "DG"
     || PK4REC.XOBCD == "DI"))

      PW03W00.PW03W-SEL-TYP-CD = "25";
    else
      if (PK4REC.OP1SPHDF == "N"
       && (PK4REC.XOTCD == "FA"
       || PK4REC.XOTCD == "FB"
       || PK4REC.XOTCD == "FC"
       || PK4REC.XOTCD == "FD"
       || PK4REC.XOTCD == "FF"
       || PK4REC.XOTCD == "FG"
       || PK4REC.XOTCD == "FH"
       || PK4REC.XOTCD == "FI"
       || PK4REC.XOTCD == "HG"
       || PK4REC.XOTCD == "HH"
       || PK4REC.XOTCD == "HI"
       || PK4REC.XOTCD == "HJ"
       || PK4REC.XOTCD == "FQ"
       || PK4REC.XOTCD == "FR"
       || PK4REC.XOTCD == "FS"
       || PK4REC.XOTCD == "FT"
       || PK4REC.XOTCD == "ED"
       || PK4REC.XOTCD == "EF"
       || PK4REC.XOTCD == "EG"
       || PK4REC.XOTCD == "EK"
       || PK4REC.XOTCD == "HB"
       || PK4REC.XOTCD == "HC"
       || PK4REC.XOTCD == "HD"
       || PK4REC.XOTCD == "HE"
       || PK4REC.XOTCD == "HT"
       || PK4REC.XOTCD == "HU"
       || PK4REC.XOTCD == "HV"
       || PK4REC.XOTCD == "IH"
       || PK4REC.XOTCD == "IG"
       || PK4REC.XOTCD == "IF"
       || PK4REC.XOTCD == "HW"
       || PK4REC.XOTCD == "MR"))

        PW03W00.PW03W-SEL-TYP-CD = "27";
      else
        if (PK4REC.OP1SPHDF == "N"
         && (PK4REC.XOTCD == "DN"
         || PK4REC.XOTCD == "DW"
         || PK4REC.XOTCD == "DO"
         || PK4REC.XOTCD == "17"
         || PK4REC.XOTCD == "29"))

          PW03W00.PW03W-SEL-TYP-CD = "29";
        else
          if (PK4REC.OP1SPHDF == "N"
           && (PK4REC.XOTCD == "DP"
           || PK4REC.XOTCD == "DV"
           || PK4REC.XOTCD == "DQ"))

            PW03W00.PW03W-SEL-TYP-CD = "31";
          else
            if (PK4REC.OP1SPHDF == "N"
             && (PK4REC.XOTCD == "DL"
             || PK4REC.XOTCD == "11"
             || PK4REC.XOTCD == "30"
             || PK4REC.XOTCD == "31"
             || PK4REC.XOTCD == "34"
             || PK4REC.XOTCD == "44"
             || PK4REC.XOTCD == "48"
             || PK4REC.XOTCD == "60"
             || PK4REC.XOTCD == "63"
             || PK4REC.XOTCD == "66"
             || PK4REC.XOTCD == "AM"
             || PK4REC.XOTCD == "AZ"
             || PK4REC.XOTCD == "BS"
             || PK4REC.XOTCD == "BX"
             || PK4REC.XOTCD == "BZ"
             || PK4REC.XOTCD == "QX"
             || PK4REC.XOTCD == "RA"))

              PW03W00.PW03W-SEL-TYP-CD = "33";
            else
              if (PK4REC.OP1SPHDF == "N"
               && (PK4REC.XOTCD == "DM"))

                PW03W00.PW03W-SEL-TYP-CD = "35";
              else
                if (PK4REC.OP1SPHDF == "N"
                 && (PK4REC.XOTCD == "FE"
                 || PK4REC.XOTCD == "FJ"
                 || PK4REC.XOTCD == "FU"
                 || PK4REC.XOTCD == "HK"
                 || PK4REC.XOTCD == "LM"
                 || PK4REC.XOTCD == "LL"
                 || PK4REC.XOTCD == "LK"
                 || PK4REC.XOTCD == "LJ"
                 || PK4REC.XOTCD == "LI"
                 || PK4REC.XOTCD == "LH"
                 || PK4REC.XOTCD == "LG"
                 || PK4REC.XOTCD == "LF"
                 || PK4REC.XOTCD == "II"
                 || PK4REC.XOTCD == "HX"
                 || PK4REC.XOTCD == "HF"
                 || PK4REC.XOTCD == "EC"))

                  PW03W00.PW03W-SEL-TYP-CD = "37";
                else
                  if (PK4REC.OP1SPHDF == "N"
                   && (PK4REC.XOTCD == "JF"
                   || PK4REC.XOTCD == "JG"
                   || PK4REC.XOTCD == "JH"
                   || PK4REC.XOTCD == "JI"
                   || PK4REC.XOTCD == "JJ"
                   || PK4REC.XOTCD == "JK"
                   || PK4REC.XOTCD == "KF"
                   || PK4REC.XOTCD == "KG"
                   || PK4REC.XOTCD == "KH"
                   || PK4REC.XOTCD == "KI"
                   || PK4REC.XOTCD == "KJ"
                   || PK4REC.XOTCD == "KK"
                   || PK4REC.XOTCD == "IC"
                   || PK4REC.XOTCD == "IB"
                   || PK4REC.XOTCD == "QM"))

                    PW03W00.PW03W-SEL-TYP-CD = "39";
                  else
                    if (PK4REC.OP1SPHDF == "N"
                     && (PK4REC.XOTCD == "85"
                     || PK4REC.XOTCD == "RC"
                     || PK4REC.XOTCD == "BB"))

                      PW03W00.PW03W-SEL-TYP-CD = "41";
                    else
                      if (PK4REC.OP1SPHDF == "N"
                       && (PK4REC.XOTCD == "IE"
                       || PK4REC.XOTCD == "ID"
                       || PK4REC.XOTCD == "QN"))

                        PW03W00.PW03W-SEL-TYP-CD = "43";
                      else
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end PW03S-FRMT-SEL-IND

// insert - DPICK.VORHLD01
Function PW03S-INSERT-ORHLD()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("A ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = "*";
      PW03W00.PW03W-ORD-HLD-SW = "Y";

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-INSERT-ORHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-INSERT-ORHLD

// insert - DPICK.VSELOR01
Function PW03S-INSERT-SELOR()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("A ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = "*"; /* processed*/
      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      PW03W00.XXXMSGNO = 44; /* Warning msg*/
      PW03W00.XXXMODID = "   "; /* module id*/
      PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = " "; /* clear*/

      return;

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-INSERT-SELOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-INSERT-SELOR

// open cursor - DPICK.VPOOLH01
Function PW03S-OPEN-POOLH()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from Pool Header table.*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* -Clear row storage area*/

  PK4REC.XWHCD = PKWREC.XWHCD; /* -Key*/
  PK4REC.XDVCD = PKWREC.XDVCD; /* -Division code*/
  PK4REC.XBCCD = PKWREC.XBCCD; /* -Brand code*/
  PK4REC.OP1DSBDT = PWKREC.OP1DSBDT[PW03W-DNSB-IDX];
  PK4REC.TF1CARCD = PWKREC.TF1CARCD[PW03W-DNSB-IDX];
  PK4REC.PK4ORHLD = "*"; /* -Order hold*/
  PK4REC.PK4CUHLD = "*"; /* -Customer hold*/
  PK4REC.OP1SPHDF = "*"; /* -Special handle*/
  PK4REC.XGPCD = "*"; /* -general product code*/

  if (PKWREC.PKWSELSW == "PK") /* ---- picking ----*/
    if (PW03M002.PW03M-SEL-IND == "S") /* -Select only "selected" orders*/
      PK4REC.PK4SLIND = "S";
    else
      if (PW03M002.PW03M-SEL-IND == "N") /* -Select only "not selected"*/
        PK4REC.PK4SLIND = " ";
      else /* Select all*/
        PK4REC.PK4SLIND = "*";
      end
    end
  else /* ----  pick planning -----*/
    if (PW03M001.PW03M-SEL-IND == "S") /* -Select only "selected" orders*/
      PK4REC.PK4SLIND = "P";
    else
      if (PW03M001.PW03M-SEL-IND == "N") /* -Select only "not selected"*/
        PK4REC.PK4SLIND = " ";
      else /* Select all*/
        PK4REC.PK4SLIND = "*";
      end
    end
  end

  try
    call "IO1720" ("S7", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, go back to previous routine.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-OPEN-POOLH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-OPEN-POOLH

// purge any temporary storage
Function PW03S-P-TEMP-STOR()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW03W01 empty; /* M001 display storage*/

  PW03W00.PW03W-STOR-UPD-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW03W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW03W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-P-TEMP-STOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-P-TEMP-STOR

// read temporary storage page
Function PW03S-R-TEMP-STOR()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW03W01.XXXTSLEN = PW03W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW03W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW03W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-R-TEMP-STOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-R-TEMP-STOR

// sELECT UNIQUE - DPICK.VCAHLD01
Function PW03S-SELECT-CAHLD()
   /* ------------------------------------------------------------*/
   /* Select 'S ' - DPICK.VCAHLD01*/
   /* ------------------------------------------------------------*/

  set PWFREC empty; /* -Row storage area*/

  PWFREC.XWHCD = PKWREC.XWHCD; /* -Warehouse code*/
  PWFREC.TF1CARCD = PK4REC.TF1CARCD; /* -Carrier code*/
  PWFREC.XHRCD = "*"; /* -hold reason code*/

  try
    call "IO3190" ("S ", SQLCA, PWFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-SELECT-VCAHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCAHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWFREC.PWFKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-SELECT-CAHLD

// sELECT 'S ' - DPICK.VCUHLD01
Function PW03S-SELECT-CUHLD()
   /* ------------------------------------------------------------*/
   /* Select unique vcuhld01*/
   /* ------------------------------------------------------------*/

  set PK9REC empty; /* Row storage area*/

  PK9REC.XWHCD = PKWREC.XWHCD; /* Warehouse code*/
  PK9REC.KUCCOID = PK4REC.KUCCOID;
  PK9REC.KUMSTRID = PK4REC.KUMSTRID;
  PK9REC.XNXCD = PK4REC.XNXCD;
  PK9REC.XHRCD = "*";

  try
    call "IO1790" ("S ", SQLCA, PK9REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-SELECT-CUHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK9REC.PK9KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-SELECT-CUHLD

// sELECT - DPICK.VORHLD01
Function PW03S-SELECT-ORHLD()
   /* ------------------------------------------------------------*/
   /* Select 'S ' - Dpick.Vorhld01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("S ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-SELECT-ORHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-SELECT-ORHLD

// select unique Dpick.Vpoolh01
Function PW03S-SELECT-POOLH()
   /* ------------------------------------------------------------*/
   /* Select unique for Dpick.Vpoolh01*/
   /* ------------------------------------------------------------*/

  set PK4REC empty; /* Clear row storage area*/

   /* ----- Warehouse, Cust ord num, Nike ord num ----------------*/
  PK4REC.XWHCD = PW03W01.XWHCD;
  PK4REC.PK1CUOID = PW03W01.PW03W-ORD-STKTF-ID[PW03W-MAP-IDX];
  PK4REC.PK1NORID = PW03W01.PW03W-NIKE-ORD-ID[PW03W-MAP-IDX];

  try
    call "IO1720" ("S ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, exit.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-SELECT-POOLH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-SELECT-POOLH

// select unique - DPICK.VSELOR01
Function PW03S-SELECT-SELOR()
   /* ------------------------------------------------------------*/
   /* Select unique from selected order table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1740" ("S ", SQLCA, PKHREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /*  */
   /* SQLCODE 100 -  acceptable because the order has been sel'd*/
   /* and needs to be added to table.*/
   /* SQLCODE   0 -  the order is already in the table, EZEMNO*/
   /* (044) "rcd to be added exists" is displayed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-SELECT-SELOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSELOR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKHREC.PKHKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-SELECT-SELOR

// update temporary storage page
Function PW03S-U-TEMP-STOR()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW03W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW03W00.XXXMODID = "   "; /* Module identification*/
  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-U-TEMP-STOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-U-TEMP-STOR

// update - DPICK.VORHLD01
Function PW03S-UPDATE-ORHLD()
   /* ------------------------------------------------------------*/
   /* Insert the row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1770" ("U ", SQLCA, PKBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW03W01.PW03W-ACTION[PW03W-MAP-IDX] = "*"; /* processed*/
      PW03W00.PW03W-ORD-HLD-SW = "Y";

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else


    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-UPDATE-ORHLD";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHLD01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKBREC.PKBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-UPDATE-ORHLD

// update Dpick.Vpoolh01
Function PW03S-UPDATE-POOLH()
   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1720" ("U ", SQLCA, PK4REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW03W00.PW03W-REQST-DAT-SW = "Y"; /* Request data switch*/

      PW03W00.XXXMODID = "   "; /* Module identification*/
      PW03W00.XXXMSGNO = 105; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW03W00.XXXMODID = "   "; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW03S-UPDATE-POOLH";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW03W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOOLH01"; /* Table view name*/
  TA1REC.TA1TBLKE = PK4REC.PK4KEY; /* Table key*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW03S-UPDATE-POOLH

//*** RECORD=PW03W00 ****
// Application Working Storage
// ***********************
Record PW03W00 type basicRecord
  5 PW03W-REQST-DAT-SW PW03W-REQST-DAT-SW ; 
  5 PW03W-STOR-UPD-SW PW03W-STOR-UPD-SW ; 
  5 PW03W-BD-FSTPTH-SW PW03W-BD-FSTPTH-SW ; 
  5 PW03W-MAP-DIS-SW PW03W-MAP-DIS-SW ; 
  5 PW03W-UPD-OK-SW PW03W-UPD-OK-SW ; 
  5 PW03W-MORE-DNSB-SW PW03W-MORE-DNSB-SW ; 
  5 PW03W-FRMT-SCRN-SW PW03W-FRMT-SCRN-SW ; 
  5 PW03W-SCRN-MDFY-SW PW03W-SCRN-MDFY-SW ; 
  5 PW03W-PROCESS-SW PW03W-PROCESS-SW ; 
  5 PW03W-ORD-HLD-SW PW03W-ORD-HLD-SW ; 
  5 PW03W-POOLH-CSR-SW PW03W-POOLH-CSR-SW ; 
  5 PW03W-SELOR-CSR-SW PW03W-SELOR-CSR-SW ; 
  5 PW03W-WORK-CSR-SW PW03W-WORK-CSR-SW ; 
  5 * char(1) ; 
  5 PW03W-MAP-IDX PW03W-MAP-IDX ; 
  5 PW03W-ORD-INQ-IDX PW03W-ORD-INQ-IDX ; 
  5 PW03W-DNSB-IDX PW03W-DNSB-IDX ; 
  5 * char(1) ; 
  5 PW03W-CURRENT-DT PW03W-CURRENT-DT ; 
  5 PW03W-WRK-DT PW03W-WRK-DT ; 
    10 PW03W-WRK-CC PW03W-WRK-CC ; 
    10 PW03W-WRK-YY PW03W-WRK-YY ; 
    10 PW03W-WRK-MM PW03W-WRK-MM ; 
    10 PW03W-WRK-DD PW03W-WRK-DD ; 
  5 PW03W-PREV-DNSB-DT PW03W-PREV-DNSB-DT ; 
  5 * char(1) ; 
  5 PW03W-PREV-TF1CARCD PW03W-PREV-TF1CARCD ; 
  5 PW03W-RUN-MODE PW03W-RUN-MODE ; 
  5 PW03W-SEL-IND PW03W-SEL-IND ; 
  5 PW03W-ORD-GRP-SW PW03W-ORD-GRP-SW ; 
  5 PW03W-ORD-GRP-SV PW03W-ORD-GRP-SV ; 
  5 PW03W-SEL-TYP-CD PW03W-SEL-TYP-CD ; 
  5 XDVCD XDVCD ; 
  5 XDVDESC XDVDESC ; 
  5 XBCCD XBCCD ; 
  5 XBCABRV XBCABRV ; 
  5 XWHCD XWHCD ; 
  5 XWHABRV XWHABRV ; 
  5 * char(1) ; 
  5 XXXTSLEN XXXTSLEN ; 
  5 XXXTSPAG XXXTSPAG ; 
  5 XXXMODID XXXMODID ; 
  5 XXXMSGNO XXXMSGNO ; 
  5 TA5TSQIX TA5TSQIX ; 
end // end PW03W00

//*** RECORD=PW03W01 ****
// Map 001 Display Storage
// ***********************
Record PW03W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(652) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 XDVCD XDVCD ; 
    10 XDVDESC XDVDESC ; 
    10 XBCCD XBCCD ; 
    10 XBCABRV XBCABRV ; 
    10 PW03W-SEL-IND PW03W-SEL-IND ; 
    10 PW03W-DNSB-DT PW03W-DNSB-DT ; 
      15 PW03W-DNSB-CC PW03W-DNSB-CC ; 
      15 PW03W-DNSB-YY PW03W-DNSB-YY ; 
      15 PW03W-DNSB-MM PW03W-DNSB-MM ; 
      15 PW03W-DNSB-DD PW03W-DNSB-DD ; 
    10 TF1CARCD TF1CARCD ; 
    10 PW03W-MAP PW03W-MAP [12] ; 
      15 PW03W-ACTION PW03W-ACTION ; 
      15 PW03W-ORD-STKTF-ID PW03W-ORD-STKTF-ID ; 
      15 PW03W-NIKE-ORD-ID PW03W-NIKE-ORD-ID ; 
      15 PW03W-FC-QTY PW03W-FC-QTY ; 
      15 PW03W-RP-QTY PW03W-RP-QTY ; 
      15 PW03W-TOT-QTY PW03W-TOT-QTY ; 
      15 PW03W-SP-HNDL-FL PW03W-SP-HNDL-FL ; 
      15 PW03W-SELECT-FL PW03W-SELECT-FL ; 
      15 PW03W-HOLD-CD PW03W-HOLD-CD ; 
      15 PW03W-REL-MM PW03W-REL-MM ; 
      15 PW03W-REL-DD PW03W-REL-DD ; 
      15 PW03W-REL-YY PW03W-REL-YY ; 
end // end PW03W01

// Action code
DataItem PW03W-ACTION char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bad fast path switch
DataItem PW03W-BD-FSTPTH-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current date (CCYYMMDD)
DataItem PW03W-CURRENT-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB century
DataItem PW03W-DNSB-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB day
DataItem PW03W-DNSB-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB date
DataItem PW03W-DNSB-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB date index (pwkrec)
DataItem PW03W-DNSB-IDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB month
DataItem PW03W-DNSB-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DNSB year
DataItem PW03W-DNSB-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Full case qty
DataItem PW03W-FC-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format screen switch
DataItem PW03W-FRMT-SCRN-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold code
DataItem PW03W-HOLD-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW03W-MAP char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map display switch
DataItem PW03W-MAP-DIS-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map line index
DataItem PW03W-MAP-IDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Passed DNSB dates to process
DataItem PW03W-MORE-DNSB-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK-NIKE-ORD-ID
DataItem PW03W-NIKE-ORD-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save order type
DataItem PW03W-ORD-GRP-SV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order type ('FT','AP',' ')
DataItem PW03W-ORD-GRP-SW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order on hold switch
DataItem PW03W-ORD-HLD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order inquiry index
DataItem PW03W-ORD-INQ-IDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK-ORD-STKTF-ID
DataItem PW03W-ORD-STKTF-ID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pool header cursor (PK4REC)
DataItem PW03W-POOLH-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous DNSB date (CCYYMMDD)
DataItem PW03W-PREV-DNSB-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tf-carr-cd
DataItem PW03W-PREV-TF1CARCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Process order switch
DataItem PW03W-PROCESS-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hold release day
DataItem PW03W-REL-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold release month
DataItem PW03W-REL-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold release year
DataItem PW03W-REL-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem PW03W-REQST-DAT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Repack qty
DataItem PW03W-RP-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK-RUN-MODE
DataItem PW03W-RUN-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen modified switch
DataItem PW03W-SCRN-MDFY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sel'd, N-sel'd, & All indicate
DataItem PW03W-SEL-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection type code
DataItem PW03W-SEL-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem PW03W-SELECT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selected order cursor (PKHREC)
DataItem PW03W-SELOR-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Special handle flag
DataItem PW03W-SP-HNDL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage update switch
DataItem PW03W-STOR-UPD-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total qty
DataItem PW03W-TOT-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update successful switch
DataItem PW03W-UPD-OK-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work cursor switch
DataItem PW03W-WORK-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Century work area
DataItem PW03W-WRK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day work area
DataItem PW03W-WRK-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date work area (CCYYMMDD)
DataItem PW03W-WRK-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month work area
DataItem PW03W-WRK-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year work area
DataItem PW03W-WRK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

