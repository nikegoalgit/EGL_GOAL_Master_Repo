package pw0u;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import pw.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=PW0U ****
//   This online CSP application  provides the users with the
// ability to confirm shiping spurs and carrier availability to
// carriers.
//   This program allows changes to the header, except for
// number of spurs and reject spurs which must remain the same
// to match the movers system, all fields in the header default
// default from DPICK.VWVCTL01.
//   The user can add, change, or delete a line on the detail
// rows which represent a row from DPICK.VCARRA01, by putting
// an 'A', 'C' or 'D' on the action column. Spur number,carrier
// code, carrier name, trailer number, trailer type, schedule
// from and to all default from the DPICK.VCARRA01 but may be
// changed. The fields destination code range, rush flag, pack
// and hold flag and date are all optional and must pass
// certain edits as do all modifiable fields.
//   This application uses the standard PF keys, for help, exit
// and scrolling and PA2 to reset the screen, also the user
// can transfer out of this application by entering fast path
// information, and updates will not be allowed while scrolling
// 
// -------    --------  ------   ------------------------------
// CONTROL      DATE     NAME    DESCRIPTION OF CHANGE
// -------    --------  ------   ------------------------------
// NEW        02/01/91  BGOFF    New Application
//            05/03/91  jcarey   Changed runmode for sameday.
//                               Table vwvct01 uses ' ' and
//                               vcarra01 is 's'.
// pkxxxx     05/14/91  bgoff    Changed P&H validation to
//                               validate any day instead of
//                               just a 6 day week.
// pkxxxx     05/15/91  bgoff    Changed PKDNXSCN to PKDNSSCH
// pkxxxx     07/30/91  shende   fixed bug with 'total sched
//                               for day' edit.  Was allowing
//                               sched nbr to be < 'from & to'
//                               sched range in detail lines.
// pkxxxx     08/01/91  shende   Added condition where 'total
//                               sched for day' cannot be
//                               greater than 16.
// pkxxxx     05/12/92  sjohns   allow same carrier, diff trlr,
//                               same sched on diff spur.
// pkxxxx     05/14/92  sjohns   fix above to work
// pkxxxx     05/18/92  mwalto   Do not allow whse '04' to
//                               enter spur nbrs 8027, 8028 &
//                               8029. They are pack list spurs
// pkxxxx     06/12/92  shende   Do not allow whse 04 to enter
//                               spur nbrs < 8001 and > 8999.
// pkxxxx     09/04/92  smacmi   Added edit for same spur/carr/
//                               schedule.
// pk         09/24/92  gray     Added edit for spur and scheds
// pk0216     10/23/92  jcampb   change map to num (right just)
//                               for rush-sched-fr and thru
// PK410      07/08/93  OVAZQU   Edit "total schedules" against
//                               all pages, not only the
//                               current page.
// sr404      07/28/93  RCREAM   Map changes to display all
//                               blue map fields as pink.
// Canada     10/25/95  PSTROE   Pick-up new version of XPPK003
//            06/19/96  DGERLT   Allow 50 schedules for the
//                               normal run.
//            07/29/96  OENFIE   Allow 30 schedules for whsecds
//                               51 (apparel), 04 (ftwr), 07
//                               (Wilsonville).  Also changed
//                               edit msg # 503 to say cannot
//                               be > 30.
// dcsplit    09/23/96  OENFIE   Modifications to handle carry-
//                               over schedules.
// dcsplit    12/10/96  esmit2   map edit for c/o sched field -
// dcsplit    03/12/97  PSHARM   c/o sched edit pw0u550
// Shipping   05/20/97  dgerlt   Increased the number of spurs
//  expansion                    from 100 to 200 for whse 51.
// Basics     06/04/97  PANDER   Added Basics option.
// ------------------------------------------------------------
// ------------------------------------------------------------
// Y2kPROJ    02/11/98  NGANGO   Changed Map PW0UM001 to remove
//                               leading zero suppression of yr
//                               field and also Prcess PW0U530,
//                               PW0U620, and PW0U630.
// ------------------------------------------------------------
// Kin 58413  Sgopal  Packlist spurs 8027, 8028, 8029 are
//  changed to
//                                Shipping Spur
// *********************
Program PW0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PKDREC PKDREC; // record
  PKWREC PKWREC; // record
  PW0UW00 PW0UW00; // record
  PW0UW01 PW0UW01; // record
  PW0UW02 PW0UW02; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA4REC TA4REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TF1REC TF1REC; // record
  TF2REC TF2REC; // record
  VCARRA02 VCARRA02; // record
  VWVCTL02 VWVCTL02; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XTRTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use PW0UM.PW0UM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* -------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* -------------------------------------------------------*/
    set PW0UM001 initial; /* m001 input/output*/
    set PW0UW00 empty; /* working storage*/
    set PW0UW01 empty; /* display storage/hdr*/
    set PW0UW02 empty; /* display storage/detail*/
    set SQLCA empty; /* sql communitcation area*/
    set TAEREC empty; /* error diagnosis information*/
    set TA1REC empty; /* error diagnosis parameters*/
    set TA5REC empty; /* temporary storage parameters*/
    set TA4REC empty; /* working day parameters*/
    set XX0XW01 empty; /* date/time subroutine parameters*/

    PW0UW00.PW0UWFFL = "Y"; /* first time thru flag*/
    PW0UW00.PW0UWSWF = "N"; /* Format the map switch*/
    PW0UW00.PW0UWSWR = "N"; /* request for data switch*/
    PW0UW00.PW0UW-FIRST-DEL-FL = "Y"; /* delete carryover switch*/

    set PW0UM001.PWDNBRSS skip;
    set PW0UM001.PWDDFPHS skip;
    set PW0UM001.PWDRJTSS skip;
    set PW0UM001.PWDNBRSH skip;
    set PW0UM001.PWDCOVSC skip;
    set PW0UM001.PWDSCHFR skip;
    set PW0UM001.PWDSCHTH skip;
    set PW0UM001.PWDMIPSH skip;
    set PW0UM001.PKDNSSCH skip;
    set PW0UM001.PWDSMDYW skip;
    set PW0UM001.PWDCOVSC skip;
    set PW0UM001.PW0UMSAM cursor;

     /* ---------------------------------------------------*/
     /* Validate warehouse.*/
     /* ---------------------------------------------------*/

    goto PW0U000; /* validate warehouse*/

    PW0U000: PW0U000();
    goto PW0U001; /* converse main process*/
    PW0U001: PW0U001();
    goto PW0U001; /* Converse the main process*/
  end // end main
end // end PW0U

// Validate warehouse
Function PW0U000()
   /* ------------------------------------------------------------*/
   /* execute xppk003 to validate warehouse.*/
   /* if invalid warehouse this routine will return them to where*/
   /* they came from.*/
   /* ------------------------------------------------------------*/

  XPPK003();

  PW0UM001.XWHCD = PKWREC.XWHCD; /* warehouse*/
  PW0UW01.XWHCD = PKWREC.XWHCD; /* warehouse*/
  PW0UM001.XWHABRV = PKWREC.XWHABRV; /* warehouse name*/
  PW0UW01.XWHABRV = PKWREC.XWHABRV; /* warehouse name*/

   /* ------------------------------------------------------------*/
   /* get minimum pack and hold date for edits.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* system date*/

  set TA4REC empty; /* clear record*/
  PW0UW00.PW0UWPCC = XX0XW01.XX0XW19; /* cen*/
  PW0UW00.PW0UWPYY = XX0XW01.XX0XWYY; /* year*/
  PW0UW00.PW0UWPMM = XX0XW01.XX0XWMM; /* month*/
  PW0UW00.PW0UWPDD = XX0XW01.XX0XWDD; /* day*/
  TA4REC.TA2GRGGN = PW0UW00.PW0UWMPH; /* date*/
  TA4REC.TA2DTOPT = "GREGGREG"; /* option*/
  TA4REC.TA2GRTYP = "G"; /* type*/
  TA4REC.TA2DYAOD = 2; /* days to add*/

  call "TA0040" (TA4REC) {isNoRefresh = yes, isExternal = yes}; /* call subroutine*/

  if (TA4REC.TA2RTNCD != 0) /* if not valid date*/

    TA1REC.TA1PGMNO = "000"; /* module id*/
    converseLib.validationFailed(29); /* unexpected error has occured*/
    PW0UW00.PW0UWSWR = "N"; /* request for data switch*/

  else

    PW0UW00.PW0UWMPH = TA4REC.TA2GRGGN; /* date*/

  end

end // end PW0U000

// Main process to display a map
Function PW0U001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW0U100(); /* Obtain the data to display*/

  PW0U200(); /* Format and display the map*/

  PW0U300(); /* Check attention identifier*/

  PW0U400(); /* Reset fields to normal intensity*/

  PW0U500(); /* Verify the data that was entered*/

  PW0U600(); /* Process valid input request*/

end // end PW0U001

// Obtain the data to display
Function PW0U100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.PW0UWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW0UW00.XXXTSLEN = 490;

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.PW0UWMSG == 0) /* No message to display*/
    PW0UW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW0U110(); /* Purge any temporary storage*/

  PW0UW01.XWHCD = PW0UM001.XWHCD; /* Warehouse code*/
  PW0UW01.XWHABRV = PW0UM001.XWHABRV; /* warehouse name*/
  PW0UW01.PW0UMSAM = PW0UM001.PW0UMSAM; /* sameday*/

   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  PW0U120(); /* Select from DPICK.VWVCTL02*/
  PW0U130(); /* Select from DPICK.VPKCTL01*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PW0U140(); /* Open cursor in DPICK.VCARRA02*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWIXM = 1; /* Display line index*/
  PW0UW00.PW0UWSC1 = "N"; /* End of cursor switch*/

  while (PW0UW00.PW0UWSC1 == "N") /* Until end of cursor*/

    PW0U150(); /* Fetch row from DPICK.VCARRA02*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, select carrier name and save data.*/
    /* ------------------------------------------------------------*/

    if (PW0UW00.PW0UWSC1 == "N") /* Not end of cursor*/
      PW0U160(); /* Fetch from DPICK.VCARR001*/
      PW0U170(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (PW0UW00.PW0UWIXM > 10) /* Page is full*/

      PW0U180(); /* Add page to temporary storage*/

      PW0UW00.PW0UWIXM = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.PW0UWIXM > 1) /* Page was formatted*/
    PW0U180(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PW0U190(); /* Close cursor in DPICK.VCARRA02*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.TA5TSQIX == 0 /* No pages formatted*/
   && PW0UW00.PW0UWNHD == "N") /* and no header found*/

    TA1REC.TA1PGMNO = "100"; /* Module identification*/
    PW0UW00.PW0UWMSG = 8; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWSWR = "N"; /* Request for data switch*/
  PW0UW00.PW0UWSWF = "Y"; /* format the map switch*/

end // end PW0U100

// Purge temporary storage
Function PW0U110()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW0UW01 empty; /* M001 display storage/hdr*/
  set PW0UW02 empty; /* M001 display storage/dtl*/

  PW0UW00.PW0UWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW0UW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW0UW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "110"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U110

// Select from DPICK.VWVCTL02
Function PW0U120()
   /* ------------------------------------------------------------*/
   /* Select from DPICK.VWVCTL02.*/
   /* ------------------------------------------------------------*/

  set VWVCTL02 empty; /* Clear row storage area*/

  VWVCTL02.XWHCD = PW0UW01.XWHCD; /* Warehouse code*/
  VWVCTL02.PKURUNMD = " "; /* confirmation*/

  try
    call "VWVCTL02" ("S ", SQLCA, VWVCTL02) {isNoRefresh = yes, isExternal = yes};
  end /* Sel table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

        PW0UW00.PW0UWNHD = "Y"; /* header found*/
        PW0U121(); /* save header in display storage*/

      end

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        PW0UW00.PW0UWNHD = "N"; /* header not found*/

      end

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "120"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWVCTL02"; /* Table view name*/
  TA1REC.TA1TBLKE = VWVCTL02.VWVCTL02-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U120

// Save header in display storage
Function PW0U121()
   /* ------------------------------------------------------------*/
   /* save header in display storage.*/
   /* ------------------------------------------------------------*/

  PW0UW01.XWHCD = VWVCTL02.XWHCD; /* warehouse code*/
  PW0UW01.PWDNBRSS = VWVCTL02.PWDNBRSS; /* nbr ship spurs*/
  PW0UW01.PWDDFPHS = VWVCTL02.PWDDFPHS; /* default p & h spur*/
  PW0UW01.PWDRJTSS = VWVCTL02.PWDRJTSS; /* reject spurs*/
  PW0UW01.PWDNBRSH = VWVCTL02.PWDNBRSH; /* number of spurs*/
  PW0UW01.PWDSCHFR = VWVCTL02.PWDSCHFR; /* schedule from*/
  PW0UW01.PWDSCHTH = VWVCTL02.PWDSCHTH; /* schedule thru*/
  PW0UW01.PWDMIPSH = VWVCTL02.PWDMIPSH; /* minutes/schedule*/
  PW0UW01.PWDCOVSC = VWVCTL02.PWDCOVSC; /* carryover schedule*/
  PW0UW01.PKDNSSCH = PKDREC.PKDNSSCH; /* actual schedule #*/
  PW0UW01.PWDSMDYW = VWVCTL02.PWDSMDYW; /* same day schedule*/

end // end PW0U121

// Select from DPICK.VPKCTL01
Function PW0U130()
   /* ------------------------------------------------------------*/
   /* Select from DPICK.VPKCTL01.*/
   /* ------------------------------------------------------------*/

  set PKDREC empty; /* Clear row storage area*/

  PKDREC.XWHCD = PW0UW01.XWHCD; /* Warehouse code*/

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      PW0UW01.PKDNSSCH = PKDREC.PKDNSSCH;
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "130"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U130

// Open cursor in DPICK.VCARRA01
Function PW0U140()
   /* ------------------------------------------------------------*/
   /* Open cursor in DPICK.VCARRA01.*/
   /* 09/18/96  oenfie - changed record from PWCREC to VCARRA02*/
   /* ------------------------------------------------------------*/

  set VCARRA02 empty; /* Clear row storage area*/

  VCARRA02.XWHCD = PW0UW01.XWHCD; /* Warehouse code*/
  if (PW0UM001.PW0UMSAM == "Y")
    VCARRA02.PKURUNMD = "S"; /* run mode = sameday*/
  else
    if (PW0UM001.PW0UMSAM == "B")
      VCARRA02.PKURUNMD = "B"; /* run mode = Basics*/
    else
      VCARRA02.PKURUNMD = VWVCTL02.PKURUNMD; /* run mode (' ' or 's')*/
    end
  end

  try
    call "VCARRA02" ("S1", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* Sel Table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "140"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCARRA02.VCARRA02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U140

// Fetch row in DPICK.VCARRA01
Function PW0U150()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from DPICK.VCARRA01.*/
   /* 09/18/96  OENFIE - changed references to PWCREC with VCARRA02*/
   /* - changed IO2180 to VCARRA02*/
   /* ------------------------------------------------------------*/

  try
    call "VCARRA02" ("N1", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW0UW00.PW0UWSC1 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "150"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCARRA02.VCARRA02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U150

// Select from DPICK.VCARR001
Function PW0U160()
   /* ------------------------------------------------------------*/
   /* Select from DPICK.VCARR001.*/
   /* ------------------------------------------------------------*/

  set TF1REC empty; /* Clear row storage area*/

  TF1REC.TF1CARCD = VCARRA02.TF1CARCD; /* carrier code*/

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      TF1REC.TF1ABRV = " NOT FOUND "; /* carrier name*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CARRIER NAME ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "160"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
  TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U160

// Save data in display storage
Function PW0U170()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  PW0UW02.PKVSSPNB[PW0UWIXM] = VCARRA02.PKVSSPNB; /* spur*/
  PW0UW02.TF1CARCD[PW0UWIXM] = TF1REC.TF1CARCD; /* carrier code*/
  PW0UW02.TF1ABRV[PW0UWIXM] = TF1REC.TF1ABRV; /* carrier name*/
  PW0UW02.PWCTLNBR[PW0UWIXM] = VCARRA02.PWCTLNBR; /* trailer nbr*/
  PW0UW02.XTRCD[PW0UWIXM] = VCARRA02.XTRCD; /* trailer type*/
  PW0UW02.PWCCAVFR[PW0UWIXM] = VCARRA02.PWCCAVFR; /* schedule fr*/
  PW0UW02.PWCCAVTR[PW0UWIXM] = VCARRA02.PWCCAVTR; /* schedule to*/
  PW0UW02.PWCDSTFR[PW0UWIXM] = VCARRA02.PWCDSTFR; /* dest from*/
  PW0UW02.PWCDSTTH[PW0UWIXM] = VCARRA02.PWCDSTTH; /* dest thr*/
  PW0UW02.PWCRSHFL[PW0UWIXM] = VCARRA02.PWCRSHFL; /* rush flag*/
  PW0UW02.PWCHLDFL[PW0UWIXM] = VCARRA02.PWCHLDFL; /* p & h flag*/
  PW0UW00.PW0UMDAT = VCARRA02.PWCPHDSB; /* split up p & h date*/
  PW0UW02.PW0UMPMM[PW0UWIXM] = PW0UW00.PW0UMPMM; /* p & h month*/
  PW0UW02.PW0UMPDD[PW0UWIXM] = PW0UW00.PW0UMPDD; /* p & h day*/
  PW0UW02.PW0UMPYY[PW0UWIXM] = PW0UW00.PW0UMPYY; /* p & h year*/
  PW0UW02.PWCCOVFT[PW0UWIXM] = VCARRA02.PWCCOVFT; /* carryover cubic*/

  PW0UW00.PW0UWIXM = PW0UW00.PW0UWIXM + 1; /* Increment line index*/

end // end PW0U170

// Add page to temporary storage
Function PW0U180()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0UW02.XXXTSLEN = PW0UW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW0UW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW0UW02 empty; /* M001 display storage*/

    PW0UW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "180"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U180

// Close cursor in DPICK.VCARRA01
Function PW0U190()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VCARRA02" ("C1", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "190"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U190

// Format and converse the map
Function PW0U200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW0UW00.PW0UWMSG = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.PW0UWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW0UW00.PW0UWSWF == "Y") /* Map must be formatted*/
      PW0U210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW0UM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW0UM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.PW0UWMSG != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW0UW00.PW0UWMSG != 0) /* Message to display*/

      if (PW0UW00.PW0UWMSG == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW0UW00.PW0UWMSG);
      end /* Message number*/
    else
      PW0UM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PW0UM001.XXXMODID = TA1REC.TA1PGMNO; /* Module identification*/

    set PW0UM001 alarm; /* Indicate sound alarm*/

  end

  converse PW0UM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNO = " "; /* Module identification*/
  PW0UW00.PW0UWMSG = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW0UM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW0UM001.CAITEM; /* Application data*/

end // end PW0U200

// Format the display data
Function PW0U210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW0UM001 initial; /* M001 input/output area*/

  PW0UW00.PW0UWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW0UW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW0UW00.XXXTSPAG > PW0UW00.TA5TSQIX) /* Desired greater highest*/
        PW0UW00.XXXTSPAG = PW0UW00.TA5TSQIX; /* Default to highest*/
      end

      PW0US02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW0UM001.XXXLITPG skip; /* "PAGE" literal*/
    PW0UM001.XXXTSPAG = PW0UW00.XXXTSPAG; /* Current page*/
    set PW0UM001.XXXLITOF skip; /* "OF" literal*/
    PW0UM001.TA5TSQIX = PW0UW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW0UM001.XWHCD = PW0UW01.XWHCD; /* whse code*/
  PW0UM001.XWHABRV = PW0UW01.XWHABRV; /* warehouse name*/
  PW0UM001.PW0UMSAM = PW0UW01.PW0UMSAM; /* sameday switch*/
  PW0UM001.PWDNBRSS = PW0UW01.PWDNBRSS; /* spur nbr*/
  PW0UM001.PWDDFPHS = PW0UW01.PWDDFPHS; /* default spur*/
  PW0UM001.PWDNBRSH = PW0UW01.PWDNBRSH; /* schedule*/
  PW0UM001.PWDRJTSS = PW0UW01.PWDRJTSS; /* reject spur*/
  PW0UM001.PWDSCHFR = PW0UW01.PWDSCHFR; /* schedule from*/
  PW0UM001.PWDSCHTH = PW0UW01.PWDSCHTH; /* schedule thru*/
  PW0UM001.PWDMIPSH = PW0UW01.PWDMIPSH; /* minutes/schedule*/
  PW0UM001.PWDSMDYW = PW0UW01.PWDSMDYW; /* same day schedule*/
  PW0UM001.PWDCOVSC = PW0UW01.PWDCOVSC; /* carryover schedule*/

  if (PW0UM001.PW0UMSAM == "Y" /* same day only*/
   || PW0UM001.PW0UMSAM == "B") /* Basics only*/
    set PW0UM001.PWDSMDYW initialAttributes; /* same day schedule*/
    set PW0UM001.PW0UMSCH initialAttributes;

    if (PW0UM001.XWHCD == "04" /* Memphis footwear*/
     || PW0UM001.XWHCD == "07" /* Wilsonville*/
     || PW0UM001.XWHCD == "51") /* Memphis Apparel*/
      set PW0UM001.PW0UMCOV initialAttributes;
      set PW0UM001.PWDCOVSC protect, noHighLight; /* carryover schedule*/
    else
      set PW0UM001.PW0UMCOV skip, invisible;
      set PW0UM001.PWDCOVSC skip, invisible;
    end

   /* SET PW0UM001.PW0UMCoV AUTOSKIP,DARK;*/
   /* sET PW0UM001.PWDCOVSC PROTECT,NOHILITE; /* carryover schedule*/
  else
    set PW0UM001.PWDSMDYW skip, invisible; /* same day schedule*/
    set PW0UM001.PW0UMSCH skip, invisible;

    if (PW0UM001.XWHCD == "04" /* Memphis footwear*/
     || PW0UM001.XWHCD == "07" /* Wilsonville*/
     || PW0UM001.XWHCD == "51") /* Memphis Apparel*/
      set PW0UM001.PW0UMCOV initialAttributes;
      set PW0UM001.PWDCOVSC initialAttributes; /* carryover schedule (unprotect)*/
    else
      set PW0UM001.PW0UMCOV skip, invisible;
      set PW0UM001.PWDCOVSC skip, invisible;
    end

  end

  PW0UW00.PW0UWIXM = 1; /* Initialize line index*/

  while (PW0UW00.PW0UWIXM <= 10 /* Until screen is full*/
   && PW0UW02.PKVSSPNB[PW0UWIXM] > 0) /* or end of data*/

    if (PW0UW00.PW0UWIXM == 1) /* First select field*/

      set PW0UM001.PW0UMACT[PW0UWIXM] cursor, normal; /* Position cursor*/
    else
      set PW0UM001.PW0UMACT[PW0UWIXM] normal; /* Unprotect*/

    end

    PW0UM001.PW0UMACT[PW0UWIXM] = PW0UW02.PW0UMACT[PW0UWIXM];
    PW0UM001.PKVSSPNB[PW0UWIXM] = PW0UW02.PKVSSPNB[PW0UWIXM];
    PW0UM001.TF1CARCD[PW0UWIXM] = PW0UW02.TF1CARCD[PW0UWIXM];
    PW0UM001.TF1ABRV[PW0UWIXM] = PW0UW02.TF1ABRV[PW0UWIXM];
    PW0UM001.PWCTLNBR[PW0UWIXM] = PW0UW02.PWCTLNBR[PW0UWIXM];
    PW0UM001.XTRCD[PW0UWIXM] = PW0UW02.XTRCD[PW0UWIXM];
    PW0UM001.PWCCAVFR[PW0UWIXM] = PW0UW02.PWCCAVFR[PW0UWIXM];
    PW0UM001.PWCCAVTR[PW0UWIXM] = PW0UW02.PWCCAVTR[PW0UWIXM];
    PW0UM001.PWCDSTFR[PW0UWIXM] = PW0UW02.PWCDSTFR[PW0UWIXM];
    PW0UM001.PWCDSTTH[PW0UWIXM] = PW0UW02.PWCDSTTH[PW0UWIXM];
    PW0UM001.PWCRSHFL[PW0UWIXM] = PW0UW02.PWCRSHFL[PW0UWIXM];
    PW0UM001.PWCHLDFL[PW0UWIXM] = PW0UW02.PWCHLDFL[PW0UWIXM];
    PW0UM001.PW0UMPMM[PW0UWIXM] = PW0UW02.PW0UMPMM[PW0UWIXM];
    PW0UM001.PW0UMPDD[PW0UWIXM] = PW0UW02.PW0UMPDD[PW0UWIXM];
    PW0UM001.PW0UMPYY[PW0UWIXM] = PW0UW02.PW0UMPYY[PW0UWIXM];
    PW0UM001.PWCCOVFT[PW0UWIXM] = PW0UW02.PWCCOVFT[PW0UWIXM];

    PW0UW00.PW0UWIXM = PW0UW00.PW0UWIXM + 1; /* Increment line index*/

  end

end // end PW0U210

// Check attention identifier
Function PW0U300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW0UW00.PW0UWSWR == "Y") /* Request for data*/
      set PW0UW01 empty; /* M001 display storage/hdr*/
      set PW0UW02 empty; /* M001 display storage/dtl*/
    end

    PW0UW00.PW0UWSWF = "Y"; /* Format the map switch*/
    PW0UW00.PW0UWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PW0U310(); /* insert Carr Avail if needed*/

      PW0U110(); /* Purge temporary storage*/

      XSPKS01(); /* Exit to another application*/

      set PW0UM001.CATOAP cursor, bold; /* Highlight*/

    else

      TA1REC.TA1PGMNO = "300"; /* Module identification*/
      converseLib.validationFailed(13); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW0UM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PW0V"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF3 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    PW0U310(); /* insert Carr Avail if needed*/

    PW0U110(); /* Purge temporary storage*/

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    TA1REC.TA1PGMNO = "300"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end PW0U300

// Insert Carr Avail if needed
Function PW0U310()
   /* ------------------------------------------------------------------*/
   /* This process is executed before exiting this application.*/
   /* If Normal Run and Carryover Schedules exist, OPEN a cursor*/
   /* that selects all 'Normal' carrier availability rows whose*/
   /* Fr/Thru Sched falls within the Carryover Schedules Range.*/
   /* Insert the 'Plan' carrier availability rows for each of these*/
   /* selected rows with Fr/Thru Sched set to 0's and CaOV FT3 set*/
   /* to 1.0.  All other fields will be the same as the Normal row*/
   /* ------------------------------------------------------------------*/
  if (PW0UW01.PW0UMSAM == "N" /* Normal run and*/
   && PW0UW01.PWDCOVSC > 0)   /* carryover schedules exist*/

    /* -----------------------------------------------------------------*/
    /* compute for the first and last carryover schedule number:*/
    /* first carryover sched = (total sched - carryover sched) + 1*/
    /* last carryover sched =  total sched*/
    /* -----------------------------------------------------------------*/
    PW0UW00.PW0UWFCO = (PW0UW01.PWDNBRSH - PW0UW01.PWDCOVSC) + 1;
    PW0UW00.PW0UWLCO = PW0UW01.PWDNBRSH; /* last carryover*/

    PW0U320(); /* select & open cursor*/

    if (sysVar.errorCode == "00000000" && SQLCA.VAGen_SQLCODE == 0)
      PW0UW00.PW0UWSC1 = "N";

      while (PW0UW00.PW0UWSC1 == "N") /* until end of file*/
        PW0U330(); /* fetch cursor*/

        if (PW0UW00.PW0UWSC1 == "N") /* not end of file found*/
          PW0U340(); /* insert carr avail for runmode 'P'*/
        end

      end
    end

    if (sysVar.errorCode == "00000000" && (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100))
      PW0U350(); /* close cursor*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

end // end PW0U310

// Sel/Open DPICK.VCARRA02 Csr 2
Function PW0U320()
   /* ------------------------------------------------------------*/
   /* Open cursor in DPICK.VCARRA02.*/
   /* ------------------------------------------------------------*/

  set VCARRA02 empty; /* Clear row storage area*/

  VCARRA02.XWHCD = PW0UW01.XWHCD; /* Warehouse code*/
  VCARRA02.PKURUNMD = " "; /* run mode = normal*/
  VCARRA02.PWCCAVFR = PW0UW00.PW0UWFCO; /* carr avail fr*/
  VCARRA02.PWCCAVTR = PW0UW00.PW0UWLCO; /* carr avail trhu*/

  try
    call "PK1960" ("S1", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* Sel Table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Any other unexpected error (whether it is a non-0 ezert8 or*/
   /* non-0 sqlcode),  no error messages need to be returned*/
   /* on the screen but just log the errors and allow this applica-*/
   /* tions to proceed in the exit to other applications.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWSC1 = "Y"; /* force end of file*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "320"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCARRA02.VCARRA02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* EZEFLO;                           /* Exit to display map*/

end // end PW0U320

// Fetch row in DPICK.VCARRA02
Function PW0U330()
   /* -----------------------------------------*/
   /* Fetch the next row from DPICK.VCARRA01*/
   /* -----------------------------------------*/

  try
    call "PK1960" ("N1", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* Not found*/
        PW0UW00.PW0UWSC1 = "Y"; /* set end of cursor to true*/
        return; /* Return to previous process*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Any other unexpected error (whether it is a non-0 ezert8 or*/
   /* non-0 sqlcode),  no error messages need to be returned*/
   /* to the screen but just log the errors and allow this applica-*/
   /* tions to proceed in the exit to other applications.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWSC1 = "Y"; /* force end of file*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1FUNC = "POST"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "330"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCARRA02.VCARRA02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

   /* EZEFLO;                           /* Exit to display map*/

end // end PW0U330

// format and insert DPICK.VCARRA
Function PW0U340()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  if (VCARRA02.PWCHLDFL == " ") /* p&h flag not entered*/
    VCARRA02.PWCHLDFL = "N"; /* default to 'N'*/
  end
  if (VCARRA02.PWCRSHFL == " ") /* rush flag not entered*/
    VCARRA02.PWCRSHFL = "N"; /* default to 'N'*/
  end

  VCARRA02.PKURUNMD = "P"; /* run mode 'Plan'*/

  VCARRA02.PWCCAVFR = 0; /* schedule from*/
  VCARRA02.PWCCAVTR = 0; /* schedule thru*/
  VCARRA02.PWCCOVFT = 1; /* carryover cubic ft*/

  if (VCARRA02.PWCHLDFL == "N")
    PW0UW00.PW0UMDAT = 0;
  end

  VCARRA02.PWCPHDSB = PW0UW00.PW0UMDAT; /* p & h date*/

  VCARRA02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VCARRA02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Insert row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VCARRA02" ("A ", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

   /* MOVE 32 TO PW0UW00.PW0UWMSG;  /* updates successful*/
   /* MOVE '640' TO TA1REC.TA1PGMNO;       /* mod id*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If duplicate row found, this is acceptable condition.*/
    /* ------------------------------------------------------------*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
  )                                  /* AND SQLCA.SQLCODE EQ -911;      /* and resource not available*/

   /* MOVE 28 TO EZEMNO;              /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

   /* ELSE;*/

   /* CALL EZEROLLB;                  /* Roll back all changes*/

   /* MOVE 29 TO EZEMNO;              /* Unexpected error occurred*/
   /* MOVE 'RETN' TO TA1REC.TA1FUNC;  /* Termination function*/

   /* SET PW0UM001 PAGE;              /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "340"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCARRA02.VCARRA02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Exit to display map*/

end // end PW0U340

// Close DPICK.VCARRA02 cursor 2
Function PW0U350()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "PK1960" ("C1", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* Close tbl set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Any other unexpected error (whether it is a non-0 ezert8 or*/
   /* non-0 sqlcode),  no error messages need to be returned*/
   /* on the screen but just log the errors and allow this applica-*/
   /* tions to proceed in the exit to other applications.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "350"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U350

// Reset attributes
Function PW0U400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set PW0UM001.XWHCD initialAttributes; /* Warehouse code*/
  set PW0UM001.PW0UMSAM initialAttributes; /* sameday switch*/
  set PW0UM001.PWDNBRSS initialAttributes; /* number of spurs*/
  set PW0UM001.PWDDFPHS initialAttributes; /* default spurs*/
  set PW0UM001.PWDRJTSS initialAttributes; /* reject spurs*/
  set PW0UM001.PWDNBRSH initialAttributes; /* total schedule*/
  set PW0UM001.PWDSCHFR initialAttributes; /* schedule from*/
  set PW0UM001.PWDSCHTH initialAttributes; /* schedule thru*/
  set PW0UM001.PWDMIPSH initialAttributes; /* minutes/schedule*/
  set PW0UM001.PKDNSSCH initialAttributes; /* actual schedule number*/

  if (PW0UM001.PW0UMSAM == "Y" /* same day only*/
   || PW0UM001.PW0UMSAM == "B") /* Basics only*/
    set PW0UM001.PWDSMDYW initialAttributes; /* same day schedule*/
    set PW0UM001.PW0UMSCH initialAttributes;
   /* SET PW0UM001.PW0UMcov AUTOSKIP,DARK;*/
    set PW0UM001.PWDCOVSC protect; /* carryover schedule*/
  else
    set PW0UM001.PWDSMDYW skip, invisible; /* same day schedule*/
    set PW0UM001.PW0UMSCH skip, invisible;

    if (PW0UM001.XWHCD == "04" /* Memphis footwear*/
     || PW0UM001.XWHCD == "07" /* Wilsonville*/
     || PW0UM001.XWHCD == "51") /* Memphis Apparel*/
      set PW0UM001.PW0UMCOV initialAttributes;
      set PW0UM001.PWDCOVSC initialAttributes; /* carryover schedule (unprotect)*/
    else
      set PW0UM001.PW0UMCOV skip, invisible;
      set PW0UM001.PWDCOVSC skip, invisible;
    end

  end

  PW0UW00.PW0UWIXM = 1; /* Initialize line index*/

  while (PW0UW00.PW0UWIXM <= 10 /* Until end of lines*/
   && PW0UM001.PKVSSPNB[PW0UWIXM] > 0) /* or end of display*/

    set PW0UM001.PW0UMACT[PW0UWIXM] normal; /* Reset select flag*/
    set PW0UM001.PKVSSPNB[PW0UWIXM] initialAttributes; /* spur number*/
    set PW0UM001.TF1CARCD[PW0UWIXM] initialAttributes; /* carrier code*/
    set PW0UM001.TF1ABRV[PW0UWIXM] initialAttributes; /* carrier name*/
    set PW0UM001.PWCTLNBR[PW0UWIXM] initialAttributes; /* trailer number*/
    set PW0UM001.XTRCD[PW0UWIXM] initialAttributes; /* trailer type*/
    set PW0UM001.PWCCAVFR[PW0UWIXM] initialAttributes; /* schedule from*/
    set PW0UM001.PWCCAVTR[PW0UWIXM] initialAttributes; /* schedule thru*/
    set PW0UM001.PWCDSTFR[PW0UWIXM] initialAttributes; /* range from*/
    set PW0UM001.PWCDSTTH[PW0UWIXM] initialAttributes; /* range thru*/
    set PW0UM001.PWCRSHFL[PW0UWIXM] initialAttributes; /* rush flag*/
    set PW0UM001.PWCHLDFL[PW0UWIXM] initialAttributes; /* p & h flag*/
    set PW0UM001.PW0UMPMM[PW0UWIXM] initialAttributes; /* month*/
    set PW0UM001.PW0UMPDD[PW0UWIXM] initialAttributes; /* day*/
    set PW0UM001.PW0UMPYY[PW0UWIXM] initialAttributes; /* year*/
    set PW0UM001.PWCCOVFT[PW0UWIXM] initialAttributes; /* carryover cubic*/

    PW0UW00.PW0UWIXM = PW0UW00.PW0UWIXM + 1; /* Increment line index*/

  end

  set PW0UM001.CATOAP initialAttributes; /* TO application*/
  set PW0UM001.CAITEM initialAttributes; /* Application data*/

end // end PW0U400

// Verify entered data
Function PW0U500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.CAITEM > " ") /* Application data was entered*/

    TA1REC.TA1PGMNO = "500"; /* Module identification*/
    set PW0UM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW0U510(); /* Verify scroll request*/

    if (converseVar.validationMsgNum != 0) /* if errors found*/
      exit stack; /* exit to display map*/
    else
      return; /* exit to calling process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* determine the first and last carryover schedules*/
   /* ------------------------------------------------------------*/
  if (PW0UM001.PWDCOVSC > 0) /* carryover schedules exists*/
          /* first carryover sched = (total sched - carryover sched) + 1*/
    PW0UW00.PW0UWFCO = (PW0UM001.PWDNBRSH - PW0UM001.PWDCOVSC) + 1;
          /* last carryover sched =  total sched*/
    PW0UW00.PW0UWLCO = PW0UM001.PWDNBRSH; /* last carryover*/
  else
    PW0UW00.PW0UWFCO = 0;
    PW0UW00.PW0UWLCO = 0;
  end

   /* ------------------------------------------------------------*/
   /* verify data entered on the map.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.TA5TSQIX > 0) /* Page was formatted*/

    PW0UW00.PW0UWIXM = 10; /* Initialize line index*/

    while (PW0UW00.PW0UWIXM > 0) /* Until end of lines*/

      PW0U520(); /* Verify action codes*/

      if (PW0UM001.PW0UMACT[PW0UWIXM] == "C" /* change*/
       || PW0UM001.PW0UMACT[PW0UWIXM] == "A") /* add*/

        PW0U530(); /* Verify data in the line*/

      end

      if (PW0UM001.PW0UMACT[PW0UWIXM] == "D") /* delete*/
        if (PW0UM001.PWCCOVFT[PW0UWIXM] > 0) /* carryover*/
          if (PW0UW00.PW0UW-FIRST-DEL-FL == "Y")
            converseLib.validationFailed(508); /* WARNING: deleting carryover*/
            set PW0UM001.PW0UMACT[PW0UWIXM] cursor, bold;
            PW0UW00.PW0UW-FIRST-DEL-FL = "N";
          end
        end

      end

      if (PW0UM001.PW0UMACT[PW0UWIXM] == " ") /* no action*/

        PW0U540(); /* verify no changes if no action*/

      end

      if (PW0UM001.PW0UMSAM != PW0UW01.PW0UMSAM)
        PW0UW00.PW0UWFFL = "Y";
      end

      if (PW0UW00.PW0UWFFL == "N") /* first time thru*/
        PW0U550(); /* verify header*/
      else
        PW0UW00.PW0UWFFL = "N";
      end

      PW0UW00.PW0UWIXM = PW0UW00.PW0UWIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* check for schedule and destination overlaps.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWIXM = 10; /* Initialize line index*/

  while (PW0UW00.PW0UWIXM > 0) /* Until end of lines*/

    if (PW0UM001.PW0UMACT[PW0UWIXM] == "C" /* change*/
     || PW0UM001.PW0UMACT[PW0UWIXM] == "A") /* add*/

      PW0U560(); /* verify overlaps*/

    end

    PW0UW00.PW0UWIXM = PW0UW00.PW0UWIXM - 1; /* Decrement line number*/

  end

   /* -----------------------------------------------------------*/
   /* Edit total schedules against all pages.*/
   /* set the chg flag to 'y'  if Total Scheds for Day or Carryover Scheds*/
   /* change.  This is to trigger the checking of the FR/TO Sched range*/
   /* for each detail line on each page to make sure that they do not*/
   /* cross over the carryover scheds if Rush flag = 'y'*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors yet*/
   && PW0UW00.TA5TSQIX > 0)             /* Page was formatted*/

    if (PW0UW01.PWDNBRSH != PW0UM001.PWDNBRSH /* total sched for day change*/
     || PW0UW01.PWDCOVSC != PW0UM001.PWDCOVSC /* carryover scheds change*/
     || PW0UM001.PWDSCHFR != PW0UW01.PWDSCHFR /* rush schedule from*/
     || PW0UM001.PWDSCHTH != PW0UW01.PWDSCHTH) /* rush schedule thru*/
      PW0UW00.PW0UW-HDR-CHG-FL = "Y"; /* header data changed flag*/
    end

    PW0U570(); /* Edit total schedules on all pages*/

  end

   /* -----------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* -----------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end PW0U500

// Verify scroll request
Function PW0U510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW0UW00.XXXTSPAG < 2)       /* and no previous pages*/

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW0UW00.XXXTSPAG >= PW0UW00.TA5TSQIX) /* and no more pages*/

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWIXM = 10; /* Initialize line index*/

  while (PW0UW00.PW0UWIXM > 0) /* Until end of lines*/

    PW0U511(); /* edit detail line fields*/
                                    /* to see if fields are changed*/

    PW0UW00.PW0UWIXM = PW0UW00.PW0UWIXM - 1; /* Decrement line number*/

  end

  if (PW0UM001.PWDSMDYW != PW0UW01.PWDSMDYW) /* same day schedule changed*/

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    set PW0UM001.PWDSMDYW cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end

  if (PW0UM001.PWDMIPSH != PW0UW01.PWDMIPSH) /* minutes/schedule changed*/

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    set PW0UM001.PWDMIPSH cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end

  if (PW0UM001.PWDDFPHS != PW0UW01.PWDDFPHS) /* p&ht spur changed*/

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    set PW0UM001.PWDDFPHS cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end

  if (PW0UM001.PWDCOVSC != PW0UW01.PWDCOVSC) /* carryover schedule*/

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    set PW0UM001.PWDCOVSC cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end

  if (PW0UM001.PWDSCHTH != PW0UW01.PWDSCHTH)

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    set PW0UM001.PWDSCHTH cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end

  if (PW0UM001.PWDSCHFR != PW0UW01.PWDSCHFR)

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    set PW0UM001.PWDSCHFR cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end

  if (PW0UM001.PWDNBRSH != PW0UW01.PWDNBRSH)

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    set PW0UM001.PWDNBRSH cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end

  if (PW0UM001.PW0UMSAM != PW0UW01.PW0UMSAM) /* sameday changed*/

    TA1REC.TA1PGMNO = "510"; /* Module identification*/
    set PW0UM001.PW0UMSAM cursor, bold; /* Highlight*/
    converseLib.validationFailed(39); /* Field may not change*/

  end

end // end PW0U510

// Verify detail for changes
Function PW0U511()
   /* ------------------------------------------------------------*/
   /* If data changed, send error msg.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PW0UMACT[PW0UWIXM] != PW0UW02.PW0UMACT[PW0UWIXM])
    set PW0UM001.PW0UMACT[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PW0UMPYY[PW0UWIXM] != PW0UW02.PW0UMPYY[PW0UWIXM])
    set PW0UM001.PW0UMPYY[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PW0UMPDD[PW0UWIXM] != PW0UW02.PW0UMPDD[PW0UWIXM])
    set PW0UM001.PW0UMPDD[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PW0UMPMM[PW0UWIXM] != PW0UW02.PW0UMPMM[PW0UWIXM])
    set PW0UM001.PW0UMPMM[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PWCHLDFL[PW0UWIXM] != PW0UW02.PWCHLDFL[PW0UWIXM])
    set PW0UM001.PWCHLDFL[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PWCRSHFL[PW0UWIXM] != PW0UW02.PWCRSHFL[PW0UWIXM])
    set PW0UM001.PWCRSHFL[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PWCDSTTH[PW0UWIXM] != PW0UW02.PWCDSTTH[PW0UWIXM])
    set PW0UM001.PWCDSTTH[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PWCDSTFR[PW0UWIXM] != PW0UW02.PWCDSTFR[PW0UWIXM])
    set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PWCCAVTR[PW0UWIXM] != PW0UW02.PWCCAVTR[PW0UWIXM])
    set PW0UM001.PWCCAVTR[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PWCCAVFR[PW0UWIXM] != PW0UW02.PWCCAVFR[PW0UWIXM])
    set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.XTRCD[PW0UWIXM] != PW0UW02.XTRCD[PW0UWIXM])
    set PW0UM001.XTRCD[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PWCTLNBR[PW0UWIXM] != PW0UW02.PWCTLNBR[PW0UWIXM])
    set PW0UM001.PWCTLNBR[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.TF1CARCD[PW0UWIXM] != PW0UW02.TF1CARCD[PW0UWIXM])
    set PW0UM001.TF1CARCD[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

  if (PW0UM001.PKVSSPNB[PW0UWIXM] != PW0UW02.PKVSSPNB[PW0UWIXM])
    set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "511"; /* Module identification*/
    converseLib.validationFailed(39); /* Field may not change*/
  end

end // end PW0U511

// Verify action code
Function PW0U520()
   /* ------------------------------------------------------------*/
   /* If action was entered and is not an 'A', 'C' or 'D'*/
    /* indicate invalid action entered.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PW0UMACT[PW0UWIXM] != PW0UW02.PW0UMACT[PW0UWIXM])
    if (PW0UM001.PW0UMACT[PW0UWIXM] == "A" /* 'A'dd or*/
     || PW0UM001.PW0UMACT[PW0UWIXM] == "C" /* 'C'hange or*/
     || PW0UM001.PW0UMACT[PW0UWIXM] == "D") /* 'D'elete*/

       /* next sentence*/

    else

      TA1REC.TA1PGMNO = "520"; /* Module identification*/
      set PW0UM001.PW0UMACT[PW0UWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(35); /* invalid action code*/

    end
  end

end // end PW0U520

// Verify data in detail line
Function PW0U530()
   /* ------------------------------------------------------------*/
   /* verify P & H date.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCHLDFL[PW0UWIXM] == "Y") /* p & h flag*/
    /*  */
    /* --------------- y2k out begin -------------*/
    /*  */
    /* IF PW0UM001.PW0UMPYY(PW0UWIXM) EQ 0/* year*/
    /*  */
    /* --------------- y2k out end  -------------*/
    /*  */
    if (PW0UM001.PW0UMPDD[PW0UWIXM] == 0 /* day*/
     || PW0UM001.PW0UMPMM[PW0UWIXM] == 0) /* month*/

      /*  */
      /* --------------- y2k out begin ------------*/
      /*  */
      /* IF PW0UM001.PW0UMPYY(PW0UWIXM) EQ 0;/* year*/
      /* MOVE 158 TO EZEMNO;        /* invalid date*/
      /* MOVE '530' TO TA1REC.TA1PGMNO;/* module id*/
                                  /* SET PW0UM001.PW0UMPYY(PW0UWIXM)*/
      /* /* CURSOR,BRIGHT;/* highlight field*/
      /* END;*/
      /*  */
      /* --------------- y2k out end  -------------*/
      /*  */

      if (PW0UM001.PW0UMPDD[PW0UWIXM] == 0) /* year*/
        converseLib.validationFailed(158); /* invalid date*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PW0UMPDD[PW0UWIXM] cursor, bold; /* highlight field*/
      end

      if (PW0UM001.PW0UMPMM[PW0UWIXM] == 0) /* year*/
        converseLib.validationFailed(158); /* invalid date*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PW0UMPMM[PW0UWIXM] cursor, bold; /* highlight field*/
      end

    else

      /*  */
      /* --------------- y2k out begin ------------*/
      /*  */
      /* MOVE XX0XW01.XX0XW19 TO PW0UW00.PW0UMPCC;*/
      /*  */
      /* --------------- y2k out end  ------------*/
      /*  */
      PW0UW00.PW0UMPYY = PW0UM001.PW0UMPYY[PW0UWIXM];
      PW0UW00.PW0UMPMM = PW0UM001.PW0UMPMM[PW0UWIXM];
      PW0UW00.PW0UMPDD = PW0UM001.PW0UMPDD[PW0UWIXM];
      /*  */
      /* --------------- y2k in begin ------------*/
      /*  */
      if (PW0UM001.PW0UMPYY[PW0UWIXM] > 60)
        PW0UW00.PW0UMPCC = 19;
      else
        PW0UW00.PW0UMPCC = 20;
      end
      /*  */
      /* --------------- y2k in end   ------------*/
      /*  */

      if (PW0UW00.PW0UMDAT < PW0UW00.PW0UWMPH) /* minimum p&h date*/

        TA1REC.TA1PGMNO = "530"; /* mod id*/
        converseLib.validationFailed(367); /* P & H date must be > 3 days*/
        set PW0UM001.PW0UMPYY[PW0UWIXM] bold; /* highlight*/
        set PW0UM001.PW0UMPDD[PW0UWIXM] bold; /* highlight*/
        set PW0UM001.PW0UMPMM[PW0UWIXM] cursor, bold; /* highlight*/

      else

        set TA4REC empty;
        TA4REC.TA2DTOPT = "GREGGREG"; /* option*/
        TA4REC.TA2GRTYP = "G"; /* type*/
        TA4REC.TA2GRGGN = PW0UW00.PW0UMDAT;

        call "TA0040" (TA4REC) {isNoRefresh = yes, isExternal = yes};

        if (TA4REC.TA2RTNCD != 0)

          TA1REC.TA1PGMNO = "530"; /* mod id*/
          converseLib.validationFailed(158); /* invalid date*/
          set PW0UM001.PW0UMPYY[PW0UWIXM] bold; /* highlight*/
          set PW0UM001.PW0UMPDD[PW0UWIXM] bold; /* highlight*/
          set PW0UM001.PW0UMPMM[PW0UWIXM] cursor, bold; /* highlight*/

        end
      end
    end

  else
    if (PW0UM001.PW0UMPYY[PW0UWIXM] > 0 /* date entered*/
     || PW0UM001.PW0UMPDD[PW0UWIXM] > 0 
     || PW0UM001.PW0UMPMM[PW0UWIXM] > 0)

      converseLib.validationFailed(333); /* p & h flag must be 'y' to enter date*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.PW0UMPYY[PW0UWIXM] bold; /* highlight*/
      set PW0UM001.PW0UMPDD[PW0UWIXM] bold; /* highlight*/
      set PW0UM001.PW0UMPMM[PW0UWIXM] cursor, bold; /* highlight field*/

    end
  end

   /* ------------------------------------------------------------*/
   /* verify P & H flag.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCHLDFL[PW0UWIXM] > " ") /* if entered*/
    if (PW0UM001.PWCHLDFL[PW0UWIXM] == "Y" /* if 'Y'*/
     || PW0UM001.PWCHLDFL[PW0UWIXM] == "N") /* or 'N'*/

      if (PW0UM001.PWCHLDFL[PW0UWIXM] == "Y" /* P & H flag*/
       && PW0UM001.PWCRSHFL[PW0UWIXM] == "Y") /* rush flag*/

        converseLib.validationFailed(354);
                                   /* p & h cannot = 'y' if rush flag = 'y'*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PWCHLDFL[PW0UWIXM] cursor, bold; /* highlight field*/

      end
    else

      converseLib.validationFailed(235); /* 'y' or 'n' only*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.PWCHLDFL[PW0UWIXM] cursor, bold; /* highlight field*/

    end
  end

   /* ------------------------------------------------------------*/
   /* verify rush flag.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCRSHFL[PW0UWIXM] > " ") /* if entered*/
    if (PW0UM001.PWCRSHFL[PW0UWIXM] == "Y" /* if 'Y'*/
     || PW0UM001.PWCRSHFL[PW0UWIXM] == "N") /* or 'N'*/

      if (PW0UM001.PWCRSHFL[PW0UWIXM] == "Y" /* P & H flag*/
       && PW0UM001.PWCHLDFL[PW0UWIXM] == "Y") /* rush flag*/

        converseLib.validationFailed(354);
                                   /* p & h cannot = 'y' if rush flag = 'y'*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PWCRSHFL[PW0UWIXM] cursor, bold; /* highlight field*/

      end

    else

      converseLib.validationFailed(235); /* 'y' or 'n' only*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.PWCRSHFL[PW0UWIXM] cursor, bold; /* highlight field*/

    end
  end

   /* ------------------------------------------------------------*/
   /* verify destination range.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCDSTTH[PW0UWIXM] == " " /* not entered*/
   && PW0UM001.PWCDSTFR[PW0UWIXM] > " ") /* entered*/

    converseLib.validationFailed(335);
                                   /* thru range must be entered if from is*/
    TA1REC.TA1PGMNO = "530"; /* module id*/
    set PW0UM001.PWCDSTTH[PW0UWIXM] cursor, bold; /* highlight field*/

  end

  if (PW0UM001.PWCDSTFR[PW0UWIXM] == " " /* not entered*/
   && PW0UM001.PWCDSTTH[PW0UWIXM] > " ") /* entered*/

    converseLib.validationFailed(336);
                                   /* from range must be entered if thru is*/
    TA1REC.TA1PGMNO = "530"; /* module id*/
    set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* highlight field*/

  end

  if (PW0UM001.PWCDSTFR[PW0UWIXM] > " " /* if entered*/
   && PW0UM001.PWCDSTTH[PW0UWIXM] > " ")

    if (PW0UM001.PWCDSTTH[PW0UWIXM] < PW0UM001.PWCDSTFR[PW0UWIXM])

      converseLib.validationFailed(334); /* from must be less than to*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.PWCDSTTH[PW0UWIXM] bold; /* highlight field*/
      set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* highlight field*/

    else

      PW0U531(); /* verify dest thru in DPICK.VDESTN01*/
      PW0U532(); /* verify dest from in DPICK.VDESTN01*/

    end
  end

   /* ------------------------------------------------------------*/
   /* verify schedule.*/
   /* valid:    Fr & To Sched nbr can both be 0's*/
   /* invalid:  if Fr Sched is = 0 and To Sched is > 0*/
   /* if To Sched is = 0 and From Sched is > 0*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCCAVTR[PW0UWIXM] == 0 /* Fr = 0 and*/
   && PW0UM001.PWCCAVTR[PW0UWIXM] == 0) /* To = 0*/
       /* okay*/
  else
    if (PW0UM001.PWCCAVFR[PW0UWIXM] > 0 /* Fr > 0*/
     && PW0UM001.PWCCAVTR[PW0UWIXM] == 0) /* To = 0*/
      converseLib.validationFailed(337); /* to is a required field*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.PWCCAVTR[PW0UWIXM] cursor, bold; /* highlight field*/
    else
      if (PW0UM001.PWCCAVFR[PW0UWIXM] == 0 /* Fr = 0*/
       && PW0UM001.PWCCAVTR[PW0UWIXM] > 0) /* To > 0*/
        converseLib.validationFailed(132); /* from is a required field*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* highlight field*/
      end
    end
  end

  if (PW0UM001.PWCCAVFR[PW0UWIXM] > 0 /* if entered*/
   && PW0UM001.PWCCAVTR[PW0UWIXM] > 0)

    if (PW0UM001.PWCRSHFL[PW0UWIXM] == "Y") /* if rush schedule*/

      PW0UW00.PW0UWSTH = PW0UM001.PWDSCHTH; /* sched hold*/
      PW0UW00.PW0UWSFR = PW0UM001.PWDSCHFR; /* sched hold*/

      if (PW0UM001.PWCCAVTR[PW0UWIXM] > PW0UW00.PW0UWSTH)

        converseLib.validationFailed(343); /* rush schedule cannot exceed range*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PWCCAVTR[PW0UWIXM] cursor, bold; /* highlight field*/

      end

      if (PW0UM001.PWCCAVFR[PW0UWIXM] < PW0UW00.PW0UWSFR)

        converseLib.validationFailed(343); /* rush schedule cannot exceed range*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* highlight field*/

      end
    end

    if (PW0UM001.PWCCAVTR[PW0UWIXM] < PW0UM001.PWCCAVFR[PW0UWIXM])

      converseLib.validationFailed(133); /* from must be less than to*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.PWCCAVTR[PW0UWIXM] bold; /* highlight field*/
      set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* highlight field*/

    end

    if (PW0UM001.PWCCAVTR[PW0UWIXM] > PW0UM001.PWDNBRSH)

      converseLib.validationFailed(349); /* thru cannot be > total schedules*/
      TA1REC.TA1PGMNO = "530"; /* mod id*/
      set PW0UM001.PWCCAVTR[PW0UWIXM] bold; /* highlight field*/
      set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* highlight field*/

    end
  end
   /* ------------------------------------------------------------*/
   /* verify trailer type.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.XTRCD[PW0UWIXM] > " ") /* trailer type entered*/

    if (PW0UM001.XTRCD[PW0UWIXM] in XTRTBL.XTRCD /* code in table*/
     && XTRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

       /* next sentence*/

    else
      converseLib.validationFailed(340); /* invalid field*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.XTRCD[PW0UWIXM] cursor, bold; /* highlight field*/
    end

  else
    converseLib.validationFailed(341); /* required field*/
    TA1REC.TA1PGMNO = "530"; /* module id*/
    set PW0UM001.XTRCD[PW0UWIXM] cursor, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
   /* verify trailer number.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCTLNBR[PW0UWIXM] > " ") /* if entered*/

     /* next sentence*/

  else
    converseLib.validationFailed(341); /* required field*/
    TA1REC.TA1PGMNO = "530"; /* module id*/
    set PW0UM001.PWCTLNBR[PW0UWIXM] cursor, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
   /* verify carrier code.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.TF1CARCD[PW0UWIXM] > " ") /* entered*/

    PW0U533();
                                   /* verify carrier code in DPICK.VCARR001*/

  else

    converseLib.validationFailed(341); /* required field*/
    TA1REC.TA1PGMNO = "530"; /* module id*/
    set PW0UM001.TF1CARCD[PW0UWIXM] cursor, bold; /* highlight field*/

  end

   /* ------------------------------------------------------------*/
   /* verify spur number.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PKVSSPNB[PW0UWIXM] > 0) /* spur entered*/

    PW0UW00.PW0UWSPR = PW0UM001.PKVSSPNB[PW0UWIXM]; /* spur hold*/

    if (PW0UW00.PW0UWSPR == PW0UM001.PWDRJTSS) /* reject*/
      converseLib.validationFailed(368); /* reject spur cannot be assigned to*/
                                   /* carrier*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold; /* highlight field*/
    else
    end

    if (PW0UM001.XWHCD == "04") /* memphis footwear warehouse*/

      if (PW0UW00.PW0UWSPR > 8000
       && PW0UW00.PW0UWSPR < 8100
       && PW0UW00.PW0UWSP2 <= PW0UM001.PWDNBRSS) /* spur to big ?*/

  /*      IF PW0UW00.PW0UWSPR NE 8027*/
  /*        AND PW0UW00.PW0UWSPR NE 8028*/
  /*        AND PW0UW00.PW0UWSPR NE 8029;*/
           /* next sentence*/
  /*      ELSE;*/
  /*        MOVE 250 TO EZEMNO;      /* invalid spur number*/
  /*        MOVE '530' TO TA1REC.TA1PGMNO; /* module id*/
  /*        SET PW0UM001.PKVSSPNB[PW0UWIXM] CURSOR,BRIGHT;*/
  /*      END;*/
      else
        converseLib.validationFailed(250); /* invalid spur number*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold;
      end
    else
      if (PW0UM001.XWHCD == "51") /* memphis apparel  warehouse*/
        if (PW0UW00.PW0UWSPR > 5000 
         && PW0UW00.PW0UWSPR < 5200 /* in the range ?*/
         && PW0UW00.PW0UWSP2 <= PW0UM001.PWDNBRSS) /* spur to big ?*/
        else
          converseLib.validationFailed(250); /* invalid spur number*/
          TA1REC.TA1PGMNO = "530"; /* module id*/
          set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold;
        end
      else
        /* non warehouse dependent code*/
        if (PW0UW00.PW0UWSP2 > PW0UM001.PWDNBRSS /* < # spurs*/
         || PW0UW00.PW0UWSPR > 99)              
          converseLib.validationFailed(344); /* spur cannot exceed spur available*/
          TA1REC.TA1PGMNO = "530"; /* module id*/
          set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold; /* highlight field*/
        end
      end
    end

  else
    converseLib.validationFailed(341); /* required field*/
    TA1REC.TA1PGMNO = "530"; /* module id*/
    set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold; /* highlight field*/
  end

end // end PW0U530

// Select from DPICK.VDESTN01
Function PW0U531()
   /* ------------------------------------------------------------*/
   /* Select from DPICK.VDESTN01.*/
   /* ------------------------------------------------------------*/

  set TF2REC empty; /* Clear row storage area*/

  TF2REC.TF2DSTCD = PW0UM001.PWCDSTTH[PW0UWIXM]; /* dest code*/

  try
    call "IO1210" ("S ", SQLCA, TF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      TA1REC.TA1PGMNO = "531"; /* module id*/
      converseLib.validationFailed(351); /* invalid dest code*/
      set PW0UM001.PWCDSTTH[PW0UWIXM] cursor, bold; /* highlight*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY DESTINATION";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "531"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDESTN01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U531

// Select from DPICK.VDESTN01
Function PW0U532()
   /* ------------------------------------------------------------*/
   /* Select from DPICK.VDESTN01.*/
   /* ------------------------------------------------------------*/

  set TF2REC empty; /* Clear row storage area*/

  TF2REC.TF2DSTCD = PW0UM001.PWCDSTFR[PW0UWIXM]; /* dest*/

  try
    call "IO1210" ("S ", SQLCA, TF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      TA1REC.TA1PGMNO = "532"; /* module id*/
      converseLib.validationFailed(351); /* invalid dest code*/
      set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* highlight*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY DESTINATION";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "532"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDESTN01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U532

// Select from DPICK.VCARR001
Function PW0U533()
   /* ------------------------------------------------------------*/
   /* Select from DPICK.VCARR001.*/
   /* ------------------------------------------------------------*/

  set TF1REC empty; /* Clear row storage area*/

  TF1REC.TF1CARCD = PW0UM001.TF1CARCD[PW0UWIXM]; /* carrier code*/

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      PW0UW02.TF1ABRV[PW0UWIXM] = TF1REC.TF1ABRV;
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      TA1REC.TA1PGMNO = "533"; /* module id*/
      converseLib.validationFailed(77); /* invalid carrier code*/
      set PW0UM001.TF1CARCD[PW0UWIXM] cursor, bold; /* highlight*/

      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "533"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U533

// Verify data no action
Function PW0U540()
   /* ------------------------------------------------------------*/
   /* If data changed and no action entered send error msg.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PW0UMPYY[PW0UWIXM] != PW0UW02.PW0UMPYY[PW0UWIXM])
    set PW0UM001.PW0UMPYY[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PW0UMPDD[PW0UWIXM] != PW0UW02.PW0UMPDD[PW0UWIXM])
    set PW0UM001.PW0UMPDD[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PW0UMPMM[PW0UWIXM] != PW0UW02.PW0UMPMM[PW0UWIXM])
    set PW0UM001.PW0UMPMM[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PWCHLDFL[PW0UWIXM] != PW0UW02.PWCHLDFL[PW0UWIXM])
    set PW0UM001.PWCHLDFL[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PWCRSHFL[PW0UWIXM] != PW0UW02.PWCRSHFL[PW0UWIXM])
    set PW0UM001.PWCRSHFL[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PWCDSTTH[PW0UWIXM] != PW0UW02.PWCDSTTH[PW0UWIXM])
    set PW0UM001.PWCDSTTH[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PWCDSTFR[PW0UWIXM] != PW0UW02.PWCDSTFR[PW0UWIXM])
    set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PWCCAVTR[PW0UWIXM] != PW0UW02.PWCCAVTR[PW0UWIXM])
    set PW0UM001.PWCCAVTR[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PWCCAVFR[PW0UWIXM] != PW0UW02.PWCCAVFR[PW0UWIXM])
    set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.XTRCD[PW0UWIXM] != PW0UW02.XTRCD[PW0UWIXM])
    set PW0UM001.XTRCD[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PWCTLNBR[PW0UWIXM] != PW0UW02.PWCTLNBR[PW0UWIXM])
    set PW0UM001.PWCTLNBR[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.TF1CARCD[PW0UWIXM] != PW0UW02.TF1CARCD[PW0UWIXM])
    set PW0UM001.TF1CARCD[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

  if (PW0UM001.PKVSSPNB[PW0UWIXM] != PW0UW02.PKVSSPNB[PW0UWIXM])
    set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold; /* Highlight*/
    TA1REC.TA1PGMNO = "540"; /* Module identification*/
    converseLib.validationFailed(43); /* Field may not change*/
  end

end // end PW0U540

// Verify data in header
Function PW0U550()
   /* ------------------------------------------------------------*/
   /* 09/19/96  oenfie - add verify carryover schedules.*/
   /* ------------------------------------------------------------*/
   /* Verify data in the header.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWDNBRSH > PW0UM001.PWDCOVSC)
   /* PW0UW00.PWDMIPSH = 1440 / PW0UM001.PWDNBRSH;/* min/schedule*/
    PW0UW00.PWDMIPSH = 1440 / (PW0UM001.PWDNBRSH - PW0UM001.PWDCOVSC);
  else
    converseLib.validationFailed(251); /* number of schedules is invalid.*/
    TA1REC.TA1PGMNO = "550"; /* mod id*/
    set PW0UM001.PWDNBRSH cursor, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
   /* Verify sameday flag.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PW0UMSAM == "Y"
   || PW0UM001.PW0UMSAM == "N"
   || (PW0UM001.PW0UMSAM == "B"
   && PW0UM001.XWHCD == "51")) /* Basics allowed only for '51'*/

  else
    converseLib.validationFailed(235); /* 'y'es or 'n'o must be entered*/
    TA1REC.TA1PGMNO = "550"; /* mod id*/
    set PW0UM001.PW0UMSAM cursor, bold; /* highlight field*/

  end
   /* ------------------------------------------------------------*/
   /* verify sameday schedule.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PW0UMSAM == "Y"
   || PW0UM001.PW0UMSAM == "B") /* Basics only*/
    PW0UW00.PW0UWSMD = PW0UM001.PWDSMDYW; /* hold*/
    if (PW0UW00.PW0UWSMD > 0)
      if (PW0UW00.PW0UWSMD > PW0UM001.PWDNBRSH) /* nbr or schedules*/
        converseLib.validationFailed(353); /* same day sched must be less or equal*/
        TA1REC.TA1PGMNO = "550"; /* mod id*/
        set PW0UM001.PWDSMDYW cursor, bold; /* highlight field*/
      else
        if (PW0UW00.PW0UWSMD >= PW0UW00.PW0UWFCO /* first carryover*/
         && PW0UW00.PW0UWSMD <= PW0UW00.PW0UWLCO) /* last carryover*/
          converseLib.validationFailed(507); /* sameday sched cannot be within*/
                                    /* carryover sched range*/
          TA1REC.TA1PGMNO = "550"; /* mod id*/
          set PW0UM001.PWDSMDYW cursor, bold; /* highlight field*/
        end
      end
    else
      converseLib.validationFailed(341); /* required field*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/
      set PW0UM001.PWDSMDYW cursor, bold; /* highlight field*/
    end
  else
  end

   /* ------------------------------------------------------------*/
   /* verify minutes per schedule.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWDMIPSH > 0) /* must be > 0*/
    if (PW0UM001.PWDMIPSH > PW0UW00.PWDMIPSH) /* min/schedule*/
      converseLib.validationFailed(345); /* minutes per schedule exceeds allowed*/
                                   /* amount*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/
      set PW0UM001.PWDMIPSH cursor, bold; /* highlight field*/
    else
    end
  else
    converseLib.validationFailed(341); /* req. fld please enter.*/
    TA1REC.TA1PGMNO = "550"; /* mod id*/
    set PW0UM001.PWDMIPSH cursor, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
   /* verify carryover schedules*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWDCOVSC > 0)
    if (PW0UM001.PWDCOVSC > 6)
      converseLib.validationFailed(505); /* carryover sched cannot be > 6*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/
      set PW0UM001.PWDCOVSC cursor, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* verify rush schedules from and to.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWDSCHFR > 0) /* must be > 0;*/
    if (PW0UM001.PWDSCHFR > PW0UM001.PWDSCHTH)
      converseLib.validationFailed(133); /* from cannot be > to*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/
      set PW0UM001.PWDSCHFR cursor, bold; /* highlight field*/
    end

    if (PW0UW00.PW0UWFCO > 0)
      if (PW0UM001.PWDSCHFR >= PW0UW00.PW0UWFCO) /* first carryover sched*/
        converseLib.validationFailed(509); /* rush sched range cannot span into*/
                                      /* carryover schedules*/
        TA1REC.TA1PGMNO = "550"; /* mod id*/
        set PW0UM001.PWDSCHFR cursor, bold; /* highlight field*/
      end
    end

  else
    converseLib.validationFailed(341); /* required field.*/
    TA1REC.TA1PGMNO = "550"; /* mod id*/
    set PW0UM001.PWDSCHFR cursor, bold; /* highlight field*/
  end

  PW0UW00.PW0UWSFR = PW0UM001.PWDSCHTH; /* sch number*/

  if (PW0UW00.PW0UWSFR > 0) /* must be > 0;*/
    if (PW0UW00.PW0UWSFR > PW0UM001.PWDNBRSH)
      converseLib.validationFailed(347); /* thru cannot be > total schedules*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/
      set PW0UM001.PWDSCHTH cursor, bold; /* highlight field*/
    end

    if (PW0UW00.PW0UWFCO > 0
     && PW0UW00.PW0UWLCO > 0)
      if (PW0UW00.PW0UWSFR >= PW0UW00.PW0UWFCO /* first carryover sched*/
       && PW0UW00.PW0UWSFR <= PW0UW00.PW0UWLCO) /* last carryover sched*/
        converseLib.validationFailed(509); /* rush sched range cannot span into*/
                                      /* carryover schedules*/
        TA1REC.TA1PGMNO = "550"; /* mod id*/
        set PW0UM001.PWDSCHTH cursor, bold; /* highlight field*/
      end
    end
  else
    converseLib.validationFailed(341); /* required field.*/
    TA1REC.TA1PGMNO = "550"; /* mod id*/
    set PW0UM001.PWDSCHTH cursor, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
   /* verify P & h spur number.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.XWHCD == PW0UW01.XWHCD) /* if key hasnt changed*/
    PW0UW00.PW0UWSPR = PW0UM001.PWDDFPHS; /* spur hold*/
    if (PW0UM001.PWDDFPHS == PW0UM001.PWDRJTSS)

      PW0UW00.PW0UWMSG = 348; /* p&h spur number = reject spur*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/

      if (PW0UW00.XXXTSPAG == 0)
        PW0UW00.XXXTSPAG = 1;
      end
    end

    if (PW0UM001.XWHCD == "04")
      if (PW0UM001.PWDDFPHS > 8000
       && PW0UM001.PWDDFPHS < 8100
       && PW0UW00.PW0UWSP2 <= PW0UM001.PWDNBRSS) /* p&h LE # of spurs?*/
           /* ok, next sentence*/
      else
        converseLib.validationFailed(250);
        TA1REC.TA1PGMNO = "550";
        set PW0UM001.PWDDFPHS cursor, bold;
      end
    else
      if (PW0UM001.XWHCD == "51")
        if (PW0UM001.PWDDFPHS > 5000
         && PW0UM001.PWDDFPHS < 5200
         && PW0UW00.PW0UWSP2 <= PW0UM001.PWDNBRSS) /* p&h LE # of spurs?*/
           /* ok, next sentence*/
        else
          converseLib.validationFailed(250);
          TA1REC.TA1PGMNO = "550";
          set PW0UM001.PWDDFPHS cursor, bold;
        end
      else
         /* non warehouse dependent*/
        if (PW0UW00.PW0UWSPR < 100 /* default to large?*/
         && PW0UW00.PW0UWSP2 <= PW0UM001.PWDNBRSS)
           /* ok next sentence*/
        else
          converseLib.validationFailed(250); /* this is an error..*/
          TA1REC.TA1PGMNO = "550";
          set PW0UM001.PWDDFPHS cursor, bold;
        end
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* verify warehouse code.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.XWHCD > " ") /* if entered*/
    if (PW0UM001.XWHCD in XWHTBL.XWHCD /* in table*/
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
    else

      converseLib.validationFailed(340); /* invalid code or inactive status*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/
      set PW0UM001.XWHCD cursor, bold; /* highlight field*/

    end
  else

    converseLib.validationFailed(341); /* invalid code or inactive status*/
    TA1REC.TA1PGMNO = "550"; /* mod id*/
    set PW0UM001.XWHCD cursor, bold; /* highlight field*/

  end

   /* ------------------------------------------------------------*/
   /* verify total schedules for day.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWDNBRSH > 0) /* must be > 0.*/
  else
    converseLib.validationFailed(341); /* required field.*/
    TA1REC.TA1PGMNO = "550"; /* mod id*/
    set PW0UM001.PWDNBRSH cursor, bold; /* highlight field*/

  end

  if (PW0UM001.PWDNBRSH < PW0UM001.PWCCAVTR[PW0UWIXM]) /* nbr < schd to*/
    converseLib.validationFailed(349); /* total schedules for day cannot be < schedule*/
                            /* range in detail*/
    TA1REC.TA1PGMNO = "550"; /* mod id*/
    set PW0UM001.PWDNBRSH cursor, bold; /* highlight field*/

  end

  if (PW0UM001.XWHCD == "51" /* Memphis apparel warehouse*/
   || PW0UM001.XWHCD == "04" /* Memphis footwear warehouse*/
   || PW0UM001.XWHCD == "07") /* Wilsonville warehouse*/
    if (PW0UM001.PWDNBRSH > 30) /* total sched for day  > 30*/
      converseLib.validationFailed(503); /* total schedules for day cannot be > 50*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/
      set PW0UM001.PWDNBRSH cursor, bold; /* highlight field*/

    end
  else
    if (PW0UM001.PWDNBRSH > 16) /* total sched for day  > 16*/
      converseLib.validationFailed(392); /* total schedules for day cannot be > 16*/
      TA1REC.TA1PGMNO = "550"; /* mod id*/
      set PW0UM001.PWDNBRSH cursor, bold; /* highlight field*/

    end
  end
end // end PW0U550

// Verify no overlaps
Function PW0U560()
   /* ------------------------------------------------------------*/
   /* verify entered data against map.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWIXD = 10; /* index for detail edits*/

  while (PW0UW00.PW0UWIXD > 0) /* until no more lines*/

    if (PW0UW00.PW0UWIXM != PW0UW00.PW0UWIXD)
                                   /* don't compare against itself*/
      if (PW0UM001.PW0UMACT[PW0UWIXD] != "D") /* or against future delete*/

        PW0U561(); /* verify no overlaps on current page*/

      end

    else

      /* ------------------------------------------------------------*/
       /* if lines equal, compare to display storage if 'A'dd.*/
      /* ------------------------------------------------------------*/

      if (PW0UM001.PW0UMACT[PW0UWIXM] == "A" /* if 'A'dd*/
       && PW0UW02.PKVSSPNB[PW0UWIXD] != 0)   /* and data in the line*/

        PW0U563(); /* verify no overlaps on same record*/

      end
    end

    PW0UW00.PW0UWIXD = PW0UW00.PW0UWIXD - 1; /* decrement line*/

  end

   /* ------------------------------------------------------------*/
   /* verify entered data against temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWIXT = 1; /* index for tsq pages*/

  while (PW0UW00.PW0UWIXT <= PW0UW00.TA5TSQIX) /* until no more tsq pages*/

    if (PW0UW00.PW0UWIXT != PW0UM001.XXXTSPAG) /* current page edited*/

      PW0UW00.XXXTSPAG = PW0UW00.PW0UWIXT; /* temporary page nbr*/

      PW0US02(); /* read temporary storage page*/

      PW0UW00.PW0UWIXD = 1; /* index for dtl lines*/

      while (PW0UW00.PW0UWIXD <= 10) /* until end of line*/

        PW0U563(); /* verify no overlaps against page*/

        PW0UW00.PW0UWIXD = PW0UW00.PW0UWIXD + 1; /* increment line index*/

      end

    end

    PW0UW00.PW0UWIXT = PW0UW00.PW0UWIXT + 1; /* increment tsq page index*/

  end

  PW0UW00.XXXTSPAG = PW0UM001.XXXTSPAG; /* reset page nbr*/

   /* ------------------------------------------------------------*/
   /* read temporary storage with current page number to get*/
   /* current data in display storage.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.TA5TSQIX > 0)

    PW0US02(); /* read temporary storage*/

  end

end // end PW0U560

// Verify no overlaps on map
Function PW0U561()
   /* ------------------------------------------------------------*/
   /* verify destination range.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCDSTFR[PW0UWIXM] > " " /* if entered*/
   && PW0UM001.PWCDSTTH[PW0UWIXM] > " ") /* if entered*/

    if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UM001.PKVSSPNB[PW0UWIXD])
      if (PW0UM001.TF1CARCD[PW0UWIXM] == PW0UM001.TF1CARCD[PW0UWIXD])

        PW0US05(); /* verify dest range*/

      end
    else
      if (PW0UM001.TF1CARCD[PW0UWIXM] == PW0UM001.TF1CARCD[PW0UWIXD])

        PW0US05(); /* verify dest range*/

      end
    end
  end
   /* ------------------------------------------------------------*/
   /* verify schedule range.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCCAVFR[PW0UWIXM] > 0 /* if entered*/
   && PW0UM001.PWCCAVTR[PW0UWIXM] > 0) /* if entered*/

    if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UM001.PKVSSPNB[PW0UWIXD])

       /* next sentence*/

    else
      if (PW0UM001.TF1CARCD[PW0UWIXM] == PW0UM001.TF1CARCD[PW0UWIXD])

        PW0US06(); /* verify schedule ranges*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check trailer number.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.TF1CARCD[PW0UWIXM] == PW0UM001.TF1CARCD[PW0UWIXD])
    if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UM001.PKVSSPNB[PW0UWIXD])
      if (PW0UM001.PWCTLNBR[PW0UWIXM] == PW0UM001.PWCTLNBR[PW0UWIXD]
       && PW0UM001.PWCHLDFL[PW0UWIXM] != "Y")

        TA1REC.TA1PGMNO = "561"; /* mod id*/
        converseLib.validationFailed(338); /* trailer # must be unique*/
        set PW0UM001.PWCTLNBR[PW0UWIXM] cursor, bold; /* hightlight*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check for duplicates*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UM001.PKVSSPNB[PW0UWIXD]
   && PW0UM001.TF1CARCD[PW0UWIXM] == PW0UM001.TF1CARCD[PW0UWIXD]
   && PW0UM001.PWCCAVFR[PW0UWIXM] == PW0UM001.PWCCAVFR[PW0UWIXD]
   && PW0UM001.PWCCAVTR[PW0UWIXM] == PW0UM001.PWCCAVTR[PW0UWIXD])

    TA1REC.TA1PGMNO = "561"; /* mod id*/
    converseLib.validationFailed(282); /* duplicate record*/
    set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold; /* hightlight*/
    set PW0UM001.TF1CARCD[PW0UWIXM] bold; /* hightlight*/
    set PW0UM001.PWCCAVFR[PW0UWIXM] bold; /* hightlight*/
    set PW0UM001.PWCCAVTR[PW0UWIXM] bold; /* hightlight*/

  end

   /* ------------------------------------------------------------*/
   /* last check for duplicates.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UM001.PKVSSPNB[PW0UWIXD]
   && PW0UM001.TF1CARCD[PW0UWIXM] == PW0UM001.TF1CARCD[PW0UWIXD]
   && PW0UM001.PWCTLNBR[PW0UWIXM] == PW0UM001.PWCTLNBR[PW0UWIXD]
   && PW0UM001.PWCCAVFR[PW0UWIXM] == PW0UM001.PWCCAVFR[PW0UWIXD]
   && PW0UM001.PWCCAVTR[PW0UWIXM] == PW0UM001.PWCCAVTR[PW0UWIXD]
   && PW0UM001.PWCDSTTH[PW0UWIXM] == PW0UM001.PWCDSTTH[PW0UWIXD]
   && PW0UM001.PWCDSTFR[PW0UWIXM] == PW0UM001.PWCDSTFR[PW0UWIXD]
   && PW0UM001.PWCHLDFL[PW0UWIXM] == PW0UM001.PWCHLDFL[PW0UWIXD])
    if (PW0UM001.PWCHLDFL[PW0UWIXM] == "Y")
      if (PW0UM001.PW0UMPYY[PW0UWIXM] == PW0UM001.PW0UMPYY[PW0UWIXD]
       && PW0UM001.PW0UMPDD[PW0UWIXM] == PW0UM001.PW0UMPDD[PW0UWIXD]
       && PW0UM001.PW0UMPMM[PW0UWIXM] == PW0UM001.PW0UMPMM[PW0UWIXD])

        TA1REC.TA1PGMNO = "561"; /* mod id*/
        converseLib.validationFailed(282); /* duplicate record*/
        PW0US07(); /* highlight whole line*/

      end
    else

      TA1REC.TA1PGMNO = "561"; /* mod id*/
      converseLib.validationFailed(282); /* duplicate record*/
      PW0US07(); /* highlight whole line*/

    end
  end

end // end PW0U561

// Verify no overlaps on TSQ page
Function PW0U563()
   /* ------------------------------------------------------------*/
   /* verify destination range.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCDSTFR[PW0UWIXM] > " " /* if entered*/
   && PW0UM001.PWCDSTTH[PW0UWIXM] > " ") /* if entered*/

    if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UW02.PKVSSPNB[PW0UWIXD])
      if (PW0UM001.TF1CARCD[PW0UWIXM] == PW0UW02.TF1CARCD[PW0UWIXD])

        PW0US09(); /* verify dest range*/

      end
    else
      if (PW0UM001.TF1CARCD[PW0UWIXM] == PW0UW02.TF1CARCD[PW0UWIXD])

        PW0US09(); /* verify dest range*/

      end
    end
  end
   /* ------------------------------------------------------------*/
   /* verify schedule range.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCCAVFR[PW0UWIXM] > 0 /* if entered*/
   && PW0UM001.PWCCAVTR[PW0UWIXM] > 0) /* if entered*/

    if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UW02.PKVSSPNB[PW0UWIXD])

      /* next sentence              ; verify schedule ranges*/

    else
      if (PW0UM001.TF1CARCD[PW0UWIXM] == PW0UW02.TF1CARCD[PW0UWIXD])

        PW0US10(); /* verify schedule ranges*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check trailer number.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.TF1CARCD[PW0UWIXM] == PW0UW02.TF1CARCD[PW0UWIXD])
    if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UW02.PKVSSPNB[PW0UWIXD])
      if (PW0UM001.PWCTLNBR[PW0UWIXM] == PW0UW02.PWCTLNBR[PW0UWIXD]
       && PW0UM001.PWCHLDFL[PW0UWIXM] != "Y"
       && PW0UW02.PWCHLDFL[PW0UWIXD] != "Y")

        TA1REC.TA1PGMNO = "563"; /* mod id*/
        converseLib.validationFailed(338); /* trailer # must be unique*/
        set PW0UM001.PWCTLNBR[PW0UWIXM] cursor, bold; /* hightlight*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* check for duplicates*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UW02.PKVSSPNB[PW0UWIXD]
   && PW0UM001.TF1CARCD[PW0UWIXM] == PW0UW02.TF1CARCD[PW0UWIXD]
   && PW0UM001.PWCCAVFR[PW0UWIXM] == PW0UW02.PWCCAVFR[PW0UWIXD]
   && PW0UM001.PWCCAVTR[PW0UWIXM] == PW0UW02.PWCCAVTR[PW0UWIXD])

    TA1REC.TA1PGMNO = "563"; /* mod id*/
    converseLib.validationFailed(282); /* duplicate record*/
    set PW0UM001.PKVSSPNB[PW0UWIXM] cursor, bold; /* hightlight*/
    set PW0UM001.TF1CARCD[PW0UWIXM] bold; /* hightlight*/
    set PW0UM001.PWCCAVFR[PW0UWIXM] bold; /* hightlight*/
    set PW0UM001.PWCCAVTR[PW0UWIXM] bold; /* hightlight*/

  end

   /* ------------------------------------------------------------*/
   /* last check for duplicates.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PKVSSPNB[PW0UWIXM] == PW0UW02.PKVSSPNB[PW0UWIXD]
   && PW0UM001.TF1CARCD[PW0UWIXM] == PW0UW02.TF1CARCD[PW0UWIXD]
   && PW0UM001.PWCTLNBR[PW0UWIXM] == PW0UW02.PWCTLNBR[PW0UWIXD]
   && PW0UM001.PWCCAVFR[PW0UWIXM] == PW0UW02.PWCCAVFR[PW0UWIXD]
   && PW0UM001.PWCCAVTR[PW0UWIXM] == PW0UW02.PWCCAVTR[PW0UWIXD]
   && PW0UM001.PWCDSTTH[PW0UWIXM] == PW0UW02.PWCDSTTH[PW0UWIXD]
   && PW0UM001.PWCDSTFR[PW0UWIXM] == PW0UW02.PWCDSTFR[PW0UWIXD]
   && PW0UM001.PWCHLDFL[PW0UWIXM] == PW0UW02.PWCHLDFL[PW0UWIXD])
    if (PW0UM001.PWCHLDFL[PW0UWIXM] == "Y")
      if (PW0UM001.PW0UMPYY[PW0UWIXM] == PW0UW02.PW0UMPYY[PW0UWIXD]
       && PW0UM001.PW0UMPDD[PW0UWIXM] == PW0UW02.PW0UMPDD[PW0UWIXD]
       && PW0UM001.PW0UMPMM[PW0UWIXM] == PW0UW02.PW0UMPMM[PW0UWIXD])

        TA1REC.TA1PGMNO = "563"; /* mod id*/
        converseLib.validationFailed(282); /* duplicate record*/
        PW0US07(); /* highlight whole line*/

      end
    else

      TA1REC.TA1PGMNO = "563"; /* mod id*/
      converseLib.validationFailed(282); /* duplicate record*/
      PW0US07(); /* highlight whole line*/

    end
  end

end // end PW0U563

// Verify tot scheds on all pages
Function PW0U570()
   /* ------------------------------------------------------------*/
   /* verify entered data against temporary storage.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWIXT = 1; /* index for tsq pages*/

  while (PW0UW00.PW0UWIXT <= PW0UW00.TA5TSQIX /* until no more tsq pages*/
   && converseVar.validationMsgNum == 0) /* and no errors found yet*/

    if (PW0UW00.PW0UWIXT != PW0UM001.XXXTSPAG) /* current page edited (skip)*/

      PW0UW00.XXXTSPAG = PW0UW00.PW0UWIXT; /* temporary page nbr*/

      PW0US02(); /* read temporary storage page*/

      PW0UW00.PW0UWIXD = 1; /* index for dtl lines*/

      while (PW0UW00.PW0UWIXD <= 10 /* until end of line*/
       && converseVar.validationMsgNum == 0) /* and no errors found yet*/

        if (PW0UW02.TF1CARCD[PW0UWIXD] > " ") /* data on line*/

          if (PW0UM001.PWDNBRSH < PW0UW02.PWCCAVTR[PW0UWIXD])
                                   /* tot sched < sched to*/
            converseLib.validationFailed(463); /* invalid tot sched on other page*/
            TA1REC.TA1PGMNO = "570"; /* mod id*/
            set PW0UM001.PWDNBRSH cursor, bold; /* highlight field*/
          end

          if (PW0UW00.PW0UW-HDR-CHG-FL == "Y") /* Tot Sched for Day changed*/
                                               /* Carryover Scheds changed*/
                                               /* Rush Fr/To Sched changed*/
            PW0U571(); /* edit the from and thru sched*/
                                  /* against the header fields.*/
          end

        end

        PW0UW00.PW0UWIXD = PW0UW00.PW0UWIXD + 1; /* increment line index*/

      end

    end

    PW0UW00.PW0UWIXT = PW0UW00.PW0UWIXT + 1; /* increment tsq page index*/

  end

   /* -----------------------------------------------------------*/
   /* restore the original page to current data in display storage.*/
   /* -----------------------------------------------------------*/

  PW0UW00.XXXTSPAG = PW0UM001.XXXTSPAG; /* reset page nbr*/

  PW0US02(); /* read temporary storage*/

end // end PW0U570

// Re-edit sched Fr/To
Function PW0U571()
   /* ------------------------------------------------------------------*/
   /* re-edit the Schedule From and To range to make sure that*/
   /* with the change in Total Schedule for Day or Carryover*/
   /* Scheds or Rush Fr/To Scheds, this range is still valid.*/
   /* ------------------------------------------------------------------*/
  if (PW0UM001.PWCCAVFR[PW0UWIXD] > 0 /* if entered*/
   && PW0UM001.PWCCAVTR[PW0UWIXD] > 0)

    if (PW0UM001.PWCRSHFL[PW0UWIXD] == "Y") /* if rush schedule*/

      PW0UW00.PW0UWSTH = PW0UM001.PWDSCHTH; /* sched hold*/
      PW0UW00.PW0UWSFR = PW0UM001.PWDSCHFR; /* sched hold*/

      if (PW0UM001.PWCCAVTR[PW0UWIXD] > PW0UW00.PW0UWSTH)

        converseLib.validationFailed(343); /* rush schedule cannot exceed range*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PWCCAVTR[PW0UWIXD] cursor, bold; /* highlight field*/

      end

      if (PW0UM001.PWCCAVFR[PW0UWIXD] < PW0UW00.PW0UWSFR)

        converseLib.validationFailed(343); /* rush schedule cannot exceed range*/
        TA1REC.TA1PGMNO = "530"; /* module id*/
        set PW0UM001.PWCCAVFR[PW0UWIXD] cursor, bold; /* highlight field*/

      end
    end

    if (PW0UM001.PWCCAVTR[PW0UWIXD] < PW0UM001.PWCCAVFR[PW0UWIXD])

      converseLib.validationFailed(133); /* from must be less than to*/
      TA1REC.TA1PGMNO = "530"; /* module id*/
      set PW0UM001.PWCCAVTR[PW0UWIXD] bold; /* highlight field*/
      set PW0UM001.PWCCAVFR[PW0UWIXD] cursor, bold; /* highlight field*/

    end

    if (PW0UM001.PWCCAVTR[PW0UWIXD] > PW0UM001.PWDNBRSH)

      converseLib.validationFailed(349); /* thru cannot be > total schedules*/
      TA1REC.TA1PGMNO = "530"; /* mod id*/
      set PW0UM001.PWCCAVTR[PW0UWIXD] bold; /* highlight field*/
      set PW0UM001.PWCCAVFR[PW0UWIXD] cursor, bold; /* highlight field*/

    end
  end
   /* ----------------------------------------------------------------*/
   /* for rush flag = 'Y' and the carryover scheds is > 0, check to*/
   /* make sure that the Sched Fr/To range is not crossing over to*/
   /* the carryover schedules*/
   /* ----------------------------------------------------------------*/
  if (PW0UM001.PWCRSHFL[PW0UWIXD] == "Y" /* rush flag*/
   && PW0UM001.PWDCOVSC > 0)            

    if (PW0UM001.PWCCAVFR[PW0UWIXD] != 0)

      if (PW0UM001.PWCCAVFR[PW0UWIXD] > 
      PW0UW00.PW0UWFCO) /* first carryover*/
        converseLib.validationFailed(506); /* sched range cannot cross over caovr*/
        TA1REC.TA1PGMNO = "530";
        set PW0UM001.PWCCAVFR[PW0UWIXD] bold;
      end

    end

    if (PW0UM001.PWCCAVTR[PW0UWIXD] >= PW0UW00.PW0UWFCO /* first caovr*/
     && PW0UM001.PWCCAVTR[PW0UWIXD] <= PW0UW00.PW0UWLCO) /* last caovr*/
      converseLib.validationFailed(506);
      TA1REC.TA1PGMNO = "530";
      set PW0UM001.PWCCAVFR[PW0UWIXD] bold;
    end

  end
end // end PW0U571

// Process valid request
Function PW0U600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = PW0UM001.XWHCD; /* warehouse*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.XWHCD != PW0UW01.XWHCD /* warehouse changed*/
   || PW0UM001.PW0UMSAM != PW0UW01.PW0UMSAM) /* sameday switch chngd*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (PW0UM001.XWHCD > " " /* warehouse was entered*/
     && PW0UM001.PW0UMSAM > " ") /* sameday entered*/

      PW0UW00.PW0UWSWR = "Y"; /* Request for data switch*/

    else

      PW0UW00.PW0UWSWR = "N"; /* Request for data switch*/

      PW0U110(); /* Purge any temporary storage*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW0UW00.XXXTSPAG = PW0UW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW0UW00.XXXTSPAG = PW0UW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If fields changed, set header update switch to 'Y'.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.XWHCD != PW0UW01.XWHCD       /* warehouse*/
   || PW0UM001.PWDNBRSS != PW0UW01.PWDNBRSS /* number of spurs*/
   || PW0UM001.PWDRJTSS != PW0UW01.PWDRJTSS /* reject spur*/
   || PW0UM001.PWDDFPHS != PW0UW01.PWDDFPHS /* p & h spur*/
   || PW0UM001.PWDNBRSH != PW0UW01.PWDNBRSH /* number of schedule*/
   || PW0UM001.PWDMIPSH != PW0UW01.PWDMIPSH /* minutes/schedule*/
   || PW0UM001.PWDSCHFR != PW0UW01.PWDSCHFR /* rush schedule from*/
   || PW0UM001.PWDSCHTH != PW0UW01.PWDSCHTH /* rush schedule thru*/
   || PW0UM001.PWDSMDYW != PW0UW01.PWDSMDYW /* sameday scheule*/
   || PW0UM001.PWDCOVSC != PW0UW01.PWDCOVSC) /* carryover schedule*/

    PW0US03(); /* Format map items to display storage*/

    PW0UW00.PW0UWHDU = "Y"; /* Header update switch*/

  end

  PW0UW00.PW0UWIXM = 1; /* Initialize line index*/

   /* ------------------------------------------------------------*/
   /* check authorization.*/
   /* ------------------------------------------------------------*/

  PW0US08(); /* check change,delete,authorization*/

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  PW0UW00.PW0UMPCC = XX0XW01.XX0XW19; /* map century*/

   /* ------------------------------------------------------------*/
   /* Update row in DPICK.VWVCTL02.*/
   /* ------------------------------------------------------------*/

  if (PW0UW00.PW0UWHDU == "Y") /* header update switch*/

    PW0U610(); /* Update DPICK.VWVCTL01*/
    PW0UW00.PW0UWHDU = "N"; /* header update switch*/

  end

   /* ------------------------------------------------------------*/
   /* Update, insert or delete row in DPICK.VCARRA02.*/
   /* ------------------------------------------------------------*/

  PW0UW00.PW0UWIXM = 1; /* map index*/

  while (PW0UW00.PW0UWIXM <= 10) /* until page processed*/

    if (PW0UM001.PW0UMACT[PW0UWIXM] == "A") /* add row in table*/

      PW0U620(); /* insert in DPICK.VCARRA02*/
      PW0US04(); /* Format map items to display storage*/
                                   /* for updates*/
      PW0UW00.PW0UWSWR = "Y"; /* Request for data switch*/

    end

    if (PW0UM001.PW0UMACT[PW0UWIXM] == "D") /* delete row in table*/

      PW0U630(); /* delete record in DPICK.VCARRA02*/
      PW0US04(); /* Format map items to display storage*/
                                   /* for updates*/
      PW0UW00.PW0UWSWR = "Y"; /* Request for data switch*/
      PW0UW00.PW0UW-FIRST-DEL-FL = "Y"; /* Delete caovr flag*/

    end

    if (PW0UM001.PW0UMACT[PW0UWIXM] == "C") /* update table*/

      PW0U630(); /* delete row in DPICK.VCARRA02*/
      PW0U620(); /* insert row in DPICK.VCARRA02*/
      PW0US04(); /* Format map items to display storage*/
                                   /* for updates*/
      PW0UW00.PW0UWSWR = "Y"; /* Request for data switch*/

    end

    PW0UW00.PW0UWIXM = PW0UW00.PW0UWIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

end // end PW0U600

// Update row in DPICK.VWVCTL02
Function PW0U610()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* - 09/18/96  oenfie  added carryover schedules*/
   /* ------------------------------------------------------------*/

  VWVCTL02.PKURUNMD = " "; /* picking normal*/
  VWVCTL02.XWHCD = PW0UW01.XWHCD; /* warehouse code*/
  VWVCTL02.PWDNBRSS = PW0UW01.PWDNBRSS; /* nbr spur*/
  VWVCTL02.PWDDFPHS = PW0UW01.PWDDFPHS; /* default spur*/
  VWVCTL02.PWDRJTSS = PW0UW01.PWDRJTSS; /* reject spur*/
  VWVCTL02.PWDNBRSH = PW0UW01.PWDNBRSH; /* total schedule*/
  VWVCTL02.PWDCOVSC = PW0UW01.PWDCOVSC; /* carryover schedules*/
  VWVCTL02.PWDSCHFR = PW0UW01.PWDSCHFR; /* schedule from*/
  VWVCTL02.PWDSCHTH = PW0UW01.PWDSCHTH; /* schedule thru*/
  VWVCTL02.PWDMIPSH = PW0UW01.PWDMIPSH; /* minutes/schedule*/
  VWVCTL02.PWDSMDYW = PW0UW01.PWDSMDYW; /* same day schedule*/
  VWVCTL02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VWVCTL02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VWVCTL02" ("U ", SQLCA, VWVCTL02) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0UW00.PW0UWMSG = 32; /* update successful*/
      TA1REC.TA1PGMNO = "610"; /* module id*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0UW00.PW0UWSWF = "N"; /* format the map switch*/

      TA1REC.TA1PGMNO = "610"; /* Module identification*/
      converseLib.validationFailed(263); /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "610"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWVCTL02"; /* Table view name*/
  TA1REC.TA1TBLKE = VWVCTL02.VWVCTL02-GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U610

// Insert row in DPICK.VCARRA02
Function PW0U620()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCHLDFL[PW0UWIXM] == " ") /* p&h flag not entered*/
    PW0UM001.PWCHLDFL[PW0UWIXM] = "N"; /* default to 'N'*/
  end
  if (PW0UM001.PWCRSHFL[PW0UWIXM] == " ") /* rush flag not entered*/
    PW0UM001.PWCRSHFL[PW0UWIXM] = "N"; /* default to 'N'*/
  end

  VCARRA02.XWHCD = PW0UW01.XWHCD; /* warehouse code*/

  if (PW0UW01.PW0UMSAM == "Y")
    VCARRA02.PKURUNMD = "S"; /* pk run mode*/
  else
    if (PW0UW01.PW0UMSAM == "B")
      VCARRA02.PKURUNMD = "B"; /* pk run mode*/
    else
      VCARRA02.PKURUNMD = " "; /* pk run mode*/
    end
  end

  VCARRA02.PKVSSPNB = PW0UM001.PKVSSPNB[PW0UWIXM]; /* spur number*/
  VCARRA02.TF1CARCD = PW0UM001.TF1CARCD[PW0UWIXM]; /* carrier code*/
  VCARRA02.PWCHLDFL = PW0UM001.PWCHLDFL[PW0UWIXM]; /* p & h flag*/
  VCARRA02.PWCRSHFL = PW0UM001.PWCRSHFL[PW0UWIXM]; /* rush flag*/
  VCARRA02.PWCCAVFR = PW0UM001.PWCCAVFR[PW0UWIXM]; /* schedule from*/
  VCARRA02.PWCCAVTR = PW0UM001.PWCCAVTR[PW0UWIXM]; /* schedule thru*/
  VCARRA02.PWCTLNBR = PW0UM001.PWCTLNBR[PW0UWIXM]; /* trailer number*/
  VCARRA02.XTRCD = PW0UM001.XTRCD[PW0UWIXM]; /* trailer type*/
  VCARRA02.PWCDSTFR = PW0UM001.PWCDSTFR[PW0UWIXM]; /* dest from*/
  VCARRA02.PWCDSTTH = PW0UM001.PWCDSTTH[PW0UWIXM]; /* dest thru*/

  PW0UW00.PW0UMPMM = PW0UM001.PW0UMPMM[PW0UWIXM]; /* month*/
  PW0UW00.PW0UMPDD = PW0UM001.PW0UMPDD[PW0UWIXM]; /* day*/
  PW0UW00.PW0UMPYY = PW0UM001.PW0UMPYY[PW0UWIXM]; /* year*/
   /*  */
   /* -------------- y2k out begin ----------------*/
   /*  */
   /* MOVE XX0XW01.XX0XW19 TO PW0UW00.PW0UMPCC;*/
   /*  */
   /* -------------- y2k out end ----------------*/
   /*  */
   /*  */
   /* -------------- y2k in begin ---------------*/
   /*  */
  if (PW0UM001.PW0UMPYY[PW0UWIXM] > 60)
    PW0UW00.PW0UMPCC = 19;
  else
    PW0UW00.PW0UMPCC = 20;
  end
   /*  */
   /* -------------- y2k in  end ----------------*/
   /*  */

  VCARRA02.PWCCOVFT = PW0UW02.PWCCOVFT[PW0UWIXM]; /* carryover cubic*/
  /* PW0UM001.PWCCOVFT(PW0UWIXM) TO VCARRA02.PWCCOVFT; /* carryover cubic*/
  if (PW0UM001.PWCHLDFL[PW0UWIXM] == "N")
    PW0UW00.PW0UMDAT = 0;
  end

  VCARRA02.PWCPHDSB = PW0UW00.PW0UMDAT; /* p & h date*/

  VCARRA02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VCARRA02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Insert row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VCARRA02" ("A ", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0UW00.PW0UWMSG = 32; /* updates successful*/
      TA1REC.TA1PGMNO = "620"; /* mod id*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0UW00.PW0UWSWF = "N"; /* format the map switch*/

      TA1REC.TA1PGMNO = "620"; /* Module identification*/
      converseLib.validationFailed(263); /* Data was updated by another*/
      set PW0UM001.PW0UMACT[PW0UWIXM] cursor, bold; /* highlight*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "620"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCARRA02.VCARRA02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U620

// Delete row in DPICK.VCARRA02
Function PW0U630()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  VCARRA02.XWHCD = PW0UW01.XWHCD; /* warehouse code*/

  if (PW0UW01.PW0UMSAM == "Y")
    VCARRA02.PKURUNMD = "S"; /* pk run mode*/
  else
    if (PW0UW01.PW0UMSAM == "B")
      VCARRA02.PKURUNMD = "B"; /* pk run mode*/
    else
      VCARRA02.PKURUNMD = " "; /* pk run mode*/
    end
  end
  VCARRA02.PKVSSPNB = PW0UW02.PKVSSPNB[PW0UWIXM]; /* spur number*/
  VCARRA02.TF1CARCD = PW0UW02.TF1CARCD[PW0UWIXM]; /* carrier code*/
  VCARRA02.PWCHLDFL = PW0UW02.PWCHLDFL[PW0UWIXM]; /* p & h flag*/
  VCARRA02.PWCCAVFR = PW0UW02.PWCCAVFR[PW0UWIXM]; /* schedule from*/
  VCARRA02.PWCCAVTR = PW0UW02.PWCCAVTR[PW0UWIXM]; /* schedule thru*/
  VCARRA02.PWCRSHFL = PW0UW02.PWCRSHFL[PW0UWIXM]; /* rush flag*/
  VCARRA02.PWCTLNBR = PW0UW02.PWCTLNBR[PW0UWIXM]; /* trailer number*/
  VCARRA02.PWCDSTFR = PW0UW02.PWCDSTFR[PW0UWIXM]; /* dest from*/
  VCARRA02.PWCDSTTH = PW0UW02.PWCDSTTH[PW0UWIXM]; /* dest thru*/
  PW0UW00.PW0UMPMM = PW0UW02.PW0UMPMM[PW0UWIXM];
  PW0UW00.PW0UMPDD = PW0UW02.PW0UMPDD[PW0UWIXM];
  PW0UW00.PW0UMPYY = PW0UW02.PW0UMPYY[PW0UWIXM];
   /*  */
   /* -------- y2k out begin -----------------*/
   /*  */
   /* MOVE XX0XW01.XX0XW19 TO PW0UW00.PW0UMPCC;*/
   /*  */
   /* -------- y2k out end  -----------------*/
   /*  */
   /*  */
   /* -------- y2k in begin -----------------*/
   /*  */
  if (PW0UW02.PW0UMPYY[PW0UWIXM] > 60)
    PW0UW00.PW0UMPCC = 19;
  else
    PW0UW00.PW0UMPCC = 20;
  end
   /*  */
   /* -------- y2k in  end  -----------------*/
   /*  */

  VCARRA02.PWCCOVFT = PW0UW02.PWCCOVFT[PW0UWIXM]; /* carryover cubic*/

  if (PW0UW02.PWCHLDFL[PW0UWIXM] == "N")
    PW0UW00.PW0UMDAT = 0;
  end

  VCARRA02.PWCPHDSB = PW0UW00.PW0UMDAT; /* date*/

  try
    call "VCARRA02" ("D ", SQLCA, VCARRA02) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      PW0UW00.PW0UWMSG = 32; /* update successful*/
      TA1REC.TA1PGMNO = "630"; /* mod id*/
      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row already exists*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      PW0UW00.PW0UWSWF = "N"; /* format the map switch*/

      TA1REC.TA1PGMNO = "630"; /* Module identification*/
      converseLib.validationFailed(211); /* record not found for delete*/
      set PW0UM001.PW0UMACT[PW0UWIXM] cursor, bold; /* highlight*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(28); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(29); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "630"; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARRA02"; /* Table view name*/
  TA1REC.TA1TBLKE = VCARRA02.VCARRA02-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0U630

// Read temporary storage page
Function PW0US02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW0UW02.XXXTSLEN = PW0UW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW0UW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW0UW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(29); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S02"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW0US02

// Format header changes to D.S.
Function PW0US03()
   /* ------------------------------------------------------------*/
   /* Format header changes in display storage for updates.*/
   /* ------------------------------------------------------------*/

  PW0UW01.XWHCD = PW0UM001.XWHCD; /* warehouse*/
  PW0UW01.PWDNBRSS = PW0UM001.PWDNBRSS; /* number of spurs*/
  PW0UW01.PWDRJTSS = PW0UM001.PWDRJTSS; /* reject spur*/
  PW0UW01.PWDDFPHS = PW0UM001.PWDDFPHS; /* p & h spur*/
  PW0UW01.PWDNBRSH = PW0UM001.PWDNBRSH; /* number of schedule*/
  PW0UW01.PWDMIPSH = PW0UM001.PWDMIPSH; /* minutes/schedule*/
  PW0UW01.PWDSCHFR = PW0UM001.PWDSCHFR; /* rush schedule from*/
  PW0UW01.PWDSCHTH = PW0UM001.PWDSCHTH; /* rush schedule thru*/
  PW0UW01.PKDNSSCH = PW0UM001.PKDNSSCH; /* actual schedule number*/
  PW0UW01.PWDSMDYW = PW0UM001.PWDSMDYW; /* same day schedule*/
  PW0UW01.PWDCOVSC = PW0UM001.PWDCOVSC; /* carryover schedule*/

end // end PW0US03

// Format detail changes to D.S.
Function PW0US04()
   /* ------------------------------------------------------------*/
   /* Format detail changes to display storage for updates*/
   /* ------------------------------------------------------------*/

  PW0UW02.PW0UMACT[PW0UWIXM] = " ";
  PW0UW02.PKVSSPNB[PW0UWIXM] = PW0UM001.PKVSSPNB[PW0UWIXM];
  PW0UW02.TF1CARCD[PW0UWIXM] = PW0UM001.TF1CARCD[PW0UWIXM];
  PW0UW02.TF1ABRV[PW0UWIXM] = PW0UM001.TF1ABRV[PW0UWIXM];
  PW0UW02.PWCCAVFR[PW0UWIXM] = PW0UM001.PWCCAVFR[PW0UWIXM];
  PW0UW02.PWCCAVTR[PW0UWIXM] = PW0UM001.PWCCAVTR[PW0UWIXM];
  PW0UW02.PWCDSTFR[PW0UWIXM] = PW0UM001.PWCDSTFR[PW0UWIXM];
  PW0UW02.PWCDSTTH[PW0UWIXM] = PW0UM001.PWCDSTTH[PW0UWIXM];
  PW0UW02.PWCTLNBR[PW0UWIXM] = PW0UM001.PWCTLNBR[PW0UWIXM];
  PW0UW02.XTRCD[PW0UWIXM] = PW0UM001.XTRCD[PW0UWIXM];
  PW0UW02.PWCRSHFL[PW0UWIXM] = PW0UM001.PWCRSHFL[PW0UWIXM];
  PW0UW02.PWCHLDFL[PW0UWIXM] = PW0UM001.PWCHLDFL[PW0UWIXM];
  PW0UW02.PW0UMPMM[PW0UWIXM] = PW0UM001.PW0UMPMM[PW0UWIXM];
  PW0UW02.PW0UMPDD[PW0UWIXM] = PW0UM001.PW0UMPDD[PW0UWIXM];
  PW0UW02.PW0UMPYY[PW0UWIXM] = PW0UM001.PW0UMPYY[PW0UWIXM];

end // end PW0US04

// Verify dest range on map
Function PW0US05()
   /* ------------------------------------------------------------*/
   /* verify destination range.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCDSTTH[PW0UWIXD] == " " /* blank dest thru*/
   && PW0UM001.PWCDSTFR[PW0UWIXD] == " ") /* blank dest from*/

    return; /* return to calling process*/

  end

  if (PW0UM001.PWCDSTTH[PW0UWIXM] > PW0UM001.PWCDSTTH[PW0UWIXD]
   && PW0UM001.PWCDSTTH[PW0UWIXM] > PW0UM001.PWCDSTFR[PW0UWIXD])
     /* next sentence*/
  else
    if (PW0UM001.PWCDSTTH[PW0UWIXM] < PW0UM001.PWCDSTTH[PW0UWIXD]
     && PW0UM001.PWCDSTTH[PW0UWIXM] < PW0UM001.PWCDSTFR[PW0UWIXD])
       /* next sentence*/
    else

      TA1REC.TA1PGMNO = "S05"; /* module id*/
      converseLib.validationFailed(350); /* destination overlap*/
      set PW0UM001.PWCDSTTH[PW0UWIXM] cursor, bold; /* highlight*/

    end
  end

  if (PW0UM001.PWCDSTFR[PW0UWIXM] > PW0UM001.PWCDSTFR[PW0UWIXD]
   && PW0UM001.PWCDSTFR[PW0UWIXM] > PW0UM001.PWCDSTTH[PW0UWIXD])
     /* next sentence*/
  else
    if (PW0UM001.PWCDSTFR[PW0UWIXM] < PW0UM001.PWCDSTFR[PW0UWIXD]
     && PW0UM001.PWCDSTFR[PW0UWIXM] < PW0UM001.PWCDSTTH[PW0UWIXD])
       /* next sentence*/
    else

      TA1REC.TA1PGMNO = "S05"; /* module id*/
      converseLib.validationFailed(350); /* destination overlap*/
      set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* highlight*/

    end
  end

  if (PW0UM001.PWCDSTFR[PW0UWIXM] < PW0UM001.PWCDSTFR[PW0UWIXD]
   && PW0UM001.PWCDSTTH[PW0UWIXM] > PW0UM001.PWCDSTTH[PW0UWIXD])

    TA1REC.TA1PGMNO = "S05"; /* module id*/
    converseLib.validationFailed(350); /* destination overlap*/
    set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* highlight*/
    set PW0UM001.PWCDSTTH[PW0UWIXM] bold; /* highlight*/

  end

end // end PW0US05

// Verify schedule range on map
Function PW0US06()
   /* ------------------------------------------------------------*/
   /* verify schedule range.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCHLDFL[PW0UWIXM] == "Y"
   || PW0UM001.PWCHLDFL[PW0UWIXD] == "Y")
    return; /* return to calling process*/
  end

  if (PW0UM001.PWCCAVTR[PW0UWIXM] > PW0UM001.PWCCAVTR[PW0UWIXD]
   && PW0UM001.PWCCAVTR[PW0UWIXM] > PW0UM001.PWCCAVFR[PW0UWIXD])
     /* next sentence*/
  else
    if (PW0UM001.PWCCAVTR[PW0UWIXM] < PW0UM001.PWCCAVTR[PW0UWIXD]
     && PW0UM001.PWCCAVTR[PW0UWIXM] < PW0UM001.PWCCAVFR[PW0UWIXD])
       /* next sentence*/
    else
      if (PW0UM001.PKVSSPNB[PW0UWIXM] != PW0UM001.PKVSSPNB[PW0UWIXD]
       && PW0UM001.PWCTLNBR[PW0UWIXM] != PW0UM001.PWCTLNBR[PW0UWIXD])
        /* next sentence*/
      else

        TA1REC.TA1PGMNO = "S06"; /* module id*/
        converseLib.validationFailed(282); /* schedule overlap*/
        set PW0UM001.PWCCAVTR[PW0UWIXM] cursor, bold; /* highlight*/

      end
    end
  end

  if (PW0UM001.PWCCAVFR[PW0UWIXM] > PW0UM001.PWCCAVFR[PW0UWIXD]
   && PW0UM001.PWCCAVFR[PW0UWIXM] > PW0UM001.PWCCAVTR[PW0UWIXD])
     /* next sentence*/
  else
    if (PW0UM001.PWCCAVFR[PW0UWIXM] < PW0UM001.PWCCAVFR[PW0UWIXD]
     && PW0UM001.PWCCAVFR[PW0UWIXM] < PW0UM001.PWCCAVTR[PW0UWIXD])
       /* next sentence*/
    else
      if (PW0UM001.PKVSSPNB[PW0UWIXM] != PW0UM001.PKVSSPNB[PW0UWIXD]
       && PW0UM001.PWCTLNBR[PW0UWIXM] != PW0UM001.PWCTLNBR[PW0UWIXD])
        /* next sentence*/
      else

        TA1REC.TA1PGMNO = "S06"; /* module id*/
        converseLib.validationFailed(282); /* schedule overlap*/
        set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* highlight*/

      end
    end
  end

  if (PW0UM001.PWCCAVFR[PW0UWIXM] < PW0UM001.PWCCAVFR[PW0UWIXD]
   && PW0UM001.PWCCAVTR[PW0UWIXM] > PW0UM001.PWCCAVTR[PW0UWIXD])
    if (PW0UM001.PKVSSPNB[PW0UWIXM] != PW0UM001.PKVSSPNB[PW0UWIXD]
     && PW0UM001.PWCTLNBR[PW0UWIXM] != PW0UM001.PWCTLNBR[PW0UWIXD])
       /* next sentence*/
    else

      TA1REC.TA1PGMNO = "S06"; /* module id*/
      converseLib.validationFailed(282); /* schedule overlap*/
      set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* highlight*/
      set PW0UM001.PWCCAVTR[PW0UWIXM] bold; /* highlight*/

    end
  end

end // end PW0US06

// Highlight whole line
Function PW0US07()
   /* ------------------------------------------------------------*/
   /* highlight whole line.*/
   /* ------------------------------------------------------------*/

  set PW0UM001.PW0UMACT[PW0UWIXM] cursor, bold; /* highlight*/
  set PW0UM001.PKVSSPNB[PW0UWIXM] bold;
  set PW0UM001.TF1CARCD[PW0UWIXM] bold;
  set PW0UM001.PWCTLNBR[PW0UWIXM] bold;
  set PW0UM001.PWCCAVFR[PW0UWIXM] bold;
  set PW0UM001.PWCCAVTR[PW0UWIXM] bold;
  set PW0UM001.PWCCAVTR[PW0UWIXM] bold;
  set PW0UM001.PWCDSTFR[PW0UWIXM] bold;
  set PW0UM001.PWCDSTTH[PW0UWIXM] bold;
  set PW0UM001.PWCRSHFL[PW0UWIXM] bold;
  set PW0UM001.PWCHLDFL[PW0UWIXM] bold;
  set PW0UM001.PW0UMPYY[PW0UWIXM] bold;
  set PW0UM001.PW0UMPDD[PW0UWIXM] bold;
  set PW0UM001.PW0UMPMM[PW0UWIXM] bold;

end // end PW0US07

// Check authorization
Function PW0US08()
   /* ------------------------------------------------------------*/
   /* check add authorization.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAADDFL != "Y" /* no add authorization*/
   && "A" in PW0UM001.PW0UMACT) /* and add requested*/

    converseLib.validationFailed(275); /* not authorized for add*/
    TA1REC.TA1PGMNO = "S08"; /* mod id*/
    PW0UW00.PW0UWSWF = "N"; /* format the map switch*/
    set PW0UM001.PW0UMACT[sysVar.arrayIndex] cursor, bold; /* highlight*/
    exit stack; /* exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* check change authorization.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL != "Y") /* no chg authorization*/
    if ("C" in PW0UM001.PW0UMACT /* if chg requested*/
     || PW0UW00.PW0UWHDU == "Y") /* header changed*/

      if ("C" in PW0UM001.PW0UMACT)
        set PW0UM001.PW0UMACT[sysVar.arrayIndex] cursor, bold; /* highlight*/
      end

      converseLib.validationFailed(275); /* not authorized for change*/
      TA1REC.TA1PGMNO = "S08"; /* mod id*/
      PW0UW00.PW0UWSWF = "N"; /* format the map switch*/
      exit stack; /* exit to display map*/

    end
  end

   /* ------------------------------------------------------------*/
   /* check delete authorization.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CADELFL != "Y" /* no delete authorization*/
   && "D" in PW0UM001.PW0UMACT) /* and delete requested*/

    converseLib.validationFailed(275); /* not authorized for delete*/
    TA1REC.TA1PGMNO = "S08"; /* mod id*/
    PW0UW00.PW0UWSWF = "N"; /* format the map switch*/
    set PW0UM001.PW0UMACT[sysVar.arrayIndex] cursor, bold; /* highlight*/
    exit stack; /* exit to display map*/

  end

end // end PW0US08

// Verify dest range on TSQ page
Function PW0US09()
   /* ------------------------------------------------------------*/
   /* verify destination range.*/
   /* ------------------------------------------------------------*/

  if (PW0UW02.PWCDSTTH[PW0UWIXD] == " " /* blank dest thru*/
   && PW0UW02.PWCDSTFR[PW0UWIXD] == " ") /* blank dest from*/

    return; /* return to calling process*/

  end

  if (PW0UM001.PWCDSTTH[PW0UWIXM] > PW0UW02.PWCDSTTH[PW0UWIXD]
   && PW0UM001.PWCDSTTH[PW0UWIXM] > PW0UW02.PWCDSTFR[PW0UWIXD])
     /* next sentence*/
  else
    if (PW0UM001.PWCDSTTH[PW0UWIXM] < PW0UW02.PWCDSTTH[PW0UWIXD]
     && PW0UM001.PWCDSTTH[PW0UWIXM] < PW0UW02.PWCDSTFR[PW0UWIXD])
       /* next sentence*/
    else

      TA1REC.TA1PGMNO = "S09"; /* module id*/
      converseLib.validationFailed(350); /* destination overlap*/
      set PW0UM001.PWCDSTTH[PW0UWIXM] cursor, bold; /* highlight*/

    end
  end

  if (PW0UM001.PWCDSTFR[PW0UWIXM] > PW0UW02.PWCDSTFR[PW0UWIXD]
   && PW0UM001.PWCDSTFR[PW0UWIXM] > PW0UW02.PWCDSTTH[PW0UWIXD])
     /* next sentence*/
  else
    if (PW0UM001.PWCDSTFR[PW0UWIXM] < PW0UW02.PWCDSTFR[PW0UWIXD]
     && PW0UM001.PWCDSTFR[PW0UWIXM] < PW0UW02.PWCDSTTH[PW0UWIXD])
       /* next sentence*/
    else

      TA1REC.TA1PGMNO = "S09"; /* module id*/
      converseLib.validationFailed(350); /* destination overlap*/
      set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* highlight*/

    end
  end

  if (PW0UM001.PWCDSTFR[PW0UWIXM] < PW0UW02.PWCDSTFR[PW0UWIXD]
   && PW0UM001.PWCDSTTH[PW0UWIXM] > PW0UW02.PWCDSTTH[PW0UWIXD])

    TA1REC.TA1PGMNO = "S09"; /* module id*/
    converseLib.validationFailed(350); /* destination overlap*/
    set PW0UM001.PWCDSTFR[PW0UWIXM] cursor, bold; /* highlight*/
    set PW0UM001.PWCDSTTH[PW0UWIXM] bold; /* highlight*/

  end

end // end PW0US09

// Verify sched range on TSQ page
Function PW0US10()
   /* ------------------------------------------------------------*/
   /* verify schedule range.*/
   /* ------------------------------------------------------------*/

  if (PW0UM001.PWCHLDFL[PW0UWIXM] == "Y"
   || PW0UW02.PWCHLDFL[PW0UWIXD] == "Y")
    return; /* return to calling process*/
  end

  if (PW0UM001.PWCCAVTR[PW0UWIXM] > PW0UW02.PWCCAVTR[PW0UWIXD]
   && PW0UM001.PWCCAVTR[PW0UWIXM] > PW0UW02.PWCCAVFR[PW0UWIXD])
     /* next sentence*/
  else
    if (PW0UM001.PWCCAVTR[PW0UWIXM] < PW0UW02.PWCCAVTR[PW0UWIXD]
     && PW0UM001.PWCCAVTR[PW0UWIXM] < PW0UW02.PWCCAVFR[PW0UWIXD])
       /* next sentence*/
    else
      if (PW0UM001.PKVSSPNB[PW0UWIXM] != PW0UW02.PKVSSPNB[PW0UWIXD]
       && PW0UM001.PWCTLNBR[PW0UWIXM] != PW0UW02.PWCTLNBR[PW0UWIXD])
        /* next sentence*/
      else

        TA1REC.TA1PGMNO = "S10"; /* module id*/
        converseLib.validationFailed(282); /* schedule overlap*/
        set PW0UM001.PWCCAVTR[PW0UWIXM] cursor, bold; /* highlight*/

      end
    end
  end

  if (PW0UM001.PWCCAVFR[PW0UWIXM] > PW0UW02.PWCCAVFR[PW0UWIXD]
   && PW0UM001.PWCCAVFR[PW0UWIXM] > PW0UW02.PWCCAVTR[PW0UWIXD])
     /* next sentence*/
  else
    if (PW0UM001.PWCCAVFR[PW0UWIXM] < PW0UW02.PWCCAVFR[PW0UWIXD]
     && PW0UM001.PWCCAVFR[PW0UWIXM] < PW0UW02.PWCCAVTR[PW0UWIXD])
       /* next sentence*/
    else
      if (PW0UM001.PKVSSPNB[PW0UWIXM] != PW0UW02.PKVSSPNB[PW0UWIXD]
       && PW0UM001.PWCTLNBR[PW0UWIXM] != PW0UW02.PWCTLNBR[PW0UWIXD])
        /* next sentence*/
      else

        TA1REC.TA1PGMNO = "S10"; /* module id*/
        converseLib.validationFailed(282); /* schedule overlap*/
        set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* highlight*/

      end
    end
  end

  if (PW0UM001.PWCCAVFR[PW0UWIXM] < PW0UW02.PWCCAVFR[PW0UWIXD]
   && PW0UM001.PWCCAVTR[PW0UWIXM] > PW0UW02.PWCCAVTR[PW0UWIXD])

    if (PW0UM001.PKVSSPNB[PW0UWIXM] != PW0UW02.PKVSSPNB[PW0UWIXD]
     && PW0UM001.PWCTLNBR[PW0UWIXM] != PW0UW02.PWCTLNBR[PW0UWIXD])
       /* next sentence*/
    else

      TA1REC.TA1PGMNO = "S10"; /* module id*/
      converseLib.validationFailed(282); /* schedule overlap*/
      set PW0UM001.PWCCAVFR[PW0UWIXM] cursor, bold; /* highlight*/
      set PW0UM001.PWCCAVTR[PW0UWIXM] bold; /* highlight*/

    end
  end

end // end PW0US10

//*** RECORD=PW0UW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record PW0UW00 type basicRecord
  10 PW0UWIXM PW0UWIXM ; 
  10 PW0UWIXD PW0UWIXD ; 
  10 PW0UWIXT PW0UWIXT ; 
  10 PW0UWNHD PW0UWNHD ; 
  10 PW0UWFFL PW0UWFFL ; 
  10 PW0UWSC1 PW0UWSC1 ; 
  10 PW0UWMSG PW0UWMSG ; 
  10 PW0UWSWF PW0UWSWF ; 
  10 PW0UWSWR PW0UWSWR ; 
  10 PW0UWSWU PW0UWSWU ; 
  10 PW0UWHDU PW0UWHDU ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 PW0UMDAT PW0UMDAT ; 
    15 PW0UMPCC PW0UMPCC ; 
    15 PW0UMPYY PW0UMPYY ; 
    15 PW0UMPMM PW0UMPMM ; 
    15 PW0UMPDD PW0UMPDD ; 
  10 PW0UWMPH PW0UWMPH ; 
    15 PW0UWPCC PW0UWPCC ; 
    15 PW0UWPYY PW0UWPYY ; 
    15 PW0UWPMM PW0UWPMM ; 
    15 PW0UWPDD PW0UWPDD ; 
  10 PW0UWSCH PW0UWSCH ; 
  10 PWDMIPSH PWDMIPSH ; 
  10 PW0UWSTH PW0UWSTH ; 
  10 PW0UWSFR PW0UWSFR ; 
  10 PW0UWSMD PW0UWSMD ; 
  10 PW0UWSPR PW0UWSPR ; 
    15 PW0UWSP1 PW0UWSP1 ; 
    15 PW0UWSP2 PW0UWSP2 ; 
  10 PW0UWFCO PW0UWFCO ; 
  10 PW0UWLCO PW0UWLCO ; 
  10 PW0UW-FIRST-DEL-FL PW0UW-FIRST-DEL-FL ; 
  10 PW0UW-HDR-CHG-FL PW0UW-HDR-CHG-FL ; 
end // end PW0UW00

//*** RECORD=PW0UW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PW0UW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 PW0UMSAM PW0UMSAM ; 
  10 PWDNBRSS PWDNBRSS ; 
  10 PWDDFPHS PWDDFPHS ; 
  10 PWDRJTSS PWDRJTSS ; 
  10 PWDNBRSH PWDNBRSH ; 
  10 PWDSCHFR PWDSCHFR ; 
  10 PWDSCHTH PWDSCHTH ; 
  10 PWDMIPSH PWDMIPSH ; 
  10 PWDSMDYW PWDSMDYW ; 
  10 PKDNSSCH PKDNSSCH ; 
  10 PW0UWSPR PW0UWSPR ; 
    15 PW0UWSP1 PW0UWSP1 ; 
    15 PW0UWSP2 PW0UWSP2 ; 
  10 PWDCOVSC PWDCOVSC ; 
end // end PW0UW01

//*** RECORD=PW0UW02 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PW0UW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(490) ; 
    10 PW0UMACT PW0UMACT [10] ; 
    10 PKVSSPNB PKVSSPNB [10] ; 
    10 TF1CARCD TF1CARCD [10] ; 
    10 TF1ABRV TF1ABRV [10] ; 
    10 PWCTLNBR PWCTLNBR [10] ; 
    10 XTRCD XTRCD [10] ; 
    10 PWCCAVFR PWCCAVFR [10] ; 
    10 PWCCAVTR PWCCAVTR [10] ; 
    10 PWCDSTFR PWCDSTFR [10] ; 
    10 PWCDSTTH PWCDSTTH [10] ; 
    10 PWCRSHFL PWCRSHFL [10] ; 
    10 PWCHLDFL PWCHLDFL [10] ; 
    10 PW0UMPMM PW0UMPMM [10] ; 
    10 PW0UMPDD PW0UMPDD [10] ; 
    10 PW0UMPYY PW0UMPYY [10] ; 
    10 PWCCOVFT PWCCOVFT [10] ; 
end // end PW0UW02

// action, add, chg, del, inquiry
DataItem PW0UMACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map work date
DataItem PW0UMDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem PW0UMPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pack & hold date - day
DataItem PW0UMPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pack & hold date - month
DataItem PW0UMPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pack & hold date - year
DataItem PW0UMPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sameday switch
DataItem PW0UMSAM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem PW0UW-FIRST-DEL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem PW0UW-HDR-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW0UWFCO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time thru flag
DataItem PW0UWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update header switch
DataItem PW0UWHDU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line index
DataItem PW0UWIXD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map index
DataItem PW0UWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tsq index
DataItem PW0UWIXT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem PW0UWLCO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// min P&h date
DataItem PW0UWMPH num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// msg number
DataItem PW0UWMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// header found switch
DataItem PW0UWNHD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem PW0UWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem PW0UWPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem PW0UWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem PW0UWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of cursor switch
DataItem PW0UWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// largest schedule
DataItem PW0UWSCH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold for sched comp.
DataItem PW0UWSFR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold for sameday sched
DataItem PW0UWSMD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold for '60'
DataItem PW0UWSP1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold for spur nn
DataItem PW0UWSP2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold for spur number strip
DataItem PW0UWSPR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold for sched comp.
DataItem PW0UWSTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// format the map switch
DataItem PW0UWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem PW0UWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update t.s. switch
DataItem PW0UWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end