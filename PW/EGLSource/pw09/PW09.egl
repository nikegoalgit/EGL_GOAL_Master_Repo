package pw09;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import pk.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=PW09 ****
// This application allows a user to add, change or delete rows
// on the trailer volume table (DPICK.VPKXTR01).
// 
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/15/92  GRAY    New application.
// Canada   10/25/95  PSTROE  Pick-up new version of XPPK003
// Y2KFIX   02/26/98  DKENNY  Y2K MODIFICATIONS MADE:
//                            Application regenerated to
//                            pick up new XX0XS01.
// *********************
Program PW09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "PK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PKWREC PKWREC; // record
  PW09W00 PW09W00; // record
  PW09W01 PW09W01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPKXTR01 VPKXTR01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XTRTBL; // table
  use XWHTBL; // table
  use PW09M.PW09M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPPK001: XPPK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set PW09M001 initial; /* M002 input/output*/
    set PW09W00 empty; /* Working storage*/
    set PW09W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    PW09W00.PW09W-DISPLAY-SW = "1"; /* Map to be displayed switch*/
    PW09W00.PW09W-FRMT-MAP-SW = "Y"; /* Format the map switch*/
    PW09W00.PW09W-REQST-DATA-SW = "Y"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW09-000; /* Converse the main process*/


    PW09-000: PW09-000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto PW09-000; /* Converse the main process*/


  end // end main
end // end PW09

// Validate entry
Function PW09-000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP != "PK0A" /* From allowed application*/
   && COMMAREA.CAFROMAP != "PK0V")

   /* ------------------------------------------------------------*/
    /* Indicate invalid transfer and return to FROM application.*/
   /* ------------------------------------------------------------*/

    COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

    XSNOWAY(); /* Invalid transfer was attempted*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether passed warehouse is valid...*/
   /* ------------------------------------------------------------*/

  XPPK003(); /* Validate warehouse*/

  PW09-100();

end // end PW09-000

// List the rows in the table
Function PW09-100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  PW09-110(); /* Obtain the data to display*/

  PW09-120(); /* Format and display the map*/

  PW09-130(); /* Check attention identifier*/

  PW09-140(); /* Reset fields to normal intensity*/

  PW09-150(); /* Verify the entered data*/

  PW09-160(); /* Process valid input request*/


end // end PW09-100

// Obtain the data to display
Function PW09-110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (PW09W00.PW09W-REQST-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  PW09W00.XXXTSLEN = 455; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (PW09W00.XXXMSGNO == 0) /* No message to display*/
    PW09W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  PW09-111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  PW09-113(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  PW09W00.PW09W-MAP-IDX = 1; /* Display line index*/
  PW09W00.PW09W-XTR-CSR-SW = "N"; /* End of trailer cursor switch*/

  while (PW09W00.PW09W-XTR-CSR-SW == "N") /* Until end of cursor*/

    PW09-114(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (PW09W00.PW09W-XTR-CSR-SW == "N") /* Not end of cursor*/
      PW09-115(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (PW09W00.PW09W-MAP-IDX > 13) /* Page is full*/

      PW09-116(); /* Add page to temporary storage*/

      PW09W00.PW09W-MAP-IDX = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (PW09W00.PW09W-MAP-IDX > 1) /* Page was formatted*/
    PW09-116(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  PW09-117(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (PW09W00.TA5TSQIX == 0) /* No pages formatted*/

    PW09W00.XXXMODID = "110"; /* Module identification*/
    PW09W00.XXXMSGNO = 8; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  PW09W00.PW09W-REQST-DATA-SW = "N"; /* Request for data switch*/


end // end PW09-110

// Purge temp storage, initialize
Function PW09-111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set PW09W01 empty; /* M001 display storage*/

  PW09W00.PW09W-STOR-UPDATE-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  PW09W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (PW09W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW09W00.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW09-111

// Select set and open cursor
Function PW09-113()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VPKXTR01 empty; /* Clear row storage area*/

  VPKXTR01.XWHCD = PKWREC.XWHCD; /* warehouse*/

  try
    call "IO4650" ("S1", SQLCA, VPKXTR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW09W00.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKXTR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKWREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW09-113

// Fetch next row in the cursor
Function PW09-114()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4650" ("N1", SQLCA, VPKXTR01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      PW09W00.PW09W-XTR-CSR-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW09W00.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKXTR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKWREC.XWHCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW09-114

// Save data in display storage
Function PW09-115()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/
  PW09W01.PW09M-ACT-CD[PW09W-MAP-IDX] = " "; /* action code*/
  PW09W01.PW09M-XTRCD[PW09W-MAP-IDX] = VPKXTR01.XTRCD; /* trailer code*/
  PW09W01.PW09M-XTRFT3[PW09W-MAP-IDX] = VPKXTR01.XTRFT3; /* cubic feet*/
  PW09W01.PW09M-XXXSTAT[PW09W-MAP-IDX] = VPKXTR01.XXXSTAT; /* status*/
  PW09W01.PW09M-ZZZCHGCT[PW09W-MAP-IDX] = VPKXTR01.ZZZCHGCT;

   /* ------------------------------------------------------------*/
   /* also get trailer abrv for display.*/
   /* ------------------------------------------------------------*/
  if (VPKXTR01.XTRCD in XTRTBL.XTRCD)
    PW09W01.PW09M-XTR-DESCR[PW09W-MAP-IDX] = XTRTBL.XTRDESC[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex == 0) /* No trailer code*/
    PW09W01.PW09M-XTR-DESCR[PW09W-MAP-IDX] = "* XTRCD NOT IN XTRTBL* ";
  end

  PW09W00.PW09W-MAP-IDX = PW09W00.PW09W-MAP-IDX + 1; /* Increment line index*/


end // end PW09-115

// Add page to temporary storage
Function PW09-116()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  PW09W01.XXXTSLEN = PW09W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (PW09W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set PW09W01 empty; /* M001 display storage*/

    PW09W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW09W00.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW09-116

// Close selected set cursor
Function PW09-117()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4650" ("C1", SQLCA, VPKXTR01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PW09W00.XXXMODID = "117"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKXTR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW09-117

// Format and converse the map
Function PW09-120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    PW09W00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (PW09W00.PW09W-REQST-DATA-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (PW09W00.PW09W-FRMT-MAP-SW == "Y") /* Map to be formatted ?*/
      PW09-121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW09M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  PW09M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  PW09M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (PW09W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (PW09W00.XXXMSGNO != 0) /* Message to display*/

      if (PW09W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(PW09W00.XXXMSGNO);
      end /* Message number*/
    else
      PW09M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    PW09M001.XXXMODID = PW09W00.XXXMODID; /* Module identification*/

    set PW09M001 alarm; /* Indicate sound alarm*/

  end

  converse PW09M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  PW09W00.XXXMODID = " "; /* Module identification*/
  PW09W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = PW09M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = PW09M001.CAITEM; /* Application data*/


end // end PW09-120

// Format the display data
Function PW09-121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set PW09M001 initial; /* M001 input/output area*/

  PW09W00.PW09W-FRMT-MAP-SW = "N"; /* Format the map switch, off*/

   /* ------------------------------------------------------------*/
   /* Move warehouse to screen.*/
   /* ------------------------------------------------------------*/
  PW09M001.XWHABRV = PKWREC.XWHABRV; /* Warehouse from PKWREC*/
  PW09M001.XWHCD = PKWREC.XWHCD; /* Warehouse from PKWREC*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (PW09W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (PW09W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (PW09W00.PW09W-STOR-UPDATE-SW == "Y") /* Current page was changed*/

   /* Update temporary storage page*/
        PW09S-UPDT-TS-PAGE();
        PW09W00.PW09W-STOR-UPDATE-SW = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (PW09W00.XXXTSPAG > PW09W00.TA5TSQIX) /* Desired greater highest*/
        PW09W00.XXXTSPAG = PW09W00.TA5TSQIX; /* Default to highest*/
      end

   /* Obtain temporary storage page*/
      PW09S-READ-TS-PAGE();
    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set PW09M001.XXXLITPG skip; /* "PAGE" literal*/
    PW09M001.XXXTSPAG = PW09W00.XXXTSPAG; /* Current page*/
    set PW09M001.XXXLITOF skip; /* "OF" literal*/
    PW09M001.TA5TSQIX = PW09W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  PW09W00.PW09W-MAP-IDX = 1; /* Initialize line index*/

  while (PW09W00.PW09W-MAP-IDX <= 13 /* Until screen is full*/
   && PW09W01.PW09M-XTRCD[PW09W-MAP-IDX] > " ") /* or end of data*/

    if (PW09W00.PW09W-MAP-IDX == 1) /* First select field*/

      set PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] cursor, normal; /* set cursor*/
    else
      set PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] normal; /* Unprotect*/

    end

    PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] = PW09W01.PW09M-ACT-CD[PW09W-MAP-IDX];
    PW09M001.PW09M-XTRCD[PW09W-MAP-IDX] = PW09W01.PW09M-XTRCD[PW09W-MAP-IDX];
    PW09M001.PW09M-XTR-DESCR[PW09W-MAP-IDX] = PW09W01.PW09M-XTR-DESCR[PW09W-MAP-IDX];
    PW09M001.PW09M-XTRFT3[PW09W-MAP-IDX] = PW09W01.PW09M-XTRFT3[PW09W-MAP-IDX];

    PW09W00.PW09W-MAP-IDX = PW09W00.PW09W-MAP-IDX + 1;

  end


end // end PW09-121

// Check attention identifier
Function PW09-130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (PW09W00.PW09W-REQST-DATA-SW == "Y") /* Request for data*/
      set PW09W01 empty; /* M001 display storage*/
    end

    PW09W00.PW09W-FRMT-MAP-SW = "Y"; /* Format the map switch*/
    PW09W00.PW09W-REQST-DATA-SW = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (PW09M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      PW09-111(); /* Purge temporary storage*/

      XSPKS01(); /* Exit to another application*/

      set PW09M001.CATOAP cursor, bold; /* Highlight*/

    else

      PW09W00.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "PW09M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "PK0A"; /* TO application*/
    end

    PW09-111(); /* Purge temporary storage*/

    XSPKS01(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    PW09W00.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(12); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end PW09-130

// Reset highlighted fields
Function PW09-140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  PW09W00.PW09W-MAP-IDX = 1; /* Initialize line index*/

  while (PW09W00.PW09W-MAP-IDX <= 13 /* Until end of lines*/
   && PW09W01.PW09M-XTRCD[PW09W-MAP-IDX] > " ") /* or end of display*/

    set PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] normal;
    set PW09M001.PW09M-XTRCD[PW09W-MAP-IDX] normal;
    set PW09M001.PW09M-XTRFT3[PW09W-MAP-IDX] normal;

    PW09W00.PW09W-MAP-IDX = PW09W00.PW09W-MAP-IDX + 1; /* line index*/

  end

  set PW09M001.CATOAP initialAttributes; /* TO application*/
  set PW09M001.CAITEM initialAttributes; /* Application data*/


end // end PW09-140

// Verify data that was entered
Function PW09-150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (PW09M001.CAITEM > " ") /* Application data was entered*/

    PW09W00.XXXMODID = "150"; /* Module identification*/
    set PW09M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(15); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    PW09-151(); /* Verify scroll request*/

  end

    /* ------------------------------------------------------------*/
     /* If page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

  if (PW09W00.TA5TSQIX > 0) /* Page was formatted*/

    PW09W00.PW09W-MAP-IDX = 13; /* Initialize line index*/

    while (PW09W00.PW09W-MAP-IDX > 0) /* Until end of lines*/

      PW09-152(); /* Verify data in the line*/

      PW09W00.PW09W-MAP-IDX = PW09W00.PW09W-MAP-IDX - 1; /* line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end PW09-150

// Verify scroll request
Function PW09-151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && PW09W00.XXXTSPAG < 2)       /* and no previous pages*/

    PW09W00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(37); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && PW09W00.XXXTSPAG >= PW09W00.TA5TSQIX) /* and no more pages*/

    PW09W00.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(38); /* No more pages to display*/

  end

end // end PW09-151

// Verify data in the line
Function PW09-152()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not an 'A', 'C' or 'D'*/
   /* return error message.*/
   /* ------------------------------------------------------------*/

  if (PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] != 
  PW09W01.PW09M-ACT-CD[PW09W-MAP-IDX])
    if (PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] != "A"
     && PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] != "C"
     && PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] != "D"
     && PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] != " ")

      PW09W00.XXXMODID = "152"; /* Module identification*/
      set PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(35); /* Invalid action code*/
    else
      PW09W00.PW09W-STOR-UPDATE-SW = "Y"; /* activate i/o routines*/
    end
  else
    return;
  end

   /* ------------------------------------------------------------*/
   /* If delete, return.*/
   /* ------------------------------------------------------------*/

  if (PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] == "D")
    return;
  end

   /* ------------------------------------------------------------*/
   /* Check to see if user is changing trailer code.*/
   /* ------------------------------------------------------------*/

  if (PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] == "C")
    if (PW09M001.PW09M-XTRCD[PW09W-MAP-IDX] != 
    PW09W01.PW09M-XTRCD[PW09W-MAP-IDX]
     || PW09M001.PW09M-XTRCD[PW09W-MAP-IDX] == " ")
      set PW09M001.PW09M-XTRCD[PW09W-MAP-IDX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(379); /* Invalid fields*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If adding, the trailer code must be in the xtrtbl.*/
   /* ------------------------------------------------------------*/

  if (PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] == "A")
    if (PW09M001.PW09M-XTRCD[PW09W-MAP-IDX] in XTRTBL.XTRCD)
                             /* OK*/
    else
      PW09W00.XXXMODID = "152"; /* Module identification*/
      set PW09M001.PW09M-XTRCD[PW09W-MAP-IDX] cursor, bold; /* Highlight*/
      converseLib.validationFailed(342); /* Invalid fields*/
    end
  end

   /* ------------------------------------------------------------*/
   /* The trailer cubic must be greater than zer0.*/
   /* ------------------------------------------------------------*/

  if (PW09M001.PW09M-XTRFT3[PW09W-MAP-IDX] > 0)
                             /* OK*/
  else
    PW09W00.XXXMODID = "152"; /* Module identification*/
    set PW09M001.PW09M-XTRFT3[PW09W-MAP-IDX] cursor, bold; /* Highlight*/
    converseLib.validationFailed(342); /* Invalid fields*/
  end

end // end PW09-152

// Process valid input request
Function PW09-160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  PW09W00.PW09W-FRMT-MAP-SW = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* move the fields from the map into working storage.*/
   /* ------------------------------------------------------------*/

  PW09W00.PW09W-MAP-IDX = 1; /* Initialize line index*/

  while (PW09W00.PW09W-MAP-IDX <= 13) /* Until end of lines*/

    if (PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX] != " ")
   /* PW09W01.PW09M-ACT-CD(PW09W-MAP-IDX);*/
      PW09W01.PW09M-ACT-CD[PW09W-MAP-IDX] = PW09M001.PW09M-ACT-CD[PW09W-MAP-IDX];
      PW09W01.PW09M-XTRCD[PW09W-MAP-IDX] = PW09M001.PW09M-XTRCD[PW09W-MAP-IDX];
      PW09W01.PW09M-XTRFT3[PW09W-MAP-IDX] = PW09M001.PW09M-XTRFT3[PW09W-MAP-IDX];
      PW09W00.PW09W-STOR-UPDATE-SW = "Y"; /* Storage update switch*/

    end

    PW09W00.PW09W-MAP-IDX = PW09W00.PW09W-MAP-IDX + 1; /* line index*/

  end

   /* ------------------------------------------------------------*/
   /* If any additions, changes or deletions then try to do the I/O.*/
   /* ------------------------------------------------------------*/

  PW09W00.PW09W-MAP-IDX = 1; /* Initialize line index*/

  if (PW09W00.PW09W-STOR-UPDATE-SW == "Y") /* UPDATES TO PROCESS ?*/
    XX0XS01(); /* get date and for zz-family*/

    while (PW09W00.PW09W-MAP-IDX <= 13) /* Until end of lines*/
      if (PW09W01.PW09M-ACT-CD[PW09W-MAP-IDX] == "A")
        PW09-161(); /* perform ADD to database routine*/
        PW09W00.PW09W-STOR-UPDATE-SW = "Y"; /* Storage update switch*/
      end
      if (PW09W01.PW09M-ACT-CD[PW09W-MAP-IDX] == "C")
        PW09-162(); /* perform CHG to database routine*/
        PW09W00.PW09W-STOR-UPDATE-SW = "Y"; /* Storage update switch*/
      end
      if (PW09W01.PW09M-ACT-CD[PW09W-MAP-IDX] == "D")
        PW09-163(); /* perform DEL to database routine*/
        PW09W00.PW09W-STOR-UPDATE-SW = "Y"; /* Storage update switch*/
      end
      PW09W00.PW09W-MAP-IDX = PW09W00.PW09W-MAP-IDX + 1; /* up line index*/
    end
    if (converseVar.validationMsgNum != 0)
      exit stack; /* Go back and re-display if DB I/O*/
                                   /* didnt work*/
    end
    PW09W00.PW09W-STOR-UPDATE-SW = "N"; /* All done*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* commit the changes*/
  end

   /* ------------------------------------------------------------*/
   /* If program control returns to here successful updates were*/
   /* made. Now check for screen scrolling.*/
   /* ------------------------------------------------------------*/

  PW09W00.PW09W-REQST-DATA-SW = "Y"; /* read DB for data*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    PW09W00.XXXTSPAG = PW09W00.XXXTSPAG - 1; /* Decrement page number*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    PW09W00.XXXTSPAG = PW09W00.XXXTSPAG + 1; /* Increment page number*/

  end

  exit stack;
end // end PW09-160

// Process additions to VPKXTR01
Function PW09-161()
   /* ------------------------------------------------------------*/
   /* Check to see if row already exsists.*/
   /* ------------------------------------------------------------*/

  set VPKXTR01 empty; /* Clear row storage area*/

  VPKXTR01.XWHCD = PKWREC.XWHCD;
  VPKXTR01.XTRCD = PW09W01.PW09M-XTRCD[PW09W-MAP-IDX];

  try
    call "IO4650" ("S ", SQLCA, VPKXTR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code is error*/
      converseLib.validationFailed(44); /* Indicate error*/
      set PW09M001.PW09M-XTRCD[PW09W-MAP-IDX] cursor, bold; /* HIGHLIGHT*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
    /* ADD a row to the table.*/
   /* ------------------------------------------------------------*/

  set VPKXTR01 empty; /* Clear row storage area*/

  VPKXTR01.XWHCD = PKWREC.XWHCD;
  VPKXTR01.XTRCD = PW09W01.PW09M-XTRCD[PW09W-MAP-IDX];
  VPKXTR01.XTRFT3 = PW09W01.PW09M-XTRFT3[PW09W-MAP-IDX];
  VPKXTR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VPKXTR01.XXXSTAT = "A";

  try
    call "IO4650" ("A ", SQLCA, VPKXTR01) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Select table row*/

   /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -911) /* Busy signal*/
      converseLib.validationFailed(28);
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(29); /* DB error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    end
  end

  PW09W00.XXXMODID = "161"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

   /* ------------------------------------------------------------*/
   /* Set up call to TA0020*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW09-161 ADD ROW TO VPKXTR01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKXTR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPKXTR01.VPKXTR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW09-161

// Process changes to VPKXTR01
Function PW09-162()
   /* ------------------------------------------------------------*/
   /* CHANGE a row in the table.*/
   /* ------------------------------------------------------------*/

  set VPKXTR01 empty; /* Clear row storage area*/

  VPKXTR01.XWHCD = PKWREC.XWHCD;
  VPKXTR01.XTRCD = PW09W01.PW09M-XTRCD[PW09W-MAP-IDX];
  VPKXTR01.XTRFT3 = PW09W01.PW09M-XTRFT3[PW09W-MAP-IDX];
  VPKXTR01.XXXSTAT = PW09W01.PW09M-XXXSTAT[PW09W-MAP-IDX];
  VPKXTR01.ZZZCHGCT = PW09W01.PW09M-ZZZCHGCT[PW09W-MAP-IDX];
  VPKXTR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPKXTR01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO4650" ("U ", SQLCA, VPKXTR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      converseLib.validationFailed(8); /* Indicate error*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Busy signal*/
        converseLib.validationFailed(28);
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(29); /* DB error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end
    end
  end

  PW09W00.XXXMODID = "162"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

   /* ------------------------------------------------------------*/
   /* Set up call to TA0020*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW09-162 UPDATE ROW ON VPKXTR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKXTR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPKXTR01.VPKXTR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW09-162

// delete rows from VPKXTR01
Function PW09-163()
   /* ------------------------------------------------------------*/
   /* delete a row from the table.*/
   /* ------------------------------------------------------------*/

  set VPKXTR01 empty; /* Clear row storage area*/

  VPKXTR01.XWHCD = PKWREC.XWHCD;
  VPKXTR01.XTRCD = PW09W01.PW09M-XTRCD[PW09W-MAP-IDX];
   /* MOVE PW09W01.PW09M-XTRFT3(PW09W-MAP-IDX) TO VPKXTR01.XTRFT3;*/

  try
    call "IO4650" ("D ", SQLCA, VPKXTR01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
      converseLib.validationFailed(8); /* Indicate error*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Busy signal*/
        converseLib.validationFailed(28);
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(29); /* DB error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      end
    end
  end

  PW09W00.XXXMODID = "161"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

   /* ------------------------------------------------------------*/
   /* Set up call to TA0020*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "PW09-163 DELETE ROW FROM VPKXTR01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKXTR01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPKXTR01.VPKXTR01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end PW09-163

// Read temporary storage page
Function PW09S-READ-TS-PAGE()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  PW09W01.XXXTSLEN = PW09W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = PW09W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (PW09W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW09W00.XXXMODID = "RTP"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW09S-READ-TS-PAGE

// Update temporary storage page
Function PW09S-UPDT-TS-PAGE()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (PW09W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  PW09W00.XXXMODID = "UPD"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = PW09W00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end PW09S-UPDT-TS-PAGE

//*** RECORD=PW09W00 ****
// Working storage for PW0X
// ***********************
Record PW09W00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 PW09W-REQST-DATA-SW PW09W-REQST-DATA-SW ; 
  10 PW09W-STOR-UPDATE-SW PW09W-STOR-UPDATE-SW ; 
  10 PW09W-DISPLAY-SW PW09W-DISPLAY-SW ; 
  10 PW09W-FRMT-MAP-SW PW09W-FRMT-MAP-SW ; 
  10 PW09W-XTR-CSR-SW PW09W-XTR-CSR-SW ; 
  10 PW09W-MAP-IDX PW09W-MAP-IDX ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
end // end PW09W00

//*** RECORD=PW09W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record PW09W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(455) ; 
    10 PW09M-ACT-CD PW09M-ACT-CD [13] ; 
    10 PW09M-XTRCD PW09M-XTRCD [13] ; 
    10 PW09M-XTR-DESCR PW09M-XTR-DESCR [13] ; 
    10 PW09M-XTRFT3 PW09M-XTRFT3 [13] ; 
    10 PW09M-XXXSTAT PW09M-XXXSTAT [13] ; 
    10 PW09M-ZZZCHGCT PW09M-ZZZCHGCT [13] ; 
end // end PW09W01

//*** RECORD=VPKXTR01 ****
// ***********************  TEXT TABLE  ***********************
// 
// DB2 TABLE:           DPICK.VPKXTR01
// 
// COPYLIB MEMBER:      DCL01059
// 
// I/O MOD:             IO4650
// 
// KEY TO DB2 TABLE:    XWHCD
//                      XTRCD
// 
// DATE CREATED:        06/15/92
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 06-15-92  GRAY       INITIAL RECORD CREATION
// ************************
Record VPKXTR01 type basicRecord
  5 VPKXTR01-GROUP VPKXTR01-GROUP ; 
    10 VPKXTR01-KEY VPKXTR01-KEY ; 
      15 XWHCD XWHCD ; 
      15 XTRCD XTRCD ; 
    10 XTRFT3 XTRFT3 ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VPKXTR01

DataItem PW09M-ACT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW09M-XTR-DESCR char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW09M-XTRCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW09M-XTRFT3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW09M-XXXSTAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PW09M-ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map display switch
DataItem PW09W-DISPLAY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format screen switch
DataItem PW09W-FRMT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen index
DataItem PW09W-MAP-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem PW09W-REQST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage update switch
DataItem PW09W-STOR-UPDATE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor for dpick.vpoolh01
DataItem PW09W-XTR-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VPKXTR01-GROUP char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record key
DataItem VPKXTR01-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

