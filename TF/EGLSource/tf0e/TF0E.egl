package tf0e;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=TF0E ****
// ************************************************************
// * applid:    tf0g    zip/carrier/destination definition
// *                        inquiry/update
// ************************************************************
// * maint log
// *  when      who     what
// *-------- -------- -----------------------------------------
// *02/02/87  snoble  original creation of prototype
// *05/30/89  jwood   added xssegtr logic, noncsp option usage
// *03/06/91  rvakel  table changes:  regenned to pick up the
// *                  new TFAREC.
// *04/05/94  Ryonke  Convert TFCREC fields to varchar logic.
// *02/01/98  esmit2  Add transfer to TF0M (Apparel Retrofit).
// *02/27/01  pvenka  Added service id in the screen TF0EM001
// *                  to make the application compatible with
// *                  the added service code in the GOAL
// *                  VCARR003 and the field will have the
// *                  service level id.
// *05/18/01  pvenka  Made the carrier scac cd and the carr svc
// *                  id a required field when the option
// *                  selected is "c" and "a".
// *12/19/01  rbalam  increased the scroll limit from 500 to
// *                   600 in TF0ESO3.
// *10/27/04  bmahal  increased the scroll limit from 600 to
// *                  700 in TF0ESO3.
// ************************************************************
// *********************
Program TF0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TF0EW01 TF0EW01; // record
  TF0EW02 TF0EW02; // record
  TF8REC TF8REC; // record
  TFAREC TFAREC; // record
  TFCREC TFCREC; // record
  TFWREC TFWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use TF0EM.TF0EM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TF0E010: TF0E010();
  end // end main
end // end TF0E

// program control
Function TF0E010()

      /* *********************************************************/
      /* * this process controls entire program process control **/
      /* * transfer to other applications occurs in converse    **/
      /* *********************************************************/

  XSENTRY(); /* check security*/

  XSSEGTR(); /* set segmented transaction id*/

  XSTFS01(); /* check traffic security*/

  TF0E100(); /* init pgm areas*/

      /* control pgm converse*/

  TFAREC.TFAPFL1 = "N";

  while (TFAREC.TFAPFL1 == "N")
    TF0E200();
  end

   /* ************************************************************/
end // end TF0E010

// program initialization
Function TF0E100()

      /* *********************************************************/
      /* * init program areas                                   **/
      /* *********************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* SET TF7REC EMPTY;*/
  set TF8REC empty;
   /* DLVRUSA PVENKA CHANGES END*/
  set TFAREC empty;
  set TFCREC empty;
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  TA1REC.TA1MAP = "TF0EM001";

      /* init map*/

  TF0ESO1(); /* check if inquiry or update mode*/

   /* ************************************************************/
end // end TF0E100

// process map
Function TF0E200()

      /* *********************************************************/
      /* * this process controls the converse for the map and   **/
      /* * the processing of the map                            **/
      /* *********************************************************/

   /* ************************************************************/
  converse TF0EM001 ;
   /* ************************************************************/

  if (converseVar.eventKey is pa2) /* cancel*/
    COMMAREA.CATOAP = "TF0E";
    COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
    XSEXIT();
    TF0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
  else
    if (TF0EM001.CATOAP > " ") /* continue*/
      COMMAREA.CATOAP = TF0EM001.CATOAP;
      COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
      XSEXIT();
      TF0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CATOAP = " ";
      set TF0EM001.CATOAP cursor, bold;
    else
      if (converseVar.eventKey is pf1) /* help*/
        COMMAREA.CAUSERA = " "; /* clear user commarea*/
        COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
        XSPF1();
        TF0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
        COMMAREA.CATOAP = " ";
      else
        if (converseVar.eventKey is pf3) /* exit to menu*/
          COMMAREA.CATOAP = "TF0A";
          COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
          XSEXIT();
          TF0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CATOAP = " ";
        else
          if (converseVar.eventKey is pf4) /* master menu*/
            COMMAREA.CAUSERA = " "; /* clear user commarea*/
            COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
            XSPF4();
            TF0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
            COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
            COMMAREA.CATOAP = " ";
          else
            if (converseVar.eventKey is pf5) /* warehouse carrier screen*/
              if (COMMAREA.XWHCD == "51")
                COMMAREA.CATOAP = "TF0M";
                COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
                XSEXIT();
                TF0EM001.VAGen_EZEMSG = COMMAREA.CAMSG;
                COMMAREA.CATOAP = " ";
              else
                converseLib.clearScreen();
                 /* assume bad pa key*/
                converseLib.validationFailed(002); /* invalid pf key*/
              end
            else
              if (converseVar.eventKey is enter /* enter only*/
               || converseVar.eventKey is pf7   /* scroll backward*/
               || converseVar.eventKey is pf8   /* scroll forward*/
               || converseVar.eventKey is pf12) /* edit only*/
                TF0ESI0(); /* pf7, pf8, pf12 and enter*/
              else
                converseLib.clearScreen();
                 /* assume bad pa key*/
                converseLib.validationFailed(002); /* invalid pf key*/
              end
            end
          end
        end
      end
    end
  end

   /* ************************************************************/
end // end TF0E200

// add : location : 0
Function TF0ES-XSTF7A0()

   /* ************************************************************/
   /* *** add unique row in: destination table                ****/
   /* *** using the std i/o processing version #0             ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all row/rec moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -803 = adding duplicate row - setup dupl row msg  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row for inquiry                       ****/
   /* *** note: 0 return code results in the -803             ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'S ',SQLCA,TF7REC (NOMAPS,NONCSP;  /* <== selct uni. row*/
  call "VCARR003" ("S ", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes}; /* <== select unique row*/
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF1R0 ";
    /* DLVRUSA PVENKA CHANGES BEGIN*/
    /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
    TA1REC.TA1LOCAT[1] = "VCARR003";
    /* DLVRUSA PVENKA CHANGES END*/
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DPICK   ";
    /* DLVRUSA PVENKA CHANGES BEGIN*/
    /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
    TA1REC.TA1TBLVU = "VCARR003";
    /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
    TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
    /* DLVRUSA PVENKA CHANGES END*/
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** insert row                                          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'A ',SQLCA,TF7REC (NOMAPS,NONCSP;  /* <=== add row*/
  call "VCARR003" ("A ", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes}; /* <=== add row*/
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF1A0 ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
  TA1REC.TA1LOCAT[1] = "VCARR003";
   /* DLVRUSA PVENKA CHANGES END*/
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
  TA1REC.TA1TBLVU = "VCARR003";
   /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
  TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
   /* DLVRUSA PVENKA CHANGES END*/
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end TF0ES-XSTF7A0

// close : location : 0
Function TF0ES-XSTF7C1()

   /* ************************************************************/
   /* *** close select set of: destination table              ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -501 = cursor already closed - return 0           ****/
   /* ***   -507 = should be used if native sql is used       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'C1',SQLCA,TF7REC (NOMAPS,NONCSP;  /* <== close slct set*/
  call "VCARR003" ("C1", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes}; /* <== close slct set*/
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF1C0 ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
  TA1REC.TA1LOCAT[1] = "VCARR003";
   /* DLVRUSA PVENKA CHANGES END*/
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DPICK   ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
  TA1REC.TA1TBLVU = "VCARR003";
   /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
  TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
   /* DLVRUSA PVENKA CHANGES END*/
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end TF0ES-XSTF7C1

// delete : location : 0
Function TF0ES-XSTF7D0()

   /* ************************************************************/
   /* *** delete unique row in: destination table             ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete unique row                                   ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'D ',SQLCA,TF7REC (NOMAPS,NONCSP;  /* <=== slct uni row*/
  call "VCARR003" ("D ", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes}; /* <=== slct unique row*/
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF1D0 ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
  TA1REC.TA1LOCAT[1] = "VCARR003";
   /* DLVRUSA PVENKA CHANGES END*/
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
  TA1REC.TA1TBLVU = "VCARR003";
   /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
  TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
   /* DLVRUSA PVENKA CHANGES END*/
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end TF0ES-XSTF7D0

// fetch : location : 0
Function TF0ES-XSTF7F1()

   /* ************************************************************/
   /* *** fetch next row from: destination table              ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: +100 - not found was detected as part of the  ****/
   /* ***       select set previously executed                ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = EOF                                        ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'N1',SQLCA,TF7REC (NOMAPS,NONCSP;  /* <=== sel next row*/
  call "VCARR003" ("N1", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select next row*/
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF1F0 ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
  TA1REC.TA1LOCAT[1] = "VCARR003";
   /* DLVRUSA PVENKA CHANGES END*/
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DPICK   ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
  TA1REC.TA1TBLVU = "VCARR003";
   /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
  TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
   /* DLVRUSA PVENKA CHANGES END*/
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end TF0ES-XSTF7F1

// inquiry : carrier code : 0
Function TF0ES-XSTF7I0()

   /* ************************************************************/
   /* *** select unique row from:  carrier code               ****/
   /* *** using the std module:  IO0860                       ****/
   /* *** note: can select only                               ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'S ',SQLCA,TF7REC (NOMAPS,NONCSP;*/
  call "VCARR003" ("S ", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes};
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSTF1I0 ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
  TA1REC.TA1LOCAT[1] = "VCARR003";
   /* DLVRUSA PVENKA CHANGES END*/
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
  TA1REC.TA1TBLVU = "VCARR003";
   /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
  TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
   /* DLVRUSA PVENKA CHANGES END*/
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end TF0ES-XSTF7I0

// replace : location : 0
Function TF0ES-XSTF7R0()

   /* ************************************************************/
   /* *** replace unique row in: destination table            ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments zzzchgct by +1 and uses ****/
   /* ***       current data & time for zzzchgdt & zzzchgtm   ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'U ',SQLCA,TF7REC (NOMAPS,NONCSP;  /* <=== slct uniq row*/
  call "VCARR003" ("U ", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes}; /* <=== slct unique row*/
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF1R0 ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
  TA1REC.TA1LOCAT[1] = "VCARR003";
   /* DLVRUSA PVENKA CHANGES END*/
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
  TA1REC.TA1TBLVU = "VCARR003";
   /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
  TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
   /* DLVRUSA PVENKA CHANGES END*/
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end TF0ES-XSTF7R0

// setinq : location : 0
Function TF0ES-XSTF7S1()

   /* ************************************************************/
   /* *** select set of rows from: destination table          ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: +100 - not found can't be detected until the  ****/
   /* ***       first fetch is executed                       ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = none found - setup not fnd error/msg       ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique key                          ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'S1',SQLCA,TF7REC (NOMAPS,NONCSP;  /* <=== selct set row*/
  call "VCARR003" ("S1", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select set row*/
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF1S0 ";
    /* DLVRUSA PVENKA CHANGES BEGIN*/
    /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
    TA1REC.TA1LOCAT[1] = "VCARR003";
    /* DLVRUSA PVENKA CHANGES END*/
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DPICK   ";
    /* DLVRUSA PVENKA CHANGES BEGIN*/
    /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
    TA1REC.TA1TBLVU = "VCARR003";
    /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
    TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
    /* DLVRUSA PVENKA CHANGES END*/
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* ************************************************************/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* CALL VCARR002 'N1',SQLCA,TF7REC (NOMAPS,NONCSP;  /* <=== selct set row*/
  call "VCARR003" ("N1", SQLCA, TF8REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select set row*/
   /* DLVRUSA PVENKA CHANGES END*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF1S0 ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1LOCAT(1);*/
  TA1REC.TA1LOCAT[1] = "VCARR003";
   /* DLVRUSA PVENKA CHANGES END*/
  TA1REC.TA1LOCAT[3] = "FIRST   ";
  TA1REC.TA1LOCAT[4] = "FETCH   ";
  TA1REC.TA1DBASE = "DPICK   ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE 'VCARR002' TO TA1REC.TA1TBLVU;*/
  TA1REC.TA1TBLVU = "VCARR003";
   /* MOVE TF7REC.TF7KEYS TO TA1REC.TA1TBLKE;*/
  TA1REC.TA1TBLKE = TF8REC.TF8KEYS;
   /* DLVRUSA PVENKA CHANGES END*/
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end TF0ES-XSTF7S1

// edit screen
Function TF0ESE0()

         /* edit sreen*/

  TFAREC.TFAWSUB1 = 5;

  while (TFAREC.TFAWSUB1 >= 1)

    if (TF0EM001.TF0EMACT[TFAWSUB1] > " ")
      TF0ESE5(); /* bubble sort warehouse*/
      TF0ESE6(); /* edit bar code flags*/
      TF0ESE3(); /* edit warehouse values*/
      TF0ESE8(); /* edit abrv and short abrv*/
      TF0ESE2(); /* edit yes no flags*/
      TF0ESE4(); /* edit carr code, abrv s abrv*/
      TF0ESE7(); /* edit activity column*/
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;

  end

end // end TF0ESE0

// edit yes no flags
Function TF0ESE2()

         /* edit yes and no flags*/

  if (COMMAREA.CACLVL[10] == "N"
   && TF0EM001.TF0EMACT[TFAWSUB1] == "A")
    TF0EM001.TF1CRQFL[TFAWSUB1] = "N";
  end

  if (TF0EM001.TF1CRQFL[TFAWSUB1] == "Y"
   || TF0EM001.TF1CRQFL[TFAWSUB1] == "N")
       /* next sentence*/
  else
    converseLib.validationFailed(47);
       /* invalid value - valid values are 'y or 'n'*/
    set TF0EM001.TF1CRQFL[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF1ECARF[TFAWSUB1] == "Y"
   || TF0EM001.TF1ECARF[TFAWSUB1] == "N")
       /* next sentence*/
  else
    converseLib.validationFailed(47);
       /* invalid value - valid values are 'y or 'n'*/
    set TF0EM001.TF1ECARF[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF1ACARF[TFAWSUB1] == "Y"
   || TF0EM001.TF1ACARF[TFAWSUB1] == "N")
       /* next sentence*/
  else
    converseLib.validationFailed(47);
       /* invalid value - valid values are 'y or 'n'*/
    set TF0EM001.TF1ACARF[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF1MCARF[TFAWSUB1] == "Y"
   || TF0EM001.TF1MCARF[TFAWSUB1] == "N")
       /* next sentence*/
  else
    converseLib.validationFailed(47);
       /* invalid value - valid values are 'y or 'n'*/
    set TF0EM001.TF1MCARF[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF1FCARF[TFAWSUB1] == "Y"
   || TF0EM001.TF1FCARF[TFAWSUB1] == "N")
       /* next sentence*/
  else
    converseLib.validationFailed(47);
       /* invalid value - valid values are 'y or 'n'*/
    set TF0EM001.TF1FCARF[TFAWSUB1] cursor, bold;
  end

end // end TF0ESE2

// edit warehouse values
Function TF0ESE3()

         /* edit warehouse values*/

  if (TF0EM001.TF0EMW15[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW14[TFAWSUB1] == TF0EM001.TF0EMW15[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW15[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW15[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW15[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW14[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW13[TFAWSUB1] == TF0EM001.TF0EMW14[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW14[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW14[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW14[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW13[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW12[TFAWSUB1] == TF0EM001.TF0EMW13[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW13[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW13[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW13[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW12[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW11[TFAWSUB1] == TF0EM001.TF0EMW12[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW12[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW12[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW12[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW11[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW10[TFAWSUB1] == TF0EM001.TF0EMW11[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW11[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW11[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW11[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW10[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW09[TFAWSUB1] == TF0EM001.TF0EMW10[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW10[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW10[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW10[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW09[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW08[TFAWSUB1] == TF0EM001.TF0EMW09[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW09[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW09[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW09[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW08[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW07[TFAWSUB1] == TF0EM001.TF0EMW08[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW08[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW08[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW08[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW07[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW06[TFAWSUB1] == TF0EM001.TF0EMW07[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW07[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW07[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW07[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW06[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW05[TFAWSUB1] == TF0EM001.TF0EMW06[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW06[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW06[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW06[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW05[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW04[TFAWSUB1] == TF0EM001.TF0EMW05[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW05[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW05[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW05[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW04[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW03[TFAWSUB1] == TF0EM001.TF0EMW04[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW04[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW04[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW04[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW03[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW02[TFAWSUB1] == TF0EM001.TF0EMW03[TFAWSUB1])
      converseLib.validationFailed(49);
        /* duplicate warehouse*/
      set TF0EM001.TF0EMW03[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW03[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW03[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW02[TFAWSUB1] <= " ")
      /* next sentence*/
  else
    if (TF0EM001.TF0EMW01[TFAWSUB1] == TF0EM001.TF0EMW02[TFAWSUB1])
      converseLib.validationFailed(49);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW02[TFAWSUB1] cursor, bold;
    end
    if (TF0EM001.TF0EMW02[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW02[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0EM001.TF0EMW01[TFAWSUB1] <= " ")
    converseLib.validationFailed(11);
      /* invalid warehouse code entered <please re-enter>*/
    set TF0EM001.TF0EMW01[TFAWSUB1] cursor, bold;
  else
    if (TF0EM001.TF0EMW01[TFAWSUB1] in XWHTBL.XWHCD)
       /* next sentence*/
    else
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      set TF0EM001.TF0EMW01[TFAWSUB1] cursor, bold;
    end
  end

end // end TF0ESE3

// edit carr cd, nm, abrv
Function TF0ESE4()

         /* edit carrier code, carrier abbreviation and short*/
         /* abbreviation*/

  if (TF0EM001.TF1CARNM[TFAWSUB1] == " ")
    converseLib.validationFailed(48);
       /* required field ommitted - please enter*/
    set TF0EM001.TF1CARNM[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF1CARCD[TFAWSUB1] == " ")
    converseLib.validationFailed(48);
       /* required field ommitted - please enter*/
    set TF0EM001.TF1CARCD[TFAWSUB1] cursor, bold;
  end

  if (TF0EMACT[TFAWSUB1] == "C"
   || TF0EM001.TF0EMACT[TFAWSUB1] == "D")
    if (TF0EM001.TF1CARCD[TFAWSUB1] != TF0EW01.TF1CARCD[TFAWSUB1])
      TF0EM001.TF1CARCD[TFAWSUB1] = TF0EW01.TF1CARCD[TFAWSUB1];
      converseLib.validationFailed(41);
       /* cannot change zip code field on a change*/
      set TF0EM001.TF1CARCD[TFAWSUB1] cursor, bold;
    end
  end

end // end TF0ESE4
// warehouse bubble sort
Function TF0ESE5()

      /* warehouse bubble sort to sort the warehouse array into*/
      /* warehouse sequence (w/h cd and corresponding bar cd fl)*/

      /* load work arrays*/

  TF0EW01.XWHCD[1] = TF0EM001.TF0EMW01[TFAWSUB1];
  TF0EW01.XWHCD[2] = TF0EM001.TF0EMW02[TFAWSUB1];
  TF0EW01.XWHCD[3] = TF0EM001.TF0EMW03[TFAWSUB1];
  TF0EW01.XWHCD[4] = TF0EM001.TF0EMW04[TFAWSUB1];
  TF0EW01.XWHCD[5] = TF0EM001.TF0EMW05[TFAWSUB1];
  TF0EW01.XWHCD[6] = TF0EM001.TF0EMW06[TFAWSUB1];
  TF0EW01.XWHCD[7] = TF0EM001.TF0EMW07[TFAWSUB1];
  TF0EW01.XWHCD[8] = TF0EM001.TF0EMW08[TFAWSUB1];
  TF0EW01.XWHCD[9] = TF0EM001.TF0EMW09[TFAWSUB1];
  TF0EW01.XWHCD[10] = TF0EM001.TF0EMW10[TFAWSUB1];
  TF0EW01.XWHCD[11] = TF0EM001.TF0EMW11[TFAWSUB1];
  TF0EW01.XWHCD[12] = TF0EM001.TF0EMW12[TFAWSUB1];
  TF0EW01.XWHCD[13] = TF0EM001.TF0EMW13[TFAWSUB1];
  TF0EW01.XWHCD[14] = TF0EM001.TF0EMW14[TFAWSUB1];
  TF0EW01.XWHCD[15] = TF0EM001.TF0EMW15[TFAWSUB1];
  TF0EW01.TF1PBRFL[1] = TF0EM001.TF0EMB01[TFAWSUB1];
  TF0EW01.TF1PBRFL[2] = TF0EM001.TF0EMB02[TFAWSUB1];
  TF0EW01.TF1PBRFL[3] = TF0EM001.TF0EMB03[TFAWSUB1];
  TF0EW01.TF1PBRFL[4] = TF0EM001.TF0EMB04[TFAWSUB1];
  TF0EW01.TF1PBRFL[5] = TF0EM001.TF0EMB05[TFAWSUB1];
  TF0EW01.TF1PBRFL[6] = TF0EM001.TF0EMB06[TFAWSUB1];
  TF0EW01.TF1PBRFL[7] = TF0EM001.TF0EMB07[TFAWSUB1];
  TF0EW01.TF1PBRFL[8] = TF0EM001.TF0EMB08[TFAWSUB1];
  TF0EW01.TF1PBRFL[9] = TF0EM001.TF0EMB09[TFAWSUB1];
  TF0EW01.TF1PBRFL[10] = TF0EM001.TF0EMB10[TFAWSUB1];
  TF0EW01.TF1PBRFL[11] = TF0EM001.TF0EMB11[TFAWSUB1];
  TF0EW01.TF1PBRFL[12] = TF0EM001.TF0EMB12[TFAWSUB1];
  TF0EW01.TF1PBRFL[13] = TF0EM001.TF0EMB13[TFAWSUB1];
  TF0EW01.TF1PBRFL[14] = TF0EM001.TF0EMB14[TFAWSUB1];
  TF0EW01.TF1PBRFL[15] = TF0EM001.TF0EMB15[TFAWSUB1];

      /* first set all unused warehouse buckets to 99*/
      /* and default all blank bar cd flags to 'n' (no)*/

  TFAREC.TFAWSUB2 = 1;

  while (TFAREC.TFAWSUB2 <= 15)

    if (TF0EW01.XWHCD[TFAWSUB2] <= " ")
      TF0EW01.XWHCD[TFAWSUB2] = "99";
    end

    if (TF0EW01.TF1PBRFL[TFAWSUB2] <= " ")
      TF0EW01.TF1PBRFL[TFAWSUB2] = "N";
    end

    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;

  end

      /* now sort the arrays into warehouse sequence*/
      /* tfawsub2 points to the highest entry we have processed*/
      /* tfawsub3 points to the current entry we are processing*/
      /* tfawsub4 points to the entry immediately prior to sub3*/

      /* theory of operation:*/
        /* the examination process begins with the second entry*/
        /* in the array.  at the end of the process loop sub2 is*/
        /* incremented to 3 and so on.  each loop examines each*/
        /* adjacently lower element in the array to see if the*/
        /* entries need to be switched.  if not, the loop ends*/
        /* as the entries to that point are already in sequence.*/
        /* if the entries need to be switched, the switch is made*/
        /* and the next two lower elements are checked.  this*/
        /* continues until the lowest elements a compared or*/
        /* no switch is made.  this forces a particular element*/
        /* into it's correct position thus requiring only one*/
        /* complete pass of the array, unlike other bubble sorts.*/

  TFAREC.TFAWSUB2 = 1;

  while (TFAREC.TFAWSUB2 < 15)

    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;

    TFAREC.TFAWSUB3 = TFAREC.TFAWSUB2;

    while (TFAREC.TFAWSUB3 >= 2)

      TFAREC.TFAWSUB4 = TFAWSUB3 - 1;

      if (TF0EW01.XWHCD[TFAWSUB3] >= TF0EW01.XWHCD[TFAWSUB4])
        TFAREC.TFAWSUB3 = 0;
      else
        TF0EW02.XWHCD = TF0EW01.XWHCD[TFAWSUB3];
        TF0EW01.XWHCD[TFAWSUB3] = TF0EW01.XWHCD[TFAWSUB4];
        TF0EW01.XWHCD[TFAWSUB4] = TF0EW02.XWHCD;
        TF0EW02.TF1PBRFL = TF0EW01.TF1PBRFL[TFAWSUB3];
        TF0EW01.TF1PBRFL[TFAWSUB3] = TF0EW01.TF1PBRFL[TFAWSUB4];
        TF0EW01.TF1PBRFL[TFAWSUB4] = TF0EW02.TF1PBRFL;
        TFAREC.TFAWSUB3 = TFAREC.TFAWSUB3 - 1;
      end
    end
  end

  TFAREC.TFAWSUB2 = 1;

  while (TFAREC.TFAWSUB2 <= 15)

    if (TF0EW01.XWHCD[TFAWSUB2] == "99")
      TF0EW01.XWHCD[TFAWSUB2] = " ";
      TF0EW01.TF1PBRFL[TFAWSUB2] = " ";
    end

    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;

  end

      /* reload map from arrays*/

  TF0EM001.TF0EMW01[TFAWSUB1] = TF0EW01.XWHCD[1];
  TF0EM001.TF0EMW02[TFAWSUB1] = TF0EW01.XWHCD[2];
  TF0EM001.TF0EMW03[TFAWSUB1] = TF0EW01.XWHCD[3];
  TF0EM001.TF0EMW04[TFAWSUB1] = TF0EW01.XWHCD[4];
  TF0EM001.TF0EMW05[TFAWSUB1] = TF0EW01.XWHCD[5];
  TF0EM001.TF0EMW06[TFAWSUB1] = TF0EW01.XWHCD[6];
  TF0EM001.TF0EMW07[TFAWSUB1] = TF0EW01.XWHCD[7];
  TF0EM001.TF0EMW08[TFAWSUB1] = TF0EW01.XWHCD[8];
  TF0EM001.TF0EMW09[TFAWSUB1] = TF0EW01.XWHCD[9];
  TF0EM001.TF0EMW10[TFAWSUB1] = TF0EW01.XWHCD[10];
  TF0EM001.TF0EMW11[TFAWSUB1] = TF0EW01.XWHCD[11];
  TF0EM001.TF0EMW12[TFAWSUB1] = TF0EW01.XWHCD[12];
  TF0EM001.TF0EMW13[TFAWSUB1] = TF0EW01.XWHCD[13];
  TF0EM001.TF0EMW14[TFAWSUB1] = TF0EW01.XWHCD[14];
  TF0EM001.TF0EMW15[TFAWSUB1] = TF0EW01.XWHCD[15];
  TF0EM001.TF0EMB01[TFAWSUB1] = TF0EW01.TF1PBRFL[1];
  TF0EM001.TF0EMB02[TFAWSUB1] = TF0EW01.TF1PBRFL[2];
  TF0EM001.TF0EMB03[TFAWSUB1] = TF0EW01.TF1PBRFL[3];
  TF0EM001.TF0EMB04[TFAWSUB1] = TF0EW01.TF1PBRFL[4];
  TF0EM001.TF0EMB05[TFAWSUB1] = TF0EW01.TF1PBRFL[5];
  TF0EM001.TF0EMB06[TFAWSUB1] = TF0EW01.TF1PBRFL[6];
  TF0EM001.TF0EMB07[TFAWSUB1] = TF0EW01.TF1PBRFL[7];
  TF0EM001.TF0EMB08[TFAWSUB1] = TF0EW01.TF1PBRFL[8];
  TF0EM001.TF0EMB09[TFAWSUB1] = TF0EW01.TF1PBRFL[9];
  TF0EM001.TF0EMB10[TFAWSUB1] = TF0EW01.TF1PBRFL[10];
  TF0EM001.TF0EMB11[TFAWSUB1] = TF0EW01.TF1PBRFL[11];
  TF0EM001.TF0EMB12[TFAWSUB1] = TF0EW01.TF1PBRFL[12];
  TF0EM001.TF0EMB13[TFAWSUB1] = TF0EW01.TF1PBRFL[13];
  TF0EM001.TF0EMB14[TFAWSUB1] = TF0EW01.TF1PBRFL[14];
  TF0EM001.TF0EMB15[TFAWSUB1] = TF0EW01.TF1PBRFL[15];

end // end TF0ESE5

// edit bar code flags
Function TF0ESE6()

         /* edit bar code flags*/

  if (TF0EM001.TF0EMB15[TFAWSUB1] == " "
   || TF0EM001.TF0EMB15[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB15[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB15[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB14[TFAWSUB1] == " "
   || TF0EM001.TF0EMB14[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB14[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB14[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB13[TFAWSUB1] == " "
   || TF0EM001.TF0EMB13[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB13[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB13[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB12[TFAWSUB1] == " "
   || TF0EM001.TF0EMB12[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB12[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB12[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB11[TFAWSUB1] == " "
   || TF0EM001.TF0EMB11[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB11[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB11[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB10[TFAWSUB1] == " "
   || TF0EM001.TF0EMB10[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB10[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB10[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB09[TFAWSUB1] == " "
   || TF0EM001.TF0EMB09[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB09[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB09[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB08[TFAWSUB1] == " "
   || TF0EM001.TF0EMB08[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB08[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB08[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB07[TFAWSUB1] == " "
   || TF0EM001.TF0EMB07[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB07[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB07[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB06[TFAWSUB1] == " "
   || TF0EM001.TF0EMB06[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB06[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB06[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB05[TFAWSUB1] == " "
   || TF0EM001.TF0EMB05[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB05[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB05[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB04[TFAWSUB1] == " "
   || TF0EM001.TF0EMB04[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB04[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB04[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB03[TFAWSUB1] == " "
   || TF0EM001.TF0EMB03[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB03[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB03[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB02[TFAWSUB1] == " "
   || TF0EM001.TF0EMB02[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB02[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB02[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF0EMB01[TFAWSUB1] == " "
   || TF0EM001.TF0EMB01[TFAWSUB1] == "N"
   || TF0EM001.TF0EMB01[TFAWSUB1] == "Y")
     /* next sentence*/
  else
    converseLib.validationFailed(47);
      /* invalid value - valid values are 'y' or 'n'*/
    set TF0EM001.TF0EMB01[TFAWSUB1] cursor, bold;
  end

end // end TF0ESE6

// edit activity column
Function TF0ESE7()

         /* edit activity column*/

  if (COMMAREA.CADLVL[10] == "Y")
    if (TF0EM001.TF0EMACT[TFAWSUB1] == "A"
     || TF0EM001.TF0EMACT[TFAWSUB1] == "C")
      /* DLVRUSA CHANGES BEGIN -- PVENKA*/
      if (TF0EM001.TF0ESCAC[TFAWSUB1] != "    "
       && TF0EM001.TF0ESVCID[TFAWSUB1] != "    ")
         /* next sentence*/
      else
        converseLib.validationFailed(113);
           /* WHEN a(add), c(change) CARRIER SCAC AND*/
           /* CARRIER SERVICE ID ARE REQUIRED FIELD*/
        set TF0EM001.TF0EMACT[TFAWSUB1] cursor, bold;
      end
    else
      if (TF0EM001.TF0EMACT[TFAWSUB1] == "D"
       || TF0EM001.TF0EMACT[TFAWSUB1] == "-")
          /* next sentence*/
      else
        converseLib.validationFailed(38);
        /* a(add), c(change), d(inactivate), -(delete)*/
                  /* are valid entries*/
        set TF0EM001.TF0EMACT[TFAWSUB1] cursor, bold;
      end
    end
  else
    if (COMMAREA.CAADDFL == "N"
     && COMMAREA.CACLVL[10] == "Y")
      if (TF0EM001.TF0EMACT[TFAWSUB1] == "C")
        if (TF0EM001.TF0ESCAC[TFAWSUB1] != "    "
         && TF0EM001.TF0ESVCID[TFAWSUB1] != "    ")
            /* next sentence*/
        else
          converseLib.validationFailed(113);
          /* WHEN a(add), c(change) CARRIER SCAC AND*/
            /* CARRIER SERVICE ID IS ARE REQUIRED FIELD*/
                    /* are valid entries*/
          set TF0EM001.TF0EMACT[TFAWSUB1] cursor, bold;
        end
        /* next sentence*/
      else
        converseLib.validationFailed(50);
        /* c(change) are valid entries*/
        set TF0EM001.TF0EMACT[TFAWSUB1] cursor, bold;
      end
    else
      if (TF0EM001.TF0EMACT[TFAWSUB1] == "A"
       || TF0EM001.TF0EMACT[TFAWSUB1] == "C")
        if (TF0EM001.TF0ESCAC[TFAWSUB1] != "    "
         && TF0EM001.TF0ESVCID[TFAWSUB1] != "    ")
             /* next sentence*/
        else
          converseLib.validationFailed(113);
           /* WHEN a(add), c(change) CARRIER SCAC AND*/
             /* CARRIER SERVICE ID IS ARE REQUIRED FIELD*/

          set TF0EM001.TF0EMACT[TFAWSUB1] cursor, bold;
        end
      else
        if (TF0EM001.TF0EMACT[TFAWSUB1] == "D")
          /* next sentence*/
        else
          converseLib.validationFailed(13);
          /* a(add), c(change), d(inactivate)*/
                    /* are valid entries*/
          set TF0EM001.TF0EMACT[TFAWSUB1] cursor, bold;
        end
      end
    end
  end
      /* DLVRUSA CHANGES END -- PVENKA*/

end // end TF0ESE7

// edit carr cd, nm, abrv
Function TF0ESE8()

         /* edit carrier abbreviation and long and shor*/

  if (TF0EM001.TF1SABRV[TFAWSUB1] == " ")
    converseLib.validationFailed(48);
       /* required field ommitted - please enter*/
    set TF0EM001.TF1SABRV[TFAWSUB1] cursor, bold;
  end

  if (TF0EM001.TF1ABRV[TFAWSUB1] == " ")
    converseLib.validationFailed(48);
       /* required field ommitted - please enter*/
    set TF0EM001.TF1ABRV[TFAWSUB1] cursor, bold;
  end

end // end TF0ESE8

// pf7, pf8 ,pf12 and enter
Function TF0ESI0()

         /* pf7, pf8, pf12 and enter*/

  TF0ESI1(); /* set fields to normal*/
  TF0ESE0(); /* edit screen*/

  if (converseVar.validationMsgNum > 0)
       /* next sentence*/
  else
    if (converseVar.eventKey is pf12)
      converseLib.validationFailed(5);
         /* all edits passed - press <enter> to process data*/
    else
      TF0ESU0(); /* update data base*/
      if (converseVar.validationMsgNum == 0
       || converseVar.validationMsgNum == 9
       || converseVar.validationMsgNum == 26) /* data base updated by someone else*/
        TF0ESS0(); /* pf7, pf8 and enter*/
      end
    end
  end

end // end TF0ESI0

// set fields to normal
Function TF0ESI1()

         /* set fields to normal*/

  if (TF0EM001.TF0EMHED == "MAINTENANCE")
    TFAREC.TFAWSUB1 = 1;
    set TF0EM001.TF0EMNCR cursor;

    while (TFAREC.TFAWSUB1 <= 5)

      if (COMMAREA.CAADDFL == "Y")
        set TF0EM001.TF1CARCD[TFAWSUB1] normal;
        set TF0EM001.TF1CARNM[TFAWSUB1] normal;
        set TF0EM001.TF1ABRV[TFAWSUB1] normal;
        set TF0EM001.TF1SABRV[TFAWSUB1] normal;
        set TF0EM001.TF0ESCAC[TFAWSUB1] normal;
   /* DLVRUSA PVENKA CHANGES BEGIN*/
        set TF0EM001.TF0ESVCID[TFAWSUB1] normal;
   /* DLVRUSA PVENKA CHANGES END*/
        set TF0EM001.TF1MCARF[TFAWSUB1] normal;
        set TF0EM001.TF1ECARF[TFAWSUB1] normal;
        set TF0EM001.TF1FCARF[TFAWSUB1] normal;
        set TF0EM001.TF1ACARF[TFAWSUB1] normal;
        set TF0EM001.TF1CARTC[TFAWSUB1] normal;
        set TF0EM001.TF0EMACT[TFAWSUB1] normal;
        set TF0EM001.TF0EMW01[TFAWSUB1] normal;
        set TF0EM001.TF0EMW02[TFAWSUB1] normal;
        set TF0EM001.TF0EMW03[TFAWSUB1] normal;
        set TF0EM001.TF0EMW04[TFAWSUB1] normal;
        set TF0EM001.TF0EMW05[TFAWSUB1] normal;
        set TF0EM001.TF0EMW06[TFAWSUB1] normal;
        set TF0EM001.TF0EMW07[TFAWSUB1] normal;
        set TF0EM001.TF0EMW08[TFAWSUB1] normal;
        set TF0EM001.TF0EMW09[TFAWSUB1] normal;
        set TF0EM001.TF0EMW10[TFAWSUB1] normal;
        set TF0EM001.TF0EMW11[TFAWSUB1] normal;
        set TF0EM001.TF0EMW12[TFAWSUB1] normal;
        set TF0EM001.TF0EMW13[TFAWSUB1] normal;
        set TF0EM001.TF0EMW14[TFAWSUB1] normal;
        set TF0EM001.TF0EMW15[TFAWSUB1] normal;
        set TF0EM001.TF0EMB01[TFAWSUB1] normal;
        set TF0EM001.TF0EMB02[TFAWSUB1] normal;
        set TF0EM001.TF0EMB03[TFAWSUB1] normal;
        set TF0EM001.TF0EMB04[TFAWSUB1] normal;
        set TF0EM001.TF0EMB05[TFAWSUB1] normal;
        set TF0EM001.TF0EMB06[TFAWSUB1] normal;
        set TF0EM001.TF0EMB07[TFAWSUB1] normal;
        set TF0EM001.TF0EMB08[TFAWSUB1] normal;
        set TF0EM001.TF0EMB09[TFAWSUB1] normal;
        set TF0EM001.TF0EMB10[TFAWSUB1] normal;
        set TF0EM001.TF0EMB11[TFAWSUB1] normal;
        set TF0EM001.TF0EMB12[TFAWSUB1] normal;
        set TF0EM001.TF0EMB13[TFAWSUB1] normal;
        set TF0EM001.TF0EMB14[TFAWSUB1] normal;
        set TF0EM001.TF0EMB15[TFAWSUB1] normal;
      end

      if (COMMAREA.CACLVL[10] == "Y")
        set TF0EM001.TF1CRQFL[TFAWSUB1] normal;
        set TF0EM001.TF0EMACT[TFAWSUB1] normal;
      else
        set TF0EM001.TF1CRQFL[TFAWSUB1] skip;
      end

      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

    end

  end

end // end TF0ESI1

// check inquiry or maintenance
Function TF0ESO0()

         /* set fields for inquiry mode*/

  TF0EM001.TF0EMHED = "INQUIRY";
  set TF0EM001.TF0EMNM skip;
  set TF0EM001.TF0EMAHD skip, invisible; /* act heading*/
  TFAREC.TFAWSUB1 = 1;

  while (TFAREC.TFAWSUB1 <= 5)

    set TF0EM001.TF0EMACT[TFAWSUB1] skip, invisible;
    set TF0EM001.TF1CARCD[TFAWSUB1] skip;
    set TF0EM001.TF1CARNM[TFAWSUB1] skip;
    set TF0EM001.TF1ABRV[TFAWSUB1] skip;
    set TF0EM001.TF1SABRV[TFAWSUB1] skip;
    set TF0EM001.TF0ESCAC[TFAWSUB1] skip;
   /* DLVRUSA PVENKA CHANGES BEGIN*/
    set TF0EM001.TF0ESVCID[TFAWSUB1] skip;
   /* DLVRUSA PVENKA CHANGES END*/
    set TF0EM001.TF0ESPKG[TFAWSUB1] skip;
    set TF0EM001.TF1MCARF[TFAWSUB1] skip;
    set TF0EM001.TF1ECARF[TFAWSUB1] skip;
    set TF0EM001.TF1FCARF[TFAWSUB1] skip;
    set TF0EM001.TF1ACARF[TFAWSUB1] skip;
    set TF0EM001.TF1CRQFL[TFAWSUB1] skip;
    set TF0EM001.TF1CARTC[TFAWSUB1] skip;
    set TF0EM001.TF0EMACT[TFAWSUB1] skip, invisible;
    set TF0EM001.TF0EMW01[TFAWSUB1] skip;
    set TF0EM001.TF0EMW02[TFAWSUB1] skip;
    set TF0EM001.TF0EMW03[TFAWSUB1] skip;
    set TF0EM001.TF0EMW04[TFAWSUB1] skip;
    set TF0EM001.TF0EMW05[TFAWSUB1] skip;
    set TF0EM001.TF0EMW06[TFAWSUB1] skip;
    set TF0EM001.TF0EMW07[TFAWSUB1] skip;
    set TF0EM001.TF0EMW08[TFAWSUB1] skip;
    set TF0EM001.TF0EMW09[TFAWSUB1] skip;
    set TF0EM001.TF0EMW10[TFAWSUB1] skip;
    set TF0EM001.TF0EMW11[TFAWSUB1] skip;
    set TF0EM001.TF0EMW12[TFAWSUB1] skip;
    set TF0EM001.TF0EMW13[TFAWSUB1] skip;
    set TF0EM001.TF0EMW14[TFAWSUB1] skip;
    set TF0EM001.TF0EMW15[TFAWSUB1] skip;
    set TF0EM001.TF0EMB01[TFAWSUB1] skip;
    set TF0EM001.TF0EMB02[TFAWSUB1] skip;
    set TF0EM001.TF0EMB03[TFAWSUB1] skip;
    set TF0EM001.TF0EMB04[TFAWSUB1] skip;
    set TF0EM001.TF0EMB05[TFAWSUB1] skip;
    set TF0EM001.TF0EMB06[TFAWSUB1] skip;
    set TF0EM001.TF0EMB07[TFAWSUB1] skip;
    set TF0EM001.TF0EMB08[TFAWSUB1] skip;
    set TF0EM001.TF0EMB09[TFAWSUB1] skip;
    set TF0EM001.TF0EMB10[TFAWSUB1] skip;
    set TF0EM001.TF0EMB11[TFAWSUB1] skip;
    set TF0EM001.TF0EMB12[TFAWSUB1] skip;
    set TF0EM001.TF0EMB13[TFAWSUB1] skip;
    set TF0EM001.TF0EMB14[TFAWSUB1] skip;
    set TF0EM001.TF0EMB15[TFAWSUB1] skip;

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

  end

end // end TF0ESO0

// get warehouse code a validate
Function TF0ESO1()

         /* get warehouse code and validate*/

  TF0EW01.TF0EMNCR = TF0EM001.TF0EMNCR;

  converseLib.clearScreen();
  set TF0EM001 initial;

  XXXCURDT = VGVar.currentShortGregorianDate;
  XXXRVNBR = "01";
  TF0EM001.TF0EMNCR = TF0EW01.TF0EMNCR;

  if (COMMAREA.XWHCD == "51") /* Allow 51 user to xfer to TF0M*/
    TF0EM001.TF0EM-TF0M-LBL = "5:TF0M";
  else
    TF0EM001.TF0EM-TF0M-LBL = "      ";
  end

  TF0ESO2(); /* set up scrolling table ;*/
  TF0ESO4(); /* set up screen*/
  TF0ESO8(); /* check security for update*/

end // end TF0ESO1

// set up scrolling table
Function TF0ESO2()

         /* set up scrolling table*/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
  TA1REC.TA1LOCAT[2] = "TF0ESA2";
   /* MOVE ' ' TO TF7REC.TF7CARCD;*/
  TF8REC.TF8CARCD = " ";
   /* DLVRUSA PVENKA CHANGES END*/

  TF0ES-XSTF7S1(); /* select set and select next tf3rec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      TF0ES-XSTF7S1(); /* try to add record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(029); /* data base in use*/
      /* data base contention <try again>*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (converseVar.validationMsgNum == 7)
        /* next sentence*/
      else
        converseLib.validationFailed(08);
          /* bottom of table, no more scrolling possible*/
      end
      TF0EM001.TF0EMNCR = " ";
      TF0ES-XSTF7C1(); /* close set*/
    else
      TF0ESO3(); /* set up scrolling table*/
      TF0ES-XSTF7C1(); /* close set*/
    end
  end

end // end TF0ESO2

// set up scrolling table
Function TF0ESO3()

         /* set up scrolling table*/

  set TF0EW02 empty;

  TA1REC.TA1LOCAT[2] = "TF0ESO3";
  TFAREC.TFAWCNT1 = 6; /* force save of first rec*/
  TFAREC.TFAWSUB1 = 0;

  while (SQLCA.VAGen_SQLCODE != 100
   && TFAREC.TFAWSUB1 <= 700) /* INCREASED FROM 600 TO 700 Kin #100376*/

    if (TFAREC.TFAWCNT1 < 5)
      TFAREC.TFAWCNT1 = TFAREC.TFAWCNT1 + 1;
    else
      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
      TFAREC.TFAWCNT1 = 1;
      /* DLVRUSA PVENKA CHANGES BEGIN*/
      /* MOVE TF7REC.TF7CARCD TO TF0EW02.TF1CARCD(TFAWSUB1);*/
      /* MOVE TF7REC.TF7CARCD TO TF0EW01.TF0EWHCR;*/
      TF0EW02.TF1CARCD[TFAWSUB1] = TF8REC.TF8CARCD;
      TF0EW01.TF0EWHCR = TF8REC.TF8CARCD;
      /* DLVRUSA PVENKA CHANGES END*/

    end

    TF0ES-XSTF7F1(); /* select next tf7rec record*/

  end

  if (TF0EM001.TF0EMNCR > TF0EW01.TF0EWHCR)
    TF0EM001.TF0EMNCR = TF0EW01.TF0EWHCR;
  end

  if (TFAREC.TFAWSUB1 >= 630) /* INCREASED FROM 540 TO 630 Kin #100376*/
    converseLib.validationFailed(43);
      /* internal scrolling table over 90% - contact programming*/
  end

end // end TF0ESO3

// set up online screen
Function TF0ESO4()

         /* set up online screen*/

  TA1REC.TA1LOCAT[2] = "TF0ESB2";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE TF0EM001.TF0EMNCR TO TF7REC.TF7CARCD;*/
  TF8REC.TF8CARCD = TF0EM001.TF0EMNCR;
   /* DLVRUSA PVENKA CHANGES END*/

  TF0ES-XSTF7S1(); /* select set and select next tf3rec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      TF0ES-XSTF7S1(); /* try to add record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(29);
      /* data base contention <try again>*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(08);
        /* bottom of table, no more scrolling possible*/
      TF0ES-XSTF7C1(); /* close set*/
    else
      TF0ESO5(); /* set up online screen*/
      TF0ES-XSTF7C1(); /* close set*/
    end
  end

end // end TF0ESO4

// set up scrolling table
Function TF0ESO5()

         /* set up scrolling table*/

  TA1REC.TA1LOCAT[2] = "TF0ESO5";
  TFAREC.TFAWSUB2 = 1;

  while (TFAREC.TFAWSUB2 <= 5)

    TF0ESO6(); /* move data to screen*/

    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;

    TF0ES-XSTF7F1(); /* select next tf3rec record*/

    /* DLVRUSA PVENKA CHANGES BEGIN*/
    if (SQLCA.VAGen_SQLCODE == 100)
      /* SET TF7REC EMPTY;*/
      set TF8REC empty;
    end
    /* DLVRUSA PVENKA CHANGES END*/

  end

  if (TF0EW01.TF0EMNCR > " " /* check for match on search*/
   && TF0EM001.TF1CARCD[1] != TF0EW01.TF0EMNCR) /* no match*/
    if (converseVar.validationMsgNum == 0 /* no messages/errors*/
     || converseVar.validationMsgNum == 7 /* top of table*/
     || converseVar.validationMsgNum == 8) /* bottom of table*/
      converseLib.validationFailed(10); /* warning - exact match not found*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    if (converseVar.validationMsgNum == 9)
       /* update successful message*/
       /* next sentence*/
    else
      if (converseVar.validationMsgNum == 7)
         /* top of table, no more scrolling forward possible*/
         /* next sentence*/
      else
        if (converseVar.validationMsgNum != 10) /* warning - exact match not found*/
          converseLib.validationFailed(8);
           /* bottom of table, no more froward scrolling possible*/
        end
      end
    end
    TF0EM001.TF0EMNCR = TF0EM001.TF1CARCD[1];
    TF0EM001.TF0EMNM = TF0EM001.TF1CARNM[1];
  else
    /* DLVRUSA PVENKA CHANGES BEGIN*/
    /* MOVE TF7REC.TF7CARCD TO TF0EM001.TF0EMNCR;*/
    /* MOVE TF7REC.TF7CARNM TO TF0EM001.TF0EMNM;*/
    /* MOVE TF7REC.TF7CARCD TO TF0EW01.TF0EMNCR;*/
    TF0EM001.TF0EMNCR = TF8REC.TF8CARCD;
    TF0EM001.TF0EMNM = TF8REC.TF8CARNM;
    TF0EW01.TF0EMNCR = TF8REC.TF8CARCD;
    /* DLVRUSA PVENKA CHANGES END*/
  end

end // end TF0ESO5

// move data to screen
Function TF0ESO6()

         /* move data to screen*/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /*  */
   /* CHANGED ALL THE TF7REC REFERENCES TO TF8REC TO POINT TO THE*/
   /* VCARR003*/
   /*  */
  TF0EW01.TF1CARCD[TFAWSUB2] = TF8REC.TF8CARCD;
  TF0EM001.TF1CARCD[TFAWSUB2] = TF8REC.TF8CARCD;
  TF0EM001.TF1CARNM[TFAWSUB2] = TF8REC.TF8CARNM;
  TF0EM001.TF1ABRV[TFAWSUB2] = TF8REC.TF8ABRV;
  TF0EM001.TF1SABRV[TFAWSUB2] = TF8REC.TF8SABRV;
  TF0EM001.TF0ESCAC[TFAWSUB2] = TF8REC.TF8SCAC;
  TF0EM001.TF0ESVCID[TFAWSUB2] = TF8REC.TF8SVCID;
  TF0EM001.TF0ESPKG[TFAWSUB2] = TF8REC.TF8SMPKG;
  TF0EM001.TF1MCARF[TFAWSUB2] = TF8REC.TF8MCARF;
  TF0EM001.TF1ECARF[TFAWSUB2] = TF8REC.TF8ECARF;
  TF0EM001.TF1FCARF[TFAWSUB2] = TF8REC.TF8FCARF;
  TF0EM001.TF1ACARF[TFAWSUB2] = TF8REC.TF8ACARF;
  TF0EM001.TF1CRQFL[TFAWSUB2] = TF8REC.TF8CRQFL;
  TF0EM001.TF1CARTC[TFAWSUB2] = TF8REC.TF8CARTC;
  TF0EM001.XXXSTAT[TFAWSUB2] = TF8REC.XXXSTAT;
  TF0EM001.TF0EMACT[TFAWSUB2] = " ";
  TF0EM001.TF0EMW01[TFAWSUB2] = TF8REC.XWHCD[1];
  TF0EM001.TF0EMW02[TFAWSUB2] = TF8REC.XWHCD[2];
  TF0EM001.TF0EMW03[TFAWSUB2] = TF8REC.XWHCD[3];
  TF0EM001.TF0EMW04[TFAWSUB2] = TF8REC.XWHCD[4];
  TF0EM001.TF0EMW05[TFAWSUB2] = TF8REC.XWHCD[5];
  TF0EM001.TF0EMW06[TFAWSUB2] = TF8REC.XWHCD[6];
  TF0EM001.TF0EMW07[TFAWSUB2] = TF8REC.XWHCD[7];
  TF0EM001.TF0EMW08[TFAWSUB2] = TF8REC.XWHCD[8];
  TF0EM001.TF0EMW09[TFAWSUB2] = TF8REC.XWHCD[9];
  TF0EM001.TF0EMW10[TFAWSUB2] = TF8REC.XWHCD[10];
  TF0EM001.TF0EMW11[TFAWSUB2] = TF8REC.XWHCD[11];
  TF0EM001.TF0EMW12[TFAWSUB2] = TF8REC.XWHCD[12];
  TF0EM001.TF0EMW13[TFAWSUB2] = TF8REC.XWHCD[13];
  TF0EM001.TF0EMW14[TFAWSUB2] = TF8REC.XWHCD[14];
  TF0EM001.TF0EMW15[TFAWSUB2] = TF8REC.XWHCD[15];
  TF0EM001.TF0EMB01[TFAWSUB2] = TF8REC.TF8PBRFL[1];
  TF0EM001.TF0EMB02[TFAWSUB2] = TF8REC.TF8PBRFL[2];
  TF0EM001.TF0EMB03[TFAWSUB2] = TF8REC.TF8PBRFL[3];
  TF0EM001.TF0EMB04[TFAWSUB2] = TF8REC.TF8PBRFL[4];
  TF0EM001.TF0EMB05[TFAWSUB2] = TF8REC.TF8PBRFL[5];
  TF0EM001.TF0EMB06[TFAWSUB2] = TF8REC.TF8PBRFL[6];
  TF0EM001.TF0EMB07[TFAWSUB2] = TF8REC.TF8PBRFL[7];
  TF0EM001.TF0EMB08[TFAWSUB2] = TF8REC.TF8PBRFL[8];
  TF0EM001.TF0EMB09[TFAWSUB2] = TF8REC.TF8PBRFL[9];
  TF0EM001.TF0EMB10[TFAWSUB2] = TF8REC.TF8PBRFL[10];
  TF0EM001.TF0EMB11[TFAWSUB2] = TF8REC.TF8PBRFL[11];
  TF0EM001.TF0EMB12[TFAWSUB2] = TF8REC.TF8PBRFL[12];
  TF0EM001.TF0EMB13[TFAWSUB2] = TF8REC.TF8PBRFL[13];
  TF0EM001.TF0EMB14[TFAWSUB2] = TF8REC.TF8PBRFL[14];
  TF0EM001.TF0EMB15[TFAWSUB2] = TF8REC.TF8PBRFL[15];

   /* DLVRUSA PVENKA CHANGES END*/
  TF0EW01.TF0EMNCR = TF0EM001.TF0EMNCR;

end // end TF0ESO6

// check inquiry or maintenance
Function TF0ESO8()

         /* check if inquiry or maintenance mode*/

  if (TFWREC.TFWUPDFL == "Y")
    if (COMMAREA.CAADDFL == "Y"
     || COMMAREA.CACLVL[10] == "Y")
      TF0ESO9(); /* set fields for update*/
    else
      TF0ESO0(); /* set fields for inquiry*/
      converseLib.validationFailed(24);
         /* not authorized for update - inquiry assumed*/
    end
  else
  /* TF0ESO0;                          /* set fields for inquiry*/
  /* MOVE 24 TO EZEMNO;*/
  /* ;   /* not authorized for update - inquiry assumed*/
    TF0ESO9(); /* set fields for update*/
  end

end // end TF0ESO8

// check inquiry or maintenance
Function TF0ESO9()

         /* set fields for maintenance mode*/

  TF0EM001.TF0EMHED = "MAINTENANCE";
  set TF0EM001.TF0EMNM skip;
  set TF0EM001.TF0EMAHD skip; /* act heading*/

  /* IF COMMAREA.CAADDFL EQ 'Y';*/
  TFAREC.TFAWSUB1 = 1;

  while (TFAREC.TFAWSUB1 <= 5)

    set TF0EM001.TF0EMACT[TFAWSUB1] normal;
    set TF0EM001.TF1CARCD[TFAWSUB1] normal;
    set TF0EM001.TF1CARNM[TFAWSUB1] normal;
    set TF0EM001.TF1ABRV[TFAWSUB1] normal;
    set TF0EM001.TF1SABRV[TFAWSUB1] normal;
    set TF0EM001.TF0ESCAC[TFAWSUB1] normal;
   /* DLVRUSA PVENKA CHANGES BEGIN*/
    set TF0EM001.TF0ESVCID[TFAWSUB1] normal;
   /* DLVRUSA PVENKA CHANGES END*/
    set TF0EM001.TF0ESPKG[TFAWSUB1] normal;
    set TF0EM001.TF1MCARF[TFAWSUB1] normal;
    set TF0EM001.TF1ECARF[TFAWSUB1] normal;
    set TF0EM001.TF1FCARF[TFAWSUB1] normal;
    set TF0EM001.TF1ACARF[TFAWSUB1] normal;
    set TF0EM001.TF1CARTC[TFAWSUB1] normal;
    set TF0EM001.TF0EMACT[TFAWSUB1] normal;
    set TF0EM001.TF0EMW01[TFAWSUB1] normal;
    set TF0EM001.TF0EMW02[TFAWSUB1] normal;
    set TF0EM001.TF0EMW03[TFAWSUB1] normal;
    set TF0EM001.TF0EMW04[TFAWSUB1] normal;
    set TF0EM001.TF0EMW05[TFAWSUB1] normal;
    set TF0EM001.TF0EMW06[TFAWSUB1] normal;
    set TF0EM001.TF0EMW07[TFAWSUB1] normal;
    set TF0EM001.TF0EMW08[TFAWSUB1] normal;
    set TF0EM001.TF0EMW09[TFAWSUB1] normal;
    set TF0EM001.TF0EMW10[TFAWSUB1] normal;
    set TF0EM001.TF0EMW11[TFAWSUB1] normal;
    set TF0EM001.TF0EMW12[TFAWSUB1] normal;
    set TF0EM001.TF0EMW13[TFAWSUB1] normal;
    set TF0EM001.TF0EMW14[TFAWSUB1] normal;
    set TF0EM001.TF0EMW15[TFAWSUB1] normal;
    set TF0EM001.TF0EMB01[TFAWSUB1] normal;
    set TF0EM001.TF0EMB02[TFAWSUB1] normal;
    set TF0EM001.TF0EMB03[TFAWSUB1] normal;
    set TF0EM001.TF0EMB04[TFAWSUB1] normal;
    set TF0EM001.TF0EMB05[TFAWSUB1] normal;
    set TF0EM001.TF0EMB06[TFAWSUB1] normal;
    set TF0EM001.TF0EMB07[TFAWSUB1] normal;
    set TF0EM001.TF0EMB08[TFAWSUB1] normal;
    set TF0EM001.TF0EMB09[TFAWSUB1] normal;
    set TF0EM001.TF0EMB10[TFAWSUB1] normal;
    set TF0EM001.TF0EMB11[TFAWSUB1] normal;
    set TF0EM001.TF0EMB12[TFAWSUB1] normal;
    set TF0EM001.TF0EMB13[TFAWSUB1] normal;
    set TF0EM001.TF0EMB14[TFAWSUB1] normal;
    set TF0EM001.TF0EMB15[TFAWSUB1] normal;

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

  end

  /* END;*/

  if (COMMAREA.CACLVL[10] == "Y")
    TFAREC.TFAWSUB1 = 1;

    while (TFAREC.TFAWSUB1 <= 5)

      set TF0EM001.TF0EMACT[TFAWSUB1] normal;
      set TF0EM001.TF1CRQFL[TFAWSUB1] normal;

      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

    end

  end

end // end TF0ESO9

// do paging of screen data
Function TF0ESS0()

         /* do paging of screen data*/

  if (TF0EM001.TF0EMNCR != TF0EW01.TF0EMNCR)
       /* next sentence*/
  else
    if (converseVar.validationMsgNum == 9 /* all updates successful*/
     && TF0EW01.TF0EWCHD > " ")          
      TF0EM001.TF0EMNCR = TF0EW01.TF0EWCHD;
      TF0EW01.TF0EWCHD = " ";
    else
      if (converseVar.eventKey is pf7)
        TF0ESS1(); /* set tfarec.tfawsub3 to proper place*/
                                   /* in scrolling table*/
      else
        if (TF0EW01.TF0EWFLG == "UPDATE DONE, NO SCROLLING ON ENTER KEY"
         && converseVar.eventKey is enter)
          TF0EM001.TF0EMNCR = TF0EW01.TF1CARCD[1];
        end
      end
    end
  end

  TF0EW01.TF0EWFLG = " ";

  if (TF0EM001.TF0EMNCR > TF0EW01.TF0EWHCR)
    TF0EM001.TF0EMNCR = TF0EW01.TF0EWHCR;
  end

  if (converseVar.validationMsgNum == 0  
   || converseVar.validationMsgNum == 9  /* all updates successful*/
   || converseVar.validationMsgNum == 7  /* top of table, no more backward scrolling possible*/
   || converseVar.validationMsgNum == 26 /* record not found for update*/
   || converseVar.validationMsgNum == 10) /* warn - no exact match*/
    if (TF0EW01.TF0EWUPD == "ADD OR PHYSICAL DELETE TAKEN PLACE")
      TF0EW01.TF0EWUPD = " ";
      TF0ESO2(); /* rebuild scrolling table*/
    end
    TF0ESO4(); /* rebuild online screen*/
  end

end // end TF0ESS0

// set tfawsub3 to proper place
Function TF0ESS1()

         /* set up tfarec.tfawsub3 to proper index when next carr*/
         /* is changed.*/

  TFAREC.TFAWSUB1 = 1;
  TFAREC.TFAWSUB3 = 1;

  while (TFAREC.TFAWSUB3 <= 500)

    if (TF0EW01.TF1CARCD[1] == TF0EW02.TF1CARCD[TFAWSUB1])
      if (TFAREC.TFAWSUB1 > 1)
        TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;
      else
        if (converseVar.validationMsgNum == 9)
           /* update successful message*/
           /* next sentence*/
        else
          converseLib.validationFailed(7);
            /* top of table, no more backward scrolling possible*/
        end
      end
      if (TF0EW01.TF1CARCD[1] == " ")
          /* next sentence*/
      else
        TF0EM001.TF0EMNCR = TF0EW02.TF1CARCD[TFAWSUB1];
      end
      TFAREC.TFAWSUB3 = 501;
    else
      if (TF0EW01.TF1CARCD[1] > TF0EW02.TF1CARCD[TFAWSUB1])
          /* next sentence*/
      else
        TFAREC.TFAWSUB3 = 501;
        if (TFAREC.TFAWSUB1 > 1)
          TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;
        else
          if (converseVar.validationMsgNum == 9)
             /* update successful message*/
             /* next sentence*/
          else
            converseLib.validationFailed(7);
              /* top of table, no more backward scrolling possible*/
          end
        end
        if (TF0EW01.TF1CARCD[1] == " ")
            /* next sentence*/
        else
          TF0EM001.TF0EMNCR = TF0EW02.TF1CARCD[TFAWSUB1];
        end
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
    TFAREC.TFAWSUB3 = TFAREC.TFAWSUB3 + 1;

  end

end // end TF0ESS1

// update data base
Function TF0ESU0()

         /* update carrier data base*/

  TFAREC.TFAWSUB1 = 5;
  TFCREC.TFCTBLNM = "VCARR001";
  TF0EW01.TF0EWCHD = " ";

  TF0ESU1(); /* get date and time stamp*/

  TFCREC.ZZZSDT = TA2REC.TA2GRGGN;
  TFCREC.ZZHHMMSS = TA2REC.TA2TIMEN;

  while (TFAREC.TFAWSUB1 >= 1)

    if (TF0EM001.TF0EMACT[TFAWSUB1] == " ")
        /* next sentence*/
    else
      if (TF0EM001.TF0EMACT[TFAWSUB1] == "A")
        if (TF0EM001.TF1CARCD[TFAWSUB1] == TF0EW01.TF1CARCD[TFAWSUB1]
         && TF0EM001.XXXSTAT[TFAWSUB1] == "I")
          TF0ESU2(); /* data base change*/
        else
          TF0ESU5(); /* data base add*/
        end
        TF0EW01.TF0EWCHD = TF0EM001.TF1CARCD[TFAWSUB1];
      else
        if (TF0EM001.TF0EMACT[TFAWSUB1] == "C")
          TF0ESU2(); /* change to data base*/
        else
          if (TF0EM001.TF0EMACT[TFAWSUB1] == "-")
            TF0ESU7(); /* check delete for inactive delete or*/
                                   /* physical*/
          else
            if (TF0EM001.TF0EMACT[TFAWSUB1] == "D")
              TF0ESU8(); /* check delete for inactive delete or*/
                                   /* physical*/
              /* DLVRUSA PVENKA CHANGES BEGIN*/
              /* IF TF7REC.ZZZCHGDT LT TF0EW01.TF0EWDTE;*/
              if (TF8REC.ZZZCHGDT < TF0EW01.TF0EWDTE)
              /* DLVRUSA PVENKA CHANGES END*/
                TF0ESU7(); /* physical delete*/
              else
                TF0ESU2(); /* data base change*/
              end
            end
          end
        end
      end
    end

    if (TF0EM001.TF0EMACT[TFAWSUB1] > " ")
      if (converseVar.validationMsgNum == 0
       || converseVar.validationMsgNum == 26) /* database changed - try again*/
        TF0EW01.TF0EWFLG = "UPDATE DONE, NO SCROLLING ON ENTER KEY";
        TF0EM001.TF0EMACT[TFAWSUB1] = " ";
        if (converseVar.validationMsgNum == 26) /* database changed - try again*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback();
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit();
          converseLib.validationFailed(9);
            /* all updates successfully performed - please continue*/
        end
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;

  end

end // end TF0ESU0

// get time and date stamp
Function TF0ESU1()

      /* get time and date stamp*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  TF0EW01.TF0EWDTE = TA2REC.TA2GRGGN;

  set TA2REC empty;
  TA2REC.TA2GRGGN = TF0EW01.TF0EWDTE;
  TA2REC.TA2DYAOD = -182;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  TF0EW01.TF0EWDTE = TA2REC.TA2GRGGN;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

end // end TF0ESU1

// change to data base
Function TF0ESU2()

         /* change tf3rec in data base*/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* SET TF7REC EMPTY;*/
  set TF8REC empty;
   /* DLVRUSA PVENKA CHANGES END*/
  TA1REC.TA1LOCAT[2] = "TF0ESD2";
  TFCREC.TFCACTIN = TF0EM001.TF0EMACT[TFAWSUB1];
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";
   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /* MOVE TF0EM001.TF1CARCD(TFAWSUB1) TO TF7REC.TF7CARCD;*/
  TF8REC.TF8CARCD = TF0EM001.TF1CARCD[TFAWSUB1];
   /* DLVRUSA PVENKA CHANGES END*/

  TF0ES-XSTF7I0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TFCREC.TF-AUD-BFR-LEN = 338;
    /* DLVRUSA PVENKA CHANGES BEGIN*/
    /* MOVE TF7REC.TF7GRP TO TFCREC.TF-AUD-BFR-TEXT;*/
    TFCREC.TF-AUD-BFR-TEXT = TF8REC.TF8GRP;
    /* DLVRUSA PVENKA CHANGES END*/

    if (TF0EM001.TF0EMACT[TFAWSUB1] == "A")
      /* DLVRUSA PVENKA CHANGES BEGIN*/
      /* MOVE 'A' TO TF7REC.XXXSTAT;*/
      TF8REC.XXXSTAT = "A";
      /* DLVRUSA PVENKA CHANGES END*/
    else
      if (TF0EM001.TF0EMACT[TFAWSUB1] == "D")
        /* DLVRUSA PVENKA CHANGES BEGIN*/
        /* MOVE 'I' TO TF7REC.XXXSTAT;*/
        TF8REC.XXXSTAT = "I";
        /* DLVRUSA PVENKA CHANGES END*/
      end
    end

    TF0ESU3(); /* move row on scren to record*/

        /* DLVRUSA PVENKA CHANGES BEGIN*/
    /* MOVE TA2REC.TA2GRGGN TO TF7REC.ZZZCHGDT;*/
    /* MOVE TA2REC.TA2TIMHM TO TF7REC.ZZZCHGTM;*/
    TF8REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    TF8REC.ZZZCHGTM = TA2REC.TA2TIMHM;
        /* DLVRUSA PVENKA CHANGES END*/

    TF0ES-XSTF7R0(); /* update row on data base*/

    if (SQLCA.VAGen_SQLCODE == 0)
      TFCREC.TF-AUD-AFT-LEN = 338;
        /* DLVRUSA PVENKA CHANGES BEGIN*/
      /* MOVE TF7REC.TF7GRP TO TFCREC.TF-AUD-AFT-TEXT;*/
      TFCREC.TF-AUD-AFT-TEXT = TF8REC.TF8GRP;
        /* DLVRUSA PVENKA CHANGES END*/
      TF0ESU4(); /* write row to audit*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
        converseLib.validationFailed(39);
         /* needs message*/
         /* duplicate record*/
      else
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          TF0ES-XSTF7I0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        SQLCA.VAGen_SQLCODE = -911;
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(26);
         /* data base has been changed*/
      TF0EW01.TF0EWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          TF0ES-XSTF7I0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  end

end // end TF0ESU2

// move data from scrn to record
Function TF0ESU3()

         /* move data from screen to tf8rec record*/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /*  */
   /* CHANGED ALL THE TF7REC REFERENCES TO TF8REC TO POINT TO THE*/
   /* VCARR003*/

  TF8REC.TF8CARCD = TF0EM001.TF1CARCD[TFAWSUB1];
  TF8REC.TF8CARNM = TF0EM001.TF1CARNM[TFAWSUB1];
  TF8REC.TF8ABRV = TF0EM001.TF1ABRV[TFAWSUB1];
  TF8REC.TF8SABRV = TF0EM001.TF1SABRV[TFAWSUB1];
  TF8REC.TF8SCAC = TF0EM001.TF0ESCAC[TFAWSUB1];
  TF8REC.TF8SVCID = TF0EM001.TF0ESVCID[TFAWSUB1];
  TF8REC.TF8SMPKG = TF0EM001.TF0ESPKG[TFAWSUB1];
  TF8REC.TF8MCARF = TF0EM001.TF1MCARF[TFAWSUB1];
  TF8REC.TF8ECARF = TF0EM001.TF1ECARF[TFAWSUB1];
  TF8REC.TF8FCARF = TF0EM001.TF1FCARF[TFAWSUB1];
  TF8REC.TF8ACARF = TF0EM001.TF1ACARF[TFAWSUB1];
  TF8REC.TF8CRQFL = TF0EM001.TF1CRQFL[TFAWSUB1];
  TF8REC.TF8CARTC = TF0EM001.TF1CARTC[TFAWSUB1];
  TF8REC.XWHCD[1] = TF0EM001.TF0EMW01[TFAWSUB1];
  TF8REC.XWHCD[2] = TF0EM001.TF0EMW02[TFAWSUB1];
  TF8REC.XWHCD[3] = TF0EM001.TF0EMW03[TFAWSUB1];
  TF8REC.XWHCD[4] = TF0EM001.TF0EMW04[TFAWSUB1];
  TF8REC.XWHCD[5] = TF0EM001.TF0EMW05[TFAWSUB1];
  TF8REC.XWHCD[6] = TF0EM001.TF0EMW06[TFAWSUB1];
  TF8REC.XWHCD[7] = TF0EM001.TF0EMW07[TFAWSUB1];
  TF8REC.XWHCD[8] = TF0EM001.TF0EMW08[TFAWSUB1];
  TF8REC.XWHCD[9] = TF0EM001.TF0EMW09[TFAWSUB1];
  TF8REC.XWHCD[10] = TF0EM001.TF0EMW10[TFAWSUB1];
  TF8REC.XWHCD[11] = TF0EM001.TF0EMW11[TFAWSUB1];
  TF8REC.XWHCD[12] = TF0EM001.TF0EMW12[TFAWSUB1];
  TF8REC.XWHCD[13] = TF0EM001.TF0EMW13[TFAWSUB1];
  TF8REC.XWHCD[14] = TF0EM001.TF0EMW14[TFAWSUB1];
  TF8REC.XWHCD[15] = TF0EM001.TF0EMW15[TFAWSUB1];
  TF8REC.TF8PBRFL[1] = TF0EM001.TF0EMB01[TFAWSUB1];
  TF8REC.TF8PBRFL[2] = TF0EM001.TF0EMB02[TFAWSUB1];
  TF8REC.TF8PBRFL[3] = TF0EM001.TF0EMB03[TFAWSUB1];
  TF8REC.TF8PBRFL[4] = TF0EM001.TF0EMB04[TFAWSUB1];
  TF8REC.TF8PBRFL[5] = TF0EM001.TF0EMB05[TFAWSUB1];
  TF8REC.TF8PBRFL[6] = TF0EM001.TF0EMB06[TFAWSUB1];
  TF8REC.TF8PBRFL[7] = TF0EM001.TF0EMB07[TFAWSUB1];
  TF8REC.TF8PBRFL[8] = TF0EM001.TF0EMB08[TFAWSUB1];
  TF8REC.TF8PBRFL[9] = TF0EM001.TF0EMB09[TFAWSUB1];
  TF8REC.TF8PBRFL[10] = TF0EM001.TF0EMB10[TFAWSUB1];
  TF8REC.TF8PBRFL[11] = TF0EM001.TF0EMB11[TFAWSUB1];
  TF8REC.TF8PBRFL[12] = TF0EM001.TF0EMB12[TFAWSUB1];
  TF8REC.TF8PBRFL[13] = TF0EM001.TF0EMB13[TFAWSUB1];
  TF8REC.TF8PBRFL[14] = TF0EM001.TF0EMB14[TFAWSUB1];
  TF8REC.TF8PBRFL[15] = TF0EM001.TF0EMB15[TFAWSUB1];
   /* TT-XXXX PVENKA CHANGES END*/

end // end TF0ESU3

// change to data base
Function TF0ESU4()

         /* change tf3rec in data base*/

  TA1REC.TA1LOCAT[2] = "TF0GSE1";

  XSTFCA0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TFAREC.TFAWCNT5 = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && TFAREC.TFAWCNT5 <= 2)
        XSTFCA0(); /* try to add record*/
        TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(29);
           /* data base contention <try again>*/
      end
    end
  end

end // end TF0ESU4

// add to data base
Function TF0ESU5()

         /* add tf3rec to data base*/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /*  */
   /* CHANGED ALL THE TF7REC REFERENCES TO TF8REC TO POINT TO THE*/
   /* VCARR003*/

   /* SET TF7REC EMPTY;*/
  set TF8REC empty;
  TA1REC.TA1LOCAT[2] = "TF0ESD1";
  TF0EW01.TF0EWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
   /* MOVE TA2REC.TA2GRGGN TO TF7REC.ZZZSDT;*/
   /* MOVE TA2REC.TA2GRGGN TO TF7REC.ZZZCHGDT;*/
   /* MOVE TA2REC.TA2TIMHM TO TF7REC.ZZZCHGTM;*/
   /* MOVE 'A' TO TF7REC.XXXSTAT;*/
  TF8REC.ZZZSDT = TA2REC.TA2GRGGN;
  TF8REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  TF8REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  TF8REC.XXXSTAT = "A";
  TFCREC.TFCACTIN = TF0EM001.TF0EMACT[TFAWSUB1];
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";

  TF0ESU3(); /* move row on screen to record*/

  TF0ES-XSTF7A0(); /* add row to data base*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TFCREC.TF-AUD-AFT-LEN = 338;
    /* MOVE TF7REC.TF7GRP TO TFCREC.TF-AUD-AFT-TEXT;*/
    TFCREC.TF-AUD-AFT-TEXT = TF8REC.TF8GRP;
    TF0ESU4(); /* write row to audit*/
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(39);
       /* needs message*/
       /* duplicate record*/
      set TF0EM001.TF0EMACT[TFAWSUB1] cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          TF0ES-XSTF7A0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(029); /* data base in use*/
            /* data base in use, try again*/
        end
      end
    end
  end
   /* DLVRUSA PVENKA CHANGES END*/

end // end TF0ESU5

// physical delete from data base
Function TF0ESU7()

         /* physical delete from data base*/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /*  */
   /* CHANGED ALL THE TF7REC REFERENCES TO TF8REC TO POINT TO THE*/
   /* VCARR003*/

   /* SET TF7REC EMPTY;*/
  set TF8REC empty;
  TA1REC.TA1LOCAT[2] = "TF0ESD4";
  TF0EW01.TF0EWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
  TFCREC.TFCACTIN = "D";
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";
   /* MOVE TF0EM001.TF1CARCD(TFAWSUB1) TO TF7REC.TF7CARCD;*/
  TF8REC.TF8CARCD = TF0EM001.TF1CARCD[TFAWSUB1];

  TF0ES-XSTF7I0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TFCREC.TF-AUD-BFR-LEN = 338;
    /* MOVE TF7REC.TF7GRP TO TFCREC.TF-AUD-BFR-TEXT;*/
    TFCREC.TF-AUD-BFR-TEXT = TF8REC.TF8GRP;

    TF0ES-XSTF7D0(); /* delete row on data base*/

    if (SQLCA.VAGen_SQLCODE == 0)
      TFCREC.TF-AUD-AFT-LEN = 338;
      TFCREC.TF-AUD-AFT-TEXT = " ";
      TF0ESU4(); /* write row to audit*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
         /* needs message*/
         /* duplicate record*/
        converseLib.validationFailed(39);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          TFAREC.TFAWCNT5 = 1;
          while (SQLCA.VAGen_SQLCODE == -911
           && TFAREC.TFAWCNT5 <= 2)
            TF0ES-XSTF7I0(); /* try to add record*/
            TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
          end
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(29);
               /* data base contention <try again>*/
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(26);
         /* data base has been changed*/
      TF0EW01.TF0EWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          TF0ES-XSTF7I0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  end

   /* DLVRUSA PVENKA CHANGES END*/

end // end TF0ESU7

// inactivate from data base
Function TF0ESU8()

         /* inactivate from data base*/

   /* DLVRUSA PVENKA CHANGES BEGIN*/
   /*  */
   /* CHANGED ALL THE TF7REC REFERENCES TO TF8REC TO POINT TO THE*/
   /* VCARR003*/

  TA1REC.TA1LOCAT[2] = "TF0ESD3";
   /* MOVE TF0EM001.TF1CARCD(TFAWSUB1) TO TF7REC.TF7CARCD;*/
  TF8REC.TF8CARCD = TF0EM001.TF1CARCD[TFAWSUB1];

  TF0ES-XSTF7I0(); /* select row*/

  if (converseVar.validationMsgNum == 100)
       /* this record has already been deleted*/
    converseLib.validationFailed(23);
    set TF0EM001.TF0EMACT[TFAWSUB1] cursor, bold;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TFAREC.TFAWCNT5 = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && TFAREC.TFAWCNT5 <= 2)
        TF0ES-XSTF7I0(); /* try to add record*/
        TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(29);
           /* data base contention <try again>*/
      end
    end
  end

   /* DLVRUSA PVENKA CHANGES END*/

end // end TF0ESU8

//*** RECORD=TF0EW01 ****
// traffic working storage.
// this area is the working storage unique to tf0e.
// ***********************
Record TF0EW01 type basicRecord
  5 TF0EWGRP TF0EWGRP ; 
    10 TF0EMNCR TF0EMNCR ; 
    10 TF0EWUPD TF0EWUPD ; 
    10 TF0EWFLG TF0EWFLG ; 
    10 TF0EWHCR TF0EWHCR ; 
    10 TF0EWDTE TF0EWDTE ; 
    10 TF1CARCD TF1CARCD [7] ; 
    10 XWHCD XWHCD [15] ; 
    10 TF1PBRFL TF1PBRFL [15] ; 
    10 TF0EWCHD TF0EWCHD ; 
end // end TF0EW01

//*** RECORD=TF0EW02 ****
// allocation working storage.
// this area is the working storage unique to
// application AL0A for rule set selection for batch processing
// ***********************
Record TF0EW02 type basicRecord
  5 TF0EW01G TF0EW01G ; 
    10 TF1CARCD TF1CARCD [3000] ; 
    10 XWHCD XWHCD ; 
    10 TF1PBRFL TF1PBRFL ; 
end // end TF0EW02

Record TF8REC type basicRecord
  5 TF8GRP TF8GRP ; 
    10 TF8KEYS TF8KEYS ; 
      15 TF8CARCD TF8CARCD ; 
    10 TF8CARNM TF8CARNM ; 
    10 TF8ABRV TF8ABRV ; 
    10 TF8SABRV TF8SABRV ; 
    10 TF8SVCID TF8SVCID ; 
    10 TF8SCAC TF8SCAC ; 
    10 TF8SMPKG TF8SMPKG ; 
    10 TF8MCARF TF8MCARF ; 
    10 TF8ECARF TF8ECARF ; 
    10 TF8FCARF TF8FCARF ; 
    10 TF8ACARF TF8ACARF ; 
    10 TF8CRQFL TF8CRQFL ; 
    10 TF8CARTC TF8CARTC ; 
    10 XWHCD XWHCD [15] ; 
    10 TF8PBRFL TF8PBRFL [15] ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TF8REC

// next carr to go to
DataItem TF0EMNCR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group Level of Record
DataItem TF0EW01G char(12003)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code hold
DataItem TF0EWCHD char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem TF0EWDTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add or delete flag
DataItem TF0EWFLG char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem TF0EWGRP char(164)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// highest carr code hold area
DataItem TF0EWHCR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add or delete flag
DataItem TF0EWUPD char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8ABRV char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8ACARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8CARCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8CARNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8CARTC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8CRQFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8ECARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8FCARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8GRP char(128)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8KEYS char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8MCARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8PBRFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8SABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8SCAC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8SMPKG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF8SVCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end