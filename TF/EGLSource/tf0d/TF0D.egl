package tf0d;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=TF0D ****
// ************************************************************
// *    TF0D    CARRIER REROUTE TABLE INQUIRE/MAINTENANCE     *
// *                                                          *
// *         This application provides a method to            *
// *         view, enter and maintain zip, zone,              *
// *         weight and carrier reroute table data.           *
// *                                                          *
// *         It may be FAST PATHed to from anywhere           *
// *         in the goal system, or can be accessed           *
// *         from TF0A 'Traffic Master Menu' screen           *
// *         option 07/Inquiry or 17/Maintenance.             *
// *                                                          *
// *         All records for the indicated warehouse          *
// *         are displayed when first entering.  The          *
// *         user is allowed to page back and                 *
// *         forward to view the information, as              *
// *         well as Add, Change and Delete table             *
// *         rows.                                            *
// *                                                          *
// *         Any data modified is verified and if it          *
// *         is complete and correct the table row            *
// *         is maintained.  The screen is                    *
// *         redisplayed indicating update performed          *
// *         If more than one line was selected each          *
// *         row is processed before returning                *
// *         screen with message of update or errors          *
// *                                                          *
// *         Transfers out of this application via            *
// *         FAST PATH or PF key displayed at bottom          *
// *         of the map, at any time.                         *
// ************************************************************
// * maint log
// *  when      who     what
// *-------- ---------- ---------------------------------------
// *Dec. 92  S.Clements creation
// *Feb. 93  M.Wilson   completion
// *June 93  M.Wilson   take edit out to allow '02' & '51'
// *                    access to enter "active" data.
// *                    (tf0d-51000-ver-dtl)
// *July 93  M.Wilson   take edit out to allow '04'access to
// *                    enter "active" data.
// *                    (tf0d-51000-ver-dtl)
// *03/02/98 DBETTR     REMOVED HARDCODED CENTURY ADDED
//                      DATE WINDOWING                       *
// ************************************************************
// *********************
Program TF0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TF0DW00 TF0DW00; // record
  TF0DW01 TF0DW01; // record
  TF1REC TF1REC; // record
  TF3REC TF3REC; // record
  TFWREC TFWREC; // record
  VPKZIP01 VPKZIP01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use TF0DM.TF0DM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTF001: XPTF001();
     /* ***********************************************************************/
     /* Initialize working storage and display output areas*/
     /* ***********************************************************************/

    set TF0DM001 initial; /* map input/output area*/
    set TF0DW01 empty; /* map display storage*/
    set TF1REC empty; /* io0860 record DPICK.VCARR001*/
    set TF3REC empty; /* io1640 record DPICK.VZIPCD01*/
    set VPKZIP01 empty; /* io6570 record DPICK.VPKZIP01*/
    set TA1REC empty; /* error diagnosis parameters*/
    set TA5REC empty; /* temporary storage parameters*/
    set TAEREC empty; /* error diagnosis information*/
    set SQLCA empty; /* SQL communication area*/

    TF0DW00.TF0DW-REQUEST-DATA = "Y"; /* request for data switch*/
    TF0DW00.TF0DW-FORMAT-MAP = "Y"; /* format screen switch*/
    TF0DW00.TF0DW-LINE-IDX = 1; /* set line index to 1*/

     /* set map warehouse code*/
    TF0DM001.XWHCD = COMMAREA.XWHCD;
     /* ***********************************************************************/
     /* Format system date*/
     /* ***********************************************************************/

    TF0DW00.TF0DW-DATE = VGVar.currentShortGregorianDate;

     /* ====== Y2K IN BEGIN =======*/

    if (TF0DW00.TF0DW-SYSTEM-DATE-YY < 60)
      TF0DW00.TF0DW-SYSTEM-DATE-CC = 20;
    else
      TF0DW00.TF0DW-SYSTEM-DATE-CC = 19;
    end

     /* ======= Y2K IN END =========*/


     /* ====== Y2K OUT BEGIN =======*/

     /* MOVE 19 TO TF0DW00.TF0DW-SYSTEM-DATE-CC;*/

     /* ======= Y2K OUT END =========*/

     /* ***********************************************************************/
     /* Initialize next from zip code heading fields*/
     /* ***********************************************************************/

    TF0DW01.TF0DW-PK-ZONE-NX-ZIP-CD = TF0DW00.TF0DW-PK-ZONE-NX-ZIP-CD;
    TF0DM001.TF0DM-PK-ZONE-NX-ZIP-CD = TF0DW00.TF0DW-PK-ZONE-NX-ZIP-CD;

    goto TF0D-00000-INIT; /* converse main process*/

    TF0D-00000-INIT: TF0D-00000-INIT();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map*/
     /* ------------------------------------------------------------*/

    goto TF0D-00000-INIT;

  end // end main
end // end TF0D

// Validate entry
Function TF0D-00000-INIT()
   /* ------------------------------------------------------------*/
   /* Determine whether passed warehouse is valid...*/
   /* ------------------------------------------------------------*/

  XPTF003(); /* Validate warehouse*/

  TF0D-MAIN-PROCESS(); /* Main processing*/

end // end TF0D-00000-INIT

// Obtain Data to Display
Function TF0D-10000-GET-DTA()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TF0DW00.TF0DW-REQUEST-DATA != "Y" /* data not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TF0DW00.XXXTSLEN = 421; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (TF0DW00.XXXMSGNO == 0) /* No message to display*/
    TF0DW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  TF0DS-TMP-STRG-PRG(); /* Purge any temporary storage*/

  TF0DW01.XWHCD = TF0DM001.XWHCD; /* whse code*/
  TF0DW01.XWHABRV = TF0DM001.XWHABRV; /* whse abbreviation*/
  TF0DW01.TF0DW-PK-ZONE-NX-ZIP-CD = TF0DM001.TF0DM-PK-ZONE-NX-ZIP-CD;

   /* ------------------------------------------------------------*/
   /* Select set and open cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  TF0DS-VPKZIP01-S1(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  TF0DW00.TF0DW-LINE-IDX = 1; /* Display line index*/
  TF0DW00.TF0DW-END-VPKZIP01 = "N"; /* End of cursor switch*/

  while (TF0DW00.TF0DW-END-VPKZIP01 == "N") /* Until end of cursor*/

    TF0DS-VPKZIP01-N1(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (TF0DW00.TF0DW-END-VPKZIP01 == "N") /* Not end of cursor*/
      TF0DS-SAVE-DATA(); /* Save data in display storage*/
    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (TF0DW00.TF0DW-LINE-IDX > 10) /* Page is full*/
      TF0DS-TMP-STRG-ADD(); /* Add page to temporary storage*/
      TF0DW00.TF0DW-LINE-IDX = 1; /* Set display line index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (TF0DW00.TF0DW-LINE-IDX > 1) /* Page was formatted*/
    TF0DS-TMP-STRG-ADD(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  TF0DS-VPKZIP01-C1(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (TF0DW00.TA5TSQIX == 0) /* No pages formatted*/
    TF0DW00.XXXMODID = "100"; /* Module identification*/
    TF0DW00.XXXMSGNO = 010; /* No exact match on selection criter*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TF0DW00.TF0DW-REQUEST-DATA = "N"; /* request for data switch*/
  TF0DW00.TF0DW-SCRN-CHGD = "N"; /* screen changed switch*/

end // end TF0D-10000-GET-DTA

// Format and display map
Function TF0D-20000-CNVERSE()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TF0DW00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (TF0DW00.TF0DW-REQUEST-DATA == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    if (TF0DW00.TF0DW-FORMAT-MAP == "Y") /* Map must be formatted*/
      TF0D-21000-FMT-DTA(); /* Format the data on the map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TF0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TF0DM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TF0DM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/


  if (TF0DW00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TF0DW00.XXXMSGNO != 0) /* Message to display*/
      if (TF0DW00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TF0DW00.XXXMSGNO);
      end /* Message number*/
    else
      TF0DM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    TF0DM001.XXXMODID = TF0DW00.XXXMODID; /* Module id*/
    set TF0DM001 alarm; /* Sound alarm*/
  end

  converse TF0DM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TF0DW00.XXXMODID = " "; /* Module identification*/
  TF0DW00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = TF0DM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TF0DM001.CAITEM; /* Application data*/

end // end TF0D-20000-CNVERSE

// Format display fields
Function TF0D-21000-FMT-DTA()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TF0DM001 initial; /* M001 input/output area*/
  TF0D-21100-FMT-HDR(); /* Setup header fields*/
  TF0DW00.TF0DW-FORMAT-MAP = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format warehouse code and abreviation on the screen.*/
   /* ------------------------------------------------------------*/

  TF0DM001.XWHCD = TFWREC.XWHCD; /* warehouse code*/
  TF0DM001.XWHABRV = TF0DW00.XWHABRV; /* warehouse abreviation*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TF0DW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (TF0DW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (TF0DW00.TF0DW-SCRN-CHGD == "Y") /* Page was changed*/
        TF0DS-TMP-STRG-UPD(); /* Update temporary storage page*/
        TF0DW00.TF0DW-SCRN-CHGD = "N"; /* Storage update switch*/
      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TF0DW00.XXXTSPAG > TF0DW00.TA5TSQIX) /* Desired greater highest*/
        TF0DW00.XXXTSPAG = TF0DW00.TA5TSQIX; /* Default to highest*/
      end

      TF0DS-TMP-STRG-GET(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* a) action desc, weather screen is being used for*/
    /* for maintenance or inquiry purposes.*/
    /* b) next zip code, optional field used for db2 fetch*/
    /* c) action literal, formated if maitenance mode, spaces*/
    /* if inquiry mode.*/
    /* ------------------------------------------------------------*/

    TF0DM001.TF0DM-PK-ZONE-NX-ZIP-CD = TF0DW01.TF0DW-PK-ZONE-NX-ZIP-CD; /* "from" zip code range*/

  end
    /* ------------------------------------------------------------*/
    /* Format the data in the map from the display storage.*/
    /* ------------------------------------------------------------*/

  TF0DW00.TF0DW-LINE-IDX = 1; /* Initialize line index*/

  while (TF0DW00.TF0DW-LINE-IDX <= 10) /* Until screen is full*/

    if (TF0DW00.TF0DW-LINE-IDX == 1 /* First select field*/
     && TFWREC.TFWOPT == "17")      /* Maintenance screen*/
      set TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] cursor, normal;
    end

    TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] = " ";

    TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] = TF0DW01.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX];
    TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] = TF0DW01.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX];
    TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] = TF0DW01.PK-CARR-ZONE-ID[TF0DW-LINE-IDX];
    TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] = TF0DW01.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX];
    TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] = TF0DW01.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX];
    TF0DM001.TF1CARCD[TF0DW-LINE-IDX] = TF0DW01.TF1CARCD[TF0DW-LINE-IDX];
    TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] = TF0DW01.TF-CARR-CD2[TF0DW-LINE-IDX];
    TF0DM001.XXXSTAT[TF0DW-LINE-IDX] = TF0DW01.XXXSTAT[TF0DW-LINE-IDX];

    TF0DW00.TF0DW-LINE-IDX = TF0DW00.TF0DW-LINE-IDX + 1; /* Increment ind*/

  end

   /* ------------------------------------------------------------*/
   /* Format the transfer 'to' application and item fields.*/
   /* ------------------------------------------------------------*/

  TF0DM001.CATOAP = " ";
  TF0DM001.CAITEM = " ";

end // end TF0D-21000-FMT-DTA

// Format header fields maint/inq
Function TF0D-21100-FMT-HDR()
   /* ------------------------------------------------------------*/
   /* Re-format the variable fields from maintenance/inquiry mode.*/
   /* ------------------------------------------------------------*/

  if (TFWREC.TFWOPT == "17") /* maintenance option entered*/

    TF0DM001.TF0DM-ACTION-DESC = "MAINTENANCE";
    TF0DW00.TF0DW-ACTION-DESC = "MAINTENANCE";
    TF0DW01.TF0DW-ACTION-DESC = "MAINTENANCE";
    TF0DM001.TF0DM-ACTION-LIT-1 = "ACTION";
    TF0DW00.TF0DW-ACTION-LIT-1 = "ACTION";
    TF0DW01.TF0DW-ACTION-LIT-1 = "ACTION";
    TF0DM001.TF0DM-ACTION-LIT-2 = "(A,C,D)";
    TF0DW00.TF0DW-ACTION-LIT-2 = "(A,C,D)";
    TF0DW01.TF0DW-ACTION-LIT-2 = "(A,C,D)";

  else

    TFWREC.TFWOPT = "07"; /* force option to inquiry*/
    TF0DM001.TF0DM-ACTION-DESC = "  INQUIRY  ";
    TF0DW00.TF0DW-ACTION-DESC = "  INQUIRY  ";
    TF0DW01.TF0DW-ACTION-DESC = "  INQUIRY  ";
    TF0DM001.TF0DM-ACTION-LIT-1 = "      ";
    TF0DW00.TF0DW-ACTION-LIT-1 = "      ";
    TF0DW01.TF0DW-ACTION-LIT-1 = "      ";
    TF0DM001.TF0DM-ACTION-LIT-2 = "       ";
    TF0DW00.TF0DW-ACTION-LIT-2 = "       ";
    TF0DW01.TF0DW-ACTION-LIT-2 = "       ";

    set TF0DM001.TF0DM-ACTION-LIT-1 skip, invisible;
    set TF0DM001.TF0DM-ACTION-LIT-2 skip, invisible;

    TF0DW00.TF0DW-LINE-IDX = 1;

    while (TF0DW00.TF0DW-LINE-IDX <= 10)

      set TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] skip, invisible;
      set TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] skip;
      set TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] skip;
      set TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] skip;
      set TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] skip;
      set TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] skip;
      set TF0DM001.TF1CARCD[TF0DW-LINE-IDX] skip;
      set TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] skip;
      set TF0DM001.XXXSTAT[TF0DW-LINE-IDX] skip;

      TF0DW00.TF0DW-LINE-IDX = TF0DW00.TF0DW-LINE-IDX + 1;

    end

  end
end // end TF0D-21100-FMT-HDR

// Check Attention Identifier
Function TF0D-30000-CH-ATTN()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (TF0DW00.TF0DW-REQUEST-DATA == "Y") /* request data*/
      set TF0DW01 empty; /* M001 display storage*/
    end

    TF0DW00.TF0DW-FORMAT-MAP = "Y"; /* Format the map switch*/
    TF0DW00.TF0DW-REQUEST-DATA = "N"; /* Request for data switch*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (TF0DM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      TF0DS-TMP-STRG-PRG(); /* Purge temporary storage*/
      TF0D-31000-EXIT(); /* Exit to another application*/
      set TF0DM001.CATOAP cursor, bold; /* Highlight*/
    else
      TF0DW00.XXXMODID = "300"; /* Module identification*/
      converseLib.validationFailed(058); /* PF key may not be used*/
    end

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TF0DM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "TF0A"; /* TO application TF MASTER MENU*/
    end

    TF0DS-TMP-STRG-PRG(); /* Purge temporary storage*/
    TF0D-31000-EXIT(); /* Exit to another application*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    TF0DW00.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(058); /* PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end TF0D-30000-CH-ATTN

// Exit to Another Application
Function TF0D-31000-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD00"; /* Indicate Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Indicate Master Menu*/
  end

   /* ------------------------------------------------------------*/
   /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* same system*/
    COMMAREA.XWHCD = TFWREC.XWHCD; /* Save warehouse code*/
    COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* Save user area*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* CURR application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/
    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end
  end

end // end TF0D-31000-EXIT

// Reset Fields to Normal Intnsty
Function TF0D-40000-RESET()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TF0DM001.TF0DM-ACTION-DESC initialAttributes; /* Maint/Inquiry Desc*/

  set TF0DM001.XWHCD initialAttributes; /* Warehouse code*/
  set TF0DM001.XWHABRV initialAttributes; /* Warehouse abbreviation*/

  set TF0DM001.TF0DM-PK-ZONE-NX-ZIP-CD initialAttributes; /* Next from zip code*/

  set TF0DM001.CATOAP initialAttributes; /* TO application*/
  set TF0DM001.CAITEM initialAttributes; /* Application data*/

  if (TFWREC.TFWOPT == "07") /* inquiry option*/
    return;
  end

  TF0DW00.TF0DW-LINE-IDX = 1; /* Initialize line index*/

  while (TF0DW00.TF0DW-LINE-IDX <= 10) /* Until end of lines*/

    set TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] normal;
    set TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] normal;
    set TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] normal;
    set TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] normal;
    set TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] normal;
    set TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] normal;
    set TF0DM001.TF1CARCD[TF0DW-LINE-IDX] normal;
    set TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] normal;
    set TF0DM001.XXXSTAT[TF0DW-LINE-IDX] normal;

    TF0DW00.TF0DW-LINE-IDX = TF0DW00.TF0DW-LINE-IDX + 1; /* Increment index*/

  end

end // end TF0D-40000-RESET

// Verify Entered Data
Function TF0D-50000-VERIFY()
   /* ------------------------------------------------------------*/
   /* Highlight any application FAST PATH data that was entered.*/
   /* ------------------------------------------------------------*/

  if (TF0DM001.CAITEM > " ") /* Application data was entered*/
    TF0DW00.XXXMODID = "500"; /* Module identification*/
    set TF0DM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(059); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request t scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll backwards*/
   || converseVar.eventKey is pf8) /* Scroll forward*/

    if (converseVar.eventKey is pf7
     && TF0DW00.XXXTSPAG < 2) /* No previous page to display*/
      TF0DW00.XXXMODID = "SCR";
      converseLib.validationFailed(007);
    else
      if (converseVar.eventKey is pf8
       && TF0DW00.XXXTSPAG >= TF0DW00.TA5TSQIX) /* no more pages*/
        TF0DW00.XXXMODID = "SCR";
        converseLib.validationFailed(008);
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (TF0DW00.TA5TSQIX > 0) /* Page was formatted*/

    TF0DW00.TF0DW-LINE-IDX = 10; /* Initialize line index*/

    while (TF0DW00.TF0DW-LINE-IDX > 0) /* Until end of lines*/

      /* --------------------------------------------------------*/
      /* If action code or detail data changed.  Verify data*/
      /* --------------------------------------------------------*/

      if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] != 
      TF0DW01.TF0DW-ACTION-CD[TF0DW-LINE-IDX]
       || TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] != 
      TF0DW01.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX]
       || TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] != 
      TF0DW01.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX]
       || TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] != 
      TF0DW01.PK-CARR-ZONE-ID[TF0DW-LINE-IDX]
       || TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] != 
      TF0DW01.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX]
       || TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] != 
      TF0DW01.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX]
       || TF0DM001.TF1CARCD[TF0DW-LINE-IDX] != 
      TF0DW01.TF1CARCD[TF0DW-LINE-IDX]
       || TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] != 
      TF0DW01.TF-CARR-CD2[TF0DW-LINE-IDX]
       || TF0DM001.XXXSTAT[TF0DW-LINE-IDX] != 
      TF0DW01.XXXSTAT[TF0DW-LINE-IDX])

        TF0D-51000-VER-DTL(); /* Verify data in the line*/

      end /* action code or detail changed*/

      TF0DW00.TF0DW-LINE-IDX = TF0DW00.TF0DW-LINE-IDX - 1; /* Decrmnt idx*/

    end /* loop to process all lines on screen*/
  end /* page formatted*/

   /* ------------------------------------------------------------*/
   /* Verify that key fields have not changed*/
   /* ------------------------------------------------------------*/

  TF0DW00.TF0DW-KEY-CHGD = "N"; /* Key value has NOT changed*/

  if (TF0DM001.XWHCD != TF0DW01.XWHCD) /* Warehouse code was changed*/
    TF0DW00.TF0DW-KEY-CHGD = "Y"; /* Key value has changed*/
  end /* Warehouse value changed*/

  if (TF0DM001.TF0DM-PK-ZONE-NX-ZIP-CD != 
  TF0DW01.TF0DW-PK-ZONE-NX-ZIP-CD) /* Zip changed*/
    TF0DW00.TF0DW-KEY-CHGD = "Y"; /* Key value has changed*/
  end /* Zip code changed*/

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end TF0D-50000-VERIFY

// Verify each detail line
Function TF0D-51000-VER-DTL()
   /* ------------------------------------------------------------*/
   /* If action entered is not a "a", "d", "c", " ", error*/
   /* ------------------------------------------------------------*/

  if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] != 
  TF0DW01.TF0DW-ACTION-CD[TF0DW-LINE-IDX])

    if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] != "A"
     && TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] != "C"
     && TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] != "D"
     && TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] != " ")
      TF0DW00.XXXMODID = "510"; /* Module identification*/
      set TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] cursor, bold;
      converseLib.validationFailed(013); /* Only valid codes A,C,D,blank*/

    else

      TF0DW00.TF0DW-DATA-CHGD = "Y"; /* data has been updated*/
      TF0DW00.TF0DW-SCRN-CHGD = "Y"; /* screen has been updated*/

    end

  else

    return; /* No changes on the action line*/

  end

   /* ------------------------------------------------------------*/
   /* Now that action is valid, check corresponding data.*/
   /* ------------------------------------------------------------*/

    /* ----------------------------------------------------------------*/
    /* edit values when action code is 'a' add*/
    /* ----------------------------------------------------------------*/

  if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] == "A")
    TF0D-51100-EDT-ADD(); /* edit add fields*/
  end

    /* ----------------------------------------------------------------*/
    /* edit values when action code is 'c' change*/
    /* ----------------------------------------------------------------*/

  if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] == "C")
    TF0D-51200-EDT-CHG(); /* edit change fields*/
  end

    /* ----------------------------------------------------------------*/
    /* edit values when action code is 'd' delete*/
    /* ----------------------------------------------------------------*/

  if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] == "D")
    TF0D-51300-EDT-DEL(); /* edit delete fields*/
  end

end // end TF0D-51000-VER-DTL

// Edit Add Records
Function TF0D-51100-EDT-ADD()
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'a' add*/
   /* ----------------------------------------------------------*/

   /* ----------------------------------------------------------*/
   /* Edit 'from' zip code*/
   /* ----------------------------------------------------------*/

  set TF3REC empty;

  TF3REC.XWHCD = TF0DM001.XWHCD;

  TF3REC.XXXZIP = TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX];

  TF0DS-VZIPCD01-S(); /* IO1640 zip code table*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(052); /* invalid zip code or required*/
    set TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] cursor, bold;
  end

   /* ----------------------------------------------------------*/
   /* Edit 'to' zip code*/
   /* ----------------------------------------------------------*/

  set TF3REC empty;

  TF3REC.XWHCD = TF0DM001.XWHCD;

  TF3REC.XXXZIP = TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX];

  TF0DS-VZIPCD01-S(); /* IO1640 zip code table*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
    converseLib.validationFailed(052); /* invalid zip code or required*/
    set TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] cursor, bold;
  end

   /* ----------------------------------------------------------*/
   /* Edit both 'from' and 'to' zip*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] > 
  TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX])
    converseLib.validationFailed(109); /* from zip cannot be > to zip*/
    set TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] cursor, bold;
    set TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] bold;
  end

   /* ----------------------------------------------------------*/
   /* Edit the zip zone code, no db2 table to check with.  It*/
   /* is considered valid as long as it's not blank.*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] == 00)
    converseLib.validationFailed(003); /* invalid value, re-enter*/
    set TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] cursor, bold;
  end

   /* ----------------------------------------------------------*/
   /* Edit weight range values*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] >= 
  TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX]) /* start value Ge end*/
    converseLib.validationFailed(105); /* from weight must be less or equal to to weight*/
    set TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] cursor, bold;
    set TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] bold;
  end

   /* ----------------------------------------------------------*/
   /* Edit both 'to' and 'from' carrier codes*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.TF1CARCD[TF0DW-LINE-IDX] == 
  TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX]) /* carriers are same*/

    converseLib.validationFailed(108); /* carriers must be different*/
    set TF0DM001.TF1CARCD[TF0DW-LINE-IDX] cursor, bold;
    set TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] bold;

  else /* Edit assigned to carrier*/

    set TF1REC empty;

    TF1REC.TF1CARCD = TF0DM001.TF1CARCD[TF0DW-LINE-IDX];

    TF0DS-VCARR001-S(); /* verify carrier code*/

    if (SQLCA.VAGen_SQLCODE != 0)
      converseLib.validationFailed(033); /* invalid carrier code*/
      set TF0DM001.TF1CARCD[TF0DW-LINE-IDX] cursor, bold;
    end
                                           /* Edit reroute to carrier*/
    set TF1REC empty;

    TF1REC.TF1CARCD = TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX];

    TF0DS-VCARR001-S(); /* verify carrier code*/

    if (SQLCA.VAGen_SQLCODE != 0)
      converseLib.validationFailed(033); /* invalid carrier code*/
      set TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] cursor, bold;
    end

  end

   /* ----------------------------------------------------------*/
   /* Edit status flag*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.XXXSTAT[TF0DW-LINE-IDX] != "A" /* status active*/
   && TF0DM001.XXXSTAT[TF0DW-LINE-IDX] != "I") /* status inactive*/
    converseLib.validationFailed(107); /* invalid value- values are 'a' or 'i'*/
    set TF0DM001.XXXSTAT[TF0DW-LINE-IDX] cursor, bold;
  end

end // end TF0D-51100-EDT-ADD

// Edit Change Records
Function TF0D-51200-EDT-CHG()
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'c' change*/
   /* ----------------------------------------------------------*/

  TF0DW00.TF0DW-STAT-CHG-ONLY-FL = " ";

   /* ----------------------------------------------------------*/
   /* Edit 'from' zip code*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] != 
  TF0DW01.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX]) /* from zip change*/

    TF0DW00.TF0DW-STAT-CHG-ONLY-FL = "N";

    set TF3REC empty; /* initialize io record*/

    TF3REC.XWHCD = TF0DM001.XWHCD; /* warehouse code*/

    TF3REC.XXXZIP = TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX]; /* 'to' zip code*/

    TF0DS-VZIPCD01-S(); /* IO1640 zip code table*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(052); /* invalid zip entered*/
      set TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] cursor, bold;
    end
  end

   /* ----------------------------------------------------------*/
   /* Edit 'to' zip code*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] != 
  TF0DW01.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX]) /* to zip change*/

    TF0DW00.TF0DW-STAT-CHG-ONLY-FL = "N";

    set TF3REC empty; /* initialize io record*/

    TF3REC.XWHCD = TF0DM001.XWHCD; /* warehouse code*/

    TF3REC.XXXZIP = TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX]; /* 'to' zip code*/

    TF0DS-VZIPCD01-S(); /* IO1640 zip code table*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      converseLib.validationFailed(052); /* invalid zip entered*/
      set TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] cursor, bold;
    end
  end

   /* ----------------------------------------------------------*/
   /* Edit both 'from' and 'to' zip*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] > 
  TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX])
    converseLib.validationFailed(109); /* from zip cannot be > to zip*/
    set TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] cursor, bold;
    set TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] bold;
  end
   /* ----------------------------------------------------------*/
   /* Edit the zip zone code.  Anything but blanks are valid.*/
   /* There is no db2 table to verify with.*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] != 
  TF0DW01.PK-CARR-ZONE-ID[TF0DW-LINE-IDX])
    if (TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] == 00)
      converseLib.validationFailed(003); /* invalid value, re-enter*/
      set TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] cursor, bold;
    else
      TF0DW00.TF0DW-STAT-CHG-ONLY-FL = "N";
    end
  end

   /* ----------------------------------------------------------*/
   /* Edit weight range values*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] != 
  TF0DW01.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] /* start weight change*/
   || TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] != 
  TF0DW01.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX]) /* end weight change*/
    TF0DW00.TF0DW-STAT-CHG-ONLY-FL = "Y";
    if (TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] >= 
    TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX]) /* start value Ge end*/
      converseLib.validationFailed(105); /* from weight must be less or equal to to weight*/
      set TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] cursor, bold;
      set TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] bold;
    end
  end

   /* ----------------------------------------------------------*/
   /* Edit both 'to' and 'from' carrier codes*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.TF1CARCD[TF0DW-LINE-IDX] != 
  TF0DW01.TF1CARCD[TF0DW-LINE-IDX] /* assigned to carrier change*/
   || TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] != 
  TF0DW01.TF-CARR-CD2[TF0DW-LINE-IDX]) /* reroute to carrier change*/

    TF0DW00.TF0DW-STAT-CHG-ONLY-FL = "N";

    if (TF0DM001.TF1CARCD[TF0DW-LINE-IDX] == 
    TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX]) /* carriers are same*/

      converseLib.validationFailed(108); /* carriers must be different*/
      set TF0DM001.TF1CARCD[TF0DW-LINE-IDX] cursor, bold;
      set TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] bold;

    else /* edit assigned to carrier*/

      if (TF0DM001.TF1CARCD[TF0DW-LINE-IDX] != 
      TF0DW01.TF1CARCD[TF0DW-LINE-IDX])

        set TF1REC empty; /* initialize io record*/
        TF1REC.TF1CARCD = TF0DM001.TF1CARCD[TF0DW-LINE-IDX];

        TF0DS-VCARR001-S(); /* verify carrier code*/

        if (SQLCA.VAGen_SQLCODE != 0)
          converseLib.validationFailed(033); /* invalid carrier entered*/
          set TF0DM001.TF1CARCD[TF0DW-LINE-IDX] cursor, bold;
        end
      end
                                              /* reroute to carrier change*/
      if (TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] != 
      TF0DW01.TF-CARR-CD2[TF0DW-LINE-IDX])

        set TF1REC empty; /* initialize io record*/
        TF1REC.TF1CARCD = TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX];

        TF0DS-VCARR001-S(); /* verify carrier code*/

        if (SQLCA.VAGen_SQLCODE != 0)
          converseLib.validationFailed(033); /* invalid carrier entered*/
          set TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] cursor, bold;
        end
      end

    end
  end

   /* ----------------------------------------------------------*/
   /* Edit status flag*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.XXXSTAT[TF0DW-LINE-IDX] != 
  TF0DW01.XXXSTAT[TF0DW-LINE-IDX]) /* status flag change*/
    if (TF0DM001.XXXSTAT[TF0DW-LINE-IDX] != "A" /* status active*/
     && TF0DM001.XXXSTAT[TF0DW-LINE-IDX] != "I") /* status inactive*/
      converseLib.validationFailed(107); /* invalid value - values are 'a' or 'i'*/
      set TF0DM001.XXXSTAT[TF0DW-LINE-IDX] cursor, bold;
    else
      if (TF0DW00.TF0DW-STAT-CHG-ONLY-FL == " ") /* no other fields chgd*/
        TF0DW00.TF0DW-STAT-CHG-ONLY-FL = "Y";
      end
    end
  end

end // end TF0D-51200-EDT-CHG

// Edit Delete Records
Function TF0D-51300-EDT-DEL()
   /* ----------------------------------------------------------*/
   /* Edit records where action eq 'd' delete*/
   /* ----------------------------------------------------------*/

  if (TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] != 
  TF0DW01.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX]) /* from zip change*/
    converseLib.validationFailed(103); /* field cannot be changed when action is 'd'*/
    set TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] cursor, bold;
  end

  if (TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] != 
  TF0DW01.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX]) /* to zip change*/
    converseLib.validationFailed(103); /* field cannot be changed when action is 'd'*/
    set TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] cursor, bold;
  end

  if (TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] != 
  TF0DW01.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX]) /* start weight change*/
    converseLib.validationFailed(103); /* field cannot be changed when action is 'd'*/
    set TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] cursor, bold;
  end

  if (TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] != 
  TF0DW01.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX]) /* end weight change*/
    converseLib.validationFailed(103); /* field cannot be changed when action is 'd'*/
    set TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] cursor, bold;
  end

  if (TF0DM001.TF1CARCD[TF0DW-LINE-IDX] != 
  TF0DW01.TF1CARCD[TF0DW-LINE-IDX]) /* assigned to carrier change*/
    converseLib.validationFailed(103); /* field cannot be changed when action is 'd'*/
    set TF0DM001.TF1CARCD[TF0DW-LINE-IDX] cursor, bold;
  end

  if (TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] != 
  TF0DW01.TF-CARR-CD2[TF0DW-LINE-IDX]) /* reroute to carrier change*/
    converseLib.validationFailed(103); /* field cannot be changed when action is 'd'*/
    set TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX] cursor, bold;
  end

  if (TF0DM001.XXXSTAT[TF0DW-LINE-IDX] != 
  TF0DW01.XXXSTAT[TF0DW-LINE-IDX]) /* status flag*/
    converseLib.validationFailed(103); /* field cannot be changed when action is 'd'*/
    set TF0DM001.XXXSTAT[TF0DW-LINE-IDX] cursor, bold;
  end

end // end TF0D-51300-EDT-DEL

// Process Valid Input Request
Function TF0D-60000-PROCESS()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before re-display.*/
   /* ------------------------------------------------------------*/

  TF0DW00.TF0DW-FORMAT-MAP = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If key changed, save the key information else process detail*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/
    if (TF0DW00.TF0DW-KEY-CHGD == "Y") /* warehouse or next from zip chged*/
      TF0DW00.TF0DW-REQUEST-DATA = "Y"; /* Request for data switch*/
      TFWREC.XWHCD = TF0DM001.XWHCD;
      TF0DW00.XWHCD = TF0DM001.XWHCD;
      TF0DW00.TF0DW-PK-ZONE-NX-ZIP-CD = TF0DM001.TF0DM-PK-ZONE-NX-ZIP-CD;
      XPTF002(); /* get new warehouse's abrev.*/
      return; /* Return to previous process*/
    else /* warehouse or next from zip not change*/

      if (TF0DW00.TF0DW-DATA-CHGD == "N") /* no updates for current data*/
        return; /* Return to previous process*/
      else

        TF0DW00.TF0DW-TIME = VGVar.currentFormattedTime; /* convert system time*/
        TF0DW00.TF0DW-SYSTEM-TIME-HH = TF0DW00.TF0DW-TIME-HH;
        TF0DW00.TF0DW-SYSTEM-TIME-MM = TF0DW00.TF0DW-TIME-MM;

        TF0D-61000-PRC-DTL(); /* perform detail line updates*/
        TF0DW00.TF0DW-DATA-CHGD = "N"; /* clear change switch*/
        TF0DW00.TF0DW-REQUEST-DATA = "Y"; /* Request new data*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TF0DW00.XXXTSPAG = TF0DW00.XXXTSPAG - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    TF0DW00.XXXTSPAG = TF0DW00.XXXTSPAG + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

end // end TF0D-60000-PROCESS

// Process each detail line
Function TF0D-61000-PRC-DTL()
   /* ------------------------------------------------------------*/
   /* Process previously edited data*/
   /* ------------------------------------------------------------*/

  TF0DW00.TF0DW-LINE-IDX = 1; /* initialize index*/

  while (TF0DW00.TF0DW-LINE-IDX <= 10) /* while there is still data*/

    /* **************************************************************/
    /* *                          ADD*/
    /* **************************************************************/

    if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] == "A") /* add*/

      TF0DS-VPKZIP01-S(); /* select row from dpick.vpkzip01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* row already exists*/
        TF0DW00.XXXMSGNO = 039; /* record cannot be added*/
        TF0DW00.XXXMODID = "610"; /* module id*/
      else
        VPKZIP01.XXXSTAT = TF0DM001.XXXSTAT[TF0DW-LINE-IDX];
        TF0DS-VPKZIP01-A(); /* add row to database*/
      end
    end

    /* **************************************************************/
    /* *                       CHANGE*/
    /* **************************************************************/

    if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] == "C") /* change*/

      TF0DS-VPKZIP01-S(); /* select row from dpick.vpkzip01*/

      if (SQLCA.VAGen_SQLCODE == 0 /* update would cause dup row*/
       && TF0DW00.TF0DW-STAT-CHG-ONLY-FL != "Y") /* non status fields chgd*/
        TF0DW00.XXXMSGNO = 039; /* duplicate record message*/
        TF0DW00.XXXMODID = "610"; /* module id*/
      else

        set VPKZIP01 empty; /* format record to delete*/

        VPKZIP01.XWHCD = TF0DW01.XWHCD;
        VPKZIP01.PK-ZONE-FM-ZIP-CD = TF0DW01.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX];
        VPKZIP01.PK-ZONE-TO-ZIP-CD = TF0DW01.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX];
        VPKZIP01.PK-CARR-ZONE-ID = TF0DW01.PK-CARR-ZONE-ID[TF0DW-LINE-IDX];
        VPKZIP01.PK-CARR-CRTN-FM-WT = TF0DW01.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX];
        VPKZIP01.PK-CARR-CRTN-TO-WT = TF0DW01.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX];
        VPKZIP01.TF1CARCD = TF0DW01.TF1CARCD[TF0DW-LINE-IDX];
        VPKZIP01.TF-CARR-CD2 = TF0DW01.TF-CARR-CD2[TF0DW-LINE-IDX];

          /* note: status is not part of the 'where clause' of the iomod*/

        TF0DS-VPKZIP01-D(); /* delete row from dpick.vpkzip01*/

        if (SQLCA.VAGen_SQLCODE == 0) /* delete successful*/

          set VPKZIP01 empty; /* format record to delete*/

          VPKZIP01.XWHCD = TF0DM001.XWHCD;
          VPKZIP01.PK-ZONE-FM-ZIP-CD = TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX];
          VPKZIP01.PK-ZONE-TO-ZIP-CD = TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX];
          VPKZIP01.PK-CARR-ZONE-ID = TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX];
          VPKZIP01.PK-CARR-CRTN-FM-WT = TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX];
          VPKZIP01.PK-CARR-CRTN-TO-WT = TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX];
          VPKZIP01.TF1CARCD = TF0DM001.TF1CARCD[TF0DW-LINE-IDX];
          VPKZIP01.TF-CARR-CD2 = TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX];
          VPKZIP01.XXXSTAT = TF0DM001.XXXSTAT[TF0DW-LINE-IDX];

          TF0DS-VPKZIP01-A(); /* insert new row into database*/

        else
          return;
        end
      end
    end

    /* **************************************************************/
    /* *                       DELETE*/
    /* **************************************************************/

    if (TF0DM001.TF0DM-ACTION-CD[TF0DW-LINE-IDX] == "D") /* delete*/

      set VPKZIP01 empty; /* format record to delete*/

      VPKZIP01.XWHCD = TF0DM001.XWHCD;
      VPKZIP01.PK-ZONE-FM-ZIP-CD = TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX];
      VPKZIP01.PK-ZONE-TO-ZIP-CD = TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX];
      VPKZIP01.PK-CARR-ZONE-ID = TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX];
      VPKZIP01.PK-CARR-CRTN-FM-WT = TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX];
      VPKZIP01.PK-CARR-CRTN-TO-WT = TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX];
      VPKZIP01.TF1CARCD = TF0DM001.TF1CARCD[TF0DW-LINE-IDX];
      VPKZIP01.TF-CARR-CD2 = TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX];

     /* note: status is not part of the 'where clause' of the iomod*/


      TF0DS-VPKZIP01-D(); /* delete row from dpick.vpkzip01*/

    end

    TF0DW00.TF0DW-LINE-IDX = TF0DW00.TF0DW-LINE-IDX + 1;

  end

end // end TF0D-61000-PRC-DTL

// List the rows in the table
Function TF0D-MAIN-PROCESS()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  TF0D-10000-GET-DTA(); /* Obtain the data to display*/

  TF0D-20000-CNVERSE(); /* Format and display the map*/

  TF0D-30000-CH-ATTN(); /* Check attention identifier*/

  TF0D-40000-RESET(); /* Reset fields to normal intensity*/

  TF0D-50000-VERIFY(); /* Verify the entered data*/

  TF0D-60000-PROCESS(); /* Process valid input request*/


end // end TF0D-MAIN-PROCESS

// Save DB2 Data to work storage
Function TF0DS-SAVE-DATA()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (TF0DW00.TA5TSQIX > 0 /* Not the first page*/
   && TF0DW00.TF0DW-LINE-IDX == 1) /* and first line on page*/
    TF0DW01.XWHCD = TFWREC.XWHCD; /* warehouse code*/
    TF0DW01.XWHABRV = TF0DW00.XWHABRV; /* warehouse abbreviation*/
    TF0DW01.TF0DW-PK-ZONE-NX-ZIP-CD = TF0DW00.TF0DW-PK-ZONE-NX-ZIP-CD; /* next from zip code*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  TF0DW01.TF0DW-ACTION-CD[TF0DW-LINE-IDX] = " "; /* action code*/
  TF0DW01.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX] = VPKZIP01.PK-ZONE-FM-ZIP-CD; /* from of zip range*/
  TF0DW01.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX] = VPKZIP01.PK-ZONE-TO-ZIP-CD; /* to of zip range*/
  TF0DW01.PK-CARR-ZONE-ID[TF0DW-LINE-IDX] = VPKZIP01.PK-CARR-ZONE-ID; /* carrier zone id*/
  TF0DW01.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX] = VPKZIP01.PK-CARR-CRTN-FM-WT; /* from carton weight*/
  TF0DW01.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX] = VPKZIP01.PK-CARR-CRTN-TO-WT; /* to carton weight*/
  TF0DW01.TF1CARCD[TF0DW-LINE-IDX] = VPKZIP01.TF1CARCD; /* picking assigned carrier*/
  TF0DW01.TF-CARR-CD2[TF0DW-LINE-IDX] = VPKZIP01.TF-CARR-CD2; /* reroute to carrier*/
  TF0DW01.XXXSTAT[TF0DW-LINE-IDX] = VPKZIP01.XXXSTAT; /* status code*/

  TF0DW00.TF0DW-LINE-IDX = TF0DW00.TF0DW-LINE-IDX + 1; /* increment index*/

end // end TF0DS-SAVE-DATA

// Add to Temporary Storage
Function TF0DS-TMP-STRG-ADD()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TF0DW01.XXXTSLEN = TF0DW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TF0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set TF0DW01 empty; /* M001 display storage*/
    TF0DW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TF0DW00.XXXMODID = "ADD"; /* Module identification*/
  converseLib.validationFailed(069); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-TMP-STRG-ADD

// Return Temporary Storage
Function TF0DS-TMP-STRG-GET()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TF0DW01.XXXTSLEN = TF0DW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = TF0DW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TF0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(069); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-TMP-STRG-GET

// Purge Temporary Storage
Function TF0DS-TMP-STRG-PRG()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TF0DW01 empty; /* M001 display storage*/
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  TF0DW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TF0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TF0DW00.XXXMODID = "PRG"; /* Module identification*/
  converseLib.validationFailed(069); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-TMP-STRG-PRG

// Update Temporary Storage
Function TF0DS-TMP-STRG-UPD()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TF0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(69); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-TMP-STRG-UPD

// Select Unique DPICK.VCARR001
Function TF0DS-VCARR001-S()
   /* ------------------------------------------------------------*/
   /* Select unique in DPICK.VCARR001*/
   /* ------------------------------------------------------------*/

  try
    call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(029); /* Data contention*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(069); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
  TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-VCARR001-S

// Add Row To DPICK.VPKZIP01
Function TF0DS-VPKZIP01-A()
   /* ------------------------------------------------------------*/
   /* Insert the row into DPICK.VPKZIP01*/
   /* ------------------------------------------------------------*/

   /* note: other records already moved to vpkzip01 rec in*/
        /* tf0ds-vpkzip01-s, for select unique call.*/

  VPKZIP01.ZZZCHGDT = TF0DW00.TF0DW-SYSTEM-DATE; /* change date*/
  VPKZIP01.ZZZCHGTM = TF0DW00.TF0DW-SYSTEM-TIME; /* change time*/

  try
    call "IO6570" ("A ", SQLCA, VPKZIP01) {isNoRefresh = yes, isExternal = yes};
  end /* Insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit table updates*/
      TF0DW00.XXXMSGNO = 009; /* table update successful*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == -803) /* Row already exists*/
      TF0DW00.XXXMSGNO = 039; /* Warning msg, dup rec cannot add*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(021); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(069); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKZIP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPKZIP01.VPKZIP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-VPKZIP01-A

// Close DPICK.VPKZIP01
Function TF0DS-VPKZIP01-C1()
   /* ------------------------------------------------------------*/
   /* Close the DPICK.VPKZIP01 table*/
   /* ------------------------------------------------------------*/

  try
    call "IO6570" ("C1", SQLCA, VPKZIP01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(069); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKZIP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-VPKZIP01-C1

// Delete Row From DPICK.VPKZIP01
Function TF0DS-VPKZIP01-D()
   /* ------------------------------------------------------------*/
   /* Delete the row from dpick.vpkzip01*/
   /* ------------------------------------------------------------*/

  try
    call "IO6570" ("D ", SQLCA, VPKZIP01) {isNoRefresh = yes, isExternal = yes};
  end /* Delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit table updates*/
      TF0DW00.XXXMSGNO = 009; /* table update successful*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row doesn't exist*/
      TF0DW00.XXXMSGNO = 026; /* data base has changed*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(029); /* Database contention*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(069); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKZIP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPKZIP01.VPKZIP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-VPKZIP01-D

// Fetch Next DPICK.VPKZIP01
Function TF0DS-VPKZIP01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row in DPICK.VPKZIP01*/
   /* ------------------------------------------------------------*/

  try
    call "IO6570" ("N1", SQLCA, VPKZIP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* if successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
      TF0DW00.TF0DW-END-VPKZIP01 = "Y"; /* end of cursor*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(029); /* database contention*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(069); /* Unexpected system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKZIP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPKZIP01.VPKZIP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-VPKZIP01-N1

// Select Unique DPICK.VPKZIP01
Function TF0DS-VPKZIP01-S()
   /* ------------------------------------------------------------*/
   /* Setup vpkzip01 record for call to database*/
   /* ------------------------------------------------------------*/

  set VPKZIP01 empty;

  VPKZIP01.XWHCD = TF0DM001.XWHCD;
  VPKZIP01.PK-ZONE-FM-ZIP-CD = TF0DM001.PK-ZONE-FM-ZIP-CD[TF0DW-LINE-IDX];
  VPKZIP01.PK-ZONE-TO-ZIP-CD = TF0DM001.PK-ZONE-TO-ZIP-CD[TF0DW-LINE-IDX];
  VPKZIP01.PK-CARR-ZONE-ID = TF0DM001.PK-CARR-ZONE-ID[TF0DW-LINE-IDX];
  VPKZIP01.PK-CARR-CRTN-FM-WT = TF0DM001.PK-CARR-CRTN-FM-WT[TF0DW-LINE-IDX];
  VPKZIP01.PK-CARR-CRTN-TO-WT = TF0DM001.PK-CARR-CRTN-TO-WT[TF0DW-LINE-IDX];
  VPKZIP01.TF1CARCD = TF0DM001.TF1CARCD[TF0DW-LINE-IDX];
  VPKZIP01.TF-CARR-CD2 = TF0DM001.TF-CARR-CD2[TF0DW-LINE-IDX];

   /* note: status is not part of the 'where clause' of the iomod*/

   /* ------------------------------------------------------------*/
   /* Select unique in DPICK.VPKZIP01*/
   /* ------------------------------------------------------------*/

  try
    call "IO6570" ("S ", SQLCA, VPKZIP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found is good!!*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(029); /* Data contention*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(069); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKZIP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPKZIP01.VPKZIP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-VPKZIP01-S

// Select Set From DPICK.VPKZIP01
Function TF0DS-VPKZIP01-S1()
   /* ------------------------------------------------------------*/
   /* Set cursor - DPICK.VPKZIP01*/
   /* ------------------------------------------------------------*/

  set VPKZIP01 empty; /* Row storage area*/

  VPKZIP01.XWHCD = TF0DM001.XWHCD; /* Warehouse code*/

  if (TF0DM001.TF0DM-PK-ZONE-NX-ZIP-CD == "   ") /* No key entry*/
    VPKZIP01.PK-ZONE-FM-ZIP-CD = "*"; /* start*/
  else /* From zip entered*/
    VPKZIP01.PK-ZONE-FM-ZIP-CD = TF0DM001.TF0DM-PK-ZONE-NX-ZIP-CD;
  end

  VPKZIP01.PK-ZONE-TO-ZIP-CD = "*";

  try
    call "IO6570" ("S1", SQLCA, VPKZIP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* okay too*/
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(029); /* data contention*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(069); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SET CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKZIP01"; /* Table view name*/
  TA1REC.TA1TBLKE = VPKZIP01.VPKZIP01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-VPKZIP01-S1

// Select uniqe on PICK.VZIPCD01
Function TF0DS-VZIPCD01-S()
   /* ------------------------------------------------------------*/
   /* Select unique row from dpick.vzipcd01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1640" ("S ", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0   /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(029); /* Data contention*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(069); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TF0DW00.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VZIPCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TF0DS-VZIPCD01-S

// Application initialization
Function XPTF001()
   /* ------------------------------------------------------------*/
   /* This procedure is intended to be performed as the first*/
   /* statement in an application.  It determines whether the*/
   /* application was entered via the menu system.  The TRAFFIC*/
   /* work record is formatted upon initial application entry.*/
   /* Warehouse code is validated and the warehouse abbreviation*/
   /* is obtained.  SQL system control fields are initialized.*/
   /* ------------------------------------------------------------*/


  XSENTRY(); /* Application entry validation*/


  XSSEGTR(); /* SET SEGMENTED TRANS ID*/

  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* Application has changed*/

    if (COMMAREA.CAFRMSYS == "TF") /* Came from within the TRAFFIC system*/

      TFWREC.TFWGRPLV = COMMAREA.CAUSERA; /* Restore work record*/

    else

      set TFWREC empty; /* Clear work record area*/
      TFWREC.XWHCD = COMMAREA.XWHCD; /* Set initial warehouse code*/

    end

    VGVar.handleHardIOErrors = 1; /* Return all file errors*/
    converseVar.commitOnConverse = 1; /* Commit on every converse*/

  end

  XPTF002(); /* Obtain warehouse abbreviation*/


end // end XPTF001

// Obtain warehouse abbreviation
Function XPTF002()
   /* ------------------------------------------------------------*/
   /* This process will validate the warehouse code passed in the*/
   /* TRAFFIC work record and obtain the warehouse abbreviation.*/
   /* If the warehouse code is not valid, an error number is*/
   /* returned in EZEMNO and warehouse abbreviation is spaces.*/
   /* If the code is valid, EZEMNO remains unchanged.*/
   /* ------------------------------------------------------------*/

  if (TFWREC.XWHCD == "  ") /* Warehouse code not entered*/

    converseLib.validationFailed(11); /* Indicate warehouse code required*/
    return; /* Return to caller*/

  end

  if (TFWREC.XWHCD in XWHTBL.XWHCD)
    TF0DW00.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0) /* Table entry not found*/

    converseLib.validationFailed(11); /* Indicate invalid warehouse*/
    return; /* Return to caller*/

  end

  if (XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Not active warehouse status*/

    converseLib.validationFailed(102); /* Indicate inactive warehouse*/
    return; /* Return to caller*/

  end


end // end XPTF002

// Validate Whse Prior To Entry
Function XPTF003()

     /* - - -  P R O C E S S    D E S C R I P T I O N  - - -*/

    /* This process is intended for use by traffic applications*/
    /* allow entry using only designated warehouses.*/

    /* This process validates that the warehouse is valid for the*/
    /* calling application.  If the transferred warehouse code is*/
    /* not valid, access will be denied to the application to*/
    /* which the user was attempting transfer (the calling pgm).*/

    /* A message will be displayed to the user indicating that*/
    /* the transfer is not allowed due to an invalid specified*/
    /* warehouse.  Control will be returned to the application*/
    /* that initiated the transfer.*/

     /* - - -  P R O C E S S    D E S C R I P T I O N  - - -*/

   /* ------------------------------------------------------------*/
   /* Validate the warehouse code.  If valid, return to previous*/
   /* process; otherwise, return to application initiating the*/
   /* transfer and display error message.*/
   /* ------------------------------------------------------------*/

  if (TFWREC.XWHCD == "51" /* warehouse code equal 51*/
   || TFWREC.XWHCD == "07" /* warehouse code equal 07*/
   || TFWREC.XWHCD == "04" /* warehouse code equal 04*/
   || TFWREC.XWHCD == "02") /* warehouse code equal 02*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Initiate COMMAREA for return.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAPP = COMMAREA.CAFROMAP;

   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = "WAREHOUSE IS NOT VALID FOR THIS APPLICATION";
  TAEREC.TAEDESC2 = TFWREC.XWHCD; /* invalid warehouse code*/

  TA1REC.TA1FUNC = "RETN"; /* termination function*/
  TA1REC.TA1TYPE = "APPL"; /* type of error*/
  TA1REC.TA1LOC = "WHSE VALIDATION"; /* location of error*/
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* application name*/
  TA1REC.TA1MAP = "XPTF003"; /* subroutine name*/
  TA1REC.TA1FYICD = "FYI"; /* indicate FYI*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis*/

   /* ------------------------------------------------------------*/
   /* Exit to the application that transferrred control.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CACURRAP = "MN0M"; /* current application*/
  COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* FROM application*/

  XSEXIT(); /* exit to another application*/

   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* termination function*/
  TA1REC.TA1LOC = "VALIDATE WAREHOUSE EXIT FAILURE ";
  TA1REC.TA1FYICD = "   "; /* clear FYI indicator*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/


end // end XPTF003

//*** RECORD=TF0DW00 ****
// Working Storage for TF0D
// ***********************
Record TF0DW00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXMODID XXXMODID ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TF0DW-LINE-IDX TF0DW-LINE-IDX ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 TF0DW-ACTION-DESC TF0DW-ACTION-DESC ; 
  10 TF0DW-PK-ZONE-NX-ZIP-CD TF0DW-PK-ZONE-NX-ZIP-CD ; 
  10 TF0DW-ACTION-LIT-1 TF0DW-ACTION-LIT-1 ; 
  10 TF0DW-ACTION-LIT-2 TF0DW-ACTION-LIT-2 ; 
  10 TF0DW-REQUEST-DATA TF0DW-REQUEST-DATA ; 
  10 TF0DW-FORMAT-MAP TF0DW-FORMAT-MAP ; 
  10 TF0DW-END-VPKZIP01 TF0DW-END-VPKZIP01 ; 
  10 TF0DW-KEY-CHGD TF0DW-KEY-CHGD ; 
  10 TF0DW-DATA-CHGD TF0DW-DATA-CHGD ; 
  10 TF0DW-SCRN-CHGD TF0DW-SCRN-CHGD ; 
  10 TF0DW-STAT-CHG-ONLY-FL TF0DW-STAT-CHG-ONLY-FL ; 
  10 * char(10) ; 
  10 TF0DW-XXXZIP1-10 char(10) ; 
    15 TF0DW-XXXZIP1-3 TF0DW-XXXZIP1-3 ; 
    15 TF0DW-XXXZIP4-10 TF0DW-XXXZIP4-10 ; 
  10 TF0DW-IO-TASK char(32) ; 
    15 TF0DW-FUNCTION TF0DW-FUNCTION ; 
    15 TF0DW-COUNT TF0DW-COUNT ; 
    15 TF0DW-LO-XXXZIP TF0DW-LO-XXXZIP ; 
    15 TF0DW-HI-XXXZIP TF0DW-HI-XXXZIP ; 
  10 TF0DW-SYSTEM-DATE TF0DW-SYSTEM-DATE ; 
    15 TF0DW-SYSTEM-DATE-CC TF0DW-SYSTEM-DATE-CC ; 
    15 TF0DW-DATE TF0DW-DATE ; 
      20 TF0DW-SYSTEM-DATE-YY TF0DW-SYSTEM-DATE-YY ; 
      20 TF0DW-SYSTEM-DATE-MM TF0DW-SYSTEM-DATE-MM ; 
      20 TF0DW-SYSTEM-DATE-DD TF0DW-SYSTEM-DATE-DD ; 
  10 TF0DW-TIME TF0DW-TIME ; 
    15 TF0DW-TIME-HH TF0DW-TIME-HH ; 
    15 * char(1) ; // filler
    15 TF0DW-TIME-MM TF0DW-TIME-MM ; 
    15 * char(1) ; // filler
    15 TF0DW-TIME-SECONDS TF0DW-TIME-SECONDS ; 
  10 TF0DW-SYSTEM-TIME TF0DW-SYSTEM-TIME ; 
    15 TF0DW-SYSTEM-TIME-HH TF0DW-SYSTEM-TIME-HH ; 
    15 TF0DW-SYSTEM-TIME-MM TF0DW-SYSTEM-TIME-MM ; 
end // end TF0DW00

//*** RECORD=TF0DW01 ****
// Map Working Storage for TF0DM001
// ***********************
Record TF0DW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(421) ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 TF0DW-ACTION-DESC TF0DW-ACTION-DESC ; 
    10 TF0DW-PK-ZONE-NX-ZIP-CD TF0DW-PK-ZONE-NX-ZIP-CD ; 
    10 TF0DW-ACTION-LIT-1 TF0DW-ACTION-LIT-1 ; 
    10 TF0DW-ACTION-LIT-2 TF0DW-ACTION-LIT-2 ; 
    10 * char(38) [10] ; 
      15 TF0DW-ACTION-CD TF0DW-ACTION-CD ; 
      15 PK-ZONE-FM-ZIP-CD PK-ZONE-FM-ZIP-CD ; 
      15 PK-ZONE-TO-ZIP-CD PK-ZONE-TO-ZIP-CD ; 
      15 PK-CARR-ZONE-ID PK-CARR-ZONE-ID ; 
      15 PK-CARR-CRTN-FM-WT PK-CARR-CRTN-FM-WT ; 
      15 PK-CARR-CRTN-TO-WT PK-CARR-CRTN-TO-WT ; 
      15 TF1CARCD TF1CARCD ; 
      15 TF-CARR-CD2 TF-CARR-CD2 ; 
      15 XXXSTAT XXXSTAT ; 
end // end TF0DW01

//*** RECORD=VPKZIP01 ****
// **********  dpick.vpkzip01 carrier reroute table  **********
// *
// * db2 table:       dpick.vpkzip01
// *
// * dclgen:          dcl01115
// *
// * i/o mod:         io6570
// *
// * key to table:    xwhcd,
// *                  pk_zone_fm_zip_cd,
// *
// * date created:    Nov. 1992
// *
// * maintenance log:
// *   who      when     why
// * -------- -------- ----------------------------------------
// * contract Nov. 92  initial record creation
// ************************
Record VPKZIP01 type basicRecord
  5 VPKZIP01-GROUP VPKZIP01-GROUP ; 
    10 VPKZIP01-KEY VPKZIP01-KEY ; 
      15 XWHCD XWHCD ; 
      15 PK-ZONE-FM-ZIP-CD PK-ZONE-FM-ZIP-CD ; 
      15 PK-ZONE-TO-ZIP-CD PK-ZONE-TO-ZIP-CD ; 
      15 PK-CARR-ZONE-ID PK-CARR-ZONE-ID ; 
      15 PK-CARR-CRTN-FM-WT PK-CARR-CRTN-FM-WT ; 
      15 PK-CARR-CRTN-TO-WT PK-CARR-CRTN-TO-WT ; 
      15 TF1CARCD TF1CARCD ; 
      15 TF-CARR-CD2 TF-CARR-CD2 ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VPKZIP01

// PK_CARR_CRTN_FM_WT
DataItem PK-CARR-CRTN-FM-WT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_CARR_CRTN_TO_WT
DataItem PK-CARR-CRTN-TO-WT decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PK_CARR_ZONE_ID
DataItem PK-CARR-ZONE-ID char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_ZONE_FM_ZIP_CD
DataItem PK-ZONE-FM-ZIP-CD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_ZONE_TO_ZIP_CD
DataItem PK-ZONE-TO-ZIP-CD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Action Selection Code
DataItem TF0DW-ACTION-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection area
DataItem TF0DW-ACTION-DESC char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maint Action Column Heading 1
DataItem TF0DW-ACTION-LIT-1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Maint Action Column Heading 2
DataItem TF0DW-ACTION-LIT-2 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data exist sw for vpkzip01
DataItem TF0DW-COUNT num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor switch for Vpkzip01
DataItem TF0DW-DATA-CHGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date, matching ezedte
DataItem TF0DW-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor switch for Vpkzip01
DataItem TF0DW-END-VPKZIP01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF0DW-FORMAT-MAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data exist sw for vpkzip01
DataItem TF0DW-FUNCTION char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data exist sw for vpkzip01
DataItem TF0DW-HI-XXXZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for Vpkzip01
DataItem TF0DW-KEY-CHGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen index
DataItem TF0DW-LINE-IDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data exist sw for vpkzip01
DataItem TF0DW-LO-XXXZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF0DW-PK-ZONE-NX-ZIP-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TF0DW-REQUEST-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor switch for Vpkzip01
DataItem TF0DW-SCRN-CHGD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status change only flag
DataItem TF0DW-STAT-CHG-ONLY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Full system date, ccyymmdd
DataItem TF0DW-SYSTEM-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system century
DataItem TF0DW-SYSTEM-DATE-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system day
DataItem TF0DW-SYSTEM-DATE-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system month
DataItem TF0DW-SYSTEM-DATE-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system year
DataItem TF0DW-SYSTEM-DATE-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system time
DataItem TF0DW-SYSTEM-TIME num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system time, hour
DataItem TF0DW-SYSTEM-TIME-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// system time, minutes
DataItem TF0DW-SYSTEM-TIME-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time, matching ezetim
DataItem TF0DW-TIME char(8)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// hour
DataItem TF0DW-TIME-HH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// minutes
DataItem TF0DW-TIME-MM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// seconds
DataItem TF0DW-TIME-SECONDS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data exist sw for vpkzip01
DataItem TF0DW-XXXZIP1-3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data exist sw for vpkzip01
DataItem TF0DW-XXXZIP4-10 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record group level
DataItem VPKZIP01-GROUP char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
DataItem VPKZIP01-KEY char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

