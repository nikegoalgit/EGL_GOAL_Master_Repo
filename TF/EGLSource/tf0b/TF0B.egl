package tf0b;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=TF0B ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TF0BTTYP).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TF0BTTYP        JCL statement        Variable        Columns
// --------        -------------        --------        -------
//    J                JOB              TF0BWUID          5-10
//    N  (Test only)  NOTIFY            TF0BWUID         23-28
//    O               OUTPUT            TF0BMRMT         32-36
//                    "    "            TF0BMCPY           45
//    P             Parameters          TF0BWJCL          1-80
// 
// The data in working storage (TF0BW01) is substituted and the
// statement is written to the internal reader.
// 
// The user may exit to any allowed application, via PF key or
// FAST PATH, from the menu, only.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          07/31/87  SPOPA   New application.
// FIX      05/25/88  SPOPA   Provide scroll functions for
//                            printer display map (TF0BM001).
//          05/30/89  jwood   added xssegtr logic, noncsp opts.
// ad000    10/09/90  mpluth  Size of XROCD field was increased
//                            Made changes in TF0B001, TF0B011,
//                            and TF0B014.
// TF00     10/08/92  WTATE   ADDED XBCCD TO REPORT SELECT
// *********************
Program TF0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TF0BW01 TF0BW01; // record
  TF0BW02 TF0BW02; // record
  TF0BW03 TF0BW03; // record
  TF0BW04 TF0BW04; // record
  TF0BW05 TF0BW05; // record
  TF0BW99 TF0BW99; // record
  TF0BW9J TF0BW9J { redefines = TF0BW99 } ; // record
  TF0BW9N TF0BW9N { redefines = TF0BW99 } ; // record
  TF0BW9O TF0BW9O { redefines = TF0BW99 } ; // record
  TF1REC TF1REC; // record
  TF4REC TF4REC; // record
  TFWREC TFWREC; // record
  UT1REC UT1REC; // record
  UT2REC UT2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TF0BT02 {deleteAfterUse = yes}; // table
  use TF0BT03 {deleteAfterUse = yes}; // table
  use TF0BT04 {deleteAfterUse = yes}; // table
  use TF0BT05 {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use TF0BM.TF0BM001,  // forms
      TF0BM.TF0BM002, 
      TF0BM.TF0BM003, 
      TF0BM.TF0BM004, 
      TF0BM.TF0BM005, 
      TF0BM.TF0BM099
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TF0B001: TF0B001();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Traffic Report Request process.*/
     /* ------------------------------------------------------------*/

    goto TF0B002; /* Traffic Report Request*/


    TF0B002: TF0B002();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Traffic Report Request process.*/
     /* ------------------------------------------------------------*/

    goto TF0B002; /* Traffic Report Request*/


  end // end main
end // end TF0B

// Application initialization
Function TF0B001()
   /* ------------------------------------------------------------*/
   /* Determine whether application was entered via menu system.*/
   /* Obtain the CICS Logon User Identification.*/
   /* Initialize traffic system work areas.*/
   /* Initialize the application working storage.*/
   /* Search the Remote Printer Destination Table (XROTBL) to*/
   /* determine the default remote printer destination.*/
   /* Initialize the selection line index limit.*/
   /* ------------------------------------------------------------*/

  VGVar.handleHardIOErrors = 1; /* Return all file errors*/
  converseVar.commitOnConverse = 1; /* Commit on every converse*/

  XSENTRY(); /* Application entry validation*/
  XSSEGTR(); /* set segmented transaction id*/

  set UT1REC empty; /* Initialize subroutine parameters*/

  call "UT0200" (UT1REC) {isNoRefresh = yes, isExternal = yes}; /* Obtain user identification*/

  if (UT1REC.UT1RETCD != 0) /* Non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TF0B001 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CICS USER IDENTIFICATION";
    SQLCA.SQLCAREC = UT1REC.UT1GRPLV; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(69); /* Indicate system error*/

    COMMAREA.CATOAP = "TF0A"; /* Traffic Master Menu*/

    XSEXIT(); /* Exit to master menu*/

    exit program; /* Terminate application if exit failed*/

  end

  XSTFS01(); /* Traffic application initialization*/

  set TF0BW01 empty; /* Initialize working storage*/
  set TF0BM001 initial; /* Initialize map output area*/
  set TF0BM002 initial; /* Initialize map output area*/
  set TF0BM003 initial; /* Initialize map output area*/
  set TF0BM004 initial; /* Initialize map output area*/
  set TF0BM005 initial; /* Initialize map output area*/
  set TF0BM099 initial; /* Initialize map output area*/

  TF0BW01.TF0BWUID = UT1REC.UT1USRID; /* User identification*/

  TF0BW01.XWHCD = TFWREC.XWHCD; /* Initialize warehouse code*/

  TF0BS00(); /* Obtain warehouse abbreviation*/

  TF0BW01.TF0BWIXM = 1; /* Initialize line index*/

  while (XROTBL.XROCD[TF0BWIXM] != "9999" /* Until end of table*/
   && TF0BW01.TF0BMRMT == " ") /* or printer is found*/

    if (XROTBL.XXXSTAT[TF0BWIXM] == "A") /* Active status*/

      if (XROTBL.XWHCD1[TF0BWIXM] == TF0BW01.XWHCD /* Warehouse*/
       || XROTBL.XWHCD2[TF0BWIXM] == TF0BW01.XWHCD /* code*/
       || XROTBL.XWHCD3[TF0BWIXM] == TF0BW01.XWHCD) /* matches*/

        TF0BW01.TF0BMRMT = XROTBL.XROPDEST[TF0BWIXM]; /* Printer*/
        TF0BW01.TF0BMDES = XROTBL.XRODESC[TF0BWIXM]; /* Description*/

      end

    end

    TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM + 1; /* Increment line number*/

  end

  TF0BW01.TF0BWIXL = 5; /* Number of selection lines*/

  TF0BW01.XXXRVNBR = "01"; /* Application revision number*/


end // end TF0B001

// TRAFFIC Report Requests
Function TF0B002()
   /* ------------------------------------------------------------*/
   /* Invoke the process for each selection entered on the menu.*/
   /* After all selections are processed, display the menu.*/
   /* ------------------------------------------------------------*/

  if (TF0BW01.TF0BMSEL[1] == "S" /* Line 1 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    TF0B010(); /* Specify/Override Default Printer*/
  end

  if (TF0BW01.TF0BMSEL[2] == "S" /* Line 2 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    TF0B020(); /* Carrier Table Report*/
  end

  if (TF0BW01.TF0BMSEL[3] == "S" /* Line 3 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    TF0B030(); /* Destination Table Report*/
  end

  if (TF0BW01.TF0BMSEL[4] == "S" /* Line 4 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    TF0B040(); /* Zip/Carrier/Destination Report*/
  end

  if (TF0BW01.TF0BMSEL[5] == "S" /* Line 5 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    TF0B050(); /* Customer Exception Matrix*/
  end

  TF0B990(); /* Traffic Report Request Menu*/


end // end TF0B002

// Specify/Override Printer
Function TF0B010()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TF0B011(); /* Format and display the map*/

  TF0B012(); /* Check attention identifier*/

  TF0B013(); /* Reset fields to normal intensity*/

  TF0B014(); /* Verify the entered data*/

  TF0B015(); /* Process valid input request*/


end // end TF0B010

// Format and display the map
Function TF0B011()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map,*/
   /* including the active printer destination table entries.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    set TF0BM001 initial; /* Clear map output area*/

    TF0BM001.XXXRVNBR = TF0BW01.XXXRVNBR; /* Revision number*/

    TF0BM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TF0BM001.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/
    TF0BM001.XWHABRV = TF0BW01.XWHABRV; /* Warehouse abbreviation*/

    TF0BM001.TF0BMRMT = TF0BW01.TF0BMRMT; /* Printer*/
    TF0BM001.TF0BMDES = TF0BW01.TF0BMDES; /* Description*/

    TF0BW01.TF0BWSWP = "N"; /* Initialize page switch*/
    TF0BW01.TF0BWIXM = 1; /* Initialize map index*/

    if (TF0BW01.TF0BWIXP > 0) /* If not first page*/

      TF0BW01.TF0BWIXT = TF0BW01.TF0BWIXS[TF0BWIXP];
                                   /* Starting index*/
    else
      TF0BW01.TF0BWIXT = 1; /* Initialize table index*/

    end

    TF0BW01.TF0BWIXP = TF0BW01.TF0BWIXP + 1; /* Increment page index*/

    while (TF0BW01.TF0BWSWP == "N" /* Until page full*/
     && XROTBL.XROCD[TF0BWIXT] != "9999") /* or end of table*/

      if (XROTBL.XXXSTAT[TF0BWIXT] == "A") /* Active status*/

        if (TF0BW01.TF0BWIXM > 28) /* Display entries exceeded*/

          if (TF0BW01.TF0BWIXP > 10) /* Page entries exceeded*/

            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "APPL"; /* Type of error*/
            TA1REC.TA1PGMNM = "TF0B011 "; /* Process name*/
            TA1REC.TA1LOC = "XROTBL DISPLAY ENTRIES EXCEEDED";
            TA1REC.TA1MAP = "TF0BM001"; /* Map name*/
            SQLCA.SQLCAREC = " "; /* Application error information*/

            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error dia routine*/

            converseLib.clearScreen();
             /* Clear screen before redisplay*/

          else

            TF0BW01.TF0BWIXS[TF0BWIXP] = TF0BW01.TF0BWIXT;

          end

          TF0BW01.TF0BWSWP = "Y"; /* Indicate page full*/

        else

          TF0BM001.XROPDEST[TF0BWIXM] = XROTBL.XROPDEST[TF0BWIXT];
          TF0BM001.XRODESC[TF0BWIXM] = XROTBL.XRODESC[TF0BWIXT];

          TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM + 1; /* Increment map index*/

        end

      end

      if (TF0BW01.TF0BWSWP == "N") /* If page not full*/

        TF0BW01.TF0BWIXT = TF0BW01.TF0BWIXT + 1; /* Increment table index*/

      end

    end

    if (TF0BW01.TF0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TF0BW01.TF0BWMNO);
    end /* Job submitted message number*/
    TF0BW01.TF0BWMNO = 0; /* Reset message number*/

  else

    set TF0BM001 alarm; /* Indicate sound alarm*/

  end

  converse TF0BM001 ;


end // end TF0B011

// Check attention identifier
Function TF0B012()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TF0BW01.TF0BWIXP = TF0BW01.TF0BWIXP - 1; /* Decrement page index*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    converseLib.validationFailed(2); /* Indicate invalid attention key*/
    TF0BM001.XXXPRCNM = "TF0B012"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TF0B012

// Reset highlighted fields
Function TF0B013()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TF0BM001.TF0BMRMT initialAttributes; /* Printer destination*/


end // end TF0B013

// Verify the entered data
Function TF0B014()
   /* ------------------------------------------------------------*/
   /* If scroll was requested and data changed, indicate error.*/
   /* If scroll was requested, verify pages exist to scroll.*/
   /* If printer was modified, verify the destination.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back requested*/
   || converseVar.eventKey is pf8) /* or scroll forward requested*/

    if (TF0BM001.TF0BMRMT != TF0BW01.TF0BMRMT) /* Printer was changed*/

      set TF0BM001.TF0BMRMT cursor, modified, bold; /* Highlight data*/

      TF0BM001.TF0BMDES = " "; /* Clear printer description*/

      converseLib.validationFailed(95); /* Indicate cannot change data*/
      TF0BM001.XXXPRCNM = "TF0B014"; /* Process name*/

    end

  end

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    if (TF0BW01.TF0BWIXP == 1) /* First page displayed*/

      converseLib.validationFailed(7); /* Indicate no previous page*/
      TF0BM001.XXXPRCNM = "TF0B014"; /* Process name*/

    end

  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    if (XROTBL.XROCD[TF0BWIXT] == "9999") /* End of table*/

      converseLib.validationFailed(8); /* Indicate no more pages*/
      TF0BM001.XXXPRCNM = "TF0B014"; /* Process name*/

    end

  end

  if (converseVar.eventKey not pf7 /* Scroll back not requested*/
   && converseVar.eventKey not pf8) /* and scroll forward not requested*/

    if (TF0BM001.TF0BMRMT != TF0BW01.TF0BMRMT /* Printer was changed*/
     || TF0BW01.TF0BMRMT == " ")              /* or no printer is specified*/

      if (TF0BM001.TF0BMRMT in XROTBL.XROPDEST)
        TF0BM001.TF0BMDES = XROTBL.XRODESC[sysVar.arrayIndex];
      end

      if (sysVar.arrayIndex == 0 /* Table entry not found*/
       || XROTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* or entry is not active*/

        set TF0BM001.TF0BMRMT cursor, modified, bold; /* Highlight data*/

        TF0BM001.TF0BMDES = " "; /* Clear printer description*/

        converseLib.validationFailed(61); /* Printer destination invalid*/
        TF0BM001.XXXPRCNM = "TF0B014"; /* Process name*/

      end

    end

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TF0B014

// Process valid input request
Function TF0B015()
   /* ------------------------------------------------------------*/
   /* If scroll was requested, exit to display the page.*/
   /* Save printer destination and description.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If scroll back requested*/

    TF0BW01.TF0BWIXP = TF0BW01.TF0BWIXP - 2; /* Decrement page index*/

    exit stack; /* Exit to display previous page*/

  end

  if (converseVar.eventKey is pf8) /* If scroll forward requested*/

    exit stack; /* Exit to display next page*/

  end

  TF0BW01.TF0BMRMT = TF0BM001.TF0BMRMT; /* Printer*/
  TF0BW01.TF0BMDES = TF0BM001.TF0BMDES; /* Description*/

  TF0BW01.TF0BMSEL[1] = "*"; /* Indicate function completed*/


end // end TF0B015

// Carrier Table Report
Function TF0B020()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TF0B021(); /* Format and display the map*/

  TF0B022(); /* Check attention identifier*/

  TF0B023(); /* Reset fields to normal intensity*/

  TF0B024(); /* Verify the entered data*/

  TF0B025(); /* Process valid input request*/


end // end TF0B020

// Format and display the map
Function TF0B021()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    TF0BM002.XXXRVNBR = TF0BW01.XXXRVNBR; /* Revision number*/

    TF0BM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TF0BM002.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/
    TF0BM002.XWHABRV = TF0BW01.XWHABRV; /* Warehouse abbreviation*/

    TF0BM002.TF0BMRMT = TF0BW01.TF0BMRMT; /* Printer*/
    TF0BM002.TF0BMDES = TF0BW01.TF0BMDES; /* Description*/

    if (TF0BW01.TF0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TF0BW01.TF0BWMNO);
    end /* Job submitted message number*/
    TF0BW01.TF0BWMNO = 0; /* Reset message number*/

  else

    set TF0BM002 alarm; /* Indicate sound alarm*/

  end

  converse TF0BM002 ;


end // end TF0B021

// Check attention identifier
Function TF0B022()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TF0BW01.TF0BMSEL[2] = "C"; /* Indicate selection cancelled*/

    set TF0BM002 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(2); /* Indicate invalid attention key*/
    TF0BM002.XXXPRCNM = "TF0B022"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TF0B022

// Reset highlighted fields
Function TF0B023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TF0BM002.TF0BMCPY initialAttributes; /* Number of copies*/

  set TF0BM002.TF0BMSEL[1] initialAttributes; /* Selection tag 1*/
  set TF0BM002.TF0BMSEL[2] initialAttributes; /* Selection tag 2*/


end // end TF0B023

// Verify the entered data
Function TF0B024()
   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TF0BM002.TF0BMSEL[1] <= " " /* Line 1 not selected*/
   && TF0BM002.TF0BMSEL[2] <= " ") /* and line 2 not selected*/

    set TF0BM002.TF0BMSEL[1] cursor; /* Position cursor*/
    converseLib.validationFailed(66); /* Select at least one*/
    TF0BM002.XXXPRCNM = "TF0B024"; /* Process name*/

  else

    TF0BW01.TF0BWIXM = 2; /* Initialize line index*/

    while (TF0BW01.TF0BWIXM > 0) /* Until all lines are verified*/

      if (TF0BM002.TF0BMSEL[TF0BWIXM] > " " /* Line was selected*/
       && TF0BM002.TF0BMSEL[TF0BWIXM] != "S") /* and not with an "S"*/

        set TF0BM002.TF0BMSEL[TF0BWIXM] cursor, modified, bold;
                                   /* Highlight*/
        converseLib.validationFailed(60); /* Only "S" is valid for tag*/
        TF0BM002.XXXPRCNM = "TF0B024"; /* Process name*/

      end

      TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM - 1; /* Decrement line number*/

    end

  end

  if (TF0BM002.TF0BMCPY == 0) /* Number of copies invalid*/

    set TF0BM002.TF0BMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(73); /* Indicate invalid number*/
    TF0BM002.XXXPRCNM = "TF0B024"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TF0B024

// Process valid input request
Function TF0B025()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set TF0BW02 empty; /* Initialize parameters work area*/

  if (TF0BM002.TF0BMSEL[1] == "S") /* Line 1 selected*/

    TF0BW02.TF0BWFL1 = "Y"; /* Indicate report by code*/
  else
    TF0BW02.TF0BWFL1 = "N"; /* Indicate no report*/

  end

  if (TF0BM002.TF0BMSEL[2] == "S") /* Line 2 selected*/

    TF0BW02.TF0BWFL2 = "Y"; /* Indicate report by code*/
  else
    TF0BW02.TF0BWFL2 = "N"; /* Indicate no report*/

  end

  TF0BW01.TF0BWJCL = TF0BW02.TF0BWJCL; /* Report parameters*/
  TF0BW01.TF0BMCPY = TF0BM002.TF0BMCPY; /* Number of copies*/

  TF0B026(); /* Enque the internal reader*/

  while (TF0BW01.TF0BWSWS == "N") /* Until job is submitted*/

    TF0BW99.TF0BWJCL = TF0BT02.TF0BWJCL[TF0BWIXT]; /* JCL statement*/
    TF0BW01.TF0BTTYP = TF0BT02.TF0BTTYP[TF0BWIXT]; /* Statement type*/

    TF0B027(); /* Write to the internal reader*/

  end

  TF0B028(); /* Deque the internal reader*/

  TF0BW01.TF0BWMNO = 62; /* Job was submitted*/
  TF0BW01.TF0BMSEL[2] = "*"; /* Indicate function completed*/

  set TF0BM002 initial; /* Clear map output area*/


end // end TF0B025

// Enque the Internal Reader
Function TF0B026()
   /* ------------------------------------------------------------*/
   /* Enque the Internal Reader queue for job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "E"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes}; /* Enque reader*/

  if (UT2REC.UT2RETCD != 0) /* Non-zero return code*/

    converseLib.validationFailed(68); /* Indicate not available*/

    exit stack; /* Exit to redisplay map*/

  end

  TF0BW01.TF0BWIXT = 1; /* Initialize table index*/
  TF0BW01.TF0BWSWS = "N"; /* Initialize submit switch*/


end // end TF0B026

// Submit JCL to internal reader
Function TF0B027()
   /* ------------------------------------------------------------*/
   /* Format the variable areas of the JCL statement.*/
   /* Write Job Control Language to the Internal Reader queue.*/
   /* If error occurred, report to the error diagnosis facility.*/
   /* Indicate the job was submitted when end of file is written.*/
   /* ------------------------------------------------------------*/

  if (TF0BW01.TF0BTTYP == "J") /* JOB statement*/
    TF0BW9J.TF0BWUID = TF0BW01.TF0BWUID; /* User identification*/
  end

  if (TF0BW01.TF0BTTYP == "N") /* NOTIFY statement*/
    TF0BW9N.TF0BWUID = TF0BW01.TF0BWUID; /* User identification*/
  end

  if (TF0BW01.TF0BTTYP == "O") /* OUTPUT statement*/
    TF0BW9O.TF0BMCPY = TF0BW01.TF0BMCPY; /* Number of copies*/
    TF0BW9O.TF0BMRMT = TF0BW01.TF0BMRMT; /* Print destination*/
  end

  if (TF0BW01.TF0BTTYP == "P") /* Parameter statement*/
    TF0BW99.TF0BWJCL = TF0BW01.TF0BWJCL; /* Report parameters*/
  end

  try
    add TF0BW99 ;
  end

  if (sysVar.errorCode != "00000000") /* Non-zero return code*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TF0B027 "; /* Process name*/
    TA1REC.TA1LOC = "WRITE JCL TO INTERNAL READER";
    TA1REC.TA1MAP = sysVar.errorCode; /* Return code*/
    SQLCA.SQLCAREC = TF0BW99.TF0BWJCL; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(69); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


  if (TF0BW99.TF0BWJCL == "/*EOF") /* End of file*/

    TF0BW01.TF0BWSWS = "Y"; /* Indicate job submitted*/
  else
    TF0BW01.TF0BWIXT = TF0BW01.TF0BWIXT + 1; /* Increment index*/

  end


end // end TF0B027

// Deque the Internal Reader
Function TF0B028()
   /* ------------------------------------------------------------*/
   /* Deque the Internal Reader queue after job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "D"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes}; /* Enque reader*/

  if (UT2REC.UT2RETCD != 0) /* Non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TF0B028 "; /* Process name*/
    TA1REC.TA1LOC = "DEQUE THE SYSTEM INTERNAL READER";
    SQLCA.SQLCAREC = UT2REC.UT2GRPLV; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(69); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TF0B028

// Destination Table Report
Function TF0B030()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TF0B031(); /* Format and display the map*/

  TF0B032(); /* Check attention identifier*/

  TF0B033(); /* Reset fields to normal intensity*/

  TF0B034(); /* Verify the entered data*/

  TF0B035(); /* Process valid input request*/


end // end TF0B030

// Format and display the map
Function TF0B031()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    TF0BM003.XXXRVNBR = TF0BW01.XXXRVNBR; /* Revision number*/

    TF0BM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TF0BM003.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/
    TF0BM003.XWHABRV = TF0BW01.XWHABRV; /* Warehouse abbreviation*/

    TF0BM003.TF0BMRMT = TF0BW01.TF0BMRMT; /* Printer*/
    TF0BM003.TF0BMDES = TF0BW01.TF0BMDES; /* Description*/

    if (TF0BW01.TF0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TF0BW01.TF0BWMNO);
    end /* Job submitted message number*/
    TF0BW01.TF0BWMNO = 0; /* Reset message number*/

  else

    set TF0BM003 alarm; /* Indicate sound alarm*/

  end

  converse TF0BM003 ;


end // end TF0B031

// Check attention identifier
Function TF0B032()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TF0BW01.TF0BMSEL[3] = "C"; /* Indicate selection cancelled*/

    set TF0BM003 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(2); /* Indicate invalid attention key*/
    TF0BM003.XXXPRCNM = "TF0B032"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TF0B032

// Reset highlighted fields
Function TF0B033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TF0BM003.TF0BMCPY initialAttributes; /* Number of copies*/

  set TF0BM003.TF0BMSEL[1] initialAttributes; /* Selection tag 1*/
  set TF0BM003.TF0BMSEL[2] initialAttributes; /* Selection tag 2*/


end // end TF0B033

// Verify the entered data
Function TF0B034()
   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TF0BM003.TF0BMSEL[1] <= " " /* Line 1 not selected*/
   && TF0BM003.TF0BMSEL[2] <= " ") /* and line 2 not selected*/

    set TF0BM003.TF0BMSEL[1] cursor; /* Position cursor*/
    converseLib.validationFailed(66); /* Select at least one*/
    TF0BM003.XXXPRCNM = "TF0B034"; /* Process name*/

  else

    TF0BW01.TF0BWIXM = 2; /* Initialize line index*/

    while (TF0BW01.TF0BWIXM > 0) /* Until all lines are verified*/

      if (TF0BM003.TF0BMSEL[TF0BWIXM] > " " /* Line was selected*/
       && TF0BM003.TF0BMSEL[TF0BWIXM] != "S") /* and not with an "S"*/

        set TF0BM003.TF0BMSEL[TF0BWIXM] cursor, modified, bold;
                                   /* Highlight*/
        converseLib.validationFailed(60); /* Only "S" is valid for tag*/
        TF0BM003.XXXPRCNM = "TF0B034"; /* Process name*/

      end

      TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM - 1; /* Decrement line number*/

    end

  end

  if (TF0BM003.TF0BMCPY == 0) /* Number of copies invalid*/

    set TF0BM003.TF0BMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(73); /* Indicate invalid number*/
    TF0BM003.XXXPRCNM = "TF0B034"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TF0B034

// Process valid input request
Function TF0B035()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set TF0BW03 empty; /* Initialize parameters work area*/

  if (TF0BM003.TF0BMSEL[1] == "S") /* Line 1 selected*/

    TF0BW03.TF0BWFL1 = "Y"; /* Indicate report by code*/
  else
    TF0BW03.TF0BWFL1 = "N"; /* Indicate no report*/

  end

  if (TF0BM003.TF0BMSEL[2] == "S") /* Line 2 selected*/

    TF0BW03.TF0BWFL2 = "Y"; /* Indicate report by code*/
  else
    TF0BW03.TF0BWFL2 = "N"; /* Indicate no report*/

  end

  TF0BW01.TF0BWJCL = TF0BW03.TF0BWJCL; /* Report parameters*/
  TF0BW01.TF0BMCPY = TF0BM003.TF0BMCPY; /* Number of copies*/

  TF0B026(); /* Enque the internal reader*/

  while (TF0BW01.TF0BWSWS == "N") /* Until job is submitted*/

    TF0BW99.TF0BWJCL = TF0BT03.TF0BWJCL[TF0BWIXT]; /* JCL statement*/
    TF0BW01.TF0BTTYP = TF0BT03.TF0BTTYP[TF0BWIXT]; /* Statement type*/

    TF0B027(); /* Write to the internal reader*/

  end

  TF0B028(); /* Deque the internal reader*/

  TF0BW01.TF0BWMNO = 63; /* Job was submitted*/
  TF0BW01.TF0BMSEL[3] = "*"; /* Indicate function completed*/

  set TF0BM003 initial; /* Clear map output area*/


end // end TF0B035

// Zip/Carrier/Destination Report
Function TF0B040()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TF0B041(); /* Format and display the map*/

  TF0B042(); /* Check attention identifier*/

  TF0B043(); /* Reset fields to normal intensity*/

  TF0B044(); /* Verify the entered data*/

  TF0B045(); /* Process valid input request*/


end // end TF0B040

// Format and display the map
Function TF0B041()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    TF0BM004.XXXRVNBR = TF0BW01.XXXRVNBR; /* Revision number*/

    TF0BM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TF0BM004.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/
    TF0BM004.XWHABRV = TF0BW01.XWHABRV; /* Warehouse abbreviation*/

    TF0BM004.TF0BMRMT = TF0BW01.TF0BMRMT; /* Printer*/
    TF0BM004.TF0BMDES = TF0BW01.TF0BMDES; /* Description*/

    if (TF0BW01.TF0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TF0BW01.TF0BWMNO);
    end /* Job submitted message number*/
    TF0BW01.TF0BWMNO = 0; /* Reset message number*/

  else

    set TF0BM004 alarm; /* Indicate sound alarm*/

  end

  converse TF0BM004 ;


end // end TF0B041

// Check attention identifier
Function TF0B042()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TF0BW01.TF0BMSEL[4] = "C"; /* Indicate selection cancelled*/

    set TF0BM004 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(2); /* Indicate invalid attention key*/
    TF0BM004.XXXPRCNM = "TF0B042"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TF0B042

// Reset highlighted fields
Function TF0B043()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TF0BM004.TF0BMCPY initialAttributes; /* Number of copies*/

  set TF0BM004.TF0BMSEL[1] initialAttributes; /* Selection tag 1*/
  set TF0BM004.TF0BMSEL[2] initialAttributes; /* Selection tag 2*/
  set TF0BM004.TF0BMSEL[3] initialAttributes; /* Selection tag 3*/
  set TF0BM004.TF0BMSEL[4] initialAttributes; /* Selection tag 4*/
  set TF0BM004.TF0BMSEL[5] initialAttributes; /* Selection tag 5*/


end // end TF0B043

// Verify the entered data
Function TF0B044()
   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TF0BM004.TF0BMSEL[1] <= " " /* Line 1 not selected*/
   && TF0BM004.TF0BMSEL[2] <= " " /* and line 2 not selected*/
   && TF0BM004.TF0BMSEL[3] <= " " /* and line 3 not selected*/
   && TF0BM004.TF0BMSEL[4] <= " " /* and line 4 not selected*/
   && TF0BM004.TF0BMSEL[5] <= " ") /* and line 5 not selected*/

    set TF0BM004.TF0BMSEL[1] cursor; /* Position cursor*/
    converseLib.validationFailed(66); /* Select at least one*/
    TF0BM004.XXXPRCNM = "TF0B044"; /* Process name*/

  else

    TF0BW01.TF0BWIXM = 5; /* Initialize line index*/

    while (TF0BW01.TF0BWIXM > 0) /* Until all lines are verified*/

      if (TF0BM004.TF0BMSEL[TF0BWIXM] > " " /* Line was selected*/
       && TF0BM004.TF0BMSEL[TF0BWIXM] != "S") /* and not with an "S"*/

        set TF0BM004.TF0BMSEL[TF0BWIXM] cursor, modified, bold;
                                   /* Highlight*/
        converseLib.validationFailed(60); /* Only "S" is valid for tag*/
        TF0BM004.XXXPRCNM = "TF0B044"; /* Process name*/

      end

      TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM - 1; /* Decrement line number*/

    end

  end

  if (TF0BM004.TF0BMCPY == 0) /* Number of copies invalid*/

    set TF0BM004.TF0BMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(73); /* Indicate invalid number*/
    TF0BM004.XXXPRCNM = "TF0B044"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TF0B044

// Process valid input request
Function TF0B045()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set TF0BW04 empty; /* Initialize parameter work area*/

  TF0BW04.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/

  if (TF0BM004.TF0BMSEL[1] == "S") /* Line 1 selected*/

    TF0BW04.TF0BWFL1 = "Y"; /* Indicate report by zip code*/
  else
    TF0BW04.TF0BWFL1 = "N"; /* Indicate no report*/

  end

  if (TF0BM004.TF0BMSEL[2] == "S") /* Line 2 selected*/

    TF0BW04.TF0BWFL2 = "Y"; /* Indicate report by destination code*/
  else
    TF0BW04.TF0BWFL2 = "N"; /* Indicate no report*/

  end

  if (TF0BM004.TF0BMSEL[3] == "S") /* Line 3 selected*/

    TF0BW04.TF0BWFL3 = "Y"; /* Indicate report non-freight carrier*/
  else
    TF0BW04.TF0BWFL3 = "N"; /* Indicate no report*/

  end

  if (TF0BM004.TF0BMSEL[4] == "S") /* Line 4 selected*/

    TF0BW04.TF0BWFL4 = "Y"; /* Indicate report by freight carrier*/
  else
    TF0BW04.TF0BWFL4 = "N"; /* Indicate no report*/

  end

  if (TF0BM004.TF0BMSEL[5] == "S") /* Line 5 selected*/

    TF0BW04.TF0BWFL5 = "Y"; /* Indicate report by volume carrier*/
  else
    TF0BW04.TF0BWFL5 = "N"; /* Indicate no report*/

  end

  TF0BW01.TF0BWJCL = TF0BW04.TF0BWJCL; /* Report parameters*/
  TF0BW01.TF0BMCPY = TF0BM004.TF0BMCPY; /* Number of copies*/

  TF0B026(); /* Enque the internal reader*/

  while (TF0BW01.TF0BWSWS == "N") /* Until all JCL is written*/

    TF0BW99.TF0BWJCL = TF0BT04.TF0BWJCL[TF0BWIXT]; /* JCL statement*/
    TF0BW01.TF0BTTYP = TF0BT04.TF0BTTYP[TF0BWIXT]; /* Statement type*/

    TF0B027(); /* Write to the internal reader*/

  end

  TF0B028(); /* Deque the internal reader*/

  TF0BW01.TF0BWMNO = 64; /* Job was submitted*/
  TF0BW01.TF0BMSEL[4] = "*"; /* Indicate function completed*/

  set TF0BM004 initial; /* Clear map output area*/


end // end TF0B045

// Customer Routing Exceptions
Function TF0B050()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TF0B051(); /* Format and display the map*/

  TF0B052(); /* Check attention identifier*/

  TF0B053(); /* Reset fields to normal intensity*/

  TF0B054(); /* Verify the entered data*/

  TF0B055(); /* Process valid input request*/


end // end TF0B050

// Format and display the map
Function TF0B051()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    TF0BM005.XXXRVNBR = TF0BW01.XXXRVNBR; /* Revision number*/

    TF0BM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TF0BM005.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/
    TF0BM005.XWHABRV = TF0BW01.XWHABRV; /* Warehouse abbreviation*/

    TF0BM005.TF0BMRMT = TF0BW01.TF0BMRMT; /* Printer*/
    TF0BM005.TF0BMDES = TF0BW01.TF0BMDES; /* Description*/

    if (TF0BW01.TF0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TF0BW01.TF0BWMNO);
    end /* Job submitted message number*/
    TF0BW01.TF0BWMNO = 0; /* Reset message number*/

  else

    set TF0BM005 alarm; /* Indicate sound alarm*/

  end

  converse TF0BM005 ;


end // end TF0B051

// Check attention identifier
Function TF0B052()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TF0BW01.TF0BMSEL[5] = "C"; /* Indicate selection cancelled*/

    set TF0BM005 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(2); /* Indicate invalid attention key*/
    TF0BM005.XXXPRCNM = "TF0B052"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TF0B052

// Reset highlighted fields
Function TF0B053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TF0BM005.TF0BMCPY initialAttributes; /* Number of copies*/

  set TF0BM005.KUCCOID initialAttributes; /* Company identification*/
  set TF0BM005.KUMSTRID initialAttributes; /* Store identification*/
  set TF0BM005.TF1CARCD initialAttributes; /* Carrier code*/

  set TF0BM005.TF0BMSEL[1] initialAttributes; /* Selection tag 1*/
  set TF0BM005.TF0BMSEL[2] initialAttributes; /* Selection tag 2*/

  set TF0BM005.TF0BMFLG[1] initialAttributes; /* YES/NO flag 1*/
  set TF0BM005.TF0BMFLG[2] initialAttributes; /* YES/NO flag 2*/
  set TF0BM005.TF0BMFLG[3] initialAttributes; /* YES/NO flag 3*/


end // end TF0B053

// Verify the entered data
Function TF0B054()
   /* ------------------------------------------------------------*/
   /* Ensure that the YES/NO flags were entered.*/
   /* Check for proper select tag.*/
   /* Ensure that the report selection data was entered.*/
   /* If carrier was entered, verify that it is a valid carrier.*/
   /* If customer was entered, ensure routing exceptions exist.*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TF0BW01.TF0BWIXM = 3; /* Initialize line index*/

  while (TF0BW01.TF0BWIXM > 0) /* Until all lines are verified*/

    if (TF0BM005.TF0BMFLG[TF0BWIXM] != "Y" /* Flag is not YES*/
     && TF0BM005.TF0BMFLG[TF0BWIXM] != "N") /* and flag is not NO*/

      set TF0BM005.TF0BMFLG[TF0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(47); /* Enter 'Y' or 'N'*/
      TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/

    end

    TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM - 1; /* Decrement line number*/

  end

  if (TF0BM005.TF0BMSEL[1] <= " " /* Line 1 not selected*/
   && TF0BM005.TF0BMSEL[2] <= " ") /* and line 2 not selected*/

    set TF0BM005.TF0BMSEL[1] cursor; /* Position cursor*/
    converseLib.validationFailed(66); /* Select at least one*/
    TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/

  else

    TF0BW01.TF0BWIXM = 2; /* Initialize line index*/

    while (TF0BW01.TF0BWIXM > 0) /* Until all lines are verified*/

      if (TF0BM005.TF0BMSEL[TF0BWIXM] > " " /* Line was selected*/
       && TF0BM005.TF0BMSEL[TF0BWIXM] != "S") /* and not with an "S"*/

        set TF0BM005.TF0BMSEL[TF0BWIXM] cursor, modified, bold;
                                   /* Highlight*/
        converseLib.validationFailed(60); /* Only "S" is valid for tag*/
        TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/

      end

      TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM - 1; /* Decrement line number*/

    end

  end

  if (TF0BM005.KUCCOID == 0  /* Company not entered*/
   && TF0BM005.KUMSTRID == 0 /* and store not entered*/
   && TF0BM005.TF1CARCD <= " ") /* and carrier not entered*/

    set TF0BM005.KUCCOID cursor; /* Position cursor*/
    converseLib.validationFailed(67); /* Enter customer or carrier*/
    TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/

  else

    if (TF0BM005.TF1CARCD > " ") /* Carrier was entered*/

      TF0BS02(); /* Verify carrier code*/

    end

    TF0BW01.TF0BWSWK = "N"; /* Initialize customer error switch*/

    if (TF0BM005.KUMSTRID < 0 /* Store number is negative*/
     && TF0BM005.KUMSTRID != -1) /* but is not -1*/

      set TF0BM005.KUMSTRID cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(6); /* Store number invalid*/
      TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/
      TF0BW01.TF0BWSWK = "Y"; /* Indicate customer error*/

    end

    if (TF0BM005.KUCCOID == -1 /* All companies specified*/
     && TF0BM005.KUMSTRID != 0) /* and store was entered*/

      set TF0BM005.KUMSTRID cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(71); /* Do not enter store*/
      TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/
      TF0BW01.TF0BWSWK = "Y"; /* Indicate customer error*/

    end

    if (TF0BM005.KUCCOID < 0 /* Company number is negative*/
     && TF0BM005.KUCCOID != -1) /* but is not -1*/

      set TF0BM005.KUCCOID cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(70); /* Company number invalid*/
      TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/
      TF0BW01.TF0BWSWK = "Y"; /* Indicate customer error*/

    end

    if (TF0BM005.KUMSTRID != 0 /* Store was entered*/
     && TF0BM005.KUCCOID == 0) /* and company was not*/

      set TF0BM005.KUCCOID cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(12); /* Company number required*/
      TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/
      TF0BW01.TF0BWSWK = "Y"; /* Indicate customer error*/

    end

    if (TF0BW01.TF0BWSWK == "N" /* No customer number error found*/
     && TF0BM005.KUCCOID != 0)  /* and company number was entered*/

      TF0BS03(); /* Search for routing exceptions*/

    end

  end

  if (TF0BM005.TF0BMCPY == 0) /* Number of copies invalid*/

    set TF0BM005.TF0BMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(73); /* Indicate invalid number*/
    TF0BM005.XXXPRCNM = "TF0B054"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TF0B054

// Process valid input request
Function TF0B055()
   /* ------------------------------------------------------------*/
   /* Format the batch program parameters.*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set TF0BW05 empty; /* Initialize parameters work area*/

  TF0BW05.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/

  if (TF0BM005.TF0BMSEL[1] == "S") /* Line 1 selected*/

    TF0BW05.TF0BWFL1 = "Y"; /* Indicate report by number*/
  else
    TF0BW05.TF0BWFL1 = "N"; /* Indicate no report*/

  end

  if (TF0BM005.TF0BMSEL[2] == "S") /* Line 2 selected*/

    TF0BW05.TF0BWFL2 = "Y"; /* Indicate report by name*/
  else
    TF0BW05.TF0BWFL2 = "N"; /* Indicate no report*/

  end

  TF0BW05.TF0BWCID = TF0BM005.KUCCOID; /* Company identification*/

  TF0BW05.XBCCD = TFWREC.XBCCD; /* Company identification*/

  if (TF0BM005.KUCCOID == -1) /* All companies selected*/

    TF0BW05.TF0BWSID = -1; /* Indicate all stores*/
  else
    TF0BW05.TF0BWSID = TF0BM005.KUMSTRID; /* Store identification*/

  end

  TF0BW05.TF1CARCD = TF0BM005.TF1CARCD; /* Carrier code*/

  TF0BW05.TF0BMFLG[1] = TF0BM005.TF0BMFLG[1]; /* Alternate addresses*/
  TF0BW05.TF0BMFLG[2] = TF0BM005.TF0BMFLG[2]; /* Comments*/
  TF0BW05.TF0BMFLG[3] = TF0BM005.TF0BMFLG[3]; /* Separate pages*/

  TF0BW01.TF0BWJCL = TF0BW05.TF0BWJCL; /* Report parameters*/
  TF0BW01.TF0BMCPY = TF0BM005.TF0BMCPY; /* Number of copies*/

  TF0B026(); /* Enque the internal reader*/

  while (TF0BW01.TF0BWSWS == "N") /* Until all JCL is written*/

    TF0BW99.TF0BWJCL = TF0BT05.TF0BWJCL[TF0BWIXT]; /* JCL statement*/
    TF0BW01.TF0BTTYP = TF0BT05.TF0BTTYP[TF0BWIXT]; /* Statement type*/

    TF0B027(); /* Write to the internal reader*/

  end

  TF0B028(); /* Deque the internal reader*/

  TF0BW01.TF0BWMNO = 65; /* Job was submitted*/
  TF0BW01.TF0BMSEL[5] = "*"; /* Indicate function completed*/

  set TF0BM005 initial; /* Clear map output area*/


end // end TF0B055

// Report Request Menu
Function TF0B990()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TF0B991(); /* Format and display the map*/

  TF0B992(); /* Check attention identifier*/

  TF0B993(); /* Reset fields to normal intensity*/

  TF0B994(); /* Verify the entered data*/

  TF0B995(); /* Process valid input request*/


end // end TF0B990

// Format and display the map
Function TF0B991()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Highlight warehouse code if warehouse not valid.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    set TF0BM099 initial; /* Clear map output area*/

    TF0BM099.XXXRVNBR = TF0BW01.XXXRVNBR; /* Revision number*/

    TF0BM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TF0BM099.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/
    TF0BM099.XWHABRV = TF0BW01.XWHABRV; /* Warehouse abbreviation*/

    TF0BW01.TF0BWIXM = 1; /* Initialize map index*/

    while (TF0BW01.TF0BWIXM <= TF0BW01.TF0BWIXL) /* Until all lines are done*/

      TF0BM099.TF0BMSEL[TF0BWIXM] = TF0BW01.TF0BMSEL[TF0BWIXM];

      if (TF0BM099.TF0BMSEL[TF0BWIXM] == "S") /* Selected not processed*/
        set TF0BM099.TF0BMSEL[TF0BWIXM] modified; /* Set MDT on*/
      end

      TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM + 1; /* Increment index*/

    end

    if (TF0BW01.TF0BWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TF0BW01.TF0BWMNO);
    end /* Job submitted message number*/
    TF0BW01.TF0BWMNO = 0; /* Reset message number*/

    if (COMMAREA.CAITEM > " ") /* Application data exists*/

      TF0BM099.CAITEM = COMMAREA.CAITEM; /* Application data*/
      set TF0BM099.CAITEM modified; /* Set MDT on*/
      COMMAREA.CAITEM = " "; /* Clear application data*/

    end

  else

    if (TF0BW01.XWHABRV == " ") /* Warehouse missing or invalid*/

      set TF0BM099.XWHCD cursor, modified, bold; /* Highlight warehouse*/
      TF0BM099.XWHABRV = " "; /* Clear warehouse abbreviation*/
      TF0BM099.XXXPRCNM = "TF0B991"; /* Process name*/

    end

    set TF0BM099 alarm; /* Indicate sound alarm*/

  end

  converse TF0BM099 ;


end // end TF0B991

// Check attention identifier
Function TF0B992()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set TF0BM099 initial; /* Clear map output area*/

    TFWREC.XWHCD = TF0BW01.XWHCD; /* Restore warehouse code*/
    TF0BW01.XWHABRV = " "; /* Clear warehouse abbreviation*/

    TF0BS00(); /* Verify warehouse code*/

    TF0BS01(); /* Exit to redisplay map*/

  end

  if (TF0BM099.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (TF0BM099.CATOAP == COMMAREA.CACURRAP) /* Same as current*/

        set TF0BM099.CATOAP cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(57); /* Indicate invalid request*/
        TF0BM099.XXXPRCNM = "TF0B992"; /* Process name*/

        TF0BS01(); /* Exit to redisplay map*/

      end

      TFWREC.XWHCD = TF0BM099.XWHCD; /* Save warehouse code*/

      COMMAREA.CATOAP = TF0BM099.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TF0BM099.CAITEM; /* Application data*/

      if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Traffic application*/

        COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* Application user area*/
      else
        COMMAREA.CAUSERA = " "; /* Clear user area*/

      end

      XSEXIT(); /* Transfer to requested application*/

      set TF0BM099.CATOAP cursor, modified, bold; /* Highlight*/

      TF0BM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force alarm to sound*/
      TF0BM099.XXXPRCNM = "TF0B992"; /* Process name*/

      COMMAREA.CATOAP = " "; /* Clear TO application*/
      COMMAREA.CAITEM = " "; /* and application data*/

      TF0BS01(); /* Exit to redisplay map*/

    else

      set TF0BM099.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(58); /* Indicate PF key not valid*/
      TF0BM099.XXXPRCNM = "TF0B992"; /* Process name*/

      TF0BS01(); /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    COMMAREA.CAUSERA = " "; /* Clear user area*/

    XSPF1(); /* Exit to the HELP facility*/

    TF0BM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TF0BM099.XXXPRCNM = "TF0B992"; /* Process name*/

    TF0BS01(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "TF0A"; /* TRAFFIC Master Menu*/

    TFWREC.XWHCD = TF0BM099.XWHCD; /* Save warehouse code*/

    COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    TF0BM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TF0BM099.XXXPRCNM = "TF0B992"; /* Process name*/

    TF0BS01(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    COMMAREA.CAUSERA = " "; /* Clear user area*/

    XSPF4(); /* Exit to system main menu*/

    TF0BM099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TF0BM099.XXXPRCNM = "TF0B992"; /* Process name*/

    TF0BS01(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(2); /* Indicate invalid attention key*/
    TF0BM099.XXXPRCNM = "TF0B992"; /* Process name*/

    TF0BS01(); /* Exit to redisplay map*/

  end


end // end TF0B992

// Reset highlighted fields
Function TF0B993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TF0BM099.XWHCD initialAttributes; /* Warehouse code*/

  TF0BW01.TF0BWIXM = 1; /* Initialize index*/

  while (TF0BW01.TF0BWIXM <= TF0BW01.TF0BWIXL) /* Until all lines are reset*/

    set TF0BM099.TF0BMSEL[TF0BWIXM] initialAttributes; /* Reset select tag*/

    TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM + 1; /* Increment line index*/

  end

  set TF0BM099.CATOAP initialAttributes; /* FAST PATH application*/
  set TF0BM099.CAITEM initialAttributes; /* Application data*/


end // end TF0B993

// Verify the entered data
Function TF0B994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Check for proper select tag.*/
   /* Indicate an error if the line was not selected properly.*/
   /* Verify warehouse code.*/
   /* If any error was found, exit to redisplay map.*/
   /* ------------------------------------------------------------*/

  if (TF0BM099.CAITEM > " ") /* Application data was entered*/

    set TF0BM099.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(59); /* Enter only with FAST PATH*/
    TF0BM099.XXXPRCNM = "TF0B994"; /* Process name*/

  end

  TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXL; /* Initialize line index*/

  while (TF0BW01.TF0BWIXM > 0) /* Until all lines are verified*/

    if (TF0BM099.TF0BMSEL[TF0BWIXM] != TF0BW01.TF0BMSEL[TF0BWIXM]
     && TF0BM099.TF0BMSEL[TF0BWIXM] != " " /* Line was selected*/
     && TF0BM099.TF0BMSEL[TF0BWIXM] != "S") /* and not with an "S"*/

      set TF0BM099.TF0BMSEL[TF0BWIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(60); /* Only "S" is valid for tag*/
      TF0BM099.XXXPRCNM = "TF0B994"; /* Process name*/

    end

    TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM - 1; /* Decrement line number*/

  end

  if (TF0BM099.XWHCD != TF0BW01.XWHCD /* Warehouse code changed*/
   || TF0BW01.XWHABRV == " ")         /* or no valid warehouse*/

    TFWREC.XWHCD = TF0BM099.XWHCD; /* Warehouse code*/

    TF0BS00(); /* Verify warehouse code*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TF0BS01(); /* Exit to redisplay map*/
  end


end // end TF0B994

// Process valid input request
Function TF0B995()
   /* ------------------------------------------------------------*/
   /* Save warehouse code and selection tags.*/
   /* If no default print destination and at least one report was*/
   /* selected, force selection of printer.*/
   /* ------------------------------------------------------------*/

  TF0BW01.XWHCD = TF0BM099.XWHCD; /* Save warehouse code*/

  TF0BW01.TF0BWIXM = 1; /* Initialize map line index*/

  while (TF0BW01.TF0BWIXM <= TF0BW01.TF0BWIXL) /* Until all lines are moved*/

    if (TF0BM099.TF0BMSEL[TF0BWIXM] != TF0BW01.TF0BMSEL[TF0BWIXM])
      TF0BW01.TF0BMSEL[TF0BWIXM] = TF0BM099.TF0BMSEL[TF0BWIXM];
    end

    TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM + 1; /* Increment line number*/

  end

  if (TF0BW01.TF0BMRMT == " " /* No default print destination*/
   && TF0BW01.TF0BMSEL[1] != "S") /* and specify printer not selected*/

    TF0BW01.TF0BWIXM = 1; /* Initialize map line index*/

    while (TF0BW01.TF0BWIXM <= TF0BW01.TF0BWIXL /* Until end of selections*/
     && TF0BW01.TF0BMSEL[1] != "S") /* or specification is forced*/

      if (TF0BW01.TF0BMSEL[TF0BWIXM] == "S") /* Report was selected*/
        TF0BW01.TF0BMSEL[1] = "S"; /* Force printer specification*/
      end

      TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM + 1; /* Increment line number*/

    end

  end

  if (TF0BW01.TF0BMSEL[1] == "S") /* If specify printer selected*/

    TF0BW01.TF0BWIXP = 0; /* Initialize page index*/

  end


end // end TF0B995

// Verify warehouse code
Function TF0BS00()
   /* ------------------------------------------------------------*/
   /* This process will validate the warehouse code passed in the*/
   /* TRAFFIC work record and obtain the warehouse abbreviation.*/
   /* If the warehouse code is not valid, an error number is*/
   /* returned in EZEMNO and warehouse abbreviation is spaces.*/
   /* If the code is valid, EZEMNO remains unchanged.*/
   /* ------------------------------------------------------------*/

  if (TF0BW01.XWHABRV != " " /* Current warehouse code is valid and*/
   && TF0BW01.XWHCD == TFWREC.XWHCD)
                                   /* warehouse code has not changed*/

    return; /* Return to caller*/

  end

  if (TFWREC.XWHCD in XWHTBL.XWHCD)
    TF0BW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end

  if (sysVar.arrayIndex == 0 /* Table entry not found*/
   || XWHTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* or not active warehouse*/

    TF0BW01.XWHABRV = " "; /* Clear warehouse abbreviation*/
    converseLib.validationFailed(11); /* Indicate invalid warehouse*/

    return; /* Return to caller*/

  end


end // end TF0BS00

// Clear selections and exit
Function TF0BS01()
   /* ------------------------------------------------------------*/
   /* Reset any selections in working storage.*/
   /* Exit to redisplay the selection menu map.*/
   /* ------------------------------------------------------------*/

  TF0BW01.TF0BWIXM = 1; /* Initialize map index*/

  while (TF0BW01.TF0BWIXM <= TF0BW01.TF0BWIXL) /* Until end of array*/

    if (TF0BW01.TF0BMSEL[TF0BWIXM] == "S") /* Entry is selected*/
      TF0BW01.TF0BMSEL[TF0BWIXM] = " "; /* Reset entry*/
    end

    TF0BW01.TF0BWIXM = TF0BW01.TF0BWIXM + 1; /* Increment index*/

  end

  exit stack; /* Exit to redisplay map*/


end // end TF0BS01

// Verify carrier code
Function TF0BS02()
   /* ------------------------------------------------------------*/
   /* Verify the carrier code against the DB2 Carrier Table.*/
   /* If any errors were found, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  TF1REC.TF1CARCD = TF0BM005.TF1CARCD; /* Carrier code*/

  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Table row was not found*/

    set TF0BM005.TF1CARCD cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(33); /* Carrier code invalid*/
    TF0BM005.XXXPRCNM = "TF0BS02"; /* Process name*/

  else

    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

        converseLib.validationFailed(29); /* Data base contention*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/

      else

        converseLib.validationFailed(69); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        converseLib.clearScreen();
         /* Clear screen before redisplay*/

      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TF0BS02 "; /* Process name*/
      TA1REC.TA1LOC = "OBTAIN CARRIER TABLE ROW";
      TA1REC.TA1MAP = "TF0BM005"; /* Map name*/
      TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCARR001"; /* Table view name*/
      TA1REC.TA1TBLKE = TF1REC.TF1KEYS; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TF0BM005.XXXPRCNM = "TF0BS02"; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

  end


end // end TF0BS02

// Search for routing exceptions
Function TF0BS03()
   /* ------------------------------------------------------------*/
   /* Verify that customer has routing exceptions in the table.*/
   /* If any errors were found, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  TF4REC.XWHCD = TF0BW01.XWHCD; /* Warehouse code*/

  if (TF0BM005.KUCCOID == -1) /* All companies selected*/

    TF4REC.KUCCOID = -2; /* Indicate all companies*/
    TF4REC.KUMSTRID = -2; /* Indicate all stores*/

  else

    TF4REC.KUCCOID = TF0BM005.KUCCOID; /* Company identification*/

    if (TF0BM005.KUMSTRID == -1) /* All stores selected*/

      TF4REC.KUMSTRID = -2; /* Indicate all stores*/
    else
      TF4REC.KUMSTRID = TF0BM005.KUMSTRID; /* Store identification*/

    end

  end

  call "IO1900" ("S ", SQLCA, TF4REC) {isNoRefresh = yes, isExternal = yes}; /* Sel routing excepts set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Table row was not found*/

    if (TF0BM005.KUCCOID == -1) /* All companies selected*/

      converseLib.validationFailed(74); /* No warehouse routing exceptions*/
      set TF0BM005.KUCCOID cursor, modified, bold; /* Highlight*/
    else
      converseLib.validationFailed(72); /* No customer routing exceptions*/
      set TF0BM005.KUCCOID cursor, modified, bold; /* Highlight*/
      set TF0BM005.KUMSTRID modified, bold; /* Highlight*/

    end

    TF0BM005.XXXPRCNM = "TF0BS03"; /* Process name*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE == -811) /* Multiple table rows found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(29); /* Data base contention*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(69); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TF0BS03 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN ROUTING EXCEPTION ROW";
    TA1REC.TA1MAP = "TF0BM005"; /* Map name*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VRTEXN01"; /* Table view name*/
    TA1REC.TA1TBLKE = TF4REC.TF4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TF0BM005.XXXPRCNM = "TF0BS03"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TF0BS03

//*** RECORD=TF0BW01 ****
// Working storage for TF0B - TRAFFIC Report Requests
// ***********************
Record TF0BW01 type basicRecord
  10 XXXRVNBR XXXRVNBR ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 TF0BWIXL TF0BWIXL ; 
  10 TF0BWIXM TF0BWIXM ; 
  10 TF0BWIXP TF0BWIXP ; 
  10 TF0BWIXS TF0BWIXS [10] ; 
  10 TF0BWIXT TF0BWIXT ; 
  10 TF0BMSEL TF0BMSEL [5] ; 
  10 TF0BWUID TF0BWUID ; 
  10 TF0BMCPY TF0BMCPY ; 
  10 TF0BMRMT TF0BMRMT ; 
  10 TF0BMDES TF0BMDES ; 
  10 TF0BWJCL TF0BWJCL ; 
  10 TF0BTTYP TF0BTTYP ; 
  10 TF0BWSWK TF0BWSWK ; 
  10 TF0BWSWP TF0BWSWP ; 
  10 TF0BWSWS TF0BWSWS ; 
  10 TF0BWMNO TF0BWMNO ; 
end // end TF0BW01

//*** RECORD=TF0BW02 ****
// Parameters for TF1041 - Carrier Table Report
// ***********************
Record TF0BW02 type basicRecord
  10 TF0BWJCL TF0BWJCL ; 
    15 TF0BWFL1 TF0BWFL1 ; 
    15 TF0BWFL2 TF0BWFL2 ; 
    15 * char(78) ; 
end // end TF0BW02

//*** RECORD=TF0BW03 ****
// Parameters for TF1001 - Destination Table Report
// ***********************
Record TF0BW03 type basicRecord
  10 TF0BWJCL TF0BWJCL ; 
    15 TF0BWFL1 TF0BWFL1 ; 
    15 TF0BWFL2 TF0BWFL2 ; 
    15 * char(78) ; 
end // end TF0BW03

//*** RECORD=TF0BW04 ****
// Parameters for TF1011 - Zip/Carrier/Destination Report
// ***********************
Record TF0BW04 type basicRecord
  10 TF0BWJCL TF0BWJCL ; 
    15 XWHCD XWHCD ; 
    15 TF0BWFL1 TF0BWFL1 ; 
    15 TF0BWFL2 TF0BWFL2 ; 
    15 TF0BWFL3 TF0BWFL3 ; 
    15 TF0BWFL4 TF0BWFL4 ; 
    15 TF0BWFL5 TF0BWFL5 ; 
    15 * char(73) ; 
end // end TF0BW04

//*** RECORD=TF0BW05 ****
// Parameters for TF1031 - Customer Exception Routing Report
// ***********************
Record TF0BW05 type basicRecord
  10 TF0BWJCL TF0BWJCL ; 
    15 XWHCD XWHCD ; 
    15 TF0BWFL1 TF0BWFL1 ; 
    15 TF0BWFL2 TF0BWFL2 ; 
    15 TF0BWCID TF0BWCID ; 
    15 TF0BWSID TF0BWSID ; 
    15 TF0BMFLG TF0BMFLG [3] ; 
    15 TF1CARCD TF1CARCD ; 
    15 TF0BWCUL TF0BWCUL ; 
    15 TF0BWSUL TF0BWSUL ; 
    15 XBCCD XBCCD ; 
    15 * char(45) ; 
end // end TF0BW05

//*** RECORD=TF0BW99 ****
// System internal reader queue (INTR) record definition.
// ***********************
Record TF0BW99 type serialRecord  {
  fileName = "INTR"
  }
  10 TF0BWJCL TF0BWJCL ; 
end // end TF0BW99

//*** RECORD=TF0BW9J ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the JOB name user identification (TF0BWUID).
// ***********************
Record TF0BW9J type basicRecord // VAGen Info - redefined TF0BW99
  10 * char(4) ; 
  10 TF0BWUID TF0BWUID ; 
  10 * char(70) ; 
end // end TF0BW9J

//*** RECORD=TF0BW9N ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the NOTIFY user identification (TF0BWUID).
// ***********************
Record TF0BW9N type basicRecord // VAGen Info - redefined TF0BW99
  10 * char(22) ; 
  10 TF0BWUID TF0BWUID ; 
  10 * char(52) ; 
end // end TF0BW9N

//*** RECORD=TF0BW9O ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the OUTPUT remote printer identification (TF0BMRMT)
// and the number of copies to print (TF0BMCPY).
// ***********************
Record TF0BW9O type basicRecord // VAGen Info - redefined TF0BW99
  10 * char(33) ; 
  10 TF0BMCPY TF0BMCPY ; 
  10 * char(6) ; 
  10 TF0BMRMT TF0BMRMT ; 
  10 * char(34) ; 
end // end TF0BW9O

// Number of copies to print
DataItem TF0BMCPY num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer description
DataItem TF0BMDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YES/NO flag
DataItem TF0BMFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer destination
DataItem TF0BMRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select field
DataItem TF0BMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Company identification
DataItem TF0BWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

DataItem TF0BWCUL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Report flag 1
DataItem TF0BWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report flag 2
DataItem TF0BWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report flag 3
DataItem TF0BWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report flag 4
DataItem TF0BWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Report flag 5
DataItem TF0BWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem TF0BWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TF0BWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for page number
DataItem TF0BWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for starting table
DataItem TF0BWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem TF0BWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted message number
DataItem TF0BWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Store identification
DataItem TF0BWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF0BWSUL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer error switch
DataItem TF0BWSWK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page full switch
DataItem TF0BWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem TF0BWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem TF0BWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

