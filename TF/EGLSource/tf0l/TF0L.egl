package tf0l;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import pk.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=TF0L ****
// ************************************************************
// * applid:    tf0g    zip/carrier/destination definition
// *                        inquiry/update
// ************************************************************
// * maint log
// * CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// * -------  --------  ------  -------------------------------
// *          02/02/87  snoble  original creation of prototype
// * FIX      09/20/88  SPOPA   Add TF_ADDR_ID to select by
// *                            alpha name to correct scroll.
// *          03/28/89  jcampb  add zip code validation with
// *                            new xsttbl format.
// *          05/30/89  jwood   added xssegtr logic, noncsp opt
// *          03/06/91  rvakel  table changes:  regenned to
// *                            pick up the new TFAREC.
// *          04/05/94  Ryonke  Convert TFCREC fields to use
// *                            varchar logic.
// * tt#3632  01/20/00  kramal  Change application to accept
// *                            country code of USA also
// ************************************************************
// *********************
Program TF0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PKDREC PKDREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TF0LW01 TF0LW01; // record
  TF0LW02 TF0LW02; // record
  TF6REC TF6REC; // record
  TFAREC TFAREC; // record
  TFCREC TFCREC; // record
  TFWREC TFWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use TF0LM.TF0LM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TF0L010: TF0L010();
  end // end main
end // end TF0L

// program control
Function TF0L010()



      /* *********************************************************/
      /* * this process controls entire program process control **/
      /* * transfer to other applications occurs in converse    **/
      /* *********************************************************/



  XSENTRY(); /* check security*/


  XSSEGTR(); /* set segmented transaction id*/



  XSTFS01(); /* check traffic security*/



  TF0L100(); /* init pgm areas*/



      /* control pgm converse*/

  TFAREC.TFAPFL1 = "N";

  while (TFAREC.TFAPFL1 == "N")
    TF0L200();
  end



   /* ************************************************************/
end // end TF0L010

// program initialization
Function TF0L100()



      /* *********************************************************/
      /* * init program areas                                   **/
      /* *********************************************************/



  set TF6REC empty;
  set TFCREC empty;
  set TFAREC empty;
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  TA1REC.TA1MAP = "TF0LM001";

      /* init map*/

  TF0LM001.XWHCD = TFWREC.XWHCD;
  TF0LM001.TF0LMNNM = TFWREC.KUMSTRNM;

  TF0LSO1(); /* check if inquiry or update mode*/



   /* ************************************************************/
end // end TF0L100

// process map
Function TF0L200()



      /* *********************************************************/
      /* * this process controls the converse for the map and   **/
      /* * the processing of the map                            **/
      /* *********************************************************/



   /* ************************************************************/
  converse TF0LM001 ;
   /* ************************************************************/



  if (converseVar.eventKey is pa2) /* cancel*/
    COMMAREA.CATOAP = "TF0L";
    COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
    XSEXIT();
    TF0LM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
  else
    if (TF0LM001.CATOAP > " ") /* continue*/
      COMMAREA.CATOAP = TF0LM001.CATOAP;
      COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
      XSEXIT();
      TF0LM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CATOAP = " ";
      set TF0LM001.CATOAP cursor, bold;
    else
      if (converseVar.eventKey is pf1) /* help*/
        COMMAREA.CAUSERA = " "; /* clear user commarea*/
        COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
        XSPF1();
        TF0LM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
        COMMAREA.CATOAP = " ";
      else
        if (converseVar.eventKey is pf3) /* exit to menu*/
          COMMAREA.CATOAP = "TF0A";
          COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
          XSEXIT();
          TF0LM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CATOAP = " ";
        else
          if (converseVar.eventKey is pf4) /* master menu*/
            COMMAREA.CAUSERA = " "; /* clear user commarea*/
            COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
            XSPF4();
            TF0LM001.VAGen_EZEMSG = COMMAREA.CAMSG;
            COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
            COMMAREA.CATOAP = " ";
          else
            if (converseVar.eventKey is enter /* enter only*/
             || converseVar.eventKey is pf7   /* scroll backward*/
             || converseVar.eventKey is pf8   /* scroll forward*/
             || converseVar.eventKey is pf12) /* edit only*/
              TF0LSI0(); /* pf7, pf8, pf12 and enter*/
            else
              converseLib.clearScreen();
               /* assume bad pa key*/
              converseLib.validationFailed(002); /* invalid pf key*/
            end
          end
        end
      end
    end
  end


   /* ************************************************************/
end // end TF0L200

// edit screen
Function TF0LSE0()


         /* edit sreen*/



  TF0LSE1(); /* set up defaults on screen*/

  TFAREC.TFAWSUB1 = 4;

  while (TFAREC.TFAWSUB1 >= 1)

    if (TF0LM001.TF0LMACT[TFAWSUB1] > " ")
      TF0LSE2(); /* edit country code*/
      TF0LSE3(); /* edit city, state and zip*/
      TF0LSE4(); /* edit address line*/
      TF0LSE5(); /* edit activity column*/
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;

  end



end // end TF0LSE0

// set up defaults on screen
Function TF0LSE1()


         /* set up defaults on screen*/



  TA1REC.TA1LOCAT[2] = "TF0LSA7";
  TFAREC.TFAWSUB1 = 1;
  TFAREC.TFAWSUB2 = 1;

  while (TFAREC.TFAWSUB1 <= 4)

    if (TF0LM001.TF6ADRID[TFAWSUB1] > 0)


    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 3;

  end



end // end TF0LSE1

// edit country code
Function TF0LSE2()


         /* edit country code*/





  if (TF0LM001.XCTCD[TFAWSUB1] == " ")
      /* next sentence*/
  else
    /* IF TF0LM001.XCTCD(TFAWSUB1) EQ 'USA ';*/
    /* MOVE ' ' TO TF0LM001.XCTCD(TFAWSUB1);*/
    /* MOVE ' ' TO TF0LM001.XCTDESC(TFAWSUB1);*/
    /* ELSE;*/
    if (TF0LM001.XCTCD[TFAWSUB1] in XCTTBL.XCTCD)
      TF0LM001.XCTDESC[TFAWSUB1] = XCTTBL.XCTDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(51);
           /* country invalid*/
      TF0LM001.XCTDESC[TFAWSUB1] = " ";
      set TF0LM001.XCTCD[TFAWSUB1] cursor, bold;
    end
    /* END;*/
  end
end // end TF0LSE2

// edit city, st, zip & name
Function TF0LSE3()


         /* edit city, state and zip code*/



  if (TF0LM001.XCTCD[TFAWSUB1] == " ") /* assumes us of a*/
    if (TF0LM001.XXXZIP[TFAWSUB1] == " ")
      converseLib.validationFailed(52);
             /* zip code invalid or required*/
      set TF0LM001.XXXZIP[TFAWSUB1] cursor, bold;
    else
      if (TF0LM001.XXXZIP[TFAWSUB1] <= "00000     "
       || TF0LM001.XXXZIP[TFAWSUB1] <= "000000    "
       || TF0LM001.XXXZIP[TFAWSUB1] <= "0000000   "
       || TF0LM001.XXXZIP[TFAWSUB1] <= "00000000  "
       || TF0LM001.XXXZIP[TFAWSUB1] <= "000000000 "
       || TF0LM001.XXXZIP[TFAWSUB1] <= "0000000000")
        converseLib.validationFailed(52);
               /* invalid zip code - please reenter*/
        set TF0LM001.XXXZIP[TFAWSUB1] cursor, bold;
      end
    end
    if (TF0LM001.XSTCD[TFAWSUB1] in XSTTBL.XSTCD)
      TF0LW01.XXXZIP = TF0LM001.XXXZIP[TFAWSUB1];
      if (TF0LW01.TF0LWZP3 >= XSTTBL.XSTBNZIP[sysVar.arrayIndex]
       && TF0LW01.TF0LWZP3 <= XSTTBL.XSTENZIP[sysVar.arrayIndex])
         /* next sentence*/
      else
        if (XSTTBL.XSTAZIP1[sysVar.arrayIndex] > " "
         && TF0LW01.TF0LWZP3 == XSTTBL.XSTAZIP1[sysVar.arrayIndex])
           /* next sentence*/
        else
          if (XSTTBL.XSTAZIP2[sysVar.arrayIndex] > " "
           && TF0LW01.TF0LWZP3 == XSTTBL.XSTAZIP2[sysVar.arrayIndex])
             /* next sentence*/
          else
            if (converseVar.validationMsgNum == 0)
              converseLib.validationFailed(52);
                     /* invalid zip code - please reenter*/
              set TF0LM001.XXXZIP[TFAWSUB1] cursor, bold;
            end
          end
        end
      end
    else
      converseLib.validationFailed(53);
             /* state invalid or required*/
      set TF0LM001.XSTCD[TFAWSUB1] cursor, bold;
    end
  end

  if (TF0LM001.XXXCITY[TFAWSUB1] > " ")
      /* next sentence*/
  else
    converseLib.validationFailed(54);
           /* city required*/
    set TF0LM001.XXXCITY[TFAWSUB1] cursor, bold;
  end



   /* ---------------- end of sgrp tf0lse3 ----------------------**/
end // end TF0LSE3

// edit address lines and name
Function TF0LSE4()


         /* edit address lines and name*/



  if (TF0LM001.XXXADDR1[TFAWSUB1] > " ")
      /* next sentence*/
  else
    if (TF0LM001.XXXADDR2[TFAWSUB1] > " ")
        /* next sentence*/
    else
      if (TF0LM001.XXXADDR3[TFAWSUB1] > " ")
          /* next sentence*/
      else
        converseLib.validationFailed(56);
           /* address required*/
        set TF0LM001.XXXADDR1[TFAWSUB1] cursor, bold;
      end
    end
  end


  if (TF0LM001.TF6ALTNM[TFAWSUB1] > " ")
      /* next sentence*/
  else
    converseLib.validationFailed(55);
           /* name required*/
    set TF0LM001.TF6ALTNM[TFAWSUB1] cursor, bold;
  end



end // end TF0LSE4

// edit activity column
Function TF0LSE5()


         /* edit activity column*/


  if (COMMAREA.CADLVL[10] == "Y")
    if (TF0LM001.TF0LMACT[TFAWSUB1] == "A"
     || TF0LM001.TF0LMACT[TFAWSUB1] == "C"
     || TF0LM001.TF0LMACT[TFAWSUB1] == "D"
     || TF0LM001.TF0LMACT[TFAWSUB1] == "-")
        /* next sentence*/
    else
      converseLib.validationFailed(38);
      /* a(add), c(change), d(inactivate), -(delete)*/
                /* are valid entries*/
      set TF0LM001.TF0LMACT[TFAWSUB1] cursor, bold;
    end
  else
    if (TF0LM001.TF0LMACT[TFAWSUB1] == "A"
     || TF0LM001.TF0LMACT[TFAWSUB1] == "C"
     || TF0LM001.TF0LMACT[TFAWSUB1] == "D")
        /* next sentence*/
    else
      converseLib.validationFailed(13);
      /* a(add), c(change), d(inactivate)*/
                /* are valid entries*/
      set TF0LM001.TF0LMACT[TFAWSUB1] cursor, bold;
    end
  end



end // end TF0LSE5

// pf7, pf8 ,pf12 and enter
Function TF0LSI0()


         /* pf7, pf8, pf12 and enter*/



  if (TF0LM001.XWHCD == " "
   || TF0LM001.XWHCD != TF0LW01.XWHCD)
    TF0LSO1(); /* set new scrolling table*/
  else
    TF0LSI1(); /* set fields to normal*/
    TF0LSE0(); /* edit screen*/

    if (converseVar.validationMsgNum > 0)
         /* next sentence*/
    else
      if (converseVar.eventKey is pf12)
        converseLib.validationFailed(5);
           /* all edits passed - press <enter> to process data*/
      else
        TF0LSU0(); /* update data base*/
        if (converseVar.validationMsgNum == 0
         || converseVar.validationMsgNum == 9
         || converseVar.validationMsgNum == 26) /* data base updated by someone else*/
          TF0LSS0(); /* pf7, pf8 and enter*/
        end
      end
    end

  end



end // end TF0LSI0

// set fields to normal
Function TF0LSI1()


         /* set fields to normal*/



  if (TF0LM001.TF0LMHED == "MAINTENANCE")
    TFAREC.TFAWSUB1 = 1;
    set TF0LM001.TF0LMNNM cursor;
    set TF0LM001.XWHCD normal;

    while (TFAREC.TFAWSUB1 <= 4)

      set TF0LM001.TF0LMACT[TFAWSUB1] normal;
      set TF0LM001.TF6ADRID[TFAWSUB1] skip;
      set TF0LM001.TF6ALTNM[TFAWSUB1] normal;
      set TF0LM001.XXXADDR1[TFAWSUB1] normal;
      set TF0LM001.XXXADDR2[TFAWSUB1] normal;
      set TF0LM001.XXXADDR3[TFAWSUB1] normal;
      set TF0LM001.XXXCITY[TFAWSUB1] normal;
      set TF0LM001.XXXZIP[TFAWSUB1] normal;
      set TF0LM001.XSTCD[TFAWSUB1] normal;
      set TF0LM001.XCTCD[TFAWSUB1] normal;

      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

    end

  end


end // end TF0LSI1

// get warehouse code a validate
Function TF0LSO1()


         /* get warehouse code and validate*/



  set TF0LM001.XWHCD normal;

  if (TF0LM001.TF0LMACT[1] > " "
   || TF0LM001.TF0LMACT[2] > " "
   || TF0LM001.TF0LMACT[3] > " "
   || TF0LM001.TF0LMACT[4] > " ")
    TF0LM001.XWHCD = TF0LW01.XWHCD;
    converseLib.validationFailed(46);
      /* code can't be changed when updating on screen*/
    set TF0LM001.XWHCD cursor, bold;
  else
    if (TF0LM001.XWHCD <= " "
     || TF0LM001.XWHCD == "99")
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      TF0LM001.XWHABRV = " ";
      TF0LW01.XWHCD = " ";
      set TF0LM001.XWHCD cursor, bold;
    else
      if (TF0LM001.XWHCD in XWHTBL.XWHCD)
        if (TF0LM001.TF0LMNNM == TF0LW01.TF0LMNNM
         && TF0LM001.TF0LMNCT == TF0LW01.TF0LMNCT
         && TF0LM001.TF0LMNST == TF0LW01.TF0LMNST)
          TF0LW01.TF0LMNAI = TF0LM001.TF0LMNAI;
        else
          TF0LW01.TF0LMNAI = 0;
        end
        TF0LW01.TF0LMNNM = TF0LM001.TF0LMNNM;
        TF0LW01.TF0LMNCT = TF0LM001.TF0LMNCT;
        TF0LW01.TF0LMNST = TF0LM001.TF0LMNST;
        TF0LW01.XWHCD = TF0LM001.XWHCD;

        converseLib.clearScreen();
        set TF0LM001 initial;

        XXXCURDT = VGVar.currentShortGregorianDate;
        XXXRVNBR = "02";
        TF0LM001.TF0LMNNM = TF0LW01.TF0LMNNM;
        TF0LM001.TF0LMNCT = TF0LW01.TF0LMNCT;
        TF0LM001.TF0LMNST = TF0LW01.TF0LMNST;
        TF0LM001.TF0LMNAI = TF0LW01.TF0LMNAI;
        TF0LM001.XWHCD = TF0LW01.XWHCD;
        TFWREC.XWHCD = TF0LW01.XWHCD;

        TF0LM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
        TF0LSO2(); /* set up scrolling table ;*/
        TF0LSO4(); /* set up screen*/
        TF0LSO7(); /* get description for screen*/
        TF0LSO8(); /* check security for update*/
      else
        converseLib.validationFailed(11);
          /* invalid warehouse code entered <please re-enter>*/
        TF0LM001.XWHABRV = " ";
        TF0LW01.XWHCD = " ";
        set TF0LM001.XWHCD cursor, bold;
      end
    end
  end



end // end TF0LSO1

// sset for whse & build pf7 tabl
Function TF0LSO2()


         /* select set for warehouse and build pf7 table*/



  TA1REC.TA1LOCAT[2] = "TF0LSA2";
  set TF6REC empty; /* Initialize record area*/
  TF6REC.XWHCD = TF0LM001.XWHCD;

  XSTF6S2(); /* select set and select next tf3rec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      XSTF6S2(); /* try to add record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(029); /* data base in use*/
      /* data base contention <try again>*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (converseVar.validationMsgNum == 7)
        /* next sentence*/
      else
        converseLib.validationFailed(08);
          /* bottom of table, no more scrolling possible*/
      end
      TF0LM001.TF0LMNNM = " ";
      TF0LM001.TF0LMNCT = " ";
      TF0LM001.TF0LMNST = " ";
      TF0LM001.TF0LMNAI = 0;
      XSTF6C2(); /* close set*/
    else
      TF0LSO3(); /* set up scrolling table*/
      XSTF6C2(); /* close set*/
      TF0LW01.XWHCD = TF0LM001.XWHCD;
    end
  end



end // end TF0LSO2

// set up scrolling table
Function TF0LSO3()


         /* set up scrolling table*/



  set TF0LW02 empty;

  TA1REC.TA1LOCAT[2] = "TF0LSO5";
  TFAREC.TFAWCNT1 = 5; /* force save of first rec*/
  TFAREC.TFAWSUB1 = 0;

  while (SQLCA.VAGen_SQLCODE != 100
   && TFAREC.TFAWSUB1 <= 500)

    if (TFAREC.TFAWCNT1 < 4)
      TFAREC.TFAWCNT1 = TFAREC.TFAWCNT1 + 1;
    else
      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
      TFAREC.TFAWCNT1 = 1;
      TF0LW01.TF6ALNMS = TF6REC.TF6ALNMS;
      TF0LW01.XSTCD = TF6REC.XSTCD;
      TF0LW01.XXXCITYS = TF6REC.XXXCITYS;
      TF0LW01.TF6ADRID = TF6REC.TF6ADRID;
      TF0LW02.TF0LWNSC[TFAWSUB1] = TF0LW01.TF0LWNSC;
      TF0LW01.TF0LWHNM = TF0LW01.TF0LWNSC;

    end

    XSTF6F2(); /* select next tf6rec record*/

  end

  TF0LSX0(); /* COMPRESS NAME STATE AND CITY*/

  if (TF0LW01.TF0LWNSC > TF0LW01.TF0LWHNM)
    TF0LW01.TF0LWNSC = TF0LW01.TF0LWHNM;
    TF0LM001.TF0LMNNM = TF0LW01.TF6ALNMS;
    TF0LM001.TF0LMNST = TF0LW01.XSTCD;
    TF0LM001.TF0LMNCT = TF0LW01.XXXCITYS;
    TF0LM001.TF0LMNAI = TF0LW01.TF6ADRID;
  end

  if (TFAREC.TFAWSUB1 >= 450)
    converseLib.validationFailed(43);
      /* internal scrolling table over 90% - contact programming*/
  end


end // end TF0LSO3

// set up online screen
Function TF0LSO4()


         /* set up online screen*/



  TA1REC.TA1LOCAT[2] = "TF0LSB2";

  TF0LSX0(); /* compress name, st and city*/

  set TF6REC empty; /* Initialize record area*/
  TF6REC.XWHCD = TF0LM001.XWHCD;
  TF6REC.TF6ALNMS = TF0LW01.TF6ALNMS;
  TF6REC.XSTCD = TF0LW01.XSTCD;
  TF6REC.XXXCITYS = TF0LW01.XXXCITYS;
  TF6REC.TF6ADRID = TF0LW01.TF6ADRID;

  XSTF6S2(); /* select set and select next tf3rec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      XSTF6S2(); /* try to add record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(29);
      /* data base contention <try again>*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(08);
        /* bottom of table, no more scrolling possible*/
      XSTF6C2(); /* close set*/
    else
      TF0LSO5(); /* set up online screen*/
      XSTF6C2(); /* close set*/
    end
  end



end // end TF0LSO4

// prepare to move data to screen
Function TF0LSO5()


         /* prepare to move data to screen*/



  TA1REC.TA1LOCAT[2] = "TF0LSO5";
  TFAREC.TFAWSUB2 = 1;
  TFAREC.TFAWCNT1 = 0;

  if (converseVar.eventKey is pf7)
      /* next sentence*/
  else
    TF0LW01.TF0LWHLD = TF0LW01.TF0LWNSC;
    while (TFAREC.TFAWCNT1 != 99)

      TF0LW01.TF6ALNMS = TF6REC.TF6ALNMS;
      TF0LW01.XXXCITYS = TF6REC.XXXCITYS;
      TF0LW01.XSTCD = TF6REC.XSTCD;
      TF0LW01.TF6ADRID = TF6REC.TF6ADRID;

      if (TF0LW01.TF0LWNSC == TF0LW01.TF0LWHNM)
        TFAREC.TFAWCNT1 = 99;
      else
        if (TF0LW01.TF0LWNSC >= TF0LW01.TF0LWHLD)
          TFAREC.TFAWCNT1 = 99;
        else
          XSTF6F2(); /* select next tf3rec record*/

          if (SQLCA.VAGen_SQLCODE == 100)
            TF0LM001.TF0LMNNM = TF0LM001.TF6ALTNM[1];
            TF0LM001.TF0LMNST = TF0LM001.XSTCD[1];
            TF0LM001.TF0LMNCT = TF0LM001.XXXCITY[1];
            TF0LM001.TF0LMNAI = TF0LM001.TF6ADRID[1];
            set TF6REC empty;
            TFAREC.TFAWCNT1 = 99;
          end
        end
      end
    end
  end


  while (TFAREC.TFAWSUB2 <= 4)

    TF0LSO6(); /* move data to screen*/

    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;

    if (SQLCA.VAGen_SQLCODE == 100)
        /* next sentence*/
    else
      XSTF6F2(); /* select next tf6rec record*/

      if (SQLCA.VAGen_SQLCODE == 100)
        TF0LM001.TF0LMNNM = TF0LM001.TF6ALTNM[1];
        TF0LM001.TF0LMNST = TF0LM001.XSTCD[1];
        TF0LM001.TF0LMNCT = TF0LM001.XXXCITY[1];
        TF0LM001.TF0LMNAI = TF0LM001.TF6ADRID[1];
        set TF6REC empty;
      end
    end

  end

  if (TF0LW01.TF0LMNNM > " " /* check for match on search*/
   && TF0LM001.TF6ALTNM[1] != TF0LW01.TF0LMNNM) /* no match*/
    if (converseVar.validationMsgNum == 0 /* no messages/errors*/
     || converseVar.validationMsgNum == 7 /* top of table*/
     || converseVar.validationMsgNum == 8) /* bottom of table*/
      converseLib.validationFailed(10); /* warning - exact match not found*/
    end
  end


  if (SQLCA.VAGen_SQLCODE == 100)
    if (converseVar.validationMsgNum == 9)
       /* update successful message*/
       /* next sentence*/
    else
      if (converseVar.validationMsgNum == 7)
         /* top of table, no more scrolling forward possible*/
         /* next sentence*/
      else
        if (converseVar.validationMsgNum != 10) /* warn - exact match not found*/
          converseLib.validationFailed(8);
              /* bottom of table, no more froward scrolling possible*/
        end
      end
    end
  else

    TF0LM001.TF0LMNNM = TF6REC.TF6ALTNM;
    TF0LM001.TF0LMNST = TF6REC.XSTCD;
    TF0LM001.TF0LMNCT = TF6REC.XXXCITY;
    TF0LM001.TF0LMNAI = TF6REC.TF6ADRID;

  end

  TF0LW01.TF0LMNNM = TF0LM001.TF6ALTNM[1];
  TF0LW01.TF0LMNST = TF0LM001.XSTCD[1];
  TF0LW01.TF0LMNCT = TF0LM001.XXXCITY[1];
  TF0LW01.TF0LMNAI = TF0LM001.TF6ADRID[1];
  TF0LW01.TF0LMGPH = TF0LW01.TF0LMGRP;
  TF0LW01.TF0LMNNM = TF0LM001.TF0LMNNM;
  TF0LW01.TF0LMNST = TF0LM001.TF0LMNST;
  TF0LW01.TF0LMNCT = TF0LM001.TF0LMNCT;
  TF0LW01.TF0LMNAI = TF0LM001.TF0LMNAI;


end // end TF0LSO5

// move data to screen
Function TF0LSO6()


         /* move data to screen*/



  TF0LM001.TF0LMACT[TFAWSUB2] = " ";
  TF0LM001.TF6ADRID[TFAWSUB2] = TF6REC.TF6ADRID;
  TF0LM001.TF6ALTNM[TFAWSUB2] = TF6REC.TF6ALTNM;
  TF0LM001.XXXADDR1[TFAWSUB2] = TF6REC.XXXADDR[1];
  TF0LM001.XXXADDR2[TFAWSUB2] = TF6REC.XXXADDR[2];
  TF0LM001.XXXADDR3[TFAWSUB2] = TF6REC.XXXADDR[3];
  TF0LM001.XXXCITY[TFAWSUB2] = TF6REC.XXXCITY;
  TF0LM001.XXXZIP[TFAWSUB2] = TF6REC.XXXZIP;
  TF0LM001.XSTCD[TFAWSUB2] = TF6REC.XSTCD;
  TF0LM001.XCTCD[TFAWSUB2] = TF6REC.XCTCD;
  TF0LM001.XXXSTAT[TFAWSUB2] = TF6REC.XXXSTAT;




end // end TF0LSO6

// get screen descrip & defaults
Function TF0LSO7()


         /* get screen descriptions and defaults*/



  TFAREC.TFAWSUB1 = 1;

  while (TFAREC.TFAWSUB1 <= 4)

         /* IF TF0LM001.XCTCD(TFAWSUB1) EQ 'USA';*/
         /* MOVE ' ' TO TF0LM001.XCTCD(TFAWSUB1);*/
         /* ELSE;*/
    if (TF0LM001.XCTCD[TFAWSUB1] in XCTTBL.XCTCD)
      TF0LM001.XCTDESC[TFAWSUB1] = XCTTBL.XCTDESC[sysVar.arrayIndex];
    else
      TF0LM001.XCTDESC[TFAWSUB1] = " ";
    end
        /* END;*/

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

  end



end // end TF0LSO7

// check inquiry or maintenance
Function TF0LSO8()




         /* check if inquiry or maintenance mode*/



  if (COMMAREA.CAADDFL == "N"
   || TFWREC.TFWUPDFL == "N")
    TF0LM001.TF0LMHED = "INQUIRY";
    TFAREC.TFAWSUB1 = 1;
    while (TFAREC.TFAWSUB1 <= 4)

      set TF0LM001.TF0LMAHD[TFAWSUB1] skip, invisible;
      set TF0LM001.TF0LMACT[TFAWSUB1] skip, invisible;
      set TF0LM001.TF6ADRID[TFAWSUB1] skip;
      set TF0LM001.TF6ALTNM[TFAWSUB1] skip;
      set TF0LM001.XXXADDR1[TFAWSUB1] skip;
      set TF0LM001.XXXADDR2[TFAWSUB1] skip;
      set TF0LM001.XXXADDR3[TFAWSUB1] skip;
      set TF0LM001.XXXCITY[TFAWSUB1] skip;
      set TF0LM001.XXXZIP[TFAWSUB1] skip;
      set TF0LM001.XSTCD[TFAWSUB1] skip;
      set TF0LM001.XCTCD[TFAWSUB1] skip;


      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

    end
    if (TFWREC.TFWUPDFL == "Y")
      converseLib.validationFailed(24);
         /* not authorized for update - inquiry assumed*/
    end
  else
    TF0LM001.TF0LMHED = "MAINTENANCE";
    TFAREC.TFAWSUB1 = 1;
    while (TFAREC.TFAWSUB1 <= 4)

      set TF0LM001.TF0LMACT[TFAWSUB1] normal;
      set TF0LM001.TF0LMAHD[TFAWSUB1] skip;
      set TF0LM001.TF6ADRID[TFAWSUB1] skip;
      set TF0LM001.TF6ALTNM[TFAWSUB1] normal;
      set TF0LM001.XXXADDR1[TFAWSUB1] normal;
      set TF0LM001.XXXADDR2[TFAWSUB1] normal;
      set TF0LM001.XXXADDR3[TFAWSUB1] normal;
      set TF0LM001.XXXCITY[TFAWSUB1] normal;
      set TF0LM001.XXXZIP[TFAWSUB1] normal;
      set TF0LM001.XSTCD[TFAWSUB1] normal;

      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

    end

  end



end // end TF0LSO8

// do paging of screen data
Function TF0LSS0()


         /* do paging of screen data*/




  if (TF0LM001.TF0LMNNM != TF0LW01.TF0LMNNM
   || TF0LM001.TF0LMNST != TF0LW01.TF0LMNST
   || TF0LM001.TF0LMNCT != TF0LW01.TF0LMNCT
   || TF0LM001.TF0LMNAI != TF0LW01.TF0LMNAI)
       /* next sentence*/
  else
    if (converseVar.validationMsgNum == 9 /* all updates successful*/
     && TF0LW01.TF0LWHNE > " ")          
      TF0LM001.TF0LMNNM = TF0LW01.TF0LWHNE;
      TF0LM001.TF0LMNST = TF0LW01.TF0LWHST;
      TF0LM001.TF0LMNCT = TF0LW01.TF0LWHCT;
      TF0LM001.TF0LMNAI = TF0LW01.TF0LWHAI;
      TF0LW01.TF0LWHNE = " ";
    else
      if (converseVar.eventKey is pf7)
        TF0LSS1(); /* set tfarec.tfawsub3 to proper place*/
                                   /* in scrolling table*/
      else
        if (TF0LW01.TF0LWFLG == "UPDATE DONE, NO SCROLLING ON ENTER KEY"
         && converseVar.eventKey is enter)
          TF0LW01.TF0LMGRP = TF0LW01.TF0LMGPH;
          TF0LM001.TF0LMNNM = TF0LW01.TF0LMNNM;
          TF0LM001.TF0LMNST = TF0LW01.TF0LMNST;
          TF0LM001.TF0LMNCT = TF0LW01.TF0LMNCT;
          TF0LM001.TF0LMNAI = TF0LW01.TF0LMNAI;

        end
      end
    end
  end

  TF0LW01.TF0LWFLG = " ";

  TF0LSX0(); /* compress name, state and city*/

  if (TF0LW01.TF0LWNSC > TF0LW01.TF0LWHNM)
    TF0LW01.TF0LWNSC = TF0LW01.TF0LWHNM;
    TF0LM001.TF0LMNNM = TF0LW01.TF6ALNMS;
    TF0LM001.XSTCD = TF0LW01.XSTCD;
    TF0LM001.TF0LMNCT = TF0LW01.XXXCITYS;
    TF0LM001.TF0LMNAI = TF0LW01.TF6ADRID;
  end


  if (converseVar.validationMsgNum == 0 
   || converseVar.validationMsgNum == 9 /* all updates successful*/
   || converseVar.validationMsgNum == 7 /* top of table, no more backward scrolling possible*/
   || converseVar.validationMsgNum == 26) /* record not found for update*/
    if (TF0LW01.TF0LWUPD == "ADD, CHANGE OR DELETE TAKEN PLACE ")
      TF0LW01.TF0LWUPD = " ";
      TF0LSO2(); /* rebuild scrolling table*/
    end
    TF0LSO4(); /* rebuild online screen*/
    TF0LSO7(); /* online screen descriptions*/
  end



end // end TF0LSS0

// set tfawsub3 to proper place
Function TF0LSS1()



         /* set up tfarec.tfawsub3 to proper index when next zip*/
         /* is changed.*/


  TFAREC.TFAWSUB1 = 1;
  TFAREC.TFAWSUB3 = 1;
  TF0LW01.TF0LMGRP = TF0LW01.TF0LMGPH;
  TF0LM001.TF0LMNNM = TF0LW01.TF0LMNNM;
  TF0LM001.TF0LMNST = TF0LW01.TF0LMNST;
  TF0LM001.TF0LMNCT = TF0LW01.TF0LMNCT;
  TF0LM001.TF0LMNAI = TF0LW01.TF0LMNAI;

  TF0LSX0(); /* compress name, state and city*/

  while (TFAREC.TFAWSUB3 <= 500)

    if (TF0LW01.TF0LWNSC == TF0LW02.TF0LWNSC[TFAWSUB1])
      if (TFAREC.TFAWSUB1 > 1)
        TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;
      else
        if (converseVar.validationMsgNum == 9)
           /* update successful message*/
           /* next sentence*/
        else
          converseLib.validationFailed(7);
            /* top of table, no more backward scrolling possible*/
        end
      end
      if (TF0LW01.TF0LWNSC == " ")
          /* next sentence*/
      else
        TF0LW01.TF0LWNSC = TF0LW02.TF0LWNSC[TFAWSUB1];
        TF0LM001.TF0LMNNM = TF0LW01.TF6ALNMS;
        TF0LM001.XSTCD = TF0LW01.XSTCD;
        TF0LM001.TF0LMNCT = TF0LW01.XXXCITYS;
        TF0LM001.TF0LMNAI = TF0LW01.TF6ADRID;
      end
      TFAREC.TFAWSUB3 = 501;
    else
      if (TF0LW01.TF0LWNSC > TF0LW02.TF0LWNSC[TFAWSUB1])
          /* next sentence*/
      else
        TFAREC.TFAWSUB3 = 501;
        if (TFAREC.TFAWSUB1 > 1)
          TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;
        else
          if (converseVar.validationMsgNum == 9)
             /* update successful message*/
             /* next sentence*/
          else
            converseLib.validationFailed(7);
              /* top of table, no more backward scrolling possible*/
          end
        end
        if (TF0LW01.TF0LWNSC == " ")
            /* next sentence*/
        else
          TF0LW01.TF0LWNSC = TF0LW02.TF0LWNSC[TFAWSUB1];
          TF0LM001.TF0LMNNM = TF0LW01.TF6ALNMS;
          TF0LM001.XSTCD = TF0LW01.XSTCD;
          TF0LM001.TF0LMNCT = TF0LW01.XXXCITYS;
          TF0LM001.TF0LMNAI = TF0LW01.TF6ADRID;
        end
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
    TFAREC.TFAWSUB3 = TFAREC.TFAWSUB3 + 1;

  end


end // end TF0LSS1

// update data base
Function TF0LSU0()


         /* update zip/carrier/destination data base*/



  TFAREC.TFAWSUB1 = 4;
  TFCREC.TFCTBLNM = "VRTADR01";
  TF0LW01.TF0LWHNE = " ";
  TF0LW01.TF0LWHST = " ";
  TF0LW01.TF0LWHCT = " ";
  TF0LW01.TF0LWHAI = 0;

  TF0LSU1(); /* get date and time stamp*/

  TFCREC.ZZZSDT = TA2REC.TA2GRGGN;
  TFCREC.ZZHHMMSS = TA2REC.TA2TIMEN;

  while (TFAREC.TFAWSUB1 >= 1)

    if (TF0LM001.TF0LMACT[TFAWSUB1] == " ")
        /* next sentence*/
    else
      if (TF0LM001.TF0LMACT[TFAWSUB1] == "A")
        if (TF0LM001.XXXSTAT[TFAWSUB1] == "I")
          TF0LSU2(); /* data base change*/
        else
          TF0LSU5(); /* data base add*/
        end
        TF0LW01.TF0LWHNE = TF0LM001.TF6ALTNM[TFAWSUB1];
        TF0LW01.TF0LWHST = TF0LM001.XSTCD[TFAWSUB1];
        TF0LW01.TF0LWHCT = TF0LM001.XXXCITY[TFAWSUB1];
        TF0LW01.TF0LWHAI = TF6REC.TF6ADRID;
      else
        if (TF0LM001.TF0LMACT[TFAWSUB1] == "C")
          TF0LSU2(); /* change to data base*/
        else
          if (TF0LM001.TF0LMACT[TFAWSUB1] == "-")
            TF0LSU7(); /* check delete for inactive delete or physical*/
          else
            if (TF0LM001.TF0LMACT[TFAWSUB1] == "D")
              TF0LSU8(); /* check delete for inactive delete or physical*/
              if (TF6REC.ZZZCHGDT < TF0LW01.TF0LWDTE)
                TF0LSU7(); /* physical delete*/
              else
                TF0LSU2(); /* data base change*/
              end
            end
          end
        end
      end
    end

    if (TF0LM001.TF0LMACT[TFAWSUB1] > " ")
      if (converseVar.validationMsgNum == 0
       || converseVar.validationMsgNum == 26)
        TF0LW01.TF0LWFLG = "UPDATE DONE, NO SCROLLING ON ENTER KEY";
        TF0LM001.TF0LMACT[TFAWSUB1] = " ";
        if (converseVar.validationMsgNum == 26)
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback();
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit();
          converseLib.validationFailed(9);
            /* all updates successfully performed - please continue*/
        end
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;

  end



end // end TF0LSU0

// get time and date stamp
Function TF0LSU1()



      /* get time and date stamp*/



  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  TF0LW01.TF0LWDTE = TA2REC.TA2GRGGN;


  set TA2REC empty;
  TA2REC.TA2GRGGN = TF0LW01.TF0LWDTE;
  TA2REC.TA2DYAOD = -182;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  TF0LW01.TF0LWDTE = TA2REC.TA2GRGGN;


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

end // end TF0LSU1

// change to data base
Function TF0LSU2()



         /* change tf3rec in data base*/



  set TF6REC empty;
  TA1REC.TA1LOCAT[2] = "TF0LSU2";
  TF0LW01.TF0LWUPD = "ADD, CHANGE OR DELETE TAKEN PLACE ";
  TFCREC.TFCACTIN = TF0LM001.TF0LMACT[TFAWSUB1];
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";
  TF6REC.XWHCD = TF0LM001.XWHCD;
  TF6REC.TF6ADRID = TF0LM001.TF6ADRID[TFAWSUB1];

  XSTF6I0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TFCREC.TF-AUD-BFR-LEN = 338;
    TFCREC.TF-AUD-BFR-TEXT = TF6REC.TF6GRPLV;

    if (TF0LM001.TF0LMACT[TFAWSUB1] == "A")
      TF6REC.XXXSTAT = "A";
    else
      if (TF0LM001.TF0LMACT[TFAWSUB1] == "D")
        TF6REC.XXXSTAT = "I";
      end
    end

    TF0LSU3(); /* move row on scren to record*/

    TF6REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    TF6REC.ZZZCHGTM = TA2REC.TA2TIMHM;

    XSTF6R0(); /* update row on data base*/

    if (SQLCA.VAGen_SQLCODE == 0)
      TFCREC.TF-AUD-AFT-LEN = 338;
      TFCREC.TF-AUD-AFT-TEXT = TF6REC.TF6GRPLV;
      TF0LSU4(); /* write row to audit*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
        converseLib.validationFailed(39);
         /* needs message*/
         /* duplicate record*/
      else
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          XSTF6I0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        SQLCA.VAGen_SQLCODE = -911;
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(26);
         /* data base has been changed*/
      TF0LW01.TF0LWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          XSTF6I0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  end


end // end TF0LSU2

// move data from scrn to record
Function TF0LSU3()


         /* move data from screen to tf3rec record*/



  TF6REC.XWHCD = TF0LM001.XWHCD;
  TF6REC.TF6ADRID = TF0LM001.TF6ADRID[TFAWSUB1];
  TF6REC.TF6ALTNM = TF0LM001.TF6ALTNM[TFAWSUB1];
  TF6REC.XXXADDR[1] = TF0LM001.XXXADDR1[TFAWSUB1];
  TF6REC.XXXADDR[2] = TF0LM001.XXXADDR2[TFAWSUB1];
  TF6REC.XXXADDR[3] = TF0LM001.XXXADDR3[TFAWSUB1];
  TF6REC.XXXCITY = TF0LM001.XXXCITY[TFAWSUB1];
  TF6REC.XXXZIP = TF0LM001.XXXZIP[TFAWSUB1];
  TF6REC.XSTCD = TF0LM001.XSTCD[TFAWSUB1];
  TF6REC.XCTCD = TF0LM001.XCTCD[TFAWSUB1];

  TFAREC.TFACMPR = TF0LM001.XXXCITY[TFAWSUB1];
  XSTFS04(); /* compress xxxcity to 10 characters*/
  TF6REC.XXXCITYS = TFARSLT;

  TFAREC.TFACMPR = TF0LM001.TF6ALTNM[TFAWSUB1];
  XSTFS04();
                                   /* compress tf6latnm to 10 characters*/
  TF6REC.TF6ALNMS = TFARSLT;



end // end TF0LSU3

// change to data base
Function TF0LSU4()



         /* change tf3rec in data base*/




  TA1REC.TA1LOCAT[2] = "TF0GSE1";

  XSTFCA0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TFAREC.TFAWCNT5 = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && TFAREC.TFAWCNT5 <= 2)
        XSTFCA0(); /* try to add record*/
        TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(29);
           /* data base contention <try again>*/
      end
    end
  end



end // end TF0LSU4

// add to data base
Function TF0LSU5()


         /* add tf3rec to data base*/



  set TF6REC empty;
  TA1REC.TA1LOCAT[2] = "TF0LSD1";
  TF0LW01.TF0LWUPD = "ADD, CHANGE OR DELETE TAKEN PLACE ";
  TF6REC.ZZZSDT = TA2REC.TA2GRGGN;
  TF6REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  TF6REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  TF6REC.XXXSTAT = "A";
  TFCREC.TFCACTIN = TF0LM001.TF0LMACT[TFAWSUB1];
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";

  TF0LSU3(); /* move row on screen to record*/

  TF0LSU6(); /* get next address id*/

  if (SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
  else
    XSTF6A0(); /* add row to data base*/
    if (SQLCA.VAGen_SQLCODE == 0)
      TFCREC.TF-AUD-AFT-LEN = 338;
      TFCREC.TF-AUD-AFT-TEXT = TF6REC.TF6GRPLV;
      TF0LSU4(); /* write row to audit*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
        converseLib.validationFailed(39);
         /* needs message*/
         /* duplicate record*/
        set TF0LM001.TF0LMACT[TFAWSUB1] cursor, bold;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          TFAREC.TFAWCNT5 = 1;
          while (SQLCA.VAGen_SQLCODE == -911
           && TFAREC.TFAWCNT5 <= 2)
            XSTF6A0(); /* try to add record*/
            TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
          end
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(029); /* data base in use*/
              /* data base in use, try again*/
          end
        end
      end
    end
  end



end // end TF0LSU5

// add to data base
Function TF0LSU6()


         /* add tf3rec to data base*/




  PKDREC.XWHCD = TF0LM001.XWHCD;

  XSPKDI0(); /* select picking control file*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TF6REC.TF6ADRID = PKDREC.TFXNXAID;
    PKDREC.TFXNXAID = PKDREC.TFXNXAID + 1;

    XSPKDR0(); /* update picking control file*/

  end



  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(26);
         /* data base has been changed*/
      TF0LW01.TF0LWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
    end
  end


end // end TF0LSU6

// physical delete from data base
Function TF0LSU7()


         /* physical delete from data base*/



  set TF6REC empty;
  TA1REC.TA1LOCAT[2] = "TF0LSD4";
  TF0LW01.TF0LWUPD = "ADD, CHANGE OR DELETE TAKEN PLACE ";
  TFCREC.TFCACTIN = "D";
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";
  TF6REC.XWHCD = TF0LM001.XWHCD;
  TF6REC.TF6ADRID = TF0LM001.TF6ADRID[TFAWSUB1];

  XSTF6I0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TFCREC.TF-AUD-BFR-LEN = 338;
    TFCREC.TF-AUD-BFR-TEXT = TF6REC.TF6GRPLV;

    XSTF6D0(); /* delete row on data base*/

    if (SQLCA.VAGen_SQLCODE == 0)
      TFCREC.TF-AUD-AFT-LEN = 338;
      TFCREC.TF-AUD-AFT-TEXT = " ";
      TF0LSU4(); /* write row to audit*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
         /* needs message*/
         /* duplicate record*/
        converseLib.validationFailed(39);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          TFAREC.TFAWCNT5 = 1;
          while (SQLCA.VAGen_SQLCODE == -911
           && TFAREC.TFAWCNT5 <= 2)
            XSTF6I0(); /* try to add record*/
            TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
          end
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(29);
               /* data base contention <try again>*/
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(26);
         /* data base has been changed*/
      TF0LW01.TF0LWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          XSTF6I0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  end



end // end TF0LSU7

// inactivate from data base
Function TF0LSU8()


         /* inactivate from data base*/



  TA1REC.TA1LOCAT[2] = "TF0LSD3";
  TF6REC.XWHCD = TF0LM001.XWHCD;
  TF6REC.TF6ADRID = TF0LM001.TF6ADRID[TFAWSUB1];

  XSTF6I0(); /* select row*/

  if (converseVar.validationMsgNum == 100)
       /* this record has already been deleted*/
    converseLib.validationFailed(23);
    set TF0LM001.TF0LMACT[TFAWSUB1] cursor, bold;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TFAREC.TFAWCNT5 = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && TFAREC.TFAWCNT5 <= 2)
        XSTF6I0(); /* try to add record*/
        TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(29);
           /* data base contention <try again>*/
      end
    end
  end


end // end TF0LSU8

// compress city & name 4 search
Function TF0LSX0()


         /* compress key for table*/




  TFAREC.TFACMPR = TF0LM001.TF0LMNNM;
  XSTFS04();
                                   /* compress tf6latnm to 10 characters*/
  TF0LW01.TF6ALNMS = TFAREC.TFARSLT;

  TF0LW01.XSTCD = TF0LM001.TF0LMNST;

  TFAREC.TFACMPR = TF0LM001.TF0LMNCT;
  XSTFS04(); /* compress xxxcity to 10 characters*/
  TF0LW01.XXXCITYS = TFAREC.TFARSLT;

  TF0LW01.TF6ADRID = TF0LM001.TF0LMNAI;


end // end TF0LSX0

// replace : location : 0
Function XSPKDR0()


   /* ************************************************************/
   /* *** replace unique row in: destination table            ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments zzzchgct by +1 and uses ****/
   /* ***       current data & time for zzzchgdt & zzzchgtm   ****/
   /* ************************************************************/

  call "IO1890" ("U ", SQLCA, PKDREC) {isNoRefresh = yes}; /* <=== select unique row*/


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSPKDR0 ";
  TA1REC.TA1LOCAT[1] = "IO1890  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKCTL01";
  TA1REC.TA1TBLKE = PKDREC.PKDKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA);
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSPKDR0

// add : location : 0
Function XSTF6A0()


   /* ************************************************************/
   /* *** add unique row in: destination table                ****/
   /* *** using the std i/o processing version #0             ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all row/rec moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -803 = adding duplicate row - setup dupl row msg  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row for inquiry                       ****/
   /* *** note: 0 return code results in the -803             ****/
   /* ************************************************************/

  call "IO1920" ("S ", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF6A0 ";
    TA1REC.TA1LOCAT[1] = "IO1920  ";
    TA1REC.TA1LOCAT[3] = "ADD     ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VRTADR01";
    TA1REC.TA1TBLKE = TF6REC.TF6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** insert row                                          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  call "IO1920" ("A ", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== add row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF6A0 ";
  TA1REC.TA1LOCAT[1] = "IO1920  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VRTADR01";
  TA1REC.TA1TBLKE = TF6REC.TF6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSTF6A0

// close : location : 0
Function XSTF6C2()


   /* ************************************************************/
   /* *** close select set of: destination table              ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -507 = cursor already closed - return 0           ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1920" ("C2", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== close select set*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF6C0 ";
  TA1REC.TA1LOCAT[1] = "IO1920  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VRTADR01";
  TA1REC.TA1TBLKE = TF6REC.TF6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF6C2

// delete : location : 0
Function XSTF6D0()


   /* ************************************************************/
   /* *** delete unique row in: destination table             ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete unique row                                   ****/
   /* ************************************************************/

  call "IO1920" ("D ", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/


  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF6D0 ";
  TA1REC.TA1LOCAT[1] = "IO1920  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VRTADR01";
  TA1REC.TA1TBLKE = TF6REC.TF6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF6D0

// fetch : location : 0
Function XSTF6F2()


   /* ************************************************************/
   /* *** fetch next row from: destination table              ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: +100 - not found was detected as part of the  ****/
   /* ***       select set previously executed                ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = EOF                                        ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "IO1920" ("N2", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select next row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF6F0 ";
  TA1REC.TA1LOCAT[1] = "IO1920  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VRTADR01";
  TA1REC.TA1TBLKE = TF6REC.TF6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF6F2

// inquiry : location : 0
Function XSTF6I0()


   /* ************************************************************/
   /* *** select unique row from: destination table           ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: second fetch used to detect duplicate rows    ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select row with unique key                          ****/
   /* ************************************************************/

  call "IO1920" ("S ", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique*/

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811) /* duplicate*/
    XSTF6S2();
    XSTF6C2();
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF6I0 ";
    TA1REC.TA1LOCAT[1] = "IO1920  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VRTADR01";
    TA1REC.TA1TBLKE = TF6REC.TF6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF6I0

// replace : location : 0
Function XSTF6R0()


   /* ************************************************************/
   /* *** replace unique row in: destination table            ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments zzzchgct by +1 and uses ****/
   /* ***       current data & time for zzzchgdt & zzzchgtm   ****/
   /* ************************************************************/

  call "IO1920" ("U ", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF6R0 ";
  TA1REC.TA1LOCAT[1] = "IO1920  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VRTADR01";
  TA1REC.TA1TBLKE = TF6REC.TF6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF6R0

// setinq : location : 0
Function XSTF6S2()


   /* ************************************************************/
   /* *** select set of rows from: destination table          ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: +100 - not found can't be detected until the  ****/
   /* ***       first fetch is executed                       ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = none found - setup not fnd error/msg       ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique key                          ****/
   /* ************************************************************/

  call "IO1920" ("S2", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select set row*/

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF6S0 ";
    TA1REC.TA1LOCAT[1] = "IO1920  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VRTADR01";
    TA1REC.TA1TBLKE = TF6REC.TF6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* ************************************************************/

  call "IO1920" ("N2", SQLCA, TF6REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select set row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF6S0 ";
  TA1REC.TA1LOCAT[1] = "IO1920  ";
  TA1REC.TA1LOCAT[3] = "FIRST   ";
  TA1REC.TA1LOCAT[4] = "FETCH   ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VRTADR01";
  TA1REC.TA1TBLKE = TF6REC.TF6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF6S2

//*** RECORD=TF0LW01 ****
// * ----------------------------------------------------------
// *               TF0L working storage.
// *
// *     this area is the working storage unique to tf0l
// * ----------------------------------------------------------
// ***********************
Record TF0LW01 type basicRecord
  5 TF0LWGRP TF0LWGRP ; 
    10 TF0LWUPD TF0LWUPD ; 
    10 TF0LWFLG TF0LWFLG ; 
    10 TF0LWHNM TF0LWHNM ; 
    10 XWHCD XWHCD ; 
    10 TF0LWDTE TF0LWDTE ; 
    10 TF0LMGRP TF0LMGRP ; 
      15 TF0LMNNM TF0LMNNM ; 
      15 TF0LMNCT TF0LMNCT ; 
      15 TF0LMNST TF0LMNST ; 
      15 TF0LMNAI TF0LMNAI ; 
    10 TF0LWNSC TF0LWNSC ; 
      15 TF6ALNMS TF6ALNMS ; 
      15 XSTCD XSTCD ; 
      15 XXXCITYS XXXCITYS ; 
      15 TF6ADRID TF6ADRID ; 
    10 TF0LMGPH TF0LMGPH ; 
    10 TF0LWHLD TF0LWHLD ; 
    10 TF0LWHNE TF0LWHNE ; 
    10 TF0LWHCT TF0LWHCT ; 
    10 TF0LWHST TF0LWHST ; 
    10 TF0LWHAI TF0LWHAI ; 
  5 XXXZIP XXXZIP ; 
    10 TF0LWZP3 TF0LWZP3 ; 
    10 * char(7) ; 
end // end TF0LW01

//*** RECORD=TF0LW02 ****
// allocation working storage.
// this area is the working storage unique to
// application AL0A for rule set selection for batch processing
// ***********************
Record TF0LW02 type basicRecord
  5 TF0LW01G TF0LW01G ; 
    10 TF0LWNSC TF0LWNSC [500] ; 
end // end TF0LW02

DataItem TF0LMGPH char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map scrolling key group level
DataItem TF0LMGRP char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area 4 next addr from map
DataItem TF0LMNAI int {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no
}
end

// hold area 4 next city from map
DataItem TF0LMNCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area 4 next name from map
DataItem TF0LMNNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area 4 next st from map
DataItem TF0LMNST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem TF0LW01G char(13000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem TF0LWDTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add or delete flag
DataItem TF0LWFLG char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem TF0LWGRP char(339)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area 4 next addr from map
DataItem TF0LWHAI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold area 4 next city from map
DataItem TF0LWHCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area for scrolling key
DataItem TF0LWHLD char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area 4 next name from map
DataItem TF0LWHNE char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// highest name/state/city/addrid
DataItem TF0LWHNM char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold area 4 next st from map
DataItem TF0LWHST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map scrolling key grp lvl hold
DataItem TF0LWNSC char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add or delete flag
DataItem TF0LWUPD char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first three chars of zip
DataItem TF0LWZP3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

