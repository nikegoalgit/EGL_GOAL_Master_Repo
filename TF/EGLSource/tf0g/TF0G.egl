package tf0g;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import in1.common.*;
import ku.common.*;
import pk.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=TF0G ****
// ************************************************************
// * applid:    tf0g    zip/carrier/destination definition
// *                        inquiry/update
// ************************************************************
// * maint log
// *  when      who     what
// *-------- -------- -----------------------------------------
// *02/02/87  snoble  original creation of prototype
// *05/30/89  jwood   added xssegtr logic, noncsp option usage
// *03/04/91  rvakel  table changes:  regenned to pick up the
// *                  new TFAREC.
// *10/01/92  SHENDE  Fixed logic in TF0GS03 so that the zip cd
// *                  only moves into w/s where index <= 500.
// *04/05/94  Ryonke  Convert TFCREC fields to varchar logic.
// *12/05/95  DLIDDL  Convert all map weights to kilos for
// *                  canadian warehouses only (TF0GSE1,
// *                  TF0GSU3, TF0GSO6 affected).
// *01/30/01  RBALAM  Modified the statement group TF0GSo3
// *                  to hide the error message displayed on
// *                  TF0G screen.
// *12/21/01  RBALAM  REPLACED RECORD TF0GW02 WITH TF0GW03 AS
// *                  FIELD LENGTH NEEDS TO BE REDUCED TO 5.
// *                  NAME OF THE FIELD ALSO CHANGED TO NXTZIP.
// ************************************************************
// *********************
Program TF0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PKDREC PKDREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TF0GW01 TF0GW01; // record
  TF0GW03 TF0GW03; // record
  TF1REC TF1REC; // record
  TF2REC TF2REC; // record
  TF3REC TF3REC; // record
  TFAREC TFAREC; // record
  TFCREC TFCREC; // record
  TFWREC TFWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use TF0GM.TF0GM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TF0G010: TF0G010();
  end // end main
end // end TF0G

// program control
Function TF0G010()



      /* *********************************************************/
      /* * this process controls entire program process control **/
      /* * transfer to other applications occurs in converse    **/
      /* *********************************************************/



  XSENTRY(); /* check security*/


  XSSEGTR(); /* set segmented transaction id*/



  XSTFS01(); /* check traffic security*/



  TF0G100(); /* init pgm areas*/



      /* control pgm converse*/

  TFAREC.TFAPFL1 = "N";

  while (TFAREC.TFAPFL1 == "N")
    TF0G200();
  end



   /* ************************************************************/
end // end TF0G010

// program initialization
Function TF0G100()



      /* *********************************************************/
      /* * init program areas                                   **/
      /* *********************************************************/



  set TF1REC empty;
  set TF2REC empty;
  set TF3REC empty;
  set TFCREC empty;
  set TFAREC empty;
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  TA1REC.TA1MAP = "TF0GM001";
  TF0GW01.TF0GWFST = "Y"; /* set first converse flag*/

      /* init map*/

  TF0GM001.XWHCD = TFWREC.XWHCD;

  TF0GSO1(); /* check if inquiry or update mode*/



   /* ************************************************************/
end // end TF0G100

// process map
Function TF0G200()



      /* *********************************************************/
      /* * this process controls the converse for the map and   **/
      /* * the processing of the map                            **/
      /* *********************************************************/


  if (TF0GW01.XWHCD == "42") /* CANA warehouse 42*/
    TF0GM-MSRE-LIT = "MEASUREMENT:"; /* / * CANA measurement literal*/
    TF0GM-MEASURE = "METRIC"; /* CANA measurement*/
  else /* CANA not a Canadian warehouse*/
    TF0GM-MSRE-LIT = "            "; /* / * CANA*/
    TF0GM-MEASURE = "      "; /* CANA*/
  end

   /* ************************************************************/
  converse TF0GM001 ;
   /* ************************************************************/



  if (converseVar.eventKey is pa2) /* cancel*/
    COMMAREA.CATOAP = "TF0G";
    COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
    XSEXIT();
    TF0GM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
  else
    if (TF0GM001.CATOAP > " ") /* continue*/
      COMMAREA.CATOAP = TF0GM001.CATOAP;
      COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
      XSEXIT();
      TF0GM001.VAGen_EZEMSG = COMMAREA.CAMSG;
      COMMAREA.CATOAP = " ";
      set TF0GM001.CATOAP cursor, bold;
    else
      if (converseVar.eventKey is pf1) /* help*/
        COMMAREA.CAUSERA = " "; /* clear user commarea*/
        COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
        XSPF1();
        TF0GM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
        COMMAREA.CATOAP = " ";
      else
        if (converseVar.eventKey is pf3) /* exit to menu*/
          COMMAREA.CATOAP = "TF0A";
          COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
          XSEXIT();
          TF0GM001.VAGen_EZEMSG = COMMAREA.CAMSG;
          COMMAREA.CATOAP = " ";
        else
          if (converseVar.eventKey is pf4) /* master menu*/
            COMMAREA.CAUSERA = " "; /* clear user commarea*/
            COMMAREA.CAUSERA = TFWREC.TFWGRPLV;
            XSPF4();
            TF0GM001.VAGen_EZEMSG = COMMAREA.CAMSG;
            COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
            COMMAREA.CATOAP = " ";
          else
            if (converseVar.eventKey is enter /* enter only*/
             || converseVar.eventKey is pf7   /* scroll backward*/
             || converseVar.eventKey is pf8   /* scroll forward*/
             || converseVar.eventKey is pf12) /* edit only*/
              TF0GSI0(); /* pf7, pf8, pf12 and enter*/
            else
              converseLib.clearScreen();
               /* assume bad pa key*/
              converseLib.validationFailed(002); /* invalid pf key*/
            end
          end
        end
      end
    end
  end


   /* ************************************************************/
end // end TF0G200

// edit screen
Function TF0GSE0()


         /* edit sreen*/



  TF0GSE1(); /* set up defaults on screen*/

  if (TF0GW01.TF0GWFST == "Y") /* first converse*/
    TF0GW01.TF0GWFST = "N"; /* reset first converse*/
  end

  TFAREC.TFAWSUB1 = 4;

  while (TFAREC.TFAWSUB1 >= 1)

    if (TF0GM001.TF0GMACT[TFAWSUB1] > " ")
      TF0GSE2(); /* edit destination column*/
      TF0GSE3(); /* edit weight column*/
      TF0GSE4(); /* edit freight column*/
      TF0GSE5(); /* edit default destination*/
      TF0GSE6(); /* edit zip code column*/
      TF0GSE7(); /* edit activity column*/
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;

  end



end // end TF0GSE0

// set up defaults on screen
Function TF0GSE1()


         /* set up defaults on screen*/



  TA1REC.TA1LOCAT[2] = "TF0GSE1";
  TFAREC.TFAWSUB1 = 1;
  TFAREC.TFAWSUB2 = 1;

  PKDREC.XWHCD = TF0GM001.XWHCD;

  XSPKDI0(); /* fetch default weight for screen*/

  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    PKDREC.PKDMXWLM = 0;
  end

  while (TFAREC.TFAWSUB1 <= 4)

    if (TF0GM001.XXXZIP[TFAWSUB1] > " ")
      if (TF0GM001.TF3ZIPWT[TFAWSUB2] == 0)
        if (TF0GW01.XWHCD == "42") /* CANA warehouse 42*/
          if (PKDREC.PKDMXWLM != 9999999) /* CANA*/
            TF0GM001.TF3ZIPWT[TFAWSUB2] = mathLib.round(PKDREC.PKDMXWLM / 2.2046, -mathLib.decimals(TF0GM001.TF3ZIPWT[TFAWSUB2])); /* CANA weight in kilos*/
          else /* CANA*/
            TF0GM001.TF3ZIPWT[TFAWSUB2] = PKDREC.PKDMXWLM; /* CANA*/
          end /* CANA*/
        else /* CANA*/
          TF0GM001.TF3ZIPWT[TFAWSUB2] = PKDREC.PKDMXWLM; /* CANA*/
        end /* CANA*/
        if (TF0GW01.TF0GWFST == "N") /* not first converse*/
          if (TF0GM001.TF3ZIPWT[TFAWSUB2] is modified)
            converseLib.validationFailed(001); /* warn -- default info assigned*/
          end
        end
      end

    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1; /* zip code*/
    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 3; /* non-freight carrier*/

  end


  TFAREC.TFAWSUB1 = 1; /* zip code*/
  TFAREC.TFAWSUB2 = 2; /* freight carrier*/
  TFAREC.TFAWSUB4 = 3; /* volume carrier*/

  while (TFAREC.TFAWSUB1 <= 4)

    if (TF0GM001.XXXZIP[TFAWSUB1] > " ")

      if (TF0GM001.TF1CARCD[TFAWSUB4] == " ")
        TF0GM001.TF3ZIPWT[TFAWSUB4] = 0;
        TF0GM001.TF2DSTCD[TFAWSUB4] = " ";
        TF0GM001.TF2SABRV[TFAWSUB4] = " ";
        TF0GM001.TF1ABRV[TFAWSUB4] = " ";
      else
        TF0GM001.TF3ZIPWT[TFAWSUB4] = 9999999;
      end

      if (TF0GM001.TF3ZIPWT[TFAWSUB4] == 0)
        if (TF0GM001.TF3ZIPWT[TFAWSUB2] != 9999999)
          converseLib.validationFailed(001); /* warn -- default info assigned*/
        end
        TF0GM001.TF3ZIPWT[TFAWSUB2] = 9999999;
      end

    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1; /* zip code*/
    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 3; /* freight carr*/
    TFAREC.TFAWSUB4 = TFAREC.TFAWSUB4 + 3; /* volume carr*/

  end

  TFAREC.TFAWSUB1 = 1; /* zip code*/
  TFAREC.TFAWSUB2 = 1; /* carr/wgt/destn*/

  while (TFAREC.TFAWSUB1 <= 4)

    if (TF0GM001.XXXZIP[TFAWSUB1] > " ")

      TFAREC.TFAWCNT1 = 1;

      while (TFAREC.TFAWCNT1 <= 3)

        if (TF0GM001.TF3ZIPWT[TFAWSUB2] > 0
         && TF0GM001.TF2DSTCD[TFAWSUB2] == " ")
          TF0GM001.TF2DSTCD[TFAWSUB2] = TF0GM001.TF3DSTCD[TFAWSUB1];
        end

        if (TF0GM001.TF1CARCD[TFAWSUB2] > " "
         && TF0GM001.TF2DSTCD[TFAWSUB2] == " ")
          TF0GM001.TF2DSTCD[TFAWSUB2] = TF0GM001.TF3DSTCD[TFAWSUB1];
        end

        TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
        TFAREC.TFAWCNT1 = TFAREC.TFAWCNT1 + 1;

      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

  end



end // end TF0GSE1

// edit destination row
Function TF0GSE2()


         /* edit destination row*/



  TA1REC.TA1LOCAT[2] = "TF0GSE2";

  if (TFAREC.TFAWSUB1 == 4)
    TFAREC.TFAWSUB2 = 12;
  else
    if (TFAREC.TFAWSUB1 == 3)
      TFAREC.TFAWSUB2 = 9;
    else
      if (TFAREC.TFAWSUB1 == 2)
        TFAREC.TFAWSUB2 = 6;
      else
        if (TFAREC.TFAWSUB1 == 1)
          TFAREC.TFAWSUB2 = 3;
        end
      end
    end
  end

  TFAREC.TFAWCNT1 = 1;

  while (TFAREC.TFAWCNT1 <= 3)

    if (TF0GM001.TF2DSTCD[TFAWSUB2] > " ")
      TF2REC.TF2DSTCD = TF0GM001.TF2DSTCD[TFAWSUB2];
      XSTF2I0(); /* fetch unique destination code*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TF0GM001.TF2SABRV[TFAWSUB2] = TF2REC.TF2SABRV;
      else
        TF0GM001.TF2SABRV[TFAWSUB2] = " ";
        converseLib.validationFailed(22);
           /* invalid destination code*/
        set TF0GM001.TF2DSTCD[TFAWSUB2] cursor, bold;
      end
    end

    TFAREC.TFAWCNT1 = TFAREC.TFAWCNT1 + 1;
    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 1;

  end


end // end TF0GSE2

// edit weight column
Function TF0GSE3()


         /* edit weight column*/



  if (TFAREC.TFAWSUB1 == 4)
    if (TF0GM001.TF1CARCD[12] != " "
     && TF0GM001.TF3ZIPWT[11] >= TF0GM001.TF3ZIPWT[12])
      converseLib.validationFailed(40);
             /* freight weight must be less than volumn weight*/
      set TF0GM001.TF3ZIPWT[11] cursor, bold;
    end
    if (TF0GM001.TF3ZIPWT[10] >= TF0GM001.TF3ZIPWT[11])
      converseLib.validationFailed(30);
             /* non-freight weight must be less than freight weight*/
      set TF0GM001.TF3ZIPWT[10] cursor, bold;
    end
  else
    if (TFAREC.TFAWSUB1 == 3)
      if (TF0GM001.TF1CARCD[9] != " "
       && TF0GM001.TF3ZIPWT[8] >= TF0GM001.TF3ZIPWT[9])
        converseLib.validationFailed(40);
               /* freight weight must be less than volume weight*/
        set TF0GM001.TF3ZIPWT[8] cursor, bold;
      end
      if (TF0GM001.TF3ZIPWT[7] >= TF0GM001.TF3ZIPWT[8])
        converseLib.validationFailed(30);
               /* non-freight weight must be less than freight weight*/
        set TF0GM001.TF3ZIPWT[7] cursor, bold;
      end
    else
      if (TFAREC.TFAWSUB1 == 2)
        if (TF0GM001.TF1CARCD[6] != " "
         && TF0GM001.TF3ZIPWT[5] >= TF0GM001.TF3ZIPWT[6])
          converseLib.validationFailed(40);
                 /* freight weight must be less than volume weight*/
          set TF0GM001.TF3ZIPWT[5] cursor, bold;
        end
        if (TF0GM001.TF3ZIPWT[4] >= TF0GM001.TF3ZIPWT[5])
          converseLib.validationFailed(30);
                 /* non-freight weight must be less than freight weight*/
          set TF0GM001.TF3ZIPWT[4] cursor, bold;
        end
      else
        if (TFAREC.TFAWSUB1 == 1)
          if (TF0GM001.TF1CARCD[3] != " "
           && TF0GM001.TF3ZIPWT[2] >= TF0GM001.TF3ZIPWT[3])
            converseLib.validationFailed(40);
                   /* freight weight must be less than volume weight*/
            set TF0GM001.TF3ZIPWT[2] cursor, bold;
          end
          if (TF0GM001.TF3ZIPWT[1] >= TF0GM001.TF3ZIPWT[2])
            converseLib.validationFailed(30);
                   /* non-freight weight must be less than freight weight*/
            set TF0GM001.TF3ZIPWT[1] cursor, bold;
          end
        end
      end
    end
  end



end // end TF0GSE3

// edit carrier column
Function TF0GSE4()


         /* edit carrier code*/


  TA1REC.TA1LOCAT[2] = "TF0GSE4";

  if (TFAREC.TFAWSUB1 == 4)
    TFAREC.TFAWSUB2 = 12;
  else
    if (TFAREC.TFAWSUB1 == 3)
      TFAREC.TFAWSUB2 = 9;
    else
      if (TFAREC.TFAWSUB1 == 2)
        TFAREC.TFAWSUB2 = 6;
      else
        if (TFAREC.TFAWSUB1 == 1)
          TFAREC.TFAWSUB2 = 3;
        end
      end
    end
  end

  TFAREC.TFAWCNT1 = 3;

  while (TFAREC.TFAWCNT1 >= 1)

    if (TF0GM001.TF1CARCD[TFAWSUB2] > " ")
      TF1REC.TF1CARCD = TF0GM001.TF1CARCD[TFAWSUB2];
      XSTF1I0(); /* fetch unique destination code*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (TFAREC.TFAWCNT1 == 1)
          if (TF1REC.TF1FCARF == "Y")
            converseLib.validationFailed(31);
               /* carrier code must be a non-freight carrier*/
            set TF0GM001.TF1CARCD[TFAWSUB2] cursor, bold;
          end
        else
          if (TFAREC.TFAWCNT1 == 2)
            if (TF1REC.TF1FCARF == "N")
              converseLib.validationFailed(32);
                 /* carrier code must be a freight carrier*/
              set TF0GM001.TF1CARCD[TFAWSUB2] cursor, bold;
            end
          else
            if (TFAREC.TFAWCNT1 == 3)
              if (TF1REC.TF1FCARF == "N")
                converseLib.validationFailed(32);
                   /* carrier code must be a freight carrier*/
                set TF0GM001.TF1CARCD[TFAWSUB2] cursor, bold;
              end
            end
          end
        end
        TF0GM001.TF1ABRV[TFAWSUB2] = TF1REC.TF1ABRV;
        if (TF0GM001.XWHCD in TF1REC.XWHCD)
           /* next sentence*/
        else
          converseLib.validationFailed(44);
             /* carrier code must be a non-freight carrier*/
          set TF0GM001.TF1CARCD[TFAWSUB2] cursor, bold;
        end
      else
        TF0GM001.TF1ABRV[TFAWSUB2] = " ";
        converseLib.validationFailed(33);
           /* invalid carrier code*/
        set TF0GM001.TF1CARCD[TFAWSUB2] cursor, bold;
      end
    else
      if (TFAREC.TFAWCNT1 == 2)
        TF0GM001.TF1ABRV[TFAWSUB2] = " ";
        converseLib.validationFailed(34);
           /* carrier code required*/
        set TF0GM001.TF1CARCD[TFAWSUB2] cursor, bold;
      else
        if (TFAREC.TFAWCNT1 == 1)
          TF0GM001.TF1ABRV[TFAWSUB2] = " ";
          converseLib.validationFailed(34);
             /* carrier code required*/
          set TF0GM001.TF1CARCD[TFAWSUB2] cursor, bold;
        end
      end
    end

    TFAREC.TFAWCNT1 = TFAREC.TFAWCNT1 - 1;
    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 1;

  end


end // end TF0GSE4
// edit consolidation destination
Function TF0GSE5()


         /* edit consolidation destination*/


  TA1REC.TA1LOCAT[2] = "TF0GSE5";

  if (TF0GM001.TF3DSTCD[TFAWSUB1] == " ")
    TF0GM001.TF0GMABR[TFAWSUB1] = " ";
    converseLib.validationFailed(35);
       /* consolidation destination required*/
    set TF0GM001.TF3DSTCD[TFAWSUB1] cursor, bold;
  else
    TF2REC.TF2DSTCD = TF0GM001.TF3DSTCD[TFAWSUB1];
    XSTF2I0(); /* fetch unique destination code*/
    if (SQLCA.VAGen_SQLCODE == 0)
      TF0GM001.TF0GMABR[TFAWSUB1] = TF2REC.TF2SABRV;
    else
      TF0GM001.TF0GMABR[TFAWSUB1] = " ";
      converseLib.validationFailed(36);
         /* invalid consolidation destination*/
      set TF0GM001.TF3DSTCD[TFAWSUB1] cursor, bold;
    end
  end



end // end TF0GSE5

// edit zip code column
Function TF0GSE6()


         /* edit zip code column*/



  TF0GW01.XXXZIP = TF0GM001.XXXZIP[TFAWSUB1];

  if (TF0GW01.TF0GWZP1 > " "
   && TF0GW01.TF0GWZP2 > " "
   && TF0GW01.TF0GWZP3 > " ")
      /* next sentence*/
  else
    converseLib.validationFailed(37);
       /* 3 consecutive digits are required*/
    set TF0GM001.XXXZIP[TFAWSUB1] cursor, bold;
  end


  if (TF0GM001.TF0GMACT[TFAWSUB1] == "C"
   || TF0GM001.TF0GMACT[TFAWSUB1] == "D")
    if (TF0GM001.XXXZIP[TFAWSUB1] != TF0GW01.TF0GWZIP[TFAWSUB1])
      TF0GM001.XXXZIP[TFAWSUB1] = TF0GW01.TF0GWZIP[TFAWSUB1];
      converseLib.validationFailed(41);
       /* cannot change zip code field on a change*/
      set TF0GM001.XXXZIP[TFAWSUB1] cursor, bold;
    end
  end


end // end TF0GSE6
// edit activity column
Function TF0GSE7()


         /* edit activity column*/


  if (COMMAREA.CADLVL[10] == "Y")
    if (TF0GM001.TF0GMACT[TFAWSUB1] == "A"
     || TF0GM001.TF0GMACT[TFAWSUB1] == "C"
     || TF0GM001.TF0GMACT[TFAWSUB1] == "D"
     || TF0GM001.TF0GMACT[TFAWSUB1] == "-")
        /* next sentence*/
    else
      converseLib.validationFailed(38);
      /* a(add), c(change), d(inactivate), -(delete)*/
                /* are valid entries*/
      set TF0GM001.TF0GMACT[TFAWSUB1] cursor, bold;
    end
  else
    if (TF0GM001.TF0GMACT[TFAWSUB1] == "A"
     || TF0GM001.TF0GMACT[TFAWSUB1] == "C"
     || TF0GM001.TF0GMACT[TFAWSUB1] == "D")
        /* next sentence*/
    else
      converseLib.validationFailed(13);
      /* a(add), c(change), d(inactivate)*/
                /* are valid entries*/
      set TF0GM001.TF0GMACT[TFAWSUB1] cursor, bold;
    end
  end



end // end TF0GSE7

// set fields to normal
Function TF0GSE8()


         /* set fields to normal*/



  if (TF0GM001.TF0GMHED == "MAINTENANCE")
    TFAREC.TFAWSUB1 = 1;
    set TF0GM001.TF0GMNZP cursor;
    set TF0GM001.XWHCD normal;

    while (TFAREC.TFAWSUB1 <= 4)

      set TF0GM001.TF0GMACT[TFAWSUB1] normal;
      set TF0GM001.XXXZIP[TFAWSUB1] normal;
      set TF0GM001.TF3DSTCD[TFAWSUB1] normal;

      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

    end

    TFAREC.TFAWSUB2 = 1;

    while (TFAREC.TFAWSUB2 <= 12)

      set TF0GM001.TF1CARCD[TFAWSUB2] normal;
      set TF0GM001.TF3ZIPWT[TFAWSUB2] normal;
      set TF0GM001.TF2DSTCD[TFAWSUB2] normal;

      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;

    end

    set TF0GM001.TF3ZIPWT[3] skip;
    set TF0GM001.TF3ZIPWT[6] skip;
    set TF0GM001.TF3ZIPWT[9] skip;
    set TF0GM001.TF3ZIPWT[12] skip;

  end



end // end TF0GSE8

// pf7, pf8 ,pf12 and enter
Function TF0GSI0()


         /* pf7, pf8, pf12 and enter*/



  if (TF0GM001.XWHCD == " "
   || TF0GM001.XWHCD != TF0GW01.XWHCD)
    TF0GSO1(); /* set new scrolling table*/
  else
    TF0GSE8(); /* set fields to normal*/
    TF0GSE0(); /* edit screen*/

    if (converseVar.validationMsgNum > 0) /* any errors or warnings*/
         /* next sentence*/
    else
      if (converseVar.eventKey is pf12)
        converseLib.validationFailed(5);
           /* all edits passed - press <enter> to process data*/
      else
        TF0GSU0(); /* update data base*/
        if (converseVar.validationMsgNum == 0 
         || converseVar.validationMsgNum == 9 /* all updates performed*/
         || converseVar.validationMsgNum == 26) /* data base updated by someone else*/
          TF0GSS0(); /* pf7, pf8 and enter*/
        end
      end
    end
  end



end // end TF0GSI0

// get warehouse code a validate
Function TF0GSO1()


         /* get warehouse code and validate*/



  set TF0GM001.XWHCD normal;

  if (TF0GM001.TF0GMACT[1] > " "
   || TF0GM001.TF0GMACT[2] > " "
   || TF0GM001.TF0GMACT[3] > " "
   || TF0GM001.TF0GMACT[4] > " ")
    TF0GM001.XWHCD = TF0GW01.XWHCD;
    converseLib.validationFailed(46);
      /* code can't be changed when updating on screen*/
    set TF0GM001.XWHCD cursor, bold;
  else
    if (TF0GM001.XWHCD <= " "
     || TF0GM001.XWHCD == "99")
      converseLib.validationFailed(11);
        /* invalid warehouse code entered <please re-enter>*/
      TF0GM001.XWHABRV = " ";
      TF0GW01.XWHCD = " ";
      set TF0GM001.XWHCD cursor, bold;
    else
      if (TF0GM001.XWHCD in XWHTBL.XWHCD)
        TF0GW01.TF0GMNZP = TF0GM001.TF0GMNZP;
        TF0GW01.XWHCD = TF0GM001.XWHCD;

        converseLib.clearScreen();
        set TF0GM001 initial;

        XXXCURDT = VGVar.currentShortGregorianDate;
        XXXRVNBR = "01";
        TF0GM001.TF0GMNZP = TF0GW01.TF0GMNZP;
        TF0GM001.XWHCD = TF0GW01.XWHCD;
        TFWREC.XWHCD = TF0GW01.XWHCD;

        TF0GM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
        TF0GSO2(); /* set up scrolling table ;*/
        TF0GSO4(); /* set up screen*/
        TF0GSO7(); /* get description for screen*/
        TF0GSO8(); /* check security for update*/
      else
        converseLib.validationFailed(11);
          /* invalid warehouse code entered <please re-enter>*/
        TF0GM001.XWHABRV = " ";
        TF0GW01.XWHCD = " ";
        set TF0GM001.XWHCD cursor, bold;
      end
    end
  end



end // end TF0GSO1

// set up scrolling table
Function TF0GSO2()


         /* set up scrolling table*/



  TA1REC.TA1LOCAT[2] = "TF0GSO2";
  TF3REC.XWHCD = TF0GM001.XWHCD;
  TF3REC.XXXZIP = " ";

  XSTF3S1(); /* select set and select next tf3rec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      XSTF3S1(); /* try to add record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(029); /* data base in use*/
      /* data base contention <try again>*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (converseVar.validationMsgNum == 7) /* top of table, no more scrooling possible*/
        /* next sentence*/
      else
        converseLib.validationFailed(08);
          /* bottom of table, no more scrolling possible*/
      end
      TF0GM001.TF0GMNZP = " ";
      XSTF3C1(); /* close set*/
    else
      TF0GSO3(); /* set up scrolling table*/
      XSTF3C1(); /* close set*/
      TF0GW01.XWHCD = TF0GM001.XWHCD;
    end
  end



end // end TF0GSO2

// set up scrolling table
Function TF0GSO3()


         /* set up scrolling table*/



  set TF0GW03 empty;

  TA1REC.TA1LOCAT[2] = "TF0GSO3";
  TFAREC.TFAWCNT1 = 5; /* force save of first rec*/
  TFAREC.TFAWSUB1 = 0;

  while (SQLCA.VAGen_SQLCODE != 100)
    /* AND TFAREC.TFAWSUB1 LT 500;     /*commented for TT 10177*/

    if (TFAREC.TFAWCNT1 < 4)
      TFAREC.TFAWCNT1 = TFAREC.TFAWCNT1 + 1;
    else
      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
      TFAREC.TFAWCNT1 = 1;
      TF0GW03.NXTZIP[TFAWSUB1] = TF3REC.XXXZIP;
      TF0GW01.TF0GWHZP = TF3REC.XXXZIP;

    end

    XSTF3F1(); /* select next tf3rec record*/

  end

  if (TF0GM001.TF0GMNZP > TF0GW01.TF0GWHZP)
    TF0GM001.TF0GMNZP = TF0GW01.TF0GWHZP;
  end

   /* The error message will not be displayed any more*/
   /* IF TFAREC.TFAWSUB1 GE 450;           /* Commented for TT 10177*/
   /* MOVE 43 TO EZEMNO;                 /* Commented for TT 10177*/
      /* internal scrolling table over 90% - contact programming*/
   /* END;*/
   /* End of the Statement - TT 10177*/


end // end TF0GSO3

// set up online screen
Function TF0GSO4()


         /* set up online screen*/



  TA1REC.TA1LOCAT[2] = "TF0GSO4";
  TF3REC.XWHCD = TF0GM001.XWHCD;
  TF3REC.XXXZIP = TF0GM001.TF0GMNZP;

  XSTF3S1(); /* select set and select next tf3rec*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      XSTF3S1(); /* try to add record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(29);
      /* data base contention <try again>*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(08);
        /* bottom of table, no more scrolling possible*/
      XSTF3C1(); /* close set*/
    else
      TF0GSO5(); /* set up online screen*/
      XSTF3C1(); /* close set*/
    end
  end



end // end TF0GSO4

// set up scrolling table
Function TF0GSO5()


         /* set up scrolling table*/



  TA1REC.TA1LOCAT[2] = "TF0GSO5";
  TFAREC.TFAWSUB2 = 1;
  TFAREC.TFAWSUB4 = 1;

  while (TFAREC.TFAWSUB2 <= 4)

    TF0GSO6(); /* move data to screen*/

    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;

    XSTF3F1(); /* select next tf3rec record*/

    if (SQLCA.VAGen_SQLCODE == 100)
      set TF3REC empty;
    end

  end


  if (TF0GW01.TF0GMNZP > " " /* check for match on search*/
   && TF0GM001.XXXZIP[1] != TF0GW01.TF0GMNZP) /* no match*/
    if (converseVar.validationMsgNum == 0 /* no messages/errors*/
     || converseVar.validationMsgNum == 7 /* top of table*/
     || converseVar.validationMsgNum == 8) /* bottom of table*/
      converseLib.validationFailed(10); /* warning - exact match not found*/
    end
  end


  if (SQLCA.VAGen_SQLCODE == 100)
    if (converseVar.validationMsgNum == 9)
       /* update successful message*/
       /* next sentence*/
    else
      if (converseVar.validationMsgNum == 7)
         /* top of table, no more scrolling forward possible*/
         /* next sentence*/
      else
        if (converseVar.validationMsgNum != 10) /* warn - exact match not found*/
          converseLib.validationFailed(8);
              /* bottom of table, no more froward scrolling possible*/
        end
      end
    end
    TF0GM001.TF0GMNZP = TF0GM001.XXXZIP[1];
  else
    TF0GM001.TF0GMNZP = TF3REC.XXXZIP;
    TF0GW01.TF0GMNZP = TF3REC.XXXZIP;
  end


end // end TF0GSO5

// move data to screen
Function TF0GSO6()


         /* move data to screen*/



  TF0GM001.TF3DSTCD[TFAWSUB2] = TF3REC.TF3DSTCD;
  TF0GM001.XXXZIP[TFAWSUB2] = TF3REC.XXXZIP;
  TF0GW01.TF0GWZIP[TFAWSUB2] = TF3REC.XXXZIP;
  TF0GM001.XXXSTAT[TFAWSUB2] = TF3REC.XXXSTAT;
  TF0GM001.TF0GMACT[TFAWSUB2] = " ";
  TFAREC.TFAWSUB5 = 1;

  while (TFAREC.TFAWSUB5 <= 3)

    if (TF0GW01.XWHCD == "42") /* CANA warehouse 42*/
      if (TF3REC.TF3ZIPWT[TFAWSUB5] != 9999999) /* CANA*/
        TF0GM001.TF3ZIPWT[TFAWSUB4] = mathLib.round(TF3REC.TF3ZIPWT[TFAWSUB5] / 2.2046, -mathLib.decimals(TF0GM001.TF3ZIPWT[TFAWSUB4])); /* CANA weight in kilos*/
      else /* CANA*/
        TF0GM001.TF3ZIPWT[TFAWSUB4] = TF3REC.TF3ZIPWT[TFAWSUB5];
                                   /* CANA*/
      end /* CANA*/
    else /* CANA*/
      TF0GM001.TF3ZIPWT[TFAWSUB4] = TF3REC.TF3ZIPWT[TFAWSUB5]; /* CANA*/
    end /* CANA*/
    TF0GM001.TF1CARCD[TFAWSUB4] = TF3REC.TF1CARCD[TFAWSUB5];
    TF0GM001.TF2DSTCD[TFAWSUB4] = TF3REC.TF2DSTCD[TFAWSUB5];

    TFAREC.TFAWSUB5 = TFAREC.TFAWSUB5 + 1;
    TFAREC.TFAWSUB4 = TFAREC.TFAWSUB4 + 1;

  end


  TF0GW01.TF0GMNZP = TF0GM001.TF0GMNZP;


end // end TF0GSO6
// get screen descrip & defaults
Function TF0GSO7()


         /* get screen descriptions and defaults*/



  TA1REC.TA1LOCAT[2] = "TF0GSO7";
  TF0GSE1(); /* set up defaults on screen*/

  TFAREC.TFAWSUB1 = 1;

  while (TFAREC.TFAWSUB1 <= 12)

    if (TF0GM001.TF2DSTCD[TFAWSUB1] == " ")
      TF0GM001.TF2SABRV[TFAWSUB1] = " ";
    else
      TF2REC.TF2DSTCD = TF0GM001.TF2DSTCD[TFAWSUB1];
      XSTF2I0(); /* fetch unique destination record*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TF0GM001.TF2SABRV[TFAWSUB1] = TF2REC.TF2SABRV;
      else
        TF0GM001.TF2SABRV[TFAWSUB1] = " ";
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

  end

  TFAREC.TFAWSUB1 = 1;

  while (TFAREC.TFAWSUB1 <= 4)

    if (TF0GM001.TF3DSTCD[TFAWSUB1] == " ")
      TF0GM001.TF0GMABR[TFAWSUB1] = " ";
    else
      TF2REC.TF2DSTCD = TF0GM001.TF3DSTCD[TFAWSUB1];
      XSTF2I0(); /* fetch unique destination recrord*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TF0GM001.TF0GMABR[TFAWSUB1] = TF2REC.TF2SABRV;
      else
        TF0GM001.TF0GMABR[TFAWSUB1] = " ";
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

  end

  TFAREC.TFAWSUB1 = 1;

  while (TFAREC.TFAWSUB1 <= 12)

    if (TF0GM001.TF1CARCD[TFAWSUB1] == " ")
      TF0GM001.TF1ABRV[TFAWSUB1] = " ";
    else
      TF1REC.TF1CARCD = TF0GM001.TF1CARCD[TFAWSUB1];
      XSTF1I0(); /* fetch unique carrier descrption*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TF0GM001.TF1ABRV[TFAWSUB1] = TF1REC.TF1ABRV;
      else
        TF0GM001.TF1ABRV[TFAWSUB1] = " ";
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

  end



end // end TF0GSO7

// check inquiry or maintenance
Function TF0GSO8()




         /* check if inquiry or maintenance mode*/



  if (COMMAREA.CAADDFL == "N"
   || TFWREC.TFWUPDFL == "N")
    TF0GM001.TF0GMHED = "INQUIRY";
    set TF0GM001.TF0GMAHD skip, invisible;
    set TF0GM001.TF0GMALG skip, invisible;
    TFAREC.TFAWSUB1 = 1;
    while (TFAREC.TFAWSUB1 <= 12)

      if (TFAREC.TFAWSUB1 <= 4)
        set TF0GM001.XXXZIP[TFAWSUB1] skip;
        set TF0GM001.TF0GMACT[TFAWSUB1] skip, invisible;
        set TF0GM001.TF3DSTCD[TFAWSUB1] skip;
      end

      set TF0GM001.TF2DSTCD[TFAWSUB1] skip;
      set TF0GM001.TF1CARCD[TFAWSUB1] skip;
      set TF0GM001.TF3ZIPWT[TFAWSUB1] skip;

      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

    end
    if (TFWREC.TFWUPDFL == "Y")
      converseLib.validationFailed(24);
         /* not authorized for update - inquiry assumed*/
    end
  else
    TF0GM001.TF0GMHED = "MAINTENANCE";
    set TF0GM001.TF0GMAHD skip;
    set TF0GM001.TF0GMALG skip;
    TFAREC.TFAWSUB1 = 1;
    while (TFAREC.TFAWSUB1 <= 12)

      if (TFAREC.TFAWSUB1 <= 4)
        set TF0GM001.XXXZIP[TFAWSUB1] normal;
        set TF0GM001.TF0GMACT[TFAWSUB1] normal;
        set TF0GM001.TF3DSTCD[TFAWSUB1] normal;
      end

      set TF0GM001.TF2DSTCD[TFAWSUB1] normal;
      set TF0GM001.TF1CARCD[TFAWSUB1] normal;
      set TF0GM001.TF3ZIPWT[TFAWSUB1] normal;

      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;

    end

  end

  set TF0GM001.TF3ZIPWT[3] skip;
  set TF0GM001.TF3ZIPWT[6] skip;
  set TF0GM001.TF3ZIPWT[9] skip;
  set TF0GM001.TF3ZIPWT[12] skip;


end // end TF0GSO8

// do paging of screen data
Function TF0GSS0()


         /* do paging of screen data*/




  if (TF0GM001.TF0GMNZP != TF0GW01.TF0GMNZP)
       /* next sentence*/
  else
    if (converseVar.validationMsgNum == 9 /* all updates successful*/
     && TF0GW01.TF0GWZHD > " ")          
      TF0GM001.TF0GMNZP = TF0GW01.TF0GWZHD;
      TF0GW01.TF0GWZHD = " ";
    else
      if (converseVar.eventKey is pf7)
        TF0GSS1(); /* set tfarec.tfawsub3 to proper place*/
                                   /* in scrolling table*/
      else
        if (TF0GW01.TF0GWFLG == "UPDATE DONE, NO SCROLLING ON ENTER KEY"
         && converseVar.eventKey is enter)
          TF0GM001.TF0GMNZP = TF0GW01.TF0GWZIP[1];
        end
      end
    end
  end

  TF0GW01.TF0GWFLG = " ";

  if (TF0GM001.TF0GMNZP > TF0GW01.TF0GWHZP)
    TF0GM001.TF0GMNZP = TF0GW01.TF0GWHZP;
  end


  if (converseVar.validationMsgNum == 0 
   || converseVar.validationMsgNum == 9 /* all updates successful*/
   || converseVar.validationMsgNum == 7 /* top of table, no more backward scrolling possible*/
   || converseVar.validationMsgNum == 26) /* record not found for update*/
    if (TF0GW01.TF0GWUPD == "ADD OR PHYSICAL DELETE TAKEN PLACE")
      TF0GW01.TF0GWUPD = " ";
      TF0GSO2(); /* rebuild scrolling table*/
    end
    TF0GSO4(); /* rebuild online screen*/
    TF0GSO7(); /* online screen descriptions*/
  end



end // end TF0GSS0

// set tfawsub3 to proper place
Function TF0GSS1()



         /* set up tfarec.tfawsub3 to proper index when next zip*/
         /* is changed.*/


  TFAREC.TFAWSUB1 = 1;
  TFAREC.TFAWSUB3 = 1;

  while (TFAREC.TFAWSUB3 <= 500)

    if (TF0GM001.XXXZIP[1] == TF0GW03.NXTZIP[TFAWSUB1])
      if (TFAREC.TFAWSUB1 > 1)
        TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;
      else
        if (converseVar.validationMsgNum == 9)
           /* update successful message*/
           /* next sentence*/
        else
          converseLib.validationFailed(7);
            /* top of table, no more backward scrolling possible*/
        end
      end
      if (TF0GM001.XXXZIP[1] == " ")
          /* next sentence*/
      else
        TF0GM001.TF0GMNZP = TF0GW03.NXTZIP[TFAWSUB1];
      end
      TFAREC.TFAWSUB3 = 501;
    else
      if (TF0GM001.XXXZIP[1] > TF0GW03.NXTZIP[TFAWSUB1])
          /* next sentence*/
      else
        TFAREC.TFAWSUB3 = 501;
        if (TFAREC.TFAWSUB1 > 1)
          TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;
        else
          if (converseVar.validationMsgNum == 9)
             /* update successful message*/
             /* next sentence*/
          else
            converseLib.validationFailed(7);
              /* top of table, no more backward scrolling possible*/
          end
        end
        if (TF0GM001.XXXZIP[1] == " ")
            /* next sentence*/
        else
          TF0GM001.TF0GMNZP = TF0GW03.NXTZIP[TFAWSUB1];
        end
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
    TFAREC.TFAWSUB3 = TFAREC.TFAWSUB3 + 1;

  end


end // end TF0GSS1

// update data base
Function TF0GSU0()


         /* update zip/carrier/destination data base*/



  TFAREC.TFAWSUB1 = 4;
  TFAREC.TFAWSUB2 = 12;
  TFCREC.TFCTBLNM = "VZIPCD01";
  TF0GW01.TF0GWZHD = " "; /* keep for scrl*/

  TF0GSU1(); /* get date and time stamp*/

  TFCREC.ZZZSDT = TA2REC.TA2GRGGN;
  TFCREC.ZZHHMMSS = TA2REC.TA2TIMEN;

  while (TFAREC.TFAWSUB1 >= 1)

    if (TF0GM001.TF0GMACT[TFAWSUB1] == " ")
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 3;
    else
      if (TF0GM001.TF0GMACT[TFAWSUB1] == "A")
        if (TF0GM001.XXXZIP[TFAWSUB1] == TF0GW01.TF0GWZIP[TFAWSUB1]
         && TF0GM001.XXXSTAT[TFAWSUB1] == "I")
          TF0GSU2(); /* data base change*/
        else
          TF0GSU5(); /* data base add*/
        end
        TF0GW01.TF0GWZHD = TF0GM001.XXXZIP[TFAWSUB1]; /* keep for scrl*/
      else
        if (TF0GM001.TF0GMACT[TFAWSUB1] == "C")
          TF0GSU2(); /* change to data base*/
        else
          if (TF0GM001.TF0GMACT[TFAWSUB1] == "-")
            TF0GSU7(); /* check delete for inactive delete or physical*/
          else
            if (TF0GM001.TF0GMACT[TFAWSUB1] == "D")
              TF0GSU8(); /* check delete for inactive delete or physical*/
              if (TF3REC.ZZZCHGDT < TF0GW01.TF0GWDTE)
                TF0GSU7(); /* physical delete*/
              else
                TF0GSU2(); /* data base change*/
              end
            else
              TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 3;
            end
          end
        end
      end
    end

    if (TF0GM001.TF0GMACT[TFAWSUB1] > " ")
      if (converseVar.validationMsgNum == 0
       || converseVar.validationMsgNum == 26) /* database has changed*/
        TF0GW01.TF0GWFLG = "UPDATE DONE, NO SCROLLING ON ENTER KEY";
        TF0GM001.TF0GMACT[TFAWSUB1] = " ";
        if (converseVar.validationMsgNum == 26) /* database has changed*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback();
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.commit();
          converseLib.validationFailed(9);
            /* all updates successfully performed - please continue*/
        end
      end
    end

    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 - 1;

  end



end // end TF0GSU0

// get time and date stamp
Function TF0GSU1()



      /* get time and date stamp*/



  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  TF0GW01.TF0GWDTE = TA2REC.TA2GRGGN;


  set TA2REC empty;
  TA2REC.TA2GRGGN = TF0GW01.TF0GWDTE;
  TA2REC.TA2DYAOD = -182;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  TF0GW01.TF0GWDTE = TA2REC.TA2GRGGN;


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

end // end TF0GSU1

// change to data base
Function TF0GSU2()



         /* change tf3rec in data base*/



  set TF3REC empty;
  TA1REC.TA1LOCAT[2] = "TF0GSD2";
  TFCREC.TFCACTIN = TF0GM001.TF0GMACT[TFAWSUB1];
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";
  TF3REC.XWHCD = TF0GM001.XWHCD;
  TF3REC.XXXZIP = TF0GM001.XXXZIP[TFAWSUB1];

  XSTF3I0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TFCREC.TF-AUD-BFR-LEN = 338;
    TFCREC.TF-AUD-BFR-TEXT = TF3REC.TF3GRPLV;

    if (TF0GM001.TF0GMACT[TFAWSUB1] == "A")
      TF3REC.XXXSTAT = "A";
    else
      if (TF0GM001.TF0GMACT[TFAWSUB1] == "D")
        TF3REC.XXXSTAT = "I";
      end
    end

    TF0GSU3(); /* move row on scren to record*/

    TF3REC.ZZZCHGDT = TA2REC.TA2GRGGN;
    TF3REC.ZZZCHGTM = TA2REC.TA2TIMHM;

    XSTF3R0(); /* update row on data base*/

    if (SQLCA.VAGen_SQLCODE == 0)
      TFCREC.TF-AUD-AFT-LEN = 338;
      TFCREC.TF-AUD-AFT-TEXT = TF3REC.TF3GRPLV;
      TF0GSU4(); /* write row to audit*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
        converseLib.validationFailed(39);
         /* needs message*/
         /* duplicate record*/
      else
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          XSTF3I0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        SQLCA.VAGen_SQLCODE = -911;
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(26);
         /* data base has been changed*/
      TF0GW01.TF0GWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          XSTF3I0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  end


end // end TF0GSU2

// move data from scrn to record
Function TF0GSU3()


         /* move data from screen to tf3rec record*/



  TF3REC.XWHCD = TF0GM001.XWHCD;
  TF3REC.TF3DSTCD = TF0GM001.TF3DSTCD[TFAWSUB1];
  TF3REC.XXXZIP = TF0GM001.XXXZIP[TFAWSUB1];
  TFAREC.TFAWSUB5 = 3;

  while (TFAREC.TFAWSUB5 >= 1)

    if (TF0GW01.XWHCD == "42") /* CANA warehouse 42*/
      if (TF0GM001.TF3ZIPWT[TFAWSUB2] != 9999999) /* CANA*/
        TF3REC.TF3ZIPWT[TFAWSUB5] = mathLib.round(TF0GM001.TF3ZIPWT[TFAWSUB2] * 2.2046, -mathLib.decimals(TF3REC.TF3ZIPWT[TFAWSUB5])); /* CANA weight in pounds*/
      else /* CANA*/
        TF3REC.TF3ZIPWT[TFAWSUB5] = TF0GM001.TF3ZIPWT[TFAWSUB2];
      end /* CANA*/
    else /* CANA*/
      TF3REC.TF3ZIPWT[TFAWSUB5] = TF0GM001.TF3ZIPWT[TFAWSUB2]; /* CANA*/
    end /* CANA*/

    TF3REC.TF1CARCD[TFAWSUB5] = TF0GM001.TF1CARCD[TFAWSUB2];

    if (TF0GM001.TF2DSTCD[TFAWSUB2] == TF0GM001.TF3DSTCD[TFAWSUB1])
      TF3REC.TF2DSTCD[TFAWSUB5] = " ";
    else
      TF3REC.TF2DSTCD[TFAWSUB5] = TF0GM001.TF2DSTCD[TFAWSUB2];
    end

    TFAREC.TFAWSUB5 = TFAREC.TFAWSUB5 - 1;
    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 1;

  end

  if (TF0GW01.XWHCD == "42") /* CANA warehouse 42*/
    if (TF0GM001.TF3ZIPWT[TFAWSUB1] != 9999999) /* CANA*/
      TF0GW01.TF0GPNDWT = mathLib.round(TF0GM001.TF3ZIPWT[TFAWSUB1] * 2.2046, -mathLib.decimals(TF0GW01.TF0GPNDWT)); /* CANA weight in pounds*/
    end /* CANA*/
  end /* CANA*/

  if (TF0GW01.XWHCD == "42") /* CANA warehouse 42*/
    if (TF0GM001.TF3ZIPWT[TFAWSUB1] != 9999999) /* CANA*/
      if (TF0GW01.TF0GPNDWT == PKDREC.PKDMXWLM) /* CANA weight in pounds*/
        TF3REC.TF3ZIPWT[1] = 0; /* CANA*/
      end /* CANA*/
    else /* CANA*/
      if (TF0GM001.TF3ZIPWT[TFAWSUB1] == PKDREC.PKDMXWLM) /* CANA*/
        TF3REC.TF3ZIPWT[1] = 0; /* CANA*/
      end /* CANA*/
    end /* CANA*/
  else /* CANA*/
    if (TF0GM001.TF3ZIPWT[TFAWSUB1] == PKDREC.PKDMXWLM)
      TF3REC.TF3ZIPWT[1] = 0;
    end
  end


end // end TF0GSU3

// add audit record to data base
Function TF0GSU4()



         /* add tfcrec (audit record) to data base*/




  TA1REC.TA1LOCAT[2] = "TF0GSU4";

  XSTFCA0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TFAREC.TFAWCNT5 = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && TFAREC.TFAWCNT5 <= 2)
        XSTFCA0(); /* try to add record*/
        TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(29);
           /* data base contention <try again>*/
      end
    end
  end



end // end TF0GSU4

// add to data base
Function TF0GSU5()


         /* add tf3rec to data base*/



  set TF3REC empty;
  TA1REC.TA1LOCAT[2] = "TF0GSU5";
  TF0GW01.TF0GWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
  TF3REC.ZZZSDT = TA2REC.TA2GRGGN;
  TF3REC.ZZZCHGDT = TA2REC.TA2GRGGN;
  TF3REC.ZZZCHGTM = TA2REC.TA2TIMHM;
  TF3REC.XXXSTAT = "A";
  TFCREC.TFCACTIN = TF0GM001.TF0GMACT[TFAWSUB1];
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";

  TF0GSU3(); /* move row on screen to record*/

  XSTF3A0(); /* add row to data base*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TFCREC.TF-AUD-AFT-LEN = 338;
    TFCREC.TF-AUD-AFT-TEXT = TF3REC.TF3GRPLV;
    TF0GSU4(); /* write row to audit*/
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(39);
       /* needs message*/
       /* duplicate record*/
      set TF0GM001.TF0GMACT[TFAWSUB1] cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          XSTF3A0(); /* try to add record*/
          TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(029); /* data base in use*/
            /* data base in use, try again*/
        end
      end
    end
  end



end // end TF0GSU5

// physical delete from data base
Function TF0GSU7()


         /* physical delete from data base*/



  set TF3REC empty;
  TA1REC.TA1LOCAT[2] = "TF0GSD4";
  TF0GW01.TF0GWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
  TFCREC.TFCACTIN = "D";
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = " ";
  TF3REC.XWHCD = TF0GM001.XWHCD;
  TF3REC.XXXZIP = TF0GM001.XXXZIP[TFAWSUB1];

  XSTF3I0(); /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    TFCREC.TF-AUD-BFR-LEN = 338;
    TFCREC.TF-AUD-BFR-TEXT = TF3REC.TF3GRPLV;

    XSTF3D0(); /* delete row on data base*/

    if (SQLCA.VAGen_SQLCODE == 0)
      TFCREC.TF-AUD-AFT-LEN = 338;
      TFCREC.TF-AUD-AFT-TEXT = " ";
      TF0GSU4(); /* write row to audit*/
    else
      if (SQLCA.VAGen_SQLCODE == -803)
         /* needs message*/
         /* duplicate record*/
        converseLib.validationFailed(39);
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          TFAREC.TFAWCNT5 = 1;
          while (SQLCA.VAGen_SQLCODE == -911
           && TFAREC.TFAWCNT5 <= 2)
            XSTF3I0(); /* try to add record*/
            TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
          end
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(29);
               /* data base contention <try again>*/
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(26);
         /* data base has been changed*/
      TF0GW01.TF0GWUPD = "ADD OR PHYSICAL DELETE TAKEN PLACE";
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        TFAREC.TFAWCNT5 = 1;
        while (SQLCA.VAGen_SQLCODE == -911
         && TFAREC.TFAWCNT5 <= 2)
          XSTF3I0(); /* try to add record*/
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(29);
             /* data base contention <try again>*/
        end
      end
    end
  end



end // end TF0GSU7

// inactivate from data base
Function TF0GSU8()


         /* inactivate from data base*/



  TA1REC.TA1LOCAT[2] = "TF0GSU8";
  TF3REC.XWHCD = TF0GM001.XWHCD;
  TF3REC.XXXZIP = TF0GM001.XXXZIP[TFAWSUB1];

  XSTF3I0(); /* select row*/

  if (converseVar.validationMsgNum == 100)
       /* this record has already been deleted*/
    converseLib.validationFailed(23);
    set TF0GM001.TF0GMACT[TFAWSUB1] cursor, bold;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      TFAREC.TFAWCNT5 = 1;
      while (SQLCA.VAGen_SQLCODE == -911
       && TFAREC.TFAWCNT5 <= 2)
        XSTF3I0(); /* try to add record*/
        TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(29);
           /* data base contention <try again>*/
      end
    end
  end


end // end TF0GSU8

// inquiry : carrier code : 0
Function XSTF1I0()


   /* ************************************************************/
   /* *** select unique row from:  carrier code               ****/
   /* *** using the std module:  IO0860                       ****/
   /* *** note: can select only                               ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO0860" ("S ", SQLCA, TF1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSTF1I0 ";
  TA1REC.TA1LOCAT[1] = "IO0860  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VCARR001";
  TA1REC.TA1TBLKE = TF1REC.TF1KEYS;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF1I0

// add : location : 0
Function XSTF3A0()


   /* ************************************************************/
   /* *** add unique row in: destination table                ****/
   /* *** using the std i/o processing version #0             ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all row/rec moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -803 = adding duplicate row - setup dupl row msg  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row for inquiry                       ****/
   /* *** note: 0 return code results in the -803             ****/
   /* ************************************************************/

  call "IO1640" ("S ", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF3A0 ";
    TA1REC.TA1LOCAT[1] = "IO1640  ";
    TA1REC.TA1LOCAT[3] = "ADD     ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VZIPCD01";
    TA1REC.TA1TBLKE = TF3REC.TF3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** insert row                                          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  call "IO1640" ("A ", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== add row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF3A0 ";
  TA1REC.TA1LOCAT[1] = "IO1240  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZIPCD01";
  TA1REC.TA1TBLKE = TF3REC.TF3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSTF3A0

// close : location : 0
Function XSTF3C1()


   /* ************************************************************/
   /* *** close select set of: destination table              ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -501 = cursor already closed - return 0           ****/
   /* ***   -507 = should be used if native sql is used       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1640" ("C1", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== close select set*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF3C0 ";
  TA1REC.TA1LOCAT[1] = "IO1640  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZIPCD01";
  TA1REC.TA1TBLKE = TF3REC.TF3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF3C1

// delete : location : 0
Function XSTF3D0()


   /* ************************************************************/
   /* *** delete unique row in: destination table             ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete unique row                                   ****/
   /* ************************************************************/

  call "IO1640" ("D ", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/


  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF3D0 ";
  TA1REC.TA1LOCAT[1] = "IO1640  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZIPCD01";
  TA1REC.TA1TBLKE = TF3REC.TF3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF3D0

// fetch : location : 0
Function XSTF3F1()


   /* ************************************************************/
   /* *** fetch next row from: destination table              ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: +100 - not found was detected as part of the  ****/
   /* ***       select set previously executed                ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = EOF                                        ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "IO1640" ("N1", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select next row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF3F0 ";
  TA1REC.TA1LOCAT[1] = "IO1640  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZIPCD01";
  TA1REC.TA1TBLKE = TF3REC.TF3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF3F1

// inquiry : location : 0
Function XSTF3I0()


   /* ************************************************************/
   /* *** select unique row from: destination table           ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: second fetch used to detect duplicate rows    ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select row with unique key                          ****/
   /* ************************************************************/

  call "IO1640" ("S ", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique*/

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811) /* duplicate*/
    XSTF3S1();
    XSTF3C1();
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF3I0 ";
    TA1REC.TA1LOCAT[1] = "IO1640  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VZIPCD01";
    TA1REC.TA1TBLKE = TF3REC.TF3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF3I0

// replace : location : 0
Function XSTF3R0()


   /* ************************************************************/
   /* *** replace unique row in: destination table            ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments zzzchgct by +1 and uses ****/
   /* ***       current data & time for zzzchgdt & zzzchgtm   ****/
   /* ************************************************************/

  call "IO1640" ("U ", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF3R0 ";
  TA1REC.TA1LOCAT[1] = "IO1640  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZIPCD01";
  TA1REC.TA1TBLKE = TF3REC.TF3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF3R0

// setinq : location : 0
Function XSTF3S1()


   /* ************************************************************/
   /* *** select set of rows from: destination table          ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: +100 - not found can't be detected until the  ****/
   /* ***       first fetch is executed                       ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = none found - setup not fnd error/msg       ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique key                          ****/
   /* ************************************************************/

  call "IO1640" ("S1", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select set row*/

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF3S0 ";
    TA1REC.TA1LOCAT[1] = "IO1640  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VZIPCD01";
    TA1REC.TA1TBLKE = TF3REC.TF3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* ************************************************************/

  call "IO1640" ("N1", SQLCA, TF3REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select set row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF2S0 ";
  TA1REC.TA1LOCAT[1] = "IO1640  ";
  TA1REC.TA1LOCAT[3] = "FIRST   ";
  TA1REC.TA1LOCAT[4] = "FETCH   ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VZIPCD01";
  TA1REC.TA1TBLKE = TF3REC.TF3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF3S1
//*** RECORD=TF0GW01 ****
// allocation working storage.
// this area is the working storage unique to
// application AL0A for rule set selection for batch processing
// ***********************
Record TF0GW01 type basicRecord
  5 TF0GWGRP TF0GWGRP ; 
    10 TF0GMNZP TF0GMNZP ; 
    10 TF0GWUPD TF0GWUPD ; 
    10 TF0GWFLG TF0GWFLG ; 
    10 TF0GWFST TF0GWFST ; 
    10 XXXZIP XXXZIP ; 
      15 TF0GWZP1 TF0GWZP1 ; 
      15 TF0GWZP2 TF0GWZP2 ; 
      15 TF0GWZP3 TF0GWZP3 ; 
      15 * char(7) ; 
    10 TF0GWHZP TF0GWHZP ; 
    10 XWHCD XWHCD ; 
    10 TF0GWDTE TF0GWDTE ; 
    10 TF0GWZIP TF0GWZIP [4] ; 
    10 TF0GWZHD TF0GWZHD ; 
    10 TF0GPNDWT TF0GPNDWT ; 
end // end TF0GW01

//*** RECORD=TF0GW03 ****
// CLONED TF0GW02 WITH ZIP CODE LENTH 5
// ***********************
Record TF0GW03 type basicRecord
  5 TF0GW03G TF0GW03G ; 
    10 NXTZIP NXTZIP [6540] ; 
end // end TF0GW03

// XXX_ZIP
DataItem NXTZIP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next zip to go to
DataItem TF0GMNZP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF0GPNDWT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TF0GW03G char(32700)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date hold area
DataItem TF0GWDTE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add or delete flag
DataItem TF0GWFLG char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first converse flag
DataItem TF0GWFST char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Group Level of Record
DataItem TF0GWGRP char(203)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// highest zip code hold area
DataItem TF0GWHZP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// add or delete flag
DataItem TF0GWUPD char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// added zip code hold for scroll
DataItem TF0GWZHD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zip code
DataItem TF0GWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first digit of zip code
DataItem TF0GWZP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second digit of zip code
DataItem TF0GWZP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// third digit of zip code
DataItem TF0GWZP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

