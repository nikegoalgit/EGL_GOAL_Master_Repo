package tf0f;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import ku.common.*;
import ta.common.*;
import tf.common.*;
//*** PROGRAM=TF0F ****
// ************************************************************
// * applid:    tf0f    destination table inquiry/update
// *                    this application provides inquiry/
// *                    update capabilities for the traffic
// *                    destination table.  this application
// *                    may be fast pathed to from anywhere in
// *                    the goal system.  front end security
// *                    is set up base on userid options.
// *                    all changes are logged to the traffic
// *                    audit table.
// *
// *
// ************************************************************
// * maint log
// *  when      who     what
// *-------- -------- -----------------------------------------
// *02/02/87  snoble  original creation of prototype
// *07/02/87  rconno  original creation of program
// *09/18/87  snoble  walkthru corrections/review enhancements
// *05/30/89  jwood   added xssegtr logic, noncsp option usage
// *03/04/91  rvakel  table changes:  regenned to pick up the
// *                  new TFAREC.
// *04/05/94  Ryonke  Convert TFCREC fields to varchar logic.
// *03/02/98  dbettr  Y2KFIX regenerated to pick up latest
// *                  version of XX0XS01 date routine
// ************************************************************
// *********************
Program TF0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TF0FW01 TF0FW01; // record
  TF2REC TF2REC; // record
  TFAREC TFAREC; // record
  TFCREC TFCREC; // record
  TFWREC TFWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TF0FM.TF0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TF0F010: TF0F010();
  end // end main
end // end TF0F

// program control
Function TF0F010()



      /* *********************************************************/
      /* *                                                      **/
      /* * this process controls entire program process control **/
      /* * transfer to other applications occurs in converse    **/
      /* * if security is passed flow will aways go to tf0f100  **/
      /* * then tf0f200.                                        **/
      /* *                                                      **/
      /* * the following statement groups are used here:        **/
      /* *     xsentry - to validate logon procedure            **/
      /* *     xstfs01 - to validate traffic security           **/
      /* *                                                      **/
      /* * tfarec.tfapfl1 is always set to 'n'o.                **/
      /* *                                                      **/
      /* *********************************************************/


   /* *************************************************************/
  XSENTRY(); /* check security*/
   /* *************************************************************/

   /* *************************************************************/
  XSSEGTR(); /* set segmented transaction id*/
   /* *************************************************************/

   /* *************************************************************/
  XSTFS01(); /* check traffic security*/
   /* *************************************************************/


   /* *************************************************************/
  TF0F100(); /* init pgm areas*/
   /* *************************************************************/


      /* control pgm converse*/

  TFAREC.TFAPFL1 = "N";
  while (TFAREC.TFAPFL1 == "N")

    TF0F200(); /* converse traffic main menu*/

  end



   /* *************************************************************/
end // end TF0F010

// program initialization
Function TF0F100()



      /* *********************************************************/
      /* * this statement group is used to intialize the        **/
      /* * working storage and map for the traffic destination  **/
      /* * inquery/maintenance                                  **/
      /* *********************************************************/



  set TFAREC empty; /* intialize working storage*/
  set TFCREC empty;
  set TFWREC empty;
  set TA1REC empty;
  set SQLCA empty;
  set TF0FW01 empty;
  VGVar.handleHardIOErrors = 1; /* allows program to check for hard errors*/
  converseVar.commitOnConverse = 1; /* auto commit on every map converse*/
  TFAREC.TFAWBOT = "N"; /* bottom of destination array flag*/

  XX0XS01(); /* intialize date and time*/

  TF0FS25(); /* intialize top of screen array*/

  if (TFAREC.TFAWSUB2 > 90)
    converseLib.validationFailed(020); /* warning - array is getting full*/
  end

                   /* init tf0fm001 destination table map*/

  converseLib.clearScreen();
  set TF0FM001 initial;
  TF0FM001.XXXCURDT = VGVar.currentShortGregorianDate;
  TF0FM001.XXXRVNBR = "01";

  TFWREC.TFWGRPLV = COMMAREA.CAUSERA;

  if (COMMAREA.CAADDFL == "Y" /* updates allowed*/
   || COMMAREA.CADLVL[10] == "Y") /* updates allowed*/
    if (TFWREC.TFWUPDFL == "Y")
      TF0FM001.TF0FMODE = "MAINTENANCE";
    else
      set TF0FM001.TF0FMACT skip, invisible; /* act heading*/
      set TF0FM001.TF0FMALG skip, invisible; /* act legend*/
      TFAREC.TFAWSUB1 = 1;
      while (TFAREC.TFAWSUB1 <= 16)
        set TF0FM001.TF0FMOPT[TFAWSUB1] skip, invisible;
        set TF0FM001.TF2DSTCD[TFAWSUB1] skip;
        set TF0FM001.TF2DSTNM[TFAWSUB1] skip;
        set TF0FM001.TF2SABRV[TFAWSUB1] skip;
        set TF0FM001.XXXSTAT[TFAWSUB1] skip;
        TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
      end
    end
  else
    if (TFWREC.TFWUPDFL == "Y")
      converseLib.validationFailed(024); /* updates not allowed*/
    end
    TFAREC.TFAWSUB1 = 1;
    while (TFAREC.TFAWSUB1 <= 16)
      set TF0FM001.TF0FMOPT[TFAWSUB1] skip, invisible;
      set TF0FM001.TF2DSTCD[TFAWSUB1] skip;
      set TF0FM001.TF2DSTNM[TFAWSUB1] skip;
      set TF0FM001.TF2SABRV[TFAWSUB1] skip;
      set TF0FM001.XXXSTAT[TFAWSUB1] skip;
      TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
    end
    set TF0FM001.TF0FMACT skip, invisible; /* act heading*/
    set TF0FM001.TF0FMALG skip, invisible; /* act legend*/
  end

  set TF2REC empty;

  TA1REC.TA1LOCAT[2] = "TF0FS24";
  TA1REC.TA1MAP = "TF0FM001";

  TF0FM001.TF0FMCD = COMMAREA.CAITEM;
  XSTF2C0();
  XSTF2S0(); /* start the ss on the tf2rec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    TF0FS38(); /* scrolling control*/
  else
    TFAREC.TFAWBOT = "Y"; /* bottom of destination array flag*/
  end



   /* ************************************************************/
end // end TF0F100

// process map
Function TF0F200()



      /* *********************************************************/
      /* *                                                      **/
      /* * this process controls the converse and processing of **/
      /* * the destination table map. fast path is allowed from **/
      /* * this screen. PFKEYS allowed are:                     **/
      /* *                                                      **/
      /* *          1 - USE THE STATEMENT GROUP XSPF1           **/
      /* *          3 - TRANSFER CONTROL TO TF0A MAIN MENU,     **/
      /* *              EXIT WITHOUT UPDATING DBASE             **/
      /* *          4 - USE THE STATEMENT GROUP XSPF4           **/
      /* *          7 - DISPLAY THE PREVIOUS SCREEN OF          **/
      /* *              DESTINATION TABLE ENTRIES, PERFORM      **/
      /* *              ANY UPDATES SPECIFIED ON THE SCREEN     **/
      /* *          8 - DISPLAY THE NEXT SCREEN OF              **/
      /* *              DESTINATION TABLE ENTRIES, PERFORM      **/
      /* *              ANY UPDATES SPECIFIED ON THE SCREEN     **/
      /* *         12 - EDIT THE INPUT DATA. NO UPDATING        **/
      /* *                                                      **/
      /* *      ENTER - UPDATE CURRENT LINE(S) UPTO FIRST       **/
      /* *              (IF ANY) ERROR. IF NO CHANGES (OR       **/
      /* *              INQUIRY MODE) THEN SIMULATE PF8.        **/
      /* *                                                      **/
      /* *        PA2 - CANCEL TRANSACTION. RETURN THE SCREEN   **/
      /* *              WITH THE ORGINAL DATA ON IT.            **/
      /* *********************************************************/



  TF0FM001.CAITEM = COMMAREA.CAITEM;
  SQLCA.VAGen_SQLCODE = 0; /* reset prev sql code*/


   /* ************************************************************/
  converse TF0FM001 ;
   /* ************************************************************/


  TF0FS10(); /* main map edits*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  TF0FS20(); /* destination map edits*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  if (converseVar.eventKey is pf12)
    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(005); /* edits ok - press enter*/
    end
    return;
  end

  TF0F210(); /* control for tf2rec update*/



   /* ************************************************************/
end // end TF0F200

// control for tf0fm001
Function TF0F210()



      /* *********************************************************/
      /* * this process is used to handle any adds, changes     **/
      /* * deletes or updates to the tf2rec, along with any     **/
      /* * scrolling of the distination screen                  **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "TF0F210";
  TA1REC.TA1MAP = "TF0FM00";
  TFAREC.TFAWOKFL = "N";
  TFAREC.TFAPFL4 = "N"; /* set rec add/chg flag off*/
  TFAREC.TFAPFL5 = "N"; /* set first add found flag off*/

   /* *************************************************************/
         /* check for 'a'dd option*/
   /* *************************************************************/

  if ("A" in TF0FM001.TF0FMOPT)
    TFAREC.TFAWSUB2 = sysVar.arrayIndex;

    while (TFAREC.TFAWSUB2 <= 16
     && converseVar.validationMsgNum == 0
     && SQLCA.VAGen_SQLCODE == 0)
      if (TF0FM001.TF0FMOPT[TFAWSUB2] == "A")
        TF0FS30(); /* try to add a record*/
        TF0FS42(); /* determine if commit*/
        if (TFAREC.TFAPFL5 == "N" /* first add off*/
         && SQLCA.VAGen_SQLCODE == 0) /* no db2 errors*/
          TF0FM001.TF0FMCD = TF0FM001.TF2DSTCD[TFAWSUB2]; /* save key*/
          TFAREC.TFAPFL5 = "Y"; /* set first all on*/
        end
      end
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
    end
  end


   /* *************************************************************/
         /* check for 'd'elete option*/
   /* *************************************************************/

  if ("D" in TF0FM001.TF0FMOPT
   && converseVar.validationMsgNum == 0
   && SQLCA.VAGen_SQLCODE == 0)
    TFAREC.TFAWSUB2 = sysVar.arrayIndex;

    while (TFAREC.TFAWSUB2 <= 16
     && converseVar.validationMsgNum == 0)
      if (TF0FM001.TF0FMOPT[TFAWSUB2] == "D")
        TF0FS34(); /* try to delete a record*/
        TF0FS42(); /* determine if commit*/
      end
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
    end
  end


   /* *************************************************************/
         /* check for '-' delete option*/
   /* *************************************************************/

  if ("-" in TF0FM001.TF0FMOPT
   && converseVar.validationMsgNum == 0)
    TFAREC.TFAWSUB2 = sysVar.arrayIndex;

    while (TFAREC.TFAWSUB2 <= 16
     && converseVar.validationMsgNum == 0
     && SQLCA.VAGen_SQLCODE == 0)
      if (TF0FM001.TF0FMOPT[TFAWSUB2] == "-")
        TF0FS36(); /* try to physical delete a record*/
        TF0FS42(); /* determine if commit*/
      end
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
    end
  end


   /* *************************************************************/
         /* check for 'c'hange option*/
   /* *************************************************************/

  if ("C" in TF0FM001.TF0FMOPT
   && converseVar.validationMsgNum == 0)
    TFAREC.TFAWSUB2 = sysVar.arrayIndex;

    while (TFAREC.TFAWSUB2 <= 16
     && converseVar.validationMsgNum == 0
     && SQLCA.VAGen_SQLCODE == 0)
      if (TF0FM001.TF0FMOPT[TFAWSUB2] == "C")
        TF0FS32(); /* try to change a record*/
        TF0FS42(); /* determine if commit*/
      end
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
    end
  end

  if ("Y" == TFAREC.TFAPFL4) /* if add/del flag on*/
    TF0FS25(); /* rebuild top of map array*/
  end

  if (converseVar.validationMsgNum == 026) /* database has been changed*/
  else
    if (converseVar.validationMsgNum > 0)
      return;
    end
  end

   /* *************************************************************/
         /* check 'pf7', 'pf8', 'enter' scrolling option*/
   /* *************************************************************/

  if (converseVar.eventKey is pf8 /* scroll forward*/
   || converseVar.eventKey is pf7 /* scroll backward*/
   || converseVar.eventKey is enter) /* scroll search option*/
    TF0FS38(); /* scrolling control*/
  end


   /* ************************************************************/
end // end TF0F210

// main edits for tf0fm001
Function TF0FS10()



      /* *********************************************************/
      /* *                                                      **/
      /* * this statment group is used for the main edits of    **/
      /* * the destination table map.                           **/
      /* *                                                      **/
      /* *********************************************************/


  set TF0FM001.TF0FMCD cursor, initialAttributes;
  set TF0FM001.CAITEM initialAttributes;
  set TF0FM001.CATOAP initialAttributes;

  if (converseVar.eventKey is enter /* check for valid selection*/
   || converseVar.eventKey is pa2   
   || converseVar.eventKey is pf1   
   || converseVar.eventKey is pf3   
   || converseVar.eventKey is pf4   
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8   
   || converseVar.eventKey is pf12)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1 /* invalid pa key*/
     || converseVar.eventKey is pa3) /* invalid pa key*/
      converseLib.clearScreen();
      
    end
    converseLib.validationFailed(002); /* invalid pf key*/
    return;
  end


  if (converseVar.eventKey is pf12) /* edit only*/
    return;
  end

      /* check for cancel option*/

  if (converseVar.eventKey is pa2) /* cancel*/
    COMMAREA.CATOAP = "TF0F";
    XSEXIT();
    TF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    return;
  end


      /* check for fast path*/

  if (TF0FM001.CAITEM is modified) /* save item*/
    COMMAREA.CAITEM = TF0FM001.CAITEM;
  end

  if (TF0FM001.CATOAP > " ") /* continue*/
    COMMAREA.CATOAP = TF0FM001.CATOAP;
    if (COMMAREA.CATOSYS != COMMAREA.CACURSYS) /* if not same system,*/
      COMMAREA.CAUSERA = " "; /* clear user commarea*/
    else
      COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* save user commarea*/
    end
    XSEXIT();
    COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
    TF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    set TF0FM001.CATOAP cursor, bold;
    return;
  else
    set TF0FM001.CATOAP normal;
  end

     /* check for help system*/

  if (converseVar.eventKey is pf1) /* help*/
    COMMAREA.CAUSERA = " "; /* clear user commarea*/
    XSPF1();
    TF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
    COMMAREA.CATOAP = " ";
    return;
  end

      /* return to master menu*/

  if (converseVar.eventKey is pf3) /* traffic main menu*/
    COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* save user commarea*/
    COMMAREA.CATOAP = "TF0A";
    XSEXIT();
    TF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CATOAP = " ";
    return;
  end

      /* return to master menu*/

  if (converseVar.eventKey is pf4) /* master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
    TF0FM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    COMMAREA.CAUSERA = TFWREC.TFWGRPLV; /* restore user commarea*/
    COMMAREA.CATOAP = " ";
    return;
  end



   /* ************************************************************/
end // end TF0FS10

// edit destination options
Function TF0FS20()



      /* *********************************************************/
      /* *                                                      **/
      /* * THIS STATEMENT GROUP IS USED TO EDIT THE DESTINATION **/
      /* * OPTIONS SELECTED FROM THE DESTINATION DISPLAY/UPDATE **/
      /* * MAP.                                                 **/
      /* *   edits:                                             **/
      /* *                                                      **/
      /* *   - the screen should not be moved off (pf7/8)       **/
      /* *     until all updates are performed and all error    **/
      /* *     are corrected. exceptions to this are pf3, pa2   **/
      /* *                                                      **/
      /* *   - action code must be a " a , c , d , - " or       **/
      /* *     space. any other code is invalid.                **/
      /* *                                                      **/
      /* *   - (A) add: code, name, and short abrv are required **/
      /* *     to be greater to be greater than spaces. code    **/
      /* *     must not already exist on the database.          **/
      /* *       - set status to 'a' for active                 **/
      /* *       - set change date/time to zero                 **/
      /* *       - set setup date/time to current date/time     **/
      /* *                                                      **/
      /* *   - "CLONING" is allowed by overtypeing an existing  **/
      /* *     line. the inserted line will be moved to the     **/
      /* *     proper "sorted" position screen wise.            **/
      /* *                                                      **/
      /* *   - (C) change: code may not be changed. name and    **/
      /* *     short abrv may be changed and are required to    **/
      /* *     be greater than spaces.                          **/
      /* *       - set change date/time to current date/time    **/
      /* *       - status is unchanged                          **/
      /* *                                                      **/
      /* *   - (d) delete: code may not be changed. name and    **/
      /* *     short abrv may be changed and are required to    **/
      /* *     be greater than spaces.                          **/
      /* *       - set change date/time to current date/time    **/
      /* *       - status is set to "I" - inactive.             **/
      /* *     a row is not actually deleted until last change  **/
      /* *     date is at least 6 months old. cannot delete a   **/
      /* *     row just added.                                  **/
      /* *                                                      **/
      /* *   - (-) delete: code may not be changed. this delete **/
      /* *     code allows deletion of a row regardless of the  **/
      /* *     change date. the caalvl(1) flag must be equal    **/
      /* *     to 'Y'. data administration will probably be the **/
      /* *     only user authorized to use this function. it    **/
      /* *     will be considered an invalid option if the      **/
      /* *     caalvl(1) flag is not a 'Y'.                     **/
      /* *                                                      **/
      /* *********************************************************/



  TFAREC.TFAWSUB2 = 16;

   /* *************************************************************/
          /* check for all valid options*/
   /* *************************************************************/

  while (TFAREC.TFAWSUB2 > 0)

    if (TF0FM001.TF0FMODE == "MAINTENANCE") /* valid to update*/
      set TF0FM001.TF0FMOPT[TFAWSUB2] normal; /* reset attributes*/
      set TF0FM001.TF2DSTCD[TFAWSUB2] normal;
      set TF0FM001.TF2DSTNM[TFAWSUB2] normal;
      set TF0FM001.TF2SABRV[TFAWSUB2] normal;
    end

    if (TF0FM001.TF0FMOPT[TFAWSUB2] == "A" 
     || TF0FM001.TF0FMOPT[TFAWSUB2] == "C" /* ooky dooky codes*/
     || TF0FM001.TF0FMOPT[TFAWSUB2] == "D" 
     || TF0FM001.TF0FMOPT[TFAWSUB2] == "-" 
     || TF0FM001.TF0FMOPT[TFAWSUB2] == " ")

    else
      set TF0FM001.TF0FMOPT[TFAWSUB2] cursor, bold;
      converseLib.validationFailed(013);
    end
    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 1;
  end

   /* *************************************************************/
         /* check for valid delete user*/
   /* *************************************************************/

  if ("-" in TF0FM001.TF0FMOPT)
    if (COMMAREA.CADLVL[10] == "Y") /* valid delete user*/
      TFAREC.TFAWSUB2 = 16;
      while (TFAREC.TFAWSUB2 >= sysVar.arrayIndex)
        if (TF0FM001.TF0FMOPT[TFAWSUB2] == "-"
         && TF0FM001.TF2DSTCD[TFAWSUB2] == " ")
          set TF0FM001.TF0FMOPT[TFAWSUB2] cursor, bold;
          converseLib.validationFailed(013); /* invalid option*/
        end
        TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 1;
      end
    else
      TFAREC.TFAWSUB2 = 16;
      while (TFAREC.TFAWSUB2 >= sysVar.arrayIndex)
        if (TF0FM001.TF0FMOPT[TFAWSUB2] == "-")
          set TF0FM001.TF0FMOPT[TFAWSUB2] cursor, bold;
          converseLib.validationFailed(013); /* invalid option*/
        end
        TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 1;
      end
    end
  end

   /* *************************************************************/
         /* check for vaild 'a'dd option*/
   /* *************************************************************/

  if ("A" in TF0FM001.TF0FMOPT)
    TFAREC.TFAWSUB2 = sysVar.arrayIndex;

    while (TFAREC.TFAWSUB2 <= 16)
      if (TF0FM001.TF0FMOPT[TFAWSUB2] == "A")
        if (TF0FM001.TF2DSTCD[TFAWSUB2] == " ")
          converseLib.validationFailed(015); /* valid code is required*/
          set TF0FM001.TF2DSTCD[TFAWSUB2] cursor, bold;
        end
        if (TF0FM001.TF2DSTNM[TFAWSUB2] == " ")
          converseLib.validationFailed(014); /* name is required*/
          set TF0FM001.TF2DSTNM[TFAWSUB2] cursor, bold;
        end
        if (TF0FM001.TF2SABRV[TFAWSUB2] == " ")
          converseLib.validationFailed(016); /* short abbrev is required*/
          set TF0FM001.TF2SABRV[TFAWSUB2] cursor, bold;
        end
      end
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
    end
  end

   /* *************************************************************/
         /* check for vaild 'c'hange option*/
   /* *************************************************************/

  if ("C" in TF0FM001.TF0FMOPT)
    TFAREC.TFAWSUB2 = sysVar.arrayIndex;

    while (TFAREC.TFAWSUB2 <= 16)
      if (TF0FM001.TF0FMOPT[TFAWSUB2] == "C")

              /* check code to insure it's not been changed*/

        if (TF0FM001.TF2DSTCD[TFAWSUB2] == TF0FW01.TF0FWDCD[TFAWSUB2]
         && TF0FM001.TF2DSTCD[TFAWSUB2] > " ")
           /* next sentence*/
        else
          converseLib.validationFailed(017); /* can't change key*/
          set TF0FM001.TF2DSTCD[TFAWSUB2] cursor, bold;
          set TF0FM001.TF0FMOPT[TFAWSUB2] bold;
        end
        if (TF0FM001.TF2DSTNM[TFAWSUB2] == " ")
          converseLib.validationFailed(014); /* name is required*/
          set TF0FM001.TF2DSTNM[TFAWSUB2] cursor, bold;
        end
        if (TF0FM001.TF2SABRV[TFAWSUB2] == " ")
          converseLib.validationFailed(016); /* short abbreviation is required*/
          set TF0FM001.TF2SABRV[TFAWSUB2] cursor, bold;
        end
      end
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
    end
  end

   /* *************************************************************/
         /* check for vaild 'd'elete option*/
   /* *************************************************************/

  if ("D" in TF0FM001.TF0FMOPT)
    TFAREC.TFAWSUB2 = sysVar.arrayIndex;

    while (TFAREC.TFAWSUB2 <= 16)

      if (TF0FM001.TF0FMOPT[TFAWSUB2] == "D")

              /* check code to insure it's not been changed*/

        if (TF0FM001.TF2DSTCD[TFAWSUB2] == TF0FW01.TF0FWDCD[TFAWSUB2]
         && TF0FM001.TF2DSTCD[TFAWSUB2] > " ")
           /* next sentence*/
        else
          converseLib.validationFailed(017); /* can't change code during update*/
          set TF0FM001.TF2DSTCD[TFAWSUB2] cursor, bold;
          set TF0FM001.TF0FMOPT[TFAWSUB2] bold;
        end
        if (TF0FM001.TF2DSTNM[TFAWSUB2] == " ")
          converseLib.validationFailed(014); /* name is required*/
          set TF0FM001.TF2DSTNM[TFAWSUB2] cursor, bold;
        end
        if (TF0FM001.TF2SABRV[TFAWSUB2] == " ")
          converseLib.validationFailed(016); /* short abbrev is required*/
          set TF0FM001.TF2SABRV[TFAWSUB2] cursor, bold;
        end
      end
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
    end
  end

   /* *************************************************************/
         /* check for vaild '-' delete option*/
   /* *************************************************************/

  if (COMMAREA.CADLVL[10] == "Y")
    if ("-" in TF0FM001.TF0FMOPT)
      TFAREC.TFAWSUB2 = sysVar.arrayIndex;

      while (TFAREC.TFAWSUB2 <= 16)
        if (TF0FM001.TF0FMOPT[TFAWSUB2] == "-")

                /* check code to insure it's not been changed*/

          if (TF0FM001.TF2DSTCD[TFAWSUB2] == TF0FW01.TF0FWDCD[TFAWSUB2])
             /* next sentence*/
          else
            converseLib.validationFailed(017); /* can't change code during update*/
            set TF0FM001.TF2DSTCD[TFAWSUB2] cursor, bold;
            set TF0FM001.TF0FMOPT[TFAWSUB2] bold;
          end
        end
        TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
      end
    end
  end



   /* ************************************************************/
end // end TF0FS20

// tf2rec key map processing
Function TF0FS24()


    /* **********************************************************/
    /* *                                                       **/
    /* * this statement group is for the destination table to  **/
    /* * go through and move the line items selected           **/
    /* * to the destination table map.  when no more           **/
    /* * records are in the set (sqlcode = 100) get out of the **/
    /* * while loop.                                           **/
    /* *                                                       **/
    /* **********************************************************/


  TFAREC.TFAWSUB1 = 1;
  TF0FW01.TF0FWCSR = " "; /* intialize current screen array*/
  TF0FW01.TF0FWCD = " "; /* clear save next code*/
  TF0FW01.TF0FWNM = " "; /* clear save next name*/

  while (TFAREC.TFAWSUB1 <= 16)

    if (SQLCA.VAGen_SQLCODE == 0)
      if (COMMAREA.CAADDFL == "Y"
       && TFWREC.TFWUPDFL == "Y")
        set TF0FM001.TF0FMOPT[TFAWSUB1] initialAttributes;
        set TF0FM001.TF2DSTCD[TFAWSUB1] initialAttributes;
        set TF0FM001.TF2DSTNM[TFAWSUB1] initialAttributes;
        set TF0FM001.TF2SABRV[TFAWSUB1] initialAttributes;
        set TF0FM001.XXXSTAT[TFAWSUB1] initialAttributes;
      else
        set TF0FM001.TF0FMOPT[TFAWSUB1] skip, invisible;
        set TF0FM001.TF2DSTCD[TFAWSUB1] skip;
        set TF0FM001.TF2DSTNM[TFAWSUB1] skip;
        set TF0FM001.TF2SABRV[TFAWSUB1] skip;
        set TF0FM001.XXXSTAT[TFAWSUB1] skip;
      end
      TF0FM001.TF0FMOPT[TFAWSUB1] = " ";
      TF0FW01.TF0FWCD = TF2REC.TF2DSTCD; /* save next code*/
      TF0FW01.TF0FWNM = TF2REC.TF2DSTNM; /* save next name*/
      TF0FW01.TF0FWDCD[TFAWSUB1] = TF2REC.TF2DSTCD;
      TF0FM001.TF2DSTCD[TFAWSUB1] = TF2REC.TF2DSTCD;
      TF0FM001.TF2DSTNM[TFAWSUB1] = TF2REC.TF2DSTNM;
      TF0FM001.TF2SABRV[TFAWSUB1] = TF2REC.TF2SABRV;
      TF0FM001.XXXSTAT[TFAWSUB1] = TF2REC.XXXSTAT;

      XSTF2F0(); /* fetch next tf2rec*/
    else
      TF0FW01.TF0FWCD = TF0FM001.TF2DSTCD[1]; /* save next code*/
      TF0FW01.TF0FWNM = TF0FM001.TF2DSTNM[1]; /* save next name*/
      TF0FW01.TF0FWDCD[TFAWSUB1] = " ";
      TF0FM001.TF0FMOPT[TFAWSUB1] = " ";
      TF0FM001.TF2DSTCD[TFAWSUB1] = " ";
      TF0FM001.TF2DSTNM[TFAWSUB1] = " ";
      TF0FM001.TF2SABRV[TFAWSUB1] = " ";
      TF0FM001.XXXSTAT[TFAWSUB1] = " ";
      if (COMMAREA.CAADDFL == "Y"
       && TFWREC.TFWUPDFL == "Y")
         /* next sentence*/
      else
        set TF0FM001.TF0FMOPT[TFAWSUB1] skip, invisible;
        set TF0FM001.TF2DSTCD[TFAWSUB1] skip, invisible;
        set TF0FM001.TF2DSTNM[TFAWSUB1] skip, invisible;
        set TF0FM001.TF2SABRV[TFAWSUB1] skip, invisible;
        set TF0FM001.XXXSTAT[TFAWSUB1] skip, invisible;
      end
    end
    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
  end


  if (SQLCA.VAGen_SQLCODE == 100)
    if (TFAREC.TFAWOKFL != "Y") /* no updates*/
      TFAREC.TFAWBOT = "Y"; /* no more forward scrolling possible*/
      if (converseVar.validationMsgNum == 000)
        converseLib.validationFailed(008); /* end of table message*/
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      TF0FW01.TF0FWCD = TF2REC.TF2DSTCD; /* save next code*/
      TF0FW01.TF0FWNM = TF2REC.TF2DSTNM; /* save next name*/
      TFAREC.TFAWBOT = "N"; /* more forward scrolling possible*/
    end
  end

  if (converseVar.eventKey is pf7) /* do not do for pf7*/
     /* next sentence*/
  else
    if (TF0FM001.TF0FMCD > "00000" /* check selection for match*/
     && TF0FM001.TF0FMCD != TF0FM001.TF2DSTCD[1])
      if (converseVar.validationMsgNum == 0) /* if no other messages*/
        converseLib.validationFailed(010); /* warning - no exact match*/
      end
    end
  end

  TF0FM001.TF0FMCD = TF0FW01.TF0FWCD; /* set next code*/
  TF0FM001.TF0FMNM = TF0FW01.TF0FWNM; /* set next name*/

  XSTF2C0(); /* close the select set for the tf2 record*/


   /* ************************************************************/
end // end TF0FS24

// tf2rec top of map array
Function TF0FS25()


    /* **********************************************************/
    /* *                                                       **/
    /* * this statement group is used to build the tfarec.     **/
    /* * tfwarry, top of screen position, array. this is       **/
    /* * done up placeing the first and every 16th db2 row     **/
    /* * (number of rows on a screen) into the tf0fw01.tf2dstcd**/
    /* * until the end of the file is reached.                 **/
    /* *                                                       **/
    /* **********************************************************/


  set TF2REC empty;
  TF0FW01.TF0FWARY = " ";

  TA1REC.TA1LOCAT[2] = "TF0FS25";
  TA1REC.TA1MAP = "TF0FM001";

  XSTF2S0(); /* select set for tf2rec*/

  if (SQLCA.VAGen_SQLCODE != 0)
    return;
  end

  TFAREC.TFAWSUB1 = 16;
  TFAREC.TFAWSUB2 = 1;

  while (SQLCA.VAGen_SQLCODE == 0
   && TFAREC.TFAWSUB2 <= 100)
    if (TFAREC.TFAWSUB1 == 16)
      TF0FW01.TF2DSTCD[TFAWSUB2] = TF2REC.TF2DSTCD;
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
      TFAREC.TFAWSUB1 = 0;
    end

    XSTF2F0(); /* fetch next tf2rec*/
    TFAREC.TFAWSUB1 = TFAREC.TFAWSUB1 + 1;
  end

  if (SQLCA.VAGen_SQLCODE == 100
   && TFAREC.TFAWSUB2 > 1
   && TFAREC.TFAWSUB2 <= 100)
    TF0FW01.TF2DSTCD[TFAWSUB2] = TF2REC.TF2DSTCD;
  end

  XSTF2C0(); /* close the select set for the tf2 record*/



   /* ************************************************************/
end // end TF0FS25

// add row to destination table
Function TF0FS30()



      /* *********************************************************/
      /* *                                                      **/
      /* * THIS STATEMENT GROUP IS USED TO EDIT THE DESTINATION **/
      /* * OPTION 'ADD'.                                        **/
      /* *   edits:                                             **/
      /* *                                                      **/
      /* *   - check the destination to determine if the        **/
      /* *     record is already in the data base.              **/
      /* *                                                      **/
      /* *     - if the record is found on the data base        **/
      /* *       check to determine if the status code is       **/
      /* *       inactive.                                      **/
      /* *                                                      **/
      /* *       - if the record is inactive change the status  **/
      /* *         to active, move the name and abrv from the   **/
      /* *         map to the ta2rec. add the record to the db. **/
      /* *                                                      **/
      /* *       - else if the record is active, return an      **/
      /* *         error message to the map that record is      **/
      /* *         already in the database                      **/
      /* *                                                      **/
      /* *   - else if the record is not found on the data      **/
      /* *     base add it.                                     **/
      /* *                                                      **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "TF0FS30";
  TFCREC.TFCGRPLV = " ";
  TFCREC.TFCACTIN = "A";
  TF2REC.TF2DSTCD = TF0FM001.TF2DSTCD[TFAWSUB2];
  TF2REC.TF2DSTNM = TF0FM001.TF2DSTNM[TFAWSUB2];
  TF2REC.TF2SABRV = TF0FM001.TF2SABRV[TFAWSUB2];
  TF2REC.XXXSTAT = "A";

  TF0FS40(); /* format tf2rec current time*/

  XSTF2A0(); /* try to add record*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      XSTF2A0(); /* try to add record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1; /* increm counter*/
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(020); /* data base in use*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* row added*/
    TFAREC.TFAPFL4 = "Y"; /* row add/del yes*/
  end

  if (SQLCA.VAGen_SQLCODE == -803)
    if (TF2REC.XXXSTAT == "I") /* status is inactive*/

      TFCREC.TF-AUD-BFR-LEN = 338;
      TFCREC.TF-AUD-BFR-TEXT = TF2REC.TF2GRPLV;
      TF2REC.TF2DSTCD = TF0FM001.TF2DSTCD[TFAWSUB2];
      TF2REC.TF2DSTNM = TF0FM001.TF2DSTNM[TFAWSUB2];
      TF2REC.TF2SABRV = TF0FM001.TF2SABRV[TFAWSUB2];
      TF2REC.XXXSTAT = "A";

      XSTF2R0(); /* replace record*/

    else
      converseLib.validationFailed(018); /* code already exists*/
      set TF0FM001.TF0FMOPT[TFAWSUB2] bold;
      set TF0FM001.TF2DSTCD[TFAWSUB2] bold;
    end
  end


  if (SQLCA.VAGen_SQLCODE == 0)
    TF0FS50(); /* write audit records*/
  end



   /* ************************************************************/
end // end TF0FS30

// chg row to destination table
Function TF0FS32()



      /* *********************************************************/
      /* *                                                      **/
      /* * THIS STATEMENT GROUP IS USED TO EDIT THE DESTINATION **/
      /* * OPTION 'C'HANGE.                                     **/
      /* *                                                      **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "TF0FS32";

  TF2REC.TF2DSTCD = TF0FM001.TF2DSTCD[TFAWSUB2];
  XSTF2I0(); /* check record still there*/
  if (SQLCA.VAGen_SQLCODE == 100)
    return;
  end
  TFCREC.TFCGRPLV = " ";
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = TF2REC.TF2GRPLV;
  TF2REC.TF2DSTNM = TF0FM001.TF2DSTNM[TFAWSUB2];
  TF2REC.TF2SABRV = TF0FM001.TF2SABRV[TFAWSUB2];

  TF0FS40(); /* format tf2rec current time*/

  TFCREC.TFCACTIN = "C";

  XSTF2R0(); /* try to change a record*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      XSTF2R0(); /* try to change a record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1; /* increm cnt*/
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(020); /* data base in use*/
    end
  end


  if (SQLCA.VAGen_SQLCODE == 0)
    TF0FS50(); /* write audit records*/
  end



   /* ************************************************************/
end // end TF0FS32

// chg row in dest. tbl to inact
Function TF0FS34()



      /* *********************************************************/
      /* *                                                      **/
      /* * THIS STATEMENT GROUP IS USED TO EDIT THE DESTINATION **/
      /* * OPTION 'D'ELETE.                                     **/
      /* *                                                      **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "TF0FS34";

  TF2REC.TF2DSTCD = TF0FM001.TF2DSTCD[TFAWSUB2];
  XSTF2I0(); /* check record is still there*/
  if (SQLCA.VAGen_SQLCODE == 100)
    return;
  end
  TFCREC.TFCGRPLV = " ";
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = TF2REC.TF2GRPLV;
  TFCREC.TFCACTIN = "D";

   /* *************************************************************/
   /* check to see if the record is inactive and it has*/
   /* been more that six months since the record has been*/
   /* updated. if it is then delete the record from the dbase*/
   /* *************************************************************/

  if (TF2REC.XXXSTAT == "I")
    TFAREC.TFAWYMD = TF2REC.ZZZCHGDT;
    if (TFAREC.TFAWYY == XX0XW01.XX0XWYY)
      TFAREC.TFAWMM = XX0XW01.XX0XWMM - TFAREC.TFAWMM;
      if (TFAREC.TFAWMM >= 6)
        TFCREC.TFCGRPLV = " ";
        TFCREC.TF-AUD-BFR-LEN = 338;
        TFCREC.TF-AUD-BFR-TEXT = TF2REC.TF2GRPLV;
        TFCREC.TFCACTIN = "D";
        TF0FM001.TF0FMOPT[TFAWSUB2] = "-";

        XSTF2D0(); /* try to delete a record*/
        if (SQLCA.VAGen_SQLCODE == -911)
          TFAREC.TFAWCNT5 = 1;
          while (SQLCA.VAGen_SQLCODE == -911
           && TFAREC.TFAWCNT5 <= 2)
            XSTF2D0(); /* try to delete a record*/
            TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
          end
          if (SQLCA.VAGen_SQLCODE == -911)
            converseLib.validationFailed(020); /* data base in use*/
          end
        end
        if (SQLCA.VAGen_SQLCODE == 0)
          TFAREC.TFAPFL4 = "Y"; /* set add/del yes*/
          TF0FS50(); /* write audit records*/
        end
        TF0FM001.TF0FMOPT[TFAWSUB2] = "D";
        return;
      end
    else
      if (TFAREC.TFAWYY < XX0XW01.XX0XWYY)
        TFAREC.TFAWMM = 12 - TFAREC.TFAWMM;
        TFAREC.TFAWMM = XX0XW01.XX0XWMM + TFAREC.TFAWMM;
        if (TFAREC.TFAWMM >= 6)
          TFCREC.TFCGRPLV = " ";
          TFCREC.TF-AUD-BFR-LEN = 338;
          TFCREC.TF-AUD-BFR-TEXT = TF2REC.TF2GRPLV;
          TFCREC.TFCACTIN = "D";
          TF0FM001.TF0FMOPT[TFAWSUB2] = "-";

          XSTF2D0(); /* try to delete a record*/
          if (SQLCA.VAGen_SQLCODE == -911)
            TFAREC.TFAWCNT5 = 1;
            while (SQLCA.VAGen_SQLCODE == -911
             && TFAREC.TFAWCNT5 <= 2)
              XSTF2D0(); /* try to delete a record*/
              TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
            end
            if (SQLCA.VAGen_SQLCODE == -911)
              converseLib.validationFailed(020); /* data base in use*/
            end
          end
          if (SQLCA.VAGen_SQLCODE == 0)
            TFAREC.TFAPFL4 = "Y"; /* set add/del yes*/
            TF0FS50(); /* write audit records*/
          end
          TF0FM001.TF0FMOPT[TFAWSUB2] = "D";
          return;
        end
      end
    end
  end


  TF2REC.TF2DSTNM = TF0FM001.TF2DSTNM[TFAWSUB2];
  TF2REC.TF2SABRV = TF0FM001.TF2SABRV[TFAWSUB2];
  TF2REC.XXXSTAT = "I";

  TF0FS40(); /* format tf2rec current time*/

  XSTF2R0(); /* try to change a record*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      XSTF2R0(); /* try to change a record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(020); /* data base in use*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    TF0FS50(); /* write audit records*/
  end



   /* ************************************************************/
end // end TF0FS34

// del row from destination tbl
Function TF0FS36()



      /* *********************************************************/
      /* *                                                      **/
      /* * THIS STATEMENT GROUP IS USED TO EDIT THE DESTINATION **/
      /* * OPTION 'D'ELETE.                                     **/
      /* *                                                      **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "TF0FS36";

  TF2REC.TF2DSTCD = TF0FM001.TF2DSTCD[TFAWSUB2];
  XSTF2I0(); /* check record if still there*/
  if (SQLCA.VAGen_SQLCODE == 100)
    return;
  end
  TF2REC.TF2DSTNM = TF0FM001.TF2DSTNM[TFAWSUB2];
  TF2REC.TF2SABRV = TF0FM001.TF2SABRV[TFAWSUB2];

  TF0FS40(); /* format tf2rec current time*/

  TFCREC.TFCGRPLV = " ";
  TFCREC.TF-AUD-BFR-LEN = 338;
  TFCREC.TF-AUD-BFR-TEXT = TF2REC.TF2GRPLV;
  TFCREC.TFCACTIN = "D";

  XSTF2D0(); /* try to delete a record*/

  if (SQLCA.VAGen_SQLCODE == -911)
    TFAREC.TFAWCNT5 = 1;
    while (SQLCA.VAGen_SQLCODE == -911
     && TFAREC.TFAWCNT5 <= 2)
      XSTF2D0(); /* try to delete a record*/
      TFAREC.TFAWCNT5 = TFAREC.TFAWCNT5 + 1; /* increm cnt*/
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(020); /* data base in use*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* row deleted*/
    TFAREC.TFAPFL4 = "Y"; /* row add/del yes*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    TF0FS50(); /* write audit records*/
  end



   /* ************************************************************/
end // end TF0FS36

// scrolling cntl of screen
Function TF0FS38()



      /* *********************************************************/
      /* * this statement group is used to contol the scrolling **/
      /* * of the destination maintenance screen. pf7, pf8,     **/
      /* * and enter are the only valid enteries here.          **/
      /* *********************************************************/


  TA1REC.TA1LOCAT[2] = "TF0FS38";
  TA1REC.TA1MAP = "TF0FM01";

   /* *************************************************************/
         /* check 'pf8' scroll down option*/
   /* *************************************************************/

  if (converseVar.eventKey is pf8) /* scroll forward*/
    if (TFAREC.TFAWOKFL == "Y"
     && converseVar.validationMsgNum == 0)
      converseLib.validationFailed(009); /* updates ok*/
    end
    if (TFAREC.TFAWBOT == "N") /* bottom of distination table*/
      TFAREC.TFAWSCRN = TFAREC.TFAWSCRN + 1;
    else
      if (converseVar.validationMsgNum == 0) /* no messages*/
        converseLib.validationFailed(008); /* no more scrolling forward*/
      end
    end
    TF2REC.TF2DSTCD = TF0FM001.TF0FMCD;
    XSTF2S0(); /* select set for tf2rec*/
    TF0FS24(); /* fetch next screen for tf2rec*/
    return;
  end

   /* *************************************************************/
         /* check 'pf7' scroll up option*/
   /* *************************************************************/

  if (converseVar.eventKey is pf7) /* scroll backward*/
    if (TFAREC.TFAWOKFL == "Y"
     && converseVar.validationMsgNum == 0) /* no messages*/
      converseLib.validationFailed(009); /* updates ok*/
    end
    if (TFAREC.TFAWSCRN > 1)
      TFAREC.TFAWBOT = "N"; /* bottom of distination table*/
      TFAREC.TFAWSCRN = TFAREC.TFAWSCRN - 1;
    else
      if (converseVar.validationMsgNum == 0) /* no messages*/
        converseLib.validationFailed(007); /* no more scrolling back*/
      end
    end
    TF2REC.TF2DSTCD = TF0FW01.TF2DSTCD[TFAWSCRN];
    XSTF2S0(); /* select set for tf2rec*/
    TF0FS24(); /* fetch next screen for tf2rec*/
    return;
  end

   /* *************************************************************/
         /* check 'enter' search option*/
   /* *************************************************************/

  if (converseVar.eventKey is enter)
    if (TFAREC.TFAWOKFL == "Y" /* updates ok*/
     && converseVar.validationMsgNum == 0) /* no errors*/
      converseLib.validationFailed(009); /* updates ok*/
      if (TFAREC.TFAPFL5 == "N") /* record(s) not added*/
        TF0FM001.TF0FMCD = TF0FM001.TF2DSTCD[1]; /* same screen*/
      end
    end
  end

  set TF2REC empty;

  TFAREC.TFAWSUB2 = 1; /* check for beginning of table*/
  if (TF0FM001.TF0FMCD <= TF0FW01.TF2DSTCD[TFAWSUB2])
    XSTF2C0();
    TFAREC.TFAWSCRN = TFAREC.TFAWSUB2;
    TF2REC.TF2DSTCD = TF0FM001.TF0FMCD;
    TFAREC.TFAWSUB2 = 1000;
  end
  TFAREC.TFAWSUB3 = TFAREC.TFAWSUB2 + 1;

  while (TFAREC.TFAWSUB2 <= 100
   && TF0FW01.TF2DSTCD[TFAWSUB2] != " "
   && TF0FM001.TF0FMCD != " ")
    if (TF0FM001.TF0FMCD == TF0FW01.TF2DSTCD[TFAWSUB2])
      XSTF2C0();
      TFAREC.TFAWSCRN = TFAREC.TFAWSUB2;
      TF2REC.TF2DSTCD = TF0FM001.TF0FMCD;
      TFAREC.TFAWSUB2 = 999;
    else
      if (TF0FM001.TF0FMCD > TF0FW01.TF2DSTCD[TFAWSUB2]
       && TF0FM001.TF0FMCD < TF0FW01.TF2DSTCD[TFAWSUB3])
        XSTF2C0();
        TFAREC.TFAWSCRN = TFAREC.TFAWSUB3;
        TF2REC.TF2DSTCD = TF0FM001.TF0FMCD;
        TFAREC.TFAWSUB2 = 999;
      end
    end
    TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 + 1;
    TFAREC.TFAWSUB3 = TFAREC.TFAWSUB2 + 1;
  end

  if (TFAREC.TFAWSUB2 == 1000) /* if beginning of table*/
    XSTF2S0(); /* select set for tf2rec*/
    TF0FS24(); /* fetch next screen for tf2rec*/
  else
    if (" " in TF0FW01.TF2DSTCD from TFAWSUB2)
      TFAREC.TFAWSUB2 = sysVar.arrayIndex;
      TFAREC.TFAWSUB2 = TFAREC.TFAWSUB2 - 1;
      XSTF2C0();
      TFAREC.TFAWSCRN = TFAREC.TFAWSUB2;
      TF2REC.TF2DSTCD = TF0FW01.TF2DSTCD[TFAWSUB2];
      XSTF2S0(); /* select set for tf2rec*/
      TF0FS24(); /* fetch next screen for tf2rec*/
    end
  end



   /* ************************************************************/
end // end TF0FS38
// format current time to tf2rec
Function TF0FS40()



      /* *********************************************************/
      /* *                                                      **/
      /* * THIS STATEMENT GROUP IS USED TO FORMAT THE CURRENT   **/
      /* * DATE TO THE TF2REC.                                  **/
      /* *                                                      **/
      /* *********************************************************/



  XX0XW01.XX0XWZTM = VGVar.currentFormattedTime;
  XX0XW01.XX0XWHR = XX0XW01.XX0XWZHR;
  XX0XW01.XX0XWMIN = XX0XW01.XX0XWZMN;

  if (TF0FM001.TF0FMOPT[TFAWSUB2] == "C" /* change*/
   || TF0FM001.TF0FMOPT[TFAWSUB2] == "-") /* physical delete*/
     /* next sentence*/
  else
    TF2REC.ZZZSDT = XX0XW01.XX0XWDAT;
  end

  TF2REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  TF2REC.ZZZCHGDT = XX0XW01.XX0XWDAT;



   /* ************************************************************/
end // end TF0FS40

// determine commit
Function TF0FS42()



      /* *********************************************************/
      /* * this process is used to determine if the database    **/
      /* * needs to be commited.                                **/
      /* *********************************************************/


  if (converseVar.validationMsgNum == 0
   && SQLCA.VAGen_SQLCODE != 100)
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit();
    TFAREC.TFAWOKFL = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      TF0FM001.TF0FMCD = TF0FM001.TF2DSTCD[1];
      TFAREC.TFAWOKFL = "N";
      converseLib.validationFailed(026); /* record has been changed*/
    else
      set TF0FM001.TF0FMOPT[TFAWSUB2] bold;
      set TF0FM001.TF2DSTCD[TFAWSUB2] cursor, bold;
      TFAREC.TFAWOKFL = "N";
    end
  end



   /* ************************************************************/
end // end TF0FS42

// write the audit record tfarec
Function TF0FS50()



      /* *********************************************************/
      /* *                                                      **/
      /* * THIS STATEMENT GROUP IS USED TO FORMAT THE TAFREC    **/
      /* * TRAFFIC AUDIT RECORD.                                **/
      /* *                                                      **/
      /* *********************************************************/


  if (TF0FM001.TF0FMOPT[TFAWSUB2] == "-") /* physical delete*/
     /* no after picture*/
  else
    TFCREC.TF-AUD-AFT-LEN = 338;
    TFCREC.TF-AUD-AFT-TEXT = TF2REC.TF2GRPLV;
  end

  TFCREC.TFCTBLNM = "VDESTN01";

  XX0XW01.XX0XWZTM = VGVar.currentFormattedTime;
  XX0XW01.XX0XWHRS = XX0XW01.XX0XWZHR;
  XX0XW01.XX0XWMNS = XX0XW01.XX0XWZMN;
  XX0XW01.XX0XWSEC = XX0XW01.XX0XWZSC;
  TFCREC.ZZHHMMSS = XX0XW01.XX0XWHMS;
  TFCREC.ZZZSDT = XX0XW01.XX0XWDAT;


  XSTFCA0(); /* add the new audit record*/



   /* ************************************************************/
end // end TF0FS50

// add : location : 0
Function XSTF2A0()


   /* ************************************************************/
   /* *** add unique row in: destination table                ****/
   /* *** using the std i/o processing version #0             ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all row/rec moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -803 = adding duplicate row - setup dupl row msg  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row for inquiry                       ****/
   /* *** note: 0 return code results in the -803             ****/
   /* ************************************************************/

  call "IO1210" ("S ", SQLCA, TF2REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "XSTF2A0 ";
    TA1REC.TA1LOCAT[1] = "IO1210  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DPICK   ";
    TA1REC.TA1TBLVU = "VDESTN01";
    TA1REC.TA1TBLKE = TF2REC.TF2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    XSPF4();
  end

   /* ************************************************************/
   /* *** insert row                                          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  call "IO1210" ("A ", SQLCA, TF2REC) {isNoRefresh = yes, isExternal = yes}; /* <=== add row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF2A0 ";
  TA1REC.TA1LOCAT[1] = "IO1210  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VDESTN01";
  TA1REC.TA1TBLKE = TF2REC.TF2KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSTF2A0

// delete : location : 0
Function XSTF2D0()


   /* ************************************************************/
   /* *** delete unique row in: destination table             ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete unique row                                   ****/
   /* ************************************************************/

  call "IO1210" ("D ", SQLCA, TF2REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/


  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF2D0 ";
  TA1REC.TA1LOCAT[1] = "IO1210  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VDESTN01";
  TA1REC.TA1TBLKE = TF2REC.TF2KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF2D0

// fetch : location : 0
Function XSTF2F0()


   /* ************************************************************/
   /* *** fetch next row from: destination table              ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: +100 - not found was detected as part of the  ****/
   /* ***       select set previously executed                ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = EOF                                        ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "IO1210" ("SN", SQLCA, TF2REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select next row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF2F0 ";
  TA1REC.TA1LOCAT[1] = "IO1210  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VDESTN01";
  TA1REC.TA1TBLKE = TF2REC.TF2KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF2F0

// replace : location : 0
Function XSTF2R0()


   /* ************************************************************/
   /* *** replace unique row in: destination table            ****/
   /* *** using the standard i/o processing version #0        ****/
   /* *** note: sqlcq.sqlcode used re: can't "set" ezesqcod   ****/
   /* *** note: IO process(s) do all rec/row moves so that    ****/
   /* ***       the final result will be in the record        ****/
   /* *** setup the following just before this is executed:   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update - return with msg re:    ****/
   /* ***          deleted since last read (blank out rec)    ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - setup try again error/msg       ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments zzzchgct by +1 and uses ****/
   /* ***       current data & time for zzzchgdt & zzzchgtm   ****/
   /* ************************************************************/

  call "IO1210" ("U ", SQLCA, TF2REC) {isNoRefresh = yes, isExternal = yes}; /* <=== select unique row*/


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSTF2R0 ";
  TA1REC.TA1LOCAT[1] = "IO1210  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VDESTN01";
  TA1REC.TA1TBLKE = TF2REC.TF2KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  XSPF4();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSTF2R0

//*** RECORD=TF0FW01 ****
// ******* tf0f working storage record for screen array *******
// ***********************
Record TF0FW01 type basicRecord
  10 TF0FWCD TF0FWCD ; 
  10 TF0FWNM TF0FWNM ; 
  10 TF0FWARY TF0FWARY ; 
    15 TF2DSTCD TF2DSTCD [100] ; 
  10 TF0FWCSR TF0FWCSR ; 
    15 TF0FWDCD TF0FWDCD [16] ; 
end // end TF0FW01

// ws top of screen array
DataItem TF0FWARY char(500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next destn code
DataItem TF0FWCD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws current screen array
DataItem TF0FWCSR char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tf-carr-cd
DataItem TF0FWDCD char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// next name
DataItem TF0FWNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

