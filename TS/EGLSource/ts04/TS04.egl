package ts04;
import ab.common.*;
import af.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pv.common.*;
import pw.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS04 ****
//           TS04 : SHIPMENT SUMMARY AND DETAIL
//           ==================================
// 
// Map 1, the shipment summary screen displays information
// for all shipments belonging to a specific customer.  Each
// line on this screen represents a shipment.  The user may
// may scroll forward and backward, if there are more shipments
// than can fit on one page.
// 
// The user may access four functions from this screen,
// depending on the user's authority:
// 
//         1) Transfering to a packing list summary
//            for a selected shipment (TS05)
//         2) Adding a new shipment
//         3) Changing a shipment *
//         4) Deleting a shipment
// 
//         *  If the change screen is requested and change
//            authority is missing, inquiry authority is
//            then verified.  If inquiry authority exists
//            the detail is displayed for inquiry only.
// 
// Map 2 is the detail screen which displays detail information
// for a selected shipment.
// 
// 
// TRANSFERING TO PACKING LIST SUMMARY
// -----------------------------------
// 
//   The user selects the shipment of interest and presses
//   ENTER.  The user is transfered to TS05, the packing
//   list summary screen.  Pertinent data is passed in
//   TSWREC.
// 
// 
// ADDING A NEW SHIPMENT
// -----------------------------------
// 
//   The user presses PF2 which brings up a blank detail
//   screen.  If the user has entered a customer on the
//   summary screen, then the customer defaults to that
//   customer on the detail screen.
// 
//   All fields are edited and validated.  If the user
//   presses ENTER, the new shipment is added.  The screen
//   is refreshed for a new shipment entry along with a
//   sucessful update message for the user.
// 
//   When the user returns to the shipment summary screen,
//   new additions will be displayed.  Shipments will
//   be displayed for the most current customer from the
//   detail screen.
// 
// 
// CHANGING A SHIPMENT
// -----------------------------------
// 
//   The user selects ('S') the shipment of interest and
//   presses PF5.  The detail is displayed with all the
//   information for the selected shipment.  The user may
//   then make the necessary changes.
// 
//   Changes are validated.  The update is performed and a
//   message is displayed informing the user of a successful
//   update.  Processing of validations is similar to that
//   for additions.
// 
//   When the user returns to the summary screen, the
//   record which has been changed will appear in its
//   changed form on the summary.
// 
//   If the user lacks change authority, but has inquiry
//   access, then the change screen is displayed as for a
//   change, except that all the fields are non-modifiable.
// 
// 
// DELETING A SHIPMENT
// -----------------------------------
// 
//   The user selects ('S') the shipment of interest and
//   presses PF6.  If the shipment does not have an associated
//   packing list, the detail is displayed with all the
//   information for the selected shipment.  Fields are
//   non-modifiable. If the shipment has an associated packing
//   list, a message displays telling the user they cannot
//   delete the shipment header.
// 
//   The udpate to the database is initiated by the user
//   pressing ENTER.  A message is displayed informing
//   the user of a successful update is displayed, along
//   with the data of the record deleted.
// 
//   When the user returns to the summary screen, the record
//   for that shipment will no longer be displayed.
// 
//   Note - All pk lists orders associated to the deleted
//   shipment remain intact on the database, but the obsolete
//   shipment id is removed.
// 
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//  SR101   10/03/89  ESMITH  New application.
//  SR112   02/05/90  JBAKER  Default to 'IP' YSSCD.  Pass 'S'
//                            in TSWPLFLG when exit to TS05.
//          01/04/91  JSHANN  EXPANDED FREIGHT CHARGE FIELDS
//                            BY ONE BYTE
//  ts#0    06/12/91  rvakel  Table changes;  ts04m002.tsfofrgt
//                            and ts04m002.tsfoinld size
//                            increased to 12 bytes
//                            (table fields increased).
//  TS#21   08/01/91  DCHIAN  ADD ETA CNSLDTN DATE AND ETA
//                            DISCHRG DATE TO MAP.
//  TS26    12/31/91  DCHIAN  ISSUE WARNING MESSAGE IF SHIP
//                            DATE IS MORE THAN 60 DAYS IN THE
//                            FUTURE OR PASS. TS04250 TS04350
//  TS37    05/27/92  DPETTI  ADD PF12 PROCESSING TO BUILD
//                            NIL INVOICES FOR DANZAS (WHSE 21)
//                            ONLINE SUBMIT OF SR162D.
//  TS#0    07/17/92  mchow   change schedule number multiplier
//                            from 100 to 10 (ts04-16200)
//                            Also correct comment for pf12
//                            (ts04160).
//  TS#0    10/14/92  dchian  Regenned for table changes.
//  ts#0    11/06/92  jlucas  allow a balanced shipment to be
//                            balanced again, to only balance
//                            the new order/pl that has been
//                            added to the shipment.
//  TS      09/14/93  dchian  Add Port of Export to TS04M002.
//  1H8400  10/04/93  hkempe  Change to follow Nike's standard
//                            way of submitting job online -
//                            TS04001, TS04120, TS04-16300,
//                            TS04T01, TARREC/TARRECH,
//                            XSTAS-CICS-REG-ID.
//  ts8027  11/15/93  aivers  Modify to not all manual deletion
//                            of shipment headers to which
//                            active packing lists are assoc-
//                            iated.
//  ts8901  03/04/94  hkempe  Generate/Compile to pick up revsd
//                            COMMAREA, TSWREC, TSYREC, TS4REC,
//                            TSAREC, KUCREC.
//  Y2KFIX  12/12/97  TTHAN1  Generate/Compile to pick up NEW
//                            XP1REC.
//  Ts1631  05/29/98  bchell  Use thater of operation routine
//                            Refer  TS04-CICS-REG-ID,
//                             TS04-16300 , Ts04001 )
//  ts000   06/01/98  rkalla  fix cics-reg-id problem.
// *********************
Program TS04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  PKDREC PKDREC; // record
  PWHREC PWHREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  TARRECH TARRECH { redefines = TARREC } ; // record
  TS04W00 TS04W00; // record
  TS04W01 TS04W01; // record
  TS04W02 TS04W02; // record
  TS04W03 TS04W03; // record
  TS04W04 TS04W04; // record
  TS04W05 TS04W05; // record
  TS04W06 TS04W06; // record
  TS4REC TS4REC; // record
  TS5REC TS5REC; // record
  TSAREC TSAREC; // record
  TSCREC TSCREC; // record
  TSQREC TSQREC; // record
  TSUREC TSUREC; // record
  TSVREC TSVREC; // record
  TSWREC TSWREC; // record
  TSYREC TSYREC; // record
  XCTHREC XCTHREC; // record
  XGPREC XGPREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TS04T01 {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use YPYTBL {deleteAfterUse = yes}; // table
  use YSSTBL {deleteAfterUse = yes}; // table
  use YSTTBL {deleteAfterUse = yes}; // table
  use TS04M.TA0PM001,  // forms
      TS04M.TS04M001, 
      TS04M.TS04M002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the application main process.*/
     /* ------------------------------------------------------------*/

    set ERRSQLCA empty; /* Sql communication area*/
    set KUCREC empty; /* DCUST.VCMPNY01*/
    set PKDREC empty; /* DPICK.VPKCTL01*/
    set PWHREC empty; /* DPICK.VPKPGM01*/
    set SQLCA empty; /* Sql communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date validation parameters*/
    set TA3REC empty; /* CICS REGION parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* BACKGROUND JOB SUBMIT parameters*/
    set TSAREC empty;
    set TSCREC empty;
    set TSQREC empty;
    set TSUREC empty;
    set TSVREC empty;
     /* SET TSWREC EMPTY;*/
    set TSYREC empty;
    set TS4REC empty;
    set TS5REC empty;
    set TS04W00 empty; /* Working storage*/
    set TS04W01 empty; /* M001 display storage*/
    set TS04W02 empty; /* M002 display storage*/
    set TS04W03 empty; /* JCL PARM CARD*/
    set TS04W04 empty; /* TSVREC TABLE*/
    set TS04W05 empty; /* ORDER TABLE*/
    set TS04W06 empty; /* PACKLIST TABLE*/
    set XGPREC empty;
    set XP1REC empty;
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set TS04M001 initial; /* M001 input/output*/
    set TS04M002 initial; /* M002 input/output*/

    TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/
    TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
    TS04W00.TS04WSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Check to see if application is entered from within*/
     /* system.  If so and valid data passed, use it.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "TS03" /* NIL system applications*/
     || COMMAREA.CAFROMAP == "TS04" 
     || COMMAREA.CAFROMAP == "TS05" 
     || COMMAREA.CAFROMAP == "TS06" 
     || COMMAREA.CAFROMAP == "TS07")

      if (TSWREC.TSWPLFLG == "S" /* SELECTION ORIGINALLY BY SHIPMENT*/
       || COMMAREA.CAFROMAP == "TS03")
        TS04W00.YSSCD = TSWREC.YSSCD; /* use original status*/
      else /* selection is not by shipment*/
        TS04W00.YSSCD = "IP"; /* default status code*/
      end
      TS04M001.YSSCD = TS04W00.YSSCD; /* status code*/
      if (TSWREC.KUCCOID > 0) /* Customer is present*/

        TS04M001.KUCCOID = TSWREC.KUCCOID; /* Customer requested*/
        TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
        TS04W00.TS04WSWR = "Y"; /* Request for data switch*/

      else
        set TSWREC empty; /* Initialize TS common record*/
        TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
        TS04W00.TS04WSWR = "N"; /* Request for data switch*/
      end

    else
      set TSWREC empty; /* Initialize TS common record*/
      TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
      TS04W00.TS04WSWR = "N"; /* Request for data switch*/
      COMMAREA.CAITEM = " "; /* Clear passed data*/
      TS04W00.YSSCD = "IP"; /* default status code*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS04001;
                                     /* Converse the main process*/


    TS04001: TS04001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the application main process.*/
     /* ------------------------------------------------------------*/

    goto TS04001; /* Converse application main process*/


  end // end main
end // end TS04

// TEST DETAIL FOR 'B' SELECT
Function TS04-15200()
   /* ------------------------------------------------------------*/
   /* If PF12 pressed selection was entered and is not an "B", indicate*/
   /* that only an "B" may be used to select a line.*/
   /* ------------------------------------------------------------*/


  if (TS04M001.TS04MSEL[TS04WIXM] != TS04W01.TS04MSEL[TS04WIXM]
   && TS04M001.TS04MSEL[TS04WIXM] != "B" /* and is not a "B"*/
   && TS04M001.TS04MSEL[TS04WIXM] != " ") /* and is not a " "*/

    TSWREC.XXXMODID = "152"; /* Module identification*/
    set TS04M001.TS04MSEL[TS04WIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(349); /* Indicate only "B" may be used*/
    return;

  end

   /* --------------------------------------------------------------*/

   /* TS04W00.TS04W-SHIP-ID-SELECTED IS USED TO DETERMINE IF*/
   /* MORE THAN ONE DETAIL LINE IS SELECTED.*/

   /* --------------------------------------------------------------*/

  if (TS04M001.TS04MSEL[TS04WIXM] == "B")

    if (TS04W00.TS04W-SHIP-ID-SELECTED > 0)
      TSWREC.XXXMODID = "152"; /* Module identification*/
      set TS04M001.TS04MSEL[TS04WIXM] cursor, bold; /* Highlight*/
      set TS04M001.TS04MSEL[TS04W-SHIP-ID-SELECTED] cursor, bold;
      TS04W00.TS04W-SHIP-ID-SELECTED = TS04W00.TS04WIXM;
      converseLib.validationFailed(354); /* MULTIPLE "B"s not ALLOWED*/
    else
      TS04W00.TS04W-SHIP-ID-SELECTED = TS04W00.TS04WIXM;
      TS04W02.TSFSHPID = TS04M001.TSFSHPID[TS04WIXM];
    end
  end



end // end TS04-15200

// Verify PF12 process
Function TS04-15300()
   /* ------------------------------------------------------------*/
   /* DETERMINE IF ORDER IS A DANZA ORDER (YSTCD = 'DZ')*/
   /* ------------------------------------------------------------*/

  TS04-15310(); /* READ VNLSHP01*/

  if (TSUREC.YSTCD == "DZ") /* ORDER IS A DANZA ORDER*/

    TS04W00.TS04W-YSTCD = TSUREC.YSTCD;
    TS04W00.TS04W-XWHCD = "21";

  else

    TSWREC.XXXMODID = "153"; /* Module identification*/
    set TS04M001.TS04MSEL[TS04W-SHIP-ID-SELECTED] cursor, bold;
    converseLib.validationFailed(353); /* ORDER CANNOT BE BALANCED*/
    return;

  end


   /* ------------------------------------------------------------*/
   /* DETERMINE IF ORDER NEEDS TO BE BALANCED*/
   /*  */
   /* ORDER IS NOT BALANCED IF PK-PICK-SCHED-NBR = 0*/
   /*  */
   /* ------------------------------------------------------------*/

  TS04W00.TS04W-CURR-OP-CUST-ORD-ID = 0;

  set TS04W04 empty; /* PACKLIST/ORDERS TABLE*/
  set TS04W05 empty; /* ORDER TABLE*/

  TS04W00.TS04W-INDEX = 0;
  TS04W05.TS04W-ORD-INDEX = 0;
  TS04W00.TS04W-NBR-ORDERS-PER-SHIPMENT = 0;

  TS04-15320(); /* OPEN CURSOR*/

  while (SQLCA.VAGen_SQLCODE == 0
   && converseVar.validationMsgNum == 0) /* NO ERRORS*/
    TS04-15330(); /* READ NEXT DTRANS.VNLPLO01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      TS04-15360(); /* FIGURE THE NUMBER OF ORDERS*/
    end
    if (SQLCA.VAGen_SQLCODE == 0 /* RECORD FOUND*/
     && TSVREC.PK2SCHNO == 0)    /* ORDER NOT POPULATED YET*/
      if (TS04W00.TS04W-XWHCD == " ") /* WAREHOUSE NOT POPULATED YET*/
        TS04W00.TS04W-XWHCD = TSVREC.XWHCD;
      end
      TS04-15340(); /* FILL PACKLIST/ORDER TABLE (W04)*/
    end
  end

  TS04-15350(); /* CLOSE CURSOR*/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  if (TS04W00.TS04W-INDEX == 0) /* orders are balanced*/
    TSWREC.XXXMODID = "153"; /* Module identification*/
    set TS04M001.TS04MSEL[TS04W-SHIP-ID-SELECTED] cursor, bold;
    converseLib.validationFailed(347); /* ORDER ALREADY BALANCED*/

  end

  if (converseVar.validationMsgNum > 0)
    return;
  end

  if (TS04W00.TS04W-NBR-ORDERS-PER-SHIPMENT > 10)

    TSWREC.XXXMODID = "153"; /* Module identification*/
    set TS04M001.TS04MSEL[TS04W-SHIP-ID-SELECTED] cursor, bold;
    converseLib.validationFailed(356); /* TO MANY ORDERS FOR A SHIPMENT*/

  end

  if (converseVar.validationMsgNum > 0)
    return;
  end

  set TS04W06 empty; /* PACKLIST TABLE*/

  TS04W06.TS04W-PL-INDEX = 0;
  TS04W00.TS04W-LAST-PL-INDEX = 0;
  TS04W00.TS04W-MAX-PL-PER-ORDER = 0;

  TS04W05.TS04W-ORD-INDEX = 1;
  TS04W00.TS04W-INDEX = 1;

  while (TS04W05.TS04W-ORD-INDEX <= 10)
    while (TS04W00.TS04W-INDEX <= 60)
      TS04-15370(); /* TEST PACK LISTS PER ORDER*/
      TS04W00.TS04W-INDEX = TS04W00.TS04W-INDEX + 1;
    end
    TS04W05.TS04W-ORD-INDEX = TS04W05.TS04W-ORD-INDEX + 1;
    TS04W00.TS04W-INDEX = 1;
    TS04W00.TS04W-NBR-PL-PER-ORDER = 0;
    set TS04W06 empty; /* PACKLIST TABLE*/
  end


  if (TS04W00.TS04W-MAX-PL-PER-ORDER > 5) /* TO MANY PACKLISTS PER ORDER*/

    TSWREC.XXXMODID = "153"; /* Module identification*/
    set TS04M001.TS04MSEL[TS04W-SHIP-ID-SELECTED] cursor, bold;
    converseLib.validationFailed(355); /* TO MANY PL FOR AN ORDER IN SHIPMENT*/

  end

  if (converseVar.validationMsgNum > 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* DETERMINE IF PICKING IS RUNNING*/
   /* ------------------------------------------------------------*/

  set PWHREC empty;

  PWHREC.XWHCD = TSVREC.XWHCD;

  PWHREC.XXXPGMNO = "PK121S";

  TS04-15380(); /* PROCESS DPICK.VPKGM01*/

  if (PWHREC.XXXCMTCT == 1)

    TSWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(346); /* PICKING IS RUNNING*/
    return;

  end

  PWHREC.XWHCD = "21";

  PWHREC.XXXPGMNO = "PK121R";

  TS04-15380(); /* PROCESS DPICK.VPKGM01*/

  if (PWHREC.XXXCMTCT == 1)

    TSWREC.XXXMODID = "153"; /* Module identification*/
    converseLib.validationFailed(346); /* PICKING IS RUNNING*/
    return;

  end



end // end TS04-15300

// READ DTRANS.VNLSHP01
Function TS04-15310()
   /* ------------------------------------------------------------*/
   /* READ DTRANS.VNLSHP01.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty;

  TSUREC.TSFSHPID = TS04M001.TSFSHPID[TS04W-SHIP-ID-SELECTED];
  TSUREC.KUCCOID = TS04M001.KUCCOID; /* Customer id*/

  try
    call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* SELECT UNIQUE*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ FOR VALIDATE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS04"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/






end // end TS04-15310

// OPEN CURSOR DTRANS.VNLPLO01
Function TS04-15320()
   /* ------------------------------------------------------------*/
   /* READ DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/

  set TSVREC empty;


  TSVREC.TSFSHPID = TS04W02.TSFSHPID; /* For this shipment*/
  TSVREC.KUCCOID = TS04M001.KUCCOID; /* and this customer*/
  TSVREC.TSVPLNBR = -1; /* with all pk list nbrs*/

  if (TS04M001.YSSCD == "IP")
    TSVREC.NIAIVCDT = 0; /* and invoice dates =0*/
  else
    TSVREC.NIAIVCDT = -1; /* all invoice dates*/
  end

  try
    call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/




end // end TS04-15320

// PROCESS DTRANS.VNLPLO01
Function TS04-15330()
   /* ------------------------------------------------------------*/
   /* READ DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ NEXT VNLPLO01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/



end // end TS04-15330

// FILL PL & ORD TABLE (TS04W04)
Function TS04-15340()
   /* ------------------------------------------------------------*/
   /*  */
   /* FILL ORDER/PACKLIST TABLE (TS04W04)*/
   /*  */
   /* ------------------------------------------------------------*/

  TS04W00.TS04W-INDEX = TS04W00.TS04W-INDEX + 1;

  if (TS04W00.TS04W-INDEX > 60)
    return;
  end

  TS04W04.OP1CUOID[TS04W-INDEX] = TSVREC.OP1CUOID;
  TS04W04.OP1NORID[TS04W-INDEX] = TSVREC.OP1NORID;
  TS04W04.TSVPLNBR[TS04W-INDEX] = TSVREC.TSVPLNBR;



end // end TS04-15340

// CLOSE CURSOR DTRANS.VNLPLO01
Function TS04-15350()
   /* ------------------------------------------------------------*/
   /* CLOSE DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("C1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/




end // end TS04-15350

// TEST ORDERS PER SHIPMENT
Function TS04-15360()
   /* ------------------------------------------------------------*/
   /*  */
   /* COUNT THE HIGHEST NBR OF PACKLISTS FOR ANY ORDER IN SHIPMENT*/
   /*  */
   /* COUNT THE NUMBER OF DISTINCT ORDERS IN SHIPMENT*/
   /*  */
   /* ------------------------------------------------------------*/

  TS04W00.OP1CUOID = TSVREC.OP1CUOID;
  TS04W00.OP1NORID = TSVREC.OP1NORID;

  if (TS04W00.TS04W-ORDER-NBR in TS04W05.TS04W-ORDER-NBR)
     /* NEXT SENTENCE*/
  else

    TS04W00.TS04W-NBR-ORDERS-PER-SHIPMENT = TS04W00.TS04W-NBR-ORDERS-PER-SHIPMENT + 1;

    TS04W05.TS04W-ORD-INDEX = TS04W05.TS04W-ORD-INDEX + 1;

    if (TS04W05.TS04W-ORD-INDEX <= 10)
      TS04W05.TS04W-ORDER-NBR[TS04W-ORD-INDEX] = TS04W00.TS04W-ORDER-NBR;
    end
  end


end // end TS04-15360

// TEST PACKLISTS PER ORDER
Function TS04-15370()
   /* ------------------------------------------------------------*/
   /*  */
   /* COUNT THE HIGHEST NBR OF PACKLISTS FOR ANY ORDER IN SHIPMENT*/
   /*  */
   /* ------------------------------------------------------------*/

  if (TS04W04.OP1CUOID[TS04W-INDEX] == 0)
    return;
  end

  TS04W00.OP1CUOID = TS04W04.OP1CUOID[TS04W-INDEX];
  TS04W00.OP1NORID = TS04W04.OP1NORID[TS04W-INDEX];

  if (TS04W00.TS04W-ORDER-NBR == TS04W05.TS04W-ORDER-NBR[TS04W-ORD-INDEX])
     /* NEXT SENTENCE*/
  else
    return;
  end

  if (TS04W04.TSVPLNBR[TS04W-INDEX] in TS04W06.TSVPLNBR
  ) /* NEXT SENTENCE*/
  else

    TS04W00.TS04W-NBR-PL-PER-ORDER = TS04W00.TS04W-NBR-PL-PER-ORDER + 1;

    if (TS04W00.TS04W-NBR-PL-PER-ORDER > TS04W00.TS04W-MAX-PL-PER-ORDER)
      TS04W00.TS04W-MAX-PL-PER-ORDER = TS04W00.TS04W-NBR-PL-PER-ORDER;
    end

    TS04W06.TS04W-PL-INDEX = TS04W06.TS04W-PL-INDEX + 1;

    if (TS04W06.TS04W-PL-INDEX <= 5)
      TS04W06.TSVPLNBR[TS04W-PL-INDEX] = TS04W04.TSVPLNBR[TS04W-INDEX];
    end
  end



end // end TS04-15370

// READ DPICK.VPKGM01
Function TS04-15380()
   /* ------------------------------------------------------------*/
   /* READ DPICK.VPKGM01*/
   /* ------------------------------------------------------------*/

  try
    call "IO4240" ("S ", SQLCA, PWHREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "153"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ COMMIT CNT";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PWHREC.PWHKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/




end // end TS04-15380

// Verify data in the line
Function TS04-15400()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not an "S", indicate*/
   /* that only an "s" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (TS04M001.TS04MSEL[TS04WIXM] != TS04W01.TS04MSEL[TS04WIXM]
   && TS04M001.TS04MSEL[TS04WIXM] != "S") /* and is not a "S"*/

    TSWREC.XXXMODID = "154"; /* Module identification*/
    set TS04M001.TS04MSEL[TS04WIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(13); /* Indicate only "S" may be used*/

  end



end // end TS04-15400

// PROCESS SCHEDULE NBRS
Function TS04-16200()
   /* ------------------------------------------------------------*/
   /* UPDATE SCHEDULE NBRS FOR VNLPLO*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* GET CURRENT TIME AND DATE;*/

  TS04-16210(); /* OPEN CURSOR*/

  while (SQLCA.VAGen_SQLCODE == 0)
    TS04-16220(); /* READ NEXT DTRANS.VNLPLO01*/
    if (SQLCA.VAGen_SQLCODE == 0 /* RECORD FOUND*/
     && TSVREC.PK2SCHNO == 0)    /* order has not been balanced*/
      TSVREC.PK2SCHNO = -10;
      TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
      TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

      TS04-16230(); /* UPDATE DTRANS.VNLPLO01*/
    end
  end

  TS04-16240(); /* CLOSE CURSOR*/

   /* ------------------------------------------------------------*/
   /* GET NEXT SCHEDULE NBR*/
   /* ------------------------------------------------------------*/

  set PKDREC empty; /* Subroutine work area*/

  PKDREC.XWHCD = TS04W00.TS04W-XWHCD; /* WAREHOUSE CODE*/

  TS04-16250(); /* GET SCHEDULE RECORD*/

  TS04W00.TS04W-NEXT-SCHED-NBR = PKDREC.PKDNXSCN * 10;

  PKDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PKDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  PKDREC.PKDNXSCN = PKDREC.PKDNXSCN + 1;

  TS04-16260(); /* UPDATE SCHEDULE RECORD*/





end // end TS04-16200

// OPEN CURSOR DTRANS.VNLPLO01
Function TS04-16210()
   /* ------------------------------------------------------------*/
   /* READ DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/

  set TSVREC empty;


  TSVREC.TSFSHPID = TS04W02.TSFSHPID; /* For this shipment*/
  TSVREC.KUCCOID = TS04M001.KUCCOID; /* and this customer*/
  TSVREC.TSVPLNBR = -1; /* with all pk list nbrs*/

  if (TS04M001.YSSCD == "IP")
    TSVREC.NIAIVCDT = 0; /* and invoice dates =0*/
  else
    TSVREC.NIAIVCDT = -1; /* all invoices*/
  end

  try
    call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/




end // end TS04-16210

// READ NEXT DTRANS.VNLPLO01
Function TS04-16220()
   /* ------------------------------------------------------------*/
   /* READ DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ NEXT VNLPLO01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/



end // end TS04-16220

// UPDATE DTRANS.VNLPLO01
Function TS04-16230()
   /* ------------------------------------------------------------*/
   /* READ DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE VNLPLO01";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/



end // end TS04-16230

// CLOSE CURSOR DTRANS.VNLPLO01
Function TS04-16240()
   /* ------------------------------------------------------------*/
   /* CLOSE DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("C1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/




end // end TS04-16240

// READ SCHEDULE NBR
Function TS04-16250()
   /* ------------------------------------------------------------*/
   /* READ DPICK.VPKCTL01*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "READ SCHED NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/




end // end TS04-16250

// UPDATE SCHEDULE NBR
Function TS04-16260()
   /* ------------------------------------------------------------*/
   /* READ DPICK.VPKCTL01*/
   /* ------------------------------------------------------------*/

  set SQLCA empty;

  try
    call "IO1890" ("U ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* TEST CSP RETURN CODE - ABEND WHEN NON ZERO RETURN CODE.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TSWREC.XXXMODID = "162"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE SCHED NBR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS04M001.CATOAP = "TS03"; /* Exit to MENU*/

  exit stack; /* Exit to display map*/




end // end TS04-16260

// BUILD BALANCE JCL
Function TS04-16300()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TS04W00.TS04W-INDEX = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize JCL table index*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error*/
    exit stack;
  end

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* PROD region*/
    TS04W00.TS04W-INDEX = 1; /* Input table index*/
  else
    if ("/*EOF" in TS04T01.TARJCL) /* TEST region*/
      TS04W00.TS04W-INDEX = sysVar.arrayIndex;
      TS04W00.TS04W-INDEX = TS04W00.TS04W-INDEX + 1; /* Input table index*/
    else
      TS04W00.TS04W-INDEX = 1; /* Input table index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TS04W00.TS04W-INDEX > 0) /* Until end of table*/

    if (TS04T01.TARTYPE[TS04W-INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
      /* Format parameters for the long short for submission*/
      /* ------------------------------------------------------------*/

      set TS04W03 empty; /* Reset parameters work area*/

      TS04W03.XWHCD = TS04W00.TS04W-XWHCD; /* WAREHOUSE CODE*/
      TS04W03.TS04W-PK1PKSCH = TS04W00.TS04W-NEXT-SCHED-NBR;
      TS04W03.TS04W-TSFSHPID = TS04W02.TSFSHPID; /* SHIP ID*/
      TS04W03.TS04W-KUCCOID = TSWREC.KUCCOID; /* COMPANY ID*/
      TS04W03.CAUSERID = COMMAREA.CAUSERID; /* COMMAREA USER ID*/

      TS04T01.TARJCL[TS04W-INDEX] = TS04W03.TARJCL;

    else
      if (TS04T01.TARTYPE[TS04W-INDEX] == "H") /* dsnT/dsnD statement*/

        /* ------------------------------------------------------------*/
        /* Format dsnT/dsnD system statement*/
        /* ------------------------------------------------------------*/

        set TARREC empty;

        TARREC.TARJCL = TS04T01.TARJCL[TS04W-INDEX];

        if (TA3REC.TA3RGNID == "04"
         || TA3REC.TA3RGNID == "08")
          TARRECH.XXX-DSN-SYSTEM = "T"; /* dsnT region*/
        else
          TARRECH.XXX-DSN-SYSTEM = "D"; /* dsnD region*/
        end

        TS04T01.TARJCL[TS04W-INDEX] = TARREC.TARJCL;

      end

    end

    /* ------------------------------------------------------------*/
    /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = TS04T01.TARJCL[TS04W-INDEX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = TS04T01.TARTYPE[TS04W-INDEX]; /* Type*/

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS04T01.TARJCL[TS04W-INDEX] == "/*EOF") /* End of table*/
      TS04W00.TS04W-INDEX = 0; /* Indicate end of table*/
    else
      TS04W00.TS04W-INDEX = TS04W00.TS04W-INDEX + 1;
    end

  end

  TS04-16320(); /* SUBMIT JOB*/



end // end TS04-16300

// SUBMIT JOB
Function TS04-16320()
   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* DON'T notify job completion to user*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Submit the JCL*/
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    TSWREC.XXXMSGNO = 351; /* Indicate job was submitted*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/
    TSWREC.XXXMSGNO = 69; /* Indicate user cancelled*/
  else
    TSWREC.XXXMSGNO = 10; /* Indicate system error*/
  end

  exit stack; /* Exit to display map*/




end // end TS04-16320

// process valid input request
Function TS04-CICS-REG-ID()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end

  return;
                                   /* retn to performing process*/
end // end TS04-CICS-REG-ID

// MAIN PROCESS TO DISPLAY MAPS
Function TS04001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map 1 or map 2*/
   /* depending on function and map requested.*/

   /* 1) If specified, display the shipment summary map.*/
   /* 2) Otherwise, if the shipment detail map is requested :*/
       /* a) If requested function is add, display blank detail*/
             /* for the addition.*/
       /* B) If requested function is change, display detail map*/
             /* set up for changes.  If no change authority*/
             /* exists, but inquiry authority exists display*/
             /* detail with fields non-modifiable.*/
       /* c) If requested function is delete, display detail*/
             /* for deletion.*/
       /* NOTE : In each instance, authority is verified.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/


  if (TS04W00.TS04WSWD == "1") /* Map 1 was requested*/

    /* ------------------------------------------------------------*/
    /* Determine which CICS region this application is executing in.*/
    /* ------------------------------------------------------------*/

  /* XSTAS-CICS-REG-ID;             /* Find CICS region*/
    TS04-CICS-REG-ID(); /* Find CICS region by new method*/

    TS04100(); /* Display map 1 (ship summary)*/

  else

    if (TS04W00.TS04WSWD == "2" /* Map 2 was requested*/
                                
     && TS04W00.TS04WFUN == "A") /* Add a shipment requested*/

      TS04200(); /* Display map 2 (ship detail)*/
              /* with blank screen for add*/
    else

      if (TS04W00.TS04WSWD == "2" /* Map 2 was requested*/
       && TS04W00.TS04WFUN == "C") /* change a shipment requested*/

        TS04300(); /* Display map 2 (ship detail)*/
                                  /* with update capabilities*/
      else

        if (TS04W00.TS04WSWD == "2" /* Map 2 was requested*/
         && TS04W00.TS04WFUN == "D") /* delete a shipment requested*/

          TS04400(); /* Display map 2 (ship detail)*/
                  /* for a delete (no modifications)*/
        else

          if (TS04W00.TS04WSWD == "2" /* Map 2 was requested*/
           && TS04W00.TS04WFUN == "I") /* inquiry only*/

            TS04300(); /* Display map 2 (ship detail)*/
                                  /* with no update capabilities*/
          else


            /* ------------------------------------------------------------*/
             /* Write the error to the Error Diagnosis Reporting Facility.*/

            /* ------------------------------------------------------------*/


            TSWREC.XXXMODID = "001"; /* Module id*/
            TSWREC.XXXMSGNO = 10;
                                   /* Indicate sys error*/

            TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
            TA1REC.TA1TYPE = "APPL"; /* Type of error*/
            TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
            TA1REC.TA1MAPNO = TS04W00.TS04WSWD; /* Map number*/
            TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Pg appl*/
            TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/

            call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
                                   /* Error diag routine*/


            /* ------------------------------------------------------------*/
             /* Exit to display the application system menu.*/

            /* ------------------------------------------------------------*/

            COMMAREA.CATOAP = "TS03"; /* TO application*/

            XSTSS02(); /* Exit to another application*/


            /* ------------------------------------------------------------*/
             /* Abnormally terminate the transaction if the exit failed.*/

            /* ------------------------------------------------------------*/

            TA1REC.TA1FUNC = "ABND"; /* Termination function*/

            call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

          end

        end

      end

    end

  end
end // end TS04001

// DISPLAY SHIPMENT SUMMARY
Function TS04100()

   /* ------------------------------------------------------------*/
   /* This is the process used to display the shipment summary*/
   /* map (TS04M001).*/
   /* ------------------------------------------------------------*/


  TS04110(); /* Obtain the data to display*/

  TS04120(); /* Format and display the map*/

  TS04130(); /* Check attention identifier*/

  TS04140(); /* Reset fields to normal intensity*/

  TS04150(); /* Verify the entered data*/

  TS04160(); /* Process valid input request*/


end // end TS04100

// Obtain the data to display
Function TS04110()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS04W00.TS04WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

  TS04W00.XXXTSPAG = 0; /* Current page*/
  TS04W00.TA5TSQIX = 0; /* Initialize highest page*/


   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS04W00.XXXTSLEN = 900; /* temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/

  TS04S01(); /* Purge temporary storage*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  TS04111(); /* Select set and open the cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages.*/
   /* ------------------------------------------------------------*/

  while (TS04W00.TS04WSWC == "N") /* Until cursor end of file*/

    TS04112(); /* Fetch selected rows*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (TS04W00.TS04WIXM > 15) /* Page is full*/
      TS04113(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (TS04W00.TS04WIXM > 1) /* If a page was formatted*/
    TS04113(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  TS04114(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (TS04W00.TA5TSQIX == 0) /* No pages formatted*/

    TSWREC.XXXMODID = "110"; /* Module identification*/
    TSWREC.XXXMSGNO = 21; /* Indicate no data to display*/
     /* make sure kuccoid being passed is the one from the map*/
    TSWREC.KUCCOID = TS04M001.KUCCOID;
    set TS04M001.KUCCOID cursor, bold; /* Highlight key/ set cursor*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO == 0) /* No message to display*/
    TS04W00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* If a page has been saved, then use it as requested page.*/
   /* ------------------------------------------------------------*/

  if (TS04W00.TS04WSVP > 0) /* Page has been saved*/
    TS04W00.XXXTSPAG = TS04W00.TS04WSVP;
  end

   /* ------------------------------------------------------------*/
   /* Indicate request for data is complete*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WSWR = "N"; /* Request for data switch*/


end // end TS04110

// Select set and open cursor
Function TS04111()

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty; /* Clear row storage area*/

  TSUREC.KUCCOID = TS04M001.KUCCOID; /* Customer to find*/
  TS04W00.KUCCOID = TS04M001.KUCCOID; /* Save current customer*/

  if (TS04M001.YSSCD != "  ") /* Status code present*/
    if (TS04M001.YSSCD in YSSTBL.YSSCD) /* Status in table*/
      if (YSSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and it is active*/
         /* next sentence*/
      else
        TSWREC.XXXMODID = "111"; /* Module identification*/
        converseLib.validationFailed(236); /* Status is inactive*/
        set TS04M001.YSSCD cursor, bold; /* Position cursor*/
        exit stack; /* Redisplay map*/
      end
    else
      TSWREC.XXXMODID = "111";
                                   /* Module identification*/
      converseLib.validationFailed(158); /* Status is invalid*/
      set TS04M001.YSSCD cursor, bold; /* Position cursor*/
      exit stack; /* Redisplay map*/
    end
  end /* Status eq ' ' is valid*/

  TSUREC.YSSCD = TS04M001.YSSCD; /* Status to find*/
  TS04W00.YSSCD = TS04M001.YSSCD; /* Save current status*/

  try
    call "IO4690" ("S1", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, intialize the line index and cursor switch*/
   /* and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS04W00.TS04WIXM = 1; /* Display line index*/
    TS04W00.TS04WSWC = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate no available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04111

// Fetch next row and format
Function TS04112()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* ------------------------------------------------------------*/

  call "IO4690" ("N1", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS04W00.TS04WSWC = "Y"; /* Indicate end of cursor*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      /* ------------------------------------------------------------*/
        /* If specific status is requested, check for match in*/
        /* the dclgen; otherwise, accept all returned rows.*/
      /* ------------------------------------------------------------*/

      if (TS04W00.YSSCD != " ") /* Specific status requested*/
        if (TSUREC.YSSCD == TS04W00.YSSCD) /* Match on requested status*/

          TS04S02(); /* Save tsurec data*/

          TS04S03(); /* Obtain origin description*/

          TS04W00.TS04WIXM = TS04W00.TS04WIXM + 1; /* Increment line index*/

          return; /* Return to previous process*/

        else

          return; /* Return to fetch the next row*/

        end
      else /* All status codes requested*/

        TS04S02(); /* Save tsurec data*/

        TS04S03(); /* Obtain origin description*/

        TS04W00.TS04WIXM = TS04W00.TS04WIXM + 1; /* Increment line index*/

        return; /* Return to previous process*/

      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT ROW AND FORMAT";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04112

// Add page to temporary storage
Function TS04113()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS04W01.XXXTSLEN = TS04W00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, save the page number, reset the line number,*/
   /* initialize the record work area and return.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS04W01 empty; /* Clear temporary storage record*/

    TS04W00.TS04WIXM = 1; /* Reset display line index*/

    TS04W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* Csp return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "113"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04113

// Close selected set cursor
Function TS04114()

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4690" ("C1", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04114

// Format and converse the map
Function TS04120()

   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/

    if (TS04W00.TS04WSWF == "Y") /* Map must be formatted*/
      TS04121(); /* Format the data on the map*/
    end

  else

    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS04M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS04M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS04M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If user has authority to add shipments, format the PF*/
   /* add literal field and set it to normal (default is dark).*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAADDFL == "Y") /* Authority to add*/
    TS04M001.TS04MPFA = "2:ADD"; /* PF key for additions (PF2)*/
  else
    TS04M001.TS04MPFA = "     ";
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/
      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TS04M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    TS04M001.XXXMODID = TSWREC.XXXMODID; /* Module identification*/

    set TS04M001 alarm; /* Indicate sound alarm*/

  end

  if (TS04M001.KUCCOID <= 0 /* Customer missing*/
   && converseVar.validationMsgNum == 0)
    set TS04M001.KUCCOID cursor; /* Position cursor at cust*/
    converseLib.validationFailed(233);
                                   /* Ask user to enter customer*/
  end

  if (TS04W00.TA5TSQIX <= 0               /* No pages formatted*/
   && converseVar.validationMsgNum != 236 /* and no status msgs*/
   && converseVar.validationMsgNum != 237)
    set TS04M001.KUCCOID cursor; /* Position cursor at cust*/
  end

  converse TS04M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/


  COMMAREA.CATOAP = TS04M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS04M001.CAITEM; /* Application data*/


end // end TS04120

// Format data for map 1
Function TS04121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS04M001 initial; /* M001 input/output area*/

  TS04W00.TS04WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS04W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS04W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (TS04W00.TS04WSWU == "Y") /* Current page was changed*/

        TS04S04(); /* Update temporary storage page*/

        TS04W00.TS04WSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS04W00.XXXTSPAG > TS04W00.TA5TSQIX) /* Desired > highest*/
        TS04W00.XXXTSPAG = TS04W00.TA5TSQIX; /* Default to highest*/
      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is less than the lowest page*/
       /* in storage, default to the lowest page number.*/
      /* ------------------------------------------------------------*/

      if (TS04W00.XXXTSPAG < 1) /* desired less than lowest*/
        TS04W00.XXXTSPAG = 1; /* Default to lowest*/
      end

      TS04S05(); /* Obtain temp storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TS04M001.XXXLITPG = "PAGE"; /* Reset map literal*/
    TS04M001.XXXLITOF = "OF"; /* Reset map literal*/
    set TS04M001.XXXLITPG skip; /* "PAGE" literal*/
    TS04M001.XXXTSPAG = TS04W00.XXXTSPAG; /* Current page*/
    set TS04M001.XXXLITOF skip; /* "OF" literal*/
    TS04M001.TA5TSQIX = TS04W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS04M001.KUCCOID = TS04W00.KUCCOID; /* Customer ID*/
  TS04M001.YSSCD = TS04W00.YSSCD; /* Shipment status*/

  TS04W00.TS04WIXM = 1; /* Initialize line index*/

  while (TS04W00.TS04WIXM <= 15 /* Until screen is full*/
   && TS04W01.TSFSHPID[TS04WIXM] > 0) /* or end of data*/

    if (TS04W00.TS04WIXM == 1 /* First line*/
     && TS04W01.TSFSHPID[TS04WIXM] > 0) /* and data present*/

      set TS04M001.TS04MSEL[TS04WIXM] cursor, normal; /* Position cursor*/

    else
      set TS04M001.TS04MSEL[TS04WIXM] normal; /* Unprotect*/

    end

    TS04M001.TS04MSEL[TS04WIXM] = TS04W01.TS04MSEL[TS04WIXM];

    TS04M001.TSFSHPID[TS04WIXM] = TS04W01.TSFSHPID[TS04WIXM];
    TS04M001.TSUBOL[TS04WIXM] = TS04W01.TSUBOL[TS04WIXM];
    TS04M001.TSACARCD[TS04WIXM] = TS04W01.TSACARCD[TS04WIXM];
    TS04M001.TS5CRAFT[TS04WIXM] = TS04W01.TS5CRAFT[TS04WIXM];
    TS04M001.TSUNLSHP[TS04WIXM] = TS04W01.TSUNLSHP[TS04WIXM];
    TS04M001.TSEORIG[TS04WIXM] = TS04W01.TSEORIG[TS04WIXM];
    TS04M001.TS04MCTY[TS04WIXM] = TS04W01.TS04MCTY[TS04WIXM];

    TS04W00.TS04WIXM = TS04W00.TS04WIXM + 1; /* Increment line index*/

  end


end // end TS04121

// Check attention identifier
Function TS04130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (TS04W00.TS04WSWR == "Y") /* Request for data*/
      set TS04W01 empty; /* M001 display storage*/
    end

    TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
    TS04W00.TS04WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (TS04M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TSWREC.KUCCOID = TS04M001.KUCCOID; /* Pass current customer*/
      TSWREC.YSSCD = TS04M001.YSSCD; /* Pass status*/

      TS04S01(); /* Purge temporary storage*/

      XSTSS02(); /* Exit to another application*/

      set TS04M001.CATOAP cursor, bold; /* Highlight*/

    else

      TSWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5);
                                   /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS04M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "TS03"; /* TO application*/
    end

    TS04S01(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    /* --------------------------*/
     /* check add authority*/
    /* --------------------------*/
    if (converseVar.eventKey is pf2) /* and PF2 was pressed*/
      if (COMMAREA.CAADDFL == "N") /* add authority not granted*/
        converseLib.validationFailed(6);
        exit stack; /* Exit to display map*/
      end
    end

    /* --------------------------*/
     /* check chg/inq authority*/
    /* --------------------------*/
    if (converseVar.eventKey is pf5) /* Chg/Inq requested*/
      if (COMMAREA.CACHGFL != "Y" /* Chg authority not granted*/
       && COMMAREA.CAINQFL != "Y") /* Inq authority not granted*/
        converseLib.validationFailed(6);
        TSWREC.XXXMODID = "130"; /* Module identification*/
        exit stack; /* Exit to display map*/
      end
    end

    /* --------------------------*/
     /* check delete authority*/
    /* --------------------------*/
    if (converseVar.eventKey is pf6) /* Delete requested*/
      if (COMMAREA.CADELFL != "Y") /* Del authority not granted*/
        converseLib.validationFailed(6);
        TSWREC.XXXMODID = "130"; /* Module identification*/
        exit stack; /* Exit to display map*/
      end
    end

    /* --------------------------*/
     /* check BUILD INVOICE AUTHORITY*/
    /* --------------------------*/
    if (converseVar.eventKey is pf12) /* BUILD SHIPREC RECORDS*/
      if (COMMAREA.CACHGFL != "Y") /* CHG authority not granted*/
        converseLib.validationFailed(6);
        TSWREC.XXXMODID = "130"; /* Module identification*/
        exit stack; /* Exit to display map*/
      end
    end

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf2   /* and PF2 was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf6   /* and PF6 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    TSWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS04130

// Reset highlighted fields
Function TS04140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS04M001.KUCCOID initialAttributes; /* Customer id*/

  TS04W00.TS04WIXM = 1; /* Initialize line index*/

  while (TS04W00.TS04WIXM <= 15 /* Until end of lines*/
   && TS04M001.TSFSHPID[TS04WIXM] > 0) /* or end of display*/

    set TS04M001.TS04MSEL[TS04WIXM] normal; /* Reset select flag*/

    TS04W00.TS04WIXM = TS04W00.TS04WIXM + 1; /* Increment line index*/

  end

  set TS04M001.CATOAP initialAttributes; /* TO application*/
  set TS04M001.CAITEM initialAttributes; /* Application data*/


end // end TS04140

// Verify the entered data
Function TS04150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (TS04M001.CAITEM > " ") /* Application data was entered*/

    TSWREC.XXXMODID = "150"; /* Module identification*/
    set TS04M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  if (converseVar.eventKey is pf12)
   /* NEXT SENTENCE*/
  else
    TS04W00.TS04W-PF12-CONFIRM-FLAG = "N";
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || TS04M001.XXXTSPAG != TS04W00.XXXTSPAG) /* or page nbr chgd*/

    TS04151(); /* Verify scroll request*/

  else
    /* ------------------------------------------------------------*/
    /* Verify that the customer ID and status are valid.*/
    /* If not, redisplay map with appropriate message.*/
    /* ------------------------------------------------------------*/

    if (TS04M001.KUCCOID <= 0 /* Customer id missing*/
     && converseVar.eventKey not pf2) /* and add not requested*/
      TSWREC.XXXMODID = "150"; /* Module identification*/
      converseLib.validationFailed(161); /* Indicate missing or invalid*/
      set TS04M001.KUCCOID cursor, bold; /* Highlight*/
    end

    if (TS04M001.YSSCD != " ") /* Specific status requested*/
      if (TS04M001.YSSCD in YSSTBL.YSSCD) /* Status in table*/
        if (YSSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Status is active*/
           /* next sentence*/
        else
          converseLib.validationFailed(236); /* Status inactive*/
          TSWREC.XXXMODID = "150"; /* Module identification*/
          set TS04M001.YSSCD cursor, bold; /* Position cursor*/
        end
      else
        TSWREC.XXXMODID = "150"; /* Module identification*/
        converseLib.validationFailed(237); /* Status invalid*/
        set TS04M001.YSSCD cursor, bold; /* Position cursor*/
      end
    end /* Blank status valid*/
    /* ------------------------------------------------------------*/
    /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/
    /* ------------------------------------------------------------*/
    /* If PF12 IS VALID ONLY IF WAREHOUSE IS DANZAS*/
    /* VALIDATE CONDITIONS WHEN WAREHOUSE IS DANZAS*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf12)
      if (TS04W00.TA5TSQIX > 0) /* Page was formatted*/

        TS04W00.TS04WIXM = 15; /* Initialize line index*/

        TS04W00.TS04W-SHIP-ID-SELECTED = 0;

        while (TS04W00.TS04WIXM > 0) /* Until end of lines*/

          TS04-15200(); /* Verify data in the line*/

          TS04W00.TS04WIXM = TS04W00.TS04WIXM - 1; /* DECREMENT LINE CTR*/

        end
        if (TS04W00.TS04W-SHIP-ID-SELECTED == 0)
          TSWREC.XXXMODID = "150"; /* Module identification*/
          converseLib.validationFailed(352); /* INVALID PFKEY*/
        end
      end
      if (converseVar.validationMsgNum == 0)
        TS04W00.TS04W-YSTCD = " ";
        TS04-15300(); /* VALIDATE SHIPMENT*/
        if (TS04W00.TS04W-YSTCD == "DZ")
          TSWREC.KUCCOID = TS04M001.KUCCOID;
        end
      end
    else

      if (TS04W00.TA5TSQIX > 0) /* Page was formatted*/

        TS04W00.TS04WIXM = 15; /* Initialize line index*/

        while (TS04W00.TS04WIXM > 0) /* Until end of lines*/

          TS04-15400(); /* Verify data in the line*/

          TS04W00.TS04WIXM = TS04W00.TS04WIXM - 1;
                                   /* Decrement line number*/

        end

      end

    end

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    TS04W00.TS04W-PF12-CONFIRM-FLAG = "N";
    exit stack; /* Exit to display map*/
  end


end // end TS04150

// Verify scroll request
Function TS04151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS04W00.XXXTSPAG < 2)       /* and no previous pages*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS04W00.XXXTSPAG >= TS04W00.TA5TSQIX) /* and no more pages*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WIXM = 15; /* Initialize line index*/

  while (TS04W00.TS04WIXM > 0) /* Until end of lines*/

    if (TS04M001.TS04MSEL[TS04WIXM] != TS04W01.TS04MSEL[TS04WIXM])

      TSWREC.XXXMODID = "151"; /* Module identification*/
      set TS04M001.TS04MSEL[TS04WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    TS04W00.TS04WIXM = TS04W00.TS04WIXM - 1; /* Decrement line number*/

  end

  if (TS04M001.KUCCOID != TS04W00.KUCCOID) /* Customer id changed*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS04M001.KUCCOID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS04M001.YSSCD != TS04W00.YSSCD) /* Shipment status changed*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS04M001.YSSCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end


end // end TS04151

// Process valid input request
Function TS04160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WSWF = "Y"; /* Format the map switch*/

  TS04W00.TS04WSVP = 0; /* Initialize save page*/

   /* ------------------------------------------------------------*/
    /* If PF2 was pressed, process request to add a shipment*/
    /* using fields on map 2.  Check first to allow addition*/
    /* before entering a valid customer on map 1.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf2) /* Request shipment addition*/
    TS04161(); /* Setup for shipment addition*/
  end

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (TS04M001.KUCCOID != TS04W00.KUCCOID /* Customer changed*/
   || TS04M001.KUCCOID <= 0               /* Customer missing*/
   || TS04M001.YSSCD != TS04W00.YSSCD)    /* Status changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
     /* Otherwise, purge any existing pages from temporary storage.*/
    /* ------------------------------------------------------------*/

    if (TS04M001.KUCCOID > 0) /* Customer ID entered*/

      TS04W00.TS04WSWR = "Y"; /* Request for data switch*/
      TS04W00.KUCCOID = TS04M001.KUCCOID; /* Save current customer*/
      TS04W00.YSSCD = TS04M001.YSSCD; /* Save current status*/

    else

      TS04W00.TS04WSWR = "N"; /* Request for data switch*/

      TS04S01(); /* Purge any temporary storage*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TS04W00.XXXTSPAG = TS04W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    TS04W00.XXXTSPAG = TS04W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If BALANCE ORDER    was requested, BUILD JCL AND SUBMIT JOB*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12) /* Create Balanced Ship Rec requested*/

    if (TS04W00.TS04W-PF12-CONFIRM-FLAG == "Y")

      TS04-16200(); /* PROCESS SCHEDULE NBRS*/

      TS04-16300(); /* BUILD JCL*/

      TS04W00.TS04W-PF12-CONFIRM-FLAG = "N";

      return; /* Return to previous process*/

    else

      TSWREC.XXXMODID = "160"; /* Module identification*/
      converseLib.validationFailed(348); /* PRESS PF12 TO CONFIRM*/
      TS04W00.TS04W-PF12-CONFIRM-FLAG = "Y";

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If a request for a new page was entered, save the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS04M001.XXXTSPAG != TS04W00.XXXTSPAG) /* if page nbr changed*/

    TS04W00.XXXTSPAG = TS04M001.XXXTSPAG; /* save page nbr*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WIXM = 1; /* Initialize line index*/

  while (TS04W00.TS04WIXM <= 15) /* Until end of lines*/

    if (TS04M001.TS04MSEL[TS04WIXM] != TS04W01.TS04MSEL[TS04WIXM])

      TS04W01.TS04MSEL[TS04WIXM] = TS04M001.TS04MSEL[TS04WIXM];
      TS04W00.TS04WSWU = "Y"; /* Storage update switch*/

    end

    TS04W00.TS04WIXM = TS04W00.TS04WIXM + 1; /* Increment line index*/

  end

  if ("S" in TS04W01.TS04MSEL) /* Line was selected*/

    TS04W00.TS04WIXM = sysVar.arrayIndex; /* Map line index*/

    TS04W00.TS04WSVP = TS04W00.XXXTSPAG; /* Save current page*/

    /* ------------------------------------------------------------*/
     /* If a line was selected and the enter key pressed, move*/
     /* key data to TSWREC and exit to TS05 (pk list summary).*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is enter) /* Request pk list summary*/
      TS04164(); /* Setup exit to TS05*/
      XSTSS02(); /* Exit to another application*/
    end

    /* ------------------------------------------------------------*/
     /* If a line was selected and PF5 was pressed, set up request*/
     /* to make a change or inquiry on a shipment on map 2.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf5) /* Request shipment chg/inq*/
      TS04165(); /* Setup for shipment chg/inq*/
    end

    /* ------------------------------------------------------------*/
     /* If a line was selected and PF6 was pressed, set up request*/
     /* to delete a shipment on map 2.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf6) /* Request shipment delete*/

      TS04167(); /* Check for assoc. packing lists*/

      if (SQLCA.VAGen_SQLCODE == 0 /* Assoc. packing list found*/
       || SQLCA.VAGen_SQLCODE == -811) /* Multiple packing lists found*/
        converseLib.validationFailed(387);
        TSWREC.XXXMODID = "160";
        set TS04M001.TS04MSEL[TS04WIXM] cursor, bold;
        return;
      else
        TS04166(); /* Setup for shipment delete*/
      end
    end

  else
      /* If line not selected and ENTER pressed, ask for selection*/

    if (converseVar.eventKey is enter /* Pack list summary*/
     || converseVar.eventKey is pf5   /* Change or inquiry*/
     || converseVar.eventKey is pf6)  /* Delete*/
      if (TS04W00.TA5TSQIX > 0) /* If data is present*/
        converseLib.validationFailed(053); /* Please 's'elect line*/
        TSWREC.XXXMODID = "160"; /* Module identification*/
      end
    end
  end


end // end TS04160

// Set up to add a new shipment
Function TS04161()
   /* ------------------------------------------------------------*/
    /* Set up to display map 2 (shipment detail) for user*/
    /* to add a new shipment.*/
   /* ------------------------------------------------------------*/

  if (TS04M001.KUCCOID <= 0) /* Customer missing*/
    set TS04M001.KUCCOID cursor, bold; /* Position cursor*/
    converseLib.validationFailed(161); /* Indicate customer missing*/
    exit stack; /* Redisplay map*/
  end

  if (COMMAREA.CAADDFL == "Y") /* Add authority exists*/

    TS04W00.TS04WSWD = "2"; /* Map 2 requested*/
    TS04W00.TS04WFUN = "A"; /* Add function is requested*/
    TS04W00.TS04WSWR = "N"; /* Request for data switch*/
    TS04W00.TS04WSWF = "Y"; /* Format the map switch*/

    set TS04W02 empty; /* Init map 2 display storage*/
    TS04W02.KUCCOID = TS04M001.KUCCOID; /* Pass current customer*/
    TS04W00.TSACARNM = " "; /* Initialize desc save areas*/
    TS04W00.TS5NAME = " ";

  else /* Otherwise no authority to add*/

    converseLib.validationFailed(6); /* Cannot access this application*/
    TSWREC.XXXMODID = "161"; /* Module identification*/
    exit stack; /* Redisplay map with message*/

  end


end // end TS04161

// Set up for exit to TS05
Function TS04164()
   /* ------------------------------------------------------------*/
   /* Set up to process request for packing list summary for*/
   /* selected shipment.  Pass key data in common rec and*/
   /* exit to to TS05 ( the packing list summary application ).*/
   /* Authorization check not required before transfer.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "TS05"; /* TO application*/

  TS04S01();
                                   /* Purge temp storage*/

  TSWREC.KUCCOID = TS04M001.KUCCOID; /* Pass cust id*/
  TSWREC.YSSCD = TS04M001.YSSCD; /* Pass ship status*/
  TSWREC.TSFSHPID = TS04M001.TSFSHPID[TS04WIXM]; /* Pass ship id*/
  TSWREC.TSWPLFLG = "S"; /* pass select switch*/
  if (TS04M001.YSSCD != "IP")
    TSWREC.TSWIVPFL = "Y"; /* select all packing lists for shipment*/
  end

  XSTSS02();
                                   /* Exit to application*/


end // end TS04164

// Set up for shipment chg/inq
Function TS04165()
   /* ------------------------------------------------------------*/
    /* Set up to process request for change or inquiry against*/
    /* a selected shipment.  Verify authority for the function.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* Change authority exists*/
   || COMMAREA.CAINQFL == "Y") /* or Inquiry authority exists*/

    /* ------------------------------------------------------------*/
       /* Save key data of selected shipment in appl work storage*/
      /* for either change or inquiry.*/
    /* ------------------------------------------------------------*/

    TS04W00.KUCCOID = TS04M001.KUCCOID; /* Pass customer id*/
    TS04W00.TSFSHPID = TS04M001.TSFSHPID[TS04WIXM]; /* Shipment id*/

    if (COMMAREA.CACHGFL == "Y") /* Change authority exists*/

      /* ------------------------------------------------------------*/
       /* User may access the detail menu with change option*/
      /* ------------------------------------------------------------*/

      TS04W00.TS04WSWD = "2"; /* Map 2 requested*/
      TS04W00.TS04WFUN = "C"; /* Change function*/
      TS04W00.TS04WSWR = "Y"; /* Request for data switch*/


      /* ------------------------------------------------------------*/
       /* Set fields modifiable before converse to map 2.*/
       /* Fields will be reset on map 2 only for change authority,*/
       /* not for inquiry.*/
      /* ------------------------------------------------------------*/

      set TS04M002.TSFSHPID initialAttributes; /* Shipment id*/
      set TS04M002.KUCCOID normal; /* Customer*/
      set TS04M002.TSUBOL normal; /* Bill of lading*/
      set TS04M002.TSUMAWB normal; /* Mawb*/
      set TS04M002.TSACARCD normal; /* Carrier code*/
      set TS04M002.TSACARNM normal; /* Carrier desc*/
      set TS04M002.TS5CRAFT normal; /* Craft code*/
      set TS04M002.TS5NAME normal; /* Craft desc*/
      set TS04M002.TSUNLSHP normal; /* Shipment number*/
      set TS04M002.TSEORIG normal; /* Port of load loc*/
      set TS04M002.TS-EXPT-LOC-CD normal; /* export location*/
      set TS04M002.TSUFCTY normal; /* Factory loc*/
      set TS04M002.TSUCNSLD normal; /* Consolidation loc*/
      set TS04M002.TSFDSCHG normal; /* Discharge loc*/
      set TS04M002.YMTCD initialAttributes; /* Mode code*/
      set TS04M002.TSFDPRTA normal; /* Departure date*/
      set TS04M002.TSFRELDT normal; /* Whse release date*/
      set TS04M002.TSUCNSDT normal; /* ETA cnsldtn date*/
      set TS04M002.TSFDSCHE normal; /* ETA dischrg date*/
      set TS04M002.TSFDWBK normal; /* Drawback*/
      set TS04M002.YSTCD normal; /* Shipment type code*/
      set TS04M002.YPYCD normal; /* Payment type code*/
      set TS04M002.YSSCD initialAttributes; /* Shipment status code*/
      set TS04M002.TSFSTADT initialAttributes; /* Status date*/
      set TS04M002.OP1FTIND normal; /* Frgt PPD*/
      set TS04M002.OP1IPIND normal; /* Insur PPD*/
      set TS04M002.TSFOFRGT normal; /* Freight charge*/
      set TS04M002.TSFOINLD normal; /* Inland charge*/
      set TS04M002.TSUSHPQT initialAttributes; /* Total shipped units*/
      set TS04M002.TSUNSPCM normal; /* Total shipment vol*/
      set TS04M002.TSUNSPKG normal; /* Total shipment weight*/
      set TS04M002.NIESHPTC normal; /* Total shipment cartons*/


    else /* Inquiry authority exists*/

      /* ------------------------------------------------------------*/
       /* User may access the detail menu with inquiry option only*/
      /* ------------------------------------------------------------*/

      TS04W00.TS04WSWD = "2"; /* Map 2 requested*/
      TS04W00.TS04WFUN = "I"; /* Inquiry function*/
      TS04W00.TS04WSWR = "Y"; /* Request for data switch*/

      set TS04M002 initial;

    end

  else /* No authority for chg or inq*/

    TSWREC.XXXMODID = "163"; /* Module identification*/
    converseLib.validationFailed(6); /* Cannot access this application*/
    exit stack; /* Redisplay map with message*/

  end

end // end TS04165

// Set up to delete a shipment
Function TS04166()
   /* ------------------------------------------------------------*/
    /* If authority exists to delete a shipment, set up*/
    /* to process request to delete, otherwise inform*/
    /* user that they cannot access this function.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CADELFL == "Y") /* Delete authority exists*/

    TS04W00.TS04WSWD = "2"; /* Map 2 requested*/
    TS04W00.TS04WFUN = "D"; /* Delete function requested*/
    TS04W00.TS04WSWR = "Y"; /* Request for data*/

    /* ------------------------------------------------------------*/
      /* Save key data of selected shipment in appl work storage*/
    /* ------------------------------------------------------------*/

    TS04W00.KUCCOID = TS04M001.KUCCOID;
    TS04W00.TSFSHPID = TS04M001.TSFSHPID[TS04WIXM];

  else /* Delete authority missing*/

    TSWREC.XXXMODID = "164"; /* Module identification*/
    converseLib.validationFailed(6); /* No authority for deletion*/
    exit stack; /* Redisplay map with message*/

  end

end // end TS04166

// Customer validation
Function TS04167()

   /* ------------------------------------------------------------*/
    /* Check to see if there is a packing list for the shipping*/
    /* header. (dtrans.vnlplo01)*/
   /* ------------------------------------------------------------*/

  set TSVREC empty;
  TSVREC.TSFSHPID = TS04M001.TSFSHPID[TS04WIXM];

  try
    call "IO4700" ("SS", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Pack list found*/
     || SQLCA.VAGen_SQLCODE == 100 /* or pack list not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one pack list found*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "167"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M001 empty; /* Clear screen/save attributes*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04167

// DISPLAY DETAIL/ADD SHIPMENT
Function TS04200()

   /* This is the process used to display the detail shipment*/
   /* map (m001) for shipment additions.*/


  TS04210(); /* Obtain the data to display*/

  TS04220(); /* Format and display the map*/

  TS04230(); /* Check attention identifier*/

  TS04240(); /* Reset fields to normal intensity*/

  TS04250(); /* Verify the entered data*/

  TS04260(); /* Process valid input request*/


end // end TS04200

// Obtain the data to display
Function TS04210()

   /* ------------------------------------------------------------*/
   /* If an error was found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* An error has occured*/
    return; /* Return to previous process*/
  end

  set TS04M002 initial; /* Detail map*/

   /* ------------------------------------------------------------*/
    /* Set detail map fields modifiable, if applicable.*/
   /* ------------------------------------------------------------*/

  set TS04M002.TSFSHPID initialAttributes; /* Shipment id*/
  set TS04M002.KUCCOID normal; /* Customer*/
  set TS04M002.TSACARCD normal; /* Carrier*/
  set TS04M002.TSACARNM normal; /* Carrier description*/
  set TS04M002.TS5CRAFT normal; /* Craft*/
  set TS04M002.TS5NAME normal; /* Craft description*/
  set TS04M002.TSUBOL normal; /* Bill of lading*/
  set TS04M002.TSUNLSHP normal; /* Shipment*/
  set TS04M002.TSUMAWB normal; /* MAWB*/
  set TS04M002.TSEORIG normal; /* Origin location*/
  set TS04M002.TSUFCTY normal; /* Factory location*/
  set TS04M002.TS-EXPT-LOC-CD normal; /* Export location*/
  set TS04M002.YMTCD initialAttributes; /* Transportation mode*/
  set TS04M002.TSUCNSLD normal; /* Consolidation location*/
  set TS04M002.TSUCNSDT normal; /* ETA cnsldtn*/
  set TS04M002.TSFDSCHE normal; /* ETA dischrg*/
  set TS04M002.TSFDPRTA normal; /* Departure date*/
  set TS04M002.TSFDSCHG normal; /* Discharge date*/
  set TS04M002.TSFRELDT normal; /* Release date*/
  set TS04M002.YSTCD normal; /* Shipment type*/
  set TS04M002.YPYCD normal; /* Payment type*/
  set TS04M002.TSFDWBK normal; /* Drawback*/
  set TS04M002.OP1FTIND normal; /* Freight PPD*/
  set TS04M002.OP1IPIND normal; /* Insur PPD*/
  set TS04M002.TSFOFRGT normal; /* Freight charge*/
  set TS04M002.TSFOINLD normal; /* Inland charge*/
  set TS04M002.TSUSHPQT initialAttributes; /* Total units*/
  set TS04M002.TSUNSPCM normal; /* Total volume*/
  set TS04M002.NIESHPTC normal; /* Total cartons*/
  set TS04M002.TSUNSPKG normal; /* Total weight*/

   /* ------------------------------------------------------------*/
   /* Set up the default and non-modifiable data for a*/
   /* shipment addition.*/
   /* ------------------------------------------------------------*/

   /* -------------------*/
    /* SHIPMENT ID*/
   /* -------------------*/
   /* Obtain the next SHIP ID from DTRANS.VTSCTL01.*/

  set TSQREC empty; /* Clear dclgen*/
  try
    call "IO2530" ("G ", SQLCA, TSQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Get SHIP ID*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Control row accessed*/

      TS04W02.TSFSHPID = TSQREC.TSQNBRNX; /* Next SHIP ID*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      TS04W00.TS04WSWR = "Y"; /* request for data switch*/
      TSWREC.XXXMODID = "210"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* data was updated by another user*/

      exit stack;

    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

    TS04W00.TS04WSWD = "1"; /* Map 1 requested*/
    TS04W00.TS04WSWR = "Y"; /* Request for data switch*/
    TS04W00.TS04WSWF = "Y"; /* Format the data switch*/

    exit stack; /* Exit to redisplay map 1*/

  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Row was not found*/

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      set TS04M002 empty; /* Clear screen/save attributes*/
    end
  end

  if (converseVar.validationMsgNum == 11 /* Resource unavailable*/
   || converseVar.validationMsgNum == 10) /* or System error*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TSWREC.XXXMODID = "210"; /* Module identification*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "GET NEXT SHIP ID";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCTL01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to redisplay map*/

  end


   /* -------------------*/
    /* CUSTOMER*/
   /* -------------------*/

  TS04M002.KUCCOID = TS04W02.KUCCOID; /* Map 2 customer*/

  set KUCREC empty; /* Initialize dclgen area*/

  KUCREC.KUCCOID = TS04M002.KUCCOID; /* Pass key*/

  TS04S06(); /* Validate customer*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Customer is valid*/

        /* use defaults from VCMPNY01*/
      TS04M002.OP1FTIND = KUCREC.KUCFRTPD; /* Freight PPD*/
      TS04W02.OP1FTIND = KUCREC.KUCFRTPD;

      TS04M002.OP1IPIND = KUCREC.KUCINSPD; /* Insur PPD*/
      TS04W02.OP1IPIND = KUCREC.KUCINSPD;

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        set TS04M002.KUCCOID cursor, bold; /* Position cursor*/
        converseLib.validationFailed(161); /* Customer invalid*/
        TSWREC.XXXMODID = "210"; /* Module identification*/

      end
    end
  end

   /* -------------------*/
    /* DRAWBACK*/
   /* -------------------*/

  TS04W02.TSFDWBK = "N"; /* Default to 'n' for additions*/

   /* -------------------*/
    /* SHIPMENT STATUS*/
   /* -------------------*/

  TS04W02.YSSCD = "IP"; /* Default 'ip' for additions*/
  set TS04M002.YSSCD initialAttributes; /* Protect status*/

   /* -------------------*/
    /* STATUS DATE*/
   /* -------------------*/

  XX0XS01(); /* Date routine*/

  TS04W00.TS04WMM = XX0XW01.XX0XWMM; /* Current month*/
  TS04W00.TS04WDD = XX0XW01.XX0XWDD; /* Current day*/
  TS04W00.TS04WYY = XX0XW01.XX0XWYY; /* Current year*/

  TS04W02.TSFSTADT = TS04W00.TS04WMDY; /* Status date*/

  set TS04M002.TSFSTADT initialAttributes; /* Protect status date*/


end // end TS04210

// Format and converse the map
Function TS04220()

   /* ------------------------------------------------------------*/
   /* If no error was found and a refresh is not requested,*/
   /* ask user for input; otherwise, display error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error found*/
   || converseVar.eventKey is pa2)      /* or refresh requested*/

    if (TS04W00.TS04WSWF == "Y") /* Map must be formatted*/
      TS04221(); /* Format the data on the map*/
    end

    if (converseVar.eventKey not pa2) /* If not refreshing map*/
      converseLib.validationFailed(216); /* Enter new shipment msg*/
    end

    set TS04M002.TSACARCD cursor; /* Position cursor*/
  else

    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

  TS04M002.XXXMODID = "ADD"; /* Display current use function*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS04M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS04M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS04M002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0) /* Message to display*/

    TS04M002.XXXMODID = TSWREC.XXXMODID; /* Mod id or user funct*/
    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end /* Message number*/
    set TS04M002 alarm; /* Indicate sound alarm*/
  end

  converse TS04M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/


  TSWREC.XXXMSGNO = 0; /* Message number*/
  TSWREC.XXXMODID = " "; /* Module identification*/

  COMMAREA.CATOAP = TS04M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS04M002.CAITEM; /* Application data*/


end // end TS04220

// Format data on the map
Function TS04221()

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS04M002 empty; /* M002 input/output area*/

  TS04W00.TS04WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS04M002.TSFSHPID = TS04W02.TSFSHPID;
  TS04M002.KUCCOID = TS04W02.KUCCOID;
  TS04M002.TSUBOL = TS04W02.TSUBOL;
  TS04M002.TSUMAWB = TS04W02.TSUMAWB;
  TS04M002.TSACARCD = TS04W02.TSACARCD;
  TS04M002.TSACARNM = TS04W02.TSACARNM;
  TS04M002.TS5CRAFT = TS04W02.TS5CRAFT;
  TS04M002.TS5NAME = TS04W02.TS5NAME;
  TS04M002.TSUNLSHP = TS04W02.TSUNLSHP;

  TS04M002.TSEORIG = TS04W02.TSEORIG;
   /* ------------------------------------------------------------*/
   /* Obtain the port of load desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSEORIG; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[1] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[1] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[1] = " "; /* Desc city*/
  end

  TS04M002.TS-EXPT-LOC-CD = TS04W02.TS-EXPT-LOC-CD;
   /* ------------------------------------------------------------*/
   /* obtain the port of export desc save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TS-EXPT-LOC-CD; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[5] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[5] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[5] = " "; /* Desc city*/
  end

  TS04M002.TSUFCTY = TS04W02.TSUFCTY;
   /* ------------------------------------------------------------*/
   /* Obtain the factory desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSUFCTY; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[2] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[2] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[2] = " "; /* Desc city*/
  end

  TS04M002.TSUCNSLD = TS04W02.TSUCNSLD;
   /* ------------------------------------------------------------*/
   /* Obtain the cnsldn desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSUCNSLD; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[3] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[3] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[3] = " "; /* Desc city*/
  end

  TS04M002.TSFDSCHG = TS04W02.TSFDSCHG;
   /* ------------------------------------------------------------*/
   /* Obtain the dischg desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSFDSCHG; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[4] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[4] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[4] = " "; /* Desc city*/
  end

  TS04M002.TSUCNSDT = TS04W02.TSUCNSDT;
  TS04M002.TSFDSCHE = TS04W02.TSFDSCHE;
  TS04M002.YMTCD = TS04W02.YMTCD;
  TS04M002.TSFDPRTA = TS04W02.TSFDPRTA;
  TS04M002.TSFRELDT = TS04W02.TSFRELDT;
  TS04M002.TSFDWBK = TS04W02.TSFDWBK;
  TS04M002.YSTCD = TS04W02.YSTCD;
  TS04M002.YPYCD = TS04W02.YPYCD;
  TS04M002.YSSCD = TS04W02.YSSCD;
  TS04M002.TSFSTADT = TS04W02.TSFSTADT;
  TS04M002.OP1FTIND = TS04W02.OP1FTIND;
  TS04M002.OP1IPIND = TS04W02.OP1IPIND;
  TS04M002.TSFOFRGT = TS04W02.TSFOFRGT;
  TS04M002.TSFOINLD = TS04W02.TSFOINLD;
  TS04M002.TSUNSPKG = TS04W02.TSUNSPKG;
  TS04M002.TSUNSPCM = TS04W02.TSUNSPCM;
  TS04M002.TSUSHPQT = TS04W02.TSUSHPQT;
  TS04M002.NIESHPTC = TS04W02.NIESHPTC;


end // end TS04221

// Check attention identifier
Function TS04230()

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (TS04W00.TS04WSWR == "Y") /* Request for data*/
      set TS04W02 empty; /* M002 display storage*/
    end

    TS04W02.TSACARNM = TS04W00.TSACARNM; /* Restore orig descs*/
    TS04W02.TS5NAME = TS04W00.TS5NAME;

    TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
    TS04W00.TS04WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TS04S01(); /* Purge any temporary storage*/

      XSTSS02(); /* Exit to another application*/

      set TS04M001.CATOAP cursor, bold; /* Highlight*/

      TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/

    else

      TSWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS04M002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/
      TS04W00.TS04WSWR = "Y"; /* Request for data switch*/
      TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
      TS04M001.YSSCD = "IP"; /* Pass status of new adds*/
      TS04M001.KUCCOID = TS04W02.KUCCOID; /* Pass current customer*/

      exit stack; /* Exit to display map*/

    end

    TS04S01(); /* Purge any temporary storage*/

    XSTSS02(); /* Exit to another application*/

    TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    TSWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS04230

// Reset highlighted fields
Function TS04240()

   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS04M002.TSFSHPID initialAttributes; /* Ship id*/
  set TS04M002.KUCCOID normal; /* Customer id*/
  set TS04M002.TSUBOL normal; /* Bill of lading*/
  set TS04M002.TSUMAWB normal; /* Mawb*/
  set TS04M002.TSACARCD normal; /* Carrier*/
  set TS04M002.TSACARNM normal; /* Carrier desc*/
  set TS04M002.TS5CRAFT normal; /* Craft*/
  set TS04M002.TS5NAME normal; /* Craft name*/
  set TS04M002.TSUNLSHP normal; /* Ship*/
  set TS04M002.TSEORIG normal; /* Origin location*/
  set TS04M002.TS-EXPT-LOC-CD normal; /* Export location*/
  set TS04M002.TSUFCTY normal; /* Factory location*/
  set TS04M002.TSUCNSLD normal; /* Cnsldtn location*/
  set TS04M002.TSFDSCHG normal; /* Dischrg location*/
  set TS04M002.YMTCD initialAttributes; /* Trans mode*/
  set TS04M002.TSFDPRTA normal; /* Ship date*/
  set TS04M002.TSFRELDT normal; /* Whse rel*/
  set TS04M002.TSUCNSDT normal; /* ETA cnsldtn*/
  set TS04M002.TSFDSCHE normal; /* ETA dischrg*/
  set TS04M002.TSFDWBK normal; /* Drawback*/
  set TS04M002.YSTCD normal; /* Shipment type*/
  set TS04M002.YPYCD normal; /* Payment type*/
  set TS04M002.OP1FTIND normal; /* Freight ppd*/
  set TS04M002.OP1IPIND normal; /* Insur ppd*/
  set TS04M002.TSFOFRGT normal; /* Freight chrg*/
  set TS04M002.TSFOINLD normal; /* Inland chrg*/
  set TS04M002.NIESHPTC normal; /* Total cartons*/
  set TS04M002.TSUSHPQT initialAttributes; /* Total units*/
  set TS04M002.TSUNSPCM normal; /* Total volume*/
  set TS04M002.TSUNSPKG normal; /* Total weight*/
  set TS04M002.NIESHPTC normal; /* Total cartons*/


end // end TS04240

// Verify the entered data
Function TS04250()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ")
                                   /* Application data was entered*/

    TSWREC.XXXMODID = "250"; /* Module identification*/
    set TS04M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
    /* VALIDATE THE MODIFIABLE DATA*/

    /* Note : Editing is done in reverse order.*/
   /* ------------------------------------------------------------*/

   /* ---------------------------*/
   /* TOTAL UNITS validation*/
   /* ---------------------------*/
   /* Protected, no validation*/

  TS04W02.TSUSHPQT = TS04M002.TSUSHPQT; /* Save total units*/

   /* ---------------------------*/
   /* TOTAL VOLUME validation*/
   /* ---------------------------*/

  if (TS04M002.YSTCD == "EX") /* Export*/
    if (TS04M002.TSUNSPCM > 0) /* Total cartons changed*/
      set TS04M002.TSUNSPCM cursor, bold; /* Position cursor*/
      converseLib.validationFailed(217); /* Cannot update field*/
    else
      TS04W02.TSUNSPCM = TS04M002.TSUNSPCM; /* save volume*/
    end
  else /* Other shipment type*/
    TS04W02.TSUNSPCM = TS04M002.TSUNSPCM; /* Save volume*/
  end

   /* ---------------------------*/
   /* TOTAL CARTONS validation*/
   /* ---------------------------*/

  if (TS04M002.YSTCD == "EX") /* Export*/
    if (TS04M002.NIESHPTC > 0) /* Total cartons changed*/
      set TS04M002.NIESHPTC cursor, bold; /* Position cursor*/
      converseLib.validationFailed(217); /* Cannot be updated*/
    else
      TS04W02.NIESHPTC = TS04M002.NIESHPTC; /* Save value*/
    end
  else /* Other shipment type*/
    if (TS04M002.YSTCD in YSTTBL.YSTCD) /* A valid code exists*/
      if (TS04M002.NIESHPTC <= 0) /* Total cartons missing*/
        set TS04M002.NIESHPTC cursor, bold; /* Position cursor*/
        converseLib.validationFailed(035); /* Field required*/
      else
        TS04W02.NIESHPTC = TS04M002.NIESHPTC; /* Save value*/
      end
    end
  end

   /* ---------------------------*/
   /* TOTAL WEIGHT validation*/
   /* ---------------------------*/

  if (TS04M002.YSTCD == "EX") /* Export*/
    if (TS04M002.TSUNSPKG > 0) /* Total cartons changed*/
      set TS04M002.TSUNSPKG cursor, bold; /* Position cursor*/
      converseLib.validationFailed(217); /* Cannot be updated*/
    else
      TS04W02.TSUNSPKG = TS04M002.TSUNSPKG; /* Save value*/
    end
  else /* Other shipment type*/
    TS04W02.TSUNSPKG = TS04M002.TSUNSPKG; /* Save value*/
  end

   /* ---------------------------*/
   /* PAYMENT TYPE validation*/
   /* ---------------------------*/

  if (TS04M002.YPYCD != " ") /* Payment type code missing*/
    if (TS04M002.YPYCD != TS04W02.YPYCD) /* Payment type has changed*/

      if (TS04M002.YPYCD in YPYTBL.YPYCD) /* Valid payment type*/
        if (YPYTBL.XXXSTAT == "A") /* Active status*/

          TS04W02.YPYCD = TS04M002.YPYCD; /* Save validated item*/
        else
          set TS04M002.YPYCD cursor, bold; /* Position custmer*/
          converseLib.validationFailed(158); /* Inactive status*/
        end
      else /* Not a valid payment type*/
        set TS04M002.YPYCD cursor, bold; /* Position customer*/
        converseLib.validationFailed(211); /* Payment type invalid*/
      end
    end
  else
    if (TS04M002.YSTCD == "EX") /* Export*/
      TS04M002.YPYCD = "NL"; /* Default type for export*/
    else
      TS04M002.YPYCD = "NI"; /* Default on other types*/
    end
  end

   /* ---------------------------*/
   /* INLAND CHARGE validation*/
   /* ---------------------------*/

        /* FREIGHT PPD = 'N' and INLAND CHARGE > 0*/

  if (TS04M002.OP1FTIND == "N") /* No freight charge*/
    if (TS04M002.TSFOINLD > 0) /* and charge entered*/
      set TS04M002.TSFOINLD cursor, bold; /* Position cursor*/
      converseLib.validationFailed(214); /* Charge not allowed*/
    end
  end

  TS04W02.TSFOINLD = TS04M002.TSFOINLD; /* Save value*/

   /* ---------------------------*/
   /* INSUR PPD validation*/
   /* ---------------------------*/

  if (TS04M002.OP1IPIND != " ") /* Insur PPD not missing*/
    if (TS04M002.OP1IPIND != TS04W02.OP1IPIND) /* Insur PPD changed*/

      if (TS04M002.OP1IPIND == "Y" /* Valid values*/
       || TS04M002.OP1IPIND == "N")
        TS04W02.OP1IPIND = TS04M002.OP1IPIND; /* Save validated item*/
      else /* Invalid value*/
        set TS04M002.OP1IPIND cursor, bold; /* Position cursor*/
        converseLib.validationFailed(046); /* Must equal Y or N*/
      end
    end
     /* else a default will be set in customer validation*/
  end

   /* ---------------------------*/
   /* SHIPMENT TYPE validation*/
   /* ---------------------------*/
   /* Validated on every pass*/

  if (TS04M002.YSTCD != " ") /* Ship type not missing*/
    if (TS04M002.YSTCD in YSTTBL.YSTCD) /* Valid YST code*/
      if (YSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
        TS04W02.YSTCD = TS04M002.YSTCD; /* Save validated item*/
      else
        converseLib.validationFailed(158); /* Status not active*/
        set TS04M002.YSTCD cursor, bold; /* Position cursor*/
      end
    else /* Not a valid YST code*/
      set TS04M002.YSTCD cursor, bold; /* Highlight YST*/
      converseLib.validationFailed(56); /* Shipment type not valid*/
    end
  else /* YST is missing*/
    set TS04M002.YSTCD cursor, bold; /* Highlight YST*/
    converseLib.validationFailed(56); /* Shipment type missing*/
  end

   /* ---------------------------*/
   /* FREIGHT CHARGE validation*/
   /* ---------------------------*/

        /* FREIGHT PPD = 'N' and FREIGHT CHARGE > 0*/

  if (TS04M002.OP1FTIND == "N") /* No freight charge*/
    if (TS04M002.TSFOFRGT > 0)
                                   /* and a freight charge entered*/
      set TS04M002.TSFOFRGT cursor, bold; /* Position cursor*/
      converseLib.validationFailed(214); /* Charge not allowed*/
    end
  end

        /* FREIGHT PPD = 'Y' and BOTH CHARGES MISSING*/

  if (TS04M002.OP1FTIND == "Y") /* Frgt PPD required*/
    if (TS04M002.TSFOFRGT <= 0 /* Both Frgt/Inld missing*/
     && TS04M002.TSFOINLD <= 0)

      set TS04M002.TSFOFRGT cursor, bold; /* Position cursor*/
      set TS04M002.TSFOINLD bold; /* and highlight*/
      converseLib.validationFailed(247); /* At least one req'd*/
    end
  end

  TS04W02.TSFOFRGT = TS04M002.TSFOFRGT; /* Save value*/

   /* ---------------------------*/
   /* FREIGHT PPD validation*/
   /* ---------------------------*/

  if (TS04M002.OP1FTIND != " ") /* Frght PPD not missing*/
    if (TS04M002.OP1FTIND != TS04W02.OP1FTIND) /* Frght PPD changed*/

      if (TS04M002.OP1FTIND == "Y" /* Valid values*/
       || TS04M002.OP1FTIND == "N")
        TS04W02.OP1FTIND = TS04M002.OP1FTIND; /* Save validate item*/
      else /* Invalid value*/
        set TS04M002.OP1FTIND cursor, bold; /* Position cursor*/
        converseLib.validationFailed(046); /* Must equal Y or N*/
      end
    end
     /* else a default will be set in customer validation*/
  end

   /* ---------------------------*/
   /* DRAWBACK validation*/
   /* ---------------------------*/

  if (TS04M002.TSFDWBK != " ") /* Drawback entered*/
    if (TS04M002.TSFDWBK != TS04W02.TSFDWBK) /* Drawback has changed*/

      if (TS04M002.TSFDWBK != "Y" /* Drawback is not valid*/
       && TS04M002.TSFDWBK != "N")
        set TS04M002.TSFDWBK cursor, bold; /* Position cursor*/
        converseLib.validationFailed(46); /* Must equal 'y' or 'n'*/
      else
        TS04W02.TSFDWBK = TS04M002.TSFDWBK; /* Save validated item*/
      end
    end
  else /* Drawback is missing*/
    set TS04M002.TSFDWBK cursor, bold; /* Position cursor*/
    converseLib.validationFailed(46); /* Must equal 'y' or 'n'*/
  end

   /* ---------------------------*/
   /* ETA DISCHRG validation*/
   /* ---------------------------*/

  if (TS04M002.TSFDSCHE != 0) /* Date entered*/
    if (TS04M002.TSFDSCHE != TS04W02.TSFDSCHE) /* Date has changed*/

      set TA2REC empty; /* Initialize dclgen area*/
      TA2REC.TA2GRGAN = TS04M002.TSFDSCHE; /* Date to be validated*/
      TS04251(); /* Date validation routine*/

      if (TA2REC.TA2RTNCD != 0) /* Date is invalid*/
        converseLib.validationFailed(057); /* Date invalid message*/
        set TS04M002.TSFDSCHE cursor, bold; /* Position cursor*/

      else

         /* check dischrg date reasonableness;*/
         /* dischrg date can't be more than 365 days in the future*/
         /* or 180 days in the past.*/

        XX0XS01(); /* get current date*/

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT) /* dischrg-dt > curr-dt*/
          TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT; /* from date field*/
          TA2REC.TA2DBDTN = TA2REC.TA2GRGGN; /* to date field*/
        else
          TA2REC.TA2DBDFN = TA2REC.TA2GRGGN; /* from date field*/
          TA2REC.TA2DBDTN = XX0XW01.XX0XWDAT; /* to date field*/
        end
        TA2REC.TA2DTOPT = "DAYSDIFF"; /* date routine option*/
        TA2REC.TA2GRTYP = "A"; /* date type*/
        TA2REC.TA2DYAOD = 0; /* days to/add*/

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT /* dischrg-dt > curr-dt*/
         && TA2REC.TA2DBDDN > 365)            
                                   /* dischrg-dt > 365 in the future*/
          set TS04M002.TSFDSCHE cursor, bold; /* position cursor*/
          converseLib.validationFailed(315); /* dischrg-dt more than 365 in future*/
        else
          if (TA2REC.TA2GRGGN < XX0XW01.XX0XWDAT /* dischrg-dt < curr-dt*/
           && TA2REC.TA2DBDDN > 180)            
                                   /* dischrg-dt > 180 days in the past*/
            set TS04M002.TSFDSCHE cursor, bold; /* position cursor*/
            converseLib.validationFailed(316); /* dischrg-dt to old*/
          else
            TS04W02.TSFDSCHE = TS04M002.TSFDSCHE; /* save validated item*/
            TS04W02.TS04W2DS = TA2REC.TA2GRGGN; /* dischrg dte(db2 format)*/
          end
        end

      end
    end
  else
    TS04W02.TSFDSCHE = TS04M002.TSFDSCHE; /* save blank date*/
    TS04W02.TS04W2DS = 0;
                                   /* zero ETA dischrg date*/
  end

   /* ---------------------------*/
   /* DISCHARGE LOC validation*/
   /* ---------------------------*/

  if (TS04M002.TSFDSCHG != " ") /* Dschg location entered*/
    if (TS04M002.TSFDSCHG != TS04W02.TSFDSCHG) /* Dschg loc changed*/

      set TSCREC empty; /* Initialize dclgen area*/
      TSCREC.TSCLOCCD = TS04M002.TSFDSCHG; /* TSLOC01 key*/
      TS04S07(); /* Obtain trans loc desc*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          TS04W02.TSFDSCHG = TS04M002.TSFDSCHG; /* Save valid item*/
          TS04M002.TS04MCTY[4] = TSCREC.XXXCITY;

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSFDSCHG cursor, bold; /* Position cursor*/
            converseLib.validationFailed(219); /* Location code invalid*/
          else
            if (SQLCA.VAGen_SQLCODE == -911)
                                   /* Resource not available*/
              set TS04M002.TSFDSCHG cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  else
    set TS04M002.TSFDSCHG cursor, bold; /* Position cursor*/
    converseLib.validationFailed(219); /* Loc code missing*/
  end

   /* ---------------------------*/
   /* ETA CNSLDTN validation*/
   /* ---------------------------*/

  if (TS04M002.TSUCNSDT != 0) /* Date entered*/
    if (TS04M002.TSUCNSDT != TS04W02.TSUCNSDT) /* Date has changed*/

      set TA2REC empty; /* Initialize dclgen area*/
      TA2REC.TA2GRGAN = TS04M002.TSUCNSDT; /* Date to be validated*/
      TS04251(); /* Date validation routine*/

      if (TA2REC.TA2RTNCD != 0) /* Date is invalid*/
        converseLib.validationFailed(057); /* Date invalid message*/
        set TS04M002.TSUCNSDT cursor, bold; /* Position cursor*/

      else

         /* check cnsldtn date reasonableness;*/
         /* cnsldtn date can't be more than 365 days in the future*/
         /* or 180 days in the past.*/

        XX0XS01(); /* get current date*/

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT) /* cnsldtn-dt > curr-dt*/
          TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT; /* from date field*/
          TA2REC.TA2DBDTN = TA2REC.TA2GRGGN; /* to date field*/
        else
          TA2REC.TA2DBDFN = TA2REC.TA2GRGGN; /* from date field*/
          TA2REC.TA2DBDTN = XX0XW01.XX0XWDAT; /* to date field*/
        end
        TA2REC.TA2DTOPT = "DAYSDIFF"; /* date routine option*/
        TA2REC.TA2GRTYP = "A"; /* date type*/
        TA2REC.TA2DYAOD = 0; /* days to/add*/

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT /* cnsldtn-dt > curr-dt*/
         && TA2REC.TA2DBDDN > 365)            
                                   /* cnsldtn-dt > 365 in the future*/
          set TS04M002.TSUCNSDT cursor, bold; /* Position cursor*/
          converseLib.validationFailed(313); /* cnsldtn-dt more than 365 in future*/
        else
          if (TA2REC.TA2GRGGN < XX0XW01.XX0XWDAT /* cnsldtn-dt < curr-dt*/
           && TA2REC.TA2DBDDN > 180)            
                                   /* cnsldtn-dt > 180 days in the past*/
            set TS04M002.TSUCNSDT cursor, bold; /* Position cursor*/
            converseLib.validationFailed(314); /* cnsldtn-dt to old*/
          else
            TS04W02.TSUCNSDT = TS04M002.TSUCNSDT; /* save validated item*/
            TS04W02.TS04W2CN = TA2REC.TA2GRGGN; /* cnsldtn dte(db2 format)*/
          end
        end

      end
    end
  else
    TS04W02.TSUCNSDT = TS04M002.TSUCNSDT; /* save blank date*/
    TS04W02.TS04W2CN = 0;
                                   /* zero ETA cnsldtn date*/
  end

   /* ---------------------------*/
   /* CONSLDTN LOC validation*/
   /* ---------------------------*/

  if (TS04M002.TSUCNSLD != " ") /* Cnsld location entered*/
    if (TS04M002.TSUCNSLD != TS04W02.TSUCNSLD) /* Cnsld loc changed*/

      set TSCREC empty; /* Initialize dclgen*/
      TSCREC.TSCLOCCD = TS04M002.TSUCNSLD; /* TSLOC01 key*/
      TS04S07(); /* Obtain trans loc desc*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          TS04W02.TSUCNSLD = TS04M002.TSUCNSLD;
                                   /* Save validated item*/
          TS04M002.TS04MCTY[3] = TSCREC.XXXCITY;

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSUCNSLD cursor, bold; /* Position cursor*/
            converseLib.validationFailed(219); /* Loc code is invalid*/
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
              set TS04M002.TSUCNSLD cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  end

   /* ---------------------------*/
   /* SHIPMENT DATE validation*/
   /* ---------------------------*/

  if (TS04M002.TSFDPRTA != 0) /* Date entered*/
    if (TS04M002.TSFDPRTA != TS04W02.TSFDPRTA) /* Date has changed*/

      set TA2REC empty; /* Initialize dclgen area*/
      TA2REC.TA2GRGAN = TS04M002.TSFDPRTA; /* Date to be validated*/
      TS04251(); /* Date validation routine*/

      if (TA2REC.TA2RTNCD != 0) /* Date is invalid*/
        converseLib.validationFailed(057); /* Date invalid message*/
        set TS04M002.TSFDPRTA cursor, bold; /* Position cursor*/

      else

         /* check ship-date;*/
         /* Issue warning message if ship date is 60 days in the future*/
         /* or 60 days in the past, allow processing to continue.*/

        /* SET TA2REC EMPTY          ; Initialize dclgen area*/

        XX0XS01(); /* get current date*/

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT) /* ship-dt > curr-dt*/
          TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT; /* from date field*/
          TA2REC.TA2DBDTN = TA2REC.TA2GRGGN; /* to date field*/
        else /* curr-dt > ship-dt*/
          TA2REC.TA2DBDFN = TA2REC.TA2GRGGN; /* from date field*/
          TA2REC.TA2DBDTN = XX0XW01.XX0XWDAT; /* to date field*/
        end
        TA2REC.TA2DTOPT = "DAYSDIFF"; /* date routine option*/
        TA2REC.TA2GRTYP = "A"; /* date type*/
        TA2REC.TA2DYAOD = 0; /* days to add*/

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT /* ship-dt > curr-dt*/
         && TA2REC.TA2DBDDN > 60)              /* ship date > 60 days in the future*/
          TS04W02.TSFDPRTA = TS04M002.TSFDPRTA; /* Save validated item*/
          TS04W02.TS04W2DP = TA2REC.TA2GRGGN; /* Dprt dt (DB2 format)*/
          set TS04M002.TSFDPRTA cursor, bold; /* Position cursor*/
          converseLib.validationFailed(332);
                                   /* ship date more than 60 days in future*/
        else
          if (TA2REC.TA2GRGGN < XX0XW01.XX0XWDAT /* ship-dt < curr-dt*/
           && TA2REC.TA2DBDDN > 60)              /* ship date > 60 days in the past*/
            TS04W02.TSFDPRTA = TS04M002.TSFDPRTA; /* Save validated item*/
            TS04W02.TS04W2DP = TA2REC.TA2GRGGN; /* Dprt dt (DB2 format)*/
            set TS04M002.TSFDPRTA cursor, bold; /* Position cursor*/
            converseLib.validationFailed(333); /* ship date to old*/
          else
            TS04W02.TSFDPRTA = TS04M002.TSFDPRTA; /* Save validated item*/
            TS04W02.TS04W2DP = TA2REC.TA2GRGGN; /* Dprt dt (DB2 format)*/
          end
        end

      end
    else
      if (converseVar.validationMsgNum == 332
       || converseVar.validationMsgNum == 333)
        converseLib.validationFailed(0);
      else /* NEXT SENTENCE*/
      end
    end
  else
    set TS04M002.TSFDPRTA cursor, bold; /* Position cursor*/
    converseLib.validationFailed(57); /* Date invalid or missing*/
  end

   /* ---------------------------*/
   /* FACTORY LOC validation*/
   /* ---------------------------*/

  if (TS04M002.TSUFCTY != " ") /* Factory entered*/
    if (TS04M002.TSUFCTY != TS04W02.TSUFCTY) /* Factory changed*/

      set TSCREC empty; /* Initialize dclgen area*/
      TSCREC.TSCLOCCD = TS04M002.TSUFCTY; /* TSLOC01 key*/
      TS04S07(); /* Obtain trans loc desc*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          TS04W02.TSUFCTY = TS04M002.TSUFCTY; /* Save validated item*/
          TS04M002.TS04MCTY[2] = TSCREC.XXXCITY;

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSUFCTY cursor, bold; /* Position cursor*/
            converseLib.validationFailed(219); /* Loc code is invalid*/
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* Not available*/
              set TS04M002.TSUFCTY cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  end

   /* ---------------------------*/
   /* WHSE REL DATE validation*/
   /* ---------------------------*/

  if (TS04M002.TSFRELDT != 0) /* Date entered*/
    if (TS04M002.TSFRELDT != TS04W02.TSFRELDT) /* Date has changed*/

      set TA2REC empty; /* Initialize dclgen area*/
      TA2REC.TA2GRGAN = TS04M002.TSFRELDT; /* Date to be validated*/
      TS04251(); /* Date validation routine*/

      if (TA2REC.TA2RTNCD != 0) /* Date is invalid*/
        converseLib.validationFailed(057); /* Date invalid message*/
        set TS04M002.TSFRELDT cursor, bold; /* Position cursor*/
      else
        TS04W02.TSFRELDT = TS04M002.TSFRELDT; /* Save validated item*/
        TS04W02.TS04W2RL = TA2REC.TA2GRGGN;
                                   /* Rel date (DB2 format)*/
      end
    end
  else
    if (TS04M002.YSTCD == "EX") /* Not direct ship*/
      set TS04M002.TSFRELDT cursor, bold; /* Position cursor*/
      converseLib.validationFailed(57); /* Date invalid or missing*/
    else
      TS04W02.TSFRELDT = TS04M002.TSFRELDT; /* Save blank date*/
      TS04W02.TS04W2RL = 0; /* Zero rel date*/
    end
  end

   /* ---------------------------*/
   /* PORT OF LOAD validation*/
   /* ---------------------------*/

  if (TS04M002.TSEORIG != " ") /* Origin is not missing*/
    if (TS04M002.TSEORIG != TS04W02.TSEORIG) /* Origin has changed*/

      set TSCREC empty; /* Initialize dclgen area*/
      TSCREC.TSCLOCCD = TS04M002.TSEORIG; /* VTSLOC01 key*/
      TS04S07(); /* Obtain trans loc desc*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          TS04W02.TSEORIG = TS04M002.TSEORIG; /* Save validated item*/
          TS04M002.TS04MCTY[1] = TSCREC.XXXCITY;

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSEORIG cursor, bold; /* Position cursor*/
            converseLib.validationFailed(219); /* Loc code is invalid*/
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
              set TS04M002.TSEORIG cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011);
                                   /* Not available...try again*/
            end
          end
        end
      end
    end
  else /* Origin is missing*/
    set TS04M002.TSEORIG cursor, bold; /* Position cursor*/
    converseLib.validationFailed(219); /* Origin missing or invalid*/
  end
   /* ---------------------------*/
   /* TRANS MODE validation*/
   /* ---------------------------*/

   /* No edits required.  Mode code is dependent on*/
   /* the carrier/craft entry.  It is protected.*/

   /* ---------------------------*/
   /* MAWB validation*/
   /* ---------------------------*/
   /* None at this time*/

  if (TS04M002.TSUMAWB != TS04W02.TSUMAWB) /* Mawb changed*/
    TS04W02.TSUMAWB = TS04M002.TSUMAWB; /* Save new mawb*/
  end

   /* ---------------------------*/
   /* SHIPMENT validation*/
   /* ---------------------------*/

  if (TS04M002.TSUNLSHP != TS04W02.TSUNLSHP) /* Shipment nbr changed*/
    TS04W02.TSUNLSHP = TS04M002.TSUNLSHP; /* Save validated item*/
  end

   /* ---------------------------*/
   /* BILL OF LADING validation*/
   /* ---------------------------*/

  if (TS04M002.TSUBOL != TS04W02.TSUBOL) /* BOL has changed*/
    TS04W02.TSUBOL = TS04M002.TSUBOL; /* Save BOL*/
  end

   /* ---------------------------*/
   /* CRAFT DESC validation*/
   /* ---------------------------*/
   /* NOTE: User override has precedence over the standard*/
   /* desc.  If the description field is empty, the field*/
   /* defaults to the standard description.*/

  if (TS04M002.TS5NAME == " ") /* Carrier desc missing*/
    set TS5REC empty; /* Init dclgen*/
    TS5REC.TSACARCD = TS04M002.TSACARCD; /* Pass keys*/
    TS5REC.TS5CRAFT = TS04M002.TS5CRAFT;
    TS04252(); /* Craft validation*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        if (TS5REC.XXXSTAT == "A") /* Active status*/

          TS04M002.TS5NAME = TS5REC.TS5NAME; /* Craft name to map*/
          TS04W02.TS5NAME = TS5REC.TS5NAME; /* Display storage*/
          TS04W00.TS5NAME = TS5REC.TS5NAME; /* Save for PA2*/
        end
      end /* Invalid code handled below*/
    end /* Unsuccessful call handled in TS04252*/
  else
    TS04W02.TS5NAME = TS04M002.TS5NAME; /* Save current desc*/
  end

   /* ---------------------------*/
   /* CRAFT validation*/
   /* ---------------------------*/

    /* Validate craft on every pass in case carrier changed.*/

  if (TS04M002.TS5CRAFT != " ") /* Craft code is not missing*/

    set TS5REC empty; /* Initialize dclgen area*/
    TS5REC.TSACARCD = TS04M002.TSACARCD; /* Pass valid carrier cd*/
    TS5REC.TS5CRAFT = TS04M002.TS5CRAFT; /* Pass craft cd*/
    TS04252(); /* Craft validation*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

        if (TS5REC.XXXSTAT == "A") /* Active status*/

          if (TS04M002.TS5CRAFT != TS04W02.TS5CRAFT) /* Craft code changed*/
            TS04M002.TS5NAME = TS5REC.TS5NAME; /* Craft name to map*/
            TS04W02.TS5NAME = TS5REC.TS5NAME;
            TS04W00.TS5NAME = TS5REC.TS5NAME;
          end

          TS04W02.TS5CRAFT = TS04M002.TS5CRAFT; /* Save valid item*/
          TS04M002.YMTCD = TS5REC.YMTCD; /* Display mode*/
          TS04W02.YMTCD = TS5REC.YMTCD; /* Save mode*/


        else /* Status is inactive*/
          converseLib.validationFailed(073); /* Inactive status*/
          set TS04M002.TS5CRAFT cursor, bold; /* Position cursor*/
          TS04M002.TS5NAME = " "; /* Remove old desc*/

        end
      else

        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          set TS04M002.TS5CRAFT cursor, bold; /* Position cursor*/
          converseLib.validationFailed(213); /* Craft missing or invalid*/
          TS04M002.TS5NAME = " "; /* Remove old desc*/

        else
          if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
            set TS04M002.TS5CRAFT cursor, bold; /* Position cursor*/
            converseLib.validationFailed(011); /* Not available...try again*/
          end
        end
      end
    end
  else /* Craft code is missing*/

    set TS04M002.TS5CRAFT cursor, bold; /* Position cursor*/
    converseLib.validationFailed(213);
                                   /* Craft missing or invalid*/
  end

   /* ---------------------------*/
   /* PORT OF EXPORT validation*/
   /* ---------------------------*/

  if (TS04M002.TS-EXPT-LOC-CD != " ") /* Export is not missing*/
    if (TS04M002.TS-EXPT-LOC-CD != TS04W02.TS-EXPT-LOC-CD) /* changed*/
      set TSCREC empty; /* Init dclgen area*/
      TSCREC.TSCLOCCD = TS04M002.TS-EXPT-LOC-CD; /* vtsloc key*/
      TS04S07(); /* obtain loc desc*/
      if (sysVar.errorCode == "00000000") /* call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
          TS04W02.TS-EXPT-LOC-CD = TS04M002.TS-EXPT-LOC-CD;
          TS04M002.TS04MCTY[5] = TSCREC.XXXCITY;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
            set TS04M002.TS-EXPT-LOC-CD cursor, bold;
            converseLib.validationFailed(219);
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* resource not avail*/
              set TS04M002.TS-EXPT-LOC-CD cursor, bold;
              converseLib.validationFailed(11);
            end
          end
        end
      end
    end
  else /**/
    if (TS04M002.YMTCD == "VL") /* if trans mode is vessel*/
      if (TS04M002.YSTCD == "ED" /* and shp typ is expt dir*/
       || TS04M002.YSTCD == "EX" /* or export*/
       || TS04M002.YSTCD == "DZ") /* or danzas*/
        set TS04M002.TS-EXPT-LOC-CD cursor, bold;
        converseLib.validationFailed(219); /* missing or invalid*/
      end
    end
  end

   /* ---------------------------*/
   /* if Port of orig and export*/
   /* entered, make sure they are*/
   /* the same country.*/
   /* ---------------------------*/

  if (TS04M002.TSEORIG != " "
   && TS04M002.TS-EXPT-LOC-CD != " ")
    set TSCREC empty;
    TSCREC.TSCLOCCD = TS04M002.TSEORIG;
    TS04S07();
    if (sysVar.errorCode == "00000000")
      if (SQLCA.VAGen_SQLCODE == 0)
        TS04W02.XCTCD = TSCREC.XCTCD;
        set TSCREC empty;
        TSCREC.TSCLOCCD = TS04M002.TS-EXPT-LOC-CD;
        TS04S07();
        if (sysVar.errorCode == "00000000")
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSCREC.XCTCD == TS04W02.XCTCD)
               /* next sentence, they are of same country*/
            else
              set TS04M002.TS-EXPT-LOC-CD cursor, bold;
              converseLib.validationFailed(384); /* orig & export must be same ctry*/
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100)
              set TS04M002.TS-EXPT-LOC-CD cursor, bold;
              converseLib.validationFailed(219);
            else
              if (SQLCA.VAGen_SQLCODE == -911)
                set TS04M002.TS-EXPT-LOC-CD cursor, bold;
                converseLib.validationFailed(11);
              end
            end
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set TS04M002.TSEORIG cursor, bold;
          converseLib.validationFailed(219);
        else
          set TS04M002.TSEORIG cursor, bold;
          converseLib.validationFailed(11);
        end
      end
    end
  end

   /* -------------------------------------------------------*/
   /* CUSTOMER validation*/
      /* Note : Validated against DCUST.VCMPNY01 to access*/
             /* freight ppd and insur ppd data.  Validation*/
             /* performed on every pass to obtain these*/
             /* defaults, if they are needed.*/
   /* -------------------------------------------------------*/

  if (TS04M002.KUCCOID != 0) /* Customer not missing*/

    set KUCREC empty; /* Initialize link area*/
    KUCREC.KUCCOID = TS04M002.KUCCOID;
    TS04S06(); /* Validate customer*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Customer is valid*/

        if (TS04M002.OP1FTIND == " ") /* Freight PPD missing*/
           /* use default from VCMPNY01*/
          TS04M002.OP1FTIND = KUCREC.KUCFRTPD; /* Frgt PPD*/
          TS04W02.OP1FTIND = KUCREC.KUCFRTPD;
        end

        if (TS04M002.OP1IPIND == " ") /* Freight PPD missing*/
           /* use default from VCMPNY01*/
          TS04M002.OP1IPIND = KUCREC.KUCINSPD; /* Frgt PPD*/
          TS04W02.OP1IPIND = KUCREC.KUCINSPD;
        end

        TS04W02.KUCCOID = TS04M002.KUCCOID; /* Save validated item*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

          set TS04M002.KUCCOID cursor, bold; /* Position cursor*/
          converseLib.validationFailed(161); /* Customer invalid*/

        end
      end
    end
  else /* Customer is missing*/
    set TS04M002.KUCCOID cursor, bold; /* Position cursor*/
    converseLib.validationFailed(161); /* Customer missing*/
  end

   /* ---------------------------*/
   /* CARRIER DESC validation*/
   /* ---------------------------*/

   /* NOTE: User override has precedence over the standard*/
   /* desc.  If the description field is empty, the field*/
   /* defaults to the standard description.*/

  if (TS04M002.TSACARNM == " ") /* Carrier desc missing*/
    set TSAREC empty; /* Init dclgen area*/
    TSAREC.TSACARCD = TS04M002.TSACARCD; /* Pass key*/
    TS04253(); /* Carrier validation*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        if (TSAREC.XXXSTAT == "A") /* Active status*/

          TS04M002.TSACARNM = TSAREC.TSACARNM; /* Carrier name*/
          TS04W02.TSACARNM = TSAREC.TSACARNM; /* Save carr name*/
          TS04W00.TSACARNM = TSAREC.TSACARNM; /* Save for PA2*/
        end
      end /* Invalid code handled below*/
    end /* Unsuccessful call handled in ts04253*/
  else
    TS04W02.TSACARNM = TS04M002.TSACARNM; /* Save current desc*/
  end

   /* ---------------------------*/
   /* CARRIER validation*/
   /* ---------------------------*/

  if (TS04M002.TSACARCD != " ")
                                   /* Carrier code is not missing*/
    if (TS04M002.TSACARCD != TS04W02.TSACARCD) /* Carrier code changed*/

      set TSAREC empty; /* Initialize dclgen area*/
      TSAREC.TSACARCD = TS04M002.TSACARCD; /* Pass key value*/
      TS04253(); /* Carrier validation*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          if (TSAREC.XXXSTAT == "A") /* Active status*/
            TS04W02.TSACARCD = TS04M002.TSACARCD; /* Save valid item*/

            TS04M002.TSACARNM = TSAREC.TSACARNM; /* Update carr name*/
            TS04W02.TSACARNM = TSAREC.TSACARNM;
            TS04W00.TSACARNM = TSAREC.TSACARNM;

          else /* Status is inactive*/
            converseLib.validationFailed(072); /* Inactive status*/
            set TS04M002.TSACARCD cursor, bold; /* Position cursor*/
            TS04M002.TSACARNM = " "; /* Remove old desc*/

          end
        else

          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSACARCD cursor, bold; /* Position cursor*/
            converseLib.validationFailed(213); /* Missing or invalid*/
            TS04M002.TSACARNM = " "; /* Remove old desc*/

          else
            if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
              set TS04M002.TSEORIG cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  else /* Carrier code missing*/
    set TS04M002.TSACARCD cursor, bold; /* Position cursor*/
    converseLib.validationFailed(213); /* Missing or invalid*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    TSWREC.XXXMODID = "250"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* DATA HAS BEEN FULLY VALIDATED.*/
   /* ------------------------------------------------------------*/


end // end TS04250

// Date validation
Function TS04251()

   /* ------------------------------------------------------------*/
    /* Validate a passed date using TA0040.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/


end // end TS04251

// Craft validation
Function TS04252()

   /* ------------------------------------------------------------*/
    /* Validate the craft code and obtain the description*/
    /* using the craft table (vcraft01).*/
   /* ------------------------------------------------------------*/

  try
    call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Carrier found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or Carrier not found*/

      return; /* Return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "252"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty; /* Clear screen/save attributes*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/
  TA1REC.TA1TBLKE = TS5REC.TS5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04252

// Carrier validation
Function TS04253()

   /* ------------------------------------------------------------*/
    /* Validate the carrier code and obtain the description*/
    /* using the carrier table (VTSCAR01).*/
   /* ------------------------------------------------------------*/

  try
    call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Carrier found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or Carrier not found*/

      return; /* Return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "253"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty; /* Clear screen/save attributes*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSAREC.TSAKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04253

// Process valid input request
Function TS04260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If ENTER has been pressed, at this point data has been*/
   /* validated.  Get the next ship id from the transportation*/
   /* control table, format from the transportaion control table,*/
   /* format the zz fields for update, and insert the new row.*/

   /* NOTE : IO2530 automatically updates the next number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* User confirmed addition*/

    set TSUREC empty; /* Initialize dclgen area*/

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    TSUREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    TSUREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    TSUREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

    /* Note : ZZ change count set to 0 by IO4690 on an add.*/

    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
    /* ------------------------------------------------------------*/

    TS04261(); /* Update table row*/

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/

    TSWREC.XXXMODID = "260"; /* Module identification*/
    TSWREC.XXXMSGNO = 044; /* Database update completed*/

    /* ------------------------------------------------------------*/
     /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

    /* ------------------------------------------------------------*/
     /* Save current customer for the application and clear the*/
     /* map for any new additions.*/
    /* ------------------------------------------------------------*/

    TS04W00.KUCCOID = TS04M002.KUCCOID; /* Save current customer*/
    set TS04M002 empty; /* Remove old data*/
    set TS04W02 empty; /* Clear display storage*/
    TS04W02.KUCCOID = TS04W00.KUCCOID; /* Restore previous customer*/
    TS04W00.TSACARNM = " "; /* Clear refresh descs*/
    TS04W00.TS5NAME = " ";

  else

    return; /* Return to previous process*/

  end


end // end TS04260

// Update the table row
Function TS04261()

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  TSUREC.TSFSHPID = TS04M002.TSFSHPID; /* Shipment id*/
  TSUREC.KUCCOID = TS04M002.KUCCOID; /* Customer id*/
  TSUREC.TSUBOL = TS04M002.TSUBOL; /* Bill of lading*/
  TSUREC.TSUMAWB = TS04M002.TSUMAWB; /* Mawb*/
  TSUREC.TSACARCD = TS04M002.TSACARCD; /* Carrier code*/
  TSUREC.TSACARNM = TS04M002.TSACARNM; /* Carrier name*/
  TSUREC.TS5CRAFT = TS04M002.TS5CRAFT; /* Craft code*/
  TSUREC.TS5NAME = TS04M002.TS5NAME; /* Craft name*/
  TSUREC.TSUNLSHP = TS04M002.TSUNLSHP; /* Ship*/
  TSUREC.TSEORIG = TS04M002.TSEORIG; /* Port of load (origin)*/
  TSUREC.TS-EXPT-LOC-CD = TS04M002.TS-EXPT-LOC-CD; /* export loc*/
  TSUREC.XGPCD = "02"; /* GPC*/
  TSUREC.XDVCD = "02"; /* Division*/
  TSUREC.TSFDPRTA = TS04W02.TS04W2DP; /* Depart date*/
  TSUREC.TSFRELDT = TS04W02.TS04W2RL; /* Whse rel date*/
  TSUREC.TSUCNSDT = TS04W02.TS04W2CN; /* ETA cnsldtn date*/
  TSUREC.TSFDSCHE = TS04W02.TS04W2DS; /* ETA dischrg date*/
  TSUREC.TSUFCTY = TS04M002.TSUFCTY; /* Factory loc*/
  TSUREC.TSFDSCHG = TS04M002.TSFDSCHG; /* Discharge loc*/
  TSUREC.TSUCNSLD = TS04M002.TSUCNSLD; /* Cnsldtn loc*/
  TSUREC.YMTCD = TS04M002.YMTCD; /* Mode code*/
  TSUREC.TSFDWBK = TS04M002.TSFDWBK; /* Drawback*/
  TSUREC.YSTCD = TS04M002.YSTCD; /* Status code*/
  TSUREC.YPYCD = TS04M002.YPYCD; /* Payment type code*/
  TSUREC.YSSCD = TS04M002.YSSCD; /* Shipment status code*/
  TSUREC.TSFSTADT = XX0XW01.XX0XWDAT; /* Status date*/
   /* note ; xx0xwdat will have curr dt (yyyymmdd)*/
          /* from setting of default in TS04210*/
  TSUREC.OP1FTIND = TS04M002.OP1FTIND; /* Freight PPD*/
  TSUREC.OP1IPIND = TS04M002.OP1IPIND; /* Insur PPD*/
  TSUREC.TSFOFRGT = TS04M002.TSFOFRGT; /* Freight charge*/
  TSUREC.TSFOINLD = TS04M002.TSFOINLD; /* Inland charge*/

   /* ------------------------------------------------------------*/
   /* If this is not an export, move in map total fields that*/
   /* have been entered.  Otherwise no entry allowed.*/
   /* ------------------------------------------------------------*/

  if (TS04M002.YSTCD != "EX") /* not Export*/
    TSUREC.TSUSHPQT = TS04M002.TSUSHPQT; /* Total units*/
    TSUREC.TSUNSPCM = TS04M002.TSUNSPCM; /* Total volume*/
    TSUREC.NIESHPTC = TS04M002.NIESHPTC; /* Total cartons*/
    TSUREC.TSUNSPKG = TS04M002.TSUNSPKG; /* Total weight*/
  else /* Not export*/
    TSUREC.TSUSHPQT = 0; /* Total units*/
    TSUREC.TSUNSPCM = 0; /* Total volume*/
    TSUREC.NIESHPTC = 0; /* Total cartons*/
    TSUREC.TSUNSPKG = 0; /* Total weight*/
  end

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4690" ("A ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    TS04W00.TS04WSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If update not successful, return error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "261"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS04261

// DISPLAY DETAIL/CHANGE OR INQRY
Function TS04300()

   /* This is the process used to display the detail shipment*/
   /* map (m001) for change or inquiry.*/


  TS04310(); /* Obtain the data to display*/

  TS04320(); /* Format and display the map*/

  TS04330(); /* Check attention identifier*/

  TS04340(); /* Reset fields to normal intensity*/

   /* ------------------------------------------------------------*/
   /* If user can only inquire, bypass verification of data.*/
   /* ------------------------------------------------------------*/
  if (TS04W00.TS04WFUN == "C") /* Changed data is a possibility*/
    TS04350(); /* Verify the entered data*/
  end

  TS04360(); /* Process valid input request*/


end // end TS04300

// Obtain the data to display
Function TS04310()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found,*/
   /* return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS04W00.TS04WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area.*/
   /* ------------------------------------------------------------*/

  set TS04W02 empty; /* M002 display storage*/
  TS04W00.TSACARNM = " "; /* Clear desc hold areas*/
  TS04W00.TS5NAME = " ";

  TS04W00.TS04WKCH = "N"; /* Initialize customer change sw*/
   /* ------------------------------------------------------------*/
   /* Obtain the table row to be displayed.*/
   /* ------------------------------------------------------------*/

  TS04311(); /* Obtain the table row*/

   /* ------------------------------------------------------------*/
   /* If not found, indicate that no data was found to display.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

    TSWREC.XXXMODID = "310"; /* Module identification*/
    TSWREC.XXXMSGNO = 18; /* Indicate no data found*/
    set TS04M002.KUCCOID cursor; /* Put cursor at key on map*/

    return; /* Display map with no data*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  TS04312(); /* Save in display storage*/

  TS04W00.KUCCOID = TS04W02.KUCCOID; /* Save curr cust for appl*/
  TS04W00.TSACARNM = TS04W02.TSACARNM; /* Save current descs*/
  TS04W00.TS5NAME = TS04W02.TS5NAME;

   /* ------------------------------------------------------------*/
   /* Obtain total cartons for shipment*/
   /* ------------------------------------------------------------*/

  TS04313(); /* Obtain total cartons*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WSWR = "N"; /* Request for data switch*/


end // end TS04310

// Select the table row
Function TS04311()

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty; /* Row storage area*/

  TSUREC.KUCCOID = TS04W00.KUCCOID; /* Customer id*/
  TSUREC.TSFSHPID = TS04W00.TSFSHPID; /* Shipment id*/

  try
    call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/
  TS04W00.TS04WSWR = "N"; /* Request for data switch*/

  TSWREC.XXXMODID = "311"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS04311

// Save data from selected row
Function TS04312()

   /* ------------------------------------------------------------*/
    /* If the data was found for the selected row, then save*/
    /* save it in the working storage for this map.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0) /* No data to save*/
    return; /* Return to the previous process*/
  end

  TS04W02.TSFSHPID = TSUREC.TSFSHPID;
  TS04W02.KUCCOID = TSUREC.KUCCOID;
  TS04W02.TSUBOL = TSUREC.TSUBOL;
  TS04W02.TSUMAWB = TSUREC.TSUMAWB;
  TS04W02.TSACARCD = TSUREC.TSACARCD;
  TS04W02.TSACARNM = TSUREC.TSACARNM;
  TS04W02.TS5CRAFT = TSUREC.TS5CRAFT;
  TS04W02.TS5NAME = TSUREC.TS5NAME;
  TS04W02.TSUNLSHP = TSUREC.TSUNLSHP;
  TS04W02.TSEORIG = TSUREC.TSEORIG;
  TS04W02.TS-EXPT-LOC-CD = TSUREC.TS-EXPT-LOC-CD;
  TS04W02.TSUFCTY = TSUREC.TSUFCTY;
  TS04W02.TSUCNSLD = TSUREC.TSUCNSLD;
  TS04W02.TSFDSCHG = TSUREC.TSFDSCHG;
  TS04W02.YMTCD = TSUREC.YMTCD;

   /* ------------------------------------------------------------*/
   /* Convert DB2 depart date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize TA0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSFDPRTA; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSFDPRTA = TSUREC.TSFDPRTA; /* Display invalid date*/
    TS04W02.TS04W2DP = TSUREC.TSFDPRTA; /* DB2 (ccyymmdd)*/
  else
    TS04W02.TSFDPRTA = TA2REC.TA2GRGAN; /* Date format mmddyy*/
    TS04W02.TS04W2DP = TA2REC.TA2GRGGN; /* DB2 (ccyymmdd)*/
  end

   /* ------------------------------------------------------------*/
   /* Convert DB2 whse rel date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize ta0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSFRELDT; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSFRELDT = TSUREC.TSFRELDT; /* Display invalid date*/
    TS04W02.TS04W2RL = TSUREC.TSFRELDT; /* DB2 (ccyymmdd)*/
  else
    TS04W02.TSFRELDT = TA2REC.TA2GRGAN; /* Date format mmddyy*/
    TS04W02.TS04W2RL = TA2REC.TA2GRGGN; /* DB2 (ccyymmdd)*/
  end

   /* ------------------------------------------------------------*/
   /* Convert DB2 ETA cnsldtn date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize ta0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSUCNSDT; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSUCNSDT = TSUREC.TSUCNSDT; /* Display invalid date*/
    TS04W02.TS04W2CN = TSUREC.TSUCNSDT; /* DB2 (ccyymmdd)*/
  else
    TS04W02.TSUCNSDT = TA2REC.TA2GRGAN; /* Date format mmddyy*/
    TS04W02.TS04W2CN = TA2REC.TA2GRGGN; /* DB2 (ccyymmdd)*/
  end

   /* ------------------------------------------------------------*/
   /* Convert DB2 ETA dischrg date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize ta0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSFDSCHE; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSFDSCHE = TSUREC.TSFDSCHE; /* Display invalid date*/
    TS04W02.TS04W2DS = TSUREC.TSFDSCHE; /* DB2 (ccyymmdd)*/
  else
    TS04W02.TSFDSCHE = TA2REC.TA2GRGAN; /* Date format mmddyy*/
    TS04W02.TS04W2DS = TA2REC.TA2GRGGN; /* DB2 (ccyymmdd)*/
  end

  TS04W02.TSFDWBK = TSUREC.TSFDWBK;
  TS04W02.YSTCD = TSUREC.YSTCD;
  TS04W02.YPYCD = TSUREC.YPYCD;
  TS04W02.YSSCD = TSUREC.YSSCD;

   /* ------------------------------------------------------------*/
   /* Convert DB2 status date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize ta0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSFSTADT; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSFSTADT = TSUREC.TSFSTADT; /* Display invalid date*/
  else
    TS04W02.TSFSTADT = TA2REC.TA2GRGAN; /* Date format mmddyy*/
  end

  TS04W02.OP1FTIND = TSUREC.OP1FTIND;
  TS04W02.OP1IPIND = TSUREC.OP1IPIND;
  TS04W02.TSFOFRGT = TSUREC.TSFOFRGT;
  TS04W02.TSFOINLD = TSUREC.TSFOINLD;

   /* ------------------------------------------------------------*/
   /* If shipment is an export, display us standard measurement*/
   /* NOTE - It is currently assumed user will enter metric units*/
   /* on entries for direct ships.*/
   /* ------------------------------------------------------------*/

  if (TSUREC.YSTCD == "EX") /* An export*/
    TS04W02.TSUNSPKG = TSUREC.TSUNSPLB; /* lbs*/
    TS04W02.TSUNSPCM = TSUREC.TSUNSPFT; /* ft3*/

  else /* Not an export*/
    TS04W02.TSUNSPKG = TSUREC.TSUNSPKG; /* Kg*/
    TS04W02.TSUNSPCM = TSUREC.TSUNSPCM; /* Cbm*/

  end

  TS04W02.TSUSHPQT = TSUREC.TSUSHPQT; /* Total units*/


end // end TS04312

// Obtain total cartons
Function TS04313()

   /* ------------------------------------------------------------*/
   /* Find all orders for this shipment and calculate the*/
   /* total cartons to display on map.  For direct ships*/
   /* obtain the total from VNLSHP01.  For any other shipment*/
   /* type, the total is calculated against the carton file.*/
   /* ------------------------------------------------------------*/

  if (TS04W02.YSTCD != "EX") /* Direct ship*/

    TS04W02.NIESHPTC = TSUREC.NIESHPTC; /* Use vnlshp01 crtns*/

  else /* Not a direct ship*/

    set TSVREC empty; /* Initialize dclgen area*/
    TS04W02.NIESHPTC = 0; /* Initialize total cartons*/

    TSVREC.TSFSHPID = TS04W02.TSFSHPID; /* For this shipment*/
    TSVREC.KUCCOID = TS04W02.KUCCOID; /* and this customer*/
    TSVREC.TSVPLNBR = -1; /* with all pk list nbrs*/
    TSVREC.NIAIVCDT = 0; /* and invoice dates =0*/

    try
      call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* Select set*/

    /* ------------------------------------------------------------*/
     /* If cursor has been established, then process all packing*/
     /* list orders for this shipment.  Select the max count of*/
     /* of cartons for each packing list against the packing list*/
     /* carton file (VNLPLC01).  Add this count to total cartons.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* Open successful*/

      try
        call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Fetch first*/

      while (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 0) /* Rows found*/

        TS04S08(); /* Get carton count*/

        if (TS4REC.TS4INCTR == 0) /* Carton count obtained*/
           /* accumulate returned carton count*/
          TS04W02.NIESHPTC = TS04W02.NIESHPTC + TS4REC.TS4FUNCT;
        end

        try
          call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
        end /* Fetch next*/

      end
    end

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* No more rows*/

      TS04S09(); /* Close cursor*/

      return; /* Return to the previous process*/

    end

    /* ------------------------------------------------------------*/
     /* Resource not available or a system error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL return code*/

    TSWREC.XXXMODID = "313"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1TYPE = "RETN"; /* Termination function*/
      set TS04M002 empty;
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN TOTAL CARTONS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Pgm appl*/
    TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    exit stack; /* Redisplay the map*/

  end
end // end TS04313

// Format and converse the map
Function TS04320()

   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display.*/
   /* ------------------------------------------------------------*/

  if (TS04W00.TS04WSWR == "Y" /* Data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (TS04W00.TS04WSWF == "Y") /* Map must be formatted*/
      TS04321(); /* Format the data on the map*/
    end

  end

  if (TS04M002.YSTCD == "EX") /* Export*/
    set TS04M002.NIESHPTC initialAttributes; /* Protect fields*/
    set TS04M002.TSUNSPKG initialAttributes;
    set TS04M002.TSUNSPCM initialAttributes;
  end

  if (TS04WFUN == "I") /* User function is inquiry*/
    TS04M002.XXXMODID = "INQ";
  else
    if (TS04WFUN == "C") /* User function is change*/
      TS04M002.XXXMODID = "CHG";
    end
  end

  if (TS04WFUN == "I") /* Inquire only*/
    set TS04M002.CATOAP cursor; /* Position cursor*/
  else
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set TS04M002.TSACARCD cursor; /* Position cursor*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS04M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS04M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS04M002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0) /* Message to display*/

    TS04M002.XXXMODID = TSWREC.XXXMODID; /* Module identification*/
    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end /* Message number*/

    set TS04M002 alarm; /* Indicate sound alarm*/

  end

  converse TS04M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMSGNO = 0; /* Message number*/
  TSWREC.XXXMODID = " "; /* Module identification*/

  COMMAREA.CATOAP = TS04M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS04M002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Change the selection indicator to show the line was viewed.*/
   /* ------------------------------------------------------------*/

  TS04W01.TS04MSEL[TS04WIXM] = "V"; /* Select indicator*/


end // end TS04320

// Format the display data
Function TS04321()

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS04M002 empty; /* M002 input/output area*/

  TS04W00.TS04WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS04M002.TSFSHPID = TS04W02.TSFSHPID;
  TS04M002.KUCCOID = TS04W02.KUCCOID;
  TS04M002.TSUBOL = TS04W02.TSUBOL;
  TS04M002.TSUMAWB = TS04W02.TSUMAWB;
  TS04M002.TSACARCD = TS04W02.TSACARCD;
  TS04M002.TSACARNM = TS04W02.TSACARNM;
  TS04M002.TS5CRAFT = TS04W02.TS5CRAFT;
  TS04M002.TS5NAME = TS04W02.TS5NAME;
  TS04M002.TSUNLSHP = TS04W02.TSUNLSHP;

  TS04M002.TSEORIG = TS04W02.TSEORIG;
   /* ------------------------------------------------------------*/
   /* Obtain the port of load desc, save it in display storage.*/
   /* ------------------------------------------------------------*/
  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSEORIG; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[1] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[1] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[1] = " "; /* Desc city*/
  end

  TS04M002.TS-EXPT-LOC-CD = TS04W02.TS-EXPT-LOC-CD;
   /* ------------------------------------------------------------*/
   /* Obtain the port of export desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TS-EXPT-LOC-CD; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[5] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[5] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[5] = " "; /* Desc city*/
  end

  TS04M002.TSUFCTY = TS04W02.TSUFCTY;
   /* ------------------------------------------------------------*/
   /* Obtain the factory desc, save it in display storage.*/
   /* ------------------------------------------------------------*/
  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSUFCTY; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[2] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[2] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[2] = " "; /* Desc city*/
  end

  TS04M002.TSUCNSLD = TS04W02.TSUCNSLD;
   /* ------------------------------------------------------------*/
   /* Obtain the cnsldn desc, save it in display storage.*/
   /* ------------------------------------------------------------*/
  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSUCNSLD; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[3] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[3] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[3] = " "; /* Desc city*/
  end

  TS04M002.TSFDSCHG = TS04W02.TSFDSCHG;
   /* ------------------------------------------------------------*/
   /* Obtain the dischg desc, save it in display storage.*/
   /* ------------------------------------------------------------*/
  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSFDSCHG; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/
      TS04M002.TS04MCTY[4] = TSCREC.XXXCITY; /* Desc city*/
    else
      TS04M002.TS04MCTY[4] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[4] = " "; /* Desc city*/
  end

  TS04M002.YMTCD = TS04W02.YMTCD;
  TS04M002.TSFDPRTA = TS04W02.TSFDPRTA;
  TS04M002.TSFRELDT = TS04W02.TSFRELDT;
  TS04M002.TSUCNSDT = TS04W02.TSUCNSDT;
  TS04M002.TSFDSCHE = TS04W02.TSFDSCHE;
  TS04M002.TSFDWBK = TS04W02.TSFDWBK;
  TS04M002.YSTCD = TS04W02.YSTCD;
  TS04M002.YPYCD = TS04W02.YPYCD;
  TS04M002.YSSCD = TS04W02.YSSCD;
  TS04M002.TSFSTADT = TS04W02.TSFSTADT;
  TS04M002.OP1FTIND = TS04W02.OP1FTIND;
  TS04M002.OP1IPIND = TS04W02.OP1IPIND;
  TS04M002.TSFOFRGT = TS04W02.TSFOFRGT;
  TS04M002.TSFOINLD = TS04W02.TSFOINLD;
  TS04M002.TSUNSPKG = TS04W02.TSUNSPKG;
  TS04M002.TSUNSPCM = TS04W02.TSUNSPCM;
  TS04M002.TSUSHPQT = TS04W02.TSUSHPQT;
  TS04M002.NIESHPTC = TS04W02.NIESHPTC;


end // end TS04321

// Check attention identifier
Function TS04330()

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* If a request for data is pending, reset that request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (TS04W00.TS04WSWR == "Y") /* Request for data switch*/
      set TS04W02 empty; /* M002 display storage*/
    end

    TS04W02.TSACARNM = TS04W00.TSACARNM; /* Restore descs*/
    TS04W02.TS5NAME = TS04W00.TS5NAME;

    TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
    TS04W00.TS04WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TS04S01(); /* Purge any temporary storage*/

      XSTSS02(); /* Exit to another application*/

      set TS04M002.CATOAP cursor, bold; /* Highlight*/

      TS04W00.TS04WSWD = "2"; /* Map to be displayed switch*/

    else

      TSWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS04M002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      if (TS04W00.TS04WFUN == "C") /* Function was change*/

        TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/
        TS04W00.TS04WSWR = "Y"; /* Request for data switch*/
        TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
        TS04M001.KUCCOID = TS04M002.KUCCOID; /* Customer to fetch*/

      else /* This was an inquiry*/

        TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/
        TS04W00.TS04WSWR = "N"; /* Request for data switch*/
        TS04W00.TS04WSWF = "Y"; /* Format the map switch*/
      end

      exit stack; /* Exit to display map*/

    end

    TS04S01(); /* Purge any temporary storage*/

    XSTSS02(); /* Exit to another application*/

    TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf1   /* and PF1 was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf4)  /* and pf4 was not pressed*/

    TSWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS04330

// Reset highlighted fields
Function TS04340()

   /* ------------------------------------------------------------*/
   /* If the user has change authority, then reset fields to*/
   /* normal intensity.*/
   /* ------------------------------------------------------------*/

  if (TS04WFUN == "I") /* Inquiry only*/
    return; /* Return to the previous process*/
  end


  set TS04M002.TSFSHPID initialAttributes;
  set TS04M002.KUCCOID normal;
  set TS04M002.TSUBOL normal;
  set TS04M002.TSUMAWB normal;
  set TS04M002.TSACARCD normal;
  set TS04M002.TSACARNM normal;
  set TS04M002.TS5CRAFT normal;
  set TS04M002.TS5NAME normal;
  set TS04M002.TSUNLSHP normal;
  set TS04M002.TSEORIG normal;
  set TS04M002.TS-EXPT-LOC-CD normal;
  set TS04M002.TSUFCTY normal;
  set TS04M002.TSUCNSLD normal;
  set TS04M002.TSFDSCHG normal;
  set TS04M002.YMTCD normal;
  set TS04M002.TSFDPRTA normal;
  set TS04M002.TSFRELDT normal;
  set TS04M002.TSUCNSDT normal;
  set TS04M002.TSFDSCHE normal;
  set TS04M002.TSFDWBK normal;
  set TS04M002.YSTCD normal;
  set TS04M002.YPYCD normal;
  set TS04M002.YSSCD initialAttributes;
  set TS04M002.TSFSTADT initialAttributes;
  set TS04M002.OP1FTIND normal;
  set TS04M002.OP1IPIND normal;
  set TS04M002.TSFOFRGT normal;
  set TS04M002.TSFOINLD normal;
  if (TS04M002.YSTCD != "EX")
    set TS04M002.TSUNSPKG normal;
    set TS04M002.TSUNSPCM normal;
    set TS04M002.NIESHPTC normal;
  else
    set TS04M002.TSUNSPKG initialAttributes;
    set TS04M002.TSUNSPCM initialAttributes;
    set TS04M002.NIESHPTC initialAttributes;
  end
  set TS04M002.TSUSHPQT initialAttributes;


end // end TS04340

// Verify the entered data
Function TS04350()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    TSWREC.XXXMODID = "350"; /* Module identification*/
    set TS04M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ---------------------------*/
   /* CHECK FOR INVOICES*/
   /* ---------------------------*/

  TS04351();
                                   /* Verify shipment can be changed*/

  if (TS04W00.TS04WINV == "Y") /* Invoices against shipment*/
    set TS04M002.TSFSHPID protect, bold; /* Highlight shipment id*/
    set TS04M002.KUCCOID protect, bold; /* Highlight customer*/

                                  /* SKIP VALIDATIONS*/
                                  /* BECAUSE OF INVOICING*/
    converseLib.validationFailed(210); /* SHIPMENT CANNOT BE CHANGED*/
    TSWREC.XXXMODID = "350"; /* Module identification*/
    exit stack; /* Redisplay map*/
  end

   /* ------------------------------------------------------------*/
    /* VALIDATE THE MODIFIABLE DATA*/

    /* Note : Editing is done in reverse order.*/
   /* ------------------------------------------------------------*/

   /* ---------------------------*/
   /* TOTAL UNITS validation*/
   /* ---------------------------*/
   /* Protected, no validation*/

  TS04W02.TSUSHPQT = TS04M002.TSUSHPQT; /* Save total units*/

   /* ---------------------------*/
   /* TOTAL VOLUME validation*/
   /* ---------------------------*/

  if (TS04M002.YSTCD == "EX") /* Export*/
    set TS04M002.TSUNSPCM initialAttributes; /* Protect volume*/

  else /* Other value*/
    TS04W02.TSUNSPCM = TS04M002.TSUNSPCM; /* save volume*/
  end

   /* ---------------------------*/
   /* TOTAL CARTONS validation*/
   /* ---------------------------*/

  if (TS04M002.YSTCD == "EX") /* Export*/
    set TS04M002.NIESHPTC initialAttributes; /* Protect total cartons*/
  else /* Other shipment type*/
    if (TS04M002.YSTCD in YSTTBL.YSTCD) /* Valid code*/
      if (TS04M002.NIESHPTC <= 0) /* Total cartons missing*/
        set TS04M002.NIESHPTC cursor, bold; /* Position cursor*/
        converseLib.validationFailed(035); /* Field required*/
      else
        TS04W02.NIESHPTC = TS04M002.NIESHPTC; /* Save volume*/
      end
    end
  end

   /* ---------------------------*/
   /* TOTAL WEIGHT validation*/
   /* ---------------------------*/

  if (TS04M002.YSTCD == "EX") /* Export*/
    set TS04M002.TSUNSPKG initialAttributes; /* Protect weight*/
  else /* Other shipment type*/
    TS04W02.TSUNSPKG = TS04M002.TSUNSPKG; /* save weight*/
  end

   /* ---------------------------*/
   /* PAYMENT TYPE validation*/
   /* ---------------------------*/

  if (TS04M002.YPYCD != " ")
                                   /* Payment type code missing*/
    if (TS04M002.YPYCD != TS04W02.YPYCD) /* Payment type has changed*/

      if (TS04M002.YPYCD in YPYTBL.YPYCD) /* Valid payment type*/
        if (YPYTBL.XXXSTAT == "A") /* Active status*/
          TS04W02.YPYCD = TS04M002.YPYCD; /* Save validated item*/

        else
          set TS04M002.YPYCD cursor, bold; /* Position cursor*/
          converseLib.validationFailed(158); /* Inactive status*/
        end
      else /* Not a valid payment type*/
        set TS04M002.YPYCD cursor, bold; /* Position customer*/
        converseLib.validationFailed(211); /* Payment type invalid*/
      end
    end
  else
                                   /* Set defaults if YPY blank*/
    if (TS04M002.YSTCD == "EX") /* Export*/
      TS04M002.YPYCD = "NL"; /* Export default*/
    else
      TS04M002.YPYCD = "NI"; /* Other type default*/
    end
  end

   /* ---------------------------*/
   /* INLAND CHARGE validation*/
   /* ---------------------------*/

        /* FREIGHT PPD = 'N' and INLAND CHARGE > 0*/

  if (TS04M002.OP1FTIND == "N") /* No freight charge*/
    if (TS04M002.TSFOINLD > 0) /* and a freight charge entered*/
      set TS04M002.TSFOINLD cursor, bold; /* Position cursor*/
      converseLib.validationFailed(214); /* Charge not allowed*/
    end
  end

  TS04W02.TSFOINLD = TS04M002.TSFOINLD; /* Save charge*/

   /* ---------------------------*/
   /* INSUR PPD validation*/
   /* ---------------------------*/

  if (TS04M002.OP1IPIND != " ")
                                   /* Insur PPD not missing*/
    if (TS04M002.OP1IPIND != TS04W02.OP1IPIND) /* Insur PPD changed*/

      if (TS04M002.OP1IPIND == "Y" /* Valid values*/
       || TS04M002.OP1IPIND == "N")

        TS04W02.OP1IPIND = TS04M002.OP1IPIND; /* Save validated item*/
      else /* Invalid value*/
        set TS04M002.OP1IPIND cursor, bold; /* Position cursor*/
        converseLib.validationFailed(046); /* Must equal Y or N*/
      end
    end
  else
    set TS04M002.OP1IPIND cursor, bold; /* Position cursor*/
    converseLib.validationFailed(035); /* Field required*/
  end

   /* ---------------------------*/
   /* SHIPMENT TYPE validation*/
   /* ---------------------------*/
   /* Validated on every pass*/

  if (TS04M002.YSTCD != " ") /* Ship type not missing*/
    if (TS04M002.YSTCD in YSTTBL.YSTCD) /* Valid YST code*/
      if (YSTTBL.XXXSTAT == "A") /* Active status*/
        TS04W02.YSTCD = TS04M002.YSTCD; /* Save validated item*/
      else
        set TS04M002.YSTCD cursor, bold; /* Position cursor*/
        converseLib.validationFailed(158); /* Inactive status*/
      end
    else /* Not a valid YST code*/
      set TS04M002.YSTCD cursor, bold; /* Highlight YST*/
      converseLib.validationFailed(56); /* Shipment type not valid*/
    end
  else /* YST is missing*/
    set TS04M002.YSTCD cursor, bold; /* Highlight YST*/
    converseLib.validationFailed(56); /* Shipment type missing*/
  end

   /* ---------------------------*/
   /* FREIGHT CHARGE validation*/
   /* ---------------------------*/

        /* FREIGHT PPD = 'N' and FREIGHT CHARGE > 0*/

  if (TS04M002.OP1FTIND == "N") /* No freight charge*/
    if (TS04M002.TSFOFRGT > 0) /* and a freight charge entered*/
      set TS04M002.TSFOFRGT cursor, bold; /* Position cursor*/
      converseLib.validationFailed(214); /* Charge not allowed*/
    end
  end

        /* FREIGHT PPD = 'Y' AND BOTH CHARGES MISSING*/

  if (TS04M002.OP1FTIND == "Y") /* Freight charge required*/
    if (TS04M002.TSFOFRGT <= 0 /* Both charges missing*/
     && TS04M002.TSFOINLD <= 0)

      set TS04M002.TSFOFRGT cursor, bold; /* Position cursor*/
      set TS04M002.TSFOINLD bold; /* with highlights*/
      converseLib.validationFailed(247); /* Charge required*/
    end
  end

  TS04W02.TSFOFRGT = TS04M002.TSFOFRGT; /* Save valid value*/

   /* ---------------------------*/
   /* FREIGHT PPD validation*/
   /* ---------------------------*/

  if (TS04M002.OP1FTIND != " ")
                                   /* Frght PPD not missing*/
    if (TS04M002.OP1FTIND != TS04W02.OP1FTIND) /* Frght PPD changed*/

      if (TS04M002.OP1FTIND == "Y" /* Valid values*/
       || TS04M002.OP1FTIND == "N")

        TS04W02.OP1FTIND = TS04M002.OP1FTIND; /* Save validate item*/
      else /* Invalid value*/
        set TS04M002.OP1FTIND cursor, bold; /* Position cursor*/
        converseLib.validationFailed(046); /* Must equal Y or N*/
      end
    end
  else
    set TS04M002.OP1FTIND cursor, bold; /* Position cursor*/
    converseLib.validationFailed(035); /* Field required*/
  end

   /* ---------------------------*/
   /* DRAWBACK validation*/
   /* ---------------------------*/

  if (TS04M002.TSFDWBK != " ") /* Drawback entered*/
    if (TS04M002.TSFDWBK != TS04W02.TSFDWBK) /* Drawback has changed*/

      if (TS04M002.TSFDWBK != "Y" /* Drawback is not valid*/
       && TS04M002.TSFDWBK != "N")

        set TS04M002.TSFDWBK cursor, bold; /* Position cursor*/
        converseLib.validationFailed(46); /* Must equal 'y' or 'n'*/
      else
        TS04W02.TSFDWBK = TS04M002.TSFDWBK; /* Save validated item*/
      end /* Drawback is valid*/
    end
  else /* Drawback is missing*/
    set TS04M002.TSFDWBK cursor, bold; /* Position cursor*/
    converseLib.validationFailed(46); /* Must equal 'y' or 'n'*/
  end

   /* ---------------------------*/
   /* ETA dischrg validation*/
   /* ---------------------------*/

  if (TS04M002.TSFDSCHE != 0) /* Date entered*/
    if (TS04M002.TSFDSCHE != TS04W02.TSFDSCHE) /* DATE HAS CHANGED*/

      set TA2REC empty; /* Initialize dclgen area*/
      TA2REC.TA2GRGAN = TS04M002.TSFDSCHE; /* Date to be validated*/
      TS04352(); /* Date validation routine*/

      if (TA2REC.TA2RTNCD != 0) /* Date is invalid*/
        converseLib.validationFailed(057); /* Date invalid message*/
        set TS04M002.TSFDSCHE cursor, bold; /* Position cursor*/

      else

         /* check ETA dischrg date reasonableness;*/
         /* ETA dischrg date can't be more than 365 days in the future*/
         /* or 180 days in the past.*/

        XX0XS01(); /* get current date*/

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT) /* dischrg-dt > curr-dt*/
          TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT; /* from date field*/
          TA2REC.TA2DBDTN = TA2REC.TA2GRGGN; /* to date field*/
        else
          TA2REC.TA2DBDFN = TA2REC.TA2GRGGN; /* from date field*/
          TA2REC.TA2DBDTN = XX0XW01.XX0XWDAT; /* to date field*/
        end
        TA2REC.TA2DTOPT = "DAYSDIFF"; /* date routine option*/
        TA2REC.TA2GRTYP = "A"; /* date type*/
        TA2REC.TA2DYAOD = 0; /* days to add*/

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT /* dischrg-dt > curr-dt*/
         && TA2REC.TA2DBDDN > 365)            
                                   /* dischrg-dt > 365 days in the future*/
          set TS04M002.TSFDSCHE cursor, bold; /* Position cursor*/
          converseLib.validationFailed(315); /* dischrg-dt more than 365 days in*/
                                   /* future*/
        else /* curr-dt > dischrg-dt*/
          if (TA2REC.TA2GRGGN < XX0XW01.XX0XWDAT /* dischrg-dt < curr-dt*/
           && TA2REC.TA2DBDDN > 180)            
                                   /* dischrg-dt > 180 days in the past*/
            set TS04M002.TSFDSCHE cursor, bold; /* Position cursor*/
            converseLib.validationFailed(316); /* dischrg date to old*/
          else
            TS04W02.TSFDSCHE = TS04M002.TSFDSCHE; /* Save validated item*/
            TS04W02.TS04W2DS = TA2REC.TA2GRGGN; /* dischrg dt(DB2 format)*/
          end
        end

      end
    end
  else
    TS04W02.TSFDSCHE = TS04M002.TSFDSCHE; /* save blank date*/
    TS04W02.TS04W2DS = 0;
                                   /* zero ETA dischrg date*/
  end

   /* ---------------------------*/
   /* DISCHARGE LOC validation*/
   /* ---------------------------*/

  if (TS04M002.TSFDSCHG == TS04M002.TSEORIG) /* POL = DISCH loc*/
    converseLib.validationFailed(243); /* Cannot equal POL*/
    set TS04M002.TSFDSCHG cursor, bold; /* Position cursor*/
  end

  if (TS04M002.TSFDSCHG != " ") /* Dschg loc entered*/
    if (TS04M002.TSFDSCHG != TS04W02.TSFDSCHG) /* Dschg loc changed*/


      set TSCREC empty; /* Initialize dclgen area*/
      TSCREC.TSCLOCCD = TS04M002.TSFDSCHG; /* TSLOC01 key*/
      TS04S07(); /* Obtain trans loc desc*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          TS04W02.TSFDSCHG = TS04M002.TSFDSCHG; /* Save valid item*/
          TS04M002.TS04MCTY[4] = TSCREC.XXXCITY;

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSFDSCHG cursor, bold; /* Position cursor*/
            converseLib.validationFailed(219); /* Loc code invalid*/
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* Not available*/
              set TS04M002.TSFDSCHG cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  else
    set TS04M002.TSFDSCHG cursor, bold; /* Position cursor*/
    converseLib.validationFailed(219); /* Loc code missing*/
  end

   /* ---------------------------*/
   /* ETA cnsldtn validation*/
   /* ---------------------------*/

  if (TS04M002.TSUCNSDT != 0) /* Date entered*/
    if (TS04M002.TSUCNSDT != TS04W02.TSUCNSDT) /* DATE HAS CHANGED*/

      set TA2REC empty; /* Initialize dclgen area*/
      TA2REC.TA2GRGAN = TS04M002.TSUCNSDT; /* Date to be validated*/
      TS04352(); /* Date validation routine*/

      if (TA2REC.TA2RTNCD != 0) /* Date is invalid*/
        converseLib.validationFailed(057); /* Date invalid message*/
        set TS04M002.TSUCNSDT cursor, bold; /* Position cursor*/

      else

         /* check ETA cnsldtn date reasonableness;*/
         /* ETA cnsldtn date can't be more than 365 days in the future*/
         /* or 180 days in the past.*/

        XX0XS01(); /* get current date*/

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT) /* cnsldtn-dt > curr-dt*/
          TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT; /* from date field*/
          TA2REC.TA2DBDTN = TA2REC.TA2GRGGN; /* to date field*/
        else
          TA2REC.TA2DBDFN = TA2REC.TA2GRGGN; /* from date field*/
          TA2REC.TA2DBDTN = XX0XW01.XX0XWDAT; /* to date field*/
        end
        TA2REC.TA2DTOPT = "DAYSDIFF"; /* date routine option*/
        TA2REC.TA2GRTYP = "A"; /* date type*/
        TA2REC.TA2DYAOD = 0; /* days to add*/

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT /* cnsldtn-dt > curr-dt*/
         && TA2REC.TA2DBDDN > 365)            
                                   /* cnsldtn-dt > 365 days in the future*/
          set TS04M002.TSUCNSDT cursor, bold; /* Position cursor*/
          converseLib.validationFailed(313); /* cnsldtn-dt more than 365 days in*/
                                   /* future*/
        else /* curr-dt > cnsldtn-dt*/
          if (TA2REC.TA2GRGGN < XX0XW01.XX0XWDAT /* cnsldtn-dt < curr-dt*/
           && TA2REC.TA2DBDDN > 180)            
                                   /* dischrg-dt > 180 days in the past*/
            set TS04M002.TSUCNSDT cursor, bold; /* Position cursor*/
            converseLib.validationFailed(314); /* cnsldtn date to old*/
          else
            TS04W02.TSUCNSDT = TS04M002.TSUCNSDT; /* Save validated item*/
            TS04W02.TS04W2CN = TA2REC.TA2GRGGN; /* cnsldtn dt(db2 format)*/
          end
        end

      end
    end
  else
    TS04W02.TSUCNSDT = TS04M002.TSUCNSDT; /* save blank date*/
    TS04W02.TS04W2CN = 0;
                                   /* zero ETA cnsldtn date*/
  end

   /* ---------------------------*/
   /* CONSLDTN LOC validation*/
   /* ---------------------------*/

  if (TS04M002.TSUCNSLD != " ") /* Cnsld location entered*/
    if (TS04M002.TSUCNSLD != TS04W02.TSUCNSLD) /* Cnsld loc changed*/

      set TSCREC empty; /* Initialize dclgen*/
      TSCREC.TSCLOCCD = TS04M002.TSUCNSLD; /* TSLOC01 key*/
      TS04S07(); /* Obtain trans loc desc*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          TS04W02.TSUCNSLD = TS04M002.TSUCNSLD;
                                   /* Save validated item*/
          TS04M002.TS04MCTY[3] = TSCREC.XXXCITY;

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSUCNSLD cursor, bold; /* Position cursor*/
            converseLib.validationFailed(219); /* Loc code is invalid*/
          else
            if (SQLCA.VAGen_SQLCODE == -911)
                                   /* Resource not available*/
              set TS04M002.TSUCNSLD cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  end

   /* ---------------------------*/
   /* SHIPMENT DATE validation*/
   /* ---------------------------*/

  if (TS04M002.TSFDPRTA != 0) /* Date entered*/
    if (TS04M002.TSFDPRTA != TS04W02.TSFDPRTA) /* Date has changed*/

      set TA2REC empty; /* Initialize dclgen area*/
      TA2REC.TA2GRGAN = TS04M002.TSFDPRTA; /* Date to be validated*/
      TS04352(); /* Date validation routine*/

      if (TA2REC.TA2RTNCD != 0) /* Date is invalid*/
        converseLib.validationFailed(057); /* Date invalid message*/
        set TS04M002.TSFDPRTA cursor, bold; /* Position cursor*/

      else

         /* check ship-date;*/
         /* If shipment date is 60 days in the future or 60 days*/
         /* in the pass, issue warning message and allow processing*/
         /* to continue.*/

        XX0XS01(); /* get current date*/

             /* SET TA2REC EMPTY          ; Initialize dclgen area*/
        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT) /* ship-dt > curr-dt*/
          TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT; /* from date field*/
          TA2REC.TA2DBDTN = TA2REC.TA2GRGGN; /* to date field*/
        else /* curr-dt > ship-dt*/
          TA2REC.TA2DBDFN = TA2REC.TA2GRGGN; /* from date field*/
          TA2REC.TA2DBDTN = XX0XW01.XX0XWDAT; /* to date field*/
        end
        TA2REC.TA2DTOPT = "DAYSDIFF"; /* date routine option*/
        TA2REC.TA2GRTYP = "A"; /* date type*/
        TA2REC.TA2DYAOD = 0; /* days to add*/

        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

        if (TA2REC.TA2GRGGN > XX0XW01.XX0XWDAT /* ship-dt > curr-dt*/
         && TA2REC.TA2DBDDN > 60)              /* ship date > 60 days in the future*/
          set TS04M002.TSFDPRTA cursor, bold; /* Position cursor*/
          converseLib.validationFailed(332); /* WARNING, SHIP DATE IS 60 DAYS > TODAY*/
          TS04W02.TSFDPRTA = TS04M002.TSFDPRTA; /* Save validated item*/
          TS04W02.TS04W2DP = TA2REC.TA2GRGGN; /* Dprt dt (DB2 format)*/
                                   /* ship date more than 90 days in future*/
        else
          if (TA2REC.TA2GRGGN < XX0XW01.XX0XWDAT /* ship-dt < curr-dt*/
           && TA2REC.TA2DBDDN > 60)              /* ship date > 60 days in the past*/
            set TS04M002.TSFDPRTA cursor, bold; /* Position cursor*/
            converseLib.validationFailed(333); /* WARNING SHIP DATE IS 60 DAYS < TODAY*/
            TS04W02.TSFDPRTA = TS04M002.TSFDPRTA; /* Save validated item*/
            TS04W02.TS04W2DP = TA2REC.TA2GRGGN; /* Dprt dt (DB2 format)*/
          else
            TS04W02.TSFDPRTA = TS04M002.TSFDPRTA; /* Save validated item*/
            TS04W02.TS04W2DP = TA2REC.TA2GRGGN; /* Dprt dt (DB2 format)*/
          end
        end

      end
    end
  else
    set TS04M002.TSFDPRTA cursor, bold; /* Position cursor*/
    converseLib.validationFailed(57); /* Date invalid or missing*/
  end

   /* ---------------------------*/
   /* FACTORY LOC validation*/
   /* ---------------------------*/

  if (TS04M002.TSUFCTY != " ") /* Factory entered*/
    if (TS04M002.TSUFCTY != TS04W02.TSUFCTY) /* Factory changed*/

      set TSCREC empty; /* Initialize dclgen area*/
      TSCREC.TSCLOCCD = TS04M002.TSUFCTY; /* TSLOC01 key*/
      TS04S07(); /* Obtain trans loc desc*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          TS04W02.TSUFCTY = TS04M002.TSUFCTY; /* Save validated item*/
          TS04M002.TS04MCTY[2] = TSCREC.XXXCITY;

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSUFCTY cursor, bold; /* Position cursor*/
            converseLib.validationFailed(219); /* Loc code is invalid*/
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
              set TS04M002.TSUFCTY cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  end

   /* ---------------------------*/
   /* WHSE REL DATE validation*/
   /* ---------------------------*/

  if (TS04M002.TSFRELDT != 0) /* Date entered*/
    if (TS04M002.TSFRELDT != TS04W02.TSFRELDT) /* Date has changed*/

      set TA2REC empty; /* Initialize dclgen area*/
      TA2REC.TA2GRGAN = TS04M002.TSFRELDT; /* Date to be validated*/
      TS04352(); /* Date validation routine*/

      if (TA2REC.TA2RTNCD != 0) /* Date is invalid*/
        converseLib.validationFailed(057); /* Date invalid message*/
        set TS04M002.TSFRELDT cursor, bold; /* Position cursor*/
      else
        TS04W02.TSFRELDT = TS04M002.TSFRELDT; /* Save validated item*/
        TS04W02.TS04W2RL = TA2REC.TA2GRGGN;
                                   /* Rel date (DB2 format)*/
      end
    end
  else
    if (TS04M002.YSTCD == "EX") /* Not direct ship*/
      set TS04M002.TSFRELDT cursor, bold; /* Position cursor*/
      converseLib.validationFailed(57); /* Date invalid or missing*/
    else
      TS04W02.TSFRELDT = TS04M002.TSFRELDT; /* Save blank date*/
      TS04W02.TS04W2RL = 0; /* Zero rel date*/
    end
  end

   /* ---------------------------*/
   /* PORT OF LOAD validation*/
   /* ---------------------------*/

  if (TS04M002.TSEORIG != " ") /* Origin is not missing*/
    if (TS04M002.TSEORIG != TS04W02.TSEORIG) /* Origin has changed*/

      set TSCREC empty; /* Initialize dclgen area*/
      TSCREC.TSCLOCCD = TS04M002.TSEORIG; /* TSLOC01 key*/
      TS04S07(); /* Obtain trans loc desc*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          TS04W02.TSEORIG = TS04M002.TSEORIG; /* Save validated item*/
          TS04M002.TS04MCTY[1] = TSCREC.XXXCITY;

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSEORIG cursor, bold; /* Position cursor*/
            converseLib.validationFailed(219); /* Loc code is invalid*/
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
              set TS04M002.TSEORIG cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  else /* Origin is missing*/
    set TS04M002.TSEORIG cursor, bold; /* Position cursor*/
    converseLib.validationFailed(219); /* Origin missing or invalid*/
  end

   /* ---------------------------*/
   /* TRANS MODE validation*/
   /* ---------------------------*/

  if (TS04M002.YMTCD != " ") /* YMT entered*/
    if (TS04M002.YMTCD != TS04W02.YMTCD) /* YMT changed*/

      if (TS04M002.YMTCD in YMTTBL.YMTCD) /* YMT is valid*/
        if (YMTTBL.XXXSTAT == "A") /* Active status*/

          TS04W02.YMTCD = TS04M002.YMTCD; /* Save validated item*/
        else /* YMT is not valid*/
          set TS04M002.YMTCD cursor, bold; /* Position cursor*/
          converseLib.validationFailed(158); /* Missing or invalid*/
        end
      else /* YMT is not valid*/
        set TS04M002.YMTCD cursor, bold; /* Position cursor*/
        converseLib.validationFailed(42); /* Mode missing or invalid*/
      end
    end
  else /* YMT is missing*/
    set TS04M002.YMTCD cursor, bold; /* Position cursor*/
    converseLib.validationFailed(42); /* Missing or invalid*/
  end

   /* ---------------------------*/
   /* MAWB  validation*/
   /* ---------------------------*/
   /* None at this time*/

  if (TS04M002.TSUMAWB != TS04W02.TSUMAWB) /* Mawb changed*/
    TS04W02.TSUMAWB = TS04M002.TSUMAWB; /* Save mawb as is*/
  end

   /* ---------------------------*/
   /* SHIPMENT validation*/
   /* ---------------------------*/
   /* None at this time*/

  if (TS04M002.TSUNLSHP != TS04W02.TSUNLSHP) /* Shipment changed*/
    TS04W02.TSUNLSHP = TS04M002.TSUNLSHP; /* Save valid item*/
  end

   /* ---------------------------*/
   /* BILL OF LADING validation*/
   /* ---------------------------*/

  if (TS04M002.TSUBOL != TS04W02.TSUBOL) /* BOL changed*/
    TS04W02.TSUBOL = TS04M002.TSUBOL; /* Save valid item*/
  end

   /* ---------------------------*/
   /* CRAFT DESC validation*/
   /* ---------------------------*/
   /* NOTE : User override has precedence over the standard*/
   /* desc.  If the description field is empty or code changes*/
   /* the description defaults to the standard description.*/

  if (TS04M002.TS5NAME == " ") /* Carrier desc missing*/

    set TS5REC empty; /* Initialize dclgen area*/
    TS5REC.TSACARCD = TS04M002.TSACARCD; /* Pass valid carrier cd*/
    TS5REC.TS5CRAFT = TS04M002.TS5CRAFT; /* Pass craft cd*/
    TS04353(); /* Craft validation*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        if (TS5REC.XXXSTAT == "A") /* Active status*/

          TS04M002.TS5NAME = TS5REC.TS5NAME; /* Craft name to map*/
          TS04W02.TS5NAME = TS5REC.TS5NAME; /* Display storage*/
          TS04W00.TS5NAME = TS5REC.TS5NAME; /* Save for PA2*/
        end
      end /* ; Invalid code handled below*/
    end /* Unsuccessful call handled in TS04354*/
  else
    TS04W02.TS5NAME = TS04M002.TS5NAME; /* Save current desc*/
  end

   /* ---------------------------*/
   /* CRAFT validation*/
   /* ---------------------------*/

   /* Validate craft on every pass in case carrier changed.*/

  if (TS04M002.TS5CRAFT != " ") /* Craft code is not missing*/

    set TS5REC empty; /* Initialize dclgen area*/
    TS5REC.TSACARCD = TS04M002.TSACARCD; /* Pass valid carrier cd*/
    TS5REC.TS5CRAFT = TS04M002.TS5CRAFT; /* Pass craft cd*/
    TS04353(); /* Craft validation*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

        if (TS5REC.XXXSTAT == "A") /* Active status*/

          if (TS04M002.TS5CRAFT != TS04W02.TS5CRAFT) /* Craft changed*/
            TS04M002.TS5NAME = TS5REC.TS5NAME; /* Craft name to map*/
            TS04W02.TS5NAME = TS5REC.TS5NAME;
            TS04W00.TS5NAME = TS5REC.TS5NAME;
          end

          TS04W02.TS5CRAFT = TS04M002.TS5CRAFT; /* Save valid item*/
          TS04M002.YMTCD = TS5REC.YMTCD; /* Display mode*/
          TS04W02.YMTCD = TS5REC.YMTCD; /* Save valid item*/

        else /* Status is inactive*/
          converseLib.validationFailed(073); /* Inactive status*/
          set TS04M002.TS5CRAFT cursor, bold; /* Position cursor*/
          TS04M002.TS5NAME = " "; /* Remove old desc*/

        end
      else

        if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
          set TS04M002.TS5CRAFT cursor, bold; /* Position cursor*/
          converseLib.validationFailed(213);
                                   /* Craft missing or invalid*/
          TS04M002.TS5NAME = " "; /* Remove old desc*/

        else
          if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
            set TS04M002.TS5CRAFT cursor, bold; /* Position cursor*/
            converseLib.validationFailed(011); /* Not available*/
          end
        end
      end
    end
  else
    set TS04M002.TS5CRAFT cursor, bold; /* Position cursor*/
    converseLib.validationFailed(213); /* Craft missing*/
  end

   /* ---------------------------*/
   /* PORT OF EXPORT validation*/
   /* ---------------------------*/

  if (TS04M002.TS-EXPT-LOC-CD != " ") /* Export is not missing*/
    if (TS04M002.TS-EXPT-LOC-CD != TS04W02.TS-EXPT-LOC-CD) /* changed*/
      set TSCREC empty; /* Init dclgen area*/
      TSCREC.TSCLOCCD = TS04M002.TS-EXPT-LOC-CD; /* vtsloc key*/
      TS04S07(); /* obtain loc desc*/
      if (sysVar.errorCode == "00000000") /* call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
          TS04W02.TS-EXPT-LOC-CD = TS04M002.TS-EXPT-LOC-CD;
          TS04M002.TS04MCTY[5] = TSCREC.XXXCITY;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
            set TS04M002.TS-EXPT-LOC-CD cursor, bold;
            converseLib.validationFailed(219);
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* resource not avail*/
              set TS04M002.TS-EXPT-LOC-CD cursor, bold;
              converseLib.validationFailed(11);
            end
          end
        end
      end
    end
  else /**/
    if (TS04M002.YMTCD == "VL") /* if trans mode is vessel*/
      if (TS04M002.YSTCD == "ED" /* and shp typ is expt dir*/
       || TS04M002.YSTCD == "EX" /* or export*/
       || TS04M002.YSTCD == "DZ") /* or danzas*/
        set TS04M002.TS-EXPT-LOC-CD cursor, bold;
        converseLib.validationFailed(219); /* missing or invalid*/
      end
    end
  end

   /* ---------------------------*/
   /* if Port of orig and export*/
   /* entered, make sure they are*/
   /* the same country.*/
   /* ---------------------------*/

  if (TS04M002.TSEORIG != " "
   && TS04M002.TS-EXPT-LOC-CD != " ")
    set TSCREC empty;
    TSCREC.TSCLOCCD = TS04M002.TSEORIG;
    TS04S07();
    if (sysVar.errorCode == "00000000")
      if (SQLCA.VAGen_SQLCODE == 0)
        TS04W02.XCTCD = TSCREC.XCTCD;
        set TSCREC empty;
        TSCREC.TSCLOCCD = TS04M002.TS-EXPT-LOC-CD;
        TS04S07();
        if (sysVar.errorCode == "00000000")
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSCREC.XCTCD == TS04W02.XCTCD)
               /* next sentence, they are of same country*/
            else
              set TS04M002.TS-EXPT-LOC-CD cursor, bold;
              converseLib.validationFailed(384); /* orig & export must be same ctry*/
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100)
              set TS04M002.TS-EXPT-LOC-CD cursor, bold;
              converseLib.validationFailed(219);
            else
              if (SQLCA.VAGen_SQLCODE == -911)
                set TS04M002.TS-EXPT-LOC-CD cursor, bold;
                converseLib.validationFailed(11);
              end
            end
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set TS04M002.TSEORIG cursor, bold;
          converseLib.validationFailed(219);
        else
          set TS04M002.TSEORIG cursor, bold;
          converseLib.validationFailed(11);
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* CUSTOMER validation*/
   /* ------------------------------------------------------------*/

   /* Customer may not be changed if packing lists have been*/
   /* associated with the shipment.*/

  if (TS04W00.TS04WPKL == "Y") /* Pk lists for shipment*/
    TS04W00.TS04WPKL = "N"; /* Reset switch*/
    if (TS04M002.KUCCOID != TS04W00.KUCCOID) /* Cust for current fetch*/

      TS04M002.KUCCOID = TS04W00.KUCCOID; /* Restore the customer*/
      set TS04M002.KUCCOID cursor, bold; /* Position cursor*/
      converseLib.validationFailed(215); /* Cust may not be changed*/
    end
  else /* Cust may be changed*/
    if (TS04M002.KUCCOID != TS04W00.KUCCOID) /* Cust did change*/
      TS04W00.TS04WKCH = "Y"; /* Cust changed switch*/
    end
  end

   /* -----------------------------*/
   /* Validate a customer change.*/
   /* -----------------------------*/

   /* NOTE - Validated against DCUST.VCMPNY01 to access*/
         /* freight ppd and insur ppd data.  Validation*/
         /* performed on every pass to obtain these*/
         /* defaults if needed.*/

  if (TS04M002.KUCCOID != 0)
                                   /* Customer not missing*/

    set KUCREC empty;
                                   /* Initialize link area*/
    KUCREC.KUCCOID = TS04M002.KUCCOID;
    TS04S06(); /* Validate customer*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Customer is valid*/

        if (TS04M002.OP1FTIND == " ") /* Freight ppd missing*/
           /* Use default from VCMPNY01*/
          set TS04M002.OP1FTIND normal; /* Reset highlight*/
          TS04M002.OP1FTIND = KUCREC.KUCFRTPD; /* Insur ppd*/
          TS04W02.OP1FTIND = KUCREC.KUCFRTPD;
        end

        if (TS04M002.OP1IPIND == " ") /* Insur ppd missing*/
           /* Use default from VCMPNY01*/
          set TS04M002.OP1IPIND normal; /* Reset highlight*/
          TS04M002.OP1IPIND = KUCREC.KUCINSPD; /* Insur ppd*/
          TS04W02.OP1IPIND = KUCREC.KUCINSPD;
        end
        TS04W02.KUCCOID = TS04M002.KUCCOID; /* Save new customer*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* ID not found*/

          set TS04M002.KUCCOID cursor, bold; /* Position cursor*/
          converseLib.validationFailed(161); /* Customer invalid*/
        end
      end
    end
  else
    set TS04M002.KUCCOID cursor, bold; /* Position cursor*/
    converseLib.validationFailed(161); /* Customer missing*/
  end

   /* ---------------------------*/
   /* CARRIER DESC validation*/
   /* ---------------------------*/
   /* NOTE : User override has precedence over the standard*/
   /* desc.  If the description field is empty, the field*/
   /* defaults to the standard description.*/

  if (TS04M002.TSACARNM == " ")
                                   /* Carrier desc missing*/
    set TSAREC empty; /* Initialize dclgen*/
    TSAREC.TSACARCD = TS04M002.TSACARCD; /* Pass key value*/
    TS04354(); /* Carrier validation*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
        if (TSAREC.XXXSTAT == "A") /* Active status*/

          TS04M002.TSACARNM = TSAREC.TSACARNM; /* Carrier name*/
          TS04W02.TSACARNM = TSAREC.TSACARNM; /* Save carrier descs*/
          TS04W00.TSACARNM = TSAREC.TSACARNM; /* Save for PA2*/
        end
      end /* ; Invalid code handled below*/
    end /* Unsuccessful call handled in TS04355*/
  else
    TS04W02.TSACARNM = TS04M002.TSACARNM; /* Save current desc*/
  end

   /* ---------------------------*/
   /* CARRIER validation*/
   /* ---------------------------*/

  if (TS04M002.TSACARCD != " ") /* Carrier code present*/
    if (TS04M002.TSACARCD != TS04W02.TSACARCD) /* Carrier code changed*/

      set TSAREC empty; /* Initialize dclgen area*/
      TSAREC.TSACARCD = TS04M002.TSACARCD; /* Pass key value*/
      TS04354(); /* Carrier validation*/

      if (sysVar.errorCode == "00000000") /* Call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

          if (TSAREC.XXXSTAT == "A") /* Active status*/
            TS04W02.TSACARCD = TS04M002.TSACARCD; /* Save valid cd*/

            TS04M002.TSACARNM = TSAREC.TSACARNM; /* Carrier name*/
            TS04W02.TSACARNM = TSAREC.TSACARNM; /* Save carr descs*/
            TS04W00.TSACARNM = TSAREC.TSACARNM;

          else /* Status is inactive*/
            converseLib.validationFailed(072); /* Inactive status*/
            set TS04M002.TSACARCD cursor, bold; /* Position cursor*/

          end
        else

          if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
            set TS04M002.TSACARCD cursor, bold; /* Position cursor*/
            converseLib.validationFailed(213);
                                   /* Carr missing or invalid*/

          else
            if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
              set TS04M002.TSEORIG cursor, bold; /* Position cursor*/
              converseLib.validationFailed(011); /* Not available*/
            end
          end
        end
      end
    end
  else
                                   /* Carrier code is missing*/
    set TS04M002.TSACARCD cursor, bold; /* Position cursor*/
    converseLib.validationFailed(213); /* Missing or invalid*/
  end

   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 332 /* THESE ARE WARNING MESSAGES,*/
   || converseVar.validationMsgNum == 333) /* ALLOW PROCESSING TO CONTINUE.*/
       /* NEXT SENTENCE*/
  else
    if (converseVar.validationMsgNum != 0) /* Errors were found*/
      TSWREC.XXXMODID = "350"; /* Module identification*/
      exit stack; /* Redisplay map*/
    end
  end

   /* ------------------------------------------------------------*/
   /* DATA HAS BEEN FULLY VALIDATED AND SHIPMENT HAS BEEN*/
   /* CHECKED TO INSURE THAT NO INVOICING EXISTS ON ANY*/
   /* ORDERS ASSOCIATED WITH THE SHIPMENT.*/
   /* ------------------------------------------------------------*/


end // end TS04350

// Verify shipment can be changed
Function TS04351()

   /* ------------------------------------------------------------*/
   /* Check for any invoicing against this shipment*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Initialize dclgen area*/
  TS04W00.TS04WINV = "N"; /* Invoicing on shipment switch*/
  TS04W00.TS04WPKL = "N"; /* Pk list on shipment*/

   /* NOTE - Use display storage customer...in case customer*/
          /* was modified on the map.*/

  TSVREC.KUCCOID = TS04W02.KUCCOID; /* Customer*/
  TSVREC.TSFSHPID = TS04W02.TSFSHPID; /* Shipment id*/
  TSVREC.TSVPLNBR = -1; /* Get all pk list numbers*/
  TSVREC.NIAIVCDT = -1; /* Get all invoice dates*/

  try
    call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If cursor has been established, then check all rows*/
   /* for this shipment to determine if any invoicing has*/
   /* taken place for any attached orders.  If so, set a*/
   /* a switch which indicates that this shipment may not*/
   /* be updated...return to the previous process depending*/
   /* on the codes.  If necessary, display error messages.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Open successful*/

    try
      call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* Fetch next*/

    while (sysVar.errorCode == "00000000" /* While call successful*/
     && SQLCA.VAGen_SQLCODE == 0) /* and row is found*/

      TS04W00.TS04WPKL = "Y"; /* Pk lists for shipment*/

      if (TSVREC.NIAIVCDT > 0) /* Invoicing on shipment switch*/
        TS04WINV = "Y"; /* Invoices present (switch)*/
      end

      try
        call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Fetch next*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* No more rows*/

    TS04S09(); /* Close cursor*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Resource is not available or a system error has occured.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "351"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty;
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Pgm appl*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Database name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

  exit stack; /* Redisplay map*/


end // end TS04351

// Date validation routine
Function TS04352()

   /* ------------------------------------------------------------*/
    /* Validate a passed date using TA0040.*/
   /* ------------------------------------------------------------*/

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date validation routine*/


end // end TS04352

// Craft validation
Function TS04353()

   /* ------------------------------------------------------------*/
    /* Validate the craft code and obtain the description*/
    /* using the craft table (vcraft01).*/
   /* ------------------------------------------------------------*/

  try
    call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Carrier found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or Carrier not found*/

      return; /* Return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "353"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty; /* Clear screen/save attributes*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/
  TA1REC.TA1TBLKE = TS5REC.TS5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04353

// Carrier validation
Function TS04354()

   /* ------------------------------------------------------------*/
    /* Validate the carrier code and obtain the description*/
    /* using the carrier table (vtscar01).*/
   /* ------------------------------------------------------------*/

  try
    call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Carrier found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or Carrier not found*/

      return; /* Return to the previous process*/
    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "354"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty; /* Clear screen/save attributes*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSAREC.TSAKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/



end // end TS04354

// Process valid input request
Function TS04360()

   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If ENTER has been pressed at this point, date has been*/
   /* validated.  Get the next ship id from the transportation*/
   /* control table, format the zz fields, and insert the row.*/

   /* NOTE : IO2530 automatically updates the next number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* User confirmed addition*/
   && TS04W00.TS04WFUN == "C")      /* and user may change data*/

    /* ------------------------------------------------------------*/
     /* Obtain the current date and time.*/
    /* ------------------------------------------------------------*/

    XX0XS01(); /* Obtain date and time*/

    TSUREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
    TSUREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    TSUREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


    /* ------------------------------------------------------------*/
     /* Update the changed data in the table row.*/
     /* If the customer key has changed, then perform an insert*/
     /* and delete, otherwise perform an update.*/
    /* ------------------------------------------------------------*/

    if (TS04W00.TS04WKCH != "Y") /* Customer did not change*/
      TS04361(); /* Update table row*/
    else /* Customer did change*/
      TS04362(); /* Insert new record*/
      if (SQLCA.VAGen_SQLCODE == 0) /* New row inserted*/
        TS04363(); /* Delete old record*/
      end
    end

    /* ------------------------------------------------------------*/
     /* Indicate that the update was successfully completed.*/
    /* ------------------------------------------------------------*/

    TSWREC.XXXMODID = "360"; /* Module identification*/
    TSWREC.XXXMSGNO = 044; /* Database update completed*/

    /* ------------------------------------------------------------*/
     /* Commit all changes made to protected resources.*/
    /* ------------------------------------------------------------*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all changes*/

  else

    return; /* Return to previous process*/

  end


end // end TS04360

// Update the table row
Function TS04361()

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  TSUREC.KUCCOID = TS04M002.KUCCOID; /* Customer id*/
  TSUREC.TSFSHPID = TS04M002.TSFSHPID; /* Shipment id*/
  TSUREC.TSUBOL = TS04M002.TSUBOL; /* Bill of lading*/
  TSUREC.TSUMAWB = TS04M002.TSUMAWB; /* Mawb*/
  TSUREC.TSACARCD = TS04M002.TSACARCD; /* Carrier code*/
  TSUREC.TSACARNM = TS04M002.TSACARNM; /* Carrier name*/
  TSUREC.TS5CRAFT = TS04M002.TS5CRAFT; /* Craft code*/
  TSUREC.TS5NAME = TS04M002.TS5NAME; /* Craft name*/
  TSUREC.TSUNLSHP = TS04M002.TSUNLSHP; /* Ship*/
  TSUREC.TSEORIG = TS04M002.TSEORIG; /* Port of load (origin)*/
  TSUREC.TS-EXPT-LOC-CD = TS04M002.TS-EXPT-LOC-CD; /* export loc*/
  TSUREC.TSFDPRTA = TS04W02.TS04W2DP; /* Depart date (ccyymmdd)*/
  TSUREC.TSFRELDT = TS04W02.TS04W2RL; /* Whse rel date (ccyymmdd)*/
  TSUREC.TSUCNSDT = TS04W02.TS04W2CN; /* ETA cnsldtn dte(ccyymmdd)*/
  TSUREC.TSFDSCHE = TS04W02.TS04W2DS; /* ETA dischrg dte(ccyymmdd)*/
  TSUREC.TSUFCTY = TS04M002.TSUFCTY; /* Factory loc*/
  TSUREC.TSFDSCHG = TS04M002.TSFDSCHG; /* Discharge loc*/
  TSUREC.TSUCNSLD = TS04M002.TSUCNSLD; /* Cnsldtn loc*/
  TSUREC.YMTCD = TS04M002.YMTCD; /* Mode code*/
  TSUREC.TSFDWBK = TS04M002.TSFDWBK; /* Drawback*/
  TSUREC.YSTCD = TS04M002.YSTCD; /* Status code*/
  TSUREC.YPYCD = TS04M002.YPYCD; /* Payment type code*/
  TSUREC.YSSCD = TS04M002.YSSCD; /* Shipment status code*/
  TSUREC.OP1FTIND = TS04M002.OP1FTIND; /* Freight PPD*/
  TSUREC.OP1IPIND = TS04M002.OP1IPIND; /* Insur PPD*/
  TSUREC.TSFOFRGT = TS04M002.TSFOFRGT; /* Freight charge*/
  TSUREC.TSFOINLD = TS04M002.TSFOINLD; /* Inland charge*/

   /* ------------------------------------------------------------*/
   /* If this is not an export, move in map total fields that*/
   /* have been entered.  Otherwise no entry allowed, so retain*/
   /* the values from the fetch.*/
   /* ------------------------------------------------------------*/
  if (TS04M002.YSTCD != "EX") /* not export*/
    TSUREC.TSUSHPQT = TS04M002.TSUSHPQT; /* Total units*/
    TSUREC.TSUNSPCM = TS04M002.TSUNSPCM; /* Total volume*/
    TSUREC.NIESHPTC = TS04M002.NIESHPTC; /* Total cartons*/
    TSUREC.TSUNSPKG = TS04M002.TSUNSPKG; /* Total weight*/
  else /* Not export*/
        /* leave original values in dclgen fields*/
  end

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4690" ("U ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      TS04W00.TS04WSWR = "Y"; /* Request for data switch*/

      TSWREC.XXXMODID = "361"; /* Module identification*/
      TSWREC.XXXMSGNO = 12; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "361"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS04361

// Insert new row
Function TS04362()

   /* ------------------------------------------------------------*/
   /* Add row with ship id associated with new customer.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  TSUREC.KUCCOID = TS04M002.KUCCOID; /* New Customer id*/
  TSUREC.TSFSHPID = TS04M002.TSFSHPID; /* Shipment id*/
  TSUREC.TSUBOL = TS04M002.TSUBOL; /* Bill of lading*/
  TSUREC.TSUMAWB = TS04M002.TSUMAWB; /* Mawb*/
  TSUREC.TSACARCD = TS04M002.TSACARCD; /* Carrier code*/
  TSUREC.TSACARNM = TS04M002.TSACARNM; /* Carrier name*/
  TSUREC.TS5CRAFT = TS04M002.TS5CRAFT; /* Craft code*/
  TSUREC.TS5NAME = TS04M002.TS5NAME; /* Craft name*/
  TSUREC.TSUNLSHP = TS04M002.TSUNLSHP; /* Ship*/
  TSUREC.TSEORIG = TS04M002.TSEORIG; /* Port of load (origin)*/
  TSUREC.TS-EXPT-LOC-CD = TS04M002.TS-EXPT-LOC-CD; /* export loc*/
  TSUREC.XGPCD = "02"; /* GPC*/
  TSUREC.XDVCD = "02"; /* Division*/
  TSUREC.TSFDPRTA = TS04W02.TS04W2DP; /* Depart date*/
  TSUREC.TSFRELDT = TS04W02.TS04W2RL; /* Whse rel date*/
  TSUREC.TSUCNSDT = TS04W02.TS04W2CN; /* ETA cnsldtn date*/
  TSUREC.TSFDSCHE = TS04W02.TS04W2DS; /* ETA dischrg date*/
  TSUREC.TSUFCTY = TS04M002.TSUFCTY; /* Factory loc*/
  TSUREC.TSFDSCHG = TS04M002.TSFDSCHG; /* Discharge loc*/
  TSUREC.TSUCNSLD = TS04M002.TSUCNSLD; /* Cnsldtn loc*/
  TSUREC.YMTCD = TS04M002.YMTCD; /* Mode code*/
  TSUREC.TSFDWBK = TS04M002.TSFDWBK; /* Drawback*/
  TSUREC.YSTCD = TS04M002.YSTCD; /* Status code*/
  TSUREC.YPYCD = TS04M002.YPYCD; /* Payment type code*/
  TSUREC.YSSCD = TS04M002.YSSCD; /* Shipment status code*/
  TSUREC.TSFSTADT = XX0XW01.XX0XWDAT; /* Status date*/
   /* note ; xx0xwdat will have curr dt (yyyymmdd)*/
          /* from setting of default in TS04210*/
  TSUREC.OP1FTIND = TS04M002.OP1FTIND; /* Freight PPD*/
  TSUREC.OP1IPIND = TS04M002.OP1IPIND; /* Insur PPD*/
  TSUREC.TSFOFRGT = TS04M002.TSFOFRGT; /* Freight charge*/
  TSUREC.TSFOINLD = TS04M002.TSFOINLD; /* Inland charge*/
  TSUREC.TSUSHPQT = TS04M002.TSUSHPQT; /* Total units*/
  TSUREC.TSUNSPCM = TS04M002.TSUNSPCM; /* metric volume*/
  TSUREC.TSUNSPFT = 0; /* u.s. volume*/
  TSUREC.NIESHPTC = TS04M002.NIESHPTC; /* Total cartons*/
  TSUREC.TSUNSPKG = TS04M002.TSUNSPKG; /* metric weight*/
  TSUREC.TSUNSPLB = 0; /* U.S. weight*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4690" ("A ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    TS04W00.TS04WSWR = "Y"; /* Request for data switch*/

  end

   /* ------------------------------------------------------------*/
   /* If update not successful, return error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "362"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS04362

// Delete obsolete row
Function TS04363()

   /* ------------------------------------------------------------*/
   /* Delete the obsolete row with the ship id associated*/
   /* to the old customer.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Format key data in the dclgen area.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty; /* Initialize the dclgen*/

  TSUREC.TSFSHPID = TS04M002.TSFSHPID; /* Shipment id*/
  TSUREC.KUCCOID = TS04W00.KUCCOID; /* Old customer id*/

   /* ------------------------------------------------------------*/
   /* Delete the selected shipment from the shipment table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4690" ("D ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* Otherwise, check sqlcode and display appropriate message.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      TSWREC.XXXMODID = "363"; /* Module identification*/
      TSWREC.XXXMSGNO = 12; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "363"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
   /* MOVE         TO TA1REC.TA1TBLKE  ;        Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

  exit stack; /* Exit to display map*/


end // end TS04363

// DISPLAY DETAIL/DELETE SHPMNT
Function TS04400()
   /* ------------------------------------------------------------*/
   /* This is the process used to display the detail shipment*/
   /* map (m001) for deletion of a shipment.*/

   /* Note : Deletion of a shipment does NOT delete any*/
   /* associated orders.  It just removes the shipment id*/
   /* from the order, allowing it to be associated with a*/
   /* new (or existing) shipment.*/
   /* ------------------------------------------------------------*/

  TS04410(); /* Obtain the data to display*/

  TS04420(); /* Format and display the map*/

  TS04430(); /* Check attention identifier*/

  TS04440(); /* Reset fields to normal intensity*/

  TS04450(); /* Verify the entered data*/

  TS04460(); /* Process valid input request*/


end // end TS04400

// Obtain the data to display
Function TS04410()

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS04W00.TS04WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area.*/
   /* ------------------------------------------------------------*/

  set TS04W02 empty; /* M002 display storage*/

   /* ------------------------------------------------------------*/
   /* Obtain the table row to be displayed.*/
   /* ------------------------------------------------------------*/

  TS04411(); /* Obtain the table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No row found*/

    TSWREC.XXXMODID = "410"; /* Module identification*/
    TSWREC.XXXMSGNO = 18; /* No data found*/
    set TS04M002.KUCCOID cursor; /* Position customer*/

    return; /* Return to previous process*/
                                   /* and display map with no data*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data in display storage.*/
   /* ------------------------------------------------------------*/

  TS04412(); /* Save in display storage*/

   /* ------------------------------------------------------------*/
   /* Obtain total cartons for this shipment*/
   /* ------------------------------------------------------------*/

  TS04413(); /* Get total cartons*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WSWR = "N"; /* Request for data switch*/


end // end TS04410

// Select the table row
Function TS04411()

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty; /* Row storage area*/

  TSUREC.KUCCOID = TS04W00.KUCCOID; /* Customer id*/
  TSUREC.TSFSHPID = TS04W00.TSFSHPID; /* Shipment id*/

  try
    call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/
  TS04W00.TS04WSWR = "N"; /* Request for data switch*/

  TSWREC.XXXMODID = "411"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS04411

// Save data from selected row
Function TS04412()

   /* ------------------------------------------------------------*/
    /* If the data was found for the selected row, then save*/
    /* save it in the working storage for this map.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0) /* No data to save*/
    return; /* Return to the previous process*/
  end

  TS04W02.TSFSHPID = TSUREC.TSFSHPID;
  TS04W02.KUCCOID = TSUREC.KUCCOID;
  TS04W02.TSUBOL = TSUREC.TSUBOL;
  TS04W02.TSUMAWB = TSUREC.TSUMAWB;
  TS04W02.TSACARCD = TSUREC.TSACARCD;
  TS04W02.TSACARNM = TSUREC.TSACARNM;
  TS04W02.TS5CRAFT = TSUREC.TS5CRAFT;
  TS04W02.TS5NAME = TSUREC.TS5NAME;
  TS04W02.TSUNLSHP = TSUREC.TSUNLSHP;
  TS04W02.TSEORIG = TSUREC.TSEORIG;
  TS04W02.TS-EXPT-LOC-CD = TSUREC.TS-EXPT-LOC-CD;
  TS04W02.TSUFCTY = TSUREC.TSUFCTY;
  TS04W02.TSUCNSLD = TSUREC.TSUCNSLD;
  TS04W02.TSFDSCHG = TSUREC.TSFDSCHG;
  TS04W02.YMTCD = TSUREC.YMTCD;

   /* ------------------------------------------------------------*/
   /* Convert DB2 depart date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize TA0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSFDPRTA; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date not valid*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSFDPRTA = TSUREC.TSFDPRTA; /* Display invalid date*/
  else
    TS04W02.TSFDPRTA = TA2REC.TA2GRGAN; /* Date format mmddyy*/
  end

   /* ------------------------------------------------------------*/
   /* Convert DB2 whse rel date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize TA0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSFRELDT; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date not valid*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSFRELDT = TSUREC.TSFRELDT; /* Display invalid date*/
  else
    TS04W02.TSFRELDT = TA2REC.TA2GRGAN; /* Date format mmddyy*/
  end

   /* ------------------------------------------------------------*/
   /* Convert DB2 ETA cnsldtn date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize TA0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSUCNSDT; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date not valid*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSUCNSDT = TSUREC.TSUCNSDT; /* Display invalid date*/
  else
    TS04W02.TSUCNSDT = TA2REC.TA2GRGAN; /* Date format mmddyy*/
  end

   /* ------------------------------------------------------------*/
   /* Convert DB2 ETA dischrg date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize TA0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSFDSCHE; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date not valid*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSFDSCHE = TSUREC.TSFDSCHE; /* Display invalid date*/
  else
    TS04W02.TSFDSCHE = TA2REC.TA2GRGAN; /* Date format mmddyy*/
  end

  TS04W02.TSFDWBK = TSUREC.TSFDWBK;
  TS04W02.YSTCD = TSUREC.YSTCD;
  TS04W02.YPYCD = TSUREC.YPYCD;
  TS04W02.YSSCD = TSUREC.YSSCD;

   /* ------------------------------------------------------------*/
   /* Convert DB2 status date to mmddyy format for display*/
   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Initialize TA0040 rec*/
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = TSUREC.TSFSTADT; /* Pass date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date not valid*/

  if (TA2REC.TA2RTNCD != 0) /* Date not valid*/
    TS04W02.TSFSTADT = TSUREC.TSFSTADT; /* Display invalid date*/
  else
    TS04W02.TSFSTADT = TA2REC.TA2GRGAN; /* Date format mmddyy*/
  end

  TS04W02.OP1FTIND = TSUREC.OP1FTIND;
  TS04W02.OP1IPIND = TSUREC.OP1IPIND;
  TS04W02.TSFOFRGT = TSUREC.TSFOFRGT;
  TS04W02.TSFOINLD = TSUREC.TSFOINLD;

   /* ------------------------------------------------------------*/
   /* If shipment is an export, display us standard*/
   /* NOTE - It is currently assumed user will enter metric units*/
   /* on entries for direct ships.*/
   /* ------------------------------------------------------------*/

  if (TSUREC.YSTCD == "EX") /* An export*/
    TS04W02.TSUNSPKG = TSUREC.TSUNSPLB; /* lbs*/
    TS04W02.TSUNSPCM = TSUREC.TSUNSPFT; /* ft3*/

  else /* Not an export*/
    TS04W02.TSUNSPKG = TSUREC.TSUNSPKG; /* Kg*/
    TS04W02.TSUNSPCM = TSUREC.TSUNSPCM; /* Cbm*/
  end

  TS04W02.TSUSHPQT = TSUREC.TSUSHPQT;


end // end TS04412

// Obtain total cartons
Function TS04413()

   /* ------------------------------------------------------------*/
   /* Find all orders for this shipment and calculate the*/
   /* total cartons to display on map.  For direct ships*/
   /* obtain the total from VNLSHP01.  For any other shipment*/
   /* type, the total is calculated against the carton file.*/
   /* ------------------------------------------------------------*/

  if (TS04W02.YSTCD != "EX") /* Direct ship*/

    TS04W02.NIESHPTC = TSUREC.NIESHPTC; /* Use vnlshp01 crtns*/

  else /* Not a direct ship*/

    set TSVREC empty; /* Initialize dclgen area*/
    TS04W02.NIESHPTC = 0; /* Initialize total cartons*/

    TSVREC.TSFSHPID = TS04W02.TSFSHPID; /* For this shipment*/
    TSVREC.KUCCOID = TS04W02.KUCCOID; /* and this customer*/
    TSVREC.TSVPLNBR = -1; /* with all pk list nbrs*/
    TSVREC.NIAIVCDT = 0; /* and zero invoice dates*/

    try
      call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* Select set*/

    /* ------------------------------------------------------------*/
     /* If cursor has been established, then process all packing*/
     /* list orders for this shipment.  Select the max count of*/
     /* of cartons for each packing list against the packing list*/
     /* carton file (VNLPLC01).  Add this count to total cartons.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* Open successful*/

      try
        call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Fetch first*/

      while (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 0) /* Rows found*/

        TS04S08(); /* Get carton count*/

        if (TS4REC.TS4INCTR == 0) /* Carton count obtained*/
           /* accumulate returned carton count*/
          TS04W02.NIESHPTC = TS04W02.NIESHPTC + TS4REC.TS4FUNCT;
        end

        try
          call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
        end /* Fetch next*/

      end
    end

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* No more rows*/

      TS04S09(); /* Close cursor*/

      return; /* Return to the previous process*/

    end

    /* ------------------------------------------------------------*/
     /* Resource not available or a system error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL return code*/

    TSWREC.XXXMODID = "413"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1TYPE = "RETN"; /* Termination function*/
      set TS04M002 empty;
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "OBTAIN TOTAL CARTONS";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Pgm appl*/
    TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    exit stack; /* Redisplay the map*/

  end
end // end TS04413

// Format and converse the map
Function TS04420()

   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error found*/
    if (TS04W00.TS04WSWF == "Y") /* Map must be formatted*/

      TS04421(); /* Format the data on the map*/
      if (TSWREC.XXXMSGNO != 1 /* Delete has not occurred*/
       && converseVar.validationMsgNum == 0) /* and no error messages*/
        converseLib.validationFailed(154); /* Ask user to confirm delete*/
      end
    end

  else
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* set any modifiable fields protected*/
  set TS04M002.NIESHPTC protect;

  TS04M002.XXXMODID = "DEL"; /* Function*/
  set TS04M002.CATOAP cursor; /* Position cursor*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS04M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS04M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS04M002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0) /* Message to display*/

    TS04M002.XXXMODID = TSWREC.XXXMODID; /* Module identification*/
    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end /* Message number*/

    set TS04M002 alarm; /* Indicate sound alarm*/

  end

  converse TS04M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/


  TSWREC.XXXMSGNO = 0; /* Message number*/
  TSWREC.XXXMODID = " "; /* Module identification*/

  COMMAREA.CATOAP = TS04M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS04M002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Change the selection indicator to show the line was viewed.*/
   /* ------------------------------------------------------------*/

  TS04W01.TS04MSEL[TS04WIXM] = "V"; /* Select indicator*/


end // end TS04420

// Format the display data
Function TS04421()

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS04M002 initial; /* M002 input/output area*/

  TS04W00.TS04WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS04M002.TSFSHPID = TS04W02.TSFSHPID;
  TS04M002.KUCCOID = TS04W02.KUCCOID;
  TS04M002.TSUBOL = TS04W02.TSUBOL;
  TS04M002.TSUMAWB = TS04W02.TSUMAWB;
  TS04M002.TSACARCD = TS04W02.TSACARCD;
  TS04M002.TSACARNM = TS04W02.TSACARNM;
  TS04M002.TS5CRAFT = TS04W02.TS5CRAFT;
  TS04M002.TS5NAME = TS04W02.TS5NAME;
  TS04M002.TSUNLSHP = TS04W02.TSUNLSHP;

  TS04M002.TSEORIG = TS04W02.TSEORIG;

   /* ------------------------------------------------------------*/
   /* Obtain the port of load desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSEORIG; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/

      TS04M002.TS04MCTY[1] = TSCREC.XXXCITY; /* Desc city*/

    else
      TS04M002.TS04MCTY[1] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[1] = " "; /* Desc city*/
  end

  TS04M002.TSUFCTY = TS04W02.TSUFCTY;

   /* ------------------------------------------------------------*/
   /* Obtain the factory desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSUFCTY; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/

      TS04M002.TS04MCTY[2] = TSCREC.XXXCITY; /* Desc city*/

    else
      TS04M002.TS04MCTY[2] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[2] = " "; /* Desc city*/
  end

  TS04M002.TSUCNSLD = TS04W02.TSUCNSLD;

   /* ------------------------------------------------------------*/
   /* Obtain the cnsldn desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSUCNSLD; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/

      TS04M002.TS04MCTY[3] = TSCREC.XXXCITY; /* Desc city*/

    else
      TS04M002.TS04MCTY[3] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[3] = " "; /* Desc city*/
  end

  TS04M002.TSFDSCHG = TS04W02.TSFDSCHG;

   /* ------------------------------------------------------------*/
   /* Obtain the dischg desc, save it in display storage.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Initialize dclgen area*/
  TSCREC.TSCLOCCD = TS04W02.TSFDSCHG; /* TSLOC01 key*/
  TS04S07(); /* Obtain description*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Desc found*/

      TS04M002.TS04MCTY[4] = TSCREC.XXXCITY; /* Desc city*/

    else
      TS04M002.TS04MCTY[4] = " "; /* Desc city*/
    end
  else
    TS04M002.TS04MCTY[4] = " "; /* Desc city*/
  end

  TS04M002.YMTCD = TS04W02.YMTCD;
  TS04M002.TSFDPRTA = TS04W02.TSFDPRTA;
  TS04M002.TSFRELDT = TS04W02.TSFRELDT;
  TS04M002.TSUCNSDT = TS04W02.TSUCNSDT;
  TS04M002.TSFDSCHE = TS04W02.TSFDSCHE;
  TS04M002.TSFDWBK = TS04W02.TSFDWBK;
  TS04M002.YSTCD = TS04W02.YSTCD;
  TS04M002.YPYCD = TS04W02.YPYCD;
  TS04M002.YSSCD = TS04W02.YSSCD;
  TS04M002.TSFSTADT = TS04W02.TSFSTADT;
  TS04M002.OP1FTIND = TS04W02.OP1FTIND;
  TS04M002.OP1IPIND = TS04W02.OP1IPIND;
  TS04M002.TSFOFRGT = TS04W02.TSFOFRGT;
  TS04M002.TSFOINLD = TS04W02.TSFOINLD;
  TS04M002.TSUNSPKG = TS04W02.TSUNSPKG;
  TS04M002.TSUNSPCM = TS04W02.TSUNSPCM;
  TS04M002.NIESHPTC = TS04W02.NIESHPTC;
  TS04M002.TSUSHPQT = TS04W02.TSUSHPQT;


end // end TS04421

// Check attention identifier
Function TS04430()

   /* NOTE : PA2 is not functional on the delete screen*/
          /* and, therefore, not a valid key.*/

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TS04S01(); /* Purge any temporary storage*/

      XSTSS02(); /* Exit to another application*/

      set TS04M002.CATOAP cursor, bold; /* Highlight*/

      TS04W00.TS04WSWD = "2"; /* Map to be displayed switch*/

    else

      TSWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS04M002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/
      TS04W00.TS04WSWR = "Y"; /* Request for data switch*/
      TS04W00.TS04WSWF = "Y"; /* Format the map switch*/

      exit stack; /* Exit to display map*/

    end

    TS04S01(); /* Purge any temporary storage*/

    XSTSS02(); /* Exit to another application*/

    TS04W00.TS04WSWD = "1"; /* Map to be displayed switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf1   /* and PF1 was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf4)  /* and pf4 was not pressed*/

    TSWREC.XXXMODID = "430"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    exit stack; /* Exit to display map*/

  end


end // end TS04430

// Reset highlighted fields
Function TS04440()

   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intesity.*/
   /* ------------------------------------------------------------*/

  set TS04M002.TSFSHPID initialAttributes;
  set TS04M002.KUCCOID initialAttributes;


end // end TS04440

// Verify the entered data
Function TS04450()

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    TSWREC.XXXMODID = "450"; /* Module identification*/
    set TS04M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
    /* Verify that this shipment can be deleted ... no shipment*/
    /* can be deleted if there has been any invoicing against it.*/
   /* ------------------------------------------------------------*/

  TS04451(); /* Verify shipment can be delt'd*/

  if (TS04W00.TS04WINV == "Y") /* Invoices against shipment*/
    set TS04M002.TSFSHPID bold; /* Highlight shipment id*/
    set TS04M002.KUCCOID bold; /* Highlight customer*/
    converseLib.validationFailed(212); /* Shipment cannot be deleted*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    TSWREC.XXXMODID = "450"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end


end // end TS04450

// Check invoicing for shipment
Function TS04451()

   /* ------------------------------------------------------------*/
   /* Check for any invoicing against this shipment*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Initialize dclgen area*/
  TS04W00.TS04WINV = "N";
                                   /* Invoicing on shipment switch*/

  TSVREC.KUCCOID = TS04M002.KUCCOID; /* Customer*/
  TSVREC.TSFSHPID = TS04M002.TSFSHPID; /* Shipment id*/
  TSVREC.TSVPLNBR = -1; /* Get all pk lists*/
  TSVREC.NIAIVCDT = -1; /* Get all invoice dates*/

  try
    call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If cursor has been established, then check all rows*/
   /* for this shipment to determine if any invoicing has*/
   /* taken place for any attached orders.  If so, set a*/
   /* a switch which indicates that this shipment may not*/
   /* be updated...return to the previous process depending*/
   /* on the codes.  If necessary, display error messages.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "451"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Open successful*/

    try
      call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* Fetch next*/

    while (sysVar.errorCode == "00000000" /* While call successful*/
     && SQLCA.VAGen_SQLCODE == 0) /* and row is found*/

      if (TSVREC.NIAIVCDT > 0) /* Invoicing on shipment switch*/
        TS04WINV = "Y"; /* Invoices present (switch)*/
      end

      try
        call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Fetch next*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* No more rows*/

    TS04S09(); /* Close cursor*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Resource is not available or a system error has occured.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty;
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Pgm appl*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Database name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

  exit stack; /* Redisplay map*/


end // end TS04451

// Process valid input request
Function TS04460()

   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS04W00.TS04WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Remove all correspond shipment ids from orders that*/
   /* are attached to the shipment that is to be deleted.*/
   /* Then delete the shipment.*/
   /* ------------------------------------------------------------*/

  TS04461(); /* Remove attached orders*/

  TS04462(); /* Delete the shipment*/

   /* ------------------------------------------------------------*/
   /* Indicate that delete was successfully completed.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "460"; /* Module identification*/
  TSWREC.XXXMSGNO = 044; /* Indicate update completed*/

   /* ------------------------------------------------------------*/
   /* Commit all changes made to protected resources.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/


end // end TS04460

// Remove attached orders
Function TS04461()

   /* ------------------------------------------------------------*/
    /* When a shipment is deleted, all orders which are attached*/
    /* to the shipment must have the ship id removed...so that*/
    /* they become 'free' to be attached to another shipment.*/

    /* Select the set of pk list orders attached to the deleted*/
    /* shipment and update each, setting the shipment id to 0.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Initialize dclgen area*/

  TSVREC.KUCCOID = TS04M002.KUCCOID; /* Pass customer*/
  TSVREC.TSFSHPID = TS04M002.TSFSHPID; /* Pass shipment id*/
  TSVREC.TSVPLNBR = -1; /* All packing lists*/
  TSVREC.NIAIVCDT = 0; /* zero invoice dates*/

  try
    call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Open successful*/

    try
      call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* Fetch first*/

    while (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 0) /* and rows exist*/

      TSVREC.TSFSHPID = 0; /* Remove the shipment id*/
      try
        call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Update*/

      if (sysVar.errorCode == "00000000" /* Call successful*/
       && SQLCA.VAGen_SQLCODE == 0)      /* and update was successful*/

        try
          call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
        end /* Fetch next*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* and no rows found*/

    TS04S09(); /* Close cursor*/

    return;
  end

   /* ------------------------------------------------------------*/
   /* Resource not available or system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "461"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    set TS04M002 empty; /* Clear map , leave attributes*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Pgm application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Pgm number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Database name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* table key*/


  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

  exit stack;


end // end TS04461

// Delete the shipment
Function TS04462()

   /* ------------------------------------------------------------*/
   /* Format key data in the dclgen area.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty; /* Initialize the dclgen area*/

  TSUREC.TSFSHPID = TS04M002.TSFSHPID; /* Shipment id*/
  TSUREC.KUCCOID = TS04M002.KUCCOID; /* Customer id*/

   /* ------------------------------------------------------------*/
   /* Delete the selected shipment from the shipment table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4690" ("D ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* Otherwise, check sqlcode and display appropriate message.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      TSWREC.XXXMODID = "462"; /* Module identification*/
      TSWREC.XXXMSGNO = 12; /* Indicate updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "462"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
   /* MOVE         TO TA1REC.TA1TBLKE  ;        Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

  exit stack; /* Exit to display map*/


end // end TS04462

// Purge temporary storage
Function TS04S01()

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TS04W01 empty; /* m001 display storage*/

  TS04W00.TS04WSWU = "N"; /* storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Reset current page number*/
  TS04W00.TA5TSQIX = 0; /* Reset highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code for purge*/

  try
    call "TA0050" (TS04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call sucessful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, post to error diagnosis facility and continue.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS04S01

// Save data in display storage
Function TS04S02()
   /* ------------------------------------------------------------*/
   /* If no table row was found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Table row not found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  TS04W01.TSFSHPID[TS04WIXM] = TSUREC.TSFSHPID; /* shipment id*/
  TS04W01.TSUBOL[TS04WIXM] = TSUREC.TSUBOL; /* bill of lading*/
  TS04W01.TSACARCD[TS04WIXM] = TSUREC.TSACARCD; /* carrier*/
  TS04W01.TS5CRAFT[TS04WIXM] = TSUREC.TS5CRAFT; /* craft*/
  TS04W01.TSUNLSHP[TS04WIXM] = TSUREC.TSUNLSHP; /* shipment nbr*/
  TS04W01.TSEORIG[TS04WIXM] = TSUREC.TSEORIG; /* origin cd*/


end // end TS04S02

// Obtain origin description
Function TS04S03()

   /* ------------------------------------------------------------*/
   /* Obtain the port of load description from the transportation*/
   /* location table (VTSLOC01).*/

   /* Note : This description is xxxcity which is longer than*/
   /* the map field; so in some cases the name will be truncated.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* No more shipments*/
    return; /* Return to previous process*/
  end

  set TSCREC empty; /* Initialize dclgen area*/

  TSCREC.TSCLOCCD = TSUREC.TSEORIG; /* Pass key*/

  try
    call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Location found*/

      TS04W01.TS04MCTY[TS04WIXM] = TSCREC.XXXCITY; /* POL grp*/

      return; /* Return to previous process*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Location code not on table*/

        TS04W01.TS04MCTY[TS04WIXM] = "DESC MISSING"; /* POL grp*/
        return; /* Return to previous process*/

      end
    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty; /* Clear screen/save attributes*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSCREC.TSCLOCCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04S03

// Update temporary storage page
Function TS04S04()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS04S04

// Read temporary storage page
Function TS04S05()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS04W01.XXXTSLEN = TS04W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = TS04W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S05"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS04S05

// Customer validation
Function TS04S06()

   /* ------------------------------------------------------------*/
    /* Verify customer exists in Company table (VCMPNY01).*/
   /* ------------------------------------------------------------*/

  try
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Customer found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or customer not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty; /* Clear screen/save attributes*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04S06

// Obtain trans loc descriptions
Function TS04S07()

   /* ------------------------------------------------------------*/
    /* Obtain the location descriptions from the transportation*/
    /* location table (VTSLOC01).*/
   /* ------------------------------------------------------------*/

  try
    call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Location found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or location not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
    /* If resource unavailable, return a message to user;*/
    /* otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate resource unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    set TS04M002 empty; /* Clear screen/save attributes*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN TRANS LOC DESC";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSCREC.TSCLOCCD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/



end // end TS04S07

// Get carton count for pk list
Function TS04S08()

   /* ------------------------------------------------------------*/
    /* Get the carton count for each packing list order.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Initialize dclgen area*/
  set TS4REC empty; /* Initialize 'io pass' area*/
  TSYREC.TSVPLNBR = TSVREC.TSVPLNBR; /* Pass pk list nbr*/
  TS4TASK = "SM"; /* Select max carton nbr*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select count*/


end // end TS04S08

// Close cursor on pk list orders
Function TS04S09()

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4700" ("C1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S09"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE CURSOR ON PK LIST ORDERS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to redisplay map*/


end // end TS04S09

//*** RECORD=TS04W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TS04W00 type basicRecord
  10 TS04WIXM TS04WIXM ; 
  10 TS04W-INDEX TS04W-INDEX ; 
  10 TS04WSWC TS04WSWC ; 
  10 TS04WSWD TS04WSWD ; 
  10 TS04WFUN TS04WFUN ; 
  10 TS04WSWF TS04WSWF ; 
  10 TS04WSWR TS04WSWR ; 
  10 TS04WSWU TS04WSWU ; 
  10 TS04WINV TS04WINV ; 
  10 TS04WPKL TS04WPKL ; 
  10 TS04WKCH TS04WKCH ; 
  10 TS04W-PF12-CONFIRM-FLAG TS04W-PF12-CONFIRM-FLAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TS04WSVP TS04WSVP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 KUCCOID KUCCOID ; 
  10 YSSCD YSSCD ; 
  10 TSFSHPID TSFSHPID ; 
  10 TSACARNM TSACARNM ; 
  10 TS5NAME TS5NAME ; 
  10 * decimal(9) ; 
  10 * decimal(9) ; 
  10 TS04WMDY TS04WMDY ; 
    15 TS04WMM TS04WMM ; 
    15 TS04WDD TS04WDD ; 
    15 TS04WYY TS04WYY ; 
  10 TS04W-NEXT-SCHED-NBR TS04W-NEXT-SCHED-NBR ; 
  10 TS04W-SHIP-ID-SELECTED TS04W-SHIP-ID-SELECTED ; 
  10 TS04W-XWHCD TS04W-XWHCD ; 
  10 TS04W-YSTCD TS04W-YSTCD ; 
  10 TS04W-CURR-OP-CUST-ORD-ID TS04W-CURR-OP-CUST-ORD-ID ; 
  10 TS04W-CURR-OP-NIKE-ORD-ID TS04W-CURR-OP-NIKE-ORD-ID ; 
  10 TS04W-CURR-TS-NIL-PL-NBR TS04W-CURR-TS-NIL-PL-NBR ; 
  10 TS04W-NBR-ORDERS-PER-SHIPMENT TS04W-NBR-ORDERS-PER-SHIPMENT ; 
  10 TS04W-NBR-PL-PER-ORDER TS04W-NBR-PL-PER-ORDER ; 
  10 TS04W-MAX-PL-PER-ORDER TS04W-MAX-PL-PER-ORDER ; 
  10 TS04W-LAST-PL-INDEX TS04W-LAST-PL-INDEX ; 
  10 TS04W-ORDER-NBR TS04W-ORDER-NBR ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
end // end TS04W00

//*** RECORD=TS04W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record TS04W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(900) ; 
    10 TS04MSEL TS04MSEL [15] ; 
    10 TSFSHPID TSFSHPID [15] ; 
    10 TSUBOL TSUBOL [15] ; 
    10 TSACARCD TSACARCD [15] ; 
    10 TS5CRAFT TS5CRAFT [15] ; 
    10 TSUNLSHP TSUNLSHP [15] ; 
    10 TSEORIG TSEORIG [15] ; 
    10 TS04MCTY TS04MCTY [15] ; 
end // end TS04W01

//*** RECORD=TS04W02 ****
// Temporary storage record for TSXX - Transportation Prototype
// ***********************
Record TS04W02 type basicRecord
  10 TSFSHPID TSFSHPID ; 
  10 TSACARCD TSACARCD ; 
  10 KUCCOID KUCCOID ; 
  10 TS5CRAFT TS5CRAFT ; 
  10 TSUBOL TSUBOL ; 
  10 TSUNLSHP TSUNLSHP ; 
  10 TSUMAWB TSUMAWB ; 
  10 TSEORIG TSEORIG ; 
  10 TSUFCTY TSUFCTY ; 
  10 YMTCD YMTCD ; 
  10 TSUCNSLD TSUCNSLD ; 
  10 TSFDPRTA TSFDPRTA ; 
  10 TS04W2DP TS04W2DP ; 
  10 TSFDSCHG TSFDSCHG ; 
  10 TSFRELDT TSFRELDT ; 
  10 TS04W2RL TS04W2RL ; 
  10 TSUCNSDT TSUCNSDT ; 
  10 TS04W2CN TS04W2CN ; 
  10 TSFDSCHE TSFDSCHE ; 
  10 TS04W2DS TS04W2DS ; 
  10 TSFDWBK TSFDWBK ; 
  10 OP1FTIND OP1FTIND ; 
  10 TSFOFRGT TSFOFRGT ; 
  10 YSTCD YSTCD ; 
  10 OP1IPIND OP1IPIND ; 
  10 TSFOINLD TSFOINLD ; 
  10 YPYCD YPYCD ; 
  10 YSSCD YSSCD ; 
  10 YPTCD YPTCD ; 
  10 TSUNSPKG TSUNSPKG ; 
  10 TSFSTADT TSFSTADT ; 
  10 TSUNSPCM TSUNSPCM ; 
  10 TSUSHPQT TSUSHPQT ; 
  10 NIESHPTC NIESHPTC ; 
  10 TSACARNM TSACARNM ; 
  10 TS5NAME TS5NAME ; 
  10 TS-EXPT-LOC-CD TS-EXPT-LOC-CD ; 
  10 XCTCD XCTCD ; 
end // end TS04W02

//*** RECORD=TS04W03 ****
// JCL SYSIN CARD
// ***********************
Record TS04W03 type basicRecord
  5 TARJCL TARJCL ; 
    10 XWHCD XWHCD ; 
    10 TS04W-PK1PKSCH TS04W-PK1PKSCH ; 
    10 TS04W-TSFSHPID TS04W-TSFSHPID ; 
    10 TS04W-KUCCOID TS04W-KUCCOID ; 
    10 CAUSERID CAUSERID ; 
    10 * char(43) ; 
end // end TS04W03

//*** RECORD=TS04W04 ****
// TABLE CONTAINING ALL ORDERS FOR A SHIPMENT.  1 ORDER RECORD
// EXISTS FOR EACH ORDER PACKLIST COMBINATION.
// MAXIMUM NBR OF ORDER/PACKLIST COMBINATIONS IS 50.
// ***********************
Record TS04W04 type basicRecord
  5 * char(600) ; // Job Control Language statement
    10 TS04W-SHIPMENT-TABLE char(10) [60] ; // Job Control Language statement
      15 TS04W-ORDER-NBR TS04W-ORDER-NBR ; 
        20 OP1CUOID OP1CUOID ; 
        20 OP1NORID OP1NORID ; 
      15 TSVPLNBR TSVPLNBR ; 
end // end TS04W04

//*** RECORD=TS04W05 ****
// TABLE CONTAINING ALL PACKLISTS FOR AN ORDER.  1 ORDER RECORD
// EXISTS FOR EACH PACKLIST BELONGING TO A PACKLIST.
// MAXIMUM NBR OF PACKLISTS IS 5.
// ***********************
Record TS04W05 type basicRecord
  5 * char(64) ; // Job Control Language statement
    10 TS04W-ORD-INDEX TS04W-ORD-INDEX ; 
    10 TS04W-ORDER-TABLE char(60) ; // Job Control Language statement
      15 TS04W-ORDER-NBR TS04W-ORDER-NBR [10] ; 
        20 OP1CUOID OP1CUOID ; 
        20 OP1NORID OP1NORID ; 
end // end TS04W05

//*** RECORD=TS04W06 ****
// TABLE CONTAINING ALL PACKLISTS FOR AN ORDER.
// MAXIMUM NBR OF PACKLISTS IS 5.
// ***********************
Record TS04W06 type basicRecord
  5 * char(24) ; // Job Control Language statement
    10 TS04W-PL-INDEX TS04W-PL-INDEX ; 
    10 TS04W-PACKLIST-TABLE char(4) [5] ; // Job Control Language statement
      15 TSVPLNBR TSVPLNBR ; 
end // end TS04W06

// Complete port description
DataItem TS04MCTY char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem TS04MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem TS04W-CURR-OP-CUST-ORD-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem TS04W-CURR-OP-NIKE-ORD-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ts_nil_pl_nbr
DataItem TS04W-CURR-TS-NIL-PL-NBR int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS04W-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID
DataItem TS04W-KUCCOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// PACK LISTS PER ORDER
DataItem TS04W-LAST-PL-INDEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PACK LISTS PER ORDER
DataItem TS04W-MAX-PL-PER-ORDER int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ORDERS PER SHIPMENT
DataItem TS04W-NBR-ORDERS-PER-SHIPMENT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PACK LISTS PER ORDER
DataItem TS04W-NBR-PL-PER-ORDER int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-pick-sched-id
DataItem TS04W-NEXT-SCHED-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem TS04W-ORD-INDEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_WHSE_CD
DataItem TS04W-ORDER-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF12 CONFIRMED FLAG
DataItem TS04W-PF12-CONFIRM-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-pick-sched-id
DataItem TS04W-PK1PKSCH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem TS04W-PL-INDEX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pk-pick-sched-id
DataItem TS04W-SHIP-ID-SELECTED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_NIKE_SHP_ID
DataItem TS04W-TSFSHPID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XWH_WHSE_CD
DataItem TS04W-XWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// YST_SHP_TYP_CD
DataItem TS04W-YSTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DB2 ETA CNSLDTN DT
DataItem TS04W2CN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 DPRT DT
DataItem TS04W2DP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 ETA DISCHRG DT
DataItem TS04W2DS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// DB2 WH REL DT
DataItem TS04W2RL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work current day (dd)
DataItem TS04WDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Function requested by user
DataItem TS04WFUN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invoicing on shpmnt switch
DataItem TS04WINV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS04WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer changed switch
DataItem TS04WKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work current date (mmddyy)
DataItem TS04WMDY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work current month (mm)
DataItem TS04WMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pk lists on shpmnt switch
DataItem TS04WPKL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save current temp storage page
DataItem TS04WSVP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS04WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem TS04WSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem TS04WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS04WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem TS04WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work current year (yy)
DataItem TS04WYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

