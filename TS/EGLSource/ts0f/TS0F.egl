package ts0f;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0F ****
// This program allows users to maintain existing rows in the
// Schedule table for published schedules.  The user will enter
// the schedule keys (ie. carrier, craft, and shipment number)
// of a schedule and possibly schedule locations/times.  The
// database will return 0 to N rows based upon the keys
// entered.
// 
// If rows returned > 0 then this program will condense the
// database into a readable schedule format on the screen.  The
// user may then change, delete, or add locations/dates to this
// existing schedule or just change location dates.  If any
// data is changed, this program will edit the changed data and
// if no errors, delete all existing rows for this shipment
// number and then add all combinations of locations configured
// on the screen as individual schedule rows on the database.
// 
// If 0 rows were returned from the database then the user is
// adding a new set of shipment schedules.  This requires that
// this program edit for correct location/date data entered and
// then add all combinations of locations configured on the
// screen as individual schedule rows on the database.
// 
// Published schedules with elapsed dates are periodically
// purged.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 01/21/88   cepple   New application.
// 11/07/96   JCARL1   Remove alarm from msg display
// Y2KFIX   11/25/97  KSUMME  Y2K MODIFICATIONS MADE TO:
//                            XPTS001 APPL FLOW, TS0F511,
//                            TS0F512, TS0F523
// *********************
Program TS0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TS0FW01 TS0FW01; // record
  TS0FW02 TS0FW02; // record
  TS0FW03 TS0FW03; // record
  TS5REC TS5REC; // record
  TSAREC TSAREC; // record
  TSCREC TSCREC; // record
  TSKREC TSKREC; // record
  TSLREC TSLREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TS0FM.TS0FM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0FW01 empty; /* Initialize working storage*/
    set TS0FW02 empty;
    set TS0FW03 empty;
    set TSAREC empty; /* Initialize records used*/
    set TSCREC empty;
    set TSKREC empty;
    set TSLREC empty;
    set TSNREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0FM001 initial; /* Initialize map1 output area*/

    /* -----------------------  Y2K OUT BEGIN  ------------------*/
    /*  */
    /* MOVE 19 TO TS0FW01.TS0FWCEN;      /* Initialize working century*/
    /*  */
    /* ------------------------  Y2K OUT END  ------------------*/
    TS0FW01.TS0FWPSW = "N"; /* Iitialize problem switch*/


    goto TS0F001; /* Converse Published Schedule inq/mnt*/


    TS0F001: TS0F001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Published Schedule Inquiry/Mainten.*/
     /* ------------------------------------------------------------*/

    goto TS0F001; /* Published Schedule inq/mnt*/


  end // end main
end // end TS0F

// Published Schedule map
Function TS0F001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0F100(); /* Format and display the map*/

  TS0F200(); /* Check attention identifier*/

  TS0F300(); /* Reset fields to normal intensity*/

  TS0F400(); /* Verify the entered data*/

  TS0F500(); /* Process valid input request*/


end // end TS0F001

// Format and display the map
Function TS0F100()
   /* ------------------------------------------------------------*/
                /* FORMAT AND DISPLAY THE MAP*/
   /* 1) If no errors and not inquiry, then clear the map.*/
   /* 2) Move all saved key fields to the map.*/
   /* 3) If request for data is yes, condense data for display.*/
   /* 4) If user has no add or change abilities, protect fields.*/
   /* 5) If no errors, data lines exist, and user has add/change*/
      /* abilities position cursor to first detail line.*/
   /* 6) Converse the map.*/
   /* ------------------------------------------------------------*/

  if (TS0FW01.TS0FWPSW == "N") /* No error message to display*/
    set TS0FM001 initial; /* clear map output area*/
    TS0FM001.TSACARCD = TS0FW01.TSACARCD; /* move in keys*/
    TS0FM001.TS5CRAFT = TS0FW01.TS5CRAFT;
    TS0FM001.TSFSHPNB = TS0FW01.TSFSHPNB;
    TS0FM001.TSKCOST = TS0FW01.TSKCOST;
    TS0FM001.TSACARNM = TS0FW01.TSACARNM;

    if (TS0FW01.TS0FWSWR == "Y") /* If request for data is yes*/
      TS0F110(); /* condense data to display*/
    end

  end

  if (COMMAREA.CAADDFL == "N" /* If user can not perform add*/
   && COMMAREA.CACHGFL == "N") /* and user can not perform change*/
    TS0FW01.TS0FWIXM = 1; /* Set index*/
    set TS0FM001.TSKCOST skip; /* protect cost field*/
    while (TS0FW01.TS0FWIXM <= 14) /* Until end of lines*/
      set TS0FM001.TS0FMLOC[TS0FWIXM] skip; /* Set all fields protect*/
      set TS0FM001.TSKARVL[TS0FWIXM] skip;
      set TS0FM001.TSKDPRT[TS0FWIXM] skip;
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* Increment index*/
    end
  end

  if (TS0FW01.TS0FWPSW == "N" /* If no errors*/
   && TS0FM001.TS0FMLOC[1] != " ") /* and data lines exist*/
    if (COMMAREA.CAADDFL == "Y" /* If user can perform add*/
     || COMMAREA.CACHGFL == "Y") /* and user can perform change*/
      set TS0FM001.TS0FMLOC[1] cursor; /* set cursor to first line*/
    end
  end

  /* IF EZEMNO NE 0;                   /* No error message to display*/
  /* SET TS0FM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  TS0FM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  set TS0FM001.TSKARVL[1] skip, invisible; /* no entries on first ETA*/

  converse TS0FM001 ;

  TS0FW01.TS0FWPSW = "N"; /* Reset problem switch*/

end // end TS0F100

// Condense the schedule rows
Function TS0F110()
   /* ------------------------------------------------------------*/
            /* CONDENSE THE SCHEDULE ROWS*/
   /* 1) Move all locations, ETA dates, and ETD dates to the*/
      /* screen (condensing them from working storage).*/
   /* 2) If ETA and ETD are equal, then move blanks to ETD date*/
      /* for screen readability.*/
   /* ------------------------------------------------------------*/

  TS0FW01.TS0FWIXW = 1; /* Initialize index 2*/
  TS0FW01.TS0FWIXM = 0; /* Initialize index 1*/
  TS0FW01.TS0FWSOR = " "; /* Initialize save origin*/

  while (TS0FW01.TS0FWIXW <= TS0FW01.TS0FWWSX) /* index is LE no. ws rows*/
    if (TS0FW01.TS0FWSOR != TS0FW02.TSEORIG[TS0FWIXW]) /* sv org NE ws org*/
      TS0FW01.TS0FWSOR = TS0FW02.TSEORIG[TS0FWIXW]; /* save the org*/
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* increment the index*/
      TS0FM001.TS0FMLOC[TS0FWIXM] = TS0FW02.TSEORIG[TS0FWIXW];
      TS0F111(); /* select select location data*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
        TS0FM001.XXXCITY[TS0FWIXM] = TSCREC.XXXCITY; /* move data*/
        TS0FM001.XSTCD[TS0FWIXM] = TSCREC.XSTCD;
        TS0FM001.XCTCD[TS0FWIXM] = TSCREC.XCTCD;
      end
      TS0FW01.TS0FWYY = TS0FW02.TS0FWDYY[TS0FWIXW]; /* move date*/
      TS0FW01.TS0FWMM = TS0FW02.TS0FWDMM[TS0FWIXW];
      TS0FW01.TS0FWDD = TS0FW02.TS0FWDDD[TS0FWIXW];
      TS0FM001.TSKDPRT[TS0FWIXM] = TS0FW01.TS0FWMDY;
      if (TS0FW01.TS0FWIXW == 1) /* If index eq 1*/
        TS0FW01.TS0FWYY = TS0FW02.TS0FWDYY[TS0FWIXW]; /* move date*/
        TS0FW01.TS0FWMM = TS0FW02.TS0FWDMM[TS0FWIXW];
        TS0FW01.TS0FWDD = TS0FW02.TS0FWDDD[TS0FWIXW];
        TS0FM001.TSKARVL[TS0FWIXM] = TS0FW01.TS0FWMDY;
      end
    end
    TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW + 1; /* Increment index*/
  end

  TS0FW01.TS0FWIXW = 1; /* Initialize index 2*/
  TS0FW01.TS0FWIXM = 2; /* Initialize index 1*/
  TS0FW01.TS0FWSOR = TS0FW02.TSEORIG[1]; /* save the origin*/
  while (TS0FW02.TSEORIG[TS0FWIXW] == TS0FW01.TS0FWSOR) /* save the origin*/
    TS0FW01.TS0FWYY = TS0FW02.TS0FWAYY[TS0FWIXW]; /* move date*/
    TS0FW01.TS0FWMM = TS0FW02.TS0FWAMM[TS0FWIXW];
    TS0FW01.TS0FWDD = TS0FW02.TS0FWADD[TS0FWIXW];
    TS0FM001.TSKARVL[TS0FWIXM] = TS0FW01.TS0FWMDY;
    TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW + 1; /* Increment index*/
    TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* Increment index*/
  end

  TS0FM001.TSKARVL[1] = " "; /* blank out first arvl date*/

  TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW - 1; /* decrement index*/
  TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM - 1; /* decrement index*/
  TS0FM001.TS0FMLOC[TS0FWIXM] = TS0FW02.TSEDEST[TS0FWIXW];
  TS0F111(); /* select select location data*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
    TS0FM001.XXXCITY[TS0FWIXM] = TSCREC.XXXCITY; /* move data*/
    TS0FM001.XSTCD[TS0FWIXM] = TSCREC.XSTCD;
    TS0FM001.XCTCD[TS0FWIXM] = TSCREC.XCTCD;
  end

  TS0FW01.TS0FWSWR = "N"; /* set request for data to no*/


end // end TS0F110

// Select location data
Function TS0F111()
   /* ------------------------------------------------------------*/
                /* SELECT LOCATION DATA*/
   /* 1) Clear the record, move key field in, and select row.*/
   /* 2) If an  unexpected return code is recieved:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty; /* clear record*/
  TSCREC.TSCLOCCD = TS0FM001.TS0FMLOC[TS0FWIXM];
  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F111"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FW01.TS0FWPSW = "Y"; /* Indicate Problem*/
    TS0FM001.XXXPRCNM = "TS0F111"; /* Process name*/
  end


end // end TS0F111

// Check attention identifier
Function TS0F200()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/
   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If PF16 pressed, exit to projected schedule application.*/
   /* 6) If PF17 pressed, exit to schedule inquiry application.*/
   /* 7) If any AI pressed other than ENTER indicate PF/PA key*/
      /* error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "TS0F"; /* restart this application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    XSTSS01(); /* Exit to another application*/
    TS0FM001.XXXPRCNM = "TS0F200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0FM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0FM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0FM001.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set TS0FM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    XSTSS01(); /* Exit to another application*/
    TS0FM001.XXXPRCNM = "TS0F200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0FM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    XSTSS01(); /* Exit to another application*/
    TS0FM001.XXXPRCNM = "TS0F200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0R";
                                   /* set to Projected schedule appl*/
    XSTSS01(); /* Exit to another application*/
    TS0FM001.XXXPRCNM = "TS0F200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CATOAP = "TS0G";
                                   /* set to Projected schedule appl*/
    XSTSS01(); /* Exit to another application*/
    TS0FM001.XXXPRCNM = "TS0F200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0FM001.XXXPRCNM = "TS0F200"; /* Process name*/
    TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0F200

// Reset highlighted fields
Function TS0F300()
   /* ------------------------------------------------------------*/
             /* RESET HIGHLIGHTED FIELDS*/
   /* 1) Reset all key fields normal intensity.*/
   /* 2) Reset all detail fields normal intensity.*/
   /* 3) Reset all fast path fields normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0FM001.TSACARCD initialAttributes; /* Carrier code*/
  set TS0FM001.TS5CRAFT initialAttributes; /* Carrier code*/
  set TS0FM001.TSFSHPNB initialAttributes; /* Carrier code*/
  set TS0FM001.TSKCOST initialAttributes; /* Carrier code*/

  TS0FW01.TS0FWIXM = 1; /* Initialize line index*/

  while (TS0FW01.TS0FWIXM <= 14) /* Until end of lines*/
    set TS0FM001.TS0FMLOC[TS0FWIXM] normal; /* Reset select flag*/
    set TS0FM001.TSKARVL[TS0FWIXM] normal; /* Reset select flag*/
    set TS0FM001.TSKDPRT[TS0FWIXM] normal; /* Reset select flag*/
    TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* Increment line index*/
  end

  set TS0FM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0FM001.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0F300

// Verify the entered data
Function TS0F400()
   /* ------------------------------------------------------------*/
             /* VERIFY THE ENTERED DATA*/
   /* 1) Check for invalid fast path item entry.*/
   /* 2) If all keys missing, set msg ( enter key fields ).*/
   /* 3) Condense all screen data in case of deletes.*/
   /* 4) If any keys entered, save and edit keys.*/
      /* a. check to see if row exists in the DTRANS.VPSCHD01.*/
      /* b. select set from DTRANS.VASCHD01.*/
          /* If rows found:*/
           /* . user has change ability -- set change switch.*/
           /* . user has only inq ability -- set inquiry switch.*/
          /* If rows not found:*/
           /* . user has add ability -- set add switch.*/
           /* . else -- no data found to display.*/
   /* 4) If no new keys entered and data exists.*/
      /* a. If add or change flag set:*/
          /* Perform detail edits.*/
          /* Check for modifications in detail:*/
           /* . If none found -- indicate data must be entered.*/
   /* If any errors were found then exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0FM001.CAITEM > " ") /* Application data was entered*/
    set TS0FM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F400"; /* Process name*/
  else

    TS0FW01.TS0FWSWR = "N"; /* set request for data to no*/

    if (TS0FM001.TSACARCD == " " /* If any keys missing*/
     && TS0FM001.TS5CRAFT == " " 
     && TS0FM001.TSFSHPNB == " ")
      TS0FW01.TSACARCD = " "; /* clear saved fields*/
      TS0FW01.TSACARNM = " ";
      TS0FW01.TS5CRAFT = " ";
      TS0FW01.TSFSHPNB = " ";
      TS0FW01.TSKCOST = 0;
      TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
      set TS0FM001 initial; /* clear map*/
      converseLib.validationFailed(60); /* set error message*/
      TS0FM001.XXXPRCNM = "TS0F400"; /* Process name*/
      exit stack;
    else
      if (TS0FM001.TSACARCD == TS0FW01.TSACARCD /* if keys not changed*/
       && TS0FM001.TS5CRAFT == TS0FW01.TS5CRAFT 
       && TS0FM001.TSFSHPNB == TS0FW01.TSFSHPNB 
       && TS0FM001.XCTCD[1] != " ")            
        TS0F410(); /* condense all screen data*/
        if (TS0FW03.TS0FMLOC[1] == " ") /* if all data was deleted*/
          converseLib.validationFailed(62); /* all lines cannot be deleted*/
          TS0FM001.XXXPRCNM = "TS0F400"; /* process name*/
        end
      end
      if (TS0FM001.TSACARCD != TS0FW01.TSACARCD /* if any keys changed*/
       || TS0FM001.TS5CRAFT != TS0FW01.TS5CRAFT 
       || TS0FM001.TSFSHPNB != TS0FW01.TSFSHPNB 
       || TS0FM001.XCTCD[1] == " ")            
        TS0F420(); /* 'inquiry' key edits*/
        TS0FW01.TSACARCD = TS0FM001.TSACARCD; /* save keys*/
        TS0FW01.TS5CRAFT = TS0FM001.TS5CRAFT;
        TS0FW01.TSFSHPNB = TS0FM001.TSFSHPNB;
        TS0FW01.TSKCOST = TS0FM001.TSKCOST;
        set TSLREC empty; /* clear record*/
        TSLREC.TSACARCD = TS0FM001.TSACARCD; /* move fields to rec*/
        TSLREC.TS5CRAFT = TS0FM001.TS5CRAFT;
        TSLREC.TSFSHPNB = TS0FM001.TSFSHPNB;
        TS0F430(); /* select from published schedule*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
          converseLib.validationFailed(61); /* set error message*/
          TS0FW01.TS0FWSWR = "N"; /* do not get data*/
          TS0FM001.XXXPRCNM = "TS0F400"; /* Process name*/
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* if row as not found*/
            TS0F440(); /* select the set and fetch row*/
            if (SQLCA.VAGen_SQLCODE == 0) /* if rows were found*/
              if (COMMAREA.CACHGFL == "Y") /* and user has change ability*/
                TS0F450(); /* close selected set cursor*/
                TS0F460(); /* load working storage rows*/
                TS0FW01.TS0FWFSW = "C"; /* set change switch*/
                TS0FW01.TS0FWSWR = "Y";
                                   /* set request for data to yes*/
              else
                if (COMMAREA.CACHGFL == "N" /* has no change ability*/
                 && COMMAREA.CAADDFL == "Y") /* and user has add ability*/
                  converseLib.validationFailed(63); /* set error message*/
                  TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
                  TS0FW01.TS0FWSWR = "N"; /* do not get data*/
                  TS0FM001.XXXPRCNM = "TS0F400"; /* Process name*/
                end
              end
            else
              if (SQLCA.VAGen_SQLCODE == 0 /* if rows were found*/
               && COMMAREA.CACHGFL == "N"  /* user has no chg ability*/
               && COMMAREA.CAADDFL == "N") /* and user has no add ability*/
                TS0F450(); /* close selected set cursor*/
                TS0F460(); /* load working storage rows*/
                TS0FW01.TS0FWFSW = "I"; /* set inquiry switch*/
                TS0FW01.TS0FWSWR = "Y";
                                   /* set request for data to yes*/
              else
                if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/
                  if (COMMAREA.CAADDFL == "Y") /* and user has add ability*/
                    TS0FW01.TS0FWFSW = "A"; /* set add switch*/
                    TS0F450(); /* close selected set cursor*/
                    TS0F470(); /* perform 'add' key edits*/
                    if (TS0FW01.TS0FWPSW == "N") /* if no errors occured*/
                      TS0F480(); /* perform detail edits*/
                    end
                  else
                    converseLib.validationFailed(21); /* set error message*/
                    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
                    TS0FW01.TS0FWSWR = "N"; /* do not get data*/
                    TS0FM001.XXXPRCNM = "TS0F400"; /* Process name*/
                  end
                else
                  TS0F450(); /* close selected set cursor*/
                  converseLib.validationFailed(21); /* no data to display*/
                  TS0FM001.XXXPRCNM = "TS0F400"; /* Process name*/
                end
              end
            end
          end
        end
      else
        if (TS0FW01.TS0FWFSW == "C" /* if add or change*/
         || TS0FW01.TS0FWFSW == "A")

          TS0F480(); /* do detail edits*/

           /* check for any modifications to detail lines*/

          if (TS0FM001.TSKCOST is modified)

             /* continue*/

          else
            TS0FW01.TS0FWIXM = 1; /* initialize index*/
            while (TS0FW01.TS0FWIXM <= 14) /* until end of detail lines*/
              if (TS0FM001.TS0FMLOC[TS0FWIXM] is modified)
                TS0FW01.TS0FWIXM = 99;
              else
                if (TS0FM001.TSKARVL[TS0FWIXM] is modified)
                  TS0FW01.TS0FWIXM = 99;
                else
                  if (TS0FM001.TSKDPRT[TS0FWIXM] is modified)
                    TS0FW01.TS0FWIXM = 99;
                  end
                end
              end
              TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* increment index*/
              if (TS0FW01.TS0FWIXM == 15) /* if no detail lines modified*/
                converseLib.validationFailed(34); /* data must be entered error*/
                TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
                TS0FM001.TSACARNM = TS0FW01.TSACARNM; /* move carr nm*/
                set TS0FM001.TS0FMLOC[1] cursor; /* set cursor*/
                TS0FM001.XXXPRCNM = "TS0F400"; /* process name*/
              end
            end

          end
        end
        if (TS0FW01.TS0FWFSW == "C" /* if change*/
         && TS0FW01.TS0FWPSW == "N") /* and no errors*/
          TS0FW01.TS0FWFSW = "U"; /* set update switch*/
        end
      end
    end
  end
  if (TS0FW01.TS0FWPSW == "Y") /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0F400

// Condense screen data
Function TS0F410()
   /* ------------------------------------------------------------*/
                    /* CONDENSE SCREEN*/
   /* 1) condense screen*/
      /* a. load to working storage detail lines where location*/
         /* exists.*/
      /* b. clear all detail lines on screen.*/
      /* c. load condensed working storage rows back to map*/
         /* detail lines.*/

   /* ------------------------------------------------------------*/

  set TS0FW03 empty; /* clear record*/
  TS0FW01.TS0FWIXM = 1; /* initialize index*/
  TS0FW01.TS0FWIXW = 1; /* initialize index*/
  TS0FW01.TS0FWSIX = 0; /* initialize save index*/
  while (TS0FW01.TS0FWIXM <= 14) /* until end of detail lines*/
    if (TS0FM001.TS0FMLOC[TS0FWIXM] != " ") /* if location is entered*/
      TS0FW03.TS0FMLOC[TS0FWIXW] = TS0FM001.TS0FMLOC[TS0FWIXM];
      TS0FW03.TS0FWMDP[TS0FWIXW] = TS0FM001.TSKDPRT[TS0FWIXM];
      TS0FW03.TS0FWMAR[TS0FWIXW] = TS0FM001.TSKARVL[TS0FWIXM];
      TS0FW03.XXXCITY[TS0FWIXW] = TS0FM001.XXXCITY[TS0FWIXM];
      TS0FW03.XSTCD[TS0FWIXW] = TS0FM001.XSTCD[TS0FWIXM];
      TS0FW03.XCTCD[TS0FWIXW] = TS0FM001.XCTCD[TS0FWIXM];
      TS0FW01.TS0FWSIX = TS0FW01.TS0FWIXW; /* save index*/
      TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW + 1; /* increment index*/
    end
    TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* increment index*/
  end

  while (TS0FW01.TS0FWIXM <= 14)
    TS0FM001.TS0FMLOC[TS0FWIXM] = " ";
    TS0FM001.TSKDPRT[TS0FWIXM] = " ";
    TS0FM001.TSKARVL[TS0FWIXM] = " ";
    TS0FM001.XXXCITY[TS0FWIXM] = " ";
    TS0FM001.XSTCD[TS0FWIXM] = " ";
    TS0FM001.XCTCD[TS0FWIXM] = " ";
    TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1;
  end

  TS0FW01.TS0FWIXM = 1; /* initialize index*/
  while (TS0FW01.TS0FWIXM <= 14) /* until end of detail lines*/
    TS0FM001.TS0FMLOC[TS0FWIXM] = TS0FW03.TS0FMLOC[TS0FWIXM];
    TS0FM001.TSKDPRT[TS0FWIXM] = TS0FW03.TS0FWMDP[TS0FWIXM];
    TS0FM001.TSKARVL[TS0FWIXM] = TS0FW03.TS0FWMAR[TS0FWIXM];
    TS0FM001.XXXCITY[TS0FWIXM] = TS0FW03.XXXCITY[TS0FWIXM];
    TS0FM001.XSTCD[TS0FWIXM] = TS0FW03.XSTCD[TS0FWIXM];
    TS0FM001.XCTCD[TS0FWIXM] = TS0FW03.XCTCD[TS0FWIXM];
    TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* increment index*/
  end


end // end TS0F410

// 'Inquiry' Key edits
Function TS0F420()
   /* ------------------------------------------------------------*/
                 /* 'INQUIRY' KEY EDITS*/
   /* 1) Check shipment number entry.*/
   /* 2) Check craft entered.*/
   /* 3) Check carrier code entered.*/
      /* a. If carrier code valid:*/
         /* Check if craft exists for carrier.*/
   /* If any key errors, then clear map and exit to redisplay map*/
    /* and keys.*/
   /* ------------------------------------------------------------*/

  if (TS0FM001.TSFSHPNB == " ") /* If shipment number blank*/
    converseLib.validationFailed(59); /* error message*/
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F420"; /* Process name*/
    set TS0FM001.TSFSHPNB cursor, modified, bold; /* highlight field*/
  end

  if (TS0FM001.TS5CRAFT == " ") /* If craft is missing*/
    converseLib.validationFailed(48); /* error message*/
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F420"; /* Process name*/
    set TS0FM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
  end

  if (TS0FM001.TSACARCD == " ") /* If carrier code is missing*/
    converseLib.validationFailed(39); /* error message*/
    TS0FM001.XXXPRCNM = "TS0F420"; /* Process name*/
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FM001.TSACARNM = " ";
    set TS0FM001.TSACARCD cursor, modified, bold; /* highlight field*/
  else
    TS0F421(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if carrier exists*/
      TS0FM001.TSACARNM = TSAREC.TSACARNM; /* move description*/
      TS0FW01.TSACARNM = TSAREC.TSACARNM; /* save description*/
      TS0F422(); /* select craft*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if craft exists*/

          /* continue*/

      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if craft does not exist*/
          converseLib.validationFailed(48); /* error message*/
          TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
          TS0FM001.XXXPRCNM = "TS0F420"; /* Process name*/
          set TS0FM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
        converseLib.validationFailed(39); /* error message*/
        TS0FM001.XXXPRCNM = "TS0F420"; /* Process name*/
        TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
        TS0FM001.TSACARNM = " ";
        set TS0FM001.TSACARCD cursor, modified, bold; /* highlight field*/
      end
    end
  end

  if (TS0FW01.TS0FWPSW == "Y") /* if errors exist*/
    exit stack; /* exit to redisplay map*/
  end


end // end TS0F420

// Select carrier table row
Function TS0F421()
   /* ------------------------------------------------------------*/
                 /* SELECT CARRIER TABLE ROW*/
   /* 1) Set record empty, move key field, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSAREC empty; /* clear record*/
  TSAREC.TSACARCD = TS0FM001.TSACARCD; /* move data*/

  call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F421"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FW01.TS0FWPSW = "Y"; /* Indicate Problem*/
    TS0FM001.XXXPRCNM = "TS0F421"; /* Process name*/
  end


end // end TS0F421

// Select craft table row
Function TS0F422()
   /* ------------------------------------------------------------*/
                 /* SELECT CRAFT TABLE ROW*/
   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TS5REC empty; /* clear record*/
  TS5REC.TSACARCD = TS0FM001.TSACARCD; /* move data*/
  TS5REC.TS5CRAFT = TS0FM001.TS5CRAFT;

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F422"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FW01.TS0FWPSW = "Y"; /* Indicate Problem*/
    TS0FM001.XXXPRCNM = "TS0F422"; /* Process name*/
  end


end // end TS0F422

// Select from DTRANS.VPSCHD01
Function TS0F430()
   /* ------------------------------------------------------------*/
                 /* SELECT FROM DTRANS.VPSCHD01*/
   /* 1) Select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  call "IO2380" ("S ", SQLCA, TSLREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F430"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPSCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FW01.TS0FWPSW = "Y"; /* Indicate Problem*/
    TS0FM001.XXXPRCNM = "TS0F430"; /* Process name*/
  end


end // end TS0F430

// Select set frm DTRANS.VASCHD01
Function TS0F440()
   /* ------------------------------------------------------------*/
             /* SELECT SET FROM DTRANS.VASCHD01*/
   /* 1) Set record empty and move in key fields.*/
   /* 2) Perform select set and open cursor routine.*/
   /* 3) Perform fetch row routine.*/
   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Clear records*/
  TSKREC.TSACARCD = TS0FM001.TSACARCD; /* move in fields*/
  TSKREC.TS5CRAFT = TS0FM001.TS5CRAFT;
  TSKREC.TSFSHPNB = TS0FM001.TSFSHPNB;
  TSKREC.TSKSCHED = "A";
  TS0F441(); /* Select set and open cursor*/
  TS0F442(); /* fetch row*/


end // end TS0F440

// Select set and open cursor
Function TS0F441()
   /* ------------------------------------------------------------*/
                 /* SELECT SET AND OPEN CURSOR*/
   /* 1) Set TSNREC record empty and select set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Clear record*/
  TSNREC.TSNFNC = "S1";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F441"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FM001.XXXPRCNM = "TS0F441"; /* Process name*/
    TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0F441

// Fetch row
Function TS0F442()
   /* ------------------------------------------------------------*/
                 /* FETCH ROW*/
   /* 1) Set TSNREC record empty and fetch row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "N1";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      /* keep going*/

  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0F442"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0FM001.XXXPRCNM = "TS0F442"; /* Process name*/

    end
  end


end // end TS0F442

// Close selected set cursor
Function TS0F450()
   /* ------------------------------------------------------------*/
                 /* CLOSE SELECTED SET CURSOR*/
   /* 1) Set TSNREC record empty and close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Clear record*/
  TSNREC.TSNFNC = "C1";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0F450"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FM001.XXXPRCNM = "TS0F450"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0F450

// Load working storage rows
Function TS0F460()
   /* ------------------------------------------------------------*/
               /* LOAD WORKING STORAGE ROWS*/
   /* 1) Set record empty and move in key fields.*/
   /* 2) Select set and open cursor.*/
   /* 3) Fetch rows and format data.*/
   /* 4) Close selected set cursor.*/
   /* ------------------------------------------------------------*/

  set TSNREC empty; /* clear records*/
  TSKREC.TSACARCD = TS0FM001.TSACARCD; /* move in fields*/
  TSKREC.TS5CRAFT = TS0FM001.TS5CRAFT;
  TSKREC.TSFSHPNB = TS0FM001.TSFSHPNB;
  TSKREC.TSKSCHED = "A";
  TS0F441(); /* Select set and open cursor*/
  if (SQLCA.VAGen_SQLCODE == 0) /* select was successful*/
    set TS0FW02 empty; /* set working storage empty*/
    TS0FW01.TS0FWIXM = 1; /* initialize index*/
    TS0FW01.TS0FWWSX = 0; /* initialize ws save index*/
    TS0FW01.TS0FWSWC = "N"; /* initialize end of file switch*/
    TS0FW01.TS0FWPSW = "N"; /* initialize problem switch*/
    while (TS0FW01.TS0FWSWC == "N" /* until end of set or problem found*/
     && TS0FW01.TS0FWPSW == "N")
      TS0F461(); /* fetch row and format data*/
    end
  end
  TS0F450(); /* close selected set cursor*/


end // end TS0F460

// Fetch row and format data
Function TS0F461()
   /* ------------------------------------------------------------*/
                 /* FETCH ROW AND FORMAT DATA*/
   /* 1) Set TSNREC record empty and fetch row.*/
   /* 2) If no row found then set "end on set" flag yes.*/
   /* 3) Format selected row into working storage.*/
   /* 4) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "N1";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0FW01.TS0FWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0F461"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0FM001.XXXPRCNM = "TS0F461"; /* Process name*/

    else
      TS0FW02.TSACARCD[TS0FWIXM] = TSKREC.TSACARCD; /* Save data*/
      TS0FW02.TS5CRAFT[TS0FWIXM] = TSKREC.TS5CRAFT;
      TS0FW02.TSFSHPNB[TS0FWIXM] = TSKREC.TSFSHPNB;
      TS0FW02.TSKSEQNB[TS0FWIXM] = TSKREC.TSKSEQNB;
      TS0FW02.TSKSCHED[TS0FWIXM] = TSKREC.TSKSCHED;
      TS0FW02.TSEORIG[TS0FWIXM] = TSKREC.TSEORIG;
      TS0FW02.TSEDEST[TS0FWIXM] = TSKREC.TSEDEST;
      TS0FW02.TS0FWNDP[TS0FWIXM] = TSKREC.TSKDPRT;
      TS0FW02.TS0FWNAR[TS0FWIXM] = TSKREC.TSKARVL;
      TS0FW02.TSKCOST[TS0FWIXM] = TSKREC.TSKCOST;
      TS0FW01.TSKCOST = TSKREC.TSKCOST;
      TS0FW02.ZZZCHGDT[TS0FWIXM] = TSKREC.ZZZCHGDT;
      TS0FW02.ZZZCHGTM[TS0FWIXM] = TSKREC.ZZZCHGTM;
      TS0FW02.ZZZCHGCT[TS0FWIXM] = TSKREC.ZZZCHGCT;

      TS0FW01.TS0FWWSX = TS0FW01.TS0FWIXM; /* save index*/

      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* Increment line index*/
    end
  end


end // end TS0F461

// 'Add' key edits
Function TS0F470()
   /* ------------------------------------------------------------*/
                 /* 'ADD' KEY EDITS*/
   /* 1) Check shipment number entry.*/
   /* 2) Check craft entered.*/
   /* 3) Check carrier code entered.*/
      /* a. If carrier code valid:*/
         /* Check if craft exists for carrier.*/
   /* If any key errors, then  exit to redisplay map and keys.*/
   /* ------------------------------------------------------------*/

  if (TS0FM001.TSFSHPNB == " ") /* If shipment number blank*/
    converseLib.validationFailed(59); /* error message*/
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F470"; /* Process name*/
    set TS0FM001.TSFSHPNB cursor, modified, bold; /* highlight field*/
  end

  if (TS0FM001.TS5CRAFT == " ") /* If craft is missing*/
    converseLib.validationFailed(48); /* error message*/
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F470"; /* Process name*/
    set TS0FM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
  end

  if (TS0FM001.TSACARCD == " ") /* If carrier code is missing*/
    converseLib.validationFailed(39); /* error message*/
    TS0FM001.XXXPRCNM = "TS0F470"; /* Process name*/
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FM001.TSACARNM = " ";
    set TS0FM001.TSACARCD cursor, modified, bold; /* highlight field*/
  else
    TS0F421(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TS0FM001.TSACARNM = TSAREC.TSACARNM; /* move description*/
      TS0FW01.TSACARNM = TSAREC.TSACARNM; /* save description*/
      TS0F422(); /* select craft*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
       && TS5REC.XXXSTAT == "A")   /* in active status*/

          /* continue*/

      else
        if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
         && TS5REC.XXXSTAT == "I")   /* in inactive status*/
          converseLib.validationFailed(73); /* error message*/
          TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
          TS0FM001.XXXPRCNM = "TS0F470"; /* Process name*/
          set TS0FM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* if craft does not exist*/
            converseLib.validationFailed(48); /* error message*/
            TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
            TS0FM001.XXXPRCNM = "TS0F470"; /* Process name*/
            set TS0FM001.TS5CRAFT cursor, modified, bold;
                                   /* highlight field*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
       && TSAREC.XXXSTAT == "I")   /* in inactive status*/
        converseLib.validationFailed(72); /* error message*/
        TS0FM001.XXXPRCNM = "TS0F470"; /* Process name*/
        TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
        set TS0FM001.TSACARCD cursor, modified, bold; /* highlight field*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
          converseLib.validationFailed(39); /* error message*/
          TS0FM001.XXXPRCNM = "TS0F470"; /* Process name*/
          TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
          TS0FM001.TSACARNM = " ";
          set TS0FM001.TSACARCD cursor, modified, bold; /* highlight field*/
        end
      end
    end
  end

  if (TS0FW01.TS0FWPSW == "Y") /* if errors exist*/
    exit stack; /* exit to redisplay map*/
  end


end // end TS0F470

// Detail edits
Function TS0F480()
   /* ------------------------------------------------------------*/
                    /* DETAIL EDITS*/
   /* 1) Check for valid rating cost field entered.*/
   /* 2) condense screen*/
   /* 3) Perform edit locations and dates routine.*/
   /* 4) Check for duplicate locations entered.*/
   /* 5) Check for date overlap errors.*/

   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0FM001.TSKCOST < 0) /* if cost not GT 0*/
    converseLib.validationFailed(66); /* Error message*/
    TS0FW01.TSKCOST = TS0FM001.TSKCOST; /* save cost*/
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F480"; /* Process name*/
    set TS0FM001.TSKCOST cursor, modified, bold;
  else
    TS0FW01.TSKCOST = TS0FM001.TSKCOST; /* save cost*/
  end

  TS0F410(); /* condense screen data*/

  if (TS0FW01.TS0FWPSW == "N") /* if no errors*/
    TS0F481(); /* edit locations and dates*/
  end

  if (TS0FW01.TS0FWPSW == "N") /* if no errors*/

      /* check for duplicate locations*/

    TS0FW01.TS0FWIXM = 14; /* initialize index*/
    while (TS0FW01.TS0FWIXM > 0) /* until end of data*/
      TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXM - 1; /* initialize index*/
      while (TS0FW01.TS0FWIXW > 0) /* until end of data*/
        if (TS0FM001.TS0FMLOC[TS0FWIXM] == TS0FM001.TS0FMLOC[TS0FWIXW]
         && TS0FM001.TS0FMLOC[TS0FWIXM] != " "
         && TS0FM001.TS0FMLOC[TS0FWIXW] != " ")
          converseLib.validationFailed(74); /* Error message*/
          TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
          TS0FM001.XXXPRCNM = "TS0F480"; /* Process name*/
          set TS0FM001.TS0FMLOC[TS0FWIXW] cursor, modified, bold;
          set TS0FM001.TS0FMLOC[TS0FWIXM] modified, bold;
        end
        TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW - 1; /* increment index*/
      end
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM - 1; /* increment index*/
    end
  end

  if (TS0FW01.TS0FWPSW == "N") /* if no errors*/
    TS0FW01.TS0FWIXM = 14; /* initialize index*/
    TS0FW01.TS0FWIXW = 13; /* initialize index*/
    while (TS0FW01.TS0FWIXW > 0) /* until end of data*/
      if (TS0FM001.TS0FMLOC[TS0FWIXM] != " ") /* data exists*/

         /* arvl date(n) must be >= dprt(n-1)*/

        if (TS0FW03.TS0FWADT[TS0FWIXM] < TS0FW03.TS0FWDDT[TS0FWIXW])
          converseLib.validationFailed(70); /* Error message*/
          TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
          TS0FM001.XXXPRCNM = "TS0F480"; /* Process name*/
          set TS0FM001.TSKARVL[TS0FWIXM] cursor, modified, bold;
        end
      end
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM - 1; /* decrement index*/
      TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW - 1; /* decrement index*/
    end
  end

  if (TS0FW01.TS0FWPSW == "N") /* if no errors*/
    TS0FW01.TS0FWIXM = 14; /* initialize index*/
    while (TS0FW01.TS0FWIXM > 0) /* until end of data*/
      if (TS0FM001.TS0FMLOC[TS0FWIXM] != " ") /* data exists*/

         /* dprt date must be >= arvl*/

        if (TS0FW03.TS0FWDDT[TS0FWIXM] < TS0FW03.TS0FWADT[TS0FWIXM])
          converseLib.validationFailed(71); /* Error message*/
          TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
          TS0FM001.XXXPRCNM = "TS0F480"; /* Process name*/
          set TS0FM001.TSKDPRT[TS0FWIXM] cursor, modified, bold;
        end
      end
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM - 1; /* decrement index*/
    end
  end

  if (TS0FW01.TS0FWPSW == "Y") /* if errors exist*/
    exit stack; /* exit to redisplay map*/
  end


end // end TS0F480

// Locations and dates editing
Function TS0F481()
   /* ------------------------------------------------------------*/
              /* LOCATIONS AND DATES EDITING*/
   /* 1) Check for at least two locations entered.*/
   /* 2) Check ETD dates for correctness.*/
   /* 3) Check ETA dates for correctness.*/
   /* 4) Check all locations to see if they are valid.*/
   /* ------------------------------------------------------------*/

  if (TS0FM001.TS0FMLOC[1] == " " /* If not at least two on screen*/
   || TS0FM001.TS0FMLOC[2] == " ")
    converseLib.validationFailed(62); /* error message*/
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F481"; /* Process name*/
    set TS0FM001.TS0FMLOC[1] cursor, modified, bold; /* highlight field*/
    set TS0FM001.TS0FMLOC[2] modified, bold; /* highlight field*/
  end

  if (TS0FW01.TS0FWPSW == "N") /* no errors have already occured*/
    TS0FW01.TS0FWIXM = 14; /* initialize index*/
    while (TS0FW01.TS0FWIXM > 0) /* until end of data*/
      if (TS0FM001.TSKARVL[TS0FWIXM] == " " /* if dates missing*/
       && TS0FM001.TSKDPRT[TS0FWIXM] == " " 
       && TS0FM001.TS0FMLOC[TS0FWIXM] != " ") /* and location is entered*/
        converseLib.validationFailed(75); /* Error message*/
        TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
        TS0FM001.XXXPRCNM = "TS0F481"; /* Process name*/
        set TS0FM001.TSKDPRT[TS0FWIXM] cursor, modified, bold;
        if (TS0FW01.TS0FWIXM > 1) /* if not first arrival date*/
          set TS0FM001.TSKARVL[TS0FWIXM] cursor, modified, bold;
        end
      end
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM - 1; /* decrement index*/
    end
  end

  if (TS0FW01.TS0FWPSW == "N") /* no errors have already occured*/
    TS0FW01.TS0FWIXM = 14; /* initialize index*/
    while (TS0FW01.TS0FWIXM > 0) /* until end of data*/
      if (TS0FM001.TSKDPRT[TS0FWIXM] != " " /* if date entered*/
       && TS0FM001.TS0FMLOC[TS0FWIXM] != " ") /* and location is entered*/
        set TA2REC empty; /* Clear working record*/
        TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
        TA2REC.TA2GRTYP = "A"; /* move date type to record*/
        TA2REC.TA2GRGA = TS0FM001.TSKDPRT[TS0FWIXM]; /* move date*/
        call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check date w/routine*/
        if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
          TS0FW03.TS0FWDDT[TS0FWIXM] = TA2REC.TA2GRGGN;
          if (TS0FM001.TSKARVL[TS0FWIXM] == " ") /* if drpt is blank*/
            TS0FW03.TS0FWMAR[TS0FWIXM] = TS0FM001.TSKDPRT[TS0FWIXM];
            TS0FM001.TSKARVL[TS0FWIXM] = TS0FM001.TSKDPRT[TS0FWIXM];
            TS0FW03.TS0FWADT[TS0FWIXM] = TA2REC.TA2GRGGN;
          end
        else /* Invalid date entered*/
          converseLib.validationFailed(57); /* Error message*/
          TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
          TS0FM001.XXXPRCNM = "TS0F481"; /* Process name*/
          set TS0FM001.TSKDPRT[TS0FWIXM] cursor, modified, bold;
        end
      end
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM - 1; /* decrement index*/
    end

    TS0FW01.TS0FWIXM = 14; /* initialize index*/
    while (TS0FW01.TS0FWIXM > 0) /* until end of data*/
      if (TS0FM001.TSKARVL[TS0FWIXM] == " " /* if date missing*/
       && TS0FM001.TS0FMLOC[TS0FWIXM] != " ") /* and location is entered*/
        converseLib.validationFailed(57); /* Error message*/
        TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
        TS0FM001.XXXPRCNM = "TS0F481"; /* Process name*/
        set TS0FM001.TSKARVL[TS0FWIXM] cursor, modified, bold;
      else
        if (TS0FM001.TSKARVL[TS0FWIXM] != " " /* if date exists*/
         && TS0FM001.TS0FMLOC[TS0FWIXM] != " ") /* and location is entered*/
          set TA2REC empty; /* Clear working record*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
          TA2REC.TA2GRTYP = "A"; /* move date type to record*/
          TA2REC.TA2GRGA = TS0FM001.TSKARVL[TS0FWIXM]; /* move date*/
          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check date w/routine*/
          if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
            TS0FW03.TS0FWADT[TS0FWIXM] = TA2REC.TA2GRGGN; /* ccyymmdd*/
            if (TS0FM001.TSKDPRT[TS0FWIXM] == " ") /* if drpt is blank*/
              TS0FW03.TS0FWMDP[TS0FWIXM] = TS0FM001.TSKARVL[TS0FWIXM];
              if (TS0FW01.TS0FWIXM != TS0FW01.TS0FWSIX) /* If not last loc*/
                TS0FM001.TSKDPRT[TS0FWIXM] = TS0FM001.TSKARVL[TS0FWIXM];
              end
              TS0FW03.TS0FWDDT[TS0FWIXM] = TA2REC.TA2GRGGN;
            end
          else /* Invalid date entered*/
            converseLib.validationFailed(57); /* Error message*/
            TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
            TS0FM001.XXXPRCNM = "TS0F481"; /* Process name*/
            set TS0FM001.TSKARVL[TS0FWIXM] cursor, modified, bold;
          end
        end
      end
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM - 1; /* decrement index*/
    end

    TS0FW01.TS0FWIXM = 14; /* initialize index*/
    while (TS0FW01.TS0FWIXM > 0) /* until end of data*/
      if (TS0FM001.TS0FMLOC[TS0FWIXM] != " ") /* if code is there*/
        TS0F111(); /* Select the row*/
        if (SQLCA.VAGen_SQLCODE == 100) /* If location code not found*/
          converseLib.validationFailed(27); /* Error message*/
          TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
          TS0FM001.XXXPRCNM = "TS0F481"; /* Process name*/
          set TS0FM001.TS0FMLOC[TS0FWIXM] cursor, modified, bold;
        else
          if (SQLCA.VAGen_SQLCODE == 0) /* if location is found*/
            if (TSCREC.XXXSTAT == "A") /* if location is active*/
              TS0FM001.XXXCITY[TS0FWIXM] = TSCREC.XXXCITY;
              TS0FM001.XSTCD[TS0FWIXM] = TSCREC.XSTCD;
              TS0FM001.XCTCD[TS0FWIXM] = TSCREC.XCTCD;
            else
              converseLib.validationFailed(27); /* Error message*/
              TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
              TS0FM001.XXXPRCNM = "TS0F481"; /* Process name*/
              set TS0FM001.TS0FMLOC[TS0FWIXM] cursor, modified, bold;
            end
          end
        end
      end
      TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM - 1; /* decrement index*/
    end
  end


end // end TS0F481

// Process valid input request
Function TS0F500()
   /* ------------------------------------------------------------*/
            /* PROCESS VALID INPUT REQUESTS*/
   /* 1) If enter was pressed and no errors.*/
      /* a) check for add function*/
      /* b) check for update function*/
      /* c) continue to inquire function*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* enter was pressed*/
   && TS0FW01.TS0FWPSW == "N")      /* and no errors were found*/
    if (TS0FW01.TS0FWFSW == "A") /* If function is 'A'*/
      TS0F510(); /* perform add function*/
    else
      if (TS0FW01.TS0FWFSW == "U") /* If function is 'U'*/
        TS0F520(); /* perform update function*/
      else
        if (TS0FW01.TS0FWFSW == "I") /* If function is 'I'*/
          TS0FW01.TS0FWSWR = "Y"; /* get data for inquiry*/
        end
      end
    end
  end


end // end TS0F500

// Add function
Function TS0F510()
   /* ------------------------------------------------------------*/
                  /* ADD FUNCTION*/
   /* 1) If add function was selected;*/
      /* a) check for duplicate rows*/
      /* b) add rows until end of working storage or error*/
      /* c) reset database if error occurs*/
   /* ------------------------------------------------------------*/

  set TSLREC empty; /* clear record*/
  TSLREC.TSACARCD = TS0FM001.TSACARCD; /* move fields to rec*/
  TSLREC.TS5CRAFT = TS0FM001.TS5CRAFT;
  TSLREC.TSFSHPNB = TS0FM001.TSFSHPNB;
  TS0F430(); /* select from published schedule*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
    converseLib.validationFailed(61); /* set error message*/
    TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/
    TS0FM001.XXXPRCNM = "TS0F510"; /* Process name*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/
      TS0F440(); /* select the set*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if rows were found*/
        TS0FW01.TS0FWPSW = "Y"; /* Indicate problem*/
        TS0FM001.XXXPRCNM = "TS0F510"; /* Process name*/
        converseLib.validationFailed(61); /* set error message*/
        set TS0FM001 initial; /* clear map*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if rows were not found*/
          TS0F450(); /* close selected set cursor*/
          set TS0FW02 empty; /* clear WS for add*/
          TS0F511(); /* explode-in-ws*/
          TS0FW01.TS0FWIXW = 1; /* set index to 1*/
          while (TS0FW01.TS0FWIXW <= 91 /* not end of working storage*/
           && TS0FW02.TSACARCD[TS0FWIXW] != " ")

            /* *****************************************************/
            /* * This delete call is only inserted to provide     **/
            /* * a contention check.  It should always return a   **/
            /* * sqlcode of 100 if no row has been added by       **/
            /* * by another user.  If 0 is returned then reset is **/
            /* * called and an error is displayed.                **/
            /* *****************************************************/
            /* *****************************************************/

            TS0F522(); /* delete unique row*/

            /* *****************************************************/
            /* *****************************************************/

            if (SQLCA.VAGen_SQLCODE == 100)
                                   /* if no row returned from delete*/
              TS0F512(); /* add new row to database*/
              if (SQLCA.VAGen_SQLCODE != 0) /* if unexpected return code*/
                VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                sysLib.rollback();
                VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                 /* reset all updates*/
                TS0FW01.TS0FWFSW = "C"; /* change funct back to 'c'*/
                TS0FW01.TS0FWSWR = "N"; /* set req for data to yes*/
                TS0FW01.TS0FWIXW = 100; /* get out of loop*/
              end
            else
              if (SQLCA.VAGen_SQLCODE == 0) /* if row returned from delete*/
                converseLib.validationFailed(12); /* set error message*/
                TS0FM001.XXXPRCNM = "TS0F510"; /* Process name*/
                TS0FW01.TS0FWFSW = "C"; /* change funct back to 'c'*/
                TS0FW01.TS0FWSWR = "N"; /* set req for data to yes*/
                VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                sysLib.rollback();
                VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                 /* reset all updates*/
                TS0FW01.TS0FWIXW = 100; /* get out of loop*/
              end
            end
            TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW + 1; /* increment index*/
          end
        end
      end
    end
  end

  if (TS0FW01.TS0FWPSW == "N") /* no errors were found*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit adds*/
    converseLib.validationFailed(44); /* indicate update successful*/
    TS0FM001.XXXPRCNM = "TS0F510"; /* process name*/
    TS0FW01.TS0FWSWR = "N"; /* set request for data to yes*/
  else
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0F510

// Explode-in-WS
Function TS0F511()
   /* ------------------------------------------------------------*/
                  /* EXPLODE-IN-WS*/
   /* This module explodes the screen detail lines into*/
     /* the expanded schedules in the working storage.*/
   /* ------------------------------------------------------------*/

  set TS0FW02 empty; /* clear working storage*/
  TS0FW01.TS0FWWSX = 0; /* initialize ws save index*/
  TS0FW01.TS0FWIXW = 0; /* initialize indexes*/
  TS0FW01.TS0FWIXM = 1;
  while (TS0FW01.TS0FWIXM < TS0FW01.TS0FWSIX) /* less than last detail line*/
    TS0FW01.TS0FWIX2 = TS0FW01.TS0FWIXM + 1;
    while (TS0FW01.TS0FWIX2 <= TS0FW01.TS0FWSIX) /* LE last detail line*/
      TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW + 1; /* increment ws index*/
      TS0FW01.TS0FWWSX = TS0FW01.TS0FWIXW; /* save index*/
      TS0FW02.TSEORIG[TS0FWIXW] = TS0FM001.TS0FMLOC[TS0FWIXM];
      TS0FW02.TSEDEST[TS0FWIXW] = TS0FM001.TS0FMLOC[TS0FWIX2];
      TS0FW02.TSKSEQNB[TS0FWIXW] = TS0FW01.TS0FWIXW;
      TS0FW02.TS0FWMDP[TS0FWIXW] = TS0FM001.TSKDPRT[TS0FWIXM];
      TS0FW02.TS0FWNDP[TS0FWIXW] = TS0FW03.TS0FWDDT[TS0FWIXM];
      TS0FW02.TS0FWMAR[TS0FWIXW] = TS0FM001.TSKARVL[TS0FWIX2];
      TS0FW02.TS0FWNAR[TS0FWIXW] = TS0FW03.TS0FWADT[TS0FWIX2];
      TS0FW02.TSACARCD[TS0FWIXW] = TS0FM001.TSACARCD;
      TS0FW02.TS5CRAFT[TS0FWIXW] = TS0FM001.TS5CRAFT;
      TS0FW02.TSFSHPNB[TS0FWIXW] = TS0FM001.TSFSHPNB;
      TS0FW02.TSKSCHED[TS0FWIXW] = "A";
      TS0FW02.TSKCOST[TS0FWIXW] = TS0FM001.TSKCOST;
  /* -----------------------  Y2K OUT BEGIN  ----------------*/
  /*  */
  /* MOVE EZEDTE TO TS0FW01.TS0FWYMD;*/
  /*  */
  /* ------------------------  Y2K OUT END  -----------------*/
  /* -----------------------  Y2K IN BEGIN  -----------*/
  /*  */
      TS0FW01.TS0FWDTE = VGVar.currentGregorianDate;
  /*  */
  /* ------------------------  Y2K IN END  ------------*/
      TS0FW02.ZZZCHGDT[TS0FWIXW] = TS0FW01.TS0FWDTE;
      TS0FW01.TS0FWIX2 = TS0FW01.TS0FWIX2 + 1;
    end
    TS0FW01.TS0FWIXM = TS0FW01.TS0FWIXM + 1; /* increment index*/
  end


end // end TS0F511

// Add new row to database
Function TS0F512()
   /* ------------------------------------------------------------*/
                 /* ADD NEW ROW TO DATABASE*/
   /* 1) Set record empty, move key fields, and add table row.*/
       /* - set change count to 0 for new row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0FW02.TSACARCD[TS0FWIXW]; /* move fields*/
  TSKREC.TS5CRAFT = TS0FW02.TS5CRAFT[TS0FWIXW];
  TSKREC.TSFSHPNB = TS0FW02.TSFSHPNB[TS0FWIXW];
  TSKREC.TSKSEQNB = TS0FW02.TSKSEQNB[TS0FWIXW];
  TSKREC.TSKSCHED = TS0FW02.TSKSCHED[TS0FWIXW];
  TSKREC.TSEORIG = TS0FW02.TSEORIG[TS0FWIXW];
  TSKREC.TSEDEST = TS0FW02.TSEDEST[TS0FWIXW];
  TSKREC.TSKDPRT = TS0FW02.TS0FWNDP[TS0FWIXW];
  TSKREC.TSKARVL = TS0FW02.TS0FWNAR[TS0FWIXW];
  TSKREC.TSKCOST = TS0FW02.TSKCOST[TS0FWIXW];
  /* -----------------------  Y2K OUT BEGIN  --------------*/
  /*  */
  /* MOVE EZEDTE TO TS0FW01.TS0FWYMD;*/
  /*  */
  /* ------------------------  Y2K OUT END  ----------------*/
  /* -----------------------  Y2K IN BEGIN  -----------*/
  /*  */
  TS0FW01.TS0FWDTE = VGVar.currentGregorianDate;
  /*  */
  /* ------------------------  Y2K IN END  ------------*/
  TSKREC.ZZZCHGDT = TS0FW01.TS0FWDTE;
  TS0FW01.TS0FWTM1 = VGVar.currentFormattedTime;
  TS0FW01.TS0FWHR2 = TS0FW01.TS0FWHR1;
  TS0FW01.TS0FWMN2 = TS0FW01.TS0FWMN1;
  TSKREC.ZZZCHGTM = TS0FW01.TS0FWTM2;
  TSKREC.ZZZCHGCT = 0;

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "A";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* add table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FW01.TS0FWIXM = 100; /* get out of loop*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset database*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F512"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FM001.XXXPRCNM = "TS0F512"; /* Process name*/
  end


end // end TS0F512

// Update function
Function TS0F520()
   /* ------------------------------------------------------------*/
                  /* UPDATE FUNCTION*/
   /* 1) If update function was selected;*/
      /* a) select unique rows from database*/
      /* b) delete rows if not already updated*/
      /* c) add new rows to database*/
   /* ------------------------------------------------------------*/

  TS0FW01.TS0FWSCT = TS0FW02.ZZZCHGCT[1]; /* save change count*/
  TS0FW01.TS0FWIXW = 1; /* set index*/
  while (TS0FW01.TS0FWIXW <= TS0FW01.TS0FWWSX) /* not end of ws*/
    TS0F521(); /* select unique*/
    if (TSKREC.ZZZCHGCT != TS0FW01.TS0FWSCT) /* if row not found*/
      converseLib.validationFailed(12); /* set error message*/
      TS0FM001.XXXPRCNM = "TS0F520"; /* Process name*/
      TS0FW01.TS0FWFSW = "C"; /* change function back to 'c'*/
      TS0FW01.TS0FWSWR = "N"; /* set request for data to yes*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* reset all updates*/
      TS0FW01.TS0FWIXW = 100; /* get out of loop*/
      exit stack; /* exit to redisplay map*/
    else
      if (TSKREC.ZZZCHGCT == TS0FW01.TS0FWSCT) /* if row was found*/
        TS0F522(); /* delete the row in the database*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if row was found*/

           /* continue*/

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
            converseLib.validationFailed(12); /* set error message*/
            TS0FM001.XXXPRCNM = "TS0F520"; /* Process name*/
            TS0FW01.TS0FWFSW = "C"; /* change function back to 'c'*/
            TS0FW01.TS0FWSWR = "N"; /* set request for data to yes*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* reset all updates*/
            TS0FW01.TS0FWIXW = 100; /* get out of loop*/
            exit stack; /* exit to redisplay map*/
          end
        end
      end
    end
    TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW + 1; /* increment index*/
  end

  TS0F511(); /* explode the data*/

  TS0FW01.TS0FWIXW = 1; /* set index*/
  while (TS0FW01.TS0FWIXW <= TS0FW01.TS0FWWSX) /* not end of ws*/
    TS0F523(); /* add new row to database*/
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected error*/
      exit stack; /* exit to redisplay map*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* reset all updates*/
    end
    TS0FW01.TS0FWIXW = TS0FW01.TS0FWIXW + 1; /* increment index*/
  end

  if (TS0FW01.TS0FWPSW == "N") /* no errors were found*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit adds*/
    TS0FW01.TS0FWFSW = "C"; /* change function back to 'c'*/
    converseLib.validationFailed(44); /* indicate update successful*/
    TS0FM001.XXXPRCNM = "TS0F520"; /* process name*/
    TS0FW01.TS0FWSWR = "N"; /* set request for data to yes*/
  else
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0F520

// Select unique DTRANS.VASCHD01
Function TS0F521()
   /* ------------------------------------------------------------*/
                 /* SELECT UNIQUE FROM DTRANS.VASCHD01*/
   /* 1) Select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0FW02.TSACARCD[TS0FWIXW]; /* move fields*/
  TSKREC.TS5CRAFT = TS0FW02.TS5CRAFT[TS0FWIXW];
  TSKREC.TSFSHPNB = TS0FW02.TSFSHPNB[TS0FWIXW];
  TSKREC.TSKSEQNB = TS0FW02.TSKSEQNB[TS0FWIXW];
  TSKREC.TSKSCHED = TS0FW02.TSKSCHED[TS0FWIXW];

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "S";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F521"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FM001.XXXPRCNM = "TS0F521"; /* Process name*/
  end


end // end TS0F521

// Delete row from database
Function TS0F522()
   /* ------------------------------------------------------------*/
                 /* DELETE ROW FROM DATABASE*/
   /* 1) Set record empty, move key fields, and delete table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0FW02.TSACARCD[TS0FWIXW]; /* move fields*/
  TSKREC.TS5CRAFT = TS0FW02.TS5CRAFT[TS0FWIXW];
  TSKREC.TSFSHPNB = TS0FW02.TSFSHPNB[TS0FWIXW];
  TSKREC.TSKSEQNB = TS0FW02.TSKSEQNB[TS0FWIXW];
  TSKREC.TSKSCHED = TS0FW02.TSKSCHED[TS0FWIXW];
  TSKREC.ZZZCHGCT = TS0FW02.ZZZCHGCT[TS0FWIXW];

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "D ";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F522"; /* Process name*/
    TA1REC.TA1LOC = "DELETE A TABLE ROW";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FM001.XXXPRCNM = "TS0F522"; /* Process name*/
  end


end // end TS0F522

// Add updated row to database
Function TS0F523()
   /* ------------------------------------------------------------*/
                 /* ADD UPDATED ROW TO DATABASE*/
   /* 1) Set record empty, move key fields, and add table row.*/
       /* - increment change count (+1) row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0FW02.TSACARCD[TS0FWIXW]; /* move fields*/
  TSKREC.TS5CRAFT = TS0FW02.TS5CRAFT[TS0FWIXW];
  TSKREC.TSFSHPNB = TS0FW02.TSFSHPNB[TS0FWIXW];
  TSKREC.TSKSEQNB = TS0FW02.TSKSEQNB[TS0FWIXW];
  TSKREC.TSKSCHED = TS0FW02.TSKSCHED[TS0FWIXW];
  TSKREC.TSEORIG = TS0FW02.TSEORIG[TS0FWIXW];
  TSKREC.TSEDEST = TS0FW02.TSEDEST[TS0FWIXW];
  TSKREC.TSKDPRT = TS0FW02.TS0FWNDP[TS0FWIXW];
  TSKREC.TSKARVL = TS0FW02.TS0FWNAR[TS0FWIXW];
  TSKREC.TSKCOST = TS0FW02.TSKCOST[TS0FWIXW];
  /* -----------------------  Y2K OUT BEGIN  -----------------*/
  /*  */
  /* MOVE EZEDTE TO TS0FW01.TS0FWYMD;*/
  /*  */
  /* ------------------------  Y2K OUT END  -----------------*/
  /* -----------------------  Y2K IN BEGIN  -------------*/
  /*  */
  TS0FW01.TS0FWDTE = VGVar.currentGregorianDate;
  /*  */
  /* ------------------------  Y2K IN END  --------------*/
  TSKREC.ZZZCHGDT = TS0FW01.TS0FWDTE;
  TS0FW01.TS0FWTM1 = VGVar.currentFormattedTime;
  TS0FW01.TS0FWHR2 = TS0FW01.TS0FWHR1;
  TS0FW01.TS0FWMN2 = TS0FW01.TS0FWMN1;
  TSKREC.ZZZCHGTM = TS0FW01.TS0FWTM2;
  TSKREC.ZZZCHGCT = TS0FW01.TS0FWSCT + 1; /* increment change count*/

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "A ";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0FW01.TS0FWPSW = "Y"; /* indicate problem*/
    TS0FW01.TS0FWIXM = 100; /* get out of loop*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset database*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0F512"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0FM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0FM001.XXXPRCNM = "TS0F512"; /* Process name*/
  end


end // end TS0F523

//*** RECORD=TS0FW01 ****
// Working storage for TS0F - Published schedule maintenance
// ***********************
Record TS0FW01 type basicRecord
  10 TSNFNC TSNFNC ; 
  10 TS0FWIXM TS0FWIXM ; 
  10 TS0FWIX2 TS0FWIX2 ; 
  10 TS0FWIXW TS0FWIXW ; 
  10 TS0FWSIX TS0FWSIX ; 
  10 TS0FWWSX TS0FWWSX ; 
  10 TS0FWPSW TS0FWPSW ; 
  10 TS0FWSWR TS0FWSWR ; 
  10 TS0FWSWC TS0FWSWC ; 
  10 TS0FWFSW TS0FWFSW ; 
  10 TS0FWSOR TS0FWSOR ; 
  10 TSACARCD TSACARCD ; 
  10 TS5CRAFT TS5CRAFT ; 
  10 TSFSHPNB TSFSHPNB ; 
  10 TSKCOST TSKCOST ; 
  10 TSACARNM TSACARNM ; 
  10 TS0FWSCT TS0FWSCT ; 
  10 TS0FWDTE TS0FWDTE ; 
    15 TS0FWCEN TS0FWCEN ; 
    15 TS0FWYMD TS0FWYMD ; 
  10 TS0FWMDY TS0FWMDY ; 
    15 TS0FWMM TS0FWMM ; 
    15 TS0FWDD TS0FWDD ; 
    15 TS0FWYY TS0FWYY ; 
  10 TS0FWTM1 TS0FWTM1 ; 
    15 TS0FWHR1 TS0FWHR1 ; 
    15 TS0FWC1 TS0FWC1 ; 
    15 TS0FWMN1 TS0FWMN1 ; 
    15 TS0FWC2 TS0FWC2 ; 
    15 TS0FWSEC TS0FWSEC ; 
  10 TS0FWTM2 TS0FWTM2 ; 
    15 TS0FWHR2 TS0FWHR2 ; 
    15 TS0FWMN2 TS0FWMN2 ; 
end // end TS0FW01

//*** RECORD=TS0FW02 ****
// Working storage record for TS0F - Published schedule maint
// ***********************
Record TS0FW02 type basicRecord
  10 TS0FW2LN TS0FW2LN [91] ; 
    15 TSACARCD TSACARCD ; 
    15 TS5CRAFT TS5CRAFT ; 
    15 TSFSHPNB TSFSHPNB ; 
    15 TSKSEQNB TSKSEQNB ; 
    15 TSKSCHED TSKSCHED ; 
    15 TSEORIG TSEORIG ; 
    15 TSEDEST TSEDEST ; 
    15 TS0FWMDP TS0FWMDP ; 
    15 TS0FWNDP TS0FWNDP ; 
      20 TS0FWDCC TS0FWDCC ; 
      20 TS0FWDYY TS0FWDYY ; 
      20 TS0FWDMM TS0FWDMM ; 
      20 TS0FWDDD TS0FWDDD ; 
    15 TS0FWMAR TS0FWMAR ; 
    15 TS0FWNAR TS0FWNAR ; 
      20 TS0FWACC TS0FWACC ; 
      20 TS0FWAYY TS0FWAYY ; 
      20 TS0FWAMM TS0FWAMM ; 
      20 TS0FWADD TS0FWADD ; 
    15 TSKCOST TSKCOST ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end TS0FW02

//*** RECORD=TS0FW03 ****
// Screen Detail Record for TS0F - Published schedule Mainten.
// ***********************
Record TS0FW03 type basicRecord
  10 TS0FW3LN TS0FW3LN [14] ; 
    15 TS0FMLOC TS0FMLOC ; 
    15 TS0FWMAR TS0FWMAR ; 
    15 TS0FWADT TS0FWADT ; 
    15 TS0FWMDP TS0FWMDP ; 
    15 TS0FWDDT TS0FWDDT ; 
    15 XXXCITY XXXCITY ; 
    15 XSTCD XSTCD ; 
    15 XCTCD XCTCD ; 
end // end TS0FW03

// published schedule input locat
DataItem TS0FMLOC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line ws2
DataItem TS0FW2LN char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line ws3
DataItem TS0FW3LN char(65)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// arrival century
DataItem TS0FWACC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// arrival day
DataItem TS0FWADD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ts_arvl_dt in ccyymmdd format
DataItem TS0FWADT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// arrival month
DataItem TS0FWAMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// arrival year
DataItem TS0FWAYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  col 1
DataItem TS0FWC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  col2
DataItem TS0FWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working century
DataItem TS0FWCEN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// departure century
DataItem TS0FWDCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  day
DataItem TS0FWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// departure day
DataItem TS0FWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ts_arvl_dt in ccyymmdd format
DataItem TS0FWDDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// departure month
DataItem TS0FWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working date
DataItem TS0FWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// departure year
DataItem TS0FWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Add/delete function switch
DataItem TS0FWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  hour 1
DataItem TS0FWHR1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  hour 2
DataItem TS0FWHR2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second index for map fields
DataItem TS0FWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index 1
DataItem TS0FWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for ws
DataItem TS0FWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TS_ARVL_DT
DataItem TS0FWMAR char(6)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// TS_DPRT_DT
DataItem TS0FWMDP char(6)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// Working month day year
DataItem TS0FWMDY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  month
DataItem TS0FWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  minute 1
DataItem TS0FWMN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  minute 2
DataItem TS0FWMN2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_ARVL_DT
DataItem TS0FWNAR num(9)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_DPRT_DT
DataItem TS0FWNDP num(9)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0FWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save change count
DataItem TS0FWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second1
DataItem TS0FWSEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save index
DataItem TS0FWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save TS_ORIG_LOC_CD
DataItem TS0FWSOR char(4)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0FWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0FWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working time 1
DataItem TS0FWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working time 2
DataItem TS0FWTM2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS Save index
DataItem TS0FWWSX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working year month day
DataItem TS0FWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  year
DataItem TS0FWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

