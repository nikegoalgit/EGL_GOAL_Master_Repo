package ts02;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS02 ****
// ************************************************************
// **               TRANSPORTATION SYSTEM                    **
// ************************************************************
// **                                                        **
// 
//               CONTAINER CARTON ASSIGNMENT
//               ---------------------------
// 
// This application will show all cartons for a particulater
// container that belongs to a P/L style.
// 
// This application can be accessed from one of the following
// applications:
// 
//    1. TS0J - Shipment Maintenance Menu P/L Add Option
//    2. TS0P - Shipment Product Inquiry
//    3. TS01 - Shipment Maintenance P/L Browse
//    4. TS0Y - Shipment Maintenance Container Browse
//    5. TS0V - Shipment P/L Detail maintenance/inquery
// 
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          08/18/88 cepple  New application.
// ts#000   07/25/90 cepple  Add new cpl item selection "s4"
//                           for new sort for map 1.
//                           Fix carton counting for GPC02 in
//                           TS02162 process.
//                           Increase max number of cartons
//                           allowable from 2500 to 5000.
// ts#012   08/02/90 cepple  Add gpc to map 1 and map 2 screen
//                           heading information.
// fix      08/13/90 cepple  Since PC3PONBR is not always GT
//                           zero, look at TSIPLNBR instead for
//                           more data to process.
// fix      08/16/90 cepple  When coming from TS0P the applica-
//                           tion will now move the passed
//                           warehouse code to TSWREC.XWHCD.
// fix      08/23/90 cepple  Wildcard quality when verifying
//                           size in detail edits.
// ts#141   11/12/90 cepple  Detect and fix discrepancies be-
//                           tween packing list and detail.
// ts#158   12/07/90 cepple  Eliminate all warnings when user
//                           selects a carton range for maint.
// ts#000   01/11/91 cepple  program not checking for duplicate
//                           s on original pack/list cartons.
//                           Modify overlap check processes.
// ts#000   01/29/91 cepple  gpc 02 with colors other than '00'
//                           were causing abend to occur in
//                           TS02S38. Other changes regarding
//                           hard coded '00' were in TS02S24,
//                           TS02163, and TS02262.
// ts#000   02/01/91 cepple  fix index problem in TS02163 and
//                           TS02262.
// TS#167   02/06/91 KSTOKK  Set mode code to blanks if
//                           Carr/Craft not found.
// TS#175   02/19/91 cepple  Fix so that all gpc's have ability
//                           to handle multiple colors.
// TS#179   03/11/91 dhuffm  Change to not match on quality
//                           code for P.O.
// TS#192   04/02/91 dhuffm  Fix to assign 'ER' status
//                           correctly if p/l in more than 1
//                           screen.
// TS#000   04/09/91 SFORD   table changes 'TSOREC'
// TS#195   05/06/91 dhuffm  Chg to not include shipments with
//                           'ER' status when checking style/
//                           size overrages.
// TS#168   05/17/91 dhuffm  Fix to assign cartons to
//                           containers correctly.
// TS#184   09/26/91 SFORD   Re-write of application to handle
//                           carton ranges in CPLIT01 D.B.
//                           This application will function as
//                           a Container Carton Assignment
//                           Maintenance/Inquery/Add.
// TS#224   10/04/91 SFORD   Increase size of occurs to 500
//                           possible CPLIT01 rows.
// TS#184   10/10/91 SFORD   Allow access via from option 5
//                           "TS0J" through "TS0V"
// TS#fix   10/04/91 SFORD   Increase size of occurs to 1600
//                           possible CPLIT01 rows.
// TS#233   03/02/92 SFORD   SO/PO & Bgrade enhancements
// TS#FIX   04/22/92 SFORD   Changed (S6/N6/C6) to (SB/NB/CB)
// TS#999   08/13/93 SFORD   table change - user-id to cplhd01
// TS#999   03/09/94 SFORD   table change - crtn re-size
// TS#347   03/16/94 SFORD   table change - crtn re-size
// TS#000   07/05/95 SFORD   CHG SO NBR TO 9.3 FROM 8.2
// TS#000   11/07/96 JCARL1  Remove beeps from msg display.
// TS#000   08/20/97 RKALLA  Fixed the VPLAUX01 consistency wit
//                           VCPLIT01
// TS#000   08/27/97 RKALLA  VPLAUX rows will not populate if
//                           they dont have rows initially.
// TS#000   09/02/97 RKALLA  Minor modifications for VPLAUX
// TS#000   09/04/97 RKALLA  INCREASED THE SIZE OF UCC ARRAY
// TS#000   09/18/97 DKESLE  Added PF5 option to screen TR0D
// TS#000   09/24/97 RKALLA  Fix production problem on cplit
// TS1482   11/21/97 SMANN2  Fix production problem on VCPLHD01
//                           ( Refer ts02-67500)
// TS1501   06/21/98 SKAMBA  Changed Carton no.length (6 to 9)
//                           and columns(from 4 to 3)inTS02M001
// TS0000   12/09/99 npulug  Modified to see that only cartons
//                           for the style/colr selected are
//                           displayed.Also the total cartons
//                           and quantity displayed in the
//                           header for gpc='03' also.
// TS#00   01/21/00 VKUMAR   Fixed a bug in fectching the
//                           selected packing list.
// *********************
Program TS02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC6REC PC6REC; // record
  PC7REC PC7REC; // record
  PCMREC PCMREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS02W01 TS02W01; // record
  TS02W02 TS02W02; // record
  TS02W03 TS02W03; // record
  TS02W05 TS02W05; // record
  TS02W07 TS02W07; // record
  TS02W11 TS02W11; // record
  TS02W14 TS02W14; // record
  TS02W15 TS02W15; // record
  TS02W16 TS02W16; // record
  TS02W17 TS02W17; // record
  TS02W23 TS02W23; // record
  TS02W24 TS02W24; // record
  TS02W25 TS02W25; // record
  TS02W26 TS02W26; // record
  TS02W27 TS02W27; // record
  TS5REC TS5REC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSOREC TSOREC; // record
  TSPREC TSPREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  TSXREC TSXREC; // record
  VPLAUX01 VPLAUX01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XRETBL {deleteAfterUse = yes}; // table
  use YSSTBL {deleteAfterUse = yes}; // table
  use TS02M.TS02M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS02W01 empty; /* ===> Initialize working storage*/
    set TS02W02 empty;
    set TS02W03 empty;
    set TS02W05 empty;
    set TS02W07 empty;
    set TS02W11 empty;
    set TS02W23 empty;
    set TS02W24 empty;
    set TS02W25 empty;
    set TS02W26 empty;
    set TS02W27 empty;

    set PG2REC empty; /* ===> Initialize records used*/
    set PG3REC empty;
    set PC2REC empty;
    set PC3REC empty;
    set PC6REC empty;
    set PC7REC empty;
    set PCMREC empty;
    set PCYREC empty;
    set TAEREC empty;
    set TSHREC empty;
    set TSOREC empty;
    set TSIREC empty;
    set TSPREC empty;
    set TSTREC empty;
    set TSXREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;

    set TS02M001 initial; /* ===> Initialize - map3 output area*/

    TS02W01.TS02WHUP = "N"; /* ===> Header  update flag*/
    TS02W01.TS02WIUP = "N"; /* ===> Item    update flag*/
    TS02W01.TS02WPWF = "N"; /* ===> warning flag for po*/
    TS02W01.TS02WWUP = "N"; /* ===> warning update flag*/
    TS02W01.TS02WSWU = "N"; /* ===> temp storage update switch*/
    TS02W01.TS02WSWR = "Y"; /* ===> Obtain data for map switch*/
    TS02W01.TS02WSWF = "N"; /* ===> format the map switch*/
    TS02W01.TS02W1ST = "Y"; /* ===> 1st time thru  switch*/
    TS02W01.TS02WMAP = "1"; /* ===> map number*/

    TS02W01.TS02WMGC = 30; /* ===> max-gpc-cpl-lines*/
    TS02W01.TS02WMCR = 1600; /* ===> max-carton-ranges*/

    if (TSWREC.TSWFRAPP == "TS0P") /* ===> If entering from TS0P*/
      TS02W01.TS02WIX1 = 1; /* ===> Set up index*/

      while (TS02W01.TS02WIX1 <= 10) /* ===> Until end of pass array*/

        if (TSWREC.TSWSHPID[TS02WIX1] > 0) /* ===> Find the first shpmnt*/

          TSWREC.TSFSHPID = TSWREC.TSWSHPID[TS02WIX1]; /* ===> save id*/
          TS02M001.TSFSHPID = TSWREC.TSWSHPID[TS02WIX1]; /* ===> Nike id*/
          TS02M001.TSFBOL = TSWREC.TSWBOL[TS02WIX1]; /* ===> BOL*/
          TSWREC.XWHCD = TSWREC.TSWXWHCD[TS02WIX1]; /* ===> warehouse*/

          TS02W01.TS02WIX1 = 10 + 1; /* ===> End loop*/

        else

          TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> Incr counter*/

        end

      end

    else /* ===> not from TS0P*/

      TS02M001.TSFSHPID = TSWREC.TSFSHPID; /* ===> Nike id*/
      TS02M001.TSFBOL = TSWREC.TSFBOL; /* ===> bill of lading*/

    end

    goto TS02-00000; /* ===> Check valid from application*/


     /* **                                                        ***/
     /* ********************** End of XPTS001 - FLOW ****************/
    TS02-00000: TS02-00000();
     /* ------------------------------------------------------------*/
     /* Flow to init CPL arrays*/
     /* ------------------------------------------------------------*/

    goto TS02-01000; /* ===> Flow to init CPL arrays*/


     /* **                                                        ***/
     /* ********************** End of TS02000 - FLOW ****************/
    TS02-01000: TS02-01000();
     /* ------------------------------------------------------------*/
     /* Flow to Init container array*/
     /* ------------------------------------------------------------*/

    goto TS02-02000;


     /* **                                                        ***/
     /* ********************** End of TS02010 - FLOW ****************/
    TS02-02000: TS02-02000();
     /* ------------------------------------------------------------*/
     /* Flow to set flags based on origin*/
     /* ------------------------------------------------------------*/

    goto TS02-03000; /* ===> Check origin and set flag*/


     /* **                                                        ***/
     /* ********************** End of TS02020 - FLOW ****************/
    TS02-03000: TS02-03000();
     /* ------------------------------------------------------------*/
       /* Flow to Init compress carton array per container*/
     /* ------------------------------------------------------------*/

    goto TS02-04000; /* ===> compress carton array per container*/


     /* **                                                        ***/
     /* ********************** End of TS02030 - FLOW ****************/
    TS02-04000: TS02-04000();
     /* *************************************************************/
        /* Flow to compress all cartons from all containers*/
     /* *************************************************************/

    goto TS02-05000; /* ===> compress all cartons from all containers*/


     /* **                                                        ***/
     /* ********************** End of TS02040 - FLOW ****************/
    TS02-05000: TS02-05000();
     /* *************************************************************/
     /* Flow to Mainline application process for*/
     /* container assignment*/
     /* *************************************************************/

    goto TS02-06000; /* ===>  Mainline process for Container assignment*/

     /* **                                                        ***/
     /* ********************** End of TS02050 - FLOW ****************/
    TS02-06000: TS02-06000();
     /* ------------------------------------------------------------*/
      /* Flow back to application mainline processing*/
     /* ------------------------------------------------------------*/

    goto TS02-06000; /* ===>  Flow back to application mainline processing*/

     /* **                                                        ***/
     /* ********************** End of TS02060 - FLOW ****************/
  end // end main
end // end TS02

// --->Check the FROM appl.
Function TS02-00000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0V" /* From allowed applications*/
   || COMMAREA.CAFROMAP == "TS0Y" 
   || COMMAREA.CAFROMAP == "TS0P" 
   || COMMAREA.CAFROMAP == "TS01" 
   || COMMAREA.CAFROMAP == "TR0D")

    /* ==========  NEXT SENTENCE =========>*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-00000 ********************/
end // end TS02-00000

// Maint/inq container assignment
Function TS02-00001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* If the request for data switch is yes;*/
   /* 1) Obtain the update data*/
   /*  */
   /* 2) Format the map output area and display the map.*/
   /*  */
   /* 3) Check the attention identifier used to respond.*/
   /*  */
   /* 4) Reset highlighted fields to normal intensity.*/
   /*  */
   /* 5) Verify the data that was entered.*/
   /*  */
   /* 6) Process a valid input request.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  if (TS02W01.TS02WSWR == "Y" /* ===> request for data is yes*/
   && converseVar.validationMsgNum == 0) /* ===> no error messages to display*/

    TS02-10000(); /* ===> Obtain data*/

  end

  TS02-20000(); /* ===> Format and display the map*/

  TS02-30000(); /* ===> Check attention identifier*/

  TS02-40000(); /* ===> Reset fields to normal intensity*/

  TS02-50000(); /* ===> Verify the entered data*/

  TS02-60000(); /* ===> Process valid input requests*/


   /* **                                                        ***/
   /* ********************** End of TS02-00001 ********************/
end // end TS02-00001

// --->Init TS02 CPL rows/array
Function TS02-01000()
   /* ------------------------------------------------------------*/
   /*  */
   /* INITIALIZE TS02 CPL ROWS*/
   /*  */
   /* ( Note: The "From" Application is the application*/
   /* that called TS02, which in turn called TS02.*/
   /* It  was loaded/store in TSWREC.TSWFRAPP)*/
   /* ------------------------------------------------------------*/
   /*  */

    /* ------------------------------------------------------------*/
       /* If TS0U is the from application, then select the*/
       /* cpl header which was built if TS0U.*/
    /* ------------------------------------------------------------*/

  if (TSWREC.TSWFRAPP == "TS0U" /* ===> If coming from Add Menu*/
   || TSWREC.TSWFRAPP == "TS0J") /* ===> If coming from Add Menu*/

    TS02-01100(); /* ===> Select set of cpl table rows*/
                                   /* (S1)*/
    TS02W01.TS02WCPX = 1; /* ===> set cpl index*/
    TS02W01.TS02WSWC = "N";
    TS02-01200(); /* ===> fetch the cpl rows (N1)*/

    while (TS02W01.TS02WSWC == "N" /* ===> End of cursor switch*/
    )
      TS02-01300(); /* ===> load CPL array*/

      TS02-01200(); /* ===> fetch the cpl rows (N1)*/

    end
    TS02-01400(); /* ===> close selected set of cpl rows*/
                                   /* (C1)*/
    TS02W01.TS02WCPX = 1; /* ===> reset cpl index*/


  else

   /* ------------------------------------------------------------*/
   /* Load only the CPL headers passed through the TSWREC*/
   /* pass array.*/
   /* ------------------------------------------------------------*/

    TS02W01.TS02WIX2 = 1; /* ===> initialize index*/
    TS02W01.TS02WCPX = 1; /* ===> set cpl index*/

    while (TS02W01.TS02WIX2 <= 10) /* ===> while data exists in the array*/

      if (TSWREC.TSW2SHP[TS02WIX2] > 0
       && TSWREC.TSW2SHP[TS02WIX2] == TSWREC.TSFSHPID)

        if (TSWREC.TSWPLNBR[TS02WIX2] in TS02W02.TSIPLNBR)

         /* ===> NEXT SENTENCE ---> P.L. already exists*/

        else

          TS02-01500(); /* ===> select unique CPLHD01 (SA)*/

        end

      end

      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Load 1ST set of like rows into the gpc-cpl array.*/
   /* ------------------------------------------------------------*/

  TS02W01.TS02WCPX = 1; /* ===> init the CPL index*/

  TS02-01600(); /* ===> Init GPC-CPL array with 1st set*/
                                   /* of data*/


   /* **                                                        ***/
   /* ********************** End of TS02-01000 ********************/
end // end TS02-01000

// Select (S1) set       VCPLHD01
Function TS02-01100()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPL TABLE ROWS*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* Move in id*/

  TSGREC.TSNFNC = "S1"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-01100"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/
    TS02M001.XXXPRCNM = "2-01100"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS02-01100 ********************/
end // end TS02-01100

// Fetch  (N1) next      VCPLHD01
Function TS02-01200()
   /* ------------------------------------------------------------*/
   /*  */
   /* FETCH SET SINGLE CPL TABLE ROW*/
   /*  */
   /* Fetch the next row from the selected set of rows,*/
   /* until all rows fetched or contention occurrs.*/
   /*  */
   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "N1"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Good return code*/

    /* ========== NEXT SENTENCE ==========>*/

  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS02W01.TS02WSWC = "Y"; /* End of set found*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "2-01200"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
      TA1REC.TA1MAP = "TS02M001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS02M001.XXXPRCNM = "2-01200"; /* Process name*/

      exit stack; /* ===>  Exit to redisplay map*/

    end /* ===> sql  = 100*/

  end /* ===> sql  = 0*/


   /* **                                                        ***/
   /* ********************** End of TS02-01200 ********************/
end // end TS02-01200

// Move data to CPL array
Function TS02-01300()
   /* ------------------------------------------------------------*/
    /* Move the TSIREC fields to working storage.*/
   /* ------------------------------------------------------------*/

  TS02W02.TSFSHPID[TS02WCPX] = TSIREC.TSFSHPID; /* save keys*/
  TS02W02.TSIPLNBR[TS02WCPX] = TSIREC.TSIPLNBR;
  TS02W02.PC3PONBR[TS02WCPX] = TSIREC.PC3PONBR;
  TS02W02.PC2CUXID[TS02WCPX] = TSIREC.PC2CUXID;
  TS02W02.SY1STNBR[TS02WCPX] = TSIREC.SY1STNBR;
  TS02W02.SY2CLRID[TS02WCPX] = TSIREC.SY2CLRID;
  TS02W02.XDMCD[TS02WCPX] = TSIREC.XDMCD;
  TS02W02.PC2INSEG[TS02WCPX] = TSIREC.PC2INSEG;
  TS02W02.XQACD[TS02WCPX] = TSIREC.XQACD;
  TS02W02.XPGCD[TS02WCPX] = TSIREC.XPGCD;
  TS02W02.XOWCD[TS02WCPX] = TSIREC.XOWCD;
  TS02W02.XUMCD[TS02WCPX] = TSIREC.XUMCD;


  TS02W01.TS02WCPX = TS02W01.TS02WCPX + 1; /* increment cpl index*/


   /* **                                                        ***/
   /* ********************** End of TS02-01300 ********************/
end // end TS02-01300

// Move data to CPL array
Function TS02-01301()
   /* ------------------------------------------------------------*/
    /* Move the TSIREC fields to working storage.*/
   /* ------------------------------------------------------------*/

  if (TS02W01.SEL-NIKE-PL-NBR == TSIREC.TSIPLNBR)

    TS02W02.TSFSHPID[TS02WCPX] = TSIREC.TSFSHPID; /* save keys*/
    TS02W02.TSIPLNBR[TS02WCPX] = TSIREC.TSIPLNBR;
    TS02W02.PC3PONBR[TS02WCPX] = TSIREC.PC3PONBR;
    TS02W02.PC2CUXID[TS02WCPX] = TSIREC.PC2CUXID;
    TS02W02.SY1STNBR[TS02WCPX] = TSIREC.SY1STNBR;
    TS02W02.SY2CLRID[TS02WCPX] = TSIREC.SY2CLRID;
    TS02W02.XDMCD[TS02WCPX] = TSIREC.XDMCD;
    TS02W02.PC2INSEG[TS02WCPX] = TSIREC.PC2INSEG;
    TS02W02.XQACD[TS02WCPX] = TSIREC.XQACD;
    TS02W02.XPGCD[TS02WCPX] = TSIREC.XPGCD;
    TS02W02.XOWCD[TS02WCPX] = TSIREC.XOWCD;
    TS02W02.XUMCD[TS02WCPX] = TSIREC.XUMCD;


    TS02W01.TS02WCPX = TS02W01.TS02WCPX + 1; /* increment cpl index*/
  end


   /* **                                                        ***/
   /* ********************** End of TS02-01301 ********************/
end // end TS02-01301

// Close  (C1) set       VCPLHD01
Function TS02-01400()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPL ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C1"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "2-01400"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TS02M001.XXXPRCNM = "2-01400"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-01400 ********************/
end // end TS02-01400

// Get all P.L. for CPL Array
Function TS02-01500()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT A SINGLE CPL TABLE ROW*/
   /* Then*/
   /* Select all P/L rows for a product in CPLHD01 table.*/
   /*  */
   /* ------------------------------------------------------------*/

  TS02-01510(); /* ===> Select (SA) unique    VCPLHD01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> If row found*/
    TS02W01.SEL-NIKE-PL-NBR = TSIREC.TSIPLNBR;

   /* IF TSIREC.XGPCD = '03';*/
   /* MOVE '*' TO TSIREC.SY2CLRID; /* ===> Select all the colors for style*/
   /* END;*/

    TS02-01520(); /* ===> Select (S6) set       VCPLHD01*/

    TS02W01.TS02WSWC = "N"; /* ===> Set end of set switch*/

    TS02-01530(); /* ===> Fetch  (N6) next      VCPLHD01*/
    /* ------> Prime   Read*/
            /* ------------*/

    while (TS02W01.TS02WSWC == "N") /* ===> Until end of set*/

      /* ------------------------------------------------------------*/
        /* Move the TSIREC fields to working storage.*/
      /* ------------------------------------------------------------*/

   /* PERFORM TS02-01300;          /* ===> Move data to CPL array*/

      TS02-01301(); /* ===> Move data to CPL array*/


      TS02-01530(); /* ===> Fetch  (N6) next      VCPLHD01*/
      /* ------> Driving Read*/
              /* ------------*/

    end /* ===> Until end of set*/

    TS02-01540(); /* ===> Close  (C6) set       VCPLHD01*/

  end /* ===> If row found*/

   /* **                                                        ***/
   /* ********************** End of TS02-01500 ********************/
end // end TS02-01500

// Select (SA) unique    VCPLHD01
Function TS02-01510()
   /* ------------------------------------------------------------*/

              /* SELECT A SINGLE CPL TABLE ROW*/

      /* Select all P/L rows for a product in CPLHD01 table.*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TSWREC.TSW2SHP[TS02WIX2]; /* ===> Move in keys*/
  TSIREC.TSIPLNBR = TSWREC.TSWPLNBR[TS02WIX2];

  TSGREC.TSNFNC = "SA"; /* ===> move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* ===> Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* ===> If row found*/
   || SQLCA.VAGen_SQLCODE == 100) /* ===> Unexpected return code*/

    /* ========= NEXT SENTENCE =========>*/

  else

    if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
      converseLib.validationFailed(11); /* ===> Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
    else
      converseLib.validationFailed(10); /* ===> Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* ===> Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
    TA1REC.TA1PGMNM = "2-01510"; /* ===> Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS02M001"; /* ===> Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* ===> Table view name*/
    TS02M001.XXXPRCNM = "2-01510"; /* ===> Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* ===> Error diagnosis routine*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-01510 ********************/
end // end TS02-01510

// Select (SB) set       VCPLHD01
Function TS02-01520()
   /* ------------------------------------------------------------*/

        /* SELECT SET AND OPEN CURSOR FOR DTRANS.VCPLHD01*/

   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "SB"; /* move in function code*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-01520"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-01520"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-01520 ********************/
end // end TS02-01520

// Fetch  (NB) next      VCPLHD01
Function TS02-01530()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD01*/

   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "NB"; /* move in function code*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return code*/

    /* ============== NEXT SENTENCE ===========>*/

  else

    if (SQLCA.VAGen_SQLCODE == 100)

      TS02W01.TS02WSWC = "Y"; /* ===> close cursor switch*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "2-01530"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS02M001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS02M001.XXXPRCNM = "2-01530"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS02-01530 ********************/
end // end TS02-01530

// Close  (CB) set       VCPLHD01
Function TS02-01540()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD01*/

   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "CB"; /* move in function code*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "2-01540"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-01540"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-01540 ********************/
end // end TS02-01540

// Init GPC-CPL table
Function TS02-01600()
   /* ------------------------------------------------------------*/
   /* Load the first set of like rows into the gpc-cpl array.*/
   /* (** E.G.*/
   /* When processing GPC = '03'*/
   /* Load all colors associated with PL/Style.*/
   /* When processing GPC = '02'*/
   /* Load one color  associated with PL/Style. **)*/
   /* ------------------------------------------------------------*/

  TS02W01.TS02WGCX = 1; /* ===> set up GPC-CPL index*/

  TS02W01.TS02WGCT = 0; /* ===> initialize gpc-cpl     container*/
                                   /* total*/
  TS02W01.TS02WGST = 0; /* ===> initialize gpc-cpl ship quantity*/
                                   /* total*/

  TS02W01.PC3PONBR = TS02W02.PC3PONBR[TS02WCPX];
  TS02W01.PC2CUXID = TS02W02.PC2CUXID[TS02WCPX];
  TS02W01.SY1STNBR = TS02W02.SY1STNBR[TS02WCPX];
  TS02W01.SY2CLRID = TS02W02.SY2CLRID[TS02WCPX];
  TS02W01.XDMCD = TS02W02.XDMCD[TS02WCPX];
  TS02W01.PC2INSEG = TS02W02.PC2INSEG[TS02WCPX];
  TS02W01.XQACD = TS02W02.XQACD[TS02WCPX];
  TS02W01.XPGCD = TS02W02.XPGCD[TS02WCPX];
  TS02W01.XUMCD = TS02W02.XUMCD[TS02WCPX];
  TS02W01.XOWCD = TS02W02.XOWCD[TS02WCPX];

  if (TSWREC.XGPCD == "03")

    while (TS02W02.PC3PONBR[TS02WCPX] == TS02W01.PC3PONBR
     && TS02W02.PC2CUXID[TS02WCPX] == TS02W01.PC2CUXID
     && TS02W02.SY1STNBR[TS02WCPX] == TS02W01.SY1STNBR
     && TS02W02.XDMCD[TS02WCPX] == TS02W01.XDMCD
     && TS02W02.PC2INSEG[TS02WCPX] == TS02W01.PC2INSEG
     && TS02W02.XQACD[TS02WCPX] == TS02W01.XQACD
     && TS02W02.XPGCD[TS02WCPX] == TS02W01.XPGCD
     && TS02W02.XUMCD[TS02WCPX] == TS02W01.XUMCD
     && TS02W02.XOWCD[TS02WCPX] == TS02W01.XOWCD)


        /* **--------------------------------------------------------*/
        /* **  Get totals from CPLHD01 D.B.*/
        /* **--------------------------------------------------------*/

      TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
      TSIREC.TSIPLNBR = TS02W02.TSIPLNBR[TS02WCPX];

      TS02-01610(); /* Select (SA) unique VCPLHD01*/


      /* ------------------------------------------------------------*/
          /* Move data to gpc-cpl array*/
      /* ------------------------------------------------------------*/

      TS02-01620(); /* ===> move data to gpc-cpl array*/

      /* ------------------------------------------------------------*/
       /* Increment the indexes*/
      /* ------------------------------------------------------------*/

      TS02W01.TS02WGCX = TS02W01.TS02WGCX + 1;
      TS02W01.TS02WCPX = TS02W01.TS02WCPX + 1;

    end

  else /* ===> Process GPC = '02'*/

    while (TS02W02.PC3PONBR[TS02WCPX] == TS02W01.PC3PONBR
     && TS02W02.PC2CUXID[TS02WCPX] == TS02W01.PC2CUXID
     && TS02W02.SY1STNBR[TS02WCPX] == TS02W01.SY1STNBR
     && TS02W02.SY2CLRID[TS02WCPX] == TS02W01.SY2CLRID
     && TS02W02.XDMCD[TS02WCPX] == TS02W01.XDMCD
     && TS02W02.PC2INSEG[TS02WCPX] == TS02W01.PC2INSEG
     && TS02W02.XQACD[TS02WCPX] == TS02W01.XQACD
     && TS02W02.XPGCD[TS02WCPX] == TS02W01.XPGCD
     && TS02W02.XUMCD[TS02WCPX] == TS02W01.XUMCD
     && TS02W02.XOWCD[TS02WCPX] == TS02W01.XOWCD)

        /* **--------------------------------------------------------*/
        /* **  Get totals from CPLHD01 D.B.*/
        /* **--------------------------------------------------------*/


      TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
      TSIREC.TSIPLNBR = TS02W02.TSIPLNBR[TS02WCPX];

      TS02-01610(); /* Select (SA) unique VCPLHD01*/

        /* **--------------------------------------------------------*/
        /* **  Move data to gpc-cpl array*/
        /* **--------------------------------------------------------*/

      TS02-01620(); /* ===> move data to gpc-cpl array*/

      /* ------------------------------------------------------------*/
       /* Increment the indexes*/
      /* ------------------------------------------------------------*/

      TS02W01.TS02WGCX = TS02W01.TS02WGCX + 1;
      TS02W01.TS02WCPX = TS02W01.TS02WCPX + 1;

    end

  end /* ===> GPC check*/

  TS02W01.TS02WCPX = TS02W01.TS02WCPX - 1; /* ===> decr cpl index*/


   /* **                                                        ***/
   /* ********************** End of TS02-01600 ********************/
end // end TS02-01600

// Select (SA) unique    VCPLHD01
Function TS02-01610()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT THE PACKING LIST ROW*/
   /*  */
   /* 1) Select the container packing list row to get all the*/
   /* fields.*/
   /*  */
   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "SA"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/

    /* ==== NEXT SENTENCE =========>*/

  else

    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen map 1*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-01610"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-01610"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-01610 ********************/
end // end TS02-01610

// Move data to GPC-CPL array
Function TS02-01620()
   /* *************************************************************/

                  /* MOVE DATA TO GPC-CPL ARRAY*/

       /* 1) Save the totals*/

       /* 2) Move data to the TS02W03 GPC-CPL-TBL array to*/
          /* which was sourced by database reads driven by*/
          /* the TS02W02 CPL-TBL array.*/

   /* *************************************************************/

   /* ---> totals obtained from process TS02S0J*/
  TS02W01.TS02WGST = TS02W01.TS02WGST + TSIREC.TSISHPQT;
  TS02W01.TS02WGCT = TS02W01.TS02WGCT + TSIREC.TSICRTQT;

  TS02W03.TSFSHPID[TS02WGCX] = TSIREC.TSFSHPID;
  TS02W03.TSIPLNBR[TS02WGCX] = TSIREC.TSIPLNBR;
  TS02W03.PC3PONBR[TS02WGCX] = TSIREC.PC3PONBR;
  TS02W03.PC2CUXID[TS02WGCX] = TSIREC.PC2CUXID;
  TS02W03.SY1STNBR[TS02WGCX] = TSIREC.SY1STNBR;
  TS02W03.SY2CLRID[TS02WGCX] = TSIREC.SY2CLRID;
  TS02W03.TSISTAT[TS02WGCX] = TSIREC.TSISTAT;
  TS02W03.XDMCD[TS02WGCX] = TSIREC.XDMCD;
  TS02W03.PC2INSEG[TS02WGCX] = TSIREC.PC2INSEG;
  TS02W03.XQACD[TS02WGCX] = TSIREC.XQACD;
  TS02W03.XPGCD[TS02WGCX] = TSIREC.XPGCD;
  TS02W03.XOWCD[TS02WGCX] = TSIREC.XOWCD;
  TS02W03.XUMCD[TS02WGCX] = TSIREC.XUMCD;
  TS02W03.OP1CUOID[TS02WGCX] = TSIREC.OP1CUOID;
  TS02W03.OP1NORID[TS02WGCX] = TSIREC.OP1NORID;
  TS02W03.TSIDETFL[TS02WGCX] = TSIREC.TSIDETFL;
  TS02W03.FY1FCTYC[TS02WGCX] = TSIREC.FY1FCTYC;
  TS02W03.TSPFCIVC[TS02WGCX] = TSIREC.TSPFCIVC;
  TS02W03.TSPFILE[TS02WGCX] = TSIREC.TSPFILE;
  TS02W03.TSILOCR[TS02WGCX] = TSIREC.TSILOCR;
  TS02W03.TSIMSCFL[TS02WGCX] = TSIREC.TSIMSCFL;
  TS02W03.TSIMSCGR[TS02WGCX] = TSIREC.TSIMSCGR;
  TS02W03.TSRTEXT[TS02WGCX] = TSIREC.TSRTEXT;
  TS02W03.XRECD[TS02WGCX] = TSIREC.XRECD;
  TS02W03.ZZZCHGCT[TS02WGCX] = TSIREC.ZZZCHGCT;
  TS02W03.TS02WAFL[TS02WGCX] = "N";

   /* -------------------------------------------------*/
    /* Record the containers associated with the*/
    /* current gpc-cpl packing list.*/
   /* -------------------------------------------------*/

  TS02W03.TSHNKCN1[TS02WGCX] = TSIREC.TSHNKCN1;
  TS02W03.TSHNKCN2[TS02WGCX] = TSIREC.TSHNKCN2;
  TS02W03.TSHNKCN3[TS02WGCX] = TSIREC.TSHNKCN3;
  TS02W03.TSHNKCN4[TS02WGCX] = TSIREC.TSHNKCN4;
  TS02W03.TSHNKCN5[TS02WGCX] = TSIREC.TSHNKCN5;
  TS02W03.TSHNKCN6[TS02WGCX] = TSIREC.TSHNKCN6;
  TS02W03.TSHNKCN7[TS02WGCX] = TSIREC.TSHNKCN7;
  TS02W03.TSHNKCN8[TS02WGCX] = TSIREC.TSHNKCN8;

   /* **                                                        ***/
   /* ********************** End of TS02-01620 ********************/
end // end TS02-01620

// --->Init containers array
Function TS02-02000()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN THE UPDATE DATA*/
   /*  */
   /* If one of the gpc-cpl rows is in more than one*/
   /* container*/
   /* a. place all valid containers into the container*/
   /* display array.*/
   /* b. Select the set of cartons for the update into the*/
   /* carton array.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /* -------------------------------------------------------*/
    /* Record all the cntnrs to display for the total number*/
      /* of CPL's in the GPC-CPL array and select the set of*/
      /* cartons associated with them.*/
   /* -------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
  )
    TS02W01.TS02WGCX = 1; /* Init GPC-CPL  index*/

    TS02-02100(); /* record all cntnrs to display*/

    TS02-02200(); /* select the set of cartons*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02000 ********************/
end // end TS02-02000

// Record all cntnrs to display
Function TS02-02100()
   /* ------------------------------------------------------------*/
   /*  */
   /* RECORD ALL CONTAINERS TO DISPLAY*/
   /*  */
   /* 1) Loop through all records in the gpc-cpl array*/
   /* and indicate the existence of each unique*/
   /* container to be displayed in the container assignment*/
   /* map*/
   /*  */
   /* ------------------------------------------------------------*/


  move 0 to TS02W01.TSHNKCN[1] for all; /* ===> clear cntnr display array*/

  TS02W01.TS02WSCC = 0; /* ===> initialize cntnr count save*/
                                   /* number*/

  TS02W01.TS02WGCX = 1; /* ===> set gpc-cpl index*/

  while (TS02W01.TS02WGCX <= TS02W01.TS02WMGC /* ===> while le max*/
   && TS02W03.TSIPLNBR[TS02WGCX] > 0) /* ===> and data exists*/

    TS02W01.TS02WIX1 = 1; /* ===> set index*/

    while (TS02W01.TS02WIX1 <= 8) /* ===> while not over max*/

      TS02-02110(); /* ===> get container*/

      /* ---> TS02W01.TS02WWK1 now hold current container;*/

      if (TS02W01.TS02WWK1 in TS02W01.TSHNKCN) /* ===> if recorded*/

        /* ====== NEXT SENTENCE =======>*/

      else

        if (0 in TS02W01.TSHNKCN) /* ===> Find first empty space*/

          TS02W01.TS02WWK7 = sysVar.arrayIndex; /* ===> Save relative position*/

          /* --------------------------------------------------------*/
           /* If coming from container review, then only record the*/
           /* existence of those containers that are in the pass array.*/
          /* --------------------------------------------------------*/

          if (TSWREC.TSWFRAPP == "TS0Y") /* ===> If coming from cntnr rev*/

            TS02-02120(); /* ===> process container review logic*/

          else /* ===> NOT coming from cntnr rev*/

            /* ===> record & increment save cnt*/
                 /* ---------------------------*/
            TS02W01.TSHNKCN[TS02WWK7] = TS02W01.TS02WWK1;
            TS02W01.TS02WSCC = TS02W01.TS02WSCC + 1;

          end

        end /* ===> Find first empty space*/

      end /* ===> if recorded*/

      TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> increment*/

    end

    TS02W01.TS02WGCX = TS02W01.TS02WGCX + 1; /* ===> increment*/

  end

   /* --------------------------------------------------------*/
   /* *     Sort the container number array in ascending order*/
   /* using insertion sort.*/
   /* --------------------------------------------------------*/

  TS02W01.TS02WIX1 = 2; /* ===> set index*/

  while (TS02W01.TS02WIX1 <= 8 /* ===> while not over max*/
   && TS02W01.TSHNKCN[TS02WIX1] > 0) /* ===> and values exist*/

    TS02W01.TS02WIX2 = TS02W01.TSHNKCN[TS02WIX1];
    TS02W01.TS02WIX3 = TS02W01.TS02WIX1 - 1;

    while (TS02W01.TS02WIX3 >= 1
     && TS02W01.TS02WIX2 <= TS02W01.TSHNKCN[TS02WIX3])

      TS02W01.TS02WWK1 = TS02W01.TS02WIX3 + 1;
      TS02W01.TSHNKCN[TS02WWK1] = TS02W01.TSHNKCN[TS02WIX3];
      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1; /* ===> decrement*/

    end

    TS02W01.TS02WWK1 = TS02W01.TS02WIX3 + 1;
    TS02W01.TSHNKCN[TS02WWK1] = TS02W01.TS02WIX2;
    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> increment*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-02100 ********************/
end // end TS02-02100

// get container in GPC-CPL array
Function TS02-02110()
   /* ------------------------------------------------------------*/

     /* get the appropriate nike container number loaded into*/
     /* w.s. for further processing of all the GPC-CPL array*/
   /* ------------------------------------------------------------*/


  if (TS02W01.TS02WIX1 == 1) /* ===> container position*/

    TS02W01.TS02WWK1 = TS02W03.TSHNKCN1[TS02WGCX];

  else

    if (TS02W01.TS02WIX1 == 2) /* ===> container position*/

      TS02W01.TS02WWK1 = TS02W03.TSHNKCN2[TS02WGCX];

    else

      if (TS02W01.TS02WIX1 == 3) /* ===> container position*/

        TS02W01.TS02WWK1 = TS02W03.TSHNKCN3[TS02WGCX];

      else

        if (TS02W01.TS02WIX1 == 4) /* ===> container position*/

          TS02W01.TS02WWK1 = TS02W03.TSHNKCN4[TS02WGCX];

        else

          if (TS02W01.TS02WIX1 == 5) /* ===> container position*/

            TS02W01.TS02WWK1 = TS02W03.TSHNKCN5[TS02WGCX];

          else

            if (TS02W01.TS02WIX1 == 6) /* ===> container position*/

              TS02W01.TS02WWK1 = TS02W03.TSHNKCN6[TS02WGCX];

            else

              if (TS02W01.TS02WIX1 == 7) /* ===> container position*/

                TS02W01.TS02WWK1 = TS02W03.TSHNKCN7[TS02WGCX];

              else

                if (TS02W01.TS02WIX1 == 8) /* ===> container position*/

                  TS02W01.TS02WWK1 = TS02W03.TSHNKCN8[TS02WGCX];

                end

              end

            end

          end

        end

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS02-02110 ********************/
end // end TS02-02110

// load container for TS0Y Logic
Function TS02-02120()
   /* --------------------------------------------------------*/
   /* If coming from container review, then only record the*/
   /* existence of those containers that are in the pass array.*/
   /* --------------------------------------------------------*/


  TS02W01.TS02WIX3 = 1; /* ===> set index*/

  while (TS02W01.TS02WIX3 <= 10 /* ===> until end of array*/
   && TSWREC.TSW2SHP[TS02WIX3] > 0) /* ===> and data exists*/

    if (TSWREC.TSWNKCTN[TS02WIX3] == TS02W01.TS02WWK1)
      if (TSWREC.TSWPLNBR[TS02WIX3] in TS02W03.TSIPLNBR)
        TS02W01.TSHNKCN[TS02WWK7] = TS02W01.TS02WWK1;
        TS02W01.TS02WSCC = TS02W01.TS02WSCC + 1;
      end
    end
    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;
  end



   /* **                                                        ***/
   /* ********************** End of TS02-02120 ********************/
end // end TS02-02120

// Select/save orig carton set
Function TS02-02200()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT SET OF CARTONS*/
   /*  */
   /* 1) While the select, fetch, close process*/
   /* a) Select the set of cpl rows for this shipment*/
   /* b) Fetch each row and save it in working storage 02.*/
   /* c) Close the selected set of rows.*/
   /*  */
   /* ------------------------------------------------------------*/

  set TS02W07 empty; /* ===> Clear carton original table*/

  TS02W01.TS02WCDX = 1; /* ===> reset cplit index*/
  TS02W01.TS02WGCX = 1; /* ===> set gpc-cpl index*/
  TS02W01.TS02WSCR = 0; /* ===> total # of cartons to assign*/

  while (TS02W01.TS02WGCX <= TS02W01.TS02WMGC /* ===> while le max*/
   && TS02W03.TSIPLNBR[TS02WGCX] > 0) /* ===> and data exists*/

    TS02-02210(); /* ===> Select (S2) set  VCPLIT01*/

    TS02W01.TS02WSWC = "N"; /* ===> initialize end of set flag*/

    TS02-02220(); /* ===> Fetch  (N2) next  VCPLIT01*/
    /* -------> Prime Read*/
             /* ------------*/

    while (TS02W01.TS02WSWC == "N" /* ===> while not end of set*/
     && TS02W01.TS02WCDX <= TS02W01.TS02WMCR) /* ===> and le max cartons*/


      if (TSOREC.TSOFRCRT > 0
       && TSOREC.TSOTOCRT == 0)

        TSOREC.TSOTOCRT = TSOREC.TSOFRCRT;

      end

        /* **------------------------------------------***/
        /* ** Move the TSOREC fields to working storage.*/
        /* **------------------------------------------***/

      TS02W07.TSOGROUP[TS02WCDX] = TSOREC.TSOGROUP;

        /* **------------------------------------------***/
        /* ** calculate the quantities per carton*/
        /* **------------------------------------------***/

      TS02W01.TS02WWK1 = TSOREC.TSOTOCRT - TSOREC.TSOFRCRT + 1;

      TS02W07.TS02WQPC[TS02WCDX] = TSOREC.TSOSHPQT / TS02W01.TS02WWK1;


      TS02W01.TS02WCDX = TS02W01.TS02WCDX + 1; /* ===> increment cplit*/


      TS02-02220(); /* ===> Fetch  (N2) next  VCPLIT01*/
      /* -------> Driving Read*/
               /* ------------*/

    end

    TS02-02230(); /* ===> Close  (C2) set  VCPLIT01*/

    TS02W01.TS02WGCX = TS02W01.TS02WGCX + 1; /* ===> increment*/

  end

  TS02W01.TS02WCDX = 1; /* ===> reset cplit index*/


   /* **                                                        ***/
   /* ********************** End of TS02-02200 ********************/
end // end TS02-02200

// Select (S2) set       VCPLIT01
Function TS02-02210()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPLIT TABLE ROWS*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TSWREC.TSFSHPID; /* move in id*/
  TSOREC.TSIPLNBR = TS02W03.TSIPLNBR[TS02WGCX];

  call "IO2580" ("S2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-02210"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-02210"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-02210 ********************/
end // end TS02-02210

// Fetch  (N2) next      VCPLIT01
Function TS02-02220()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPLIT TABLE ROW*/

      /* Fetch the next row from the selected set of rows,*/

   /* ------------------------------------------------------------*/


  call "IO2580" ("N2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* ===> Select table set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* ===> End of selected set*/
    TS02W01.TS02WSWC = "Y"; /* ===> end of set found*/
  else

    if (SQLCA.VAGen_SQLCODE != 0) /* ===> unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
        converseLib.validationFailed(11); /* ===> Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
      else
        converseLib.validationFailed(10); /* ===> Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* ===> Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
      TA1REC.TA1PGMNM = "2-02220"; /* ===> Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW"; /* ===>*/
      TA1REC.TA1MAP = "TS02M001"; /* ===> Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* ===> Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* ===> Error diag routine*/

      TS02M001.XXXPRCNM = "2-02220"; /* ===> Process name*/

      exit stack; /* ===> exit to re-display the map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS02-02220 ********************/
end // end TS02-02220

// Close  (C2) SET       VCPLIT01
Function TS02-02230()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "2-02230"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-02230"; /* Process name*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-02230 ********************/
end // end TS02-02230

// --->Check origin & set flags
Function TS02-03000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK ORIGIN AND SET FLAGS*/
   /*  */
   /* 1) Select the shipment header for shipment status code.*/
   /* 2) Check the from application to determine the*/
   /* pf3 key set function and the security set up*/
   /* flags.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
  )
   /* ========= NEXT SENTENCE ==========>*/

  else
    exit stack; /* ===> Flow to display error*/

  end
  TS02W01.TS02WCPX = 1; /* ===> init index*/

  TS02-03100(); /* Select shipment status code*/



  if (COMMAREA.CAFROMAP == "TS0V" /* If coming from 'TS0V'*/
   || COMMAREA.CAFROMAP == "TR0D") /* or coming from 'TR0D'*/

    if (TSWREC.TSWFRAPP == "TS0P") /* If coming via from 'TS0P'*/

      /* IF COMMAREA.CAADDFL EQ 'Y';   /* If user has update security*/
       /* AND COMMAREA.CACHGFL EQ 'Y';*/
       /* PERFORM TS02032;            /* Set the flags*/
      /* ELSE;*/

      TS02W01.TS02WOPT = "I"; /* Set option flag to inquiry*/
      TS02M001.TS02MHDG = "INQUIRY"; /* Set map heading*/

      /* END;*/

    else

      if (TSWREC.TSWFRAPP == "TS0U" /* If coming via from 'TS0U'*/
       || TSWREC.TSWFRAPP == "TS0J") /* If coming via from 'TS0J'*/

        TS02W01.TS02WOPT = "A"; /* Set option flag to inquiry*/
        TS02M001.TS02MHDG = "ADD    "; /* Set map heading*/

      else

        if (TSWREC.TSWOPTSW == "M") /* If passed option is "M"*/

          TS02M001.TS02MHDG = "MAINT."; /* Set map heading*/

          if (COMMAREA.CAADDFL == "Y" /* If user has update security*/
           && COMMAREA.CACHGFL == "Y")
            TS02-03200(); /* Set the flags*/
          else
            TS02W01.TS02WOPT = "I"; /* Set option flag to inquiry*/
            TS02M001.TS02MHDG = "INQUIRY"; /* Set map heading*/
          end

        else

          TS02W01.TS02WOPT = "I"; /* Set option flag to inquiry*/
          TS02M001.TS02MHDG = "INQUIRY"; /* Set map heading*/

        end

      end

    end

  else
    if (COMMAREA.CAFROMAP == "TS0Y" /* If coming from 'TS0Y'*/
     || COMMAREA.CAFROMAP == "TS01" /* or coming from 'TS01'*/
     || COMMAREA.CAFROMAP == "TS0P" /* or coming from 'TS0P'*/
     || COMMAREA.CAFROMAP == "TR0D") /* or coming from 'TR0D'*/

      TS02W01.TS02WOPT = "I"; /* Set option flag to inquiry*/
      TS02M001.TS02MHDG = "INQUIRY"; /* Set map heading*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS02-03000 ********************/
end // end TS02-03000

// Select (S ) Unique    VSHPHD01
Function TS02-03100()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT THE SHIPMENT HEADER*/
   /*  */
   /* 1) Select the shipment header in order to get the*/
   /* shipment status code.*/
   /*  */
   /* ------------------------------------------------------------*/


  set TSFREC empty; /* Clear the record*/
  TSFREC.TSFSHPID = TS02W02.TSFSHPID[TS02WCPX];

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Return code ok*/
    /* ======== NEXT SENTENCE ==========>*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* If other than a valid code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "2-03100"; /* Process name*/
      TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW"; /**/
      TA1REC.TA1MAP = "TS02M001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSFREC.TSFKEY; /* Table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS02M001.XXXPRCNM = "2-03100"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end
  end


   /* **                                                        ***/
   /* ********************** End of TS02-03100 ********************/
end // end TS02-03100

// Set flags
Function TS02-03200()
   /* ------------------------------------------------------------*/

                      /* SET THE FLAGS*/

       /* 1) Find the shipment status code in YSSTBL.*/
       /* 2) Set flags accordingly.*/

   /* ------------------------------------------------------------*/


  if (TSFREC.YSSCD in YSSTBL.YSSCD /* If code in table and active*/
   && YSSTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    if (YSSTBL.YSSUPDFL[sysVar.arrayIndex] == "Y") /* If code allows updates*/
      if (TSWREC.TSWFRAPP == "TS0U") /* If detail exists*/
        TS02W01.TS02WOPT = "A"; /* Set option to add*/
        TS02M001.TS02MHDG = "ADD"; /* Set headings*/
      else
        TS02W01.TS02WOPT = "C"; /* Set option to change*/
        TS02M001.TS02MHDG = "CHANGE"; /* Set headings*/
      end
    else
      TS02W01.TS02WOPT = "I"; /* Set option to inquiry*/
      TS02M001.TS02MHDG = "INQUIRY"; /* Set headings*/
    end


  end


   /* **                                                        ***/
   /* ********************** End of TS02-03200 ********************/
end // end TS02-03200

// --->Init compress carton/cntnr
Function TS02-04000()
   /* ------------------------------------------------------------*/
   /*  */
   /* Initialize all compress carton table arrays by using*/
   /* the cartons that were stored in TS02W07.*/
   /*  */
   /* This process will control all lower level process*/
   /* to construct three records/arrays.*/
   /*  */
   /* TS02W23 - A record containing compressed cartons for*/
   /* a single container*/
   /*  */
   /* TS02W24 - A record containing compressed cartons for*/
   /* 1 to 8 possible containers. The containers*/
   /* are carried separately, not compressed.*/
   /*  */
   /* (note: this record will be loaded from TS02W23)*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
  )
   /* ========== NEXT SENTENCE ============>*/

  else
    exit stack; /* ===> Flow to display error*/

  end


  TS02W01.TS02WIXC = 1; /* ===> current container index*/
  TS02W01.TS02WIXW = 1; /* ===> W.S. index for TS02W24 Load*/

  set TS02W24 empty; /* ===> Init TS02W24 record*/

  while (TS02W01.TS02WIXC <= 8
   && TS02W01.TSHNKCN[TS02WIXC] > 0)

    TS02-04100(); /* ===> select the nike container number*/

    TS02-04200(); /* ===> select all the cartons for cntnr*/

    TS02-04300(); /* ===> move data to TS02W24 Record*/

    TS02W01.TS02WIXC = TS02W01.TS02WIXC + 1; /* ===> current container index*/

  end

  TS02W01.TS02WIXC = 1; /* ===> reset current container index*/


   /* **                                                        ***/
   /* ********************** End of TS02-04000 ********************/
end // end TS02-04000

// Select (SA) row       VCNTNR01
Function TS02-04100()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT THE CONTAINER*/
   /*  */
   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = TSWREC.TSFSHPID; /* ===> move in shp id*/

  TSHREC.TSHNKCN = TS02W01.TSHNKCN[TS02WIXC]; /* ===> set cntnr*/


  call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* ===> Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> return code ok*/

    TS02W01.TSHCNTNR[TS02WIXC] = TSHREC.TSHCNTNR;

  else

    if (SQLCA.VAGen_SQLCODE != 100) /* ===> if other than a valid code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
        converseLib.validationFailed(11); /* ===> Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
      else /* ===>*/
        converseLib.validationFailed(10); /* ===> Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* ===> Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
      TA1REC.TA1PGMNM = "2-04100"; /* ===> Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS02M001"; /* ===> Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* ===> Table view name*/
      TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* ===> Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* ===> Error diag routine*/

      TS02M001.XXXPRCNM = "2-04100"; /* ===> Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS02-04100 ********************/
end // end TS02-04100

// Load cartons for a container
Function TS02-04200()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN DATA FOR DISPLAY*/
   /*  */
   /* 1) Cycle through all the cartons in the original carton*/
   /* table that was built from the data in the GPC-CPL*/
   /* packing list array, TS02W03 record.*/
   /*  */
   /* 2) When getting the cartons for a particular container*/
   /* compress the cartons into ranges as they would appear*/
   /* on the map.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  TS02W01.TS02WIX1 = 1; /* ===> Original carton table index*/

  set TS02W23 empty; /* ===> Compressed original carton table*/

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMCR /* ===> While le max cartons*/
   && TS02W07.TSHNKCN[TS02WIX1] > 0) /* ===> and cartons exist in WS07*/

    if (TS02W07.TSHNKCN[TS02WIX1] == TSHREC.TSHNKCN) /* ===> If cntnr same*/

     /* **----------------------------------------------*/
     /* **  accum shipment total for current container*/
     /* **----------------------------------------------*/

      TS02W23.TS02WGST = TS02W23.TS02WGST + TS02W07.TSOSHPQT[TS02WIX1];

     /* **-----------------------------------------------*/
     /* **  Process the container range to compress table*/
     /* **-----------------------------------------------*/

      TS02W01.TS02WIX2 = 1; /* ===> Init compress index*/
      TS02W01.TS02WFL1 = "N"; /* ===> w.s. flag (table entry made)*/

      while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR /* ===> max cartons*/
       && TS02W01.TS02WFL1 == "N") /* ===> w.s. flag (table entry made)*/


        TS02-04210(); /* ===> compress Orig carton range table*/


        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> incr compress index*/

      end

    end /* ===> If cntnr same*/

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> Incr gpc-cpl index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-04200 ********************/
end // end TS02-04200

// Compress range to map format
Function TS02-04210()
   /* ------------------------------------------------------------*/
   /* Compress the cartons into ranges as they would appear*/
   /* on the map.*/
   /*  */
   /* Note:  The new compressed carton table will be built in*/
   /* ascending order.*/
   /*  */
   /* There are three major conditions checks for compression*/
   /*  */
   /* 1.  Original "From" carton range > compress carton range*/
   /*  */
   /* 2.  Original "From" carton range*/
   /* between  compress carton range*/
   /*  */
   /* 3.  Original "From" carton range < compress carton range*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /* **---------------------------------------------------*/
   /* ** Check*/
   /* **   If  end of the new compressed table has been*/
   /* **     reached, then the current carton range from*/
   /* **     the original table did not find a match in the*/
   /* **     new compressed carton table.*/
   /* ***/
   /* **   Therefore, insert the original range to the new*/
   /* **     compressed carton table.*/
   /* **---------------------------------------------------*/
   /*  */

  if (TS02W23.TSOFRCRT[TS02WIX2] == 0 /* ===> End of Orig. carton compress*/
   /* table*/
  )                                  
    TS02W23.TSHNKCN[TS02WIX2] = TS02W07.TSHNKCN[TS02WIX1];
    TS02W23.TSHCNTNR[TS02WIX2] = TS02W01.TSHCNTNR[TS02WIXC];
    TS02W23.TSOFRCRT[TS02WIX2] = TS02W07.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W07.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> Return to previous process*/

  else

    /*  */
    /* **---------------------------------------------------------*/
    /* ** Check*/
    /* **   Original  ("From" carton range - 1)*/
    /* **                            > compress carton range*/
    /* **   - No range compressing necessary*/
    /* **---------------------------------------------------------*/
    /*  */
    TS02W01.TS02WWK4 = TS02W07.TSOFRCRT[TS02WIX1] - 1;

    if (TS02W01.TS02WWK4 > TS02W23.TSOTOCRT[TS02WIX2])

      /* ======== NEXT SENTENCE ========>*/

    else

      /* **---------------------------------------------------------*/
      /* ** Check*/
      /* **   Original "From" carton range*/
      /* **                          >= compress "From" carton range*/
      /* **   Original  ("From" carton range - 1)*/
      /* **                          <= compress "To"   carton range*/
      /* ***/
      /* **---------------------------------------------------------*/

      if (TS02W07.TSOFRCRT[TS02WIX1] >= TS02W23.TSOFRCRT[TS02WIX2]
       && TS02W01.TS02WWK4 <= TS02W23.TSOTOCRT[TS02WIX2])

        TS02-04211(); /* ===> Do compression*/

        return; /* ===> Return to previous process*/


      else

        /* **---------------------------------------------------------*/
        /* ** Check*/
        /* **    Original "From" carton range < compress carton range*/
        /* **---------------------------------------------------------*/

        if (TS02W07.TSOFRCRT[TS02WIX1] < TS02W23.TSOFRCRT[TS02WIX2])

          TS02-04213(); /* ===> Do compression*/

          return; /* ===> Return to previous process*/


        else /* ===> Q/A Problem*/

          /* **---------------------------------------------------------*/
          /* **    This will never happen but put here for Q/A.*/
          /* **---------------------------------------------------------*/

          converseLib.validationFailed(10); /* ===> Indicate system error*/
          TS02M001.XXXPRCNM = "2-04210"; /* ===> module identifier*/

          exit stack; /* ===> Exit to re-display map*/

        end /* ===> Original "From" carton range < compress carton range*/

      end /* ===> Original "From" carton range between compress range*/

    end /* ===> Original  ("From" carton range - 1) > compress range*/

  end /* ===> End of Original carton compress table*/


   /* **                                                        ***/
   /* ********************** End of TS02-04210 ********************/
end // end TS02-04210

// "From"  between  carton range
Function TS02-04211()
   /* ---------------------------------------------------------*/
   /* Original "FROM" carton range*/
   /* between compress carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /* **--------------------------------------------------------*/
   /* ** If the Original "TO" carton range*/
   /* **                            < compress carton range*/
   /* **--------------------------------------------------------*/
   /*  */

  if (TS02W07.TSOTOCRT[TS02WIX1] <= TS02W23.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end


   /* **--------------------------------------------------------*/
   /* ** The orig table "TO" carton > compress table "TO" carton*/
   /* ** and the orig table*/
   /* **    ("TO" carton + 1) < compress table "FROM" carton*/
   /* **   - The original "TO" carton range will now be the*/
   /* **     "TO" carton range for the compressed carton range*/
   /* **      1. Compress range*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W07.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W07.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX2]
   && TS02W01.TS02WWK4 < TS02W23.TSOFRCRT[TS02WIX2])

    TS02W23.TSOTOCRT[TS02WIX2] = TS02W07.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end


   /*  */
   /* **--------------------------------------------------------*/
   /* ** The orig table "TO" carton > compress table "TO" carton*/
   /* ** and the orig table*/
   /* **    ("TO" carton + 1) >= compress table "FROM" carton*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W07.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W07.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX2]
   && TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX2])

    /* **--------------------------------------------------------*/
    /* **   Identify how may ranges the current range spreads*/
    /* **   over so that the compress table can be compressed*/
    /* **--------------------------------------------------------*/
    /*  */

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

    while (TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX3]
     && TS02W23.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end


    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W07.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX3])
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W07.TSOTOCRT[TS02WIX1];
    else
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX3];
    end

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

  end


  TS02-04212(); /* ===> Shift compressed carton ranges*/


   /* **                                                        ***/
   /* ********************** End of TS02-04211 ********************/
end // end TS02-04211

// Shift compress crtn ranges in
Function TS02-04212()
   /* ---------------------------------------------------------*/
   /* Since the new range built could have spread over*/
   /* several ranges. The ranges must be removed from the*/
   /* compress table and the subsequent ranges in the table*/
   /* must be shifted to keep the table in order with no*/
   /* zeroes within the valid list of ranges.*/
   /*  */
   /* ie... if several ranges were merged with range "i"*/
   /* then range shift must occur.*/
   /* where index*/
   /* i = next range not merged.*/
   /* and*/
   /* j = next range after built one*/
   /*  */
   /* i     --> j*/
   /* i + 1 --> j + 1*/
   /* i + 1 --> j + 1*/
   /* i + 1 --> j + 1*/
   /* .   -->   .*/
   /* .   -->   .*/
   /* .   -->   .*/
   /* ----------------------------------------------------------*/
   /*  */

  TS02W01.TS02WIX4 = TS02W01.TS02WIX3 + 1; /* ===> next range not merged*/
  TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ==> next range after built one*/

  if (TS02W01.TS02WIX4 > TS02W01.TS02WIX3) /* ===> range shift required*/

    while (TS02W01.TS02WIX4 <= TS02W01.TS02WMCR
     && TS02W23.TSOFRCRT[TS02WIX4] > 0)

      TS02W23.TSOFRCRT[TS02WIX3] = TS02W23.TSOFRCRT[TS02WIX4];
      TS02W23.TSOTOCRT[TS02WIX3] = TS02W23.TSOTOCRT[TS02WIX4];
      TS02W23.TSHNKCN[TS02WIX3] = TS02W23.TSHNKCN[TS02WIX4];
      TS02W23.TSHCNTNR[TS02WIX3] = TS02W23.TSHCNTNR[TS02WIX4];
      TS02W23.TS02WAFL[TS02WIX3] = TS02W23.TS02WAFL[TS02WIX4];

      TS02W01.TS02WIX4 = TS02W01.TS02WIX4 + 1; /* ===> next compress index*/
      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> next compress index*/

    end

   /*  */
   /* **---------------------------------------------*/
   /* ** Clear the remaining ranges that have already*/
   /* ** been shifted.*/
   /* **---------------------------------------------*/
   /*  */

    while (TS02W01.TS02WIX3 <= TS02W01.TS02WMCR
     && TS02W23.TSOFRCRT[TS02WIX3] > 0)

      TS02W23.TSOFRCRT[TS02WIX3] = 0;
      TS02W23.TSOTOCRT[TS02WIX3] = 0;
      TS02W23.TSHNKCN[TS02WIX3] = 0;
      TS02W23.TSHCNTNR[TS02WIX3] = " ";
      TS02W23.TS02WAFL[TS02WIX3] = " ";

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> next compress index*/

    end

  end /* ===> range shift required*/


   /* **                                                        ***/
   /* ********************** End of TS02-04212 ********************/
end // end TS02-04212

// "From"  <        carton range
Function TS02-04213()
   /* ---------------------------------------------------------*/
   /* Original "FROM" carton range*/
   /* <   compress carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /* **--------------------------------------------------------*/
   /* ** check*/
   /* **   If the Original ("TO" carton range + 1)*/
   /* **                         >= compress carton "FROM" range*/
   /* **   and*/
   /* **      the Original  "TO" carton range*/
   /* **                         <= compress carton "TO" range*/
   /* **--------------------------------------------------------*/

  TS02W01.TS02WWK4 = TS02W07.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX2]
   && TS02W07.TSOTOCRT[TS02WIX1] <= TS02W23.TSOTOCRT[TS02WIX2])

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W07.TSOFRCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /* **--------------------------------------------------------*/
   /* ** check*/
   /* **   If the Original "FROM" carton range*/
   /* **                         < compress carton "TO" range*/
   /* **   and*/
   /* **      the Original ("TO" carton range + 1)*/
   /* **                         < compress carton "FROM" range*/
   /* ***/
   /* **  a new carton range will need to be squeezed into*/
   /* **                      the compress carton range table*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W07.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W07.TSOFRCRT[TS02WIX1] < TS02W23.TSOFRCRT[TS02WIX2]
   && TS02W01.TS02WWK4 < TS02W23.TSOFRCRT[TS02WIX2])

    TS02-04214(); /* ==> shift ranges in compress table out*/
                                   /* for new range*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W07.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W07.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /*  */
   /* **--------------------------------------------------------*/
   /* ** The Original table*/
   /* **     "FROM" carton    <  compress table "FROM" carton*/
   /* ** and the Original table*/
   /* **    ("TO" carton + 1) >= compress table "FROM" carton*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W07.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W07.TSOFRCRT[TS02WIX1] < TS02W23.TSOFRCRT[TS02WIX2]
   && TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX2])

    /* **--------------------------------------------------------*/
    /* **   Identify how may ranges the current range spreads*/
    /* **   over so that the compress table can be compressed*/
    /* **--------------------------------------------------------*/
    /*  */

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

    while (TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX3]
     && TS02W23.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W07.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX3])
      TS02W23.TSOFRCRT[TS02WIX2] = TS02W07.TSOFRCRT[TS02WIX1];
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W07.TSOTOCRT[TS02WIX1];
    else
      TS02W23.TSOFRCRT[TS02WIX2] = TS02W07.TSOFRCRT[TS02WIX1];
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX3];
    end

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

  end


  TS02-04212(); /* ===> Shift compressed carton ranges*/


   /* **                                                        ***/
   /* ********************** End of TS02-04213 ********************/
end // end TS02-04213

// Shift compress crtn ranges out
Function TS02-04214()
   /* ---------------------------------------------------------*/
   /* Make room for the newly created carton range*/
   /* by shifting the compress carton table ranges out*/
   /* one position.*/
   /*  */
   /* ie... find the next available 0 range in the table*/
   /* and start shifting ranges.*/
   /* Where i = next 0 range available*/
   /* until position of newly created range*/
   /* i - 1 --> i*/
   /* i - 2 --> i - 1*/
   /* i - 3 --> i - 3*/
   /* i - 4 --> i - 4*/
   /* .   --> .*/
   /* .   --> .*/
   /* .   --> .*/
   /* --------------------------------------------------------*/
   /*  */

  if (0 in TS02W23.TSOFRCRT)
    TS02W01.TS02WIX4 = sysVar.arrayIndex;
    TS02W01.TS02WIX3 = TS02W01.TS02WIX4 - 1; /* ===> previous compress index*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TS02M001.XXXPRCNM = "2-04214"; /* ===> Compress table is full*/
    exit stack; /* ===> Exit to re-display map*/
  end

  while (TS02W01.TS02WIX3 >= TS02W01.TS02WIX2)
                                   /* ===> range insert position met*/

    TS02W23.TSOFRCRT[TS02WIX4] = TS02W23.TSOFRCRT[TS02WIX3];
    TS02W23.TSOTOCRT[TS02WIX4] = TS02W23.TSOTOCRT[TS02WIX3];
    TS02W23.TSHNKCN[TS02WIX4] = TS02W23.TSHNKCN[TS02WIX3];
    TS02W23.TSHCNTNR[TS02WIX4] = TS02W23.TSHCNTNR[TS02WIX3];
    TS02W23.TS02WAFL[TS02WIX4] = TS02W23.TS02WAFL[TS02WIX3];

    TS02W01.TS02WIX4 = TS02W01.TS02WIX4 - 1; /* ===> next compress index*/
    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1; /* ===> next compress index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-04214 ********************/
end // end TS02-04214

// Move TS02W23 to TS0VW24
Function TS02-04300()
   /* ------------------------------------------------------------*/
   /*  */
   /* Load the TS02W24 record with the TS02W23 record that*/
   /* was just built,  Also save the totals associated with*/
   /* the current container.*/
   /*  */
   /* TS02W24 - A record containing compressed cartons for*/
   /* 1 to 8 possible containers. The containers*/
   /* are carried separately, not compressed.*/
   /*  */
   /* (note: This record will be loaded from TS02W23)*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  TS02W01.TS02WIX1 = 1; /* ===> W.S. index for TS02W23 Load*/

  while (TS02W23.TSHNKCN[TS02WIX1] > 0)

    TS02W24.TSHNKCN[TS02WIXW] = TS02W23.TSHNKCN[TS02WIX1];
    TS02W24.TSHCNTNR[TS02WIXW] = TS02W23.TSHCNTNR[TS02WIX1];
    TS02W24.TSOFRCRT[TS02WIXW] = TS02W23.TSOFRCRT[TS02WIX1];
    TS02W24.TSOTOCRT[TS02WIXW] = TS02W23.TSOTOCRT[TS02WIX1];

    TS02W23.TS02WGCT = TS02W23.TS02WGCT     + TS02W23.TSOTOCRT[TS02WIX1] - TS02W23.TSOFRCRT[TS02WIX1] + 1;
    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1;
    TS02W01.TS02WIXW = TS02W01.TS02WIXW + 1;

  end

   /*  */
   /* **--------------------------------------------------------*/
   /* **   Save the container totals associated*/
   /* **   with the current container*/
   /* **     2. GPC-CPL ship   total count*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W24.TS02WGCT[TS02WIXC] = TS02W23.TS02WGCT;
  TS02W24.TS02WGST[TS02WIXC] = TS02W23.TS02WGST;


   /* **                                                        ***/
   /* ********************** End of TS02-04300 ********************/
end // end TS02-04300

// --->Init compress carton array
Function TS02-05000()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN DATA FOR DISPLAY*/
   /*  */
   /*  */
   /* A. If in an "INQUERY" option*/
   /*  */
   /* 1) Skip building the carton verification table*/
   /*  */
   /* 2) Initialize container index for*/
   /* application mainline process that follows*/
   /*  */
   /* B. If NOT IN an "INQUERY" option*/
   /*  */
   /* 1) Cycle through all the cartons in the original carton*/
   /* table that was built by compressing all the cartons*/
   /* per container.*/
   /*  */
   /* ie.) compress*/
   /* carton ranges/container record array TS02W24*/
   /* to*/
   /* carton ranges           record array TS02W25*/
   /*  */
   /* 2) This new record array will make the carton*/
   /* verification more efficient.*/
   /*  */
   /* 3) count the total cartons*/
   /*  */
   /* 4) Initialize container index for*/
   /* application mainline process that follows*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  if (converseVar.validationMsgNum == 0
  )
   /* ========  NEXT SENTENCE =============>*/

  else
    exit stack; /* ===> Flow to display error*/

  end
  if (TS02W01.TS02WOPT == "I")

    TS02W01.TS02WIXC = 1; /* ===> Container array index*/

    exit stack; /* ===> Flow to Mainline processing*/

  end
  TS02W01.TS02WIX1 = 1; /* ===> Original carton table index*/

  set TS02W25 empty; /* ===> Compressed original carton table*/

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMCR /* ===> While le max cartons*/
   && TS02W24.TSHNKCN[TS02WIX1] > 0) /* ===> and cartons exist in WS24*/

    TS02W01.TS02WIX2 = 1; /* ===> Init compress index*/
    TS02W01.TS02WFL1 = "N"; /* ===> w.s. flag (table entry made)*/


    while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR /* ===> Max entries*/
     && TS02W01.TS02WFL1 == "N") /* ===> w.s. flag (table entry made)*/


      TS02-05100(); /* ===> compress Orig carton range table*/


      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> incr compress index*/

    end

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> Incr gpc-cpl index*/

  end /* ===> more entrys to process*/

   /* **-------------------------------------------*/
   /* ** Count the cartons the ranges*/
   /* **-------------------------------------------*/
   /*  */
  TS02W01.TS02WIX1 = 1; /* ===> Original carton table index*/

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMCR /* ===> While le max cartons*/
   && TS02W25.TSOFRCRT[TS02WIX1] > 0) /* ===> and cartons exist in WS25*/

    TS02W25.TS02WGCT = TS02W25.TS02WGCT     + TS02W25.TSOTOCRT[TS02WIX1] - TS02W25.TSOFRCRT[TS02WIX1] + 1;
    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> Incr gpc-cpl index*/

  end /* ===> more entrys to process*/

   /*  */
   /* **-------------------------------------------*/
   /* ** Initialize container index for*/
   /* ** application mainline process that follows*/
   /* **-------------------------------------------*/
   /*  */
  TS02W01.TS02WIXC = 1; /* ===> Container array index*/


   /* **                                                        ***/
   /* ********************** End of TS02-05000 ********************/
end // end TS02-05000

// Compress range to map format
Function TS02-05100()
   /* ------------------------------------------------------------*/
   /* Compress the cartons into ranges as they would appear*/
   /* if all containers were cobined on one screen.*/
   /*  */
   /* Note:  The new compressed carton table will built in*/
   /* ascending order.*/
   /*  */
   /* There are three major conditions checks for compression*/
   /*  */
   /* 1.  Original "From" carton range > compress carton range*/
   /*  */
   /* 2.  Original "From" carton range*/
   /* /* between  compress carton range*/
   /*  */
   /* 3.  Original "From" carton range < compress carton range*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /* **---------------------------------------------------*/
   /* ** Check*/
   /* **   If  end of the new compressed table has been*/
   /* **     reached, then the current carton range from*/
   /* **     the original table did not find a match in the*/
   /* **     new compressed carton table.*/
   /* ***/
   /* **   Therefore, insert the original range to the new*/
   /* **     compressed carton table.*/
   /* **---------------------------------------------------*/
   /*  */

  if (TS02W25.TSOFRCRT[TS02WIX2] == 0 /* ===> End of Orig. carton compress*/
   /* table*/
  )                                  
    TS02W25.TSOFRCRT[TS02WIX2] = TS02W24.TSOFRCRT[TS02WIX1];
    TS02W25.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> Return to previous process*/

  else

    /* **---------------------------------------------------------*/
    /* ** Check*/
    /* **   Original  ("From" carton range - 1)*/
    /* **                            > compress carton range*/
    /* **   - No range compressing necessary*/
    /* **---------------------------------------------------------*/

    TS02W01.TS02WWK4 = TS02W24.TSOFRCRT[TS02WIX1] - 1;

    if (TS02W01.TS02WWK4 > TS02W25.TSOTOCRT[TS02WIX2])

      /* ======== NEXT SENTENCE ========>*/

    else

      /* **---------------------------------------------------------*/
      /* ** Check*/
      /* **   Original "From" carton range*/
      /* **                          >= compress "From" carton range*/
      /* **   Original  ("From" carton range - 1)*/
      /* **                          <= compress "From" carton range*/
      /* ***/
      /* **---------------------------------------------------------*/

      if (TS02W24.TSOFRCRT[TS02WIX1] >= TS02W25.TSOFRCRT[TS02WIX2]
       && TS02W01.TS02WWK4 <= TS02W25.TSOTOCRT[TS02WIX2])

        TS02-05110(); /* ===> Do compression*/

        return; /* ===> Return to previous process*/


      else

        /* **---------------------------------------------------------*/
        /* ** Check*/
        /* **    Original "From" carton range < compress carton range*/
        /* **---------------------------------------------------------*/

        if (TS02W24.TSOFRCRT[TS02WIX1] < TS02W25.TSOFRCRT[TS02WIX2])

          TS02-05120(); /* ===> Do compression*/

          return; /* ===> Return to previous process*/


        else /* ===> Q/A Problem*/

          /* **---------------------------------------------------------*/
          /* **    This will never happen but put here for Q/A.*/
          /* **---------------------------------------------------------*/

          converseLib.validationFailed(10); /* ===> Indicate system error*/
          TS02M001.XXXPRCNM = "2-05100"; /* ===> module identifier*/

          exit stack; /* ===> Exit to re-display map*/

        end /* ===> Original "From" carton range <*/
                                   /* compress carton range*/

      end /* ===> Original "From" carton range*/
                                   /* between compress range*/

    end /* ===> Original  ("From" carton range -*/
                                   /* 1) > compress range*/

  end /* ===> End of Original carton compress table*/


   /* **                                                        ***/
   /* ********************** End of TS02-05100 ********************/
end // end TS02-05100

// "From"  between  carton range
Function TS02-05110()
   /* ---------------------------------------------------------*/
   /* Original "FROM" carton range*/
   /* between compress carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /* **--------------------------------------------------------*/
   /* ** If the Original "TO" carton range*/
   /* **                          <= compress 'TO' carton range*/
   /* **   there is no range to adjust original range falls*/
   /* **   within new table range.*/
   /* **--------------------------------------------------------*/
   /*  */
  if (TS02W24.TSOTOCRT[TS02WIX1] <= TS02W25.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /*  */
   /* **--------------------------------------------------------*/
   /* ** The Orig table "TO" carton > compress table "TO" carton*/
   /* ** and the Orig table*/
   /* **    ("TO" carton + 1) < compress table "FROM" carton*/
   /* **   - The Original "TO" carton range will now be the*/
   /* **     "TO" carton range for the compressed carton range*/
   /* **      1. Compress range*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W24.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W24.TSOTOCRT[TS02WIX1] > TS02W25.TSOTOCRT[TS02WIX2]
   && TS02W01.TS02WWK4 < TS02W25.TSOFRCRT[TS02WIX2])

    TS02W25.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX1];
    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /*  */
   /* **--------------------------------------------------------*/
   /* ** The orig table "TO" carton > compress table "TO" carton*/
   /* ** and the Orig table*/
   /* **    ("TO" carton + 1) >= compress table "FROM" carton*/
   /* **--------------------------------------------------------*/

  TS02W01.TS02WWK4 = TS02W24.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W24.TSOTOCRT[TS02WIX1] > TS02W25.TSOTOCRT[TS02WIX2]
   && TS02W01.TS02WWK4 >= TS02W25.TSOFRCRT[TS02WIX2])


    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

    /*  */
    /* **--------------------------------------------------------*/
    /* **   Identify how may ranges the current range spreads*/
    /* **   over so that the compress table can be compressed*/
    /* **--------------------------------------------------------*/
    /*  */

    while (TS02W01.TS02WWK4 >= TS02W25.TSOFRCRT[TS02WIX3]
     && TS02W25.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W24.TSOTOCRT[TS02WIX1] > TS02W25.TSOTOCRT[TS02WIX3])
      TS02W25.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX1];
    else
      TS02W25.TSOTOCRT[TS02WIX2] = TS02W25.TSOTOCRT[TS02WIX3];
    end

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

  end

  TS02-05111(); /* ===> shift the compress ranges*/

   /* **                                                        ***/
   /* ********************** End of TS02-05110 ********************/
end // end TS02-05110

// Shift compress crtn ranges in
Function TS02-05111()
   /* ---------------------------------------------------------*/
   /* Since the new range built could have spread over*/
   /* several ranges. The ranges must be removed from the*/
   /* compress table and the subsequent ranges in the table*/
   /* must be shifted to keep the table in order with no*/
   /* zeroes within the valid list of ranges.*/
   /*  */
   /* ie... if several ranges were merged with range "i"*/
   /* then range shift must occur.*/
   /* where index*/
   /* i = next range not merged.*/
   /* and*/
   /* j = next range after built one*/
   /*  */
   /* i     --> j*/
   /* i + 1 --> j + 1*/
   /* i + 1 --> j + 1*/
   /* i + 1 --> j + 1*/
   /* .   -->   .*/
   /* .   -->   .*/
   /* .   -->   .*/
   /* ----------------------------------------------------------*/
   /*  */

  TS02W01.TS02WIX4 = TS02W01.TS02WIX3 + 1; /* ===> next range not merged*/
  TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1;
                                   /* ===> next range after built one*/

  while (TS02W01.TS02WIX4 <= TS02W01.TS02WMCR
   && TS02W25.TSOFRCRT[TS02WIX4] > 0)

    TS02W25.TSOFRCRT[TS02WIX3] = TS02W25.TSOFRCRT[TS02WIX4];
    TS02W25.TSOTOCRT[TS02WIX3] = TS02W25.TSOTOCRT[TS02WIX4];

    TS02W01.TS02WIX4 = TS02W01.TS02WIX4 + 1; /* ===> next compress index*/
    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> next compress index*/

  end

   /* **---------------------------------------------*/
   /* ** Clear the remaining ranges that have already*/
   /* ** been shifted.*/
   /* **---------------------------------------------*/
   /*  */
  while (TS02W01.TS02WIX3 <= TS02W01.TS02WMCR
   && TS02W25.TSOFRCRT[TS02WIX3] > 0)

    TS02W25.TSOFRCRT[TS02WIX3] = 0;
    TS02W25.TSOTOCRT[TS02WIX3] = 0;

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> next compress index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-05111 ********************/
end // end TS02-05111

// "From"  <        carton range
Function TS02-05120()
   /* ---------------------------------------------------------*/
   /* Original "FROM" carton range*/
   /* <   compress carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /* **--------------------------------------------------------*/
   /* ** check*/
   /* **   If the Original ("TO" carton range + 1)*/
   /* **                         >= compress carton "FROM" range*/
   /* **   and*/
   /* **      the Original  "TO" carton range*/
   /* **                         <= compress carton "TO" range*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W24.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W01.TS02WWK4 >= TS02W25.TSOFRCRT[TS02WIX2]
   && TS02W24.TSOTOCRT[TS02WIX1] <= TS02W25.TSOTOCRT[TS02WIX2])

    TS02W25.TSOFRCRT[TS02WIX2] = TS02W24.TSOFRCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /*  */
   /* **--------------------------------------------------------*/
   /* ** check*/
   /* **   If the Original "FROM" carton range*/
   /* **                         < compress carton "TO" range*/
   /* **   and*/
   /* **      the Original ("TO" carton range + 1)*/
   /* **                         < compress carton "FROM" range*/
   /* ***/
   /* **  a new carton range will need to be squeezed into*/
   /* **                      the compress carton range table*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W24.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W24.TSOFRCRT[TS02WIX1] < TS02W25.TSOFRCRT[TS02WIX2]
   && TS02W01.TS02WWK4 < TS02W25.TSOFRCRT[TS02WIX2])

    TS02-05121(); /* ===> shift ranges in compress table*/
                                   /* out for new range*/

    TS02W25.TSOFRCRT[TS02WIX2] = TS02W24.TSOFRCRT[TS02WIX1];
    TS02W25.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end


   /*  */
   /* **--------------------------------------------------------*/
   /* ** The Original table*/
   /* **     "FROM" carton    <  compress table "FROM" carton*/
   /* ** and the Original table*/
   /* **    ("TO" carton + 1) >= compress table "FROM" carton*/
   /* **--------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W24.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W24.TSOFRCRT[TS02WIX1] < TS02W25.TSOFRCRT[TS02WIX2]
   && TS02W01.TS02WWK4 >= TS02W25.TSOFRCRT[TS02WIX2])

    /*  */
    /* **--------------------------------------------------------*/
    /* **   Identify how may ranges the current range spreads*/
    /* **   over so that the compress table can be compressed*/
    /* **--------------------------------------------------------*/
    /*  */

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

    while (TS02W01.TS02WWK4 >= TS02W25.TSOFRCRT[TS02WIX3]
     && TS02W25.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W24.TSOTOCRT[TS02WIX1] > TS02W25.TSOTOCRT[TS02WIX3])
      TS02W25.TSOFRCRT[TS02WIX2] = TS02W24.TSOFRCRT[TS02WIX1];
      TS02W25.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX1];
    else
      TS02W25.TSOFRCRT[TS02WIX2] = TS02W24.TSOFRCRT[TS02WIX1];
      TS02W25.TSOTOCRT[TS02WIX2] = TS02W25.TSOTOCRT[TS02WIX3];
    end

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

  end


  TS02-05111(); /* ===> Shift compressed carton ranges*/


   /* **                                                        ***/
   /* ********************** End of TS02-05120 ********************/
end // end TS02-05120

// Shift compress crtn ranges out
Function TS02-05121()
   /* ---------------------------------------------------------*/
   /* Make room for the newly created carton range*/
   /* by shifting the compress carton table ranges out*/
   /* one position.*/
   /*  */
   /* ie... find the next available 0 range in the table*/
   /* and start shifting ranges.*/
   /* Where i = next 0 range available*/
   /* until position of newly created range*/
   /* i - 1 --> i*/
   /* i - 2 --> i - 1*/
   /* i - 3 --> i - 3*/
   /* i - 4 --> i - 4*/
   /* .   --> .*/
   /* .   --> .*/
   /* .   --> .*/
   /* --------------------------------------------------------*/
   /*  */

  if (0 in TS02W25.TSOFRCRT)
    TS02W01.TS02WIX4 = sysVar.arrayIndex;
    TS02W01.TS02WIX3 = TS02W01.TS02WIX4 - 1; /* ===> previous compress index*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TS02M001.XXXPRCNM = "TS02057"; /* ===> Compress table is full*/
    exit stack; /* ===> Exit to re-display map*/
  end

  while (TS02W01.TS02WIX3 >= TS02W01.TS02WIX2)
                                   /* ===> range insert position met*/

    TS02W25.TSOFRCRT[TS02WIX4] = TS02W25.TSOFRCRT[TS02WIX3];
    TS02W25.TSOTOCRT[TS02WIX4] = TS02W25.TSOTOCRT[TS02WIX3];

    TS02W01.TS02WIX4 = TS02W01.TS02WIX4 - 1; /* ===> next compress index*/
    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1; /* ===> next compress index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-05121 ********************/
end // end TS02-05121

// ===>Mainline TS02 Application
Function TS02-06000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, indicate error and exit to Master Menu.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (TS02W01.TS02WMAP == "1") /* Map 1 was requested*/

    TS02-00001(); /* Display map 1*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "2-06000"; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = TS02W01.TS02WMAP; /* Map name*/
    SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";
    TS02M001.XXXPRCNM = "2-06000"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    XSPF4(); /* Exit to Master Menu*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-06000 ********************/
end // end TS02-06000

// --->Obtain data to display
Function TS02-10000()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN THE DATA TO DISPLAY*/
   /*  */
   /* The TS02W23 will be loaded from the carton/container*/
   /* array, TS02W24, containing all GPC-CPL carton ranges*/
   /* per container and in compressed map format.*/
   /*  */
   /* The only exception for loading the TS02W23 record is*/
   /* when it is the last container and application is in*/
   /* a maintanence/add mode.  In this case, the TS0W23*/
   /* carton container array record will be loaded in*/
   /* in TS02-66000 by gathering all the un-assigned carton*/
   /* and compressing ranges to a map format.*/
   /* ------------------------------------------------------------*/
   /*  */

  if (TS02W01.TS02WIXC < TS02W01.TS02WSCC /* ===> last container*/
   || TS02W01.TS02WOPT == "I")            /* ===> inquery option*/

    TS02-11000(); /* ===> Load cartons into W.S. (TS02W24*/
                                   /* --> TS02W23)*/

  end

  TS02-12000(); /* ===> Obtain po id and type for screen*/

  TS02-13000(); /* ===> Get style short name*/

     /* **-------------------------------------------------------*/
     /* **  Since all the carton ranges have been compressed*/
     /* **  and are in the W.S. record TS02W23,*/
     /* **  load them into T.S. for map scrolling purposes.*/
     /* **-------------------------------------------------------*/


     /* **-------------------------------------------------------*/
     /* ** Establish the temporary storage queue page length.*/
     /* **-------------------------------------------------------*/

  TS02W01.XXXTSLEN = 264; /* Temporary storage page length*/
   /* ==> (11 rows * 4 bytes * 6 distinct carton number on each row)*/

     /* **-------------------------------------------------------*/
     /* ** Purge any existing pages from the temp. storage queue.*/
     /* **-------------------------------------------------------*/

  set TS02W05 empty; /* ===> Set temp storage record empty*/
  TS02W01.TS02WIX1 = 1; /* ===> Set temp storage index*/
  TS02W01.TS02WIX2 = 1; /* ===> Set map index*/

  TS02S-TS-1(); /* ===> Purge Temp. Storage*/

  while (TS02W23.TSOFRCRT[TS02WIX2] > 0)
                                   /* ===> data exists in compress table*/

    if (TS02W01.TS02WIX1 > 33) /* ===> T.S. Page full*/

      TS02S-TS-2(); /* ===> Add page to temporary storage*/

    end /* ===> T.S. page full*/

     /* **------------------------------------*/
     /* ** Move records to map working storage*/
     /* **------------------------------------*/

    TS02W05.TSOFRCRT[TS02WIX1] = TS02W23.TSOFRCRT[TS02WIX2];
    TS02W05.TSOTOCRT[TS02WIX1] = TS02W23.TSOTOCRT[TS02WIX2];


    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> Incr gpc-cpl index*/
    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> Incr map index*/

  end /* ===> While more ranges in compress*/
                                   /* table*/

   /* ** ----------------------------------------------------------*/
   /* ** Add any partially formatted last page to the queue.*/
   /* ** ----------------------------------------------------------*/

  if (TS02W01.TS02WIX2 > 1 /* ===> Page was formatted*/
   || TS02W01.TS02WOPT == "A") /* ===> add     option*/
    TS02S-TS-2(); /* ===> Add page to temporary storage*/
  end

   /* ** ----------------------------------------------------------*/
   /* ** If no pages were formatted, indicate no data to display.*/
   /* **   and re-display Map 1*/
   /* ** ----------------------------------------------------------*/

  if (TS02W01.TA5TSQIX == 0) /* ===> No pages formatted*/

    TS02S-TS-2(); /* ===> Add page to temporary storage*/

  end

   /* ** ----------------------------------------------------------*/
   /* ** If no message to display, reset the desired page number.*/
   /* ** ----------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* ===> No message to display*/
    TS02W01.XXXTSPAG = 1; /* ===> Desired page number*/
  end

   /* ** ----------------------------------------------------------*/
   /* ** Indicate that the request for data is complete.*/
   /* ** ----------------------------------------------------------*/

  TS02W01.TS02WSWR = "N"; /* ===> Request for data switch*/
  TS02W01.TS02WSWF = "Y"; /* ===> Format the map switch*/


   /* **                                                        ***/
   /* ********************** End of TS02-10000 ********************/
end // end TS02-10000

// Load cartons to W.S. for cntnr
Function TS02-11000()
   /* ------------------------------------------------------------*/
   /*  */
   /* -  First get the relative index of requested container*/
   /* existing in the compress containers carton array.*/
   /* -  Then*/
   /* Load the TS02W23 record with the TS02W24 record*/
   /* for a particular container that was requested.*/
   /* ie) Current container that will be displayed.*/
   /*  */
   /* TS02W24 - A record containing compressed cartons for*/
   /* 1 to 8 possible containers. The containers*/
   /* are carried separately, not compressed.*/
   /*  */
   /* TS02W23 - A record containing compressed cartons for*/
   /* a single container.*/
   /*  */
   /* (note: This record will be loaded to TS02W23)*/
   /*  */
   /* ------------------------------------------------------------*/

  set TS02W23 empty; /* ===> initialize W.S. record*/

  if (TS02W01.TSHNKCN[TS02WIXC] in TS02W24.TSHNKCN)

    TS02W01.TS02WIX1 = 1; /* ===> W.S. index for   TS02W23 Load*/
    TS02W01.TS02WIX2 = sysVar.arrayIndex; /* ===> W.S. index for  TS02W24 Load*/

    while (TS02W24.TSHNKCN[TS02WIX2] == TS02W01.TSHNKCN[TS02WIXC]
     && TS02W24.TSHNKCN[TS02WIX2] > 0)

      TS02W23.TSHNKCN[TS02WIX1] = TS02W24.TSHNKCN[TS02WIX2];
      TS02W23.TSHCNTNR[TS02WIX1] = TS02W24.TSHCNTNR[TS02WIX2];
      TS02W23.TSOFRCRT[TS02WIX1] = TS02W24.TSOFRCRT[TS02WIX2];
      TS02W23.TSOTOCRT[TS02WIX1] = TS02W24.TSOTOCRT[TS02WIX2];

      TS02W23.TS02WGCT = TS02W23.TS02WGCT +       TS02W23.TSOTOCRT[TS02WIX1] - TS02W23.TSOFRCRT[TS02WIX1] + 1;

      if (TS02W01.TS02WIXC == 1 /* ===> 1ST container*/
       || TS02W01.TS02WOPT == "I") /* ===> Inquery option*/

       /* ========== NEXT SENTENCE ========>*/

      else
        TS02-11100(); /* ===> accumulate qtys*/

      end
      TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1;
      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1;

    end

  end


    /* **--------------------------------------------------------*/
    /* **   Save the container shipment total associated*/
    /* **   with the current container*/
    /* **--------------------------------------------------------*/

  TS02W23.TS02WGST = TS02W24.TS02WGST[TS02WIXC];


   /* **                                                        ***/
   /* ********************** End of TS02-11000 ********************/
end // end TS02-11000

// Accumlate qtys for container
Function TS02-11100()
   /* **-----------------------------------------------------------------*/
   /* **    Accumulate the qtys for the current container by*/
   /* **  using the compressed map range and apply it against*/
   /* **  the original carton row table saved in TS02W07.*/
   /* **-----------------------------------------------------------------*/

  TS02W01.TS02WIXW = 1; /* ===> WS07 detail index*/

  while (TS02W01.TS02WIXW <= TS02W01.TS02WMCR
   && TS02W07.TSOFRCRT[TS02WIXW] > 0)
                                   /* ===> max carton range entries*/

    if (TS02W23.TSOFRCRT[TS02WIX1] >= TS02W07.TSOFRCRT[TS02WIXW]
     && TS02W23.TSOFRCRT[TS02WIX1] <= TS02W07.TSOTOCRT[TS02WIXW])

      if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W07.TSOTOCRT[TS02WIXW])

        TS02W01.TS02WWK1 = TS02W07.TSOTOCRT[TS02WIXW] - TS02W23.TSOTOCRT[TS02WIX1] + 1;
      else
        TS02W01.TS02WWK1 = TS02W07.TSOTOCRT[TS02WIXW] - TS02W07.TSOTOCRT[TS02WIXW] + 1;
      end
    end
    TS02W01.TS02W-QTY-ACCUM = TS02W01.TS02WWK1 * TS02W07.TS02WQPC[TS02WIXW];
    TS02W23.TS02WGST = TS02W23.TS02WGST + TS02W01.TS02W-QTY-ACCUM;
    TS02W01.TS02WIXW = TS02W01.TS02WIXW + 1; /* ===> WS07 cntnr/crtn index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-11100 ********************/
end // end TS02-11100

// Obtain po id and type
Function TS02-12000()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  set PC3REC empty;
  PC3REC.XGPCD = TSWREC.XGPCD;
  PC3REC.PC3PONBR = TS02W03.PC3PONBR[1];
  PCYREC.PCYFUNC = "S ";

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* ===> Select row*/

  if (sysVar.errorCode == "00000000") /* ===> Good call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* ===> Row found*/

      TS02W01.TS02WDAT = PC3REC.PC3POIDT; /* ===> reformat the date*/

      return; /* ===> Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* ===> Row not found*/
        return; /* ===> Return to previous process*/
      end

    end

  end

  if (sysVar.errorCode == "00000000" /* ===> Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* ===> Resource not available*/
    converseLib.validationFailed(11); /* ===> Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
  else
    converseLib.validationFailed(10); /* ===> Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* ===> Termination function*/
    converseLib.clearScreen();
     /* ===> Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* ===> Sql commarea*/
  TA1REC.TA1MAP = "TS02M001"; /* ===> Map id*/

  TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
  TA1REC.TA1PGMNM = "2-12000"; /* ===> Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* ===> Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* ===> Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* ===> Error diagnosis routine*/

  TS02M001.XXXPRCNM = "2-12000"; /* ===> Process name*/

  exit stack; /* ===> exit to re-display map*/

   /* **                                                        ***/
   /* ********************** End of TS02-12000 ********************/
end // end TS02-12000

// Select style short nm for map3
Function TS02-13000()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT THE STYLE SHORT NAME*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
  PG2REC.SY1STNBR = TS02W03.SY1STNBR[1]; /* ===> Move in style #*/
  PG2REC.XGPCD = TSWREC.XGPCD; /* ===> Move in gpc code*/

  TA1REC.TA1PGMNM = "2-13000"; /* ===> Process name*/
  TA1REC.TA1MAP = "TS02M001"; /* ===> Map name*/

  XSPG201(); /* ===> Get the first style/color combination*/


   /* **                                                        ***/
   /* ********************** End of TS02-13000 ********************/
end // end TS02-13000

// ---> Format/display TS02M001
Function TS02-20000()
   /* ------------------------------------------------------------*/
   /* FORMAT AND DISPLAY THE MAP*/
   /*  */
   /* 1) If no errors*/
   /* - move working storage to map.*/
   /*  */
   /* 2) Converse the map.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  if (converseVar.validationMsgNum == 0 /* ===> No error message to display*/
   && TS02W01.TS02WSWF == "Y")          /* ===> Format the map requested*/

    TS02-21000(); /* ===> Format the map header data*/

    TS02-22000(); /* ===> Move T.S. to screen*/

    if (TS02W01.TS02WOPT == "I") /* ===> Inquiry indicated*/

      TS02-23000(); /* ===> Protect detail lines*/

    end

  end


  /* IF EZEMNO NE 0;                  /* ===> No error message to display*/
  /* SET TS02M001 ALARM;            /* ===> Indicate sound alarm*/
  /* END;*/


  TS02-24000(); /* ===> suppress to cartons*/


  converse TS02M001 ;


  TS02-25000(); /* ===> re-store to cartons*/


   /* **                                                        ***/
   /* ********************** End of TS02-20000 ********************/
end // end TS02-20000

// Format the map header data
Function TS02-21000()
   /* ------------------------------------------------------------*/
   /* ** Move in header data from the first gpc-cpl row.*/
   /* ----------------------------------------------------*/

  TS02M001.TS02MPO = TS02W03.PC3PONBR[1]; /* move fields*/
  TS02M001.TSILOCR = TS02W03.TSILOCR[1];
  TS02M001.TSPFCIVC = TS02W03.TSPFCIVC[1];
  TS02M001.TSIMSCFL = TS02W03.TSIMSCFL[1];
  TS02M001.TSIMSCGR = TS02W03.TSIMSCGR[1];
  TS02M001.TSRTEXT = TS02W03.TSRTEXT[1];
  TS02M001.PC2CUXID = TS02W03.PC2CUXID[1];
  TS02M001.SY1STNBR = TS02W03.SY1STNBR[1];
  TS02M001.XDMCD = TS02W03.XDMCD[1];
  TS02M001.PC2INSEG = TS02W03.PC2INSEG[1];
  TS02M001.XQACD = TS02W03.XQACD[1];
  TS02M001.XPGCD = TS02W03.XPGCD[1];
  TS02M001.XOWCD = TS02W03.XOWCD[1];
  TS02M001.XUMCD = TS02W03.XUMCD[1];
  TS02W01.TS02W-CUST-ORD-ID = TS02W03.OP1CUOID[1];
  TS02W01.TS02W-NIKE-ORD-ID = TS02W03.OP1NORID[1];
  TS02M001.TS02W-SALES-ORDER = TS02W01.TS02W-SALES-ORDER;


  if (TSWREC.XGPCD == "03") /* if apparel*/
    TS02M001.TS02MPYR = PC3REC.PCFSECD;
  else
    TS02M001.TS02MPYR = TS02W01.TS02WPYY;
  end
  TS02M001.TS02MPMO = TS02W01.TS02WPM1;
  TS02M001.TS02MDMO = TS02W01.TS02WPM2;
  TS02M001.FY1FCTYC = PC3REC.FY1FCTYC;
  TS02M001.PC4ORTYP = PC3REC.PC4ORTYP;


   /* npulug changes begin*/
   /* IF TSWREC.XGPCD EQ '03';*/
   /* SET TS02M001.SY2CLRID AUTOSKIP,DARK;*/
   /* ELSE;*/
  TS02M001.SY2CLRID = TS02W03.SY2CLRID;
   /* END;*/
   /* npulug changes end*/

  TS02M001.SY1SSTNM = PG2REC.SY1SSTNM;

  TS02M001.TS02WGCT = TS02W23.TS02WGCT;
  TS02M001.TS02WGST = TS02W23.TS02WGST;

  TS02M001.TSHCNTNR = TS02W01.TSHCNTNR[TS02WIXC];
  TS02M001.TS02MCTR = TS02W01.TS02WIXC; /* ===> Container count*/
  TS02M001.TS02WSCC = TS02W01.TS02WSCC; /* ===> Container count total*/

  TS02M001.XXXCURDT = VGVar.currentShortGregorianDate; /* ===> Current date*/

  set TS02M001.TSOFRCRT[1] cursor; /* ===> set first detail cursor*/

   /* **                                                        ***/
   /* ********************** End of TS02-21000 ********************/
end // end TS02-21000

// Move ws to screen
Function TS02-22000()
   /* ------------------------------------------------------------*/
   /*  */
   /* MOVE T.S.DATA TO THE SCREEN TO SCREEN*/
   /*  */
   /*  */
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
   /*  */
  if (TS02W01.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS02W01.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (TS02W01.TS02WSWU == "Y") /* Current page was changed*/

        TS02S-TS-3(); /* Update temporary storage page*/

        TS02W01.TS02WSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
      /* If PF8 was requested, add a new page to temp storage to*/
      /* allow the user to enter additional carton detail data.*/
      /*  */
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS02W01.XXXTSPAG > TS02W01.TA5TSQIX) /* Desired > highest*/

        if (converseVar.eventKey is pf8 /* ===> New page requested*/
         || converseVar.eventKey is enter) /* ===> New page requested*/

          set TS02W05 empty; /* ===> clear the temp storage page*/
          TS02S-TS-2(); /* ===> Add temporary storage page*/

        else

          TS02W01.XXXTSPAG = TS02W01.TA5TSQIX; /* Default to highest*/

        end

      end

      TS02S-TS-4(); /* ===> Obtain temporary storage page*/

    end

  end

  set TS02W11 empty; /* Clear the screen WS*/

  if (TS02W01.TS02WOPT == "A" /* ===> add indicated*/
   && TS02W01.TS02W1ST == "Y") /* ===> First time thru switch*/

    TS02W01.TS02W1ST = "N"; /* ===> re-set 1st time thru switch*/

  else

    TS02W01.TS02WIX1 = 1; /* ===> until end of page*/

    while (TS02W01.TS02WIX1 <= 33) /* until end of page*/

      TS02M001.TSOFRCRT[TS02WIX1] = TS02W05.TSOFRCRT[TS02WIX1];
      TS02M001.TSOTOCRT[TS02WIX1] = TS02W05.TSOTOCRT[TS02WIX1];

      TS02W11.TSOFRCRT[TS02WIX1] = TS02W05.TSOFRCRT[TS02WIX1];
      TS02W11.TSOTOCRT[TS02WIX1] = TS02W05.TSOTOCRT[TS02WIX1];

      TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> until end of page*/

    end

  end

  TS02M001.XXXTSPAG = TS02W01.XXXTSPAG; /* display current T.S. page*/
  TS02M001.TA5TSQIX = TS02W01.TA5TSQIX; /* display total T.S. pages*/

   /* **                                                        ***/
   /* ********************** End of TS02-22000 ********************/
end // end TS02-22000

// Protect detail lines (Inquery)
Function TS02-23000()
   /* ------------------------------------------------------------*/
   /* Set detail lines protected for inquery mode*/
   /* ------------------------------------------------------------*/


  TS02W01.TS02WIX1 = 1; /* ===> Initialize count index*/

  while (TS02W01.TS02WIX1 <= 33) /* ===> Until end of detail lines*/

    set TS02M001.TSOFRCRT[TS02WIX1] skip; /* ===> Protect fields*/
    set TS02M001.TSOTOCRT[TS02WIX1] skip;

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> increment index*/

  end


  set TS02M001.XXXPRCNM cursor; /* ===> set  cursor*/


   /* **                                                        ***/
   /* ********************** End of TS02-23000 ********************/
end // end TS02-23000

// Suppress "TO" cartons
Function TS02-24000()
   /* **--------------------------------------------------------*/
   /* **   Suppress map "TO" carton fields*/
   /* **--------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> until end of page*/

  while (TS02W01.TS02WIX1 <= 33) /* until end of page*/

    if (TS02M001.TSOTOCRT[TS02WIX1] == TS02M001.TSOFRCRT[TS02WIX1])
      TS02M001.TSOTOCRT[TS02WIX1] = 0;
    end

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> until end of page*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-24000 ********************/
end // end TS02-24000

// Restore  "TO" cartons
Function TS02-25000()
   /* **--------------------------------------------------------*/
   /* **   Re-store map "TO" carton fields*/
   /* **--------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> until end of page*/

  while (TS02W01.TS02WIX1 <= 33) /* until end of page*/

    if (TS02M001.TSOFRCRT[TS02WIX1] > 0
     && TS02M001.TSOTOCRT[TS02WIX1] == 0)
      TS02M001.TSOTOCRT[TS02WIX1] = TS02M001.TSOFRCRT[TS02WIX1];
    end

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> until end of page*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-25000 ********************/
end // end TS02-25000

// --->Check attention identifier
Function TS02-30000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK THE ATTENTION IDENTIFIER*/
   /*  */
   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2 /* PA2 was pressed*/
   && TSWREC.TSWFRAPP != "TS0U")  /* ===> not in "ADD" Function*/

    /* **----------------------------------------------------*/
    /* ** Restore the working storage by using the saved data*/
    /* ** in TS02W11 so that the map can be refreshed.*/
    /* **----------------------------------------------------*/

    TS02W01.TS02WIX1 = 1; /* set map copy ws index*/

    while (TS02W01.TS02WIX1 <= 33) /* until end of page*/

      /* ** Restore working storage as before*/
      TS02W05.TSOFRCRT[TS02WIX1] = TS02W11.TSOFRCRT[TS02WIX1];
      TS02W05.TSOTOCRT[TS02WIX1] = TS02W11.TSOTOCRT[TS02WIX1];

      TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* incr map indexes*/
    end

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pa2 /* ===> PA2 was pressed*/
   && TSWREC.TSWFRAPP == "TS0U")  /* ===> In "ADD" Function*/

    TSWREC.TSWREJFL = "Y"; /* ===> Set shipment reject flag*/
    COMMAREA.CATOAP = "TS0I"; /* ===> Set current to TS0Y*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* ===> move in pass data*/

    TS02S-TS-1(); /* ===> purge temp storage*/

    XSTSS01(); /* ===> transfer to application*/

    TS02M001.XXXPRCNM = "2-30000";

    exit stack;

  end


  if (converseVar.eventKey is pf3) /* ===> PF3 was pressed*/

    if (TSWREC.TSWFRAPP != "TS0U" /* ===> If came from TS0U*/
     && TSWREC.TSWFRAPP != "TS0J") /* ===> If came from TS0J*/

      if (TSWREC.TSWFRAPP == "TS0Y" /* ===> If came from TS0Y*/
       || COMMAREA.CAFROMAP == "TS0Y") /* ===> Set current to TS0Y*/

        COMMAREA.CATOAP = "TS0Y"; /* ===> Set current to TS0Y*/

      else

        COMMAREA.CATOAP = "TS0V"; /* ===> Set current to TS0V*/

        if (COMMAREA.CAFROMAP == "TS01"
         || COMMAREA.CAFROMAP == "TR0D")
          TSWREC.TSWFRAPP = "TS01"; /* ===> Save from TS01*/
        end

      end

      COMMAREA.CAUSERA = TSWREC.CAUSERA; /* ===> move in pass data*/

      TS02S-TS-1(); /* ===> purge temp storage*/

      XSTSS01(); /* ===> transfer to application*/

      TS02M001.XXXPRCNM = "2-30000";

      exit stack;


    end

  end


  if (converseVar.eventKey is pf5) /* ===> PF5 was pressed*/

    COMMAREA.CATOAP = "TR0D"; /* ===> Set current to TR0D*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* ===> move in pass data*/

    XSTSS01(); /* ===> transfer to application*/

    TS02M001.XXXPRCNM = "2-30000";
    exit stack;

  end


  if (converseVar.eventKey not enter /* ===> ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* ===> and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* ===> and PF8 was not pressed*/

    TS02M001.XXXPRCNM = "2-30000";
    converseLib.validationFailed(4); /* ===> Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* ===> PA1 was pressed*/
     || converseVar.eventKey is pa3) /* ===> or PA3 was pressed*/
      converseLib.clearScreen();
       /* ===> Clear screen before redisplay*/
    end

    exit stack; /* ===> Exit to redisplay map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-30000 ********************/
end // end TS02-30000

// --->Reset highlighted fields
Function TS02-40000()
   /* ------------------------------------------------------------*/
   /*  */
   /* RESET HIGHLIGHTED FIELDS*/
   /*  */
   /* 1) Reset header fields normal intensity.*/
   /* 2) Reset all detail fields normal intensity.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
  set TS02M001.TS02WGCT initialAttributes; /* ===> carton count total*/

  TS02W01.TS02WIX1 = 1; /* Initialize line index*/

  while (TS02W01.TS02WIX1 <= 33) /* Until end of lines*/
    set TS02M001.TSOFRCRT[TS02WIX1] initialAttributes;
    set TS02M001.TSOTOCRT[TS02WIX1] initialAttributes;
    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* Increment line index*/
  end

  TS02M001.XXXPRCNM = "TS02";

   /* **                                                        ***/
   /* ********************** End of TS02-40000 ********************/
end // end TS02-40000

// --->Verify the entered data
Function TS02-50000()
   /* ------------------------------------------------------------*/
   /*  */
   /* /* VERIFY THE ENTERED DATA*/
   /*  */
   /* 1) If the map is not empty*/
   /* and pf7, pf8, or enter was pressed*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* ===> if pf7 is pressed*/
   || converseVar.eventKey is pf8) /* ===> or pf8 is pressed*/

    TS02-51000(); /* ===> verify scroll request*/

  end


   /* ------------------------------------------------------------*/
   /* If data did exist on the screen, perform the edits*/
   /* unless in an inquery mode of operation.*/
   /* ------------------------------------------------------------*/

  if (TS02W01.TS02WOPT != "I")


    if (converseVar.eventKey is enter /* ===> if ENTER is pressed*/
     || converseVar.eventKey is pf7   /* ===> or pf7 is pressed*/
     || converseVar.eventKey is pf8)  /* ===> or pf8 is pressed*/

      TS02W01.TS02WIX1 = 33; /* ===> initialize index*/

      while (TS02W01.TS02WIX1 > 0) /* ===> until end of detail*/

        if (TS02M001.TSOTOCRT[TS02WIX1] > 0
         && TS02M001.TSOFRCRT[TS02WIX1] == 0)

          TS02M001.TSOFRCRT[TS02WIX1] = TS02M001.TSOTOCRT[TS02WIX1];

        end

        if (TS02M001.TSOFRCRT[TS02WIX1] == TS02W11.TSOFRCRT[TS02WIX1]
         && TS02M001.TSOTOCRT[TS02WIX1] == TS02W11.TSOTOCRT[TS02WIX1])

           /* no changes*/
          /* ======= NEXT SENTENCE ========>*/

        else

          TS02W01.TS02WCHF = "Y"; /* ===> D.B. update switch*/
          TS02W01.TS02WSWU = "Y"; /* ===> T.S. update switch*/

          TS02-52000(); /* ===> carton range edits*/

          if (TS02M001.TSOFRCRT[TS02WIX1] > 0) /* ===> Carton exists*/

            TS02-53000(); /* ===> check for carton and color*/
                                   /* existence*/
          end

        end

        TS02W01.TS02WIX1 = TS02W01.TS02WIX1 - 1; /* ===> decrement index*/

      end /* ===> until end of detail*/


        /* **--------------------------------------------------------*/
        /* ** If no errors detected*/
        /* **  Do overlap checking by comparing map carton ranges*/
        /* **  against three w.s. areas.*/
        /* ***/
        /* **    1. carton ranges within map*/
        /* **    2. carton ranges in T.S.*/
        /* **    3. carton ranges that have been assigned to previous*/
        /* **       containers already processed.*/
        /* ***/
        /* **  Index usage:*/
        /* **     TS02WIX1      ;===> Map  index*/
        /* **     TS02WIX2      ;===> W.S. index*/
        /* **--------------------------------------------------------*/

      if (converseVar.validationMsgNum == 0) /* ===> no errors detected*/

        TS02W01.TS02WPAG = TS02W01.XXXTSPAG; /* ===> Save T.S. page*/
        TS02W01.TS02WIX1 = 33; /* ===> initialize index*/

        while (TS02W01.TS02WIX1 > 0) /* ===> until begin of detail index*/

          if (TS02M001.TSOFRCRT[TS02WIX1] > 0) /* ===> if detail line exists*/

         /* **--------------------------------------------------------*/
         /* check overlaps within map*/
         /* **--------------------------------------------------------*/

            TS02-54000(); /* ===> check overlaps within map*/


         /* **--------------------------------------------------------*/
         /* check overlaps within T.S.*/
         /* **--------------------------------------------------------*/

            if (TS02W01.TA5TSQIX > 1 /* ===> more than on T.S. Page*/
             && converseVar.validationMsgNum == 0) /* ===> no errors detected*/

              TS02-55000(); /* ===> check overlaps within T.S.*/

            end


         /* **--------------------------------------------------------*/
         /* check overlaps assigned containers*/
         /* **--------------------------------------------------------*/

            if (TS02W01.TS02WIXC > 1 /* ===> current container*/
             && converseVar.validationMsgNum == 0) /* ===> no errors detected*/

              TS02-56000(); /* ===> check overlaps assigned*/
                                   /* containers*/

            end

          end

          TS02W01.TS02WIX1 = TS02W01.TS02WIX1 - 1; /* ===> decrement index*/

        end /* ===> until index = 0*/


        /* **--------------------------------------------------------*/
        /* **   Re-set the current T.S. page*/
        /* **--------------------------------------------------------*/

        if (TS02W01.XXXTSPAG != TS02W01.TS02WPAG)

          TS02W01.XXXTSPAG = TS02W01.TS02WPAG; /* ===> restore T.S. page*/

          TS02S-TS-4(); /* ===> Obtain current page*/

        end

           /* **---------------------------------------------*/
           /* ** if no errors detected*/
           /* **  on the last T.S. page for the container*/
           /* **   - check that there are enough cartons left*/
           /* **---------------------------------------------*/

        if (TS02W01.XXXTSPAG == TS02W01.TA5TSQIX
         && converseVar.eventKey not pf7 /* ===>  PF7 not pressed*/
         && converseVar.validationMsgNum == 0) /* ===> no errors detected*/

          TS02-57000(); /* ===> check that enough cartons left*/

        end /* ===>   for remaining cntnr assignment*/

      end /* ===> no errors detected*/

    end /* ===> if ENTER/PF7/PF8 is pressed*/

  end /* ===> if not in "I" option*/


   /* **                                                        ***/
   /* ********************** End of TS02-50000 ********************/
end // end TS02-50000

// Verify scroll request
Function TS02-51000()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* ===> Scroll back request*/
   && TS02W01.XXXTSPAG < 2)       /* ===> No previous pages*/

    converseLib.clearScreen();
    
    set TS02M001.TSOFRCRT[1] cursor;
    TS02M001.XXXPRCNM = "2-51000"; /* ===> Module identification*/
    converseLib.validationFailed(2); /* ===> No previous page to display*/
    exit stack; /* ===> Exit to re-display map*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, allow the request for a*/
   /* new blank page.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* ===> Scroll forward request*/
   && TS02W01.XXXTSPAG >= TS02W01.TA5TSQIX) /* ===> No more pages*/

    /* ======= NEXT SENTENCE ===========>*/
    if (TS02W01.TS02WOPT == "I")
      converseLib.clearScreen();
      
      set TS02M001.TSOFRCRT[1] cursor;
      TS02M001.XXXPRCNM = "2-51000"; /* ===> Module identification*/
      converseLib.validationFailed(3); /* ===> No move pages to display*/
      exit stack; /* ===> Exit to re-display map*/
    end
  end



   /* **                                                        ***/
   /* ********************** End Of TS02-51000 ********************/
end // end TS02-51000

// Carton number range edits
Function TS02-52000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CARTON NUMBER RANGE EDITS*/
   /*  */
   /* 1) Check that 'TO' carton is greater than 'FROM'*/
   /* carton.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /* ------------------------------------------------------------*/
   /* carton number ranges*/
   /* ------------------------------------------------------------*/
   /*  */
  if (TS02M001.TSOTOCRT[TS02WIX1] > 0) /* if 'to' carton is > 0*/

    if (TS02M001.TSOTOCRT[TS02WIX1] >= TS02M001.TSOFRCRT[TS02WIX1])
      /* ======= NEXT SENTENCE ==========>*/
    else
      converseLib.validationFailed(129);
      set TS02M001.TSOTOCRT[TS02WIX1] cursor, modified, bold;
      TS02M001.XXXPRCNM = "2-52000"; /* process name*/
    end


  end

  if (TS02M001.TSOFRCRT[TS02WIX1] < 0) /* if to carton negative*/
    converseLib.validationFailed(129); /* invalid carton number*/
    set TS02M001.TSOFRCRT[TS02WIX1] cursor, modified, bold;
    TS02M001.XXXPRCNM = "2-52000"; /* process name*/
  end


   /* **                                                        ***/
   /* ********************** End of TS02-52000 ********************/
end // end TS02-52000

// Check carton exists in W25
Function TS02-53000()
   /* ------------------------------------------------------------*/
   /* Compare the map range entered with the*/
   /* carton compress table.*/
   /*  */
   /* (Note: This carton compress table is comprised of all*/
   /* cartons associated with all GPC-CPL containers*/
   /* and the carton ranges are in ascending order.)*/
   /* ------------------------------------------------------------*/


  TS02W01.TS02WIX2 = 1; /* ===> Compress carton table index*/

  while (TS02W25.TSOFRCRT[TS02WIX2] > 0) /* ===> Compress range exists*/


      /* **--------------------------------------------------------*/
      /* **  If the "FROM"  carton  fall between a range*/
      /* **     check the "TO" carton with in range*/
      /* **--------------------------------------------------------*/

    if (TS02M001.TSOFRCRT[TS02WIX1] >= TS02W25.TSOFRCRT[TS02WIX2]
     && TS02M001.TSOFRCRT[TS02WIX1] <= TS02W25.TSOTOCRT[TS02WIX2])

      if (TS02M001.TSOTOCRT[TS02WIX1] <= TS02W25.TSOTOCRT[TS02WIX2])

        return; /* ===> entered range O.K.*/

      else

        TS02M001.XXXPRCNM = "2-53000"; /* ===>  process name*/
        converseLib.validationFailed(141); /* ===> invalid carton range # entered*/
        set TS02M001.TSOFRCRT[TS02WIX1] cursor, modified, bold;
        set TS02M001.TSOTOCRT[TS02WIX1] modified, bold;

        return; /* ===> the "TO" range outside range*/

      end

    end

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* increment index*/

  end


    /* **--------------------------------------------------------*/
    /* **  At this point, the "FROM" carton range did not fall*/
    /* **     between any compress carton range*/
    /* **  Therefore, the entered "FROM" Carton is invalid.*/
    /* **--------------------------------------------------------*/


  TS02M001.XXXPRCNM = "2-53000"; /* ===>  process name*/
  converseLib.validationFailed(141); /* invalid carton range # entered*/
  set TS02M001.TSOFRCRT[TS02WIX1] cursor, modified, bold;
  set TS02M001.TSOTOCRT[TS02WIX1] modified, bold;


   /* **                                                        ***/
   /* ********************** End of TS02-53000 ********************/
end // end TS02-53000

// Check overlap in map    cntnr
Function TS02-54000()
   /* ------------------------------------------------------------*/
   /*  */
   /* /* CHECK FOR CARTON RANGE OVERLAPS*/
   /*  */
   /* Check for overlapping 'FROM' and 'TO' ranges in*/
   /* in the map.*/
   /*  */
   /* ie.) check overlap within the current container/map*/
   /*  */
   /*  */
   /* Indexes:*/
   /* 1. TS02WIX1 = Index for Map*/
   /* 2. TS02WIX2 = Index for MAP W.S. storage*/
   /* ------------------------------------------------------------*/


  TS02W01.TS02WIX2 = 1; /* ===> Init w.s. index*/

  while (TS02W01.TS02WIX2 <= 33) /* ===> until end of detail lines*/

    if (TS02M001.TSOFRCRT[TS02WIX2] > 0) /* ===> if detail line exists*/

      /* ------------------------------------------------------------*/
      /* Check the range for:---->*/
      /* ===> Map   "FROM"  vs.  Map  "FROM"*/
      /* ===> Map   "FROM"  vs.  Map  "TO"*/
      /* ------------------------------------------------------------*/


      if (TS02M001.TSOFRCRT[TS02WIX1] >= TS02M001.TSOFRCRT[TS02WIX2]
       && TS02M001.TSOFRCRT[TS02WIX1] <= TS02M001.TSOTOCRT[TS02WIX2])

        if (TS02W01.TS02WIX1 == TS02W01.TS02WIX2) /* ===> (Map = W.S index)*/

          /* ========= NEXT SENTENCE =========>*/

        else

          set TS02M001.TSOFRCRT[TS02WIX1] cursor, bold;
          set TS02M001.TSOTOCRT[TS02WIX1] bold;
          TS02M001.XXXPRCNM = "2-54000"; /* ===> process name*/
          converseLib.validationFailed(132); /* ===> overlapping ranges*/

          return; /* ===> return to previous process*/

        end

      end


      /* ------------------------------------------------------------*/
      /* Check the range for:---->*/
      /* ===> Map   "FROM"  vs.  Map  "FROM"*/
      /* ===> Map   "TO"    vs.  Map  "FROM"*/
      /* ------------------------------------------------------------*/


      if (TS02M001.TSOFRCRT[TS02WIX1] < TS02M001.TSOFRCRT[TS02WIX2]
       && TS02M001.TSOTOCRT[TS02WIX1] >= TS02M001.TSOFRCRT[TS02WIX2])

        if (TS02W01.TS02WIX1 == TS02W01.TS02WIX2) /* ===> (Map = W.S index)*/

          /* ========= NEXT SENTENCE =========>*/

        else

          set TS02M001.TSOFRCRT[TS02WIX1] cursor, bold;
          set TS02M001.TSOTOCRT[TS02WIX1] bold;
          TS02M001.XXXPRCNM = "2-54000"; /* ===> process name*/
          converseLib.validationFailed(132); /* ===> overlapping ranges*/

          return; /* ===> return to previous process*/

        end

      end

    end /* ===> Detail  line exist*/

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> increment index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-54000 ********************/
end // end TS02-54000

// Check overlap in T.S.   cntnrs
Function TS02-55000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK FOR CARTON RANGE OVERLAPS*/
   /*  */
   /* Check for overlapping 'FROM' and 'TO' ranges, for current*/
   /* container, in T.S. other than current page.*/
   /*  */
   /* Start processing the map range against T.S. ranges*/
   /*  */
   /* Indexes:*/
   /* 1. TS02WIX1 = Index for Map*/
   /* 2. TS02WIX2 = Index for Temp. storage*/
   /* ------------------------------------------------------------*/
   /*  */

  TS02W01.TS02WPAG = TS02W01.XXXTSPAG; /* ===> Save T.S. page*/

  TS02-55100(); /* ===> Get the first T.S. Page to*/
                                   /* process*/


   /* ------------------------------------------------------------*/
   /* Process each range in the map against all T.S. ranges*/
   /* 1. indexed by TS02WIX1*/
   /* Process all T.S. pages, other than the current page*/
   /* 2. indexed by TS02WIX2*/
   /* ------------------------------------------------------------*/

  while (TS02W01.XXXTSPAG <= TS02W01.TA5TSQIX) /* ===> LE last T.S. page*/

    TS02W01.TS02WIX2 = 1; /* ===> init T.S. page index*/

    while (TS02W01.TS02WIX2 <= 33) /* ===> Process curr T.S. page*/

      if (TS02W05.TSOFRCRT[TS02WIX2] > 0)

        /* ------------------------------------------------------------*/
        /* Check the range for:---->*/
        /* ===> Map   "FROM"  vs.  T.S. "FROM"*/
        /* ===> Map   "FROM"  vs.  T.S. "TO"*/
        /* ------------------------------------------------------------*/


        if (TS02M001.TSOFRCRT[TS02WIX1] >= TS02W05.TSOFRCRT[TS02WIX2]
         && TS02M001.TSOFRCRT[TS02WIX1] <= TS02W05.TSOTOCRT[TS02WIX2])

          set TS02M001.TSOFRCRT[TS02WIX1] cursor, bold;
          set TS02M001.TSOTOCRT[TS02WIX1] bold;
          TS02M001.XXXPRCNM = "2-55000"; /* ===> process name*/
          converseLib.validationFailed(132); /* ===> overlapping ranges*/

          return; /* ===> return to previous process*/


        end


        /* ------------------------------------------------------------*/
        /* Check the range for:---->*/
        /* ===> Map   "FROM"  vs.  T.S. "FROM"*/
        /* ===> Map   "TO"    vs.  T.S. "FROM"*/
        /* ------------------------------------------------------------*/


        if (TS02M001.TSOFRCRT[TS02WIX1] <= TS02W05.TSOFRCRT[TS02WIX2]
         && TS02M001.TSOTOCRT[TS02WIX1] >= TS02W05.TSOFRCRT[TS02WIX2])

          set TS02M001.TSOFRCRT[TS02WIX1] cursor, bold;
          set TS02M001.TSOTOCRT[TS02WIX1] bold;
          TS02M001.XXXPRCNM = "2-55000"; /* ===> process name*/
          converseLib.validationFailed(132); /* ===> overlapping ranges*/

          return; /* ===> return to previous process*/


        end

      end /* ===> Detail  line exist*/


      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> increment index*/

    end /* ===> Processing Curr T.S. page*/

    TS02W01.XXXTSPAG = TS02W01.XXXTSPAG + 1; /* ===> incr. T.S. page*/

    TS02-55200(); /* ===> get the next T.S. Page to*/
                                   /* process*/

  end /* ===> Processing all T.S. pages*/

  TS02W01.XXXTSPAG = TS02W01.TS02WPAG; /* ===> reset T.S. page*/

  TS02S-TS-4(); /* ===> read T.S. Page*/


   /* **                                                        ***/
   /* ********************** End of TS02-55000 ********************/
end // end TS02-55000

// Get 1st T.S. page to process
Function TS02-55100()
   /* ------------------------------------------------------------*/
   /* Get the first T.S. Page to process*/
   /* 1. indexed by TS02WIX2*/
   /* ------------------------------------------------------------*/
   /*  */

  if (TS02W01.TS02WPAG > 1) /* ===> If saved page > page #1*/

    TS02W01.XXXTSPAG = 1; /* ===> set to 1 of T.S. page #1*/

  else

    TS02W01.XXXTSPAG = 2; /* ===> set to 2 of T.S. page #1*/

  end

  TS02S-TS-4(); /* ===> Obtain next T.S. page*/


   /* **                                                        ***/
   /* ********************** End of TS02-55100 ********************/
end // end TS02-55100

// Get next T.S. page to process
Function TS02-55200()
   /* ------------------------------------------------------------*/
   /* Get the next T.S. page to process*/
   /* ------------------------------------------------------------*/


  if (TS02W01.XXXTSPAG == TS02W01.TS02WPAG) /* ===> (curr = save curr) page*/

    TS02W01.XXXTSPAG = TS02W01.XXXTSPAG + 1; /* ===> incr. T.S. page*/

  end

  if (TS02W01.XXXTSPAG <= TS02W01.TA5TSQIX) /* ===> LE last T.S. page*/

    TS02S-TS-4(); /* ===> Obtain next T.S. page*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-55200 ********************/
end // end TS02-55200

// Check overlap assigned  cntnrs
Function TS02-56000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK FOR CARTON RANGE OVERLAPS*/
   /*  */
   /* Check for overlapping 'FROM' and 'TO' ranges in*/
   /* the containers that have already been assigned*/
   /*  */
   /* Indexes:*/
   /* 1. TS02WIX1 = Index for Map*/
   /* 2. TS02WIX2 = Index for carton/container assign index*/
   /* ------------------------------------------------------------*/
   /*  */

  TS02W01.TS02WIX2 = 1; /* ===> Init w.s. index*/

  while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR
   && TS02W26.TSOFRCRT[TS02WIX2] > 0) /* ===> if detail line exists*/

    if (TS02W26.TS02WAFL[TS02WIX2] == "Y") /* ===> range assigned to cntnr*/


      /* ------------------------------------------------------------*/
      /* Check the range for:---->*/
      /* ===> Map   "FROM"  vs.  container/carton assigned "FROM"*/
      /* ===> Map   "FROM"  vs.  container/carton assigned "TO"*/
      /* ------------------------------------------------------------*/

      if (TS02M001.TSOFRCRT[TS02WIX1] >= TS02W26.TSOFRCRT[TS02WIX2]
       && TS02M001.TSOFRCRT[TS02WIX1] <= TS02W26.TSOTOCRT[TS02WIX2])

        set TS02M001.TSOFRCRT[TS02WIX1] cursor, bold;
        set TS02M001.TSOTOCRT[TS02WIX1] bold;
        TS02M001.XXXPRCNM = "2-56000"; /* ===> process name*/
        converseLib.validationFailed(132); /* ===> overlapping ranges*/

        return; /* ===> return to previous process*/

      end


      /* ------------------------------------------------------------*/
      /* Check the range for:---->*/
      /* ===> Map   "FROM"  vs.  container/carton assigned "FROM"*/
      /* ===> Map   "TO"    vs.  container/carton assigned "FROM*/
      /* ------------------------------------------------------------*/


      if (TS02M001.TSOFRCRT[TS02WIX1] < TS02W26.TSOFRCRT[TS02WIX2]
       && TS02M001.TSOTOCRT[TS02WIX1] >= TS02W26.TSOFRCRT[TS02WIX2])

        set TS02M001.TSOFRCRT[TS02WIX1] cursor, bold;
        set TS02M001.TSOTOCRT[TS02WIX1] bold;
        TS02M001.XXXPRCNM = "2-56000"; /* ===> process name*/
        converseLib.validationFailed(132); /* ===> overlapping ranges*/

        return; /* ===> return to previous process*/

      end


    end /* ===> Detail  line exist*/

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> increment index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-56000 ********************/
end // end TS02-56000

// Verify crtns for cntnr assignm
Function TS02-57000()
   /* ------------------------------------------------------------*/
   /*  */
   /* VERIFY ENOUGH CARTONS LEFT FOR REMAINING CNTNR ASSIGNMENT*/
   /*  */
   /* Determine whether user's carton assignment will decrease*/
   /* the number of cartons to be assigned is less than the*/
   /* number of remaining containers.*/
   /*  */
   /* 1. Accumulate carton counts for map carton ranges*/
   /*  */
   /* 2. Accumulate carton counts for T.S carton ranges*/
   /* excluding map cartons entered.*/
   /*  */
   /* 3. Accumulate carton counts for previous carton ranges*/
   /* that have been assigned to past processed containers.*/
   /*  */
   /* 4. Check*/
   /* Containers still to process vs. cartons available*/
   /*  */
   /* ------------------------------------------------------------*/

  TS02W01.TS02WWK1 = 0; /* ===> init w.s. carton total assigned*/
                                   /* count*/


    /* **--------------------------------------------------------*/
    /* **  Accumulate carton counts for map cartons ranges*/
    /* **--------------------------------------------------------*/

  TS02-57100(); /* ===>  accum map carton counts*/


    /* **--------------------------------------------------------*/
    /* **  Accumulate carton counts for T.S carton ranges*/
    /* **     excluding map cartons entered.*/
    /* **--------------------------------------------------------*/

  if (TS02W01.TA5TSQIX > 1) /* ===> More than one T.S. page*/
    TS02-57200(); /* ===>  accum T.S. carton counts*/
  end


    /* **--------------------------------------------------------*/
    /* **  Accumulate carton counts for previous cartons ranges*/
    /* **  that have been assigned to earlier containers.*/
    /* **--------------------------------------------------------*/

  if (TS02W01.TS02WIXC > 1) /* ===> current container index*/

    TS02W01.TS02WIX1 = 1; /* ===> w.s. container index*/

    while (TS02W01.TS02WIX1 < TS02W01.TS02WIXC) /* ===> w.s. container index*/

      /* ===> accum w.s. carton total assigned count*/
      TS02W01.TS02WWK1 = TS02W01.TS02WWK1 + TS02W26.TS02WACT[TS02WIX1];

      TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1;

    end

  end

    /* **--------------------------------------------------------*/
    /* ** Subtract assigned cartons from total cartons/all cntnr*/
    /* **  for cartons available*/
    /* **--------------------------------------------------------*/

  TS02W01.TS02WWK1 = TS02W25.TS02WGCT - TS02W01.TS02WWK1;


    /* **--------------------------------------------------------*/
    /* **  subtract assigned from total cartons*/
    /* **  for containers still left for container assignment*/
    /* **--------------------------------------------------------*/

  TS02W01.TS02WWK2 = TS02W01.TS02WSCC - TS02W01.TS02WIXC;


    /* **--------------------------------------------------------*/
    /* ** Check containers still to process vs. cartons available*/
    /* ***/
    /* **   If the number of cartons left to assign is less than*/
    /* **          the number of container assignments,*/
    /* **     then display an error.*/
    /* **--------------------------------------------------------*/

  if (TS02W01.TS02WWK1 < TS02W01.TS02WWK2)
    converseLib.validationFailed(150); /* ===> # crtns left is LT # cntnrs left*/
    TS02M001.XXXPRCNM = "2-57000"; /* ===> process name*/
    set TS02M001.TSOFRCRT[1] cursor; /* ===> set cursor*/
  end


   /* **                                                        ***/
   /* ********************** End of TS02-57000 ********************/
end // end TS02-57000

// Accum map carton counts
Function TS02-57100()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /*  */
   /* 1. Accumulate carton counts for the map carton ranges*/
   /*  */
   /* ------------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> set up index*/

  while (TS02W01.TS02WIX1 <= 33) /* ===> until end of the detail*/

    if (TS02M001.TSOFRCRT[TS02WIX1] > 0) /* ===> if 'from' carton exists*/

      TS02W01.TS02WWK2 = TS02M001.TSOFRCRT[TS02WIX1];

      if (TS02M001.TSOTOCRT[TS02WIX1] > 0) /* ===> if 'to' carton exists*/
        TS02W01.TS02WWK3 = TS02M001.TSOTOCRT[TS02WIX1];
      else
        TS02W01.TS02WWK3 = TS02M001.TSOFRCRT[TS02WIX1];
      end

      /* ===> get counts for carton range*/
      TS02W01.TS02WWK4 = TS02W01.TS02WWK3 - TS02W01.TS02WWK2 + 1;

      /* ===> accumulate map carton count totals*/
      TS02W01.TS02WWK1 = TS02W01.TS02WWK1 + TS02W01.TS02WWK4;

    end /* ===> 'from' carton exists*/

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> increment index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-57100 ********************/
end // end TS02-57100

// Accum. T.S. carton counts
Function TS02-57200()
   /* ------------------------------------------------------------*/
   /*  */
   /* Accumulate carton counts for T.S carton ranges*/
   /* excluding map cartons entered.*/
   /*  */
   /* ------------------------------------------------------------*/


  TS02W01.TS02WPAG = TS02W01.XXXTSPAG; /* ===> Save T.S. page*/


  TS02-55100(); /* ===> Get the first T.S. Page to*/
                                   /* process*/

  while (TS02W01.XXXTSPAG <= TS02W01.TA5TSQIX) /* ===> LE last T.S. page*/

      /* **--------------------------------------------------------*/
      /* **  Accumulate carton counts for the T.S. carton ranges*/
      /* **--------------------------------------------------------*/

    TS02W01.TS02WIX1 = 1; /* ===> set up index*/

    while (TS02W01.TS02WIX1 <= 33) /* ===> until end of the detail*/

      if (TS02W05.TSOFRCRT[TS02WIX1] > 0) /* ===> if 'from' carton exists*/

        TS02W01.TS02WWK2 = TS02W05.TSOFRCRT[TS02WIX1];

        if (TS02W05.TSOTOCRT[TS02WIX1] > 0) /* ===> if 'to' carton exists*/
          TS02W01.TS02WWK3 = TS02W05.TSOTOCRT[TS02WIX1];
        else
          TS02W01.TS02WWK3 = TS02W05.TSOFRCRT[TS02WIX1];
        end

        /* ===> get counts for carton range*/
        TS02W01.TS02WWK4 = TS02W01.TS02WWK3 - TS02W01.TS02WWK2 + 1;

        /* ===> accumulate map carton count totals*/
        TS02W01.TS02WWK1 = TS02W01.TS02WWK1 + TS02W01.TS02WWK4;

      end /* ===> 'from' carton exists*/

      TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> increment index*/

    end

    TS02W01.XXXTSPAG = TS02W01.XXXTSPAG + 1; /* ===> incr. T.S. page*/

    TS02-55200(); /* ===> get the next T.S. Page to*/
                                   /* process*/

  end /* ===> Processing all T.S. pages*/


  TS02W01.XXXTSPAG = TS02W01.TS02WPAG; /* ===> reset T.S. page*/

  TS02S-TS-4(); /* ===> read T.S. Page*/


   /* **                                                        ***/
   /* ********************** End of TS02-57200 ********************/
end // end TS02-57200

// --->Process input request
Function TS02-60000()
   /* ------------------------------------------------------------*/
   /*  */
   /* PROCESS VALID INPUT REQUESTS*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* ===> errors have occurred*/
    return; /* ===> return to previous process*/
  end

  if (converseVar.eventKey is pf7 /* ===> Pf7 was pressed*/
   || converseVar.eventKey is pf8) /* ===> Pf8 was pressed*/

    /* ------------------------------------------------------------*/
    /* If a scroll backward was requested, decrement the page*/
    /* number and return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf7) /* ===> Scroll back requested*/

      TS02W01.TS02WSWF = "Y"; /* ===> Format the map switch*/

      TS02W01.XXXTSPAG = TS02W01.XXXTSPAG - 1; /* ===> Decr. page number*/

      return; /* ===> Return to previous process*/

    end

    /* ------------------------------------------------------------*/
    /* If a scroll forward was requested, increment the page*/
    /* number and return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf8) /* ===> Scroll forward requested*/

      TS02W01.TS02WSWF = "Y"; /* ===> Format the map switch*/

      TS02W01.XXXTSPAG = TS02W01.XXXTSPAG + 1; /* ===> Incr. page number*/

      return; /* ===> Return to previous process*/

    end

  end


    /* ------------------------------------------------------------*/
    /* If <ENTER> was requested and in an "INQUERY" option*/
    /* set up for next "INQUERY" screen.*/
    /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* ===>*/
   && TS02W01.TS02WOPT == "I")      /* ===> in "inquery" option*/

    if (TS02W01.XXXTSPAG < TS02W01.TA5TSQIX) /* ===> not last T.S. Page*/

      TS02W01.XXXTSPAG = TS02W01.XXXTSPAG + 1; /* ===> Incr. page number*/
      TS02W01.TS02WSWF = "Y"; /* ===> Format the map switch*/

    else


      TS02W01.TS02WIXC = TS02W01.TS02WIXC + 1; /* ===> get next container*/
      TS02W01.TS02WSWR = "Y"; /* ===> Request obtain data switch*/

      if (TS02W01.TS02WIXC > TS02W01.TS02WSCC) /* ===> last container*/

        TS02-61000(); /* ===> exit application*/

      end

    end

  end


    /* ------------------------------------------------------------*/
    /* If a <ENTER> was requested and not in an "INQUERY" option*/
    /* process the container array depending on data entered*/
    /* on the screen*/
    /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* ===>*/
   && TS02W01.TS02WOPT != "I")      /* ===> not in "inquery" option*/

    if (TS02W01.XXXTSPAG < TS02W01.TA5TSQIX /* ===> not last T.S. Page*/
     || TS02M001.TSOFRCRT[33] > 0)          /* ===> last entry filled*/

      TS02W01.XXXTSPAG = TS02W01.XXXTSPAG + 1; /* ===> Incr. page number*/
      TS02W01.TS02WSWF = "Y"; /* ===> Format the map switch*/

    else

      if (TS02W01.TS02WIXC == TS02W01.TS02WSCC) /* ===> last container*/

        TS02-62000(); /* ===> Defaults all un-assigned cartons*/

        TS02W01.TS02WIXC = TS02W01.TS02WIXC + 1; /* ===> get next container*/

      else

        TS02-63000(); /* ===> assign map/T.S. cartons of curr*/
                                   /* container*/

        TS02W01.TS02WIXC = TS02W01.TS02WIXC + 1; /* ===> get next container*/
        TS02W01.TS02WSWR = "Y"; /* ===> Request obtain data switch*/


        TS02-64000(); /* ===> remove assigned cartons from*/
                                   /* other cntnrs*/

        if (TS02W01.TS02WIXC > 2) /* ===> more than two containers*/

          TS02-65000(); /* ===> adjust assigned cartons from*/
                                   /* un-ussigned carton ranges*/
        end

        if (TS02W01.TS02WIXC == TS02W01.TS02WSCC) /* ===> last container*/

          TS02-66000(); /* ===> assign remaining cartons to last*/
                                   /* container*/

        end

      end

      /* **------------------------------------------------------*/
      /* **  Now that all the containers have been processed,*/
      /* **  proceed to update the databases and set up for*/
      /* **  next set of P.L. or exit application*/
      /* **------------------------------------------------------*/


      if (TS02W01.TS02WIXC > TS02W01.TS02WSCC) /* ===> last container*/

        if (TS02W01.TS02WCHF == "Y") /* ===> update D.B. required*/

          TS02-67000(); /* ===> Do D.B. updates*/

        end


   /* ------------------------------------------------------------*/
   /* Check for more packing lists in the cpl array.*/
   /* -If more exist, load the next set of gpc-cpl array*/
   /* packing lists*/
   /* -Else, exit to TS0I.*/
   /* ------------------------------------------------------------*/

        if (COMMAREA.CAFROMAP == "TS0V") /* If came from TS0V*/

          if (TSWREC.TSWFRAPP == "TS0U" /* via from TS0U*/
           || TSWREC.TSWFRAPP == "TS0J") /* via from TS0J*/

            TS02W01.TS02WCPX = TS02W01.TS02WCPX + 1;

            if (TS02W02.PC3PONBR[TS02WCPX] > 0) /* if more packing list*/
              set TS02W03 empty; /* clear gpc-cpl array*/
              set TS02W05 empty; /* clear screen 3 ws*/
              set TS02W07 empty; /* set carton detail ws empty*/
              set TS02W26 empty; /* set carton detail ws empty*/
              move 0 to TS02M001.TSOFRCRT[1] for all; /* set carton detail ws empty*/
              move 0 to TS02M001.TSOTOCRT[1] for all; /* set carton detail ws empty*/
              TS02W01.TS02WSWR = "Y"; /* set request for data to yes*/
              TS02W01.TS02W1ST = "Y"; /* set first time thru flag*/

              TS02-78000(); /* ===> set-up to process next CPL set*/
                                   /*  */

              exit stack; /* ===> exit to process newly built*/
                                   /* GPC-CPL set*/

            end

          end

        end

        TS02-61000(); /* ===> exit application*/

      end

    end

  end



   /* **                                                        ***/
   /* ********************** End of TS02-60000 ********************/
end // end TS02-60000

// Process transfer to other appl
Function TS02-61000()
   /* ----------------------------------------------------*/
   /* Process transfer to other applications*/
   /* ----------------------------------------------------*/
   /*  */

  if (COMMAREA.CAFROMAP == "TS0V") /* If came from TS0V*/

    if (TSWREC.TSWFRAPP == "TS01") /* If came from TS01*/
      COMMAREA.CATOAP = "TS01"; /* Set current to TS01*/
      TSWREC.TSWFRAPP = " ";
    else

      if (TSWREC.TSWFRAPP == "TS0Y") /* If coming via from 'TS0Y'*/
        COMMAREA.CATOAP = "TS0Y"; /* Set current to TS0Y*/
        TSWREC.TSWFRAPP = " ";
      else

        if (TSWREC.TSWFRAPP == "TS0U") /* If coming via from 'TS0U'*/
          COMMAREA.CATOAP = "TS0I"; /* Set current to TS0I*/
          TSWREC.TSWFRAPP = " ";
        else

          if (TSWREC.TSWFRAPP == "TS0J") /* If coming via from 'TS0J'*/
            COMMAREA.CATOAP = "TS0J"; /* Set current to TS0J*/
            TSWREC.TSWFRAPP = " ";
          else

            if (TSWREC.TSWFRAPP == "TS0P") /* If came from TS0P*/

     /* ----------------------------------------------------*/
     /* Remove from the pass arry the P/L just processed*/
     /* ----------------------------------------------------*/

              TS02W01.TS02WIX1 = 1; /* ===> Set index*/

              while (TS02W03.TSFSHPID[TS02WIX1] > 0
              )
                TS02W01.TS02WIX2 = 1; /* ===> Set index*/

                while (TS02W01.TS02WIX2 <= 10) /* ===> Until end of array*/

                  if (TS02W03.TSFSHPID[TS02WIX1] == TSWREC.TSW2SHP[TS02WIX2]
                  
                   && 
                  TS02W03.TSIPLNBR[TS02WIX1] == 
                  TSWREC.TSWPLNBR[TS02WIX2]
                  )
                    TSWREC.TSWSHPID[TS02WIX2] = 0;
                    TSWREC.TSW2SHP[TS02WIX2] = 0;
                    TSWREC.TSWBOL[TS02WIX2] = " ";
                    TSWREC.TSWCARCD[TS02WIX2] = " ";
                    TSWREC.TSWCRAFT[TS02WIX2] = " ";
                    TSWREC.TSWSHPNB[TS02WIX2] = " ";
                    TSWREC.TSWORIG[TS02WIX2] = " ";
                    TSWREC.TSWDEST[TS02WIX2] = " ";
                    TSWREC.TSWXWHCD[TS02WIX2] = " ";
                    TSWREC.TSWPLNBR[TS02WIX2] = 0;

                  end

                  TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1;
                                   /* ===> incr count*/

                end /* ===> Until end of array*/

                TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> incr count*/

              end /* ===> Until end of array*/

     /* ----------------------------------------------------*/
     /* Check to see if any more shipment data exists to*/
     /* process in the pass array.*/
     /* ----------------------------------------------------*/

              TS02W01.TS02WIX1 = 1; /* Set index*/

              while (TS02W01.TS02WIX1 <= 10) /* Until end of array*/

                if (TSWREC.TSW2SHP[TS02WIX1] > 0) /* If data exists*/
                  COMMAREA.CATOAP = "TS0V"; /* TS0V*/
                  TS02W01.TS02WIX1 = 10 + 1; /* end loop*/
                else
                  COMMAREA.CATOAP = "TS0P"; /* Set current to TS0P*/
                  TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* incr count*/
                end

              end

            else
              COMMAREA.CATOAP = "TSXX"; /* Default APPL cause error*/

            end /* ===> came from TS0P*/

          end /* ===> came from TS0J*/

        end /* ===> came from TS0U*/

      end /* ===> came from TS0Y*/

    end /* ===> came from TS01*/

  else

    if (COMMAREA.CAFROMAP == "TS01") /* If came from TS01*/
      COMMAREA.CATOAP = "TS01"; /* Set current to TS01*/
    else

      if (COMMAREA.CAFROMAP == "TS0Y") /* If came from TS0Y*/
        COMMAREA.CATOAP = "TS0Y"; /* Set current to TS0Y*/
      else

        if (COMMAREA.CAFROMAP == "TR0D") /* If came from TR0D*/
          COMMAREA.CATOAP = "TS01"; /* Set current to TS01*/
        else
          COMMAREA.CATOAP = "TSXX"; /* Default APPL cause error*/
        end /* ===> came from TR0D*/

      end /* ===> came from TS0Y*/

    end /* ===> came from TS01*/

  end /* ===> came from TS0V*/

  COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

  TS02S-TS-1(); /* ===> Purge temp storage*/

  XSTSS01(); /* transfer to application*/

  TS02M001.XXXPRCNM = "2-61000"; /* Process name*/

  exit stack; /* Exit to redisplay map*/


   /* **                                                        ***/
   /* ********************** End of TS02-61000 ********************/
end // end TS02-61000

// Default un-assigned cartons
Function TS02-62000()
   /* **---------------------------------------------------------*/
   /* **  Default TS02W23, the last map/T.S. storage to the new*/
   /* **  table with container carton data, TS02W26.*/
   /* ***/
   /* **  Note: The TS02W23 record is correctly formatted and*/
   /* **          at this point has not been modified for the*/
   /* **          for the displayed container.*/
   /* **        This  process will ensure that no cartons will*/
   /* **           be lost, un-assigned.*/
   /* **-----------------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> WS23 detail index*/

  if (0 in TS02W26.TSOFRCRT)
    TS02W01.TS02WIX2 = sysVar.arrayIndex; /* ===> WS26 detail index*/
  end

  while (TS02W23.TSOFRCRT[TS02WIX1] > 0
   && TS02W01.TS02WIX2 <= TS02W01.TS02WMCR)
                                   /* ===> max carton range entries*/

    TS02W26.TSOFRCRT[TS02WIX2] = TS02W23.TSOFRCRT[TS02WIX1];
    TS02W26.TSOTOCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1];
    TS02W26.TS02WAFL[TS02WIX2] = "Y";
    TS02W26.TSHNKCN[TS02WIX2] = TS02W01.TSHNKCN[TS02WIXC];
    TS02W26.TSHCNTNR[TS02WIX2] = TS02W01.TSHCNTNR[TS02WIXC];

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> WS23 cntnr/crtn index*/
    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> WS26 new table index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-62000 ********************/
end // end TS02-62000

// * Assign cartons to curr cntnr
Function TS02-63000()
   /* ------------------------------------------------------------*/
   /*  */
   /* Assign carton ranges to the current container, TS02W23,*/
   /* depending on the ranges that the user has entered*/
   /* on the screen.*/
   /*  */
   /* 1. Get the 1st T.S. Page, map entered data*/
   /*  */
   /* 2. Process each T.S. range with the original compressed*/
   /* ranges in TS02W23 for the current container.*/
   /*  */
   /* 3. Load new record with container carton data, TS02W26*/
   /* ------------------------------------------------------------*/
   /*  */
   /* ------------------------------------------------------------*/
   /* If the current page has been changed, update the page in*/
   /* storage before obtaining the next one to display.*/
   /* ------------------------------------------------------------*/


  TS02W01.TS02WPAG = TS02W01.XXXTSPAG; /* ===> Save T.S. page*/


  if (TS02W01.TS02WSWU == "Y") /* Current page was changed*/

    TS02S-TS-3(); /* Update temporary storage page*/

    TS02W01.TS02WSWU = "N"; /* Storage update switch*/

  end

  TS02W01.XXXTSPAG = 1; /* ===> T.S. Page index*/

  TS02S-TS-4(); /* ===> Obtain temporary storage page*/


     /* **------------------------------------------------------*/
     /* **  Process all T.S. ranges with the original compressed*/
     /* **  ranges, TS02W23 for the current container.*/
     /* **------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> map/T.S. carton table index*/

  while (TS02W01.XXXTSPAG <= TS02W01.TA5TSQIX) /* ===> While move T.S. pages*/

    if (TS02W05.TSOFRCRT[TS02WIX1] > 0) /* ===> If crtn exists*/

         /* **------------------------------------------------------*/
         /* **  Process curr T.S. range with the original compressed*/
         /* **  ranges, TS02W23 for the current container.*/
         /* **------------------------------------------------------*/

      TS02W01.TS02WIX2 = 1; /* ===> Init compress index*/
      TS02W01.TS02WFL1 = "N"; /* ===> w.s. flag (table entry made)*/

      while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR /* ===> max cartons*/
       && TS02W01.TS02WFL1 == "N") /* ===> w.s. flag (table entry made)*/


        TS02-63100(); /* ===> adjust compress table with*/
                                   /* assigned flags*/


        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> incr compress index*/

      end

    end /* ===> If crtn exists*/

      /* **----------------------------------------*/
      /* **  Increment the map/T.S. index,*/
      /* **     & get next T.S. page if necessary.*/
      /* **----------------------------------------*/

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> T.S. detail index*/

    if (TS02W01.TS02WIX1 > 33) /* ===> more T.S. detail on page*/

      TS02W01.XXXTSPAG = TS02W01.XXXTSPAG + 1; /* ===> T.S. Page index*/

      if (TS02W01.XXXTSPAG <= TS02W01.TA5TSQIX) /* ===> max T.S. pages*/

        TS02S-TS-4(); /* ===> Obtain temporary storage page*/

        TS02W01.TS02WIX1 = 1; /* ===> map/T.S. carton table index*/

      end /* ===> max T.S. pages*/

    end /* ===> more T.S. detail on page*/

  end /* ===> While more T.S. pages*/


  TS02W01.XXXTSPAG = TS02W01.TS02WPAG; /* ===> reset T.S. page*/

  TS02S-TS-4(); /* ===> read T.S. Page*/


    /* **--------------------------------------------------------*/
    /* **  3. Load new record with container carton data, TS02W26*/
    /* **--------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> WS23 detail index*/

  if (0 in TS02W26.TSOFRCRT)
    TS02W01.TS02WIX2 = sysVar.arrayIndex; /* ===> WS26 detail index*/
  end

  while (TS02W23.TSOFRCRT[TS02WIX1] > 0
   && TS02W01.TS02WIX2 <= TS02W01.TS02WMCR)
                                   /* ===> max carton range entries*/

    TS02W26.TSOFRCRT[TS02WIX2] = TS02W23.TSOFRCRT[TS02WIX1];
    TS02W26.TSOTOCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1];
    TS02W26.TS02WAFL[TS02WIX2] = TS02W23.TS02WAFL[TS02WIX1];
    TS02W26.TSHNKCN[TS02WIX2] = TS02W01.TSHNKCN[TS02WIXC];
    TS02W26.TSHCNTNR[TS02WIX2] = TS02W01.TSHCNTNR[TS02WIXC];

    if (TS02W26.TS02WAFL[TS02WIX2] == "Y")
      TS02W26.TS02WACT[TS02WIXC] = TS02W26.TS02WACT[TS02WIXC] +       TS02W26.TSOTOCRT[TS02WIX2] - TS02W26.TSOFRCRT[TS02WIX2] + 1;
    end

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> WS23 cntnr/crtn index*/
    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> WS26 new table index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-63000 ********************/
end // end TS02-63000

// Assign ranges to current cntnr
Function TS02-63100()
   /* ------------------------------------------------------------*/
   /* --------------------------------------*/
   /* ASSIGN RANGES TO THE CURRENT CONTAINER*/
   /* --------------------------------------*/
   /*  */
   /* Assign ranges to the current container for data that*/
   /* have been entered/exist on the container assignment map*/
   /* for the current container.  These carton assigned*/
   /* ranges exist in Temporary Storage.*/
   /*  */
   /* The new compressed carton table, for current container*/
   /* will be built in record TS02W23 in ascending order.*/
   /*  */
   /* After ranges have been adjusted, the TS02W23 record*/
   /* will be loaded to TS02W26 with the*/
   /* appropriate ranges flaged as assigned.*/
   /*  */
   /* TS02W23 = a record containing current container with*/
   /* carton ranges compressed to map format.*/
   /* Ordered by carton range.*/
   /*  */
   /* TS02W26 = a record containing containers with*/
   /* carton ranges compressed to map format.*/
   /* Ordered by container, carton range.*/
   /* with ranges flaged assigned and not assigned*/
   /*  */
   /*  */
   /* There are three major conditions checks that control*/
   /* the assigning of cartons to current container:*/
   /*  */
   /* 1.  T.S. "From" carton range  >  compress carton range*/
   /*  */
   /* 2.  T.S. "From" carton range*/
   /* between  compress carton range*/
   /*  */
   /* 3.  T.S. "From" carton range  <  compress carton range*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /* **---------------------------------------------------*/
   /* ** Check*/
   /* **   If  end of the new compressed table has been*/
   /* **     reached, then the current carton range from*/
   /* **     the T.S. table did not find a match in the*/
   /* **     current container compressed carton table.*/
   /* ***/
   /* **   Therefore, insert the T.S. range to the*/
   /* **     current container compressed carton table.*/
   /* ***/
   /* **   Since the range did not exist in the current*/
   /* **     container, these cartons will have to be removed*/
   /* **     from the containers where they did exist.*/
   /* **---------------------------------------------------*/
   /*  */

  if (TS02W23.TSOFRCRT[TS02WIX2] == 0)
                                   /* ===> End of new carton compress table*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
    TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> range assigned flag*/

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> Return to previous process*/

  else

     /* **---------------------------------------------------------*/
     /* ** Check*/
     /* **   T.S.  ("From" carton range)*/
     /* **                            > compress carton range*/
     /* **   - No range compressing necessary yet*/
     /* **---------------------------------------------------------*/


    if (TS02W05.TSOFRCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX2])

      /* ======== NEXT SENTENCE ========>*/

    else

       /* **---------------------------------------------------------*/
       /* ** Check -------> "From" carton falls between carton ranges*/
       /* **   T.S. "From" carton range*/
       /* **                          >= compress "From" carton range*/
       /* **   T.S.  ("From" carton range)*/
       /* **                          <= compress "To"   carton range*/
       /* ***/
       /* **---------------------------------------------------------*/

      if (TS02W05.TSOFRCRT[TS02WIX1] >= TS02W23.TSOFRCRT[TS02WIX2]
       && TS02W05.TSOFRCRT[TS02WIX1] <= TS02W23.TSOTOCRT[TS02WIX2])

        TS02-63110(); /* ===> Do compression*/

        return; /* ===> Return to previous process*/


      else

         /* **---------------------------------------------------------*/
         /* ** Check*/
         /* **    T.S. "From" carton range < compress carton range*/
         /* **---------------------------------------------------------*/

        if (TS02W05.TSOFRCRT[TS02WIX1] < TS02W23.TSOFRCRT[TS02WIX2])

          TS02-63114(); /* ===> Do compression*/

          return; /* ===> Return to previous process*/


        else /* ===> Q/A Problem*/

           /* **---------------------------------------------------------*/
           /* **    This will never happen but put here for Q/A.*/
           /* **---------------------------------------------------------*/

          converseLib.validationFailed(10); /* ===> Indicate system error*/
          TS02M001.XXXPRCNM = "2-63100"; /* ===> module identifier*/
          set TS02M001.TSOFRCRT[TS02WIX1] cursor, bold;

          exit stack; /* ===> Exit to re-display map*/

        end /* ===> T.S. "From" carton range < compress carton range*/

      end /* ===> T.S. "From" carton range between compress range*/

    end /* ===> T.S.  ("From" carton range - 1) > compress range*/

  end /* ===> End of T.S. carton compress*/
                                   /* table*/


   /* **                                                        ***/
   /* ********************** End of TS02-63100 ********************/
end // end TS02-63100

// W05 "From" in W23 carton range
Function TS02-63110()
   /* ------------------------------------------------------------*/
   /*  */
   /* T.S. from carton range*/
   /* between compress carton range*/
   /*  */
   /* ---------------------------------------------------------*/
   /*  */
   /*  */
   /* **--------------------------------------------------------*/
   /* ** If the T.S. "FROM" carton range*/
   /* **                         = compress "FROM" carton range*/
   /* ***/
   /* **  There are three major conditions checks that control*/
   /* **    the assigning of cartons to current container:*/
   /* ***/
   /* **  Check*/
   /* **  1. If the T.S. "TO" carton range*/
   /* **                         = compress "TO" carton range*/
   /* ***/
   /* **  2. If the T.S. "TO" carton range*/
   /* **                         < compress "TO" carton range*/
   /* ***/
   /* **  3. If the T.S. "TO" carton range*/
   /* **                         > compress "TO" carton range*/
   /* ***/
   /* **  For current container:*/
   /* **    - Flag the range as assigned*/
   /* **    - Split out any non-assigned ranges*/
   /* ***/
   /* **--------------------------------------------------------*/
   /*  */

  if (TS02W05.TSOFRCRT[TS02WIX1] == TS02W23.TSOFRCRT[TS02WIX2])

    TS02-63111(); /* ===> W05 "FROM" carton = compress "FROM" carton*/

    return; /* ===> Return to previous process*/

  end /* ===> T.S. "FROM" = W23 "FROM"*/


   /* **--------------------------------------------------------*/
   /* ** If the T.S. "FROM" carton range*/
   /* **                         > compress "FROM" carton range*/
   /* ***/
   /* **  1. Split off the 1st portion of the range as an*/
   /* **     un-assigned range.*/
   /* ***/
   /* **  Then proceed as if the T.S. "FROM" Carton range*/
   /* **                         = compress "FROM" carton range*/
   /* ***/
   /* **  There are three major conditions checks that control*/
   /* **    the assigning of cartons to current container:*/
   /* ***/
   /* **  Check*/
   /* **  1. If the T.S. "TO" carton range*/
   /* **                         = compress "TO" carton range*/
   /* ***/
   /* **  2. If the T.S. "TO" carton range*/
   /* **                         < compress "TO" carton range*/
   /* ***/
   /* **  3. If the T.S. "TO" carton range*/
   /* **                         > compress "TO" carton range*/
   /* ***/
   /* **  For current container:*/
   /* **    - Flag the range as assigned*/
   /* **    - Split out any non-assigned ranges*/
   /* ***/
   /* **--------------------------------------------------------*/
   /*  */

  if (TS02W05.TSOFRCRT[TS02WIX1] > TS02W23.TSOFRCRT[TS02WIX2])

    TS02-63113(); /* ===> T.S. "FROM" carton > compress*/
                                   /* "FROM" carton*/

  end /* ===> T.S. "FROM" = compress "FROM"*/

   /* **                                                        ***/
   /* ********************** End of TS02-63110 ********************/
end // end TS02-63110

// W05 "From" =  W23 "From" crtn
Function TS02-63111()
   /* ------------------------------------------------------------*/
   /*  */
   /* T.S. "FROM" carton range*/
   /* between compress carton range*/
   /*  */
   /* and the T.S. "FROM" carton range*/
   /* = compress "FROM" carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /* ***/
   /* **  There are three major conditions checks that control*/
   /* **    the assigning of cartons to current container:*/
   /* ***/
   /*  */
   /* Check*/
   /* 1. If the T.S. "TO" carton range*/
   /* = compress "TO" carton range*/
   /*  */
   /* 2. If the T.S. "TO" carton range*/
   /* < compress "TO" carton range*/
   /*  */
   /* 3. If the T.S. "TO" carton range*/
   /* > compress "TO" carton range*/
   /*  */
   /* For current container:*/
   /* - Flag the range as assigned*/
   /* - Split out any non-assigned ranges*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /*  */
   /* ***/
   /* **--------------------------------------------------------*/
   /* **  1. If the T.S. "TO" carton range*/
   /* **                         = compress "TO" carton range*/
   /* **--------------------------------------------------------*/
   /* ***/

  if (TS02W05.TSOTOCRT[TS02WIX1] == TS02W23.TSOTOCRT[TS02WIX2])

    TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/
    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /* ***/
   /* **--------------------------------------------------------*/
   /* **  2. If the T.S. "TO" carton range*/
   /* **                         < compress "TO" carton range*/
   /* **--------------------------------------------------------*/
   /* ***/

  if (TS02W05.TSOTOCRT[TS02WIX1] < TS02W23.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WWK4 = TS02W23.TSOTOCRT[TS02WIX2];

    TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
    TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/

    TS02-04214(); /* ===> shift out one range*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1] + 1;
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;
    TS02W23.TS02WAFL[TS02WIX2] = " "; /* ===> assigned range flag*/

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /* ***/
   /* **--------------------------------------------------------*/
   /* **  3. If the T.S. "TO" carton range*/
   /* **                         > compress "TO" carton range*/
   /* ***/
   /* **     - Find the next range > T.S. "TO" range*/
   /* ***/
   /* **     - Determine if T.S. "TO" range is between the*/
   /* **          previously found range.*/
   /* ***/
   /* **     - Split un-assigned portion of range out*/
   /* ***/
   /* **     - Shift ranges in to account for the new entered*/
   /* **          range spreading over several ranges.*/
   /* ***/
   /* **--------------------------------------------------------*/
   /* ***/

  if (TS02W05.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> Next range position*/

    while (TS02W05.TSOTOCRT[TS02WIX1] >= TS02W23.TSOFRCRT[TS02WIX3]
     && TS02W23.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> Next range position*/

    end /* ===> While T.S. "TO" < Next W23*/
                                   /* "FROM"*/

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1; /* ===> Prev range position*/


    if (TS02W01.TS02WIX2 == TS02W01.TS02WIX3) /* ===> no range overlap occured*/

      TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
      TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

    else /* ===> range overlap encountered*/

      if (TS02W05.TSOTOCRT[TS02WIX1] >= TS02W23.TSOTOCRT[TS02WIX3])

        TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
        TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
        TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

        TS02-04212(); /* ===> shift the compress ranges*/

      else /* ===> T.S. "TO" range between a carton*/
                                   /* range*/

        TS02W01.TS02WWK4 = TS02W23.TSOTOCRT[TS02WIX3];
        TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
        TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/
        TS02W01.TS02WIXW = TS02W01.TS02WIX3; /* ===> Temp index*/

        TS02-04214(); /* ===> shift the compress ranges*/

        TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1] + 1;
        TS02W23.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;
        TS02W01.TS02WIX3 = TS02W01.TS02WIXW + 1; /* ===> insert position*/

        TS02-04212(); /* ===> shift the compress ranges*/

      end /* ===> T.S. "TO" > W23 "TO"*/

    end /* ===> (ix2 =  ix3) check*/

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end /* ===> T.S. "TO" > W23 "TO"*/


   /* **                                                        ***/
   /* ********************** End of TS02-63111 ********************/
end // end TS02-63111

// W05 "From" >  W23 "From" crtn
Function TS02-63113()
   /* ------------------------------------------------------------*/
   /*  */
   /* T.S. "FROM" carton range*/
   /* between compress carton range*/
   /*  */
   /* and  the T.S. "FROM" carton range*/
   /* > compress "FROM" carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /* **----------------------------------------------------*/
   /* ** There are three major conditions checks that control*/
   /* **    the assigning of cartons to current container:*/
   /* **----------------------------------------------------*/
   /*  */
   /* First,*/
   /* Split off the 1st portion of the range as an*/
   /* un-assigned range.*/
   /*  */
   /* Then proceed as if the T.S. "FROM" Carton range*/
   /* = compress "FROM" carton range*/
   /*  */
   /* Check:*/
   /* ------*/
   /* 1. If the T.S. "TO" carton range*/
   /* = compress "TO" carton range*/
   /*  */
   /* 2. If the T.S. "TO" carton range*/
   /* < compress "TO" carton range*/
   /*  */
   /* 3. If the T.S. "TO" carton range*/
   /* > compress "TO" carton range*/
   /*  */
   /* For current container:*/
   /* - Flag the range as assigned*/
   /* - Split out any non-assigned ranges*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /* **--------------------------------------------------------*/
   /* **  A. Split off the 1st portion of the range as an*/
   /* **     un-assigned range.*/
   /* ***/
   /* **  Then proceed as if the T.S. "FROM" Carton range*/
   /* **                         = compress "FROM" carton range*/
   /* **--------------------------------------------------------*/

  TS02W01.TS02WWK4 = TS02W23.TSOTOCRT[TS02WIX2];

  TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1] - 1;

   /* ***/
   /* **--------------------------------------------------------*/
   /* **  1. If the T.S. "TO" carton range*/
   /* **                         = compress "TO" carton range*/
   /* **   For the container's carton table shift out one range*/
   /* **--------------------------------------------------------*/
   /* ***/
  if (TS02W05.TSOTOCRT[TS02WIX1] == TS02W01.TS02WWK4)

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/

    TS02-04214(); /* ===> shift out one range*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;
    TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/
    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /* ***/
   /* **--------------------------------------------------------*/
   /* **  2. If the T.S. "TO" carton range*/
   /* **                         < compress "TO" carton range*/
   /* **--------------------------------------------------------*/
   /* ***/
  if (TS02W05.TSOTOCRT[TS02WIX1] < TS02W01.TS02WWK4)

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/

    TS02-04214(); /* ===> shift out one range*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
    TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/

    TS02-04214(); /* ===> shift out one range*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1] + 1;
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;
    TS02W23.TS02WAFL[TS02WIX2] = " "; /* ===> assigned range flag*/

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /* ***/
   /* **--------------------------------------------------------*/
   /* **  3. If the T.S. "TO" carton range*/
   /* **                         > compress "TO" carton range*/
   /* ***/
   /* **     - Find the next range > T.S. "TO" range*/
   /* ***/
   /* **     - Determine if T.S. "TO" range is between the*/
   /* **          previously found range.*/
   /* ***/
   /* **     - Split un-assigned portion of range out*/
   /* ***/
   /* **     - Shift ranges in to account for the new entered*/
   /* **          range spreading over several ranges.*/
   /* ***/
   /* **--------------------------------------------------------*/
   /* ***/
   /*  */
  if (TS02W05.TSOTOCRT[TS02WIX1] > TS02W01.TS02WWK4)

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> Next range position*/

    while (TS02W05.TSOTOCRT[TS02WIX1] >= TS02W23.TSOFRCRT[TS02WIX3]
     && TS02W23.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> Next range position*/

    end /* ===> While T.S. "TO" < Next W23*/
                                   /* "FROM"*/

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1; /* ===> Prev range position*/

    if (TS02W01.TS02WIX2 == TS02W01.TS02WIX3) /* ===> no range overlap occured*/

      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/

      TS02-04214(); /* ===> shift out one range*/

      TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
      TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

    else /* ===> range overlap encountered*/

      if (TS02W05.TSOTOCRT[TS02WIX1] >= TS02W23.TSOTOCRT[TS02WIX3])

        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/
        TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
        TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
        TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

        TS02-04212(); /* ===> shift the compress ranges*/

      else /* ===> T.S. "TO" range between a carton*/
                                   /* range*/

        TS02W01.TS02WWK4 = TS02W23.TSOTOCRT[TS02WIX3];
        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/
        TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
        TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
        TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/
        TS02W01.TS02WIXW = TS02W01.TS02WIX3; /* ===> Temp index*/

        TS02-04214(); /* ===> shift the compress ranges*/

        TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1] + 1;
        TS02W23.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;
        TS02W01.TS02WIX3 = TS02W01.TS02WIXW + 1; /* ===> insert position*/

        TS02-04212(); /* ===> shift the compress ranges*/

      end /* ===> T.S. "TO" > W23 "TO"*/

    end /* ===> T.S. "TO" > W23 "TO"*/

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end /* ===> T.S. "TO" > W23 "TO"*/


   /* **                                                        ***/
   /* ********************** End of TS02-63113 ********************/
end // end TS02-63113

// W05 "From" <  W23 carton range
Function TS02-63114()
   /* ---------------------------------------------------------*/
   /* T.S. "FROM" carton range*/
   /* <   compress carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /* **-----------------------------------------------------*/
   /* **  There are three major conditions checks that control*/
   /* **    the assigning of cartons to current container:*/
   /* **-----------------------------------------------------*/
   /*  */
   /* Check:*/
   /*  */
   /* 1.  If the T.S. "TO" carton range*/
   /* <  compress "FROM" carton range*/
   /*  */
   /* 2.  If the T.S. "TO" carton range*/
   /* between  compress  carton range*/
   /*  */
   /* 3.  If the T.S. "TO" carton range*/
   /* >  compress "TO"   carton range*/
   /*  */
   /* For current container:*/
   /* - Flag the range as assigned*/
   /* - Split ranges assigned/un-assigned*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /* **--------------------------------------------------------*/
   /* **   1.  If the T.S. "TO" carton range*/
   /* **                         <  compress "FROM" carton range*/
   /* **--------------------------------------------------------*/

  if (TS02W05.TSOTOCRT[TS02WIX1] < TS02W23.TSOFRCRT[TS02WIX2])

    TS02-04214(); /* ===> shift out one range*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
    TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/
    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /* **--------------------------------------------------------*/
   /* **   2.  If the T.S. "TO" carton range*/
   /* **                  between  compress  carton range*/
   /* **--------------------------------------------------------*/

  if (TS02W05.TSOTOCRT[TS02WIX1] >= TS02W23.TSOFRCRT[TS02WIX2]
   && TS02W05.TSOTOCRT[TS02WIX1] < TS02W23.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WWK4 = TS02W23.TSOTOCRT[TS02WIX2];

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
    TS02W23.TS02WAFL[TS02WIX2] = "Y"; /* ===> assigned range flag*/

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/

    TS02-04214(); /* ===> shift out one range*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1] + 1;
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end /* ===> T.S. "TO" carton range between*/
                                   /* compress carton range*/


   /* **--------------------------------------------------------*/
   /* **   3.  If the T.S. "TO" carton range*/
   /* **                        >  compress "TO"   carton range*/
   /* **--------------------------------------------------------*/

  if (TS02W05.TSOTOCRT[TS02WIX1] >= TS02W23.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1;

    while (TS02W05.TSOTOCRT[TS02WIX1] >= TS02W23.TSOFRCRT[TS02WIX3]
     && TS02W23.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;
                                   /* ===> index for previous range*/

    TS02W01.TS02WWK4 = TS02W23.TSOTOCRT[TS02WIX3];

    if (TS02W05.TSOTOCRT[TS02WIX1] < TS02W23.TSOTOCRT[TS02WIX3])

      TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
      TS02W23.TS02WAFL[TS02WIX2] = "Y";

      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> insert position*/
      TS02W01.TS02WIXW = TS02W01.TS02WIX3; /* ===> Temp index*/

      TS02-04214(); /* ===> shift out one range*/

      TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1] + 1;
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;
      TS02W01.TS02WIX3 = TS02W01.TS02WIXW + 1; /* ===> insert position*/

    else

      TS02W23.TSOFRCRT[TS02WIX2] = TS02W05.TSOFRCRT[TS02WIX1];
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W05.TSOTOCRT[TS02WIX1];
      TS02W23.TS02WAFL[TS02WIX2] = "Y";

    end

    TS02-04212(); /* ===> shift the compress ranges*/

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

   /* **                                                        ***/
   /* ********************** End of TS02-63114 ********************/
end // end TS02-63114

// * Adjust crtns from cntnr
Function TS02-64000()
   /* ------------------------------------------------------------*/
   /* This module will take assigned carton ranges and remove*/
   /* the cartons that had belonged to containers that have not*/
   /* been processed yet.*/
   /* ------------------------------------------------------------*/
   /*  */

  TS02W01.TS02WIX1 = 1; /* ===> TS02W23 carton table index*/


  while (TS02W23.TSOFRCRT[TS02WIX1] > 0 /* ===> If crtn exists*/
   && TS02W01.TS02WIX1 <= TS02W01.TS02WMCR) /* ===> max cartons*/

    if (TS02W23.TS02WAFL[TS02WIX1] == "Y") /* ===> If crtn range assigned*/

         /* **------------------------------------------------------*/
         /* **  Process current TS02W23 range with the compressed*/
         /* **  ranges, in TS02W24, for the remaining containers that*/
         /* **  still need to be processed.*/
         /* **------------------------------------------------------*/

      if (TS02W01.TSHNKCN[TS02WIXC] in TS02W24.TSHNKCN) /* ===> get index*/
        TS02W01.TS02WIX2 = sysVar.arrayIndex; /* ===> Init index TS02W24*/
      end

      while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR /* ===> max cartons*/
       && TS02W24.TSOFRCRT[TS02WIX2] > 0) /* ===> If crtn exists*/


        TS02-64100(); /* ===> remove ranges assigned from the*/
                                   /* not yet processed cntnrs*/


        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> incr TS02W24 index*/

      end

    end

      /* **----------------------------------------*/
      /* **  Increment the TS02W23 index,*/
      /* **----------------------------------------*/

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> T.S. detail index*/


  end /* ===> More ranges exist in TS02W23*/


   /* **                                                        ***/
   /* ********************** End of TS02-64000 ********************/
end // end TS02-64000

// Remove crtn range from cntnrs
Function TS02-64100()
   /* ------------------------------------------------------------*/
   /* This module will take a carton range and remove the*/
   /* the cartons that had belonged to containers that have not*/
   /* been processed yet.*/
   /* ------------------------------------------------------------*/


     /* **---------------------------------------------------------*/
     /* ** Check*/
     /* **   Assigned  ("From" carton range)*/
     /* **                            > compress carton range*/
     /* **   - No carton range need to be adjusted yet*/
     /* **---------------------------------------------------------*/


  if (TS02W23.TSOFRCRT[TS02WIX1] > TS02W24.TSOTOCRT[TS02WIX2])

      /* ======== NEXT SENTENCE ========>*/

  else

       /* **---------------------------------------------------------*/
       /* ** Check*/
       /* **   Assigned "From" carton range*/
       /* **                          >= compress "From" carton range*/
       /* **   Assigned "From" carton range*/
       /* **                          <= compress "To"   carton range*/
       /* ***/
       /* **---------------------------------------------------------*/

    if (TS02W23.TSOFRCRT[TS02WIX1] >= TS02W24.TSOFRCRT[TS02WIX2]
     && TS02W23.TSOFRCRT[TS02WIX1] <= TS02W24.TSOTOCRT[TS02WIX2])

      TS02-64110(); /* ===> Do carton range removing*/

      return; /* ===> Return to previous process*/


    else

         /* **---------------------------------------------------------*/
         /* ** Check*/
         /* **    Assigned "From" carton range < compress carton range*/
         /* **---------------------------------------------------------*/

      if (TS02W23.TSOFRCRT[TS02WIX1] < TS02W24.TSOFRCRT[TS02WIX2])

        TS02-64120(); /* ===> Do compression*/

        return; /* ===> Return to previous process*/


      else /* ===> Q/A Problem*/

           /* **---------------------------------------------------------*/
           /* **    This will never happen but put here for Q/A.*/
           /* **---------------------------------------------------------*/

        converseLib.validationFailed(10); /* ===> Indicate system error*/
        TS02M001.XXXPRCNM = "2-64100"; /* ===> module identifier*/

        exit stack; /* ===> Exit to re-display map*/

      end /* ===> Assigned "From" carton range <*/
                                   /* TS02W24  carton range*/

    end /* ===> Assigned "From" carton range*/
                                   /* between TS02W24  range*/

  end /* ===> Assigned  "From" carton range  >*/
                                   /* TS02W24 range*/


   /* **                                                        ***/
   /* ********************** End of TS02-64100 ********************/
end // end TS02-64100

// "FROM"  between carton range
Function TS02-64110()
   /* ---------------------------------------------------------*/
   /* Assigned "FROM" carton range*/
   /* between TS02W24 carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/


    /* **--------------------------------------------------------*/
    /* ** If the Assigned "FROM" carton range*/
    /* **                    =  TS02W24 carton "FROM" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOFRCRT[TS02WIX1] == TS02W24.TSOFRCRT[TS02WIX2])

    TS02-64111(); /* ===> remove assigned range from*/
                                   /* containers*/

    return; /* ===> return to previous process*/

  end /* ===> W23 "FROM" = W24 "FROM"*/


    /* **--------------------------------------------------------*/
    /* ** If the Assigned "FROM" carton range*/
    /* **                    >  TS02W24 carton "FROM" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOFRCRT[TS02WIX1] > TS02W24.TSOFRCRT[TS02WIX2])

    TS02-64113(); /* ===> remove assigned range from*/
                                   /* containers*/

  end /* ===> W23 "FROM" > W24 "FROM"*/


   /* **                                                        ***/
   /* ********************** End of TS02-64110 ********************/
end // end TS02-64110

// W23 "FROM"  = W24 "FROM" range
Function TS02-64111()
   /* ---------------------------------------------------------*/
   /* Assigned "FROM" carton range*/
   /* between TS02W24 carton range*/
   /* and*/
   /* the Assigned "FROM" carton range*/
   /* =  TS02W24 carton "FROM" range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */


    /* **--------------------------------------------------------*/
    /* ** If the Assigned "TO" carton range*/
    /* **                           <  TS02W24 carton "TO" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] < TS02W24.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WWK1 = TS02W24.TSOFRCRT[TS02WIX2];
    TS02W01.TS02WWK2 = TS02W23.TSOTOCRT[TS02WIX1];

    TS02W24.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;

    return; /* ===> return to previous process*/

  end

    /* **--------------------------------------------------------*/
    /* ** If the Assigned "TO" carton range*/
    /* **                           >= TS02W24 carton "TO" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

      /* **--------------------------------------------------------*/
      /* **  For every range that the "TO" carton exceeds the*/
      /* **    "FROM" carton in the compress table.*/
      /* **--------------------------------------------------------*/

    while (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOFRCRT[TS02WIX3]
     && TS02W24.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOTOCRT[TS02WIX3])

      /* ===> remove range, it has been assigned*/
      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 - 1;

    else

      TS02W24.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;
      TS02W24.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX3];

    end

    TS02-64112(); /* ===> Shift compressed carton ranges*/

  end



   /* **                                                        ***/
   /* ********************** End of TS02-64111 ********************/
end // end TS02-64111

// Shift compress crtn ranges in
Function TS02-64112()
   /* ---------------------------------------------------------*/
   /* Since the new range built could have spread over*/
   /* several ranges. The ranges must be removed from the*/
   /* compress table and the subsequent ranges in the table*/
   /* must be shifted to keep the table in order with no*/
   /* zeroes within the valid list of ranges.*/
   /*  */
   /* ie... if several ranges were merged with range "i"*/
   /* then range shift must occur.*/
   /* where index*/
   /* i = next range not merged.*/
   /* and*/
   /* j = next range after built one*/
   /*  */
   /* i     --> j*/
   /* i + 1 --> j + 1*/
   /* i + 1 --> j + 1*/
   /* i + 1 --> j + 1*/
   /* .   -->   .*/
   /* .   -->   .*/
   /* .   -->   .*/
   /* ----------------------------------------------------------*/
   /*  */

  TS02W01.TS02WIX4 = TS02W01.TS02WIX3 + 1; /* ===> next range not merged*/
  TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1;
                                   /* ===> next range after built one*/
  if (TS02W01.TS02WIX4 > TS02W01.TS02WIX3) /* ===> compress index*/

    while (TS02W01.TS02WIX4 <= TS02W01.TS02WMCR
     && TS02W24.TSOFRCRT[TS02WIX4] > 0)

      TS02W24.TSOFRCRT[TS02WIX3] = TS02W24.TSOFRCRT[TS02WIX4];
      TS02W24.TSOTOCRT[TS02WIX3] = TS02W24.TSOTOCRT[TS02WIX4];
      TS02W24.TSHNKCN[TS02WIX3] = TS02W24.TSHNKCN[TS02WIX4];
      TS02W24.TSHCNTNR[TS02WIX3] = TS02W24.TSHCNTNR[TS02WIX4];
      TS02W24.TS02WAFL[TS02WIX3] = TS02W24.TS02WAFL[TS02WIX4];

      TS02W01.TS02WIX4 = TS02W01.TS02WIX4 + 1; /* ===> next compress index*/
      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> next compress index*/

    end

    /* **---------------------------------------------*/
    /* ** Clear the remaining ranges that have already*/
    /* ** been shifted.*/
    /* **---------------------------------------------*/

    while (TS02W01.TS02WIX3 <= TS02W01.TS02WMCR
     && TS02W24.TSOFRCRT[TS02WIX3] > 0)

      TS02W24.TSOFRCRT[TS02WIX3] = 0;
      TS02W24.TSOTOCRT[TS02WIX3] = 0;
      TS02W24.TSHNKCN[TS02WIX3] = 0;
      TS02W24.TSHCNTNR[TS02WIX3] = " ";
      TS02W24.TS02WAFL[TS02WIX3] = " ";

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> next compress index*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS02-64112 ********************/
end // end TS02-64112

// W23 "FROM"  > W24 "FROM" range
Function TS02-64113()
   /* ---------------------------------------------------------*/
   /* Assigned "FROM" carton range*/
   /* between TS02W24 carton range*/
   /* and*/
   /*  */
   /* Assigned "FROM" carton range*/
   /* >  TS02W24 carton "FROM" range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */

  TS02W01.TS02WWK4 = TS02W24.TSOTOCRT[TS02WIX2];
  TS02W24.TSOTOCRT[TS02WIX2] = TS02W23.TSOFRCRT[TS02WIX1] - 1;

    /* **--------------------------------------------------------*/
    /* ** If the Assigned "TO" carton range*/
    /* **                           <  TS02W24 carton "TO" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] < TS02W01.TS02WWK4)

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> Insert position*/

    TS02-64114(); /* ===> Shift compressed carton ranges*/
                                   /* out 1 range*/

    TS02W24.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;
    TS02W24.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;
    TS02W24.TSHCNTNR[TS02WIX2] = TS02W01.TSHCNTNR[TS02WIXC];
    TS02W24.TSHNKCN[TS02WIX2] = TS02W01.TSHNKCN[TS02WIXC];

    return; /* ===> return to previous process*/

  end

    /* **--------------------------------------------------------*/
    /* ** If the Assigned "TO" carton range*/
    /* **                           >= TS02W24 carton "TO" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W01.TS02WWK4)

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

      /* **--------------------------------------------------------*/
      /* **  For every range that the "TO" carton exceeds the*/
      /* **    "FROM" carton in the compress table*/
      /* **--------------------------------------------------------*/

    while (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOFRCRT[TS02WIX3]
     && TS02W24.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W01.TS02WIX2 == TS02W01.TS02WIX3)

      return; /* ===> return to previous process*/

    end

    if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOTOCRT[TS02WIX3])

      /* ========== NEXT SENTENCE ==========>*/

    else

      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> Insert position*/
      TS02W01.TS02WIXW = TS02W01.TS02WIX3;
      TS02-64114(); /* ===> Shift compressed carton ranges*/
                                   /* out 1 range*/

      TS02W01.TS02WIX3 = TS02W01.TS02WIXW + 1; /* ===> Insert position*/
      TS02W24.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;
      TS02W24.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX3];

      TS02W24.TSHCNTNR[TS02WIX2] = TS02W01.TSHCNTNR[TS02WIXC];
      TS02W24.TSHNKCN[TS02WIX2] = TS02W01.TSHNKCN[TS02WIXC];

    end

    TS02-64112(); /* ===> Shift compressed carton ranges*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-64113 ********************/
end // end TS02-64113

// Shift compress crtn ranges out
Function TS02-64114()
   /* ---------------------------------------------------------*/
   /* Make room for the newly created carton range*/
   /* by shifting the compress carton table ranges out*/
   /* one position.*/
   /*  */
   /* ie... find the next available 0 range in the table*/
   /* and start shifting ranges.*/
   /*  */
   /* Where i = next 0 range available*/
   /* until position of newly created range*/
   /*  */
   /* i - 1 --> i*/
   /* i - 2 --> i - 1*/
   /* i - 3 --> i - 3*/
   /* i - 4 --> i - 4*/
   /* .   --> .*/
   /* .   --> .*/
   /* .   --> .*/
   /* --------------------------------------------------------*/
   /*  */

  if (0 in TS02W24.TSOFRCRT)
    TS02W01.TS02WIX4 = sysVar.arrayIndex;
    TS02W01.TS02WIX3 = TS02W01.TS02WIX4 - 1; /* ===> previous compress index*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TS02M001.XXXPRCNM = "2-64114"; /* ===> Compress table is full*/
    exit stack; /* ===> Exit to re-display map*/
  end

  while (TS02W01.TS02WIX3 >= TS02W01.TS02WIX2)
                                   /* ===> range insert position met*/

    TS02W24.TSOFRCRT[TS02WIX4] = TS02W24.TSOFRCRT[TS02WIX3];
    TS02W24.TSOTOCRT[TS02WIX4] = TS02W24.TSOTOCRT[TS02WIX3];
    TS02W24.TSHNKCN[TS02WIX4] = TS02W24.TSHNKCN[TS02WIX3];
    TS02W24.TSHCNTNR[TS02WIX4] = TS02W24.TSHCNTNR[TS02WIX3];
    TS02W24.TS02WAFL[TS02WIX4] = TS02W24.TS02WAFL[TS02WIX3];

    TS02W01.TS02WIX4 = TS02W01.TS02WIX4 - 1; /* ===> next compress index*/
    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1; /* ===> next compress index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-64114 ********************/
end // end TS02-64114

// "FROM"  <        carton range
Function TS02-64120()
   /* ---------------------------------------------------------*/
   /* Assigned "FROM" carton range*/
   /* <   compress carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */

    /* **--------------------------------------------------------*/
    /* ** check*/
    /* **   If the Assigned ("TO" carton range)*/
    /* **                         < compress carton "FROM" range*/
    /* **--------------------------------------------------------*/


  if (TS02W23.TSOTOCRT[TS02WIX1] < TS02W24.TSOFRCRT[TS02WIX2])

    return; /* ===> return to previous process*/

  end



    /* **--------------------------------------------------------*/
    /* ** check*/
    /* **   If the Assigned  "TO" carton range*/
    /* **                         >= compress carton "FROM" range*/
    /* **   and*/
    /* **      the Assigned  "TO" carton range*/
    /* **                         <= compress carton "TO" range*/
    /* **--------------------------------------------------------*/


  if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOFRCRT[TS02WIX2]
   && TS02W23.TSOTOCRT[TS02WIX1] < TS02W24.TSOTOCRT[TS02WIX2])

    TS02W24.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;

    return; /* ===> return to previous process*/

  end

    /* **--------------------------------------------------------*/
    /* ** The Assigned table*/
    /* **    ("TO" carton      > compress table "TO" carton*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

      /* **--------------------------------------------------------*/
      /* **  For every range that the "TO" carton exceeds the*/
      /* **    "TO" carton in the compress table.*/
      /* **--------------------------------------------------------*/

    while (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOFRCRT[TS02WIX3]
     && TS02W24.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W24.TSOTOCRT[TS02WIX3])

      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 - 1;
    else

      TS02W24.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;
      TS02W24.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX3];

    end

    TS02-64112(); /* ===> Shift compressed carton ranges*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-64120 ********************/
end // end TS02-64120

// * Adjust un-assigned crtns
Function TS02-65000()
   /* ------------------------------------------------------------*/
   /* This module will remove carton ranges that were left*/
   /* un-assigned in a prior container screen and now range is*/
   /* assigned.  This will prevent assigning cartons to the*/
   /* last container particularly when there are 3 or more*/
   /* containers.*/
   /*  */
   /* The method used for assigning ranges to the last*/
   /* container consists of getting all ranges with a ' '*/
   /* and compressing them to a map format.*/
   /*  */
   /* Therefore; this module will control the logic to*/
   /* adjust ranges in the new table record TS02W26.*/
   /* If an an-assigned range has been totally assigned,*/
   /* it will be flaged with an "N" to eliminate it from*/
   /* the ranges availible for building ranges for the*/
   /* container. Otherwise it will be adujusted accordingly.*/
   /* ------------------------------------------------------------*/
   /*  */

  TS02W01.TS02WIX1 = 1; /* ===> TS02W23 carton table index*/
  TS02W01.TS02WIXW = TS02W01.TS02WIXC - 1; /* ===> index previous container*/


  while (TS02W23.TSOFRCRT[TS02WIX1] > 0 /* ===> If crtn exists*/
   && TS02W01.TS02WIX1 <= TS02W01.TS02WMCR) /* ===> max cartons*/

    if (TS02W23.TS02WAFL[TS02WIX1] == "Y") /* ===> If crtn range assigned*/

         /* **------------------------------------------------------*/
         /* **  Process current TS02W23 range with the compressed*/
         /* **  ranges, in TS02W26, for un-assigned carton ranges.*/
         /* ***/
         /* **     Stop processing when array reaches the container*/
         /* **  last loaded to TS02W26. It has ranges already*/
         /* **  assigned appropriately.*/
         /* **------------------------------------------------------*/

      TS02W01.TS02WIX2 = 1; /* ===> Init index TS02W26*/

      while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR /* ===> max cartons*/
       && TS02W26.TSOFRCRT[TS02WIX2] > 0       /* ===> If crtn exists*/
       && TS02W26.TSHNKCN[TS02WIX2] != TS02W01.TSHNKCN[TS02WIXW]
      )
        if (TS02W26.TS02WAFL[TS02WIX2] == " ") /* ===> crtn range un-assigned*/

          TS02-65100(); /* ===> adjust ranges from previously*/
                                   /* un-assigned carton ranges*/
        end

        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> incr TS02W26 index*/

      end

    end

      /* **----------------------------------------*/
      /* **  Increment the TS02W23 index,*/
      /* **----------------------------------------*/

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> W23  index*/


  end /* ===> More ranges exist in TS02W23*/


   /* **                                                        ***/
   /* ********************** End of TS02-65000 ********************/
end // end TS02-65000

// Adjust crtn range from cntnrs
Function TS02-65100()
   /* ------------------------------------------------------------*/
   /* This module will take an un-assigned carton range and*/
   /* adjust it accordingly.*/
   /* ------------------------------------------------------------*/


     /* **---------------------------------------------------------*/
     /* ** Check*/
     /* **   Assigned  ("From" carton range)*/
     /* **                            > compress carton range*/
     /* **   - No carton range need to be adjusted yet*/
     /* **---------------------------------------------------------*/


  if (TS02W23.TSOFRCRT[TS02WIX1] > TS02W26.TSOTOCRT[TS02WIX2])

      /* ======== NEXT SENTENCE ========>*/

  else

       /* **---------------------------------------------------------*/
       /* ** Check*/
       /* **   Assigned "From" carton range*/
       /* **                          >= compress "From" carton range*/
       /* **   Assigned "From" carton range*/
       /* **                          <= compress "To"   carton range*/
       /* ***/
       /* **---------------------------------------------------------*/

    if (TS02W23.TSOFRCRT[TS02WIX1] >= TS02W26.TSOFRCRT[TS02WIX2]
     && TS02W23.TSOFRCRT[TS02WIX1] <= TS02W26.TSOTOCRT[TS02WIX2])

      TS02-65110(); /* ===> Do carton range removing*/

      return; /* ===> Return to previous process*/


    else

         /* **---------------------------------------------------------*/
         /* ** Check*/
         /* **    Assigned "From" carton range < compress carton range*/
         /* **---------------------------------------------------------*/

      if (TS02W23.TSOFRCRT[TS02WIX1] < TS02W26.TSOFRCRT[TS02WIX2])

        TS02-65120(); /* ===> Do compression*/

        return; /* ===> Return to previous process*/


      else /* ===> Q/A Problem*/

           /* **---------------------------------------------------------*/
           /* **    This will never happen but put here for Q/A.*/
           /* **---------------------------------------------------------*/

        converseLib.validationFailed(10); /* ===> Indicate system error*/
        TS02M001.XXXPRCNM = "2-65100"; /* ===> module identifier*/

        exit stack; /* ===> Exit to re-display map*/

      end /* ===> Assigned "From" carton range <*/
                                   /* TS02W26  carton range*/

    end /* ===> Assigned "From" carton range*/
                                   /* between TS02W26  range*/

  end /* ===> Assigned  "From" carton range  >*/
                                   /* TS02W26 range*/

   /* **                                                        ***/
   /* ********************** End of TS02-65100 ********************/
end // end TS02-65100

// "FROM"  between carton range
Function TS02-65110()
   /* ---------------------------------------------------------*/
   /* Assigned "FROM" carton range*/
   /* between TS02W26 carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/


    /* **--------------------------------------------------------*/
    /* ** If the Assigned "FROM" carton range*/
    /* **                    =  TS02W26 carton "FROM" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOFRCRT[TS02WIX1] == TS02W26.TSOFRCRT[TS02WIX2])

    TS02-65111(); /* ===> remove assigned range from*/
                                   /* containers*/

    return; /* ===> return to previous process*/

  end /* ===> W23 "FROM" = W26 "FROM"*/


    /* **--------------------------------------------------------*/
    /* ** If the Assigned "FROM" carton range*/
    /* **                    >  TS02W26 carton "FROM" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOFRCRT[TS02WIX1] > TS02W26.TSOFRCRT[TS02WIX2])

    TS02-65112(); /* ===> remove assigned range from*/
                                   /* containers*/

  end /* ===> W23 "FROM" > W26 "FROM"*/


   /* **                                                        ***/
   /* ********************** End of TS02-65110 ********************/
end // end TS02-65110

// W23 "FROM" = W26 "FROM" range
Function TS02-65111()
   /* ---------------------------------------------------------*/
   /* Assigned "FROM" carton range*/
   /* between TS02W26 carton range*/
   /* and*/
   /* the Assigned "FROM" carton range*/
   /* =  TS02W26 carton "FROM" range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */


    /* **--------------------------------------------------------*/
    /* ** If the Assigned "TO" carton range*/
    /* **                           <  TS02W26 carton "TO" range*/
    /* **   - adjust un-assigned range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] < TS02W26.TSOTOCRT[TS02WIX2])

    TS02W26.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;

    return; /* ===> return to previous process*/

  end

    /* **--------------------------------------------------------*/
    /* ** If the Assigned "TO" carton range*/
    /* **                           >= TS02W26 carton "TO" range*/
    /* **   - flag un-assigned row with "N"*/
    /* **       (signifies 'N'ot to be assigned to last container*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W26.TSOTOCRT[TS02WIX2])

    TS02W26.TS02WAFL[TS02WIX2] = "N";
  end



   /* **                                                        ***/
   /* ********************** End of TS02-65111 ********************/
end // end TS02-65111

// W23 "FROM" > W26 "FROM" range
Function TS02-65112()
   /* ---------------------------------------------------------*/
   /* Assigned "FROM" carton range*/
   /* between TS02W26 carton range*/
   /* and*/
   /*  */
   /* Assigned "FROM" carton range*/
   /* >  TS02W26 carton "FROM" range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */


    /* **--------------------------------------------------------*/
    /* ** If the Assigned "TO" carton range*/
    /* **                           <  TS02W26 carton "TO" range*/
    /* ** Split the un-assigned range into to unassigned ranged*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] < TS02W26.TSOTOCRT[TS02WIX2]
  )
    TS02W01.TS02WWK4 = TS02W26.TSOTOCRT[TS02WIX2];
    TS02W26.TSOTOCRT[TS02WIX2] = TS02W23.TSOFRCRT[TS02WIX1] - 1;

    TS02-65113(); /* ===> Shift compressed carton ranges*/
                                   /* out 1 range*/

    TS02W26.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;
    TS02W26.TSOTOCRT[TS02WIX2] = TS02W01.TS02WWK4;

    return; /* ===> return to previous process*/

  end

    /* **--------------------------------------------------------*/
    /* ** If the Assigned "TO" carton range*/
    /* **                           >= TS02W26 carton "TO" range*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W26.TSOTOCRT[TS02WIX2]
  )
    TS02W26.TSOTOCRT[TS02WIX2] = TS02W23.TSOFRCRT[TS02WIX1] - 1;

  end


   /* **                                                        ***/
   /* ********************** End of TS02-65112 ********************/
end // end TS02-65112

// Shift compress crtn ranges out
Function TS02-65113()
   /* ---------------------------------------------------------*/
   /* Make room for the newly created carton range*/
   /* by shifting the compress carton table ranges out*/
   /* one position.*/
   /*  */
   /* ie... find the next available 0 range in the table*/
   /* and start shifting ranges.*/
   /*  */
   /* Where i = next 0 range available*/
   /* until position of newly created range*/
   /*  */
   /* i - 1 --> i*/
   /* i - 2 --> i - 1*/
   /* i - 3 --> i - 3*/
   /* i - 4 --> i - 4*/
   /* .   --> .*/
   /* .   --> .*/
   /* .   --> .*/
   /* --------------------------------------------------------*/
   /*  */

  if (0 in TS02W26.TSOFRCRT)
    TS02W01.TS02WIX4 = sysVar.arrayIndex;
    TS02W01.TS02WIX3 = TS02W01.TS02WIX4 - 1; /* ===> previous compress index*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TS02M001.XXXPRCNM = "2-65113"; /* ===> Compress table is full*/
    exit stack; /* ===> Exit to re-display map*/
  end

  while (TS02W01.TS02WIX3 >= TS02W01.TS02WIX2)
                                   /* ===> range insert position met*/

    TS02W26.TSOFRCRT[TS02WIX4] = TS02W26.TSOFRCRT[TS02WIX3];
    TS02W26.TSOTOCRT[TS02WIX4] = TS02W26.TSOTOCRT[TS02WIX3];
    TS02W26.TSHNKCN[TS02WIX4] = TS02W26.TSHNKCN[TS02WIX3];
    TS02W26.TSHCNTNR[TS02WIX4] = TS02W26.TSHCNTNR[TS02WIX3];
    TS02W26.TS02WAFL[TS02WIX4] = TS02W26.TS02WAFL[TS02WIX3];

    TS02W01.TS02WIX4 = TS02W01.TS02WIX4 - 1; /* ===> next compress index*/
    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1; /* ===> next compress index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-65113 ********************/
end // end TS02-65113

// "FROM"  <        carton range
Function TS02-65120()
   /* ---------------------------------------------------------*/
   /* Assigned "FROM" carton range*/
   /* <   compress carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /*  */

    /* **--------------------------------------------------------*/
    /* ** check*/
    /* **   If the Assigned ("TO" carton range)*/
    /* **                         < compress carton "FROM" range*/
    /* **--------------------------------------------------------*/


  if (TS02W23.TSOTOCRT[TS02WIX1] < TS02W26.TSOFRCRT[TS02WIX2])

    return; /* ===> return to previous process*/

  end



    /* **--------------------------------------------------------*/
    /* ** check*/
    /* **   If the Assigned  "TO" carton range*/
    /* **                         >= compress carton "FROM" range*/
    /* **   and*/
    /* **      the Assigned  "TO" carton range*/
    /* **                         <= compress carton "TO" range*/
    /* **   - adjust un-assigned range*/
    /* **--------------------------------------------------------*/


  if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W26.TSOFRCRT[TS02WIX2]
   && TS02W23.TSOTOCRT[TS02WIX1] < TS02W26.TSOTOCRT[TS02WIX2])

    TS02W26.TSOFRCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1] + 1;

    return; /* ===> return to previous process*/

  end

    /* **--------------------------------------------------------*/
    /* ** The Assigned table*/
    /* **    ("TO" carton      > compress table "TO" carton*/
    /* **   - flag un-assigned row with "N"*/
    /* **       (signifies 'N'ot to be assigned to last container*/
    /* **--------------------------------------------------------*/

  if (TS02W23.TSOTOCRT[TS02WIX1] >= TS02W26.TSOTOCRT[TS02WIX2])

    TS02W26.TS02WAFL[TS02WIX2] = "N";

  end


   /* **                                                        ***/
   /* ********************** End of TS02-65120 ********************/
end // end TS02-65120

// * Assign cartons to last cntnr
Function TS02-66000()
   /* ------------------------------------------------------------*/
   /*  */
   /* ASSIGN REMAINING CARTONS TO LAST CONTAINER*/
   /*  */
   /* 1) Load the single container/carton range table with*/
   /* the last container's compressed cartons ranges.*/
   /*  */
   /* 2) Cycle through all the cartons in the new carton range*/
   /* table that was built from cartons processed/stored*/
   /* in TS02W26 for previous containers. Only compress*/
   /* ranges that have not been assigned to previous*/
   /* containers.*/
   /*  */
   /* 3) Accumulate carton range count total for map*/
   /*  */
   /* 4) if in an "ADD" option*/
   /* - load the new table with the last containers*/
   /* carton ranges*/
   /* - Increment container index*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  set TS02W23 empty; /* ===> Compressed container/carton*/
                                   /* table*/


   /* **---------------------------------------------------------*/
   /* ** Load last container cartons to container/carton table*/
   /* **---------------------------------------------------------*/

  TS02W01.TS02WIX2 = 1; /* ===> container/carton table index*/

  if (TS02W01.TSHNKCN[TS02WIXC] in TS02W24.TSHNKCN)

    TS02W01.TS02WIX1 = sysVar.arrayIndex;

    while (TS02W01.TS02WIX1 <= TS02W01.TS02WMCR /* ===> While le max cartons*/
     && TS02W24.TSHNKCN[TS02WIX1] > 0) /* ===> and cartons exist in WS24*/

      TS02W23.TSHNKCN[TS02WIX2] = TS02W24.TSHNKCN[TS02WIX1];
      TS02W23.TSHNKCN[TS02WIX2] = TS02W01.TSHNKCN[TS02WIXC];
      TS02W23.TSHCNTNR[TS02WIX2] = TS02W01.TSHCNTNR[TS02WIXC];
      TS02W23.TSOFRCRT[TS02WIX2] = TS02W24.TSOFRCRT[TS02WIX1];
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W24.TSOTOCRT[TS02WIX1];

      TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1;
      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1;

    end

  end


   /* **---------------------------------------------------------*/
   /* ** compress all un-assigned carton ranges in TS02W26 to the*/
   /* ** container/carton table record TS02W23*/
   /* **---------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> container/carton table index*/

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMCR /* ===> While le max cartons*/
   && TS02W26.TSHNKCN[TS02WIX1] > 0) /* ===> and cartons exist in WS26*/

    if (TS02W26.TS02WAFL[TS02WIX1] == " ") /* ===>Assigned carton range flag*/

      TS02W01.TS02WIX2 = 1; /* ===> Init compress index*/
      TS02W01.TS02WFL1 = "N"; /* ===> w.s. flag (table entry made)*/

      while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR /* ===> max cartons*/
       && TS02W01.TS02WFL1 == "N") /* ===> w.s. flag (table entry made)*/


        TS02-66100(); /* ===> compress last container/carton*/
                                   /* range table*/


        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> incr compress index*/

      end

    end /* ===> If cntnr same*/

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> Incr gpc-cpl index*/

  end

   /* **---------------------------------------------------------*/
   /* ** Accumulate carton range count total for map*/
   /* **---------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> W.S. index for   TS02W23 Load*/

  while (TS02W23.TSOFRCRT[TS02WIX1] > 0)

    TS02W23.TS02WGCT = TS02W23.TS02WGCT +     TS02W23.TSOTOCRT[TS02WIX1] - TS02W23.TSOFRCRT[TS02WIX1] + 1;

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1;

  end

  TS02W23.TS02WGST = TS02W24.TS02WGST[TS02WIXC];
   /* ------------------------------------------------------------*/
   /* if in an "ADD" option*/
   /* - load the new table with the last containers carton ranges*/
   /* - Increment container index*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0V" /* If came from TS0V*/
   && TSWREC.TSWFRAPP == "TS0U")  /* via from TS0U*/

    /* **--------------------------------------------------------*/
    /* **  3. Load new record with container carton data, TS02W26*/
    /* **--------------------------------------------------------*/

    TS02W01.TS02WIX1 = 1; /* ===> WS23 detail index*/

    if (0 in TS02W26.TSOFRCRT)
      TS02W01.TS02WIX2 = sysVar.arrayIndex; /* ===> WS26 detail index*/
    end

    while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR
     && TS02W23.TSOFRCRT[TS02WIX1] > 0)
                                   /* ===> max carton range entries*/

      TS02W26.TSOFRCRT[TS02WIX2] = TS02W23.TSOFRCRT[TS02WIX1];
      TS02W26.TSOTOCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX1];
      TS02W26.TS02WAFL[TS02WIX2] = "Y";
      TS02W26.TSHNKCN[TS02WIX2] = TS02W01.TSHNKCN[TS02WIXC];
      TS02W26.TSHCNTNR[TS02WIX2] = TS02W01.TSHCNTNR[TS02WIXC];

      TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> WS23 cntnr/crtn index*/
      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> WS26 new table index*/

    end

    TS02W01.TS02WIXC = TS02W01.TS02WIXC + 1; /* ===> get next container*/

  end

   /* **                                                        ***/
   /* ********************** End of TS02-66000 ********************/
end // end TS02-66000

// Compress range to map format
Function TS02-66100()
   /* ------------------------------------------------------------*/
   /* Compress the cartons into ranges as they would appear*/
   /* on the map.*/
   /*  */
   /* Note:  The new compressed carton table will be built in*/
   /* ascending order.*/
   /*  */
   /* There are three major conditions checks for compression*/
   /*  */
   /* 1.  Original "From" carton range > compress carton range*/
   /*  */
   /* 2.  Original "From" carton range*/
   /* between  compress carton range*/
   /*  */
   /* 3.  Original "From" carton range < compress carton range*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

   /* **---------------------------------------------------*/
   /* ** Check*/
   /* **   If  end of the new compressed table has been*/
   /* **     reached, then the current carton range from*/
   /* **     the original table did not find a match in the*/
   /* **     new compressed carton table.*/
   /* ***/
   /* **   Therefore, insert the original range to the new*/
   /* **     compressed carton table.*/
   /* **---------------------------------------------------*/

  if (TS02W23.TSOFRCRT[TS02WIX2] == 0 /* ===> End of Orig. carton compress*/
   /* table*/
  )                                  
    TS02W23.TSHNKCN[TS02WIX2] = TS02W01.TSHNKCN[TS02WIXC];
    TS02W23.TSHCNTNR[TS02WIX2] = TS02W01.TSHCNTNR[TS02WIXC];
    TS02W23.TSOFRCRT[TS02WIX2] = TS02W26.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W26.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> Return to previous process*/

  else

     /* **---------------------------------------------------------*/
     /* ** Check*/
     /* **   Original  ("From" carton range - 1)*/
     /* **                            > compress carton range*/
     /* **   - No range compressing necessary*/
     /* **---------------------------------------------------------*/

    TS02W01.TS02WWK4 = TS02W26.TSOFRCRT[TS02WIX1] - 1;

    if (TS02W01.TS02WWK4 > TS02W23.TSOTOCRT[TS02WIX2])

      /* ======== NEXT SENTENCE ========>*/

    else

       /* **---------------------------------------------------------*/
       /* ** Check*/
       /* **   Original "From" carton range*/
       /* **                          >= compress "From" carton range*/
       /* **   Original  ("From" carton range - 1)*/
       /* **                          <= compress "To"   carton range*/
       /* ***/
       /* **---------------------------------------------------------*/

      if (TS02W26.TSOFRCRT[TS02WIX1] >= TS02W23.TSOFRCRT[TS02WIX2]
       && TS02W01.TS02WWK4 <= TS02W23.TSOTOCRT[TS02WIX2])

        TS02-66110(); /* ===> Do compression*/

        return; /* ===> Return to previous process*/


      else

         /* **---------------------------------------------------------*/
         /* ** Check*/
         /* **    Original "From" carton range < compress carton range*/
         /* **---------------------------------------------------------*/

        if (TS02W26.TSOFRCRT[TS02WIX1] < TS02W23.TSOFRCRT[TS02WIX2])

          TS02-66120(); /* ===> Do compression*/

          return; /* ===> Return to previous process*/


        else /* ===> Q/A Problem*/

           /* **---------------------------------------------------------*/
           /* **    This will never happen but put here for Q/A.*/
           /* **---------------------------------------------------------*/

          converseLib.validationFailed(10); /* ===> Indicate system error*/
          TS02M001.XXXPRCNM = "2-66100"; /* ===> module identifier*/

          exit stack; /* ===> Exit to re-display map*/

        end /* ===> Original "From" carton range < compress carton range*/

      end /* ===> Original "From" carton range between compress range*/

    end /* ===> Original  ("From" carton range - 1) > compress range*/

  end /* ===> End of Original carton compress table*/


   /* **                                                        ***/
   /* ********************** End of TS02-66100 ********************/
end // end TS02-66100

// "From"  between  carton range
Function TS02-66110()
   /* ---------------------------------------------------------*/
   /* Original from carton range*/
   /* between compress carton range*/
   /*  */
   /* ---------------------------------------------------------*/


    /* **--------------------------------------------------------*/
    /* ** If the original "TO" carton range*/
    /* **                            < compress carton range*/
    /* **--------------------------------------------------------*/

  if (TS02W26.TSOTOCRT[TS02WIX1] <= TS02W23.TSOTOCRT[TS02WIX2])

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

    /* **--------------------------------------------------------*/
    /* ** The orig table "TO" carton > compress table "TO" carton*/
    /* ** and the orig table*/
    /* **    ("TO" carton + 1) < compress table "FROM" carton*/
    /* **   - The original "TO" carton range will now be the*/
    /* **     "TO" carton range for the compressed carton range*/
    /* **      1. Compress range*/
    /* **--------------------------------------------------------*/

  TS02W01.TS02WWK4 = TS02W26.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W26.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX2]
   && TS02W01.TS02WWK4 < TS02W23.TSOFRCRT[TS02WIX2])

    TS02W23.TSOTOCRT[TS02WIX2] = TS02W26.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end


    /* **--------------------------------------------------------*/
    /* ** The orig table "TO" carton > compress table "TO" carton*/
    /* ** and the orig table*/
    /* **    ("TO" carton + 1) >= compress table "FROM" carton*/
    /* **--------------------------------------------------------*/

  TS02W01.TS02WWK4 = TS02W26.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W26.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX2]
   && TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX2])

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

    while (TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX3]
     && TS02W23.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W26.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX3])
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W26.TSOTOCRT[TS02WIX1];
    else
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX3];
    end

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

  end

  TS02-04212(); /* ===> shift the compress ranges*/

   /* **                                                        ***/
   /* ********************** End of TS02-66110 ********************/
end // end TS02-66110

// "From"  <        carton range
Function TS02-66120()
   /* ---------------------------------------------------------*/
   /* Original "From" carton range*/
   /* <   compress carton range*/
   /*  */
   /* ---------------------------------------------------------*/


    /* **--------------------------------------------------------*/
    /* ** check*/
    /* **   If the original ("To" carton range + 1)*/
    /* **                         >= compress carton "From" range*/
    /* **   and*/
    /* **      the original  "To" carton range*/
    /* **                         <= compress carton "To" range*/
    /* **--------------------------------------------------------*/

  TS02W01.TS02WWK4 = TS02W26.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX2]
   && TS02W26.TSOTOCRT[TS02WIX1] <= TS02W23.TSOTOCRT[TS02WIX2])

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W26.TSOFRCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end

    /* **--------------------------------------------------------*/
    /* ** check*/
    /* **   If the original "From" carton range*/
    /* **                         < compress carton "To" range*/
    /* **   and*/
    /* **      the original ("To" carton range + 1)*/
    /* **                         < compress carton "From" range*/
    /* ***/
    /* **  a new carton range will need to be squeezed into*/
    /* **                      the compress carton range table*/
    /* **--------------------------------------------------------*/

  TS02W01.TS02WWK4 = TS02W26.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W26.TSOFRCRT[TS02WIX1] < TS02W23.TSOFRCRT[TS02WIX2]
   && TS02W01.TS02WWK4 < TS02W23.TSOFRCRT[TS02WIX2])

    TS02-04214(); /* ===> shift ranges in compress table*/
                                   /* out for new range*/

    TS02W23.TSOFRCRT[TS02WIX2] = TS02W26.TSOFRCRT[TS02WIX1];
    TS02W23.TSOTOCRT[TS02WIX2] = TS02W26.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

    return; /* ===> return to previous process*/

  end


    /* **--------------------------------------------------------*/
    /* ** The orig table*/
    /* **     "FROM" carton    <  compress table "FROM" carton*/
    /* ** and the orig table*/
    /* **    ("TO" carton + 1) >= compress table "FROM" carton*/
    /* **--------------------------------------------------------*/

  TS02W01.TS02WWK4 = TS02W26.TSOTOCRT[TS02WIX1] + 1;

  if (TS02W26.TSOFRCRT[TS02WIX1] < TS02W23.TSOFRCRT[TS02WIX2]
   && TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX2])

    TS02W01.TS02WIX3 = TS02W01.TS02WIX2 + 1; /* ===> next compress index*/

    while (TS02W01.TS02WWK4 >= TS02W23.TSOFRCRT[TS02WIX3]
     && TS02W23.TSOFRCRT[TS02WIX3] > 0)

      TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;

    end

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 - 1;

    if (TS02W26.TSOTOCRT[TS02WIX1] > TS02W23.TSOTOCRT[TS02WIX3])
      TS02W23.TSOFRCRT[TS02WIX2] = TS02W26.TSOFRCRT[TS02WIX1];
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W26.TSOTOCRT[TS02WIX1];
    else
      TS02W23.TSOFRCRT[TS02WIX2] = TS02W26.TSOFRCRT[TS02WIX1];
      TS02W23.TSOTOCRT[TS02WIX2] = TS02W23.TSOTOCRT[TS02WIX3];
    end

    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. flag (table entry made)*/

  end


  TS02-04212(); /* ===> Shift compressed carton ranges*/


   /* **                                                        ***/
   /* ********************** End of TS02-66120 ********************/
end // end TS02-66120

// **** Do Database Updates ****
Function TS02-67000()
   /* ------------------------------------------------------------*/
   /* --  Perform database updates*/
   /*  */
   /* 1. Build a new CPLIT01 to be used as a source for*/
   /* database updates*/
   /*  */
   /* 2. Delete old CPLIT01 database row before*/
   /* database updates*/
   /*  */
   /* 3. Update CPLIT01 database with new assigned carton*/
   /* ranges constructed in the new table in step 1.*/
   /*  */
   /* 4. Update CPLHD01 database with new shipped totals &*/
   /* carton counts.*/
   /*  */
   /* 5. COMMIT all updates to the database*/
   /*  */
   /* ------------------------------------------------------------*/


  XX0XS01(); /* ===> Get current data and time*/


  TS02-67100(); /* ===> Build a new CPLIT01 set table*/


  TS02-67200(); /* ===> Delete old CPLIT01 set table*/


  TS02-67300(); /* ===> Update CPLIT01 with new carton*/
                                   /* set table*/

  TS02-67500(); /* Update Container Numbers in CPLHD01*/

  TS02-67400(); /* ===> Update CPLHD01 with container*/
                                   /* shipped & carton count totals*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ===>commit all updates to the*/
                                   /* database*/


   /* **                                                        ***/
   /* ********************** End of TS02-67000 ********************/
end // end TS02-67000

// Build new table set for update
Function TS02-67100()
   /* ------------------------------------------------------------*/
   /*  */
   /* BUILD A NEW TABLE SET FOR CPLIT01 UPDATE*/
   /*  */
   /* 1) Load the new table with ranges which will include*/
   /* nike ship id, nike cntnr nbr, size-id, nike pl nbr,*/
   /* qtys per carton, total unit qtys.  Accumulate shipped*/
   /* and carton counts for each container.*/
   /* -------------------------------------------------------*/
   /* 2) Cycle through all the cartons in the new carton range*/
   /* table that was built from cartons processed/stored*/
   /* in TS02W26 for processed containers. Only process*/
   /* ranges that have been assigned to containers.*/
   /*  */
   /* NOTE:) These ranges are in compressed map format and*/
   /* need to be broken down to a CPLIT01 key level*/
   /* by comparing the W26 record with the original*/
   /* CPLIT01 ranges saved in W07 record.*/
   /* -------------------------------------------------------*/
   /* 3) Record usage:*/
   /*  */
   /* TS02W26 = A record containing containers with*/
   /* carton ranges compressed to map format.*/
   /* Ordered by container, carton range.*/
   /* with ranges flaged assigned and not assigned*/
   /*  */
   /* ---> Indexed by: TS02WIX1*/
   /* -------------------------------------------------------*/
   /* TS02W07 = A record containing containers with*/
   /* carton ranges as originally existed in the*/
   /* CPLIT01 database, before maintenanced.*/
   /*  */
   /* ---> Indexed by: TS02WIX2*/
   /* -------------------------------------------------------*/
   /* TS02W27 = A new table contining cartons for*/
   /* containers. It is specified to the level*/
   /* of the VCPLIT01 Key.*/
   /* It will be the source of the VCPLIT01*/
   /* database updates*/
   /*  */
   /* ---> Indexed by: TS02WIX3*/
   /* -------------------------------------------------------*/
   /* TSOREC  = The CSP record that corresponds to the*/
   /* CPLIT01 database. This record is a single*/
   /* row record and will be used to manipulate*/
   /* the original row into a new row, depending*/
   /* on the container assignment data entered.*/
   /* Once it has been correctly manipulated,*/
   /* it will be moved to TS02W27, the new CPLIT01*/
   /* carton table.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  set TS02W27 empty; /* ===> New CPLIT01 source table for*/
                                   /* D.B. update*/

   /* **-------------------------------------------------------*/
   /* ** init p/l  array where totals will be accumulated*/
   /* **-------------------------------------------------------*/
   /*  */
  move 0 to TS02W03.TSISHPQT[1] for all; /* ===> shipment total for 1-8*/
  move 0 to TS02W03.TSISHPQ1[1] for all; /* containers*/
  move 0 to TS02W03.TSISHPQ2[1] for all;
  move 0 to TS02W03.TSISHPQ3[1] for all;
  move 0 to TS02W03.TSISHPQ4[1] for all;
  move 0 to TS02W03.TSISHPQ5[1] for all;
  move 0 to TS02W03.TSISHPQ6[1] for all;
  move 0 to TS02W03.TSISHPQ7[1] for all;
  move 0 to TS02W03.TSISHPQ8[1] for all;

  move 0 to TS02W03.TSICRTQT[1] for all; /* ===> carton   total for 1-8*/
  move 0 to TS02W03.TSICRTQ1[1] for all; /* containers*/
  move 0 to TS02W03.TSICRTQ2[1] for all;
  move 0 to TS02W03.TSICRTQ3[1] for all;
  move 0 to TS02W03.TSICRTQ4[1] for all;
  move 0 to TS02W03.TSICRTQ5[1] for all;
  move 0 to TS02W03.TSICRTQ6[1] for all;
  move 0 to TS02W03.TSICRTQ7[1] for all;
  move 0 to TS02W03.TSICRTQ8[1] for all;

   /* **---------------------------------------------------------*/
   /* ** Process the TS02W26 Table*/
   /* ** with the original cartons saved in TS02W07.*/
   /* **---------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1; /* ===> container table index*/

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMCR
   && TS02W26.TSHNKCN[TS02WIX1] > 0)

    if (TS02W26.TS02WAFL[TS02WIX1] == "Y")

      TS02W01.TS02WIX2 = 1;

      while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR
       && TS02W07.TSHNKCN[TS02WIX2] > 0)

        TS02-67110(); /* ===> process assigned range*/

        TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1;

      end

    end

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1;

  end



   /* **                                                        ***/
   /* ********************** End of TS02-67100 ********************/
end // end TS02-67100

// Process an assigned range
Function TS02-67110()
   /* ------------------------------------------------------------*/
   /* -----------------------------------------*/
   /* GET CARTON DATA FOR THE CURRENT CONTAINER*/
   /* -----------------------------------------*/
   /*  */
   /*  */
   /* There are three major conditions checks that control*/
   /* the assigning of cartons to appropriate containers*/
   /*  */
   /* 1.  W26 "From" carton range  >  Original carton range*/
   /*  */
   /* 2.  W26 "From" carton range*/
   /* between  Original carton range*/
   /*  */
   /* 3.  W26 "From" carton range  <  Original carton range*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /*  */

     /* **---------------------------------------------------------*/
     /* ** Check*/
     /* **   W26  ("From" carton range)*/
     /* **                            > original carton range*/
     /* **   - No range needs to be saved yet*/
     /* **---------------------------------------------------------*/


  if (TS02W26.TSOFRCRT[TS02WIX1] > TS02W07.TSOTOCRT[TS02WIX2])

      /* ======== NEXT SENTENCE ========>*/

  else

       /* **---------------------------------------------------------*/
       /* ** Check -------> "From" carton falls between carton ranges*/
       /* **   W26 "From" carton range*/
       /* **                          >= original "From" carton range*/
       /* **   W26  ("From" carton range)*/
       /* **                          <= original "To"   carton range*/
       /* ***/
       /* **---------------------------------------------------------*/

    if (TS02W26.TSOFRCRT[TS02WIX1] >= TS02W07.TSOFRCRT[TS02WIX2]
     && TS02W26.TSOFRCRT[TS02WIX1] <= TS02W07.TSOTOCRT[TS02WIX2])

      TS02-67111(); /* ===> Do save container range*/

      return; /* ===> Return to previous process*/


    else

         /* **---------------------------------------------------------*/
         /* ** Check*/
         /* **    W26 "From" carton range < original carton range*/
         /* **---------------------------------------------------------*/

      if (TS02W26.TSOFRCRT[TS02WIX1] < TS02W07.TSOFRCRT[TS02WIX2])

        TS02-67114(); /* ===> Do save container range*/

        return; /* ===> Return to previous process*/


      else /* ===> Q/A Problem*/

           /* **---------------------------------------------------------*/
           /* **    This will never happen but put here for Q/A.*/
           /* **---------------------------------------------------------*/

        converseLib.validationFailed(10); /* ===> Indicate system error*/
        TS02M001.XXXPRCNM = "2-67110"; /* ===> module identifier*/
        set TS02M001.TSOFRCRT[TS02WIX1] cursor, bold;

        exit stack; /* ===> Exit to re-display map*/

      end /* ===> W26 "From" carton range <*/
                                   /* original carton range*/

    end /* ===> W26 "From" carton range between*/
                                   /* original range*/

  end /* ===> W26  "From" carton range >*/
                                   /* original range*/


   /* **                                                        ***/
   /* ********************** End of TS02-67110 ********************/
end // end TS02-67110

// W26 "From" in W07 carton range
Function TS02-67111()
   /* ------------------------------------------------------------*/
   /*  */
   /* W26  "FROM" carton range*/
   /* between original carton range*/
   /*  */
   /* ---------------------------------------------------------*/
   /*  */
   /*  */
   /* **--------------------------------------------------------*/
   /* ** If the W26 "FROM" carton range*/
   /* **                         = Original "FROM" carton range*/
   /* ***/
   /* **  There are three major conditions checks that control*/
   /* **    the assigning of cartons to current container:*/
   /* ***/
   /* **  Check*/
   /* **  1. If the W26 "TO" carton range*/
   /* **                         = Original "TO" carton range*/
   /* ***/
   /* **  2. If the W26 "TO" carton range*/
   /* **                         < Original "TO" carton range*/
   /* ***/
   /* **  3. If the W26 "TO" carton range*/
   /* **                         > Original "TO" carton range*/
   /* ***/
   /* ***/
   /* **--------------------------------------------------------*/
   /*  */

  if (TS02W26.TSOFRCRT[TS02WIX1] == TS02W07.TSOFRCRT[TS02WIX2])

    TSOREC.TSOGROUP = TS02W07.TSOGROUP[TS02WIX2];
    TSOREC.TSHNKCN = TS02W26.TSHNKCN[TS02WIX1];

    if (TS02W26.TSOTOCRT[TS02WIX1] >= TS02W07.TSOTOCRT[TS02WIX2])

     /* ====== NEXT SENTENCE =======>*/

    end /* ===> W26 "TO" >= W07 "TO"*/

    if (TS02W26.TSOTOCRT[TS02WIX1] < TS02W07.TSOTOCRT[TS02WIX2])

      TSOREC.TSOTOCRT = TS02W26.TSOTOCRT[TS02WIX1];
      TS02W01.TS02WWK1 = TSOREC.TSOTOCRT - TSOREC.TSOFRCRT + 1;
      TSOREC.TSOSHPQT = TS02W01.TS02WWK1 * TS02W07.TS02WQPC[TS02WIX2];

    end /* ===> W26 "TO" < W07 "TO"*/

    TS02-67112(); /* ====>  load range to new W.S. Table*/

    return; /* ===> Return to previous process*/

  end /* ===> W26 "FROM" = W07 "FROM"*/


   /* **--------------------------------------------------------*/
   /* ** If the W26 "FROM" carton range*/
   /* **                         > original "FROM" carton range*/
   /* ***/
   /* **--------------------------------------------------------*/
   /*  */

  if (TS02W26.TSOFRCRT[TS02WIX1] > TS02W07.TSOFRCRT[TS02WIX2])

    TSOREC.TSOGROUP = TS02W07.TSOGROUP[TS02WIX2];

    TSOREC.TSHNKCN = TS02W26.TSHNKCN[TS02WIX1];
    TSOREC.TSOFRCRT = TS02W26.TSOFRCRT[TS02WIX1];

    if (TS02W26.TSOTOCRT[TS02WIX1] >= TS02W07.TSOTOCRT[TS02WIX2])

     /* ====== NEXT SENTENCE =======>*/

    end /* ===> W26 "TO" >= W07 "TO"*/

    if (TS02W26.TSOTOCRT[TS02WIX1] < TS02W07.TSOTOCRT[TS02WIX2])

      TSOREC.TSOTOCRT = TS02W26.TSOTOCRT[TS02WIX1];

    end /* ===> W26 "TO" < W07 "TO"*/

    TS02W01.TS02WWK1 = TSOREC.TSOTOCRT - TSOREC.TSOFRCRT + 1;
    TSOREC.TSOSHPQT = TS02W01.TS02WWK1 * TS02W07.TS02WQPC[TS02WIX2];

    TS02-67112(); /* ====>  load range to new W.S. Table*/

  end /* ===> W26 "FROM" > original "FROM"*/

   /* **                                                        ***/
   /* ********************** End of TS02-67111 ********************/
end // end TS02-67111

// Process new range into table
Function TS02-67112()
   /* ------------------------------------------------------------*/
   /* Process the newly built range to the new table*/
   /* - since the cartons are processed and sorted by*/
   /* container, the first statement will start its*/
   /* processing with and index of the related container.*/
   /* - once the index position has been established, the*/
   /* range will loaded to the new table with respect to*/
   /* key data.*/
   /*  */
   /* ie.) nike ship id, nike cntnr nbr, nike pl nbr,*/
   /* size-id and qtys per carton.*/
   /* ------------------------------------------------------------*/

  if (TSOREC.TSHNKCN in TS02W27.TSHNKCN)

    TS02W01.TS02WIX3 = sysVar.arrayIndex; /* ===> W.S. index for TS02W27 Load*/

  else

    if (0 in TS02W27.TSHNKCN)

      TS02W01.TS02WIX3 = sysVar.arrayIndex; /* ===> W.S. index for TS02W27 Load*/

    end

  end


  TS02W01.TS02WFL1 = "N"; /* ===> w.s. flag (range processed???)*/

  while (TS02W01.TS02WFL1 == "N") /* ===> w.s. flag (range processed???)*/

    TS02-67113(); /* ===> process the TSOREC into the*/
                                   /* new CPLIT01 Table*/

    TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* ===> current container index*/

  end



   /* **                                                        ***/
   /* ********************** End of TS02-67112 ********************/
end // end TS02-67112

// Load range to new CPLIT  table
Function TS02-67113()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------*/
   /* LOAD CARTON DATA FOR THE CURRENT CONTAINER*/
   /* ------------------------------------------*/
   /*  */
   /* After checking if the end of the table is reached*/
   /* and that all the carton keys match*/
   /* -  check to see if range needs to be merged*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /* **---------------------------------------------------*/
   /* ** Check*/
   /* **   If  end of the new W27 table has been*/
   /* **     reached, then the current carton range from*/
   /* **     the New table did not find a match in the*/
   /* **     new W27 carton table.*/
   /* ***/
   /* **   Therefore, insert the new range to the new*/
   /* **     W27 carton table.*/
   /* **---------------------------------------------------*/
   /*  */

  if (TS02W27.TSOFRCRT[TS02WIX3] == 0) /* ===> End of New CPLIT01 Table*/

    TS02W27.TSOGROUP[TS02WIX3] = TSOREC.TSOGROUP;

    TS02W27.TS02WQPC[TS02WIX3] = TS02W07.TS02WQPC[TS02WIX2];
    TS02W27.ZZZSDT[TS02WIX3] = XX0XW01.XX0XWDAT;
    TS02W27.ZZZCHGDT[TS02WIX3] = XX0XW01.XX0XWDAT;
    TS02W27.ZZZCHGTM[TS02WIX3] = XX0XW01.XX0XWTIM;
    TS02W27.ZZZCHGCT[TS02WIX3] = 0;


    TS02W01.TS02WFL1 = "Y"; /* ===> w.s. processed flag*/

  else

    /*  */
    /* **---------------------------------------------------------*/
    /* ** Check*/
    /* **   Carton keys the same*/
    /* **---------------------------------------------------------*/
    /*  */

    if (TSOREC.TSHNKCN == TS02W27.TSHNKCN[TS02WIX3]
     && TSOREC.TSIPLNBR == TS02W27.TSIPLNBR[TS02WIX3]
     && TSOREC.SY5SZID == TS02W27.SY5SZID[TS02WIX3]
     && TS02W07.TS02WQPC[TS02WIX2] == TS02W27.TS02WQPC[TS02WIX3])


      TS02W01.TS02WWK3 = TSOREC.TSOTOCRT + 1;
      TS02W01.TS02WWK4 = TSOREC.TSOFRCRT - 1;


       /* **---------------------------------------------------------*/
       /* ** Check*/
       /* **   New ("TO"    carton range + 1)*/
       /* **                          = W27 "FROM" carton range*/
       /* **   New  ("FROM" carton range - 1)*/
       /* **                          = W27 "TO"   carton range*/
       /* ***/
       /* **---------------------------------------------------------*/

      if (TS02W01.TS02WWK3 == TS02W27.TSOFRCRT[TS02WIX3]
       || TS02W01.TS02WWK4 == TS02W27.TSOTOCRT[TS02WIX3])

        if (TSOREC.TSOTOCRT < TS02W27.TSOFRCRT[TS02WIX3])

          TS02W27.TSOFRCRT[TS02WIX3] = TSOREC.TSOFRCRT;

          TS02W27.TSOSHPQT[TS02WIX3] = TS02W27.TSOSHPQT[TS02WIX3] + TSOREC.TSOSHPQT;


          TS02W01.TS02WFL1 = "Y"; /* ===> w.s. processed flag*/

        else

          if (TSOREC.TSOFRCRT > TS02W27.TSOTOCRT[TS02WIX3])

            TS02W27.TSOTOCRT[TS02WIX3] = TSOREC.TSOTOCRT;

            TS02W27.TSOSHPQT[TS02WIX3] = TS02W27.TSOSHPQT[TS02WIX3] + TSOREC.TSOSHPQT;


            TS02W01.TS02WFL1 = "Y"; /* ===> w.s. processed flag*/

          end /* ===> New "FROM" carton range*/

        end /* ===> New "TO" carton range*/

      end /* ===> Range merge check*/

    end /* ===> Carton key check*/

  end /* ===> End of New carton W27*/
                                   /* table*/


   /* **                                                        ***/
   /* ********************** End of TS02-67113 ********************/
end // end TS02-67113

// W26 "From" <  W07 carton range
Function TS02-67114()
   /* ---------------------------------------------------------*/
   /* W26 "FROM" carton range*/
   /* <   Original carton range*/
   /*  */
   /* (Is the condition that caused this module to be executed)*/
   /* ------------------------------------------------------------*/
   /* **-----------------------------------------------------*/
   /* **  There are three major conditions checks that control*/
   /* **    the assigning of cartons to current container:*/
   /* **-----------------------------------------------------*/
   /*  */
   /* Check:*/
   /*  */
   /* 1.  If the W26 "TO" carton range*/
   /* <  Original "FROM" carton range*/
   /*  */
   /* 2.  If the W26 "TO" carton range*/
   /* between  Original  carton range*/
   /*  */
   /* 3.  If the W26 "TO" carton range*/
   /* >  Original "TO"   carton range*/
   /*  */
   /* For current container:*/
   /* - Flag the range as assigned*/
   /* - Split ranges assigned/un-assigned*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /* **--------------------------------------------------------*/
   /* **   1.  If the W26 "TO" carton range*/
   /* **                         <  Original "FROM" carton range*/
   /* **--------------------------------------------------------*/

  if (TS02W26.TSOTOCRT[TS02WIX1] < TS02W07.TSOFRCRT[TS02WIX2])

    return; /* ===> return to previous process*/

  end

   /* **--------------------------------------------------------*/
   /* **   2.  If the W26 "TO" carton range*/
   /* **                  between  Original  carton range*/
   /* **--------------------------------------------------------*/

  if (TS02W26.TSOTOCRT[TS02WIX1] >= TS02W07.TSOFRCRT[TS02WIX2]
   && TS02W26.TSOTOCRT[TS02WIX1] < TS02W07.TSOTOCRT[TS02WIX2])

    TSOREC.TSOGROUP = TS02W07.TSOGROUP[TS02WIX2];

    TSOREC.TSOTOCRT = TS02W26.TSOTOCRT[TS02WIX1];
    TSOREC.TSHNKCN = TS02W26.TSHNKCN[TS02WIX1];
    TS02W01.TS02WWK1 = TSOREC.TSOTOCRT - TSOREC.TSOFRCRT + 1;
    TSOREC.TSOSHPQT = TS02W01.TS02WWK1 * TS02W07.TS02WQPC[TS02WIX2];

    TS02-67112(); /* ====>  load range to new W.S. Table*/

    return; /* ===> return to previous process*/

  end /* ===> W26 "TO" carton range between*/
                                   /* Original carton range*/


   /* **--------------------------------------------------------*/
   /* **   3.  If the W26 "TO" carton range*/
   /* **                        >=  Original "TO"   carton range*/
   /* **--------------------------------------------------------*/

  if (TS02W26.TSOTOCRT[TS02WIX1] >= TS02W07.TSOTOCRT[TS02WIX2])

    TSOREC.TSOGROUP = TS02W07.TSOGROUP[TS02WIX2];
    TSOREC.TSHNKCN = TS02W26.TSHNKCN[TS02WIX1];

    TS02-67112(); /* ====>  load range to new W.S. Table*/

    return; /* ===> return to previous process*/

  end

   /* **                                                        ***/
   /* ********************** End of TS02-67114 ********************/
end // end TS02-67114

// Delete old carton & VPLAUX01
Function TS02-67200()
   /* ------------------------------------------------------------*/
   /* Delete the old VCPLIT01 SET*/
   /* ------------------------------------------------------------*/

  TS02W01.VPLAUXCNT = 0;
  VPLAUX01.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* Move in Keys*/
  TS02W01.TS02WIX3 = 1; /* Set index*/
  TS02W01.TS02WSWC = "N"; /* Set Flag*/
  TS02-67201(); /* Perform Select(S3) VPLAUX01*/
  while (TS02W01.TS02WSWC == "N")
    TS02-67202(); /* Perform Fetch(N3) VPLAUX01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (TS02W01.TS02WIX3 < 18000) /* Check for Carton array Boundary*/
        TS02W01.VPLAUXCNT = TS02W01.VPLAUXCNT + 1;
        TS02-67203(); /* Store UCC-128 codes in array*/
      else
        converseLib.validationFailed(418); /* Display array out of bounce error*/
        exit stack;
      end
    end
  end
  TS02W01.CPLCRTNS = TS02W01.TS02WIX3; /* Count of VPLAUX01 Cartons*/
  TS02-67204(); /* Perform Close(C3) VPLAUX01*/

  TS02W01.TS02WIX1 = 1; /* Set index*/

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMGC /* Until end of array*/
   && TS02W03.TSIPLNBR[TS02WIX1] > 0) /* and data exists*/

    TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
    TSIREC.TSIPLNBR = TS02W03.TSIPLNBR[TS02WIX1];

    TS02-01610(); /* ===>Select (SA) unique VCPLHD01*/

    /* -------------------------------------------------*/
      /* If the packing list contains detail*/
    /* -------------------------------------------------*/


      /* ------------------------------------------------------------*/
        /* Delete the carton detail for the Nike Plan NBR*/
      /* ------------------------------------------------------------*/

    TSOREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
    TSOREC.TSIPLNBR = TS02W03.TSIPLNBR[TS02WIX1];
    VPLAUX01.TS-NIKE-PL-NBR = TS02W03.TSIPLNBR[TS02WIX1];
    TSOREC.TSHNKCN = -1;
    TSOREC.TSOFRCRT = -1;
    TSOREC.SY5SZID = -1;

    TS02-67220(); /* ===> Delete (DS) Set VCPLIT01*/
    if (TS02W01.VPLAUXCNT > 0)
      TS02-67230(); /* ===> Delete (D1) Set VPLAUX01*/
    end



    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* Incr gpc-cpl index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67200 ********************/
end // end TS02-67200

// Select (S3) scan      VPLAUX01
Function TS02-67201()
   /* ------------------------------------------------------------*/
   /* Select rows from VPLAUX01*/
   /* ------------------------------------------------------------*/

  TS02W01.TS02WIX3 = 1;
  TS02W14.TSCFNC = "S3";
  call "VPLAUX01" (TS02W14, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-67201"; /* Process name*/
    TA1REC.TA1LOC = "SELECT BAR CODE INFO           ";
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
    TA1REC.TA1TBLKE = TS02M001.TSFSHPID; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "V-67201"; /* Process name*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-23500 ********************/
end // end TS02-67201

// Fetch  (N3) next row  VPLAUX01
Function TS02-67202()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE PLAUX TABLE ROW*/

   /* ------------------------------------------------------------*/

  TS02W14.TSCFNC = "N3";
  call "VPLAUX01" (TS02W14, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Fetch table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return codes*/
    /* ====== NEXT SENTENCE =========>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS02W01.TS02WSWC = "Y"; /* ===> end of cursor switch*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "2-67202"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS02M001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS02M001.XXXPRCNM = "2-67202"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end
  end /* ===> Selected set*/


   /* **                                                        ***/
   /* ********************** End of TS02-67202 ********************/
end // end TS02-67202

// STORE VPLAUX01 ON TO ARRAY
Function TS02-67203()
   /* ****************************************************************/
   /* *                   STORE VPLAUX01 ON TO ARRAY                **/
   /* **/
   /* ****************************************************************/
  TS02W15.TS-UCC-128-CD[TS02WIX3] = VPLAUX01.TS-UCC-128-CD;
  TS02W15.TS-CRTN-NBR[TS02WIX3] = VPLAUX01.TS-CRTN-NBR;
  TS02W15.PK-CRTN-CD[TS02WIX3] = VPLAUX01.PK-CRTN-CD;
  TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1;
end // end TS02-67203

// Close  (C3) set       VPLAUX01
Function TS02-67204()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF PLAUX ROWS*/

   /* ------------------------------------------------------------*/

  TS02W14.TSCFNC = "C3";
  call "VPLAUX01" (TS02W14, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Close  table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "2-67204"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67204 ********************/
end // end TS02-67204

// Delete (DS) SET       VCPLIT01
Function TS02-67220()
   /* ------------------------------------------------------------*/
   /*  */
   /* DELETE THE CARTON ROW*/
   /* /**/
   /* 1) Delete the carton row from the data base*/
   /*  */
   /* ------------------------------------------------------------*/

  call "IO2580" ("DS", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* ========== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-67220"; /* Process name*/
    TA1REC.TA1LOC = "DELETE TABLE SET";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67220"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===>  Exit to display the map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67220 ********************/
end // end TS02-67220

// Delete the VPLAUX01 rows
Function TS02-67230()
   /* ------------------------------------------------------------*/

                  /* DELETE THE VPLAUX ROW*/

    /* 1) Delete the VPLAUX row from the data base*/

   /* ------------------------------------------------------------*/

  TS02W14.TSCFNC = "D1";
  call "VPLAUX01" (TS02W14, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Delete table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* ========== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-67230"; /* Process name*/
    TA1REC.TA1LOC = "DELETE TABLE SET";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67230"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===>  Exit to display the map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67230 ********************/
end // end TS02-67230

// PROCESS CPLIT01 & VPLAUX01 RNG
Function TS02-67300()
   /* ------------------------------------------------------------*/
   /* Process the newly created table into the database*/
   /* by inserting new VCPLIT01 database rows.*/
   /* ------------------------------------------------------------*/


  TS02W01.TS02WIX1 = 1; /* initialize index*/

  while (TS02W27.TSHNKCN[TS02WIX1] > 0) /* ===> max new table entries*/

    TSOREC.TSOGROUP = TS02W27.TSOGROUP[TS02WIX1];

    TS02-67310(); /* ===> Insert VCPLIT01 Rows*/
    if (TS02W01.VPLAUXCNT > 0)
      if (TS02W27.TSOFRCRT[TS02WIX1] == TS02W27.TSOTOCRT[TS02WIX1])
        /* Check whether the From Crtn nuber and To Crtn Number are same*/
        /* if they are equal insert one row*/
        /* otherwise generate the carton range through a counter and*/
        /* update each row in the carton range.*/

        VPLAUX01.TS-CRTN-NBR = TS02W27.TSOFRCRT[TS02WIX1];
        TS02-67320(); /* ===> Insert VPLAUX01 Rows*/
      else
        TS02W01.TS02CNTR = TS02W27.TSOFRCRT[TS02WIX1]; /* store fr crt*/
        TS02W01.TS02TOCTN = TS02W27.TSOTOCRT[TS02WIX1]; /* store toc*/
        while (TS02W01.TS02CNTR <= TS02W01.TS02TOCTN)
          VPLAUX01.TS-CRTN-NBR = TS02W01.TS02CNTR;
          TS02-67320(); /* ===> Insert VPLAUX01 Row*/
          TS02W01.TS02CNTR = TS02W01.TS02CNTR + 1; /* increment crtn count*/
        end
      end
    end

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> increment index*/

  end /* ===> last carton range*/


   /* **                                                        ***/
   /* ********************** End of TS02-67300 ********************/
end // end TS02-67300

// Insert (A ) Row       VCPLIT01
Function TS02-67310()
   /* ------------------------------------------------------------*/
   /*  */
   /* ADD CARTONS*/
   /*  */
   /* Add the carton row to DTRANS.VCPLIT01*/
   /*  */
   /* ------------------------------------------------------------*/


  call "IO2580" ("A ", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-67310"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67310"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS02-67310 ********************/
end // end TS02-67310

// PROCESS VPLAUX01 ROW INSERT
Function TS02-67320()
    /* ------------------------------------------------------------*/

                  /* Insert THE VPLAUX01 ROWS*/

    /* ------------------------------------------------------------*/

  TS02W01.TS02WIX2 = 1; /* Initialize index*/
  while (TS02W01.TS02WIX2 <= TS02W01.CPLCRTNS)
  /* Check whether the CPLIT carton number is one of the Stored VPLAUX*/
  /* carton number. If yes, move the corresponding VPLAUX01 info from*/
  /* its array on to the record, for insertion.*/
    if (TS02W15.TS-CRTN-NBR[TS02WIX2] == VPLAUX01.TS-CRTN-NBR)
      VPLAUX01.TS-UCC-128-CD = TS02W15.TS-UCC-128-CD[TS02WIX2];
      VPLAUX01.PK-CRTN-CD = TS02W15.PK-CRTN-CD[TS02WIX2];
      VPLAUX01.TS-NIKE-SHP-ID = TSOREC.TSFSHPID; /* Move values from*/
      VPLAUX01.TS-NIKE-CNTNR-NBR = TSOREC.TSHNKCN; /* VCPLIT*/
      VPLAUX01.TS-NIKE-PL-NBR = TSOREC.TSIPLNBR;
      VPLAUX01.SY-SZ-ID = TSOREC.SY5SZID;
      TS02W01.TS02WIX3 = 1; /* Initialize index*/
      while (TS02W03.TSIPLNBR[TS02WIX3] > 0)
  /* Check whether the Packing List Number is one of the Deleted Packing*/
  /* list numbers. If yes, then, insert a VPLAUX01 row*/
        if (TS02W03.TSIPLNBR[TS02WIX3] == VPLAUX01.TS-NIKE-PL-NBR)
          TS02-67423(); /* Insert VPLAUX01(A1) ROW*/
        end
        TS02W01.TS02WIX3 = TS02W01.TS02WIX3 + 1; /* Increment index*/
      end
      TS02W01.TS02WIX2 = 9999; /* Move high value to index*/
    else
      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* Increment index*/
    end
  end
end // end TS02-67320

// Process update of P/L VCPLHD01
Function TS02-67400()
   /* ------------------------------------------------------------*/
   /*  */
   /* PERFORM UPDATES FOR CPLHD01*/
   /*  */
   /* 1) This process will take all the changes/adds*/
   /* which were made on the current map and update the*/
   /* database with them.*/
   /*  */
   /* ------------------------------------------------------------*/



   /* ------------------------------------------------------*/
   /* Cycle through all the gpc-cpl packing lists and update*/
   /* the cplhd rows.*/
   /* ------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1;

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMGC /* until end of array*/
   && TS02W03.TSIPLNBR[TS02WIX1] > 0) /* and data exists*/

    TSIREC.TSFSHPID = TSWREC.TSFSHPID;
    TSIREC.TSIPLNBR = TS02W03.TSIPLNBR[TS02WIX1];

    TS02-01610(); /* ===> Select the CPLHD01 row*/

    TS02-67410(); /* ===> Load changes*/

    TS02-67420(); /* ===> Update the row*/

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* incr the counter*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67400 ********************/
end // end TS02-67400

// Load VCPLHD01 rec for update
Function TS02-67410()
   /* ------------------------------------------------------------*/
   /*  */
   /* RECALCULATE THE SHIPMENT TOTALS*/
   /* -------------------------------*/
   /*  */
   /* 1. Uses the VCPLIT01 selected set to accum/calculate*/
   /* appropriate totals on the VCPLHD01 rows.*/
   /*  */
   /* ------------------------------------------------------------*/


  TSIREC.TSISHPQT = 0; /* ===> Init totals qtys*/
  TSIREC.TSICRTQT = 0;

  TSIREC.TSISHPQ1 = 0; /* ===> Init carton qtys/container*/
  TSIREC.TSISHPQ2 = 0;
  TSIREC.TSISHPQ3 = 0;
  TSIREC.TSISHPQ4 = 0;
  TSIREC.TSISHPQ5 = 0;
  TSIREC.TSISHPQ6 = 0;
  TSIREC.TSISHPQ7 = 0;
  TSIREC.TSISHPQ8 = 0;

  TSIREC.TSICRTQ1 = 0; /* ===> Init carton/container*/
  TSIREC.TSICRTQ2 = 0;
  TSIREC.TSICRTQ3 = 0;
  TSIREC.TSICRTQ4 = 0;
  TSIREC.TSICRTQ5 = 0;
  TSIREC.TSICRTQ6 = 0;
  TSIREC.TSICRTQ7 = 0;
  TSIREC.TSICRTQ8 = 0;

   /* ------------------------------------------------------------*/
        /* Select the carton rows*/
   /* ------------------------------------------------------------*/

  TS02W01.TS02WIX2 = 1; /* ===> container index*/

  while (TS02W01.TS02WIX2 <= 8 /* ===> container index*/
  )
    set TSOREC empty;
    TSOREC.TSFSHPID = TSIREC.TSFSHPID;
    TSOREC.TSIPLNBR = TSIREC.TSIPLNBR;

    TS02-67411(); /* ===> get container*/

    if (TSOREC.TSHNKCN > 0
    )
      TS02W01.TS02WWK2 = 0; /* ===> init highest range found*/
      TS02W01.TS02WSWC = "N";

      TS02-67412(); /* ===> Select the VCPLIT01/carton rows*/

      TS02-67413(); /* ===> Fetch the VCPLIT01 row*/
      /* -----> Prime  read*/
      /* -----------*/

   /* ------------------------------------------------------------*/
          /* Process the selected set of VCPLIT01 rows.*/
   /* ------------------------------------------------------------*/

      while (TS02W01.TS02WSWC == "N") /* ===> Process the selected set*/

        TS02-67414(); /* ===> accum   carton qtys/containers*/

        TS02-67415(); /* ===> accum   cartons/containers*/

        TS02-67413(); /* ===> Fetch the CPLIT row*/
     /* -----> Driving read*/
           /* ------------*/

      end

      TS02-67416(); /* ===> Close the selected set*/

    end /* ====> container exists*/

    TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> container index*/

  end



  TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/


   /* **                                                        ***/
   /* ********************** End of TS02-67410 ********************/
end // end TS02-67410

// Load nike cntnr nbr for TSOREC
Function TS02-67411()
   /* ------------------------------------------------------------*/
   /* Get the appropriate nike container number loaded into*/
   /* w.s. for further processing of all the GPC-CPL array*/
   /* ------------------------------------------------------------*/


  if (TS02W01.TS02WIX2 == 1) /* ===> container position*/

    TSOREC.TSHNKCN = TSIREC.TSHNKCN1;
  else

    if (TS02W01.TS02WIX2 == 2) /* ===> container position*/

      TSOREC.TSHNKCN = TSIREC.TSHNKCN2;
    else

      if (TS02W01.TS02WIX2 == 3) /* ===> container position*/

        TSOREC.TSHNKCN = TSIREC.TSHNKCN3;
      else

        if (TS02W01.TS02WIX2 == 4) /* ===> container position*/

          TSOREC.TSHNKCN = TSIREC.TSHNKCN4;
        else

          if (TS02W01.TS02WIX2 == 5) /* ===> container position*/

            TSOREC.TSHNKCN = TSIREC.TSHNKCN5;
          else

            if (TS02W01.TS02WIX2 == 6) /* ===> container position*/

              TSOREC.TSHNKCN = TSIREC.TSHNKCN6;
            else

              if (TS02W01.TS02WIX2 == 7) /* ===> container position*/

                TSOREC.TSHNKCN = TSIREC.TSHNKCN7;
              else

                if (TS02W01.TS02WIX2 == 8) /* ===> container position*/

                  TSOREC.TSHNKCN = TSIREC.TSHNKCN8;
                end

              end

            end

          end

        end

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67411 ********************/
end // end TS02-67411

// Select (S3) set       VCPLIT01
Function TS02-67412()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPLIT TABLE ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("S3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-67412"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67412"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67412 ********************/
end // end TS02-67412

// Fetch  (N3) next row  VCPLIT01
Function TS02-67413()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPLIT TABLE ROW*/

      /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return codes*/
    /* ====== NEXT SENTENCE =========>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS02W01.TS02WSWC = "Y"; /* ===> end of cursor switch*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "2-67413"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS02M001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS02M001.XXXPRCNM = "2-67413"; /* Process name*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67413 ********************/
end // end TS02-67413

// Accum    carton qtys/container
Function TS02-67414()
   /* ------------------------------------------------------------*/
   /* 1.  Accumulate CPLIT01/carton qtys for each container*/
   /* existing in the CPLHD01 row.*/
   /*  */
   /* 2.  Load qtys to appropriate P.L. accumulators*/
   /* and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN1)
    TSIREC.TSISHPQ1 = TSIREC.TSISHPQ1 + TSOREC.TSOSHPQT;
    TSIREC.TSISHPQT = TSIREC.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN2)
    TSIREC.TSISHPQ2 = TSIREC.TSISHPQ2 + TSOREC.TSOSHPQT;
    TSIREC.TSISHPQT = TSIREC.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN3)
    TSIREC.TSISHPQ3 = TSIREC.TSISHPQ3 + TSOREC.TSOSHPQT;
    TSIREC.TSISHPQT = TSIREC.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN4)
    TSIREC.TSISHPQ4 = TSIREC.TSISHPQ4 + TSOREC.TSOSHPQT;
    TSIREC.TSISHPQT = TSIREC.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN5)
    TSIREC.TSISHPQ5 = TSIREC.TSISHPQ5 + TSOREC.TSOSHPQT;
    TSIREC.TSISHPQT = TSIREC.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN6)
    TSIREC.TSISHPQ6 = TSIREC.TSISHPQ6 + TSOREC.TSOSHPQT;
    TSIREC.TSISHPQT = TSIREC.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN7)
    TSIREC.TSISHPQ7 = TSIREC.TSISHPQ7 + TSOREC.TSOSHPQT;
    TSIREC.TSISHPQT = TSIREC.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN8)
    TSIREC.TSISHPQ8 = TSIREC.TSISHPQ8 + TSOREC.TSOSHPQT;
    TSIREC.TSISHPQT = TSIREC.TSISHPQT + TSOREC.TSOSHPQT;
  end

   /* **                                                        ***/
   /* ********************** End of TS02-67414 ********************/
end // end TS02-67414

// Accum        cartons.container
Function TS02-67415()
   /* ------------------------------------------------------------*/
   /* Accumulate CPLIT01/cartons for each container*/
   /* existing in the CPLHD01 row.*/
   /*  */
   /* Before processing gets started, make sure there is no*/
   /* overlap in ranges, could cause count problems.*/
   /*  */
   /* 1. Calculate the carton count between the carton ranges*/
   /*  */
   /* 2. Load the carton count to appropriate P.L. accumulator*/
   /* and return to previous process*/
   /* ------------------------------------------------------------*/


  if (TSOREC.TSOFRCRT > TS02W01.TS02WWK2)
    TS02W01.TS02WWK1 = TSOREC.TSOTOCRT - TSOREC.TSOFRCRT + 1;
  else
    if (TSOREC.TSOTOCRT <= TS02W01.TS02WWK2)

      return; /* ===> return to previous process*/
                                  /* ===> (cartons counted)*/
    else
      TS02W01.TS02WWK1 = TSOREC.TSOTOCRT - TS02W01.TS02WWK2;
    end
  end

  if (TSOREC.TSOTOCRT > TS02W01.TS02WWK2)
    TS02W01.TS02WWK2 = TSOREC.TSOTOCRT;
  end

   /* **--------------------------------------------------------*/
   /* **   Load the carton count to appropriate P.L. accumulator*/
   /* **   and return to previous process*/
   /* **--------------------------------------------------------*/

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN1)
    TSIREC.TSICRTQ1 = TSIREC.TSICRTQ1 + TS02W01.TS02WWK1;
    TSIREC.TSICRTQT = TSIREC.TSICRTQT + TS02W01.TS02WWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN2)
    TSIREC.TSICRTQ2 = TSIREC.TSICRTQ2 + TS02W01.TS02WWK1;
    TSIREC.TSICRTQT = TSIREC.TSICRTQT + TS02W01.TS02WWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN3)
    TSIREC.TSICRTQ3 = TSIREC.TSICRTQ3 + TS02W01.TS02WWK1;
    TSIREC.TSICRTQT = TSIREC.TSICRTQT + TS02W01.TS02WWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN4)
    TSIREC.TSICRTQ4 = TSIREC.TSICRTQ4 + TS02W01.TS02WWK1;
    TSIREC.TSICRTQT = TSIREC.TSICRTQT + TS02W01.TS02WWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN5)
    TSIREC.TSICRTQ5 = TSIREC.TSICRTQ5 + TS02W01.TS02WWK1;
    TSIREC.TSICRTQT = TSIREC.TSICRTQT + TS02W01.TS02WWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN6)
    TSIREC.TSICRTQ6 = TSIREC.TSICRTQ6 + TS02W01.TS02WWK1;
    TSIREC.TSICRTQT = TSIREC.TSICRTQT + TS02W01.TS02WWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN7)
    TSIREC.TSICRTQ7 = TSIREC.TSICRTQ7 + TS02W01.TS02WWK1;
    TSIREC.TSICRTQT = TSIREC.TSICRTQT + TS02W01.TS02WWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN8)
    TSIREC.TSICRTQ8 = TSIREC.TSICRTQ8 + TS02W01.TS02WWK1;
    TSIREC.TSICRTQT = TSIREC.TSICRTQT + TS02W01.TS02WWK1;
  end

   /* **                                                        ***/
   /* ********************** End of TS02-67415 ********************/
end // end TS02-67415

// Close  (C3) set       VCPLIT01
Function TS02-67416()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "2-67416"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67416"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67416 ********************/
end // end TS02-67416

// Update (U ) P/L       VCPLHD01
Function TS02-67420()
   /* ------------------------------------------------------------*/
   /*  */
   /* UPDATE PACKING LIST ROW*/
   /*  */
   /* 1) Update the container packing list row with new fields*/
   /* provided by this application.*/
   /*  */
   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "U "; /* ===> move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> if good return code*/

    /* ============ NEXT SENTENCE ============>*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
      converseLib.validationFailed(11); /* ===> Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
    else
      converseLib.validationFailed(10); /* ===> Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* ===> Termination function*/
      converseLib.clearScreen();
       /* ===> Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
    TA1REC.TA1PGMNM = "2-67420"; /* ===> Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS02M001"; /* ===> Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* ===> Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* ===> Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* ===> Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67420"; /* ===> Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack;


  end

   /* **                                                        ***/
   /* ********************** End of TS02-67420 ********************/
end // end TS02-67420

// Insert (A1) Row VPLAUX01
Function TS02-67423()
   /* ------------------------------------------------------------*/

                     /* ADD VPLAUX01 ROWS*/

       /* Add the AUXILLARY rows to DTRANS.VPLAUX01*/

   /* ------------------------------------------------------------*/


  TS02W14.TSCFNC = "A1";
  call "VPLAUX01" (TS02W14, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Insert row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-67423"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67423"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS02-67423 *********************/
end // end TS02-67423

// Process update of P/L VCPLHD01
Function TS02-67500()
   /* ------------------------------------------------------------*/
   /* PERFORM UPDATES FOR CPLHD01*/
   /* ------------------------------------------------------*/
   /* Cycle through all the gpc-cpl packing lists and update*/
   /* the cplhd rows.*/
   /* ------------------------------------------------------*/

  TS02W01.TS02WIX1 = 1;

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMGC /* until end of array*/
   && TS02W03.TSIPLNBR[TS02WIX1] > 0) /* and data exists*/

    TSIREC.TSFSHPID = TSWREC.TSFSHPID;
    TSIREC.TSIPLNBR = TS02W03.TSIPLNBR[TS02WIX1];

    TS02-67510(); /* ===> Select the CPLHD01 row*/

    TS02-67560(); /* ===> Load changes*/

    TS02-67570(); /* ===> Update the row*/

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* incr the counter*/

  end


   /* ***/
   /* ********************* End of TS02-67500 ********************/
end // end TS02-67500

// Select (SA) unique    VCPLHD01
Function TS02-67510()
   /* ------------------------------------------------------------*/
              /* SELECT A SINGLE CPL TABLE ROW*/
   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "SA"; /* ===> move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> If row found*/
    TS02-67520(); /* Get Containers*/

  else

    if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
      converseLib.validationFailed(11); /* ===> Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
    else
      converseLib.validationFailed(10); /* ===> Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* ===> Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
    TA1REC.TA1PGMNM = "2-67510"; /* ===> Process name*/
    TA1REC.TA1PGMNM = "2-67510"; /* ===> Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS02M001"; /* ===> Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDE1"; /* ===> Table view name*/
    TS02M001.XXXPRCNM = "2-67510"; /* ===> Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS02-67510 ********************/
end // end TS02-67510

// Access new subroutine 'TS2840'
Function TS02-67520()
   /* ------------------------------------------------------------*/
   /*  */
   /* ------------------------------------------------------------*/

  TS02W01.TS02WIX6 = 1;
  while (TS02WIX6 < 8)
    TS02W01.TSCNTNR[TS02WIX6] = 0;
    TS02W01.TS02WIX6 = TS02W01.TS02WIX6 + 1;
  end
  TS02W16.TSFSHPID = TSIREC.TSFSHPID; /* move in id*/
  TS02W16.TSIPLNBR = TSIREC.TSIPLNBR;
  TS02W01.TS02WIX6 = 1;

  TS02-67530(); /* ===> Select set of cpl table rows*/
                                   /* (S1)*/
  TS02W01.TS02WSWC = "N";
  TS02-67540(); /* ===> fetch the cpl rows (N1)*/

  while (TS02W01.TS02WSWC == "N" /* ===> End of cursor switch*/
  )
    TS02-67540(); /* ===> fetch the cpl rows (N1)*/


  end
  TS02-67550(); /* ===> close selected set of cpl rows*/
                                  /* (C1)*/

   /* ***/
   /* ********************* End of TS02-67520 ********************/
end // end TS02-67520
// Select (S1) set in 'TS2840'
Function TS02-67530()
   /* ------------------------------------------------------------*/
                 /* SELECT SET OF CPLIT TABLE ROWS*/
   /* ------------------------------------------------------------*/
  TS02W16.TSCFNC = "S1";

  call "TS2840" (TS02W16, SQLCA, TS02W17) {isNoRefresh = yes, isExternal = yes}; /* Select tab*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "2-67530"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLITE1"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67530"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* ***/
   /* ********************* End of TS02-67530 ********************/
end // end TS02-67530

// Fetch  (N1) next in 'TS2840'
Function TS02-67540()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPLIT TABLE ROW*/

      /* Fetch the next row from the selected set of rows,*/

   /* ------------------------------------------------------------*/

  TS02W16.TSCFNC = "N1";

  call "TS2840" (TS02W16, SQLCA, TS02W17) {isNoRefresh = yes, isExternal = yes}; /* Select tab*/

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> End of selected set*/
    TS02W01.TSCNTNR[TS02WIX6] = TS02W17.TSICNTNR;
    TS02W01.TS02WIX6 = TS02W01.TS02WIX6 + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* ===> End of selected set*/
      TS02W01.TS02WSWC = "Y"; /* ===> end of set found*/
    else

      if (SQLCA.VAGen_SQLCODE != 0) /* ===> unexpected return code*/

        if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
          converseLib.validationFailed(11); /* ===> Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
        else
          converseLib.validationFailed(10); /* ===> Indicate system error*/
          TA1REC.TA1FUNC = "ABND"; /* ===> Termination function*/
        end

        TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
        TA1REC.TA1PGMNM = "2-67540"; /* ===> Process name*/
        TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW"; /* ===>*/

        TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
        TA1REC.TA1TBLVU = "VCPLITE1"; /* ===> Table view name*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* ===> Error diag routine*/

        TS02M001.XXXPRCNM = "2-67540"; /* ===> Process name*/

        exit stack; /* ===> exit to re-display the map*/

      end

    end
  end


   /* ***/
   /* ********************* End of TS02-67540 ********************/
end // end TS02-67540

// Close  (C1) SET in 'ts2840'
Function TS02-67550()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/
  TS02W16.TSCFNC = "C1";

  call "TS2840" (TS02W16, SQLCA, TS02W17) {isNoRefresh = yes, isExternal = yes}; /* Select tab*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "2-67550"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS02M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLITE1"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67550"; /* Process name*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* ***/
   /* ********************* End of TS02-67550 ********************/
end // end TS02-67550

// Load nike cntnr nbr  VCPLITE1
Function TS02-67560()
   /* ------------------------------------------------------------*/
   /* Move appropriate nike container number*/
   /* ------------------------------------------------------------*/

  TSIREC.TSHNKCN1 = TS02W01.TSCNTNR[1];
  TSIREC.TSHNKCN2 = TS02W01.TSCNTNR[2];
  TSIREC.TSHNKCN3 = TS02W01.TSCNTNR[3];
  TSIREC.TSHNKCN4 = TS02W01.TSCNTNR[4];
  TSIREC.TSHNKCN5 = TS02W01.TSCNTNR[5];
  TSIREC.TSHNKCN6 = TS02W01.TSCNTNR[6];
  TSIREC.TSHNKCN7 = TS02W01.TSCNTNR[7];
  TSIREC.TSHNKCN8 = TS02W01.TSCNTNR[8];

   /* ********************* End of TS02-67560 ********************/
end // end TS02-67560

// Update (U ) P/L       VCPLHD0
Function TS02-67570()
   /* ------------------------------------------------------------*/
   /* UPDATE PACKING LIST ROW*/
   /* 1) Update the container packing list row*/
   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "U "; /* ===> move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* ===> if good return code*/

    /* ============ NEXT SENTENCE ============>*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* ===> Resource not available*/
      converseLib.validationFailed(11); /* ===> Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* ===> Termination function*/
    else
      converseLib.validationFailed(10); /* ===> Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* ===> Termination function*/
      converseLib.clearScreen();
       /* ===> Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* ===> Type of error*/
    TA1REC.TA1PGMNM = "2-67570"; /* ===> Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS02M001"; /* ===> Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* ===> Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDE1"; /* ===> Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* ===> Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS02M001.XXXPRCNM = "2-67570"; /* ===> Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack;


  end

   /* **                                                        ***/
   /* ********************** End of TS02-67570 ********************/
end // end TS02-67570

// Set-up to process next CPL set
Function TS02-78000()
   /* ------------------------------------------------------------*/
   /* Load set of like rows into the gpc-cpl array.*/
   /*  */
   /* Note: This module controls the set-up of the*/
   /* GPC-CPL set to process. It is built by*/
   /* using data in the CPL array and modules*/
   /* from the initialization section of this*/
   /* application.*/
   /*  */
   /* TS02-78100 = copy of TS02-02000 ---> w/o flow*/
   /*  */
   /* TS02-78200 = copy of TS02-04000 ---> w/o flow*/
   /*  */
   /* TS02-78300 = copy of TS02-05000 ---> w/o flow*/
   /*  */
   /* ------------------------------------------------------------*/


  TS02-01600(); /* ===> Init GPC-CPL array with*/
                                   /* ===>      next set of data*/

  TS02-78100(); /* ===> Initialize the container array*/


  TS02-78200(); /* ===> Initialize compress*/
                                   /* ===>      carton/container array*/

  TS02-78300(); /* ===> Initialize compress carton array*/


   /* **                                                        ***/
   /* ********************** End of TS02-78000 ********************/
end // end TS02-78000

// --->Init containers array
Function TS02-78100()
   /* ------------------------------------------------------------*/
   /*  */
   /* /* OBTAIN THE UPDATE DATA*/
   /*  */
   /* If one of the gpc-cpl rows is in more than one*/
   /* container*/
   /* a. place all valid containers into the container*/
   /* display array.*/
   /* b. Select the set of cartons for the update into the*/
   /* carton array.*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /* -------------------------------------------------------*/
    /* Record all the cntnrs to display for the total number*/
      /* of CPL's in the GPC-CPL array and select the set of*/
      /* cartons associated with them.*/
   /* -------------------------------------------------------*/

  TS02W01.TS02WGCX = 1; /* Init GPC-CPL  index*/

  TS02-02100(); /* record all cntnrs to display*/

  TS02-02200(); /* select the set of cartons*/

   /* **                                                        ***/
   /* ********************** End of TS02-78100 ********************/
end // end TS02-78100

// --->Init compress carton/cntnr
Function TS02-78200()
   /* ------------------------------------------------------------*/
   /*  */
   /* Initialize all compress carton table arrays by using*/
   /* the cartons that were stored in TS02W07.*/
   /*  */
   /* This process will control all lower level process*/
   /* to construct three records/arrays.*/
   /*  */
   /* TS02W23 - A record containing compressed cartons for*/
   /* a single container*/
   /*  */
   /* TS02W24 - A record containing compressed cartons for*/
   /* 1 to 8 possible containers. The containers*/
   /* are carried separately, not compressed.*/
   /*  */
   /* (note: this record will be loaded from TS02W23)*/
   /*  */
   /* ------------------------------------------------------------*/

  TS02W01.TS02WIXC = 1; /* ===> current container index*/
  TS02W01.TS02WIXW = 1; /* ===> W.S. index for TS02W24 Load*/

  set TS02W24 empty; /* ===> Init TS02W24 record*/

  while (TS02W01.TSHNKCN[TS02WIXC] > 0)

    TS02-04100(); /* ===> select the nike container number*/

    TS02-04200(); /* ===> select all the cartons for cntnr*/

    TS02-04300(); /* ===> move data to TS02W24 Record*/

    TS02W01.TS02WIXC = TS02W01.TS02WIXC + 1; /* ===> current container index*/

  end

  TS02W01.TS02WIXC = 1; /* ===> reset current container index*/


   /* **                                                        ***/
   /* ********************** End of TS02-78200 ********************/
end // end TS02-78200

// --->Init compress carton array
Function TS02-78300()
   /* ------------------------------------------------------------*/
   /*  */
   /* OBTAIN DATA FOR DISPLAY*/
   /*  */
   /*  */
   /* A. If in an "INQUERY" option*/
   /*  */
   /* 1) Skip building the carton verification table*/
   /*  */
   /* 2) Initialize container index for*/
   /* application mainline process that follows*/
   /*  */
   /* B. If NOT IN an "INQUERY" option*/
   /*  */
   /* 1) Cycle through all the cartons in the original carton*/
   /* table that was built by compressing all the cartons*/
   /* per container.*/
   /*  */
   /* ie.) compress*/
   /* carton ranges/container record array TS02W24*/
   /* to*/
   /* carton ranges           record array TS02W25*/
   /*  */
   /* 2) This new record array will make the carton*/
   /* verification more efficient.*/
   /*  */
   /* 3) count the total cartons*/
   /*  */
   /* 4) Initialize container index for*/
   /* application mainline process that follows*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */

  if (TS02W01.TS02WOPT == "I")

    TS02W01.TS02WIXC = 1; /* ===> Container array index*/

    exit stack; /* ===> Flow to Mainline processing*/

  end

  TS02W01.TS02WIX1 = 1; /* ===> Original carton table index*/

  set TS02W25 empty; /* ===> Compressed original carton table*/

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMCR /* ===> While le max cartons*/
   && TS02W24.TSHNKCN[TS02WIX1] > 0) /* ===> and cartons exist in WS24*/

    TS02W01.TS02WIX2 = 1; /* ===> Init compress index*/
    TS02W01.TS02WFL1 = "N"; /* ===> w.s. flag (table entry made)*/


    while (TS02W01.TS02WIX2 <= TS02W01.TS02WMCR /* ===> Max entries*/
     && TS02W01.TS02WFL1 == "N") /* ===> w.s. flag (table entry made)*/


      TS02-05100(); /* ===> compress Orig carton range table*/


      TS02W01.TS02WIX2 = TS02W01.TS02WIX2 + 1; /* ===> incr compress index*/

    end

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> Incr gpc-cpl index*/

  end /* ===> more entrys to process*/

   /* **-------------------------------------------*/
   /* ** Count the cartons the ranges*/
   /* **-------------------------------------------*/
   /*  */
  TS02W01.TS02WIX1 = 1; /* ===> Original carton table index*/

  while (TS02W01.TS02WIX1 <= TS02W01.TS02WMCR /* ===> While le max cartons*/
   && TS02W25.TSOFRCRT[TS02WIX1] > 0) /* ===> and cartons exist in WS25*/

    TS02W25.TS02WGCT = TS02W25.TS02WGCT     + TS02W25.TSOTOCRT[TS02WIX1] - TS02W25.TSOFRCRT[TS02WIX1] + 1;
    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* ===> Incr gpc-cpl index*/

  end /* ===> more entrys to process*/

   /*  */
   /* **-------------------------------------------*/
   /* ** Initialize container index for*/
   /* ** application mainline process that follows*/
   /* **-------------------------------------------*/
   /*  */
  TS02W01.TS02WIXC = 1; /* ===> Container array index*/


   /* **                                                        ***/
   /* ********************** End of TS02-78300 ********************/
end // end TS02-78300

// Purge any temp. storage pages
Function TS02S-TS-1()
   /* **----------------------------------------------------------*/
   /* ** If the last function was purge, return to previous process.*/
   /* **----------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* ===> Last function was purge*/
    return; /* ===> Return to previous process*/
  end

   /* ** ----------------------------------------------------------*/
   /* ** Initialize the storage areas and indicators to be used.*/
   /* ** ----------------------------------------------------------*/

  set TS02W05 empty; /* ===> Map 3 display storage record*/

  TS02W01.TS02WSWU = "N"; /* ===> Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* ===> Current page number*/
  TS02W01.TA5TSQIX = 0; /* ===> Highest page number*/

   /* **----------------------------------------------------------*/
   /* ** Purge any temporary storage for this application.*/
   /* **----------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* ===> Appl. ident.*/
  TA5REC.TA5FNCCD = "P"; /* ===> Function code*/

  try
    call "TA0050" (TS02W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* ===> Temporary storage*/

   /* **----------------------------------------------------------*/
   /* ** If successful, return to previous process.*/
   /* **----------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* ===> Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* ===> and normal return code*/

    return; /* ===> Return to previous process*/

  end

   /* **----------------------------------------------------------*/
   /* **  Otherwise, indicate that a system error occurred.*/
   /* **----------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* ===> CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* ===> Subroutine parameters*/

  TS02M001.XXXPRCNM = "2S-TS-1"; /* ===> Module identification*/
  converseLib.validationFailed(10); /* ===> Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* ===> Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* ===> Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* ===> Program application*/
  TA1REC.TA1PGMNO = TS02M001.XXXPRCNM; /* ===> Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* ===> Map application*/

  TA1REC.TA1MAPNO = "M001"; /* ===> Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* ===> Error diagnosis routine*/

  exit stack; /* ===> Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of TS02S-TS-1 ********************/
end // end TS02S-TS-1

// Add page to temp. storage
Function TS02S-TS-2()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS02W05.XXXTSLEN = TS02W01.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (TS02W01.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (TS02W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS02W05 empty; /* m003 display storage*/

    TS02W01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    TS02W01.TS02WIX1 = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS02M001.XXXPRCNM = "2S-TS-2"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = TS02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of TS02S-TS-2 ********************/
end // end TS02S-TS-2

// Update temporary storage page
Function TS02S-TS-3()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  TS02W01.TS02WIX1 = 1;

  while (TS02W01.TS02WIX1 <= 33) /* ===> Max map detail lines*/

    TS02W05.TSOFRCRT[TS02WIX1] = TS02M001.TSOFRCRT[TS02WIX1];
    TS02W05.TSOTOCRT[TS02WIX1] = TS02M001.TSOTOCRT[TS02WIX1];

    TS02W01.TS02WIX1 = TS02W01.TS02WIX1 + 1; /* increment index*/

  end

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS02W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS02M001.XXXPRCNM = "2S-TS-3"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = TS02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End Of TS02S-TS-3 ********************/
end // end TS02S-TS-3

// Obtain temporary storage page
Function TS02S-TS-4()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS02W05.XXXTSLEN = TS02W01.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = TS02W01.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS02W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS02M001.XXXPRCNM = "2S-TS-4"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = TS02M001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of TS02S-TS-4 ********************/
end // end TS02S-TS-4

//*** RECORD=TS02W01 ****
// Working storage for TS02 - Shipment Container Assignment
// 
//          This working storage contains all working fields
//          and arrays used by this application.
// 
// ***********************
Record TS02W01 type basicRecord
  10 * char(1) ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TS02WPAG TS02WPAG ; 
  10 TS02WSWR TS02WSWR ; 
  10 TS02WSWU TS02WSWU ; 
  10 TS02WSWF TS02WSWF ; 
  10 TS02WPS1 TS02WPS1 ; 
  10 TS02WSWC TS02WSWC ; 
  10 TS02WSW1 TS02WSW1 ; 
  10 TS02WOPT TS02WOPT ; 
  10 TS02WHUP TS02WHUP ; 
  10 TS02WIUP TS02WIUP ; 
  10 TS02W1ST TS02W1ST ; 
  10 * char(1) ; 
  10 TS02WQPC TS02WQPC ; 
  10 TS02WCPC TS02WCPC ; 
  10 TS02WPPC TS02WPPC ; 
  10 * char(1) ; 
  10 TS02WADA TS02WADA ; 
    15 TS02WAPS TS02WAPS [24] ; 
    15 TS02WAFL TS02WAFL [24] ; 
  10 TS02WUPF TS02WUPF ; 
  10 * char(1) ; 
  10 TS02WCTR TS02WCTR ; 
  10 TS02WCTT TS02WCTT ; 
  10 TS02WCTM TS02WCTM ; 
  10 TS02WHEF TS02WHEF ; 
  10 TS02WDFL TS02WDFL ; 
  10 TS02WFL1 TS02WFL1 ; 
  10 TS02WFND TS02WFND ; 
  10 TS02WCHF TS02WCHF ; 
  10 * char(1) ; 
  10 TS02W-QTY-ACCUM TS02W-QTY-ACCUM ; 
  10 TS02WGST TS02WGST ; 
  10 TS02WGCT TS02WGCT ; 
  10 TS02WCPX TS02WCPX ; 
  10 TS02WGCX TS02WGCX ; 
  10 TS02WHEX TS02WHEX ; 
  10 TS02WMCR TS02WMCR ; 
  10 TS02WMCD TS02WMCD ; 
  10 TS02WCDX TS02WCDX ; 
  10 TS02WIXC TS02WIXC ; 
  10 TS02WIXW TS02WIXW ; 
  10 TS02WIX1 TS02WIX1 ; 
  10 TS02WIX2 TS02WIX2 ; 
  10 TS02WIX3 TS02WIX3 ; 
  10 TS02WIX4 TS02WIX4 ; 
  10 TS02WIX5 TS02WIX5 ; 
  10 * char(1) ; 
  10 TS02WMAP TS02WMAP ; 
  10 * char(1) ; 
  10 TS02WMCT TS02WMCT ; 
  10 TS02WMGC TS02WMGC ; 
  10 * char(1) ; 
  10 TS02WPWF TS02WPWF ; 
  10 TS02WWUP TS02WWUP ; 
  10 * char(1) ; 
  10 TS02WWK1 TS02WWK1 ; 
  10 TS02WWK2 TS02WWK2 ; 
  10 TS02WWK3 TS02WWK3 ; 
  10 TS02WWK4 TS02WWK4 ; 
  10 TS02WWK5 TS02WWK5 ; 
  10 TS02WWK6 TS02WWK6 ; 
  10 TS02WWK7 TS02WWK7 ; 
  10 TS02WWK8 TS02WWK8 ; 
  10 TS02WWK9 TS02WWK9 ; 
  10 TS02WW10 TS02WW10 ; 
  10 * char(1) ; 
  10 * char(1) ; 
  10 TS02WSCC TS02WSCC ; 
  10 TS02WSCR TS02WSCR ; 
  10 TS02WSCN TS02WSCN ; 
  10 * char(1) ; 
  10 TS02WDAT TS02WDAT ; 
    15 TS02WPCN TS02WPCN ; 
    15 TS02WPYY TS02WPYY ; 
    15 TS02WPM1 TS02WPM1 ; 
    15 TS02WPM2 TS02WPM2 ; 
  10 * char(1) ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC2CUXID PC2CUXID ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XQACD XQACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 YMTCD YMTCD ; 
  10 SY4IDDSC SY4IDDSC ; 
  10 SY5SZID SY5SZID [40] ; 
  10 TS02W-SALES-ORDER TS02W-SALES-ORDER ; 
    15 TS02W-CUST-ORD-ID TS02W-CUST-ORD-ID ; 
    15 TS02W-NIKE-ORD-ID TS02W-NIKE-ORD-ID ; 
  10 * char(1) ; 
  10 TSISHPQT TSISHPQT [8] ; 
  10 TSICRTQT TSICRTQT [8] ; 
  10 * char(1) ; 
  10 TSHCNTNR TSHCNTNR [8] ; 
  10 TSHNKCN TSHNKCN [8] ; 
  10 TSHNKCN1 TSHNKCN1 ; 
  10 TSHNKCN2 TSHNKCN2 ; 
  10 TSHNKCN3 TSHNKCN3 ; 
  10 TSHNKCN4 TSHNKCN4 ; 
  10 TSHNKCN5 TSHNKCN5 ; 
  10 TSHNKCN6 TSHNKCN6 ; 
  10 TSHNKCN7 TSHNKCN7 ; 
  10 TSHNKCN8 TSHNKCN8 ; 
  10 * char(1) ; 
  10 VPLROWCNT VPLROWCNT ; 
  10 TS02CNTR TS02CNTR ; 
  10 TS02TOCTN TS02TOCTN ; 
  10 CPLCRTNS CPLCRTNS ; 
  10 VPLAUXCNT VPLAUXCNT ; 
  10 TSCSPREV TSCSPREV ; 
  10 TSCNTNR TSCNTNR [8] ; 
  10 TS02WIX6 TS02WIX6 ; 
  10 SEL-NIKE-PL-NBR SEL-NIKE-PL-NBR ; 
end // end TS02W01

//*** RECORD=TS02W02 ****
// Working CPLHD record for TS02 -Shipment Container Assignment
// 
//         This record is used to store the initial load
//         information for the container packing lists which
//         exist for this shipment id.
// 
// ***********************
Record TS02W02 type basicRecord
  10 TS02WLN2 TS02WLN2 [30] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XQACD XQACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
end // end TS02W02

//*** RECORD=TS02W03 ****
// Working GPC-CPL record for TS02 - Shipment carton-detail add
// 
//         This record is used to store container packing lists
//         which are similar.  It is primarily for the purpose
//         of handling GPC 03 apparel color packing lists.
// ***********************
Record TS02W03 type basicRecord
  10 TS02WLN3 TS02WLN3 [30] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 TSISTAT TSISTAT ; 
    15 SY4SZSCL SY4SZSCL ; 
    15 TSISHPQT TSISHPQT ; 
    15 TSICRTQT TSICRTQT ; 
    15 TSIPLCBM TSIPLCBM ; 
    15 TSIPLTKG TSIPLTKG ; 
    15 TSHNKCN1 TSHNKCN1 ; 
    15 TSHNKCN2 TSHNKCN2 ; 
    15 TSHNKCN3 TSHNKCN3 ; 
    15 TSHNKCN4 TSHNKCN4 ; 
    15 TSHNKCN5 TSHNKCN5 ; 
    15 TSHNKCN6 TSHNKCN6 ; 
    15 TSHNKCN7 TSHNKCN7 ; 
    15 TSHNKCN8 TSHNKCN8 ; 
    15 TSICRTQ1 TSICRTQ1 ; 
    15 TSICRTQ2 TSICRTQ2 ; 
    15 TSICRTQ3 TSICRTQ3 ; 
    15 TSICRTQ4 TSICRTQ4 ; 
    15 TSICRTQ5 TSICRTQ5 ; 
    15 TSICRTQ6 TSICRTQ6 ; 
    15 TSICRTQ7 TSICRTQ7 ; 
    15 TSICRTQ8 TSICRTQ8 ; 
    15 TSISHPQ1 TSISHPQ1 ; 
    15 TSISHPQ2 TSISHPQ2 ; 
    15 TSISHPQ3 TSISHPQ3 ; 
    15 TSISHPQ4 TSISHPQ4 ; 
    15 TSISHPQ5 TSISHPQ5 ; 
    15 TSISHPQ6 TSISHPQ6 ; 
    15 TSISHPQ7 TSISHPQ7 ; 
    15 TSISHPQ8 TSISHPQ8 ; 
    15 TSICBM1 TSICBM1 ; 
    15 TSICBM2 TSICBM2 ; 
    15 TSICBM3 TSICBM3 ; 
    15 TSICBM4 TSICBM4 ; 
    15 TSICBM5 TSICBM5 ; 
    15 TSICBM6 TSICBM6 ; 
    15 TSICBM7 TSICBM7 ; 
    15 TSICBM8 TSICBM8 ; 
    15 TSITKG1 TSITKG1 ; 
    15 TSITKG2 TSITKG2 ; 
    15 TSITKG3 TSITKG3 ; 
    15 TSITKG4 TSITKG4 ; 
    15 TSITKG5 TSITKG5 ; 
    15 TSITKG6 TSITKG6 ; 
    15 TSITKG7 TSITKG7 ; 
    15 TSITKG8 TSITKG8 ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 TSPFILE TSPFILE ; 
    15 TSILOCR TSILOCR ; 
    15 TSPFCIVC TSPFCIVC ; 
    15 XDMCD XDMCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XQACD XQACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 TSIDETFL TSIDETFL ; 
    15 TSIMSCFL TSIMSCFL ; 
    15 TSIMSCGR TSIMSCGR ; 
    15 TSRTEXT TSRTEXT ; 
    15 XRECD XRECD ; 
    15 ZZZCHGCT ZZZCHGCT ; 
    15 TS02WAFL TS02WAFL ; 
    15 TS02WWQT TS02WWQT ; 
    15 TS02WWSA TS02WWSA ; 
    15 TS02WMQT TS02WMQT ; 
    15 TS02WMSA TS02WMSA ; 
end // end TS02W03

//*** RECORD=TS02W05 ****
// Working map 1 record for TS02 - Shipment carton-detail add
// 
//         This record is designed to store data entered by
//         the user on detail lines within map 1 and is
//         the record used to access T.S.
// 
// ***********************
Record TS02W05 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TS02WLN5 TS02WLN5 [44] ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
end // end TS02W05

//*** RECORD=TS02W07 ****
// ************************************************************
// **          CONTAINER ASSIGNMENT W.S. RECORD              **
// **                    -------                             **
// **             -----  TS02W07  -----                      **
// **                    -------                             **
// 
//     This record is used to hold carton data as it originally
//        came into the application.it will be accessed
//        to gather size data after the cartons have been
//        assigned to desired containers and the update
//        of the CPLIT01 database is ready to proceed.
// 
// **                                                        **
// ************************************************************
// ***********************
Record TS02W07 type basicRecord
  10 TSOGROUP TSOGROUP [1600] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSHNKCN TSHNKCN ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
    15 SY5SZID SY5SZID ; 
    15 TSIMSCFL TSIMSCFL ; 
    15 TSIMSCGR TSIMSCGR ; 
    15 TSOSHPQT TSOSHPQT ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
  10 TS02WQPC TS02WQPC [1600] ; 
end // end TS02W07

//*** RECORD=TS02W11 ****
// Working map 1 record for TS02 - Shipment carton-detail add
// 
//         This record is a copy of map 1 used to compare
//         changes on the screen to determine whether or not
//         to perform edits/updates.  It is also used to
//         restore working storage in the event PA2 is pressed.
// ***********************
Record TS02W11 type basicRecord
  10 TS02WLN5 TS02WLN5 [66] ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
end // end TS02W11

//*** RECORD=TS02W14 ****
//   TRANSPORTATION VPLAUX01 RECORD PARAMETERS
//   PARAMETERS TO PASS:    Entered function ===> TSCFNC
//                          VCPLIT01 SIZE ID ===> CPLITSZID
// 
//   DATE      NAME       DESCRIPTION OF CHANGE
//   -----   -------     -----------------------------
//  08/12/97  RKALLA      NEW RECORD USED TO TRANSFER DATA
// ***********************
Record TS02W14 type basicRecord
  5 TS0VGRP TS0VGRP ; 
    10 TSCFNC TSCFNC ; 
    10 CPLITSZID CPLITSZID ; 
end // end TS02W14

//*** RECORD=TS02W15 ****
// Record to store the size and carton ranges, to be used by
// VPLAUX01 SEARCH. Created by RKALLA.
// TS000  09/24/97  INCREASED THE SIZE OF ARRAY TO 18000
// ***********************
Record TS02W15 type basicRecord
  10 TS-CRTN-NBR TS-CRTN-NBR [18000] ; 
  10 TS-UCC-128-CD TS-UCC-128-CD [18000] ; 
  10 PK-CRTN-CD PK-CRTN-CD [18000] ; 
end // end TS02W15

Record TS02W16 type basicRecord
  5 TS02W16GRP TS02W16GRP ; 
    10 TSCFNC TSCFNC ; 
    10 TSFSHPID TSFSHPID ; 
    10 TSIPLNBR TSIPLNBR ; 
end // end TS02W16

Record TS02W17 type basicRecord
  10 TSICNTNR TSICNTNR ; 
  10 TSSUMQTY TSSUMQTY ; 
end // end TS02W17

//*** RECORD=TS02W23 ****
// ************************************************************
// **          CONTAINER ASSIGNMENT W.S. RECORD              **
// **                    -------                             **
// **             -----  TS02W23  -----                      **
//                       -------
// 
//     This record is used to compress carton ranges
//         a single container assoc. with the GPC-CPL
//         array.
//            ie). w.s. record TS02W03
// 
//     It will be the source for initailly loading:
// 
//      1. cartons/container record array.
//            ie). w.s. record TS02W24 carries cartons by cntnr
// 
//      2. the Temp. Storage record array.
//            ie). w.s. record TS02W05
// 
//     This table will change when a new container is
//         to be displayed for inquiry or maintenance.
//            ie). loaded from w.s. record TS02W24
// 
// **                                                        **
// ************************************************************
// ***********************
Record TS02W23 type basicRecord
  10 TS02WR23 TS02WR23 [1600] ; 
    15 TSHNKCN TSHNKCN ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
    15 TS02WAFL TS02WAFL ; 
  10 TS02WGCT TS02WGCT ; 
  10 TS02WGST TS02WGST ; 
  10 TS02WACT TS02WACT ; 
  10 TS02WAST TS02WAST ; 
end // end TS02W23

//*** RECORD=TS02W24 ****
// ************************************************************
// **          CONTAINER ASSIGNMENT W.S. RECORD              **
// **                    -------                             **
// **             -----  TS02W24  -----                      **
// **                    -------                             **
// 
//     This record is used to compress carton ranges
//         per container for all containers assoc. with
//         the GPC-CPL ARRAY   ie.) w.s. record TS02W03
// 
//     It will also be the source for initially loading T.S.
//         with data the will be displayed to the user for
//         inquery or update, via a load to TS02W23.
// 
//     This table will be modified throughout the application
//         depending on which cartons have been moved/assigned
//         among containers.
// 
//     Containers that have been processed, will have there
//         appropriate ranges flaged as assigned.
// 
// **                                                        **
// ************************************************************
// ***********************
Record TS02W24 type basicRecord
  10 TS02WR24 TS02WR24 [1600] ; 
    15 TSHNKCN TSHNKCN ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
    15 TS02WAFL TS02WAFL ; 
  10 TS02WGCT TS02WGCT [8] ; 
  10 TS02WGST TS02WGST [8] ; 
  10 TS02WACT TS02WACT [8] ; 
  10 TS02WAST TS02WAST [8] ; 
end // end TS02W24

//*** RECORD=TS02W25 ****
// ************************************************************
// **          CONTAINER ASSIGNMENT W.S. RECORD              **
// **                    -------                             **
// **             -----  TS02W25  -----                      **
//                       -------
// 
//     This record is used to compress carton ranges
//         for all containers assoc. with the GPC-CPL
//         array. ie). w.s. record TS02W03
// 
//     It will be the source for verification of existing
//         cartons.
// 
//     This table will remain static throughout the application
//         for a particular GPC-CPL record array.
// 
// **                                                        **
// ************************************************************
// ***********************
Record TS02W25 type basicRecord
  10 TS02WR25 TS02WR25 [1600] ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
  10 TS02WGCT TS02WGCT ; 
  10 TS02WGST TS02WGST ; 
end // end TS02W25

//*** RECORD=TS02W26 ****
// ************************************************************
// **          CONTAINER ASSIGNMENT W.S. RECORD              **
// **                    -------                             **
// **             -----  TS02W26  -----                      **
//                       -------
// 
//    This record is used to hold compressed carton ranges
//         a container assoc. with the GPC-CPL
//         array.
//            ie). w.s. record TS02W03
// 
//     It will be the source for database updates:
// 
//     This table will change when a container has
//         been processed and cartons assigned.
//            ie). loaded from w.s. record TS02W23
// 
// **                                                        **
// ************************************************************
// ***********************
Record TS02W26 type basicRecord
  10 TS02WR26 TS02WR26 [1600] ; 
    15 TSHNKCN TSHNKCN ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
    15 TS02WAFL TS02WAFL ; 
  10 TS02WGCT TS02WGCT [8] ; 
  10 TS02WGST TS02WGST [8] ; 
  10 TS02WACT TS02WACT [8] ; 
  10 TS02WAST TS02WAST [8] ; 
end // end TS02W26

//*** RECORD=TS02W27 ****
// ************************************************************
// **          CONTAINER ASSIGNMENT W.S. RECORD              **
// **                    -------                             **
// **             -----  TS02W27  -----                      **
// **                    -------                             **
// 
//     This record is used to hold carton data, and will be
//        the source for VCPLIT01 database update.
// 
// 
// **                                                        **
// ************************************************************
// ***********************
Record TS02W27 type basicRecord
  10 TSOGROUP TSOGROUP [1600] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSHNKCN TSHNKCN ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
    15 SY5SZID SY5SZID ; 
    15 TSIMSCFL TSIMSCFL ; 
    15 TSIMSCGR TSIMSCGR ; 
    15 TSOSHPQT TSOSHPQT ; 
    15 ZZZSDT ZZZSDT ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
  10 TS02WQPC TS02WQPC [1600] ; 
end // end TS02W27

DataItem SEL-NIKE-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS02CNTR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS02TOCTN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem TS02W-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem TS02W-NIKE-ORD-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Accumulator for qtys in cntnr
DataItem TS02W-QTY-ACCUM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sales order format
DataItem TS02W-SALES-ORDER num(12,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS02W16GRP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time thru switch
DataItem TS02W1ST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Assigned carton   total count
DataItem TS02WACT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array for adds
DataItem TS02WADA char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton range assigned flag
DataItem TS02WAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-add-po-style-fl
DataItem TS02WAPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Assigned shipping total count
DataItem TS02WAST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-carton-detail-index
DataItem TS02WCDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Changes made flag
DataItem TS02WCHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// "curr" Quantity per carton
DataItem TS02WCPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-cpl-index
DataItem TS02WCPX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Carton Total # incl musicals
DataItem TS02WCTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-container-counter
DataItem TS02WCTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Carton Count total
DataItem TS02WCTT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date
DataItem TS02WDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Delete successful flag
DataItem TS02WDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w.s. flag for loops #1
DataItem TS02WFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Found flag
DataItem TS02WFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC-CPL  carton   total count
DataItem TS02WGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc-cpl array index
DataItem TS02WGCX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GPC-CPL  shipping total count
DataItem TS02WGST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Header entered flag
DataItem TS02WHEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-hard-error-index
DataItem TS02WHEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Header update switch
DataItem TS02WHUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Item   update switch
DataItem TS02WIUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working index 1
DataItem TS02WIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 2
DataItem TS02WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 3
DataItem TS02WIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 4
DataItem TS02WIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS02WIX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS02WIX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current container array index
DataItem TS02WIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index
DataItem TS02WIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line
DataItem TS02WLN2 char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage 3 line
DataItem TS02WLN3 char(640)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line 5
DataItem TS02WLN5 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed
DataItem TS02WMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-containers-to-display
DataItem TS02WMCD smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max-cartons
DataItem TS02WMCR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max-cpl-table-lines
DataItem TS02WMCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max-gpc-cpl-table-lines
DataItem TS02WMGC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map style qty
DataItem TS02WMQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map qty by size array
DataItem TS02WMSA char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Option switch
DataItem TS02WOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS02WPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id century
DataItem TS02WPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS02WPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS02WPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// "prev" Quantity per carton
DataItem TS02WPPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS02WPS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edits Warning flag per screen
DataItem TS02WPWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS02WPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Quantity per carton
DataItem TS02WQPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W.S. record W23
DataItem TS02WR23 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton/cntnr array record W24
DataItem TS02WR24 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton        array record W25
DataItem TS02WR25 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W.S. record W26
DataItem TS02WR26 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save total # cntnrs to display
DataItem TS02WSCC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save carton number
DataItem TS02WSCN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save total # cartons to assign
DataItem TS02WSCR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Multi-use switch
DataItem TS02WSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS02WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem TS02WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS02WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update  for data switch
DataItem TS02WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update occurred flag
DataItem TS02WUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage num 10
DataItem TS02WW10 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 1
DataItem TS02WWK1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 2
DataItem TS02WWK2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 3
DataItem TS02WWK3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 4
DataItem TS02WWK4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 5
DataItem TS02WWK5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 6
DataItem TS02WWK6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 7
DataItem TS02WWK7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 8
DataItem TS02WWK8 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 9
DataItem TS02WWK9 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working stor style qty
DataItem TS02WWQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working stor qty by size array
DataItem TS02WWSA char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update warning flag
DataItem TS02WWUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TSCNTNR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSCSPREV smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSICNTNR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSSUMQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem VPLROWCNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

