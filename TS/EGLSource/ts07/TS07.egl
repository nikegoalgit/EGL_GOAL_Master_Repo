package ts07;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pv.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS07 ****
// ------------------------------------------------------------
//                         ts07
// 
//   nike international ltd.  --  packing list carton detail
// ------------------------------------------------------------
// 
// This application will display ,update, split cartons & sizes
// and add cartons to N.I.L. packing lists.
// 
// ------------------------------------------------------------
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/22/89  jcampb  New application.
//          11/08/89  jcampb  fix split carton error
//          11/27/89  jcampb  fix shiprec update error
//          11/29/89  jcampb  add io0450 to validate that the
//                            style to be added is on the order
//          12/13/89  jcampb  fix errors when selecting shiprec
//          12/15/89  jcampb  fix error on second and greater
//                            sizes on add carton.
//          12/20/89  jcampb  fix error on qtys greater than
//                            qty left on split carton.
//          02/07/90  jjohns  Add call to s02 in process 210.
//          02/14/90  jjohns  Display carton total in carton
//                            code for full case cartons in 210
//          02/20/90  jjohns  Change pd1rec to fy1rec.
//          02/26/90  jcampb  Fix error in shiprec qtys in 960.
//          02/28/90  jjohns  Fix OP2LNINB for split cartons
//                            in 725.
//          02/26/90  jcampb  change carton load logic in procs
//                            ts07100 & ts07120 - to handle
//                            multiple recs per ctn/sz on last
//                            entry in temp storage page.
//          05/01/90  mmoreh  totally restructured to adhere to
//                            csp coding conventions.  re-coded
//                            all sqlcode checking to correct
//                            bad code. eliminated extraneous
//                            flags and other crap from program
//          02/14/91  rvakel  table changes: SR3REC refernces
//                            changed; xsdcd to pc2inseg,
//                            xsacd to xegcd.
//          03/07/91  rvakel  regenned for table changes.
//          05/28/91  msmit3  added check to validate product
//                            is produced in the specified fcty
//                            during the specified time frame.
// TS#0     06/11/91  rvakel  Regenned for table changes.
// TS1010   10/10/91  dchian  REMOVED UNUSED PC6REC. RENAMED
//                            XSDCD TO PC2INSEG AND XSACD TO
//                            XEGCD FOR TABLE CHANGES.
// PK#0     10/31/91  SPOPA   Format ZZZCHGDT as current date
//                            when inserting row into VSRXCP01.
// TS23     06/29/92  dchian  Regen appl to pickup new ts6rec.
// TS11     09/16/92  dchian  Add ability to process multiple
//                            crtns selected in TS06.
// TS#0     10/14/92  dchian  Regenned for table changes.
// TS#3     11/18/92  dchian  Allow up to 50 crtn nbrs selected
//                            in TS06 to be processed.
// TS50     02/16/93  dchian  Remove hard coded values, force
//                            required fields when add products
// TS00     08/27/93  dchian  Correct pc-po-id-mo-rng length in
//                            ts07m001,2,3.
// TS00     09/10/93  dchian  Change map heading ts07m001,2,3.
// TS#0     01/18/94  hkempe  Changed to allow for a nine digit
//                            order nbr - TS07M001, TS07M002,
//                            TS07M003.
// TS8901   03/04/94  hkempe  Generate/Compile to pick up revsd
//                            COMMAREA, TSWREC, TSYREC, TSZREC,
//                            TS4REC, TS6REC, SR3REC, OP6REC,
//                            PC6REC, XCTTBL.
//                            Resized TS07W00, TS07W01, TS07W02
//                            Renamed TSOCRTNB to TS-PL-CRTN-
//                            NBR in TS07M001/M002/M003.
// TS8901   03/14/94  hkempe  Change hardcoded tsq length from
//                            744 to 746 in ts07110,310,510,710
//                            re: TS07W01 & TS07W02 length chg.
// TS8901   03/31/94  hkempe  Rename TSOCRTNB to TSPCRTNB in
//                            TSYREC and TSPREC.
// y2kfix   11/12/97  oricha  Y2k modifications:  regen only
//                            for xx0xs01 century adjustment.
// DLVRUSA  05/10/01  SBHARA  MODIFIED FOR NSC US-GO LIVE
//                            1)While updating shiprec order
//                            table Dorder.vsrord01---IO0800
//                            The NIL tables carry Goal SO
//                            number and the Shiprec tables
//                            carry Delivery note from SAP
//                            We need to get the corresponding
//                            delivery note from OTP table
//                            using the new IO module VOPPKH05
//                            2)While updating shiprec item
//                            table Dorder.vsritm01---SR1100
//                            The Goal SO in NIL and the OTP
//                            Delivery note will store the
//                            Line items differently.So we need
//                            to identify the correct line item
//                            number using OTP item table
// *********************
Program TS07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  OP6REC OP6REC; // record
  PC2REC PC2REC; // record
  PG3REC PG3REC; // record
  PKDREC PKDREC; // record
  PKLREC PKLREC; // record
  PKNREC PKNREC; // record
  SQLCA SQLCA; // record
  SR1REC SR1REC; // record
  SR2REC SR2REC; // record
  SR3REC SR3REC; // record
  SR5REC SR5REC; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS07W00 TS07W00; // record
  TS07W01 TS07W01; // record
  TS07W02 TS07W02; // record
  TS4REC TS4REC; // record
  TS6REC TS6REC; // record
  TSUREC TSUREC; // record
  TSVREC TSVREC; // record
  TSWREC TSWREC; // record
  TSYREC TSYREC; // record
  TSZREC TSZREC; // record
  VOPPKH05 VOPPKH05; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YNTTBL; // table
  use XCTTBL; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use TS07M.TS07M001,  // forms
      TS07M.TS07M002, 
      TS07M.TS07M003, 
      TS07M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the application main process.*/
     /* ------------------------------------------------------------*/

     /* --------------- init appl working storage -----------------*/
    set TS07W00 empty;
    set TS07W01 empty;
    set TS07W02 empty;
     /* -------------------- init appl maps ------------------------*/
    set TS07M001 initial;
     /* SET TS07M002 CLEAR;*/
     /* SET XX0XM001 CLEAR;*/
     /* --------------- init linkage and work recs -----------------*/
    set SQLCA empty; /* db2 error record*/
    set ERRSQLCA empty;
    set TA1REC empty; /* ta0020 abend record*/
    set TA5REC empty; /* temp storage queue record*/
    set TAEREC empty; /* ta0020 abend record*/

     /* ------------- init db2 i/o mod linkage recs ----------------*/
    set FY1REC empty; /* dfcty.vfcty001*/
    set OP6REC empty; /* dorder.vitem001*/
    set PG3REC empty; /* pg1050 size translation rec*/
    set PKDREC empty;
    set PKLREC empty; /* dpick.vcrtn001*/
    set PKNREC empty; /* dpick.vpksty01*/
    set SR1REC empty; /* dship.vsrhdr01*/
    set SR2REC empty; /* dship.vsrord01*/
    set SR3REC empty; /* dship.vsritm01 (sr1100) formatter*/
    set SR5REC empty; /* dship.vsrxcp01*/
    set TSUREC empty; /* dtrans.vnlshp01*/
    set TSVREC empty; /* dtrans.vnlplo01*/
    set TSYREC empty; /* dtrans.vnlplc01*/
    set TSZREC empty; /* dtrans.vnlpls01*/
    set TS4REC empty; /* io4710 function record*/
    set TS6REC empty;
    set PC2REC empty; /* dprodc.vprdcu01*/
    set SY1REC empty; /* dprod.vstyle01*/

     /* ------------------ set default values ----------------------*/
    TS07W00.TS07WSMX = 13; /* set max nbr of screen lines*/
    TS07W00.TS07WSWD = "1"; /* map to be displayed switch*/
    TS07W00.TS07WSWF = "Y"; /* format the map switch*/
    TS07W00.TS07WSWR = "N"; /* request for data switch*/
    TS07W00.TS07WSWX = "N"; /* page fwd/bwd indicator*/
    TS07W00.TS07WSWW = "N"; /* warning sent switch*/
    TS07W00.TS07W-NDX = 1; /* set crtn # table index*/

     /* ------------- check for linkage from other appl ------------*/
    if (COMMAREA.CAFROMAP == "TS03"
     || COMMAREA.CAFROMAP == "TS04"
     || COMMAREA.CAFROMAP == "TS05"
     || COMMAREA.CAFROMAP == "TS06"
     || COMMAREA.CAFROMAP == "TS07"
     || COMMAREA.CAFROMAP == "TS08")
      if (TSWREC.OP1CUOID > 0)
        TS07M001.KUCCOID = TSWREC.KUCCOID;
        TS07M001.TSVPLNBR = TSWREC.TSVPLNBR;
        TS07M001.OP1CUOID = TSWREC.OP1CUOID;
        TS07M001.OP1NORID = TSWREC.OP1NORID;
        TS07W00.TS07WSWR = "Y"; /* request for data switch*/
        if (COMMAREA.CAFROMAP == "TS06")
          while (TS07W00.TS07W-NDX <= 50
           && TSWREC.TSW-TSOCRTNB[TS07W-NDX] == 0)
            TS07W00.TS07W-NDX = TS07W00.TS07W-NDX + 1;
          end
          if (TS07W00.TS07W-NDX > 50)
            TS07M001.TS-PL-CRTN-NBR = 0;
          else
            if (TSWREC.TSW-TSOCRTNB[TS07W-NDX] > 0)
              TS07M001.TS-PL-CRTN-NBR = TSWREC.TSW-TSOCRTNB[TS07W-NDX];
            else
              TS07M001.TS-PL-CRTN-NBR = 0;
            end
          end
        else
          TS07M001.TS-PL-CRTN-NBR = TSWREC.TSOCRTNB;
        end
      else
        set TSWREC empty;
      end
    end

     /* ------------------------------------------------------------*/
               /* ; Converse application main process*/
     /* ------------------------------------------------------------*/

    goto TS07001;

    TS07001: TS07001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the application main process.*/
     /* ------------------------------------------------------------*/

    goto TS07001; /* Converse application main process*/


  end // end main
end // end TS07

// Application main process
Function TS07001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWD == "1") /* map 1 was requested*/

    TS07100(); /* updates to existing data*/

  else

    if (TS07W00.TS07WSWD == "2") /* Map 2 was requested*/

      TS07300(); /* split size mode*/

    else

      if (TS07W00.TS07WSWD == "3") /* Map 3 was requested*/

        TS07500(); /* split carton mode*/

      else

        if (TS07W00.TS07WSWD == "4") /* Map 4 was requested*/

          TS07700(); /* add carton mode*/

        else

          /* ------------------------------------------------------------*/
           /* Write the error to the Error Diagnosis Reporting Facility.*/
          /* ------------------------------------------------------------*/

          TSWREC.XXXMODID = "001"; /* Module identification*/
          TSWREC.XXXMSGNO = 10; /* Indicate system error*/

          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
          TA1REC.TA1MAPNO = TS07W00.TS07WSWD; /* Map number*/
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

          /* ------------------------------------------------------------*/
           /* Exit to display the application system menu.*/
          /* ------------------------------------------------------------*/

          COMMAREA.CATOAP = "TS03"; /* TO application*/

          XSTSS02(); /* Exit to another application*/

          /* ------------------------------------------------------------*/
           /* Abnormally terminate the transaction if the exit failed.*/
          /* ------------------------------------------------------------*/

          TA1REC.TA1FUNC = "ABND"; /* Termination function*/

          call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        end

      end

    end

  end

end // end TS07001

// List the rows in the table
Function TS07100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Check for multiple packing lists*/
   /* 2) Obtain the data to display.*/
   /* 3) Format the map output area and display the map.*/
   /* 4) Check the attention identifier used to respond.*/
   /* 5) Reset highlighted fields to normal intensity.*/
   /* 6) Verify the data that was entered.*/
   /* 7) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS07101(); /* check for multiple p/l*/

  TS07110(); /* Obtain the data to display*/

  TS07120(); /* Format and display the map*/

  TS07130(); /* Check attention identifier*/

  TS07140(); /* Reset fields to normal intensity*/

  TS07150(); /* Verify the entered data*/

  TS07160(); /* Process valid input request*/


end // end TS07100

// check for multiple p/l
Function TS07101()
   /* ------------------------------------------------------------*/
   /* This process is used to check for an order which belongs to*/
   /* more than one packing list. if the order does belong to*/
   /* more than one packing list, then transfer to the carton*/
   /* summary screen (TS06.)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, check for multiple p/l*/
   /* ------------------------------------------------------------*/

  if (TS07M001.TSVPLNBR != TS07W01.TSVPLNBR /* packing list changed*/
   || TS07M001.OP1CUOID != TS07W01.OP1CUOID /* ord num changed*/
   || TS07M001.OP1NORID != TS07W01.OP1NORID) /* ord id changed*/

    if (TS07M001.TSVPLNBR == TS07W01.TSVPLNBR /* p/l not changed*/
     || TS07M001.TSVPLNBR == 0)               /* or not entered*/

      TSWREC.TSFSHPID = 0; /* initalize nike ship id*/

      TS07W00.TS07WSWR = "Y"; /* Request for data switch*/

      TS07102(); /* see if only one p/l exists for order*/

    end

  end

end // end TS07101

// scan packing list by order nbr
Function TS07102()
   /* ------------------------------------------------------------*/
   /* if no request for data or error was found, return*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR != "Y" /* no request for data*/
   || converseVar.validationMsgNum != 0)

    return; /* return*/

  end

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the p/l table.*/
   /* ------------------------------------------------------------*/

  TS07103(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch a packing list*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WPLO = 0; /* initalize NLPLO row count*/

  while (TS07W00.TS07WSWB == "N") /* while not end-of-file*/
    TS07104(); /* Fetch selected NLPLO rows*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the product table.*/
   /* ------------------------------------------------------------*/

  TS07105(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* if more than 1 packing list exists then go to p/l summary*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WPLO < 2) /* if less than 2 packing lists*/

    TS07M001.TSVPLNBR = TSVREC.TSVPLNBR; /* save p/l nbr*/

    return; /* return to previous process*/

  else

    TSWREC.TSVPLNBR = 0; /* p/l number*/
    TSWREC.OP1CUOID = TS07M001.OP1CUOID; /* order number*/
    TSWREC.OP1NORID = TS07M001.OP1NORID; /* order number*/
    TSWREC.KUCCOID = TS07M001.KUCCOID; /* customer*/
    TSWREC.XXXTSPAG = 1; /* set page number to 1*/
    COMMAREA.CATOAP = "TS06"; /* TO application*/
    /* ------------------------------------------------------------*/
     /* change the packing list search flag to 'o'*/
    /* ------------------------------------------------------------*/

    TSWREC.TSWPLFLG = "O"; /* search key is by order*/

    TS07S01(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

  end

   /* ------------------------------------------------------------*/
   /* abnormally terminate the transaction if the exit failed*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* terminate function*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/


end // end TS07102

// Select set and open cursor
Function TS07103()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.OP1CUOID = TS07M001.OP1CUOID; /* order number*/
  if (TS07M001.OP1NORID == 0) /* order id not entered*/
    TSVREC.OP1NORID = 1; /* use default of one*/
    TS07M001.OP1NORID = 1;
  else
    TSVREC.OP1NORID = TS07M001.OP1NORID; /* order id*/
  end

  try
    call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS07W00.TS07WSWB = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "103"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07103

// Fetch next row in the cursor
Function TS07104()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      TS07W00.TS07WPLO = TS07W00.TS07WPLO + 1; /* add 1 to count*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS07W00.TS07WSWB = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "104"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07104

// Close selected set cursor
Function TS07105()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "105"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07105

// Obtain the data to display
Function TS07110()
   /* ------------------------------------------------------------*/
   /* Check to see if warning has been given and if so, reset*/
   /* warning switches.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWW == "N" /* If warning switch not set*/
   && converseVar.validationMsgNum == 317) /* and ezemno eq 317*/
    converseLib.validationFailed(0); /* clear error message and*/
  end

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* establigh the temporary storage queue length*/
   /* ------------------------------------------------------------*/

  TS07W00.XXXTSLEN = 744; /* temp storage page length*/

   /* ------------------------------------------------------------*/
   /* if no message to display, reset the page number to display*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO == 0) /* no message to display*/
    TS07W00.XXXTSPAG = 1; /* page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* ------------------------------------------------------------*/

  TS07S01(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  TS07111(); /* select the packing list info*/

  TS07112(); /* select the carton info*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  TS07113(); /* select the product info*/

   /* ------------------------------------------------------------*/
   /* Fetch and format data into pages until end of cursor*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WIXM = 1; /* DISPLAY LINE INDEX*/
  TS07W00.TS07WSWC = "N"; /* end or cursor switch*/

  while (TS07W00.TS07WSWC == "N")

    TS07114(); /* fetch next row in the cursor*/

    TS07115(); /* save data in display storage*/

    /* ------------------------------------------------------------*/
     /* The page IS full or we are at end of data*/
    /* ------------------------------------------------------------*/
    if (TS07W00.TS07WIXM > 13) /* page is full*/

      TS07S02(); /* Add page to temporary storage*/

      TS07W00.TS07WIXM = 1; /* reset line index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* add any partially fromatted page to the queue.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WIXM > 1) /* page was formatted*/

    TS07S02(); /* Add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  TS07116(); /* close the cursor*/

   /* ------------------------------------------------------------*/
    /* if no pages were formatted, indicate no data to display*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TA5TSQIX == 0) /* no pages formatted*/
    TS07W00.XXXTSPAG = 0; /* reset current page*/
    TS07M001.TSVPLNBR = TS07W01.TSVPLNBR; /* p/l nbr*/
    TS07M001.OP1CUOID = TS07W01.OP1CUOID; /* ord nbr*/
    TS07M001.OP1NORID = TS07W01.OP1NORID; /* ord id*/
    TS07M001.TS-PL-CRTN-NBR = TS07W01.TS-PL-CRTN-NBR; /* ord id*/
    set TS07M001.OP1CUOID cursor, bold; /* highlight*/
    set TS07M001.OP1NORID bold;
    set TS07M001.TS-PL-CRTN-NBR bold;
    TSWREC.XXXMODID = "110"; /* module identification*/
    TSWREC.XXXMSGNO = 21; /* indicate no data to display*/
    return; /* exit to continue processing*/
  end

   /* ------------------------------------------------------------*/
    /* indicate request for data complete*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWR = "N"; /* Request for data completed*/

end // end TS07110

// Select DTRANS.VNLPLO01 info
Function TS07111()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the DTRANS.VNLPLO01 table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS07M001.TSVPLNBR; /* p/l number*/
  TSVREC.OP1CUOID = TS07M001.OP1CUOID; /* order number*/
  if (TS07M001.OP1NORID == 0) /* if order id not entered*/
    TSVREC.OP1NORID = 1; /* use default of one*/
  else
    TSVREC.OP1NORID = TS07M001.OP1NORID; /* order id*/
  end

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TSVREC.XWHCD = "  "; /* warehouse*/
      TSVREC.NIAIVCDT = 0; /* warehouse*/
      TSVREC.XDSCD = " "; /* direct ship code*/
      TSVREC.KUCCOID = TS07M001.KUCCOID; /* customer*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PACKLIST FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07111

// Select DTRANS.VNLPLC01 info
Function TS07112()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/

  TSYREC.TSVPLNBR = TS07M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS07M001.OP1CUOID; /* order number*/
  if (TS07M001.OP1NORID == 0) /* if order id not entered*/
    TSYREC.OP1NORID = 1; /* use default of one*/
  else
    TSYREC.OP1NORID = TS07M001.OP1NORID; /* order id*/
  end
  if (TS07M001.TS-PL-CRTN-NBR == 0) /* if carton nbr not entered*/
    TSYREC.TSPCRTNB = 1; /* use default of one*/
  else
    TSYREC.TSPCRTNB = TS07M001.TS-PL-CRTN-NBR; /* carton number*/
  end

  TS4REC.TS4TASK = "S "; /* select unique*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TSYREC.TSVPLNBR = TS07M001.TSVPLNBR; /* customer*/
      TSYREC.OP1CUOID = TS07M001.OP1CUOID; /* order number*/
      TSYREC.OP1NORID = TS07M001.OP1NORID; /* order id*/
      TSYREC.TSPCRTNB = TS07M001.TS-PL-CRTN-NBR; /* carton number*/
      TSYREC.YNTCD = " "; /* carton type code*/
      TSYREC.PKLCTNCD = " "; /* carton code*/
      TSYREC.PKLCTNLN = 0; /* carton length*/
      TSYREC.PKLCTNWD = 0; /* carton width*/
      TSYREC.PKLCTNHG = 0; /* carton height*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN CARTON INFO FOR HEADER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07112

// Select set and open cursor
Function TS07113()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  set TSZREC empty;
  set TS6REC empty;

  TSZREC.TSVPLNBR = TS07M001.TSVPLNBR;
  TSZREC.OP1CUOID = TS07M001.OP1CUOID;
  if (TS07M001.OP1NORID == 0) /* if order id not entered*/
    TSZREC.OP1NORID = 1; /* use default of one*/
  else
    TSZREC.OP1NORID = TS07M001.OP1NORID;
  end
  if (TS07M001.TS-PL-CRTN-NBR == 0) /* if ctn nbr not entered*/
    TSZREC.TSPCRTNB = 1; /* use default of one*/
  else
    TSZREC.TSPCRTNB = TS07M001.TS-PL-CRTN-NBR;
  end

  TS6REC.TS6TASK = "S3"; /* select scan-3*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VNLPLS01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07113

// Fetch next row in the cursor
Function TS07114()
   /* ------------------------------------------------------------*/
   /* fetch the DTRANS.VNLPLS01 table record.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "N3"; /* fetch next row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS07W00.TS07WSWC = "Y"; /* indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "114"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT VNLPLS01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07114

// save data in display storage
Function TS07115()
   /* ------------------------------------------------------------*/
   /* If the first line on a page, save the heading information.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WIXM == 1) /* First line on page*/

    TS07W01.KUCCOID = TSVREC.KUCCOID; /* customer*/
    TS07W01.XWHCD = TSVREC.XWHCD; /* warehouse*/
    TS07W01.XDSCD = TSVREC.XDSCD; /* direct ship code*/
    TS07W01.NIAIVCDT = TSVREC.NIAIVCDT; /* nil invoice date*/
    TS07W01.TSFSHPID = TSVREC.TSFSHPID; /* shipment id*/
    TS07W01.SR1PKDT = TSVREC.SR1PKDT; /* pick date*/

    TS07W01.TSVPLNBR = TSYREC.TSVPLNBR; /* p/l number*/
    TS07W01.OP1PARTN = TSYREC.OP1PARTN; /* order part char*/
    TS07W01.OP1CUOID = TSYREC.OP1CUOID; /* order number*/
    TS07W01.OP1NORID = TSYREC.OP1NORID; /* order id*/
    TS07W01.TS-PL-CRTN-NBR = TSYREC.TSPCRTNB; /* carton number*/
    TS07W01.YNTCD = TSYREC.YNTCD; /* carton type*/
    TS07W01.PKLCTNCD = TSYREC.PKLCTNCD; /* carton code*/
    TS07W01.PKLCTNLN = TSYREC.PKLCTNLN; /* carton length*/
    TS07W01.PKLCTNWD = TSYREC.PKLCTNWD; /* carton width*/
    TS07W01.PKLCTNHG = TSYREC.PKLCTNHG; /* carton height*/
    TS07W01.TSYNCTFT = TSYREC.TSYNCTFT; /* carton volume*/
    TS07W01.TSYNCTLB = TSYREC.TSYNCTLB; /* carton weight*/
    TS07W01.TSOSHPQT = TSYREC.TSOSHPQT; /* carton total units*/

  end

   /* ------------------------------------------------------------*/
   /* If no table row was found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Table row not found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  TS07W01.XGPCD[TS07WIXM] = TSZREC.XGPCD; /* gpc code*/
  TS07W01.SY1STNBR[TS07WIXM] = TSZREC.SY1STNBR; /* style*/
  TS07W01.SY2CLRID[TS07WIXM] = TSZREC.SY2CLRID; /* color*/
  TS07W01.XDMCD[TS07WIXM] = TSZREC.XDMCD; /* dim code*/
  TS07W01.XQACD[TS07WIXM] = TSZREC.XQACD; /* quality*/
  TS07W01.XOWCD[TS07WIXM] = TSZREC.XOWCD; /* owner group*/
  TS07W01.PC2INSEG[TS07WIXM] = TSZREC.PC2INSEG; /* in seg cd*/
  TS07W01.XPGCD[TS07WIXM] = TSZREC.XPGCD; /* pkg type*/
  TS07W01.XUMCD[TS07WIXM] = TSZREC.XUMCD; /* unit of meas*/
  TS07W01.SY5SZID[TS07WIXM] = TSZREC.SY5SZID; /* size*/
  TS07W01.PC3POIDT[TS07WIXM] = TSZREC.PC3POIDT; /* p.o. month*/
  TS07W01.FY1FCTYC[TS07WIXM] = TSZREC.FY1FCTYC; /* factory*/
  TS07W01.XCTCD[TS07WIXM] = TSZREC.XCTCD; /* country*/
  TS07W01.PK1QTY[TS07WIXM] = TS6REC.TS6FUNCT; /* nbr of units*/
  TS07W01.TS07WQTY[TS07WIXM] = TS6REC.TS6FUNCT; /* orig nbr of units*/
  TS07W01.TSZXCPFL[TS07WIXM] = TSZREC.TSZXCPFL; /* pick xcp flag*/
  TS07W01.OP2LNINB[TS07WIXM] = TSZREC.OP2LNINB; /* line item nbr*/

  TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* Increment line index*/

end // end TS07115

// close cursor vnlpls01
Function TS07116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "C3"; /* close cursor*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07116

// Format and converse the map
Function TS07120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (TS07W00.TS07WSWF == "Y") /* Map must be formatted*/
      TS07121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if not authorized to change, then protect all modifiable*/
   /* ------------------------------------------------------------*/

  TS07122();

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS07M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS07M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/

      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TS07M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    TS07M001.XXXMODID = TSWREC.XXXMODID; /* Module identification*/

    set TS07M001 alarm; /* Indicate sound alarm*/

  end

   /* ----------------------------------------------------------*/
   /* if batched shiprec schedules were found then display the*/
   /* schedules on the map.*/
   /* ----------------------------------------------------------*/
  if (TS07W00.TS07WSRB == "Y") /* if shiprec schedules batched*/
    TS07M001.TS07MSCM = TS07W00.TS07WSMS; /* move schedules*/
    set TS07M001.TS07MSCP normal; /* show message*/
    set TS07M001.TS07MSCP skip; /* show message*/
  end
  converse TS07M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = TS07M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS07M001.CAITEM; /* Application data*/

end // end TS07120

// Format the display data
Function TS07121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS07M001 initial; /* M001 input/output area*/

  TS07W00.TS07WSWF = "N"; /* Format the map switch*/
  TS07W00.TS07WSWZ = "Y"; /* pick excp first time switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS07W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (TS07W00.TS07WSWU == "Y") /* Current page was changed*/

        TS07S03(); /* Update temporary storage page*/

        TS07W00.TS07WSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS07W00.XXXTSPAG > TS07W00.TA5TSQIX) /* Desired greater highest*/
        TS07W00.XXXTSPAG = TS07W00.TA5TSQIX; /* Default to highest*/
      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is less than the lowest page*/
       /* in storage, default to the lowest page number.*/
      /* ------------------------------------------------------------*/

      if (TS07W00.XXXTSPAG < 1) /* Desired less than lowest*/
        TS07W00.XXXTSPAG = 1; /* Default to lowest*/
      end

      TS07S04(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TS07M001.XXXTSPAG = TS07W00.XXXTSPAG; /* Current page*/
    TS07M001.TA5TSQIX = TS07W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS07M001.XWHCD = TS07W01.XWHCD;
  TS07M001.KUCCOID = TS07W01.KUCCOID;
  TS07M001.TSVPLNBR = TS07W01.TSVPLNBR;
  TS07M001.OP1CUOID = TS07W01.OP1CUOID;
  TS07M001.OP1NORID = TS07W01.OP1NORID;
  TS07M001.TS-PL-CRTN-NBR = TS07W01.TS-PL-CRTN-NBR;

  if (TS07W00.TA5TSQIX > 0) /* if data to display*/
    if (TS07W01.XDSCD == "1") /* p/l is a direct ship*/
      TS07M001.YNTABRV = "DIRECT SHIP";

      set TS07M001.PKLCTNHG initialAttributes;
      set TS07M001.PKLCTNWD initialAttributes;
      set TS07M001.PKLCTNLN initialAttributes;
      set TS07M001.TSYNCTLB initialAttributes;
      set TS07M001.TSYNCTFT initialAttributes;
      set TS07M001.TS07MCCD initialAttributes;
      set TS07M001.YNTABRV skip;
    else
      TS07M001.PKLCTNHG = TS07W01.PKLCTNHG;
      TS07M001.PKLCTNWD = TS07W01.PKLCTNWD;
      TS07M001.PKLCTNLN = TS07W01.PKLCTNLN;
      TS07M001.TSYNCTFT = TS07W01.TSYNCTFT;
      TS07M001.TSYNCTLB = TS07W01.TSYNCTLB;

      set TS07M001.PKLCTNHG normal;
      set TS07M001.PKLCTNWD normal;
      set TS07M001.PKLCTNLN normal;
      set TS07M001.TSYNCTLB normal;
      set TS07M001.TSYNCTFT skip;
      set TS07M001.TS07MCCD normal;
      set TS07M001.YNTABRV skip;
    end
  end


  TS07W00.TS07WIXM = 1; /* Initialize line index*/

  while (TS07W00.TS07WIXM <= 13 /* Until screen is full*/
   && TS07W01.XGPCD[TS07WIXM] > "  ") /* or end of data*/

    if (TS07W00.TS07WIXM == 1) /* First select field*/
      set TS07M001.TS07MSEL[TS07WIXM] cursor, normal; /* Position cursor*/
    else
      set TS07M001.TS07MSEL[TS07WIXM] normal; /* Unprotect*/
    end

    set TS07M001.PK1QTY[TS07WIXM] normal;
    set TS07M001.PC3POIDT[TS07WIXM] normal;
    set TS07M001.FY1FCTYC[TS07WIXM] normal;
    set TS07M001.XCTCD[TS07WIXM] normal;

    if (TS07W00.TS07WIXM > 1
     && TS07W01.XGPCD[TS07WIXM] == TS07M001.XGPCD[TS07WIXG]
     && TS07W01.SY1STNBR[TS07WIXM] == TS07M001.SY1STNBR[TS07WIXG]
     && TS07W01.SY2CLRID[TS07WIXM] == TS07M001.SY2CLRID[TS07WIXG]
     && TS07W01.XDMCD[TS07WIXM] == TS07M001.XDMCD[TS07WIXG]
     && TS07W01.XQACD[TS07WIXM] == TS07M001.XQACD[TS07WIXG]
     && TS07W01.XOWCD[TS07WIXM] == TS07M001.XOWCD[TS07WIXG]
     && TS07W01.PC2INSEG[TS07WIXM] == TS07M001.PC2INSEG[TS07WIXG]
     && TS07W01.XPGCD[TS07WIXM] == TS07M001.XPGCD[TS07WIXG]
     && TS07W01.XUMCD[TS07WIXM] == TS07M001.XUMCD[TS07WIXG])
       /* next sentence*/
    else
      TS07W00.TS07WIXG = TS07W00.TS07WIXM;
      TS07M001.XGPCD[TS07WIXM] = TS07W01.XGPCD[TS07WIXM];
      TS07M001.SY1STNBR[TS07WIXM] = TS07W01.SY1STNBR[TS07WIXM];
      TS07M001.SY2CLRID[TS07WIXM] = TS07W01.SY2CLRID[TS07WIXM];
      TS07M001.XDMCD[TS07WIXM] = TS07W01.XDMCD[TS07WIXM];
      TS07M001.XQACD[TS07WIXM] = TS07W01.XQACD[TS07WIXM];
      TS07M001.XOWCD[TS07WIXM] = TS07W01.XOWCD[TS07WIXM];
      TS07M001.PC2INSEG[TS07WIXM] = TS07W01.PC2INSEG[TS07WIXM];
      TS07M001.XPGCD[TS07WIXM] = TS07W01.XPGCD[TS07WIXM];
      TS07M001.XUMCD[TS07WIXM] = TS07W01.XUMCD[TS07WIXM];
    end
    TS07M001.TS07MSEL[TS07WIXM] = TS07W01.TS07MSEL[TS07WIXM];
    TS07M001.PK1QTY[TS07WIXM] = TS07W01.PK1QTY[TS07WIXM];
    TS07M001.PC3POIDT[TS07WIXM] = TS07W01.PC3POIDT[TS07WIXM];
    TS07M001.FY1FCTYC[TS07WIXM] = TS07W01.FY1FCTYC[TS07WIXM];
    TS07M001.XCTCD[TS07WIXM] = TS07W01.XCTCD[TS07WIXM];
    TS07M001.TSZXCPFL[TS07WIXM] = TS07W01.TSZXCPFL[TS07WIXM];
    /* ------------------------------------------------------------*/
      /* build the pg3rec.pg3key for translation of external sizes*/
    /* ------------------------------------------------------------*/
    TS07W00.XGPCD = TS07W01.XGPCD[TS07WIXM];
    TS07W00.SY1STNBR = TS07W01.SY1STNBR[TS07WIXM];
    TS07W00.SY2CLRID = TS07W01.SY2CLRID[TS07WIXM];
    TS07W00.XDMCD = TS07W01.XDMCD[TS07WIXM];
    TS07W00.XQACD = TS07W01.XQACD[TS07WIXM];
    if (TS07W00.PG3KEY != PG3REC.PG3KEY)
      TS07S05(); /* translate sizes*/
    end
    TS07W00.TS07WSIZ = TS07W01.SY5SZID[TS07WIXM];
    if (PG3REC.SY4IDDSC[TS07WSIZ] == " ")
      TS07M001.SY4IDDSC[TS07WIXM] = TS07W00.TS07WSZX;
    else
      TS07M001.SY4IDDSC[TS07WIXM] = PG3REC.SY4IDDSC[TS07WSIZ];
    end
    /* ------------------------------------------------------------*/
    TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
    /* convert carton code and dimensions to carton volume*/
   /* ------------------------------------------------------------*/
  if (TS07W01.XDSCD != "1") /* if not a direct ship*/
    if (TS07W01.PKLCTNCD != " ") /* is it a full case carton?*/
      TS07M001.YNTABRV = "FULL CASE"; /* move full case to desc*/
      if (TS07W01.SY1UNPCS[1] > 0) /* use units per case if avail*/
        TS07W00.TS07WMQT = TS07W01.SY1UNPCS[1]; /* convert qty*/
        TS07M001.TS07MCCD = TS07W00.TS07WMQT; /* carton code*/
        TS07W01.TS07MCCD = TS07W00.TS07WMQT; /* carton code*/
      else
        TS07W00.TS07WMQT = TS07W01.TSOSHPQT; /* convert total ctn qty*/
        TS07M001.TS07MCCD = TS07W00.TS07WMQT; /* use ctn qty for code*/
        TS07W01.TS07MCCD = TS07W00.TS07WMQT; /* use ctn qty for code*/
      end
      if (TS07W01.PKLCTNLN <= 0)
                                   /* if carton dimenisions are not present*/
        TS07S06(); /* get carton dimensions from carton*/
                                   /* table*/
        TS07M001.PKLCTNWD = PKLREC.PKLCTNWD;
        TS07M001.PKLCTNHG = PKLREC.PKLCTNHG;
        TS07M001.PKLCTNLN = PKLREC.PKLCTNLN;
        TS07M001.TSYNCTFT = PKLREC.PKLCTNF3;
      else
        TS07M001.YNTABRV = "**H/W/L OVRD**"; /* volume user override*/
      end
    else
      TS07M001.TS07MCCD = TS07W01.YNTCD; /* use carton type code*/
      TS07W01.TS07MCCD = TS07W01.YNTCD; /* use carton type code*/
      if (TS07W01.YNTCD != " "
       && TS07W01.YNTCD in YNTTBL.YNTCD)
        TS07M001.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
        TS07W01.YNTCRWT = YNTTBL.YNTCRWT[sysVar.arrayIndex];
        if (TS07W01.PKLCTNLN <= 0)
          TS07M001.PKLCTNLN = YNTTBL.YNTCLSLN[sysVar.arrayIndex];
          TS07M001.PKLCTNHG = YNTTBL.YNTCLSHG[sysVar.arrayIndex];
          TS07M001.PKLCTNWD = YNTTBL.YNTCLSWD[sysVar.arrayIndex];
          TS07WCFT = YNTTBL.YNTCLSLN[sysVar.arrayIndex] * YNTTBL.YNTCLSHG[sysVar.arrayIndex];
          TS07WCFT = TS07WCFT * YNTTBL.YNTCLSWD[sysVar.arrayIndex];
          TS07M001.TSYNCTFT = TS07W00.TS07WCFT / 1728; /* cnvrt to cubic ft*/
        else
          TS07M001.YNTABRV = "**H/W/L OVRD**";
                                   /* volume user override*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* display warning if carton code or dimensions are missing*/
   /* ------------------------------------------------------------*/
  if (TS07W00.TA5TSQIX > 0) /* if data to display*/
    if (TS07W01.XDSCD != "1"
     && TS07M001.TSYNCTLB == 0)
      set TS07M001.TSYNCTLB cursor, bold;
      TSWREC.XXXMODID = "121";
      TSWREC.XXXMSGNO = 0205; /* weight needs to be entered*/
    end
    if (TS07W01.XDSCD != "1"
     && TS07M001.TS07MCCD == " "
     && TS07M001.PKLCTNHG == 0
     && TS07M001.PKLCTNWD == 0
     && TS07M001.PKLCTNLN == 0)
      set TS07M001.TS07MCCD cursor, bold;
      set TS07M001.PKLCTNLN bold;
      set TS07M001.PKLCTNWD bold;
      set TS07M001.PKLCTNHG bold;
      TSWREC.XXXMODID = "121";
      TSWREC.XXXMSGNO = 0205; /* volume needs to be entered*/
    end

  end

end // end TS07121

// Check change authorization
Function TS07122()
   /* ------------------------------------------------------------*/
   /* If the user is authorized to change and there is modifiable*/
   /* data to change, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* Authorized to change*/
   && TS07W01.NIAIVCDT == 0)  /* and p/l not invoiced*/

    if (TS07W01.XDSCD != "1" /* export order*/
     && COMMAREA.CACLVL[1] == "Y") /* export updates allowed*/

      TS07W00.CACHGFL = "Y"; /* set update flag to yes*/
      return; /* Return to previous process*/

    end

    if (TS07W01.XDSCD == "1" /* direct ship order*/
     && COMMAREA.CACLVL[2] == "Y") /* direct ship updts allowed*/

      TS07W00.CACHGFL = "Y"; /* set update flag to yes*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Set all modifiable fields to protected mode.*/
   /* ------------------------------------------------------------*/

  TS07W00.CACHGFL = "N"; /* set update flag to no*/

  set TS07M001.TS07MCCD skip; /* carton type code*/
  set TS07M001.YNTABRV skip; /* carton type desc*/
  set TS07M001.TSYNCTLB skip; /* carton weight*/
  set TS07M001.TSYNCTFT skip; /* carton volume*/
  set TS07M001.PKLCTNHG skip; /* carton height*/
  set TS07M001.PKLCTNWD skip; /* carton width*/
  set TS07M001.PKLCTNLN skip; /* carton length*/

  TS07W00.TS07WIXM = 1; /* initialize line counter*/

  while (TS07W00.TS07WIXM <= 13) /* until end of lines*/

    if (TS07W01.XGPCD[TS07WIXM] != "  ")

      set TS07M001.PK1QTY[TS07WIXM] skip; /* protect units*/
      set TS07M001.PC3POIDT[TS07WIXM] skip; /* protect p.o. month*/
      set TS07M001.FY1FCTYC[TS07WIXM] skip; /* protect factory*/
      set TS07M001.XCTCD[TS07WIXM] skip; /* protect country*/

    end

    TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* increment line counter*/

  end

end // end TS07122

// Check attention identifier
Function TS07130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (TS07W00.TS07WSWR == "Y") /* Request for data*/
      set TS07W01 empty; /* M001 display storage*/
    end

    TS07W00.TS07WSWF = "Y"; /* Format the map switch*/
    TS07W00.TS07WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (TS07M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TS07S01(); /* Purge temporary storage*/

      XSTSS02(); /* Exit to another application*/

      set TS07M001.CATOAP cursor, bold; /* Highlight*/

    else

      TSWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS07M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      TSWREC.TSVPLNBR = TS07M001.TSVPLNBR; /* p/l number*/
      TSWREC.OP1CUOID = TS07M001.OP1CUOID; /* order number*/
      TSWREC.OP1NORID = TS07M001.OP1NORID; /* order number*/
      TSWREC.KUCCOID = TS07M001.KUCCOID; /* customer*/
      TSWREC.TSOCRTNB = TS07M001.TS-PL-CRTN-NBR; /* carton number*/
      COMMAREA.CATOAP = "TS06"; /* TO application*/
    end

    TS07S01(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* add carton*/
   && converseVar.eventKey not pf7   /* page forward*/
   && converseVar.eventKey not pf8   /* page backward*/
   && converseVar.eventKey not pf9   /* split product size*/
   && converseVar.eventKey not pf13) /* split carton*/

    TSWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* if the packing list has been invoiced, or updt not allowed,*/
   /* any special function key other than select (enter) is not*/
   /* allowed to be used.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.CACHGFL == "N") /* if update is not allowed*/
    if (converseVar.eventKey is pf5 /* add carton*/
     || converseVar.eventKey is pf9 /* split product size*/
     || converseVar.eventKey is pf13) /* split carton*/

      TSWREC.XXXMODID = "130"; /* Module identification*/
      if (TS07W01.NIAIVCDT > 0) /* if p/l is invoiced*/
        converseLib.validationFailed(188); /* Indicate invalid attention key*/
      else
        converseLib.validationFailed(208); /* Indicate lack authority*/
      end

      exit stack; /* Exit to display map*/

    end

  end


end // end TS07130

// reset highlighted fields
Function TS07140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS07M001.TSVPLNBR normal; /* p/l number*/
  set TS07M001.OP1CUOID normal; /* order number*/
  set TS07M001.OP1NORID normal; /* order id*/
  set TS07M001.TS-PL-CRTN-NBR normal; /* carton number*/

  if (TS07W01.XDSCD != "1") /* if not a direct ship*/
    set TS07M001.TS07MCCD normal; /* carton type code*/
    set TS07M001.TSYNCTLB normal; /* carton weight*/
    set TS07M001.TSYNCTFT normal; /* carton volume*/
    set TS07M001.PKLCTNLN normal; /* carton length*/
    set TS07M001.PKLCTNWD normal; /* carton width*/
    set TS07M001.PKLCTNHG normal; /* carton height*/
  end

  TS07W00.TS07WIXM = 1; /* Initialize line index*/

  while (TS07W00.TS07WIXM <= 13) /* Until end of lines*/
    if (TS07M001.PK1QTY[TS07WIXM] > 0) /* if line exists*/

      set TS07M001.TS07MSEL[TS07WIXM] normal; /* Reset action field*/
      set TS07M001.PK1QTY[TS07WIXM] normal; /* reset quantity*/
      set TS07M001.PC3POIDT[TS07WIXM] normal; /* po month*/
      set TS07M001.FY1FCTYC[TS07WIXM] normal; /* factory*/
      set TS07M001.XCTCD[TS07WIXM] normal; /* country*/

    end

    TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* Increment line index*/

  end

  set TS07M001.CATOAP initialAttributes; /* TO application*/
  set TS07M001.CAITEM initialAttributes; /* Application data*/


end // end TS07140

// verify entered data
Function TS07150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (TS07M001.CAITEM > " ") /* Application data was entered*/

    TSWREC.XXXMODID = "150"; /* Module identification*/
    set TS07M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || TS07M001.XXXTSPAG != TS07W00.XXXTSPAG) /* or page nbr chgd*/

    TS07151(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (TS07W00.TA5TSQIX > 0) /* Page was formatted*/

      TS07W00.TS07WIXM = 13; /* Initialize line index*/

      while (TS07W00.TS07WIXM > 0) /* Until end of lines*/

        TS07152(); /* Verify data in the line*/

        TS07W00.TS07WIXM = TS07W00.TS07WIXM - 1; /* Decrement line number*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* if enter key was pressed check the carton dimension fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* if enter key was pressed*/

    TS07W00.TS07WSWY = "N"; /* wgt/vol chgd flag*/

    if (TS07M001.PKLCTNLN is modified /* length entered*/
     || TS07M001.PKLCTNWD is modified /* width  entered*/
     || TS07M001.PKLCTNHG is modified) /* height entered*/
      if (TS07M001.PKLCTNLN > 0 /* all must be entered*/
       && TS07M001.PKLCTNWD > 0 /* all must be entered*/
       && TS07M001.PKLCTNHG > 0) /* all must be entered*/

        TS07W00.TS07WSWY = "Y"; /* wgt/vol chgd*/
        TS07W00.TS07WCFT = TS07M001.PKLCTNHG * TS07M001.PKLCTNWD;
        TS07W00.TS07WCFT = TS07W00.TS07WCFT * TS07M001.PKLCTNLN;
        TS07W00.TS07WCFT = TS07W00.TS07WCFT / 1728;
        TS07M001.TSYNCTFT = TS07W00.TS07WCFT; /* carton volume*/

      else
        if (TS07M001.PKLCTNLN > 0 /* if any dimension is entered*/
         || TS07M001.PKLCTNWD > 0 
         || TS07M001.PKLCTNHG > 0)
          TSWREC.XXXMODID = "150"; /* module identification*/
          set TS07M001.PKLCTNHG cursor, bold; /* highlight*/
          set TS07M001.PKLCTNWD bold; /* highlight*/
          set TS07M001.PKLCTNLN bold; /* highlight*/
          converseLib.validationFailed(248); /* all three must be entered*/
        else
          TS07W00.TS07WCCD = TS07M001.TS07MCCD; /* format to 2 chars*/
          if (TS07W00.TS07WCCD in YNTTBL.YNTCD /* if in table*/
           && YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and status is active*/

            TS07W00.TS07WSWY = "Y"; /* wgt/vol chgd*/
            TS07W00.TS07WCFT = YNTCLSHG[sysVar.arrayIndex] * YNTCLSWD[sysVar.arrayIndex];
            TS07W00.TS07WCFT = TS07W00.TS07WCFT * YNTCLSLN[sysVar.arrayIndex];
            TS07W00.TS07WCFT = TS07W00.TS07WCFT / 1728;
            TS07M001.TSYNCTFT = TS07W00.TS07WCFT;

            TS07W00.TS07WLBS = TS07W01.YNTCRWT - YNTTBL.YNTCRWT[sysVar.arrayIndex];
            TS07M001.TSYNCTLB = TS07W01.TSYNCTLB - TS07W00.TS07WLBS;

          else
            TSWREC.XXXMODID = "150"; /* module identification*/
            set TS07M001.TS07MCCD cursor, bold; /* highlight*/
            converseLib.validationFailed(198); /* carton type code invalid*/
          end
        end
      end
    end

    if (TS07M001.TS07MCCD != TS07W01.TS07MCCD) /* if carton type entered*/
      if (TS07M001.TS07MCCD == "?") /* if request for popup window*/
         /* next sentence*/
      else
        if (TS07M001.TS07MCCD == " ") /* if code is removed*/
          if (TS07W01.PKLCTNLN > 0) /* and ctn dimensions present*/

            TSWREC.XXXMODID = "150"; /* module identification*/
            set TS07M001.TS07MCCD cursor, bold; /* highlight*/
            converseLib.validationFailed(198); /* carton type code invalid*/

          else

            TSWREC.XXXMODID = "150"; /* module identification*/
            set TS07M001.TS07MCCD cursor, bold; /* highlight*/
            set TS07M001.PKLCTNHG bold; /* highlight*/
            set TS07M001.PKLCTNWD bold; /* highlight*/
            set TS07M001.PKLCTNLN bold; /* highlight*/
            converseLib.validationFailed(199); /* cant enter both type and dimensions*/
          end
        else
          TS07W00.TS07WCCD = TS07M001.TS07MCCD; /* format to 2 chars*/
          if (TS07W00.TS07WCCD in YNTTBL.YNTCD /* if in table*/
           && YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and status is active*/

            TS07W00.TS07WSWY = "Y"; /* wgt/vol chgd*/
            TS07W00.TS07WCFT = YNTCLSHG[sysVar.arrayIndex] * YNTCLSWD[sysVar.arrayIndex];
            TS07W00.TS07WCFT = TS07W00.TS07WCFT * YNTCLSLN[sysVar.arrayIndex];
            TS07W00.TS07WCFT = TS07W00.TS07WCFT / 1728;
            TS07M001.TSYNCTFT = TS07W00.TS07WCFT;

            TS07W00.TS07WLBS = TS07W01.YNTCRWT - YNTTBL.YNTCRWT[sysVar.arrayIndex];
            TS07M001.TSYNCTLB = TS07W01.TSYNCTLB - TS07W00.TS07WLBS;

          else
            TSWREC.XXXMODID = "150"; /* module identification*/
            set TS07M001.TS07MCCD cursor, bold; /* highlight*/
            converseLib.validationFailed(198); /* carton type code invalid*/
          end
        end
      end
    end

    if (TS07M001.TSYNCTLB != TS07W01.TSYNCTLB) /* if weight entered*/
      if (TS07M001.TSYNCTLB > 0) /* must be entered*/
        TS07W00.TS07WSWY = "Y"; /* wght or volume changes*/
      else
        TSWREC.XXXMODID = "150"; /* module identification*/
        set TS07M001.TSYNCTLB cursor, bold; /* highlight*/
        converseLib.validationFailed(295); /* must be entered*/
      end
    end

  else

    if (TS07M001.PKLCTNLN is modified /* if length entered*/
     || TS07M001.PKLCTNWD is modified /* if width  entered*/
     || TS07M001.PKLCTNHG is modified) /* if height entered*/
      TSWREC.XXXMODID = "150"; /* module identification*/
      set TS07M001.PKLCTNHG cursor, bold; /* highlight*/
      set TS07M001.PKLCTNWD bold; /* highlight*/
      set TS07M001.PKLCTNLN bold; /* highlight*/
      converseLib.validationFailed(294); /* cannot update unless enter is used*/
    end

    if (TS07M001.TS07MCCD != TS07W01.TS07MCCD) /* if carton type entered*/
      TSWREC.XXXMODID = "150"; /* module identification*/
      set TS07M001.TS07MCCD cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* cannot update unless enter is used*/
    end

    if (TS07M001.TSYNCTLB != TS07W01.TSYNCTLB) /* if weight entered*/
      TSWREC.XXXMODID = "150"; /* module identification*/
      set TS07M001.TSYNCTLB cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* cannot update unless enter is used*/
    end

  end

   /* ------------------------------------------------------------*/
   /* check to see if a pop-up window was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    if ("?" in TS07M001.XCTCD
     || TS07M001.TS07MCCD == "?")

      TS07154();

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end TS07150

// Verify scroll request
Function TS07151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS07W00.XXXTSPAG < 2)       /* and no previous pages*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS07W00.XXXTSPAG >= TS07W00.TA5TSQIX) /* and no more pages*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* save any lines that were selected for updates of ctn split*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || TS07W00.XXXTSPAG != TS07W00.TA5TSQIX) /* or page number chgd*/

    TS07W00.TS07WIXM = 13; /* Initialize line index*/

    while (TS07W00.TS07WIXM > 0) /* Until end of lines*/

      /* ------------------------------------------------------------*/
      if (TS07M001.XCTCD[TS07WIXM] != TS07W01.XCTCD[TS07WIXM])
        TSWREC.XXXMODID = "151"; /* module id*/
        set TS07M001.XCTCD[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(294); /* modification not allowed*/
      end
      if (TS07M001.FY1FCTYC[TS07WIXM] != TS07W01.FY1FCTYC[TS07WIXM])
        TSWREC.XXXMODID = "151"; /* module id*/
        set TS07M001.FY1FCTYC[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(294); /* modification not allowed*/
      end
      if (TS07M001.PC3POIDT[TS07WIXM] != TS07W01.PC3POIDT[TS07WIXM])
        TSWREC.XXXMODID = "151"; /* module id*/
        set TS07M001.PC3POIDT[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(294); /* modification not allowed*/
      end
      if (TS07M001.PK1QTY[TS07WIXM] != TS07W01.PK1QTY[TS07WIXM])
        if (TS07M001.PK1QTY[TS07WIXM] > TS07W01.PK1QTY[TS07WIXM])
          TSWREC.XXXMODID = "151"; /* module id*/
          set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
          converseLib.validationFailed(191); /* qty must be less than orig*/
        end
        if (TS07M001.TS07MSEL[TS07WIXM] == TS07W01.TS07MSEL[TS07WIXM])
          TSWREC.XXXMODID = "151"; /* module id*/
          set TS07M001.TS07MSEL[TS07WIXM] cursor, bold; /* highlight*/
          converseLib.validationFailed(013); /* sel must be entered if qty chg*/
        end
        if (converseVar.validationMsgNum == 0) /* and no errors encountered*/
          TS07W01.TS07MSEL[TS07WIXM] = TS07M001.TS07MSEL[TS07WIXM];
          TS07W01.PK1QTY[TS07WIXM] = TS07M001.PK1QTY[TS07WIXM];
          TS07W00.TS07WSWU = "Y"; /* storage update switch*/
          TS07W00.TS07WSWX = "Y"; /* set qty updated flag*/
        end
      else
        if (TS07M001.TS07MSEL[TS07WIXM] != TS07W01.TS07MSEL[TS07WIXM])
          TSWREC.XXXMODID = "151"; /* module id*/
          set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
          converseLib.validationFailed(191); /* quantity must change if selected*/
        end
      end

      TS07W00.TS07WIXM = TS07W00.TS07WIXM - 1; /* decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (TS07M001.PKLCTNLN is modified) /* length changed*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.PKLCTNLN cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS07M001.PKLCTNWD is modified) /* width changed*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.PKLCTNWD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS07M001.PKLCTNHG is modified) /* height changed*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.PKLCTNHG cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS07M001.TS07MCCD != TS07W01.TS07MCCD) /* carton type code*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.TS07MCCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS07M001.TS-PL-CRTN-NBR != TS07W01.TS-PL-CRTN-NBR) /* carton number*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.TS-PL-CRTN-NBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS07M001.TSYNCTLB != TS07W01.TSYNCTLB) /* carton weight*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.TSYNCTLB cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS07M001.OP1NORID != TS07W01.OP1NORID) /* order id*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.OP1NORID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS07M001.OP1CUOID != TS07W01.OP1CUOID) /* order number*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.OP1CUOID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS07M001.TSVPLNBR != TS07W01.TSVPLNBR) /* p/l number*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS07M001.TSVPLNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

end // end TS07151

// Verify data in the line
Function TS07152()
   /* ------------------------------------------------------------*/
   /* if enter was pressed then check for updates to line data*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* if enter check updates*/

    if (TS07M001.XCTCD[TS07WIXM] != TS07W01.XCTCD[TS07WIXM] /* code entered*/
     && TS07M001.XCTCD[TS07WIXM] != "?"                     /* and not popup request*/
     && TS07M001.XCTCD[TS07WIXM] != " ")                    /* and not been reset to space*/
      if (TS07M001.XCTCD[TS07WIXM] in XCTTBL.XCTCD /* code in table*/
       && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
         /* next sentence*/
      else
        TSWREC.XXXMODID = "152"; /* module id*/
        set TS07M001.XCTCD[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(241); /* indicate missing or invalid*/
      end
    end

    if (TS07M001.FY1FCTYC[TS07WIXM] != TS07W01.FY1FCTYC[TS07WIXM]
     && TS07M001.FY1FCTYC[TS07WIXM] != " ") /* spaces dont need edit*/
      TS07S07(); /* validate factory code and supply*/
                                   /* country code*/
    end

    if (TS07M001.PK1QTY[TS07WIXM] != TS07W01.PK1QTY[TS07WIXM])
      TS07153(); /* check for valid quantity changes*/
      if (TS07W00.TS07WSRF == "Y" /* if shiprec found and okay to update*/
       || TS07W01.XWHCD == "22")  /* dlvrusa-if airborne whse*/
        set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
        if (TS07W00.TS07WSWZ == "Y") /* if first time through edit*/
          TS07W00.TS07WSWZ = "N"; /* dont display msg twice*/
          TSWREC.XXXMODID = "152"; /* module id*/
          converseLib.validationFailed(252); /* ask if picking exception is okay*/
        end
      else
        TSWREC.XXXMODID = "152"; /* module id*/
        set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(231); /* quantity changes not valid*/
      end
    end

    if (TS07M001.TS07MSEL[TS07WIXM] != TS07W01.TS07MSEL[TS07WIXM])
      if (TS07M001.XCTCD[TS07WIXM] != TS07W01.XCTCD[TS07WIXM]
       || TS07M001.FY1FCTYC[TS07WIXM] != TS07W01.FY1FCTYC[TS07WIXM]
       || TS07M001.PC3POIDT[TS07WIXM] != TS07W01.PC3POIDT[TS07WIXM]
       || TS07M001.PK1QTY[TS07WIXM] != TS07W01.PK1QTY[TS07WIXM])
         /* next sentence*/
      else
        TSWREC.XXXMODID = "152"; /* module id*/
        set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
        set TS07M001.PC3POIDT[TS07WIXM] bold; /* highlight*/
        set TS07M001.FY1FCTYC[TS07WIXM] bold; /* highlight*/
        set TS07M001.XCTCD[TS07WIXM] bold; /* highlight*/
        converseLib.validationFailed(034); /* one of these fields is needed*/
      end
    else
      if (TS07M001.XCTCD[TS07WIXM] != TS07W01.XCTCD[TS07WIXM]
       || TS07M001.FY1FCTYC[TS07WIXM] != TS07W01.FY1FCTYC[TS07WIXM]
       || TS07M001.PC3POIDT[TS07WIXM] != TS07W01.PC3POIDT[TS07WIXM]
       || TS07M001.PK1QTY[TS07WIXM] != TS07W01.PK1QTY[TS07WIXM])
        TSWREC.XXXMODID = "152"; /* module id*/
        set TS07M001.TS07MSEL[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(013); /* one of these fields is needed*/
      end
    end

  else
    if (TS07M001.XCTCD[TS07WIXM] != TS07W01.XCTCD[TS07WIXM]) /* code entered*/
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.XCTCD[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
    if (TS07M001.FY1FCTYC[TS07WIXM] != TS07W01.FY1FCTYC[TS07WIXM])
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.FY1FCTYC[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
    if (TS07M001.PC3POIDT[TS07WIXM] != TS07W01.PC3POIDT[TS07WIXM])
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.PC3POIDT[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if PF5 was pressed then no updates to data allowed*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf5) /* if add carton was requested*/
    if (TS07M001.XCTCD[TS07WIXM] != TS07W01.XCTCD[TS07WIXM]) /* code entered*/
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.XCTCD[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
    if (TS07M001.FY1FCTYC[TS07WIXM] != TS07W01.FY1FCTYC[TS07WIXM])
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.FY1FCTYC[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
    if (TS07M001.PC3POIDT[TS07WIXM] != TS07W01.PC3POIDT[TS07WIXM])
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.PC3POIDT[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
    if (TS07M001.PK1QTY[TS07WIXM] != TS07W01.PK1QTY[TS07WIXM])
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end

    if (TS07M001.TS07MSEL[TS07WIXM] != TS07W01.TS07MSEL[TS07WIXM])
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.TS07MSEL[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end

    if (converseVar.validationMsgNum == 0) /* if no errors*/

      TS07153(); /* check for shiprec found*/

      if (TS07W00.TS07WSRF == "Y" /* if shiprec found, okay to add ctn*/
       || TS07W01.XWHCD == "22")  /* dlvrusa-if airborne whse*/
         /* next sentence*/
      else
        TSWREC.XXXMODID = "152"; /* module id*/
        converseLib.validationFailed(231); /* quantity changes not valid*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* if PF9 or PF13 was pressed, only quantity updates allowed*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9 /* if split size was requested*/
   || converseVar.eventKey is pf13) /* or split carton was requested*/
    if (TS07M001.XCTCD[TS07WIXM] != TS07W01.XCTCD[TS07WIXM]) /* code entered*/
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.XCTCD[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
    if (TS07M001.FY1FCTYC[TS07WIXM] != TS07W01.FY1FCTYC[TS07WIXM])
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.FY1FCTYC[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
    if (TS07M001.PC3POIDT[TS07WIXM] != TS07W01.PC3POIDT[TS07WIXM])
      TSWREC.XXXMODID = "152"; /* module id*/
      set TS07M001.PC3POIDT[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(294); /* modification not allowed*/
    end
    if (TS07M001.PK1QTY[TS07WIXM] != TS07W01.PK1QTY[TS07WIXM])
      if (converseVar.eventKey is pf9) /* split size mode*/
        if (TS07M001.PK1QTY[TS07WIXM] <= 0) /* if remaining qty is zero*/
          TSWREC.XXXMODID = "152"; /* module id*/
          set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
          converseLib.validationFailed(255); /* at least one must remain*/
        end
      end
      if (TS07M001.PK1QTY[TS07WIXM] > TS07W01.PK1QTY[TS07WIXM])
        TSWREC.XXXMODID = "152"; /* module id*/
        set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(191); /* qty must be less than orig*/
      end
      if (TS07M001.TS07MSEL[TS07WIXM] == TS07W01.TS07MSEL[TS07WIXM])
        TSWREC.XXXMODID = "152"; /* module id*/
        set TS07M001.TS07MSEL[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(013); /* sel must be entered if qty chg*/
      end
      if (converseVar.eventKey is pf13 /* if carton split mode*/
       && converseVar.validationMsgNum == 0) /* and no errors encountered*/
        TS07W01.TS07MSEL[TS07WIXM] = TS07M001.TS07MSEL[TS07WIXM];
        TS07W01.PK1QTY[TS07WIXM] = TS07M001.PK1QTY[TS07WIXM];
        TS07W00.TS07WSWU = "Y"; /* update temp storage flag*/
        TS07W00.TS07WSWX = "Y"; /* qty has been changed flag*/
      end
    else
      if (TS07M001.TS07MSEL[TS07WIXM] != TS07W01.TS07MSEL[TS07WIXM])
        TSWREC.XXXMODID = "152"; /* module id*/
        set TS07M001.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(191); /* quantity must change if selected*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (TS07M001.TS07MSEL[TS07WIXM] != TS07W01.TS07MSEL[TS07WIXM]
   && TS07M001.TS07MSEL[TS07WIXM] != "S") /* and is not a "S"*/

    TSWREC.XXXMODID = "152"; /* Module identification*/
    set TS07M001.TS07MSEL[TS07WIXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(13); /* Indicate only "S" may be used*/

  end

end // end TS07152

// get all scheds for order
Function TS07153()
   /* ------------------------------------------------------------*/
   /* find shiprec data only if packing list is not a direct ship*/
   /* ------------------------------------------------------------*/

  if (TS07W01.XDSCD != "1" /* if not direct ship*/
   && TS07W01.XWHCD != "22") /* dlvrusa-if airborne whse*/

    TS07W00.TS07WSXT = 0; /* schedule table count*/
    TS07W00.TS07WSX1 = 0; /* schedule table index*/
    TS07W00.TS07WSRF = "N"; /* ship rec found flag*/
    TS07W00.TS07WSRB = "N"; /* ship rec batched flag*/

  else

    TS07W00.TS07WSRF = "Y"; /* indicate edits okay*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* select set and open the shiprec order table.*/
   /* ------------------------------------------------------------*/

  TS07S08(); /* select set and open cursor for*/
                                   /* dship.vsrord01*/

   /* ------------------------------------------------------------*/
   /* fetch the next row and check schedules until end of cursor*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWA = "N"; /* end of cursor switch*/

  while (TS07W00.TS07WSWA == "N") /* until end of cursor*/

    TS07S09(); /* fetch the next shiprec order row*/

    if (TS07W00.TS07WSWA == "N") /* if shiprec order found*/

      TS07S10(); /* select unique shiprec header*/

      if (SR1REC.SR1PKDT == TS07W01.SR1PKDT) /* if pick dates are equal*/
        if (SR1REC.SR1BTST == "R" /* if status is released*/
         || SR1REC.SR1BTST == "B") /* or status is batched*/
          TS07W00.TS07WSRB = "Y"; /* move yes to shiprec batched flag*/
        end
        TS07W00.TS07WSX1 = TS07W00.TS07WSX1 + 1; /* save schedule in table*/
        TS07W00.TS07WSXT = TS07W00.TS07WSXT + 1; /* for display...*/
        TS07W00.TS07WSRS[TS07WSX1] = SR1REC.PK1PKSCH;
                                   /* save schedule*/
        TS07W00.SR1BTST[TS07WSX1] = SR1REC.SR1BTST; /* save status*/
      end
    end
  end

  TS07S11(); /* close the shiprec order cursor*/

  if (TS07W00.TS07WSXT > 0) /* if any schedules were found*/
    if (TS07W00.TS07WSRB != "Y") /* if none were batched*/
      TS07W00.TS07WSRF = "Y"; /* move yes to shiprec found*/
    else
      TS07W00.TS07WSX1 = 1; /* set index to one*/
      sysVar.arrayIndex = 1;
      while (TS07W00.TS07WSX1 <= TS07W00.TS07WSXT) /* until end of scheds*/
        if (TS07W00.SR1BTST[TS07WSX1] == "R" /* if released*/
         || TS07W00.SR1BTST[TS07WSX1] == "B") /* or batched*/
          if (sysVar.arrayIndex <= 4) /* can only list four schedules*/
            if (sysVar.arrayIndex == 1)
              TS07W00.TS07WCOM[sysVar.arrayIndex] = " ";
            else
              TS07W00.TS07WCOM[sysVar.arrayIndex] = ",";
            end
            TS07W00.TS07WSCH[sysVar.arrayIndex] = TS07W00.TS07WSRS[TS07WSX1];
            sysVar.arrayIndex = sysVar.arrayIndex + 1;
          end
        end
        TS07W00.TS07WSX1 = TS07W00.TS07WSX1 + 1;
      end
      while (sysVar.arrayIndex <= 4) /* fill rest of line with dots if less*/
                                   /* than four*/
        TS07W00.TS07WSXX[sysVar.arrayIndex] = "........";
        sysVar.arrayIndex = sysVar.arrayIndex + 1;
      end
      TS07W00.TS07WRMS = " HAVE BEEN RLSED"; /* these scheds released*/
    end
  end

end // end TS07153

// Check for pop-up request
Function TS07154()
   /* ------------------------------------------------------------*/
   /* check for valid pop-up window request*/
   /* ------------------------------------------------------------*/

  if ("?" in TS07M001.XCTCD) /* if country code pop-up requested*/

    TS07W00.TS07WIXM = sysVar.arrayIndex; /* set index to line*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "         XCT - COUNTRY TABLE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if code was selected*/
      TS07M001.XCTCD[TS07WIXM] = XCTTBL.XCTCD[XX0XWPIX];
    else
      TS07M001.XCTCD[TS07WIXM] = TS07W01.XCTCD[TS07WIXM];
    end
    set TS07M001.XCTCD[TS07WIXM] cursor, bold; /* highlight*/

  end

  if (TS07M001.TS07MCCD == "?") /* if carton type pop-up requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "         YNT - CARTON TYPE TABLE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYNT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if code was selected*/
      TS07M001.TS07MCCD = YNTTBL.YNTCD[XX0XWPIX]; /* Selected code*/
      TS07M001.YNTABRV = YNTTBL.YNTABRV[XX0XWPIX];
    else
      TS07M001.TS07MCCD = TS07W01.TS07MCCD; /* Restore prior code*/
    end
    set TS07M001.TS07MCCD cursor, bold; /* highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TSWREC.XXXMODID = "154"; /* Module identification*/
  converseLib.validationFailed(176); /* Indicate press ENTER*/

end // end TS07154

// process valid input request
Function TS07160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (TS07M001.TSVPLNBR != TS07W01.TSVPLNBR /* p/l number changed*/
   || TS07M001.OP1CUOID != TS07W01.OP1CUOID /* or order changed*/
   || TS07M001.OP1NORID != TS07W01.OP1NORID /* or order changed*/
   || TS07M001.TS-PL-CRTN-NBR != TS07W01.TS-PL-CRTN-NBR) /* or ord changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/

    TS07W00.TS07WSWR = "Y"; /* Request for data switch*/
    TS07W00.TS07WSWX = "N"; /* qty changed flag*/

    TSWREC.XXXTSPAG = 1; /* reset page number to 1*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If add a new carton, save the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* if add carton mode*/

    if (TS07W00.TS07WSWX == "N") /* no paging was done*/

      TS07W00.TS07WGRP = TS07W01.TS07WGRP; /* p/l data*/

      TS07W00.TS07WSWD = "4"; /* Map to be displayed switch*/
      TS07W00.TS07WSWR = "Y"; /* Request for data switch*/
      TS07W00.TS07WSWU = "N"; /* update storage switch*/

      return; /* return to previous process*/

    else

      TSWREC.XXXMODID = "160"; /* module identification*/
      converseLib.validationFailed(004); /* must use pf13 key*/
      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a request to view a different page was made set the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS07M001.XXXTSPAG != TS07W00.XXXTSPAG) /* if page number changed*/

    TS07W00.XXXTSPAG = TS07M001.XXXTSPAG; /* save new page nbr*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if split size was requested perform split and return*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* split size requested*/

    if (TS07W00.TS07WSWX == "N") /* no paging was done*/

      if ("S" in TS07M001.TS07MSEL) /* if line was selected*/

        TS07WIXM = sysVar.arrayIndex; /* set line index*/

        TS07W00.TS07WGRP = TS07W01.TS07WGRP; /* p/l data*/
        TS07W00.TS07WSWD = "2"; /* map to be displayed*/
        TS07W00.TS07WSWR = "Y"; /* request for data*/
        TS07W00.TS07WSWU = "N"; /* update temp storage*/

        return;

      end

    else

      TSWREC.XXXMODID = "160"; /* module identification*/
      converseLib.validationFailed(004); /* must use pf13 key*/
      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* if split carton was requested perform split and return*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* split carton requested*/

    TS07W00.TS07WGRP = TS07W01.TS07WGRP; /* p/l data*/
    TS07W00.TS07WSWD = "3"; /* map to be displayed*/
    TS07W00.TS07WSWR = "Y"; /* request for data*/

    if (TS07W00.TS07WSWU == "Y") /* if update is needed*/

      TS07S03(); /* update temp storage page*/

      TS07W00.TS07WSWU = "N"; /* update temp storage flag*/

    end

    return;

  end

   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* if product/size update*/

    TS07W00.TS07WIXM = 1; /* Initialize line index*/

    while (TS07W00.TS07WIXM <= 13) /* Until end of lines*/

      if (TS07M001.TS07MSEL[TS07WIXM] != TS07W01.TS07MSEL[TS07WIXM])

        TS07W01.TS07MSEL[TS07WIXM] = TS07M001.TS07MSEL[TS07WIXM];
        TS07W00.TS07WSWU = "Y"; /* Storage update switch*/

      end

      TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected for update, update all data changed*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* if product/size update*/

    if (TS07W00.TS07WSWX == "N") /* no paging was done*/

      TS07W00.TSOSHPQT = 0; /* initialize ctn chg quantity*/
      TS07W00.TSYNCTFT = 0; /* initialize ctn chg volume*/
      TS07W00.TSYNCTLB = 0; /* initialize ctn chg weight*/

      TS07W00.TS07WQTY = 0; /* initialize sty chg quantity*/
      TS07W00.TS07WCFT = 0; /* initialize sty chg volume*/
      TS07W00.TS07WLBS = 0; /* initialize sty chg weight*/

      TS07W00.TS07WIXM = 1; /* Map line index*/

      while (TS07W00.TS07WIXM <= 13) /* until end of lines*/

        if (TS07M001.TS07MSEL[TS07WIXM] == "S") /* if selected*/

          /* ----------------------------------------------------*/
           /* update the selected products which have changed*/
          /* ----------------------------------------------------*/
          TS07200(); /* update product line*/

        end

        TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* increment line number*/

      end

      if (TS07W00.TS07WSWY == "Y") /* if weight or volume chgd*/
        /* -------------------------------------------------------*/
         /* update the carton if the weight or volumes have chgd*/
        /* -------------------------------------------------------*/
        TS07210(); /* update carton*/
        /* ----------------------------------------------------*/
         /* update the packing list if the weight or volumes have chgd*/
        /* ----------------------------------------------------*/
        TS07220(); /* update packing list*/
        /* ----------------------------------------------------*/
         /* update the shipment if the weight or volumes have chgd*/
        /* ----------------------------------------------------*/
        TS07230(); /* update shipment*/

      end

      if ("S" in TS07M001.TS07MSEL /* if line was selected*/
       || TS07W00.TS07WSWY == "Y") /* or weight or volume chgd*/

        TSWREC.XXXMSGNO = 001; /* product was successfully updated*/

        TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      else
        if (COMMAREA.CAFROMAP == "TS06")
          TS07W00.TS07W-NDX = TS07W00.TS07W-NDX + 1;
          while (TS07W00.TS07W-NDX <= 50
           && TSWREC.TSW-TSOCRTNB[TS07W-NDX] == 0)
            TS07W00.TS07W-NDX = TS07W00.TS07W-NDX + 1;
          end
          if (TS07W00.TS07W-NDX > 50)
            TSWREC.TSVPLNBR = TS07M001.TSVPLNBR; /* pl nbr*/
            TSWREC.OP1CUOID = TS07M001.OP1CUOID; /* ord nbr*/
            TSWREC.OP1NORID = TS07M001.OP1NORID; /* nke ord nbr*/
            TSWREC.KUCCOID = TS07M001.KUCCOID; /* cust nbr*/
            TSWREC.TSOCRTNB = TS07M001.TS-PL-CRTN-NBR; /* crtn nbr*/
            COMMAREA.CATOAP = "TS06"; /* to application*/
            TS07S01(); /* purge temp storage*/
            XSTSS02(); /* exit to another appl*/
            exit stack;
          end
          if (TSWREC.TSW-TSOCRTNB[TS07W-NDX] > 0)
            TS07M001.TS-PL-CRTN-NBR = TSWREC.TSW-TSOCRTNB[TS07W-NDX];
            TS07W00.TS07WSWD = "1"; /* request map 1*/
            TS07W00.TS07WSWR = "Y"; /* request for data*/
            return;
          else
            TSWREC.TSVPLNBR = TS07M001.TSVPLNBR; /* pl nbr*/
            TSWREC.OP1CUOID = TS07M001.OP1CUOID; /* ord nbr*/
            TSWREC.OP1NORID = TS07M001.OP1NORID; /* nke ord nbr*/
            TSWREC.KUCCOID = TS07M001.KUCCOID; /* cust nbr*/
            TSWREC.TSOCRTNB = TS07M001.TS-PL-CRTN-NBR; /* crtn nbr*/
            COMMAREA.CATOAP = "TS06"; /* to application*/
            TS07S01(); /* purge temp storage*/
            XSTSS02(); /* exit to another appl*/
            exit stack;
          end
        end
      end
      return; /* return to previous process*/
    else
      TSWREC.XXXMODID = "160"; /* module id*/
      converseLib.validationFailed(4); /* must use pf13 key*/
      exit stack;
    end
  end

       /* IF COMMAREA.CAFROMAP = 'TS06';*/
         /* IF TS07W00.TS07W-NDX LT 50;*/
           /* TS07W00.TS07W-NDX = TS07W00.TS07W-NDX + 1;*/
           /* IF TSWREC.TSW-TSOCRTNB(TS07W-NDX) > 0;*/
             /* MOVE TSWREC.TSW-TSOCRTNB(TS07W-NDX) TO TS07M001.TSOCRTNB;*/
             /* MOVE '1' TO TS07W00.TS07WSWD;   /* request map 1*/
             /* MOVE 'Y' TO TS07W00.TS07WSWR;   /* request for data*/
             /* EZERTN;*/
           /* ELSE;*/
             /* MOVE TS07M001.TSVPLNBR TO TSWREC.TSVPLNBR; /* pl nbr*/
             /* MOVE TS07M001.OP1CUOID TO TSWREC.OP1CUOID; /* ord nbr*/
             /* MOVE TS07M001.OP1NORID TO TSWREC.OP1NORID; /* nke ord nbr*/
             /* MOVE TS07M001.KUCCOID TO TSWREC.KUCCOID;   /* cust nbr*/
             /* MOVE TS07M001.TS-PL-CRTN-NBR TO TSWREC.TSOCRTNB;/*crtn nbr*/
             /* MOVE 'TS06' TO COMMAREA.CATOAP; /* to application*/
             /* TS07S01;                        /* purge temp storage*/
             /* XSTSS02;                        /* exit to another appl*/
             /* EZEFLO;*/
           /* END;*/
         /* ELSE;*/
           /* MOVE TS07M001.TSVPLNBR TO TSWREC.TSVPLNBR; /* pl nbr*/
           /* MOVE TS07M001.OP1CUOID TO TSWREC.OP1CUOID; /* ord nbr*/
           /* MOVE TS07M001.OP1NORID TO TSWREC.OP1NORID; /* nke ord nbr*/
           /* MOVE TS07M001.KUCCOID TO TSWREC.KUCCOID;   /* cust nbr*/
           /* MOVE TS07M001.TS-PL-CRTN-NBR TO TSWREC.TSOCRTNB;/*crtn nbr*/
           /* MOVE 'TS06' TO COMMAREA.CATOAP; /* to application*/
           /* TS07S01;                        /* purge temp storage*/
           /* XSTSS02;                        /* exit to another appl*/
           /* EZEFLO;*/
         /* END;*/
       /* END;*/
end // end TS07160

// update products with changes
Function TS07200()
   /* ------------------------------------------------------------*/
   /* delete old products from vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  TS07201(); /* delete old product rows*/

   /* ------------------------------------------------------------*/
   /* insert new product row with changes to qty,fcty,ctry,poid*/
   /* ------------------------------------------------------------*/

  TS07202(); /* insert new product row*/

   /* ------------------------------------------------------------*/
   /* accumulate wgt/vol/qty changes for each product inserted*/
   /* ------------------------------------------------------------*/

  TS07W00.TSYNCTLB = TS07W00.TSYNCTLB + TS07W00.TS07WLBS; /* accum lbs*/
  TS07W00.TSYNCTFT = TS07W00.TSYNCTFT + TS07W00.TS07WCFT; /* accum vol*/
  TS07W00.TSOSHPQT = TS07W00.TSOSHPQT + TS07W00.TS07WQTY; /* accum qty*/

   /* ------------------------------------------------------------*/
   /* update shiprec if product qty changed*/
   /* ------------------------------------------------------------*/

  if (TS07M001.PK1QTY[TS07WIXM] != TS07W01.PK1QTY[TS07WIXM] /* qty chgd*/
   && TS07W01.XDSCD != "1"                                  /* and not direct ship*/
   && TS07W01.XWHCD != "22")                                /* dlvrusa-if airborne whse*/
    TS07203(); /* update shiprec tables*/
  end

end // end TS07200

// delete old rows in product tbl
Function TS07201()
   /* ------------------------------------------------------------*/
   /* delete the old rows in the dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W01.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS07W01.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W01.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W01.OP2LNINB; /* line itm nbr*/
  TSZREC.TSPCRTNB = TS07W01.TS-PL-CRTN-NBR; /* carton number*/
  TSZREC.XGPCD = TS07W01.XGPCD[TS07WIXM]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W01.SY1STNBR[TS07WIXM]; /* style*/
  TSZREC.SY2CLRID = TS07W01.SY2CLRID[TS07WIXM]; /* color*/
  TSZREC.XDMCD = TS07W01.XDMCD[TS07WIXM]; /* dimension*/
  TSZREC.XQACD = TS07W01.XQACD[TS07WIXM]; /* quality code*/
  TSZREC.XOWCD = TS07W01.XOWCD[TS07WIXM]; /* owner group*/
  TSZREC.PC2INSEG = TS07W01.PC2INSEG[TS07WIXM]; /* spec code*/
  TSZREC.XPGCD = TS07W01.XPGCD[TS07WIXM]; /* package type*/
  TSZREC.XUMCD = TS07W01.XUMCD[TS07WIXM]; /* unit of measure*/
  TSZREC.SY5SZID = TS07W01.SY5SZID[TS07WIXM]; /* size*/
  TSZREC.PC3POIDT = TS07W01.PC3POIDT[TS07WIXM]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07W01.FY1FCTYC[TS07WIXM]; /* factory*/
  TSZREC.XCTCD = TS07W01.XCTCD[TS07WIXM]; /* country code*/

  TS6REC.TS6TASK = "D "; /* delete row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "201"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "201"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE TABLE ROWS   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07201

// insert new row in product tbl
Function TS07202()
   /* ------------------------------------------------------------*/
   /* insert the new row in the dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W01.TSVPLNBR; /* p/l number*/
  TSZREC.OP1PARTN = TS07W01.OP1PARTN; /* partition number*/
  TSZREC.OP1CUOID = TS07W01.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W01.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W01.OP2LNINB[TS07WIXM]; /* line item nbr*/
  TSZREC.TSPCRTNB = TS07W01.TS-PL-CRTN-NBR; /* carton number*/
  TSZREC.XGPCD = TS07W01.XGPCD[TS07WIXM]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W01.SY1STNBR[TS07WIXM]; /* style*/
  TSZREC.SY2CLRID = TS07W01.SY2CLRID[TS07WIXM]; /* color*/
  TSZREC.XDMCD = TS07W01.XDMCD[TS07WIXM]; /* dimension*/
  TSZREC.XQACD = TS07W01.XQACD[TS07WIXM]; /* quality code*/
  TSZREC.XOWCD = TS07W01.XOWCD[TS07WIXM]; /* owner group*/
  TSZREC.PC2INSEG = TS07W01.PC2INSEG[TS07WIXM]; /* spec code*/
  TSZREC.XPGCD = TS07W01.XPGCD[TS07WIXM]; /* package type*/
  TSZREC.XUMCD = TS07W01.XUMCD[TS07WIXM]; /* unit of measure*/
  TSZREC.SY1UNPCS = TS07W01.SY1UNPCS[TS07WIXM]; /* units/case*/
  TSZREC.SY5SZID = TS07W01.SY5SZID[TS07WIXM]; /* size*/
  TSZREC.PC3POIDT = TS07M001.PC3POIDT[TS07WIXM]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07M001.FY1FCTYC[TS07WIXM]; /* factory*/
  TSZREC.XCTCD = TS07M001.XCTCD[TS07WIXM]; /* country*/
  TSZREC.TSZXCPFL = TS07M001.TSZXCPFL[TS07WIXM]; /* xcp flag*/

  TSZREC.PK1QTY = TS07M001.PK1QTY[TS07WIXM]; /* quantity*/

   /* ------------------------------------------------------------*/
   /* if qty chg calculate weight and qty differences.*/
   /* ------------------------------------------------------------*/

  if (TS07M001.PK1QTY[TS07WIXM] != TS07W01.PK1QTY[TS07WIXM]) /* qty chg*/

    TS07W00.TS07WSWY = "Y"; /* wght/vol chgd flag*/

    TS07W00.TS07WQTY = TS07W01.PK1QTY[TS07WIXM] - TS07M001.PK1QTY[TS07WIXM];

    if (TS07W01.XDSCD != "1") /* and not a direct ship*/

      TSZREC.TSZXCPFL = "Y"; /* exception flag*/

      TS07S12(); /* get product weight*/
      sysVar.arrayIndex = TS07W01.SY5SZID[TS07WIXM]; /* use size*/

      TS07W00.TS07WLBS = PKNREC.SYGSZWT[sysVar.arrayIndex] * TS07W00.TS07WQTY;
      TS07W00.TS07WCFT = TS07W00.TS07WCFT - 0; /* no volume changes here*/

    end

  end

   /* ------------------------------------------------------------*/
   /* get system date and time for insert*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system date and time*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS6REC.TS6TASK = "A "; /* insert row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "202"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "202"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07202

// update shiprec itm ordr hdr
Function TS07203()
   /* ------------------------------------------------------------*/
   /* update shiprec for quantity changes*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSX1 = 1; /* initialize schedule index*/
  TS07W00.TS07WSWE = "N"; /* set shiprec item found to no*/

  TS07W00.TS07WDIF = TS07M001.PK1QTY[TS07WIXM] - TS07W01.PK1QTY[TS07WIXM];

  while (TS07W00.TS07WSX1 <= TS07W00.TS07WSXT /* until end of scheds*/
   && TS07W00.TS07WSWE == "N") /* or all items updated*/

    TS07S13(); /* select shiprec item*/

    if (TS07W00.TS07WSWE == "Y") /* if shiprec item found*/

      TS07S14(); /* get shiprec header*/

      TS07S15(); /* get shiprec order*/

      TS07S16(); /* create shiprec xcp rcds*/

    end

    TS07W00.TS07WSX1 = TS07W00.TS07WSX1 + 1;

  end

  if (TS07W00.TS07WSWE == "N") /* no valid shiprec items updated*/
    if (TS07W01.XWHCD == "22") /* dlvrusa-if airborne whse*/
      /* next sentence*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "203"; /* module id*/
      TSWREC.XXXMSGNO = 231; /* indicate unable to update*/
      exit stack;
    end
  end

end // end TS07203

// update ctn for wght & vol
Function TS07210()
   /* ------------------------------------------------------------*/
   /* Select carton to update with new weights & measures*/
   /* ------------------------------------------------------------*/

  TS07211(); /* Select carton to update*/

   /* ------------------------------------------------------------*/
   /* update carton to new weight and measures*/
   /* ------------------------------------------------------------*/

  TS07212(); /* update carton*/

end // end TS07210

// select carton row
Function TS07211()
   /* ------------------------------------------------------------*/
   /* Select carton row for update of weight & measure*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear i/o storage area*/

  TSYREC.TSVPLNBR = TS07M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS07M001.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS07M001.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TS07M001.TS-PL-CRTN-NBR; /* carton nbr*/

  TS4REC.TS4TASK = "S "; /* select unique carton*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "211"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "211"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE CARTON ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07211

// update carton with new wgt/vol
Function TS07212()
   /* ------------------------------------------------------------*/
   /* Update the carton row with new data from any changes.*/
   /* ------------------------------------------------------------*/

  if (TS07M001.TS07MCCD != TS07W01.TS07MCCD) /* if carton type entered*/
    TS07W00.TS07WCCD = TS07M001.TS07MCCD; /* convert carton code*/
    TSYREC.YNTCD = TS07W00.TS07WCCD; /* carton code*/
  end

  if (TS07M001.PKLCTNHG is modified /* if override vol entered*/
   || TS07M001.PKLCTNWD is modified 
   || TS07M001.PKLCTNLN is modified)
    TSYREC.PKLCTNHG = TS07M001.PKLCTNHG; /* height*/
    TSYREC.PKLCTNWD = TS07M001.PKLCTNWD; /* width*/
    TSYREC.PKLCTNLN = TS07M001.PKLCTNLN; /* length*/
  end

   /* ------------------------------------------------------------*/
   /* move the new new weight and volume from header to the row*/
   /* ------------------------------------------------------------*/

  TSYREC.TSYNCTFT = TS07M001.TSYNCTFT; /* volume from header*/
  TSYREC.TSYNCTLB = TS07M001.TSYNCTLB; /* weight from header*/

   /* ------------------------------------------------------------*/
   /* subtract the product changes calculated in ts07200*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TSOSHPQT != 0 /* if any qty chgs for products*/
   && TS07W01.XDSCD != "1") /* and not a direct ship*/
    TSYREC.TSZXCPFL = "Y"; /* set pick xcpt to yes*/
  end

  TSYREC.TSOSHPQT = TSYREC.TSOSHPQT - TS07W00.TSOSHPQT; /* sub prod chgs*/
  TSYREC.TSYNCTLB = TSYREC.TSYNCTLB - TS07W00.TSYNCTLB; /* sub prod chgs*/
  TSYREC.TSYNCTFT = TSYREC.TSYNCTFT - TS07W00.TSYNCTFT; /* sub prod chgs*/

  if (TSYREC.TSOSHPQT < 0) /* if less than zero*/
    TSYREC.TSOSHPQT = 0; /* show as zero*/
  end

  if (TSYREC.TSYNCTLB < 0) /* if less than zero*/
    TSYREC.TSYNCTLB = 0; /* show as zero*/
  end

  if (TSYREC.TSYNCTFT < 0) /* if less than zero*/
    TSYREC.TSYNCTFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* calculate the total change in carton weight and volume.*/
   /* ------------------------------------------------------------*/

  TS07W00.TSOSHPQT = TS07W01.TSOSHPQT - TSYREC.TSOSHPQT; /* tot qty chgs*/
  TS07W00.TSYNCTLB = TS07W01.TSYNCTLB - TSYREC.TSYNCTLB; /* tot wgt chgs*/
  TS07W00.TSYNCTFT = TS07W01.TSYNCTFT - TSYREC.TSYNCTFT; /* tot vol chgs*/

   /* ------------------------------------------------------------*/
   /* get system date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSYREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSYREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS4REC.TS4TASK = "U "; /* Function code*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* update carton*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "212"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource unavailable*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE CARTON TO NEW NUMBER     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07212

// update p/l for wght & vol chgs
Function TS07220()
   /* ------------------------------------------------------------*/
   /* Select packing list to update with new weights & measures*/
   /* ------------------------------------------------------------*/

  TS07221(); /* Select unique packing list*/

   /* ------------------------------------------------------------*/
   /* update packing list with new weight and measures*/
   /* ------------------------------------------------------------*/

  TS07222(); /* update packing list row*/

end // end TS07220

// select p/l to update weight
Function TS07221()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS07W01.TSVPLNBR; /* p/l number*/
  TSVREC.OP1CUOID = TS07W01.OP1CUOID; /* order number*/
  TSVREC.OP1NORID = TS07W01.OP1NORID; /* order id*/

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "221"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "221"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07221

// update p/l to subtract weight
Function TS07222()
   /* ------------------------------------------------------------*/
   /* update the packing list for cartons which have had product*/
   /* changes.*/
   /* ------------------------------------------------------------*/

  TSVREC.TSISHPQT = TSVREC.TSISHPQT - TS07W00.TSOSHPQT; /* saved qty*/
  TSVREC.TSVNPLLB = TSVREC.TSVNPLLB - TS07W00.TSYNCTLB; /* saved wgt*/
  TSVREC.TSVNPLFT = TSVREC.TSVNPLFT - TS07W00.TSYNCTFT; /* saved vol*/

  if (TSVREC.TSISHPQT < 0) /* if less than zero*/
    TSVREC.TSISHPQT = 0; /* show as zero*/
  end

  if (TSVREC.TSVNPLLB < 0) /* if less than zero*/
    TSVREC.TSVNPLLB = 0; /* show as zero*/
  end

  if (TSVREC.TSVNPLFT < 0) /* if less than zero*/
    TSVREC.TSVNPLFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* get system date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "222"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "222"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UDPATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07222

// update shipment for wgt chgs
Function TS07230()
  if (TS07W01.TSFSHPID != 0) /* if p/l has a shipment number*/
     /* next sentence*/
  else
    return; /* return to previous process*/
  end
   /* ------------------------------------------------------------*/
   /* Select shipment to update with new weights & measures*/
   /* ------------------------------------------------------------*/

  TS07231(); /* Select unique shipment*/

   /* ------------------------------------------------------------*/
   /* update shipment with new weight and measures*/
   /* ------------------------------------------------------------*/

  TS07232(); /* update shipment row*/

end // end TS07230

// select shipment to update wgt
Function TS07231()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty; /* Clear row storage area*/

  TSUREC.KUCCOID = TS07W01.KUCCOID; /* customer*/
  TSUREC.TSFSHPID = TS07W01.TSFSHPID; /* ship id*/

  try
    call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "231"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "231"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07231

// update shipment for weight
Function TS07232()
   /* ------------------------------------------------------------*/
   /* update the shipment for cartons which have had product*/
   /* changes.*/
   /* ------------------------------------------------------------*/

  TSUREC.TSUSHPQT = TSUREC.TSUSHPQT - TS07W00.TSOSHPQT; /* saved qty*/
  TSUREC.TSUNSPLB = TSUREC.TSUNSPLB - TS07W00.TSYNCTLB; /* saved wgt*/
  TSUREC.TSUNSPFT = TSUREC.TSUNSPFT - TS07W00.TSYNCTFT; /* saved vol*/

  if (TSUREC.TSUSHPQT < 0) /* if less than zero*/
    TSUREC.TSUSHPQT = 0; /* show as zero*/
  end

  if (TSUREC.TSUNSPLB < 0) /* if less than zero*/
    TSUREC.TSUNSPLB = 0; /* show as zero*/
  end

  if (TSUREC.TSUNSPFT < 0) /* if less than zero*/
    TSUREC.TSUNSPFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* get system date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSUREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSUREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  try
    call "IO4690" ("U ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "232"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "232"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UDPATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07232

// split size main function
Function TS07300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS07310(); /* Obtain the data to display*/

  TS07320(); /* Format and display the map*/

  TS07330(); /* Check attention identifier*/

  TS07340(); /* Reset fields to normal intensity*/

  TS07350(); /* Verify the entered data*/

  TS07360(); /* Process valid input request*/


end // end TS07300

// Obtain the data to display
Function TS07310()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS07W00.XXXTSLEN = 744; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* purge any existing pages from the temp storage queue.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWU == "N") /* if request to update is no*/

    TS07S31(); /* purge temp storage*/

    TS07W00.TS07WIXG = 1; /* initialize line index*/
    TS07W00.TS07WNBR = 1; /* initialize line count*/
    TS07W02.TS07WGRP = TS07W01.TS07WGRP; /* p/l group data*/
    TS07W02.TS07WLIN[TS07WIXG] = TS07W01.TS07WLIN[TS07WIXM]; /* line data*/
    TS07W00.TS07WQTY = TS07W01.PK1QTY[TS07WIXM] - TS07M001.PK1QTY[TS07WIXM];
    TS07W02.PK1QTY[TS07WIXG] = TS07W00.TS07WQTY; /* qty to split out*/
    TS07W02.TS07WQTY[TS07WIXG] = TS07W00.TS07WQTY; /* qty remaining*/
    TSWREC.XXXMSGNO = 229; /* more to split message*/

  end

   /* ------------------------------------------------------------*/
   /* Add any new data to the temp storage queue.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WIXG > 1) /* Page was formatted*/

    TS07S33(); /* update page in temporary storage*/

  else

    TS07S32(); /* add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWR = "N"; /* Request for data switch*/


end // end TS07310

// Format and converse the map
Function TS07320()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (TS07W00.TS07WSWF == "Y") /* Map must be formatted*/
      TS07321(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date*/
   /* ------------------------------------------------------------*/

  TS07M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/

      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TS07M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    TS07M002.XXXMODID = TSWREC.XXXMODID; /* Module identification*/

    set TS07M002 alarm; /* Indicate sound alarm*/

  end

  converse TS07M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

end // end TS07320

// Format the display data
Function TS07321()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS07M002 initial; /* M001 input/output area*/

  TS07W00.TS07WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS07W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS07W00.XXXTSPAG > TS07W00.TA5TSQIX) /* Desired greater highest*/
        TS07W00.XXXTSPAG = TS07W00.TA5TSQIX; /* Default to highest*/
      end

      TS07S34(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TS07M002.XXXTSPAG = TS07W00.XXXTSPAG; /* Current page*/
    TS07M002.TA5TSQIX = TS07W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS07M002.TS07MLIT = "SPLIT SIZE MODE"; /* MODE INDICATOR*/

  TS07M002.XWHCD = TS07W02.XWHCD;
  TS07M002.KUCCOID = TS07W02.KUCCOID;
  TS07M002.TSVPLNBR = TS07W02.TSVPLNBR;
  TS07M002.OP1CUOID = TS07W02.OP1CUOID;
  TS07M002.OP1NORID = TS07W02.OP1NORID;
  TS07M002.TS-PL-CRTN-NBR = TS07W02.TS-PL-CRTN-NBR;

  if (TS07W00.TA5TSQIX > 0) /* if data to display*/
    if (TS07W02.XDSCD == "1") /* p/l is a direct ship*/
      TS07M002.YNTABRV = "DIRECT SHIP";
    else
      set TS07M002.TS07MCCD skip;
      TS07M002.PKLCTNHG = TS07W02.PKLCTNHG;
      TS07M002.PKLCTNWD = TS07W02.PKLCTNWD;
      TS07M002.PKLCTNLN = TS07W02.PKLCTNLN;
      TS07M002.TSYNCTFT = TS07W02.TSYNCTFT;
      TS07M002.TSYNCTLB = TS07W02.TSYNCTLB;
    end
  end


  TS07W00.TS07WIXG = 1; /* Initialize line index*/

  while (TS07W00.TS07WIXG <= 13 /* Until screen is full*/
   && TS07W02.XGPCD[TS07WIXG] > "  ") /* and line exists*/

    set TS07M002.TS07MSEL[TS07WIXG] initialAttributes; /* protected*/
    set TS07M002.XGPCD[TS07WIXG] skip;
    set TS07M002.SY1STNBR[TS07WIXG] skip;
    set TS07M002.SY2CLRID[TS07WIXG] skip;
    set TS07M002.XDMCD[TS07WIXG] skip;
    set TS07M002.XQACD[TS07WIXG] skip;
    set TS07M002.XOWCD[TS07WIXG] skip;
    set TS07M002.PC2INSEG[TS07WIXG] skip;
    set TS07M002.XPGCD[TS07WIXG] skip;
    set TS07M002.XUMCD[TS07WIXG] skip;
    set TS07M002.SY4IDDSC[TS07WIXG] skip;

    if (TS07W00.XXXTSPAG == TS07W00.TA5TSQIX /* if last page is current*/
     && TS07W00.TS07WIXG == TS07W00.TS07WNBR) /* if most recent line*/
      set TS07M002.PK1QTY[TS07WIXG] cursor, normal;
      set TS07M002.PC3POIDT[TS07WIXG] normal;
      set TS07M002.FY1FCTYC[TS07WIXG] normal;
      set TS07M002.XCTCD[TS07WIXG] normal;
    else
      set TS07M002.PK1QTY[TS07WIXG] skip;
      set TS07M002.PC3POIDT[TS07WIXG] skip;
      set TS07M002.FY1FCTYC[TS07WIXG] skip;
      set TS07M002.XCTCD[TS07WIXG] skip;
    end

    TS07M002.XGPCD[TS07WIXG] = TS07W02.XGPCD[TS07WIXG];
    TS07M002.SY1STNBR[TS07WIXG] = TS07W02.SY1STNBR[TS07WIXG];
    TS07M002.SY2CLRID[TS07WIXG] = TS07W02.SY2CLRID[TS07WIXG];
    TS07M002.XDMCD[TS07WIXG] = TS07W02.XDMCD[TS07WIXG];
    TS07M002.XQACD[TS07WIXG] = TS07W02.XQACD[TS07WIXG];
    TS07M002.XOWCD[TS07WIXG] = TS07W02.XOWCD[TS07WIXG];
    TS07M002.PC2INSEG[TS07WIXG] = TS07W02.PC2INSEG[TS07WIXG];
    TS07M002.XPGCD[TS07WIXG] = TS07W02.XPGCD[TS07WIXG];
    TS07M002.XUMCD[TS07WIXG] = TS07W02.XUMCD[TS07WIXG];

    TS07M002.PK1QTY[TS07WIXG] = TS07W02.PK1QTY[TS07WIXG];
    TS07M002.PC3POIDT[TS07WIXG] = TS07W02.PC3POIDT[TS07WIXG];
    TS07M002.FY1FCTYC[TS07WIXG] = TS07W02.FY1FCTYC[TS07WIXG];
    TS07M002.XCTCD[TS07WIXG] = TS07W02.XCTCD[TS07WIXG];
    TS07M002.TSZXCPFL[TS07WIXG] = " ";
    /* ------------------------------------------------------------*/
      /* build the pg3rec.pg3key for translation of external sizes*/
    /* ------------------------------------------------------------*/
    TS07W00.XGPCD = TS07W02.XGPCD[TS07WIXG];
    TS07W00.SY1STNBR = TS07W02.SY1STNBR[TS07WIXG];
    TS07W00.SY2CLRID = TS07W02.SY2CLRID[TS07WIXG];
    TS07W00.XDMCD = TS07W02.XDMCD[TS07WIXG];
    TS07W00.XQACD = TS07W02.XQACD[TS07WIXG];
    if (TS07W00.PG3KEY != PG3REC.PG3KEY)
      TS07S05(); /* translate sizes*/
    end
    TS07W00.TS07WSIZ = TS07W02.SY5SZID[TS07WIXG];
    if (PG3REC.SY4IDDSC[TS07WSIZ] == " ")
      TS07M002.SY4IDDSC[TS07WIXG] = TS07W00.TS07WSZX;
    else
      TS07M002.SY4IDDSC[TS07WIXG] = PG3REC.SY4IDDSC[TS07WSIZ];
    end

    TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
    /* convert carton code and dimensions to carton volume*/
   /* ------------------------------------------------------------*/

  if (TS07W02.XDSCD != "1") /* if not a direct ship*/
    if (TS07W02.PKLCTNCD != " ") /* is it a full case carton?*/
      TS07M002.YNTABRV = "FULL CASE"; /* move full case to desc*/
      if (TS07W02.SY1UNPCS[1] > 0) /* use units per case if avail*/
        TS07W00.TS07WMQT = TS07W02.SY1UNPCS[1]; /* convert qty*/
        TS07M002.TS07MCCD = TS07W00.TS07WMQT; /* carton code*/
        TS07W02.TS07MCCD = TS07W00.TS07WMQT; /* carton code*/
      else
        TS07W00.TS07WMQT = TS07W02.TSOSHPQT; /* convert total ctn qty*/
        TS07M002.TS07MCCD = TS07W00.TS07WMQT; /* use ctn qty for code*/
        TS07W02.TS07MCCD = TS07W00.TS07WMQT; /* use ctn qty for code*/
      end
      if (TS07W02.PKLCTNLN <= 0)
                                   /* if carton dimenisions are not present*/
        TS07S06(); /* get carton dimensions from carton*/
                                   /* table*/
        TS07M002.PKLCTNWD = PKLREC.PKLCTNWD;
        TS07M002.PKLCTNHG = PKLREC.PKLCTNHG;
        TS07M002.PKLCTNLN = PKLREC.PKLCTNLN;
        TS07M002.TSYNCTFT = PKLREC.PKLCTNF3;
      else
        TS07M002.YNTABRV = "**H/W/L OVRD**"; /* volume user override*/
      end
    else
      TS07M002.TS07MCCD = TS07W02.YNTCD; /* use carton type code*/
      TS07W02.TS07MCCD = TS07W02.YNTCD; /* use carton type code*/
      if (TS07W02.YNTCD != " "
       && TS07W02.YNTCD in YNTTBL.YNTCD)
        TS07M002.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
        TS07W02.YNTCRWT = YNTTBL.YNTCRWT[sysVar.arrayIndex];
        if (TS07W02.PKLCTNLN <= 0)
          TS07M002.PKLCTNLN = YNTTBL.YNTCLSLN[sysVar.arrayIndex];
          TS07M002.PKLCTNHG = YNTTBL.YNTCLSHG[sysVar.arrayIndex];
          TS07M002.PKLCTNWD = YNTTBL.YNTCLSWD[sysVar.arrayIndex];
          TS07WCFT = YNTTBL.YNTCLSLN[sysVar.arrayIndex] * YNTTBL.YNTCLSHG[sysVar.arrayIndex];
          TS07WCFT = TS07WCFT * YNTTBL.YNTCLSWD[sysVar.arrayIndex];
          TS07M002.TSYNCTFT = TS07W00.TS07WCFT / 1728; /* cnvrt to cubic ft*/
        else
          TS07M002.YNTABRV = "**H/W/L OVRD**";
                                   /* volume user override*/
        end
      end
    end
  end


end // end TS07321

// Check attention identifier
Function TS07330()
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pa2) /* or Pa2 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS07M002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3 /* PF3 was pressed*/
     || converseVar.eventKey is pa2) /* Pa2 was pressed*/
      TSWREC.TSVPLNBR = TS07W00.TSVPLNBR; /* p/l number*/
      TSWREC.OP1CUOID = TS07W00.OP1CUOID; /* order number*/
      TSWREC.OP1NORID = TS07W00.OP1NORID; /* order number*/
      TSWREC.KUCCOID = TS07W00.KUCCOID; /* customer*/
      TSWREC.TSOCRTNB = TS07W00.TS-PL-CRTN-NBR; /* carton number*/
      TSWREC.XXXTSPAG = 1; /* reset page number to 1*/
      COMMAREA.CATOAP = "TS07"; /* TO application*/
    end

    TS07S31(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* page forward*/
   && converseVar.eventKey not pf8)  /* page backward*/

    TSWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is enter /* if enter pressed*/
   && TS07W00.XXXTSPAG != TS07W00.TA5TSQIX) /* and not last page*/

    TSWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    exit stack; /* Exit to display map*/

  end

end // end TS07330

// reset highlighted fields
Function TS07340()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS07M002.TSVPLNBR protect; /* p/l number*/
  set TS07M002.OP1CUOID protect; /* order number*/
  set TS07M002.OP1NORID protect; /* order id*/
  set TS07M002.TS-PL-CRTN-NBR protect; /* carton number*/
  set TS07M002.TSYNCTLB initialAttributes; /* carton weight*/
  set TS07M002.TSYNCTFT initialAttributes; /* carton volume*/
  set TS07M002.PKLCTNLN initialAttributes; /* carton length*/
  set TS07M002.PKLCTNWD initialAttributes; /* carton width*/
  set TS07M002.PKLCTNHG initialAttributes; /* carton height*/

  if (TS07W02.XDSCD != "1") /* if not direct ship*/
    set TS07M002.TS07MCCD skip; /* carton type code*/
  else
    set TS07M002.TS07MCCD initialAttributes; /* carton type code*/
  end

  TS07W00.TS07WIXG = 1; /* Initialize line index*/

  while (TS07W00.TS07WIXG <= 13) /* Until end of lines*/
    if (TS07M002.PK1QTY[TS07WIXG] > 0) /* if line exists*/

      set TS07M002.TS07MSEL[TS07WIXG] protect; /* Reset action field*/
      set TS07M002.PK1QTY[TS07WIXG] normal; /* reset quantity*/
      set TS07M002.PC3POIDT[TS07WIXG] normal; /* po month*/
      set TS07M002.FY1FCTYC[TS07WIXG] normal; /* factory*/
      set TS07M002.XCTCD[TS07WIXG] normal; /* country*/

    end

    TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* Increment line index*/

  end


end // end TS07340

// verify entered data
Function TS07350()
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    TS07351(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (TS07W00.TA5TSQIX > 0) /* Page was formatted*/

      TS07W00.TS07WIXG = 13; /* Initialize line index*/

      while (TS07W00.TS07WIXG > 0) /* Until end of lines*/

        if (TS07M002.XGPCD[TS07WIXG] != "  ") /* if line present*/

          TS07352(); /* Verify data in the line*/

        end

        TS07W00.TS07WIXG = TS07W00.TS07WIXG - 1; /* Decrement line number*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* check to see if a pop-up window was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    if ("?" in TS07M002.XCTCD)

      TS07353();

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end TS07350

// Verify scroll request
Function TS07351()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS07W00.XXXTSPAG < 2)       /* and no previous pages*/

    TSWREC.XXXMODID = "351"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS07W00.XXXTSPAG >= TS07W00.TA5TSQIX) /* and no more pages*/

    TSWREC.XXXMODID = "351"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WIXG = 13; /* Initialize line index*/

  while (TS07W00.TS07WIXG > 0) /* Until end of lines*/

    if (TS07M002.XCTCD[TS07WIXG] != TS07W02.XCTCD[TS07WIXG])

      TSWREC.XXXMODID = "351"; /* Module identification*/
      set TS07M002.XCTCD[TS07WIXG] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (TS07M002.FY1FCTYC[TS07WIXG] != TS07W02.FY1FCTYC[TS07WIXG])

      TSWREC.XXXMODID = "351"; /* Module identification*/
      set TS07M002.FY1FCTYC[TS07WIXG] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (TS07M002.PC3POIDT[TS07WIXG] != TS07W02.PC3POIDT[TS07WIXG])

      TSWREC.XXXMODID = "351"; /* Module identification*/
      set TS07M002.PC3POIDT[TS07WIXG] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (TS07M002.PK1QTY[TS07WIXG] != TS07W02.PK1QTY[TS07WIXG])

      TSWREC.XXXMODID = "351"; /* Module identification*/
      set TS07M002.PK1QTY[TS07WIXG] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    TS07W00.TS07WIXG = TS07W00.TS07WIXG - 1; /* Decrement line number*/

  end


end // end TS07351

// Verify data in the line
Function TS07352()
   /* ------------------------------------------------------------*/
   /* check for updates to line item data*/
   /* ------------------------------------------------------------*/

  if (TS07M002.XCTCD[TS07WIXG] != TS07W02.XCTCD[TS07WIXG] /* code entered*/
   && TS07M002.XCTCD[TS07WIXG] != "?"                     /* and not popup request*/
   && TS07M002.XCTCD[TS07WIXG] != " ")                    /* and not spaces*/
    if (TS07M002.XCTCD[TS07WIXG] in XCTTBL.XCTCD /* code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
       /* next sentence*/
    else
      TSWREC.XXXMODID = "352"; /* module id*/
      set TS07M002.XCTCD[TS07WIXG] cursor, bold; /* highlight*/
      converseLib.validationFailed(241); /* indicate missing or invalid*/
    end
  end

  if (TS07M002.FY1FCTYC[TS07WIXG] != TS07W02.FY1FCTYC[TS07WIXG]
   && TS07M002.FY1FCTYC[TS07WIXG] != " ") /* and not spaces*/
    TS07S35(); /* validate factory code and supply country code*/
  end

  if (TS07M002.PK1QTY[TS07WIXG] != TS07W02.PK1QTY[TS07WIXG])
    if (TS07M002.PK1QTY[TS07WIXG] > TS07W02.PK1QTY[TS07WIXG])
      TSWREC.XXXMODID = "352"; /* module id*/
      set TS07M002.PK1QTY[TS07WIXG] cursor, bold; /* highlight*/
      converseLib.validationFailed(191); /* quantity must be less than orig*/
    end

    if (TS07M002.PK1QTY[TS07WIXG] <= 0) /* cant be zero either*/
      TSWREC.XXXMODID = "352"; /* module id*/
      set TS07M002.PK1QTY[TS07WIXG] cursor, bold; /* highlight*/
      converseLib.validationFailed(256); /* quantity changes not valid*/
    end
  end

  if (TS07M002.XCTCD[TS07WIXG] == TS07W01.XCTCD[TS07WIXM]
   && TS07M002.FY1FCTYC[TS07WIXG] == TS07W01.FY1FCTYC[TS07WIXM]
   && TS07M002.PC3POIDT[TS07WIXG] == TS07W01.PC3POIDT[TS07WIXM])
    TSWREC.XXXMODID = "352"; /* module id*/
    set TS07M002.PC3POIDT[TS07WIXG] cursor, bold; /* highlight*/
    set TS07M002.FY1FCTYC[TS07WIXG] bold; /* highlight*/
    set TS07M002.XCTCD[TS07WIXG] bold; /* highlight*/
    converseLib.validationFailed(258); /* one of these fields is needed*/
  end

end // end TS07352

// Check for pop-up request
Function TS07353()
   /* ------------------------------------------------------------*/
   /* check for valid pop-up window request*/
   /* ------------------------------------------------------------*/

  if ("?" in TS07M002.XCTCD) /* if country code pop-up requested*/

    TS07W00.TS07WIXG = sysVar.arrayIndex; /* set index to line*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "         XCT - COUNTRY TABLE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if code was selected*/
      TS07M002.XCTCD[TS07WIXG] = XCTTBL.XCTCD[XX0XWPIX];
    else
      TS07M002.XCTCD[TS07WIXG] = TS07W01.XCTCD[TS07WIXG];
    end
    set TS07M002.XCTCD[TS07WIXG] cursor, bold; /* highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TS07M002.XXXMODID = "353"; /* Module identification*/
  converseLib.validationFailed(176); /* Indicate press ENTER*/

end // end TS07353

// process valid input request
Function TS07360()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* if more quantity remains to be split out then setup for a*/
   /* new line on map and return to previous process.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WQTY = TS07W02.PK1QTY[TS07WNBR] - TS07M002.PK1QTY[TS07WNBR];

  if (TS07W00.TS07WQTY > 0) /* if qty remains to be split*/

    TS07W02.TS07WLIN[TS07WNBR] = TS07W01.TS07WLIN[TS07WIXM];
    TS07W02.PK1QTY[TS07WNBR] = TS07M002.PK1QTY[TS07WNBR];
    TS07W02.PC3POIDT[TS07WNBR] = TS07M002.PC3POIDT[TS07WNBR];
    TS07W02.FY1FCTYC[TS07WNBR] = TS07M002.FY1FCTYC[TS07WNBR];
    TS07W02.XCTCD[TS07WNBR] = TS07M002.XCTCD[TS07WNBR];

    TS07W00.TS07WNBR = TS07W00.TS07WNBR + 1; /* increment line count*/

    if (TS07W00.TS07WNBR > 13) /* if end of page*/
      TS07S33(); /* update temp storage page*/
      set TS07W02 empty; /* clear temp storage page*/
      TS07W00.TS07WNBR = 1; /* reset to line 1 of new page*/
    end

    TS07W00.TS07WIXG = TS07W00.TS07WNBR; /* set line index*/
    TS07W02.TS07WGRP = TS07W01.TS07WGRP; /* p/l group data*/
    TS07W02.TS07WLIN[TS07WIXG] = TS07W01.TS07WLIN[TS07WIXM];
    TS07W02.PK1QTY[TS07WIXG] = TS07W00.TS07WQTY; /* qty to split out*/
    TS07W02.TS07WQTY[TS07WIXG] = TS07W00.TS07WQTY; /* new qty remain*/

    TS07W00.TS07WSWD = "2"; /* screen to be displayed switch*/
    TS07W00.TS07WSWR = "Y"; /* request for data switch*/
    TS07W00.TS07WSWU = "Y"; /* update temp storage*/
    TSWREC.XXXMSGNO = 206; /* indicate more to split*/

    return; /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* update last page in working storage with final changes*/
   /* ------------------------------------------------------------*/

  TS07W02.TS07WLIN[TS07WNBR] = TS07W01.TS07WLIN[TS07WIXM];
  TS07W02.PK1QTY[TS07WNBR] = TS07M002.PK1QTY[TS07WNBR];
  TS07W02.PC3POIDT[TS07WNBR] = TS07M002.PC3POIDT[TS07WNBR];
  TS07W02.FY1FCTYC[TS07WNBR] = TS07M002.FY1FCTYC[TS07WNBR];
  TS07W02.XCTCD[TS07WNBR] = TS07M002.XCTCD[TS07WNBR];

  TS07W00.XXXTSPAG = TS07W00.TA5TSQIX; /* set to last page*/

  TS07S33(); /* update last page in temp storage*/

   /* ------------------------------------------------------------*/
   /* split product size from old size to new size*/
   /* ------------------------------------------------------------*/

  TS07W00.XXXTSPAG = 1; /* set page count to one*/

  while (TS07W00.XXXTSPAG <= TS07W00.TA5TSQIX) /* while pages to update*/

    TS07S34(); /* obtain temp stor page*/

    TS07W00.TS07WIXG = 1; /* set line index to one*/

    while (TS07W00.TS07WIXG <= 13 /* until end of lines*/
     && TS07W02.XGPCD[TS07WIXG] != "  ") /* if product line*/

      /* ------------------------------------------------------------*/
       /* delete old product/size rows from dtrans.vnlpls01 table*/
      /* ------------------------------------------------------------*/

      TS07400(); /* delete old product/size rows*/

      /* ------------------------------------------------------------*/
       /* insert old product/size row with remaining unit count*/
      /* ------------------------------------------------------------*/

      TS07410(); /* insert old product/size row*/

      /* ------------------------------------------------------------*/
       /* insert new product/size with split unit count*/
      /* ------------------------------------------------------------*/

      TS07420(); /* insert new product/size row*/

      TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* increment line index*/

    end

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG + 1; /* increment page count*/

  end

   /* ------------------------------------------------------------*/
   /* commit all table changes before leaving split size mode*/
   /* ------------------------------------------------------------*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit all changes*/

   /* ------------------------------------------------------------*/
   /* setup for return to original data on first screen*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWD = "1"; /* screen to be displayed switch*/
  TS07W00.TS07WSWR = "Y"; /* request for data switch*/

  TS07M001.TSVPLNBR = TS07W00.TSVPLNBR; /* old p/l number*/
  TS07M001.KUCCOID = TS07W00.KUCCOID; /* customer*/
  TS07M001.OP1CUOID = TS07W00.OP1CUOID; /* ord number*/
  TS07M001.OP1NORID = TS07W00.OP1NORID; /* ord number*/
  TS07M001.TS-PL-CRTN-NBR = TS07W00.TS-PL-CRTN-NBR; /* ctn number*/
  TSWREC.XXXMSGNO = 001; /* indicate successful split*/


end // end TS07360

// delete old rows in product tbl
Function TS07400()
   /* ------------------------------------------------------------*/
   /* delete the old rows in the dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W01.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS07W01.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W01.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W01.OP2LNINB[TS07WIXM]; /* line itm nbr*/
  TSZREC.TSPCRTNB = TS07W01.TS-PL-CRTN-NBR; /* carton number*/
  TSZREC.XGPCD = TS07W01.XGPCD[TS07WIXM]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W01.SY1STNBR[TS07WIXM]; /* style*/
  TSZREC.SY2CLRID = TS07W01.SY2CLRID[TS07WIXM]; /* color*/
  TSZREC.XDMCD = TS07W01.XDMCD[TS07WIXM]; /* dimension*/
  TSZREC.XQACD = TS07W01.XQACD[TS07WIXM]; /* quality code*/
  TSZREC.XOWCD = TS07W01.XOWCD[TS07WIXM]; /* owner group*/
  TSZREC.PC2INSEG = TS07W01.PC2INSEG[TS07WIXM]; /* spec code*/
  TSZREC.XPGCD = TS07W01.XPGCD[TS07WIXM]; /* package type*/
  TSZREC.XUMCD = TS07W01.XUMCD[TS07WIXM]; /* unit of measure*/
  TSZREC.SY5SZID = TS07W01.SY5SZID[TS07WIXM]; /* size*/
  TSZREC.PC3POIDT = TS07W01.PC3POIDT[TS07WIXM]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07W01.FY1FCTYC[TS07WIXM]; /* factory*/
  TSZREC.XCTCD = TS07W01.XCTCD[TS07WIXM]; /* country code*/

  TS6REC.TS6TASK = "D "; /* delete row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "400"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "400"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE TABLE ROWS   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07400

// insert new row in product tbl
Function TS07410()
   /* ------------------------------------------------------------*/
   /* insert the new row in the dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W01.TSVPLNBR; /* p/l number*/
  TSZREC.OP1PARTN = TS07W01.OP1PARTN; /* partition number*/
  TSZREC.OP1CUOID = TS07W01.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W01.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W01.OP2LNINB[TS07WIXM]; /* line item nbr*/
  TSZREC.TSPCRTNB = TS07W01.TS-PL-CRTN-NBR; /* carton number*/
  TSZREC.XGPCD = TS07W01.XGPCD[TS07WIXM]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W01.SY1STNBR[TS07WIXM]; /* style*/
  TSZREC.SY2CLRID = TS07W01.SY2CLRID[TS07WIXM]; /* color*/
  TSZREC.XDMCD = TS07W01.XDMCD[TS07WIXM]; /* dimension*/
  TSZREC.XQACD = TS07W01.XQACD[TS07WIXM]; /* quality code*/
  TSZREC.XOWCD = TS07W01.XOWCD[TS07WIXM]; /* owner group*/
  TSZREC.PC2INSEG = TS07W01.PC2INSEG[TS07WIXM]; /* spec code*/
  TSZREC.XPGCD = TS07W01.XPGCD[TS07WIXM]; /* package type*/
  TSZREC.XUMCD = TS07W01.XUMCD[TS07WIXM]; /* unit of measure*/
  TSZREC.SY1UNPCS = TS07W01.SY1UNPCS[TS07WIXM]; /* units/case*/
  TSZREC.SY5SZID = TS07W01.SY5SZID[TS07WIXM]; /* size*/
  TSZREC.PC3POIDT = TS07W01.PC3POIDT[TS07WIXM]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07W01.FY1FCTYC[TS07WIXM]; /* factory*/
  TSZREC.XCTCD = TS07W01.XCTCD[TS07WIXM]; /* country*/
  TSZREC.TSZXCPFL = TS07W01.TSZXCPFL[TS07WIXM]; /* xcp flag*/

  TSZREC.PK1QTY = TS07W01.PK1QTY[TS07WIXM] - TS07W02.PK1QTY[TS07WIXG];
  TS07W01.PK1QTY[TS07WIXM] = TSZREC.PK1QTY; /* save new remaining tot*/

   /* ------------------------------------------------------------*/
   /* get system date and time for insert*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system date and time*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS6REC.TS6TASK = "A "; /* insert row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "410"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "410"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07410

// insert new row in product tbl
Function TS07420()
   /* ------------------------------------------------------------*/
   /* insert the new row in the dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSZREC.OP1PARTN = TS07W02.OP1PARTN; /* partition number*/
  TSZREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W02.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W02.OP2LNINB[TS07WIXG]; /* line item nbr*/
  TSZREC.TSPCRTNB = TS07W02.TS-PL-CRTN-NBR; /* carton number*/
  TSZREC.XGPCD = TS07W02.XGPCD[TS07WIXG]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W02.SY1STNBR[TS07WIXG]; /* style*/
  TSZREC.SY2CLRID = TS07W02.SY2CLRID[TS07WIXG]; /* color*/
  TSZREC.XDMCD = TS07W02.XDMCD[TS07WIXG]; /* dimension*/
  TSZREC.XQACD = TS07W02.XQACD[TS07WIXG]; /* quality code*/
  TSZREC.XOWCD = TS07W02.XOWCD[TS07WIXG]; /* owner group*/
  TSZREC.PC2INSEG = TS07W02.PC2INSEG[TS07WIXG]; /* spec code*/
  TSZREC.XPGCD = TS07W02.XPGCD[TS07WIXG]; /* package type*/
  TSZREC.XUMCD = TS07W02.XUMCD[TS07WIXG]; /* unit of measure*/
  TSZREC.SY1UNPCS = TS07W02.SY1UNPCS[TS07WIXG]; /* units/case*/
  TSZREC.SY5SZID = TS07W02.SY5SZID[TS07WIXG]; /* size*/
  TSZREC.PC3POIDT = TS07W02.PC3POIDT[TS07WIXG]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07W02.FY1FCTYC[TS07WIXG]; /* factory*/
  TSZREC.XCTCD = TS07W02.XCTCD[TS07WIXG]; /* country*/
  TSZREC.TSZXCPFL = " "; /* set xcp flag to space*/

  TSZREC.PK1QTY = TS07W02.PK1QTY[TS07WIXG]; /* split quantity*/

   /* ------------------------------------------------------------*/
   /* get system date and time for insert*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system date and time*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS6REC.TS6TASK = "A "; /* insert row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "420"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "420"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07420

// split ctn main function
Function TS07500()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS07510(); /* Obtain the data to display*/

  TS07520(); /* Format and display the map*/

  TS07530(); /* Check attention identifier*/

  TS07540(); /* Reset fields to normal intensity*/

  TS07550(); /* Verify the entered data*/

  TS07560(); /* Process valid input request*/


end // end TS07500

// Obtain the data to display
Function TS07510()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS07W00.XXXTSLEN = 744; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* purge any existing pages from the temp storage queue.*/
   /* ------------------------------------------------------------*/

  TS07S51(); /* purge temp storage*/

   /* ------------------------------------------------------------*/
   /* obtain the next available carton number for packing list.*/
   /* ------------------------------------------------------------*/

  TS07S55(); /* obtain next ctn nbr*/

   /* ------------------------------------------------------------*/
   /* create temp storage pages for products to be split*/
   /* ------------------------------------------------------------*/

  TS07W00.TSOSHPQT = 0; /* set carton qty to zero*/

  TS07W00.XXXTSPAG = 1; /* set page count to one*/
  TS07W00.TS07WIXG = 1; /* set w02 line index to one*/

  while (TS07W00.XXXTSPAG <= TS07W00.TA5TSQIX) /* while pages exist*/

    TS07S04(); /* obtain ts07w01 page*/

    TS07W00.TS07WIXM = 1; /* set w01 line index to one*/

    while (TS07W00.TS07WIXM <= 13) /* until end of lines*/

      if (TS07W01.TS07MSEL[TS07WIXM] == "S") /* if line was selected*/

        /* ------------------------------------------------------------*/
         /* move each line to the temp storage area*/
        /* ------------------------------------------------------------*/

        if (TS07WIXG == 1) /* if first line in temp storage page*/

          TS07W02.TS07WGRP = TS07W01.TS07WGRP; /* p/l group data*/
          TS07W02.YNTCD = " "; /* carton type*/
          TS07W02.PKLCTNCD = " "; /* carton code*/
          TS07W02.PKLCTNHG = 0; /* carton height*/
          TS07W02.PKLCTNWD = 0; /* carton width*/
          TS07W02.PKLCTNLN = 0; /* carton length*/
          TS07W02.TSYNCTLB = 0; /* carton weight*/
          TS07W02.YNTCRWT = 0; /* corregated weight*/
          TS07W02.TSYNCTFT = 0; /* carton volume*/
          TS07W02.TS-PL-CRTN-NBR = TS4REC.TS4FUNCT; /* new ctn number*/

        end

        /* ------------------------------------------------------------*/
         /* move line and calculate split quantity, save original qty*/
        /* ------------------------------------------------------------*/

        TS07W02.TS07WLIN[TS07WIXG] = TS07W01.TS07WLIN[TS07WIXM];
        TS07W00.TS07WQTY = TS07W01.TS07WQTY[TS07WIXM] -         TS07W01.PK1QTY[TS07WIXM];
        TS07W02.PK1QTY[TS07WIXG] = TS07W00.TS07WQTY; /* qty to split*/
        TS07W02.TS07WQTY[TS07WIXG] = TS07W01.TS07WQTY[TS07WIXM];

        TS07W00.TSOSHPQT = TS07W00.TSOSHPQT + TS07W00.TS07WQTY;
                                   /* ctn total*/

        TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* increment line index*/

        /* ------------------------------------------------------------*/
         /* if the page is full, add the page to the storage queue*/
        /* ------------------------------------------------------------*/

        if (TS07W00.TS07WIXG > 13) /* page is full*/

          TS07S52(); /* add ts07w02 temp storage page*/

        end

      end

      TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* increment line index*/

    end

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG + 1; /* increment page count*/

  end

   /* ------------------------------------------------------------*/
   /* add any partially formatted pages to temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WIXG > 1) /* if page was partially formatted*/

    TS07S52(); /* add ts07w02 temp storage page*/

  end

   /* ------------------------------------------------------------*/
   /* if no pages were formatted, then indicate no selection made*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WMAX == 0) /* no pages formatted*/

    TS07W01.TS07WGRP = TS07W00.TS07WGRP; /* restore orig p/l data*/
    TSWREC.XXXMODID = "510"; /* module identification*/
    TSWREC.XXXMSGNO = 021; /* no data to split message*/

    return; /* exit*/

  end

   /* ------------------------------------------------------------*/
   /* if qty removed from original ctn leaves no products in ctn*/
   /* then show as an error and return.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TSOSHPQT >= TS07W01.TSOSHPQT) /* IF qty removed > orig qty*/

    TS07W00.TS07WSWF = "Y"; /* format the map switch*/
    TS07W00.TS07WSWD = "1"; /* map to display switch*/
    TS07W00.TS07WSWR = "Y"; /* request for data switch*/

    TS07M001.TSVPLNBR = TS07W00.TSVPLNBR; /* orig p/l nbr*/
    TS07M001.KUCCOID = TS07W00.KUCCOID; /* orig customer*/
    TS07M001.OP1CUOID = TS07W00.OP1CUOID; /* orig ord nbr*/
    TS07M001.OP1NORID = TS07W00.OP1NORID; /* orig ord id*/
    TS07M001.TS-PL-CRTN-NBR = TS07W00.TS-PL-CRTN-NBR; /* orig ctn nbr*/

    TSWREC.XXXMODID = "510"; /* module identification*/
    TSWREC.XXXMSGNO = 257; /* must have one left in orig qty*/

    exit stack; /* exit*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMSGNO = 229; /* split message*/

  TS07W00.TS07WSWR = "N"; /* Request for data switch*/

  TS07W00.TS07WPAG = 1; /* reset page nbr to one*/

end // end TS07510

// Format and converse the map
Function TS07520()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (TS07W00.TS07WSWF == "Y") /* Map must be formatted*/
      TS07521(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date*/
   /* ------------------------------------------------------------*/

  TS07M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/

      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TS07M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    TS07M002.XXXMODID = TSWREC.XXXMODID; /* Module identification*/

    set TS07M002 alarm; /* Indicate sound alarm*/

  end

  converse TS07M002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

end // end TS07520

// Format the display data
Function TS07521()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS07M002 initial; /* M001 input/output area*/

  TS07W00.TS07WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WMAX > 0) /* Pages were formatted*/

    if (TS07W00.TS07WPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS07W00.TS07WPAG > TS07W00.TS07WMAX) /* Desired greater highest*/
        TS07W00.TS07WPAG = TS07W00.TS07WMAX; /* Default to highest*/
      end

      TS07S54(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TS07M002.XXXTSPAG = TS07W00.TS07WPAG; /* Current page*/
    TS07M002.TA5TSQIX = TS07W00.TS07WMAX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS07M002.TS07MLIT = "SPLIT CARTON MODE"; /* MODE INDICATOR*/

  TS07M002.XWHCD = TS07W02.XWHCD;
  TS07M002.KUCCOID = TS07W02.KUCCOID;
  TS07M002.TSVPLNBR = TS07W02.TSVPLNBR;
  TS07M002.OP1CUOID = TS07W02.OP1CUOID;
  TS07M002.OP1NORID = TS07W02.OP1NORID;
  TS07M002.TS-PL-CRTN-NBR = TS07W02.TS-PL-CRTN-NBR;

  if (TS07W02.XDSCD != "1" /* if not a direct ship*/
   && TS07W00.TS07WPAG == 1) /* and first page*/

    set TS07M002.TS07MCCD cursor, normal; /* unprotect*/

  else

    set TS07M002.TS07MCCD skip, invisible; /* protect*/
    set TS07M002.XGPCD[1] cursor; /* cursor*/

  end

  if (TS07W00.TS07WMAX > 0) /* if data to display*/
    if (TS07W02.XDSCD == "1") /* p/l is a direct ship*/
      TS07M002.YNTABRV = "DIRECT SHIP";
    else
      TS07M002.PKLCTNHG = TS07W02.PKLCTNHG;
      TS07M002.PKLCTNWD = TS07W02.PKLCTNWD;
      TS07M002.PKLCTNLN = TS07W02.PKLCTNLN;
      TS07M002.TSYNCTFT = TS07W02.TSYNCTFT;
      TS07M002.TSYNCTLB = TS07W02.TSYNCTLB;
    end
  end

  TS07W00.TS07WIXG = 1; /* Initialize line index*/

  while (TS07W00.TS07WIXG <= 13 /* Until screen is full*/
   && TS07W02.XGPCD[TS07WIXG] > "  ") /* and line exists*/

    set TS07M002.PK1QTY[TS07WIXG] skip;
    set TS07M002.PC3POIDT[TS07WIXG] skip;
    set TS07M002.FY1FCTYC[TS07WIXG] skip;
    set TS07M002.XCTCD[TS07WIXG] skip;

    TS07M002.XGPCD[TS07WIXG] = TS07W02.XGPCD[TS07WIXG];
    TS07M002.SY1STNBR[TS07WIXG] = TS07W02.SY1STNBR[TS07WIXG];
    TS07M002.SY2CLRID[TS07WIXG] = TS07W02.SY2CLRID[TS07WIXG];
    TS07M002.XDMCD[TS07WIXG] = TS07W02.XDMCD[TS07WIXG];
    TS07M002.XQACD[TS07WIXG] = TS07W02.XQACD[TS07WIXG];
    TS07M002.XOWCD[TS07WIXG] = TS07W02.XOWCD[TS07WIXG];
    TS07M002.PC2INSEG[TS07WIXG] = TS07W02.PC2INSEG[TS07WIXG];
    TS07M002.XPGCD[TS07WIXG] = TS07W02.XPGCD[TS07WIXG];
    TS07M002.XUMCD[TS07WIXG] = TS07W02.XUMCD[TS07WIXG];

    TS07M002.PK1QTY[TS07WIXG] = TS07W02.PK1QTY[TS07WIXG];
    TS07M002.PC3POIDT[TS07WIXG] = TS07W02.PC3POIDT[TS07WIXG];
    TS07M002.FY1FCTYC[TS07WIXG] = TS07W02.FY1FCTYC[TS07WIXG];
    TS07M002.XCTCD[TS07WIXG] = TS07W02.XCTCD[TS07WIXG];
    TS07M002.TSZXCPFL[TS07WIXG] = " ";
    /* ------------------------------------------------------------*/
      /* build the pg3rec.pg3key for translation of external sizes*/
    /* ------------------------------------------------------------*/
    TS07W00.XGPCD = TS07W02.XGPCD[TS07WIXG];
    TS07W00.SY1STNBR = TS07W02.SY1STNBR[TS07WIXG];
    TS07W00.SY2CLRID = TS07W02.SY2CLRID[TS07WIXG];
    TS07W00.XDMCD = TS07W02.XDMCD[TS07WIXG];
    TS07W00.XQACD = TS07W02.XQACD[TS07WIXG];
    if (TS07W00.PG3KEY != PG3REC.PG3KEY)
      TS07S05(); /* translate sizes*/
    end
    TS07W00.TS07WSIZ = TS07W02.SY5SZID[TS07WIXG];
    if (PG3REC.SY4IDDSC[TS07WSIZ] == " ")
      TS07M002.SY4IDDSC[TS07WIXG] = TS07W00.TS07WSZX;
    else
      TS07M002.SY4IDDSC[TS07WIXG] = PG3REC.SY4IDDSC[TS07WSIZ];
    end

    TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
    /* convert carton code and dimensions to carton volume*/
   /* ------------------------------------------------------------*/

  if (TS07W02.XDSCD != "1") /* if not a direct ship*/
    if (TS07W02.PKLCTNCD != " ") /* is it a full case carton?*/
      TS07M002.YNTABRV = "FULL CASE"; /* move full case to desc*/
      if (TS07W02.SY1UNPCS[1] > 0) /* use units per case if avail*/
        TS07W00.TS07WMQT = TS07W02.SY1UNPCS[1]; /* convert qty*/
        TS07M002.TS07MCCD = TS07W00.TS07WMQT; /* carton code*/
        TS07W02.TS07MCCD = TS07W00.TS07WMQT; /* carton code*/
      else
        TS07W00.TS07WMQT = TS07W02.TSOSHPQT; /* convert total ctn qty*/
        TS07M002.TS07MCCD = TS07W00.TS07WMQT; /* use ctn qty for code*/
        TS07W02.TS07MCCD = TS07W00.TS07WMQT; /* use ctn qty for code*/
      end
      if (TS07W02.PKLCTNLN <= 0)
                                   /* if carton dimenisions are not present*/
        TS07S06(); /* get carton dimensions from carton*/
                                   /* table*/
        TS07M002.PKLCTNWD = PKLREC.PKLCTNWD;
        TS07M002.PKLCTNHG = PKLREC.PKLCTNHG;
        TS07M002.PKLCTNLN = PKLREC.PKLCTNLN;
        TS07M002.TSYNCTFT = PKLREC.PKLCTNF3;
      else
        TS07M002.YNTABRV = "**H/W/L OVRD**"; /* volume user override*/
      end
    else
      TS07M002.TS07MCCD = TS07W02.YNTCD; /* use carton type code*/
      TS07W02.TS07MCCD = TS07W02.YNTCD; /* use carton type code*/
      if (TS07W02.YNTCD != " "
       && TS07W02.YNTCD in YNTTBL.YNTCD)
        TS07M002.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
        TS07W02.YNTCRWT = 0;
        if (TS07W02.PKLCTNLN <= 0)
          TS07M002.PKLCTNLN = YNTTBL.YNTCLSLN[sysVar.arrayIndex];
          TS07M002.PKLCTNHG = YNTTBL.YNTCLSHG[sysVar.arrayIndex];
          TS07M002.PKLCTNWD = YNTTBL.YNTCLSWD[sysVar.arrayIndex];
          TS07WCFT = YNTTBL.YNTCLSLN[sysVar.arrayIndex] * YNTTBL.YNTCLSHG[sysVar.arrayIndex];
          TS07WCFT = TS07WCFT * YNTTBL.YNTCLSWD[sysVar.arrayIndex];
          TS07M002.TSYNCTFT = TS07W00.TS07WCFT / 1728; /* cnvrt to cubic ft*/
        else
          TS07M002.YNTABRV = "**H/W/L OVRD**";
                                   /* volume user override*/
        end
      end
    end
  end


end // end TS07521

// Check attention identifier
Function TS07530()
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pa2) /* or Pa2 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS07M002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3 /* PF3 was pressed*/
     || converseVar.eventKey is pa2) /* Pa2 was pressed*/
      TSWREC.TSVPLNBR = TS07W00.TSVPLNBR; /* p/l number*/
      TSWREC.OP1CUOID = TS07W00.OP1CUOID; /* order number*/
      TSWREC.OP1NORID = TS07W00.OP1NORID; /* order number*/
      TSWREC.KUCCOID = TS07W00.KUCCOID; /* customer*/
      TSWREC.TSOCRTNB = TS07W00.TS-PL-CRTN-NBR; /* carton number*/
      TSWREC.XXXTSPAG = 1; /* reset page number to 1*/
      COMMAREA.CATOAP = "TS07"; /* TO application*/
    end

    TS07S51(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* page forward*/
   && converseVar.eventKey not pf8)  /* page backward*/

    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is enter /* if enter pressed*/
   && TS07W00.TS07WPAG != 1)        /* and not first page*/

    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    exit stack; /* Exit to display map*/

  end

end // end TS07530

// reset highlighted fields
Function TS07540()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (TS07W02.XDSCD != "1" /* if not direct ship*/
   && TS07W00.TS07WPAG == 1) /* and first page*/
    set TS07M002.TS07MCCD cursor, normal; /* carton type code*/
  else
    set TS07M002.TS07MCCD skip, invisible; /* carton type code*/
  end

  TS07W00.TS07WIXG = 1; /* Initialize line index*/

  while (TS07W00.TS07WIXG <= 13) /* Until end of lines*/
    if (TS07M002.PK1QTY[TS07WIXG] > 0) /* if line exists*/

      set TS07M002.TS07MSEL[TS07WIXG] protect; /* Reset action field*/
      set TS07M002.PK1QTY[TS07WIXG] skip; /* reset quantity*/
      set TS07M002.PC3POIDT[TS07WIXG] skip; /* po month*/
      set TS07M002.FY1FCTYC[TS07WIXG] skip; /* factory*/
      set TS07M002.XCTCD[TS07WIXG] skip; /* country*/

    end

    TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* Increment line index*/

  end


end // end TS07540

// verify entered data
Function TS07550()
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    TS07551(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* if enter key was pressed check the carton dimension fields*/
   /* ------------------------------------------------------------*/

  if (TS07W02.XDSCD != "1") /* if not a direct ship*/

    TS07W00.TS07WSWY = "N"; /* wgt/vol chgd flag*/


    if (TS07M002.TS07MCCD != TS07W02.TS07MCCD) /* if carton type entered*/
      if (TS07M002.TS07MCCD == "?") /* if request for popup window*/
         /* next sentence*/
      else
        if (TS07M002.TS07MCCD == " ") /* if code is removed*/
          TSWREC.XXXMODID = "550"; /* module identification*/
          set TS07M002.TS07MCCD cursor, bold; /* highlight*/
          converseLib.validationFailed(198); /* carton type code invalid*/
        else
          TS07W00.TS07WCCD = TS07M002.TS07MCCD; /* format to 2 chars*/
          if (TS07W00.TS07WCCD in YNTTBL.YNTCD /* if in table*/
           && YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and status is active*/

            TS07W00.TS07WSWY = "Y"; /* wgt/vol chgd*/
            TS07W00.TS07WCFT = YNTCLSHG[sysVar.arrayIndex] * YNTCLSWD[sysVar.arrayIndex];
            TS07W00.TS07WCFT = TS07W00.TS07WCFT * YNTCLSLN[sysVar.arrayIndex];
            TS07W00.TS07WCFT = TS07W00.TS07WCFT / 1728;
            TS07M002.TSYNCTFT = TS07W00.TS07WCFT;

            TS07W00.TS07WLBS = TS07W02.YNTCRWT - YNTTBL.YNTCRWT[sysVar.arrayIndex];
            TS07M002.TSYNCTLB = TS07M002.TSYNCTLB - TS07W00.TS07WLBS;

          else
            TSWREC.XXXMODID = "550"; /* module identification*/
            set TS07M002.TS07MCCD cursor, bold; /* highlight*/
            converseLib.validationFailed(198); /* carton type code invalid*/
          end
        end
      end
    else
      if (TS07W02.TS07MCCD == " " /* if blank*/
       && TS07W00.TS07WPAG == 1)  /* and first page*/
        TSWREC.XXXMODID = "550"; /* module id*/
        set TS07M002.TS07MCCD cursor, bold; /* highlight*/
        converseLib.validationFailed(198); /* must be entered*/
      end
    end

    if (TS07M002.TSYNCTLB != TS07W02.TSYNCTLB) /* if weight entered*/
      if (TS07M002.TSYNCTLB > 0) /* must be entered*/
        TS07W00.TS07WSWY = "Y"; /* wght or volume changes*/
      else
        TSWREC.XXXMODID = "550"; /* module identification*/
        set TS07M002.TSYNCTLB cursor, bold; /* highlight*/
        converseLib.validationFailed(295); /* must be entered*/
      end
    end

  end

   /* ------------------------------------------------------------*/
   /* check to see if a pop-up window was requested.*/
   /* ------------------------------------------------------------*/

  if (TS07W02.XDSCD != "1") /* if not a direct ship*/

    if ("?" in TS07M002.XCTCD
     || TS07M002.TS07MCCD == "?")

      TS07553();

    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end TS07550

// Verify scroll request
Function TS07551()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS07W00.TS07WPAG < 2)       /* and no previous pages*/

    TSWREC.XXXMODID = "551"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS07W00.TS07WPAG >= TS07W00.TS07WMAX) /* and no more pages*/

    TSWREC.XXXMODID = "551"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WIXG = 13; /* Initialize line index*/

  while (TS07W00.TS07WIXG > 0) /* Until end of lines*/

    if (TS07M002.XCTCD[TS07WIXG] != TS07W02.XCTCD[TS07WIXG])

      TSWREC.XXXMODID = "551"; /* Module identification*/
      set TS07M002.XCTCD[TS07WIXG] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (TS07M002.FY1FCTYC[TS07WIXG] != TS07W02.FY1FCTYC[TS07WIXG])

      TSWREC.XXXMODID = "551"; /* Module identification*/
      set TS07M002.FY1FCTYC[TS07WIXG] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (TS07M002.PC3POIDT[TS07WIXG] != TS07W02.PC3POIDT[TS07WIXG])

      TSWREC.XXXMODID = "551"; /* Module identification*/
      set TS07M002.PC3POIDT[TS07WIXG] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (TS07M002.PK1QTY[TS07WIXG] != TS07W02.PK1QTY[TS07WIXG])

      TSWREC.XXXMODID = "551"; /* Module identification*/
      set TS07M002.PK1QTY[TS07WIXG] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    TS07W00.TS07WIXG = TS07W00.TS07WIXG - 1; /* Decrement line number*/

  end


end // end TS07551

// Check for pop-up request
Function TS07553()
   /* ------------------------------------------------------------*/
   /* check for valid pop-up window request*/
   /* ------------------------------------------------------------*/

  if ("?" in TS07M002.XCTCD) /* if country code pop-up requested*/

    TS07W00.TS07WIXM = sysVar.arrayIndex; /* set index to line*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "         XCT - COUNTRY TABLE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if code was selected*/
      TS07M002.XCTCD[TS07WIXM] = XCTTBL.XCTCD[XX0XWPIX];
    else
      TS07M002.XCTCD[TS07WIXM] = TS07W01.XCTCD[TS07WIXM];
    end
    set TS07M002.XCTCD[TS07WIXM] cursor, bold; /* highlight*/

  end

  if (TS07M002.TS07MCCD == "?") /* if carton type pop-up requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "         YNT - CARTON TYPE TABLE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYNT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if code was selected*/
      TS07M002.TS07MCCD = YNTTBL.YNTCD[XX0XWPIX]; /* Selected code*/
      TS07M002.YNTABRV = YNTTBL.YNTABRV[XX0XWPIX];
    else
      TS07M002.TS07MCCD = TS07W01.TS07MCCD; /* Restore prior code*/
    end
    set TS07M002.TS07MCCD cursor, bold; /* highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TS07M002.XXXMODID = "553"; /* Module identification*/
  converseLib.validationFailed(176); /* Indicate press ENTER*/

end // end TS07553

// process valid input request
Function TS07560()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TS07W00.TS07WPAG = TS07W00.TS07WPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    TS07W00.TS07WPAG = TS07W00.TS07WPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* initialize style and carton weight/volume counters*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WQTY = 0; /* initial style chg qty*/
  TS07W00.TS07WCFT = 0; /* initial style chg volume*/
  TS07W00.TS07WLBS = 0; /* initial style chg weight*/

  TS07W00.TSOSHPQT = 0; /* initial crtn  chg qty*/
  TS07W00.TSYNCTFT = 0; /* initial crtn  chg volume*/
  TS07W00.TSYNCTLB = 0; /* initial crtn  chg weight*/

   /* ------------------------------------------------------------*/
   /* split product size from old carton to new carton*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WPAG = 1; /* set page count to one*/

  while (TS07W00.TS07WPAG <= TS07W00.TS07WMAX) /* while pages to update*/

    TS07S54(); /* obtain temp stor page*/

    TS07W00.TS07WIXG = 1; /* set line index to one*/

    while (TS07W00.TS07WIXG <= 13 /* until end of lines*/
     && TS07W02.XGPCD[TS07WIXG] != "  ") /* if product line*/

      /* ------------------------------------------------------------*/
       /* update the all the products which have been split*/
      /* ------------------------------------------------------------*/

      TS07600(); /* update product/size rows*/

      TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* increment line index*/

    end

    TS07W00.TS07WPAG = TS07W00.TS07WPAG + 1; /* increment page count*/

  end

   /* ------------------------------------------------------------*/
   /* update the carton for weight and volume changes*/
   /* ------------------------------------------------------------*/

  TS07610(); /* update carton*/

   /* ------------------------------------------------------------*/
   /* update the packing list for weight and volume changes*/
   /* ------------------------------------------------------------*/

  TS07620(); /* update packing list*/

   /* ------------------------------------------------------------*/
   /* update the shipment for weight and volume changes*/
   /* ------------------------------------------------------------*/

  TS07630(); /* update shipment*/

   /* ------------------------------------------------------------*/
   /* commit all table changes before leaving split carton mode*/
   /* ------------------------------------------------------------*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit all changes*/

   /* ------------------------------------------------------------*/
   /* setup for return to original data on first screen*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWD = "1"; /* screen to be displayed switch*/
  TS07W00.TS07WSWR = "Y"; /* request for data switch*/
  TS07W00.TS07WSWX = "N"; /* reset qty chg flag*/

  TS07M001.TSVPLNBR = TS07W00.TSVPLNBR; /* old p/l number*/
  TS07M001.KUCCOID = TS07W00.KUCCOID; /* customer*/
  TS07M001.OP1CUOID = TS07W00.OP1CUOID; /* ord number*/
  TS07M001.OP1NORID = TS07W00.OP1NORID; /* ord number*/
  TS07M001.TS-PL-CRTN-NBR = TS07W00.TS-PL-CRTN-NBR; /* ctn number*/
  TSWREC.XXXMSGNO = 001; /* indicate successful split*/


end // end TS07560

// update products with changes
Function TS07600()
   /* ------------------------------------------------------------*/
   /* delete products removed from original carton*/
   /* ------------------------------------------------------------*/

  TS07601(); /* delete old product rows*/

   /* ------------------------------------------------------------*/
   /* insert remaining products back into origianl carton*/
   /* ------------------------------------------------------------*/

  TS07602(); /* insert new product row*/

   /* ------------------------------------------------------------*/
   /* insert products split out to new carton number*/
   /* ------------------------------------------------------------*/

  TS07603(); /* insert new product row*/

   /* ------------------------------------------------------------*/
   /* accumulate wgt/vol/qty changes for each product split*/
   /* ------------------------------------------------------------*/

  TS07W00.TSYNCTLB = TS07W00.TSYNCTLB + TS07W00.TS07WLBS; /* accum lbs*/
  TS07W00.TSYNCTFT = TS07W00.TSYNCTFT + TS07W00.TS07WCFT; /* accum vol*/
  TS07W00.TSOSHPQT = TS07W00.TSOSHPQT + TS07W00.TS07WQTY; /* accum qty*/


end // end TS07600

// delete old rows in product tbl
Function TS07601()
   /* ------------------------------------------------------------*/
   /* delete the old rows in the dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W02.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W02.OP2LNINB[TS07WIXG]; /* line itm nbr*/
  TSZREC.TSPCRTNB = TS07W00.TS-PL-CRTN-NBR; /* old carton number*/
  TSZREC.XGPCD = TS07W02.XGPCD[TS07WIXG]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W02.SY1STNBR[TS07WIXG]; /* style*/
  TSZREC.SY2CLRID = TS07W02.SY2CLRID[TS07WIXG]; /* color*/
  TSZREC.XDMCD = TS07W02.XDMCD[TS07WIXG]; /* dimension*/
  TSZREC.XQACD = TS07W02.XQACD[TS07WIXG]; /* quality code*/
  TSZREC.XOWCD = TS07W02.XOWCD[TS07WIXG]; /* owner group*/
  TSZREC.PC2INSEG = TS07W02.PC2INSEG[TS07WIXG]; /* spec code*/
  TSZREC.XPGCD = TS07W02.XPGCD[TS07WIXG]; /* package type*/
  TSZREC.XUMCD = TS07W02.XUMCD[TS07WIXG]; /* unit of measure*/
  TSZREC.SY5SZID = TS07W02.SY5SZID[TS07WIXG]; /* size*/
  TSZREC.PC3POIDT = TS07W02.PC3POIDT[TS07WIXG]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07W02.FY1FCTYC[TS07WIXG]; /* factory*/
  TSZREC.XCTCD = TS07W02.XCTCD[TS07WIXG]; /* country code*/

  TS6REC.TS6TASK = "D "; /* delete row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "601"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "601"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE TABLE ROWS   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07601

// insert new row in product tbl
Function TS07602()
   /* ------------------------------------------------------------*/
   /* insert the old row with the remaining product quantity*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSZREC.OP1PARTN = TS07W02.OP1PARTN; /* partition number*/
  TSZREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W02.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W02.OP2LNINB[TS07WIXG]; /* line item nbr*/
  TSZREC.TSPCRTNB = TS07W00.TS-PL-CRTN-NBR; /* old carton number*/
  TSZREC.XGPCD = TS07W02.XGPCD[TS07WIXG]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W02.SY1STNBR[TS07WIXG]; /* style*/
  TSZREC.SY2CLRID = TS07W02.SY2CLRID[TS07WIXG]; /* color*/
  TSZREC.XDMCD = TS07W02.XDMCD[TS07WIXG]; /* dimension*/
  TSZREC.XQACD = TS07W02.XQACD[TS07WIXG]; /* quality code*/
  TSZREC.XOWCD = TS07W02.XOWCD[TS07WIXG]; /* owner group*/
  TSZREC.PC2INSEG = TS07W02.PC2INSEG[TS07WIXG]; /* spec code*/
  TSZREC.XPGCD = TS07W02.XPGCD[TS07WIXG]; /* package type*/
  TSZREC.XUMCD = TS07W02.XUMCD[TS07WIXG]; /* unit of measure*/
  TSZREC.SY1UNPCS = TS07W02.SY1UNPCS[TS07WIXG]; /* units/case*/
  TSZREC.SY5SZID = TS07W02.SY5SZID[TS07WIXG]; /* size*/
  TSZREC.PC3POIDT = TS07W02.PC3POIDT[TS07WIXG]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07W02.FY1FCTYC[TS07WIXG]; /* factory*/
  TSZREC.XCTCD = TS07W02.XCTCD[TS07WIXG]; /* country*/
  TSZREC.TSZXCPFL = TS07W02.TSZXCPFL[TS07WIXG]; /* xcp flag*/

   /* ------------------------------------------------------------*/
   /* change the quantity remaining to equal the old minus split*/
   /* ------------------------------------------------------------*/

  TSZREC.PK1QTY = TS07W02.TS07WQTY[TS07WIXG] - TS07W02.PK1QTY[TS07WIXG];

   /* ------------------------------------------------------------*/
   /* get system date and time for insert*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system date and time*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS6REC.TS6TASK = "A "; /* insert row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "602"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "602"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07602

// insert new row in product tbl
Function TS07603()
   /* ------------------------------------------------------------*/
   /* insert the new row in the dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSZREC.OP1PARTN = TS07W02.OP1PARTN; /* partition number*/
  TSZREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W02.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W02.OP2LNINB[TS07WIXG]; /* line item nbr*/
  TSZREC.TSPCRTNB = TS07W02.TS-PL-CRTN-NBR; /* new carton number*/
  TSZREC.XGPCD = TS07W02.XGPCD[TS07WIXG]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W02.SY1STNBR[TS07WIXG]; /* style*/
  TSZREC.SY2CLRID = TS07W02.SY2CLRID[TS07WIXG]; /* color*/
  TSZREC.XDMCD = TS07W02.XDMCD[TS07WIXG]; /* dimension*/
  TSZREC.XQACD = TS07W02.XQACD[TS07WIXG]; /* quality code*/
  TSZREC.XOWCD = TS07W02.XOWCD[TS07WIXG]; /* owner group*/
  TSZREC.PC2INSEG = TS07W02.PC2INSEG[TS07WIXG]; /* spec code*/
  TSZREC.XPGCD = TS07W02.XPGCD[TS07WIXG]; /* package type*/
  TSZREC.XUMCD = TS07W02.XUMCD[TS07WIXG]; /* unit of measure*/
  TSZREC.SY1UNPCS = TS07W02.SY1UNPCS[TS07WIXG]; /* units/case*/
  TSZREC.SY5SZID = TS07W02.SY5SZID[TS07WIXG]; /* size*/
  TSZREC.PC3POIDT = TS07W02.PC3POIDT[TS07WIXG]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07W02.FY1FCTYC[TS07WIXG]; /* factory*/
  TSZREC.XCTCD = TS07W02.XCTCD[TS07WIXG]; /* country*/
  TSZREC.TSZXCPFL = " "; /* xcp flag*/

   /* ------------------------------------------------------------*/
   /* move in the new product quantity which was split*/
   /* ------------------------------------------------------------*/

  TSZREC.PK1QTY = TS07W02.PK1QTY[TS07WIXG]; /* split quantity*/

   /* ------------------------------------------------------------*/
   /* calculate the wgt/vol/qty changes for updating the cartons*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WQTY = TS07W02.PK1QTY[TS07WIXG]; /* split qty*/

  if (TS07W02.XDSCD != "1") /* if not a direct ship*/
    TS07S50(); /* get product weight*/
    sysVar.arrayIndex = TS07W02.SY5SZID[TS07WIXG]; /* use size*/
    TS07W00.TS07WLBS = PKNREC.SYGSZWT[sysVar.arrayIndex] * TS07W00.TS07WQTY;
  end

  TS07W00.TS07WCFT = 0; /* no volume changes*/

   /* ------------------------------------------------------------*/
   /* get system date and time for insert*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system date and time*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS6REC.TS6TASK = "A "; /* insert row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "603"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "603"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07603

// update ctn for wght & vol
Function TS07610()
   /* ------------------------------------------------------------*/
   /* Select original carton to update with remaining wgt & qty.*/
   /* ------------------------------------------------------------*/

  TS07611(); /* Select carton to update*/

   /* ------------------------------------------------------------*/
   /* update original carton with remaining weight & quantity*/
   /* ------------------------------------------------------------*/

  TS07612(); /* update carton*/

   /* ------------------------------------------------------------*/
   /* insert new carton with weight and measures and quantity*/
   /* ------------------------------------------------------------*/

  TS07613(); /* insert carton*/

end // end TS07610

// select carton row
Function TS07611()
   /* ------------------------------------------------------------*/
   /* Select original carton row for update of weight & quantity*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear i/o storage area*/

  TSYREC.TSVPLNBR = TS07W00.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS07W00.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS07W00.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TS07W00.TS-PL-CRTN-NBR; /* carton nbr*/

  TS4REC.TS4TASK = "S "; /* select unique carton*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "611"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "611"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE CARTON ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07611

// update carton with new wgt/vol
Function TS07612()
   /* ------------------------------------------------------------*/
   /* Update orig carton row with remaining carton data*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* subtract the product changes accumulated for all products*/
   /* ------------------------------------------------------------*/

  TSYREC.TSOSHPQT = TSYREC.TSOSHPQT - TS07W00.TSOSHPQT; /* sub prod chgs*/
  TSYREC.TSYNCTLB = TSYREC.TSYNCTLB - TS07W00.TSYNCTLB; /* sub prod chgs*/
  TSYREC.TSYNCTFT = TSYREC.TSYNCTFT - TS07W00.TSYNCTFT; /* sub prod chgs*/

  if (TSYREC.TSOSHPQT < 0) /* if less than zero*/
    TSYREC.TSOSHPQT = 0; /* show as zero*/
  end

  if (TSYREC.TSYNCTLB < 0) /* if less than zero*/
    TSYREC.TSYNCTLB = 0; /* show as zero*/
  end

  if (TSYREC.TSYNCTFT < 0) /* if less than zero*/
    TSYREC.TSYNCTFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* get system date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSYREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSYREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS4REC.TS4TASK = "U "; /* Function code*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* update carton*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "612"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "612"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource unavailable*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE CARTON TO OLD NUMBER     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07612

// insert carton with new wgt/vol
Function TS07613()
   /* ------------------------------------------------------------*/
   /* insert the carton row with new data from any changes.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* clear row storage area*/
  set TS4REC empty; /* clear i/o storage area*/

  TSYREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSYREC.OP1PARTN = TS07W02.OP1PARTN; /* partitiion nbr*/
  TSYREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS07W02.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TS07W02.TS-PL-CRTN-NBR; /* new carton number*/

   /* ------------------------------------------------------------*/
   /* insert carton code and dimensions into the row*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WCCD = TS07M002.TS07MCCD; /* convert carton code*/
  TSYREC.YNTCD = TS07W00.TS07WCCD; /* carton code*/

   /* ------------------------------------------------------------*/
   /* move the new new weight and volume from header to the row*/
   /* ------------------------------------------------------------*/

  TSYREC.TSYNCTFT = TS07M002.TSYNCTFT; /* volume from header*/
  TSYREC.TSYNCTLB = TS07M002.TSYNCTLB; /* weight from header*/

   /* ------------------------------------------------------------*/
   /* add the product changes calculated in ts07200*/
   /* ------------------------------------------------------------*/

  TSYREC.TSOSHPQT = TSYREC.TSOSHPQT + TS07W00.TSOSHPQT; /* add prod chgs*/
  TSYREC.TSYNCTLB = TSYREC.TSYNCTLB + TS07W00.TSYNCTLB; /* add prod chgs*/
  TSYREC.TSYNCTFT = TSYREC.TSYNCTFT + TS07W00.TSYNCTFT; /* add prod chgs*/

  if (TSYREC.TSOSHPQT < 0) /* if less than zero*/
    TSYREC.TSOSHPQT = 0; /* show as zero*/
  end

  if (TSYREC.TSYNCTLB < 0) /* if less than zero*/
    TSYREC.TSYNCTLB = 0; /* show as zero*/
  end

  if (TSYREC.TSYNCTFT < 0) /* if less than zero*/
    TSYREC.TSYNCTFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* calculate the total change in carton weight and volume.*/
   /* ------------------------------------------------------------*/

  TS07W00.TSOSHPQT = TS07W00.TSOSHPQT - TSYREC.TSOSHPQT; /* tot qty chgs*/
  TS07W00.TSYNCTLB = TS07W00.TSYNCTLB - TSYREC.TSYNCTLB; /* tot wgt chgs*/
  TS07W00.TSYNCTFT = TS07W00.TSYNCTFT - TSYREC.TSYNCTFT; /* tot vol chgs*/

   /* ------------------------------------------------------------*/
   /* get system date and time for insert*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSYREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSYREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS4REC.TS4TASK = "A "; /* Function code*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert carton*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "613"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "613"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource unavailable*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "INSERT CARTON TO NEW NUMBER     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07613

// update p/l for wght & vol chgs
Function TS07620()
   /* ------------------------------------------------------------*/
   /* Select packing list to update with new weights & measures*/
   /* ------------------------------------------------------------*/

  TS07621(); /* Select unique packing list*/

   /* ------------------------------------------------------------*/
   /* update packing list with new weight and measures*/
   /* ------------------------------------------------------------*/

  TS07622(); /* update packing list row*/

end // end TS07620

// select p/l to update weight
Function TS07621()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSVREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSVREC.OP1NORID = TS07W02.OP1NORID; /* order id*/

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "621"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "621"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07621

// update p/l to subtract weight
Function TS07622()
   /* ------------------------------------------------------------*/
   /* update the packing list for cartons which have had product*/
   /* changes.*/
   /* ------------------------------------------------------------*/

  TSVREC.TSISHPQT = TSVREC.TSISHPQT - TS07W00.TSOSHPQT; /* saved qty*/
  TSVREC.TSVNPLLB = TSVREC.TSVNPLLB - TS07W00.TSYNCTLB; /* saved wgt*/
  TSVREC.TSVNPLFT = TSVREC.TSVNPLFT - TS07W00.TSYNCTFT; /* saved vol*/

  if (TSVREC.TSISHPQT < 0) /* if less than zero*/
    TSVREC.TSISHPQT = 0; /* show as zero*/
  end

  if (TSVREC.TSVNPLLB < 0) /* if less than zero*/
    TSVREC.TSVNPLLB = 0; /* show as zero*/
  end

  if (TSVREC.TSVNPLFT < 0) /* if less than zero*/
    TSVREC.TSVNPLFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* get system date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "622"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "622"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UDPATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07622

// update shipment for wgt chgs
Function TS07630()
  if (TS07W02.TSFSHPID != 0) /* if p/l has a shipment number*/
     /* next sentence*/
  else
    return; /* return to previous process*/
  end
   /* ------------------------------------------------------------*/
   /* Select shipment to update with new weights & measures*/
   /* ------------------------------------------------------------*/

  TS07631(); /* Select unique shipment*/

   /* ------------------------------------------------------------*/
   /* update shipment with new weight and measures*/
   /* ------------------------------------------------------------*/

  TS07632(); /* update shipment row*/

end // end TS07630

// select shipment to update wgt
Function TS07631()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty; /* Clear row storage area*/

  TSUREC.KUCCOID = TS07W02.KUCCOID; /* customer*/
  TSUREC.TSFSHPID = TS07W02.TSFSHPID; /* ship id*/

  try
    call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "631"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07631

// update shipment for weight
Function TS07632()
   /* ------------------------------------------------------------*/
   /* update the shipment for cartons which have had product*/
   /* changes.*/
   /* ------------------------------------------------------------*/

  TSUREC.TSUSHPQT = TSUREC.TSUSHPQT - TS07W00.TSOSHPQT; /* saved qty*/
  TSUREC.TSUNSPLB = TSUREC.TSUNSPLB - TS07W00.TSYNCTLB; /* saved wgt*/
  TSUREC.TSUNSPFT = TSUREC.TSUNSPFT - TS07W00.TSYNCTFT; /* saved vol*/

  if (TSUREC.TSUSHPQT < 0) /* if less than zero*/
    TSUREC.TSUSHPQT = 0; /* show as zero*/
  end

  if (TSUREC.TSUNSPLB < 0) /* if less than zero*/
    TSUREC.TSUNSPLB = 0; /* show as zero*/
  end

  if (TSUREC.TSUNSPFT < 0) /* if less than zero*/
    TSUREC.TSUNSPFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* get system date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSUREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSUREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  try
    call "IO4690" ("U ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "632"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "632"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UDPATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07632

// List the rows in the table
Function TS07700()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display*/
   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS07710(); /* Obtain the data to display*/

  TS07720(); /* Format and display the map*/

  TS07730(); /* Check attention identifier*/

  TS07740(); /* Reset fields to normal intensity*/

  TS07750(); /* Verify the entered data*/

  TS07760(); /* Process valid input request*/


end // end TS07700

// Obtain the data to display
Function TS07710()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS07W00.XXXTSLEN = 744; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* purge any existing pages from the temp storage queue.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWU == "N") /* if request to update is no*/

    TS07S31(); /* purge temp storage*/

    TS07W00.TS07WIXM = 1; /* initialize line index*/
    TS07W00.TS07WNBR = 1; /* initialize line count*/

    TS07W02.TS07WGRP = TS07W01.TS07WGRP; /* p/l group data*/

    TS07W02.YNTCD = " "; /* carton type*/
    TS07W02.PKLCTNCD = " "; /* carton code*/
    TS07W02.PKLCTNHG = 0; /* carton height*/
    TS07W02.PKLCTNWD = 0; /* carton width*/
    TS07W02.PKLCTNLN = 0; /* carton length*/
    TS07W02.TSYNCTLB = 0; /* carton weight*/
    TS07W02.YNTCRWT = 0; /* corregated weight*/
    TS07W02.TSYNCTFT = 0; /* carton volume*/

    TS07S55(); /* obtain next ctn nbr*/

    TS07W02.TS-PL-CRTN-NBR = TS4REC.TS4FUNCT; /* new ctn nbr*/

    /* ------------------------------------------------------------*/
     /* Add new page to the temp storage queue.*/
    /* ------------------------------------------------------------*/

    TS07S32(); /* add page in temporary storage*/

  else

    /* ------------------------------------------------------------*/
     /* Add new page to the temp storage queue.*/
    /* ------------------------------------------------------------*/

    TS07W01.TS07WGRP = TS07W02.TS07WGRP; /* save group data*/

    set TS07W02 empty; /* clear temp storage area*/

    TS07W02.TS07WGRP = TS07W01.TS07WGRP; /* restore group data*/

    TS07S32(); /* add page in temporary storage*/

    TS07W00.TS07WSWU = "N"; /* reset switch to no*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWR = "N"; /* Request for data switch*/


end // end TS07710

// Format and converse the map
Function TS07720()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (TS07W00.TS07WSWF == "Y") /* Map must be formatted*/
      TS07721(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date*/
   /* ------------------------------------------------------------*/

  TS07M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/

      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TS07M003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    TS07M003.XXXMODID = TSWREC.XXXMODID; /* Module identification*/

    set TS07M003 alarm; /* Indicate sound alarm*/

  end

  converse TS07M003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

end // end TS07720

// Format the display data
Function TS07721()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS07M003 initial; /* M001 input/output area*/

  TS07W00.TS07WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS07W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS07W00.XXXTSPAG > TS07W00.TA5TSQIX) /* Desired greater highest*/
        TS07W00.XXXTSPAG = TS07W00.TA5TSQIX; /* Default to highest*/
      end

      TS07S34(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TS07M003.XXXTSPAG = TS07W00.XXXTSPAG; /* Current page*/
    TS07M003.TA5TSQIX = TS07W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS07M003.TS07MLIT = " ADD CARTON MODE "; /* MODE INDICATOR*/

  TS07M003.XWHCD = TS07W02.XWHCD;
  TS07M003.KUCCOID = TS07W02.KUCCOID;
  TS07M003.TSVPLNBR = TS07W02.TSVPLNBR;
  TS07M003.OP1CUOID = TS07W02.OP1CUOID;
  TS07M003.OP1NORID = TS07W02.OP1NORID;
  TS07M003.TS-PL-CRTN-NBR = TS07W02.TS-PL-CRTN-NBR;

  if (TS07W02.XDSCD != "1" /* if not direct ship*/
   && TS07W00.XXXTSPAG == 1) /* and first page*/
    set TS07M003.TS07MCCD cursor, normal; /* unprotect*/
  else
    set TS07M003.TS07MCCD skip, invisible; /* protect*/
    set TS07M003.XGPCD[1] cursor;
  end

  if (TS07W00.TA5TSQIX > 0) /* if data to display*/
    if (TS07W02.XDSCD == "1") /* p/l is a direct ship*/
      TS07M003.YNTABRV = "DIRECT SHIP";
    else
      TS07M003.PKLCTNHG = TS07W02.PKLCTNHG;
      TS07M003.PKLCTNWD = TS07W02.PKLCTNWD;
      TS07M003.PKLCTNLN = TS07W02.PKLCTNLN;
      TS07M003.TSYNCTFT = TS07W02.TSYNCTFT;
      TS07M003.TSYNCTLB = TS07W02.TSYNCTLB;
    end
  end

  TS07W00.TS07WIXM = 1; /* Initialize line index*/

  while (TS07W00.TS07WIXM <= 13 /* Until screen is full*/
   && TS07W02.XGPCD[TS07WIXM] > "  ") /* and line exists*/

    TS07M003.XGPCD[TS07WIXM] = TS07W02.XGPCD[TS07WIXM];
    TS07M003.SY1STNBR[TS07WIXM] = TS07W02.SY1STNBR[TS07WIXM];
    TS07M003.SY2CLRID[TS07WIXM] = TS07W02.SY2CLRID[TS07WIXM];
    TS07M003.XDMCD[TS07WIXM] = TS07W02.XDMCD[TS07WIXM];
    TS07M003.XQACD[TS07WIXM] = TS07W02.XQACD[TS07WIXM];
    TS07M003.XOWCD[TS07WIXM] = TS07W02.XOWCD[TS07WIXM];
    TS07M003.PC2INSEG[TS07WIXM] = TS07W02.PC2INSEG[TS07WIXM];
    TS07M003.XPGCD[TS07WIXM] = TS07W02.XPGCD[TS07WIXM];
    TS07M003.XUMCD[TS07WIXM] = TS07W02.XUMCD[TS07WIXM];

    TS07M003.PK1QTY[TS07WIXM] = TS07W02.PK1QTY[TS07WIXM];
    TS07M003.PC3POIDT[TS07WIXM] = TS07W02.PC3POIDT[TS07WIXM];
    TS07M003.FY1FCTYC[TS07WIXM] = TS07W02.FY1FCTYC[TS07WIXM];
    TS07M003.XCTCD[TS07WIXM] = TS07W02.XCTCD[TS07WIXM];
    TS07M003.TSZXCPFL[TS07WIXM] = " ";
    /* ------------------------------------------------------------*/
      /* build the pg3rec.pg3key for translation of external sizes*/
    /* ------------------------------------------------------------*/
    TS07W00.XGPCD = TS07W02.XGPCD[TS07WIXM];
    TS07W00.SY1STNBR = TS07W02.SY1STNBR[TS07WIXM];
    TS07W00.SY2CLRID = TS07W02.SY2CLRID[TS07WIXM];
    TS07W00.XDMCD = TS07W02.XDMCD[TS07WIXM];
    TS07W00.XQACD = TS07W02.XQACD[TS07WIXM];
    if (TS07W00.PG3KEY != PG3REC.PG3KEY)
      TS07S05(); /* translate sizes*/
    end
    TS07W00.TS07WSIZ = TS07W02.SY5SZID[TS07WIXM];
    if (PG3REC.SY4IDDSC[TS07WSIZ] == " ")
      TS07M003.SY4IDDSC[TS07WIXM] = TS07W00.TS07WSZX;
    else
      TS07M003.SY4IDDSC[TS07WIXM] = PG3REC.SY4IDDSC[TS07WSIZ];
    end

    TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
    /* convert carton code and dimensions to carton volume*/
   /* ------------------------------------------------------------*/

  if (TS07W02.XDSCD != "1") /* if not a direct ship*/
    if (TS07W02.PKLCTNCD != " ") /* is it a full case carton?*/
      TS07M003.YNTABRV = "FULL CASE"; /* move full case to desc*/
      if (TS07W02.SY1UNPCS[1] > 0) /* use units per case if avail*/
        TS07W00.TS07WMQT = TS07W02.SY1UNPCS[1]; /* convert qty*/
        TS07M003.TS07MCCD = TS07W00.TS07WMQT; /* carton code*/
        TS07W02.TS07MCCD = TS07W00.TS07WMQT; /* carton code*/
      else
        TS07W00.TS07WMQT = TS07W02.TSOSHPQT; /* convert total ctn qty*/
        TS07M003.TS07MCCD = TS07W00.TS07WMQT; /* use ctn qty for code*/
        TS07W02.TS07MCCD = TS07W00.TS07WMQT; /* use ctn qty for code*/
      end
      if (TS07W02.PKLCTNLN <= 0)
                                   /* if carton dimenisions are not present*/
        TS07S06(); /* get carton dimensions from carton*/
                                   /* table*/
        TS07M003.PKLCTNWD = PKLREC.PKLCTNWD;
        TS07M003.PKLCTNHG = PKLREC.PKLCTNHG;
        TS07M003.PKLCTNLN = PKLREC.PKLCTNLN;
        TS07M003.TSYNCTFT = PKLREC.PKLCTNF3;
      else
        TS07M003.YNTABRV = "**H/W/L OVRD**"; /* volume user override*/
      end
    else
      TS07M003.TS07MCCD = TS07W02.YNTCD; /* use carton type code*/
      TS07W02.TS07MCCD = TS07W02.YNTCD; /* use carton type code*/
      if (TS07W02.YNTCD != " "
       && TS07W02.YNTCD in YNTTBL.YNTCD)
        TS07M003.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
        TS07W02.YNTCRWT = 0;
        if (TS07W02.PKLCTNLN <= 0)
          TS07M003.PKLCTNLN = YNTTBL.YNTCLSLN[sysVar.arrayIndex];
          TS07M003.PKLCTNHG = YNTTBL.YNTCLSHG[sysVar.arrayIndex];
          TS07M003.PKLCTNWD = YNTTBL.YNTCLSWD[sysVar.arrayIndex];
          TS07WCFT = YNTTBL.YNTCLSLN[sysVar.arrayIndex] * YNTTBL.YNTCLSHG[sysVar.arrayIndex];
          TS07WCFT = TS07WCFT * YNTTBL.YNTCLSWD[sysVar.arrayIndex];
          TS07M003.TSYNCTFT = TS07W00.TS07WCFT / 1728; /* cnvrt to cubic ft*/
        else
          TS07M003.YNTABRV = "**H/W/L OVRD**";
                                   /* volume user override*/
        end
      end
    end
  end


end // end TS07721

// Check attention identifier
Function TS07730()
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pa2) /* or Pa2 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS07M003"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3 /* PF3 was pressed*/
     || converseVar.eventKey is pa2) /* Pa2 was pressed*/
      TSWREC.TSVPLNBR = TS07W00.TSVPLNBR; /* p/l number*/
      TSWREC.OP1CUOID = TS07W00.OP1CUOID; /* order number*/
      TSWREC.OP1NORID = TS07W00.OP1NORID; /* order number*/
      TSWREC.KUCCOID = TS07W00.KUCCOID; /* customer*/
      TSWREC.TSOCRTNB = TS07W00.TS-PL-CRTN-NBR; /* carton number*/
      TSWREC.XXXTSPAG = 1; /* reset page number to 1*/
      COMMAREA.CATOAP = "TS07"; /* TO application*/
    end

    TS07S31(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* page forward*/
   && converseVar.eventKey not pf8)  /* page backward*/

    TSWREC.XXXMODID = "730"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end TS07730

// reset highlighted fields
Function TS07740()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (TS07W02.XDSCD != "1" /* if not direct ship*/
   && TS07W00.XXXTSPAG == 1) /* and first page*/
    set TS07M003.TS07MCCD cursor, normal; /* carton type code*/
  else
    set TS07M003.TS07MCCD skip, invisible; /* carton type code*/
  end

  TS07W00.TS07WIXM = 1; /* Initialize line index*/

  while (TS07W00.TS07WIXM <= 13) /* Until end of lines*/
    if (TS07M003.PK1QTY[TS07WIXM] > 0) /* if line exists*/

      set TS07M003.XGPCD[TS07WIXM] normal;
      set TS07M003.SY1STNBR[TS07WIXM] normal;
      set TS07M003.SY2CLRID[TS07WIXM] normal;
      set TS07M003.XDMCD[TS07WIXM] normal;
      set TS07M003.XQACD[TS07WIXM] normal;
      set TS07M003.XOWCD[TS07WIXM] normal;
      set TS07M003.PC2INSEG[TS07WIXM] normal;
      set TS07M003.XPGCD[TS07WIXM] normal;
      set TS07M003.XUMCD[TS07WIXM] normal;
      set TS07M003.SY4IDDSC[TS07WIXM] normal;
      set TS07M003.PK1QTY[TS07WIXM] normal; /* reset quantity*/
      set TS07M003.PC3POIDT[TS07WIXM] normal; /* po month*/
      set TS07M003.FY1FCTYC[TS07WIXM] normal; /* factory*/
      set TS07M003.XCTCD[TS07WIXM] normal; /* country*/

    end

    TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* Increment line index*/

  end


end // end TS07740

// verify entered data
Function TS07750()
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    TS07751(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* replicate product info from one line to the next if needed*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WIXM = 1; /* set line index to one*/

  while (TS07W00.TS07WIXM <= 12) /* until end of lines*/

    TS07W00.TS07WIXG = TS07W00.TS07WIXM + 1;

    if (TS07M003.SY4IDDSC[TS07WIXG] != " " /* if size desc entered*/
     || TS07M003.PK1QTY[TS07WIXG] != 0)    /* or quantity entered*/

      if (TS07M003.XGPCD[TS07WIXG] == " "
       && TS07M003.SY1STNBR[TS07WIXG] == " "
       && TS07M003.SY2CLRID[TS07WIXG] == " "
       && TS07M003.XDMCD[TS07WIXG] == " "
       && TS07M003.XQACD[TS07WIXG] == " "
       && TS07M003.XOWCD[TS07WIXG] == " "
       && TS07M003.PC2INSEG[TS07WIXG] == " "
       && TS07M003.XPGCD[TS07WIXG] == " "
       && TS07M003.XUMCD[TS07WIXG] == " ")
        TS07M003.XGPCD[TS07WIXG] = TS07M003.XGPCD[TS07WIXM];
        set TS07M003.XGPCD[TS07WIXG] skip, invisible;
        TS07M003.SY1STNBR[TS07WIXG] = TS07M003.SY1STNBR[TS07WIXM];
        set TS07M003.SY1STNBR[TS07WIXG] skip, invisible;
        TS07M003.SY2CLRID[TS07WIXG] = TS07M003.SY2CLRID[TS07WIXM];
        set TS07M003.SY2CLRID[TS07WIXG] skip, invisible;
        TS07M003.XDMCD[TS07WIXG] = TS07M003.XDMCD[TS07WIXM];
        set TS07M003.XDMCD[TS07WIXG] skip, invisible;
        TS07M003.XQACD[TS07WIXG] = TS07M003.XQACD[TS07WIXM];
        set TS07M003.XQACD[TS07WIXG] skip, invisible;
        TS07M003.XOWCD[TS07WIXG] = TS07M003.XOWCD[TS07WIXM];
        set TS07M003.XOWCD[TS07WIXG] skip, invisible;
        TS07M003.PC2INSEG[TS07WIXG] = TS07M003.PC2INSEG[TS07WIXM];
        set TS07M003.PC2INSEG[TS07WIXG] skip, invisible;
        TS07M003.XPGCD[TS07WIXG] = TS07M003.XPGCD[TS07WIXM];
        set TS07M003.XPGCD[TS07WIXG] skip, invisible;
        TS07M003.XUMCD[TS07WIXG] = TS07M003.XUMCD[TS07WIXM];
        set TS07M003.XUMCD[TS07WIXG] skip, invisible;

      end

    end

    TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* increment line number*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, if page was formatted, verify data in the line.*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TA5TSQIX > 0) /* Page was formatted*/

    TS07W00.TS07WIXM = 13; /* Initialize line index*/

    while (TS07W00.TS07WIXM > 0) /* Until end of lines*/

      TS07752(); /* Verify data in the line*/

      TS07W00.TS07WIXM = TS07W00.TS07WIXM - 1; /* Decrement line number*/

    end

  end

   /* ------------------------------------------------------------*/
   /* check the carton code field*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWY = "N"; /* wgt/vol chgd flag*/

  if (TS07M003.TS07MCCD != TS07W02.TS07MCCD) /* if carton type entered*/
    if (TS07M003.TS07MCCD == "?") /* if request for popup window*/
       /* next sentence*/
    else
      if (TS07M003.TS07MCCD == " ") /* if code is removed*/
        TSWREC.XXXMODID = "750"; /* module identification*/
        set TS07M003.TS07MCCD cursor, bold; /* highlight*/
        converseLib.validationFailed(198); /* must be entered*/
      else
        TS07W00.TS07WCCD = TS07M003.TS07MCCD; /* format to 2 chars*/
        if (TS07W00.TS07WCCD in YNTTBL.YNTCD /* if in table*/
         && YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and status is active*/

          TS07W00.TS07WSWY = "Y"; /* wgt/vol chgd*/
          TS07W00.TS07WCFT = YNTCLSHG[sysVar.arrayIndex] * YNTCLSWD[sysVar.arrayIndex];
          TS07W00.TS07WCFT = TS07W00.TS07WCFT * YNTCLSLN[sysVar.arrayIndex];
          TS07W00.TS07WCFT = TS07W00.TS07WCFT / 1728;
          TS07M003.TSYNCTFT = TS07W00.TS07WCFT;

          TS07W00.TS07WLBS = TS07W02.YNTCRWT - YNTTBL.YNTCRWT[sysVar.arrayIndex];
          TS07M003.TSYNCTLB = TS07W02.TSYNCTLB - TS07W00.TS07WLBS;

        else
          TSWREC.XXXMODID = "750"; /* module identification*/
          set TS07M003.TS07MCCD cursor, bold; /* highlight*/
          converseLib.validationFailed(198); /* carton type code invalid*/
        end
      end
    end
  else
    if (TS07W02.TS07MCCD == " " /* if blank*/
     && TS07W02.XDSCD != "1")   /* and not direct ship*/
      TSWREC.XXXMODID = "750"; /* module identification*/
      set TS07M003.TS07MCCD cursor, bold; /* highlight*/
      converseLib.validationFailed(198); /* must be entered*/
    end
  end

  if (TS07M003.TSYNCTLB != TS07W02.TSYNCTLB) /* if weight entered*/
    if (TS07M003.TSYNCTLB > 0) /* must be entered*/
      TS07W00.TS07WSWY = "Y"; /* wght or volume changes*/
    else
      TSWREC.XXXMODID = "750"; /* module identification*/
      set TS07M003.TSYNCTLB cursor, bold; /* highlight*/
      converseLib.validationFailed(295); /* must be entered*/
    end
  end

   /* ------------------------------------------------------------*/
   /* check to see if a pop-up window was requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    if ("?" in TS07M003.XCTCD
     || TS07M003.TS07MCCD == "?")

      TS07753();

    end
  end

   /* ------------------------------------------------------------*/
   /* check to see if first line has any data entered.*/
   /* ------------------------------------------------------------*/

  if (TS07M003.XGPCD[1] != TS07W02.XGPCD[1]
   || TS07M003.SY1STNBR[1] != TS07W02.SY1STNBR[1]
   || TS07M003.SY2CLRID[1] != TS07W02.SY2CLRID[1]
   || TS07M003.XDMCD[1] != TS07W02.XDMCD[1]
   || TS07M003.XQACD[1] != TS07W02.XQACD[1]
   || TS07M003.XOWCD[1] != TS07W02.XOWCD[1]
   || TS07M003.PC2INSEG[1] != TS07W02.PC2INSEG[1]
   || TS07M003.XPGCD[1] != TS07W02.XPGCD[1]
   || TS07M003.XUMCD[1] != TS07W02.XUMCD[1]
   || TS07M003.SY4IDDSC[1] != " "
   || TS07M003.PK1QTY[1] != TS07W02.PK1QTY[1]
   || TS07M003.PC3POIDT[1] != TS07W02.PC3POIDT[1]
   || TS07M003.FY1FCTYC[1] != TS07W02.FY1FCTYC[1]
   || TS07M003.XCTCD[1] != TS07W02.XCTCD[1])

     /* next sentence*/

  else

    TSWREC.XXXMODID = "750"; /* module id*/
    set TS07M003.XGPCD[1] cursor, bold; /* highlight*/
    converseLib.validationFailed(034); /* data must be entered*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no errors found*/
   || converseVar.validationMsgNum == 376) /* warning message, style info diff*/
     /* next sentence*/
  else

    TS07W00.TS07WSWR = "N"; /* reset request for data switch*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* save any lines that were entered for adding to new carton*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWU = "Y"; /* storage update switch*/

  TS07W00.TS07WIXM = 13; /* Initialize line index*/

  while (TS07W00.TS07WIXM > 0) /* Until end of lines*/

    if (TS07M003.PK1QTY[TS07WIXM] != 0) /* if line entered*/

      TS07W02.TS07MSEL[TS07WIXM] = TS07M003.TS07MSEL[TS07WIXM];
      TS07W02.XGPCD[TS07WIXM] = TS07M003.XGPCD[TS07WIXM];
      TS07W02.SY1STNBR[TS07WIXM] = TS07M003.SY1STNBR[TS07WIXM];
      TS07W02.SY2CLRID[TS07WIXM] = TS07M003.SY2CLRID[TS07WIXM];
      TS07W02.XDMCD[TS07WIXM] = TS07M003.XDMCD[TS07WIXM];
      TS07W02.XQACD[TS07WIXM] = TS07M003.XQACD[TS07WIXM];
      TS07W02.XOWCD[TS07WIXM] = TS07M003.XOWCD[TS07WIXM];
      TS07W02.PC2INSEG[TS07WIXM] = TS07M003.PC2INSEG[TS07WIXM];
      TS07W02.XPGCD[TS07WIXM] = TS07M003.XPGCD[TS07WIXM];
      TS07W02.XUMCD[TS07WIXM] = TS07M003.XUMCD[TS07WIXM];
      TS07W02.PK1QTY[TS07WIXM] = TS07M003.PK1QTY[TS07WIXM];
      TS07W02.PC3POIDT[TS07WIXM] = TS07M003.PC3POIDT[TS07WIXM];
      TS07W02.FY1FCTYC[TS07WIXM] = TS07M003.FY1FCTYC[TS07WIXM];
      TS07W02.XCTCD[TS07WIXM] = TS07M003.XCTCD[TS07WIXM];
      TS07W02.TSZXCPFL[TS07WIXM] = TS07M003.TSZXCPFL[TS07WIXM];

    end

    TS07W00.TS07WIXM = TS07W00.TS07WIXM - 1; /* decrement line number*/

  end

  TS07W00.TS07WCCD = TS07M003.TS07MCCD; /* convert to 2 chars*/
  TS07W02.YNTCD = TS07W00.TS07WCCD;
  TS07W02.TSYNCTLB = TS07M003.TSYNCTLB;
  TS07W02.TSYNCTFT = TS07M003.TSYNCTFT;


  if (converseVar.validationMsgNum == 376) /* warning message, style info diff*/
    TS07W00.TS07WSWR = "N"; /* reset request for data switch*/
    exit stack; /* Exit to display map*/
  end
end // end TS07750

// Verify scroll request
Function TS07751()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS07W00.XXXTSPAG < 2)       /* and no previous pages*/

    TSWREC.XXXMODID = "751"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, if pages exist,*/
      /* then set up for obtaining the existing page*/
   /* else*/
      /* set up for adding an empty page to temp storage*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS07W00.XXXTSPAG >= TS07W00.TA5TSQIX) /* and no more pages*/

    TS07W00.TS07WSWR = "Y"; /* request for data switch*/

  else

    TS07W00.TS07WSWR = "N"; /* request for data switch*/

  end

end // end TS07751

// Verify data in the line
Function TS07752()
   /* ------------------------------------------------------------*/
   /* check for updates to line data*/
   /* ------------------------------------------------------------*/

  if (TS07M003.XCTCD[TS07WIXM] != TS07W02.XCTCD[TS07WIXM] /* code entered*/
   && TS07M003.XCTCD[TS07WIXM] != "?"                     /* and not popup request*/
   && TS07M003.XCTCD[TS07WIXM] != " ")                    /* and not spaces*/
    if (TS07M003.XCTCD[TS07WIXM] in XCTTBL.XCTCD /* code in table*/
     && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
       /* next sentence*/
    else
      TSWREC.XXXMODID = "752"; /* module id*/
      set TS07M003.XCTCD[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(241); /* indicate missing or invalid*/
    end
  end

  if (TS07M003.FY1FCTYC[TS07WIXM] != TS07W02.FY1FCTYC[TS07WIXM]
   && TS07M003.FY1FCTYC[TS07WIXM] != " ") /* and not spaces*/
    TS07S70(); /* validate factory code and supply country code*/
  end

  if (TS07M003.PK1QTY[TS07WIXM] != TS07W02.PK1QTY[TS07WIXM])
    if (TS07M003.PK1QTY[TS07WIXM] > 0)
       /* next sentence*/
    else
      TSWREC.XXXMODID = "752"; /* module id*/
      set TS07M003.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(256); /* quantity must be gt zero*/
    end
  else
    if (TS07M003.XCTCD[TS07WIXM] == TS07W02.XCTCD[TS07WIXM]
     && TS07M003.FY1FCTYC[TS07WIXM] == TS07W02.FY1FCTYC[TS07WIXM]
     && TS07M003.PC3POIDT[TS07WIXM] == TS07W02.PC3POIDT[TS07WIXM]
     && TS07M003.XUMCD[TS07WIXM] == TS07W02.XUMCD[TS07WIXM]
     && TS07M003.XPGCD[TS07WIXM] == TS07W02.XPGCD[TS07WIXM]
     && TS07M003.PC2INSEG[TS07WIXM] != TS07W02.PC2INSEG[TS07WIXM]
     && TS07M003.XOWCD[TS07WIXM] == TS07W02.XOWCD[TS07WIXM]
     && TS07M003.XQACD[TS07WIXM] == TS07W02.XQACD[TS07WIXM]
     && TS07M003.XDMCD[TS07WIXM] == TS07W02.XDMCD[TS07WIXM]
     && TS07M003.SY2CLRID[TS07WIXM] == TS07W02.SY2CLRID[TS07WIXM]
     && TS07M003.SY1STNBR[TS07WIXM] == TS07W02.SY1STNBR[TS07WIXM]
     && TS07M003.XGPCD[TS07WIXM] == TS07W02.XGPCD[TS07WIXM])
      /* next sentence*/
    else
      if (TS07M003.XGPCD[TS07WIXM] == " ")
         /* next sentence*/
      else
        if (TS07M003.PK1QTY[TS07WIXM] > 0)
           /* next sentence*/
        else
          TSWREC.XXXMODID = "752"; /* module id*/
          set TS07M003.PK1QTY[TS07WIXM] cursor, bold; /* highlight*/
          converseLib.validationFailed(256); /* must be entered*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Check for required fields to add product*/
   /* ------------------------------------------------------------*/

  if (TS07M003.PK1QTY[TS07WIXM] != 0) /* / if line was entered*/
    if (TS07M003.XGPCD[TS07WIXM] == " "    /* general product class*/
     || TS07M003.SY1STNBR[TS07WIXM] == " " /* style*/
     || TS07M003.SY2CLRID[TS07WIXM] == " " /* color*/
     || TS07M003.XDMCD[TS07WIXM] == " ")   /* dim*/

      if (TS07M003.XDMCD[TS07WIXM] == " ")
        set TS07M003.XDMCD[TS07WIXM] cursor, bold;
      end
      if (TS07M003.SY2CLRID[TS07WIXM] == " ")
        set TS07M003.SY2CLRID[TS07WIXM] cursor, bold;
      end
      if (TS07M003.SY1STNBR[TS07WIXM] == " ")
        set TS07M003.SY1STNBR[TS07WIXM] cursor, bold;
      end
      if (TS07M003.XGPCD[TS07WIXM] == " ")
        set TS07M003.XGPCD[TS07WIXM] cursor, bold;
      end

      TSWREC.XXXMODID = "752";
      converseLib.validationFailed(375); /* required field(s)*/
      return;
    end
  end


  if (TS07M003.PK1QTY[TS07WIXM] != 0) /* / if line was entered*/
    if (TS07M003.XCTCD[TS07WIXM] == TS07W02.XCTCD[TS07WIXM]
     && TS07M003.FY1FCTYC[TS07WIXM] == TS07W02.FY1FCTYC[TS07WIXM]
     && TS07M003.PC3POIDT[TS07WIXM] == TS07W02.PC3POIDT[TS07WIXM]
     && TS07M003.XUMCD[TS07WIXM] == TS07W02.XUMCD[TS07WIXM]
     && TS07M003.XPGCD[TS07WIXM] == TS07W02.XPGCD[TS07WIXM]
     && TS07M003.PC2INSEG[TS07WIXM] == TS07W02.PC2INSEG[TS07WIXM]
     && TS07M003.XOWCD[TS07WIXM] == TS07W02.XOWCD[TS07WIXM]
     && TS07M003.XQACD[TS07WIXM] == TS07W02.XQACD[TS07WIXM]
     && TS07M003.XDMCD[TS07WIXM] == TS07W02.XDMCD[TS07WIXM]
     && TS07M003.SY2CLRID[TS07WIXM] == TS07W02.SY2CLRID[TS07WIXM]
     && TS07M003.SY1STNBR[TS07WIXM] == TS07W02.SY1STNBR[TS07WIXM]
     && TS07M003.XGPCD[TS07WIXM] == TS07W02.XGPCD[TS07WIXM])
      return;
    end
  end
  if (TS07M003.PK1QTY[TS07WIXM] != 0) /* if line was entered*/

    /* ------------------------------------------------------------*/
     /* check for valid product against order or packing list*/
    /* ------------------------------------------------------------*/

    if (TSVREC.XDSCD != "1") /* if not direct ship*/
      /* ------------------------------------------------------------*/
       /* validate product against plist order*/
      /* ------------------------------------------------------------*/

      TS07W00.TS07WSWF = "N"; /* set found switch to no*/

      TS07S71(); /* select set dtrans.vnlpls01*/
      TS07S72(); /* fetch next dtrans.vnlpls01*/
      TS07S73(); /* close cursor dtrans.vnlpls01*/

    else
      /* ------------------------------------------------------------*/
       /* validate product against orders database*/
      /* ------------------------------------------------------------*/

      TS07W00.TS07WSWF = "N"; /* set found switch to no*/

      TS07S74(); /* select set dorder.vitem002*/
      TS07S75(); /* fetch next dorder.vitem002*/
      TS07S76(); /* close cursor dorder.vitem002*/

    end

    if (TS07W00.TS07WSWF == "N") /* if product not found*/

      TSWREC.XXXMODID = "752";
      set TS07M003.XGPCD[TS07WIXM] cursor, bold;
      set TS07M003.SY1STNBR[TS07WIXM] bold;
      set TS07M003.SY2CLRID[TS07WIXM] bold;
      set TS07M003.XDMCD[TS07WIXM] bold;
      TSWREC.XXXMODID = "752";
      converseLib.validationFailed(0239);

      return;
    else
      if (TSVREC.XDSCD != "1") /* if not direct ship*/
        if (TS07M003.XQACD[TS07WIXM] == " ")
          TS07M003.XQACD[TS07WIXM] = TSZREC.XQACD;
        end
        if (TS07M003.XOWCD[TS07WIXM] == " ")
          TS07M003.XOWCD[TS07WIXM] = TSZREC.XOWCD;
        end
        if (TS07M003.PC2INSEG[TS07WIXM] == " ")
          TS07M003.PC2INSEG[TS07WIXM] = TSZREC.PC2INSEG;
        end
        if (TS07M003.XPGCD[TS07WIXM] == " ")
          TS07M003.XPGCD[TS07WIXM] = TSZREC.XPGCD;
        end
        if (TS07M003.XUMCD[TS07WIXM] == " ")
          TS07M003.XUMCD[TS07WIXM] = TSZREC.XUMCD;
        end

        TS07754(); /* verify product information*/

      else
        if (TS07M003.XQACD[TS07WIXM] == " ")
          TS07M003.XQACD[TS07WIXM] = OP6REC.XQACD;
        end
        if (TS07M003.XOWCD[TS07WIXM] == " ")
          TS07M003.XOWCD[TS07WIXM] = OP6REC.XOWCD;
        end
        if (TS07M003.PC2INSEG[TS07WIXM] == " ")
          TS07M003.PC2INSEG[TS07WIXM] = OP6REC.PC2INSEG;
        end
        if (TS07M003.XPGCD[TS07WIXM] == " ")
          TS07M003.XPGCD[TS07WIXM] = OP6REC.XPGCD;
        end
        if (TS07M003.XUMCD[TS07WIXM] == " ")
          TS07M003.XUMCD[TS07WIXM] = OP6REC.XUMCD;
        end

        TS07754(); /* verify style information*/

      end
    end

    /* ------------------------------------------------------------*/
     /* validate sku and get internal/external sizes*/
    /* ------------------------------------------------------------*/

    TS07W00.XGPCD = TS07M003.XGPCD[TS07WIXM];
    TS07W00.SY1STNBR = TS07M003.SY1STNBR[TS07WIXM];
    TS07W00.SY2CLRID = TS07M003.SY2CLRID[TS07WIXM];
    TS07W00.XDMCD = TS07M003.XDMCD[TS07WIXM];
    TS07W00.XQACD = TS07M003.XQACD[TS07WIXM];
    if (TS07W00.PG3KEY != PG3REC.PG3KEY)

      TS07S05(); /* call pg1050*/

    end
    /* ------------------------------------------------------------*/
     /* validate entered size against valid size table*/
    /* ------------------------------------------------------------*/

    if (TS07M003.SY4IDDSC[TS07WIXM] > " "
     && TS07M003.SY4IDDSC[TS07WIXM] in PG3REC.SY4IDDSC)

      TS07W02.SY5SZID[TS07WIXM] = PG3REC.SY5SZID[sysVar.arrayIndex];

    else

      set TS07M003.SY4IDDSC[TS07WIXM] cursor, bold;
      converseLib.validationFailed(0127);
      TSWREC.XXXMODID = "752";
    end

  end

end // end TS07752

// Check for pop-up request
Function TS07753()
   /* ------------------------------------------------------------*/
   /* check for valid pop-up window request*/
   /* ------------------------------------------------------------*/

  if ("?" in TS07M003.XCTCD) /* if country code pop-up requested*/

    TS07W00.TS07WIXM = sysVar.arrayIndex; /* set index to line*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "         XCT - COUNTRY TABLE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXCT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if code was selected*/
      TS07M003.XCTCD[TS07WIXM] = XCTTBL.XCTCD[XX0XWPIX];
    else
      TS07M003.XCTCD[TS07WIXM] = TS07W02.XCTCD[TS07WIXM];
    end
    set TS07M003.XCTCD[TS07WIXM] cursor, bold; /* highlight*/

  end

  if (TS07M003.TS07MCCD == "?") /* if carton type pop-up requested*/
    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "         YNT - CARTON TYPE TABLE"; /* Heading*/
    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPYNT01(); /* Display the list*/
    end
    if (XX0XW02.XX0XWPIX > 0) /* if code was selected*/
      TS07M003.TS07MCCD = YNTTBL.YNTCD[XX0XWPIX]; /* Selected code*/
      TS07M003.YNTABRV = YNTTBL.YNTABRV[XX0XWPIX];
    else
      TS07M003.TS07MCCD = TS07W02.TS07MCCD; /* Restore prior code*/
    end
    set TS07M003.TS07MCCD cursor, bold; /* highlight*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TS07M003.XXXMODID = "753"; /* Module identification*/
  converseLib.validationFailed(176); /* Indicate press ENTER*/

end // end TS07753

// VALIDATE STYLE INFORMATION
Function TS07754()
   /* ------------------------------------------------------------------*/
   /* validate unit of measure code*/
   /* ------------------------------------------------------------------*/

  if (TSVREC.XDSCD != "1") /* not direct ship*/
    if (TS07M003.XUMCD[TS07WIXM] != TSZREC.XUMCD)
      if (TS07M003.XUMCD[TS07WIXM] in XUMTBL.XUMCD)
        set TS07M003.XUMCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
        TS07S78(); /* select unique style*/
        if (SQLCA.VAGen_SQLCODE == 0)
          if (TS07M003.XUMCD[TS07WIXM] != SY1REC.XUMCD)
            set TS07M003.XUMCD[TS07WIXM] cursor, bold;
            converseLib.validationFailed(378); /* uom for style incorrect*/
          end
        end
      else
        set TS07M003.XUMCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  else
    if (TS07M003.XUMCD[TS07WIXM] != OP6REC.XUMCD)
      if (TS07M003.XUMCD[TS07WIXM] in XUMTBL.XUMCD)
        set TS07M003.XUMCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
        TS07S78(); /* select style*/
        if (SQLCA.VAGen_SQLCODE == 0)
          if (TS07M003.XUMCD[TS07WIXM] != SY1REC.XUMCD)
            set TS07M003.XUMCD[TS07WIXM] cursor, bold;
            converseLib.validationFailed(378); /* uom for style incorrect*/
          end
        end
      else
        set TS07M003.XUMCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  end

   /* ------------------------------------------------------------------*/
   /* validate package code*/
   /* ------------------------------------------------------------------*/

  if (TSVREC.XDSCD != "1") /* not direct ship*/
    if (TS07M003.XPGCD[TS07WIXM] != TSZREC.XPGCD)
      if (TS07M003.XPGCD[TS07WIXM] in XPGTBL.XPGCD)
        set TS07M003.XPGCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
      else
        set TS07M003.XPGCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  else
    if (TS07M003.XPGCD[TS07WIXM] != OP6REC.XPGCD)
      if (TS07M003.XPGCD[TS07WIXM] in XPGTBL.XPGCD)
        set TS07M003.XPGCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
      else
        set TS07M003.XPGCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  end

   /* ------------------------------------------------------------------*/
   /* validate inseg code*/
   /* ------------------------------------------------------------------*/

  if (TSVREC.XDSCD != "1") /* not direct ship*/
    if (TS07M003.PC2INSEG[TS07WIXM] != TSZREC.PC2INSEG)
      TS07S77();
      if (sysVar.errorCode == "00000000"
       && SQLCA.VAGen_SQLCODE == 0)
        set TS07M003.PC2INSEG[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
      else
        set TS07M003.PC2INSEG[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  else
    if (TS07M003.PC2INSEG[TS07WIXM] != OP6REC.PC2INSEG)
      TS07S77();
      if (sysVar.errorCode == "00000000"
       && SQLCA.VAGen_SQLCODE == 0)
        set TS07M003.PC2INSEG[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
      else
        set TS07M003.PC2INSEG[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  end

   /* ------------------------------------------------------------------*/
   /* validate owner code*/
   /* ------------------------------------------------------------------*/

  if (TSVREC.XDSCD != "1") /* not direct ship*/
    if (TS07M003.XOWCD[TS07WIXM] != TSZREC.XOWCD)
      if (TS07M003.XOWCD[TS07WIXM] in XOWTBL.XOWCD)
        set TS07M003.XOWCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
      else
        set TS07M003.XOWCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  else
    if (TS07M003.XOWCD[TS07WIXM] != OP6REC.XOWCD)
      if (TS07M003.XOWCD[TS07WIXM] in XOWTBL.XOWCD)
        set TS07M003.XOWCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
      else
        set TS07M003.XOWCD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  end

   /* ------------------------------------------------------------------*/
   /* validate quality code*/
   /* ------------------------------------------------------------------*/

  if (TSVREC.XDSCD != "1") /* not direct ship*/
    if (TS07M003.XQACD[TS07WIXM] != TSZREC.XQACD)
      if (TS07M003.XQACD[TS07WIXM] in XQATBL.XQACD)
        set TS07M003.XQACD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
      else
        set TS07M003.XQACD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  else
    if (TS07M003.XQACD[TS07WIXM] != OP6REC.XQACD)
      if (TS07M003.XQACD[TS07WIXM] in XQATBL.XQACD)
        set TS07M003.XQACD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(376); /* warning style info diff*/
      else
        set TS07M003.XQACD[TS07WIXM] cursor, bold;
        converseLib.validationFailed(377); /* invalid style info*/
      end
    end
  end
end // end TS07754

// process valid input request
Function TS07760()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* save the current screen in temp storage before continuing*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TS07WSWU == "Y") /* changes were made to current screen*/

    TS07S33(); /* update temp storage*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* initialize style and carton weight/volume counters*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WQTY = 0; /* initial style chg qty*/
  TS07W00.TS07WCFT = 0; /* initial style chg volume*/
  TS07W00.TS07WLBS = 0; /* initial style chg weight*/

  TS07W00.TSOSHPQT = 0; /* initial crtn  chg qty*/
  TS07W00.TSYNCTFT = 0; /* initial crtn  chg volume*/
  TS07W00.TSYNCTLB = 0; /* initial crtn  chg weight*/

   /* ------------------------------------------------------------*/
   /* add product/sizes to dtrans.vnlpls01 table*/
   /* ------------------------------------------------------------*/

  TS07W00.XXXTSPAG = 1; /* set page count to one*/

  while (TS07W00.XXXTSPAG <= TS07W00.TA5TSQIX) /* while pages to update*/

    TS07S34(); /* obtain temp stor page*/

    TS07W00.TS07WIXM = 1; /* set line index to one*/

    while (TS07W00.TS07WIXM <= 13) /* until end of lines*/
      if (TS07W02.XGPCD[TS07WIXM] != "  ") /* if product line*/

        /* ------------------------------------------------------------*/
         /* update the all the products which have been split*/
        /* ------------------------------------------------------------*/

        TS07800(); /* update product/size rows*/

      end

      TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* increment line index*/

    end

    TS07W00.XXXTSPAG = TS07W00.XXXTSPAG + 1; /* increment page count*/

  end

   /* ------------------------------------------------------------*/
   /* update the carton for weight and volume changes*/
   /* ------------------------------------------------------------*/

  TS07810(); /* update carton*/

   /* ------------------------------------------------------------*/
   /* update the packing list for weight and volume changes*/
   /* ------------------------------------------------------------*/

  TS07820(); /* update packing list*/

   /* ------------------------------------------------------------*/
   /* update the shipment for weight and volume changes*/
   /* ------------------------------------------------------------*/

  TS07830(); /* update shipment*/

   /* ------------------------------------------------------------*/
   /* commit all table changes before leaving split carton mode*/
   /* ------------------------------------------------------------*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit all changes*/

   /* ------------------------------------------------------------*/
   /* setup for return to original data on first screen*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSWD = "1"; /* screen to be displayed switch*/
  TS07W00.TS07WSWR = "Y"; /* request for data switch*/

  TS07M001.TSVPLNBR = TS07W00.TSVPLNBR; /* old p/l number*/
  TS07M001.KUCCOID = TS07W00.KUCCOID; /* customer*/
  TS07M001.OP1CUOID = TS07W00.OP1CUOID; /* ord number*/
  TS07M001.OP1NORID = TS07W00.OP1NORID; /* ord number*/
  TS07M001.TS-PL-CRTN-NBR = TS07W02.TS-PL-CRTN-NBR; /* new ctn number*/
  TS07W00.XXXTSPAG = 1; /* reset to page one*/
  TSWREC.XXXMSGNO = 001; /* indicate successful add*/


end // end TS07760

// update products with changes
Function TS07800()
   /* ------------------------------------------------------------*/
   /* insert products added to new carton number*/
   /* ------------------------------------------------------------*/

  TS07801(); /* insert new product row*/

   /* ------------------------------------------------------------*/
   /* accumulate wgt/vol/qty changes for each product split*/
   /* ------------------------------------------------------------*/

  TS07W00.TSYNCTLB = TS07W00.TSYNCTLB + TS07W00.TS07WLBS; /* accum lbs*/
  TS07W00.TSYNCTFT = TS07W00.TSYNCTFT + TS07W00.TS07WCFT; /* accum vol*/
  TS07W00.TSOSHPQT = TS07W00.TSOSHPQT + TS07W00.TS07WQTY; /* accum qty*/

   /* ------------------------------------------------------------*/
   /* update shiprec if product qty changed*/
   /* ------------------------------------------------------------*/

  if (TS07W02.PK1QTY[TS07WIXM] != 0 /* if product has been chged*/
   && TS07W02.XDSCD != "1")         /* and not direct ship*/
    TS07802(); /* update shiprec tables*/
  end

end // end TS07800

// insert new row in product tbl
Function TS07801()
   /* ------------------------------------------------------------*/
   /* insert the new row in the dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSZREC.OP1PARTN = TS07W02.OP1PARTN; /* partition number*/
  TSZREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS07W02.OP1NORID; /* order id*/
  TSZREC.OP2LNINB = TS07W02.OP2LNINB[TS07WIXM]; /* line item nbr*/
  TSZREC.TSPCRTNB = TS07W02.TS-PL-CRTN-NBR; /* new carton number*/
  TSZREC.XGPCD = TS07W02.XGPCD[TS07WIXM]; /* gpc code*/
  TSZREC.SY1STNBR = TS07W02.SY1STNBR[TS07WIXM]; /* style*/
  TSZREC.SY2CLRID = TS07W02.SY2CLRID[TS07WIXM]; /* color*/
  TSZREC.XDMCD = TS07W02.XDMCD[TS07WIXM]; /* dimension*/
  TSZREC.XQACD = TS07W02.XQACD[TS07WIXM]; /* quality code*/
  TSZREC.XOWCD = TS07W02.XOWCD[TS07WIXM]; /* owner group*/
  TSZREC.PC2INSEG = TS07W02.PC2INSEG[TS07WIXM]; /* spec code*/
  TSZREC.XPGCD = TS07W02.XPGCD[TS07WIXM]; /* package type*/
  TSZREC.XUMCD = TS07W02.XUMCD[TS07WIXM]; /* unit of measure*/
  TSZREC.SY1UNPCS = TS07W02.SY1UNPCS[TS07WIXM]; /* units/case*/
  TSZREC.SY5SZID = TS07W02.SY5SZID[TS07WIXM]; /* size*/
  TSZREC.PC3POIDT = TS07W02.PC3POIDT[TS07WIXM]; /* p.o. id*/
  TSZREC.FY1FCTYC = TS07W02.FY1FCTYC[TS07WIXM]; /* factory*/
  TSZREC.XCTCD = TS07W02.XCTCD[TS07WIXM]; /* country*/

   /* ------------------------------------------------------------*/
   /* move in the new product quantity to be added*/
   /* ------------------------------------------------------------*/

  TSZREC.PK1QTY = TS07W02.PK1QTY[TS07WIXM]; /* add quantity*/

   /* ------------------------------------------------------------*/
   /* calculate the wgt/vol/qty changes for updating the cartons*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WQTY = TS07W02.PK1QTY[TS07WIXM]; /* add qty*/

  if (TS07W02.XDSCD != "1") /* if not a direct ship*/
    TSZREC.TSZXCPFL = "Y"; /* set xcp flag to yes*/
    TS07S60(); /* get product weight*/
    sysVar.arrayIndex = TS07W02.SY5SZID[TS07WIXM]; /* use size*/
    TS07W00.TS07WLBS = PKNREC.SYGSZWT[sysVar.arrayIndex] * TS07W00.TS07WQTY;
  end

  TS07W00.TS07WCFT = 0; /* no volume changes*/

   /* ------------------------------------------------------------*/
   /* get system date and time for insert*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system date and time*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS6REC.TS6TASK = "A "; /* insert row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "801"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "801"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT TABLE ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07801

// update shiprec itm ordr hdr
Function TS07802()
   /* ------------------------------------------------------------*/
   /* update shiprec for quantity changes*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WSX1 = 1; /* initialize schedule index*/
  TS07W00.TS07WSWE = "N"; /* set shiprec item found to no*/

  TS07W00.TS07WDIF = TS07M003.PK1QTY[TS07WIXM] - TS07W02.TS07WQTY[TS07WIXM];

  while (TS07W00.TS07WSX1 <= TS07W00.TS07WSXT /* until end of scheds*/
   && TS07W00.TS07WSWE == "N") /* or all items updated*/

    TS07S80(); /* select shiprec item*/

    if (TS07W00.TS07WSWE == "Y") /* if shiprec item found*/

      TS07S81(); /* get shiprec header*/

      TS07S82(); /* get shiprec order*/

      TS07S83(); /* create shiprec xcp rcds*/

    end

    TS07W00.TS07WSX1 = TS07W00.TS07WSX1 + 1;

  end

  if (TS07W00.TS07WSWE == "N") /* no valid shiprec items updated*/
    if (TS07W01.XWHCD == "22") /* dlvrusa-if airborne whse*/
      /* next sentence*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "802"; /* module id*/
      TSWREC.XXXMSGNO = 231; /* indicate unable to update*/
      exit stack;
    end
  end

end // end TS07802

// insert ctn for wght & vol
Function TS07810()
   /* ------------------------------------------------------------*/
   /* insert the carton row with new data from any changes.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* clear row storage area*/
  set TS4REC empty; /* clear i/o storage area*/

  TSYREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSYREC.OP1PARTN = TS07W02.OP1PARTN; /* partitiion nbr*/
  TSYREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS07W02.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TS07W02.TS-PL-CRTN-NBR; /* new carton number*/

   /* ------------------------------------------------------------*/
   /* insert carton code and dimensions into the row*/
   /* ------------------------------------------------------------*/

  TS07W00.TS07WCCD = TS07M003.TS07MCCD; /* convert carton code*/
  TSYREC.YNTCD = TS07W00.TS07WCCD; /* carton code*/

   /* ------------------------------------------------------------*/
   /* move the new new weight and volume from header to the row*/
   /* ------------------------------------------------------------*/

  TSYREC.TSYNCTFT = TS07M003.TSYNCTFT; /* volume from header*/
  TSYREC.TSYNCTLB = TS07M003.TSYNCTLB; /* weight from header*/

   /* ------------------------------------------------------------*/
   /* add the product changes calculated in ts07800*/
   /* ------------------------------------------------------------*/

  if (TS07W00.TSOSHPQT != 0 /* if any qty chgs for products*/
   && TS07W02.XDSCD != "1") /* and not direct ship*/
    TSYREC.TSZXCPFL = "Y"; /* set pick xcpt to yes*/
  end

  TSYREC.TSOSHPQT = TSYREC.TSOSHPQT + TS07W00.TSOSHPQT; /* add prod chgs*/
  TSYREC.TSYNCTLB = TSYREC.TSYNCTLB + TS07W00.TSYNCTLB; /* add prod chgs*/
  TSYREC.TSYNCTFT = TSYREC.TSYNCTFT + TS07W00.TSYNCTFT; /* add prod chgs*/

  if (TSYREC.TSOSHPQT < 0) /* if less than zero*/
    TSYREC.TSOSHPQT = 0; /* show as zero*/
  end

  if (TSYREC.TSYNCTLB < 0) /* if less than zero*/
    TSYREC.TSYNCTLB = 0; /* show as zero*/
  end

  if (TSYREC.TSYNCTFT < 0) /* if less than zero*/
    TSYREC.TSYNCTFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* calculate the total change in ctn weight and vol for p/l*/
   /* ------------------------------------------------------------*/

  TS07W00.TSOSHPQT = 0 - TSYREC.TSOSHPQT; /* tot qty chgs for p/l*/
  TS07W00.TSYNCTLB = 0 - TSYREC.TSYNCTLB; /* tot wgt chgs for p/l*/
  TS07W00.TSYNCTFT = 0 - TSYREC.TSYNCTFT; /* tot vol chgs for p/l*/

   /* ------------------------------------------------------------*/
   /* get system date and time for insert*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSYREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSYREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS4REC.TS4TASK = "A "; /* Function code*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert carton*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == -803) /* row is a duplicate*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W02.TS-PL-CRTN-NBR = TS07W02.TS-PL-CRTN-NBR + 1; /* use next ctn #*/
      TS07M003.TS-PL-CRTN-NBR = TS07W02.TS-PL-CRTN-NBR; /* display new nbr*/

      TSWREC.XXXMODID = "810"; /* module identification*/
      set TS07M003.TS-PL-CRTN-NBR bold; /* highlight*/
      converseLib.validationFailed(238); /* indicate duplicate ctn nbr*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "810"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource unavailable*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "INSERT CARTON TO NEW NUMBER     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07810

// update p/l for wght & vol chgs
Function TS07820()
   /* ------------------------------------------------------------*/
   /* Select packing list to update with new weights & measures*/
   /* ------------------------------------------------------------*/

  TS07821(); /* Select unique packing list*/

   /* ------------------------------------------------------------*/
   /* update packing list with new weight and measures*/
   /* ------------------------------------------------------------*/

  TS07822(); /* update packing list row*/

end // end TS07820

// select p/l to update weight
Function TS07821()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS07W02.TSVPLNBR; /* p/l number*/
  TSVREC.OP1CUOID = TS07W02.OP1CUOID; /* order number*/
  TSVREC.OP1NORID = TS07W02.OP1NORID; /* order id*/

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "821"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "821"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07821

// update p/l to subtract weight
Function TS07822()
   /* ------------------------------------------------------------*/
   /* update the packing list for cartons which have had product*/
   /* changes.*/
   /* ------------------------------------------------------------*/

  TSVREC.TSISHPQT = TSVREC.TSISHPQT - TS07W00.TSOSHPQT; /* saved qty*/
  TSVREC.TSVNPLLB = TSVREC.TSVNPLLB - TS07W00.TSYNCTLB; /* saved wgt*/
  TSVREC.TSVNPLFT = TSVREC.TSVNPLFT - TS07W00.TSYNCTFT; /* saved vol*/

  if (TSVREC.TSISHPQT < 0) /* if less than zero*/
    TSVREC.TSISHPQT = 0; /* show as zero*/
  end

  if (TSVREC.TSVNPLLB < 0) /* if less than zero*/
    TSVREC.TSVNPLLB = 0; /* show as zero*/
  end

  if (TSVREC.TSVNPLFT < 0) /* if less than zero*/
    TSVREC.TSVNPLFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* get system date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "822"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "822"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UDPATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07822

// update shipment for wgt chgs
Function TS07830()
  if (TS07W02.TSFSHPID != 0) /* if p/l has a shipment number*/
     /* next sentence*/
  else
    return; /* return to previous process*/
  end
   /* ------------------------------------------------------------*/
   /* Select shipment to update with new weights & measures*/
   /* ------------------------------------------------------------*/

  TS07831(); /* Select unique shipment*/

   /* ------------------------------------------------------------*/
   /* update shipment with new weight and measures*/
   /* ------------------------------------------------------------*/

  TS07832(); /* update shipment row*/

end // end TS07830

// select shipment to update wgt
Function TS07831()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSUREC empty; /* Clear row storage area*/

  TSUREC.KUCCOID = TS07W02.KUCCOID; /* customer*/
  TSUREC.TSFSHPID = TS07W02.TSFSHPID; /* ship id*/

  try
    call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "831"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "831"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07831

// update shipment for weight
Function TS07832()
   /* ------------------------------------------------------------*/
   /* update the shipment for cartons which have had product*/
   /* changes.*/
   /* ------------------------------------------------------------*/

  TSUREC.TSUSHPQT = TSUREC.TSUSHPQT - TS07W00.TSOSHPQT; /* saved qty*/
  TSUREC.TSUNSPLB = TSUREC.TSUNSPLB - TS07W00.TSYNCTLB; /* saved wgt*/
  TSUREC.TSUNSPFT = TSUREC.TSUNSPFT - TS07W00.TSYNCTFT; /* saved vol*/

  if (TSUREC.TSUSHPQT < 0) /* if less than zero*/
    TSUREC.TSUSHPQT = 0; /* show as zero*/
  end

  if (TSUREC.TSUNSPLB < 0) /* if less than zero*/
    TSUREC.TSUNSPLB = 0; /* show as zero*/
  end

  if (TSUREC.TSUNSPFT < 0) /* if less than zero*/
    TSUREC.TSUNSPFT = 0; /* show as zero*/
  end

   /* ------------------------------------------------------------*/
   /* get system date and time for update*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get system time, date*/

  TSUREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSUREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  try
    call "IO4690" ("U ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "832"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "832"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UDPATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07832

// TO GET THE DELIVERY NOTE NUM
Function TS07S-GET-DN-ITM()
   /* **********************************************************************/
   /* NEW STATEMENT GROUP CREATED FOR NSC-USA PROJECT                    **/
   /* **********************************************************************/

  set VOPPKH05 empty;

  VOPPKH05.XWHCD = SR3REC.XWHCD; /* warehouse*/
  VOPPKH05.NI-CUST-ORD-ID = SR3REC.OP1CUOID; /* goal order nbr*/
  VOPPKH05.NI-NIKE-ORD-ID = SR3REC.OP1NORID; /* order id*/

  try
    call "VOPPKH05" ("SX", SQLCA, VOPPKH05) {isNoRefresh = yes, isExternal = yes};
  end /* Select  row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    SR3REC.OP1CUOID = VOPPKH05.OP1CUOID; /* get the OTP delivery*/
    SR3REC.OP1NORID = VOPPKH05.OP1NORID; /* get the OTP DN sub*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    TS07W00.TS07WSWR = "Y"; /* request for data switch*/

    TSWREC.XXXMODID = "S21"; /* module identification*/
    TSWREC.XXXMSGNO = 458; /* DELIVERY NOTE NOT FOUND*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CORRESPONDING DLVRY NOTE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOPPKH05"; /* Table view name*/
  TA1REC.TA1TBLKE = VOPPKH05.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S-GET-DN-ITM

// TO GET THE DELIVERY NOTE NUM
Function TS07S-GET-DN-ORD()
   /* **********************************************************************/
   /* NEW STATEMENT GROUP CREATED FOR NSC-USA PROJECT                    **/
   /* **********************************************************************/

  set VOPPKH05 empty;

  VOPPKH05.XWHCD = SR2REC.XWHCD; /* warehouse*/
  VOPPKH05.NI-CUST-ORD-ID = SR2REC.OP1CUOID; /* goal order nbr*/
  VOPPKH05.NI-NIKE-ORD-ID = SR2REC.OP1NORID; /* order id*/

  try
    call "VOPPKH05" ("SX", SQLCA, VOPPKH05) {isNoRefresh = yes, isExternal = yes};
  end /* Select  row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    SR2REC.OP1CUOID = VOPPKH05.OP1CUOID; /* get the OTP delivery*/
    SR2REC.OP1NORID = VOPPKH05.OP1NORID; /* get the OTP DN sub id*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    TS07W00.TS07WSWR = "Y"; /* request for data switch*/

    TSWREC.XXXMODID = "S21"; /* module identification*/
    TSWREC.XXXMSGNO = 458; /* DELIVERY NOTE NOT FOUND*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CORRESPONDING DLVRY NOTE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VOPPKH05"; /* Table view name*/
  TA1REC.TA1TBLKE = VOPPKH05.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S-GET-DN-ORD

// purge temporary storage page
Function TS07S01()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TS07W01 empty;

  TS07W00.TS07WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Reset current page number*/
  TS07W00.TA5TSQIX = 0; /* Reset highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TS07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S01

// add temporary storage page
Function TS07S02()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS07W01.XXXTSLEN = TS07W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS07W01 empty; /* M001 display storage*/

    TS07W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S02

// Update temporary storage page
Function TS07S03()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S03"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S03

// Read temporary storage page
Function TS07S04()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS07W01.XXXTSLEN = TS07W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = TS07W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S04

// get external size desc
Function TS07S05()
   /* ---------------------------------------------------------*/
   /* Initialize the record and format the key*/
   /* ---------------------------------------------------------*/

  set PG3REC empty;

  PG3REC.XGPCD = TS07W00.XGPCD;
  PG3REC.SY1STNBR = TS07W00.SY1STNBR;
  PG3REC.SY2CLRID = TS07W00.SY2CLRID;
  PG3REC.XDMCD = TS07W00.XDMCD;
  PG3REC.XQACD = TS07W00.XQACD;
  PG3REC.PG3FUNCD = "PC";
  PG3REC.PG3DATFM = "N";

  XSPG301(); /* Get valid sizes*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  exit stack;

end // end TS07S05

// select carton data
Function TS07S06()
   /* ------------------------------------------------------------*/
   /* select unique DPICK.VCRTN001 table record.*/
   /* ------------------------------------------------------------*/

  set PKLREC empty;

  PKLREC.PKLCTNCD = TS07W01.PKLCTNCD; /* carton type code*/
  PKLREC.XXXSTAT = "A"; /* active status*/

  try
    call "IO4730" ("S ", SQLCA, PKLREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S06"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE VCRTN001 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCRTN001"; /* Table view name*/
  TA1REC.TA1TBLKE = PKLREC.PKLKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S06

// validate factory code
Function TS07S07()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Clear row storage area*/

  FY1REC.XGPCD = TS07W01.XGPCD[TS07WIXM]; /* GPC code*/
  FY1REC.FY1FCTYC = TS07M001.FY1FCTYC[TS07WIXM]; /* factory code*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      TS07M001.XCTCD[TS07WIXM] = FY1REC.XCTCD; /* move country*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TSWREC.XXXMODID = "S07"; /* module identification*/
      set TS07M001.FY1FCTYC[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(166);

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VALIDATE FACTORY CODE      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S07

// select set dship.vsrord01
Function TS07S08()
   /* ------------------------------------------------------------*/
   /* select set dship.vsrord01*/
   /* ------------------------------------------------------------*/

  set SR2REC empty;

  SR2REC.XWHCD = TS07W01.XWHCD;
  SR2REC.OP1CUOID = TS07W01.OP1CUOID;
  SR2REC.OP1NORID = TS07W01.OP1NORID;

   /* DLVRUSA CHANGES BEGIN SBHARA 05/14/01*/
  if (TS07W01.XWHCD == "04" /* MEMPHIS FOOT -SAP*/
   || TS07W01.XWHCD == "07" /* WILSONVILLE  -SAP*/
   || TS07W01.XWHCD == "09" /* PROMO        -SAP*/
   || TS07W01.XWHCD == "51") /* MEMPHIS APPL -SAP*/
    TS07S-GET-DN-ORD(); /* /GET THE CORRESPONDING DELIVERY*/
                                  /* NUMBER*/
  end
   /* DLVRUSA CHANGES END   SBHARA 05/14/01*/

  SR2REC.OP1NTMAL = -1;
  SR2REC.PK1PKSCH = -1;

  call "IO0800" ("SS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S08"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VSRORD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTSHIP  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S08

// fetch next dship.vsrord01
Function TS07S09()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from dship.vsrord01 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("SN", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS07W00.TS07WSWA = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S09"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S09

// select unique dship.vsrhdr01
Function TS07S10()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the dship.vsrhdr01 table.*/
   /* ------------------------------------------------------------*/

  set SR1REC empty; /* Clear row storage area*/

  SR1REC.XWHCD = SR2REC.XWHCD; /* warehouse*/
  SR1REC.PK1PKSCH = SR2REC.PK1PKSCH; /* pick schedule number*/

  try
    call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      SR1REC.SR1PKDT = 999999; /* pick sched date*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S10

// close cursor dship.vsrord01
Function TS07S11()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0800" ("CS", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S11"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S11

// select unique DPICK.VPKSTY01
Function TS07S12()
   /* ------------------------------------------------------------*/
   /* select unique row from DPICK.VPKSTY01 table.*/
   /* ------------------------------------------------------------*/
  if (PKNREC.PKNKEY == " " /* if pick style key is empty*/
   || PKNREC.PKNKEY != TS07W00.PKNKEY) /* or not already accessed*/
    TS07W00.XGPCD = TS07W01.XGPCD[TS07WIXM];
    TS07W00.SY1STNBR = TS07W01.SY1STNBR[TS07WIXM];
    TS07W00.SY2CLRID = TS07W01.SY2CLRID[TS07WIXM];
    TS07W00.XDMCD = TS07W01.XDMCD[TS07WIXM];
    set PKNREC empty;
    PKNREC.PKNKEY = TS07W00.PKNKEY;
  else

    return; /* return to previous process*/

  end

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* select*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      TS07W00.TS07WIXG = 1; /* initialize index*/
      while (TS07W00.TS07WIXG <= 40) /* until end of sizes*/
        if (PKNREC.SYGSZWT[TS07WIXG] == 0) /* in no size weight*/
          PKNREC.SYGSZWT[TS07WIXG] = PKNREC.SY1AVEWT; /* use default*/
        end
        TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* increment index*/
      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "S12"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE STYLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S12

// select unique dship.vsritm01
Function TS07S13()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the DSHIP.VSRITM01 table.*/
   /* ------------------------------------------------------------*/

  set SR3REC empty; /* Clear row storage area*/

  SR3REC.XWHCD = TS07W01.XWHCD; /* warehouse*/
  SR3REC.PK1PKSCH = TS07W00.TS07WSRS[TS07WSX1]; /* pick sched nbr*/
  SR3REC.OP1CUOID = TS07W01.OP1CUOID; /* order nbr*/
  SR3REC.OP1NORID = TS07W01.OP1NORID; /* order id*/
  SR3REC.OP2LNINB = TS07W01.OP2LNINB[TS07WIXM]; /* line itm nbr*/
   /* dlvrusa changes begin sbhara 05/14/01*/
  if (TS07W01.XWHCD == "04" /* MEMPHIS FOOT -SAP*/
   || TS07W01.XWHCD == "07" /* WILSONVILLE  -SAP*/
   || TS07W01.XWHCD == "09" /* PROMO        -SAP*/
   || TS07W01.XWHCD == "51") /* MEMPHIS APPL -SAP*/
    TS07S-GET-DN-ITM(); /* to retrieve the corresponding*/
                                  /* delivery #*/
    SR3REC.XGPCD = TS07W01.XGPCD; /* GPC CODE*/
    SR3REC.SY1STNBR = TS07W01.SY1STNBR; /* style number*/
    SR3REC.SY2CLRID = TS07W01.SY2CLRID; /* color number*/
    SR3REC.XDMCD = TS07W01.XDMCD; /* dimension code*/
    SR3REC.XQACD = TS07W01.XQACD; /* quality code*/
    SR3REC.PC2INSEG = TS07W01.PC2INSEG; /* iseg code*/
    SR3REC.XPGCD = TS07W01.XPGCD; /* package type code*/
    SR3REC.XUMCD = TS07W01.XUMCD; /* unit of measure code*/
    SR3REC.XOWCD = TS07W01.XOWCD; /* owner group code*/

    try
      call "SR1100" ("SI", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select line itm #*/

    /* ------------------------------------------------------------*/
    /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      end
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back all changes*/

        TS07W00.TS07WSWR = "Y"; /* request for data switch*/

        TSWREC.XXXMODID = "013"; /* module identification*/
        TSWREC.XXXMSGNO = 457; /* SHIPREC NOT FOUND*/

        exit stack;
      end

    end

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TSWREC.XXXMODID = "S13"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      if (sysVar.errorCode != "00000000") /* Call UNsuccessful*/
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "OBTAIN LINE NUMBER  TASK TYPE \"SI\"";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
        TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
        TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        exit stack; /* Exit to display map*/
      end
    end
  end

   /* dlvrusa changes begin sbhara 05/14/01*/

  try
    call "SR1100" ("S ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      TS07W00.TS07WSWE = "Y"; /* shiprec item found*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S13"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S13

// select unique dship.vsrhdr01
Function TS07S14()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the dship.vsrhdr01 table.*/
   /* ------------------------------------------------------------*/

  set SR1REC empty; /* Clear row storage area*/

  SR1REC.XWHCD = SR3REC.XWHCD; /* warehouse*/
  SR1REC.PK1PKSCH = SR3REC.PK1PKSCH; /* pick schedule number*/

  try
    call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S14"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S14

// select unique dship.vsrord01
Function TS07S15()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the DSHIP.VSRORD01 table.*/
   /* ------------------------------------------------------------*/

  set SR2REC empty; /* Clear row storage area*/

  SR2REC.XWHCD = SR3REC.XWHCD; /* warehouse*/
  SR2REC.PK1PKSCH = SR3REC.PK1PKSCH; /* pick schedule number*/
  SR2REC.OP1CUOID = SR3REC.OP1CUOID; /* order nbr*/
  SR2REC.OP1NORID = SR3REC.OP1NORID; /* order id*/
  SR2REC.OP1NTMAL = SR3REC.OP1NTMAL; /* times allocated*/

  try
    call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S15"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S15

// create DSHIP.VSRXCP01 rows
Function TS07S16()

  TS07W00.TS07WTOT = 0; /* initialize total exception changes*/

  sysVar.arrayIndex = 1;
                                   /* start at first bucket in shiprec item*/

  if (TS07W01.SY5SZID[TS07WIXM] in SR3REC.SY5SZID from sysVar.arrayIndex)
    /* ------------------------------------------------------------*/
     /* size has been found at least once in the shiprec item.*/
    /* ------------------------------------------------------------*/

    set SR5REC empty; /* initialize shiprec exception record*/

    TS07S17(); /* get life cycle for xcptn record*/

    if (TS07W00.TS07WDIF > 0) /* if units to change is positive*/
      /* ------------------------------------------------------------*/
       /* if the quantity change is positive -*/
       /* if size occurs only once in item record use area,zone,loc*/
         /* from the single occurrence of the size.*/
       /* if size occurs more than once in item record use the*/
         /* the default area,zone,location from dpick.vpkctl01 table.*/
       /* only one exception record is created for overages.*/
      /* ------------------------------------------------------------*/

      sysVar.arrayIndex = sysVar.arrayIndex + 1; /* check for another occurence of size*/

      if (TS07W01.SY5SZID[TS07WIXM] in SR3REC.SY5SZID from sysVar.arrayIndex)
        /* ----------------------------------------------------------*/
         /* size has been found more than once in shiprec item*/
         /* use the default location to find the occurrence to update.*/
         /* if not found add default location to the item row.*/
        /* ----------------------------------------------------------*/

        TS07S18(); /* get default area zones for size*/

        sysVar.arrayIndex = 1; /* find size with default location*/
        TS07W00.TS07WSWG = "N"; /* initialize loc. found flag*/
        while (sysVar.arrayIndex <= SR3REC.SR3NBRSZ /* until end of sizes*/
         && TS07W00.TS07WSWG == "N") /* or location found*/
          if (TS07W01.SY5SZID[TS07WIXM] == SR3REC.SY5SZID[sysVar.arrayIndex]
           && PKDREC.PKDDFSYA == SR3REC.XARCD[sysVar.arrayIndex]
           && PKDREC.PKDDFSYZ == SR3REC.SL4ZONE[sysVar.arrayIndex]
           && PKDREC.PKDDFSYL == SR3REC.SL5LOCTN[sysVar.arrayIndex])
            TS07W00.TS07WSWG = "Y"; /* location found*/
          else
            sysVar.arrayIndex = sysVar.arrayIndex + 1;
          end
        end

        if (sysVar.arrayIndex <= SR3REC.SR3NBRSZ) /* found default size*/
          /* ----------------------------------------------------*/
           /* default location found - update the occurrence*/
          /* ----------------------------------------------------*/
           /* next sentence*/
        else
          /* ----------------------------------------------------*/
           /* default location not found add a new occurrence*/
          /* ----------------------------------------------------*/
          SR3REC.SR3NBRSZ = SR3REC.SR3NBRSZ + 1; /* add new item*/
          sysVar.arrayIndex = SR3REC.SR3NBRSZ;
          SR3REC.SY5SZID[sysVar.arrayIndex] = TS07W01.SY5SZID[TS07WIXM];
          SR3REC.XARCD[sysVar.arrayIndex] = PKDREC.PKDDFSYA;
          SR3REC.SL4ZONE[sysVar.arrayIndex] = PKDREC.PKDDFSYZ;
          SR3REC.SL5LOCTN[sysVar.arrayIndex] = PKDREC.PKDDFSYL;
        end

      else
        /* ----------------------------------------------------------*/
         /* size occured only once in shiprec so reset ezetst back*/
         /* to the original occurrence of size, and use orig location*/
        /* ----------------------------------------------------------*/
        if (TS07W01.SY5SZID[TS07WIXM] in SR3REC.SY5SZID from 1)
          /* --------------------------------------------------------*/
           /* sets the ezetst back to the first occur of size match*/
          /* --------------------------------------------------------*/
           /* next sentence*/
        end
      end

      /* ------------------------------------------------------------*/
       /* compute the exception quantity and create an exception rcd*/
      /* ------------------------------------------------------------*/

      TS07W00.TS07WQTY = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* hld orig qty*/

      SR3REC.SR3QTYSH[sysVar.arrayIndex] = SR3REC.SR3QTYSH[sysVar.arrayIndex] + TS07WDIF;

      SR5REC.SY5SZID = SR3REC.SY5SZID[sysVar.arrayIndex]; /* size id*/
      SR5REC.SR3ARZN = SR3REC.SR3ARZN[sysVar.arrayIndex]; /* area zone*/
      SR5REC.SL5LOCTN = SR3REC.SL5LOCTN[sysVar.arrayIndex]; /* location*/
      SR5REC.SR3QTYAL = SR3REC.SR3QTYAL[sysVar.arrayIndex]; /* alloc qty*/
      SR5REC.SR3QTYSH = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* ship  qty*/

      SR5REC.SR5QTYXC = TS07W00.TS07WQTY - SR3REC.SR3QTYSH[sysVar.arrayIndex];
      TS07W00.TS07WTOT = SR5REC.SR5QTYXC; /* save total xcp chgs*/

      TS07S19(); /* insert shiprec exception row*/

    else
      /* ------------------------------------------------------------*/
       /* if the quantity change is negative -*/
       /* create an exception record for each size bucket in shiprec*/
       /* item which contains a matching size until the chg amount*/
       /* is reduced to zero.  if change amount remains after all*/
       /* matching size items have been updated get the next schedule*/
       /* and update it until the change amount is zero.*/
      /* ------------------------------------------------------------*/

      while (sysVar.arrayIndex <= SR3REC.SR3NBRSZ /* until end of sizes*/
       && TS07W00.TS07WDIF != 0) /* or no more units to change*/
        /* ------------------------------------------------------------*/
         /* compute the exception quantity and create the exception rcd*/
        /* ------------------------------------------------------------*/
        TS07W00.TS07WQTY = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* hld orig qty*/

        SR3REC.SR3QTYSH[sysVar.arrayIndex] = SR3REC.SR3QTYSH[sysVar.arrayIndex] + TS07WDIF;

        if (SR3REC.SR3QTYSH[sysVar.arrayIndex] < 0) /* if negative ship qty*/
          TS07W00.TS07WDIF = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* move to diff*/
          SR3REC.SR3QTYSH[sysVar.arrayIndex] = 0; /* zero out ship qty in item*/
        else
          TS07W00.TS07WDIF = 0; /* zero out because we're done*/
        end

        SR5REC.SY5SZID = SR3REC.SY5SZID[sysVar.arrayIndex]; /* size id*/
        SR5REC.SR3ARZN = SR3REC.SR3ARZN[sysVar.arrayIndex]; /* area zone*/
        SR5REC.SL5LOCTN = SR3REC.SL5LOCTN[sysVar.arrayIndex]; /* location*/
        SR5REC.SR3QTYAL = SR3REC.SR3QTYAL[sysVar.arrayIndex]; /* alloc qty*/
        SR5REC.SR3QTYSH = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* ship  qty*/

        SR5REC.SR5QTYXC = TS07W00.TS07WQTY - SR3REC.SR3QTYSH[sysVar.arrayIndex];
        TS07W00.TS07WTOT = TS07W00.TS07WTOT + SR5REC.SR5QTYXC; /* save*/

        TS07S19(); /* insert shiprec exception row*/

        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* find next size match in shiprec item*/

        if (TS07W01.SY5SZID[TS07WIXM] in SR3REC.SY5SZID from sysVar.arrayIndex)
          /* ------------------------------------------------------------*/
           /* found another size to update with quantity changes*/
          /* ------------------------------------------------------------*/
           /* next sentence*/
        else

          sysVar.arrayIndex = 99999; /* no more sizes in item recd*/

        end

      end

      if (TS07W00.TS07WDIF != 0) /* if more updates needed*/

        TS07W00.TS07WSWE = "N"; /* get next sched to update*/

      end

    end
    /* ------------------------------------------------------------*/
     /* calculate new total shipped amounts for shiprec ord,itm,hdr*/
    /* ------------------------------------------------------------*/

    /* calculate new total shipped amount*/
    TS07W00.TS07WAMT = SR3REC.OP2AUPRC * TS07W00.TS07WTOT; /* itm amt*/
    SR2REC.SR2DLRAM = SR2REC.SR2DLRAM - TS07W00.TS07WAMT; /* ord amt*/
    SR1REC.SR1DLRAM = SR1REC.SR1DLRAM - TS07W00.TS07WAMT; /* hdr amt*/
    /* calculate total shipped quantity*/
    SR3REC.SR3TQTSH = SR3REC.SR3TQTSH - TS07W00.TS07WTOT; /* itm tot*/
    SR2REC.SR2QTYSH = SR2REC.SR2QTYSH - TS07W00.TS07WTOT; /* ord tot*/
    SR1REC.SR1QTYSH = SR1REC.SR1QTYSH - TS07W00.TS07WTOT; /* hdr tot*/

    TS07S20(); /* update shiprec item*/

    TS07S21(); /* update shiprec order*/

    TS07S22(); /* update shiprec header*/

  else

    if (TS07W00.TS07WSWD == "4") /* if add carton mode*/
      /* ------------------------------------------------------------*/
       /* new size must be added to shiprec exception row*/
      /* ------------------------------------------------------------*/

      set SR5REC empty; /* initialize shiprec exception record*/

      TS07S17(); /* get life cycle for xcptn record*/

      TS07S18(); /* get default area zone for size*/

      sysVar.arrayIndex = 1; /* find size with default location*/
      TS07W00.TS07WSWG = "N"; /* initialize loc. found flag*/
      while (sysVar.arrayIndex <= SR3REC.SR3NBRSZ /* until end of sizes*/
       && TS07W00.TS07WSWG == "N") /* or location found*/
        if (TS07W01.SY5SZID[TS07WIXM] == SR3REC.SY5SZID[sysVar.arrayIndex]
         && PKDREC.PKDDFSYA == SR3REC.XARCD[sysVar.arrayIndex]
         && PKDREC.PKDDFSYZ == SR3REC.SL4ZONE[sysVar.arrayIndex]
         && PKDREC.PKDDFSYL == SR3REC.SL5LOCTN[sysVar.arrayIndex])
          TS07W00.TS07WSWG = "Y"; /* location found*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end

      if (sysVar.arrayIndex <= SR3REC.SR3NBRSZ) /* found default size*/
        /* ----------------------------------------------------*/
         /* default location found - update the occurrence*/
        /* ----------------------------------------------------*/
         /* next sentence*/
      else
        /* ----------------------------------------------------*/
         /* default location not found add a new occurrence*/
        /* ----------------------------------------------------*/
        SR3REC.SR3NBRSZ = SR3REC.SR3NBRSZ + 1; /* add new item*/
        sysVar.arrayIndex = SR3REC.SR3NBRSZ;
        SR3REC.SY5SZID[sysVar.arrayIndex] = TS07W01.SY5SZID[TS07WIXM];
        SR3REC.XARCD[sysVar.arrayIndex] = PKDREC.PKDDFSYA;
        SR3REC.SL4ZONE[sysVar.arrayIndex] = PKDREC.PKDDFSYZ;
        SR3REC.SL5LOCTN[sysVar.arrayIndex] = PKDREC.PKDDFSYL;
      end

      /* ------------------------------------------------------------*/
       /* compute the exception quantity and create an exception rcd*/
      /* ------------------------------------------------------------*/

      TS07W00.TS07WQTY = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* hld orig qty*/

      SR3REC.SR3QTYSH[sysVar.arrayIndex] = SR3REC.SR3QTYSH[sysVar.arrayIndex] + TS07WDIF;

      SR5REC.SY5SZID = SR3REC.SY5SZID[sysVar.arrayIndex]; /* size id*/
      SR5REC.SR3ARZN = SR3REC.SR3ARZN[sysVar.arrayIndex]; /* area zone*/
      SR5REC.SL5LOCTN = SR3REC.SL5LOCTN[sysVar.arrayIndex]; /* location*/
      SR5REC.SR3QTYAL = SR3REC.SR3QTYAL[sysVar.arrayIndex]; /* alloc qty*/
      SR5REC.SR3QTYSH = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* ship  qty*/

      SR5REC.SR5QTYXC = TS07W00.TS07WQTY - SR3REC.SR3QTYSH[sysVar.arrayIndex];
      TS07W00.TS07WTOT = SR5REC.SR5QTYXC; /* save total xcp chgs*/

      TS07S19(); /* insert shiprec exception row*/

      /* ------------------------------------------------------------*/
       /* calculate new total shipped amounts for shiprec ord,itm,hdr*/
      /* ------------------------------------------------------------*/

      /* calculate new total shipped amount*/
      TS07W00.TS07WAMT = SR3REC.OP2AUPRC * TS07W00.TS07WTOT; /* itm amt*/
      SR2REC.SR2DLRAM = SR2REC.SR2DLRAM - TS07W00.TS07WAMT; /* ord amt*/
      SR1REC.SR1DLRAM = SR1REC.SR1DLRAM - TS07W00.TS07WAMT; /* hdr amt*/
      /* calculate total shipped quantity*/
      SR3REC.SR3TQTSH = SR3REC.SR3TQTSH - TS07W00.TS07WTOT; /* itm tot*/
      SR2REC.SR2QTYSH = SR2REC.SR2QTYSH - TS07W00.TS07WTOT; /* ord tot*/
      SR1REC.SR1QTYSH = SR1REC.SR1QTYSH - TS07W00.TS07WTOT; /* hdr tot*/

      TS07S20(); /* update shiprec item*/

      TS07S21(); /* update shiprec order*/

      TS07S22(); /* update shiprec header*/

    else
      /* ------------------------------------------------------------*/
       /* no size match on item rcd, set flag to get next schedule.*/
      /* ------------------------------------------------------------*/

      TS07W00.TS07WSWE = "N"; /* set flag to get next schedule*/

    end

  end

end // end TS07S16

// get life cycle for xcptn rcd
Function TS07S17()
   /* ------------------------------------------------------------*/
   /* read DPICK.VPKSTY01 table to obtain product life cycle*/
   /* ------------------------------------------------------------*/

  TS07S12(); /* select unique DPICK.VPKSTY01 table*/
                                   /* row*/

   /* ------------------------------------------------------------*/
    /* set life cycle based on eff date/ship date*/
   /* ------------------------------------------------------------*/

  if (SR2REC.SR1SHPDT != 0) /* ship date at order lvl?*/
    TS07W00.TS07WDAT = SR2REC.SR1SHPDT;
  else
    if (SR1REC.SR1SHPDT != 0) /* ship date at batch lvl?*/
      TS07W00.TS07WDAT = SR1REC.SR1SHPDT;
    else
      TS07W00.TS07WYMD = VGVar.currentShortGregorianDate; /* use todays date*/
      TS07W00.TS07WCC = 19;
    end
  end
  if (TS07W00.TS07WDAT >= PKNREC.SY2CEDT1)
    TS07W00.XLCCD = PKNREC.XLCCD1;
  else
    if (TS07W00.TS07WDAT >= PKNREC.SY2CEDT2)
      TS07W00.XLCCD = PKNREC.XLCCD2;
    else
      if (TS07W00.TS07WDAT >= PKNREC.SY2CEDT3)
        TS07W00.XLCCD = PKNREC.XLCCD3;
      else
        if (TS07W00.TS07WDAT >= PKNREC.SY2CEDT4)
          TS07W00.XLCCD = PKNREC.XLCCD4;
        end
      end
    end
  end

end // end TS07S17

// select unique DPICK.VPKCTL01
Function TS07S18()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the DPICK.VPKCTL01 table.*/
   /* ------------------------------------------------------------*/

  if (PKDREC.XWHCD != TS07W01.XWHCD)
    set PKDREC empty; /* Clear row storage area*/
    PKDREC.XWHCD = TS07W01.XWHCD;
  end

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S18"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S18"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DPICK.VPKCTL01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S18

// insert DSHIP.VSRXCP01 row
Function TS07S19()
   /* ------------------------------------------------------------*/
   /* insert the a new row into the DSHIP.VSRXCP01 table.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/
  SR5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  SR5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* last chng date*/
  SR5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* last chng time*/

  SR5REC.XWHCD = SR3REC.XWHCD; /* warehouse*/
  SR5REC.PK1PKSCH = SR3REC.PK1PKSCH; /* schedule number*/
  SR5REC.OP1CUOID = SR3REC.OP1CUOID; /* cust order nbr*/
  SR5REC.OP1NORID = SR3REC.OP1NORID; /* nike order nbr*/
  SR5REC.OP1NTMAL = SR3REC.OP1NTMAL; /* times allocated*/
  SR5REC.OP2LNINB = SR3REC.OP2LNINB; /* line item nbr*/
  SR5REC.XOWCD = SR3REC.XOWCD; /* owner code*/
  SR5REC.XGPCD = SR3REC.XGPCD; /* gpc code*/
  SR5REC.SY1STNBR = SR3REC.SY1STNBR; /* style*/
  SR5REC.SY2CLRID = SR3REC.SY2CLRID; /* color*/
  SR5REC.XDMCD = SR3REC.XDMCD; /* dimension*/
  SR5REC.XQACD = SR3REC.XQACD; /* quality code*/
  SR5REC.XLCCD = TS07W00.XLCCD; /* life cycle*/
  SR5REC.PC2INSEG = SR3REC.PC2INSEG; /* spec diff.*/
  SR5REC.XEGCD = SR3REC.XEGCD; /* shade*/
  SR5REC.XPGCD = SR3REC.XPGCD; /* package type*/
  SR5REC.XUMCD = SR3REC.XUMCD; /* unit of measure*/
  SR5REC.XOTCD = SR2REC.XOTCD; /* order type*/
  SR5REC.OP1TBREP = SR2REC.OP1TBREP; /* service rep*/
  SR5REC.XBCCD = SR2REC.XBCCD; /* brand code*/
  SR5REC.XOBCD = SR2REC.XOBCD; /* base ot code*/

  try
    call "IO0830" ("A ", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S19"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S19"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT DPICK.VPKCTL01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S19

// update dship.vsritm01 row
Function TS07S20()
   /* ------------------------------------------------------------*/
   /* update the row from the DSHIP.VSRITM01 table.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/
  SR3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  SR3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

  SR3REC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/

  try
    call "SR1100" ("U ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S20"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S20"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S20

// update dship.vsrord01 row
Function TS07S21()
   /* ------------------------------------------------------------*/
   /* update the row from the DSHIP.VSRORD01 table.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/
  SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

  try
    call "IO0800" ("U ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S21"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S21"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S21

// update DSHIP.VSRHDR01 row
Function TS07S22()
   /* ------------------------------------------------------------*/
   /* update the row from the dship.vsrhdr01 table.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/
  SR1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  SR1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

  try
    call "IO0790" ("U ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S22"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S22"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S22

// purge temporary storage queue
Function TS07S31()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TS07W02 empty;

  TS07W00.TS07WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Reset current page number*/
  TS07W00.TA5TSQIX = 0; /* Reset highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TS07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S31"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S31

// add page to temporary storage
Function TS07S32()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS07W02.XXXTSLEN = TS07W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS07W02 empty; /* M002 display storage*/

    TS07W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS07W00.XXXTSPAG = TA5REC.TA5TSQIX; /* current page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S32"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S32

// Update temporary storage page
Function TS07S33()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S33"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S33

// Read temporary storage page
Function TS07S34()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS07W02.XXXTSLEN = TS07W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = TS07W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S34"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S34

// validate factory code
Function TS07S35()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Clear row storage area*/

  FY1REC.XGPCD = TS07W02.XGPCD[TS07WIXG]; /* GPC code*/
  FY1REC.FY1FCTYC = TS07M002.FY1FCTYC[TS07WIXG]; /* factory code*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      TS07M002.XCTCD[TS07WIXG] = FY1REC.XCTCD; /* move country*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TSWREC.XXXMODID = "S35"; /* module identification*/
      set TS07M002.FY1FCTYC[TS07WIXG] cursor, bold; /* highlight*/
      converseLib.validationFailed(166);

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S35"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VALIDATE FACTORY CODE      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S35

// select unique DPICK.VPKSTY01
Function TS07S50()
   /* ------------------------------------------------------------*/
   /* select unique row from DPICK.VPKSTY01 table.*/
   /* ------------------------------------------------------------*/
  if (PKNREC.PKNKEY == " " /* if pick style key is empty*/
   || PKNREC.PKNKEY != TS07W00.PKNKEY) /* or not already accessed*/
    TS07W00.XGPCD = TS07W02.XGPCD[TS07WIXG];
    TS07W00.SY1STNBR = TS07W02.SY1STNBR[TS07WIXG];
    TS07W00.SY2CLRID = TS07W02.SY2CLRID[TS07WIXG];
    TS07W00.XDMCD = TS07W02.XDMCD[TS07WIXG];
    set PKNREC empty;
    PKNREC.PKNKEY = TS07W00.PKNKEY;
  else

    return; /* return to previous process*/

  end

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* select*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      TS07W00.TS07WIXM = 1; /* initialize index*/
      while (TS07W00.TS07WIXM <= 40) /* until end of sizes*/
        if (PKNREC.SYGSZWT[TS07WIXM] == 0) /* in no size weight*/
          PKNREC.SYGSZWT[TS07WIXM] = PKNREC.SY1AVEWT; /* use default*/
        end
        TS07W00.TS07WIXM = TS07W00.TS07WIXM + 1; /* increment index*/
      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "S50"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S50"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE STYLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S50

// purge temporary storage queue
Function TS07S51()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TS07W02 empty;

  TS07W00.TS07WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Reset current page number*/
  TS07W00.TS07WMAX = 0; /* Reset highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS17"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TS07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S51"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S51

// add page to temporary storage
Function TS07S52()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS07W02.XXXTSLEN = TS07W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "TS17"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS07W02 empty; /* M002 display storage*/

    TS07W00.TS07WMAX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS07W00.TS07WPAG = TA5REC.TA5TSQIX; /* current page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    TS07W00.TS07WIXG = 1; /* reset line number to one*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S52"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S52

// Read temporary storage page
Function TS07S54()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS07W02.XXXTSLEN = TS07W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = "TS17"; /* Application identification*/
  TA5REC.TA5TSQIX = TS07W00.TS07WPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS07W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S54"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S54

// obtain max crtn nbr for p/l
Function TS07S55()
   /* ------------------------------------------------------------*/
   /* obtain the maximum carton number used.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear row storage area*/

  TSYREC.TSVPLNBR = TS07W00.TSVPLNBR; /* p/l number*/

  TS4REC.TS4TASK = "SM"; /* select max*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      TS4REC.TS4FUNCT = TS4REC.TS4FUNCT + 1; /* increase by one*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TS4REC.TS4FUNCT = 1; /* set new carton nbr to one*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S55"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN CARTON NUMBER MAX   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S55

// select unique DPICK.VPKSTY01
Function TS07S60()
   /* ------------------------------------------------------------*/
   /* select unique row from DPICK.VPKSTY01 table.*/
   /* ------------------------------------------------------------*/
  if (PKNREC.PKNKEY == " " /* if pick style key is empty*/
   || PKNREC.PKNKEY != TS07W00.PKNKEY) /* or not already accessed*/
    TS07W00.XGPCD = TS07W02.XGPCD[TS07WIXM];
    TS07W00.SY1STNBR = TS07W02.SY1STNBR[TS07WIXM];
    TS07W00.SY2CLRID = TS07W02.SY2CLRID[TS07WIXM];
    TS07W00.XDMCD = TS07W02.XDMCD[TS07WIXM];
    set PKNREC empty;
    PKNREC.PKNKEY = TS07W00.PKNKEY;
  else

    return; /* return to previous process*/

  end

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* select*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      TS07W00.TS07WIXG = 1; /* initialize index*/
      while (TS07W00.TS07WIXG <= 40) /* until end of sizes*/
        if (PKNREC.SYGSZWT[TS07WIXG] == 0) /* in no size weight*/
          PKNREC.SYGSZWT[TS07WIXG] = PKNREC.SY1AVEWT; /* use default*/
        end
        TS07W00.TS07WIXG = TS07W00.TS07WIXG + 1; /* increment index*/
      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS07W00.TS07WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "S60"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S60"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE STYLE ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S60

// validate factory code
Function TS07S70()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Clear row storage area*/

  FY1REC.XGPCD = TS07W02.XGPCD[TS07WIXM]; /* GPC code*/
  FY1REC.FY1FCTYC = TS07M003.FY1FCTYC[TS07WIXM]; /* factory code*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      TS07M003.XCTCD[TS07WIXM] = FY1REC.XCTCD; /* move country*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TSWREC.XXXMODID = "S70"; /* module identification*/
      set TS07M003.FY1FCTYC[TS07WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(166);

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S70"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VALIDATE FACTORY CODE      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S70

// select set dtrans.vnlpls01
Function TS07S71()
   /* ------------------------------------------------------------*/
   /* select set dtrans.vnlpls01*/
   /* ------------------------------------------------------------*/

  set TSZREC empty;
  set TS6REC empty;

  TSZREC.TSVPLNBR = TS07W02.TSVPLNBR;
  TSZREC.OP1CUOID = TS07W02.OP1CUOID;
  TSZREC.OP1NORID = TS07W02.OP1NORID;
  TSZREC.TSPCRTNB = -1;
  TSZREC.XGPCD = TS07M003.XGPCD[TS07WIXM];
  TSZREC.SY1STNBR = TS07M003.SY1STNBR[TS07WIXM];
  TSZREC.SY2CLRID = TS07M003.SY2CLRID[TS07WIXM];
  TSZREC.XDMCD = TS07M003.XDMCD[TS07WIXM];
  if (TS07M003.XQACD[TS07WIXM] == " ")
    TSZREC.XQACD = "**";
  else
    TSZREC.XQACD = TS07M003.XQACD[TS07WIXM];
  end

  if (TS07M003.XOWCD[TS07WIXM] == " ")
    TSZREC.XOWCD = "**";
  else
    TSZREC.XOWCD = TS07M003.XOWCD[TS07WIXM];
  end

  if (TS07M003.PC2INSEG[TS07WIXM] == " ")
    TSZREC.PC2INSEG = "***";
  else
    TSZREC.PC2INSEG = TS07M003.PC2INSEG[TS07WIXM];
  end

  if (TS07M003.XPGCD[TS07WIXM] == " ")
    TSZREC.XPGCD = "**";
  else
    TSZREC.XPGCD = TS07M003.XPGCD[TS07WIXM];
  end

  if (TS07M003.XUMCD[TS07WIXM] == " ")
    TSZREC.XUMCD = "**";
  else
    TSZREC.XUMCD = TS07M003.XUMCD[TS07WIXM];
  end

  TSZREC.SY5SZID = -1;
  TSZREC.XCTCD = "****";

  TS6REC.TS6TASK = "S1";

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S71"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VNLPLS01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S71

// fetch next dtrans.vnlpls01
Function TS07S72()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from dtrans.vnlpls01 table.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "N1";

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      TS07W00.TS07WSWF = "Y"; /* Indicate found*/
      TS07W02.OP2LNINB[TS07WIXM] = TSZREC.OP2LNINB;

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S72"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S72

// close cursor dship.vsrord01
Function TS07S73()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "C1";

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S73"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S73

// select set dorder.vitem002
Function TS07S74()
   /* ------------------------------------------------------------*/
   /* select set dorder.vitem002*/
   /* ------------------------------------------------------------*/

  set OP6REC empty;

  OP6REC.OP1CUOID = TS07W02.OP1CUOID;
  OP6REC.OP1NORID = TS07W02.OP1NORID;
  OP6REC.OP1PARTN = TS07W02.OP1PARTN;
  OP6REC.XGPCD = TS07M003.XGPCD[TS07WIXM];
  OP6REC.SY1STNBR = TS07M003.SY1STNBR[TS07WIXM];
  OP6REC.SY2CLRID = TS07M003.SY2CLRID[TS07WIXM];
  OP6REC.XDMCD = TS07M003.XDMCD[TS07WIXM];

  try
    call "IO0450" ("S2", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S74"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VITEM002 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM002"; /* Table view name*/
  TA1REC.TA1TBLKE = OP6REC.OP6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS07S74

// fetch next dorder.vitem002
Function TS07S75()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from dorder.vitem002 table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0450" ("N2", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      TS07W00.TS07WSWF = "Y"; /* Indicate found*/
      TS07W02.OP2LNINB[TS07WIXM] = OP6REC.OP2LNINB;

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S75"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM002"; /* Table view name*/
  TA1REC.TA1TBLKE = OP6REC.OP6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S75

// close cursor dorder.vitem002
Function TS07S76()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0450" ("C2", SQLCA, OP6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S76"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VITEM002"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S76

// SELECT UNIQUE PC2INSEG
Function TS07S77()
   /* ---------------------------------------------------------------------*/
   /* SELECT UNIQUE*/
   /* ---------------------------------------------------------------------*/
  set PC2REC empty;
  PC2REC.XGPCD = TS07M003.XGPCD[TS07WIXM];
  PC2REC.PC2INSEG = TS07M003.PC2INSEG[TS07WIXM];

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TSWREC.XXXMODID = "S77";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(10);
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SELECT UNIQ VPRDCU01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPRDCU01";
  TA1REC.TA1TBLKE = PC2REC.PC2KEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;
end // end TS07S77

Function TS07S78()

   /* -------------------------------------------------------------------*/
   /* SELECT UNIQUE STYLE BY GPC/STYLE*/
   /* -------------------------------------------------------------------*/

  set SY1REC empty;
  SY1REC.XGPCD = TS07M003.XGPCD[TS07WIXM];
  SY1REC.SY1STNBR = TS07M003.SY1STNBR[TS07WIXM];

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TSWREC.XXXMODID = "S78";
  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(10);
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SELECT UNIQ VSTYLE01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DPROD   ";
  TA1REC.TA1TBLVU = "VSTYLE01";
  TA1REC.TA1TBLKE = SY1REC.SY1KEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;
end // end TS07S78

// select unique dship.vsritm01
Function TS07S80()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the DSHIP.VSRITM01 table.*/
   /* ------------------------------------------------------------*/

  set SR3REC empty; /* Clear row storage area*/

  SR3REC.XWHCD = TS07W02.XWHCD; /* warehouse*/
  SR3REC.PK1PKSCH = TS07W00.TS07WSRS[TS07WSX1]; /* pick sched nbr*/
  SR3REC.OP1CUOID = TS07W02.OP1CUOID; /* order nbr*/
  SR3REC.OP1NORID = TS07W02.OP1NORID; /* order id*/
  SR3REC.OP2LNINB = TS07W02.OP2LNINB[TS07WIXM]; /* line itm nbr*/
   /* dlvrusa changes begin sbhara 05/14/01*/
  if (TS07W02.XWHCD == "04" /* MEMPHIS FOOT -SAP*/
   || TS07W02.XWHCD == "07" /* WILSONVILLE  -SAP*/
   || TS07W02.XWHCD == "09" /* PROMO        -SAP*/
   || TS07W02.XWHCD == "51") /* MEMPHIS APPL -SAP*/

    TS07S-GET-DN-ITM(); /* to retrieve the corresponding*/
                                  /* delivery #*/

    SR3REC.XGPCD = TS07W02.XGPCD; /* GPC CODE*/
    SR3REC.SY1STNBR = TS07W02.SY1STNBR; /* style number*/
    SR3REC.SY2CLRID = TS07W02.SY2CLRID; /* color number*/
    SR3REC.XDMCD = TS07W02.XDMCD; /* dimension code*/
    SR3REC.XQACD = TS07W02.XQACD; /* quality code*/
    SR3REC.PC2INSEG = TS07W02.PC2INSEG; /* iseg code*/
    SR3REC.XPGCD = TS07W02.XPGCD; /* package type code*/
    SR3REC.XUMCD = TS07W02.XUMCD; /* unit of measure code*/
    SR3REC.XOWCD = TS07W02.XOWCD; /* owner group code*/

    try
      call "SR1100" ("SI", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select line itm #*/

    if (sysVar.errorCode == "00000000") /* Call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* roll back all changes*/

        TS07W00.TS07WSWR = "Y"; /* request for data switch*/

        TSWREC.XXXMODID = "013"; /* module identification*/
        TSWREC.XXXMSGNO = 456; /* SHIPREC NOT FOUND*/
        exit stack; /* Return to previous process*/
      end
    end


    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that a system error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TSWREC.XXXMODID = "S80"; /* Module identification*/

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else
      if (sysVar.errorCode != "00000000")
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before display*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "OBTAIN LINE ITEM NUM TASK TYPE \"SI\"";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
        TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
        TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        exit stack; /* Exit to display map*/

      end
    end
  end
   /* dlvrusa changes end   sbhara 05/14/01*/

  try
    call "SR1100" ("S ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      TS07W00.TS07WSWE = "Y"; /* shiprec item found*/

      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S80"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S80

// select unique dship.vsrhdr01
Function TS07S81()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the dship.vsrhdr01 table.*/
   /* ------------------------------------------------------------*/

  set SR1REC empty; /* Clear row storage area*/

  SR1REC.XWHCD = SR3REC.XWHCD; /* warehouse*/
  SR1REC.PK1PKSCH = SR3REC.PK1PKSCH; /* pick schedule number*/

  try
    call "IO0790" ("S ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S14"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S14"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S81

// select unique dship.vsrord01
Function TS07S82()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the DSHIP.VSRORD01 table.*/
   /* ------------------------------------------------------------*/

  set SR2REC empty; /* Clear row storage area*/

  SR2REC.XWHCD = SR3REC.XWHCD; /* warehouse*/
  SR2REC.PK1PKSCH = SR3REC.PK1PKSCH; /* pick schedule number*/
  SR2REC.OP1CUOID = SR3REC.OP1CUOID; /* order nbr*/
  SR2REC.OP1NORID = SR3REC.OP1NORID; /* order id*/
  SR2REC.OP1NTMAL = SR3REC.OP1NTMAL; /* times allocated*/

  try
    call "IO0800" ("S ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S15"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S15"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S82

// create DSHIP.VSRXCP01 rows
Function TS07S83()

  TS07W00.TS07WTOT = 0; /* initialize total exception changes*/

  sysVar.arrayIndex = 1;
                                   /* start at first bucket in shiprec item*/

  if (TS07W02.SY5SZID[TS07WIXM] in SR3REC.SY5SZID from sysVar.arrayIndex)
    /* ------------------------------------------------------------*/
     /* size has been found at least once in the shiprec item.*/
    /* ------------------------------------------------------------*/

    set SR5REC empty; /* initialize shiprec exception record*/

    TS07S84(); /* get life cycle for xcptn record*/

    if (TS07W00.TS07WDIF > 0) /* if units to change is positive*/
      /* ------------------------------------------------------------*/
       /* if the quantity change is positive -*/
       /* if size occurs only once in item record use area,zone,loc*/
         /* from the single occurrence of the size.*/
       /* if size occurs more than once in item record use the*/
         /* the default area,zone,location from dpick.vpkctl01 table.*/
       /* only one exception record is created for overages.*/
      /* ------------------------------------------------------------*/

      sysVar.arrayIndex = sysVar.arrayIndex + 1; /* check for another occurence of size*/

      if (TS07W02.SY5SZID[TS07WIXM] in SR3REC.SY5SZID from sysVar.arrayIndex)
        /* ----------------------------------------------------------*/
         /* size has been found more than once in shiprec item*/
         /* use the default location to find the occurrence to update.*/
         /* if not found add default location to the item row.*/
        /* ----------------------------------------------------------*/

        TS07S85(); /* get default area zones for size*/

        sysVar.arrayIndex = 1; /* find size with default location*/
        TS07W00.TS07WSWG = "N"; /* initialize loc. found flag*/
        while (sysVar.arrayIndex <= SR3REC.SR3NBRSZ /* until end of sizes*/
         && TS07W00.TS07WSWG == "N") /* or location found*/
          if (TS07W02.SY5SZID[TS07WIXM] == SR3REC.SY5SZID[sysVar.arrayIndex]
           && PKDREC.PKDDFSYA == SR3REC.XARCD[sysVar.arrayIndex]
           && PKDREC.PKDDFSYZ == SR3REC.SL4ZONE[sysVar.arrayIndex]
           && PKDREC.PKDDFSYL == SR3REC.SL5LOCTN[sysVar.arrayIndex])
            TS07W00.TS07WSWG = "Y"; /* location found*/
          else
            sysVar.arrayIndex = sysVar.arrayIndex + 1;
          end
        end

        if (sysVar.arrayIndex <= SR3REC.SR3NBRSZ) /* found default size*/
          /* ----------------------------------------------------*/
           /* default location found - update the occurrence*/
          /* ----------------------------------------------------*/
           /* next sentence*/
        else
          /* ----------------------------------------------------*/
           /* default location not found add a new occurrence*/
          /* ----------------------------------------------------*/
          SR3REC.SR3NBRSZ = SR3REC.SR3NBRSZ + 1; /* add new item*/
          sysVar.arrayIndex = SR3REC.SR3NBRSZ;
          SR3REC.SY5SZID[sysVar.arrayIndex] = TS07W02.SY5SZID[TS07WIXM];
          SR3REC.XARCD[sysVar.arrayIndex] = PKDREC.PKDDFSYA;
          SR3REC.SL4ZONE[sysVar.arrayIndex] = PKDREC.PKDDFSYZ;
          SR3REC.SL5LOCTN[sysVar.arrayIndex] = PKDREC.PKDDFSYL;
        end

      else
        /* ----------------------------------------------------------*/
         /* size occured only once in shiprec so reset ezetst back*/
         /* to the original occurrence of size, and use orig location*/
        /* ----------------------------------------------------------*/
        if (TS07W02.SY5SZID[TS07WIXM] in SR3REC.SY5SZID from 1)
          /* --------------------------------------------------------*/
           /* sets the ezetst back to the first occur of size match*/
          /* --------------------------------------------------------*/
           /* next sentence*/
        end
      end

      /* ------------------------------------------------------------*/
       /* compute the exception quantity and create an exception rcd*/
      /* ------------------------------------------------------------*/

      TS07W00.TS07WQTY = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* hld orig qty*/

      SR3REC.SR3QTYSH[sysVar.arrayIndex] = SR3REC.SR3QTYSH[sysVar.arrayIndex] + TS07WDIF;

      SR5REC.SY5SZID = SR3REC.SY5SZID[sysVar.arrayIndex]; /* size id*/
      SR5REC.SR3ARZN = SR3REC.SR3ARZN[sysVar.arrayIndex]; /* area zone*/
      SR5REC.SL5LOCTN = SR3REC.SL5LOCTN[sysVar.arrayIndex]; /* location*/
      SR5REC.SR3QTYAL = SR3REC.SR3QTYAL[sysVar.arrayIndex]; /* alloc qty*/
      SR5REC.SR3QTYSH = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* ship  qty*/

      SR5REC.SR5QTYXC = TS07W00.TS07WQTY - SR3REC.SR3QTYSH[sysVar.arrayIndex];
      TS07W00.TS07WTOT = SR5REC.SR5QTYXC; /* save total xcp chgs*/

      TS07S86(); /* insert shiprec exception row*/

    else
      /* ------------------------------------------------------------*/
       /* if the quantity change is negative -*/
       /* create an exception record for each size bucket in shiprec*/
       /* item which contains a matching size until the chg amount*/
       /* is reduced to zero.  if change amount remains after all*/
       /* matching size items have been updated get the next schedule*/
       /* and update it until the change amount is zero.*/
      /* ------------------------------------------------------------*/

      while (sysVar.arrayIndex <= SR3REC.SR3NBRSZ /* until end of sizes*/
       && TS07W00.TS07WDIF != 0) /* or no more units to change*/
        /* ------------------------------------------------------------*/
         /* compute the exception quantity and create the exception rcd*/
        /* ------------------------------------------------------------*/
        TS07W00.TS07WQTY = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* hld orig qty*/

        SR3REC.SR3QTYSH[sysVar.arrayIndex] = SR3REC.SR3QTYSH[sysVar.arrayIndex] + TS07WDIF;

        if (SR3REC.SR3QTYSH[sysVar.arrayIndex] < 0) /* if negative ship qty*/
          TS07W00.TS07WDIF = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* move to diff*/
          SR3REC.SR3QTYSH[sysVar.arrayIndex] = 0; /* zero out ship qty in item*/
        else
          TS07W00.TS07WDIF = 0; /* zero out because we're done*/
        end

        SR5REC.SY5SZID = SR3REC.SY5SZID[sysVar.arrayIndex]; /* size id*/
        SR5REC.SR3ARZN = SR3REC.SR3ARZN[sysVar.arrayIndex]; /* area zone*/
        SR5REC.SL5LOCTN = SR3REC.SL5LOCTN[sysVar.arrayIndex]; /* location*/
        SR5REC.SR3QTYAL = SR3REC.SR3QTYAL[sysVar.arrayIndex]; /* alloc qty*/
        SR5REC.SR3QTYSH = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* ship  qty*/

        SR5REC.SR5QTYXC = TS07W00.TS07WQTY - SR3REC.SR3QTYSH[sysVar.arrayIndex];
        TS07W00.TS07WTOT = TS07W00.TS07WTOT + SR5REC.SR5QTYXC; /* save*/

        TS07S86(); /* insert shiprec exception row*/

        sysVar.arrayIndex = sysVar.arrayIndex + 1; /* find next size match in shiprec item*/

        if (TS07W02.SY5SZID[TS07WIXM] in SR3REC.SY5SZID from sysVar.arrayIndex)
          /* ------------------------------------------------------------*/
           /* found another size to update with quantity changes*/
          /* ------------------------------------------------------------*/
           /* next sentence*/
        else

          sysVar.arrayIndex = 99999; /* no more sizes in item recd*/

        end

      end

      if (TS07W00.TS07WDIF != 0) /* if more updates needed*/

        TS07W00.TS07WSWE = "N"; /* get next sched to update*/

      end

    end
    /* ------------------------------------------------------------*/
     /* calculate new total shipped amounts for shiprec ord,itm,hdr*/
    /* ------------------------------------------------------------*/

    /* calculate new total shipped amount*/
    TS07W00.TS07WAMT = SR3REC.OP2AUPRC * TS07W00.TS07WTOT; /* itm amt*/
    SR2REC.SR2DLRAM = SR2REC.SR2DLRAM - TS07W00.TS07WAMT; /* ord amt*/
    SR1REC.SR1DLRAM = SR1REC.SR1DLRAM - TS07W00.TS07WAMT; /* hdr amt*/
    /* calculate total shipped quantity*/
    SR3REC.SR3TQTSH = SR3REC.SR3TQTSH - TS07W00.TS07WTOT; /* itm tot*/
    SR2REC.SR2QTYSH = SR2REC.SR2QTYSH - TS07W00.TS07WTOT; /* ord tot*/
    SR1REC.SR1QTYSH = SR1REC.SR1QTYSH - TS07W00.TS07WTOT; /* hdr tot*/

    TS07S87(); /* update shiprec item*/

    TS07S88(); /* update shiprec order*/

    TS07S89(); /* update shiprec header*/

  else

    if (TS07W00.TS07WSWD == "4") /* if add carton mode*/
      /* ------------------------------------------------------------*/
       /* new size must be added to shiprec exception row*/
      /* ------------------------------------------------------------*/

      set SR5REC empty; /* initialize shiprec exception record*/

      TS07S84(); /* get life cycle for xcptn record*/

      TS07S85(); /* get default area zone for size*/

      sysVar.arrayIndex = 1; /* find size with default location*/
      TS07W00.TS07WSWG = "N"; /* initialize loc. found flag*/
      while (sysVar.arrayIndex <= SR3REC.SR3NBRSZ /* until end of sizes*/
       && TS07W00.TS07WSWG == "N") /* or location found*/
        if (TS07W02.SY5SZID[TS07WIXM] == SR3REC.SY5SZID[sysVar.arrayIndex]
         && PKDREC.PKDDFSYA == SR3REC.XARCD[sysVar.arrayIndex]
         && PKDREC.PKDDFSYZ == SR3REC.SL4ZONE[sysVar.arrayIndex]
         && PKDREC.PKDDFSYL == SR3REC.SL5LOCTN[sysVar.arrayIndex])
          TS07W00.TS07WSWG = "Y"; /* location found*/
        else
          sysVar.arrayIndex = sysVar.arrayIndex + 1;
        end
      end

      if (sysVar.arrayIndex <= SR3REC.SR3NBRSZ) /* found default size*/
        /* ----------------------------------------------------*/
         /* default location found - update the occurrence*/
        /* ----------------------------------------------------*/
         /* next sentence*/
      else
        /* ----------------------------------------------------*/
         /* default location not found add a new occurrence*/
        /* ----------------------------------------------------*/
        SR3REC.SR3NBRSZ = SR3REC.SR3NBRSZ + 1; /* add new item*/
        sysVar.arrayIndex = SR3REC.SR3NBRSZ;
        SR3REC.SY5SZID[sysVar.arrayIndex] = TS07W02.SY5SZID[TS07WIXM];
        SR3REC.XARCD[sysVar.arrayIndex] = PKDREC.PKDDFSYA;
        SR3REC.SL4ZONE[sysVar.arrayIndex] = PKDREC.PKDDFSYZ;
        SR3REC.SL5LOCTN[sysVar.arrayIndex] = PKDREC.PKDDFSYL;
      end

      /* ------------------------------------------------------------*/
       /* compute the exception quantity and create an exception rcd*/
      /* ------------------------------------------------------------*/

      TS07W00.TS07WQTY = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* hld orig qty*/

      SR3REC.SR3QTYSH[sysVar.arrayIndex] = SR3REC.SR3QTYSH[sysVar.arrayIndex] + TS07WDIF;

      SR5REC.SY5SZID = SR3REC.SY5SZID[sysVar.arrayIndex]; /* size id*/
      SR5REC.SR3ARZN = SR3REC.SR3ARZN[sysVar.arrayIndex]; /* area zone*/
      SR5REC.SL5LOCTN = SR3REC.SL5LOCTN[sysVar.arrayIndex]; /* location*/
      SR5REC.SR3QTYAL = SR3REC.SR3QTYAL[sysVar.arrayIndex]; /* alloc qty*/
      SR5REC.SR3QTYSH = SR3REC.SR3QTYSH[sysVar.arrayIndex]; /* ship  qty*/

      SR5REC.SR5QTYXC = TS07W00.TS07WQTY - SR3REC.SR3QTYSH[sysVar.arrayIndex];
      TS07W00.TS07WTOT = SR5REC.SR5QTYXC; /* save total xcp chgs*/

      TS07S86(); /* insert shiprec exception row*/

      /* ------------------------------------------------------------*/
       /* calculate new total shipped amounts for shiprec ord,itm,hdr*/
      /* ------------------------------------------------------------*/

      /* calculate new total shipped amount*/
      TS07W00.TS07WAMT = SR3REC.OP2AUPRC * TS07W00.TS07WTOT; /* itm amt*/
      SR2REC.SR2DLRAM = SR2REC.SR2DLRAM - TS07W00.TS07WAMT; /* ord amt*/
      SR1REC.SR1DLRAM = SR1REC.SR1DLRAM - TS07W00.TS07WAMT; /* hdr amt*/
      /* calculate total shipped quantity*/
      SR3REC.SR3TQTSH = SR3REC.SR3TQTSH - TS07W00.TS07WTOT; /* itm tot*/
      SR2REC.SR2QTYSH = SR2REC.SR2QTYSH - TS07W00.TS07WTOT; /* ord tot*/
      SR1REC.SR1QTYSH = SR1REC.SR1QTYSH - TS07W00.TS07WTOT; /* hdr tot*/

      TS07S87(); /* update shiprec item*/

      TS07S88(); /* update shiprec order*/

      TS07S89(); /* update shiprec header*/

    else
      /* ------------------------------------------------------------*/
       /* no size match on item rcd, set flag to get next schedule.*/
      /* ------------------------------------------------------------*/

      TS07W00.TS07WSWE = "N"; /* set flag to get next schedule*/

    end

  end

end // end TS07S83

// get life cycle for xcptn rcd
Function TS07S84()
   /* ------------------------------------------------------------*/
   /* read DPICK.VPKSTY01 table to obtain product life cycle*/
   /* ------------------------------------------------------------*/

  TS07S60(); /* select unique DPICK.VPKSTY01 table*/
                                   /* row*/

   /* ------------------------------------------------------------*/
    /* set life cycle based on eff date/ship date*/
   /* ------------------------------------------------------------*/

  if (SR2REC.SR1SHPDT != 0) /* ship date at order lvl?*/
    TS07W00.TS07WDAT = SR2REC.SR1SHPDT;
  else
    if (SR1REC.SR1SHPDT != 0) /* ship date at batch lvl?*/
      TS07W00.TS07WDAT = SR1REC.SR1SHPDT;
    else
      TS07W00.TS07WYMD = VGVar.currentShortGregorianDate; /* use todays date*/
      TS07W00.TS07WCC = 19;
    end
  end
  if (TS07W00.TS07WDAT >= PKNREC.SY2CEDT1)
    TS07W00.XLCCD = PKNREC.XLCCD1;
  else
    if (TS07W00.TS07WDAT >= PKNREC.SY2CEDT2)
      TS07W00.XLCCD = PKNREC.XLCCD2;
    else
      if (TS07W00.TS07WDAT >= PKNREC.SY2CEDT3)
        TS07W00.XLCCD = PKNREC.XLCCD3;
      else
        if (TS07W00.TS07WDAT >= PKNREC.SY2CEDT4)
          TS07W00.XLCCD = PKNREC.XLCCD4;
        end
      end
    end
  end

end // end TS07S84

// select unique DPICK.VPKCTL01
Function TS07S85()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the DPICK.VPKCTL01 table.*/
   /* ------------------------------------------------------------*/

  if (PKDREC.XWHCD != TS07W02.XWHCD)
    set PKDREC empty; /* Clear row storage area*/
    PKDREC.XWHCD = TS07W02.XWHCD;
  end

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S85"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S85"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE DPICK.VPKCTL01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S85

// insert DSHIP.VSRXCP01 row
Function TS07S86()
   /* ------------------------------------------------------------*/
   /* insert the a new row into the DSHIP.VSRXCP01 table.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/
  SR5REC.ZZZSDT = XX0XW01.XX0XWDAT; /* setup date*/
  SR5REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* last chng date*/
  SR5REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* last chng time*/

  SR5REC.XWHCD = SR3REC.XWHCD; /* warehouse*/
  SR5REC.PK1PKSCH = SR3REC.PK1PKSCH; /* schedule number*/
  SR5REC.OP1CUOID = SR3REC.OP1CUOID; /* cust order nbr*/
  SR5REC.OP1NORID = SR3REC.OP1NORID; /* nike order nbr*/
  SR5REC.OP1NTMAL = SR3REC.OP1NTMAL; /* times allocated*/
  SR5REC.OP2LNINB = SR3REC.OP2LNINB; /* line item nbr*/
  SR5REC.XOWCD = SR3REC.XOWCD; /* owner code*/
  SR5REC.XGPCD = SR3REC.XGPCD; /* gpc code*/
  SR5REC.SY1STNBR = SR3REC.SY1STNBR; /* style*/
  SR5REC.SY2CLRID = SR3REC.SY2CLRID; /* color*/
  SR5REC.XDMCD = SR3REC.XDMCD; /* dimension*/
  SR5REC.XQACD = SR3REC.XQACD; /* quality code*/
  SR5REC.XLCCD = TS07W00.XLCCD; /* life cycle*/
  SR5REC.PC2INSEG = SR3REC.PC2INSEG; /* spec diff.*/
  SR5REC.XEGCD = SR3REC.XEGCD; /* shade*/
  SR5REC.XPGCD = SR3REC.XPGCD; /* package type*/
  SR5REC.XUMCD = SR3REC.XUMCD; /* unit of measure*/
  SR5REC.XOTCD = SR2REC.XOTCD; /* order type*/
  SR5REC.OP1TBREP = SR2REC.OP1TBREP; /* service rep*/
  SR5REC.XBCCD = SR2REC.XBCCD; /* brand code*/
  SR5REC.XOBCD = SR2REC.XOBCD; /* base ot code*/

  try
    call "IO0830" ("A ", SQLCA, SR5REC) {isNoRefresh = yes, isExternal = yes};
  end /* insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S86"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S86"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT DPICK.VPKCTL01 ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRXCP01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S86

// update dship.vsritm01 row
Function TS07S87()
   /* ------------------------------------------------------------*/
   /* update the row from the DSHIP.VSRITM01 table.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/
  SR3REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  SR3REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

  SR3REC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/

  try
    call "SR1100" ("U ", SQLCA, SR3REC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* rollback all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S87"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S87"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR3REC.SR3KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S87

// update dship.vsrord01 row
Function TS07S88()
   /* ------------------------------------------------------------*/
   /* update the row from the DSHIP.VSRORD01 table.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/
  SR2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  SR2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

  try
    call "IO0800" ("U ", SQLCA, SR2REC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S88"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S88"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRORD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR2REC.SR2KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S88

// update DSHIP.VSRHDR01 row
Function TS07S89()
   /* ------------------------------------------------------------*/
   /* update the row from the dship.vsrhdr01 table.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* get date and time*/
  SR1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  SR1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

  try
    call "IO0790" ("U ", SQLCA, SR1REC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS07W00.TS07WSWR = "Y"; /* request for data*/
      TSWREC.XXXMODID = "S89"; /* module id*/
      TSWREC.XXXMSGNO = 12; /* updated by another appl*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S89"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DSHIP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSRHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = SR1REC.SR1KEYS; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS07S89

//*** RECORD=TS07W00 ****
// * ----------------------------------------------------------
// *             General Working storage for ts07
// * ----------------------------------------------------------
// ***********************
Record TS07W00 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TS07WMAX TS07WMAX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TS07WPAG TS07WPAG ; 
  10 TS07WIXM TS07WIXM ; 
  10 TS07WIXG TS07WIXG ; 
  10 TS07WNBR TS07WNBR ; 
  10 TS07WSMX TS07WSMX ; 
  10 * char(1) ; 
  10 TS07WSIZ TS07WSIZ ; 
    15 TS07WSZX TS07WSZX ; 
  10 * char(1) ; 
  10 TS07WDAT TS07WDAT ; 
    15 TS07WCC TS07WCC ; 
    15 TS07WYMD TS07WYMD ; 
  10 * char(1) ; 
  10 TS07WFLG TS07WFLG ; 
    15 TS07WSWA TS07WSWA ; 
    15 TS07WSWB TS07WSWB ; 
    15 TS07WSWC TS07WSWC ; 
    15 TS07WSWD TS07WSWD ; 
    15 TS07WSWE TS07WSWE ; 
    15 TS07WSWG TS07WSWG ; 
    15 TS07WSWF TS07WSWF ; 
    15 TS07WSWR TS07WSWR ; 
    15 TS07WSWU TS07WSWU ; 
    15 TS07WSWX TS07WSWX ; 
    15 TS07WSWY TS07WSWY ; 
    15 TS07WSWZ TS07WSWZ ; 
    15 TS07WSYF TS07WSYF ; 
    15 TS07WSRF TS07WSRF ; 
    15 TS07WSRB TS07WSRB ; 
  10 TS07WSWW TS07WSWW ; 
  10 * char(1) ; 
  10 TS07WGRP TS07WGRP ; 
    15 XWHCD XWHCD ; 
    15 KUCCOID KUCCOID ; 
    15 TSVPLNBR TSVPLNBR ; 
    15 OP1PARTN OP1PARTN ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 TS-PL-CRTN-NBR TS-PL-CRTN-NBR ; 
    15 SR1PKDT SR1PKDT ; 
    15 NIAIVCDT NIAIVCDT ; 
    15 TSFSHPID TSFSHPID ; 
    15 XDSCD XDSCD ; 
    15 TS07MCCD TS07MCCD ; 
    15 YNTCD YNTCD ; 
    15 YNTCRWT YNTCRWT ; 
    15 PKLCTNCD PKLCTNCD ; 
    15 PKLCTNHG PKLCTNHG ; 
    15 PKLCTNWD PKLCTNWD ; 
    15 PKLCTNLN PKLCTNLN ; 
    15 TSYNCTFT TSYNCTFT ; 
    15 TSYNCTLB TSYNCTLB ; 
    15 TSOSHPQT TSOSHPQT ; 
  10 * char(1) ; 
  10 PG3KEY PG3KEY ; 
    15 PKNKEY PKNKEY ; 
      20 XGPCD XGPCD ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
  10 XLCCD XLCCD ; 
  10 * char(368) ; 
    15 TS07WSX1 TS07WSX1 ; 
    15 TS07WSXT TS07WSXT ; 
    15 TS07WSRS TS07WSRS [40] ; 
    15 SR1BTST SR1BTST [40] ; 
  10 TS07WSMS TS07WSMS ; 
    15 TS07WSXX TS07WSXX [4] ; 
      20 TS07WCOM TS07WCOM ; 
      20 TS07WSCH TS07WSCH ; 
    15 TS07WRMS TS07WRMS ; 
  10 * char(368) ; 
  10 CACHGFL CACHGFL ; 
  10 TS07WPLO TS07WPLO ; 
  10 TS07WQTY TS07WQTY ; 
  10 TS07WDIF TS07WDIF ; 
  10 TS07WTOT TS07WTOT ; 
  10 TS07WAMT TS07WAMT ; 
  10 TS07WCFT TS07WCFT ; 
  10 TS07WLBS TS07WLBS ; 
  10 TS07WMQT TS07WMQT ; 
  10 TS07WCCD TS07WCCD ; 
  10 TS07W-NDX TS07W-NDX ; 
end // end TS07W00

//*** RECORD=TS07W01 ****
// * ----------------------------------------------------------
// *    Working Storage Record for MAP TS07M001
// *
// * NOTE: Whenever there is a change length to this record,
// *       review TS07W02, TS07110, 310, 510 and 710 for the
// *       for the length.
// * ----------------------------------------------------------
// ***********************
Record TS07W01 type basicRecord
  5 * char(744) ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 TS07WGRP TS07WGRP ; 
      15 XWHCD XWHCD ; 
      15 KUCCOID KUCCOID ; 
      15 TSVPLNBR TSVPLNBR ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 TS-PL-CRTN-NBR TS-PL-CRTN-NBR ; 
      15 SR1PKDT SR1PKDT ; 
      15 NIAIVCDT NIAIVCDT ; 
      15 TSFSHPID TSFSHPID ; 
      15 XDSCD XDSCD ; 
      15 TS07MCCD TS07MCCD ; 
      15 YNTCD YNTCD ; 
      15 YNTCRWT YNTCRWT ; 
      15 PKLCTNCD PKLCTNCD ; 
      15 PKLCTNHG PKLCTNHG ; 
      15 PKLCTNWD PKLCTNWD ; 
      15 PKLCTNLN PKLCTNLN ; 
      15 TSYNCTFT TSYNCTFT ; 
      15 TSYNCTLB TSYNCTLB ; 
      15 TSOSHPQT TSOSHPQT ; 
    10 TS07WLIN TS07WLIN [13] ; 
      15 TS07MSEL TS07MSEL ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 SY5SZID SY5SZID ; 
      15 PK1QTY PK1QTY ; 
      15 PC3POIDT PC3POIDT ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 XCTCD XCTCD ; 
      15 TSZXCPFL TSZXCPFL ; 
      15 SY1UNPCS SY1UNPCS ; 
      15 OP2LNINB OP2LNINB ; 
      15 TS07WQTY TS07WQTY ; 
end // end TS07W01

//*** RECORD=TS07W02 ****
// * ----------------------------------------------------------
// *    Working Storage Record for MAP TS07M002
// *
// *  NOTE:  Whenever there is a change length to this record,
// *         review TS07W01, TS07110, 310, 510 and 710 for the
// *         length.
// * ----------------------------------------------------------
// ***********************
Record TS07W02 type basicRecord
  5 * char(744) ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 TS07WGRP TS07WGRP ; 
      15 XWHCD XWHCD ; 
      15 KUCCOID KUCCOID ; 
      15 TSVPLNBR TSVPLNBR ; 
      15 OP1PARTN OP1PARTN ; 
      15 OP1CUOID OP1CUOID ; 
      15 OP1NORID OP1NORID ; 
      15 TS-PL-CRTN-NBR TS-PL-CRTN-NBR ; 
      15 SR1PKDT SR1PKDT ; 
      15 NIAIVCDT NIAIVCDT ; 
      15 TSFSHPID TSFSHPID ; 
      15 XDSCD XDSCD ; 
      15 TS07MCCD TS07MCCD ; 
      15 YNTCD YNTCD ; 
      15 YNTCRWT YNTCRWT ; 
      15 PKLCTNCD PKLCTNCD ; 
      15 PKLCTNHG PKLCTNHG ; 
      15 PKLCTNWD PKLCTNWD ; 
      15 PKLCTNLN PKLCTNLN ; 
      15 TSYNCTFT TSYNCTFT ; 
      15 TSYNCTLB TSYNCTLB ; 
      15 TSOSHPQT TSOSHPQT ; 
    10 TS07WLIN TS07WLIN [13] ; 
      15 TS07MSEL TS07MSEL ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 SY5SZID SY5SZID ; 
      15 PK1QTY PK1QTY ; 
      15 PC3POIDT PC3POIDT ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 XCTCD XCTCD ; 
      15 TSZXCPFL TSZXCPFL ; 
      15 SY1UNPCS SY1UNPCS ; 
      15 OP2LNINB OP2LNINB ; 
      15 TS07WQTY TS07WQTY ; 
end // end TS07W02

// carton type code
DataItem TS07MCCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS07MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for crtn tbl in tswrec
DataItem TS07W-NDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dollar work field
DataItem TS07WAMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   century
DataItem TS07WCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS07WCCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vol work field
DataItem TS07WCFT num(15,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS07WCOM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date
DataItem TS07WDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty work field
DataItem TS07WDIF decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// flag clearance field
DataItem TS07WFLG char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS07WGRP char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map2 fields
DataItem TS07WIXG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map1 fields
DataItem TS07WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// wgt work field
DataItem TS07WLBS num(15,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS07WLIN char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tsq rel rec no./index
DataItem TS07WMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// full case qty for map ctn cd
DataItem TS07WMQT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// line counter for map2
DataItem TS07WNBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current temporary storage page
DataItem TS07WPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total pack lists for ord
DataItem TS07WPLO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty work field
DataItem TS07WQTY decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS07WRMS char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS07WSCH char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id idx
DataItem TS07WSIZ num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS07WSMS char(49)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max index for map fields
DataItem TS07WSMX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sched batched flag
DataItem TS07WSRB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shiprec found flag
DataItem TS07WSRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pk-pick-sched-id
DataItem TS07WSRS num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of srord rows
DataItem TS07WSWA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of p/l rows
DataItem TS07WSWB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of style rows
DataItem TS07WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map to display flag
DataItem TS07WSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shiprec item found flag
DataItem TS07WSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map format flag
DataItem TS07WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// generic fnd/notfnd flag
DataItem TS07WSWG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data flag
DataItem TS07WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// storage update flag
DataItem TS07WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning message sent flag
DataItem TS07WSWW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page frwd/bkwd flag
DataItem TS07WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wgt/vol chgd flag
DataItem TS07WSWY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pick excp message flag
DataItem TS07WSWZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pick sched idx
DataItem TS07WSX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total pick scheds for ord
DataItem TS07WSXT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS07WSXX char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style found flag
DataItem TS07WSYF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal size pic x
DataItem TS07WSZX char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty total field
DataItem TS07WTOT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//   yymmdd
DataItem TS07WYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

