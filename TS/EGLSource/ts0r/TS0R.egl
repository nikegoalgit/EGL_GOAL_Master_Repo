package ts0r;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0R ****
// This program allows users to maintain existing rows in the
// Schedule table for projected schedules.  The user will enter
// the schedule keys (ie. carrier, craft, and shipment number)
// of a schedule and possibly detail fields (ie. destination,
// origin, beg dt, end dt, transit days, and days of the week
// flags).  The database will return 0 or 1 row from the
// projected header table based upon the keys entered.
// 
// If row returned = 1 then this program will show the
// projected header on the screen.  The user may then modify
// detail fields.  If any data is changed, this program will
// edit the changed data and if no errors:  update the
// projected header, delete all existing exploded projected
// schedules on the actual schedule table and then add all
// combinations of projected schedules for 3 months out based
// on day of the week flags, beginning and ending dates.
// 
// If row returned = 0 then the user is adding a new set of
// shipment schedules.  The user may then modify detail fields.
// If any data is changed, this program will edit the changed
// data and if no errors:  add a projected header and all
// combinations of projected schedules for 3 months out based
// on day of the week flags, beginning and ending dates.
// 
// Published schedules with elapsed dates are periodically
// purged. The user can force a projected schedule header into
// purgable status by changing the beginning/end dates to fall
// in the past.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 02/04/88   CEPPLE   New application.
// 11/07/96   JCARL1   Remove alarm for msg display.
// *********************
Program TS0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TS0RW01 TS0RW01; // record
  TS0RW02 TS0RW02; // record
  TS0RW03 TS0RW03; // record
  TS5REC TS5REC; // record
  TSAREC TSAREC; // record
  TSCREC TSCREC; // record
  TSKREC TSKREC; // record
  TSLREC TSLREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TS0RM.TS0RM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0RW01 empty; /* Initialize working storage*/
    set TS0RW02 empty;
    set TS0RW03 empty;
    set TSAREC empty; /* Initialize records used*/
    set TSCREC empty;
    set TSKREC empty;
    set TSLREC empty;
    set TSNREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0RM001 initial; /* Initialize map1 output area*/

    TS0RW01.TS0RWCEN = 19; /* Initialize working century*/
    TS0RW01.TS0RWPSW = "N"; /* Iitialize problem switch*/


    goto TS0R001; /* Converse Projected Schedule mnt*/


    TS0R001: TS0R001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Projected Schedule Inquiry/Mainten.*/
     /* ------------------------------------------------------------*/

    goto TS0R001; /* Projected Schedule inq/mnt*/


  end // end main
end // end TS0R

// Projected Schedule Mnt map
Function TS0R001()
   /* ------------------------------------------------------------*/
            /* PROJECTED SCHEDULE MAINTENANCE MAP*/

   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/

   /* ------------------------------------------------------------*/

  TS0R100(); /* Format and display the map*/

  TS0R200(); /* Check attention identifier*/

  TS0R300(); /* Reset fields to normal intensity*/

  TS0R400(); /* Verify the entered data*/

  TS0R500(); /* Process valid input request*/


end // end TS0R001

// Format and display the map
Function TS0R100()
   /* ------------------------------------------------------------*/
                /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no errors and not inquiry, then clear the map.*/
   /* 2) Move all saved key fields to the map.*/
      /* - select the carrier name.*/
      /* - select the craft name.*/
      /* - select the origin and destination cities.*/
   /* 3) If request for data is yes, condense data for display.*/
   /* 4) If user has no add or change abilities, protect fields.*/
   /* 5) If no errors, data lines exist, and user has add/change*/
      /* abilities position cursor to first detail line.*/
   /* 6) Converse the map.*/

   /* ------------------------------------------------------------*/

  if (TS0RW01.TS0RWPSW == "N" /* No error message to display*/
   && TS0RW01.TS0RWSWR == "Y") /* and request for data is yes*/
    set TS0RM001 initial; /* clear map output area*/
    TS0RM001.TSACARCD = TS0RW03.TSACARCD;
    TS0RM001.TSACARNM = TS0RW03.TSACARNM;
    TS0RM001.TS5CRAFT = TS0RW03.TS5CRAFT;
    TS0RM001.TS5NAME = TS0RW03.TS5NAME;
    TS0RM001.TSFSHPNB = TS0RW03.TSFSHPNB;

    TS0RM001.TSEORIG = TS0RW03.TSEORIG;
    set TSCREC empty; /* set record empty*/
    TSCREC.TSCLOCCD = TS0RW03.TSEORIG;
    TS0R110(); /* select location*/
    TS0RM001.TS0RMCTO = TSCREC.XXXCITY; /* move city to map*/

    TS0RM001.TSEDEST = TS0RW03.TSEDEST;
    set TSCREC empty; /* set record empty*/
    TSCREC.TSCLOCCD = TS0RW03.TSEDEST;
    TS0R110(); /* select location*/
    TS0RM001.TS0RMCTD = TSCREC.XXXCITY; /* move city to map*/

    TS0RM001.TSLTRAVL = TS0RW03.TSLTRAVL;
    if (TS0RW03.TS0RWBDT != 0) /* if a date exists*/
      TS0RM001.TSLBEGDT = TS0RW03.TS0RWBDT;
    end
    if (TS0RW03.TS0RWEDT != 0) /* if a date exists*/
      TS0RM001.TSLENDDT = TS0RW03.TS0RWEDT;
    end
    TS0RM001.TSKCOST = TS0RW03.TSKCOST;

    if (TS0RW03.TSLSUNDY == "Y") /* if day flag is equal to yes*/
      TS0RM001.TSLSUNDY = TS0RW03.TSLSUNDY;
    end
    if (TS0RW03.TSLMONDY == "Y") /* if day flag is equal to yes*/
      TS0RM001.TSLMONDY = TS0RW03.TSLMONDY;
    end
    if (TS0RW03.TSLTUEDY == "Y") /* if day flag is equal to yes*/
      TS0RM001.TSLTUEDY = TS0RW03.TSLTUEDY;
    end
    if (TS0RW03.TSLWEDDY == "Y") /* if day flag is equal to yes*/
      TS0RM001.TSLWEDDY = TS0RW03.TSLWEDDY;
    end
    if (TS0RW03.TSLTHRDY == "Y") /* if day flag is equal to yes*/
      TS0RM001.TSLTHRDY = TS0RW03.TSLTHRDY;
    end
    if (TS0RW03.TSLFRIDY == "Y") /* if day flag is equal to yes*/
      TS0RM001.TSLFRIDY = TS0RW03.TSLFRIDY;
    end
    if (TS0RW03.TSLSATDY == "Y") /* if day flag is equal to yes*/
      TS0RM001.TSLSATDY = TS0RW03.TSLSATDY;
    end
  end

  if (COMMAREA.CAADDFL == "N" /* If user cannot perform add*/
   && COMMAREA.CACHGFL == "N") /* and user cannot perform change*/
    set TS0RM001.TSEORIG protect; /* set all detail fields protected*/
    set TS0RM001.TSEDEST protect;
    set TS0RM001.TSLTRAVL protect;
    set TS0RM001.TSLBEGDT protect;
    set TS0RM001.TSLENDDT protect;
    set TS0RM001.TSKCOST protect;
    set TS0RM001.TSLSUNDY protect;
    set TS0RM001.TSLMONDY protect;
    set TS0RM001.TSLTUEDY protect;
    set TS0RM001.TSLWEDDY protect;
    set TS0RM001.TSLTHRDY protect;
    set TS0RM001.TSLFRIDY protect;
    set TS0RM001.TSLSATDY protect;
  end

  if (TS0RW01.TS0RWPSW == "N" /* If no errors*/
   && TS0RM001.TSEORIG != " ") /* and data lines exist*/
    if (COMMAREA.CAADDFL == "Y" /* If user can perform add*/
     || COMMAREA.CACHGFL == "Y") /* or user can perform change*/
      set TS0RM001.TSEORIG cursor; /* set cursor to first line*/
    end
  end

  /* IF EZEMNO NE 0;                   /* No error message to display*/
  /* SET TS0RM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  TS0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0RM001 ;

  TS0RW01.TS0RWPSW = "N"; /* Reset problem switch*/

end // end TS0R100

// Select location from table
Function TS0R110()
   /* ------------------------------------------------------------*/
                /* SELECT LOCATION DATA*/

   /* 1) Clear the record, move key field in, and select row.*/
   /* 2) If an  unexpected return code is recieved:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R110"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RW01.TS0RWPSW = "Y"; /* Indicate Problem*/
    TS0RM001.XXXPRCNM = "TS0R110"; /* Process name*/
  end


end // end TS0R110

// Check attention identifier
Function TS0R200()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If PF16 pressed, exit to published schedule application.*/
   /* 6) If PF17 pressed, exit to schedule inquiry application.*/
   /* 7) If any AI pressed other than ENTER indicate PF/PA key*/
      /* error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "TS0R"; /* restart this application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    XSTSS01(); /* Exit to another application*/
    TS0RM001.XXXPRCNM = "TS0R200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0RM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0RM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0RM001.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
      TS0RW01.TS0RWSWR = "Y"; /* Set request for data to yes*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0RW01.TS0RWPSW = "Y"; /* Indicate problem*/
    end
    set TS0RM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0RM001.XXXPRCNM = "TS0R200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    XSTSS01(); /* Exit to another application*/
    TS0RM001.XXXPRCNM = "TS0R200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0RM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    XSTSS01(); /* Exit to another application*/
    TS0RM001.XXXPRCNM = "TS0R200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0F";
                                   /* set to Published schedule appl*/
    XSTSS01(); /* Exit to another application*/
    TS0RM001.XXXPRCNM = "TS0R200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CATOAP = "TS0G";
                                   /* set to Projected schedule appl*/
    XSTSS01(); /* Exit to another application*/
    TS0RM001.XXXPRCNM = "TS0R200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0RM001.XXXPRCNM = "TS0R200"; /* Process name*/
    TS0RW01.TS0RWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0R200

// Reset highlighted fields
Function TS0R300()
   /* ------------------------------------------------------------*/
             /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset all key fields normal intensity.*/
   /* 2) Reset all detail fields normal intensity.*/
   /* 3) Reset all fast path fields normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0RM001.TSACARCD initialAttributes;
  set TS0RM001.TS5CRAFT initialAttributes;
  set TS0RM001.TSFSHPNB initialAttributes;

  set TS0RM001.TSEORIG initialAttributes;
  set TS0RM001.TSEDEST initialAttributes;
  set TS0RM001.TSKCOST initialAttributes;
  set TS0RM001.TSLTRAVL initialAttributes;
  set TS0RM001.TSLBEGDT initialAttributes;
  set TS0RM001.TSLENDDT initialAttributes;
  set TS0RM001.TSLSUNDY initialAttributes;
  set TS0RM001.TSLMONDY initialAttributes;
  set TS0RM001.TSLTUEDY initialAttributes;
  set TS0RM001.TSLWEDDY initialAttributes;
  set TS0RM001.TSLTHRDY initialAttributes;
  set TS0RM001.TSLFRIDY initialAttributes;
  set TS0RM001.TSLSATDY initialAttributes;

  set TS0RM001.CATOAP initialAttributes;
  set TS0RM001.CAITEM initialAttributes;


end // end TS0R300

// Verify the entered data
Function TS0R400()
   /* ------------------------------------------------------------*/
             /* VERIFY THE ENTERED DATA*/

   /* 1) Check for invalid fast path item entry.*/
   /* 2) If all keys missing, set msg ( enter key fields ).*/
   /* 3) If any keys entered, save and edit keys.*/
      /* a. check to see if row exists in the DTRANS.VPSCHD01.*/
         /* If rows found:*/
          /* . user has change ability -- set change switch.*/
          /* . user has only inq ability -- set inquiry switch.*/
         /* If rows not found:*/
          /* . user has add ability.*/
            /* - select from DTRANS.VASCHD01.*/
              /* . if found - set error.*/
              /* . if not found - set add switch.*/
          /* . else -- no data found to display.*/
   /* 4) If no new keys entered and data exists.*/
      /* a. If add or change flag set:*/
          /* Perform detail edits.*/
          /* Check for modifications in detail:*/
           /* . If none found -- indicate data must be entered.*/
   /* If any errors were found then exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (TS0RM001.CAITEM > " ") /* Application data was entered*/
    set TS0RM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0RW01.TS0RWPSW = "Y"; /* Indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R400"; /* Process name*/
  else

    TS0RW01.TS0RWSWR = "N"; /* set request for data to no*/

    if (TS0RM001.TSACARCD == " " /* If screen keys are blank*/
     && TS0RM001.TS5CRAFT == " " 
     && TS0RM001.TSFSHPNB == " ")
      set TS0RW03 empty; /* reset row working storage*/
      TS0RW03.TSACARCD = TS0RM001.TSACARCD; /* save fields*/
      TS0RW03.TS5CRAFT = TS0RM001.TS5CRAFT;
      TS0RW03.TSFSHPNB = TS0RM001.TSFSHPNB;
      set TS0RM001 initial; /* clear map*/
      TS0RM001.TSACARCD = TS0RW03.TSACARCD;
                                   /* move fields back to map*/
      TS0RM001.TS5CRAFT = TS0RW03.TS5CRAFT;
      TS0RM001.TSFSHPNB = TS0RW03.TSFSHPNB;
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      converseLib.validationFailed(60); /* set error message*/
      TS0RM001.XXXPRCNM = "TS0R400"; /* Process name*/
      exit stack;
    else
      if (TS0RM001.TSACARCD != TS0RW03.TSACARCD /* if any keys changed*/
       || TS0RM001.TS5CRAFT != TS0RW03.TS5CRAFT 
       || TS0RM001.TSFSHPNB != TS0RW03.TSFSHPNB)
        set TS0RW03 empty; /* reset row working storage*/
        TS0R410(); /* do 'inquiry' key edits*/
        TS0RW03.TSACARCD = TS0RM001.TSACARCD; /* save keys*/
        TS0RW03.TS5CRAFT = TS0RM001.TS5CRAFT;
        TS0RW03.TSFSHPNB = TS0RM001.TSFSHPNB;
        set TSLREC empty; /* clear record*/
        TSLREC.TSACARCD = TS0RM001.TSACARCD; /* move fields to rec*/
        TSLREC.TS5CRAFT = TS0RM001.TS5CRAFT;
        TSLREC.TSFSHPNB = TS0RM001.TSFSHPNB;
        TS0R420(); /* select from published schedule*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
          if (COMMAREA.CACHGFL == "Y") /* if user has change ability*/
            TS0RW01.TS0RWFSW = "C"; /* set change switch*/
            TS0RW01.TS0RWSWR = "Y"; /* set request for data to yes*/
            TS0R430(); /* select set of rows VASCHD01 and load in WS*/
          else
            if (COMMAREA.CACHGFL == "N" /* if user has no change ability*/
             && COMMAREA.CAADDFL == "N") /* and user has no add ability*/
              TS0RW01.TS0RWFSW = "I"; /* set change switch*/
              TS0RW01.TS0RWSWR = "Y"; /* set request for data to yes*/
            else
              if (COMMAREA.CACHGFL == "N" /* if user has no change ability*/
               && COMMAREA.CAADDFL == "Y") /* and user has add ability*/
                TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
                converseLib.validationFailed(61); /* schedule exists as published*/
                TS0RM001.XXXPRCNM = "TS0R400"; /* Process name*/
              end
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100 /* if row was not found*/
           && COMMAREA.CAADDFL == "Y")   /* and user has add ability*/
            TS0R440(); /* select row from DTRANS.VASCHD01*/
            if (SQLCA.VAGen_SQLCODE == 0) /* if rows were found*/
              TS0R433(); /* close the selected cursor*/
              converseLib.validationFailed(63); /* schedule exists as published*/
              TS0RM001.XXXPRCNM = "TS0R400"; /* Process name*/
              set TS0RW03 empty; /* clear any saved header data*/
              TS0RW03.TSACARCD = TS0RM001.TSACARCD; /* move in keys*/
              TS0RW03.TSACARNM = TS0RM001.TSACARNM;
              TS0RW03.TS5CRAFT = TS0RM001.TS5CRAFT;
              TS0RW03.TS5NAME = TS0RM001.TS5NAME;
              TS0RW03.TSFSHPNB = TS0RM001.TSFSHPNB;
              TS0RW01.TS0RWSWR = "Y"; /* request screen data*/
            else
              if (SQLCA.VAGen_SQLCODE == 100) /* if rows were not found*/
                TS0RW01.TS0RWFSW = "A"; /* set add switch*/
                TS0R433(); /* close the selected cursor*/
                TS0R450(); /* 'add' key edits*/
                if (TS0RW01.TS0RWPSW == "N") /* if no errors occured*/
                  TS0R460(); /* 'detail edits*/
                end
              end
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100 /* if row was not found*/
             && COMMAREA.CAADDFL == "N")   /* and user has no add ability*/
              TS0R440(); /* select row from DTRANS.VASCHD01*/
              if (SQLCA.VAGen_SQLCODE == 0) /* if rows were found*/
                TS0R433(); /* close the selected cursor*/
                converseLib.validationFailed(63); /* schedule exists as published*/
                TS0RM001.XXXPRCNM = "TS0R400"; /* Process name*/
                set TS0RW03 empty; /* clear any saved header data*/
                TS0RW03.TSACARCD = TS0RM001.TSACARCD; /* move in keys*/
                TS0RW03.TSACARNM = TS0RM001.TSACARNM;
                TS0RW03.TS5CRAFT = TS0RM001.TS5CRAFT;
                TS0RW03.TS5NAME = TS0RM001.TS5NAME;
                TS0RW03.TSFSHPNB = TS0RM001.TSFSHPNB;
                TS0RW01.TS0RWSWR = "Y"; /* request screen data*/
              else
                if (SQLCA.VAGen_SQLCODE == 100) /* if rows were not found*/
                  TS0R433(); /* close the selected cursor*/
                  converseLib.validationFailed(21); /* no data found to display msg*/
                  TS0RM001.XXXPRCNM = "TS0R400"; /* Process name*/
                  set TS0RW03 empty; /* clear any saved header data*/
                  TS0RW03.TSACARCD = TS0RM001.TSACARCD; /* move in keys*/
                  TS0RW03.TSACARNM = TS0RM001.TSACARNM;
                  TS0RW03.TS5CRAFT = TS0RM001.TS5CRAFT;
                  TS0RW03.TS5NAME = TS0RM001.TS5NAME;
                  TS0RW03.TSFSHPNB = TS0RM001.TSFSHPNB;
                  TS0RW01.TS0RWSWR = "Y"; /* request screen data*/
                end
              end
            end
          end
        end
      else
        if (TS0RW01.TS0RWFSW == "C" /* if add or change*/
         || TS0RW01.TS0RWFSW == "A")
          TS0R470(); /* do detail change check*/
          if (TS0RW01.TS0RWDCF == "N") /* if detail change flag eq 'n'*/
            TS0RW01.TS0RWSWR = "Y"; /* request screen data*/
            converseLib.validationFailed(34); /* set data must be entered msg*/
            TS0RM001.XXXPRCNM = "TS0R400"; /* Process name*/
            exit stack; /* exit to redisplay map*/
          else /* if detail was changed*/
            TS0R460(); /* do detail edits*/
          end
        end
        if (TS0RW01.TS0RWPSW == "N") /* Errors were not found*/
          if (TS0RW01.TS0RWFSW == "C" /* if change*/
           && TS0RW01.TS0RWPSW == "N") /* and no errors*/
            TS0RW01.TS0RWFSW = "U"; /* set update switch*/
          end
        end
      end
    end
  end
  if (TS0RW01.TS0RWPSW == "Y") /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0R400

// 'Inquiry' Key edits
Function TS0R410()
   /* ------------------------------------------------------------*/
                 /* 'INQUIRY' KEY EDITS*/

   /* 1) Check shipment number entry.*/
   /* 2) Check craft entered.*/
   /* 3) Check carrier code entered.*/
      /* a. If carrier code valid:*/
         /* Check if craft exists for carrier.*/
   /* If any key errors, then clear map and exit to redisplay map*/
    /* and keys.*/

   /* ------------------------------------------------------------*/

  if (TS0RM001.TSFSHPNB == " ") /* If shipment number blank*/
    converseLib.validationFailed(59); /* error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R410"; /* Process name*/
    set TS0RM001.TSFSHPNB cursor, modified, bold; /* highlight field*/
  end

  if (TS0RM001.TS5CRAFT == " ") /* If craft is missing*/
    converseLib.validationFailed(48); /* error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R410"; /* Process name*/
    set TS0RM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
  end

  if (TS0RM001.TSACARCD == " ") /* If carrier code is missing*/
    converseLib.validationFailed(39); /* error message*/
    TS0RM001.XXXPRCNM = "TS0R410"; /* Process name*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.TSACARNM = " ";
    set TS0RM001.TSACARCD cursor, modified, bold; /* highlight field*/
  else
    set TSAREC empty; /* clear record*/
    TSAREC.TSACARCD = TS0RM001.TSACARCD; /* move in key*/
    TS0R411(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if carrier exists*/
      TS0RW03.TSACARNM = TSAREC.TSACARNM; /* save name*/
      TS0RM001.TSACARNM = TSAREC.TSACARNM; /* move name to map*/
      set TS5REC empty; /* clear record*/
      TS5REC.TSACARCD = TS0RM001.TSACARCD; /* move in keys*/
      TS5REC.TS5CRAFT = TS0RM001.TS5CRAFT;
      TS0R412(); /* select craft*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if craft exists*/
        TS0RW03.TS5NAME = TS5REC.TS5NAME; /* save name*/
        TS0RM001.TS5NAME = TS5REC.TS5NAME; /* move name to map*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if craft does not exist*/
          converseLib.validationFailed(48); /* error message*/
          TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
          TS0RM001.TS5NAME = " "; /* clear name*/
          TS0RM001.XXXPRCNM = "TS0R410"; /* Process name*/
          set TS0RM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
        converseLib.validationFailed(39); /* error message*/
        TS0RM001.XXXPRCNM = "TS0R410"; /* Process name*/
        TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
        TS0RM001.TSACARNM = " ";
        set TS0RM001.TSACARCD cursor, modified, bold; /* highlight field*/
      end
    end
  end

  if (TS0RW01.TS0RWPSW == "Y") /* if errors exist*/
    exit stack; /* exit to redisplay map*/
  end


end // end TS0R410

// Select carrier data
Function TS0R411()
   /* ------------------------------------------------------------*/
                 /* SELECT CARRIER TABLE ROW*/

   /* 1) Set record empty, move key field, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R411"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RW01.TS0RWPSW = "Y"; /* Indicate Problem*/
    TS0RM001.XXXPRCNM = "TS0R411"; /* Process name*/
  end


end // end TS0R411

// Select craft data
Function TS0R412()
   /* ------------------------------------------------------------*/
                 /* SELECT CRAFT TABLE ROW*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R412"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RW01.TS0RWPSW = "Y"; /* Indicate Problem*/
    TS0RM001.XXXPRCNM = "TS0R412"; /* Process name*/
  end


end // end TS0R412

// Select from DTRANS.VPSCHD01
Function TS0R420()
   /* ------------------------------------------------------------*/
                 /* SELECT FROM DTRANS.VPSCHD01*/

   /* 1) Select table row.*/
      /* . if not found then continue.*/
      /* . if found then save the row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2380" ("S ", SQLCA, TSLREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if row not found*/
    TS0RW03.TSACARCD = TSLREC.TSACARCD; /* save all data*/
    TS0RW03.TS5CRAFT = TSLREC.TS5CRAFT;
    TS0RW03.TSFSHPNB = TSLREC.TSFSHPNB;
    TS0RW03.TSEORIG = TSLREC.TSEORIG;
    TS0RW03.TSEDEST = TSLREC.TSEDEST;
    TS0RW03.TSLBEGDT = TSLREC.TSLBEGDT;

     /* save beginning date in mmddyy format*/

    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "G"; /* move date type to record*/
    TA2REC.TA2GRGGN = TSLREC.TSLBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0RW03.TS0RWBDT = TA2REC.TA2GRGAN;
    end

    TS0RW03.TSLENDDT = TSLREC.TSLENDDT;

     /* save ending date in mmddyy format*/

    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "G"; /* move date type to record*/
    TA2REC.TA2GRGGN = TSLREC.TSLENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0RW03.TS0RWEDT = TA2REC.TA2GRGAN;
    end

    TS0RW03.TSLTRAVL = TSLREC.TSLTRAVL;
    TS0RW03.TSLSUNDY = TSLREC.TSLSUNDY;
    TS0RW03.TSLMONDY = TSLREC.TSLMONDY;
    TS0RW03.TSLTUEDY = TSLREC.TSLTUEDY;
    TS0RW03.TSLWEDDY = TSLREC.TSLWEDDY;
    TS0RW03.TSLTHRDY = TSLREC.TSLTHRDY;
    TS0RW03.TSLFRIDY = TSLREC.TSLFRIDY;
    TS0RW03.TSLSATDY = TSLREC.TSLSATDY;
    TS0RW03.TSKCOST = TSLREC.TSKCOST;
    TS0RW03.ZZZSDT = TSLREC.ZZZSDT;
    TS0RW03.ZZZCHGDT = TSLREC.ZZZCHGDT;
    TS0RW03.ZZZCHGTM = TSLREC.ZZZCHGTM;
    TS0RW03.ZZZCHGCT = TSLREC.ZZZCHGCT;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if row found*/

       /* continue*/

    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0R420"; /* Process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPSCHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0RW01.TS0RWPSW = "Y"; /* Indicate Problem*/
      TS0RM001.XXXPRCNM = "TS0R420"; /* Process name*/
    end
  end


end // end TS0R420

// Load working storage rows
Function TS0R430()
   /* ------------------------------------------------------------*/
               /* LOAD WORKING STORAGE ROWS*/

   /* 1) Set record empty and move in key fields.*/
   /* 2) Select set and open cursor.*/
   /* 3) Fetch rows and format data.*/
   /* 4) Close selected set cursor.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* clear records*/
  TSKREC.TSACARCD = TS0RM001.TSACARCD; /* move in fields*/
  TSKREC.TS5CRAFT = TS0RM001.TS5CRAFT;
  TSKREC.TSFSHPNB = TS0RM001.TSFSHPNB;
  TSKREC.TSKSCHED = "P";
  TS0R431(); /* Select set and open cursor*/
  if (SQLCA.VAGen_SQLCODE == 0) /* select was successful*/
    set TS0RW02 empty; /* set working storage empty*/
    TS0RW01.TS0RWIXM = 1; /* initialize index*/
    TS0RW01.TS0RWWSX = 0; /* initialize ws save index*/
    TS0RW01.TS0RWSWC = "N"; /* initialize end of file switch*/
    TS0RW01.TS0RWPSW = "N"; /* initialize problem switch*/
    while (TS0RW01.TS0RWSWC == "N" /* until end of set or problem found*/
     && TS0RW01.TS0RWPSW == "N")
      TS0R432(); /* fetch row and format data*/
    end
  end
  TS0R433(); /* close selected set cursor*/


end // end TS0R430

// Select set and open cursor
Function TS0R431()
   /* ------------------------------------------------------------*/
                 /* SELECT SET AND OPEN CURSOR*/

   /* 1) Set TSNREC record empty and select set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Clear record*/
  TSNREC.TSNFNC = "S1";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R431"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RM001.XXXPRCNM = "TS0R431"; /* Process name*/
    TS0RW01.TS0RWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0R431

// Fetch row and format data
Function TS0R432()
   /* ------------------------------------------------------------*/
                 /* FETCH ROW AND FORMAT DATA*/

   /* 1) Set TSNREC record empty and fetch row.*/
   /* 2) If no row found then set "end on set" flag yes.*/
   /* 3) Format selected row into working storage.*/
   /* 4) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "N1";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0RW01.TS0RWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0RW01.TS0RWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0R432"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0RM001.XXXPRCNM = "TS0R432"; /* Process name*/

    else
      TS0RW02.TSACARCD[TS0RWIXM] = TSKREC.TSACARCD; /* Save data*/
      TS0RW02.TS5CRAFT[TS0RWIXM] = TSKREC.TS5CRAFT;
      TS0RW02.TSFSHPNB[TS0RWIXM] = TSKREC.TSFSHPNB;
      TS0RW02.TSKSEQNB[TS0RWIXM] = TSKREC.TSKSEQNB;
      TS0RW02.TSKSCHED[TS0RWIXM] = TSKREC.TSKSCHED;
      TS0RW02.TSEORIG[TS0RWIXM] = TSKREC.TSEORIG;
      TS0RW02.TSEDEST[TS0RWIXM] = TSKREC.TSEDEST;
      TS0RW02.TSKDPRT[TS0RWIXM] = TSKREC.TSKDPRT;
      TS0RW02.TSKARVL[TS0RWIXM] = TSKREC.TSKARVL;
      TS0RW02.TSKCOST[TS0RWIXM] = TSKREC.TSKCOST;
      TS0RW02.ZZZCHGDT[TS0RWIXM] = TSKREC.ZZZCHGDT;
      TS0RW02.ZZZCHGTM[TS0RWIXM] = TSKREC.ZZZCHGTM;
      TS0RW02.ZZZCHGCT[TS0RWIXM] = TSKREC.ZZZCHGCT;

      TS0RW01.TS0RWWSX = TS0RW01.TS0RWIXM; /* save index*/

      TS0RW01.TS0RWIXM = TS0RW01.TS0RWIXM + 1; /* Increment line index*/
    end
  end


end // end TS0R432

// Close selected set cursor
Function TS0R433()
   /* ------------------------------------------------------------*/
                 /* CLOSE SELECTED SET CURSOR*/

   /* 1) Set TSNREC record empty and close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Clear record*/
  TSNREC.TSNFNC = "C1";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0R433"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RM001.XXXPRCNM = "TS0R433"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0RW01.TS0RWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0R433

// Select row DTRANS.VASCHD01
Function TS0R440()
   /* ------------------------------------------------------------*/
                 /* SELECT ROW FROM DTRANS.VASCHD01*/

   /* 1) Clear the record.*/
   /* 2) Move in key fields.*/
   /* 3) Select the set and open the cursor.*/
   /* 4) Fetch a row from DTRANS.VASCHD01.*/

   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0RM001.TSACARCD; /* move fields*/
  TSKREC.TS5CRAFT = TS0RM001.TS5CRAFT;
  TSKREC.TSFSHPNB = TS0RM001.TSFSHPNB;
  TSKREC.TSKSCHED = "A";

  TS0R431(); /* select the set and open cursor*/
  TS0R441(); /* fetch a row of data*/


end // end TS0R440

// Fetch row
Function TS0R441()
   /* ------------------------------------------------------------*/
                      /* FETCH ROW*/

   /* 1) Set TSNREC record empty and fetch row.*/
   /* 4) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "N1";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

     /* continue*/

  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0RW01.TS0RWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0R441"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0RM001.XXXPRCNM = "TS0R441"; /* Process name*/

    end
  end


end // end TS0R441

// 'Add' key edits
Function TS0R450()
   /* ------------------------------------------------------------*/
                 /* 'ADD' KEY EDITS*/

   /* 1) Check shipment number entry.*/
   /* 2) Check craft entered.*/
   /* 3) Check carrier code entered.*/
      /* a. If carrier code valid:*/
         /* Check if craft exists for carrier.*/
   /* If any key errors, then  exit to redisplay map and keys.*/

   /* ------------------------------------------------------------*/

  if (TS0RM001.TSFSHPNB == " ") /* If shipment number blank*/
    converseLib.validationFailed(59); /* error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R450"; /* Process name*/
    set TS0RM001.TSFSHPNB cursor, modified, bold; /* highlight field*/
  end

  if (TS0RM001.TS5CRAFT == " ") /* If craft is missing*/
    converseLib.validationFailed(48); /* error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R450"; /* Process name*/
    set TS0RM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
  end

  if (TS0RM001.TSACARCD == " ") /* If carrier code is missing*/
    converseLib.validationFailed(39); /* error message*/
    TS0RM001.XXXPRCNM = "TS0R450"; /* Process name*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.TSACARNM = " ";
    set TS0RM001.TSACARCD cursor, modified, bold; /* highlight field*/
  else
    TSAREC.TSACARCD = TS0RM001.TSACARCD; /* move in key*/
    TS0R411(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TS0RW03.TSACARNM = TSAREC.TSACARNM; /* save name*/
      TS0RM001.TSACARNM = TSAREC.TSACARNM; /* move name to map*/
      TS5REC.TSACARCD = TS0RM001.TSACARCD; /* move in keys*/
      TS5REC.TS5CRAFT = TS0RM001.TS5CRAFT;
      TS0R412(); /* select craft*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
       && TS5REC.XXXSTAT == "A")   /* in active status*/
        TS0RW03.TS5NAME = TS5REC.TS5NAME; /* save name*/
        TS0RM001.TS5NAME = TS5REC.TS5NAME; /* move name to map*/
      else
        if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
         && TS5REC.XXXSTAT == "I")   /* in inactive status*/
          converseLib.validationFailed(73); /* error message*/
          TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
          TS0RM001.XXXPRCNM = "TS0R450"; /* Process name*/
          set TS0RM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* if craft does not exist*/
            converseLib.validationFailed(48); /* error message*/
            TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
            TS0RM001.TS5NAME = " "; /* clear map name*/
            TS0RM001.XXXPRCNM = "TS0R450"; /* Process name*/
            set TS0RM001.TS5CRAFT cursor, modified, bold;
                                   /* highlight field*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
       && TSAREC.XXXSTAT == "I")   /* in inactive status*/
        converseLib.validationFailed(72); /* error message*/
        TS0RM001.XXXPRCNM = "TS0R450"; /* Process name*/
        TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
        set TS0RM001.TSACARCD cursor, modified, bold; /* highlight field*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
          converseLib.validationFailed(39); /* error message*/
          TS0RM001.XXXPRCNM = "TS0R450"; /* Process name*/
          TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
          TS0RM001.TSACARNM = " ";
          set TS0RM001.TSACARCD cursor, modified, bold; /* highlight field*/
        end
      end
    end
  end

  if (TS0RW01.TS0RWPSW == "Y") /* if errors exist*/
    exit stack; /* exit to redisplay map*/
  end


end // end TS0R450

// Detail edits
Function TS0R460()
   /* ------------------------------------------------------------*/
                    /* DETAIL EDITS*/

   /* 1) Check for duplicate locations entered.*/
   /* 2) Check that day of week entered.*/
   /* 3) Check for valid rating cost field entered.*/
   /* 4) Perform edit locations, tran time, and dates routine.*/
   /* 5) Check for date overlap errors.*/

   /* If any errors were found, exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (TS0RM001.TSEORIG != " " /* if locations were entered*/
   && TS0RM001.TSEDEST != " ")

      /* check for duplicate locations*/

    if (TS0RM001.TSEDEST == TS0RM001.TSEORIG)
      converseLib.validationFailed(74); /* Error message*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      TS0RM001.XXXPRCNM = "TS0R460"; /* Process name*/
      set TS0RM001.TSEORIG cursor, modified, bold;
      set TS0RM001.TSEDEST modified, bold;
    end
  end

  if (TS0RW01.TS0RWPSW == "N") /* if no errors*/

    TS0R461(); /* check days of week*/

     /* check to see that rating is GT 0*/

    if (TS0RM001.TSKCOST < 0) /* if cost less than 0*/
      converseLib.validationFailed(66); /* Error message*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      TS0RM001.XXXPRCNM = "TS0R460"; /* Process name*/
      set TS0RM001.TSKCOST cursor, modified, bold;
    else
      TS0RW03.TSKCOST = TS0RM001.TSKCOST; /* save the cost*/
    end

    TS0R462(); /* edit locations, tt, and dates*/

  end

  if (TS0RW01.TS0RWPSW == "N") /* if no errors*/
    if (TS0RW03.TSLENDDT < TS0RW03.TSLBEGDT) /* to date must be > from date*/
      converseLib.validationFailed(58); /* Error message*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      TS0RM001.XXXPRCNM = "TS0R460"; /* Process name*/
      set TS0RM001.TSLENDDT cursor, modified, bold;
    end
  end

  if (TS0RW01.TS0RWPSW == "Y") /* if errors exist*/
    exit stack; /* exit to redisplay map*/
  end


end // end TS0R460

// Check days of week entered
Function TS0R461()
   /* ------------------------------------------------------------*/
                 /* CHECK DAYS OF WEEK ENTERED*/

   /* 1) Verify that at least one day of week entered and that*/
      /* only 'y' is used as the indicator letter.*/

   /* ------------------------------------------------------------*/

  if (TS0RM001.TSLSUNDY == " " /* if no day of week entered*/
   && TS0RM001.TSLMONDY == " " 
   && TS0RM001.TSLTUEDY == " " 
   && TS0RM001.TSLWEDDY == " " 
   && TS0RM001.TSLTHRDY == " " 
   && TS0RM001.TSLFRIDY == " " 
   && TS0RM001.TSLSATDY == " ")
    set TS0RM001.TSLSUNDY cursor, modified, bold; /* highlight fields*/
    set TS0RM001.TSLMONDY modified, bold;
    set TS0RM001.TSLTUEDY modified, bold;
    set TS0RM001.TSLWEDDY modified, bold;
    set TS0RM001.TSLTHRDY modified, bold;
    set TS0RM001.TSLFRIDY modified, bold;
    set TS0RM001.TSLSATDY modified, bold;
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(65); /* set error*/
    TS0RM001.XXXPRCNM = "TS0R461"; /* process name*/
  end

  if (TS0RM001.TSLSATDY == " ") /* if data not entered*/
    TS0RW03.TSLSATDY = "N"; /* save data*/
  else
    if (TS0RM001.TSLSATDY != "Y") /* if not a 'y'*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      set TS0RM001.TSLSATDY cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(64); /* set error*/
      TS0RM001.XXXPRCNM = "TS0R461"; /* process name*/
    else
      TS0RW03.TSLSATDY = "Y"; /* save data*/
    end
  end

  if (TS0RM001.TSLFRIDY == " ") /* if data not entered*/
    TS0RW03.TSLFRIDY = "N"; /* save data*/
  else
    if (TS0RM001.TSLFRIDY != "Y") /* if not a 'y'*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      set TS0RM001.TSLFRIDY cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(64); /* set error*/
      TS0RM001.XXXPRCNM = "TS0R461"; /* process name*/
    else
      TS0RW03.TSLFRIDY = "Y"; /* save data*/
    end
  end

  if (TS0RM001.TSLTHRDY == " ") /* if data not entered*/
    TS0RW03.TSLTHRDY = "N"; /* save data*/
  else
    if (TS0RM001.TSLTHRDY != "Y") /* if not a 'y'*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      set TS0RM001.TSLTHRDY cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(64); /* set error*/
      TS0RM001.XXXPRCNM = "TS0R461"; /* process name*/
    else
      TS0RW03.TSLTHRDY = "Y"; /* save data*/
    end
  end

  if (TS0RM001.TSLWEDDY == " ") /* if data not entered*/
    TS0RW03.TSLWEDDY = "N"; /* save data*/
  else
    if (TS0RM001.TSLWEDDY != "Y") /* if not a 'y'*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      set TS0RM001.TSLWEDDY cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(64); /* set error*/
      TS0RM001.XXXPRCNM = "TS0R461"; /* process name*/
    else
      TS0RW03.TSLWEDDY = "Y"; /* save data*/
    end
  end

  if (TS0RM001.TSLTUEDY == " ") /* if data not entered*/
    TS0RW03.TSLTUEDY = "N"; /* save data*/
  else
    if (TS0RM001.TSLTUEDY != "Y") /* if not a 'y'*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      set TS0RM001.TSLTUEDY cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(64); /* set error*/
      TS0RM001.XXXPRCNM = "TS0R461"; /* process name*/
    else
      TS0RW03.TSLTUEDY = "Y"; /* save data*/
    end
  end

  if (TS0RM001.TSLMONDY == " ") /* if data not entered*/
    TS0RW03.TSLMONDY = "N"; /* save data*/
  else
    if (TS0RM001.TSLMONDY != "Y") /* if not a 'y'*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      set TS0RM001.TSLMONDY cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(64); /* set error*/
      TS0RM001.XXXPRCNM = "TS0R461"; /* process name*/
    else
      TS0RW03.TSLMONDY = "Y"; /* save data*/
    end
  end

  if (TS0RM001.TSLSUNDY == " ") /* if data not entered*/
    TS0RW03.TSLSUNDY = "N"; /* save data*/
  else
    if (TS0RM001.TSLSUNDY != "Y") /* if not a 'y'*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      set TS0RM001.TSLSUNDY cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(64); /* set error*/
      TS0RM001.XXXPRCNM = "TS0R461"; /* process name*/
    else
      TS0RW03.TSLSUNDY = "Y"; /* save data*/
    end
  end


end // end TS0R461

// Locations and dates editing
Function TS0R462()
   /* ------------------------------------------------------------*/
              /* LOCATIONS AND DATES EDITING*/

   /* 1) Check end dates for correctness.*/
   /* 2) Check beg dates for correctness.*/
   /* 3) Check transit time for validity.*/
   /* 4) Check orig and dest to see if they are valid.*/

   /* ------------------------------------------------------------*/

  if (TS0RM001.TSLENDDT == 0) /* if date not entered*/
    converseLib.validationFailed(57); /* Error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
    set TS0RM001.TSLENDDT cursor, modified, bold;
  else
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0RM001.TSLENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0RW03.TSLENDDT = TA2REC.TA2GRGGN;
      TS0RW03.TS0RWEDT = TA2REC.TA2GRGAN;
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
      set TS0RM001.TSLENDDT cursor, modified, bold;
    end
  end

  if (TS0RM001.TSLBEGDT == 0) /* if date not entered*/
    converseLib.validationFailed(57); /* Error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
    set TS0RM001.TSLBEGDT cursor, modified, bold;
  else
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0RM001.TSLBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0RW03.TSLBEGDT = TA2REC.TA2GRGGN;
      TS0RW03.TS0RWBDT = TA2REC.TA2GRGAN;
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
      set TS0RM001.TSLBEGDT cursor, modified, bold;
    end
  end

  if (TS0RM001.TSLTRAVL <= 0 /* if transit time not between 0 and 25*/
   || TS0RM001.TSLTRAVL >= 25)
    converseLib.validationFailed(43); /* Error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
    set TS0RM001.TSLTRAVL cursor, modified, bold;
  else
    TS0RW03.TSLTRAVL = TS0RM001.TSLTRAVL; /* save data*/
  end

  if (TS0RM001.TSEDEST == " ") /* if code is not there*/
    TS0RM001.TS0RMCTD = " "; /* clear map city*/
    converseLib.validationFailed(27); /* Error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
    set TS0RM001.TSEDEST cursor, modified, bold;
  else
    set TSCREC empty; /* clear record*/
    TSCREC.TSCLOCCD = TS0RM001.TSEDEST; /* move in key*/
    TS0R110(); /* Select the location*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If location code not found*/
      TS0RM001.TS0RMCTD = " "; /* clear map city*/
      converseLib.validationFailed(27); /* Error message*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
      set TS0RM001.TSEDEST cursor, modified, bold;
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* if location is found*/
        if (TSCREC.XXXSTAT == "A") /* if location is active*/
          TS0RW03.TSEDEST = TS0RM001.TSEDEST; /* save field*/
          TS0RW03.TS0RMCTD = TSCREC.XXXCITY; /* save city name*/
          TS0RM001.TS0RMCTD = TSCREC.XXXCITY;
                                   /* move city name to map*/
        else
          TS0RM001.TS0RMCTD = " "; /* clear map city*/
          converseLib.validationFailed(27); /* Error message*/
          TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
          TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
          set TS0RM001.TSEDEST cursor, modified, bold;
        end
      end
    end
  end

  if (TS0RM001.TSEORIG == " ") /* if code is not there*/
    converseLib.validationFailed(27); /* Error message*/
    TS0RM001.TS0RMCTO = " "; /* clear map city*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
    set TS0RM001.TSEORIG cursor, modified, bold;
  else
    set TSCREC empty; /* clear record*/
    TSCREC.TSCLOCCD = TS0RM001.TSEORIG; /* move in key*/
    TS0R110(); /* Select the location*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If location code not found*/
      TS0RM001.TS0RMCTO = " "; /* clear map city*/
      converseLib.validationFailed(27); /* Error message*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
      set TS0RM001.TSEORIG cursor, modified, bold;
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* if location is found*/
        if (TSCREC.XXXSTAT == "A") /* if location is active*/
          TS0RW03.TSEORIG = TS0RM001.TSEORIG; /* save field*/
          TS0RW03.TS0RMCTO = TSCREC.XXXCITY; /* save city name*/
          TS0RM001.TS0RMCTO = TSCREC.XXXCITY;
                                   /* move city name to map*/
        else
          TS0RM001.TS0RMCTO = " "; /* clear map city*/
          converseLib.validationFailed(27); /* Error message*/
          TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
          TS0RM001.XXXPRCNM = "TS0R462"; /* Process name*/
          set TS0RM001.TSEORIG cursor, modified, bold;
        end
      end
    end
  end


end // end TS0R462

// Check for detail changes
Function TS0R470()
   /* ------------------------------------------------------------*/
                    /* DETAIL CHANGE CHECK*/

   /* 1) Set detail changed flag to no.*/
   /* 2) Check all detail fields against WS to see if any*/
       /* changes have been made.  If they have then set detail*/
       /* changed flag to yes.*/

   /* ------------------------------------------------------------*/

  TS0RW01.TS0RWDCF = "N"; /* initialize detail change flag*/

  if (TS0RM001.TSEORIG != TS0RW03.TSEORIG /* if any fields are changed*/
   || TS0RM001.TSEDEST != TS0RW03.TSEDEST 
   || TS0RM001.TSLTRAVL != TS0RW03.TSLTRAVL
   || TS0RM001.TSLBEGDT != TS0RW03.TS0RWBDT
   || TS0RM001.TSLENDDT != TS0RW03.TS0RWEDT
   || TS0RM001.TSKCOST != TS0RW03.TSKCOST)

    TS0RW01.TS0RWDCF = "Y"; /* set detail change flag to yes*/

  end

  if (TS0RM001.TSLSUNDY == " " /* if map field has not been altered*/
   && TS0RW03.TSLSUNDY == "N")
     /* ***** continue ******/
  else
    if (TS0RM001.TSLSUNDY == "Y" /* if map field has not been altered*/
     && TS0RW03.TSLSUNDY == "Y")
       /* ***** continue ******/
    else
      TS0RW01.TS0RWDCF = "Y"; /* set detail change flag to yes*/
    end
  end

  if (TS0RM001.TSLMONDY == " " /* if map field has not been altered*/
   && TS0RW03.TSLMONDY == "N")
     /* ***** continue ******/
  else
    if (TS0RM001.TSLMONDY == "Y" /* if map field has not been altered*/
     && TS0RW03.TSLMONDY == "Y")
       /* ***** continue ******/
    else
      TS0RW01.TS0RWDCF = "Y"; /* set detail change flag to yes*/
    end
  end

  if (TS0RM001.TSLTUEDY == " " /* if map field has not been altered*/
   && TS0RW03.TSLTUEDY == "N")
     /* ***** continue ******/
  else
    if (TS0RM001.TSLTUEDY == "Y" /* if map field has not been altered*/
     && TS0RW03.TSLTUEDY == "Y")
       /* ***** continue ******/
    else
      TS0RW01.TS0RWDCF = "Y"; /* set detail change flag to yes*/
    end
  end

  if (TS0RM001.TSLWEDDY == " " /* if map field has not been altered*/
   && TS0RW03.TSLWEDDY == "N")
     /* ***** continue ******/
  else
    if (TS0RM001.TSLWEDDY == "Y" /* if map field has not been altered*/
     && TS0RW03.TSLWEDDY == "Y")
       /* ***** continue ******/
    else
      TS0RW01.TS0RWDCF = "Y"; /* set detail change flag to yes*/
    end
  end

  if (TS0RM001.TSLTHRDY == " " /* if map field has not been altered*/
   && TS0RW03.TSLTHRDY == "N")
     /* ***** continue ******/
  else
    if (TS0RM001.TSLTHRDY == "Y" /* if map field has not been altered*/
     && TS0RW03.TSLTHRDY == "Y")
       /* ***** continue ******/
    else
      TS0RW01.TS0RWDCF = "Y"; /* set detail change flag to yes*/
    end
  end

  if (TS0RM001.TSLFRIDY == " " /* if map field has not been altered*/
   && TS0RW03.TSLFRIDY == "N")
     /* ***** continue ******/
  else
    if (TS0RM001.TSLFRIDY == "Y" /* if map field has not been altered*/
     && TS0RW03.TSLFRIDY == "Y")
       /* ***** continue ******/
    else
      TS0RW01.TS0RWDCF = "Y"; /* set detail change flag to yes*/
    end
  end

  if (TS0RM001.TSLSATDY == " " /* if map field has not been altered*/
   && TS0RW03.TSLSATDY == "N")
     /* ***** continue ******/
  else
    if (TS0RM001.TSLSATDY == "Y" /* if map field has not been altered*/
     && TS0RW03.TSLSATDY == "Y")
       /* ***** continue ******/
    else
      TS0RW01.TS0RWDCF = "Y"; /* set detail change flag to yes*/
    end
  end


end // end TS0R470

// Process valid input request
Function TS0R500()
   /* ------------------------------------------------------------*/
            /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If enter was pressed and no errors.*/
      /* a) check for add function*/
      /* b) check for update function*/
      /* c) continue to inquire function*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* enter was pressed*/
   && TS0RW01.TS0RWPSW == "N")      /* and no errors were found*/
    if (TS0RW01.TS0RWFSW == "A") /* If function is 'A'*/
      TS0R510(); /* perform add function*/
    else
      if (TS0RW01.TS0RWFSW == "U") /* If function is 'U'*/
        TS0R520(); /* perform update function*/
      else
        if (TS0RW01.TS0RWFSW == "I") /* If function is 'I'*/
          TS0RW01.TS0RWSWR = "Y"; /* get data for inquiry*/
        end
      end
    end
  end


end // end TS0R500

// Add function
Function TS0R510()
   /* ------------------------------------------------------------*/
                  /* ADD FUNCTION*/

   /* 1) If add function was selected;*/
      /* a) check for duplicate rows*/
      /* b) add rows until end of working storage or error*/
      /* c) reset database if error occurs*/

   /* ------------------------------------------------------------*/

  TS0R440(); /* select from DTRANS.VASCHD01*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if row found*/
    TS0R433(); /* close selected set cursor*/
    converseLib.validationFailed(63); /* set error message*/
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RM001.XXXPRCNM = "TS0R510"; /* Process name*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/
      TS0R433(); /* close selected set cursor*/
      TS0R420(); /* select from DTRANS.VPSCHD01*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if rows were found*/
        converseLib.validationFailed(61); /* set error message*/
        TS0RM001.XXXPRCNM = "TS0R510"; /* Process name*/
        TS0R420(); /* select from DTRANS.VPSCHD01*/
        TS0RW01.TS0RWSWR = "Y"; /* set request for data to yes*/
        TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if rows were not found*/
          TS0R511(); /* explode-add-rows*/
          if (TS0RW03.TSLENDDT >= TS0RW01.TS0RWCDT)
                                   /* if end date GE curr dt*/
            TS0R420(); /* select Dtrans.vpschd01 row*/
            if (SQLCA.VAGen_SQLCODE == 100) /* if no row returned*/
              TS0R514(); /* add Dtrans.vpschd01 row*/
            else
              if (SQLCA.VAGen_SQLCODE == 0) /* if row returned from select*/
                converseLib.validationFailed(12); /* set error message*/
                TS0RM001.XXXPRCNM = "TS0R510"; /* Process name*/
                TS0RW01.TS0RWFSW = "C"; /* change funct back to 'c'*/
                TS0RW01.TS0RWSWR = "N"; /* set req for data to no*/
                TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
                VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                sysLib.rollback();
                VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                 /* reset all updates*/
              end
            end
          end
          TS0RW01.TS0RWIXW = 1; /* set index to 1*/
          while (TS0RW01.TS0RWIXW <= TS0RW01.TS0RWWSX) /* not end of ws*/

            /* *****************************************************/
            /* * This delete call is only inserted to provide     **/
            /* * a contention check.  It should always return a   **/
            /* * sqlcode of 100 if no row has been added by       **/
            /* * by another user.  If 0 is returned then reset is **/
            /* * called and an error is displayed.                **/
            /* *****************************************************/
            /* *****************************************************/

            TS0R512(); /* delete unique row*/

            /* *****************************************************/
            /* *****************************************************/

            if (SQLCA.VAGen_SQLCODE == 100)
                                   /* if no row returned from delete*/
              TS0R513(); /* add new row to database*/
              if (SQLCA.VAGen_SQLCODE != 0) /* if unexpected return code*/
                VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                sysLib.rollback();
                VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                 /* reset all updates*/
                TS0RW01.TS0RWFSW = "C"; /* change funct back to 'c'*/
                TS0RW01.TS0RWSWR = "N"; /* set req for data to yes*/
                TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
                TS0RW01.TS0RWIXW = 101; /* get out of loop*/
              end
            else
              if (SQLCA.VAGen_SQLCODE == 0) /* if row returned from delete*/
                converseLib.validationFailed(12); /* set error message*/
                TS0RM001.XXXPRCNM = "TS0R510"; /* Process name*/
                TS0RW01.TS0RWFSW = "C"; /* change funct back to 'c'*/
                TS0RW01.TS0RWSWR = "N"; /* set req for data to yes*/
                TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
                VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
                VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
                sysLib.rollback();
                VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
                 /* reset all updates*/
                TS0RW01.TS0RWIXW = 101; /* get out of loop*/
              end
            end
            TS0RW01.TS0RWIXW = TS0RW01.TS0RWIXW + 1; /* increment index*/
          end
        end
      end
    end
  end

  set TS0RM001 initial; /* clear map*/

  if (TS0RW01.TS0RWPSW == "Y") /* if error occurred*/
    TS0RM001.TSACARCD = TS0RW03.TSACARCD; /* move keys to map*/
    TS0RM001.TSACARNM = TS0RW03.TSACARNM; /* and descriptions*/
    TS0RM001.TS5CRAFT = TS0RW03.TS5CRAFT;
    TS0RM001.TS5NAME = TS0RW03.TS5NAME;
    TS0RM001.TSFSHPNB = TS0RW03.TSFSHPNB;
  end

  set TS0RW03 empty; /* clear WS record for header*/
  TS0RW01.TS0RWFSW = " "; /* change function back to ' '*/
  TS0RW01.TS0RWSWR = "N"; /* set request for data to no*/

  if (TS0RW01.TS0RWPSW == "N") /* no errors were found*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit adds*/
    converseLib.validationFailed(44); /* indicate update successful*/
    TS0RM001.XXXPRCNM = "TS0R510"; /* process name*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset database*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0R510

// Explode-add-rows
Function TS0R511()
   /* ------------------------------------------------------------*/
                  /* EXPLODE-ADD-ROWS*/

   /* 1) Clear working record for VASCHD01 rows.*/
   /* 2) Find the future date 100 days from the current date.*/
   /* 3) Find the current date for comparison purposes.*/
   /* 4) If the screen beginning date is > the current date*/
        /* - save the screen beginning date as WS date.*/
      /* Else*/
        /* - save the current date as WS date.*/
   /* 5) Compare each day of week(date) with the day of week flag*/
      /* which was set on the screen.*/
      /* - if any days were set*/
        /* . perform the statement group 'TS0RS51' to check dates*/
          /* for valid add rows.*/

        /* ******************************************************/
        /* * Due to CSP's inability to handle complex logic,*/
        /* * the IF statement for checking the day of week flags*/
        /* * and dates had to be broken up into many single If*/
        /* * statements performing basically the same functions.*/
        /* * This accounts for the use of TS0RS51 SGRP.*/
        /* ******************************************************/

   /* ------------------------------------------------------------*/

  set TS0RW02 empty; /* clear working storage*/

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE "; /* move date option to record*/
  TA2REC.TA2DYAOD = 100; /* move 100 to days to add*/
  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Call date routine*/
  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    TS0RW01.TS0RWFDT = TA2REC.TA2GRGGN; /* save as future date*/
  end

  set TA2REC empty; /* Clear date record*/
  TA2REC.TA2DTOPT = "GETDATE "; /* move date option to record*/
  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Call date routine*/
  if (TA2REC.TA2RTNCD == 0) /* if all went well*/
    TS0RW01.TS0RWCDT = TA2REC.TA2GRGGN; /* save current date*/
  end

  set TA2REC empty; /* Clear date record*/
  if (TS0RW03.TSLBEGDT > TS0RW01.TS0RWCDT) /* if beg date > current date*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "G"; /* move date type to record*/
    TA2REC.TA2GRGGN = TS0RW03.TSLBEGDT; /* move in data*/
    call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Call date routine*/
    if (TA2REC.TA2RTNCD == 0) /* if all went well*/
      TS0RW01.TS0RWWDT = TA2REC.TA2GRGGN; /* save WS date*/
    end
  else
    TA2REC.TA2DTOPT = "GETDATE "; /* move date option to record*/
    call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Call date routine*/
    if (TA2REC.TA2RTNCD == 0) /* if all went well*/
      TS0RW01.TS0RWWDT = TA2REC.TA2GRGGN; /* save WS date*/
    end
  end

  TS0RW01.TS0RWIXW = 1;
  TS0RW01.TS0RWIXM = 1;
  while (TS0RW01.TS0RWIXM < 100) /* less than possible exploded lines*/

    if (TA2REC.TA2DYWK == "SUNDAY"
     && TS0RW03.TSLSUNDY == "Y")
      TS0RS51(); /* check valid dates for add explode*/
    else
      if (TA2REC.TA2DYWK == "MONDAY"
       && TS0RW03.TSLMONDY == "Y")
        TS0RS51(); /* check valid dates for add explode*/
      else
        if (TA2REC.TA2DYWK == "TUESDAY"
         && TS0RW03.TSLTUEDY == "Y")
          TS0RS51(); /* check valid dates for add explode*/
        else
          if (TA2REC.TA2DYWK == "WEDNESDAY"
           && TS0RW03.TSLWEDDY == "Y")
            TS0RS51(); /* check valid dates for add explode*/
          else
            if (TA2REC.TA2DYWK == "THURSDAY"
             && TS0RW03.TSLTHRDY == "Y")
              TS0RS51(); /* check valid dates for add explode*/
            else
              if (TA2REC.TA2DYWK == "FRIDAY"
               && TS0RW03.TSLFRIDY == "Y")
                TS0RS51(); /* check valid dates for add explode*/
              else
                if (TA2REC.TA2DYWK == "SATURDAY"
                 && TS0RW03.TSLSATDY == "Y")
                  TS0RS51(); /* check valid dates for add explode*/
                end
              end
            end
          end
        end
      end
    end

    if (TS0RW01.TS0RWIXM < 100) /* if index is still < 100*/
      set TA2REC empty; /* Clear date record*/
      TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
      TA2REC.TA2GRTYP = "G"; /* move date type to record*/
      TA2REC.TA2GRGGN = TS0RW01.TS0RWWDT; /* move in WS date*/
      TA2REC.TA2DYAOD = 1; /* move 1 to days to add*/
      call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Call date routine*/
      if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
        TS0RW01.TS0RWWDT = TA2REC.TA2GRGGN; /* save as WS date*/
      end
      TS0RW01.TS0RWIXM = TS0RW01.TS0RWIXM + 1; /* increment index*/
    end

  end


end // end TS0R511

// Delete row from database
Function TS0R512()
   /* ------------------------------------------------------------*/
                 /* DELETE ROW FROM DATABASE*/

   /* 1) Set record empty, move key fields, and delete table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0RW02.TSACARCD[TS0RWIXW]; /* move fields*/
  TSKREC.TS5CRAFT = TS0RW02.TS5CRAFT[TS0RWIXW];
  TSKREC.TSFSHPNB = TS0RW02.TSFSHPNB[TS0RWIXW];
  TSKREC.TSKSEQNB = TS0RW02.TSKSEQNB[TS0RWIXW];
  TSKREC.TSKSCHED = TS0RW02.TSKSCHED[TS0RWIXW];
  TSKREC.ZZZCHGCT = TS0RW02.ZZZCHGCT[TS0RWIXW];

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "D ";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R512"; /* Process name*/
    TA1REC.TA1LOC = "DELETE A TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RM001.XXXPRCNM = "TS0R512"; /* Process name*/
  end


end // end TS0R512

// Add row to DTRANS.VASCHD01
Function TS0R513()
   /* ------------------------------------------------------------*/
                 /* ADD NEW ROW TO DATABASE*/

   /* 1) Set record empty, move key fields, and add table row.*/
       /* - set change count to 0 for new row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0RW02.TSACARCD[TS0RWIXW]; /* move fields*/
  TSKREC.TS5CRAFT = TS0RW02.TS5CRAFT[TS0RWIXW];
  TSKREC.TSFSHPNB = TS0RW02.TSFSHPNB[TS0RWIXW];
  TSKREC.TSKSEQNB = TS0RW02.TSKSEQNB[TS0RWIXW];
  TSKREC.TSKSCHED = TS0RW02.TSKSCHED[TS0RWIXW];
  TSKREC.TSEORIG = TS0RW02.TSEORIG[TS0RWIXW];
  TSKREC.TSEDEST = TS0RW02.TSEDEST[TS0RWIXW];
  TSKREC.TSKDPRT = TS0RW02.TSKDPRT[TS0RWIXW];
  TSKREC.TSKARVL = TS0RW02.TSKARVL[TS0RWIXW];
  TSKREC.TSKCOST = TS0RW02.TSKCOST[TS0RWIXW];
  TS0RW01.TS0RWYMD = VGVar.currentShortGregorianDate;
  TSKREC.ZZZCHGDT = TS0RW01.TS0RWDTE;
  TS0RW01.TS0RWTM1 = VGVar.currentFormattedTime;
  TS0RW01.TS0RWHR2 = TS0RW01.TS0RWHR1;
  TS0RW01.TS0RWMN2 = TS0RW01.TS0RWMN1;
  TSKREC.ZZZCHGTM = TS0RW01.TS0RWTM2;
  TSKREC.ZZZCHGCT = 0;

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "A";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* add table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RW01.TS0RWIXM = 101; /* get out of loop*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset database*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R513"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RM001.XXXPRCNM = "TS0R513"; /* Process name*/
  end


end // end TS0R513

// Add row to DTRANS.VPSCHD01
Function TS0R514()
   /* ------------------------------------------------------------*/
                 /* ADD ROW TO DTRANS.VPSCHD01*/

   /* 1) Set record empty, move key fields, and add table row.*/
       /* - set change count to 0 for new row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSLREC empty; /* clear record*/

  TSLREC.TSACARCD = TS0RW03.TSACARCD; /* move fields*/
  TSLREC.TS5CRAFT = TS0RW03.TS5CRAFT;
  TSLREC.TSFSHPNB = TS0RW03.TSFSHPNB;
  TSLREC.TSEORIG = TS0RW03.TSEORIG;
  TSLREC.TSEDEST = TS0RW03.TSEDEST;
  TSLREC.TSLBEGDT = TS0RW03.TSLBEGDT;
  TSLREC.TSLENDDT = TS0RW03.TSLENDDT;
  TSLREC.TSLTRAVL = TS0RW03.TSLTRAVL;
  TSLREC.TSLSUNDY = TS0RW03.TSLSUNDY;
  TSLREC.TSLMONDY = TS0RW03.TSLMONDY;
  TSLREC.TSLTUEDY = TS0RW03.TSLTUEDY;
  TSLREC.TSLWEDDY = TS0RW03.TSLWEDDY;
  TSLREC.TSLTHRDY = TS0RW03.TSLTHRDY;
  TSLREC.TSLFRIDY = TS0RW03.TSLFRIDY;
  TSLREC.TSLSATDY = TS0RW03.TSLSATDY;
  TSLREC.TSKCOST = TS0RW03.TSKCOST;
  TS0RW01.TS0RWYMD = VGVar.currentShortGregorianDate;
  TSLREC.ZZZSDT = TS0RW01.TS0RWDTE;
  TSLREC.ZZZCHGDT = TS0RW01.TS0RWDTE;
  TS0RW01.TS0RWTM1 = VGVar.currentFormattedTime;
  TS0RW01.TS0RWHR2 = TS0RW01.TS0RWHR1;
  TS0RW01.TS0RWMN2 = TS0RW01.TS0RWMN1;
  TSLREC.ZZZCHGTM = TS0RW01.TS0RWTM2;
  TSLREC.ZZZCHGCT = 0;

  call "IO2380" ("A ", SQLCA, TSLREC) {isNoRefresh = yes, isExternal = yes}; /* update table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* return code not OK*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RW01.TS0RWIXM = 101; /* get out of loop*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset database*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R514"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPSCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RM001.XXXPRCNM = "TS0R514"; /* Process name*/
  end


end // end TS0R514

// Update function
Function TS0R520()
   /* ------------------------------------------------------------*/
                  /* UPDATE FUNCTION*/

   /* 1) If update function was selected;*/
      /* a) select unique rows from database*/
      /* b) delete rows if not already updated*/
      /* c) add new rows to database*/

   /* ------------------------------------------------------------*/

  TS0RW01.TS0RWSCT = TS0RW02.ZZZCHGCT[1]; /* save change count*/
  TS0RW01.TS0RWIXW = 1; /* set index*/
  while (TS0RW01.TS0RWIXW <= TS0RW01.TS0RWWSX) /* not end of ws*/
    TS0R521(); /* select unique*/
    if (TSKREC.ZZZCHGCT != TS0RW01.TS0RWSCT) /* if row not found*/
      TS0R420(); /* get new updated data*/
      TS0RW03.TSACARNM = TS0RM001.TSACARNM; /* be sure descr in WS*/
      TS0RW03.TS5NAME = TS0RM001.TS5NAME;
      converseLib.validationFailed(12); /* set error message*/
      TS0RM001.XXXPRCNM = "TS0R520"; /* Process name*/
      TS0RW01.TS0RWFSW = "C"; /* change function back to 'c'*/
      TS0RW01.TS0RWSWR = "Y"; /* set request for data to yes*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* reset all updates*/
      TS0RW01.TS0RWIXW = 101; /* get out of loop*/
      exit stack; /* exit to redisplay map*/
    else
      if (TSKREC.ZZZCHGCT == TS0RW01.TS0RWSCT) /* if row was found*/
        TS0R512(); /* delete the row in the database*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if row was found*/

           /* continue*/

        else
          if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
            converseLib.validationFailed(69); /* set error message*/
            TS0RM001.XXXPRCNM = "TS0R520"; /* Process name*/
            TS0RW01.TS0RWFSW = "C"; /* change function back to 'c'*/
            TS0RW01.TS0RWSWR = "N"; /* set request for data to yes*/
            TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* reset all updates*/
            TS0RW01.TS0RWIXW = 100; /* get out of loop*/
          end
        end
      end
    end
    TS0RW01.TS0RWIXW = TS0RW01.TS0RWIXW + 1; /* increment index*/
  end

  TS0R511(); /* explode-add-rows*/

  if (TS0RW03.TSLENDDT < TS0RW01.TS0RWCDT) /* if end dt LT current date*/
    TS0R522(); /* delete row from DTRANS.VPSCHD01*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      converseLib.validationFailed(69); /* set error message*/
      TS0RM001.XXXPRCNM = "TS0R520"; /* Process name*/
      TS0RW01.TS0RWFSW = "C"; /* change function back to 'c'*/
      TS0RW01.TS0RWSWR = "N"; /* set request for data to yes*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* reset all updates*/
    end
  else
    TS0RW01.TS0RWIXW = 1; /* set index*/
    while (TS0RW01.TS0RWIXW <= TS0RW01.TS0RWWSX) /* not end of ws*/
      TS0R523(); /* add new row to database*/
      if (SQLCA.VAGen_SQLCODE != 0) /* unexpected error*/
        TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* reset all updates*/
      end
      TS0RW01.TS0RWIXW = TS0RW01.TS0RWIXW + 1; /* increment index*/
    end
    TS0R524(); /* Update row in VPSCHD01*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      TS0R420(); /* get new updated data*/
      TS0RW03.TSACARNM = TS0RM001.TSACARNM; /* be sure descr in WS*/
      TS0RW03.TS5NAME = TS0RM001.TS5NAME;
      converseLib.validationFailed(12); /* set error message*/
      TS0RM001.XXXPRCNM = "TS0R520"; /* Process name*/
      TS0RW01.TS0RWFSW = "C"; /* change function back to 'c'*/
      TS0RW01.TS0RWSWR = "Y"; /* set request for data to yes*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* reset all updates*/
      exit stack; /* exit to redisplay map*/
    end
  end

  set TS0RM001 initial; /* clear map*/

  if (TS0RW01.TS0RWPSW == "Y") /* if errors occurred*/
    TS0RM001.TSACARCD = TS0RW03.TSACARCD; /* move keys to map*/
    TS0RM001.TSACARNM = TS0RW03.TSACARNM; /* and descriptions*/
    TS0RM001.TS5CRAFT = TS0RW03.TS5CRAFT;
    TS0RM001.TS5NAME = TS0RW03.TS5NAME;
    TS0RM001.TSFSHPNB = TS0RW03.TSFSHPNB;
  end

  set TS0RW03 empty; /* clear WS record for header*/
  TS0RW01.TS0RWFSW = " "; /* change function back to 'c'*/
  TS0RW01.TS0RWSWR = "N"; /* set request for data to no*/

  if (TS0RW01.TS0RWPSW == "N") /* no errors were found*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit adds*/
    converseLib.validationFailed(44); /* indicate update successful*/
    TS0RM001.XXXPRCNM = "TS0R520"; /* process name*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset data base*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0R520

// Select unique DTRANS.VASCHD01
Function TS0R521()
   /* ------------------------------------------------------------*/
                 /* SELECT UNIQUE FROM DTRANS.VASCHD01*/

   /* 1) Select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0RW02.TSACARCD[TS0RWIXW]; /* move fields*/
  TSKREC.TS5CRAFT = TS0RW02.TS5CRAFT[TS0RWIXW];
  TSKREC.TSFSHPNB = TS0RW02.TSFSHPNB[TS0RWIXW];
  TSKREC.TSKSEQNB = TS0RW02.TSKSEQNB[TS0RWIXW];
  TSKREC.TSKSCHED = TS0RW02.TSKSCHED[TS0RWIXW];

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "S";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R521"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RM001.XXXPRCNM = "TS0R521"; /* Process name*/
  end


end // end TS0R521

// Delete row DTRANS.VPSCHD01
Function TS0R522()
   /* ------------------------------------------------------------*/
                 /* DELETE ROW FROM DTRANS.VPSCHD01*/

   /* 1) Set record empty, move key fields, and delete table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSLREC empty; /* clear record*/

  TSLREC.TSACARCD = TS0RW03.TSACARCD; /* move fields*/
  TSLREC.TS5CRAFT = TS0RW03.TS5CRAFT;
  TSLREC.TSFSHPNB = TS0RW03.TSFSHPNB;

  call "IO2380" ("D ", SQLCA, TSLREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R522"; /* Process name*/
    TA1REC.TA1LOC = "DELETE A TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RM001.XXXPRCNM = "TS0R522"; /* Process name*/
  end


end // end TS0R522

// Add update row DTRANS.VASCHD01
Function TS0R523()
   /* ------------------------------------------------------------*/
                 /* ADD UPDATED ROW TO DATABASE*/

   /* 1) Set record empty, move key fields, and add table row.*/
       /* - increment change count (+1) row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSKREC empty; /* clear record*/

  TSKREC.TSACARCD = TS0RW02.TSACARCD[TS0RWIXW]; /* move fields*/
  TSKREC.TS5CRAFT = TS0RW02.TS5CRAFT[TS0RWIXW];
  TSKREC.TSFSHPNB = TS0RW02.TSFSHPNB[TS0RWIXW];
  TSKREC.TSKSEQNB = TS0RW02.TSKSEQNB[TS0RWIXW];
  TSKREC.TSKSCHED = TS0RW02.TSKSCHED[TS0RWIXW];
  TSKREC.TSEORIG = TS0RW02.TSEORIG[TS0RWIXW];
  TSKREC.TSEDEST = TS0RW02.TSEDEST[TS0RWIXW];
  TSKREC.TSKDPRT = TS0RW02.TSKDPRT[TS0RWIXW];
  TSKREC.TSKARVL = TS0RW02.TSKARVL[TS0RWIXW];
  TSKREC.TSKCOST = TS0RW02.TSKCOST[TS0RWIXW];
  TS0RW01.TS0RWYMD = VGVar.currentShortGregorianDate;
  TSKREC.ZZZCHGDT = TS0RW01.TS0RWDTE;
  TS0RW01.TS0RWTM1 = VGVar.currentFormattedTime;
  TS0RW01.TS0RWHR2 = TS0RW01.TS0RWHR1;
  TS0RW01.TS0RWMN2 = TS0RW01.TS0RWMN1;
  TSKREC.ZZZCHGTM = TS0RW01.TS0RWTM2;
  TSKREC.ZZZCHGCT = TS0RW01.TS0RWSCT + 1; /* increment change count*/

  set TSNREC empty; /* clear record*/
  TSNREC.TSNFNC = "A ";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    TS0RW01.TS0RWIXW = 101; /* get out of loop*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset database*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0R523"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0RM001.XXXPRCNM = "TS0R523"; /* Process name*/
  end


end // end TS0R523

// Update row in DTRANS.VPSCHD01
Function TS0R524()
   /* ------------------------------------------------------------*/
                 /* UPDATE ROW IN DTRANS.VPSCHD01*/

   /* 1) Set record empty, move key fields, and update table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSLREC empty; /* clear record*/

  TSLREC.TSACARCD = TS0RW03.TSACARCD; /* move fields*/
  TSLREC.TS5CRAFT = TS0RW03.TS5CRAFT;
  TSLREC.TSFSHPNB = TS0RW03.TSFSHPNB;
  TSLREC.TSEORIG = TS0RW03.TSEORIG;
  TSLREC.TSEDEST = TS0RW03.TSEDEST;
  TSLREC.TSLBEGDT = TS0RW03.TSLBEGDT;
  TSLREC.TSLENDDT = TS0RW03.TSLENDDT;
  TSLREC.TSLTRAVL = TS0RW03.TSLTRAVL;
  TSLREC.TSLSUNDY = TS0RW03.TSLSUNDY;
  TSLREC.TSLMONDY = TS0RW03.TSLMONDY;
  TSLREC.TSLTUEDY = TS0RW03.TSLTUEDY;
  TSLREC.TSLWEDDY = TS0RW03.TSLWEDDY;
  TSLREC.TSLTHRDY = TS0RW03.TSLTHRDY;
  TSLREC.TSLFRIDY = TS0RW03.TSLFRIDY;
  TSLREC.TSLSATDY = TS0RW03.TSLSATDY;
  TSLREC.TSKCOST = TS0RW03.TSKCOST;
  TSLREC.ZZZSDT = TS0RW03.ZZZSDT;
  TS0RW01.TS0RWYMD = VGVar.currentShortGregorianDate;
  TSLREC.ZZZCHGDT = TS0RW01.TS0RWDTE;
  TS0RW01.TS0RWTM1 = VGVar.currentFormattedTime;
  TS0RW01.TS0RWHR2 = TS0RW01.TS0RWHR1;
  TS0RW01.TS0RWMN2 = TS0RW01.TS0RWMN1;
  TSLREC.ZZZCHGTM = TS0RW01.TS0RWTM2;
  TSLREC.ZZZCHGCT = TS0RW03.ZZZCHGCT;

  call "IO2380" ("U ", SQLCA, TSLREC) {isNoRefresh = yes, isExternal = yes}; /* update table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* return code OK*/

      /* continue*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* return code OK*/
      converseLib.validationFailed(12); /* Indicate row was already updated*/
      TS0RM001.XXXPRCNM = "TS0R524"; /* Process name*/
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TS0RW01.TS0RWPSW = "Y"; /* indicate problem*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* reset database*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0R524"; /* Process name*/
      TA1REC.TA1LOC = "UPDATE A TABLE ROW";
      TA1REC.TA1MAP = "TS0RM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPSCHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0RM001.XXXPRCNM = "TS0R524"; /* Process name*/
    end
  end


end // end TS0R524

// Check dates for explode row
Function TS0RS51()
   /* ------------------------------------------------------------*/
              /* CHECK DATES FOR EXPLODE ADD ROWS*/

    /* ******************************************************/
    /* * This statement group is called by TS0R511.*/
    /* * It performs the date checking for loop control and*/
    /* * also moves valid rows to TS0RW02 working storage*/
    /* * in preparation to add the rows to DTRANS.VASCHD01.*/
    /* ******************************************************/

    /* 1) Set date record empty.*/
    /* 2) Add travel days to current working storage date.*/
    /* 3) If new arrival date is greater than the screen end*/
       /* date or if it is greater than the future date*/
       /* - get out of the loop.*/
       /* Else*/
       /* - add row data to working storage.*/

   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* move date type to record*/
  TA2REC.TA2GRGGN = TS0RW01.TS0RWWDT; /* move in WS date*/
  TA2REC.TA2DYAOD = TS0RW03.TSLTRAVL; /* move tt to days to add*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Call date routine*/
  if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
    if (TA2REC.TA2GRGGN >= TS0RW01.TS0RWFDT /* if date > future date*/
     || TA2REC.TA2GRGGN > TS0RW03.TSLENDDT) /* if date > end date*/
      TS0RW01.TS0RWWSX = TS0RW01.TS0RWIXW - 1; /* save row number*/
      TS0RW01.TS0RWIXM = 999; /* get out of loop*/
    else
      TS0RW02.TSKDPRT[TS0RWIXW] = TS0RW01.TS0RWWDT; /* save data*/
      TS0RW02.TSKARVL[TS0RWIXW] = TA2REC.TA2GRGGN;
      TS0RW02.TSACARCD[TS0RWIXW] = TS0RW03.TSACARCD;
      TS0RW02.TS5CRAFT[TS0RWIXW] = TS0RW03.TS5CRAFT;
      TS0RW02.TSFSHPNB[TS0RWIXW] = TS0RW03.TSFSHPNB;
      TS0RW02.TSKSEQNB[TS0RWIXW] = TS0RW01.TS0RWIXW;
      TS0RW02.TSKSCHED[TS0RWIXW] = "P";
      TS0RW02.TSEORIG[TS0RWIXW] = TS0RW03.TSEORIG;
      TS0RW02.TSEDEST[TS0RWIXW] = TS0RW03.TSEDEST;
      TS0RW02.TSKCOST[TS0RWIXW] = TS0RW03.TSKCOST;
      TS0RW01.TS0RWWSX = TS0RW01.TS0RWIXW; /* save index*/
      TS0RW01.TS0RWIXW = TS0RW01.TS0RWIXW + 1; /* increment index*/
    end
  end


end // end TS0RS51

//*** RECORD=TS0RW01 ****
// Working storage for TS0F - Published schedule maintenance
// ***********************
Record TS0RW01 type basicRecord
  10 TSNFNC TSNFNC ; 
  10 TS0RWIXM TS0RWIXM ; 
  10 TS0RWIXW TS0RWIXW ; 
  10 TS0RWWSX TS0RWWSX ; 
  10 TS0RWPSW TS0RWPSW ; 
  10 TS0RWSWR TS0RWSWR ; 
  10 TS0RWSWC TS0RWSWC ; 
  10 TS0RWFSW TS0RWFSW ; 
  10 TS0RWDCF TS0RWDCF ; 
  10 TS0RWSCT TS0RWSCT ; 
  10 TS0RWFDT TS0RWFDT ; 
  10 TS0RWCDT TS0RWCDT ; 
  10 TS0RWWDT TS0RWWDT ; 
  10 TS0RWDTE TS0RWDTE ; 
    15 TS0RWCEN TS0RWCEN ; 
    15 TS0RWYMD TS0RWYMD ; 
  10 TS0RWMDY TS0RWMDY ; 
    15 TS0RWMM TS0RWMM ; 
    15 TS0RWDD TS0RWDD ; 
    15 TS0RWYY TS0RWYY ; 
  10 TS0RWTM1 TS0RWTM1 ; 
    15 TS0RWHR1 TS0RWHR1 ; 
    15 TS0RWC1 TS0RWC1 ; 
    15 TS0RWMN1 TS0RWMN1 ; 
    15 TS0RWC2 TS0RWC2 ; 
    15 TS0RWSEC TS0RWSEC ; 
  10 TS0RWTM2 TS0RWTM2 ; 
    15 TS0RWHR2 TS0RWHR2 ; 
    15 TS0RWMN2 TS0RWMN2 ; 
end // end TS0RW01

//*** RECORD=TS0RW02 ****
// Working data record for TS0R - DTRANS.VASCHD01
// ***********************
Record TS0RW02 type basicRecord
  10 TS0RW2LN TS0RW2LN [100] ; 
    15 TSACARCD TSACARCD ; 
    15 TS5CRAFT TS5CRAFT ; 
    15 TSFSHPNB TSFSHPNB ; 
    15 TSKSEQNB TSKSEQNB ; 
    15 TSKSCHED TSKSCHED ; 
    15 TSEORIG TSEORIG ; 
    15 TSEDEST TSEDEST ; 
    15 TSKDPRT TSKDPRT ; 
    15 TSKARVL TSKARVL ; 
    15 TSKCOST TSKCOST ; 
    15 ZZZCHGDT ZZZCHGDT ; 
    15 ZZZCHGTM ZZZCHGTM ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end TS0RW02

//*** RECORD=TS0RW03 ****
// Working data record for TS0R - DTRANS.VPSCHD01
// ***********************
Record TS0RW03 type basicRecord
  10 TSACARCD TSACARCD ; 
  10 TSACARNM TSACARNM ; 
  10 TS5CRAFT TS5CRAFT ; 
  10 TS5NAME TS5NAME ; 
  10 TSFSHPNB TSFSHPNB ; 
  10 TSEORIG TSEORIG ; 
  10 TS0RMCTO TS0RMCTO ; 
  10 TSEDEST TSEDEST ; 
  10 TS0RMCTD TS0RMCTD ; 
  10 TSLBEGDT TSLBEGDT ; 
  10 TS0RWBDT TS0RWBDT ; 
  10 TSLENDDT TSLENDDT ; 
  10 TS0RWEDT TS0RWEDT ; 
  10 TSLTRAVL TSLTRAVL ; 
  10 TSLSUNDY TSLSUNDY ; 
  10 TSLMONDY TSLMONDY ; 
  10 TSLTUEDY TSLTUEDY ; 
  10 TSLWEDDY TSLWEDDY ; 
  10 TSLTHRDY TSLTHRDY ; 
  10 TSLFRIDY TSLFRIDY ; 
  10 TSLSATDY TSLSATDY ; 
  10 TSKCOST TSKCOST ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0RW03

// destination city
DataItem TS0RMCTD char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// origin city
DataItem TS0RMCTO char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line ws2
DataItem TS0RW2LN char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_SCHED_BEG_DT in mmddyy
DataItem TS0RWBDT num(6)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  col 1
DataItem TS0RWC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  col2
DataItem TS0RWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date
DataItem TS0RWCDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// Working century
DataItem TS0RWCEN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail changed flag
DataItem TS0RWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  day
DataItem TS0RWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working date
DataItem TS0RWDTE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_SCHED_END_DT in mmddyy
DataItem TS0RWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// future date
DataItem TS0RWFDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// Add/delete function switch
DataItem TS0RWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  hour 1
DataItem TS0RWHR1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  hour 2
DataItem TS0RWHR2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index 1
DataItem TS0RWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for ws
DataItem TS0RWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working month day year
DataItem TS0RWMDY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  month
DataItem TS0RWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

//  minute 1
DataItem TS0RWMN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  minute 2
DataItem TS0RWMN2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0RWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save change count
DataItem TS0RWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second1
DataItem TS0RWSEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0RWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0RWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working time 1
DataItem TS0RWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working time 2
DataItem TS0RWTM2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage date
DataItem TS0RWWDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// WS Save index
DataItem TS0RWWSX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working year month day
DataItem TS0RWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

//  year
DataItem TS0RWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

