package ts0y;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pv.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=TS0Y ****
// This program allows users to browse through a shipments
// Container packing list totals.  Pfkeys 13 - 19 will allow
// a user to perform more specific add/change/delete/inquiry
// functions on specific pieces of a shipment's container
// packing lists.  A row must be selected with an 's' in the
// select field of the desired row prior to pressing a pfkey.
// Exceptions are PF13 and PF18.  PF13 will add to an existing
// container if a selection is made.  PF18 does not require a
// selection.
// 
// A user with inquiry capability can access options:
//       16 - view a containers cartons
//       18 - browse this shipments packing lists
// Inquiry capability will also allow inquiry of pl and
// container header screens by selecting (s) a map row and
// hitting enter.
// 
// A user with change capability can access options:
//       14 - change a packing list
//       17 - move a packing list
//       19 - change a container
// 
// A user with add capability can access options:
//       13 - add to a container or add new containers
// 
// A user with delete capability can access options:
//       15 - delete a packing list
// 
// 
// control     date     name     description of change
// -------   --------  ------   -------------------------------
//           06/17/88  cepple   New application.
// ts#003    07/11/90  cepple   Allow entry of cust xref in
//                              PF14 change style.
// ts#005    07/12/90  cepple   Allow entry of container number
//                              in map 4.
// ts#012    08/02/90  cepple   Add gpc to heading of map 1.
// fix       08/16/90  cepple   If packing list is not in any
//                              other containers after delete,
//                              then delete packing list.
// fix       09/14/90  cepple   open up pl key fields for user
//                              entry on map 2.
// fix       10/18/90  cepple   fix index out of bounds problem
//                              in TS0Y360 and commit logic.
// fix       10/30/90  cepple   add edit in map 2 to check for
//                              duplicate packing list when
//                              keys are changed.
// ts#37     11/07/90  DHUFFM   open color field on map 2 for
//                              user entry.
// TS#155    12/26/90  KSTOKK   Verify map 2 data even if new
//                              data has not been entered and
//                              make maps 2A/2B PO and PO ID
//                              fields protected.
// TS#167    02/06/91  KSTOKK   Set mode code to blanks if
//                              Carr/Craft not found.
// TS#179    03/08/91  DHUFFM   Change to not match on quality
//                              code for p.o.
// TS#000    04/09/91  SFORD    Table Changes 'TSIREC,TSOREC'
//                              Increased the length of "BOL"
// TS#000    06/10/91  CEPPLE   Table changes 6/10/91. Change
//                              structure length TS0YW04.
// TS#208    06/18/91  DHUFFM   Add the ability to change cntnr
//                              status to 'IT', 'CC', or 'RC'.
//           07/02/91  CEPPLE   Fix to allow container updates
//                              even on 'RC' containers.
// TS#233    11/06/91  SFORD    Bgrade-SO/PO chgs. Add Left
//                              screen and add SO Data to M002.
//                              M003, M005. Modify logic to
//                              include S.O. data in edits.
// TS#237    01/30/92  KSTOKK   Change to only give a warning
//                              if PO status NE 'OP'.
// TS#233    02/24/92  KSTOKK   Bgrade-SO/PO chgs.
// TS#233    03/04/92  SFORD    Bug in loading 0 into part char
// TS#247    04/09/92  KSTOKK   Stop MOVE STYLE process if user
//                              tries to move style from one
//                              cntnr to another which is al-
//                              ready assigned to that style.
// TS#FIX    07/07/92  SFORD    Set to "ER' status if PF14 func
//                              has no CXREF for Bgrade shpmnt
// TS#FIX    08/06/92  SFORD    Carton and qtys being cleared
//                              when PO Nbr=0 and then entered
// TS#306    01/14/93  TGIEBE   Display warning message on map
//                              when invalid po number entered.
// TS#fix    06/09/93  RCHINI   TS0Y can abend on duplicate
//                              containers.  Fixed application
//                              to not blow up on duplicate
//                              containers for a shipment.
// TS#999    08/13/93  SFORD    Table changes - add user id &
//                              structure length TS0YW04.
// TS#999    03/09/94  SFORD    Table changes - 03/11/94
// TS#999    04/19/94  GAMEN    Add 4 new fields to map 2.
//                              air req nbr (display only) and
//                              cert. of orig, export license,
//                              and GSP nbr, all enterable. no
//                              edits on these 3.
// TS#999    04/19/95  SLEWIS   CHG SO LENGTH
// ASW001    01/17/96  HKEMPE   Added a PF key to submit print
//                              Inbound containers report.
// TS#373    04/30/96  BKEPFO   Added a field to TS0YM002 and
//                              TS0YM004 to display the last
//                              one to update the table.
// TS#999    05/14/96  BKEPFO   Fixed the attribute on field
//                              literal "NIKE ID:", from green
//                              back to blue.
// TS#279    07/31/96  DKESLE   changed processing for 'AR'
//                              shipment types
// TS#000    11/07/96  JCARL1   Remove alarm from msg display.
// TS1570    03/17/98  skamba   Sales man samples fix for
//                              undershipment( refer :
//                              TS0Y253)
// TS1512    09/03/98  MHUYNH   Add PO line item seq nbr to scr
// TS0000    12/29/98  VKUMAR   Fixed SO population.
// TS00      01/13/98  MHUYNH   Use SA instead of SO in TS0Y259
//           02/05/99  lrao     incresed the lenght of weight
// TS2342    08/20/99  vgotti   proc TS0Y260 is changed to take
//                              care of back up procedure
//                              proc TS0Y201 is created newly
//                              to call TS4200 for back up
// TS00      11/19/99  LRAO     CHANGING THE XRE MESSAGES
// TS000     07/12/00  npulug   Modified stmtgrp/procs TS0YS76,
//                              TS0YS17,TS0YS19,TS0YS21 to
//                              consider the new Query (C25) in
//                              IO3310.
// TS000     11/27/00  pghosh   Incorporated sizeid validation,
//                              TS0Y263*.
// TS000     12/07/01  SKUMA4   Incorporated changes to avoid
//                              processing of US & CANADA
//                              shipments.
//                              changed Proc: TS0Y160 ,TS0Y200
//                              Added Proc:   TS0Y470
// *********************
Program TS0Y type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC4REC PC4REC; // record
  PC5REC PC5REC; // record
  PC6REC PC6REC; // record
  PCFREC PCFREC; // record
  PCMREC PCMREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS0YW01 TS0YW01; // record
  TS0YW02 TS0YW02; // record
  TS0YW03 TS0YW03; // record
  TS0YW04 TS0YW04; // record
  TS0YW05 TS0YW05; // record
  TS0YW06 TS0YW06; // record
  TS5REC TS5REC; // record
  TSCREC TSCREC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSNREC TSNREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  TSXREC TSXREC; // record
  VCPLHD04 VCPLHD04; // record
  VPLAUX01 VPLAUX01; // record
  VTSLOC02 VTSLOC02; // record
  WTS4001 WTS4001; // record
  WTS4201 WTS4201; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSSTBL {deleteAfterUse = yes}; // table
  use YCNTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XRETBL {deleteAfterUse = yes}; // table
  use TS0YM.TS0YM001,  // forms
      TS0YM.TS0YM002, 
      TS0YM.TS0YM003, 
      TS0YM.TS0YM004, 
      TS0YM.TS0YM005, 
      TS0YM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Shipment Container Browse Screen.*/
     /* ------------------------------------------------------------*/

    set TS0YW01 empty; /* Initialize working storage*/
    set TS0YW02 empty; /* Initialize temporary storage*/
    set TS0YW03 empty; /* Initialize carton key save record*/
    set TS0YW04 empty; /* Initialize VCPLHD03 array save record*/
    set FY1REC empty;
    set OP1REC empty;
    set OP2REC empty;
    set PC2REC empty;
    set PC3REC empty;
    set PC4REC empty;
    set PC6REC empty;
    set PCFREC empty;
    set PCMREC empty;
    set PCYREC empty;
    set PC2REC empty;
    set PG2REC empty;
    set TAEREC empty;
    set TSCREC empty;
    set TSFREC empty;
    set TSNREC empty;
    set TSGREC empty;
    set TSHREC empty;
    set VCPLHD04 empty;
    set TSNREC empty;
    set TSOREC empty;
    set TSTREC empty;
    set TSXREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0YM001 initial; /* Initialize map1 output area*/
    set TS0YM002 initial; /* Initialize map2 output area*/
    set TS0YM003 initial; /* Initialize map3 output area*/
    set TS0YM004 initial; /* Initialize map4 output area*/
    set TS0YM005 initial; /* Initialize map5 output area*/

    TS0YW01.TS0YWMAP = "1 "; /* Indicate map to be displayed*/
    TS0YW01.TS0YWSWR = "Y"; /* Indicate request for data*/
    TS0YW01.TS0YWPSW = "N"; /* Initialize problem switch*/
    TS0YW01.TS0YWPWF = "N"; /* Initialize po quantity warning flag*/
    TS0YW01.TS0YWMFL = "N"; /* Initialize message flag*/
    TS0YW01.TS0YWMCR = 5000; /* Initialize max carton lines*/
    TS0YW01.TS0YWMSL = 10; /* Initialize max selection lines*/
    TS0YW01.TS0YWMCP = 8; /* Initialize max cpl array lines*/
    TS0YW01.TS-SIZ-ERR-FLG = "N"; /* Initialize size error flag*/

    if (TSWREC.TSHCNTNR == " ") /* If container not passed*/
       /* continue on*/
    else
      TS0YW01.TS0YWSCN = TSWREC.TSHCNTNR; /* move save locate keys*/
      TS0YW01.TS0YWSPO = TSWREC.PC3PONBR;
      TSWREC.TSHCNTNR = " "; /* clear save locate key*/
      TSWREC.PC3PONBR = 0;
    end

    goto TS0Y000; /* Check valid from application*/


    TS0Y000: TS0Y000();
     /* ------------------------------------------------------------*/
     /* Converse TS0Y special initialization*/
     /* ------------------------------------------------------------*/

    goto TS0Y001; /* Converse special initialization*/


    TS0Y001: TS0Y001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment CNTNR Inq/Mnt process.*/
     /* ------------------------------------------------------------*/

    goto TS0Y002; /* Converse Shp CNTNR Inquiry/Main.*/


    TS0Y002: TS0Y002();
     /* ------------------------------------------------------------*/
      /* Flow to converse Transportation Shipment CNTNR Maint/Inq.*/
     /* ------------------------------------------------------------*/

    goto TS0Y002; /* Converse shipment CNTNR mnt/inq*/


  end // end main
end // end TS0Y

// Format header display data
Function TS0Y-12100()
   /* ------------------------------------------------------------*/
   /* Format the map header portion of the Left/Right screens*/
   /* ------------------------------------------------------------*/

    /* ===> Left map*/
    /* ===> --------*/
  TS0YM001.TSFSHPID = TSWREC.TSFSHPID;
  TS0YM001.TSFBOL = TSWREC.TSFBOL;
  TS0YM001.TSACARCD = TSWREC.TSACARCD;
  TS0YM001.TS5CRAFT = TSWREC.TS5CRAFT;
  TS0YM001.TSFSHPNB = TSWREC.TSFSHPNB;
  TS0YM001.TSEDEST = TSWREC.TSEDEST;
  TS0YM001.XWHCD = TSWREC.XWHCD;
  TS0YM001.XGPCD = TSWREC.XGPCD;

    /* ===> Right map*/
    /* ===> ---------*/
  TS0YM005.TSFSHPID = TSWREC.TSFSHPID;
  TS0YM005.TSFBOL = TSWREC.TSFBOL;
  TS0YM005.TSACARCD = TSWREC.TSACARCD;
  TS0YM005.TS5CRAFT = TSWREC.TS5CRAFT;
  TS0YM005.TSFSHPNB = TSWREC.TSFSHPNB;
  TS0YM005.TSEDEST = TSWREC.TSEDEST;
  TS0YM005.XWHCD = TSWREC.XWHCD;
  TS0YM005.XGPCD = TSWREC.XGPCD;



   /* **                                                        ***/
   /* ********************** End of TS0Y-12100 ********************/
end // end TS0Y-12100

// Left  Map "M001"
Function TS0Y-12200()
   /* ------------------------------------------------------------*/
   /* Converse Left screens*/
   /* ------------------------------------------------------------*/

  converse TS0YM001 ;

   /* **                                                        ***/
   /* ********************** End of TS0Y-12200 ********************/
end // end TS0Y-12200

// Right Map "M005"
Function TS0Y-12300()
   /* ------------------------------------------------------------*/
   /* Converse  Right screen*/
   /* ------------------------------------------------------------*/

  converse TS0YM005 ;

   /* **                                                        ***/
   /* ********************** End of TS0Y-12300 ********************/
end // end TS0Y-12300

// Select (S ) DREADO.VORHDRR1
Function TS0Y-22110()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  if (VCPLHD04.OP-CUST-ORD-ID == 0
   && VCPLHD04.OP-NIKE-ORD-ID == 0)

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWWK5 = VCPLHD04.OP-CUST-ORD-ID;
  OP1REC.OP1PARTN = TS0YW01.OP1PARTN;
  OP1REC.OP1CUOID = VCPLHD04.OP-CUST-ORD-ID;
  OP1REC.OP1NORID = VCPLHD04.OP-NIKE-ORD-ID;


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TS0YW01.TS0YWPSW = "Y";
  TS0YM002.XXXPRCNM = "Y-22110";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "Y-22110"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0YM002.TS0YM-CUST-ORD-ID cursor, bold;
  set TS0YM002.TS0YM-NIKE-ORD-ID bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


   /* **                                                        ***/
   /* ********************** End of TS0Y-22100 ********************/
end // end TS0Y-22110

// Select (S ) Unique    VORHDRR1
Function TS0Y-25100()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/


  if (TS0YM002.TS0YM-CUST-ORD-ID == 0
   && TS0YM002.TS0YM-NIKE-ORD-ID == 0)

    TS0YM002.OP1CUPO = " "; /* ===> Cust P.O.*/

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  TS0YW01.TS0YWWK5 = TS0YM002.TS0YM-CUST-ORD-ID;
  OP1REC.OP1PARTN = TS0YW01.OP1PARTN;
  OP1REC.OP1CUOID = TS0YM002.TS0YM-CUST-ORD-ID;
  OP1REC.OP1NORID = TS0YM002.TS0YM-NIKE-ORD-ID;


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      TS0YW01.OP1CUOID = OP1REC.OP1CUOID;
      TS0YW01.OP1NORID = OP1REC.OP1NORID;
      TS0YM002.OP1CUPO = OP1REC.OP1CUPO; /* ===> Cust P.O.*/

      if (TS0YM002.PC3PONBR > 0) /* if po entered*/

       /* ===> next sentence*/

      else /* if po not entered do check for*/
                                  /* SO header status eq 'AL'*/

        if (TS0YW01.TS0YWPSW == "N") /* if no errors have occurred so far*/
          if (TS0YW01.TS0YWPWF == "N") /* if warning not set*/
            if (OP1REC.XOSCD != "AL")
                                   /* if header status NE 'AL' SO allocated*/
              TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
              TS0YW01.TS0YWWF6 = "Y";
                                   /* set warning for SO NE 'AL'='Y'*/
            else
              TS0YW01.TS0YWWF6 = "N";
                                   /* set warning for SO NE 'AL'='N'*/
            end
          end
        end

        TS0Y-25110(); /* ===> check if cxref needs defaulting*/

      end

      return; /* ===> return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      if (TS0YM002.PC3PONBR > 0 /* PO > 0*/
      )                        
        if (TS0YW01.TS0YWPSW == "N") /* if no errors have occurred so far*/
          if (TS0YW01.TS0YWPWF == "N") /* if warning not set*/
            TS0YW01.OP1CUOID = OP1REC.OP1CUOID;
            TS0YW01.OP1NORID = OP1REC.OP1NORID;
            TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
            TS0YW01.TS0YWWF7 = "Y";
                  /* set warning for invalid SO (but PO > 0) = 'Y'*/
          else
            TS0YW01.TS0YWWF7 = "N";
                  /* set warning for invalid SO (but PO > 0) = 'N'*/
          end
        end

      else /* PO not > 0*/

        TS0YM002.OP1CUPO = " "; /* ===> Cust P.O.*/
        set TS0YM002.TS0YM-CUST-ORD-ID cursor, bold;
        set TS0YM002.TS0YM-NIKE-ORD-ID bold;
        TS0YW01.TS0YWPSW = "Y";
        TS0YM002.XXXPRCNM = "Y-25100";
        converseLib.validationFailed(173); /* invalid SO*/

      end

      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TS0YW01.TS0YWPSW = "Y";
  TS0YM002.XXXPRCNM = "Y-25100";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "Y-25100"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0YM002.TS0YM-CUST-ORD-ID cursor, bold;
  set TS0YM002.TS0YM-NIKE-ORD-ID bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


   /* **                                                        ***/
   /* ********************** End of TS0Y-25100 ********************/
end // end TS0Y-25100

// Select (SA)    DPRODC.VPRDCU01
Function TS0Y-25110()
   /* ------------------------------------------------------------*/
   /* Select Customer XREF & ISEG using store info from OP1REC*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = TSWREC.XGPCD;
  PC2REC.KUCCOID = OP1REC.KUCCOID;
  PC2REC.KUMSTRID = OP1REC.KUMSTRID;
  PC2REC.XNXCD = OP1REC.XNXCD;

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      if (TS0YW01.TS0YWPSW == "N") /* if no errors have occurred so far*/
        if (TS0YW01.TS0YWPWF == "N") /* if warning not set*/

          if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
            TS0YW01.TS0YWCXR = PC2REC.PC2CUXID;
            TS0YW01.TS0YWSEG = PC2REC.PC2INSEG;
            TS0YM002.PC2CUXID = PC2REC.PC2CUXID;
            TS0YM002.PC2INSEG = PC2REC.PC2INSEG;
            TS0YW01.TS0YWWF8 = "N";
                               /* re-set warning for SO w/ no cxref*/
          else
            TS0YW01.TS0YWCXR = " ";
            TS0YM002.PC2CUXID = " ";
            TS0YW01.TS0YWSEG = "000";
            TS0YM002.PC2INSEG = "000";
            TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
            TS0YW01.TS0YWWF8 = "Y";
                                   /* set warning for SO w/ no cxref*/
            TS0Y-25221();

          end

        end
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TS0YM002.XXXPRCNM = "Y-25110"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "Y-25110"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of TS0Y-25110 ********************/
end // end TS0Y-25110

// Verify the item on the S.O.
Function TS0Y-25200()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE S.O.*/

   /* ------------------------------------------------------------*/

  TS0Y-25210(); /* select the set of SO items*/

  if (SQLCA.VAGen_SQLCODE == 0)

    TS0Y-25220(); /* fetch and accumulate QTYS*/

    if (SQLCA.VAGen_SQLCODE == 0)

      if (TS0YM002.PC2CUXID == " ") /* don't clear out error codes*/

        /* ============= Next Sentence =============>*/

      else

        TS0YW01.TSISTAT = "99"; /* reset status*/
        TS0YW01.XRECD = "99"; /* reset exception code*/

      end

    else

      if (SQLCA.VAGen_SQLCODE == 100)

        TS0YW01.TS0YWPSW = "Y"; /* set problem switch*/
        TS0YW01.TS0YWPWF = "Y"; /* set warning switch*/
        TS0YW01.TS0YWWF1 = "Y"; /* set warning switch*/
        TS0YW01.XRECD = "PS"; /* not on po excep code*/

        if (TS0YM001.TSISTAT == "TN" /* if tentative shipment*/
         || TS0YM001.TSISTAT == "RC") /* if received shipment*/

          TS0YW01.TSISTAT = "99"; /* reset status*/

        else

          if ("PS" in XRETBL.XRECD)

            if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* if this is hard error*/

              TS0YW01.TSISTAT = "ER"; /* set error status*/

            else

              TS0YW01.TSISTAT = "99"; /* reset status*/

            end

          else

            TS0YW01.TSISTAT = "ER"; /* set error status*/

          end

        end /* ===> tentative shipment*/
      end /* ===> SQL = 100 for fetch*/
    end /* ===> SQL = 0 for fetch*/

    TS0Y-25230(); /* Close the selected set*/

  end /* ==== SQL = 0 for select set*/

   /* **                                                        ***/
   /* ********************** End of TS0Y-25200 ********************/
end // end TS0Y-25200

// Select (S2) Set       VITEM0R1
Function TS0Y-25210()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF SO ITEMS*/

   /* ------------------------------------------------------------*/

  set OP2REC empty;

  OP2REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  OP2REC.OP1CUOID = TS0YM002.TS0YM-CUST-ORD-ID;
  OP2REC.OP1NORID = TS0YM002.TS0YM-NIKE-ORD-ID;
  TS0YW01.TS0YWWK5 = TS0YM002.TS0YM-CUST-ORD-ID;
  OP2REC.OP1PARTN = TS0YW01.OP1PARTN;
  OP2REC.SY1STNBR = TS0YM002.SY1STNBR;
  OP2REC.SY2CLRID = TS0YM002.SY2CLRID;
  OP2REC.XDMCD = TS0YM002.XDMCD;

  call "IO4150" ("S2", SQLCA, OP2REC) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "Y-25210"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "Y-25210"; /* Process name*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y-25210 ********************/
end // end TS0Y-25210

// Fetch  (N2) Next      VITEM0R1
Function TS0Y-25220()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DREADO.VITEMOR1*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/


  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    if (OP2REC.OP2LNIST == "SH") /* Line item status EQ 'SH'*/
      TS0YW01.TS0YWPOQ = TS0YW01.TS0YWPOQ + OP2REC.OP2TSHPQ;
                                  /* Accumulate shipped qty*/
    else /* Line item status NE 'SH'*/
      TS0YW01.TS0YWPOQ = TS0YW01.TS0YWPOQ + OP2REC.OP2TONOQ;
                                  /* Accumulate on order qty*/
    end
  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      TS0YW01.TS0YWEFL = "Y"; /* end the loop*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0YW01.TS0YWEFL = "Y"; /* end the loop*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "Y-25220"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "Y-25220"; /* Map name*/
      TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM002.XXXPRCNM = "Y-25220"; /* Process name*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y-25220 ********************/
end // end TS0Y-25220

// Set XRECD if no CXREF for S.O.
Function TS0Y-25221()
   /* ------------------------------------------------------------*/

                /* Set exception code for no CXREF for given*/
                /* Bgrade shipment style item.*/
   /* ------------------------------------------------------------*/

  if (TS0YM002.PC2CUXID == " "
  )
    /* MOVE 'Y' TO TS0YW01.TS0YWPSW;  /* set problem switch*/
    TS0YW01.TS0YWPWF = "Y"; /* set warning switch*/
    TS0YW01.XRECD = "PI"; /* not on po excep code*/

    if (TS0YM001.TSISTAT == "TN" /* if tentative shipment*/
     || TS0YM001.TSISTAT == "RC") /* if received shipment*/

      TS0YW01.TSISTAT = "99"; /* reset status*/

    else

      if ("PI" in XRETBL.XRECD)

        if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* if this is hard error*/
          TS0YW01.TSISTAT = "ER"; /* set error status*/
        else
          TS0YW01.TSISTAT = "99"; /* reset status*/
        end

      else
        TS0YW01.TSISTAT = "ER"; /* set error status*/
      end

    end /* ===> tentative shipment*/

  end /* ===> CXREF Check*/

   /* **                                                        ***/
   /* ********************** End of TS0Y-25221 ********************/
end // end TS0Y-25221

// Close  (C2) Set       VITEM0R1
Function TS0Y-25230()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "Y-25230"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "Y-25230"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y-25230 ********************/
end // end TS0Y-25230

// Check for multiple sales order
Function TS0Y-25240()
   /* ------------------------------------------------------------*/

   /* Check for multiple sales orders existing in the*/
   /* P.O. System. If not, default S.O. Nbr*/
   /* ------------------------------------------------------------*/

  TS0YW01.TS0YW-PREV-OP1CUOID = PC6REC.OP1CUOID;
  TS0YW01.TS0YW-PREV-OP1NORID = PC6REC.OP1NORID;

  while (TS0YW01.TS0YWEFL == "N") /* ===> end of data flag*/

    if (PC6REC.OP1CUOID == TS0YW01.TS0YW-PREV-OP1CUOID
     && PC6REC.OP1NORID == TS0YW01.TS0YW-PREV-OP1NORID)

      TS0YS19(); /* Fetch P.O. Item*/

    else

      converseLib.validationFailed(320); /* ===> multiple sales orders exist*/
      TS0YM002.XXXPRCNM = "Y-25240";
      set TS0YM002.TS0YM-CUST-ORD-ID cursor, bold;
      set TS0YM002.TS0YM-NIKE-ORD-ID bold;
      TS0YW01.TS0YWEFL = "Y"; /* ===> end of data flag*/
      TS0YW01.TS0YWPSW = "Y"; /* ===> problem switch*/

    end

  end /* ===> while statement*/

  if (converseVar.validationMsgNum != 320) /* ===> no multiple sales orders exist*/


    TS0YM002.TS0YM-CUST-ORD-ID = TS0YW01.TS0YW-PREV-OP1CUOID;
    TS0YM002.TS0YM-NIKE-ORD-ID = TS0YW01.TS0YW-PREV-OP1NORID;
    TS0YW01.OP1CUOID = TS0YW01.TS0YW-PREV-OP1CUOID;
    TS0YW01.OP1NORID = TS0YW01.TS0YW-PREV-OP1NORID;
    VCPLHD04.OP-CUST-ORD-ID = TS0YW01.TS0YW-PREV-OP1CUOID;
    VCPLHD04.OP-NIKE-ORD-ID = TS0YW01.TS0YW-PREV-OP1NORID;

    if (TS0YM002.TS0YM-CUST-ORD-ID > 0)
      TS0YM002.XXXPRCNM = "Y-25240";
      TS0YW01.TS0YWPSW = "Y"; /* ===> problem switch*/
      converseLib.validationFailed(358); /* ===> sales order number defaulted*/
      exit stack; /* ===>  FLO to show defaulted S.O.*/
    end

  end



   /* **                                                        ***/
   /* ********************** End of TS0Y-25240 ********************/
end // end TS0Y-25240

// Item not found error logic
Function TS0Y-25250()
   /* ------------------------------------------------------------*/
   /*  */
   /* Set the appropriate flags for error not found*/
   /* on the P.O.*/
   /*  */
   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWPSW = "Y"; /* set problem switch*/
  TS0YW01.TS0YWPWF = "Y"; /* set warning switch*/
  TS0YW01.TS0YWWF1 = "Y"; /* set warning switch*/
  TS0YW01.XRECD = "PS"; /* not on po excep code*/

  if (TS0YM001.TSISTAT == "TN" /* if tentative shipment*/
   || TS0YM001.TSISTAT == "RC") /* if received shipment*/

    TS0YW01.TSISTAT = "99"; /* reset status*/

  else

    if ("PS" in XRETBL.XRECD)

      if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* if this is hard error*/

        TS0YW01.TSISTAT = "ER"; /* set error status*/

      else

        TS0YW01.TSISTAT = "99"; /* reset status*/

      end

    else

      TS0YW01.TSISTAT = "ER"; /* set error status*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y-25250 ********************/
end // end TS0Y-25250

// Accumulate P.O. qtys
Function TS0Y-25410()
    /* **********************************************************/
     /* Select set and accumulate po quantity for an item*/
    /* **********************************************************/

  TS0YS17(); /* Select the set of po items*/

  TS0YW01.TS0YWEFL = "N"; /* Initialze end flag*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    while (TS0YW01.TS0YWEFL == "N") /* While rows are found*/

      TS0YS19(); /* Fetch and accumulate on order qty*/

      if (TS0YW01.TS0YWEFL == "Y") /* If end of loop*/

        TS0YS21(); /* Close the selected set*/

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y-25410 ********************/
end // end TS0Y-25410

// Accumulate S.O. qtys (B-grade)
Function TS0Y-25420()
   /* ------------------------------------------------------------*/

             /* Accumulate qtys from S.O. system*/

   /* ------------------------------------------------------------*/

  TS0Y-25210(); /* Select the set of SO items*/

  if (SQLCA.VAGen_SQLCODE == 0)

    TS0YW01.TS0YWEFL = "N";

    while (TS0YW01.TS0YWEFL == "N")

      TS0Y-25220(); /* Fetch and accumulate QTY*/

    end /* ===> SQL = 0 for fetch*/

    if (TS0YW01.TS0YWEFL == "Y")
      TS0Y-25230(); /* Close the selected set*/
    end

  end /* ==== SQL = 0 for select set*/

   /* **                                                        ***/
   /* ********************** End of TS0Y-25420 ********************/
end // end TS0Y-25420

// Accumulate Ship qtys
Function TS0Y-25430()
    /* **********************************************************/
     /* Select set and accumulate ship quantities for an item*/
    /* **********************************************************/


  TS0YS23(); /* Select the set of po shipmnt items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    TS0YW01.TS0YWEFL = "N"; /* Initialze end flag*/

    while (TS0YW01.TS0YWEFL == "N") /* While rows are found*/

      TS0YS25(); /* Fetch and accumulate on ship qty ttl*/

      if (TS0YW01.TS0YWEFL == "Y") /* If end of loop*/

        TS0YS27(); /* Close the selected set*/

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-25430 ********************/
end // end TS0Y-25430

// Accumulate Receipt qtys
Function TS0Y-25440()
   /* **********************************************************/
   /* Select set and accumulate receipt quantities for an item*/
   /* **********************************************************/


  TS0YS29(); /* Select the set of receipts items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    TS0YW01.TS0YWEFL = "N"; /* Initialze end flag*/

    while (TS0YW01.TS0YWEFL == "N") /* While rows are found*/

      TS0YS31(); /* Fetch and accumulate on rcpt qty ttl*/

      if (TS0YW01.TS0YWEFL == "Y") /* If end of loop*/
        TS0YS33(); /* Close the selected set*/
      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-25440 ********************/
end // end TS0Y-25440

// Verify Sales Order Number
Function TS0Y-32110()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/


  if (VCPLHD04.OP-CUST-ORD-ID == 0
   && VCPLHD04.OP-NIKE-ORD-ID == 0)

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  TS0YW01.TS0YWWK5 = VCPLHD04.OP-CUST-ORD-ID;
  OP1REC.OP1PARTN = TS0YW01.OP1PARTN;
  OP1REC.OP1CUOID = VCPLHD04.OP-CUST-ORD-ID;
  OP1REC.OP1NORID = VCPLHD04.OP-NIKE-ORD-ID;


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TS0YW01.TS0YWPSW = "Y";
  TS0YM002.XXXPRCNM = "Y-32110";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "Y-32110"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0YM003.TS0YW-SALES-ORDER cursor, bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


   /* **                                                        ***/
   /* ********************** End of TS0Y-32110 ********************/
end // end TS0Y-32110

// Check the FROM application
Function TS0Y000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0J" /* From allowed application*/
   || COMMAREA.CAFROMAP == "TS0Z" 
   || COMMAREA.CAFROMAP == "TS01" 
   || COMMAREA.CAFROMAP == "TS02")

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end TS0Y000

// Special initialization TS0Y
Function TS0Y001()
   /* ------------------------------------------------------------*/

             /* SPECIAL INITIALIZATION FOR TS0Y*/

       /* 1) Select the shipment header row to see if it exists.*/
       /* 2) If the row does exist then get the shipment status*/
          /* and save the select the status to determine the*/
          /* update and delete restrictions for this shipment.*/
       /* 3) Clear the selection pass arrays in TSWREC.*/

       /* 4) Obtain the tolerance hard and soft error values.*/

       /* 5) Obtain the mode code for this shipment.*/

   /* ------------------------------------------------------------*/

  TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* move in key*/

  TS0YS01();
                                   /* select the shphd from DTRANS.VSHPHD01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if header was found*/
    if (TSFREC.YSSCD in YSSTBL.YSSCD)
      TS0YW01.YSSDELFL = YSSTBL.YSSDELFL[sysVar.arrayIndex];
    end
    if (TSFREC.YSSCD in YSSTBL.YSSCD)
      TS0YW01.YSSUPDFL = YSSTBL.YSSUPDFL[sysVar.arrayIndex];
    end
    TSWREC.TSEDEST = TSFREC.TSEDEST;
    TSWREC.TSEORIG = TSFREC.TSEORIG;
    TSWREC.XWHCD = TSFREC.XWHCD;
    TSWREC.XGPCD = TSFREC.XGPCD;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if header was not found*/
      converseLib.validationFailed(140);
                                   /* header deleted by another application*/
      TS0YM001.XXXPRCNM = "TS0Y001";
      TS0YW01.TS0YWSWR = "N"; /* set request for data to no*/
    end
  end

  TS0YW01.TS0YWIXM = 1; /* set index*/
  while (TS0YW01.TS0YWIXM <= TS0YW01.TS0YWMSL) /* until end of arrays*/
    TSWREC.TSW2SHP = 0; /* clear all passed fields*/
    TSWREC.TSWPLNBR = 0;
    TSWREC.TSWNKCTN = 0;
    TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* increment counter*/
  end

   /* ******************************************/
   /* Obtain the hard and soft error qtys*/
   /* ******************************************/

  TS0YS02(); /* Obtain hard and soft error values*/

   /* ******************************************/
   /* Obtain the mode code for this shipment*/
   /* ******************************************/

  set TS5REC empty;

  TS5REC.TSACARCD = TSWREC.TSACARCD; /* move in keys*/
  TS5REC.TS5CRAFT = TSWREC.TS5CRAFT;

  TS0YS0A(); /* Select the mode code*/

  TS0YW01.YMTCD = TS5REC.YMTCD; /* save the code*/



   /* ****npulug changes begin**********/
  set VTSLOC02 empty;
  set SQLCA empty;
  TS0YW01.TS-CONSOL-POINT-FL = "N";
  VTSLOC02.TS-LOC-CD = TSFREC.TSEORIG; /* move in keys*/
  TS0YS78(); /* get cnsld flag from vtsloc02*/
  if (VTSLOC02.TS-LOC-CNSLD-FL == "Y") /* check cnsldn point*/
    TS0YW01.TS-CONSOL-POINT-FL = "Y";
  else
    set VTSLOC02 empty;
    set SQLCA empty;
    VTSLOC02.TS-LOC-CD = TSFREC.TSFDSCHG; /* move in keys*/
    TS0YS78();
    if (VTSLOC02.TS-LOC-CNSLD-FL == "Y")
      TS0YW01.TS-CONSOL-POINT-FL = "Y";
    end
  end
   /* ****npulug changes end************/
end // end TS0Y001

// Shipment Container Inq/Maint
Function TS0Y002()
   /* ------------------------------------------------------------*/

         /* SHIPMENT CONTAINER INQUIRY / MAINTENANCE*/

   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

                                  /* M001    M005*/
   /* 1) If specified, display the first map. (left or right)*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, if specified, display the third map.*/
      /* Otherwise, if specified, display the fourth map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWMAP == "1 " /* Map 1 was requested left*/
   || TS0YW01.TS0YWMAP == "5 ") /* Map 5 was requested right*/
    TS0YW01.TS-SIZ-ERR-FLG = "N"; /* Initialize Size error flag*/
    TS0Y100(); /* Display map 1 or 5*/
  else
    if (TS0YW01.TS0YWMAP == "2 " /* Map 2 was requested*/
     || TS0YW01.TS0YWMAP == "2A" /* Map 2a was requested*/
     || TS0YW01.TS0YWMAP == "2B") /* Map 2b was requested*/
      TS0Y200(); /* Display map 2*/
    else
      if (TS0YW01.TS0YWMAP == "3 ") /* Map 3 was selected*/
        TS0Y300(); /* Display map 3*/
      else
        if (TS0YW01.TS0YWMAP == "4 " /* Map 4 was selected*/
         || TS0YW01.TS0YWMAP == "4A") /* Map 4a was selected*/
          TS0Y400(); /* Display map 4*/
        else

          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1PGMNM = "TS0Y002 "; /* Process name*/
          TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
          TA1REC.TA1MAP = TS0YW01.TS0YWMAP; /* Map name*/
          SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

          XSPF4(); /* Exit to Master Menu*/

        end
      end
    end
  end


end // end TS0Y002

// Shipment Container Browse
Function TS0Y100()
   /* ------------------------------------------------------------*/

            /* SHIPMENT CONTAINER BROWSE SCREEN*/

   /* This is the main process used to display the container*/
   /* browse screen.*/
   /* Processing sequence is as follows:*/

   /* 1) If request for data is yes;*/
      /* - Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) If no errors are found.*/
      /* - Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWSWR == "Y") /* The request for data is yes*/
    TS0Y110(); /* Obtain the data to display*/
  end

  TS0Y120(); /* Format and display the map*/

  TS0Y130(); /* Check attention identifier*/

  TS0Y140(); /* Reset fields to normal intensity*/

  TS0Y150(); /* Verify the entered data*/

  if (TS0YW01.TS0YWPSW == "N") /* If no errors have occurred*/
    TS0Y160(); /* Process valid input request*/
  end


end // end TS0Y100

// Obtain the data to display
Function TS0Y110()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Purge any existing queue in temporary storage.*/
   /* 2) Select and open the cursor for DTRANS.VCNTNR01.*/
   /* 3) For each CNTNR fetched from the CNTNR table.*/
      /* - Select the set and open cursor for DTRANS.VCPLHD03.*/
      /* - For each CPL fetched, format the pages in temporary*/
        /* storage.*/
      /* - Close the selected set of DTRANS.VCPLHD03.*/
   /* 4) Close the selected set of DTRANS.VCNTNR01.*/
   /* 5) If no data found, display error message and return to*/
      /* previous process.*/
      /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS0YW01.XXXTSLEN = 994; /* Temporary storage page length*/
   /* ==> (14 display lines) * ( 71 length of display line) = 994*/

  TS0Y111(); /* Purge any temporary storage*/

  TS0Y112(); /* Select set and open DTRANS.VCNTNR01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/

    TS0YW01.TS0YWSW1 = "N"; /* Initialize end of file switch*/
    TS0YW01.TS0YWPSW = "N"; /* Initialize problem found switch*/
    TS0YW01.TS0YWIXM = 1; /* Initialize display line number*/
    set TS0YW02 empty; /* Clear temporary storage record*/

    while (TS0YW01.TS0YWSW1 == "N" /* Until end of set or problem found*/
     && TS0YW01.TS0YWPSW == "N") /* or until a problem was found*/

      TS0Y113(); /* fetch container from DTRANS.VCNTNR01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/

        TS0Y114(); /* Select set DTRANS.VCPLHD03*/

        if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
          TS0YW01.TS0YWSW2 = "N"; /* Initialize end of file switch*/

          while (TS0YW01.TS0YWSW2 == "N" /* Until end set or problem*/
           && TS0YW01.TS0YWPSW == "N") /* or until a problem was found*/

            TS0Y115(); /* ====>  Obtain data and format page*/

            if (TS0YW01.TS0YWIXM > 14) /* Page is full*/
              TS0Y116(); /* Add page to temporary storage*/
            end

            if (TS0YW01.TS0YWSW2 == "Y") /* end of set was found*/
              TS0Y117(); /* Close DTRANS.VCPLHD03*/
            end

          end /* ====> While*/

        end
      end
    end /* ====> While*/

    if (TS0YW01.TS0YWSW1 == "Y") /* end of set was found*/
      if (TS0YW01.TS0YWIXM > 1) /* and some of page formatted*/
        TS0Y116(); /* Add page to temporary storage*/
      end
      TS0YW01.TS0YWTSP = 1; /* Initialize page number*/
      TS0YW01.TS0YWSWR = "N"; /* Request for data completed*/
      TS0Y118(); /* Close DTRANS.VCNTNR01*/
    end
  end

  if (TS0YW01.TA5TSQIX == 0) /* No data to display*/
    TS0YM001.XXXPRCNM = "TS0Y110"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y110"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
  end



   /* **                                                        ***/
   /* ********************** End of TS0Y110 ***********************/
end // end TS0Y110

// Purge any temporary storage
Function TS0Y111()
   /* ------------------------------------------------------------*/

                /* PURGE ANY TEMPORARY STORAGE*/

   /* 1) Purge any temporary storage for this application.*/

   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0Y"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage sub*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0YW01.TS0YWTSP = 0; /* Reset current page number*/
  TS0YW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0Y111

// Select set DTRANS.VCNTNR01
Function TS0Y112()
   /* ------------------------------------------------------------*/

        /* SELECT SET AND OPEN CURSOR FOR DTRANS.VCNTNR01*/

   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/

   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = TSWREC.TSFSHPID; /* move in key*/
  call "IO2590" ("S1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "TS0Y112"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y112"; /* Process name*/

  end


end // end TS0Y112

// Fetch row from DTRANS.VCNTNR01
Function TS0Y113()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCNTNR01*/

   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  call "IO2590" ("N1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0YW01.TS0YWSW1 = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YW01.TS0YWSW1 = "Y"; /* end of set found*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM001.XXXPRCNM = "TS0Y113"; /* Process name*/
      TS0YM005.XXXPRCNM = "TS0Y113"; /* Process name*/

    end
  end


end // end TS0Y113

// Select set DTRANS.VCPLHD04
Function TS0Y114()
   /* ------------------------------------------------------------*/

        /* SELECT SET AND OPEN CURSOR FOR DTRANS.VCPLHD04*/

   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in keys*/
  VCPLHD04.PC-PO-NBR = -1;
  VCPLHD04.PC-PRDCU-ID = "*";
  VCPLHD04.SY-STY-NBR = "*";
  VCPLHD04.SY-COLR-CD-ID = "*";
  VCPLHD04.XQA-QUAL-CD = "*";
  VCPLHD04.PC-CU-IN-SEG-CD = "*";
  VCPLHD04.TS-NIKE-CNTNR-NBR1 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR2 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR3 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR4 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR5 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR6 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR7 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR8 = TSHREC.TSHNKCN;

  TSGREC.TSNFNC = "S5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y114"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "TS0Y114"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y114"; /* Process name*/

  end


end // end TS0Y114

// Fetch row from DTRANS.VCPLHD04
Function TS0Y115()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD04*/

   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0YW01.TS0YWSW2 = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0YW01.TS0YWSW2 = "Y"; /* end of set found*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y115"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM001.XXXPRCNM = "TS0Y115"; /* Process name*/

    else
      /* Save data*/
      TS0YW02.TSIPLNBR[TS0YWIXM] = VCPLHD04.TS-NIKE-PL-NBR; /**/
      TS0YW02.TSHCNTNR[TS0YWIXM] = TSHREC.TSHCNTNR;
      TS0YW02.TSHNKCN[TS0YWIXM] = TSHREC.TSHNKCN;
      TS0YW02.PC3PONBR[TS0YWIXM] = VCPLHD04.PC-PO-NBR;
      TS0YW02.PC-ITM-SEQ-NBR[TS0YWIXM] = VCPLHD04.PC-ITM-SEQ-NBR;

      TS0YS03(); /* get the po id and order type*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If the row was found*/
        TS0YW01.TS0YWDAT = PC3REC.PC3POIDT;
        if (TSWREC.XGPCD == "03") /* If apparel*/
          TS0YW02.TS0YMPYR[TS0YWIXM] = PC3REC.PCFSECD;
        else
          TS0YW02.TS0YMPYR[TS0YWIXM] = TS0YW01.TS0YWPYY;
        end
        TS0YW02.TS0YMPMO[TS0YWIXM] = TS0YW01.TS0YWPM1;
        TS0YW02.TS0YMDMO[TS0YWIXM] = TS0YW01.TS0YWPM2;
        TS0YW02.FY1FCTYC[TS0YWIXM] = PC3REC.FY1FCTYC;
        TS0YW02.PC4ORTYP[TS0YWIXM] = PC3REC.PC4ORTYP;
      end

      TS0YW02.PC2CUXID[TS0YWIXM] = VCPLHD04.PC-PRDCU-ID;
      TS0YW02.SY1STNBR[TS0YWIXM] = VCPLHD04.SY-STY-NBR;
      TS0YW02.SY2CLRID[TS0YWIXM] = VCPLHD04.SY-COLR-CD-ID;
      TS0YW02.XDMCD[TS0YWIXM] = VCPLHD04.XDM-DIM-CD;
      TS0YW02.XQACD[TS0YWIXM] = VCPLHD04.XQA-QUAL-CD;
      TS0YW02.OP1CUOID[TS0YWIXM] = VCPLHD04.OP-CUST-ORD-ID;
      TS0YW02.OP1NORID[TS0YWIXM] = VCPLHD04.OP-NIKE-ORD-ID;
      TS0YW02.TSISTAT[TS0YWIXM] = VCPLHD04.TS-CPL-STAT-CD;

      if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR1)
        TS0YW02.TSISHPQT[TS0YWIXM] = VCPLHD04.TS-CPL-QTOT-SHP1;
        TS0YW02.TSICRTQT[TS0YWIXM] = VCPLHD04.TS-CPL-TOT-CRTN1;
      else
        if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR2)
          TS0YW02.TSISHPQT[TS0YWIXM] = VCPLHD04.TS-CPL-QTOT-SHP2;
          TS0YW02.TSICRTQT[TS0YWIXM] = VCPLHD04.TS-CPL-TOT-CRTN2;
        else
          if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR3)
            TS0YW02.TSISHPQT[TS0YWIXM] = VCPLHD04.TS-CPL-QTOT-SHP3;
            TS0YW02.TSICRTQT[TS0YWIXM] = VCPLHD04.TS-CPL-TOT-CRTN3;
          else
            if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR4)
              TS0YW02.TSISHPQT[TS0YWIXM] = VCPLHD04.TS-CPL-QTOT-SHP4;
              TS0YW02.TSICRTQT[TS0YWIXM] = VCPLHD04.TS-CPL-TOT-CRTN4;
            else
              if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR5)
                TS0YW02.TSISHPQT[TS0YWIXM] = VCPLHD04.TS-CPL-QTOT-SHP5;
                TS0YW02.TSICRTQT[TS0YWIXM] = VCPLHD04.TS-CPL-TOT-CRTN5;
              else
                if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR6)
                  TS0YW02.TSISHPQT[TS0YWIXM] = VCPLHD04.TS-CPL-QTOT-SHP6;
                  TS0YW02.TSICRTQT[TS0YWIXM] = VCPLHD04.TS-CPL-TOT-CRTN6;
                else
                  if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR7)
                    TS0YW02.TSISHPQT[TS0YWIXM] = VCPLHD04.TS-CPL-QTOT-SHP7;
                    TS0YW02.TSICRTQT[TS0YWIXM] = VCPLHD04.TS-CPL-TOT-CRTN7;
                  else
                    if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR8)
                      TS0YW02.TSISHPQT[TS0YWIXM] = VCPLHD04.TS-CPL-QTOT-SHP8;
                      TS0YW02.TSICRTQT[TS0YWIXM] = VCPLHD04.TS-CPL-TOT-CRTN8;
                    end
                  end
                end
              end
            end
          end
        end
      end

      TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* Increment line index*/

    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0Y115 ***********************/
end // end TS0Y115

// Add page to temporary storage
Function TS0Y116()
   /* ------------------------------------------------------------*/

              /* ADD PAGE TO TEMPORARY STORAGE*/

   /* 1) Add the next page to temporary storage.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS0YW02.XXXTSLEN = TS0YW01.XXXTSLEN; /* Temporary storage length*/
   /* ==> (14 display lines) * (71 length of display line) = 994*/

  TA5REC.TA5APPID = "TS0Y"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0YW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    TS0YW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS0YW01.TS0YWIXM = 1; /* Reset display line number*/
    set TS0YW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0Y116"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "TS0Y116"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y116"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem has been found*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y116 ***********************/
end // end TS0Y116

// Close set DTRANS.VCPLHD04
Function TS0Y117()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD04*/

   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0Y117"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "TS0Y117"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y117"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0Y117

// Close set DTRANS.VCNTNR01
Function TS0Y118()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCNTNR01*/

   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  call "IO2590" ("C1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0Y118"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "TS0Y118"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y118"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0Y118

// Format and display the map
Function TS0Y120()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) Format the map heading.*/
   /* 2) If no error to display, format the selected data.*/
   /* 3) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWPSW == "N") /* no errors*/

    set TS0YM001 initial; /* set map clear*/
    set TS0YM005 initial; /* set map clear*/

     /* Clear the selection save array fields*/

    TS0YW01.TS0YWIXM = 1;

    while (TS0YW01.TS0YWIXM <= TS0YW01.TS0YWMSL) /* until end of arrays*/

      TSWREC.TSW2SHP[TS0YWIXM] = 0; /* clear array fields*/
      TSWREC.TSWPLNBR[TS0YWIXM] = 0;
      TSWREC.TSWNKCTN[TS0YWIXM] = 0;
      TS0YW01.TSHCNTNR[TS0YWIXM] = " ";
      TS0YW01.TSHNKCN[TS0YWIXM] = 0;
      TS0YW01.TS0YWAPO[TS0YWIXM] = 0;

      TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1;

    end

    TS0Y-12100(); /* ===> Format Header display data*/


    TS0Y121(); /* ===> Format Detail display data*/

  end

  /* IF EZEMNO GT 0;                  /* error message to display*/
  /* SET TS0YM001 ALARM;            /* indicate sound alarm*/
  /* SET TS0YM005 ALARM;            /* indicate sound alarm*/
  /* END;*/

  TS0YM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  TS0YM005.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/


  if (TS0YW01.TS0YWMAP == "1 ") /* Map 1 was requested left*/

    TS0Y-12200(); /* ===> left  map M001 format*/

  else
    TS0Y-12300(); /* ===> right map M005 format*/

  end

  TS0YW01.TS0YWPSW = "N"; /* reset error switch*/
  TS0YM001.XXXPRCNM = "TS0Y"; /* ===> reset map process name*/
  TS0YM005.XXXPRCNM = "TS0Y"; /* ===> reset map process name*/


   /* **                                                        ***/
   /* ********************** End of TS0Y120 ***********************/
end // end TS0Y120

// Format detail display data
Function TS0Y121()
   /* ------------------------------------------------------------*/

                 /* FORMAT THE SELECTED DATA*/

   /* 1) Obtain the next page from temporary storage.*/
   /* 2) Format the plan location data in the map.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWCFL = "N"; /* Initialize delete flag*/

  if (TS0YW01.TS0YWSCN != " ") /* If delete save key set*/
    TS0YW01.TS0YWTSP = 1; /* Initialize search page*/
  end

  if (COMMAREA.CAADDFL == "N") /* If user cannot perform add*/
    set TS0YM001.TS0YMP13 protect, invisible; /* Darken add PF Key*/
    set TS0YM005.TS0YMP13 protect, invisible; /* Darken add PF Key*/
  end

  if (COMMAREA.CACHGFL == "N") /* If user cannot perform change*/
    set TS0YM001.TS0YMP14 protect, invisible; /* Darken change PF Key*/
    set TS0YM001.TS0YMP17 protect, invisible;
    set TS0YM001.TS0YMP19 protect, invisible;
    set TS0YM005.TS0YMP14 protect, invisible; /* Darken change PF Key*/
    set TS0YM005.TS0YMP17 protect, invisible;
    set TS0YM005.TS0YMP19 protect, invisible;
  end

  if (COMMAREA.CADELFL == "N") /* If user cannot perform delete*/
    set TS0YM001.TS0YMP15 protect, invisible; /* Darken delete PF Key*/
    set TS0YM005.TS0YMP15 protect, invisible; /* Darken delete PF Key*/
  end

  if (TS0YW01.TA5TSQIX == 0) /* if no data to display*/
     /* do not format data*/
  else

    while (TS0YW01.TS0YWCFL == "N") /* While delete save key not found*/
      TS0YS05(); /* Obtain temporary storage page*/
      TS0YS07(); /* locate page with key*/
    end

    if (TS0YW01.TS0YWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      TS0YS05(); /* Obtain temporary storage page*/
    end

    TS0YM001.TS0YWTSP = TS0YW01.TS0YWTSP; /* Current page number*/
    TS0YM001.TA5TSQIX = TS0YW01.TA5TSQIX; /* Highest page number*/

    TS0YM005.TS0YWTSP = TS0YW01.TS0YWTSP; /* Current page number*/
    TS0YM005.TA5TSQIX = TS0YW01.TA5TSQIX; /* Highest page number*/

    TS0YW01.TS0YWIXM = 1; /* Initialize line indexes*/
    TS0YW01.TS0YWIXW = 0;

      /* move in first line of screen data (Left Screen)*/

    TS0YM001.TSHCNTNR[TS0YWIXM] = TS0YW02.TSHCNTNR[TS0YWIXM];
    TS0YM001.TS0YMPYR[TS0YWIXM] = TS0YW02.TS0YMPYR[TS0YWIXM];
    TS0YM001.TS0YMPMO[TS0YWIXM] = TS0YW02.TS0YMPMO[TS0YWIXM];
    TS0YM001.TS0YMDMO[TS0YWIXM] = TS0YW02.TS0YMDMO[TS0YWIXM];
    TS0YM001.FY1FCTYC[TS0YWIXM] = TS0YW02.FY1FCTYC[TS0YWIXM];
    TS0YM001.PC4ORTYP[TS0YWIXM] = TS0YW02.PC4ORTYP[TS0YWIXM];
    TS0YM001.PC3PONBR[TS0YWIXM] = TS0YW02.PC3PONBR[TS0YWIXM];
    TS0YM001.PC6ITMNB[TS0YWIXM] = TS0YW02.PC-ITM-SEQ-NBR[TS0YWIXM];
    TS0YM001.PC2CUXID[TS0YWIXM] = TS0YW02.PC2CUXID[TS0YWIXM];
    TS0YM001.SY1STNBR[TS0YWIXM] = TS0YW02.SY1STNBR[TS0YWIXM];
    TS0YM001.SY2CLRID[TS0YWIXM] = TS0YW02.SY2CLRID[TS0YWIXM];
    TS0YM001.TS0YMQTY[TS0YWIXM] = TS0YW02.TSISHPQT[TS0YWIXM];
    TS0YM001.TS0YMCTN[TS0YWIXM] = TS0YW02.TSICRTQT[TS0YWIXM];
    TS0YM001.TSISTAT[TS0YWIXM] = TS0YW02.TSISTAT[TS0YWIXM];

      /* move in first line of screen data (Right Screen)*/

    TS0YM005.TSHCNTNR[TS0YWIXM] = TS0YW02.TSHCNTNR[TS0YWIXM];
    TS0YM005.PC3PONBR[TS0YWIXM] = TS0YW02.PC3PONBR[TS0YWIXM];
    TS0YM005.PC2CUXID[TS0YWIXM] = TS0YW02.PC2CUXID[TS0YWIXM];
    TS0YM005.SY1STNBR[TS0YWIXM] = TS0YW02.SY1STNBR[TS0YWIXM];
    TS0YM005.SY2CLRID[TS0YWIXM] = TS0YW02.SY2CLRID[TS0YWIXM];
    TS0YM005.XDMCD[TS0YWIXM] = TS0YW02.XDMCD[TS0YWIXM];
    TS0YM005.XQACD[TS0YWIXM] = TS0YW02.XQACD[TS0YWIXM];
    TS0YW01.TS0YW-CUST-ORD-ID = TS0YW02.OP1CUOID[TS0YWIXM];
    TS0YW01.TS0YW-NIKE-ORD-ID = TS0YW02.OP1NORID[TS0YWIXM];
    TS0YM005.TS0YW-SALES-ORDER[TS0YWIXM] = TS0YW01.TS0YW-SALES-ORDER;
    TS0YM005.TS0YMQTY[TS0YWIXM] = TS0YW02.TSISHPQT[TS0YWIXM];
    TS0YM005.TS0YMCTN[TS0YWIXM] = TS0YW02.TSICRTQT[TS0YWIXM];
    TS0YM005.TSISTAT[TS0YWIXM] = TS0YW02.TSISTAT[TS0YWIXM];

    set TS0YM001.TS0YMSEL[TS0YWIXM] normal; /* display the selection*/
    set TS0YM005.TS0YMSEL[TS0YWIXM] normal; /* display the selection*/

    TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* Increment line indexes*/
    TS0YW01.TS0YWIXW = TS0YW01.TS0YWIXW + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0YS09' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0Y121*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0YW01.TS0YWIXM <= 14 /* Until end of lines*/
     && TS0YW02.TSIPLNBR[TS0YWIXM] != 0) /* or last line of data*/

      /* move data to the Left Screen*/
      /* ----------------------------*/
      TS0YM001.TSHCNTNR[TS0YWIXM] = TS0YW02.TSHCNTNR[TS0YWIXM];
      TS0YM001.TS0YMPYR[TS0YWIXM] = TS0YW02.TS0YMPYR[TS0YWIXM];
      TS0YM001.TS0YMPMO[TS0YWIXM] = TS0YW02.TS0YMPMO[TS0YWIXM];
      TS0YM001.TS0YMDMO[TS0YWIXM] = TS0YW02.TS0YMDMO[TS0YWIXM];
      TS0YM001.FY1FCTYC[TS0YWIXM] = TS0YW02.FY1FCTYC[TS0YWIXM];
      TS0YM001.PC4ORTYP[TS0YWIXM] = TS0YW02.PC4ORTYP[TS0YWIXM];
      TS0YM001.PC3PONBR[TS0YWIXM] = TS0YW02.PC3PONBR[TS0YWIXM];
      TS0YM001.PC6ITMNB[TS0YWIXM] = TS0YW02.PC-ITM-SEQ-NBR[TS0YWIXM];
      TS0YM001.PC2CUXID[TS0YWIXM] = TS0YW02.PC2CUXID[TS0YWIXM];
      TS0YM001.SY1STNBR[TS0YWIXM] = TS0YW02.SY1STNBR[TS0YWIXM];
      TS0YM001.SY2CLRID[TS0YWIXM] = TS0YW02.SY2CLRID[TS0YWIXM];
      TS0YM001.TS0YMQTY[TS0YWIXM] = TS0YW02.TSISHPQT[TS0YWIXM];
      TS0YM001.TS0YMCTN[TS0YWIXM] = TS0YW02.TSICRTQT[TS0YWIXM];
      TS0YM001.TSISTAT[TS0YWIXM] = TS0YW02.TSISTAT[TS0YWIXM];

      /* move data to the Right Screen*/
      /* -----------------------------*/

      TS0YM005.TSHCNTNR[TS0YWIXM] = TS0YW02.TSHCNTNR[TS0YWIXM];
      TS0YM005.PC3PONBR[TS0YWIXM] = TS0YW02.PC3PONBR[TS0YWIXM];
      TS0YM005.PC2CUXID[TS0YWIXM] = TS0YW02.PC2CUXID[TS0YWIXM];
      TS0YM005.SY1STNBR[TS0YWIXM] = TS0YW02.SY1STNBR[TS0YWIXM];
      TS0YM005.SY2CLRID[TS0YWIXM] = TS0YW02.SY2CLRID[TS0YWIXM];
      TS0YM005.XDMCD[TS0YWIXM] = TS0YW02.XDMCD[TS0YWIXM];
      TS0YM005.XQACD[TS0YWIXM] = TS0YW02.XQACD[TS0YWIXM];
      TS0YW01.TS0YW-CUST-ORD-ID = TS0YW02.OP1CUOID[TS0YWIXM];
      TS0YW01.TS0YW-NIKE-ORD-ID = TS0YW02.OP1NORID[TS0YWIXM];
      TS0YM005.TS0YW-SALES-ORDER[TS0YWIXM] = TS0YW01.TS0YW-SALES-ORDER;
      TS0YM005.TS0YMQTY[TS0YWIXM] = TS0YW02.TSISHPQT[TS0YWIXM];
      TS0YM005.TS0YMCTN[TS0YWIXM] = TS0YW02.TSICRTQT[TS0YWIXM];
      TS0YM005.TSISTAT[TS0YWIXM] = TS0YW02.TSISTAT[TS0YWIXM];

      if (TS0YW02.TSHCNTNR[TS0YWIXM] == TS0YW02.TSHCNTNR[TS0YWIXW])

        TS0YM001.TSHCNTNR[TS0YWIXM] = " "; /* move ' ' to cntnr*/
        TS0YM005.TSHCNTNR[TS0YWIXM] = " "; /* move ' ' to cntnr*/

        if (TS0YW02.TS0YWPOI[TS0YWIXM] == TS0YW02.TS0YWPOI[TS0YWIXW])
          TS0YM001.TS0YMPYR[TS0YWIXM] = " "; /* move ' ' to poidyr*/
          TS0YM001.TS0YMPMO[TS0YWIXM] = " "; /* move ' ' to poidmo*/
          TS0YM001.TS0YMDMO[TS0YWIXM] = " "; /* move ' ' to poidmo*/
          TS0YM001.FY1FCTYC[TS0YWIXM] = " "; /* move ' ' to poidfct*/

          TS0YS09(); /* continue repeating supression*/

        end
      end

      set TS0YM001.TS0YMSEL[TS0YWIXM] normal; /* display the selection*/
      set TS0YM005.TS0YMSEL[TS0YWIXM] normal; /* display the selection*/

      TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* Increment line index*/
      TS0YW01.TS0YWIXW = TS0YW01.TS0YWIXW + 1;

    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0Y121 ***********************/
end // end TS0Y121

// Check attention identifier
Function TS0Y130()
   /* ------------------------------------------------------------*/

         /* CHECK THE ATTENTION IDENTIFIER*/

   /* 1) Check attention identifier used to invoke transaction.*/
   /* 2) If FAST PATH was requested, transfer to the application.*/
   /* 3) If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0YM001 initial; /* Clear the map fields*/
    set TS0YM005 initial; /* Clear the map fields*/
    TS0YW01.TS0YWSWR = "N"; /* Set request for data = n*/
    set TS0YW02 empty; /* Clear temporary storage*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TSWREC.TSHCNTNR = " "; /* Clear the save container value*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move in pass data*/
    COMMAREA.CATOAP = "TS0J"; /* set to transportation menu*/
    TS0Y111(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0YM001.XXXPRCNM = "TS0Y130"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (COMMAREA.CAADDFL == "N" /* if user add not authorized*/
     || TS0YW01.YSSUPDFL == "N") /* or status update not authorized*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
      TS0YM001.XXXPRCNM = "TS0Y130"; /* Process name*/
      TS0YM005.XXXPRCNM = "TS0Y130"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   || converseVar.eventKey is pf17 /* or PF17 was pressed*/
   || converseVar.eventKey is pf19) /* or PF19 was pressed*/
    if (COMMAREA.CACHGFL == "N" /* if user change not authorized*/
     || TS0YW01.YSSUPDFL == "N") /* or status update not authorized*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
      TS0YM001.XXXPRCNM = "TS0Y130"; /* Process name*/
      TS0YM005.XXXPRCNM = "TS0Y130"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    if (COMMAREA.CADELFL == "N" /* if user delete not authorized*/
     || TS0YW01.YSSDELFL == "N") /* or status delete not authorized*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
      TS0YM001.XXXPRCNM = "TS0Y130"; /* Process name*/
      TS0YM005.XXXPRCNM = "TS0Y130"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf16 /* PF16 was pressed*/
   && TSWREC.YSSCD == "TN")        /* and tentative shipment*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    TS0YM001.XXXPRCNM = "TS0Y130"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y130"; /* Process name*/
    converseLib.validationFailed(268); /* Indicate invalid transfer key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf10 /* PF10 was pressed*/
   && TS0YW01.TS0YWMAP == "1 ")    /* Left map currently displayed*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    TS0YM001.XXXPRCNM = "TS0Y130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf11 /* PF10 was pressed*/
   && TS0YW01.TS0YWMAP == "5 ")    /* right map currently displayed*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    TS0YM005.XXXPRCNM = "TS0Y130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF19 was not pressed*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    TS0YM001.XXXPRCNM = "TS0Y130"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end



   /* **                                                        ***/
   /* ********************** End of TS03120 ***********************/
end // end TS0Y130

// Reset highlighted fields
Function TS0Y140()
   /* ------------------------------------------------------------*/

                /* RESET HIGHLIGHTED FIELDS*/

      /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  if (TS0YW02.TSHCNTNR[1] != " ") /* and cntnr exists*/
    set TS0YM001.TS0YMSEL[1] cursor; /* Reset cursor*/
    set TS0YM005.TS0YMSEL[1] cursor; /* Reset cursor*/
  end

  TS0YW01.TS0YWIXM = 1; /* Initialize line index*/
  while (TS0YW01.TS0YWIXM <= 14 /* Until end of lines*/
   && TS0YW02.TSHCNTNR[TS0YWIXM] != " ") /* and cntnr exists*/
    set TS0YM001.TS0YMSEL[TS0YWIXM] normal; /* set fields to normal*/
    set TS0YM005.TS0YMSEL[TS0YWIXM] normal; /* set fields to normal*/
    TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* Increment line index*/
  end


end // end TS0Y140

// Verify the entered data
Function TS0Y150()
   /* ------------------------------------------------------------*/

                /* VERIFY THE ENTERED DATA*/

   /* 1) Determine whether a valid request to scroll was entered.*/
   /* 2) If not a scroll request, verify any changed data.*/
   /* 3) If any errors were found, exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7  /* Scroll back request*/
   || converseVar.eventKey is pf8  /* or scroll forward request*/
   || converseVar.eventKey is pf10 /* or scroll Left    request*/
   || converseVar.eventKey is pf11) /* or scroll Right   request*/

    TS0Y151(); /* Verify scroll request*/

  else

    TS0Y152(); /* Verify any changed data*/

  end


end // end TS0Y150

// Verify scroll request
Function TS0Y151()
   /* ------------------------------------------------------------*/

                /* VERIFY THE SCROLL REQUEST*/

     /* 1) Ensure that pages exist to scroll forward or back.*/
     /* 2) Indicate an error for any data that was modified.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0YW01.TS0YWTSP < 2)       /* and no previous pages*/
    TS0YM001.XXXPRCNM = "TS0Y151"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y151"; /* Process name*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0YW01.TS0YWTSP >= TS0YW01.TA5TSQIX) /* and no more pages*/
    TS0YM001.XXXPRCNM = "TS0Y151"; /* Process name*/
    TS0YM005.XXXPRCNM = "TS0Y151"; /* Process name*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  TS0YW01.TS0YWIXM = 14; /* Initialize line index*/

  while (TS0YW01.TS0YWIXM > 0) /* Until end of lines*/

    if (TS0YM001.TS0YMSEL[TS0YWIXM] != TS0YW02.TS0YMSEL[TS0YWIXM]
     || TS0YM001.TS0YMSEL[TS0YWIXM] != TS0YW02.TS0YMSEL[TS0YWIXM])

      set TS0YM001.TS0YMSEL[TS0YWIXM] cursor, modified, bold; /* Highlight*/
      set TS0YM005.TS0YMSEL[TS0YWIXM] cursor, modified, bold; /* Highlight*/
      TS0YM001.XXXPRCNM = "TS0Y151"; /* Process name*/
      TS0YM005.XXXPRCNM = "TS0Y151"; /* Process name*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM - 1; /* Decrement line number*/

  end


end // end TS0Y151

// Verify any changed data
Function TS0Y152()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) If ezeaid was ENTER, PF14, PF15, PF16, PF17, or PF19,*/
      /* then verify that a valid selection has been entered.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWSFL = "N"; /* Initialize selection flag*/
  TS0YW01.TS0YWIXM = 14; /* Initialize index*/

  while (TS0YW01.TS0YWIXM > 0) /* Until end of lines*/

    if (TS0YM001.TS0YMSEL[TS0YWIXM] != " " /* If selection is not blank*/
     || TS0YM005.TS0YMSEL[TS0YWIXM] != " ") /* If selection is not blank*/

      TS0YW01.TS0YWSFL = "Y"; /* Initialize selection flag*/

      if (TS0YM001.TS0YMSEL[TS0YWIXM] == "S" /* Save the key*/
       || TS0YM005.TS0YMSEL[TS0YWIXM] == "S") /* Save the key*/
         /* ========= NEXT SENTENCE ===========>*/
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        set TS0YM001.TS0YMSEL[TS0YWIXM] cursor, modified, bold;
        set TS0YM005.TS0YMSEL[TS0YWIXM] cursor, modified, bold;
        TS0YW01.TS0YWPSW = "Y"; /* move yes to error switch*/
      end

    end

    TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM - 1; /* decrement line index*/

  end

  if (converseVar.eventKey is enter /* If enter is pressed*/
   || converseVar.eventKey is pf14  /* or pf14 is pressed*/
   || converseVar.eventKey is pf15  /* or pf15 is pressed*/
   || converseVar.eventKey is pf16  /* or pf16 is pressed*/
   || converseVar.eventKey is pf17  /* or pf17 is pressed*/
   || converseVar.eventKey is pf19) /* or pf19 is pressed*/

    if (TS0YW01.TS0YWSFL == "N") /* If no selection is made*/
      converseLib.validationFailed(153); /* Error message and highlight*/
      TS0YM001.XXXPRCNM = "TS0Y152"; /* Process name*/
      TS0YM005.XXXPRCNM = "TS0Y152"; /* Process name*/
      TS0YW01.TS0YWPSW = "Y"; /* Move yes to error switch*/
    end

  end


end // end TS0Y152

// Process valid input request
Function TS0Y160()
   /* ------------------------------------------------------------*/

              /* PROCESS VALID INPUT REQUESTS*/

     /* 1) If selection is made, record the selection information*/
        /* in the pass arrays.*/
     /* 2) If a scroll request, adjust temporary storage page*/
        /* number.*/
     /* 3) Transfer to requested map or application according*/
        /* to PFkey pressed.*/
     /* 4) Restrict Maintenance access for US & CANADA shipments.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* Check for selections*/
   /* ------------------------------------------------------------*/
  if (TS0YW01.TS0YWSFL == "Y") /* if selection is made*/

    TS0YW01.TS0YWIXM = 1; /* set up index*/
    TS0YW01.TS0YWIXW = 1; /* set up index*/

    while (TS0YW01.TS0YWIXM <= 14 /* Until end of lines*/
     && TS0YW01.TS0YWIXW <= TS0YW01.TS0YWMSL) /* le max select lines*/

      if (TS0YM001.TS0YMSEL[TS0YWIXM] == "S" /* Save the key*/
       || TS0YM005.TS0YMSEL[TS0YWIXM] == "S") /* Save the key*/

        TSWREC.TSW2SHP[TS0YWIXW] = TSWREC.TSFSHPID;
        TSWREC.TSWPLNBR[TS0YWIXW] = TS0YW02.TSIPLNBR[TS0YWIXM];
        TSWREC.TSWNKCTN[TS0YWIXW] = TS0YW02.TSHNKCN[TS0YWIXM];
        TS0YW01.TSHCNTNR[TS0YWIXW] = TS0YW02.TSHCNTNR[TS0YWIXM];
        TSWREC.TSHCNTNR = TS0YW02.TSHCNTNR[TS0YWIXM];
        TS0YW01.TSHNKCN[TS0YWIXW] = TS0YW02.TSHNKCN[TS0YWIXM];
        TS0YW01.TS0YWAPO[TS0YWIXW] = TS0YW02.PC3PONBR[TS0YWIXM];
        TSWREC.PC3PONBR = TS0YW02.PC3PONBR[TS0YWIXM];
        TS0YW01.PC-ITM-SEQ-NBR = TS0YW02.PC-ITM-SEQ-NBR[TS0YWIXM];

        TS0YW01.TS0YWIXW = TS0YW01.TS0YWIXW + 1; /* Increment line index*/

      end

      TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* increment line index*/

    end

  end

  TS0YW01.TS0YWSCN = " "; /* Initialize save container*/
  TS0YW01.TS0YWSPO = 0; /* Initialize save po*/

   /* ------------------------------------------------------------*/
           /* Check for pfkey operations*/
   /* Restrict maintenance access for US & CANADA Shipments.*/
   /* ------------------------------------------------------------*/
   /* SKUMA4 CHANGES BEGIN 12/07/01*/

  TS0Y470(); /* Select Destination Country*/
  if ((TSCREC.XCTCD == "USA"
   || TSCREC.XCTCD == "CANA"
   || TSCREC.XCTCD == "USVI"
   || TSCREC.XCTCD == "GUAM"
   || TSCREC.XCTCD == "PUER"
   || TSCREC.XCTCD == "JAMA"
   || TSCREC.XCTCD == "BAHA"
   || TSCREC.XCTCD == "SAIP")) /* Check for US & Canada Shipments*/
    if ((converseVar.eventKey is pf13
     || converseVar.eventKey is pf15
     || converseVar.eventKey is pf17
     || converseVar.eventKey is pf19))
      converseLib.validationFailed(452);
      TS0YW01.TS0YWPSW = "Y"; /* set error switch*/
      TS0YM001.XXXPRCNM = "TS0Y160"; /* Process name*/
    end
  else
    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "TS0Z"; /* Set to TS0Z current*/
      COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
      XSTSS01(); /* transfer to application*/
      TS0YW01.TS0YWPSW = "Y"; /* if fails, indicate error*/
      TS0YM001.XXXPRCNM = "TS0Y160"; /* Process name*/
      TS0YM005.XXXPRCNM = "TS0Y160"; /* Process name*/
    else
      if (converseVar.eventKey is pf15) /* PF15 was pressed*/
        TS0YW01.TS0YWMAP = "2B"; /* Select Map #2b*/
        TS0YW01.TS0YWIXA = 1; /* Initialize array index*/
        TS0YW01.TS0YWSWR = "Y"; /* Set request for data*/
      else
        if (converseVar.eventKey is pf17) /* PF17 was pressed*/
          TS0YW01.TS0YWMAP = "3 "; /* Select Map #3*/
          TS0YW01.TS0YWIXA = 1; /* Initialize array index*/
          TS0YW01.TS0YWSWR = "Y"; /* Set request for data*/
        else
          if (converseVar.eventKey is pf19) /* PF19 was pressed*/
            TS0YW01.TS0YWMAP = "4 "; /* Select Map #4*/
            TS0YW01.TS0YWIXA = 1; /* ;/* Initialize array index*/
            TS0YW01.TS0YWSWR = "Y"; /* ;/* SET REQUEST FOR DATA*/
          end
        end
      end
    end
  end
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS0YW01.TS0YWTSP = TS0YW01.TS0YWTSP - 1; /* Decrement page number*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      TS0YW01.TS0YWTSP = TS0YW01.TS0YWTSP + 1; /* Increment page number*/
    else
      if (converseVar.eventKey is pf10) /* Scroll forward requested*/
        TS0YW01.TS0YWMAP = "1 "; /* Request for left  screen*/
      else
        if (converseVar.eventKey is pf11) /* Scroll forward requested*/
          TS0YW01.TS0YWMAP = "5 "; /* Request for right screen*/
        else
          if (converseVar.eventKey is pf16) /* PF16 was pressed*/
            COMMAREA.CATOAP = "TS02"; /* Set to TS0Z current*/
            COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
            XSTSS01(); /* transfer to application*/
            TS0YW01.TS0YWPSW = "Y"; /* if fails, indicate error*/
            TS0YM001.XXXPRCNM = "TS0Y160"; /* Process name*/
            TS0YM005.XXXPRCNM = "TS0Y160"; /* Process name*/
          else
            if (converseVar.eventKey is pf18) /* PF18 was pressed*/
              COMMAREA.CATOAP = "TS01"; /* Set to TS0Z current*/
              COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
              XSTSS01(); /* transfer to application*/
              TS0YW01.TS0YWPSW = "Y";
                        /* IF FAILS, INDICATE ERROR*/
              TS0YM001.XXXPRCNM = "TS0Y160"; /* Process name*/
              TS0YM005.XXXPRCNM = "TS0Y160"; /* Process name*/
            else
              if (converseVar.eventKey is enter) /* ENTER was pressed*/
                TS0YW01.TS0YWMAP = "4A"; /* Select Map #4a*/
                TS0YW01.TS0YWIXA = 1;
                        /* INITIALIZE ARRAY INDEX*/
                TS0YW01.TS0YWSWR = "Y";
                       /* Set request for data*/
              else
                if (converseVar.eventKey is pf14) /* PF14 was pressed*/
                  TS0YW01.TS0YWMAP = "2 "; /* Select Map #2*/
                  TS0YW01.TS0YWIXA = 1; /* Initialize array index*/
                  TS0YW01.TS0YWSWR = "Y"; /* Set request for data*/
                  TS0YW01.TS0YWPWF = "N"; /* Reset po quantity flag*/
                end
              end
            end
          end
        end
      end
    end
  end
   /* SKUMA4 CHANGES END 12/07/01*/
end // end TS0Y160

// Container style change screen
Function TS0Y200()
   /* ------------------------------------------------------------*/

             /* CONTAINER STYLE CHANGE SCREEN*/

   /* This is the main process used to display the container*/
   /* style change/inquiry/delete screen.*/
   /* Processing sequence is as follows:*/

   /* 1) If request for data is yes;*/
      /* - Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) If change map is being displayed.*/
      /* - Reset highlighted fields to normal intensity.*/
      /* - Verify the data that was entered.*/
   /* 6) If no errors are found.*/
      /* - Process a valid input request.*/
   /* 7) No change access for US & CANADA Shipments.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWSWR == "Y") /* If request for data is yes*/
    TS0Y210(); /* Obtain the data for display*/
  end

  TS0Y220(); /* Format and display the map*/

  TS0Y230(); /* Check attention identifier*/

  if (TS0YW01.TS0YWMAP == "2 ") /* If change map is indicated*/
   /* SKUMA4 CHANGES BEGIN 12/07/01*/
    if ((TSCREC.XCTCD == "USA" /* Check for US & Canada Shipments*/
     || TSCREC.XCTCD == "CANA" 
     || TSCREC.XCTCD == "USVI" 
     || TSCREC.XCTCD == "GUAM" 
     || TSCREC.XCTCD == "PUER" 
     || TSCREC.XCTCD == "JAMA" 
     || TSCREC.XCTCD == "BAHA" 
     || TSCREC.XCTCD == "SAIP"))
      set TS0YM002.PC3PONBR protect;
      set TS0YM002.PC-ITM-SEQ-NBR protect;
      set TS0YM002.TS0YMPYR protect;
      set TS0YM002.TS0YMPMO protect;
      set TS0YM002.TS0YMDMO protect;
      set TS0YM002.FY1FCTYC protect;
      set TS0YM002.PC4ORTYP protect;
      set TS0YM002.PC2CUXID protect;
      set TS0YM002.SY2CLRID protect;
      set TS0YM002.XDMCD protect;
      set TS0YM002.XPGCD protect;
      set TS0YM002.XQACD protect;
      set TS0YM002.XOWCD protect;
      set TS0YM002.PC2INSEG protect;
      set TS0YM002.XUMCD protect;
      set TS0YM002.TS0YM-CUST-ORD-ID protect;
      set TS0YM002.TS0YM-NIKE-ORD-ID protect;
      set TS0YM002.TS-CRTF-ORIG-ID protect;
      set TS0YM002.TS-EXPT-LIC-ID protect;
      set TS0YM002.TS-GEN-PRF-ID protect;
      set TS0YM002.TS0YMCTN protect;
      set TS0YM002.TS0YMQTY protect;
      set TS0YM002.TS0YMKIL protect;
      set TS0YM002.TS0YMCBM protect;
      converseLib.validationFailed(452);
      TS0YW01.TS0YWPSW = "Y"; /* set error switch*/
      TS0YM001.XXXPRCNM = "TS0Y200"; /* Process name*/
    else
      TS0Y240(); /* Reset fields to normal intensity*/
      TS0Y250(); /* Verify the entered data*/
    end
  end
   /* SKUMA4 CHANGES END 12/07/01*/

  if (TS0YW01.TS0YWPSW == "N") /* If no errors have occurred*/
    TS0Y260(); /* Process valid input request*/
  end


end // end TS0Y200

// Backup before del(cplhd,cntnr)
Function TS0Y201()
   /* ------------------------------------------------------------*/

   /* This PROC will take a backup of the rows to be deleted from*/
   /* either packing list or container tables.*/

   /* ------------------------------------------------------------*/

   /* **************** TCS changes begins here *********************/

  if (WTS4201.TS4201-DELETE-TYP == "D2")
    WTS4201.TS4201-NIKE-SHP-ID = VCPLHD04.TS-NIKE-SHP-ID;
    WTS4201.TS4201-NIKE-PL-NBR = VCPLHD04.TS-NIKE-PL-NBR;
    call "TS4200" (WTS4201) {isNoRefresh = yes, isExternal = yes}; /* Take backup before deletion*/
  else
    if (WTS4201.TS4201-DELETE-TYP == "D3")
      WTS4201.TS4201-NIKE-SHP-ID = TSWREC.TSFSHPID;
      WTS4201.TS4201-NIKE-CNTNR-NBR = TS0YW01.TSHNKCN[TS0YWIXA];
      call "TS4200" (WTS4201) {isNoRefresh = yes, isExternal = yes}; /* Take backup before deletion*/
    end
  end

  if (WTS4201.TS4201-RETURN-CODE == "00") /* if good return code*/
    if (WTS4201.TS4201-SQLCODE == 0 /* if normal*/
     || WTS4201.TS4201-SQLCODE == 100) /* if no row found*/
       /* ========== NEXT SENTENCE =======>*/
    end
  else

    if (WTS4201.TS4201-SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    if (WTS4201.TS4201-RETURN-CODE == "01")
      converseLib.validationFailed(01);
    end

    if (WTS4201.TS4201-RETURN-CODE == "02")
      converseLib.validationFailed(02);
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y201"; /* Process name*/
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    if (WTS4201.TS4201-DELETE-TYP == "D2")
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
      TA1REC.TA1LOC = "TS0Y260 CALL TS4200";
    else
      if (WTS4201.TS4201-DELETE-TYP == "D3")
        TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
        TA1REC.TA1LOC = "TS0Y260 CALL TS4200";
      end
    end

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/

    TS0YM001.XXXPRCNM = "TS0Y201"; /* Process name*/

  end

end // end TS0Y201

// Obtain the data for display
Function TS0Y210()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Select the row from DTRANS.VSHPHD01 to obtain the data*/
      /* for display on the container style screen.*/
   /* 2) Select the row from DTRANS.VCPLHD04 to obtain the data*/
      /* for display on the container style screen.*/
   /* 3) Select Set from DPRODC.VPOITM01 to obtain the Air*/
      /* Freight Request Number. Task #TS0317 05/02/94 GAMEN.*/

      /* Indicate that the request for data was completed.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
          /* Select shipment header row*/
   /* ------------------------------------------------------------*/
  TSFREC.TSFSHPID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
    TS0YW01.TS0YWSWR = "N"; /* set request for data to no*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      converseLib.validationFailed(69); /* cpl deleted by another application*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y210";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y210"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSFREC.TSFKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM002.XXXPRCNM = "TS0Y210"; /* Process name*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/

    end
  end

  if (TS0YW01.TS0YWPSW == "N") /* if no errors*/
    /* ------------------------------------------------------------*/
          /* Select container packing list header row*/
    /* ------------------------------------------------------------*/
    VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSW2SHP[TS0YWIXA];
    VCPLHD04.TS-NIKE-PL-NBR = TSWREC.TSWPLNBR[TS0YWIXA];

    TSGREC.TSNFNC = "SA"; /* move in function code*/
    call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
      TS0YW04.TS0YW04-GRP = VCPLHD04.VCPLHD04-GRP;
      TS0YW01.TS0YWSWR = "N"; /* set request for data to no*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
        converseLib.validationFailed(69); /* cpl deleted by another application*/
        TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
        TS0YM002.XXXPRCNM = "TS0Y210";
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
          converseLib.validationFailed(11); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "TS0Y210"; /* Process name*/
        TA1REC.TA1LOC = "SELECT A TABLE ROW";
        TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
        TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        TS0YM002.XXXPRCNM = "TS0Y210"; /* Process name*/
        TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/

      end
    end
  end


  if (TS0YW01.TS0YWPSW == "N") /* if no errors*/
    /* ------------------------------------------------------------*/
          /* Select row from the craft table, DTRANS.VCRAFT01*/
    /* ------------------------------------------------------------*/
    set TS5REC empty;
    TS5REC.TSACARCD = TSFREC.TSACARCD;
    TS5REC.TS5CRAFT = TSFREC.TS5CRAFT;
    TS0YS0A(); /* Call iomod to retrieve data;*/
    if (TS5REC.YMTCD == "AF")
      /* ------------------------------------------------------------*/
          /* Select Set from P.O. item table, DPRODC.VPOITM01*/
      /* ------------------------------------------------------------*/
      set PC5REC empty;
      set PC6REC empty;
      set PCYREC empty;
      PC6REC.XGPCD = VCPLHD04.XGP-GPC-CD; /* move in keys*/
      PC6REC.PC3PONBR = VCPLHD04.PC-PO-NBR;
      PC6REC.SY1STNBR = VCPLHD04.SY-STY-NBR;
      PC6REC.SY2CLRID = VCPLHD04.SY-COLR-CD-ID;
      PC6REC.XDMCD = VCPLHD04.XDM-DIM-CD;
      PC6REC.XQACD = VCPLHD04.XQA-QUAL-CD;
      PC6REC.XPGCD = VCPLHD04.XPG-PKG-TYP-CD;
      PC6REC.XOWCD = VCPLHD04.XOW-OWN-GRP-CD;
      PC6REC.XUMCD = VCPLHD04.XUM-UOM-CD;
      PC6REC.PC2CUXID = VCPLHD04.PC-PRDCU-ID;
      PC6REC.PC2INSEG = VCPLHD04.PC-CU-IN-SEG-CD;
      PC6REC.OP1PARTN = VCPLHD04.OP-ORD-PART-CHAR;
      PC6REC.OP1CUOID = VCPLHD04.OP-CUST-ORD-ID;
      PC6REC.OP1NORID = VCPLHD04.OP-NIKE-ORD-ID;
      PC6REC.XWHCD = TSFREC.XWHCD;
      PC6REC.YMTCD = "AF";
      PC6REC.PC6ETSDT = -1;
      PC6REC.PC6RTADT = -1;
      PC6REC.PC6OETS = -1;
      PC6REC.PC6PLAN = -1;
      PC6REC.XDSCD = "*";
      PC6REC.YSMXDV = "*";

      if (TSFREC.YSTCD == "AR")
        PC6REC.OP1CUOID = -1;
        PC6REC.OP1NORID = -1;
        PC6REC.OP1PARTN = "*";
      end

      PC5REC.XGPCD = VCPLHD04.XGP-GPC-CD; /* move in keys*/

      XSPCS-VPOITM01-SH(); /* Select Set, SH, DPRODC.VPOITM01*/

      PC5REC.PC5WSWT = "N"; /* Initialize end of set flag*/
      TS0YW01.PC6AIRNB = 0;
      TS0YW01.TS0YW-NBR-DAYS-BFR = 9999;
      TS0YW01.TS0YW-NBR-DAYS-AFT = 9999;
      TS0YW01.PC6ETSDT = 0;

      XSPCS-VPOITM01-NH(); /* Fetch, NH, DPRODC.VPOITM01*/

      while (PC5REC.PC5WSWT == "N")
        TS0Y211();
        XSPCS-VPOITM01-NH(); /* Fetch, NH, DPRODC.VPOITM01*/
      end

      XSPCS-VPOITM01-CH(); /* Close Set, CH, DPRODC.VPOITM01*/

    end
  end

end // end TS0Y210

// Determine Air Freight Req Nbr
Function TS0Y211()
   /* ------------------------------------------------------------*/

          /* DETERMINE AIR FREIGHT REQUEST NUMBER*/

   /* This routine will find, and save, the air frgt rqst nbr*/
   /* for the p.o. item that has an actual departure date that*/
   /* closest to the ETS date.*/

   /* ------------------------------------------------------------*/

  if (PC6REC.PC6ETSDT > TS0YW01.PC6ETSDT
   && PC6REC.PC6ETSDT <= TSFREC.TSFDPRTA
  ) /* ------------------------------------------------------------*/
    /* get the difference from ETS and departure date*/
    /* ------------------------------------------------------------*/
    set TA2REC empty; /* clear the date record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move date option to record*/
    TA2REC.TA2GRTYP = "G"; /* move date type to record*/
    TA2REC.TA2DBDFN = PC6REC.PC6ETSDT; /* From date*/
    TA2REC.TA2DBDTN = TSFREC.TSFDPRTA; /* To date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Obtain the days differance*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code ok*/
      TS0YW01.TS0YW-NBR-DAYS-BFR = TA2REC.TA2DBDDN;
      TS0YW01.PC6AIRNB = PC6REC.PC6AIRNB;
    end

  else
    if (PC6REC.PC6ETSDT >= TSFREC.TSFDPRTA
    ) /* ------------------------------------------------------------*/
      /* get the difference from ETS and departure date*/
      /* ------------------------------------------------------------*/
      set TA2REC empty; /* clear the date record*/
      TA2REC.TA2DTOPT = "DAYSDIFF"; /* move date option to record*/
      TA2REC.TA2GRTYP = "G"; /* move date type to record*/
      TA2REC.TA2DBDFN = TSFREC.TSFDPRTA; /* From date*/
      TA2REC.TA2DBDTN = PC6REC.PC6ETSDT; /* To date*/
      call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Obtain the days differance*/
      if (TA2REC.TA2RTNCD == 0000) /* if return code ok*/
        TS0YW01.TS0YW-NBR-DAYS-AFT = TA2REC.TA2DBDDN;
        if (TS0YW01.TS0YW-NBR-DAYS-AFT < TS0YW01.TS0YW-NBR-DAYS-BFR)
          TS0YW01.PC6AIRNB = PC6REC.PC6AIRNB;
        end
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of TS0Y211 ***********************/
end // end TS0Y211

// Format and display the map
Function TS0Y220()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) Format the map heading.*/
   /* 2) If no error to display, format the selected data.*/
   /* 3) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWPSW == "N") /* no errors*/
    set TS0YM002 initial; /* set map clear*/

    TS0YM002.TSFSHPID = TSWREC.TSFSHPID;
    TS0YM002.TSFBOL = TSWREC.TSFBOL;
    TS0YM002.TSHCNTNR = TS0YW01.TSHCNTNR[TS0YWIXA];
    TS0YM002.TSACARCD = TSWREC.TSACARCD;
    TS0YM002.TS5CRAFT = TSWREC.TS5CRAFT;
    TS0YM002.TSFSHPNB = TSWREC.TSFSHPNB;
    TS0YM002.TSEDEST = TSWREC.TSEDEST;
    TS0YM002.XWHCD = TSWREC.XWHCD;
    TS0YM002.XXX-USER-ID = TSHREC.XXX-USER-ID;

    if (TS0YW01.TS0YWSWR == "N") /* if data was found to display*/
      TS0Y221(); /* format the selected data*/
    end

  end

  if (TS0YW01.TS0YWMAP == "2 ") /* if maintenance map is indicated*/

    TS0YM002.TS0YMHDG = "MAINTENANCE";

    if (TS0YW01.TS0YWPSW == "N") /* no errors*/
      set TS0YM002.PC3PONBR cursor; /* set new cursor*/
    end


    if (TS0YW01.TSIDETFL == "Y") /* if detail exists for cpl*/
      set TS0YM002.TS0YMCTN protect; /* protect carton quantity*/
      set TS0YM002.TS0YMQTY protect; /* protect shipping quantity*/
    end

  else

    if (TS0YW01.TS0YWMAP == "2A") /* if inquiry map is indicated*/

      TS0YM002.TS0YMHDG = "INQUIRY";
      set TS0YM002.XXXPRCNM cursor; /* set new cursor*/
      set TS0YM002.PC3PONBR protect;
      set TS0YM002.PC-ITM-SEQ-NBR protect;
      set TS0YM002.TS0YMPYR protect;
      set TS0YM002.TS0YMPMO protect;
      set TS0YM002.TS0YMDMO protect;
      set TS0YM002.FY1FCTYC protect;
      set TS0YM002.PC4ORTYP protect;
      set TS0YM002.PC2CUXID protect;
      set TS0YM002.SY2CLRID protect;
      set TS0YM002.XDMCD protect;
      set TS0YM002.XPGCD protect;
      set TS0YM002.XQACD protect;
      set TS0YM002.XOWCD protect;
      set TS0YM002.PC2INSEG protect;
      set TS0YM002.XUMCD protect;
      set TS0YM002.TS0YM-CUST-ORD-ID protect;
      set TS0YM002.TS0YM-NIKE-ORD-ID protect;
      set TS0YM002.TS-CRTF-ORIG-ID protect;
      set TS0YM002.TS-EXPT-LIC-ID protect;
      set TS0YM002.TS-GEN-PRF-ID protect;
      set TS0YM002.TS0YMCTN protect;
      set TS0YM002.TS0YMQTY protect;
      set TS0YM002.TS0YMKIL protect;
      set TS0YM002.TS0YMCBM protect;
    else
      if (TS0YW01.TS0YWMAP == "2B") /* if delete map is indicated*/
        TS0YM002.TS0YMHDG = "DELETE";
        TS0YM002.TS0YMMSG = "PRESS ENTER TO DELETE OR PF3 TO ABORT";
        set TS0YM002.XXXPRCNM cursor; /* set new cursor*/
        set TS0YM002.PC3PONBR protect;
        set TS0YM002.PC-ITM-SEQ-NBR protect;
        set TS0YM002.TS0YMPYR protect;
        set TS0YM002.TS0YMPMO protect;
        set TS0YM002.TS0YMDMO protect;
        set TS0YM002.FY1FCTYC protect;
        set TS0YM002.PC4ORTYP protect;
        set TS0YM002.PC2CUXID protect;
        set TS0YM002.SY2CLRID protect;
        set TS0YM002.XDMCD protect;
        set TS0YM002.XPGCD protect;
        set TS0YM002.XQACD protect;
        set TS0YM002.XOWCD protect;
        set TS0YM002.PC2INSEG protect;
        set TS0YM002.XUMCD protect;
        set TS0YM002.TS0YM-CUST-ORD-ID protect;
        set TS0YM002.TS0YM-NIKE-ORD-ID protect;
        set TS0YM002.TS-CRTF-ORIG-ID protect;
        set TS0YM002.TS-EXPT-LIC-ID protect;
        set TS0YM002.TS-GEN-PRF-ID protect;
        set TS0YM002.TS0YMCTN protect;
        set TS0YM002.TS0YMQTY protect;
        set TS0YM002.TS0YMKIL protect;
        set TS0YM002.TS0YMCBM protect;
      end
    end
  end

  /* IF EZEMNO GT 0;                  /* message to display*/
  /* SET TS0YM002 ALARM;            /* indicate sound alarm*/
  /* END;*/

  TS0YM002.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/

  converse TS0YM002 ;

  TS0YW01.TS0YWPSW = "N"; /* reset error switch*/

  TS0Y222(); /* Check for pop-up windows*/


end // end TS0Y220

// Format the selected data
Function TS0Y221()
   /* ------------------------------------------------------------*/

                 /* FORMAT THE SELECTED DATA*/

   /* 1) Format the selected data on the page.*/
   /* 2) Select all the associated descriptions for the map.*/
      /* - store name*/
      /* - style*/
      /* - color*/
      /* - quality*/
      /* - iseg*/
      /* - dimension*/
      /* - packaging type*/
      /* - owner group*/
      /* - unit of measure*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
       /* Move all VCPLHD04 fields to the map*/
   /* ------------------------------------------------------------*/

  TS0YS11(); /* move in all fields to map*/

   /* ------------------------------------------------------------*/
       /* Select the Cust. name*/
   /* ------------------------------------------------------------*/

  PC2REC.PC2CUXID = VCPLHD04.PC-PRDCU-ID; /* move in keys*/
  PC2REC.XGPCD = VCPLHD04.XGP-GPC-CD;

  TS0YS13(); /* select from dprodg.vprdcu01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
    TS0YM002.PC2NAME = PC2REC.PC2NAME; /* move in cust name*/
  end

   /* ------------------------------------------------------------*/
       /* Select the P.O. Item for Cust. P.O.*/
   /* ------------------------------------------------------------*/

  if (VCPLHD04.PC-PRDCU-ID > " ") /* move in keys*/

    TS0Y-22110(); /* ===>  Get Customer P.O.*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
      TS0YM002.OP1CUPO = OP1REC.OP1CUPO; /* move in cust p.o.*/
    end
  end


   /* ------------------------------------------------------------*/
       /* Select the style and color name*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = VCPLHD04.XGP-GPC-CD; /* move in keys*/
  PG2REC.SY1STNBR = VCPLHD04.SY-STY-NBR;
  PG2REC.SY2CLRID = VCPLHD04.SY-COLR-CD-ID;
  PG2REC.XDMCD = VCPLHD04.XDM-DIM-CD;

  TS0YS15(); /* select from dprod.vcolor02*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
    TS0YM002.SY1SSTNM = PG2REC.SY1SSTNM; /* move in style sname*/
    TS0YM002.SY2CLRAB = PG2REC.SY2CLRAB; /* move in color abrev.*/
  end

   /* ------------------------------------------------------------*/
        /* Select the quality code description*/
   /* ------------------------------------------------------------*/

  if (VCPLHD04.XQA-QUAL-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XQA-QUAL-CD in XQATBL.XQACD)
      TS0YM002.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the iseg description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.PC-CU-IN-SEG-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    PC2REC.PC2INSEG = VCPLHD04.PC-CU-IN-SEG-CD; /* move in keys*/
    PC2REC.XGPCD = VCPLHD04.XGP-GPC-CD;

    TS0YS16(); /* select from dprodg.vprdcu01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
      TS0YM002.PC2SEGDE = PC2REC.PC2SEGDE; /* move in iseg desc*/
    end

  end

   /* ------------------------------------------------------------*/
        /* Select the dimension description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XDM-DIM-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XDM-DIM-CD in XDMTBL.XDMCD)
      TS0YM002.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the packaging type description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XPG-PKG-TYP-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XPG-PKG-TYP-CD in XPGTBL.XPGCD)
      TS0YM002.XPGDESC = XPGTBL.XPGDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the owner group description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XOW-OWN-GRP-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XOW-OWN-GRP-CD in XOWTBL.XOWCD)
      TS0YM002.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the unit of measure description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XUM-UOM-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XUM-UOM-CD in XUMTBL.XUMCD)
      TS0YM002.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end
  end


end // end TS0Y221

// Check for user ? code inquiry
Function TS0Y222()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/


  if (TS0YM002.XDMCD == "?"
   || TS0YM002.XPGCD == "?"
   || TS0YM002.XQACD == "?"
   || TS0YM002.XOWCD == "?"
   || TS0YM002.XUMCD == "?")

    if (TS0YM002.XDMCD == "?") /* if ? in dimension field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                DIMENSION"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dimension window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0YM002.XDMCD = XDMTBL.XDMCD[XX0XWPIX];
      else
        TS0YM002.XDMCD = " "; /* clear fields*/
      end
    end

    if (TS0YM002.XPGCD == "?") /* if ? in package field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              PACKAGING TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPG01(); /* perform package window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0YM002.XPGCD = XPGTBL.XPGCD[XX0XWPIX];
      else
        TS0YM002.XPGCD = " "; /* clear fields*/
      end
    end

    if (TS0YM002.XQACD == "?") /* if ? in quality field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 QUALITY"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* perform quality window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0YM002.XQACD = XQATBL.XQACD[XX0XWPIX];
      else
        TS0YM002.XQACD = " "; /* clear fields*/
      end
    end

    if (TS0YM002.XOWCD == "?") /* if ? in owner group field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "               OWNER GROUP"; /* heading*/
      if (TS0YM002.XWHCD in XOWTBL.XWHCD) /* If warehouse in table*/
        XX0XW02.XWHCD = TS0YM002.XWHCD; /* warehouse*/
      else
        XX0XW02.XWHCD = "00"; /* default*/
      end

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform owner group window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0YM002.XOWCD = XOWTBL.XOWCD[XX0XWPIX];
      else
        TS0YM002.XOWCD = " "; /* clear fields*/
      end
    end

    if (TS0YM002.XUMCD == "?") /* if ? in unit of measure field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             UNIT OF MEASURE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXUM01(); /* perform package window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0YM002.XUMCD = XUMTBL.XUMCD[XX0XWPIX];
      else
        TS0YM002.XUMCD = " "; /* clear fields*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0YW01.TS0YWPSW = "Y"; /* Bypass exit with fake error*/
    exit stack;

  end

end // end TS0Y222

// Check attention identifier
Function TS0Y230()
   /* ------------------------------------------------------------*/

         /* CHECK THE ATTENTION IDENTIFIER*/

   /* 1) Check attention identifier used to invoke transaction.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0YM002 initial; /* Clear the map fields*/
    TS0YW01.TS0YWSWR = "Y"; /* Set request for data = n*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* save key*/
    TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
    TS0YW01.TS0YWSWR = "Y"; /* reload the data*/
    TS0YW01.TS0YWMAP = "1 "; /* go to browse screen*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    TS0YM002.XXXPRCNM = "TS0Y230"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0Y230

// Reset highlighted fields
Function TS0Y240()
   /* ------------------------------------------------------------*/

                 /* RESET HIGHLIGHTED FIELDS*/

     /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0YM002.PC3PONBR initialAttributes; /* Reset all fields to normal*/
  set TS0YM002.PC-ITM-SEQ-NBR initialAttributes; /* Reset all fields to normal*/
  set TS0YM002.TS0YMPYR initialAttributes; /* intensity*/
  set TS0YM002.TS0YMPMO initialAttributes;
  set TS0YM002.TS0YMDMO initialAttributes;
  set TS0YM002.FY1FCTYC initialAttributes;
  set TS0YM002.PC4ORTYP initialAttributes;
  set TS0YM002.SY1STNBR initialAttributes;
  set TS0YM002.SY2CLRID initialAttributes;
  set TS0YM002.PC2CUXID initialAttributes;
  set TS0YM002.PC2INSEG initialAttributes;
  set TS0YM002.XDMCD initialAttributes;
  set TS0YM002.XPGCD initialAttributes;
  set TS0YM002.XQACD initialAttributes;
  set TS0YM002.XOWCD initialAttributes;
  set TS0YM002.XUMCD initialAttributes;
  set TS0YM002.TS0YMCTN initialAttributes;
  set TS0YM002.TS0YMQTY initialAttributes;
  set TS0YM002.TS0YMKIL initialAttributes;
  set TS0YM002.TS0YMCBM initialAttributes;
  set TS0YM002.TS0YM-CUST-ORD-ID initialAttributes;
  set TS0YM002.TS0YM-NIKE-ORD-ID initialAttributes;
  set TS0YM002.TS-CRTF-ORIG-ID initialAttributes;
  set TS0YM002.TS-EXPT-LIC-ID initialAttributes;
  set TS0YM002.TS-GEN-PRF-ID initialAttributes;

end // end TS0Y240

// Verify the entered data
Function TS0Y250()
   /* ------------------------------------------------------------*/

                /* VERIFY THE ENTERED DATA*/

         /* 1) cubic meters*/
         /* 2) kilos                        --*/
         /* 3) ship quanity                | unit of measure*/
         /* 4) cartons                     | iseg*/
         /* 6) other edits ----------------| owner group*/
         /* 7) customer xref               | quality*/
         /* 8) sales order                 | packaging type*/
         /* 9) po number / po id           | style/color*/
         /* 10) Check for duplicate p/l    | dimension*/
   /* --*/
   /* ------------------------------------------------------------*/

   /* **************************************/
      /* Check for warning flag reset*/
   /* **************************************/

  TS0Y251(); /* Check for warning flags resetting*/


   /* **************************************/
           /* Cubic Meters*/
   /* **************************************/

  if (TS0YM002.TS0YMCBM < 0) /* if cubic meters less than 0*/

    converseLib.validationFailed(76); /* display error message*/
    TS0YW01.TS0YWCBM = 0;
    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM002.XXXPRCNM = "TS0Y250"; /* process name*/

    set TS0YM002.TS0YMCBM cursor, bold;

  else

    TS0YW01.TS0YWCBM = TS0YM002.TS0YMCBM;

  end

   /* **************************************/
           /* Kilos*/
   /* **************************************/

  if (TS0YM002.TS0YMKIL < 0) /* if kilos less than 0*/

    converseLib.validationFailed(76); /* display error message*/
    TS0YW01.TS0YWKG = 0;
    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM002.XXXPRCNM = "TS0Y250"; /* process name*/

    set TS0YM002.TS0YMKIL cursor, bold;

  else

    TS0YW01.TS0YWKG = TS0YM002.TS0YMKIL;

  end

   /* **************************************/
           /* Ship Quantity*/
   /* **************************************/

  if (TS0YM002.TS0YMQTY <= 0) /* if ship quantity less than 0*/

    converseLib.validationFailed(112); /* display error message*/
    TS0YW01.TS0YWSHP = 0;
    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM002.XXXPRCNM = "TS0Y250"; /* process name*/

    set TS0YM002.TS0YMQTY cursor, bold;

  else

    TS0YW01.TS0YWSHP = TS0YM002.TS0YMQTY;

  end

   /* **************************************/
           /* Cartons*/
   /* **************************************/

  if (TS0YM002.TS0YMCTN <= 0) /* if cartons less than 0*/

    converseLib.validationFailed(111); /* display error message*/
    TS0YW01.TS0YWCRT = 0;
    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM002.XXXPRCNM = "TS0Y250"; /* process name*/

    set TS0YM002.TS0YMCTN cursor, bold;

  else

    TS0YW01.TS0YWCRT = TS0YM002.TS0YMCTN;

  end

   /* **************************************/
           /* Other Edits*/
   /* **************************************/

  TS0Y255(); /* other edits*/

   /* **************************************/
           /* Customer xref*/
   /* **************************************/

  TS0Y256(); /* edit customer xref*/

   /* **************************************/
           /* Sales Order*/
   /* **************************************/

  TS0Y-25100(); /* edit sales order*/

   /* ---------------------------------------------------------------------*/
   /* Verify P.O. ID fields seperately if not a B-Grade warehouse shipment.*/
   /* ---------------------------------------------------------------------*/

  if (TS0YM002.PC3PONBR == 0) /* if po number not entered*/

    if (TSWREC.XGPCD == "02"   /* footwear GPC*/
     && TS0YM002.XQACD == "02" /* quality 2nd*/
     && TS0YM002.TS0YM-CUST-ORD-ID > 0
     && TS0YM002.TS0YM-NIKE-ORD-ID > 0)

      /* ========= NEXT SENTENCE =========>*/

    else
      TS0Y257(); /* Edit po id fields*/

    end
  end

   /* ---------------------------------------------*/
   /* Verify P.O. or P.O. ID are entered and valid.*/
   /* ---------------------------------------------*/

  TS0Y258(); /* Edit po # or po id*/

   /* ---------------------------------------------*/
   /* Verify PO line item sequence is entered.  And if changed*/
   /* retrieve information from VCPLHD04.*/
   /* ---------------------------------------------*/

  TS0Y258-001(); /* Edit po line item seq #*/

   /* ---------------------------------------------*/
   /* Check for duplicate p/l.*/
   /* ---------------------------------------------*/

  if (TS0YW01.TS0YWPSW == "N") /* If no errors have occurred so far*/

    TS0Y259(); /* Check to see if duplicate*/

    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/

      /* =========== NEXT SENTENCE ===========>*/

    else

      if (SQLCA.VAGen_SQLCODE == 0 /* if found and same p/l #*/
       && VCPLHD04.TS-NIKE-PL-NBR == TSWREC.TSWPLNBR[TS0YWIXA])

        /* ============ NEXT SENTENCE ===========>*/

      else

        set TS0YM002.PC3PONBR cursor, bold;
        set TS0YM002.PC-ITM-SEQ-NBR bold;
        set TS0YM002.PC2CUXID bold;
        set TS0YM002.SY1STNBR skip, bold;
        set TS0YM002.XDMCD bold;
        set TS0YM002.SY2CLRID bold;
        set TS0YM002.XPGCD bold;
        set TS0YM002.XQACD bold;
        set TS0YM002.XOWCD bold;
        set TS0YM002.PC2INSEG bold;
        set TS0YM002.XUMCD bold;
        set TS0YM002.TS0YM-CUST-ORD-ID bold;
        set TS0YM002.TS0YM-NIKE-ORD-ID bold;

        TS0YM002.XXXPRCNM = "TS0Y250"; /* process name*/
        converseLib.validationFailed(304); /* ===> P.L. with key already exists*/
        TS0YW01.TS0YWPSW = "Y";

      end
    end
  end

   /* -------------------------------------*/
   /* Validate quantity against po.*/
   /* -------------------------------------*/

  if (TS0YW01.TSIDETFL == "Y") /* If detail already entered for item*/

    if (TS0YW01.TS0YWPSW == "N"              /* and no errors have occurred so far*/
     || TS0YW01.TS0YW-PREV-SO-WARNING == "Y" /* if previous so warning*/
     || TS0YW01.TS0YW-PREV-WWF8-WARNING == "Y")

      if (TS0YW01.TS0YWPWF == "N"              /* If warning not set*/
       || TS0YW01.TS0YW-PREV-SO-WARNING == "Y" /* if previous so warning*/
       || TS0YW01.TS0YW-PREV-WWF8-WARNING == "Y")

        if (TS0YW01.TS0YW-PREV-WWF1-WARNING == "N"
         && TS0YW01.TS0YW-PREV-WWF2-WARNING == "N"
         && TS0YW01.TS0YW-PREV-WWF3-WARNING == "N"
         && TS0YW01.TS0YW-PREV-WWF4-WARNING == "N")

          if (TSWREC.XGPCD == "02"   /* Footwear GPC*/
           && TS0YM002.XQACD == "02" /* Quality 2nd*/
           && TS0YM002.TS0YM-CUST-ORD-ID > 0
           && TS0YM002.TS0YM-NIKE-ORD-ID > 0
           && TS0YM002.PC2CUXID == " ") /* B-Grade SO w/ no cxref*/

            /* =========== NEXT SENTENCE ==========>*/

          else

            TS0YW01.TSISTAT = " "; /* reset error codes*/
            TS0YW01.XRECD = " ";

          end

          if (TS0YM002.PC3PONBR == 0 /* if po number not entered*/
           && TSWREC.XGPCD == "02"   /* footwear GPC*/
           && TS0YM002.XQACD == "02" /* quality 2nd(b-grade)*/
           && TS0YM002.TS0YM-CUST-ORD-ID > 0
           && TS0YM002.TS0YM-NIKE-ORD-ID > 0)

            TS0Y-25200(); /* verify item on S.O. (VITEM0R1)*/

          else

            TS0Y252(); /* verify item on P.O. (VPOITM01)*/

          end

          TS0Y254(); /* verify item qty balance to ship*/

        end
      end

      if (TS0YW01.TS0YWWF1 == "Y" /* If warning for SO/PO not on item*/
       || TS0YW01.TS0YWWF2 == "Y" /* If warning for undership*/
       || TS0YW01.TS0YWWF3 == "Y" /* If warning for overship*/
       || TS0YW01.TS0YWWF4 == "Y" /* If warning for over tolerance table*/
       || TS0YW01.TS0YWWF5 == "Y" /* If warning for PO not in 'OP' status*/
       || TS0YW01.TS0YWWF6 == "Y" /* If warning for SO not in 'AL' status*/
       || TS0YW01.TS0YWWF7 == "Y" /* If warning for invalid SO (but PO>0)*/
       || TS0YW01.TS0YWWF8 == "Y" /* If warning for bgrade SO w/ no cxref*/
       || TS0YW01.TS0YWWF9 == "Y") /* If warning for invalid PO entered*/

        TS0YWPSW = "Y"; /* Set problem switch*/
        TS0Y253(); /* Process warnings*/

      else

        TS0YW01.TS0YW-PREV-WWF1-WARNING = "N"; /* reset prev warning*/
        TS0YW01.TS0YW-PREV-WWF2-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF3-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF4-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF5-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF8-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF9-WARNING = "N";
        TS0YW01.TS0YW-PREV-SO-WARNING = "N";

        TS0YW01.TS0YWPWF = "N"; /* Reset warning flag*/

      end
    end

  else /* =====> No Detail exists for P/L Style*/

    if (TS0YW01.TS0YWPSW == "N"              /* if no errors occurred*/
     || TS0YW01.TS0YW-PREV-SO-WARNING == "Y" /* if previous so warning*/
     || TS0YW01.TS0YW-PREV-WWF8-WARNING == "Y")

      if (TS0YW01.TS0YWPWF == "N"              /* if warning not set*/
       || TS0YW01.TS0YW-PREV-SO-WARNING == "Y" /* if previous so warning*/
       || TS0YW01.TS0YWWF5 == "Y"              /* If warning for PO not in 'OP' status*/
       || TS0YW01.TS0YWWF6 == "Y"              /* If warning for SO not in 'AL' status*/
       || TS0YW01.TS0YWWF7 == "Y"              /* If warning for invalid SO (but PO>0)*/
       || TS0YW01.TS0YWWF8 == "Y"              /* If warning for bgrade SO w/ no cxref*/
       || TS0YW01.TS0YWWF9 == "Y")             /* If warning for invalid PO entered*/


        if (TS0YW01.TS0YW-PREV-WWF1-WARNING == "N"
         && TS0YW01.TS0YW-PREV-WWF2-WARNING == "N"
         && TS0YW01.TS0YW-PREV-WWF3-WARNING == "N"
         && TS0YW01.TS0YW-PREV-WWF4-WARNING == "N")


          if (TSWREC.XGPCD == "02"   /* footwear GPC*/
           && TS0YM002.XQACD == "02" /* quality 2nd*/
           && TS0YM002.TS0YM-CUST-ORD-ID > 0
           && TS0YM002.TS0YM-NIKE-ORD-ID > 0
           && TS0YM002.PC2CUXID == " ") /* B-Grade SO w/ no cxref*/

            /* ======= Next Sentence ==========>*/

          else

            TS0YW01.TSISTAT = " "; /* Reset error codes*/
            TS0YW01.XRECD = " ";

          end

          if (TS0YM002.PC3PONBR == 0 /* if po number not entered*/
           && TSWREC.XGPCD == "02"   /* footwear GPC*/
           && TS0YM002.XQACD == "02" /* quality 2nd(b-grade)*/
           && TS0YM002.TS0YM-CUST-ORD-ID > 0
           && TS0YM002.TS0YM-NIKE-ORD-ID > 0)

            TS0Y-25200(); /* Verify item on S.O. (VITEM0R1)*/

          else

            TS0Y252(); /* Verify item on P.O. (VPOITM01)*/

          end

          TS0Y254(); /* Verify item qty balance to ship*/

        end

      end

      if (TS0YW01.TS0YWWF1 == "Y" /* If warning SO/PO not on item table*/
       || TS0YW01.TS0YWWF2 == "Y" /* If warning for undership*/
       || TS0YW01.TS0YWWF3 == "Y" /* If warning for overship*/
       || TS0YW01.TS0YWWF4 == "Y" /* If warning for over tolerance*/
       || TS0YW01.TS0YWWF5 == "Y" /* If warning for PO not in 'OP' status*/
       || TS0YW01.TS0YWWF6 == "Y" /* If warning for SO not in 'AL' status*/
       || TS0YW01.TS0YWWF7 == "Y" /* If warning for invalid SO*/
       || TS0YW01.TS0YWWF8 == "Y" /* If warning for bgrade SO w/ no cxref*/
       || TS0YW01.TS0YWWF9 == "Y") /* If warning for invalid PO entered*/

        TS0YWPSW = "Y"; /* Set problem switch*/
        TS0Y253(); /* Process warnings*/

      else

        TS0YW01.TS0YW-PREV-WWF1-WARNING = "N"; /* reset prev warning*/
        TS0YW01.TS0YW-PREV-WWF2-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF3-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF4-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF5-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF8-WARNING = "N";
        TS0YW01.TS0YW-PREV-WWF9-WARNING = "N";
        TS0YW01.TS0YW-PREV-SO-WARNING = "N";

        TS0YW01.TS0YWPWF = "N"; /* reset warning flag*/

      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0Y250 ***********************/
end // end TS0Y250

// Check/reset for warning flag
Function TS0Y251()
   /* ------------------------------------------------------------*/

                /* CHECK FOR WARNING FLAGS RESET*/

   /* ------------------------------------------------------------*/

   /* **************************************/
      /* Check for warning flag reset*/
   /* **************************************/

  if (TS0YM002.PC3PONBR != TS0YW01.TS0YWPO
   || TS0YM002.PC-ITM-SEQ-NBR != TS0YW01.PC-ITM-SEQ-NBR
   || TS0YM002.TS0YMPYR != TS0YW01.TS0YWPYR
   || TS0YM002.TS0YMPMO != TS0YW01.TS0YWPMO
   || TS0YM002.TS0YMDMO != TS0YW01.TS0YWDMO
   || TS0YM002.FY1FCTYC != TS0YW01.TS0YWFCT
   || TS0YM002.PC4ORTYP != TS0YW01.TS0YWOT
   || TS0YM002.TS0YMCBM != TS0YW01.TS0YWCBM
   || TS0YM002.TS0YMKIL != TS0YW01.TS0YWKG
   || TS0YM002.TS0YMQTY != TS0YW01.TS0YWSHP
   || TS0YM002.TS0YMCTN != TS0YW01.TS0YWCRT
   || TS0YM002.PC2CUXID != TS0YW01.TS0YWCXR
   || TS0YM002.SY2CLRID != TS0YW01.TS0YWCLR
   || TS0YM002.PC2INSEG != TS0YW01.TS0YWSEG
   || TS0YM002.XDMCD != TS0YW01.TS0YWXDM
   || TS0YM002.XPGCD != TS0YW01.TS0YWXPG
   || TS0YM002.XQACD != TS0YW01.TS0YWXQA
   || TS0YM002.XOWCD != TS0YW01.TS0YWXOW
   || TS0YM002.XUMCD != TS0YW01.TS0YWXUM
   || TS0YM002.TS0YM-CUST-ORD-ID != TS0YW01.OP1CUOID
   || TS0YM002.TS0YM-NIKE-ORD-ID != TS0YW01.OP1NORID)

    TS0YW01.TS0YWCBM = 0; /* reset all save fields*/
    TS0YW01.TS0YWKG = 0;
    TS0YW01.TS0YWSHP = 0;
    TS0YW01.TS0YWCRT = 0;
    TS0YW01.TS0YWPO = 0;
    TS0YW01.TS0YWPY = " ";
    TS0YW01.TS0YWPM = " ";
    TS0YW01.TS0YWDM = " ";
    TS0YW01.TS0YWFC = " ";
    TS0YW01.TS0YWOT = " ";
    TS0YW01.TS0YWCLR = " ";
    TS0YW01.TS0YWCXR = " ";
    TS0YW01.TS0YWSEG = " ";
    TS0YW01.TS0YWXDM = " ";
    TS0YW01.TS0YWXPG = " ";
    TS0YW01.TS0YWXQA = " ";
    TS0YW01.TS0YWXOW = " ";
    TS0YW01.TS0YWXUM = " ";
    TS0YW01.OP1CUOID = 0;
    TS0YW01.OP1NORID = 0;

    TS0YW01.TS0YWPWF = "N"; /* reset po quantity warning flags*/
    TS0YW01.TS0YWWF1 = "N";
    TS0YW01.TS0YWWF2 = "N";
    TS0YW01.TS0YWWF3 = "N";
    TS0YW01.TS0YWWF4 = "N";
    TS0YW01.TS0YWWF5 = "N";
    TS0YW01.TS0YWWF6 = "N";
    TS0YW01.TS0YWWF7 = "N";
    TS0YW01.TS0YWWF8 = "N";
    TS0YW01.TS0YWWF9 = "N";
    TS0YW01.TS0YW-PREV-WWF1-WARNING = "N";
    TS0YW01.TS0YW-PREV-WWF2-WARNING = "N";
    TS0YW01.TS0YW-PREV-WWF3-WARNING = "N";
    TS0YW01.TS0YW-PREV-WWF4-WARNING = "N";
    TS0YW01.TS0YW-PREV-WWF5-WARNING = "N";
    TS0YW01.TS0YW-PREV-WWF8-WARNING = "N";
    TS0YW01.TS0YW-PREV-WWF9-WARNING = "N";
    TS0YW01.TS0YW-PREV-SO-WARNING = "N";

  end


end // end TS0Y251

// Verify the item on the P.O.
Function TS0Y252()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE P.O.*/

   /* ------------------------------------------------------------*/

  if (TS0YM002.PC4ORTYP == "QQ"
   || TS0YM002.PC4ORTYP == "OS")

     /* ======== Next Sentence =========>*/

  else

    /* TS0YS17;                       /* Select the set of po items*/
    TS0YS76(); /* Select the set of po items*/

    TS0YW01.TS0YWEFL = "N"; /* ===> end of data flag*/

    if (SQLCA.VAGen_SQLCODE == 0 &&  /* If Select OK*/
    TS0YM002.PC-ITM-SEQ-NBR == 0)   
      TS0YS19(); /* Fetch P.O. Item*/
    end

    if (SQLCA.VAGen_SQLCODE == 0)

      if (TS0YM002.PC-ITM-SEQ-NBR != 0 && 
      PC6REC.PC6STAT == "CX")

        TS0Y-25250(); /* ===> set item not found switches*/

      end

      if (TS0YM002.PC-ITM-SEQ-NBR == 0)
        TS0YW01.TSISTAT = "99"; /* Reset status*/
        TS0YW01.XRECD = "99"; /* Reset exception code*/

        if (TS0YM002.TS0YM-CUST-ORD-ID == 0) /* Check/default S.O. Nbr*/

          TS0Y-25240(); /* ===> Check for multiple sales orders*/

        end
      end

    else

      if (SQLCA.VAGen_SQLCODE == 100)

        TS0Y-25250(); /* ===> set item not found switches*/

      end

    end

    if ((SQLCA.VAGen_SQLCODE == 100
     || SQLCA.VAGen_SQLCODE == 0) && 
    TS0YM002.PC-ITM-SEQ-NBR == 0)

      TS0YS21(); /* Close the selected set*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y252 ***********************/
end // end TS0Y252

// Process warnings
Function TS0Y253()
   /* ---------------------------------------------------------------*/
   /* PROCESS ARRAY WARNING FLAGS*/
   /* ---------------------------------------------------------------*/

   /* ---------------------------------------------------------------*/
   /* Process invalid SO (SO not found on SO header table,*/
   /* but PO > 0) warning flag.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF7 == "Y")

    if (TS0YW01.TS0YW-PREV-SO-WARNING == "N")

      set TS0YM002.TS0YM-CUST-ORD-ID cursor, bold;
      set TS0YM002.TS0YM-NIKE-ORD-ID bold;

      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name*/
      TS0YW01.TS0YWWF7 = "N"; /* Reset warning flag*/
      TS0YW01.TS0YW-PREV-SO-WARNING = "Y"; /* Set flag*/


      converseLib.validationFailed(359); /* warning ** S.O. Nbr invalid*/


      return;

    end
  end


   /* ---------------------------------------------------------------*/
   /* Process SO header not in 'AL' status warning flag.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF6 == "Y")

    if (TS0YW01.TS0YW-PREV-SO-WARNING == "N")

      set TS0YM002.TS0YM-CUST-ORD-ID cursor, bold;
      set TS0YM002.TS0YM-NIKE-ORD-ID bold;

      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name*/
      TS0YW01.TS0YWWF6 = "N"; /* reset warning flag*/
      TS0YW01.TS0YW-PREV-SO-WARNING = "Y"; /* set flag*/

      converseLib.validationFailed(334); /* SO header not in 'AL' status*/

      return;

    end
  end


   /* ---------------------------------------------------------------*/
   /* Process invalid PO number warning flag.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF9 == "Y") /* warning flag set*/

    if (TS0YW01.TS0YW-PREV-WWF9-WARNING == "N") /* not prev been set*/

      set TS0YM002.PC3PONBR cursor, bold; /* highlight po number*/

      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name to map*/
      TS0YW01.TS0YWWF9 = "N"; /* reset invalid po flag*/
      TS0YW01.TS0YW-PREV-WWF9-WARNING = "Y"; /* set previous flag*/

      converseLib.validationFailed(373); /* invalid po warning message*/

      return;

    end
  end


   /* ---------------------------------------------------------------*/
   /* Process PO not in 'OP' status warning flag.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF5 == "Y") /* warning flag set*/

    if (TS0YW01.TS0YW-PREV-WWF5-WARNING == "N") /* not previously set*/

      if (TS0YM002.PC3PONBR > 0) /* po number entered*/

        set TS0YM002.PC3PONBR cursor, bold;

      else

        set TS0YM002.TS0YMPYR cursor, bold;
        set TS0YM002.TS0YMPMO bold;
        set TS0YM002.TS0YMDMO bold;
        set TS0YM002.FY1FCTYC bold;
        set TS0YM002.PC4ORTYP bold;

      end

      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name*/
      TS0YW01.TS0YWWF5 = "N"; /* reset warning flag*/
      TS0YW01.TS0YW-PREV-WWF5-WARNING = "Y"; /* set prev flag*/

      converseLib.validationFailed(267); /* po not openwarning message*/

      return;

    end
  end


   /* ---------------------------------------------------------------*/
   /* Process SO header doesn't have assoc. CXREF.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF8 == "Y")

    if (TS0YW01.TS0YW-PREV-WWF8-WARNING == "N")

      set TS0YM002.PC2CUXID cursor, bold;
      set TS0YM002.TS0YM-CUST-ORD-ID bold;
      set TS0YM002.TS0YM-NIKE-ORD-ID bold;

      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name*/
      TS0YW01.TS0YWWF8 = "N"; /* reset warning flag*/
      TS0YW01.TS0YW-PREV-WWF8-WARNING = "Y"; /* set prev flag*/

      converseLib.validationFailed(357); /* SO header w/ no assoc cxrefwarning*/

      return;

    end
  end


   /* ---------------------------------------------------------------*/
   /* Process item not found on P.O. or S.O. warning flag.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF1 == "Y")

    if (TS0YW01.TS0YW-PREV-WWF1-WARNING == "N")

      set TS0YM002.PC2CUXID cursor, bold;
      set TS0YM002.SY1STNBR skip, bold;
      set TS0YM002.XDMCD bold;
      set TS0YM002.SY2CLRID bold;
      set TS0YM002.XPGCD bold;
      set TS0YM002.XQACD bold;
      set TS0YM002.XOWCD bold;
      set TS0YM002.PC2INSEG bold;
      set TS0YM002.XUMCD bold;

      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name*/
      TS0YW01.TS0YWWF1 = "N"; /* reset warning flag*/
      TS0YW01.TS0YW-PREV-WWF1-WARNING = "Y"; /* set prev flag*/

      if (TS0YM002.PC3PONBR == 0 /* B-Grade order criteria*/
       && TS0YM002.XQACD == "02" 
       && TSWREC.XGPCD == "02") 

        converseLib.validationFailed(319); /* item not found on S.O. itemtable warning*/

      else

        converseLib.validationFailed(115); /* item not found on P.O. itemtable warning*/

      end

      return;

    end

  end


   /* ---------------------------------------------------------------*/
   /* Process item quantity undershipmemt warning flag.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF2 == "Y")

    if (TS0YW01.TS0YW-PREV-WWF2-WARNING == "N")

      set TS0YM002.TS0YMQTY cursor, bold;
      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name*/
      TS0YW01.TS0YWWF2 = "N"; /* reset warning flag*/
      TS0YW01.TS0YW-PREV-WWF2-WARNING = "Y"; /* set prev flag*/

      if (TS0YM002.PC3PONBR == 0 /* B-Grade order criteria*/
       && TS0YM002.XQACD == "02" 
       && TSWREC.XGPCD == "02") 

        converseLib.validationFailed(321); /* qtys below S.O. item qtys*/

      else
        /*  */
        if (TS0YM002.PC4ORTYP != "SS"
         && TS0YM002.PC4ORTYP != "SX") /* salesman sample check*/

          converseLib.validationFailed(251); /* qtys below P.O. item qtys*/

        end /* Salesman sample check*/

      end
      /*  */

      return;

    end

  end


   /* ---------------------------------------------------------------*/
   /* Process item quantity overshipmemt warning flag.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF3 == "Y")

    if (TS0YW01.TS0YW-PREV-WWF3-WARNING == "N")

      set TS0YM002.TS0YMQTY cursor, bold;
      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name*/
      TS0YW01.TS0YWWF3 = "N"; /* reset warning flag*/
      TS0YW01.TS0YW-PREV-WWF3-WARNING = "Y"; /* set prev flag*/

      if (TS0YM002.PC3PONBR == 0 /* B-Grade order criteria*/
       && TS0YM002.XQACD == "02" 
       && TSWREC.XGPCD == "02") 

        converseLib.validationFailed(322); /* qtys above S.O. item qtys*/
                                     /* (soft error)*/
      else

        converseLib.validationFailed(260); /* qtys above P.O. item qtys*/
                                      /* (soft error)*/

      end

      return;

    end

  end


   /* ---------------------------------------------------------------*/
   /* Process item quantity overshipmemt over tolerance warning flag.*/
   /* ---------------------------------------------------------------*/

  if (TS0YW01.TS0YWWF4 == "Y")

    if (TS0YW01.TS0YW-PREV-WWF4-WARNING == "N")

      set TS0YM002.TS0YMQTY cursor, bold;
      TS0YM002.XXXPRCNM = "TS0Y253"; /* process name*/
      TS0YW01.TS0YWWF4 = "N"; /* reset warning flag*/
      TS0YW01.TS0YW-PREV-WWF4-WARNING = "Y"; /* set prev flag*/

      if (TS0YM002.PC3PONBR == 0 /* B-Grade order criteria*/
       && TS0YM002.XQACD == "02" 
       && TSWREC.XGPCD == "02") 

        converseLib.validationFailed(323); /* qtys above S.O. item qtys*/
                                      /* (hard error)*/
      else

        converseLib.validationFailed(261); /* qtys above P.O. item qtys*/
                                      /* (hard error)*/
      end

      return;

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y253 ***********************/
end // end TS0Y253

// Verify quantity against P.O.
Function TS0Y254()
   /* ------------------------------------------------------------*/

           /* CHECK QUANTITY AGAINST PO ITEM QTY,*/
             /* IN-TRANSIT OR IN-PROCESS SHIPMENTS,*/
             /* AND PO RECEIPTS FOR ITEM.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.XRECD == "PS" /* if item not on po*/
   || TS0YW01.TS0YWOT == "QQ"
   || TS0YW01.TS0YWOT == "OS")

    /* ========== NEXT SENTENCE ===========>*/

  else

    TS0YW01.TS0YWPOQ = 0; /* initialze accum order qtys*/
    TS0YW01.TS0YWPLQ = 0; /* initialze accum ship  qtys*/
    TS0YW01.TS0YWRCQ = 0; /* initialze accum rcpt  qtys*/

    /* ---------------------------------------------------------*/
    /* Accumulate PO quantity for an item*/
    /* ---------------------------------------------------------*/

    if (TS0YM002.PC3PONBR > 0)

      TS0Y-25410(); /* accum P.O. qtys*/

    end

    /* ---------------------------------------------------------*/
    /* Accumulate SO quantity for an item*/
    /* ---------------------------------------------------------*/

    if (TS0YM002.PC3PONBR == 0
     && TS0YM002.TS0YM-CUST-ORD-ID > 0
     && TS0YM002.TS0YM-NIKE-ORD-ID > 0
     && TS0YM002.XQACD == "02")

      TS0Y-25420(); /* accum S.O. qtys*/

    end


    /* ---------------------------------------------------------*/
    /* Accumulate ship quantities for an item*/
    /* ---------------------------------------------------------*/

    TS0Y-25430(); /* accum ship  qtys*/


    /* ---------------------------------------------------------*/
    /* Accumulate receipt quantities for an item*/
    /* ---------------------------------------------------------*/

    TS0Y-25440(); /* accum receipt qtys*/


    /* ---------------------------------------------------------*/
    /* check accumulated quantities against user entered shp qty*/
    /* ---------------------------------------------------------*/

    TS0YW01.TS0YWTTQ = 0; /* init fields*/
    TS0YW01.TS0YWTTD = 0;
    TS0YW01.TS0YWTTP = 0;

    TS0YW01.TS0YWTTQ = TS0YW01.TS0YWPLQ + TS0YW01.TS0YWRCQ;
    TS0YW01.TS0YWTTQ = TS0YW01.TS0YWTTQ + TS0YM002.TS0YMQTY;

    TS0YW01.TS0YWTTD = TS0YW01.TS0YWPOQ - TS0YW01.TS0YWTTQ;

    if (TS0YW01.TS0YWTTD < 0) /* if negative*/

      TS0YW01.TS0YWTTD = TS0YW01.TS0YWTTD * -1; /* make positive*/

    end

    if (TS0YW01.TS0YWPOQ != 0) /* if po quantity not zero*/

      TS0YW01.TS0YWTTP = TS0YW01.TS0YWTTD / TS0YW01.TS0YWPOQ * 100;

    end

    TS0YW01.TS0YWPLQ = TS0YW01.TS0YWPLQ + TS0YW01.TS0YWRCQ;
    TS0YW01.TS0YWPOQ = TS0YW01.TS0YWPOQ - TS0YW01.TS0YWPLQ;


    if (TS0YW01.TS0YWTTD <= TS0YW01.TS0YWSEQ /* if below soft error*/
     && TS0YW01.TS0YWTTP <= TS0YW01.TS0YWSEP) /* tolerances*/

      if (TS0YM002.PC3PONBR == 0
       && TS0YM002.TS0YM-CUST-ORD-ID > 0
       && TS0YM002.TS0YM-NIKE-ORD-ID > 0
       && TS0YM002.XQACD == "02"
       && TS0YM002.PC2CUXID == "  ")

        /* =========== Next Sentence ============>*/

      else

        TS0YW01.TSISTAT = "99"; /* reset status*/
        TS0YW01.XRECD = "99"; /* reset excep code*/

      end

    else

      if (TS0YM002.TS0YMQTY < TS0YW01.TS0YWPOQ) /* any under shipment*/

        if (TS0YM002.PC3PONBR == 0
         && TS0YM002.TS0YM-CUST-ORD-ID > 0
         && TS0YM002.TS0YM-NIKE-ORD-ID > 0
         && TS0YM002.XQACD == "02"
         && TS0YM002.PC2CUXID == "  ")

          /* =========== Next Sentence ============>*/

        else

          TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
          TS0YW01.TS0YWPSW = "Y"; /* set problem switch*/
          TS0YW01.TS0YWWF2 = "Y"; /* set array warning*/
          TS0YW01.TSISTAT = "99"; /* reset status*/
          TS0YW01.XRECD = "99"; /* reset excep code*/

        end

      else

        if (TS0YM002.TS0YMQTY > TS0YW01.TS0YWPOQ) /* if overshipment*/

          /* ** overship over tolerance ***/
          if (TS0YW01.TS0YWTTD > TS0YW01.TS0YWHEQ
           && TS0YW01.TS0YWTTP > TS0YW01.TS0YWHEP)

            TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
            TS0YW01.TS0YWPSW = "Y"; /* set problem switch*/
            TS0YW01.TS0YWWF4 = "Y"; /* set array warning*/
            TS0YW01.XRECD = "OH"; /* overship soft error*/

            if (TS0YM001.TSISTAT == "TN" /* if tentative shipment*/
             || TS0YM001.TSISTAT == "RC") /* if received shipment*/

              TS0YW01.TSISTAT = "99"; /* reset status*/

            else

              if ("OH" in XRETBL.XRECD)

                if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* if this is hard error*/

                  TS0YW01.TSISTAT = "ER"; /* set error status*/

                else

                  TS0YW01.TSISTAT = "99"; /* reset status*/

                end

              else

                TS0YW01.TSISTAT = "ER"; /* set error status*/

              end
            end

          else

            /* ** overship under tolerance ***/
            TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
            TS0YW01.TS0YWPSW = "Y"; /* set problem switch*/
            TS0YW01.TS0YWWF3 = "Y"; /* set array warning*/

            if (TS0YM002.PC3PONBR == 0
             && TS0YM002.TS0YM-CUST-ORD-ID > 0
             && TS0YM002.TS0YM-NIKE-ORD-ID > 0
             && TS0YM002.XQACD == "02"
             && TS0YM002.PC2CUXID == "  ")

              /* =========== Next Sentence ============>*/

            else

              TS0YW01.XRECD = "OS"; /* if overship hard error*/

              if (TS0YM001.TSISTAT == "TN" /* if tentative shipment*/
               || TS0YM001.TSISTAT == "RC") /* if received shipment*/

                TS0YW01.TSISTAT = "99"; /* reset status*/

              else

                if ("OS" in XRETBL.XRECD)

                  /* if this is a hard error*/
                  if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y")

                    TS0YW01.TSISTAT = "ER"; /* set error status*/

                  else

                    TS0YW01.TSISTAT = "99"; /* reset status*/

                  end

                else

                  TS0YW01.TSISTAT = "ER"; /* set error status*/

                end
              end
            end
          end
        end
      end
    end
  end


end // end TS0Y254

// Other edits for map 2
Function TS0Y255()
   /* ------------------------------------------------------------*/

                   /* OTHER EDITS*/

       /* Edits;*/
         /* 1) unit of measure*/
         /* 2) iseg code*/
         /* 3) owner group*/
         /* 4) quality code*/
         /* 5) package type*/
         /* 6) style/color*/
         /* 7) dimension*/

   /* ------------------------------------------------------------*/

   /* **************************************/
           /* unit of measure*/
   /* **************************************/

  if (TS0YM002.XUMCD != " ") /* if unit of measure entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0YM002.XUMCD in XUMTBL.XUMCD) /* valid unit of measure*/
      TS0YM002.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XUMTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      if (sysVar.arrayIndex == 0) /* Not in table*/
        TS0YM002.XUMDESC = " ";
      end
      TS0YW01.TS0YWXUM = " ";
      converseLib.validationFailed(106); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y255"; /* Process name*/
      set TS0YM002.XUMCD cursor, bold;
    else
      TS0YW01.TS0YWXUM = TS0YM002.XUMCD;
    end
  else
    TS0YM002.XUMCD = "01"; /* default to '01'*/
    TS0YW01.TS0YWXUM = TS0YM002.XUMCD;
    if (TS0YM002.XUMCD in XUMTBL.XUMCD) /* valid unit of measure*/
      TS0YM002.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end
  end

   /* **************************************/
           /* iseg code*/
   /* **************************************/

  if (TS0YM002.PC2INSEG == " ") /* if code not entered*/
    TS0YM002.PC2INSEG = "000"; /* default to '000'*/
    TS0YW01.TS0YWSEG = TS0YM002.PC2INSEG;
    set PC2REC empty;
    PC2REC.PC2INSEG = TS0YM002.PC2INSEG;
    PC2REC.XGPCD = VCPLHD04.XGP-GPC-CD;
    TS0YS16(); /* select iseg from database*/
    if (SQLCA.VAGen_SQLCODE == 0)
      TS0YM002.PC2SEGDE = PC2REC.PC2SEGDE;
    end
  else
    if (TS0YM002.PC2CUXID == "     ") /* if cust not entered*/
      set PC2REC empty;
      PC2REC.PC2INSEG = TS0YM002.PC2INSEG;
      PC2REC.XGPCD = VCPLHD04.XGP-GPC-CD;
      TS0YS16(); /* select iseg from database*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TS0YM002.PC2CUXID = PC2REC.PC2CUXID;
        TS0YM002.PC2SEGDE = PC2REC.PC2SEGDE;
        TS0YW01.TS0YWSEG = TS0YM002.PC2INSEG;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          TS0YW01.TS0YWSEG = " ";
          TS0YM002.PC2SEGDE = " ";
          converseLib.validationFailed(109); /* Display error message*/
          TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
          TS0YM002.XXXPRCNM = "TS0Y255"; /* Process name*/
          set TS0YM002.PC2CUXID cursor, bold;
        end
      end
    end
  end

   /* **************************************/
           /* owner group*/
   /* **************************************/

  if (TS0YM002.XOWCD != " ") /* if owner group entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0YM002.XOWCD in XOWTBL.XOWCD) /* Check valid owner group*/
      TS0YM002.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XOWTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      if (sysVar.arrayIndex == 0) /* Not in table*/
        TS0YM002.XOWDESC = " ";
      end
      TS0YW01.TS0YWXOW = " ";
      converseLib.validationFailed(105); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y255"; /* Process name*/
      set TS0YM002.XOWCD cursor, bold;
    else
      TS0YW01.TS0YWXOW = TS0YM002.XOWCD;
    end
  else
    TS0YM002.XOWCD = "00"; /* default to '00'*/
    TS0YW01.TS0YWXOW = TS0YM002.XOWCD;
    if (TS0YM002.XOWCD in XOWTBL.XOWCD) /* Check valid owner group*/
      TS0YM002.XOWDESC = XOWTBL.XOWDESC[sysVar.arrayIndex];
    end
  end

   /* **************************************/
           /* quality code*/
   /* **************************************/

  if (TS0YM002.XQACD != " ") /* if quality code entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0YM002.XQACD in XQATBL.XQACD) /* Check valid quality code*/
      TS0YM002.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XQATBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      if (sysVar.arrayIndex == 0) /* Not in table*/
        TS0YM002.XQADESC = " ";
      end
      TS0YW01.TS0YWXQA = " ";
      converseLib.validationFailed(108); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y255"; /* Process name*/
      set TS0YM002.XQACD cursor, bold;
    else
      TS0YW01.TS0YWXQA = TS0YM002.XQACD;
    end
  else
    TS0YM002.XQACD = "01"; /* default to '01'*/
    TS0YW01.TS0YWXQA = TS0YM002.XQACD;
    if (TS0YM002.XQACD in XQATBL.XQACD) /* Check valid quality code*/
      TS0YM002.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    end
  end

   /* **************************************/
           /* package type*/
   /* **************************************/

  if (TS0YM002.XPGCD != " ") /* if package type entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0YM002.XPGCD in XPGTBL.XPGCD) /* Check valid package type*/
      TS0YM002.XPGDESC = XPGTBL.XPGDESC[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XPGTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      if (sysVar.arrayIndex == 0) /* Not in table*/
        TS0YM002.XPGDESC = " ";
      end
      TS0YW01.TS0YWXPG = " ";
      converseLib.validationFailed(107); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y255"; /* Process name*/
      set TS0YM002.XPGCD cursor, bold;
    else
      TS0YW01.TS0YWXPG = TS0YM002.XPGCD;
    end
  else
    TS0YM002.XPGCD = "00"; /* default to '00'*/
    TS0YW01.TS0YWXPG = TS0YM002.XPGCD;
    if (TS0YM002.XPGCD in XPGTBL.XPGCD) /* Check valid package type*/
      TS0YM002.XPGDESC = XPGTBL.XPGDESC[sysVar.arrayIndex];
    end
  end

   /* **************************************/
           /* style/color*/
   /* **************************************/

  if (TS0YM002.SY2CLRID == " " /* default color to 00*/
   || TS0YM002.SY2CLRID == "0")
    TS0YM002.SY2CLRID = "00";
  end

  TS0YS12(); /* edit style/color*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* continue on*/
    if (TS0YM002.SY2CLRID != TS0YW01.SY2CLRID)

      TS0YM002.PC-ITM-SEQ-NBR = 0;

    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(113); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y255"; /* Process name*/
      TS0YM002.SY2CLRAB = " "; /* color description*/
      set TS0YM002.SY2CLRID cursor, bold;
    end
  end

   /* **************************************/
           /* dimension*/
   /* **************************************/

  if (TS0YM002.XDMCD != " ") /* if dimension entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0YM002.XDMCD in XDMTBL.XDMCD) /* Check valid dimension*/
      TS0YM002.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XDMTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      if (sysVar.arrayIndex == 0) /* Not in table*/
        TS0YM002.XDMDESC = " ";
      end
      TS0YW01.TS0YWXDM = " ";
      converseLib.validationFailed(110); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y255"; /* Process name*/
      set TS0YM002.XDMCD cursor, bold;
    else
      TS0YW01.TS0YWXDM = TS0YM002.XDMCD;
    end
  else
    TS0YM002.XDMCD = "00"; /* default to '00'*/
    TS0YW01.TS0YWXDM = TS0YM002.XDMCD;
    if (TS0YM002.XDMCD in XDMTBL.XDMCD) /* Check valid dimension*/
      TS0YM002.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    end
  end


end // end TS0Y255

// edit customer xref
Function TS0Y256()
   /* ------------------------------------------------------------*/

          /* VERIFY THE CUSTOMER XREF ENTERED*/

   /* ------------------------------------------------------------*/

  if (TS0YM002.PC2CUXID == " ") /* if no cust entered*/
    TS0YW01.TS0YWCXR = " ";
    TS0YM002.PC2NAME = " "; /* move in cust name*/
    TS0YM002.PC2INSEG = "000";
    TS0YW01.TS0YWSEG = "000";
    PC2REC.PC2INSEG = "000"; /* move in keys*/
    PC2REC.XGPCD = VCPLHD04.XGP-GPC-CD;

    TS0YS16(); /* select from dprodg.vprdcu01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
      TS0YM002.PC2SEGDE = PC2REC.PC2SEGDE; /* move in iseg desc*/
      TS0YM002.PC2NAME = PC2REC.PC2NAME; /* move in cust name*/
    end

  else

    PC2REC.PC2CUXID = TS0YM002.PC2CUXID; /* move in keys*/
    PC2REC.XGPCD = VCPLHD04.XGP-GPC-CD;

    TS0YS13(); /* select from dprodg.vprdcu01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
      TS0YW01.TS0YWCXR = PC2REC.PC2CUXID; /* move in cust id*/
      TS0YM002.PC2NAME = PC2REC.PC2NAME; /* move in cust name*/
      TS0YM002.PC2INSEG = PC2REC.PC2INSEG;
      TS0YW01.TS0YWSEG = PC2REC.PC2INSEG;
      TS0YM002.PC2SEGDE = PC2REC.PC2SEGDE; /* move in iseg desc*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if return code is 100*/
        converseLib.validationFailed(161); /* Display error message*/
        TS0YW01.TS0YWCXR = " ";
        TS0YW01.TS0YWSEG = " ";
        TS0YM002.PC2NAME = " ";
        TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
        TS0YM002.XXXPRCNM = "TS0Y250"; /* Process name*/
        set TS0YM002.PC2CUXID cursor, bold;
      end
    end

  end


end // end TS0Y256

// Verify the P.O. id fields
Function TS0Y257()
   /* ------------------------------------------------------------*/

      /* VERIFY THE ENTRY OF EACH P.O. ID FIELD SEPERATELY*/

     /* If any part of the p.o. id entered*/

     /* Verify:  1) PO order type entered.*/
              /* 2) Factory code entered and correct.*/
              /* 3) Delivery month entered and correct.*/
              /* 4) Month entered and correct.*/
              /* 5) Year entered and correct.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWIDS = "N"; /* Initialize po id and type*/
  TS0YW01.TS0YWIPI = "N"; /* Initialize po id indicator*/
  TS0YW01.TS0YWIOT = "N"; /* Initialize invalid order type id*/

  if (TS0YM002.TS0YMPYR != " " /* If any fields entered.*/
   || TS0YM002.TS0YMPMO != " " 
   || TS0YM002.TS0YMDMO != " " 
   || TS0YM002.FY1FCTYC != " " 
   || TS0YM002.PC4ORTYP != " ")

    TS0YW01.TS0YWPYR = TS0YM002.TS0YMPYR; /* reform field*/
    TS0YW01.TS0YWPMO = TS0YM002.TS0YMPMO;
    TS0YW01.TS0YWDMO = TS0YM002.TS0YMDMO;
    TS0YW01.TS0YWFCT = TS0YM002.FY1FCTYC;

    /* ------------------------------------------------------------*/
     /* Verify po id order type*/
    /* ------------------------------------------------------------*/

    if (TS0YM002.PC4ORTYP == "  ") /* Nothing there*/
      TS0YW01.TS0YWOT = " ";
      converseLib.validationFailed(220); /* Invalid order type entered*/
      TS0YW01.TS0YWIDS = "Y"; /* Invalid po id / type*/
      TS0YW01.TS0YWIOT = "Y"; /* Indicate invalid order type*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y257";
      set TS0YM002.PC4ORTYP cursor, bold;
    else
      set PC4REC empty;
      PC4REC.XGPCD = TSWREC.XGPCD;
      PC4REC.PC4ORTYP = TS0YM002.PC4ORTYP;
      TS0YS18(); /* Select order type*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
        TS0YW01.TS0YWOT = TS0YM002.PC4ORTYP;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
          converseLib.validationFailed(220); /* Invalid order type entered*/
          TS0YW01.TS0YWOT = " ";
          TS0YW01.TS0YWIDS = "Y"; /* Invalid po id / type*/
          TS0YW01.TS0YWIOT = "Y"; /* Indicate invalid order type*/
          TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
          TS0YM002.XXXPRCNM = "TS0Y257";
          set TS0YM002.PC4ORTYP cursor, bold;
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* FACTORY CODE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0YW01.TS0YWFCT == " ") /* Nothing there*/
      TS0YW01.TS0YWFC = " ";
      TS0YW01.TS0YWIPI = "Y"; /* Indicate invalid po id*/
      TS0YW01.TS0YWIDS = "Y"; /* Invalid po id / type*/
    else
      FY1REC.FY1FCTYC = TS0YW01.TS0YWFCT; /* Search key*/
      FY1REC.XGPCD = TSWREC.XGPCD; /* gpc*/

      TS0YS20(); /* select the factory row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
        TS0YW01.TS0YWFC = TS0YM002.FY1FCTYC;
      else
        TS0YW01.TS0YWFC = " ";
        TS0YW01.TS0YWIPI = "Y"; /* Indicate invalid po id*/
        TS0YW01.TS0YWIDS = "Y"; /* Invalid po id / type*/
      end
    end

    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0YW01.TS0YWDMO >= "01" /* If valid month entered*/
     && TS0YW01.TS0YWDMO <= "12")
      TS0YW01.TS0YWDM = TS0YW01.TS0YWDMO;
    else
      TS0YW01.TS0YWDM = " ";
      TS0YW01.TS0YWIPI = "Y"; /* Indicate invalid po id*/
      TS0YW01.TS0YWIDS = "Y"; /* Invalid po id / type*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0YW01.TS0YWPMO >= "01" /* Something there*/
     && TS0YW01.TS0YWPMO <= "12")
      TS0YW01.TS0YWPM = TS0YW01.TS0YWPMO;
    else
      TS0YW01.TS0YWPM = " ";
      TS0YW01.TS0YWIPI = "Y"; /* Indicate invalid po id*/
      TS0YW01.TS0YWIDS = "Y"; /* Invalid po id / type*/
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0YW01.TS0YWPYR >= "00"
     && TS0YW01.TS0YWPYR <= "99")
      if (TS0YW01.TS0YWPYR > "85")
        TS0YW01.TS0YWPCC = "19";
      else
        TS0YW01.TS0YWPCC = "20";
      end
      TS0YW01.TS0YWPY = TS0YW01.TS0YWPYR;
    else
      if (TS0YW01.TS0YWPY1 >= "A"
       && TS0YW01.TS0YWPY1 <= "Z"
       && TS0YW01.TS0YWPY2 >= "0"
       && TS0YW01.TS0YWPY2 <= "9")
        TS0YS22(); /* Select the set of season years*/
        if (SQLCA.VAGen_SQLCODE == 0)
          TS0YS24(); /* Fetch the first row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
            TS0YW01.TS0YWPY = TS0YW01.TS0YWPYR;
            TS0YW01.TS0YWCYR = PCFREC.PCFSEYR;
            TS0YW01.TS0YWPYR = TS0YW01.TS0YWCYY;
            TS0YW01.TS0YWPCC = TS0YW01.TS0YWCCC;
          else
            TS0YW01.TS0YWPY = " ";
            TS0YW01.TS0YWIPI = "Y"; /* Indicate invalid po id*/
            TS0YW01.TS0YWIDS = "Y"; /* Invalid po id / type*/
          end
          TS0YS26(); /* Close the set*/
        end
      else
        TS0YW01.TS0YWPY = " ";
        TS0YW01.TS0YWIPI = "Y"; /* Indicate invalid po id*/
        TS0YW01.TS0YWIDS = "Y"; /* Invalid po id / type*/
      end
    end


    if (TS0YW01.TS0YWIPI == "Y") /* Indicate invalid po id*/
      TS0YW01.TS0YWPSW = "Y";
      TS0YM002.XXXPRCNM = "TS0Y257";
      converseLib.validationFailed(167);
      set TS0YM002.TS0YMPYR cursor, bold;
      set TS0YM002.TS0YMPMO bold;
      set TS0YM002.TS0YMDMO bold;
      set TS0YM002.FY1FCTYC bold;
    end

    if (TS0YW01.TS0YWIDS == "Y") /* Indicate invalid po id and type*/
      TS0YW01.TS0YWPSW = "Y";
    end

  end


end // end TS0Y257

// Verify po # or po id entered
Function TS0Y258()
   /* ------------------------------------------------------------*/

   /* VERIFY P.O. NUMBER OR P.O. ID ENTERED*/

   /* 1) If p.o. number and p.o. id not entered then indicate err*/
   /* 2) If the p.o. number was entered then continue on without*/
   /* checking the p.o. id.*/
   /* 3) If only p.o. id fields have been entered and they are*/
   /* correct, then select the p.o. id and obtain a valid*/
   /* p.o. number for the id.*/

   /* ------------------------------------------------------------*/

  if (TS0YM002.TS0YMPYR == " " /* if po # or po id not entered*/
   && TS0YM002.TS0YMPMO == " " 
   && TS0YM002.TS0YMDMO == " " 
   && TS0YM002.FY1FCTYC == " " 
   && TS0YM002.PC4ORTYP == " " 
   && TS0YM002.PC3PONBR == 0) 

    TS0YW01.TS0YWPO = 0;
    TS0YW01.TS0YWPY = " ";
    TS0YW01.TS0YWPM = " ";
    TS0YW01.TS0YWDM = " ";
    TS0YW01.TS0YWFC = " ";
    TS0YW01.TS0YWOT = " ";

    if (TSWREC.XGPCD == "02"   /* Footwear GPC*/
     && TS0YM002.XQACD == "02" /* Quality 2nd*/
     && TS0YM002.TS0YM-CUST-ORD-ID > 0
     && TS0YM002.TS0YM-NIKE-ORD-ID > 0)

      TS0YW01.TS0YWPYR = " ";
      TS0YW01.TS0YWPMO = " ";
      TS0YW01.TS0YWDMO = " ";
      TS0YW01.TS0YWFCT = " ";

    else
      converseLib.validationFailed(168); /* error message*/
      TS0YM002.XXXPRCNM = "TS0Y258"; /* Process name*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/

      set TS0YM002.PC3PONBR cursor, bold;
      set TS0YM002.PC-ITM-SEQ-NBR bold;
      set TS0YM002.TS0YMPYR bold;
      set TS0YM002.TS0YMPMO bold;
      set TS0YM002.TS0YMDMO bold;
      set TS0YM002.FY1FCTYC bold;
      set TS0YM002.PC4ORTYP bold;

    end
  else

    if (TS0YM002.PC3PONBR > 0) /* if po # entered*/

      set PCYREC empty; /* Clear the passing record*/
      set PC3REC empty; /* Clear the P.O. header record*/

      PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
      PC3REC.PC3PONBR = TS0YM002.PC3PONBR; /* P.O. type*/
      PCYREC.PCYFUNC = "S "; /* Select unique*/

      TS0YS28(); /* select the po*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/

        TS0YW01.TS0YWPO = PC3REC.PC3PONBR;
        TS0YW01.TS0YWDAT = PC3REC.PC3POIDT;
        TS0YW01.TS0YWPCC = TS0YW01.TS0YWPCN;
        TS0YW01.TS0YWPYR = TS0YW01.TS0YWPYY;
        TS0YW01.TS0YWPMO = TS0YW01.TS0YWPM1;
        TS0YW01.TS0YWDMO = TS0YW01.TS0YWPM2;
        TS0YW01.TS0YWFCT = PC3REC.FY1FCTYC;

        if (TSWREC.XGPCD == "03")

          TS0YW01.TS0YWPYR = PC3REC.PCFSECD;

        end

        TS0YM002.TS0YMPYR = TS0YW01.TS0YWPYR;
        TS0YM002.TS0YMPMO = TS0YW01.TS0YWPMO;
        TS0YM002.TS0YMDMO = TS0YW01.TS0YWDMO;
        TS0YM002.FY1FCTYC = TS0YW01.TS0YWFCT;
        TS0YM002.PC4ORTYP = PC3REC.PC4ORTYP;
        TS0YW01.TS0YWOT = PC3REC.PC4ORTYP;

        if (TS0YM002.PC3PONBR != 0) /* If po # on screen*/

          TS0YM002.TS0YMPYR = TS0YW01.TS0YWPYR;
          TS0YM002.TS0YMPMO = TS0YW01.TS0YWPMO;
          TS0YM002.TS0YMDMO = TS0YW01.TS0YWDMO;
          TS0YM002.FY1FCTYC = TS0YW01.TS0YWFCT;
          TS0YM002.PC4ORTYP = PC3REC.PC4ORTYP;

        end

        if (TS0YW01.TS0YWPSW == "N")

          if (TS0YW01.TS0YW-PREV-WWF5-WARNING == "N")

            if (PC3REC.YPUCD != "OP" /* if header NE 'OP' PO open*/
             && PC3REC.YPUCD != "FC") /* AND if NE 'FC' PO factory closed*/

              TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
              TS0YW01.TS0YWWF5 = "Y"; /* warning for PO NE 'OP'='Y'*/

            end

          else

            TS0YW01.TS0YWWF5 = "N"; /* warning for PO NE 'OP'='N'*/

          end
        end

      else

        if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/

          TS0YW01.TS0YWPO = PC3REC.PC3PONBR; /* invalid po to ws*/
          TS0YW01.TS0YWPCC = " "; /* clear ws poid*/
          TS0YW01.TS0YWPYR = " ";
          TS0YW01.TS0YWPMO = " ";
          TS0YW01.TS0YWDMO = " ";
          TS0YW01.TS0YWFCT = " ";
          TS0YW01.TS0YWOT = " ";

          TS0YM002.TS0YMPYR = TS0YW01.TS0YWPYR; /* clear map poid*/
          TS0YM002.TS0YMPMO = TS0YW01.TS0YWPMO;
          TS0YM002.TS0YMDMO = TS0YW01.TS0YWDMO;
          TS0YM002.FY1FCTYC = TS0YW01.TS0YWFCT;
          TS0YM002.PC4ORTYP = TS0YW01.TS0YWOT;

          if (TS0YW01.TS0YWPSW == "N") /* no errors occur*/

            if (TS0YW01.TS0YW-PREV-WWF9-WARNING == "N") /* wwf9 prev set*/

              TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
              TS0YW01.TS0YWWF9 = "Y"; /* set warning for invalid po*/

            else

              TS0YW01.TS0YWWF9 = "N"; /* reset po warning flag*/

            end
          end
        end
      end
    else

      if (TS0YW01.TS0YWIDS == "N") /* If the po id passed previous edits*/

        set PCYREC empty; /* Clear the passing record*/
        set PC3REC empty; /* Clear the P.O. header record*/

        PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
        PC3REC.FY1FCTYC = TS0YW01.TS0YWFCT; /* factory code*/
        TS0YW01.TS0YWPCN = TS0YW01.TS0YWPCC; /* redefine*/
        TS0YW01.TS0YWPYY = TS0YW01.TS0YWPYR;
        TS0YW01.TS0YWPM1 = TS0YW01.TS0YWPMO;
        TS0YW01.TS0YWPM2 = TS0YW01.TS0YWDMO;
        PC3REC.PC3POIDT = TS0YW01.TS0YWDAT; /* P.O. id*/
        PC3REC.PC4ORTYP = TS0YM002.PC4ORTYP; /* P.O. type*/
        PCYREC.PCYFUNC = "SA"; /* select alternate*/

        TS0YS28(); /* Select the p.o. id to obtain p.o. #*/

        if (SQLCA.VAGen_SQLCODE == 0) /* row exists*/

          TS0YM002.PC3PONBR = PC3REC.PC3PONBR;
          TS0YW01.TS0YWPO = PC3REC.PC3PONBR;

          if (TS0YM002.TS0YMPYR != " " /* If po id on screen*/
           && TS0YM002.TS0YMPMO != " " 
           && TS0YM002.TS0YMDMO != " " 
           && TS0YM002.FY1FCTYC != " ")

            TS0YM002.PC3PONBR = PC3REC.PC3PONBR;
            TS0YW01.TS0YWPO = PC3REC.PC3PONBR;

          end

          if (TS0YW01.TS0YWPSW == "N") /* if no errors occurred*/

            if (TS0YW01.TS0YWPWF == "N") /* if warning not set*/

              if (PC3REC.YPUCD != "OP" /* ne po open*/
               && PC3REC.YPUCD != "FC") /* or ne factory closed*/

                TS0YW01.TS0YWPWF = "Y"; /* set warning flag*/
                TS0YW01.TS0YWWF5 = "Y"; /* warning for po ne 'OP'*/

              else

                TS0YW01.TS0YWWF5 = "N"; /* warning for po ne 'OP'*/

              end
            end
          end

        else

          if (SQLCA.VAGen_SQLCODE == 100) /* row does not exist*/

            TS0YW01.TS0YWPO = 0;
            converseLib.validationFailed(167); /* no data to display*/

            set TS0YM002.TS0YMPYR cursor, bold;
            set TS0YM002.TS0YMPMO bold;
            set TS0YM002.TS0YMDMO bold;
            set TS0YM002.FY1FCTYC bold;
            set TS0YM002.PC4ORTYP bold;

            TS0YM002.XXXPRCNM = "TS0Y258"; /* process name*/
            TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/

          else

            if (SQLCA.VAGen_SQLCODE == -811) /* multiple rows returned*/

              TS0YW01.TS0YWPO = 0;
              TS0YW01.TS0YWPCC = " ";
              TS0YW01.TS0YWPYR = " ";
              TS0YW01.TS0YWPMO = " ";
              TS0YW01.TS0YWDMO = " ";
              TS0YW01.TS0YWFCT = " ";
              TS0YW01.TS0YWOT = " ";
              converseLib.validationFailed(298); /* multiple row error message*/

              set TS0YM002.PC3PONBR cursor;
              set TS0YM002.TS0YMPYR cursor, bold;
              set TS0YM002.TS0YMPMO bold;
              set TS0YM002.TS0YMDMO bold;
              set TS0YM002.FY1FCTYC bold;
              set TS0YM002.PC4ORTYP bold;

              TS0YM002.XXXPRCNM = "TS0Y258"; /* Process name*/
              TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/

            end
          end
        end
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0Y250 ***********************/
end // end TS0Y258

// Verify po line item seq #
Function TS0Y258-001()
   /* ------------------------------------------------------------*/

   /* VERIFY P.O. LINE ITEM SEQUENCE NUMBER*/

   /* 1) If p.o. line item sequence number not entered then indicate err*/
   /* 2) If p.o. line item sequence number is changed, retrieve info*/

   /* ------------------------------------------------------------*/

  if (TS0YM002.PC-ITM-SEQ-NBR == 0)
    set WTS4001 empty;
    WTS4001.IO-TASK = "L1";
    WTS4001.XGP-GPC-CD = VCPLHD04.XGP-GPC-CD;
    WTS4001.PC-PO-NBR = TS0YM002.PC3PONBR;
    WTS4001.PC-ITM-SEQ-NBR = 0;
    WTS4001.SY-STY-NBR = TS0YM002.SY1STNBR;
    WTS4001.SY-COLR-CD-ID = TS0YM002.SY2CLRID;
    TS0YS77(); /* Fetch row from shipment table*/

    set VTSLOC02 empty;
    set SQLCA empty;
    VTSLOC02.TS-LOC-CD = TSFREC.TSEORIG; /* move in keys*/
    TS0YS78(); /* get cnsld flag from vtsloc02*/
    if (VTSLOC02.TS-LOC-CNSLD-FL == "Y") /* check cnsldn point*/
      WTS4001.MODE-CD = "  ";
    else
      set VTSLOC02 empty;
      set SQLCA empty;
      VTSLOC02.TS-LOC-CD = TSFREC.TSFDSCHG; /* move in keys*/
      TS0YS78();
      if (VTSLOC02.TS-LOC-CNSLD-FL == "Y")
        WTS4001.MODE-CD = "  ";
      else
        TS0YS79();
        WTS4001.MODE-CD = TS5REC.YMTCD; /* populate mode code*/
      end
    end

    if (TS0YM002.XDMCD == " ")
      WTS4001.XDM-DIM-CD = "*";
    else
      WTS4001.XDM-DIM-CD = TS0YM002.XDMCD;
    end
    WTS4001.XWH-WHSE-CD = TS0YM002.XWHCD;
    if (TS0YM002.XQACD == " ")
      WTS4001.XQA-QUAL-CD = "*";
    else
      WTS4001.XQA-QUAL-CD = TS0YM002.XQACD;
    end
    if (TS0YM002.XUMCD == " ")
      WTS4001.XUM-UOM-CD = "*";
    else
      WTS4001.XUM-UOM-CD = TS0YM002.XUMCD;
    end
    if (TS0YM002.XOWCD == " ")
      WTS4001.XOW-OWN-GRP-CD = "*";
    else
      WTS4001.XOW-OWN-GRP-CD = TS0YM002.XOWCD;
    end
    WTS4001.PC-PRDCU-ID = TS0YM002.PC2CUXID;
    WTS4001.OP-CUST-ORD-ID = TS0YM002.TS0YM-CUST-ORD-ID;
    WTS4001.OP-NIKE-ORD-ID = TS0YM002.TS0YM-NIKE-ORD-ID;
    if (TS0YM002.XPGCD == " ")
      WTS4001.XPG-PKG-TYP-CD = "*";
    else
      WTS4001.XPG-PKG-TYP-CD = TS0YM002.XPGCD;
    end
    if (TSFREC.TSFDESTE == 0)
      WTS4001.TS-EST-DEST-DT = -1;
    else
      WTS4001.TS-EST-DEST-DT = TSFREC.TSFDESTE;
    end
    if (TS0YM002.TS0YMQTY == 0)
      WTS4001.TS-CPL-QTOT-SHP = -1;
    else
      WTS4001.TS-CPL-QTOT-SHP = TS0YM002.TS0YMQTY;
    end
    WTS4001.IO-RETURN-CODE = "00";
    TS0YS30();
    if (WTS4001.IO-RETURN-CODE == "00")
      TS0YM002.PC-ITM-SEQ-NBR = WTS4001.PC-ITM-SEQ-NBR;
   /* npulug changes begin******/
      TS0YW01.PC-ITM-SEQ-NBR = WTS4001.PC-ITM-SEQ-NBR;
   /* npulug changes end********/
    end
  else

    if (((TS0YM002.PC3PONBR != TS0YW01.PC3PONBR /* PO changed*/
     && TS0YM002.PC-ITM-SEQ-NBR != 0)           
     || (TS0YM002.PC-ITM-SEQ-NBR != TS0YW01.PC-ITM-SEQ-NBR
     && TS0YM002.PC3PONBR != 0))                
     && TS0YM002.SY2CLRID == TS0YW01.SY2CLRID) 
      /* retrieve style information from poitm*/
      set PC6REC empty;
      set PCYREC empty;
      PC6REC.XGPCD = PC3REC.XGPCD;
      PC6REC.PC3PONBR = TS0YM002.PC3PONBR;
      PC6REC.PC6ITMNB = TS0YM002.PC-ITM-SEQ-NBR;
      PCYREC.PCYFUNC = "SA";
      XSPCS-VPOITM01-SA(); /* Select unique*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/

        TS0YW01.TS0YWPO = PC6REC.PC3PONBR;
        TS0YW01.TS0YWDAT = PC6REC.PC3POIDT;
        TS0YW01.PC-ITM-SEQ-NBR = PC6REC.PC6ITMNB;
        TS0YW01.TS0YWPCC = TS0YW01.TS0YWPCN;
        TS0YW01.TS0YWPYR = TS0YW01.TS0YWPYY;
        TS0YM002.TS0YMPYR = TS0YW01.TS0YWPYR;
        TS0YW01.TS0YWPMO = TS0YW01.TS0YWPM1;
        TS0YM002.TS0YMPMO = TS0YW01.TS0YWPMO;
        TS0YW01.TS0YWDMO = TS0YW01.TS0YWPM2;
        TS0YM002.TS0YMDMO = TS0YW01.TS0YWDMO;
        TS0YW01.TS0YWFCT = PC6REC.FY1FCTYC;
        TS0YM002.FY1FCTYC = TS0YW01.TS0YWFCT;
        TS0YW01.TS0YWOT = PC6REC.PC4ORTYP;
        TS0YM002.PC4ORTYP = PC6REC.PC4ORTYP;

        TS0YW01.SY1STNBR = PC6REC.SY1STNBR;
        TS0YM002.SY1STNBR = PC6REC.SY1STNBR;
        TS0YW01.SY2CLRID = PC6REC.SY2CLRID;
        TS0YM002.SY2CLRID = PC6REC.SY2CLRID;
        TS0YW01.XDMCD = PC6REC.XDMCD;
        TS0YM002.XDMCD = PC6REC.XDMCD;
        TS0YW01.XQACD = PC6REC.XQACD;
        TS0YM002.XQACD = PC6REC.XQACD;
        TS0YW01.XOWCD = PC6REC.XOWCD;
        TS0YM002.XOWCD = PC6REC.XOWCD;
        TS0YW01.PC2INSEG = PC6REC.PC2INSEG;
        TS0YM002.PC2INSEG = PC6REC.PC2INSEG;
        TS0YW01.XPGCD = PC6REC.XPGCD;
        TS0YM002.XPGCD = PC6REC.XPGCD;
        TS0YW01.XUMCD = PC6REC.XUMCD;
        TS0YM002.XUMCD = PC6REC.XUMCD;
        TS0YW01.PC2CUXID = PC6REC.PC2CUXID;
        TS0YM002.PC2CUXID = PC6REC.PC2CUXID;
        TS0YW01.YMTCD = PC6REC.YMTCD;
        TS0YW01.OP1CUOID = PC6REC.OP1CUOID;
        TS0YM002.TS0YM-CUST-ORD-ID = PC6REC.OP1CUOID;
        TS0YW01.OP1NORID = PC6REC.OP1NORID;
        TS0YM002.TS0YM-NIKE-ORD-ID = PC6REC.OP1NORID;

        if (TSWREC.XGPCD == "03")
          TS0YW01.TS0YWPYR = PC6REC.PCFSECD;
        end

      else

        if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/

          TS0YW01.TS0YWPO = PC6REC.PC3PONBR; /* invalid po to ws*/
          TS0YW01.TS0YWPCC = " "; /* clear ws poid*/
          TS0YW01.TS0YWPYR = " ";
          TS0YW01.TS0YWPMO = " ";
          TS0YW01.TS0YWDMO = " ";
          TS0YW01.TS0YWFCT = " ";
          TS0YW01.TS0YWOT = " ";

          TS0YM002.TS0YMPYR = TS0YW01.TS0YWPYR; /* clear map poid*/
          TS0YM002.TS0YMPMO = TS0YW01.TS0YWPMO;
          TS0YM002.TS0YMDMO = TS0YW01.TS0YWDMO;
          TS0YM002.FY1FCTYC = TS0YW01.TS0YWFCT;
          TS0YM002.PC4ORTYP = TS0YW01.TS0YWOT;
        end
      end
    end

    if (VCPLHD04.PC-PO-NBR == PC6REC.PC3PONBR
     && VCPLHD04.XGP-GPC-CD == PC6REC.XGPCD
     && TSFREC.XWHCD != PC6REC.XWHCD)
      converseLib.validationFailed(450); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y258-001"; /* Process name*/
      set TS0YM002.PC-ITM-SEQ-NBR cursor, bold;
      exit stack;
    end

  end

   /* ********************** End of TS0Y250 ***********************/
end // end TS0Y258-001

// Select (SO) Unique VCPLHD04
Function TS0Y259()
   /* ------------------------------------------------------------*/

               /* Select from DTRANS.VCPLHD04*/

   /* 1) Select according to screen keys.*/

   /* ------------------------------------------------------------*/


  set VCPLHD04 empty;

  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  VCPLHD04.TS-NIKE-PL-NBR = TSWREC.TSWPLNBR[TS0YWIXA];
   /* OVE TSWREC.XGPCD TO VCPLHD04.XGP-GPC-CD;*/
   /* OVE TS0YM002.PC3PONBR TO VCPLHD04.PC-PO-NBR;*/
   /* OVE TS0YM002.PC-ITM-SEQ-NBR TO VCPLHD04.PC-ITM-SEQ-NBR;*/
   /* OVE TS0YM002.SY1STNBR TO VCPLHD04.SY-STY-NBR;*/
   /* OVE TS0YM002.SY2CLRID TO VCPLHD04.SY-COLR-CD-ID;*/
   /* OVE TS0YM002.XDMCD TO VCPLHD04.XDM-DIM-CD;*/
   /* OVE TS0YM002.XQACD TO VCPLHD04.XQA-QUAL-CD;*/
   /* OVE TS0YM002.XOWCD TO VCPLHD04.XOW-OWN-GRP-CD;*/
   /* OVE TS0YM002.PC2INSEG TO VCPLHD04.PC-CU-IN-SEG-CD;*/
   /* OVE TS0YM002.XPGCD TO VCPLHD04.XPG-PKG-TYP-CD;*/
   /* OVE TS0YM002.XUMCD TO VCPLHD04.XUM-UOM-CD;*/
   /* OVE TS0YM002.PC2CUXID TO VCPLHD04.PC-PRDCU-ID;*/
   /* OVE TS0YM002.TS0YM-CUST-ORD-ID TO VCPLHD04.OP-CUST-ORD-ID;*/
   /* OVE TS0YM002.TS0YM-NIKE-ORD-ID TO VCPLHD04.OP-NIKE-ORD-ID;*/
   /* F TS0YM002.TS0YM-CUST-ORD-ID > 0*/
   /* AND TS0YM002.TS0YM-NIKE-ORD-ID > 0;*/
   /* MOVE TS0YM002.TS0YM-CUST-ORD-ID TO TS0YW01.TS0YWWK5;*/
   /* MOVE TS0YW01.OP1PARTN TO VCPLHD04.OP-ORD-PART-CHAR;*/
   /* LSE;*/
   /* MOVE ' ' TO VCPLHD04.OP-ORD-PART-CHAR;*/
   /* ND;*/

   /* OVE 'SO' TO TSGREC.TSNFNC;      /* move in function code*/
  TSGREC.TSNFNC = "SA"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If row found*/
   || SQLCA.VAGen_SQLCODE == 100
   || SQLCA.VAGen_SQLCODE == -811)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y259"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0Y259"; /* Process name*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/

  end


end // end TS0Y259

// Process valid input request
Function TS0Y260()
   /* -----------------------------------------------------------*/

                /* PROCESS VALID INPUT REQUESTS*/

      /* 1) If map is equal to '2 ' ( maintenance )*/
         /* a. If the po was changed and the cpl detail flag*/
            /* is yes;*/
            /* - Back out the shipment quantities on the*/
              /* production database.*/
            /* - Update the cpl row in the data base.*/
         /* b. Else*/
            /* - Update the cpl row in the data base.*/
      /* 2) If map is equal to '2b' ( delete )*/
         /* and enter was pressed;*/
         /* a. If detail flag is yes, delete all the*/
            /* cartons associated with the cpl*/
         /* b. take the back up and*/
            /* Delete the cpl row in the data base.*/
      /* 3) If more selections exist to maintain/inq/delete*/
         /* - Set request for data to yes and cycle to next*/
           /* cpl style map.*/
         /* else*/
         /* - Return to browse screen.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
       /* If the maintenance map is indicated*/
   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWMAP == "2 ") /* if maintenance map indicated*/
    if (TS0YM002.PC3PONBR != TS0YW01.PC3PONBR /* if po was changed*/
     && TS0YW01.TSIDETFL == "Y")              /* and detail is yes*/
      TS0Y262(); /* select the cplhd*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if selection ok*/
       && VCPLHD04.ZZ-CHNG-CNT == TS0YW01.TS0YWCZC) /* and change cts same*/
        TS0Y263(); /* update the cplhd*/
      else
        TS0YW01.TS0YWSWR = "Y"; /* set request for data*/
        converseLib.validationFailed(12); /* data updated by someone else*/
        TS0YM002.XXXPRCNM = "TS0Y260"; /* process name*/
      end
    else
      if (TS0YM002.PC3PONBR != TS0YW01.PC3PONBR /* if any data changed*/
       || TS0YM002.PC-ITM-SEQ-NBR != TS0YW01.PC-ITM-SEQ-NBR
       || TS0YM002.TS0YMPYR != TS0YW01.TS0YWPY  
       || TS0YM002.TS0YMPMO != TS0YW01.TS0YWPM  
       || TS0YM002.TS0YMDMO != TS0YW01.TS0YWDM  
       || TS0YM002.FY1FCTYC != TS0YW01.TS0YWFC  
       || TS0YM002.PC4ORTYP != TS0YW01.PC4ORTYP 
       || TS0YM002.TS0YMCTN != TS0YW01.TSICRTQT 
       || TS0YM002.TS0YMQTY != TS0YW01.TSISHPQT 
       || TS0YM002.TS0YMKIL != TS0YW01.TSIPLTKG 
       || TS0YM002.TS0YMCBM != TS0YW01.TSIPLCBM 
       || TS0YM002.SY2CLRID != TS0YW01.SY2CLRID 
       || TS0YM002.PC2CUXID != TS0YW01.PC2CUXID 
       || TS0YM002.PC2INSEG != TS0YW01.PC2INSEG 
       || TS0YM002.XDMCD != TS0YW01.XDMCD       
       || TS0YM002.XPGCD != TS0YW01.XPGCD       
       || TS0YM002.XQACD != TS0YW01.XQACD       
       || TS0YM002.XOWCD != TS0YW01.XOWCD       
       || TS0YM002.XUMCD != TS0YW01.XUMCD       
       || VCPLHD04.TS-CPL-STAT-CD != TS0YW01.TSISTAT
       || VCPLHD04.XRE-RCPT-XCEP-CD != TS0YW01.XRECD
       || TS0YM002.TS0YM-CUST-ORD-ID != TS0YW01.OP1CUOID
       || TS0YM002.TS0YM-NIKE-ORD-ID != TS0YW01.OP1NORID
       || TS0YM002.TS-CRTF-ORIG-ID != TS0YW01.TS-CRTF-ORIG-ID
       || TS0YM002.TS-EXPT-LIC-ID != TS0YW01.TS-EXPT-LIC-ID
       || TS0YM002.TS-GEN-PRF-ID != TS0YW01.TS-GEN-PRF-ID)
        /* OR TS0YM002.PC3PONBR EQ 0; /* a b-grade shipment*/

        TS0Y262(); /* select the cplhd*/

        if (SQLCA.VAGen_SQLCODE == 0 /* if selection ok*/
         && VCPLHD04.ZZ-CHNG-CNT == TS0YW01.TS0YWCZC) /**/
          TS0Y263(); /* update the cplhd*/
        else
          TS0YW01.TS0YWSWR = "Y"; /* set request for data*/
          converseLib.validationFailed(12); /* data updated by someone else*/
          TS0YM002.XXXPRCNM = "TS0Y260"; /* process name*/
        end
      end
    end

  else

    /* ------------------------------------------------------------*/
         /* If the delete map is indicated*/
    /* ------------------------------------------------------------*/

    if (TS0YW01.TS0YWMAP == "2B" /* if delete map indicated*/
     && converseVar.eventKey is enter) /* and ENTER was pressed*/
      TS0Y262(); /* select the cplhd*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if selection ok*/
       && VCPLHD04.ZZ-CHNG-CNT == TS0YW01.TS0YWCZC) /**/
        if (VCPLHD04.TS-DET-FL == "Y") /* if detail exists*/
          TS0Y264(); /* select the set to carton row keys*/
          TS0YW01.TS0YWIXM = 1; /* set index to 1*/
          while (TS0YW01.TS0YWIXM <= TS0YW01.TS0YWMCR /* while LE max ctns*/
           && TS0YW03.TSIPLNBR[TS0YWIXM] > 0) /* and carton exist*/
            TS0Y362(); /* Select Unique carton(S )*/
            TS0Y370(); /* Delete the VPLAUX01 rows(D2)*/
            TS0Y265(); /* delete the carton*/
            if (SQLCA.VAGen_SQLCODE == 0 /* if delete successfull*/
             || SQLCA.VAGen_SQLCODE == 100)
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.commit();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* commit the delete*/
              TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* increment index*/
            else
              TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
              TS0YW01.TS0YWIXM = TS0YW01.TS0YWMCR + 1; /* end loop*/
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* reset data base*/
            end
          end
          set TS0YW03 empty; /* clear the carton detail key record*/
        end
        if (TS0YW01.TS0YWPSW == "N") /* if no error has occurred*/
          TS0YW01.TS0YWDEL = "N"; /* initialize delete flag*/
          TS0Y266(); /* update cplhd recd w/new totals*/
          TS0Y267(); /* check for cplhd delete*/
          if (TS0YW01.TS0YWDEL == "Y") /* if delete flag is 'y'*/

    /* TCS CHANGE BEGINS /**/
    /* Call TS4200 to take backup before deleting VCPLHD04 rows*/

            set WTS4201 empty;
            WTS4201.TS4201-DELETE-TYP = "D2";
            TS0Y201(); /* Call TS4200 to take backup*/

    /* TCS CHANGE ENDS   /**/

            TS0Y268(); /* delete the cplhd*/
            if (SQLCA.VAGen_SQLCODE == 0 /* if delete successfull*/
             || SQLCA.VAGen_SQLCODE == 100)
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.commit();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* commit the delete*/
            else
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* reset data base*/
            end
          else
            TS0Y269(); /* update the cplhd*/
            if (SQLCA.VAGen_SQLCODE == 0) /* if update successfull*/
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.commit();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* commit the update*/
            else
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* reset data base*/
            end
          end
        end
        if (TS0YW01.TS0YWPSW == "N") /* if no error has occurred*/
          TS0Y271(); /* select set of cplhd using cntnr*/
          if (TS0YW01.TS0YWPSW == "N") /* if no problems*/
            TS0Y272(); /* fetch the first row*/
            if (TS0YW01.TS0YWPSW == "N" /* if no problems*/
             && SQLCA.VAGen_SQLCODE == 100) /* and the row not found*/

    /* TCS CHANGE BEGINS /**/
    /* Call TS4200 to take backup before deleting VCNTNR01 rows*/

              set WTS4201 empty;
              WTS4201.TS4201-DELETE-TYP = "D3";
              TS0Y201(); /* Call TS4200 to take backup*/

    /* TCS CHANGE ENDS   /**/

              TS0Y273(); /* delete the container*/
            end
            if (TS0YW01.TS0YWPSW == "N") /* if no problems*/
              TS0Y274(); /* close the selected set*/
            end
          end
        end
      else
        TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
        TS0YW01.TS0YWSWR = "Y"; /* set request for data*/
        converseLib.validationFailed(12); /* data updated by someone else*/
        TS0YM002.XXXPRCNM = "TS0Y260"; /* process name*/
      end
    end
  end

   /* ------------------------------------------------------------*/
     /* Check to see if transfer to map 1 is valid*/
       /* or there are more cplhd to maintain/inq/delete.*/
   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWPSW == "N") /* if no errors causing screen reload*/
    TS0YW01.TS0YWIXA = TS0YW01.TS0YWIXA + 1; /* incr array counter*/
    if (TS0YW01.TS0YWIXA <= TS0YW01.TS0YWMSL /* if le max select lines*/
     && TSWREC.TSW2SHP[TS0YWIXA] > 0)        /* and more data to view*/
      TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
    else
      TS0YW01.TS0YWIXA = TS0YW01.TS0YWIXA - 1; /* decr array counter*/
      TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* save key*/
      TS0YW01.TS0YWSPO = TS0YM002.PC3PONBR;
      TS0YW01.TS0YWMAP = "1 "; /* set map to 1*/
      TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
    end
  end


end // end TS0Y260

// Select (SA) unique VCPLHD04
Function TS0Y262()
   /* ------------------------------------------------------------*/

             /* SELECT ROW FROM DTRANS.VCPLHD04*/

   /* 1) This module select a table row from the cplhd table.*/
   /* 2) It will return a system error if an unexpected return*/
      /* code is received.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  VCPLHD04.TS-NIKE-PL-NBR = TSWREC.TSWPLNBR[TS0YWIXA];

  TSGREC.TSNFNC = "SA"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If valid return code*/
    TS0YW04.TS0YW04-GRP = VCPLHD04.VCPLHD04-GRP; /* move to record*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
       /* continue on*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y262"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
      TS0YM002.XXXPRCNM = "TS0Y262"; /* Process name*/

    end
  end


end // end TS0Y262

// Update row in DTRANS.VCPLHD04
Function TS0Y263()
   /* ------------------------------------------------------------*/

              /* UPDATE ROW IN DTRANS.VCPLHD04*/

   /* 1) This module updates a table row from the cplhd table.*/
   /* 2) It will return a system error if an unexpected return*/
      /* code is received.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.PC-PO-NBR = TS0YM002.PC3PONBR; /* move in keys*/
  VCPLHD04.PC-ITM-SEQ-NBR = TS0YM002.PC-ITM-SEQ-NBR; /**/
  VCPLHD04.PC-PRDCU-ID = TS0YM002.PC2CUXID;
  VCPLHD04.PC-CU-IN-SEG-CD = TS0YM002.PC2INSEG;
  VCPLHD04.SY-STY-NBR = TS0YM002.SY1STNBR;
  VCPLHD04.SY-COLR-CD-ID = TS0YM002.SY2CLRID;
  VCPLHD04.XDM-DIM-CD = TS0YM002.XDMCD;
  VCPLHD04.XPG-PKG-TYP-CD = TS0YM002.XPGCD;
  VCPLHD04.XQA-QUAL-CD = TS0YM002.XQACD;
  VCPLHD04.XOW-OWN-GRP-CD = TS0YM002.XOWCD;
  VCPLHD04.XUM-UOM-CD = TS0YM002.XUMCD;
  VCPLHD04.OP-CUST-ORD-ID = TS0YM002.TS0YM-CUST-ORD-ID;
  VCPLHD04.OP-NIKE-ORD-ID = TS0YM002.TS0YM-NIKE-ORD-ID;
  VCPLHD04.TS-CRTF-ORIG-ID = TS0YM002.TS-CRTF-ORIG-ID;
  VCPLHD04.TS-EXPT-LIC-ID = TS0YM002.TS-EXPT-LIC-ID;
  VCPLHD04.TS-GEN-PRF-ID = TS0YM002.TS-GEN-PRF-ID;

  if (TS0YM002.TS0YM-CUST-ORD-ID > 0)
    TS0YW01.TS0YWWK5 = TS0YM002.TS0YM-CUST-ORD-ID;
    VCPLHD04.OP-ORD-PART-CHAR = TS0YW01.OP1PARTN;
  else
    VCPLHD04.OP-ORD-PART-CHAR = " ";
  end
  if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR1)
    TS0YW01.TS0YWWK1 = VCPLHD04.TS-CPL-TOT-CRTN1;
    TS0YW01.TS0YWWK2 = VCPLHD04.TS-CPL-QTOT-SHP1;
    TS0YW01.TS0YWWK3 = VCPLHD04.TS-CPL-TOT-KG1;
    TS0YW01.TS0YWWK4 = VCPLHD04.TS-CPL-TOT-CBM1;
    TS0YS35(); /* calculate the new totals*/
    VCPLHD04.TS-CPL-TOT-CRTN1 = TS0YM002.TS0YMCTN;
    VCPLHD04.TS-CPL-QTOT-SHP1 = TS0YM002.TS0YMQTY;
    VCPLHD04.TS-CPL-TOT-KG1 = TS0YM002.TS0YMKIL;
    VCPLHD04.TS-CPL-TOT-CBM1 = TS0YM002.TS0YMCBM;
  else
    if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR2)
      TS0YW01.TS0YWWK1 = VCPLHD04.TS-CPL-TOT-CRTN2;
      TS0YW01.TS0YWWK2 = VCPLHD04.TS-CPL-QTOT-SHP2;
      TS0YW01.TS0YWWK3 = VCPLHD04.TS-CPL-TOT-KG2;
      TS0YW01.TS0YWWK4 = VCPLHD04.TS-CPL-TOT-CBM2;
      TS0YS35(); /* calculate the new totals*/
      VCPLHD04.TS-CPL-TOT-CRTN2 = TS0YM002.TS0YMCTN;
      VCPLHD04.TS-CPL-QTOT-SHP2 = TS0YM002.TS0YMQTY;
      VCPLHD04.TS-CPL-TOT-KG2 = TS0YM002.TS0YMKIL;
      VCPLHD04.TS-CPL-TOT-CBM2 = TS0YM002.TS0YMCBM;
    else
      if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR3)
        TS0YW01.TS0YWWK1 = VCPLHD04.TS-CPL-TOT-CRTN3;
        TS0YW01.TS0YWWK2 = VCPLHD04.TS-CPL-QTOT-SHP3;
        TS0YW01.TS0YWWK3 = VCPLHD04.TS-CPL-TOT-KG3;
        TS0YW01.TS0YWWK4 = VCPLHD04.TS-CPL-TOT-CBM3;
        TS0YS35(); /* calculate the new totals*/
        VCPLHD04.TS-CPL-TOT-CRTN3 = TS0YM002.TS0YMCTN;
        VCPLHD04.TS-CPL-QTOT-SHP3 = TS0YM002.TS0YMQTY;
        VCPLHD04.TS-CPL-TOT-KG3 = TS0YM002.TS0YMKIL;
        VCPLHD04.TS-CPL-TOT-CBM3 = TS0YM002.TS0YMCBM;
      else
        if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR4)
          TS0YW01.TS0YWWK1 = VCPLHD04.TS-CPL-TOT-CRTN4;
          TS0YW01.TS0YWWK2 = VCPLHD04.TS-CPL-QTOT-SHP4;
          TS0YW01.TS0YWWK3 = VCPLHD04.TS-CPL-TOT-KG4;
          TS0YW01.TS0YWWK4 = VCPLHD04.TS-CPL-TOT-CBM4;
          TS0YS35(); /* calculate the new totals*/
          VCPLHD04.TS-CPL-TOT-CRTN4 = TS0YM002.TS0YMCTN;
          VCPLHD04.TS-CPL-QTOT-SHP4 = TS0YM002.TS0YMQTY;
          VCPLHD04.TS-CPL-TOT-KG4 = TS0YM002.TS0YMKIL;
          VCPLHD04.TS-CPL-TOT-CBM4 = TS0YM002.TS0YMCBM;
        else
          if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR5)
            TS0YW01.TS0YWWK1 = VCPLHD04.TS-CPL-TOT-CRTN5;
            TS0YW01.TS0YWWK2 = VCPLHD04.TS-CPL-QTOT-SHP5;
            TS0YW01.TS0YWWK3 = VCPLHD04.TS-CPL-TOT-KG5;
            TS0YW01.TS0YWWK4 = VCPLHD04.TS-CPL-TOT-CBM5;
            TS0YS35(); /* calculate the new totals*/
            VCPLHD04.TS-CPL-TOT-CRTN5 = TS0YM002.TS0YMCTN;
            VCPLHD04.TS-CPL-QTOT-SHP5 = TS0YM002.TS0YMQTY;
            VCPLHD04.TS-CPL-TOT-KG5 = TS0YM002.TS0YMKIL;
            VCPLHD04.TS-CPL-TOT-CBM5 = TS0YM002.TS0YMCBM;
          else
            if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR6)
              TS0YW01.TS0YWWK1 = VCPLHD04.TS-CPL-TOT-CRTN6;
              TS0YW01.TS0YWWK2 = VCPLHD04.TS-CPL-QTOT-SHP6;
              TS0YW01.TS0YWWK3 = VCPLHD04.TS-CPL-TOT-KG6;
              TS0YW01.TS0YWWK4 = VCPLHD04.TS-CPL-TOT-CBM6;
              TS0YS35(); /* calculate the new totals*/
              VCPLHD04.TS-CPL-TOT-CRTN6 = TS0YM002.TS0YMCTN;
              VCPLHD04.TS-CPL-QTOT-SHP6 = TS0YM002.TS0YMQTY;
              VCPLHD04.TS-CPL-TOT-KG6 = TS0YM002.TS0YMKIL;
              VCPLHD04.TS-CPL-TOT-CBM6 = TS0YM002.TS0YMCBM;
            else
              if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR7)
                TS0YW01.TS0YWWK1 = VCPLHD04.TS-CPL-TOT-CRTN7;
                TS0YW01.TS0YWWK2 = VCPLHD04.TS-CPL-QTOT-SHP7;
                TS0YW01.TS0YWWK3 = VCPLHD04.TS-CPL-TOT-KG7;
                TS0YW01.TS0YWWK4 = VCPLHD04.TS-CPL-TOT-CBM7;
                TS0YS35(); /* calculate the new totals*/
                VCPLHD04.TS-CPL-TOT-CRTN7 = TS0YM002.TS0YMCTN;
                VCPLHD04.TS-CPL-QTOT-SHP7 = TS0YM002.TS0YMQTY;
                VCPLHD04.TS-CPL-TOT-KG7 = TS0YM002.TS0YMKIL;
                VCPLHD04.TS-CPL-TOT-CBM7 = TS0YM002.TS0YMCBM;
              else
                if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR8
                )
                  TS0YW01.TS0YWWK1 = VCPLHD04.TS-CPL-TOT-CRTN8;
                  TS0YW01.TS0YWWK2 = VCPLHD04.TS-CPL-QTOT-SHP8;
                  TS0YW01.TS0YWWK3 = VCPLHD04.TS-CPL-TOT-KG8;
                  TS0YW01.TS0YWWK4 = VCPLHD04.TS-CPL-TOT-CBM8;
                  TS0YS35(); /* calculate the new totals*/
                  VCPLHD04.TS-CPL-TOT-CRTN8 = TS0YM002.TS0YMCTN;
                  VCPLHD04.TS-CPL-QTOT-SHP8 = TS0YM002.TS0YMQTY;
                  VCPLHD04.TS-CPL-TOT-KG8 = TS0YM002.TS0YMKIL;
                  VCPLHD04.TS-CPL-TOT-CBM8 = TS0YM002.TS0YMCBM;
                end
              end
            end
          end
        end
      end
    end
  end

   /* ****************************************************/
   /* check if any size error*/
   /* ****************************************************/
  TS0Y2631();

   /* ****************************************************/
   /* move in all other fields to VCPLHD04*/
   /* ****************************************************/

  if (TS0YW01.TSISTAT == "  ") /* If status not set*/
     /* continue on*/
  else
    if (TS0YW01.TSISTAT == "99") /* If status ok*/
      if (VCPLHD04.TS-CPL-STAT-CD == "ER" /* If the pl row is in error*/
       || VCPLHD04.TS-CPL-STAT-CD == "CR")
        if (VCPLHD04.XRE-RCPT-XCEP-CD == "PS" /* If style not on po*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "PI" /* or the po id invalid*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "PC" /* or the po closed*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "OH" /* or qty over tolerance*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "OS" /* or the qty was over soft*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "ER" /* or reqd field missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "EN" /* or non-reqd fld missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "UN" /* or undershipment*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "SZ" /* or size detail missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "AP" /* or asn and po mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "MM" /* or mode mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "WM" /* or whse mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "XM" /* or xref mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "SM" /* or style mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "  ") /* or blank*/
          if (VCPLHD04.TS-CPL-STAT-CD == "ER") /* If in-error*/
            VCPLHD04.TS-CPL-STAT-CD = "IT"; /* Set back to in-transit*/
          end
          if (VCPLHD04.TS-CPL-STAT-CD == "CR") /* If custom-clear in-error*/
            VCPLHD04.TS-CPL-STAT-CD = "CC"; /**/
          end
        end
      end
    else
      if (VCPLHD04.TS-CPL-STAT-CD == "CC" /* If custom-clear*/
       || VCPLHD04.TS-CPL-STAT-CD == "CR")
        VCPLHD04.TS-CPL-STAT-CD = "CR"; /* move status*/
      else
        VCPLHD04.TS-CPL-STAT-CD = TS0YW01.TSISTAT; /* move status*/
      end
    end
  end

  if (TS0YW01.XRECD == "  ") /* If exception set*/
     /* continue on*/
  else
    if (TS0YW01.XRECD == "99") /* If except ok*/
      if (VCPLHD04.TS-CPL-STAT-CD == "ER" /* If the pl row is in error*/
       || VCPLHD04.TS-CPL-STAT-CD == "CR")
        if (VCPLHD04.XRE-RCPT-XCEP-CD == "PS" /* If style not on po*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "OH" /* or qty was tolerance*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "PI" /* or the po id invalid*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "PC" /* or the po closed*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "OH" /* or qty over tolerance*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "OS" /* or qty over soft*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "ER" /* or reqd field missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "EN" /* or non-reqd fld missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "UN" /* or undershipment*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "SZ" /* or size detail missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "AP" /* or asn and po mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "WM" /* or whse mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "XM" /* or xref mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "SM" /* or style mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "MM") /* or mode mismatch*/
          VCPLHD04.XRE-RCPT-XCEP-CD = "  "; /* Set back to blanks*/
        end
      else
        if (VCPLHD04.XRE-RCPT-XCEP-CD == "PS" /* If style not on po*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "OH" /* or qty over tolerance*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "PI" /* or po id invalid*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "PC" /* or po closed*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "OH" /* or qty over tolerance*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "OS" /* or the qty was over soft*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "ER" /* or reqd field missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "EN" /* or non-reqd fld missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "UN" /* or undershipment*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "SZ" /* or size detail missing*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "AP" /* or asn and po mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "WM" /* or whse mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "XM" /* or xref mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "SM" /* or style mismatch*/
         || VCPLHD04.XRE-RCPT-XCEP-CD == "MM") /* or mode mismatch*/
          VCPLHD04.XRE-RCPT-XCEP-CD = "  "; /* Set back to blanks*/
        end
      end
    else
      VCPLHD04.XRE-RCPT-XCEP-CD = TS0YW01.XRECD; /* move exception cd*/
    end
  end

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/

  TSGREC.TSNFNC = "U "; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If valid return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y263"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM002.XXXPRCNM = "TS0Y263"; /* Process name*/

  end



end // end TS0Y263

// start CPLIT sizeid validation
Function TS0Y2631()
   /* ------------------------------------------------------------*/
   /*  */
   /* Check for size error in the packing list item table*/
   /*  */
   /* -------------------------------------------------------------*/
  if (VCPLHD04.TS-DET-FL == "Y") /* If cpl has detail*/

    TS0YS2631-1(); /* get valid sizes for the sty/colr*/

    TSOREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID; /* move in id*/
    TSOREC.TSIPLNBR = VCPLHD04.TS-NIKE-PL-NBR; /* move pl number*/

    TS0Y2632(); /* Select the set of cartons*/

    TS0YW01.ENDCPLIT = "N"; /* Set end of data switch*/

    TS0Y2633(); /* Fetch the carton*/

    while (TS0YW01.ENDCPLIT == "N") /* Until end of selected set*/

      TS0Y2634(); /* ===> Validate the size-id*/

      if (TS0YW01.TS-SIZE-CHECK-FLAG == "N") /* Invalid size*/
        VCPLHD04.XRE-RCPT-XCEP-CD = "SE";
        VCPLHD04.TS-CPL-STAT-CD = "ER";

        if (TS0YW01.TS-SIZ-ERR-FLG == "N") /* display error mesg once*/
          converseLib.validationFailed(127);
          TS0YW01.TS-SIZ-ERR-FLG = "Y";
          exit stack;
        end

        TS0YW01.ENDCPLIT = "Y";

      end

      TS0Y2633(); /* Fetch the carton*/

    end /* ===> Until end of selected set*/

    TS0Y2635(); /* Close the selected set*/


  end /* ===> If cpl has detail*/

   /* **                                                        ***/
   /* ********************** End of TS0Y2631   ********************/
end // end TS0Y2631

// Select (S4) set       VCPLIT01
Function TS0Y2632()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPLIT TABLE ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("S4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "S0Y2632"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "S0Y2632"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y2632   ********************/
end // end TS0Y2632

// Fetch  (N4) next row  VCPLIT01
Function TS0Y2633()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPLIT TABLE ROW*/

      /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return codes*/
    /* ====== NEXT SENTENCE =========>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS0YW01.ENDCPLIT = "Y"; /* ===> end of cursor switch*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "S0Y2633"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM001.XXXPRCNM = "S0Y2633"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y2633   ********************/
end // end TS0Y2633

// Validate the siz-ids in CPLIT
Function TS0Y2634()
   /* ------------------------------------------------------------*/
   /* Validate the size ids in the packing list item table*/
   /* ------------------------------------------------------------*/

  TS0YW01.TS-SIZ-INDX = 1;
  TS0YW01.TS-SIZE-CHECK-FLAG = "N";

  while (TS0YW01.TS-SIZ-INDX <= 40)

    if (PG3REC.SY5SZID[TS-SIZ-INDX] == TSOREC.SY5SZID
     && TSOREC.SY5SZID != 0)

      TS0YW01.TS-SIZ-INDX = 40;
      TS0YW01.TS-SIZE-CHECK-FLAG = "Y";
    else
      /* ===========> continue*/
    end

    TS0YW01.TS-SIZ-INDX = TS0YW01.TS-SIZ-INDX + 1;

  end

end // end TS0Y2634

// Close  (C4) set       VCPLIT01
Function TS0Y2635()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "S0Y2635"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "S0Y2635"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y2635   ********************/
end // end TS0Y2635

// Select the carton row keys
Function TS0Y264()
   /* ------------------------------------------------------------*/

              /* DELETE THE CONTAINER PACKING LIST*/

      /* 1) Select the set of cartons.*/
      /* 2) Fetch each carton into working storage.*/
      /* 3) Close the selected set of cartons.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWSW1 = "N"; /* set up end of set switches*/

  TS0YS37(); /* select the set of cartons*/

  if (TS0YW01.TS0YWPSW == "N") /* if no problems*/
    TS0YW01.TS0YWIXW = 1; /* initialize counter*/
    while (TS0YW01.TS0YWSW1 == "N") /* while not end of set cartons*/
      TS0YS39(); /* fetch the carton row*/
      TS0YW01.TS0YWIXW = TS0YW01.TS0YWIXW + 1; /* increment counter*/
    end
  end

  if (TS0YW01.TS0YWPSW == "N") /* if no problems*/
    TS0YS41(); /* close the selected carton set*/
  end


end // end TS0Y264

// Delete row in DTRANS.VCPLIT01
Function TS0Y265()
   /* ------------------------------------------------------------*/

                   /* DELETE THE CARTON ROW*/

         /* Delete the table row.*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  TSOREC.TSIPLNBR = TS0YW03.TSIPLNBR[TS0YWIXM];
  TSOREC.TSHNKCN = TS0YW03.TSHNKCN[TS0YWIXM];
  TSOREC.TSOFRCRT = TS0YW03.TSOFRCRT[TS0YWIXM];
  TSOREC.SY5SZID = TS0YW03.SY5SZID[TS0YWIXM];

  call "IO2580" ("D ", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
     /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y265"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/

      TS0YM002.XXXPRCNM = "TS0Y265"; /* Process name*/

    end
  end


end // end TS0Y265

// Update cplhd recd row totals
Function TS0Y266()
   /* ------------------------------------------------------------*/

          /* UPDATE THE CPLHD RECORD WITH NEW TOTALS*/

     /* 1) If the container/style row delete is requested, then*/
        /* update the cpl totals and zero out the totals*/
        /* associated with this cpl/container.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWIXM = 1; /* initialize index*/
  while (TS0YW01.TS0YWIXM <= TS0YW01.TS0YWMCP) /* le max cpl array (1-8)*/
    if (TS0YW04.TS0YWCNA[TS0YWIXM] == TS0YW01.TSHNKCN[TS0YWIXA])

      TS0YW04.TSISHPQT = TS0YW04.TSISHPQT - TS0YW04.TS0YWSHA[TS0YWIXM];
      TS0YW04.TSIRSVQT = TS0YW04.TSIRSVQT - TS0YW04.TS0YWRSA[TS0YWIXM];
      TS0YW04.TSIRCVQT = TS0YW04.TSIRCVQT - TS0YW04.TS0YWRCA[TS0YWIXM];
      TS0YW04.TSICRTQT = TS0YW04.TSICRTQT - TS0YW04.TS0YWCRA[TS0YWIXM];
      TS0YW04.TSIPLTKG = TS0YW04.TSIPLTKG - TS0YW04.TS0YWKGA[TS0YWIXM];
      TS0YW04.TSIPLCBM = TS0YW04.TSIPLCBM - TS0YW04.TS0YWCBA[TS0YWIXM];

      TS0YW04.TS0YWCNA[TS0YWIXM] = 0;
      TS0YW04.TS0YWSHA[TS0YWIXM] = 0;
      TS0YW04.TS0YWRSA[TS0YWIXM] = 0;
      TS0YW04.TS0YWRCA[TS0YWIXM] = 0;
      TS0YW04.TS0YWCRA[TS0YWIXM] = 0;
      TS0YW04.TS0YWKGA[TS0YWIXM] = 0;
      TS0YW04.TS0YWCBA[TS0YWIXM] = 0;

      TS0YS43(); /* reset 1-8 positions in th CPL header*/

      TS0YW01.TS0YWIXM = TS0YW01.TS0YWMCP + 1; /* end loop*/

    else

      TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* incr index*/

    end
  end

  VCPLHD04.VCPLHD04-GRP = TS0YW04.TS0YW04-GRP;


end // end TS0Y266

// Check if cplhd needs deletion
Function TS0Y267()
   /* ------------------------------------------------------------*/

          /* CHECK TO SEE IF THE CPLHD NEEDS DELETION*/

      /* 1) If packing list is in no containers, then there*/
         /* is no data associated with this cplhd and the*/
         /* delete flag should be set to yes.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWIXM = 1;
  TS0YW01.TS0YWDEL = "Y"; /* set delete flag to yes*/
  while (TS0YW01.TS0YWIXM <= TS0YW01.TS0YWMCP) /* le max cpl array (1-8)*/
    if (TS0YW04.TS0YWCNA[TS0YWIXM] > 0) /* if container exists*/

      TS0YW01.TS0YWDEL = "N"; /* set delete flag to no*/
      TS0YW01.TS0YWIXM = TS0YW01.TS0YWMCP + 1; /* end loop*/

    else

      TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* continue*/

    end
  end


end // end TS0Y267

// Delete row in DTRANS.VCPLHD04
Function TS0Y268()
   /* ------------------------------------------------------------*/

            /* DELETE THE CONTAINER PACKING LIST ROW*/

         /* Delete the table row.*/

   /* ------------------------------------------------------------*/

   /* OVE VCPLHD04.TS-NIKE-SHP-ID TO VCPLHD04.TS-NIKE-SHP-ID; /* move keys*/
   /* OVE VCPLHD04.TS-NIKE-PL-NBR TO VCPLHD04.TS-NIKE-PL-NBR;*/

  TSGREC.TSNFNC = "D "; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y268"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/

      TS0YM001.XXXPRCNM = "TS0Y268"; /* Process name*/

    end
  end


end // end TS0Y268

// Update row in DTRANS.VCPLHD04
Function TS0Y269()
   /* ------------------------------------------------------------*/

              /* UPDATE ROW IN DTRANS.VCPLHD04*/

   /* 1) This module updates a table row from the cplhd table.*/
   /* 2) It will return a system error if an unexpected return*/
      /* code is received.*/

   /* ------------------------------------------------------------*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/

  TSGREC.TSNFNC = "U "; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If valid return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y269"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM002.XXXPRCNM = "TS0Y269"; /* Process name*/

  end


end // end TS0Y269

// Select set DTRANS.VCPLHD04
Function TS0Y271()
   /* ------------------------------------------------------------*/

        /* SELECT SET AND OPEN CURSOR FOR DTRANS.VCPLHD04*/

   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in keys*/
  VCPLHD04.PC-PO-NBR = -1;
  VCPLHD04.PC-PRDCU-ID = "*";
  VCPLHD04.SY-STY-NBR = "*";
  VCPLHD04.SY-COLR-CD-ID = "*";
  VCPLHD04.XQA-QUAL-CD = "*";
  VCPLHD04.PC-CU-IN-SEG-CD = "*";
  VCPLHD04.TS-NIKE-CNTNR-NBR1 = TS0YW01.TSHNKCN[TS0YWIXA];
  VCPLHD04.TS-NIKE-CNTNR-NBR2 = TS0YW01.TSHNKCN[TS0YWIXA];
  VCPLHD04.TS-NIKE-CNTNR-NBR3 = TS0YW01.TSHNKCN[TS0YWIXA];
  VCPLHD04.TS-NIKE-CNTNR-NBR4 = TS0YW01.TSHNKCN[TS0YWIXA];
  VCPLHD04.TS-NIKE-CNTNR-NBR5 = TS0YW01.TSHNKCN[TS0YWIXA];
  VCPLHD04.TS-NIKE-CNTNR-NBR6 = TS0YW01.TSHNKCN[TS0YWIXA];
  VCPLHD04.TS-NIKE-CNTNR-NBR7 = TS0YW01.TSHNKCN[TS0YWIXA];
  VCPLHD04.TS-NIKE-CNTNR-NBR8 = TS0YW01.TSHNKCN[TS0YWIXA];

  TSGREC.TSNFNC = "S5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y271"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM002.XXXPRCNM = "TS0Y271"; /* Process name*/

  end


end // end TS0Y271

// Fetch from DTRANS.VCPLHD04
Function TS0Y272()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD04*/

   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
     /* continue on -- checked in calling process*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y272"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM002.XXXPRCNM = "TS0Y272"; /* Process name*/

    end
  end


end // end TS0Y272

// Delete from DTRANS.VCNTNR01
Function TS0Y273()
   /* ------------------------------------------------------------*/

               /* DELETE THE CONTAINER ROW*/

         /* Delete the table row.*/

   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = TSWREC.TSFSHPID; /* move keys*/
  TSHREC.TSHNKCN = TS0YW01.TSHNKCN[TS0YWIXA];

  call "IO2590" ("D ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y273"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table ke*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/

      TS0YM002.XXXPRCNM = "TS0Y273"; /* Process name*/

    end
  end


end // end TS0Y273

// Close set DTRANS.VCPLHD04
Function TS0Y274()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD04*/

   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0Y274"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM002.XXXPRCNM = "TS0Y274"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0Y274

// Container style move screen
Function TS0Y300()
   /* ------------------------------------------------------------*/

              /* CONTAINER STYLE MOVE SCREEN*/

   /* This is the main process used to display the container*/
   /* style change/inquiry/delete screen.*/
   /* Processing sequence is as follows:*/

   /* 1) If request for data is yes;*/
      /* - Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) If no errors are found.*/
      /* - Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWSWR == "Y") /* If request for data is yes*/
    TS0Y310(); /* Obtain the data for display*/
  end

  TS0Y320(); /* Format and display the map*/

  TS0Y330(); /* Check attention identifier*/

  TS0Y340(); /* Reset fields to normal intensity*/

  TS0Y350(); /* Verify the entered data*/

  if (TS0YW01.TS0YWPSW == "N") /* If no errors have occurred*/
    TS0Y360(); /* Process valid input request*/
  end


end // end TS0Y300

// Obtain the data to display
Function TS0Y310()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Select the row from DTRANS.VCPLHD04 to obtain the data*/
      /* for display on the container style screen.*/

      /* Indicate that the request for data was completed.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
        /* Select container packing list header row*/
   /* ------------------------------------------------------------*/
  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  VCPLHD04.TS-NIKE-PL-NBR = TSWREC.TSWPLNBR[TS0YWIXA];

  TSGREC.TSNFNC = "SA"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
    TS0YW04.TS0YW04-GRP = VCPLHD04.VCPLHD04-GRP;
    TS0YW01.TS0YWSWR = "N"; /* set request for data to no*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      converseLib.validationFailed(69); /* cpl deleted by another application*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
      TS0YM003.XXXPRCNM = "TS0Y310";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y310"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM003.XXXPRCNM = "TS0Y310"; /* Process name*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/

    end
  end


end // end TS0Y310

// Format and display the map
Function TS0Y320()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) Format the map heading.*/
   /* 2) If no error to display, format the selected data.*/
   /* 3) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWPSW == "N") /* no errors*/
    set TS0YM003 initial; /* set map clear*/

    TS0YM003.TSFSHPID = TSWREC.TSFSHPID;
    TS0YM003.TSFBOL = TSWREC.TSFBOL;
    TS0YM003.TS0YMFCN = TS0YW01.TSHCNTNR[TS0YWIXA];
    TS0YM003.TSACARCD = TSWREC.TSACARCD;
    TS0YM003.TS5CRAFT = TSWREC.TS5CRAFT;
    TS0YM003.TSFSHPNB = TSWREC.TSFSHPNB;
    TS0YM003.TSEDEST = TSWREC.TSEDEST;
    TS0YM003.XWHCD = TSWREC.XWHCD;

    if (TS0YW01.TS0YWSWR == "N") /* if data was found to display*/
      TS0Y321(); /* format the selected data*/
    end

  end

  TS0YM003.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/

  /* IF EZEMNO NE 0;                   /* Errors exist*/
  /* SET TS0YM003 ALARM;*/
  /* END;*/

  converse TS0YM003 ;

  TS0YW01.TS0YWPSW = "N"; /* reset error switch*/


end // end TS0Y320

// Format the selected data
Function TS0Y321()
   /* ------------------------------------------------------------*/

                 /* FORMAT THE SELECTED DATA*/

   /* 1) Format the selected data on the page.*/
   /* 2) Select all the associated descriptions for the map.*/
      /* - style*/
      /* - color*/
      /* - quality*/
      /* - iseg*/
      /* - dimension*/
      /* - packaging type*/
      /* - owner group*/
      /* - unit of measure*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
       /* Move all VCPLHD04 fields to the map*/
   /* ------------------------------------------------------------*/

  TS0YS45(); /* move in all fields to map*/


   /* ------------------------------------------------------------*/
       /* Select the Cust. name*/
   /* ------------------------------------------------------------*/

  PC2REC.PC2CUXID = VCPLHD04.PC-PRDCU-ID; /* move in keys*/
  PC2REC.XGPCD = VCPLHD04.XGP-GPC-CD;

  TS0YS13(); /* select from dprodg.vprdcu01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
    TS0YM003.PC2NAME = PC2REC.PC2NAME; /* move in cust name*/
  end

   /* ------------------------------------------------------------*/
       /* Select the Cust P.O. from Order table*/
   /* ------------------------------------------------------------*/

  if (VCPLHD04.PC-PRDCU-ID > " ") /* move in keys*/

    TS0Y-32110(); /* select from DREADO.VORHDRR1*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
      TS0YM003.OP1CUPO = OP1REC.OP1CUPO; /* move in cust P.O.*/
    end

  end

   /* ------------------------------------------------------------*/
       /* Select the style and color name*/
   /* ------------------------------------------------------------*/

  PG2REC.XGPCD = VCPLHD04.XGP-GPC-CD; /* move in keys*/
  PG2REC.SY1STNBR = VCPLHD04.SY-STY-NBR;
  PG2REC.SY2CLRID = VCPLHD04.SY-COLR-CD-ID;
  PG2REC.XDMCD = VCPLHD04.XDM-DIM-CD;

  TS0YS15(); /* select from dprod.vcolor02*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
    TS0YM003.SY1SSTNM = PG2REC.SY1SSTNM; /* move in style sname*/
    TS0YM003.SY2CLRAB = PG2REC.SY2CLRAB; /* move in color abrev.*/
  end

   /* ------------------------------------------------------------*/
        /* Select the quality code description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XQA-QUAL-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XQA-QUAL-CD in XQATBL.XQACD)
      TS0YM003.XQADESC = XQATBL.XQADESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the iseg description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.PC-CU-IN-SEG-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    PC2REC.PC2INSEG = VCPLHD04.PC-CU-IN-SEG-CD; /* move in keys*/
    PC2REC.XGPCD = VCPLHD04.XGP-GPC-CD;

    TS0YS16(); /* select from dprodg.vprdcu01*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
      TS0YM003.PC2SEGDE = PC2REC.PC2SEGDE; /* move in iseg desc*/
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the dimension description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XDM-DIM-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XDM-DIM-CD in XDMTBL.XDMCD)
      TS0YM003.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the packaging type description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XPG-PKG-TYP-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XPG-PKG-TYP-CD in XPGTBL.XPGCD)
      TS0YM003.XPGDESC = XPGTBL.XPGDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the owner group description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XOW-OWN-GRP-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XOW-OWN-GRP-CD in XOWTBL.XOWCD)
      TS0YM003.XOWDESC = XOWTBL.XOWABRV[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Select the unit of measure description*/
   /* ------------------------------------------------------------*/
  if (VCPLHD04.XUM-UOM-CD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (VCPLHD04.XUM-UOM-CD in XUMTBL.XUMCD)
      TS0YM003.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0Y321 ***********************/
end // end TS0Y321

// Check attention identifier
Function TS0Y330()
   /* ------------------------------------------------------------*/

         /* CHECK THE ATTENTION IDENTIFIER*/

   /* 1) Check attention identifier used to invoke transaction.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0YM003 initial; /* Clear the map fields*/
    TS0YW01.TS0YWSWR = "Y"; /* Set request for data = n*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* save key*/
    TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
    TS0YW01.TS0YWSWR = "Y"; /* get the data again*/
    TS0YW01.TS0YWMAP = "1 "; /* go to browse screen*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    TS0YM003.XXXPRCNM = "TS0Y330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0Y330

// Reset highlighted fields
Function TS0Y340()
   /* ------------------------------------------------------------*/

                 /* RESET HIGHLIGHTED FIELDS*/

     /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0YM003.TS0YMTCN cursor, initialAttributes; /* Reset all fields to normal*/


end // end TS0Y340

// Verify the entered data
Function TS0Y350()
   /* ------------------------------------------------------------*/

                /* VERIFY THE ENTERED DATA*/

         /* 1) verify the to container number entered*/
            /* - check for container entry*/
            /* - validate container existence for shipment*/
            /* - make sure style not already assigned to this*/
              /* container.*/

   /* ------------------------------------------------------------*/

   /* **************************************/
         /* verify the container*/
   /* **************************************/

  if (TS0YM003.TS0YMTCN == " ") /* if to container is missing*/
    converseLib.validationFailed(121); /* Display error message*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
    TS0YM003.XXXPRCNM = "TS0Y350"; /* Process name*/
    set TS0YM003.TS0YMTCN cursor, modified, bold;
  else
    TS0Y351(); /* check for cntnr existence*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if container was found*/
      TS0Y352(); /* check to see if duplicate cntnr*/
      if (TS0YW01.TSHCNTNR[TS0YWIXA] != TS0YM003.TS0YMTCN) /* Not same cntnr*/
        if (TS0YW01.TS0YWNCF == "N") /* Not new cntnr assignment, cntnr*/
                                 /* already assigned to this style*/
          converseLib.validationFailed(336); /* Display error message*/
          TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
          TS0YM003.XXXPRCNM = "TS0Y350"; /* Process name*/
          set TS0YM003.TS0YMTCN cursor, modified, bold;
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if container not found*/
        converseLib.validationFailed(121); /* Display error message*/
        TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
        TS0YM003.XXXPRCNM = "TS0Y350"; /* Process name*/
        set TS0YM003.TS0YMTCN cursor, modified, bold;
      end
    end
  end


  if (TS0YW01.TS0YWPSW == "N") /* if no errors*/
    TS0YW01.TS0YWTCN = TSHREC.TSHNKCN; /* save container number*/
  end


end // end TS0Y350

// Select from DTRANS.VCNTNR01
Function TS0Y351()
   /* ------------------------------------------------------------*/

             /* SELECT ROW FROM DTRANS.VCNTNR01*/

   /* 1) This module select a table row from the cntnr table.*/
   /* 2) It will return a system error if an unexpected return*/
      /* code is received.*/

   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  TSHREC.TSHCNTNR = TS0YM003.TS0YMTCN;

  call "IO2590" ("S ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If valid return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y351"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM003.XXXPRCNM = "TS0Y351"; /* Process name*/

  end


end // end TS0Y351

// Check for duplicate cntnrs
Function TS0Y352()
   /* ------------------------------------------------------------*/

              /* CHECK FOR DUPLICATE CONTAINERS*/

   /* 1) Select the cplhd row*/
   /* 2) Check to see that this container is not already*/
      /* assigned to this style.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
        /* Select container packing list header row*/
   /* ------------------------------------------------------------*/
  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  VCPLHD04.TS-NIKE-PL-NBR = TSWREC.TSWPLNBR[TS0YWIXA];

  TSGREC.TSNFNC = "SA"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      converseLib.validationFailed(69); /* cpl deleted by another application*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM001.XXXPRCNM = "TS0Y001";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y352"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM003.XXXPRCNM = "TS0Y352"; /* Process name*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

    end
  end

   /* ------------------------------------------------------------*/
      /* Check to see that this container is not already*/
      /* assigned to this style.*/
   /* ------------------------------------------------------------*/
  TS0YW01.TS0YWNCF = "Y"; /* set new container assigned flag*/
  if (TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR1
   || TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR2
   || TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR3
   || TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR4
   || TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR5
   || TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR6
   || TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR7
   || TSHREC.TSHNKCN == VCPLHD04.TS-NIKE-CNTNR-NBR8)
    TS0YW01.TS0YWNCF = "N"; /* Indicate new container assigned*/
  end


end // end TS0Y352

// Process valid input requests
Function TS0Y360()
   /* ------------------------------------------------------------*/

                /* PROCESS VALID INPUT REQUESTS*/

      /* 1) If map detail flag is yes*/
         /* a. select the cplhd row.*/
            /* - if row not updated already;*/
              /* select set of cartons, delete and insert*/
              /* cartons with new container number.*/
         /* b. Update the cpl row in the data base.*/
      /* 2) else*/
         /* a. Update the cpl row in the data base.*/
      /* 3) If more selections exist to maintain/inq/delete*/
         /* - Set request for data to yes and cycle to next*/
           /* cpl style map.*/
         /* else*/
         /* - Return to browse screen.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWERR = "N"; /* initialize screen reload error flag*/

   /* ------------------------------------------------------------*/
       /* If the maintenance map is indicated*/
   /* ------------------------------------------------------------*/

  if (TS0YW01.TSHCNTNR[TS0YWIXA] == TS0YM003.TS0YMTCN) /* if cntnr same*/
     /* continue on*/
  else
    if (TS0YW01.TSIDETFL == "Y") /* and detail is yes*/
      TS0Y262(); /* select the cplhd*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if selection ok*/
       && VCPLHD04.ZZ-CHNG-CNT == TS0YW01.TS0YWCZC) /* and change cts same*/
        TS0Y361(); /* select the set of carton row keys*/
        TS0YW01.TS0YWIXM = 1; /* set index to 1*/
        while (TS0YW01.TS0YWIXM <= TS0YW01.TS0YWMCR /* And LE max cartons*/
         && TS0YW03.TSIPLNBR[TS0YWIXM] > 0) /* while carton exist*/
          TS0Y362(); /* select unique carton(S )*/
          if (SQLCA.VAGen_SQLCODE == 0)
            TS0Y365(); /* Select and store VPLAUX01 into array*/
            if (TS0YW01.VPLAUXCNT > 0)
              TS0Y370(); /* Delete from VPLAUX01(D2)*/
            end
          end
          if (SQLCA.VAGen_SQLCODE == 0) /* if sqlcode eq 0*/
            TS0Y265(); /* delete the carton*/
            if (SQLCA.VAGen_SQLCODE == 0) /* if sqlcode eq 0*/
              TS0Y363(); /* del the carton*/
              TS0Y375(); /* add VPLAUX01(A1)*/
            end
            if (SQLCA.VAGen_SQLCODE == 0) /* if sqlcode ok*/
               /* continue on*/
              TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* increment index*/
            else
              TS0YW01.TS0YWERR = "Y"; /* indicate problem*/
              TS0YW01.TS0YWIXM = TS0YW01.TS0YWMCR + 1; /* end loop*/
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* reset data base*/
            end
          else
            TS0YW01.TS0YWERR = "Y"; /* indicate problem*/
            TS0YW01.TS0YWIXM = TS0YW01.TS0YWMCR + 1; /* end loop*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* reset data base*/
          end
        end
        if (TS0YW01.TS0YWERR == "N" /* if no error has occurred*/
         && TS0YW01.TS0YWPSW == "N") /* and no other problems*/
          TS0Y364(); /* update the cplhd*/
          if (SQLCA.VAGen_SQLCODE == 0 /* if update successfull*/
           || SQLCA.VAGen_SQLCODE == 100)
             /* continue on*/
          else
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* reset data base*/
          end
        end
      else
        TS0YW01.TS0YWERR = "Y"; /* indicate problem*/
        TS0YW01.TS0YWSWR = "Y"; /* set request for data*/
        converseLib.validationFailed(12); /* data updated by someone else*/
        TS0YM002.XXXPRCNM = "TS0Y360"; /* process name*/
      end
    else
      TS0Y262(); /* select the cplhd*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if selection ok*/
       && VCPLHD04.ZZ-CHNG-CNT == TS0YW01.TS0YWCZC) /* and change cts same*/
        if (TS0YW01.TS0YWERR == "N" /* if no error has occurred*/
         && TS0YW01.TS0YWPSW == "N") /* and no other problems*/
          TS0Y364(); /* update the cplhd*/
          if (SQLCA.VAGen_SQLCODE == 0 /* if update successfull*/
           || SQLCA.VAGen_SQLCODE == 100)
             /* continue on*/
          else
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.rollback();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* reset data base*/
          end
        end
      else
        TS0YW01.TS0YWERR = "Y"; /* indicate problem*/
        TS0YW01.TS0YWSWR = "Y"; /* set request for data*/
        converseLib.validationFailed(12); /* data updated by someone else*/
        TS0YM002.XXXPRCNM = "TS0Y360"; /* process name*/
      end
    end
  end

   /* ------------------------------------------------------------*/
     /* Check to see if transfer to map 1 is valid*/
       /* or there are more cplhd to maintain/inq/delete.*/
   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWERR == "N" /* if no errors causing screen reload*/
   && TS0YW01.TS0YWPSW == "N") /* and no update errors*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit the updates*/

    TS0YW01.TS0YWIXA = TS0YW01.TS0YWIXA + 1; /* incr array counter*/
    if (TSWREC.TSW2SHP[TS0YWIXA] > 0) /* if more data to view*/
      TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
    else
      TS0YW01.TS0YWIXA = TS0YW01.TS0YWIXA - 1; /* decr array counter*/
      TS0YW01.TS0YWSCN = TS0YM003.TS0YMTCN; /* save key*/
      TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
      TS0YW01.TS0YWMAP = "1 "; /* set map to 1*/
      TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
    end
  end


end // end TS0Y360

// Select the set of cartons
Function TS0Y361()
   /* ------------------------------------------------------------*/

              /* DELETE THE CONTAINER PACKING LIST*/

      /* 1) Select the set of cartons.*/
      /* 2) Fetch each carton into working storage.*/
      /* 3) Close the selected set of cartons.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWSW1 = "N"; /* set up end of set switches*/

  set TS0YW03 empty; /* Clear save working storage*/

  TS0YS47(); /* select the set of cartons*/

  if (TS0YW01.TS0YWPSW == "N") /* if no problems with select*/
    TS0YW01.TS0YWIXW = 1; /* initialize counter*/
    while (TS0YW01.TS0YWSW1 == "N") /* while not end of set cartons*/
      TS0YS49(); /* fetch the carton row*/
      TS0YW01.TS0YWIXW = TS0YW01.TS0YWIXW + 1; /* increment counter*/
    end
  end

  TS0YS51(); /* close the selected carton set*/


end // end TS0Y361

// Select from DTRANS.VCPLIT01
Function TS0Y362()
   /* ------------------------------------------------------------*/

                   /* SELECT THE CARTON ROW*/

         /* Select the table row.*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  TSOREC.TSIPLNBR = TS0YW03.TSIPLNBR[TS0YWIXM];
  TSOREC.TSHNKCN = TS0YW03.TSHNKCN[TS0YWIXM];
  TSOREC.TSOFRCRT = TS0YW03.TSOFRCRT[TS0YWIXM];
  TSOREC.SY5SZID = TS0YW03.SY5SZID[TS0YWIXM];

  call "IO2580" ("S ", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* select row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
     /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y362"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/

      TS0YM003.XXXPRCNM = "TS0Y362"; /* Process name*/

    end
  end


end // end TS0Y362

// Add row to DTRANS.VCPLIT01
Function TS0Y363()
   /* ------------------------------------------------------------*/

                   /* ADD THE CARTON ROW*/

         /* Add the table row.*/

   /* ------------------------------------------------------------*/

  TSOREC.TSHNKCN = TS0YW01.TS0YWTCN;

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSOREC.ZZZSDT = XX0XW01.XX0XWDAT; /* set up date*/
  TSOREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  TSOREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  TSOREC.ZZZCHGCT = 0; /* Change count*/

  call "IO2580" ("A ", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
     /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y363"; /* Process name*/
      TA1REC.TA1LOC = "ADD THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/

      TS0YM003.XXXPRCNM = "TS0Y363"; /* Process name*/

    end
  end


end // end TS0Y363

// Update row in DTRAN.VCPLHD04
Function TS0Y364()
   /* ------------------------------------------------------------*/

              /* UPDATE ROW IN DTRANS.VCPLHD04*/

   /* 1) This module updates a table row from the cplhd table.*/
   /* 2) It will return a system error if an unexpected return*/
      /* code is received.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR1)
    VCPLHD04.TS-NIKE-CNTNR-NBR1 = TS0YW01.TS0YWTCN;
  else
    if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR2)
      VCPLHD04.TS-NIKE-CNTNR-NBR2 = TS0YW01.TS0YWTCN;
    else
      if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR3)
        VCPLHD04.TS-NIKE-CNTNR-NBR3 = TS0YW01.TS0YWTCN;
      else
        if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR4)
          VCPLHD04.TS-NIKE-CNTNR-NBR4 = TS0YW01.TS0YWTCN;
        else
          if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR5)
            VCPLHD04.TS-NIKE-CNTNR-NBR5 = TS0YW01.TS0YWTCN;
          else
            if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR6)
              VCPLHD04.TS-NIKE-CNTNR-NBR6 = TS0YW01.TS0YWTCN;
            else
              if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR7)
                VCPLHD04.TS-NIKE-CNTNR-NBR7 = TS0YW01.TS0YWTCN;
              else
                if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR8)
                  VCPLHD04.TS-NIKE-CNTNR-NBR8 = TS0YW01.TS0YWTCN;
                end
              end
            end
          end
        end
      end
    end
  end


   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID; /**/
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/

  TSGREC.TSNFNC = "U "; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If valid return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y364"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM003.XXXPRCNM = "TS0Y364"; /* Process name*/

  end


end // end TS0Y364

// Process to store VPLAUX01 dtls
Function TS0Y365()
   /* ------------------------------------------------------------*/
     /* Store the Existing Vplaux01 rows in Array*/
   /* ------------------------------------------------------------*/

  set VPLAUX01 empty;
  TS0YW01.VPLAUXCNT = 0; /* To check for VPLAUX01 ROWS*/
  TS0YW01.TS0YWIX3 = 0; /* Set index*/
  TS0YW01.TS0YWSWC = "N"; /* Set Flag*/
  VPLAUX01.TS-NIKE-SHP-ID = TSOREC.TSFSHPID; /* move in keys*/
  VPLAUX01.TS-NIKE-PL-NBR = TSOREC.TSIPLNBR;
  VPLAUX01.TS-NIKE-CNTNR-NBR = TSOREC.TSHNKCN;
  VPLAUX01.TS-CRTN-NBR = TSOREC.TSOFRCRT;
  VPLAUX01.SY-SZ-ID = TSOREC.SY5SZID;
  TS0YW05.TSTOCRTN = TSOREC.TSOTOCRT;
  TS0Y366(); /* Perform Select(S6) VPLAUX01*/
  while (TS0YW01.TS0YWSWC == "N")
    TS0Y367(); /* perform Fetch(N6) VPLAUX01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (TS0YW01.TS0YWIX3 < 18000) /* Check for Carton count*/
        TS0YW01.VPLAUXCNT = TS0YW01.VPLAUXCNT + 1;
                                   /* increment VPLAUX ROW CNT*/
        TS0Y369(); /* Store UCC-128 codes in array*/
      else
        converseLib.validationFailed(418); /* move error message if Carton boundary*/
                                   /* reached*/
        exit stack;
      end
    end
  end
  TS0YW01.CPLCRTNS = TS0YW01.TS0YWIX3; /* Count of VPLAUX01 Cartons*/
  TS0Y368(); /* Perform Close(C6) VPLAUX01*/

   /* **                                                        ***/
   /* ********************** End of TS0Y365 ***********************/
end // end TS0Y365

// Select (S6) set       VPLAUX01
Function TS0Y366()
   /* ------------------------------------------------------------*/
   /* Select rows from VPLAUX01*/
   /* ------------------------------------------------------------*/

  TS0YW05.TSCFNC = "S6";
  call "VPLAUX01" (TS0YW05, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y366"; /* Process name*/
    TA1REC.TA1LOC = "SELECT BAR CODE INFO           ";
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
    TA1REC.TA1TBLKE = TS0YM001.TSFSHPID; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "TS0Y366"; /* Process name*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of TS0Y366 ***********************/
end // end TS0Y366

// Fetch  (N6) next row  VPLAUX01
Function TS0Y367()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE PLAUX TABLE ROW*/

   /* ------------------------------------------------------------*/

  TS0YW05.TSCFNC = "N6";
  call "VPLAUX01" (TS0YW05, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Fetch table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return codes*/
    TS0YW01.TS0YWIX3 = TS0YW01.TS0YWIX3 + 1; /* Increment counter*/
    /* ====== NEXT SENTENCE =========>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS0YW01.TS0YWSWC = "Y"; /* ===> end of cursor switch*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y367"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0YM001.XXXPRCNM = "TS0Y367"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end
  end /* ===> Selected set*/


   /* **                                                        ***/
   /* ********************** End of TS0Y367 ***********************/
end // end TS0Y367

// Close  (C6) set       VPLAUX01
Function TS0Y368()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF PLAUX ROWS*/

   /* ------------------------------------------------------------*/

  TS0YW05.TSCFNC = "C6";
  call "VPLAUX01" (TS0YW05, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0Y368"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0y368 ***********************/
end // end TS0Y368

// Store Vplaux detail into Array
Function TS0Y369()
   /* ***************************************************************/
   /* Store Vplaux01 details into Array      **/
   /* ***************************************************************/
  TS0YW06.TS-UCC-128-CD[TS0YWIX3] = VPLAUX01.TS-UCC-128-CD;
  TS0YW06.TS-CRTN-NBR[TS0YWIX3] = VPLAUX01.TS-CRTN-NBR;
  TS0YW06.PK-CRTN-CD[TS0YWIX3] = VPLAUX01.PK-CRTN-CD;
end // end TS0Y369

// Delete(D2) the VPLAUX01 rows
Function TS0Y370()
   /* ------------------------------------------------------------*/

                  /* DELETE THE VPLAUX ROW*/

    /* 1) Delete the VPLAUX row from the data base*/

   /* ------------------------------------------------------------*/

  VPLAUX01.TS-NIKE-SHP-ID = TSOREC.TSFSHPID; /* move in keys*/
  VPLAUX01.TS-NIKE-PL-NBR = TSOREC.TSIPLNBR;
  VPLAUX01.TS-NIKE-CNTNR-NBR = TSOREC.TSHNKCN;
  VPLAUX01.TS-CRTN-NBR = TSOREC.TSOFRCRT;
  VPLAUX01.SY-SZ-ID = TSOREC.SY5SZID;
  TS0YW05.TSTOCRTN = TSOREC.TSOTOCRT;
  TS0YW05.TSCFNC = "D2";
  call "VPLAUX01" (TS0YW05, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Delete table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* ========== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y370"; /* Process name*/
    TA1REC.TA1LOC = "DELETE TABLE SET";
    TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM003.XXXPRCNM = "TS0Y370"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===>  Exit to display the map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y370 ***********************/
end // end TS0Y370

// Process Insert new VPLAUX01row
Function TS0Y375()
   /* ------------------------------------------------------------*/

                /* PROCESS TO INSERT VPLAUX01 ROWS*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWIX3 = 1;
  while (TS0YW01.TS0YWIX3 <= TS0YW01.CPLCRTNS)
    VPLAUX01.TS-NIKE-SHP-ID = TSOREC.TSFSHPID; /* move new values*/
    VPLAUX01.TS-NIKE-CNTNR-NBR = TS0YW01.TS0YWTCN;
                                   /* new container numbe*/
    VPLAUX01.TS-NIKE-PL-NBR = TSOREC.TSIPLNBR; /* row*/
    VPLAUX01.SY-SZ-ID = TSOREC.SY5SZID;
    VPLAUX01.TS-CRTN-NBR = TS0YW06.TS-CRTN-NBR[TS0YWIX3];
    VPLAUX01.TS-UCC-128-CD = TS0YW06.TS-UCC-128-CD[TS0YWIX3];
    VPLAUX01.PK-CRTN-CD = TS0YW06.PK-CRTN-CD[TS0YWIX3];
    VPLAUX01.TS-CRTN-UNT-SHP = TSOREC.TSOSHPQT /     ((TSOREC.TSOTOCRT - TSOREC.TSOFRCRT) + 1); /* Calculate unit carton*/
                                   /* quantity*/
    TS0Y380(); /* Insert VPLAUX01(A1)*/
    TS0YW01.TS0YWIX3 = TS0YW01.TS0YWIX3 + 1; /* increment counter*/
  end
   /* ********************** End of TS0Y375 ***********************/
end // end TS0Y375

// Insert (A1) Row VPLAUX01
Function TS0Y380()
   /* ------------------------------------------------------------*/

                     /* ADD VPLAUX01 ROWS*/

       /* Add the AUXILLARY rows to DTRANS.VPLAUX01*/

   /* ------------------------------------------------------------*/


  TS0YW05.TSCFNC = "A1";
  call "VPLAUX01" (TS0YW05, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Insert row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y380"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM003.XXXPRCNM = "TS0Y380"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0Y380 ***********************/
end // end TS0Y380

// Container maintenance screen
Function TS0Y400()
   /* ------------------------------------------------------------*/

             /* CONTAINER MAINTENANCE SCREEN*/

   /* This is the main process used to display the container*/
   /* maintenance change/inquiry screen.*/
   /* Processing sequence is as follows:*/

   /* 1) If request for data is yes;*/
      /* - Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) If change map is being displayed.*/
      /* - Reset highlighted fields to normal intensity.*/
      /* - Verify the data that was entered.*/
   /* 6) If no errors are found.*/
      /* - Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWSWR == "Y") /* If request for data is yes*/
    TS0Y410(); /* Obtain the data for display*/
  end

  TS0Y420(); /* Format and display the map*/

  TS0Y430(); /* Check attention identifier*/

  if (TS0YW01.TS0YWMAP == "4 ") /* If change map is indicated*/
    TS0Y440(); /* Reset fields to normal intensity*/
    TS0Y450(); /* Verify the entered data*/
  end

  if (TS0YW01.TS0YWPSW == "N") /* If no errors have occurred*/
    TS0Y460(); /* Process valid input request*/
  end


end // end TS0Y400

// Obtain the data to display
Function TS0Y410()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Select the row from DTRANS.VCNTNR01 to obtain the data*/
      /* for display on the container maintenance screen.*/

      /* Indicate that the request for data was completed.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
          /* Select container header row*/
   /* ------------------------------------------------------------*/
  TSHREC.TSFSHPID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  TSHREC.TSHNKCN = TS0YW01.TSHNKCN[TS0YWIXA];
   /* MOVE TS0YW01.TSHCNTNR(TS0YWIXA) TO TSHREC.TSHCNTNR;*/

  call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
    TS0YW01.TS0YWSWR = "N"; /* set request for data to no*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      converseLib.validationFailed(69); /* cpl deleted by another application*/
      TS0YM004.XXXPRCNM = "TS0Y410";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y410"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM004.XXXPRCNM = "TS0Y410"; /* Process name*/

    end
  end


end // end TS0Y410

// Format and display the map
Function TS0Y420()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) Format the map heading.*/
   /* 2) If no error to display, format the selected data.*/
   /* 3) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWPSW == "N") /* no errors*/
    set TS0YM004 initial; /* set map clear*/

    TS0YM004.TSFSHPID = TSWREC.TSFSHPID;
    TS0YM004.TSFBOL = TSWREC.TSFBOL;
    TS0YM004.TSHCNTNR = TS0YW01.TSHCNTNR[TS0YWIXA];
    TS0YM004.TSACARCD = TSWREC.TSACARCD;
    TS0YM004.TS5CRAFT = TSWREC.TS5CRAFT;
    TS0YM004.TSFSHPNB = TSWREC.TSFSHPNB;
    TS0YM004.TSEORIG = TSWREC.TSEORIG;
    TS0YM004.TSEDEST = TSWREC.TSEDEST;
    TS0YM004.XWHCD = TSWREC.XWHCD;

    if (TS0YW01.TS0YWSWR == "N") /* if data was found to display*/
      TS0Y421(); /* format the selected data*/
    end

  end

  if (TS0YW01.TS0YWMAP == "4 ") /* if maintenance map is indicated*/
    TS0YM004.TS0YMHDG = "MAINTENANCE";
    if (TS0YW01.TS0YWPSW == "N") /* no errors*/
      set TS0YM004.TSHCNTNR cursor; /* set cursor*/
    end
    if (COMMAREA.CACLVL[1] == "N" /* If not allowed to receive cntnr*/
     || TSHREC.TSHSTAT == "TN")   /* or tentative*/
      set TS0YM004.TSHCNTNR protect; /* protect all fields*/
      set TS0YM004.TSHSTAT protect;
      set TS0YM004.TS-CNTNR-LOAD-IND protect;
      if (TS0YW01.TS0YWPSW == "N") /* no errors*/
        set TS0YM004.YCNCD cursor; /* set cursor*/
      end
    end
  else
    if (TS0YW01.TS0YWMAP == "4A") /* if inquiry map is indicated*/
      TS0YM004.TS0YMHDG = "INQUIRY";
      set TS0YM004.TSHCNTNR protect; /* protect all fields*/
      set TS0YM004.YCNCD protect;
      set TS0YM004.TSHSEAL protect;
      set TS0YM004.TSHTKG protect;
      set TS0YM004.TSHTCBM protect;
      set TS0YM004.TSHSTAT protect;
      set TS0YM004.TS-CNTNR-LOAD-IND protect;
      set TS0YM004.XXXPRCNM cursor; /* set cursor*/
    end
  end

  if (TS0YM004.XWHCD == "51")
    set TS0YM004.TS0YM-SUB-PRT initialAttributes;
  else
    set TS0YM004.TS0YM-SUB-PRT skip, invisible;
  end

  /* IF EZEMNO GT 0;                  /* message to display*/
  /* SET TS0YM004 ALARM;            /* indicate sound alarm*/
  /* END;*/

  TS0YM004.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/

  converse TS0YM004 ;

  TS0YW01.TS0YWPSW = "N"; /* reset error switch*/

  TS0Y422(); /* Check for ? inquiry by user*/


end // end TS0Y420

// Format the selected data
Function TS0Y421()
   /* ------------------------------------------------------------*/

                 /* FORMAT THE SELECTED DATA*/

   /* 1) Format the selected data on the page.*/
   /* 2) Select all the associated descriptions for the map.*/
      /* - status*/
      /* - container type code*/

   /* ------------------------------------------------------------*/

  TS0YM004.TSHCNTNR = TSHREC.TSHCNTNR; /* move to screen and save*/
  TS0YW01.TS0YWCTR = TSHREC.TSHCNTNR;
  TS0YM004.TSHSTAT = TSHREC.TSHSTAT; /* move to screen and save*/
  TS0YW01.TSHSTAT = TSHREC.TSHSTAT;
  TS0YM004.YCNCD = TSHREC.YCNCD;
  TS0YW01.YCNCD = TSHREC.YCNCD;
  TS0YM004.TSHSEAL = TSHREC.TSHSEAL;
  TS0YW01.TSHSEAL = TSHREC.TSHSEAL;
  TS0YM004.TS-CNTNR-LOAD-IND = TSHREC.TS-CNTNR-LOAD-IND;
  TS0YW01.TS-CNTNR-LOAD-IND = TSHREC.TS-CNTNR-LOAD-IND;
  TS0YM004.TSHTCBM = TSHREC.TSHTCBM;
  TS0YW01.TSHTCBM = TSHREC.TSHTCBM;
  TS0YM004.TSHTKG = TSHREC.TSHTKG;
  TS0YW01.TSHTKG = TSHREC.TSHTKG;
  TS0YM004.XXX-USER-ID = TSHREC.XXX-USER-ID;
  TS0YW01.TS0YWCZC = TSHREC.ZZZCHGCT; /* save change count*/

   /* ------------------------------------------------------------*/
        /* Select the status description*/
   /* ------------------------------------------------------------*/
  if (TSHREC.TSHSTAT == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSHREC.TSHSTAT in YSSTBL.YSSCD)
      TS0YM004.TS0YMSDS = YSSTBL.YSSDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
        /* Container type code description*/
   /* ------------------------------------------------------------*/
  if (TSHREC.YCNCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSHREC.YCNCD in YCNTBL.YCNCD)
      TS0YM004.YCNDESC = YCNTBL.YCNDESC[sysVar.arrayIndex];
    end
  end


end // end TS0Y421

// Check for ? inquiry by user
Function TS0Y422()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0YM004.YCNCD == "?") /* if any ? entered*/

    if (TS0YM004.YCNCD == "?") /* if ? in cntnr type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              CONTAINER TYPE  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYCN01(); /* perform cntnr type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the cntnr      **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0YM004.YCNCD = YCNTBL.YCNCD[XX0XWPIX]; /* move code*/
        TS0YM004.YCNDESC = YCNTBL.YCNDESC[XX0XWPIX]; /* move desc*/
      else
        TS0YM004.YCNCD = " "; /* clear fields*/
        TS0YM004.YCNDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0YW01.TS0YWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0Y422

// Check attention identifier
Function TS0Y430()
   /* ------------------------------------------------------------*/

         /* CHECK THE ATTENTION IDENTIFIER*/

   /* 1) Check attention identifier used to invoke transaction.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0YM004 initial; /* Clear the map fields*/
    TS0YW01.TS0YWSWR = "Y"; /* Set request for data = n*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* save key*/
    TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
    TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
    TS0YW01.TS0YWMAP = "1 "; /* go to browse screen*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0YM004.XWHCD == "51")
    if (converseVar.eventKey is pf4) /* Submit print job*/
      COMMAREA.CATOAP = "SW09"; /* TO application*/
      XSEXIT(); /* Transfer to another application*/
    end
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
    TS0YM004.XXXPRCNM = "TS0Y430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

end // end TS0Y430

// Reset highlighted fields
Function TS0Y440()
   /* ------------------------------------------------------------*/

                 /* RESET HIGHLIGHTED FIELDS*/

     /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0YM004.TSHCNTNR initialAttributes; /* Reset all fields to normal*/
  set TS0YM004.YCNCD initialAttributes; /* intensity*/
  set TS0YM004.TSHSEAL initialAttributes;
  set TS0YM004.TSHTKG initialAttributes;
  set TS0YM004.TSHTCBM initialAttributes;
  set TS0YM004.TSHSTAT initialAttributes;
  set TS0YM004.TS-CNTNR-LOAD-IND initialAttributes;

end // end TS0Y440

// Verify the entered data
Function TS0Y450()
   /* ------------------------------------------------------------*/

                 /* VERIFY THE ENTERED DATA*/

     /* Edits;*/
        /* 1) kilos*/
        /* 2) cubic meters*/
        /* 3) container type*/
        /* 4) check for duplicate container number*/

   /* ------------------------------------------------------------*/

  if (TS0YM004.YCNCD != " ") /* if container type is entered*/

    if (TS0YM004.TSHTCBM == 0) /* if cubic meters not entered*/
      converseLib.validationFailed(119); /* must enter at least one*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
      TS0YM004.XXXPRCNM = "TS0Y450"; /* process name*/
      set TS0YM004.TSHTCBM cursor, modified, bold;
    end

    if (TS0YM004.TSHTKG < 0) /* if kilos lt 0*/
      converseLib.validationFailed(76); /* must be greater than zero*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
      TS0YM004.XXXPRCNM = "TS0Y450"; /* process name*/
      set TS0YM004.TSHTKG modified, bold;
    end

    if (TS0YM004.TSHTCBM < 0) /* if cubic meters lt 0*/
      converseLib.validationFailed(76); /* must be greater than zero*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
      TS0YM004.XXXPRCNM = "TS0Y450"; /* process name*/
      set TS0YM004.TSHTCBM modified, bold;
    end

    /* **************************************/
             /* container load indicator*/
    /* **************************************/

    if (TS0YM004.TS-CNTNR-LOAD-IND != " "
     && TS0YM004.TS-CNTNR-LOAD-IND != "F"
     && TS0YM004.TS-CNTNR-LOAD-IND != "C"
     && TS0YM004.TS-CNTNR-LOAD-IND != "S")
      converseLib.validationFailed(379); /**/
      TS0YW01.TS0YWPSW = "Y"; /**/
      TS0YM004.XXXPRCNM = "TS0Y450"; /**/
      set TS0YM004.TS-CNTNR-LOAD-IND cursor, modified, bold;
    end

    /* **************************************/
             /* container type*/
    /* **************************************/

    if (TS0YM004.YCNCD in YCNTBL.YCNCD /* Check valid container*/
     && YCNTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/
      TS0YM004.YCNDESC = YCNTBL.YCNDESC[sysVar.arrayIndex]; /* move descr*/
    else
      converseLib.validationFailed(120); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM004.YCNDESC = " "; /* move descr*/
      TS0YM004.XXXPRCNM = "TS0Y450"; /* Process name*/
      set TS0YM004.YCNCD cursor, modified, bold;
    end

  else
    if (TS0YW01.YMTCD == "VL") /* If mode is vessel*/
      converseLib.validationFailed(120); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM004.YCNDESC = " "; /* move descr*/
      TS0YM004.XXXPRCNM = "TS0Y450"; /* Process name*/
      set TS0YM004.YCNCD cursor, modified, bold;
    end
  end

   /* ************************************/
        /* container id*/
   /* ************************************/

  if (TS0YM004.TSHCNTNR == " " /* if container not entered*/
   && TSHREC.TSHSTAT != "TN")  /* and not a tentative shipment*/
    converseLib.validationFailed(121); /* Display error message*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
    TS0YM004.XXXPRCNM = "TS0Y450"; /* Process name*/
    set TS0YM004.TSHCNTNR cursor, modified, bold;
  else
    TS0Y451(); /* select the container*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if container was found*/
     && TSHREC.TSHCNTNR != TS0YW01.TS0YWCTR) /* and not same*/
      converseLib.validationFailed(122); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM004.XXXPRCNM = "TS0Y450"; /* Process name*/
      set TS0YM004.TSHCNTNR cursor, modified, bold;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* or more than 1 row found*/
      converseLib.validationFailed(122); /* Display error message*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM004.XXXPRCNM = "TS0Y450"; /* Process name*/
      set TS0YM004.TSHCNTNR cursor, modified, bold;
    end
  end


end // end TS0Y450

// Select duplicate container
Function TS0Y451()
   /* ------------------------------------------------------------*/

                 /* SELECT CONTAINER ID*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* clear record*/

  TSHREC.TSFSHPID = TSWREC.TSFSHPID; /* move key*/
  TSHREC.TSHCNTNR = TS0YM004.TSHCNTNR;

  call "IO2590" ("S ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0   /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100 /* handled in previous process*/
   && SQLCA.VAGen_SQLCODE != -811) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y451"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate Problem*/
    TS0YM004.XXXPRCNM = "TS0Y451"; /* Process name*/
  end


end // end TS0Y451

// Process valid input requests
Function TS0Y460()
   /* ------------------------------------------------------------*/

                /* PROCESS VALID INPUT REQUESTS*/

      /* 1) If map is equal to '4 ' ( maintenance )*/
         /* and any data changed;*/
         /* a. select the container and compare change count;*/
         /* b. if change counts match, then*/
            /* - Update the cntnr row in the data base.*/
         /* b. Else*/
            /* - Reload screen and give error.*/
      /* 2) If ENTER was pressed*/
         /* a. return to browse screen.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWERR = "N"; /* initialize screen reload error flag*/

   /* ------------------------------------------------------------*/
       /* If the maintenance map is indicated*/
   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWMAP == "4 ") /* if maintenance map indicated*/
    if (TS0YM004.TSHSTAT != TS0YW01.TSHSTAT) /* if status changed*/
      if (TS0YM004.TSHSTAT == "IT"
       || TS0YM004.TSHSTAT == "CC"
       || TS0YM004.TSHSTAT == "RC")

        TS0YW01.TSHSTAT = TS0YM004.TSHSTAT; /* save new status*/
        TS0YW01.TS0YWPSW = "Y"; /* set error*/
        converseLib.validationFailed(290); /* Indicate confirmation step*/
        TS0YM004.XXXPRCNM = "TS0Y460"; /* process name*/
        if (TS0YM004.TSHSTAT in YSSTBL.YSSCD)
          TS0YM004.TS0YMSDS = YSSTBL.YSSDESC[sysVar.arrayIndex];
        end
      else
        if (TS0YM004.XWHCD == "51" && 
        (TS0YM004.TSHSTAT == "OI"
         || TS0YM004.TSHSTAT == "NK"
         || TS0YM004.TSHSTAT == "RP"))
          TS0YW01.TSHSTAT = TS0YM004.TSHSTAT; /* save new status*/
          TS0YW01.TS0YWPSW = "Y"; /* set error*/
          converseLib.validationFailed(290); /* Indicate confirmation step*/
          TS0YM004.XXXPRCNM = "TS0Y460"; /* process name*/
          if (TS0YM004.TSHSTAT in YSSTBL.YSSCD)
            TS0YM004.TS0YMSDS = YSSTBL.YSSDESC[sysVar.arrayIndex];
          end
        else
          TS0YW01.TS0YWERR = "Y"; /* indicate problem*/
          TS0YW01.TS0YWPSW = "Y"; /* set error*/
          if (TS0YM004.XWHCD == "51")
            converseLib.validationFailed(406); /* status invalid*/
          else
            converseLib.validationFailed(318); /* status invalid*/
          end
        end
        TS0YM004.XXXPRCNM = "TS0Y460"; /* process name*/
        set TS0YM004.TSHSTAT cursor, bold; /* highlight field*/
      end
    else
      if (TS0YM004.TSHCNTNR == TS0YW01.TS0YWCTR /* if no fields changed*/
       && TS0YM004.YCNCD == TS0YW01.YCNCD       
       && TS0YM004.TSHSEAL == TS0YW01.TSHSEAL   
       && TS0YM004.TSHTKG == TS0YW01.TSHTKG     
       && TS0YM004.TSHTCBM == TS0YW01.TSHTCBM   
       && TS0YM004.TSHSTAT == TSHREC.TSHSTAT    
       && TS0YM004.TS-CNTNR-LOAD-IND == TS0YW01.TS-CNTNR-LOAD-IND)
         /* continue on*/
      else
        TS0Y461(); /* select the container*/
        if (SQLCA.VAGen_SQLCODE == 0 /* if selection ok*/
         && TSHREC.ZZZCHGCT == TS0YW01.TS0YWCZC) /* and change cts same*/
          if (TSHREC.TSHSTAT != "RC" /* if status changed to 'rc'*/
           && TS0YM004.TSHSTAT == "RC")
            TS0Y463(); /* shipment statuses update*/
            if (TS0YW01.TS0YWPSW == "Y") /* If problem occured*/
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset any updates*/
            else
              TS0YW01.TSHCNTNR[TS0YWIXA] = TS0YM004.TSHCNTNR;
            end
          else
            TS0Y462(); /* update the container*/
            if (TS0YW01.TS0YWPSW == "Y") /* If problem occured*/
              VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
              VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
              sysLib.rollback();
              VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
               /* Reset any updates*/
            else
              TS0YW01.TSHCNTNR[TS0YWIXA] = TS0YM004.TSHCNTNR;
            end
          end
        else
          TS0YW01.TS0YWERR = "Y"; /* indicate problem*/
          TS0YW01.TS0YWSWR = "Y"; /* set request for data*/
          converseLib.validationFailed(12); /* data updated by someone else*/
          TS0YM004.XXXPRCNM = "TS0Y460"; /* process name*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
     /* Check to see if transfer to map 1 is valid*/
       /* or there are more cplhd to maintain/inq/delete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* If enter has been pressed*/
    if (TS0YW01.TS0YWERR == "N" /* if no errors causing screen reload*/
     && TS0YW01.TS0YWPSW == "N") /* and no update errors*/
      TS0YW01.TS0YWIXW = TS0YW01.TS0YWIXA; /* save array index*/
      TS0YW01.TS0YWIXA = TS0YW01.TS0YWIXA + 1; /* incr array counter*/
      if (TS0YW01.TS0YWIXA <= TS0YW01.TS0YWMSL /* if le max*/
       && TSWREC.TSW2SHP[TS0YWIXA] > 0)        /* if more data to view*/
        TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXA; /* set start index*/
        while (TS0YW01.TS0YWIXM <= TS0YW01.TS0YWMSL /* while le max*/
         && TSWREC.TSW2SHP[TS0YWIXM] > 0) /* and more date to view*/
          if (TS0YW01.TSHCNTNR[TS0YWIXM] == TS0YW01.TSHCNTNR[TS0YWIXW])
            TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* increment index*/
            if (TS0YW01.TS0YWIXM > TS0YW01.TS0YWMSL) /* if GT max*/
              if (TS0YW01.TS0YWMAP == "4A") /* if maint map indicated*/
                TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* key*/
                TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
                TS0YW01.TS0YWIXA = 1; /* reset array index*/
                TS0YW01.TS0YWMAP = "2A"; /* set map to 1*/
                TS0YW01.TS0YWSWR = "Y"; /* set request for data*/
              else
                TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* key*/
                TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
                TS0YW01.TS0YWMAP = "1 "; /* set map to 1*/
                TS0YW01.TS0YWSWR = "Y"; /* set request for data*/
              end
            end
          else
            TS0YW01.TS0YWIXA = TS0YW01.TS0YWIXM; /* save array index*/
            TS0YW01.TS0YWIXM = TS0YW01.TS0YWMSL + 1; /* end loop*/
            TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
          end
        end
        if (TS0YW01.TS0YWIXM <= TS0YW01.TS0YWMSL) /* if le max*/
          if (TSWREC.TSW2SHP[TS0YWIXM] <= 0) /* if no more data to view*/
            TS0YW01.TS0YWIXA = TS0YW01.TS0YWIXM - 1; /* decr array counter*/
            if (TS0YW01.TS0YWMAP == "4A") /* if maintenance map indicated*/
              TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* save key*/
              TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
              TS0YW01.TS0YWIXA = 1; /* reset array index*/
              TS0YW01.TS0YWMAP = "2A"; /* set map to 1*/
              TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
            else
              TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* save key*/
              TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
              TS0YW01.TS0YWMAP = "1 "; /* set map to 1*/
              TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
            end
          end
        end
      else
        TS0YW01.TS0YWIXA = TS0YW01.TS0YWIXA - 1; /* decr array counter*/
        if (TS0YW01.TS0YWMAP == "4A") /* if maintenance map indicated*/
          TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* save key*/
          TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
          TS0YW01.TS0YWIXA = 1; /* reset array index*/
          TS0YW01.TS0YWMAP = "2A"; /* set map to 1*/
          TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
        else
          TS0YW01.TS0YWSCN = TS0YW01.TSHCNTNR[TS0YWIXA]; /* save key*/
          TS0YW01.TS0YWSPO = TS0YW01.TS0YWAPO[TS0YWIXA];
          TS0YW01.TS0YWMAP = "1 "; /* set map to 1*/
          TS0YW01.TS0YWSWR = "Y"; /* set request for data to yes*/
        end
      end
    end
  end


end // end TS0Y460

// Select from DTRANS.VCNTNR01
Function TS0Y461()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Select the row from DTRANS.VCNTNR01 to obtain the data*/
      /* for display on the container maintenance screen.*/

      /* Indicate that the request for data was completed.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
          /* Select container header row*/
   /* ------------------------------------------------------------*/
  TSHREC.TSFSHPID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  TSHREC.TSHNKCN = TS0YW01.TSHNKCN[TS0YWIXA];
   /* MOVE TS0YW01.TSHCNTNR(TS0YWIXA) TO TSHREC.TSHCNTNR;*/

  call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
      converseLib.validationFailed(69); /* cpl deleted by another application*/
      TS0YW01.TS0YWPSW = "Y"; /* indicate error*/
      TS0YM004.XXXPRCNM = "TS0Y461";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Y461"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM004.XXXPRCNM = "TS0Y461"; /* Process name*/

    end
  end


end // end TS0Y461

// Update row in DTRANS.VCNTNR01
Function TS0Y462()
   /* ------------------------------------------------------------*/

                  /* UPDATE THE CONTAINER*/

   /* 1) Update the row in DTRANS.VCNTNR01 to obtain the data*/
      /* for display on the container maintenance screen.*/

      /* Indicate that the request for data was completed.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
          /* Update container header row*/
   /* ------------------------------------------------------------*/
  TSHREC.TSHCNTNR = TS0YM004.TSHCNTNR; /* move in keys*/
  TSHREC.YCNCD = TS0YM004.YCNCD;
  TSHREC.TSHSEAL = TS0YM004.TSHSEAL;
  TSHREC.TSHTKG = TS0YM004.TSHTKG;
  TSHREC.TSHTCBM = TS0YM004.TSHTCBM;
  TSHREC.TSHSTAT = TS0YM004.TSHSTAT;
  TSHREC.TS-CNTNR-LOAD-IND = TS0YM004.TS-CNTNR-LOAD-IND;

   /* ****************************************************/
   /* move in all other fields to tshrec*/
   /* ****************************************************/

  if (TSHREC.TSHSTAT == "ER") /* If in-error*/
    TSHREC.TSHSTAT = "IT"; /* Set back to in-transit*/
  end
  if (TSHREC.TSHSTAT == "CR") /* If custom-clear in-error*/
    TSHREC.TSHSTAT = "CC"; /* Set back to custom-clear*/
  end

  TSHREC.XRECD = "  "; /* Set back to blanks*/


   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  call "IO2590" ("U ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y461"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate error*/
    TS0YM004.XXXPRCNM = "TS0Y461"; /* Process name*/

  end

end // end TS0Y462

// Update shipment statuses
Function TS0Y463()
   /* ------------------------------------------------------------*/

             /* UPDATE SHIPMENT STATUSES TO "RC"*/


   /* 1) Update the container status.*/
   /* 2) Select all packing lists in this container and determine*/
      /* whether they need updating to 'rc'.*/
   /* 3) Select all packing lists for this shipment to determine*/
      /* whether the entire shipment needs to be updated to 'rc'.*/

   /* ------------------------------------------------------------*/

  TS0YS55(); /* Update the container*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If update successful*/

    /* ------------------------------------------------------*/
      /* Check packing lists for status updates*/
    /* ------------------------------------------------------*/

    TS0YS57(); /* Select set of p/l's for container*/
    while (SQLCA.VAGen_SQLCODE == 0) /* Until end of set*/
      TS0YS59(); /* Fetch packing list*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If ok*/
        TS0YW01.TS0YWARF = "Y"; /* Indicate all rcvd*/

        if (VCPLHD04.TS-NIKE-CNTNR-NBR1 > 0) /* If there is a cntnr*/
          set TSHREC empty;
          TSHREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID;
          TSHREC.TSHNKCN = VCPLHD04.TS-NIKE-CNTNR-NBR1;
          TS0YS61(); /* Select the cntnr*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSHREC.TSHSTAT != "RC") /* IF NOT RECEIVED*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all not rcvd*/
            end
          end
        end

        if (VCPLHD04.TS-NIKE-CNTNR-NBR2 > 0) /* If there is a cntnr*/
          set TSHREC empty;
          TSHREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID;
          TSHREC.TSHNKCN = VCPLHD04.TS-NIKE-CNTNR-NBR2;
          TS0YS61(); /* Select the cntnr*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSHREC.TSHSTAT != "RC") /* IF NOT RECEIVED*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all not rcvd*/
            end
          end
        end

        if (VCPLHD04.TS-NIKE-CNTNR-NBR3 > 0) /* If there is a cntnr*/
          set TSHREC empty;
          TSHREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID;
          TSHREC.TSHNKCN = VCPLHD04.TS-NIKE-CNTNR-NBR3;
          TS0YS61(); /* Select the cntnr*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSHREC.TSHSTAT != "RC") /* IF NOT RECEIVED*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all not rcvd*/
            end
          end
        end

        if (VCPLHD04.TS-NIKE-CNTNR-NBR4 > 0) /* If there is a cntnr*/
          set TSHREC empty;
          TSHREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID;
          TSHREC.TSHNKCN = VCPLHD04.TS-NIKE-CNTNR-NBR4;
          TS0YS61(); /* Select the cntnr*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSHREC.TSHSTAT != "RC") /* IF NOT RECEIVED*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all not rcvd*/
            end
          end
        end

        if (VCPLHD04.TS-NIKE-CNTNR-NBR5 > 0) /* If there is a cntnr*/
          set TSHREC empty;
          TSHREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID;
          TSHREC.TSHNKCN = VCPLHD04.TS-NIKE-CNTNR-NBR5;
          TS0YS61(); /* Select the cntnr*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSHREC.TSHSTAT != "RC") /* IF NOT RECEIVED*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all not rcvd*/
            end
          end
        end

        if (VCPLHD04.TS-NIKE-CNTNR-NBR6 > 0) /* If there is a cntnr*/
          set TSHREC empty;
          TSHREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID;
          TSHREC.TSHNKCN = VCPLHD04.TS-NIKE-CNTNR-NBR6;
          TS0YS61(); /* Select the cntnr*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSHREC.TSHSTAT != "RC") /* IF NOT RECEIVED*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all not rcvd*/
            end
          end
        end

        if (VCPLHD04.TS-NIKE-CNTNR-NBR7 > 0) /* If there is a cntnr*/
          set TSHREC empty;
          TSHREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID;
          TSHREC.TSHNKCN = VCPLHD04.TS-NIKE-CNTNR-NBR7;
          TS0YS61(); /* Select the cntnr*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSHREC.TSHSTAT != "RC") /* IF NOT RECEIVED*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all not rcvd*/
            end
          end
        end

        if (VCPLHD04.TS-NIKE-CNTNR-NBR8 > 0) /* If there is a cntnr*/
          set TSHREC empty;
          TSHREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID;
          TSHREC.TSHNKCN = VCPLHD04.TS-NIKE-CNTNR-NBR8;
          TS0YS61(); /* Select the cntnr*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSHREC.TSHSTAT != "RC") /* IF NOT RECEIVED*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all not rcvd*/
            end
          end
        end

        if (TS0YW01.TS0YWARF == "Y") /* If all cntnrs received*/
          TS0YS63(); /* Update the packing list to received*/
        end

      end
    end
    TS0YS65(); /* close the set of Packing lists*/

    /* ------------------------------------------------------*/
     /* Select the set of P/L's for the shipment to determine*/
     /* whether to update shipment status.*/
    /* ------------------------------------------------------*/
    TS0YS67(); /* Select the ship header*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      TS0YS69(); /* Select the set of packing lists*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If ok*/
        TS0YW01.TS0YWARF = "Y"; /* Indicate all rcvd*/
        while (SQLCA.VAGen_SQLCODE == 0 /* Until end of set*/
         && TS0YW01.TS0YWARF == "Y")
          TS0YS71(); /* Fetch packing list*/
          if (SQLCA.VAGen_SQLCODE == 0) /* If ok*/
            if (VCPLHD04.TS-CPL-STAT-CD != "RC") /* If not received*/
              TS0YW01.TS0YWARF = "N"; /* Indicate all rcvd*/
            end
          end
        end
      end
      TS0YS73(); /* close the set of Packing lists*/
    end

    if (TS0YW01.TS0YWARF == "Y") /* If all cntnrs received*/
      TS0YS75(); /* Update the ship header*/
    end

  end



end // end TS0Y463

// Select from DTRANS.VTSLOC01
Function TS0Y470()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTSLOC01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty;
  TSCREC.TSCLOCCD = TSFREC.TSEDEST;

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Y470"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM001.XXXPRCNM = "TS0Y470"; /* Process name*/
  end


end // end TS0Y470

// Select shipment header row
Function TS0YS01()
   /* ------------------------------------------------------------*/

                /* SELECT THE SHIPMENT HEADER*/

         /* 1) Select the shipment header.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S "; /* move selection to pass record*/
  call "IO2540" (TSNREC, SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If valid return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS01"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW ";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/
    TS0YM001.XXXPRCNM = "TS0YS01"; /* Process name*/

  end


end // end TS0YS01

// Obtain hard/soft error values
Function TS0YS02()
   /* ------------------------------------------------------------*/

           /* Obtain tolerances for GPC Styles*/

   /* ------------------------------------------------------------*/
  set TSXREC empty; /* clear pass record*/
  TSXREC.XGPCD = TSWREC.XGPCD;

  call "IO5020" ("S ", SQLCA, TSXREC) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS02"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTOL01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0YM001.XXXPRCNM = "TS0YS02"; /* Process name*/

  end



  TS0YW01.TS0YWHEQ = TSXREC.TSXSTHQT;
  TS0YW01.TS0YWHEP = TSXREC.TSXSTHPT;
  TS0YW01.TS0YWSEQ = TSXREC.TSXSTSQT;
  TS0YW01.TS0YWSEP = TSXREC.TSXSTSPT;


   /* ** If any hard error values are zero, then move high-values*/
   /* ** to them.*/

  if (TS0YW01.TS0YWHEQ == 0
   && TS0YW01.TS0YWHEP == 0)
    TS0YW01.TS0YWHEQ = 999999999;
    TS0YW01.TS0YWHEP = 999.99;
  end


end // end TS0YS02

// Get po id and order type
Function TS0YS03()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = VCPLHD04.PC-PO-NBR; /* P.O. Number*/
  PCYREC.PCYFUNC = "S "; /* Select alternate*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0YS03"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0YM001.XXXPRCNM = "TS0YS03"; /* Process name*/
  TS0YM005.XXXPRCNM = "TS0YS03"; /* Process name*/
  TS0YW01.TS0YWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0YS03

// Read temporary storage page
Function TS0YS05()
   /* ------------------------------------------------------------*/

                /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/

   /* ------------------------------------------------------------*/

  TS0YW02.XXXTSLEN = TS0YW01.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0Y"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0YW01.TS0YWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0YW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS05"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    TS0YM001.XXXPRCNM = "TS0YS05"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear display before next map*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem map*/
  end


end // end TS0YS05

// Locate change save key
Function TS0YS07()
   /* ------------------------------------------------------------*/

                 /* LOCATE THE SAVE KEY*/

    /* 1) Locate the page in which the key is less than or*/
       /* equal to the Save Key.*/
   /* ------------------------------------------------------------*/

  if (TS0YW01.TS0YWSCN == " ") /* No location code entered*/
    TS0YW01.TS0YWCFL = "Y"; /* Indicate key found*/
  else

    TS0YW01.TS0YWIXM = 1; /* Initialize index*/
    while (TS0YW01.TS0YWIXM <= 14) /* Until key is found*/
      if (TS0YW02.TSHCNTNR[TS0YWIXM] == " " /* no more lines*/
       || TS0YW02.TSHCNTNR[TS0YWIXM] > TS0YW01.TS0YWSCN)
        if (TS0YW01.TS0YWIXM <= 1) /* Key first or not on page*/
          if (TS0YW01.TS0YWTSP == 1) /* first page*/
            TS0YW01.TS0YWIXM = 1; /* Reset index*/
          else
            TS0YW01.TS0YWIXM = 14; /* Index to last entry*/
            TS0YW01.TS0YWTSP = TS0YW01.TS0YWTSP - 1; /* decrement page*/
          end
        else
          TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM - 1; /* decrement index*/
        end
        set TS0YM001.TS0YMSEL[TS0YWIXM] cursor; /* Initial cursor*/
        TS0YW01.TS0YWCFL = "Y"; /* Indicate page was found*/
        TS0YW01.TS0YWSCN = " "; /* Reset starting carrier*/
        TS0YW01.TS0YWSPO = 0; /* Reset starting po*/
        return; /* Return to previous process*/
      else
        if (TS0YW02.TSHCNTNR[TS0YWIXM] == TS0YW01.TS0YWSCN)
          TS0YW01.TS0YWWFL = "N"; /* set working flag to no*/
          while (TS0YW01.TS0YWIXM <= 14 /* Until key is found*/
           && TS0YW02.TSHCNTNR[TS0YWIXM] == TS0YW01.TS0YWSCN)
            if (TS0YW01.TS0YWIXM < 14) /* if lt last line*/
              TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* Increment index*/
            else
              TS0YW01.TS0YWWFL = "Y"; /* indicate last line reached*/
            end
            if (TS0YW02.TSHCNTNR[TS0YWIXM] > TS0YW01.TS0YWSCN
             || TS0YW02.TSHCNTNR[TS0YWIXM] == " ")
              TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM - 1; /* decrement index*/
              set TS0YM001.TS0YMSEL[TS0YWIXM] cursor; /* Initial cursor*/
              TS0YW01.TS0YWCFL = "Y"; /* Indicate page was found*/
              TS0YW01.TS0YWSCN = " "; /* Reset starting carrier*/
              TS0YW01.TS0YWSPO = 0; /* Reset starting po*/
              return; /* Return to previous process*/
            else
              if (TS0YW01.TS0YWWFL == "N") /* as long as not last line*/
                TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM - 1; /* decrement index*/
              end
              if (TS0YW02.PC3PONBR[TS0YWIXM] >= TS0YW01.TS0YWSPO)
                if (TS0YW02.PC3PONBR[TS0YWIXM] > TS0YW01.TS0YWSPO)
                  TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM - 1; /* decr index*/
                end
                if (TS0YW01.TS0YWIXM <= 1) /* Key first or not on page*/
                  if (TS0YW01.TS0YWTSP == 1) /* first page*/
                    TS0YW01.TS0YWIXM = 1; /* Reset index*/
                  else
                    TS0YW01.TS0YWIXM = 14; /* Index to last entry*/
                    TS0YW01.TS0YWTSP = TS0YW01.TS0YWTSP - 1; /* decr page*/
                  end
                end
                set TS0YM001.TS0YMSEL[TS0YWIXM] cursor; /* Initial cursor*/
                TS0YW01.TS0YWCFL = "Y"; /* Indicate page was found*/
                TS0YW01.TS0YWSCN = " "; /* Reset starting carrier*/
                TS0YW01.TS0YWSPO = 0; /* Reset starting po*/
                return; /* Return to previous process*/
              end
              TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* increment index*/
            end
          end
        end
      end
      TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* Increment index*/
    end

    if (TS0YW01.TS0YWTSP == TS0YW01.TA5TSQIX) /* Last page*/
      TS0YW01.TS0YWIXM = 14; /* Set index to last entry*/
      set TS0YM001.TS0YMSEL[TS0YWIXM] cursor; /* Initial cursor*/
      TS0YW01.TS0YWCFL = "Y"; /* Indicate page was found*/
      TS0YW01.TS0YWSCN = " "; /* Reset starting carrier*/
      TS0YW01.TS0YWSPO = 0; /* Reset starting po*/
    else
      TS0YW01.TS0YWTSP = TS0YW01.TS0YWTSP + 1; /* Increment page*/
    end
  end

   /* **                                                        ***/
   /* ********************** End of TS0YS07 ***********************/
end // end TS0YS07

// Continue repeating suppression
Function TS0YS09()
   /* ------------------------------------------------------------*/
               /* CONTINUE SUPRESSION OF NESTED IF*/

   /* 1) This process is used in order to help maintain better*/
      /* readability in TS0Y121.  The nested IF for the necessary*/
      /* screen suppression is very large, therefore causing poor*/
      /* indentation of lines.  The indentation is still poor*/
      /* within this process but the size is of TS0Y121 is kept*/
      /* at a much more reasonable level.*/

   /* ------------------------------------------------------------*/

  if (TS0YW02.PC4ORTYP[TS0YWIXM] == TS0YW02.PC4ORTYP[TS0YWIXW])
    TS0YM001.PC4ORTYP[TS0YWIXM] = " "; /* move ' ' to ot*/
    if (TS0YW02.PC3PONBR[TS0YWIXM] == TS0YW02.PC3PONBR[TS0YWIXW])
      TS0YM001.PC3PONBR[TS0YWIXM] = 0; /* move 0 to po*/
      TS0YM005.PC3PONBR[TS0YWIXM] = 0; /* move 0 to po*/
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0YS09 ***********************/
end // end TS0YS09

// Select (S ) row       VCRAFT01
Function TS0YS0A()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the craft table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TS5REC.YMTCD = "  "; /* Move spaces to mode code*/

    if (SQLCA.VAGen_SQLCODE != 100) /* handled in previous statement*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        if (TS0YW01.TS0YWMAP == "1") /* If map one*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        else
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0YS0A"; /* Process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      if (TS0YW01.TS0YWMAP == "1") /* If map one*/
        TA1REC.TA1MAP = "TS0YM001"; /* Map name*/
      else
        TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      end
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM001.XXXPRCNM = "TS0YS0A"; /* Process name*/

    end

  end


end // end TS0YS0A

// Move VCPLHD04/TSFREC fields
Function TS0YS11()
   /* ------------------------------------------------------------*/

              /* MOVE VCPLHD04/TSFREC FIELDS TO MAP 2*/

   /* 1) Format the selected data on the page.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
         /* TSFREC fields*/
   /* ------------------------------------------------------------*/
  set TA2REC empty; /* clear the date record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "G"; /* move date type to record*/
  TA2REC.TA2GRGGN = TSFREC.TSFRECPT; /* move date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Check valid date w/routine*/
  if (TA2REC.TA2RTNCD == 0000) /* if return code ok*/
    TS0YM002.TSFRECPT = TA2REC.TA2GRGAN; /* move date to map*/
  end

   /* ------------------------------------------------------------*/
         /* VCPLHD04 fields*/
   /* ------------------------------------------------------------*/
  TS0YW01.TSIDETFL = VCPLHD04.TS-DET-FL; /* save detail flag*/
  TS0YW01.TS0YWCZC = VCPLHD04.ZZ-CHNG-CNT; /* save change count*/
  TS0YW01.PC3PONBR = VCPLHD04.PC-PO-NBR; /* save po*/
  TS0YM002.PC3PONBR = VCPLHD04.PC-PO-NBR; /* move in fields*/
  TS0YM002.PC-ITM-SEQ-NBR = VCPLHD04.PC-ITM-SEQ-NBR;
  TS0YW01.PC-ITM-SEQ-NBR = VCPLHD04.PC-ITM-SEQ-NBR;

  if (VCPLHD04.PC-PO-NBR in TS0YW02.PC3PONBR) /* find the po id fields*/
    TS0YM002.TS0YMPYR = TS0YW02.TS0YMPYR[sysVar.arrayIndex];
    TS0YW01.TS0YWPY = TS0YW02.TS0YMPYR[sysVar.arrayIndex];
    TS0YM002.TS0YMPMO = TS0YW02.TS0YMPMO[sysVar.arrayIndex];
    TS0YW01.TS0YWPM = TS0YW02.TS0YMPMO[sysVar.arrayIndex];
    TS0YM002.TS0YMDMO = TS0YW02.TS0YMDMO[sysVar.arrayIndex];
    TS0YW01.TS0YWDM = TS0YW02.TS0YMDMO[sysVar.arrayIndex];
    TS0YM002.FY1FCTYC = TS0YW02.FY1FCTYC[sysVar.arrayIndex];
    TS0YW01.TS0YWFC = TS0YW02.FY1FCTYC[sysVar.arrayIndex];
    TS0YM002.PC4ORTYP = TS0YW02.PC4ORTYP[sysVar.arrayIndex];
    TS0YW01.PC4ORTYP = TS0YW02.PC4ORTYP[sysVar.arrayIndex];
  end

  TS0YM002.PC2CUXID = VCPLHD04.PC-PRDCU-ID;
  TS0YW01.PC2CUXID = VCPLHD04.PC-PRDCU-ID;
  TS0YM002.SY1STNBR = VCPLHD04.SY-STY-NBR;
  TS0YM002.XDMCD = VCPLHD04.XDM-DIM-CD;
  TS0YW01.XDMCD = VCPLHD04.XDM-DIM-CD;
  TS0YM002.SY2CLRID = VCPLHD04.SY-COLR-CD-ID;
  TS0YW01.SY2CLRID = VCPLHD04.SY-COLR-CD-ID;
  TS0YM002.XPGCD = VCPLHD04.XPG-PKG-TYP-CD;
  TS0YW01.XPGCD = VCPLHD04.XPG-PKG-TYP-CD;
  TS0YM002.XQACD = VCPLHD04.XQA-QUAL-CD;
  TS0YW01.XQACD = VCPLHD04.XQA-QUAL-CD;
  TS0YM002.XOWCD = VCPLHD04.XOW-OWN-GRP-CD;
  TS0YW01.XOWCD = VCPLHD04.XOW-OWN-GRP-CD;
  TS0YM002.PC2INSEG = VCPLHD04.PC-CU-IN-SEG-CD;
  TS0YW01.PC2INSEG = VCPLHD04.PC-CU-IN-SEG-CD;
  TS0YM002.XUMCD = VCPLHD04.XUM-UOM-CD;
  TS0YW01.XUMCD = VCPLHD04.XUM-UOM-CD;
  TS0YM002.TS0YM-CUST-ORD-ID = VCPLHD04.OP-CUST-ORD-ID;
  TS0YW01.OP1CUOID = VCPLHD04.OP-CUST-ORD-ID;
  TS0YM002.TS0YM-NIKE-ORD-ID = VCPLHD04.OP-NIKE-ORD-ID;
  TS0YW01.OP1NORID = VCPLHD04.OP-NIKE-ORD-ID;
  TS0YW01.TS-CRTF-ORIG-ID = VCPLHD04.TS-CRTF-ORIG-ID;
  TS0YM002.TS-CRTF-ORIG-ID = VCPLHD04.TS-CRTF-ORIG-ID;
  TS0YW01.TS-EXPT-LIC-ID = VCPLHD04.TS-EXPT-LIC-ID;
  TS0YM002.TS-EXPT-LIC-ID = VCPLHD04.TS-EXPT-LIC-ID;
  TS0YW01.TS-GEN-PRF-ID = VCPLHD04.TS-GEN-PRF-ID;
  TS0YM002.TS-GEN-PRF-ID = VCPLHD04.TS-GEN-PRF-ID;
  TS0YM002.PC6AIRNB = TS0YW01.PC6AIRNB;

  if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR1)
    TS0YW01.TSICRTQT = VCPLHD04.TS-CPL-TOT-CRTN1;
    TS0YW01.TSISHPQT = VCPLHD04.TS-CPL-QTOT-SHP1;
    TS0YW01.TSIPLTKG = VCPLHD04.TS-CPL-TOT-KG1;
    TS0YW01.TSIPLCBM = VCPLHD04.TS-CPL-TOT-CBM1;
    TS0YM002.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN1;
    TS0YM002.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP1;
    TS0YM002.TS0YMKIL = VCPLHD04.TS-CPL-TOT-KG1;
    TS0YM002.TS0YMCBM = VCPLHD04.TS-CPL-TOT-CBM1;
  else
    if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR2)
      TS0YW01.TSICRTQT = VCPLHD04.TS-CPL-TOT-CRTN2;
      TS0YW01.TSISHPQT = VCPLHD04.TS-CPL-QTOT-SHP2;
      TS0YW01.TSIPLTKG = VCPLHD04.TS-CPL-TOT-KG2;
      TS0YW01.TSIPLCBM = VCPLHD04.TS-CPL-TOT-CBM2;
      TS0YM002.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN2;
      TS0YM002.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP2;
      TS0YM002.TS0YMKIL = VCPLHD04.TS-CPL-TOT-KG2;
      TS0YM002.TS0YMCBM = VCPLHD04.TS-CPL-TOT-CBM2;
    else
      if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR3)
        TS0YW01.TSICRTQT = VCPLHD04.TS-CPL-TOT-CRTN3;
        TS0YW01.TSISHPQT = VCPLHD04.TS-CPL-QTOT-SHP3;
        TS0YW01.TSIPLTKG = VCPLHD04.TS-CPL-TOT-KG3;
        TS0YW01.TSIPLCBM = VCPLHD04.TS-CPL-TOT-CBM3;
        TS0YM002.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN3;
        TS0YM002.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP3;
        TS0YM002.TS0YMKIL = VCPLHD04.TS-CPL-TOT-KG3;
        TS0YM002.TS0YMCBM = VCPLHD04.TS-CPL-TOT-CBM3;
      else
        if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR4)
          TS0YW01.TSICRTQT = VCPLHD04.TS-CPL-TOT-CRTN4;
          TS0YW01.TSISHPQT = VCPLHD04.TS-CPL-QTOT-SHP4;
          TS0YW01.TSIPLTKG = VCPLHD04.TS-CPL-TOT-KG4;
          TS0YW01.TSIPLCBM = VCPLHD04.TS-CPL-TOT-CBM4;
          TS0YM002.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN4;
          TS0YM002.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP4;
          TS0YM002.TS0YMKIL = VCPLHD04.TS-CPL-TOT-KG4;
          TS0YM002.TS0YMCBM = VCPLHD04.TS-CPL-TOT-CBM4;
        else
          if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR5)
            TS0YW01.TSICRTQT = VCPLHD04.TS-CPL-TOT-CRTN5;
            TS0YW01.TSISHPQT = VCPLHD04.TS-CPL-QTOT-SHP5;
            TS0YW01.TSIPLTKG = VCPLHD04.TS-CPL-TOT-KG5;
            TS0YW01.TSIPLCBM = VCPLHD04.TS-CPL-TOT-CBM5;
            TS0YM002.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN5;
            TS0YM002.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP5;
            TS0YM002.TS0YMKIL = VCPLHD04.TS-CPL-TOT-KG5;
            TS0YM002.TS0YMCBM = VCPLHD04.TS-CPL-TOT-CBM5;
          else
            if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR6)
              TS0YW01.TSICRTQT = VCPLHD04.TS-CPL-TOT-CRTN6;
              TS0YW01.TSISHPQT = VCPLHD04.TS-CPL-QTOT-SHP6;
              TS0YW01.TSIPLTKG = VCPLHD04.TS-CPL-TOT-KG6;
              TS0YW01.TSIPLCBM = VCPLHD04.TS-CPL-TOT-CBM6;
              TS0YM002.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN6;
              TS0YM002.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP6;
              TS0YM002.TS0YMKIL = VCPLHD04.TS-CPL-TOT-KG6;
              TS0YM002.TS0YMCBM = VCPLHD04.TS-CPL-TOT-CBM6;
            else
              if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR7)
                TS0YW01.TSICRTQT = VCPLHD04.TS-CPL-TOT-CRTN7;
                TS0YW01.TSISHPQT = VCPLHD04.TS-CPL-QTOT-SHP7;
                TS0YW01.TSIPLTKG = VCPLHD04.TS-CPL-TOT-KG7;
                TS0YW01.TSIPLCBM = VCPLHD04.TS-CPL-TOT-CBM7;
                TS0YM002.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN7;
                TS0YM002.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP7;
                TS0YM002.TS0YMKIL = VCPLHD04.TS-CPL-TOT-KG7;
                TS0YM002.TS0YMCBM = VCPLHD04.TS-CPL-TOT-CBM7;
              else
                if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR8)
                  TS0YW01.TSICRTQT = VCPLHD04.TS-CPL-TOT-CRTN8;
                  TS0YW01.TSISHPQT = VCPLHD04.TS-CPL-QTOT-SHP8;
                  TS0YW01.TSIPLTKG = VCPLHD04.TS-CPL-TOT-KG8;
                  TS0YW01.TSIPLCBM = VCPLHD04.TS-CPL-TOT-CBM8;
                  TS0YM002.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN8;
                  TS0YM002.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP8;
                  TS0YM002.TS0YMKIL = VCPLHD04.TS-CPL-TOT-KG8;
                  TS0YM002.TS0YMCBM = VCPLHD04.TS-CPL-TOT-CBM8;
                end
              end
            end
          end
        end
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0YS11 ***********************/
end // end TS0YS11

// Verify style/color
Function TS0YS12()
   /* ------------------------------------------------------------*/

                 /* VERIFY STYLE/COLOR*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* clear record*/

  PG2REC.XGPCD = TSWREC.XGPCD; /* move keys*/
  PG2REC.SY1STNBR = TS0YM002.SY1STNBR;
  PG2REC.SY2CLRID = TS0YM002.SY2CLRID;
  TS0YW01.TS0YWCLR = TS0YM002.SY2CLRID;
  PG2REC.XDMCD = TS0YM002.XDMCD;

  TA1REC.TA1PGMNM = "TS0YS12"; /* Process name*/
  TA1REC.TA1MAP = "TS0YM002"; /* Map name*/

  XSPG202(); /* Select the style/color*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0YW01.TS0YWPSW = "Y"; /* Indicate Problem*/
    TS0YM002.XXXPRCNM = "TS0YS12"; /* Process name*/
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* if return code is 0*/
    TS0YM002.SY1SSTNM = PG2REC.SY1SSTNM; /* move in style name*/
    TS0YM002.SY2CLRAB = PG2REC.SY2CLRAB; /* move in color abrev*/
  end

end // end TS0YS12

// Select (S )    DPRODC.VPRDCU01
Function TS0YS13()
   /* ------------------------------------------------------------*/

                 /* SELECT THE STORE SHORT NAME*/

   /* ------------------------------------------------------------*/

  call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* return code ok*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS13"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end


end // end TS0YS13

// Select from DPRODG.VCOLOR02
Function TS0YS15()
   /* ------------------------------------------------------------*/

            /* SELECT THE STYLE AND COLOR NAMES*/

   /* ------------------------------------------------------------*/

  TA1REC.TA1PGMNM = "TS0YS15"; /* Process name*/
  TA1REC.TA1MAP = "TS0YM002"; /* Map name*/

  XSPG202(); /* Select the style/color table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* return code ok*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      converseLib.clearScreen();
       /* clear screen before redisplay*/
    end
  end


end // end TS0YS15

// Select iseg dprodc.vprdcu01
Function TS0YS16()
   /* ------------------------------------------------------------*/

                 /* SELECT THE iseg description*/

   /* ------------------------------------------------------------*/

  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* return code ok*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS16"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  end


end // end TS0YS16

// Select (SI) set       VPOITM01
Function TS0YS17()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TSWREC.XWHCD;
  PC6REC.PC3PONBR = TS0YM002.PC3PONBR;
  PC6REC.SY1STNBR = TS0YM002.SY1STNBR;
  PC6REC.SY2CLRID = TS0YM002.SY2CLRID;
  PC6REC.XDMCD = TS0YM002.XDMCD;
  PC6REC.XQACD = TS0YM002.XQACD;
   /* MOVE '*' TO PC6REC.XQACD;        /* wildcard quality code*/
  PC6REC.XOWCD = TS0YM002.XOWCD;
  PC6REC.PC2INSEG = TS0YM002.PC2INSEG;
  PC6REC.XPGCD = TS0YM002.XPGCD;
  PC6REC.XUMCD = TS0YM002.XUMCD;
  PC6REC.PC2CUXID = TS0YM002.PC2CUXID;
  if (TS0YM002.TS0YM-CUST-ORD-ID > 0
   || TS0YM002.TS0YM-NIKE-ORD-ID > 0)
    PC6REC.OP1CUOID = TS0YM002.TS0YM-CUST-ORD-ID;
    PC6REC.OP1NORID = TS0YM002.TS0YM-NIKE-ORD-ID;
    TS0YW01.TS0YWWK5 = TS0YM002.TS0YM-CUST-ORD-ID;
    PC6REC.OP1PARTN = TS0YW01.OP1PARTN;
  else
    PC6REC.OP1CUOID = 0;
    PC6REC.OP1NORID = 0;
    PC6REC.OP1PARTN = " ";
  end

  if (TSFREC.YSTCD == "AR")
    PC6REC.OP1CUOID = -1;
    PC6REC.OP1NORID = -1;
    PC6REC.OP1PARTN = "*";
  end

  PC6REC.PC6ETSDT = -1;
   /* ****************npulug changes begin*******/
  if (TS0YW01.TS-CONSOL-POINT-FL == "N")
    PC6REC.YMTCD = TS0YW01.YMTCD;
  else
    PC6REC.YMTCD = "*";
  end
   /* ****************npulug changes end*********/
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";

   /* *********npulug changes begin*******/
  PCYREC.PCYFUNC = "S0";
   /* MOVE 'SI' TO PCYREC.PCYFUNC;*/
   /* *********npulug changes end*********/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS17"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS17"; /* Process name*/

  end



end // end TS0YS17

// Select from DPRODC.VPOTYP01
Function TS0YS18()
   /* ------------------------------------------------------------*/

         /* SELECT THE PO TYPE ROW FROM DPRODC.VPOTYP01*/

   /* ------------------------------------------------------------*/

  call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS18"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE PO TYPE TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0YM002.XXXPRCNM = "TS0YS18"; /* Process name*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0YS18

// Fetch  (NI) next row  VPOITM01
Function TS0YS19()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

   /* ***********npulug changes begin*************/
  PCYREC.PCYFUNC = "N0"; /* move in function code*/
   /* MOVE 'NI' TO PCYREC.PCYFUNC;     /* move in function code*/
   /* ***********npulug changes end***************/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* found row*/
    TS0YW01.TS0YWPOQ = TS0YW01.TS0YWPOQ + PC6REC.PC6TORDE;
  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      TS0YW01.TS0YWEFL = "Y"; /* end the loop*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0YW01.TS0YWEFL = "Y"; /* end the loop*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0YS19"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM002.XXXPRCNM = "TS0YS19"; /* Process name*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0YS19 ***********************/
end // end TS0YS19

// Select the factory row
Function TS0YS20()
   /* ------------------------------------------------------------*/

         /* SELECT THE FACTORY ROW FROM DFCTY.DFCTY001*/

   /* ------------------------------------------------------------*/


  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS20"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
    TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0YM002.XXXPRCNM = "TS0YS20"; /* Process name*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0YS20

// Close  (CI) set       VPOITM01
Function TS0YS21()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

   /* *******npulug changes begin************/
  PCYREC.PCYFUNC = "C0"; /* move in function code*/
   /* MOVE 'CI' TO PCYREC.PCYFUNC;      /* move in function code*/
   /* *******npulug changes end *************/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS21"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS21"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0YS21

// Select set DPRODC.VPOVFY01
Function TS0YS22()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VPOVFY01*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set PCFREC empty;
  PCFREC.PCFSECD = TS0YW01.TS0YWPYR;
  PCFREC.PCFBUYMO = -1;
  PCFREC.XXXSTAT = "*";

  call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS22"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS22"; /* Process name*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0YS22

// Select (S3) set       VCPLHD02
Function TS0YS23()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROW*/

    /* 1) Select the unique packing list row.*/

   /* ------------------------------------------------------------*/

  set TSTREC empty;

  TSTREC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  TSTREC.XWHCD = TSWREC.XWHCD;
  TSTREC.PC3PONBR = TS0YM002.PC3PONBR;
  TSTREC.SY1STNBR = TS0YM002.SY1STNBR;
  TSTREC.SY2CLRID = TS0YM002.SY2CLRID;
  TSTREC.XDMCD = TS0YM002.XDMCD;
   /* MOVE TS0YM002.XQACD TO TSTREC.XQACD;*/
  TSTREC.XQACD = "*"; /* wildcard quality code*/
  TSTREC.XOWCD = TS0YM002.XOWCD;
  TSTREC.PC2INSEG = TS0YM002.PC2INSEG;
  TSTREC.XPGCD = TS0YM002.XPGCD;
  TSTREC.XUMCD = TS0YM002.XUMCD;
  TSTREC.PC2CUXID = TS0YM002.PC2CUXID;
  if (TS0YM002.TS0YM-CUST-ORD-ID > 0
   || TS0YM002.TS0YM-NIKE-ORD-ID > 0)
    TSTREC.OP1CUOID = TS0YM002.TS0YM-CUST-ORD-ID;
    TSTREC.OP1NORID = TS0YM002.TS0YM-NIKE-ORD-ID;
    TS0YW01.TS0YWWK5 = TS0YM002.TS0YM-CUST-ORD-ID;
    TSTREC.OP1PARTN = TS0YW01.OP1PARTN;
  else
    TSTREC.OP1CUOID = 0;
    TSTREC.OP1NORID = 0;
    TSTREC.OP1PARTN = " ";
  end

  call "IO4230" ("S3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS23"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
    TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS23"; /* Process name*/

  end


end // end TS0YS23

// Fetch row  DPRODC.VPOVFY01
Function TS0YS24()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOVFY01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok or*/
   || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS24"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS24"; /* Process name*/

  end


end // end TS0YS24

// Fetch  (N3) next row  VCPLHD02
Function TS0YS25()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("N3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0YW01.TS0YWEFL = "Y"; /* end the loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0YW01.TS0YWEFL = "Y"; /* end the loop*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0YS25"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM002.XXXPRCNM = "TS0YS25"; /* Process name*/

    else

      if (TSTREC.TSFSHPID == VCPLHD04.TS-NIKE-SHP-ID /**/
       && TSTREC.TSIPLNBR == VCPLHD04.TS-NIKE-PL-NBR) /* on display*/

         /* continue on and don't include this quantity*/

      else

        if (TSTREC.TSISTAT == "IT" /* If in-transit*/
         || TSTREC.TSISTAT == "CC") /* or custom-clear*/

          /* -------------------------------------------------------------*/
          /* ===> commented stat code out in anticipation of C.C. response*/
          /* ===>        11/20/91 during S.O./P.O. code changes*/
          /* -------------------------------------------------------------*/

          /* OR TSTREC.TSISTAT EQ 'CR';       /* or custom-clear-error*/
          /* OR TSTREC.TSISTAT EQ 'ER';       /* or in-error*/

          set TS5REC empty; /* clear work record*/
          TS5REC.TSACARCD = TSTREC.TSACARCD; /* move in keys*/
          TS5REC.TS5CRAFT = TSTREC.TS5CRAFT;

          TS0YS0A(); /* Select the mode code*/

          if (TS5REC.YMTCD == TS0YW01.YMTCD) /* If modes are equal*/
            TS0YW01.TS0YWPLQ = TS0YW01.TS0YWPLQ + TSTREC.TSISHPQT;
          end

        end
      end

    end
  end


end // end TS0YS25

// Close set  DPRODC.VPOVFY01
Function TS0YS26()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VPOVFY01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS26"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS26"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0YS26

// Get valid sizes for sty/colr
Function TS0YS2631-1()
   /* ------------------------------------------------------------*/

    /* Get valid sizes for the style/color*/

   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.PG3FUNCD = "PC"; /* translator function*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  PG3REC.XGPCD = VCPLHD04.XGP-GPC-CD; /* keys*/
  PG3REC.SY1STNBR = VCPLHD04.SY-STY-NBR;
  PG3REC.SY2CLRID = VCPLHD04.SY-COLR-CD-ID;
  PG3REC.XDMCD = VCPLHD04.XDM-DIM-CD;
  PG3REC.XQACD = "**";

  XSPG301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                  /* SIZE BREAKS.*/
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(114); /* continue to check for size error*/
  end

end // end TS0YS2631-1

// Close  (C3) set       VCPLHD02
Function TS0YS27()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("C3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS27"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS27"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0YS27

// Select from DPRODC.VPOHDR01
Function TS0YS28()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/

      if (TS0YM002.PC3PONBR > 0 /* If po number entered*/
       && SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/
         /* continue on*/
      else
        return; /* Return to previous process*/
      end

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0YS28"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0YM002.XXXPRCNM = "TS0YS28"; /* Process name*/
  TS0YW01.TS0YWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0YS28

// Select (S8) set       VFYPO001
Function TS0YS29()
   /* ------------------------------------------------------------*/

                 /* SELECT SET OF RECEIPT ROWS*/

    /* 1) Select the set of receipt rows.*/

   /* ------------------------------------------------------------*/

  set PCMREC empty;

  PCMREC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PCMREC.XWHCD = TSWREC.XWHCD;
  PCMREC.YMTCD = TS0YW01.YMTCD;
  PCMREC.PC3PONBR = TS0YM002.PC3PONBR;
  PCMREC.PC2CUXID = TS0YM002.PC2CUXID;
  PCMREC.SY1STNBR = TS0YM002.SY1STNBR;
  PCMREC.SY2CLRID = TS0YM002.SY2CLRID;
  PCMREC.XDMCD = TS0YM002.XDMCD;
   /* MOVE TS0YM002.XQACD TO PCMREC.XQACD;*/
  PCMREC.XQACD = "*"; /* wildcard quality code*/
  PCMREC.XOWCD = TS0YM002.XOWCD;
  PCMREC.PC2INSEG = TS0YM002.PC2INSEG;
  PCMREC.XPGCD = TS0YM002.XPGCD;
  PCMREC.XUMCD = TS0YM002.XUMCD;
  if (TS0YM002.TS0YM-CUST-ORD-ID > 0
   || TS0YM002.TS0YM-NIKE-ORD-ID > 0)
    PCMREC.OP1CUOID = TS0YM002.TS0YM-CUST-ORD-ID;
    PCMREC.OP1NORID = TS0YM002.TS0YM-NIKE-ORD-ID;
    TS0YW01.TS0YWWK5 = TS0YM002.TS0YM-CUST-ORD-ID;
    PCMREC.OP1PARTN = TS0YW01.OP1PARTN;
  else
    PCMREC.OP1CUOID = 0;
    PCMREC.OP1NORID = 0;
    PCMREC.OP1PARTN = " ";
  end

  if (TSFREC.YSTCD == "AR")
    PCMREC.OP1CUOID = -1;
    PCMREC.OP1NORID = -1;
    PCMREC.OP1PARTN = "*";
  end

  call "IO3680" ("S8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS29"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/
    TA1REC.TA1TBLKE = PCMREC.PCMKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS29"; /* Process name*/

  end


end // end TS0YS29

// Call TS4000 - Itm Seq Populate
Function TS0YS30()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine accesses calls the TS4000 subroutine.  This*/
   /* subroutine takes the "long PO key" and returns the best fit*/
   /* PO item sequence number.*/
   /* XGP-GPC-CD, SY-STY-NBR and SY-CLR-CD-ID must be specified by*/
   /* the calling process in WTS4001.  The name of the calling*/
   /* process must be moved to TA1PGMNM in TA1REC, for Error*/
   /* Diagnosis Reporting.*/

   /* This subroutine will return the CSP return code in EZERT8,*/
   /* the subroutine return code in WTS4001.IO-RETURN-CODE and, if normal*/
   /* return, the PC-ITM-SEQ-NBR in WTS4001.*/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  call "TS4000" (WTS4001) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (WTS4001.IO-RETURN-CODE == "00") /* Normal return code*/

    return; /* Return to previous process*/

  end

  TA1REC.TA1MAP = WTS4001.IO-RETURN-CODE; /* i/o return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "TS0U-55010 CALL TS4000        ";

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* i/o return code*/

end // end TS0YS30

// Fetch  (N8) next row  VFYPO001
Function TS0YS31()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VFYPO001*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("N8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0YW01.TS0YWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YW01.TS0YWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0YS31"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM002.XXXPRCNM = "TS0YS31"; /* Process name*/

    else

      TS0YW01.TS0YWWK2 = 1; /* initialize index*/
      while (TS0YW01.TS0YWWK2 <= 40) /* until end of array*/
        TS0YW01.TS0YWRCQ = TS0YW01.TS0YWRCQ + PCMREC.PCMRCPTQ[TS0YWWK2];
        TS0YW01.TS0YWWK2 = TS0YW01.TS0YWWK2 + 1;
      end

    end
  end


end // end TS0YS31

// Close  (C8) set       VFYPO001
Function TS0YS33()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VFYPO001*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("C8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS33"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS33"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0YS33

// Calculate new VCPLHD04 totals
Function TS0YS35()
   /* ------------------------------------------------------------*/

              /* CALCULATE THE NEW VCPLHD04 TOTALS*/

   /* 1) This module takes the working fields passed from*/
      /* TS0Y263 and uses them to calculate the new totals for*/
      /* VCPLHD04 updated fields.*/

   /* ------------------------------------------------------------*/

      /* total cartons*/

  VCPLHD04.TS-PL-TOT-CRTN = VCPLHD04.TS-PL-TOT-CRTN - TS0YW01.TS0YWWK1;
  VCPLHD04.TS-PL-TOT-CRTN = VCPLHD04.TS-PL-TOT-CRTN + TS0YM002.TS0YMCTN;

      /* total shipped quantity*/

  VCPLHD04.TS-PL-QTOT-SHP = VCPLHD04.TS-PL-QTOT-SHP - TS0YW01.TS0YWWK2;
  VCPLHD04.TS-PL-QTOT-SHP = VCPLHD04.TS-PL-QTOT-SHP + TS0YM002.TS0YMQTY;

      /* total kilograms*/

  VCPLHD04.TS-PL-TOT-KG = VCPLHD04.TS-PL-TOT-KG - TS0YW01.TS0YWWK3;
  VCPLHD04.TS-PL-TOT-KG = VCPLHD04.TS-PL-TOT-KG + TS0YM002.TS0YMKIL;

      /* total cubic meters*/

  VCPLHD04.TS-PL-TOT-CBM = VCPLHD04.TS-PL-TOT-CBM - TS0YW01.TS0YWWK4;
  VCPLHD04.TS-PL-TOT-CBM = VCPLHD04.TS-PL-TOT-CBM + TS0YM002.TS0YMCBM;


end // end TS0YS35

// Select set DTRANS.VCPLIT01
Function TS0YS37()
   /* ------------------------------------------------------------*/

                   /* SELECT SET OF CARTONS*/

       /* Select the set of table rows.*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  TSOREC.TSIPLNBR = TSWREC.TSWPLNBR[TS0YWIXA];
  TSOREC.TSHNKCN = TS0YW01.TSHNKCN[TS0YWIXA];

  call "IO2580" ("S3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS37"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS37"; /* Process name*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0YS37

// Fetch row from DTRANS.VCPLIT01
Function TS0YS39()
   /* ------------------------------------------------------------*/

                 /* FETCH THE CARTON ROW*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0YW01.TS0YWSW1 = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0YS39"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM002.XXXPRCNM = "TS0YS39"; /* Process name*/
      TS0YW01.TS0YWSW1 = "Y"; /* end the loop*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
    else
      TS0YW03.TSIPLNBR[TS0YWIXW] = TSOREC.TSIPLNBR;
      TS0YW03.TSHNKCN[TS0YWIXW] = TSOREC.TSHNKCN;
      TS0YW03.TSOFRCRT[TS0YWIXW] = TSOREC.TSOFRCRT;
      TS0YW03.SY5SZID[TS0YWIXW] = TSOREC.SY5SZID;
      TS0YW03.ZZZCHGCT[TS0YWIXW] = TSOREC.ZZZCHGCT;
    end
  end


end // end TS0YS39

// Close set DTRANS.VCPLIT01
Function TS0YS41()
   /* ------------------------------------------------------------*/

            /* CLOSE THE SELECTED SET OF CARTONS*/

   /* Close the selected set of table rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS41"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS41"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0YS41

// Reset 1-8 positions in cplhd
Function TS0YS43()
   /* ------------------------------------------------------------*/

            /* RESET 1-8 POSITIONS IN THE CPLHD*/

     /* 1) Basically, fill in any spaces left in the cplhd 1-8*/
        /* arrays left by the update when the delete is*/
        /* performed.*/

   /* ------------------------------------------------------------*/

  TS0YW01.TS0YWIXW = TS0YW01.TS0YWIXM + 1; /* set index*/
  while (TS0YW01.TS0YWIXW <= TS0YW01.TS0YWMCP) /* le max cpl array (1-8)*/
    if (TS0YW04.TS0YWCNA[TS0YWIXW] > 0) /* if container exists*/

      TS0YW04.TS0YWCNA[TS0YWIXM] = TS0YW04.TS0YWCNA[TS0YWIXW];
      TS0YW04.TS0YWSHA[TS0YWIXM] = TS0YW04.TS0YWSHA[TS0YWIXW];
      TS0YW04.TS0YWRSA[TS0YWIXM] = TS0YW04.TS0YWRSA[TS0YWIXW];
      TS0YW04.TS0YWRCA[TS0YWIXM] = TS0YW04.TS0YWRCA[TS0YWIXW];
      TS0YW04.TS0YWCRA[TS0YWIXM] = TS0YW04.TS0YWCRA[TS0YWIXW];
      TS0YW04.TS0YWKGA[TS0YWIXM] = TS0YW04.TS0YWKGA[TS0YWIXW];
      TS0YW04.TS0YWCBA[TS0YWIXM] = TS0YW04.TS0YWCBA[TS0YWIXW];

      TS0YW04.TS0YWCNA[TS0YWIXW] = 0;
      TS0YW04.TS0YWSHA[TS0YWIXW] = 0;
      TS0YW04.TS0YWRSA[TS0YWIXW] = 0;
      TS0YW04.TS0YWRCA[TS0YWIXW] = 0;
      TS0YW04.TS0YWCRA[TS0YWIXW] = 0;
      TS0YW04.TS0YWKGA[TS0YWIXW] = 0;
      TS0YW04.TS0YWCBA[TS0YWIXW] = 0;

      TS0YW01.TS0YWIXW = TS0YW01.TS0YWIXW + 1; /* incr index*/
      TS0YW01.TS0YWIXM = TS0YW01.TS0YWIXM + 1; /* incr index*/

    else

      TS0YW01.TS0YWIXW = TS0YW01.TS0YWMCP + 1; /* end loop*/

    end
  end


end // end TS0YS43

// Move VCPLHD04 fields to map
Function TS0YS45()
   /* ------------------------------------------------------------*/

              /* MOVE VCPLHD04 FIELDS TO MAP 3*/

   /* 1) Format the selected data on the page.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
         /* VCPLHD04 fields*/
   /* ------------------------------------------------------------*/
  TS0YW01.TSIDETFL = VCPLHD04.TS-DET-FL; /* save detail flag*/
  TS0YW01.TS0YWCZC = VCPLHD04.ZZ-CHNG-CNT; /* save change count*/
  TS0YM003.PC3PONBR = VCPLHD04.PC-PO-NBR; /* move in fields*/
  TS0YM003.PC6ITMNB = VCPLHD04.PC-ITM-SEQ-NBR; /**/

  if (VCPLHD04.PC-PO-NBR in TS0YW02.PC3PONBR) /* find the po id fields*/
    TS0YM003.TS0YMPYR = TS0YW02.TS0YMPYR[sysVar.arrayIndex];
    TS0YM003.TS0YMPMO = TS0YW02.TS0YMPMO[sysVar.arrayIndex];
    TS0YM003.TS0YMDMO = TS0YW02.TS0YMDMO[sysVar.arrayIndex];
    TS0YM003.FY1FCTYC = TS0YW02.FY1FCTYC[sysVar.arrayIndex];
    TS0YM003.PC4ORTYP = TS0YW02.PC4ORTYP[sysVar.arrayIndex];
  end

  TS0YM003.PC2CUXID = VCPLHD04.PC-PRDCU-ID; /* move in fields*/
  TS0YM003.SY1STNBR = VCPLHD04.SY-STY-NBR;
  TS0YM003.XDMCD = VCPLHD04.XDM-DIM-CD;
  TS0YM003.SY2CLRID = VCPLHD04.SY-COLR-CD-ID;
  TS0YM003.XPGCD = VCPLHD04.XPG-PKG-TYP-CD;
  TS0YM003.XQACD = VCPLHD04.XQA-QUAL-CD;
  TS0YM003.XOWCD = VCPLHD04.XOW-OWN-GRP-CD;
  TS0YM003.PC2INSEG = VCPLHD04.PC-CU-IN-SEG-CD;
  TS0YM003.XUMCD = VCPLHD04.XUM-UOM-CD;
  TS0YW01.TS0YW-CUST-ORD-ID = VCPLHD04.OP-CUST-ORD-ID;
  TS0YW01.TS0YW-NIKE-ORD-ID = VCPLHD04.OP-NIKE-ORD-ID;
  TS0YM003.TS0YW-SALES-ORDER = TS0YW01.TS0YW-SALES-ORDER;


  if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR1)
    TS0YM003.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN1;
    TS0YM003.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP1;
  else
    if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR2)
      TS0YM003.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN2;
      TS0YM003.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP2;
    else
      if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR3)
        TS0YM003.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN3;
        TS0YM003.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP3;
      else
        if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR4)
          TS0YM003.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN4;
          TS0YM003.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP4;
        else
          if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR5)
            TS0YM003.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN5;
            TS0YM003.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP5;
          else
            if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR6)
              TS0YM003.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN6;
              TS0YM003.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP6;
            else
              if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR7)
                TS0YM003.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN7;
                TS0YM003.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP7;
              else
                if (TS0YW01.TSHNKCN[TS0YWIXA] == VCPLHD04.TS-NIKE-CNTNR-NBR8)
                  TS0YM003.TS0YMCTN = VCPLHD04.TS-CPL-TOT-CRTN8;
                  TS0YM003.TS0YMQTY = VCPLHD04.TS-CPL-QTOT-SHP8;
                end
              end
            end
          end
        end
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0YS45 ***********************/
end // end TS0YS45

// Select set DTRANS.VCPLIT01
Function TS0YS47()
   /* ------------------------------------------------------------*/

                   /* SELECT SET OF CARTONS*/

       /* Select the set of table rows.*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TSWREC.TSW2SHP[TS0YWIXA]; /* move in keys*/
  TSOREC.TSHNKCN = TS0YW01.TSHNKCN[TS0YWIXA];
  TSOREC.TSIPLNBR = VCPLHD04.TS-NIKE-PL-NBR;

  call "IO2580" ("S3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS47"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM003.XXXPRCNM = "TS0YS47"; /* Process name*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0YS47

// Fetch row in DTRANS.VCPLIT01
Function TS0YS49()
   /* ------------------------------------------------------------*/

                 /* FETCH THE CARTON ROW*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0YW01.TS0YWSW1 = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0YS49"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YM003.XXXPRCNM = "TS0YS49"; /* Process name*/
      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YW01.TS0YWSW1 = "Y"; /* end the loop*/
    else
      TS0YW03.TSIPLNBR[TS0YWIXW] = TSOREC.TSIPLNBR;
      TS0YW03.TSHNKCN[TS0YWIXW] = TSOREC.TSHNKCN;
      TS0YW03.TSOFRCRT[TS0YWIXW] = TSOREC.TSOFRCRT;
      TS0YW03.SY5SZID[TS0YWIXW] = TSOREC.SY5SZID;
      TS0YW03.ZZZCHGCT[TS0YWIXW] = TSOREC.ZZZCHGCT;
    end
  end


end // end TS0YS49

// Close set DTRANS.VCPLIT01
Function TS0YS51()
   /* ------------------------------------------------------------*/

            /* CLOSE THE SELECTED SET OF CARTONS*/

   /* Close the selected set of table rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS51"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM003.XXXPRCNM = "TS0YS51"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0YS51

// Update cntnr status
Function TS0YS55()
   /* ------------------------------------------------------------*/

                  /* UPDATE THE CONTAINER STATUS*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
          /* Update container header row*/
   /* ------------------------------------------------------------*/
  TSHREC.TSHCNTNR = TS0YM004.TSHCNTNR; /* move in keys*/
  TSHREC.YCNCD = TS0YM004.YCNCD;
  TSHREC.TSHSEAL = TS0YM004.TSHSEAL;
  TSHREC.TSHTKG = TS0YM004.TSHTKG;
  TSHREC.TSHTCBM = TS0YM004.TSHTCBM;
  TSHREC.TSHSTAT = "RC"; /* Set to received*/


   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  call "IO2590" ("U ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS55"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate error*/
    TS0YM004.XXXPRCNM = "TS0YS55"; /* Process name*/

  end


end // end TS0YS55

// Select set P/L's for cntnr
Function TS0YS57()
   /* ------------------------------------------------------------*/

           /* SELECT SET OF P/L's FOR CONTAINER*/

   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in keys*/
  VCPLHD04.PC-PO-NBR = -1;
  VCPLHD04.PC-PRDCU-ID = "*";
  VCPLHD04.SY-STY-NBR = "*";
  VCPLHD04.SY-COLR-CD-ID = "*";
  VCPLHD04.XQA-QUAL-CD = "*";
  VCPLHD04.PC-CU-IN-SEG-CD = "*";
  VCPLHD04.TS-NIKE-CNTNR-NBR1 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR2 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR3 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR4 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR5 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR6 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR7 = TSHREC.TSHNKCN;
  VCPLHD04.TS-NIKE-CNTNR-NBR8 = TSHREC.TSHNKCN;

  TSGREC.TSNFNC = "S5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS57"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
    TS0YM004.XXXPRCNM = "TS0YS57"; /* Process name*/

  end


end // end TS0YS57

// Fetch the P/L row
Function TS0YS59()
   /* ------------------------------------------------------------*/

              /* FETCH THE P/L ROW*/

   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok*/
   || SQLCA.VAGen_SQLCODE == 100) /* or end of selected set*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0YS59"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM004.XXXPRCNM = "TS0YS59"; /* Process name*/
    end
  end


end // end TS0YS59

// Select the cntnr row
Function TS0YS61()
   /* ------------------------------------------------------------*/

               /* SELECT THE CONTAINER ROW*/

   /* 1) Select the row from DTRANS.VCNTNR01 to obtain the data*/
      /* for display on the container maintenance screen.*/

   /* ------------------------------------------------------------*/

  call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS61"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM004.XXXPRCNM = "TS0YS61"; /* Process name*/

  end


end // end TS0YS61

// Update P/L row to 'RC'
Function TS0YS63()
   /* ------------------------------------------------------------*/

              /* UPDATE P/L ROW TO "RC"*/

   /* 1) This module updates a table row from the cplhd table.*/
   /* 2) It will return a system error if an unexpected return*/
      /* code is received.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-CPL-STAT-CD = "RC"; /* set to received*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* Change time*/

  TSGREC.TSNFNC = "U "; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If valid return code*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS63"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE A TABLE ROW";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM004.XXXPRCNM = "TS0YS63"; /* Process name*/

  end


end // end TS0YS63

// Close set of P/L's
Function TS0YS65()
   /* ------------------------------------------------------------*/

                   /* CLOSE SET OF P/L's*/

   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C5"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS65"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM004.XXXPRCNM = "TS0YS65"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0YS65

// Select SHPHD row
Function TS0YS67()
   /* ------------------------------------------------------------*/

                /* SELECT THE SHIPMENT HEADER*/

         /* 1) Select the shipment header.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S "; /* move selection to pass record*/
  call "IO2540" (TSNREC, SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If valid return code*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS67"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW ";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/
    TS0YM004.XXXPRCNM = "TS0YS67"; /* Process name*/

  end


end // end TS0YS67

// Select set of P/L's for shphd
Function TS0YS69()
   /* ------------------------------------------------------------*/

           /* SELECT SET OF P/L's FOR CONTAINER*/

   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in keys*/

  TSGREC.TSNFNC = "S1"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS69"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
    TS0YM004.XXXPRCNM = "TS0YS69"; /* Process name*/

  end


end // end TS0YS69

// Fetch P/L row
Function TS0YS71()
   /* ------------------------------------------------------------*/

              /* FETCH THE P/L ROW*/

   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N1"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok*/
   || SQLCA.VAGen_SQLCODE == 100) /* or end of selected set*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0YS71"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
      TS0YM004.XXXPRCNM = "TS0YS71"; /* Process name*/
    end
  end


end // end TS0YS71

// Close selected set of P/L's
Function TS0YS73()
   /* GET TS0YS65*/
   /* ------------------------------------------------------------*/

                   /* CLOSE SET OF P/L's*/

   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C1"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0YS73"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* indicate problem*/
    TS0YM004.XXXPRCNM = "TS0YS73"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0YS73

// Update SHPHD row
Function TS0YS75()
   /* ------------------------------------------------------------*/

                /* UPDATE ROW IN DTRANS.VSHPHD01*/

     /* Update row in database.*/

   /* ------------------------------------------------------------*/

  TSFREC.YSSCD = "RC"; /* Set to received*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSFREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  TSFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  call "IO2540" ("U ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS75"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0YM004"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSFREC.TSFKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate problem*/
    TS0YM004.XXXPRCNM = "TS0YS75"; /* Process name*/

  end


end // end TS0YS75

// Select (SI) set       VPOITM01
Function TS0YS76()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TSWREC.XWHCD;
  PC6REC.PC3PONBR = TS0YM002.PC3PONBR;
  PC6REC.SY1STNBR = TS0YM002.SY1STNBR;
  PC6REC.SY2CLRID = TS0YM002.SY2CLRID;
  PC6REC.XDMCD = TS0YM002.XDMCD;
  PC6REC.XQACD = TS0YM002.XQACD;
   /* MOVE '*' TO PC6REC.XQACD;        /* wildcard quality code*/
  PC6REC.XOWCD = TS0YM002.XOWCD;
  PC6REC.PC2INSEG = TS0YM002.PC2INSEG;
  PC6REC.PC6ITMNB = TS0YM002.PC-ITM-SEQ-NBR;
  PC6REC.XPGCD = TS0YM002.XPGCD;
  PC6REC.XUMCD = TS0YM002.XUMCD;
  PC6REC.PC2CUXID = TS0YM002.PC2CUXID;
  if (TS0YM002.TS0YM-CUST-ORD-ID > 0
   || TS0YM002.TS0YM-NIKE-ORD-ID > 0)
    PC6REC.OP1CUOID = TS0YM002.TS0YM-CUST-ORD-ID;
    PC6REC.OP1NORID = TS0YM002.TS0YM-NIKE-ORD-ID;
    TS0YW01.TS0YWWK5 = TS0YM002.TS0YM-CUST-ORD-ID;
    PC6REC.OP1PARTN = TS0YW01.OP1PARTN;
  else
    PC6REC.OP1CUOID = -1;
    PC6REC.OP1NORID = -1;
    PC6REC.OP1PARTN = "*";
  end

  if (TSFREC.YSTCD == "AR")
    PC6REC.OP1CUOID = -1;
    PC6REC.OP1NORID = -1;
    PC6REC.OP1PARTN = "*";
  end

  PC6REC.PC6ETSDT = -1;
   /* *******npulug changes begin********/
  if (TS0YW01.TS-CONSOL-POINT-FL == "N")
    PC6REC.YMTCD = TS0YW01.YMTCD;
  else
    PC6REC.YMTCD = "*";
  end
   /* *******npulug changes end**********/
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";

  if (TS0YM002.PC-ITM-SEQ-NBR > 0)
    PCYREC.PCYFUNC = "SA";
  else
   /* **npulug changes begin*****/
    PCYREC.PCYFUNC = "S0";
   /* MOVE 'SI' TO PCYREC.PCYFUNC;*/
   /* **npulug changes end*******/
  end
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 ||  /* Unexpected return code*/
  SQLCA.VAGen_SQLCODE == 100)     

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS17"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YM002.XXXPRCNM = "TS0YS17"; /* Process name*/

  end



end // end TS0YS76

// TO POPULATE MODE TO TS4000
Function TS0YS77()
  set TSFREC empty;
  set SQLCA empty;
  set TSNREC empty;

  TSFREC.TSFSHPID = TS0YM002.TSFSHPID;

  TSNREC.TSNFNC = "S "; /* move selection to pass record*/
  call "IO2540" (TSNREC, SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If valid return code*/
    WTS4001.TSEORIG = TSFREC.TSEORIG;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS77"; /* Process name*/
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate not available*/
    TS0YM002.XXXPRCNM = "TS0YS77"; /* Process name*/

  end


end // end TS0YS77

// Select (SI) set       VPOITM01
Function TS0YS78()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("S ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Unexpected return code*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS78"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routin*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate Problem*/
    TS0YM002.XXXPRCNM = "TS0YS78"; /* Process name*/
  end


end // end TS0YS78

// Select (SI) set       VPOITM01
Function TS0YS79()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set TS5REC empty;
  set SQLCA empty;

  TS5REC.TSACARCD = TSFREC.TSACARCD; /* move in keys*/
  TS5REC.TS5CRAFT = TSFREC.TS5CRAFT;

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Unexpected return code*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0YS79"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0YM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routin*/

    TS0YW01.TS0YWPSW = "Y"; /* Indicate Problem*/
    TS0YM002.XXXPRCNM = "TS0YS79"; /* Process name*/
  end


end // end TS0YS79

// Close  (CH) Set       VPOITM01
Function XSPCS-VPOITM01-CH()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  if (PC5REC.XGPCD == "02")
    PCYREC.PCYFUNC = "CI";
  else
    PCYREC.PCYFUNC = "CH";
  end

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> roll back all changes*/

  PC5REC.XXXPRCNM = "XSPCSCH"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPCSCH"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of XSPCS84 ***********************/
end // end XSPCS-VPOITM01-CH

// Fetch  (NH) Next row  VPOITM01
Function XSPCS-VPOITM01-NH()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  if (PC5REC.XGPCD == "02")
    PCYREC.PCYFUNC = "NI";
  else
    PCYREC.PCYFUNC = "NH";
  end

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, check for multiple styles*/
                /* , save the data in pcwrec storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/


      PC5REC.PC5WSWT = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  PC5REC.XXXPRCNM = "XSPCSNH"; /* Module identification*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* ===> rollback all changes*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPCS82"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* ===> Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* ===> Table view name*/

  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* ===>Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of XSPCS82 ***********************/
end // end XSPCS-VPOITM01-NH

// Select Alternate  VPOITM01
Function XSPCS-VPOITM01-SA()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100)
      TS0YM002.XXXPRCNM = "XSPCSSA";
      converseLib.validationFailed(115);
      return;
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC5REC.XXXPRCNM = "XSPCSSA"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT ALTERNATE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPCSSA"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of XSPCS81 ***********************/
end // end XSPCS-VPOITM01-SA

// Select (SH) Set/Open  VPOITM01
Function XSPCS-VPOITM01-SH()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  if (PC5REC.XGPCD == "02")
    PCYREC.PCYFUNC = "SI";
  else
    PCYREC.PCYFUNC = "SH";
  end

  try
    call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  PC5REC.XXXPRCNM = "XSPCS81"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/


  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "XSPCSSH"; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of XSPCS81 ***********************/
end // end XSPCS-VPOITM01-SH

//*** RECORD=TS0YW01 ****
// Working storage for TS0Y - Container Inquiry/Maintenance
// ***********************
Record TS0YW01 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TS0YWARY TS0YWARY [10] ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 TSHNKCN TSHNKCN ; 
    15 TS0YWAPO TS0YWAPO ; 
  10 TS0YWCSK TS0YWCSK ; 
    15 TS0YWSCN TS0YWSCN ; 
    15 TS0YWSPO TS0YWSPO ; 
  10 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
  10 YMTCD YMTCD ; 
  10 TS0YWCFL TS0YWCFL ; 
  10 TS0YWSWC TS0YWSWC ; 
  10 TS0YWDEL TS0YWDEL ; 
  10 TS0YWERR TS0YWERR ; 
  10 TS0YWEFL TS0YWEFL ; 
  10 TS0YWARF TS0YWARF ; 
  10 TS0YWIXM TS0YWIXM ; 
  10 TS0YWIX3 TS0YWIX3 ; 
  10 TS0YWIXW TS0YWIXW ; 
  10 TS0YWIXA TS0YWIXA ; 
  10 TS0YWMAP TS0YWMAP ; 
  10 TS0YWMCR TS0YWMCR ; 
  10 TS0YWMCP TS0YWMCP ; 
  10 TS0YWMFL TS0YWMFL ; 
  10 TS0YWWFL TS0YWWFL ; 
  10 TS0YWPWF TS0YWPWF ; 
  10 TS0YWWF1 TS0YWWF1 ; 
  10 TS0YWWF2 TS0YWWF2 ; 
  10 TS0YWWF3 TS0YWWF3 ; 
  10 TS0YWWF4 TS0YWWF4 ; 
  10 TS0YWWF5 TS0YWWF5 ; 
  10 TS0YWWF6 TS0YWWF6 ; 
  10 TS0YWWF7 TS0YWWF7 ; 
  10 TS0YWWF8 TS0YWWF8 ; 
  10 TS0YWWF9 TS0YWWF9 ; 
  10 TS0YW-PREV-WWF1-WARNING TS0YW-PREV-WWF1-WARNING ; 
  10 TS0YW-PREV-WWF2-WARNING TS0YW-PREV-WWF2-WARNING ; 
  10 TS0YW-PREV-WWF3-WARNING TS0YW-PREV-WWF3-WARNING ; 
  10 TS0YW-PREV-WWF4-WARNING TS0YW-PREV-WWF4-WARNING ; 
  10 TS0YW-PREV-WWF5-WARNING TS0YW-PREV-WWF5-WARNING ; 
  10 TS0YW-PREV-WWF8-WARNING TS0YW-PREV-WWF8-WARNING ; 
  10 TS0YW-PREV-WWF9-WARNING TS0YW-PREV-WWF9-WARNING ; 
  10 TS0YW-PREV-SO-WARNING TS0YW-PREV-SO-WARNING ; 
  10 TS0YWSEQ TS0YWSEQ ; 
  10 TS0YWSEP TS0YWSEP ; 
  10 TS0YWHEQ TS0YWHEQ ; 
  10 TS0YWHEP TS0YWHEP ; 
  10 TS0YWPOQ TS0YWPOQ ; 
  10 TS0YWPLQ TS0YWPLQ ; 
  10 TS0YWRCQ TS0YWRCQ ; 
  10 TS0YWTTQ TS0YWTTQ ; 
  10 TS0YWTTD TS0YWTTD ; 
  10 TS0YWTTP TS0YWTTP ; 
  10 TS0YWMSL TS0YWMSL ; 
  10 TS0YWNCF TS0YWNCF ; 
  10 TS0YWPSW TS0YWPSW ; 
  10 TS0YWSFL TS0YWSFL ; 
  10 TS0YWSW1 TS0YWSW1 ; 
  10 TS0YWSW2 TS0YWSW2 ; 
  10 TS0YWSWR TS0YWSWR ; 
  10 TS0YWTCN TS0YWTCN ; 
  10 TS0YWTSP TS0YWTSP ; 
  10 TS0YWWK1 TS0YWWK1 ; 
  10 TS0YWWK2 TS0YWWK2 ; 
  10 TS0YWWK3 TS0YWWK3 ; 
  10 TS0YWWK4 TS0YWWK4 ; 
  10 TS0YWWK5 TS0YWWK5 ; 
    15 * char(8) ; 
    15 OP1PARTN OP1PARTN ; 
  10 TS0YMTCN TS0YMTCN ; 
  10 TS0YWIDS TS0YWIDS ; 
  10 TS0YWIPI TS0YWIPI ; 
  10 TS0YWIOT TS0YWIOT ; 
  10 TS0YWPO TS0YWPO ; 
  10 TS0YWCYR TS0YWCYR ; 
    15 TS0YWCCC TS0YWCCC ; 
    15 TS0YWCYY TS0YWCYY ; 
  10 TS0YWPID TS0YWPID ; 
    15 TS0YWPCC TS0YWPCC ; 
    15 TS0YWPOI TS0YWPOI ; 
      20 TS0YWPYR TS0YWPYR ; 
        25 TS0YWPY1 TS0YWPY1 ; 
        25 TS0YWPY2 TS0YWPY2 ; 
      20 TS0YWPMO TS0YWPMO ; 
      20 TS0YWDMO TS0YWDMO ; 
      20 TS0YWFCT TS0YWFCT ; 
  10 TS0YWOT TS0YWOT ; 
  10 TSIDETFL TSIDETFL ; 
  10 TSISTAT TSISTAT ; 
  10 XRECD XRECD ; 
  10 TS0YWCZC TS0YWCZC ; 
  10 TS0YWSHP TS0YWSHP ; 
  10 TS0YWCRT TS0YWCRT ; 
  10 TS0YWCBM TS0YWCBM ; 
  10 TS0YWKG TS0YWKG ; 
  10 TS0YWCXR TS0YWCXR ; 
  10 TS0YWCLR TS0YWCLR ; 
  10 TS0YWXUM TS0YWXUM ; 
  10 TS0YWSEG TS0YWSEG ; 
  10 TS0YWXOW TS0YWXOW ; 
  10 TS0YWXQA TS0YWXQA ; 
  10 TS0YWXPG TS0YWXPG ; 
  10 TS0YWXDM TS0YWXDM ; 
  10 PC3PONBR PC3PONBR ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 TS0YW-PREV-OP1CUOID TS0YW-PREV-OP1CUOID ; 
  10 TS0YW-PREV-OP1NORID TS0YW-PREV-OP1NORID ; 
  10 TS0YW-SALES-ORDER TS0YW-SALES-ORDER ; 
    15 TS0YW-CUST-ORD-ID TS0YW-CUST-ORD-ID ; 
    15 TS0YW-NIKE-ORD-ID TS0YW-NIKE-ORD-ID ; 
  10 TS0YWPY TS0YWPY ; 
  10 TS0YWPM TS0YWPM ; 
  10 TS0YWDM TS0YWDM ; 
  10 TS0YWFC TS0YWFC ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 TSISHPQT TSISHPQT ; 
  10 TSICRTQT TSICRTQT ; 
  10 TSIPLCBM TSIPLCBM ; 
  10 TSIPLTKG TSIPLTKG ; 
  10 PC2CUXID PC2CUXID ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 PC2INSEG PC2INSEG ; 
  10 XDMCD XDMCD ; 
  10 XPGCD XPGCD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 XUMCD XUMCD ; 
  10 TS0YWCTR TS0YWCTR ; 
  10 TSHSTAT TSHSTAT ; 
  10 TSHSEAL TSHSEAL ; 
  10 TS-CNTNR-LOAD-IND TS-CNTNR-LOAD-IND ; 
  10 TS-CRTF-ORIG-ID TS-CRTF-ORIG-ID ; 
  10 TS-EXPT-LIC-ID TS-EXPT-LIC-ID ; 
  10 TS-GEN-PRF-ID TS-GEN-PRF-ID ; 
  10 PC6AIRNB PC6AIRNB ; 
  10 PC6ETSDT PC6ETSDT ; 
  10 TS0YW-NBR-DAYS-BFR TS0YW-NBR-DAYS-BFR ; 
  10 TS0YW-NBR-DAYS-AFT TS0YW-NBR-DAYS-AFT ; 
  10 YCNCD YCNCD ; 
  10 TSHTKG TSHTKG ; 
  10 TSHTCBM TSHTCBM ; 
  10 TS0YWDAT TS0YWDAT ; 
    15 TS0YWPCN TS0YWPCN ; 
    15 TS0YWPYY TS0YWPYY ; 
    15 TS0YWPM1 TS0YWPM1 ; 
    15 TS0YWPM2 TS0YWPM2 ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 YSSDELFL YSSDELFL ; 
  10 YSSUPDFL YSSUPDFL ; 
  10 CPLCRTNS CPLCRTNS ; 
  10 VPLAUXCNT VPLAUXCNT ; 
  10 TS-CONSOL-POINT-FL TS-CONSOL-POINT-FL ; 
  10 ENDCPLIT ENDCPLIT ; 
  10 TS-SIZ-ERR-FLG TS-SIZ-ERR-FLG ; 
  10 TS-SIZE-CHECK-FLAG TS-SIZE-CHECK-FLAG ; 
  10 TS-SIZ-INDX TS-SIZ-INDX ; 
end // end TS0YW01

//*** RECORD=TS0YW02 ****
// Temporary storage record for TS0Y - Shp CNTNR Inq/Maint.
// ***********************
Record TS0YW02 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TS0YWLIN TS0YWLIN [14] ; 
    15 TS0YMSEL TS0YMSEL ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 TSHNKCN TSHNKCN ; 
    15 TS0YWPOI TS0YWPOI ; 
      20 TS0YMPYR TS0YMPYR ; 
      20 TS0YMPMO TS0YMPMO ; 
      20 TS0YMDMO TS0YMDMO ; 
      20 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 TSISHPQT TSISHPQT ; 
    15 TSICRTQT TSICRTQT ; 
    15 TSISTAT TSISTAT ; 
end // end TS0YW02

//*** RECORD=TS0YW03 ****
// Working storage for TS0Y - Carton keys
// ***********************
Record TS0YW03 type basicRecord
  10 TS0YWLN3 TS0YWLN3 [5000] ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSHNKCN TSHNKCN ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 SY5SZID SY5SZID ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end TS0YW03

//*** RECORD=TS0YW04 ****
// Working storage for VCPLHD03 array fields - TS0Y
// 
//                This working storage is designed to put
//                the 1-8 record values of VCPLHD03 into
//                array fields for ease of processing.
// 
// ***********************
Record TS0YW04 type basicRecord
  5 TS0YW04-GRP TS0YW04-GRP ; 
    10 TS0YW04-KEY TS0YW04-KEY ; 
      15 TSFSHPID TSFSHPID ; 
      15 TSIPLNBR TSIPLNBR ; 
      15 PC3PONBR PC3PONBR ; 
      15 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
      15 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 OP1PARTN OP1PARTN ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 TSIETALO TSIETALO ; 
    10 TSIMSCFL TSIMSCFL ; 
    10 TSIMSCGR TSIMSCGR ; 
    10 TSISTAT TSISTAT ; 
    10 TSISHPQT TSISHPQT ; 
    10 TSIRSVQT TSIRSVQT ; 
    10 TSIRCVQT TSIRCVQT ; 
    10 TSICRTQT TSICRTQT ; 
    10 TSIPLCBM TSIPLCBM ; 
    10 TSIPLTKG TSIPLTKG ; 
    10 TS0YWCNA TS0YWCNA [8] ; 
    10 TS0YWSHA TS0YWSHA [8] ; 
    10 TS0YWRCA TS0YWRCA [8] ; 
    10 TS0YWRSA TS0YWRSA [8] ; 
    10 TS0YWCRA TS0YWCRA [8] ; 
    10 TS0YWCBA TS0YWCBA [8] ; 
    10 TS0YWKGA TS0YWKGA [8] ; 
    10 TSILOCR TSILOCR ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 TSPFCIVC TSPFCIVC ; 
    10 TSPFILE TSPFILE ; 
    10 TSIDETFL TSIDETFL ; 
    10 TSRTEXT TSRTEXT ; 
    10 XRECD XRECD ; 
    10 TS-CRTF-ORIG-ID TS-CRTF-ORIG-ID ; 
    10 TS-EXPT-LIC-ID TS-EXPT-LIC-ID ; 
    10 TS-GEN-PRF-ID TS-GEN-PRF-ID ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0YW04

//*** RECORD=TS0YW05 ****
//   TRANSPORTATION VPLAUX01 RECORD PARAMETERS
//   PARAMETERS TO PASS:    Entered function ===> TSCFNC
//                          VCPLIT01 SIZE ID ===> CPLITSZID
// 
//   DATE      NAME       DESCRIPTION OF CHANGE
//   -----   -------     -----------------------------
//  08/12/97  RKALLA      NEW RECORD USED TO TRANSFER DATA
// ***********************
Record TS0YW05 type basicRecord
  10 TSCFNC TSCFNC ; 
  10 CPLITSZID CPLITSZID ; 
  10 TSTOCRTN TSTOCRTN ; 
end // end TS0YW05

//*** RECORD=TS0YW06 ****
// Record to store the size and carton ranges, to be used by
// VPLAUX01 SEARCH. Created by RKALLA.
// TS000  09/24/97  INCREASED THE SIZE OF THE ARRAY TO 18000
// ***********************
Record TS0YW06 type basicRecord
  10 TS-CRTN-NBR TS-CRTN-NBR [18000] ; 
  10 TS-UCC-128-CD TS-UCC-128-CD [18000] ; 
  10 PK-CRTN-CD PK-CRTN-CD [18000] ; 
end // end TS0YW06

DataItem ENDCPLIT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS-CONSOL-POINT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size error flag
DataItem TS-SIZ-ERR-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS-SIZ-INDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS-SIZE-CHECK-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id demand month
DataItem TS0YMDMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem TS0YMPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id year
DataItem TS0YMPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection field
DataItem TS0YMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new ts-cntnr-nbr
DataItem TS0YMTCN char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem TS0YW-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Days After Actual Departure
DataItem TS0YW-NBR-DAYS-AFT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Days Prior to Actual Departure
DataItem TS0YW-NBR-DAYS-BFR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem TS0YW-NIKE-ORD-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Previous op-cust-ord-id
DataItem TS0YW-PREV-OP1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous op-nike-ord-id
DataItem TS0YW-PREV-OP1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous SO warning set
DataItem TS0YW-PREV-SO-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous wwf1 warning
DataItem TS0YW-PREV-WWF1-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous wwf2 warning
DataItem TS0YW-PREV-WWF2-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous wwf3 warning
DataItem TS0YW-PREV-WWF3-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous wwf4 warning
DataItem TS0YW-PREV-WWF4-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous wwf5 warning
DataItem TS0YW-PREV-WWF5-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous wwf8 warning
DataItem TS0YW-PREV-WWF8-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous wwf9 warning
DataItem TS0YW-PREV-WWF9-WARNING char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales order format
DataItem TS0YW-SALES-ORDER num(12,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem TS0YW04-GRP char(464)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pack list hdr table key
DataItem TS0YW04-KEY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Array save po number
DataItem TS0YWAPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// All received indicator flag
DataItem TS0YWARF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cpl information save array
DataItem TS0YWARY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CPL_TOT_CBM array
DataItem TS0YWCBA decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_PL_TOT_CBM
DataItem TS0YWCBM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem TS0YWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Change flag
DataItem TS0YWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// identifying color
DataItem TS0YWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_NIKE_CNTNR_NBR array
DataItem TS0YWCNA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CPL_TOT_CRTN array
DataItem TS0YWCRA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_PL_TOT_CRTN
DataItem TS0YWCRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change Save Key
DataItem TS0YWCSK char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CNTNR_NBR
DataItem TS0YWCTR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PRDCU_ID
DataItem TS0YWCXR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century/year
DataItem TS0YWCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0YWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cpl header change count
DataItem TS0YWCZC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date
DataItem TS0YWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Delete flag
DataItem TS0YWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0YWDM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0YWDMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// end flag for loops
DataItem TS0YWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error switch for update prob.
DataItem TS0YWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory
DataItem TS0YWFC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory
DataItem TS0YWFCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hard error percent
DataItem TS0YWHEP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hard error quantity
DataItem TS0YWHEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id/type correct switch
DataItem TS0YWIDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. type correct switch
DataItem TS0YWIOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. id correct switch
DataItem TS0YWIPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for Fetch
DataItem TS0YWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index counter
DataItem TS0YWIXA smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0YWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem TS0YWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TS_PL_TOT_KG
DataItem TS0YWKG decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CPL_TOT_KG array
DataItem TS0YWKGA decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0YWLIN char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage line
DataItem TS0YWLN3 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0YWMAP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max cpl array lines (1-8)
DataItem TS0YWMCP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max-carton-lines
DataItem TS0YWMCR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Message flag
DataItem TS0YWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max selection lines
DataItem TS0YWMSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new container assignment flag
DataItem TS0YWNCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_OT_CD
DataItem TS0YWOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id century
DataItem TS0YWPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id century
DataItem TS0YWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id redefinition
DataItem TS0YWPID char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Packing list quantity
DataItem TS0YWPLQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem TS0YWPM char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0YWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0YWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0YWPMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem TS0YWPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id
DataItem TS0YWPOI char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO accumulated quantity
DataItem TS0YWPOQ decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0YWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO overall warning flag
DataItem TS0YWPWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0YWPY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year char 1
DataItem TS0YWPY1 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year char 2
DataItem TS0YWPY2 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0YWPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0YWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CPL_QTOT_RCV array
DataItem TS0YWRCA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reciepts accumulated quantity
DataItem TS0YWRCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CPL_QTOT_RSRV array
DataItem TS0YWRSA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save container number
DataItem TS0YWSCN char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_CU_IN_SEG_CD
DataItem TS0YWSEG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Soft error percent
DataItem TS0YWSEP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Soft error quantity
DataItem TS0YWSEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Selection flag
DataItem TS0YWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CPL_QTOT_SHP array
DataItem TS0YWSHA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_PL_QTOT_SHP
DataItem TS0YWSHP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save po number
DataItem TS0YWSPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch1
DataItem TS0YWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem TS0YWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Flag for Fetch
DataItem TS0YWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0YWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to nike container number
DataItem TS0YWTCN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current temporary storage page
DataItem TS0YWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total shipping/received diff
DataItem TS0YWTTD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received pct
DataItem TS0YWTTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received qty
DataItem TS0YWTTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warning flag  1
DataItem TS0YWWF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  2
DataItem TS0YWWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  3
DataItem TS0YWWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  4
DataItem TS0YWWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  5
DataItem TS0YWWF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  6
DataItem TS0YWWF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  7
DataItem TS0YWWF7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  8
DataItem TS0YWWF8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  9
DataItem TS0YWWF9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work flag
DataItem TS0YWWFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working field #1
DataItem TS0YWWK1 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working field #2
DataItem TS0YWWK2 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working field #3
DataItem TS0YWWK3 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working field #4
DataItem TS0YWWK4 decimal(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working field #5
DataItem TS0YWWK5 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dimension code
DataItem TS0YWXDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group code
DataItem TS0YWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// packaging type code
DataItem TS0YWXPG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quality code
DataItem TS0YWXQA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unit of measure code
DataItem TS0YWXUM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cplit to Carton
DataItem TSTOCRTN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

