package ts0m;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0M ****
// This program allows users to pull up shipments on the screen
// that have a common destination and/or warehouse, status, and
// gpc. They also must fall within a specific eta date range.
// 
// CONTROL    DATE    NAME    DESCRIPTION OF CHANGE
// -------  -------- ------  ----------------------------------
//          09/30/88 CEPPLE  New application.
//          05/29/90 CEPPLE  Fix map so cursor autoskips
//                           to nxt field.  Stop suppression
//                           past map detail status.
// Fix      08/16/90 CEPPLE  Clear TSWREC from application and
//                           inquiry flag in initialization.
// TS#5     10/02/90 SPOPA   Use TSHNKCNX array in TS7REC.
// TS#015   11/14/90 KSTOKK  Increase allowable ETA date range
//                           from 31 to 95 days.
// TS#135   12/03/90 KSTOKK  Increase current temporary storage
//                           page number from two to four
//                           bytes.
// TS#000   02/13/91 KSTOKK  Increase TS0MWLIN length from 93
//                           to 97.
// TS#000   03/05/91 DHUFFM  Increase TS0MWLEN for BOL increase
// TS#212   10/17/91 DHUFFM  Chg to right/left inquiry screens.
// TS#242   03/16/92 KSTOKK  Fix to carry map header info from
//                           left to right map and back again
//                           and give msg if no data available
//                           or invalid data found and allow
//                           fast path from map 2.
// TS#256   08/21/92 RCHINI  Fix transfer to TS0J after PF7 or
//                           PF8 are pressed and no more pages
//                           are available to display.
// TS#256   10/05/92 SFORD   Fix 'S' and pop-up window problems
// TS#260   12/07/92 TGIEBE  Disabled access to application
//                           TS0J when PF12 pressed and no
//                           shipment detail info selected.
// TS#000   11/07/96 JCARL1  Remove alarm from msg display.
// *********************
Program TS0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC3REC PC3REC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS0MW01 TS0MW01; // record
  TS0MW02 TS0MW02; // record
  TS7REC TS7REC; // record
  TSCREC TSCREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use YSSTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use TS0MM.TS0MM001,  // forms
      TS0MM.TS0MM002, 
      TS0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Schedule Inquiry.*/
     /* ------------------------------------------------------------*/

    set TSNREC empty; /* Initialize records*/
    set TS7REC empty;
    set TSCREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set ERRSQLCA empty;
    set SQLCA empty;
    set TS0MW01 empty; /* Initialize working storage*/
    set TS0MW02 empty; /* Initialize temporary storage*/
    set TS0MM001 initial; /* Initialize map output area*/

    TS0MW01.TS0MWSWR = "N"; /* Indicate request for data*/
    TS0MW01.TS0MWMXP = 10; /* set max number of passed shipment #s*/
    TS0MW01.TS0MWSWM = "1"; /* Indicate map 1*/

    TSWREC.TSWFRAPP = " "; /* Clear from application*/
    TSWREC.TSWINQFL = " "; /* Clear inquiry flag*/
    TS0MW01.TS0MWIXM = 1; /* set index*/
    while (TS0MW01.TS0MWIXM <= TS0MW01.TS0MWMXP) /* while le max pass lines*/
      TSWREC.TSWSHPID[TS0MWIXM] = 0; /* clear all pass fields*/
      TSWREC.TSWBOL[TS0MWIXM] = " ";
      TSWREC.TSWCARCD[TS0MWIXM] = " ";
      TSWREC.TSWCRAFT[TS0MWIXM] = " ";
      TSWREC.TSWSHPNB[TS0MWIXM] = " ";
      TSWREC.TSWORIG[TS0MWIXM] = " ";
      TSWREC.TSWDEST[TS0MWIXM] = " ";
      TSWREC.TSWXWHCD[TS0MWIXM] = " ";
      TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* incr index*/
    end

    goto TS0M001; /* Converse Shpmnt inquiry by*/
                                     /* destination*/


    TS0M001: TS0M001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment Inquiry by Destination.*/
     /* ------------------------------------------------------------*/

    goto TS0M001; /* Converse Shipment Inq by Destination*/


  end // end main
end // end TS0M

// Shpmnt inquiry by destination
Function TS0M001()
   /* ------------------------------------------------------------*/

                /* SHIPMENT CARRIER INQUIRY*/

   /* This is the main process used to display the schedule map.*/
   /* Processing always return to the top of this group.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0MW01.TS0MWSWR == "Y" /* If request for data is yes*/
   && TS0MW01.TS0MWPSW == "N") /* and no errors*/
    TS0M100(); /* Obtain the data to display*/
  end

  if (TS0MW01.TS0MWSWM != "2") /* If map 1 selected*/
    TS0M200(); /* Format and display the map*/
  else
    TS0M250(); /* Format and display map 2*/
  end

  TS0M300(); /* Check attention identifier*/

  TS0M400(); /* Reset fields to normal intensity*/

  if (TS0MW01.TS0MWSWM != "2") /* If map 1 selected*/
    TS0M500(); /* Verify map 1 entered data*/
  else
    TS0M550(); /* Verify map 2 entered data*/
  end

  TS0M600(); /* Process valid input request*/


end // end TS0M001

// Obtain the data to display
Function TS0M100()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move valid screen parameters to TSNREC fields.*/
   /* 2) Select sets and open cursors for DTRANS.VSHPHD02.*/
   /* 3) Fetch rows from SHIPMENT HEADER table.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Initialize records*/
  set TS7REC empty; /* Initialize records*/

  TSNREC.TSNBEGDT = TS0MW01.TSNBEGDT;
  TSNREC.TSNENDDT = TS0MW01.TSNENDDT;

  if (TS0MW01.TS0MWSWM != "2")
    TS7REC.TSEDEST = TS0MM001.TSEDEST; /* move in dest*/
  else
    TS7REC.TSEDEST = TS0MM002.TSEDEST; /* move in dest*/
  end

  if (TS0MW01.TS0MWSWM != "2")
    if (TS0MM001.XWHCD == " ") /* if whse is blank*/
      TS7REC.XWHCD = "*"; /* default field*/
    else
      TS7REC.XWHCD = TS0MM001.XWHCD;
    end
  else
    if (TS0MM002.XWHCD == " ") /* if whse is blank*/
      TS7REC.XWHCD = "*"; /* default field*/
    else
      TS7REC.XWHCD = TS0MM002.XWHCD;
    end
  end

  if (TS0MW01.TS0MWSWM != "2")
    if (TS0MM001.TS0MMYSS == " ") /* if stat is blank*/
      TS7REC.TSISTAT = "*"; /* default field*/
    else
      TS7REC.TSISTAT = TS0MM001.TS0MMYSS;
    end
  else
    if (TS0MM002.TS0MMYSS == " ") /* if stat is blank*/
      TS7REC.TSISTAT = "*"; /* default field*/
    else
      TS7REC.TSISTAT = TS0MM002.TS0MMYSS;
    end
  end

  if (TS0MW01.TS0MWSWM != "2")
    if (TS0MM001.XGPCD == " ") /* if gpc is blank*/
      TS7REC.XGPCD = "*"; /* default field*/
    else
      TS7REC.XGPCD = TS0MM001.XGPCD;
    end
  else
    if (TS0MM002.XGPCD == " ") /* if gpc is blank*/
      TS7REC.XGPCD = "*"; /* default field*/
    else
      TS7REC.XGPCD = TS0MM002.XGPCD;
    end
  end

  TS0M110(); /* Purge any temporary storage*/

  TS0M120(); /* Select set, open the cursor Vshphd02*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
    set TS0MW02 empty; /* Clear screen WS*/
    TS0MW01.TS0MWSW1 = "N"; /* Set end of selected set switch*/
    TS0MW01.TS0MWIXM = 1; /* Set counter for screen ws*/

    while (TS0MW01.TS0MWSW1 == "N") /* While data exists to fetch*/
      TS0M130(); /* Obtain data and format page*/
      if (TS0MW01.TS0MWIXM > 13) /* and a partial page exists*/
        TS0M140(); /* add that page to temp storage*/
      end
    end

    if (TS0MW01.TS0MWSW1 == "Y") /* If last fetch of detail done*/
      if (TS0MW01.TS0MWIXM > 1) /* and a partial page exists*/
        TS0M140(); /* add that page to temp storage*/
      end
      TS0MW01.TS0MWTSP = 1; /* initialize page number*/
      TS0MW01.TS0MWSWR = "N"; /* reset request for data switch*/
      TS0M150(); /* Close the shphd selected set*/
    end

  end

  if (TS0MW01.TA5TSQIX == 0) /* No data to display*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    TS0MW01.TS0MWPSW = "Y"; /* Set problem switch to 'Y'*/
    if (TS0MW01.TS0MWSWM == "1") /* On map 1*/
      TS0MW01.TS0MW-NO-DATA-MAP-1 = "Y"; /* Set no data map 1 to 'Y'*/
      TS0MM001.XXXPRCNM = "TS0M100"; /* Process name*/
    else
      if (TS0MW01.TS0MWSWM == "2") /* On map 2*/
        TS0MW01.TS0MW-NO-DATA-MAP-2 = "Y"; /* Set no data map 2 to 'Y'*/
        TS0MM002.XXXPRCNM = "TS0M100"; /* Process name*/
      end
    end
  else
    if (TS0MW01.TS0MWSWM == "1") /* On map 1*/
      TS0MW01.TS0MW-NO-DATA-MAP-1 = "N"; /* Set no data map 1 to 'N'*/
    else
      if (TS0MW01.TS0MWSWM == "2") /* On map 2*/
        TS0MW01.TS0MW-NO-DATA-MAP-2 = "N"; /* Set no data map 2 to 'N'*/
      end
    end
  end


end // end TS0M100

// Purge any temporary storage
Function TS0M110()
   /* ------------------------------------------------------------*/

              /* PURGE ANY TEMPORARY STORAGE*/

   /* 1) Purge any temporary storage for this application.*/

   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0M"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0M130"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0MM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0MW01.TS0MWTSP = 0; /* Reset current page number*/
  TS0MW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0M110

// Select (S4)    DTRANS.VSHPHD02
Function TS0M120()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VSHPHD02*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S4";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0M120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0MM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0MM001.XXXPRCNM = "TS0M120"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M120"; /* Process name*/
    TS0MW01.TS0MWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0M120

// Fetch  (F4)    DTRANS.VSHPHD02
Function TS0M130()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VSHPHD02*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "N4";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0MW01.TS0MWSW1 = "Y"; /* Set end switch*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0MW01.TS0MWPSW = "Y"; /* Indicate problem*/
      TS0MW01.TS0MWSW1 = "Y"; /* Set end switch*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0M130"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0MM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0MM001.XXXPRCNM = "TS0M130"; /* Process name*/
      TS0MM002.XXXPRCNM = "TS0M130"; /* Process name*/

    else

      TSWREC.XGPCD = TS7REC.XGPCD;

      TS0MW02.TSFSHPID[TS0MWIXM] = TS7REC.TSFSHPID;
      TS0MW02.TSFDESTE[TS0MWIXM] = TS7REC.TSFDESTE;
      TS0MW02.TSACARCD[TS0MWIXM] = TS7REC.TSACARCD;
      TS0MW02.TS5CRAFT[TS0MWIXM] = TS7REC.TS5CRAFT;
      TS0MW02.TSFSHPNB[TS0MWIXM] = TS7REC.TSFSHPNB;
      TS0MW02.TSEORIG[TS0MWIXM] = TS7REC.TSEORIG;
      TS0MW02.TSEDEST[TS0MWIXM] = TS7REC.TSEDEST;
      TS0MW02.XWHCD[TS0MWIXM] = TS7REC.XWHCD;
      TS0MW02.TSFBOL[TS0MWIXM] = TS7REC.TSFBOL;
      TS0MW02.TSHCNTNR[TS0MWIXM] = TS7REC.TSHCNTNR;
      if (TS7REC.TSHSTAT == "RC") /* If container received*/
        TS0MW02.YSSCD[TS0MWIXM] = TS7REC.TSHSTAT;
      else
        TS0MW02.YSSCD[TS0MWIXM] = TS7REC.TSISTAT;
      end
      TS0MW02.OP1CUOID[TS0MWIXM] = TS7REC.OP1CUOID;
      TS0MW02.OP1NORID[TS0MWIXM] = TS7REC.OP1NORID;
      TS0MW02.PC3PONBR[TS0MWIXM] = TS7REC.PC3PONBR;

      TS0MS05(); /* get the po id and order type*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If the row was found*/
        TS0MW01.TS0MWDAT = PC3REC.PC3POIDT;
        if (TSWREC.XGPCD == "03") /* If apparel*/
          TS0MW02.TS0MMPYR[TS0MWIXM] = PC3REC.PCFSECD;
        else
          TS0MW02.TS0MMPYR[TS0MWIXM] = TS0MW01.TS0MWPYY;
        end
        TS0MW02.TS0MMPMO[TS0MWIXM] = TS0MW01.TS0MWPM1;
        TS0MW02.TS0MMDMO[TS0MWIXM] = TS0MW01.TS0MWPM2;
        TS0MW02.FY1FCTYC[TS0MWIXM] = PC3REC.FY1FCTYC;
        TS0MW02.PC4ORTYP[TS0MWIXM] = PC3REC.PC4ORTYP;
      end

      TS0MW02.PC2CUXID[TS0MWIXM] = TS7REC.PC2CUXID;
      TS0MW02.SY1STNBR[TS0MWIXM] = TS7REC.SY1STNBR;
      TS0MW02.SY2CLRID[TS0MWIXM] = TS7REC.SY2CLRID;
      TS0MW02.XDMCD[TS0MWIXM] = TS7REC.XDMCD;


      /* ***************************************************/
       /* Determine the quanitity for the container*/
      /* ***************************************************/

      if (TS7REC.TSHNKCN in TS7REC.TSHNKCNX) /* Container number in array*/
        TS0MW02.TSISHPQT[TS0MWIXM] = TS7REC.TSISHPQX[sysVar.arrayIndex];
      end

      TS0MW02.TSIDETFL[TS0MWIXM] = TS7REC.TSIDETFL;

      TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* increment counter*/

    end
  end


end // end TS0M130

// Add page to temporary storage
Function TS0M140()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TS0MW02.TS0MWLEN = 1365; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0M"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0M140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0MM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0MM001.XXXPRCNM = "TS0M140"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  TS0MW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TS0MW01.TS0MWIXM = 1; /* Reset display line number*/

  set TS0MW02 empty; /* Clear temporary storage record*/


end // end TS0M140

// Close  (C4)    DTRANS.VSHPHD02
Function TS0M150()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VSHPHD01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "C4";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0M150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0MM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0MM001.XXXPRCNM = "TS0M150"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M150"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0MW01.TS0MWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0M150

// Format and display    TS0MM001
Function TS0M200()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0MW01.TS0MWPSW == "N") /* No errors found*/

    set TS0MM001 initial; /* clear the map*/
    set TS0MM002 initial; /* clear the map*/

    /* Move in left screen heading data*/

    TS0MM001.TSEDEST = TS0MW01.TSEDEST;
    TS0MM001.XXXCITY = TS0MW01.XXXCITY;
    TS0MM001.XWHCD = TS0MW01.XWHCD;
    TS0MM001.XWHABRV = TS0MW01.XWHABRV;
    TS0MM001.TS0MMYSS = TS0MW01.YSSCD;
    TS0MM001.YSSDESC = TS0MW01.YSSDESC;
    TS0MM001.XGPCD = TS0MW01.XGPCD;
    TS0MM001.XGPDESC = TS0MW01.XGPDESC;
    TS0MM001.TSNBEGDT = TS0MW01.TS0MWBDT;
    TS0MM001.TSNENDDT = TS0MW01.TS0MWEDT;

  end

  if (TS0MW01.TS0MWPSW == " ") /* first time thru and sw not set*/

    if (TS0MW01.TS0MWBDT == " ") /* if beginning date is blank*/
      XX0XS01(); /* call date routine*/
      TS0MW01.TS0MWMYY = XX0XW01.XX0XWYY; /* set date to mmddyy*/
      TS0MW01.TS0MWMMM = XX0XW01.XX0XWMM;
      TS0MW01.TS0MWMDD = XX0XW01.XX0XWDD;
    end

    if (TS0MW01.TS0MWBDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0MM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = -9; /* subtr 9 days from todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0MM001.TSNBEGDT = TA2REC.TA2GRGA; /* move end date*/
        TS0MM002.TSNBEGDT = TA2REC.TA2GRGA; /* move end date*/
        TS0MW01.TS0MWBDT = TA2REC.TA2GRGA;
        TS0MW01.TSNBEGDT = TA2REC.TA2GRGGN;
      end
    end

    if (TS0MW01.TS0MWEDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0MM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = 22; /* add 22 days to todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0MM001.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0MM002.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0MW01.TS0MWEDT = TA2REC.TA2GRGA;
        TS0MW01.TSNENDDT = TA2REC.TA2GRGGN;
      end
    end

  end

  if (TS0MW01.TS0MWPSW == "N") /* No errors found*/

    TS0M210(); /* Format the data on the page*/

    if (TS0MM001.TSFDESTE[1] != " ") /* if detail does exist*/
      set TS0MM001.TS0MMSEL[1] cursor; /* set cursor to carrier code*/
    end

  end

  TS0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0MM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* IF EZEMNO NE 0;                  /* Error message to display*/
  /* SET TS0MM001 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  converse TS0MM001 ;

  TS0MW01.TS0MWPSW = "N"; /* reset problem switch*/
  TS0MW01.TS0MW-MAP1-INVALID-DATA = "N"; /* reset problem switch*/
  TS0MW01.TS0MW-MAP2-INVALID-DATA = "N"; /* reset problem switch*/

  TS0M220(); /* Check for ? inquiry by user*/

   /* Move left screen heading data into right screen heading*/

  TS0MM002.TSEDEST = TS0MM001.TSEDEST;
  TS0MM002.XXXCITY = TS0MM001.XXXCITY;
  TS0MM002.XWHCD = TS0MM001.XWHCD;
  TS0MM002.XWHABRV = TS0MM001.XWHABRV;
  TS0MM002.TS0MMYSS = TS0MM001.TS0MMYSS;
  TS0MM002.YSSDESC = TS0MM001.YSSDESC;
  TS0MM002.XGPCD = TS0MM001.XGPCD;
  TS0MM002.XGPDESC = TS0MM001.XGPDESC;
  TS0MM002.TSNBEGDT = TS0MM001.TSNBEGDT;
  TS0MM002.TSNENDDT = TS0MM001.TSNENDDT;

end // end TS0M200

// Format the selected   TS0MM001
Function TS0M210()
   /* ------------------------------------------------------------*/

               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating first leg fields on map.*/
      /* - supress all generic carrier code fields.*/

   /* ------------------------------------------------------------*/

  if (TS0MW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TS0M211(); /* Obtain temporary storage page*/

    set TS0MM001.TS0MMPGL skip; /* Display "PAGE" literal*/
    set TS0MM001.TS0MMOFL skip; /* Display "OF" literal*/

    TS0MM001.TS0MWTSP = TS0MW01.TS0MWTSP; /* Current page number*/
    TS0MM001.TA5TSQIX = TS0MW01.TA5TSQIX; /* Highest page number*/

    TS0MW01.TS0MWIXM = 1; /* Initialize line indexes*/
    TS0MW01.TS0MWIX2 = 0;

      /* move in first line of screen data*/

    TS0MW01.TS0MWWDT = TS0MW02.TSFDESTE[TS0MWIXM];
                                   /* make date mmddyy*/
    TS0MW01.TS0MWMMM = TS0MW01.TS0MWWMM; /* month*/
    TS0MW01.TS0MWMDD = TS0MW01.TS0MWWDD; /* day*/
    TS0MW01.TS0MWMYY = TS0MW01.TS0MWWYY; /* year*/
    TS0MM001.TSFDESTE[TS0MWIXM] = TS0MW01.TS0MWMDT;

    TS0MM001.TSACARCD[TS0MWIXM] = TS0MW02.TSACARCD[TS0MWIXM];
    TS0MM001.TS5CRAFT[TS0MWIXM] = TS0MW02.TS5CRAFT[TS0MWIXM];
    TS0MM001.TSFBOL[TS0MWIXM] = TS0MW02.TSFBOL[TS0MWIXM];
    TS0MM001.TSHCNTNR[TS0MWIXM] = TS0MW02.TSHCNTNR[TS0MWIXM];
    TS0MM001.PC2CUXID[TS0MWIXM] = TS0MW02.PC2CUXID[TS0MWIXM];
    TS0MM001.SY1STNBR[TS0MWIXM] = TS0MW02.SY1STNBR[TS0MWIXM];
    TS0MM001.SY2CLRID[TS0MWIXM] = TS0MW02.SY2CLRID[TS0MWIXM];
    TS0MM001.TSISTAT[TS0MWIXM] = TS0MW02.YSSCD[TS0MWIXM];
    TS0MM001.TSISHPQT[TS0MWIXM] = TS0MW02.TSISHPQT[TS0MWIXM];
    if (TS0MW02.TSIDETFL[TS0MWIXM] == "Y")
      TS0MM001.TSIDETFL[TS0MWIXM] = "*";
    else
      TS0MM001.TSIDETFL[TS0MWIXM] = " ";
    end

    set TS0MM001.TS0MMSEL[TS0MWIXM] normal; /* display the selection*/

    TS0MW01.TS0MWIXW = 1; /* set index*/
    while (TS0MW01.TS0MWIXW <= TS0MW01.TS0MWMXP) /* until end of array*/
      if (TS0MW02.TSFSHPID[TS0MWIXM] == TS0MW01.TSWSHPID[TS0MWIXW])
        TS0MM001.TS0MMSEL[TS0MWIXM] = "S"; /* move s to field*/
        TS0MW01.TS0MWIXW = TS0MW01.TS0MWMXP + 1; /* end loop*/
      else
        TS0MW01.TS0MWIXW = TS0MW01.TS0MWIXW + 1; /* increment index*/
      end
    end

    TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* Increment line indexes*/
    TS0MW01.TS0MWIX2 = TS0MW01.TS0MWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0m212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0m210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0MW01.TS0MWIXM <= 13 /* Until end of lines*/
     && TS0MW02.TSACARCD[TS0MWIXM] != " ") /* and lines exist*/

      TS0MW01.TS0MWWDT = TS0MW02.TSFDESTE[TS0MWIXM];
      TS0MW01.TS0MWMMM = TS0MW01.TS0MWWMM;
      TS0MW01.TS0MWMDD = TS0MW01.TS0MWWDD;
      TS0MW01.TS0MWMYY = TS0MW01.TS0MWWYY;
      TS0MM001.TSFDESTE[TS0MWIXM] = TS0MW01.TS0MWMDT;

      TS0MM001.TSACARCD[TS0MWIXM] = TS0MW02.TSACARCD[TS0MWIXM];
      TS0MM001.TS5CRAFT[TS0MWIXM] = TS0MW02.TS5CRAFT[TS0MWIXM];
      TS0MM001.TSFBOL[TS0MWIXM] = TS0MW02.TSFBOL[TS0MWIXM];
      TS0MM001.TSHCNTNR[TS0MWIXM] = TS0MW02.TSHCNTNR[TS0MWIXM];
      TS0MM001.TSISTAT[TS0MWIXM] = TS0MW02.YSSCD[TS0MWIXM];
      TS0MM001.PC2CUXID[TS0MWIXM] = TS0MW02.PC2CUXID[TS0MWIXM];
      TS0MM001.SY1STNBR[TS0MWIXM] = TS0MW02.SY1STNBR[TS0MWIXM];
      TS0MM001.SY2CLRID[TS0MWIXM] = TS0MW02.SY2CLRID[TS0MWIXM];
      TS0MM001.TSISHPQT[TS0MWIXM] = TS0MW02.TSISHPQT[TS0MWIXM];
      if (TS0MW02.TSIDETFL[TS0MWIXM] == "Y")
        TS0MM001.TSIDETFL[TS0MWIXM] = "*";
      else
        TS0MM001.TSIDETFL[TS0MWIXM] = " ";
      end

      if (TS0MW02.TSFSHPID[TS0MWIXM] == TS0MW02.TSFSHPID[TS0MWIX2])
         /* continue on*/
        if (TS0MW02.TSFDESTE[TS0MWIXM] == TS0MW02.TSFDESTE[TS0MWIX2])
          TS0MM001.TSFDESTE[TS0MWIXM] = " "; /* move ' ' to etat*/
          TS0M212(); /* continue repeating supression*/
        end
      end

      if (TS0MM001.TSFDESTE[TS0MWIXM] != " ") /* if eta exists on map*/
        set TS0MM001.TS0MMSEL[TS0MWIXM] normal; /* display the selection*/

        TS0MW01.TS0MWIXW = 1; /* set index*/
        while (TS0MW01.TS0MWIXW <= TS0MW01.TS0MWMXP) /* until end of array*/
          if (TS0MW02.TSFSHPID[TS0MWIXM] == TS0MW01.TSWSHPID[TS0MWIXW])
            TS0MM001.TS0MMSEL[TS0MWIXM] = "S"; /* move s to field*/
            TS0MW01.TS0MWIXW = TS0MW01.TS0MWMXP + 1; /* end loop*/
          else
            TS0MW01.TS0MWIXW = TS0MW01.TS0MWIXW + 1; /* increment index*/
          end
        end

      end

      TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* Increment line index*/
      TS0MW01.TS0MWIX2 = TS0MW01.TS0MWIX2 + 1;
    end
  end


end // end TS0M210

// Read temporary storage page
Function TS0M211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/

   /* ------------------------------------------------------------*/

  TS0MW02.TS0MWLEN = 1365; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0M"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0MW01.TS0MWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0MW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0M211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0MM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0MM001.XXXPRCNM = "TS0M211"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M211"; /* Process name*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0M211

// Continue supression nested IF
Function TS0M212()
   /* ------------------------------------------------------------*/
               /* CONTINUE SUPRESSION OF NESTED IF*/

   /* 1) This process is used in order to help maintain better*/
      /* readability in TS0m210.  The nested IF for the necessary*/
      /* screen suppression is very large, therefore causing poor*/
      /* indentation of lines.  The indentation is still poor*/
      /* within this process but the size is of TS0m210 is kept*/
      /* at a much more reasonable level.*/

   /* ------------------------------------------------------------*/

  if (TS0MW02.TSACARCD[TS0MWIXM] == TS0MW02.TSACARCD[TS0MWIX2])
    TS0MM001.TSACARCD[TS0MWIXM] = " "; /* move ' ' to carc*/
    if (TS0MW02.TS5CRAFT[TS0MWIXM] == TS0MW02.TS5CRAFT[TS0MWIX2])
      TS0MM001.TS5CRAFT[TS0MWIXM] = " "; /* move ' ' to craft*/
      TS0MM002.TS5CRAFT[TS0MWIXM] = " "; /* move ' ' to craft*/
      if (TS0MW02.TSFSHPNB[TS0MWIXM] == TS0MW02.TSFSHPNB[TS0MWIX2])
        TS0MM002.TSFSHPNB[TS0MWIXM] = " "; /* move ' ' to shp nbr*/
        if (TS0MW02.XWHCD[TS0MWIXM] == TS0MW02.XWHCD[TS0MWIX2])
          TS0MM002.TS0MMWHS[TS0MWIXM] = " "; /* move ' ' to whse*/
          if (TS0MW02.TSFBOL[TS0MWIXM] == TS0MW02.TSFBOL[TS0MWIX2])
            TS0MM001.TSFBOL[TS0MWIXM] = " "; /* move ' ' to bol*/
            if (TS0MW02.TSHCNTNR[TS0MWIXM] == TS0MW02.TSHCNTNR[TS0MWIX2])
              TS0MM001.TSHCNTNR[TS0MWIXM] = " "; /* move ' ' to cntnr*/
            end
          end
        end
      end
    end
  end


end // end TS0M212

// Check for ? inquiry by user
Function TS0M220()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0MM001.XWHCD == "?" /* if any ? entered*/
   || TS0MM001.TS0MMYSS == "?"
   || TS0MM001.XGPCD == "?" 
   || TS0MM002.XWHCD == "?" /* if any ? entered*/
   || TS0MM002.TS0MMYSS == "?"
   || TS0MM002.XGPCD == "?")

    if (TS0MM001.XWHCD == "?" /* if ? in warehouse field*/
     || TS0MM002.XWHCD == "?") /* if ? in warehouse field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 WAREHOUSE     ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* perform warehouse window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0MM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
        TS0MM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* move name*/
        TS0MM002.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
        TS0MM002.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* move name*/
      else
        TS0MM001.XWHCD = " "; /* clear fields*/
        TS0MM001.XWHABRV = " ";
        TS0MM002.XWHCD = " "; /* clear fields*/
        TS0MM002.XWHABRV = " ";
      end
    end

    if (TS0MM001.TS0MMYSS == "?" /* if ? in ship stat field*/
     || TS0MM002.TS0MMYSS == "?") /* if ? in ship stat field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              SHIPMENT STATUS  ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSS01(); /* perform ship stat window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the ship status**/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0MM001.TS0MMYSS = YSSTBL.YSSCD[XX0XWPIX]; /* move code*/
        TS0MM001.YSSDESC = YSSTBL.YSSDESC[XX0XWPIX]; /* move name*/
        TS0MM002.TS0MMYSS = YSSTBL.YSSCD[XX0XWPIX]; /* move code*/
        TS0MM002.YSSDESC = YSSTBL.YSSDESC[XX0XWPIX]; /* move name*/
      else
        TS0MM001.TS0MMYSS = " "; /* clear fields*/
        TS0MM001.YSSDESC = " ";
        TS0MM002.TS0MMYSS = " "; /* clear fields*/
        TS0MM002.YSSDESC = " ";
      end
    end

    if (TS0MM001.XGPCD == "?" /* if ? in gpc field*/
     || TS0MM002.XGPCD == "?") /* if ? in gpc field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                    GPC        ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0MM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        TS0MM001.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
        TS0MM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        TS0MM002.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX]; /* move name*/
      else
        TS0MM001.XGPCD = " "; /* clear fields*/
        TS0MM001.XGPDESC = " ";
        TS0MM002.XGPCD = " "; /* clear fields*/
        TS0MM002.XGPDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/
    converseLib.clearScreen();
     /* restore the original map*/

    TS0MW01.TS0MWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0M220

// Format and display    TS0MM002
Function TS0M250()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0MW01.TS0MWPSW == "N") /* No errors found*/

    set TS0MM002 initial; /* clear the map*/
    set TS0MM001 initial; /* clear the map*/

    /* Move in right screen heading data*/

    TS0MM002.TSEDEST = TS0MW01.TSEDEST;
    TS0MM002.XXXCITY = TS0MW01.XXXCITY;
    TS0MM002.XWHCD = TS0MW01.XWHCD;
    TS0MM002.XWHABRV = TS0MW01.XWHABRV;
    TS0MM002.TS0MMYSS = TS0MW01.YSSCD;
    TS0MM002.YSSDESC = TS0MW01.YSSDESC;
    TS0MM002.XGPCD = TS0MW01.XGPCD;
    TS0MM002.XGPDESC = TS0MW01.XGPDESC;
    TS0MM002.TSNBEGDT = TS0MW01.TS0MWBDT;
    TS0MM002.TSNENDDT = TS0MW01.TS0MWEDT;

  end

  if (TS0MW01.TS0MWPSW == " ") /* first time thru and sw not set*/

    if (TS0MW01.TS0MWBDT == " ") /* if beginning date is blank*/
      XX0XS01(); /* call date routine*/
      TS0MW01.TS0MWMYY = XX0XW01.XX0XWYY; /* set date to mmddyy*/
      TS0MW01.TS0MWMMM = XX0XW01.XX0XWMM;
      TS0MW01.TS0MWMDD = XX0XW01.XX0XWDD;
    end

    if (TS0MW01.TS0MWBDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0MM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = -9; /* subtr 9 days from todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0MM002.TSNBEGDT = TA2REC.TA2GRGA; /* move end date*/
        TS0MM001.TSNBEGDT = TA2REC.TA2GRGA; /* move end date*/
        TS0MW01.TS0MWBDT = TA2REC.TA2GRGA;
        TS0MW01.TSNBEGDT = TA2REC.TA2GRGGN;
      end
    end

    if (TS0MW01.TS0MWEDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0MM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = 22; /* add 22 days to todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0MM002.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0MM001.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0MW01.TS0MWEDT = TA2REC.TA2GRGA;
        TS0MW01.TSNENDDT = TA2REC.TA2GRGGN;
      end
    end

  end

  if (TS0MW01.TS0MWPSW == "N") /* No errors found*/

    TS0M260(); /* Format the data on the page*/

    if (TS0MM002.TSFDESTE[1] != " ") /* if detail does exist*/
      set TS0MM002.TS0MMSEL[1] cursor; /* set cursor to carrier code*/
    end

  end

  TS0MM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0MM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* IF EZEMNO NE 0;                  /* Error message to display*/
  /* SET TS0MM002 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  converse TS0MM002 ;

  TS0MW01.TS0MWPSW = "N"; /* reset problem switch*/
  TS0MW01.TS0MW-MAP1-INVALID-DATA = "N"; /* reset problem switch*/
  TS0MW01.TS0MW-MAP2-INVALID-DATA = "N"; /* reset problem switch*/

  TS0M220(); /* Check for ? inquiry by user*/

   /* Move right screen heading data into left screen heading*/

  TS0MM001.TSEDEST = TS0MM002.TSEDEST;
  TS0MM001.XXXCITY = TS0MM002.XXXCITY;
  TS0MM001.XWHCD = TS0MM002.XWHCD;
  TS0MM001.XWHABRV = TS0MM002.XWHABRV;
  TS0MM001.TS0MMYSS = TS0MM002.TS0MMYSS;
  TS0MM001.YSSDESC = TS0MM002.YSSDESC;
  TS0MM001.XGPCD = TS0MM002.XGPCD;
  TS0MM001.XGPDESC = TS0MM002.XGPDESC;
  TS0MM001.TSNBEGDT = TS0MM002.TSNBEGDT;
  TS0MM001.TSNENDDT = TS0MM002.TSNENDDT;

end // end TS0M250

// Format the selected   TS0MM002
Function TS0M260()
   /* ------------------------------------------------------------*/

               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating first leg fields on map.*/
      /* - supress all generic carrier code fields.*/

   /* ------------------------------------------------------------*/

  if (TS0MW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TS0M211(); /* Obtain temporary storage page*/

    set TS0MM002.TS0MMPGL skip; /* Display "PAGE" literal*/
    set TS0MM002.TS0MMOFL skip; /* Display "OF" literal*/

    TS0MM002.TS0MWTSP = TS0MW01.TS0MWTSP; /* Current page number*/
    TS0MM002.TA5TSQIX = TS0MW01.TA5TSQIX; /* Highest page number*/

    TS0MW01.TS0MWIXM = 1; /* Initialize line indexes*/
    TS0MW01.TS0MWIX2 = 0;

      /* move in first line of screen data*/

    TS0MW01.TS0MWWDT = TS0MW02.TSFDESTE[TS0MWIXM];
                                   /* make date mmddyy*/
    TS0MW01.TS0MWMMM = TS0MW01.TS0MWWMM; /* month*/
    TS0MW01.TS0MWMDD = TS0MW01.TS0MWWDD; /* day*/
    TS0MW01.TS0MWMYY = TS0MW01.TS0MWWYY; /* year*/
    TS0MM002.TSFDESTE[TS0MWIXM] = TS0MW01.TS0MWMDT;

    TS0MM002.TS5CRAFT[TS0MWIXM] = TS0MW02.TS5CRAFT[TS0MWIXM];
    TS0MM002.TSFSHPNB[TS0MWIXM] = TS0MW02.TSFSHPNB[TS0MWIXM];
    TS0MM002.TS0MMWHS[TS0MWIXM] = TS0MW02.XWHCD[TS0MWIXM];
    TS0MM002.PC2CUXID[TS0MWIXM] = TS0MW02.PC2CUXID[TS0MWIXM];
    TS0MM002.TS0MMPOI[TS0MWIXM] = TS0MW02.TS0MWPOI[TS0MWIXM];
    TS0MM002.PC4ORTYP[TS0MWIXM] = TS0MW02.PC4ORTYP[TS0MWIXM];
    TS0MM002.PC3PONBR[TS0MWIXM] = TS0MW02.PC3PONBR[TS0MWIXM];
    if (TS0MW02.OP1NORID[TS0MWIXM] > 0)
      TS0MW01.TS0MWSOI = TS0MW02.OP1NORID[TS0MWIXM] / 1000;
      TS0MW01.TS0MWSOI = TS0MW01.TS0MWSOI + TS0MW02.OP1CUOID[TS0MWIXM];
      TS0MM002.TS0MMSOI[TS0MWIXM] = TS0MW01.TS0MWSOI;
    else
      TS0MM002.TS0MMSOI[TS0MWIXM] = 0;
    end
    TS0MM002.SY1STNBR[TS0MWIXM] = TS0MW02.SY1STNBR[TS0MWIXM];
    TS0MM002.SY2CLRID[TS0MWIXM] = TS0MW02.SY2CLRID[TS0MWIXM];
    TS0MM002.XDMCD[TS0MWIXM] = TS0MW02.XDMCD[TS0MWIXM];
    TS0MM002.TSISHPQT[TS0MWIXM] = TS0MW02.TSISHPQT[TS0MWIXM];

    set TS0MM002.TS0MMSEL[TS0MWIXM] normal; /* display the selection*/

    TS0MW01.TS0MWIXW = 1; /* set index*/
    while (TS0MW01.TS0MWIXW <= TS0MW01.TS0MWMXP) /* until end of array*/
      if (TS0MW02.TSFSHPID[TS0MWIXM] == TS0MW01.TSWSHPID[TS0MWIXW])
        TS0MM002.TS0MMSEL[TS0MWIXM] = "S"; /* move s to field*/
        TS0MW01.TS0MWIXW = TS0MW01.TS0MWMXP + 1; /* end loop*/
      else
        TS0MW01.TS0MWIXW = TS0MW01.TS0MWIXW + 1; /* increment index*/
      end
    end

    TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* Increment line indexes*/
    TS0MW01.TS0MWIX2 = TS0MW01.TS0MWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0m212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0m210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0MW01.TS0MWIXM <= 13 /* Until end of lines*/
     && TS0MW02.TSACARCD[TS0MWIXM] != " ") /* and lines exist*/

      TS0MW01.TS0MWWDT = TS0MW02.TSFDESTE[TS0MWIXM];
                                     /* make date mmddyy*/
      TS0MW01.TS0MWMMM = TS0MW01.TS0MWWMM; /* month*/
      TS0MW01.TS0MWMDD = TS0MW01.TS0MWWDD; /* day*/
      TS0MW01.TS0MWMYY = TS0MW01.TS0MWWYY; /* year*/
      TS0MM002.TSFDESTE[TS0MWIXM] = TS0MW01.TS0MWMDT;

      TS0MM002.TS5CRAFT[TS0MWIXM] = TS0MW02.TS5CRAFT[TS0MWIXM];
      TS0MM002.TSFSHPNB[TS0MWIXM] = TS0MW02.TSFSHPNB[TS0MWIXM];
      TS0MM002.TS0MMWHS[TS0MWIXM] = TS0MW02.XWHCD[TS0MWIXM];
      TS0MM002.TS0MMPOI[TS0MWIXM] = TS0MW02.TS0MWPOI[TS0MWIXM];
      TS0MM002.PC4ORTYP[TS0MWIXM] = TS0MW02.PC4ORTYP[TS0MWIXM];
      TS0MM002.PC3PONBR[TS0MWIXM] = TS0MW02.PC3PONBR[TS0MWIXM];
      if (TS0MW02.OP1NORID[TS0MWIXM] > 0)
        TS0MW01.TS0MWSOI = TS0MW02.OP1NORID[TS0MWIXM] / 1000;
        TS0MW01.TS0MWSOI = TS0MW01.TS0MWSOI + TS0MW02.OP1CUOID[TS0MWIXM];
        TS0MM002.TS0MMSOI[TS0MWIXM] = TS0MW01.TS0MWSOI;
      else
        TS0MM002.TS0MMSOI[TS0MWIXM] = 0;
      end
      TS0MM002.PC2CUXID[TS0MWIXM] = TS0MW02.PC2CUXID[TS0MWIXM];
      TS0MM002.SY1STNBR[TS0MWIXM] = TS0MW02.SY1STNBR[TS0MWIXM];
      TS0MM002.SY2CLRID[TS0MWIXM] = TS0MW02.SY2CLRID[TS0MWIXM];
      TS0MM002.XDMCD[TS0MWIXM] = TS0MW02.XDMCD[TS0MWIXM];
      TS0MM002.TSISHPQT[TS0MWIXM] = TS0MW02.TSISHPQT[TS0MWIXM];

      if (TS0MW02.TSFSHPID[TS0MWIXM] == TS0MW02.TSFSHPID[TS0MWIX2])
         /* continue on*/
        if (TS0MW02.TSFDESTE[TS0MWIXM] == TS0MW02.TSFDESTE[TS0MWIX2])
          TS0MM002.TSFDESTE[TS0MWIXM] = " "; /* move ' ' to etat*/
          TS0M212(); /* continue repeating supression*/
        end
      end

      if (TS0MM002.TSFDESTE[TS0MWIXM] != " ") /* if eta exists on map*/
        set TS0MM002.TS0MMSEL[TS0MWIXM] normal; /* display the selection*/

        TS0MW01.TS0MWIXW = 1; /* set index*/
        while (TS0MW01.TS0MWIXW <= TS0MW01.TS0MWMXP) /* until end of array*/
          if (TS0MW02.TSFSHPID[TS0MWIXM] == TS0MW01.TSWSHPID[TS0MWIXW])
            TS0MM002.TS0MMSEL[TS0MWIXM] = "S"; /* move s to field*/
            TS0MW01.TS0MWIXW = TS0MW01.TS0MWMXP + 1; /* end loop*/
          else
            TS0MW01.TS0MWIXW = TS0MW01.TS0MWIXW + 1; /* increment index*/
          end
        end

      end

      TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* Increment line index*/
      TS0MW01.TS0MWIX2 = TS0MW01.TS0MWIX2 + 1;
    end
  end


end // end TS0M260

// Check attention identifier
Function TS0M300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If PF16 pressed, exit to published schedule application.*/
   /* 6) If PF17 pressed, exit to projected schedule application.*/
   /* 7) If any AI pressed other than ENTER, PF7, or PF8*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    TS0MW01.TS0MWPSW = "N"; /* Reset problem switch*/
    TS0MW01.TS0MWSWR = "N"; /* Reset request for data*/
    TS0MM001.XXXPRCNM = "TS0M300"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0MM001.CATOAP > " " /* FAST PATH was requested from map 1*/
   || TS0MM002.CATOAP > " ") /* FAST PATH was requested from map 2*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (TS0MW01.TS0MWSWM == "1") /* If already map 1*/
        COMMAREA.CATOAP = TS0MM001.CATOAP; /* TO application*/
        COMMAREA.CAITEM = TS0MM001.CAITEM; /* Application data*/
      else
        if (TS0MW01.TS0MWSWM == "2") /* If already map 2*/
          COMMAREA.CATOAP = TS0MM002.CATOAP; /* TO application*/
          COMMAREA.CAITEM = TS0MM002.CAITEM; /* Application data*/
        end
      end
      COMMAREA.CAUSERA = " "; /* clear user area*/
      TS0M110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
      if (TS0MW01.TSEDEST != " " /* If keys exist*/
       && TS0MW01.TS0MWBDT != " "
       && TS0MW01.TS0MWEDT != " ")
        TS0MW01.TS0MWSWR = "Y"; /* set request for data to yes*/
      end
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0MW01.TS0MWPSW = "Y"; /* Indicate problem*/
    end
    if (TS0MW01.TS0MWSWM == "1") /* If already map 1*/
      set TS0MM001.CATOAP cursor, modified, bold; /* Highlight*/
      TS0MM001.XXXPRCNM = "TS0M200"; /* Process name*/
    else
      if (TS0MW01.TS0MWSWM == "2") /* If already map 2*/
        set TS0MM002.CATOAP cursor, modified, bold; /* Highlight*/
        TS0MM002.XXXPRCNM = "TS0M200"; /* Process name*/
      end
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS0M110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0MM001.XXXPRCNM = "TS0K300"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0K300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0MM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS0M110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0MM001.XXXPRCNM = "TS0M300"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf10) /* Map 1 requested*/
    if (TS0MW01.TS0MWSWM == "1") /* If already map 1*/
      TS0MW01.TS0MWPSW = "Y"; /* Indicate problem*/
      TS0MM001.XXXPRCNM = "TS0M300";
      converseLib.validationFailed(4);
      exit stack;
    else
      TS0MW01.TS0MWSWM = "1"; /* Indicate map 1*/
    end
  end

  if (converseVar.eventKey is pf11) /* Map 2 requested*/
    if (TS0MW01.TS0MWSWM == "2") /* If already map 2*/
      TS0MW01.TS0MWPSW = "Y"; /* Indicate problem*/
      TS0MM002.XXXPRCNM = "TS0M300";
      converseLib.validationFailed(4);
      exit stack;
    else
      TS0MW01.TS0MWSWM = "2"; /* Indicate map 2;*/
    end
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not scroll request*/
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf10  
   && converseVar.eventKey not pf11  
   && converseVar.eventKey not pf12)
    TS0MM001.XXXPRCNM = "TS0M300"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M300"; /* Process name*/
    TS0MW01.TS0MWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0M300

// Reset highlighted fields
Function TS0M400()
   /* ------------------------------------------------------------*/
                /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0MM001.TSEDEST initialAttributes; /* Reset all fields*/
  set TS0MM001.XWHCD initialAttributes;
  set TS0MM001.TS0MMYSS initialAttributes;
  set TS0MM001.XGPCD initialAttributes;
  set TS0MM001.TSNBEGDT initialAttributes;
  set TS0MM001.TSNENDDT initialAttributes;

  set TS0MM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0MM001.CAITEM initialAttributes; /* Commarea application data*/

  set TS0MM002.TSEDEST initialAttributes; /* Reset all fields*/
  set TS0MM002.XWHCD initialAttributes;
  set TS0MM002.TS0MMYSS initialAttributes;
  set TS0MM002.XGPCD initialAttributes;
  set TS0MM002.TSNBEGDT initialAttributes;
  set TS0MM002.TSNENDDT initialAttributes;

  set TS0MM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0MM002.CAITEM initialAttributes; /* Commarea application data*/

  TS0MW01.TS0MWIXM = 1; /* Initialize line index*/
  while (TS0MW01.TS0MWIXM <= 13) /* Until end of lines*/
    if (TS0MM001.TSFDESTE[TS0MWIXM] != " ") /* if eta exists*/
      set TS0MM001.TS0MMSEL[TS0MWIXM] normal; /* Reset select flag*/
    end
    if (TS0MM002.TSFDESTE[TS0MWIXM] != " ") /* if eta exists*/
      set TS0MM002.TS0MMSEL[TS0MWIXM] normal; /* Reset select flag*/
    end
    TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* Increment line index*/
  end


end // end TS0M400

// Verify Entered Data   TS0MM001
Function TS0M500()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0MM001.CAITEM > " " /* Application data was entered*/
   || TS0MM002.CAITEM > " ") /* Application data was entered*/
    set TS0MM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate error message*/
    TS0MM001.XXXPRCNM = "TS0M500"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M500"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0M510(); /* Verify scroll request*/
      TS0M520(); /* Verify data entered*/
    else
      if (TS0MM001.TSEDEST == " " /* If no data entered*/
       && TS0MM001.XWHCD == " "   
       && TS0MM001.TS0MMYSS == " "
       && TS0MM001.XGPCD == " "   
       && TS0MM001.TSNBEGDT == " "
       && TS0MM001.TSNENDDT == " ")

        TS0M110(); /* purge temporary storage*/
        set TS0MW02 empty; /* empty screen ws*/

        TS0MW01.TS0MWIXM = 1; /* set index to 1*/
        while (TS0MW01.TS0MWIXM <= TS0MW01.TS0MWMXP) /* until end array*/
          TS0MW01.TSWSHPID[TS0MWIXM] = 0; /* clear fields*/
          TS0MW01.TSWBOL[TS0MWIXM] = " ";
          TS0MW01.TSWCARCD[TS0MWIXM] = " ";
          TS0MW01.TSWCRAFT[TS0MWIXM] = " ";
          TS0MW01.TSWSHPNB[TS0MWIXM] = " ";
          TS0MW01.TSWORIG[TS0MWIXM] = " ";
          TS0MW01.TSWDEST[TS0MWIXM] = " ";
          TS0MW01.TSWXWHCD[TS0MWIXM] = " ";
          TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* increment index*/
        end

        TS0MW01.TSEDEST = " "; /* Save the keys*/
        TS0MW01.XWHCD = " ";
        TS0MW01.YSSCD = " ";
        TS0MW01.XGPCD = " ";
        TS0MW01.TS0MWBDT = " ";
        TS0MW01.TS0MWEDT = " ";
        set TS0MM001 initial; /* clear map*/
        set TS0MM002 initial; /* clear map*/
        TS0MW01.TS0MWPSW = "Y"; /* indicate error message*/
        set TS0MM001.TSEDEST cursor; /* set cursor*/
        converseLib.validationFailed(34); /* data must be entered*/
        TS0MM001.XXXPRCNM = "TS0M500"; /* process name*/
        TS0MM002.XXXPRCNM = "TS0M500"; /* process name*/
      else
        if (TS0MM001.TSEDEST != TS0MW01.TSEDEST /* If any new data entered*/
         || TS0MM001.XWHCD != TS0MW01.XWHCD     
         || TS0MM001.TS0MMYSS != TS0MW01.YSSCD  
         || TS0MM001.XGPCD != TS0MW01.XGPCD     
         || TS0MM001.TSNBEGDT != TS0MW01.TS0MWBDT
         || TS0MM001.TSNENDDT != TS0MW01.TS0MWEDT
         || TS0MW01.TS0MW-NO-DATA-MAP-1 == "Y"  
         || TS0MW01.TS0MW-NO-DATA-MAP-2 == "Y"  
         || TS0MW01.TS0MW-MAP1-INVALID-DATA == "Y"
         || TS0MW01.TS0MW-MAP2-INVALID-DATA == "Y")

          TS0M110(); /* purge temporary storage*/
          set TS0MW02 empty; /* empty screen ws*/

          TS0MW01.TS0MWIXM = 1; /* set index to 1*/
          while (TS0MW01.TS0MWIXM <= TS0MW01.TS0MWMXP) /* until end array*/
            TS0MW01.TSWSHPID[TS0MWIXM] = 0; /* clear shpid field*/
            TS0MW01.TSWBOL[TS0MWIXM] = " ";
            TS0MW01.TSWCARCD[TS0MWIXM] = " ";
            TS0MW01.TSWCRAFT[TS0MWIXM] = " ";
            TS0MW01.TSWSHPNB[TS0MWIXM] = " ";
            TS0MW01.TSWORIG[TS0MWIXM] = " ";
            TS0MW01.TSWDEST[TS0MWIXM] = " ";
            TS0MW01.TSWXWHCD[TS0MWIXM] = " ";
            TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* increment index*/
          end

          TS0MW01.TSEDEST = TS0MM001.TSEDEST;
          TS0MW01.XWHCD = TS0MM001.XWHCD;
          TS0MW01.YSSCD = TS0MM001.TS0MMYSS;
          TS0MW01.XGPCD = TS0MM001.XGPCD;
          TS0MW01.TS0MWBDT = TS0MM001.TSNBEGDT;
          TS0MW01.TS0MWEDT = TS0MM001.TSNENDDT;

          set TS0MM001 initial; /* clear map*/
          set TS0MM002 initial; /* clear map*/

          TS0MM001.TSEDEST = TS0MW01.TSEDEST;
          TS0MM001.XWHCD = TS0MW01.XWHCD;
          TS0MM001.TS0MMYSS = TS0MW01.YSSCD;
          TS0MM001.XGPCD = TS0MW01.XGPCD;
          TS0MM001.TSNBEGDT = TS0MW01.TS0MWBDT;
          TS0MM001.TSNENDDT = TS0MW01.TS0MWEDT;

          TS0MW01.TS0MWSWR = "Y"; /* set request for data to yes*/
          TS0M520(); /* Verify any changed data*/

        else /* If no data was changed*/

          TS0M520(); /* Verify any changed data*/

        end
      end
    end
  end


end // end TS0M500

// Verify scroll request
Function TS0M510()
   /* ------------------------------------------------------------*/

               /* VERIFY SCROLL REQUEST*/

   /* 1) Ensure that pages exist to scroll forward or back.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0MW01.TS0MWTSP < 2)       /* and no previous pages*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    TS0MM001.XXXPRCNM = "TS0M510"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M510"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0MW01.TS0MWTSP >= TS0MW01.TA5TSQIX) /* and no more pages*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    TS0MM001.XXXPRCNM = "TS0M510"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M510"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end


end // end TS0M510

// Verify any changed data
Function TS0M520()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY MAP 1 CHANGED DATA*/

   /* 1) Verify valid selections.*/
   /* 2) Verify that all dates entered are valid.*/
   /* 3) Verify that all locations entered are valid.*/
   /* 4) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* check valid selections*/
   /* ------------------------------------------------------------*/

  TS0MW01.TS0MWIXM = 13; /* set index to 13*/
  while (TS0MW01.TS0MWIXM > 0) /* until end of selection lines*/
    if (TS0MM001.TS0MMSEL[TS0MWIXM] != "S" /* if selection is not 's'*/
     && TS0MM001.TS0MMSEL[TS0MWIXM] != " ") /* selection is not blank*/
      converseLib.validationFailed(13); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
      set TS0MM001.TS0MMSEL[TS0MWIXM] cursor, modified, bold;
    end
    TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM - 1; /* decrement*/
  end

   /* ------------------------------------------------------------*/
     /* if gpc entered, get the description and check*/
   /* ------------------------------------------------------------*/

  if (TS0MM001.XGPCD != " ") /* If gpc entered*/
    if (TS0MM001.XGPCD in XGPTBL.XGPCD) /* If in the table*/
      TS0MM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* move descr*/
      TS0MW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* save descr*/
    else
      TS0MW01.XGPDESC = " "; /* clear descr*/
      TS0MM001.XGPDESC = " ";
      converseLib.validationFailed(101); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
      set TS0MM001.XGPCD cursor, modified, bold;
    end
  else
    TS0MW01.XGPDESC = " "; /* clear descr*/
    TS0MM001.XGPDESC = " ";
  end


   /* ------------------------------------------------------------*/
     /* check valid ETA end date entered*/
   /* ------------------------------------------------------------*/

  if (TS0MM001.TSNENDDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0MM001.TSNENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0MW01.TSNENDDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MW01.TS0MWEDT = " ";
      TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
      set TS0MM001.TSNENDDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
    set TS0MM001.TSNENDDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* if yss entered, get the description and check*/
   /* ------------------------------------------------------------*/

  if (TS0MM001.TS0MMYSS != " ") /* If gpc entered*/
    if (TS0MM001.TS0MMYSS in YSSTBL.YSSCD) /* If in the table*/
      TS0MM001.YSSDESC = YSSTBL.YSSDESC[sysVar.arrayIndex]; /* move descr*/
      TS0MW01.YSSDESC = YSSTBL.YSSDESC[sysVar.arrayIndex]; /* save descr*/
    else
      TS0MW01.YSSDESC = " "; /* clear descr*/
      TS0MM001.YSSDESC = " ";
      converseLib.validationFailed(158); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MW01.YSSCD = " ";
      TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
      set TS0MM001.TS0MMYSS cursor, modified, bold;
    end
  else
    TS0MW01.YSSDESC = " "; /* clear descr*/
    TS0MM001.YSSDESC = " ";
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA start date entered*/
   /* ------------------------------------------------------------*/

  if (TS0MM001.TSNBEGDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0MM001.TSNBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0MW01.TSNBEGDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MW01.TS0MWBDT = " ";
      TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
      set TS0MM001.TSNBEGDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
    set TS0MM001.TSNBEGDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* if xwh entered, get the description and check*/
   /* ------------------------------------------------------------*/

  if (TS0MM001.XWHCD != " ") /* If gpc entered*/
    if (TS0MM001.XWHCD in XWHTBL.XWHCD) /* If in the table*/
      TS0MM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* move descr*/
      TS0MW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* save descr*/
    else
      TS0MW01.XWHABRV = " "; /* clear descr*/
      TS0MM001.XWHABRV = " ";
      converseLib.validationFailed(82); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MW01.XWHCD = " ";
      TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
      set TS0MM001.XWHCD cursor, modified, bold;
    end
  else
    TS0MW01.XWHABRV = " "; /* clear descr*/
    TS0MM001.XWHABRV = " ";
  end

   /* ------------------------------------------------------------*/
     /* if destination entered, get the description*/
   /* ------------------------------------------------------------*/

  if (TS0MM001.TSEDEST != " ") /* if destination entered*/
    TSCREC.TSCLOCCD = TS0MM001.TSEDEST; /* move in key*/
    TS0M521(); /* select the location*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
      TS0MM001.XXXCITY = TSCREC.XXXCITY; /* move city descr*/
      TS0MW01.XXXCITY = TSCREC.XXXCITY; /* save city descr*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if location not found*/
        converseLib.validationFailed(40); /* Error message*/
        TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
        TS0MW01.TSEDEST = " ";
        TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
        set TS0MM001.TSEDEST cursor, modified, bold;
        TS0MW01.XXXCITY = " "; /* clear city descr*/
        TS0MM001.XXXCITY = " ";
      end
    end
  else
    converseLib.validationFailed(40); /* Error message*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    TS0MM001.XXXPRCNM = "TS0M520"; /* Process name*/
    set TS0MM001.TSEDEST cursor, modified, bold;
    TS0MW01.XXXCITY = " "; /* clear city descr*/
    TS0MM001.XXXCITY = " ";
  end

  if (TS0MW01.TS0MWPSW == "N") /* if all locations and dates valid*/
    TS0M522(); /* check span and date overlap errors*/
  end

  if (TS0MW01.TS0MWPSW == "N") /* if all locations and dates valid*/
    TS0MW01.TS0MW-MAP1-INVALID-DATA = "N"; /* Invalid data map 1*/
  else
    if (TS0MW01.TS0MWPSW == "Y") /* Problem switch set to 'Y'*/
      TS0MW01.TS0MW-MAP1-INVALID-DATA = "Y"; /* Invalid data map 1*/
    end
  end

end // end TS0M520

// Select (S )    DTRANS.VTSLOC01
Function TS0M521()
   /* ------------------------------------------------------------*/
                /* SELECT LOCATION DATA*/

   /* 1) Select location.*/
   /* 2) If an  unexpected return code is recieved:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0M521"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0MM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0MW01.TS0MWPSW = "Y"; /* Indicate Problem*/
    TS0MM001.XXXPRCNM = "TS0M521"; /* Process name*/
    TS0MM002.XXXPRCNM = "TS0M521"; /* Process name*/
  end


end // end TS0M521

// Check date span and overlap
Function TS0M522()
   /* ------------------------------------------------------------*/

            /* CHECK DATE SPAN AND OVERLAP*/

   /* 1) Check that ETA end date is >= ETA begin date.*/
   /* 2) Check that not > 95 days between begin and end dates.*/

   /* Each of these checks will only be performed if the previous*/
      /* check has been successfully completed with no errors.*/

   /* ------------------------------------------------------------*/

  if (TS0MW01.TSNENDDT < TS0MW01.TSNBEGDT) /* if end date LT beg date*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(58); /* error 'must be >=' message*/
    TS0MM001.XXXPRCNM = "TS0M522"; /* process name*/
    set TS0MM001.TSNENDDT cursor, modified, bold;
  end

  if (TS0MW01.TS0MWPSW == "N") /* if no errors*/

     /* check date span < 96 for ETA dates*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0MW01.TSNBEGDT; /* begn date*/
    TA2REC.TA2DBDTN = TS0MW01.TSNENDDT; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN >= 96) /* if diff between dates > 95*/
        TS0MW01.TS0MWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0MM001.XXXPRCNM = "TS0M522"; /* process name*/
        set TS0MM001.TSNBEGDT cursor, modified, bold;
        set TS0MM001.TSNENDDT modified, bold;
      end
    end

  end


end // end TS0M522

// Verify entered data   TS0MM002
Function TS0M550()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0MM002.CAITEM > " ") /* Application data was entered*/
    set TS0MM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate error message*/
    TS0MM002.XXXPRCNM = "TS0M550"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0M510(); /* Verify scroll request*/
      TS0M570(); /* Verify data entered*/
    else
      if (TS0MM002.TSEDEST == " " /* If no data entered*/
       && TS0MM002.XWHCD == " "   
       && TS0MM002.TS0MMYSS == " "
       && TS0MM002.XGPCD == " "   
       && TS0MM002.TSNBEGDT == " "
       && TS0MM002.TSNENDDT == " ")

        TS0M110(); /* purge temporary storage*/
        set TS0MW02 empty; /* empty screen ws*/

        TS0MW01.TS0MWIXM = 1; /* set index to 1*/
        while (TS0MW01.TS0MWIXM <= TS0MW01.TS0MWMXP) /* until end array*/
          TS0MW01.TSWSHPID[TS0MWIXM] = 0; /* clear fields*/
          TS0MW01.TSWBOL[TS0MWIXM] = " ";
          TS0MW01.TSWCARCD[TS0MWIXM] = " ";
          TS0MW01.TSWCRAFT[TS0MWIXM] = " ";
          TS0MW01.TSWSHPNB[TS0MWIXM] = " ";
          TS0MW01.TSWORIG[TS0MWIXM] = " ";
          TS0MW01.TSWDEST[TS0MWIXM] = " ";
          TS0MW01.TSWXWHCD[TS0MWIXM] = " ";
          TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* increment index*/
        end

        TS0MW01.TSEDEST = " "; /* Save the keys*/
        TS0MW01.XWHCD = " ";
        TS0MW01.YSSCD = " ";
        TS0MW01.XGPCD = " ";
        TS0MW01.TS0MWBDT = " ";
        TS0MW01.TS0MWEDT = " ";
        set TS0MM002 initial; /* clear map*/
        TS0MW01.TS0MWPSW = "Y"; /* indicate error message*/
        set TS0MM002.TSEDEST cursor; /* set cursor*/
        converseLib.validationFailed(34); /* data must be entered*/
        TS0MM002.XXXPRCNM = "TS0M570"; /* process name*/
      else
        if (TS0MM002.TSEDEST != TS0MW01.TSEDEST /* If any new data entered*/
         || TS0MM002.XWHCD != TS0MW01.XWHCD     
         || TS0MM002.TS0MMYSS != TS0MW01.YSSCD  
         || TS0MM002.XGPCD != TS0MW01.XGPCD     
         || TS0MM002.TSNBEGDT != TS0MW01.TS0MWBDT
         || TS0MM002.TSNENDDT != TS0MW01.TS0MWEDT
         || TS0MW01.TS0MW-NO-DATA-MAP-1 == "Y"  
         || TS0MW01.TS0MW-NO-DATA-MAP-2 == "Y"  
         || TS0MW01.TS0MW-MAP1-INVALID-DATA == "Y"
         || TS0MW01.TS0MW-MAP2-INVALID-DATA == "Y")

          TS0M110(); /* purge temporary storage*/
          set TS0MW02 empty; /* empty screen ws*/

          TS0MW01.TS0MWIXM = 1; /* set index to 1*/
          while (TS0MW01.TS0MWIXM <= TS0MW01.TS0MWMXP) /* until end array*/
            TS0MW01.TSWSHPID[TS0MWIXM] = 0; /* clear shpid field*/
            TS0MW01.TSWBOL[TS0MWIXM] = " ";
            TS0MW01.TSWCARCD[TS0MWIXM] = " ";
            TS0MW01.TSWCRAFT[TS0MWIXM] = " ";
            TS0MW01.TSWSHPNB[TS0MWIXM] = " ";
            TS0MW01.TSWORIG[TS0MWIXM] = " ";
            TS0MW01.TSWDEST[TS0MWIXM] = " ";
            TS0MW01.TSWXWHCD[TS0MWIXM] = " ";
            TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* increment index*/
          end

          TS0MW01.TSEDEST = TS0MM002.TSEDEST;
          TS0MW01.XWHCD = TS0MM002.XWHCD;
          TS0MW01.YSSCD = TS0MM002.TS0MMYSS;
          TS0MW01.XGPCD = TS0MM002.XGPCD;
          TS0MW01.TS0MWBDT = TS0MM002.TSNBEGDT;
          TS0MW01.TS0MWEDT = TS0MM002.TSNENDDT;
          set TS0MM002 initial; /* clear map*/
          TS0MM002.TSEDEST = TS0MW01.TSEDEST;
          TS0MM002.XWHCD = TS0MW01.XWHCD;
          TS0MM002.TS0MMYSS = TS0MW01.YSSCD;
          TS0MM002.XGPCD = TS0MW01.XGPCD;
          TS0MM002.TSNBEGDT = TS0MW01.TS0MWBDT;
          TS0MM002.TSNENDDT = TS0MW01.TS0MWEDT;

          TS0MW01.TS0MWSWR = "Y"; /* set request for data to yes*/
          TS0M570(); /* Verify any changed data*/

        else /* If no data was changed*/

          TS0M570(); /* Verify any changed data*/

        end
      end
    end
  end


end // end TS0M550

// Verify any changed data
Function TS0M570()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify valid selections.*/
   /* 2) Verify that all dates entered are valid.*/
   /* 3) Verify that all locations entered are valid.*/
   /* 4) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* check valid selections*/
   /* ------------------------------------------------------------*/

  TS0MW01.TS0MWIXM = 13; /* set index to 13*/
  while (TS0MW01.TS0MWIXM > 0) /* until end of selection lines*/
    if (TS0MM002.TS0MMSEL[TS0MWIXM] != "S" /* if selection is not 's'*/
     && TS0MM002.TS0MMSEL[TS0MWIXM] != " ") /* selection is not blank*/
      converseLib.validationFailed(13); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
      set TS0MM002.TS0MMSEL[TS0MWIXM] cursor, modified, bold;
    end
    TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM - 1; /* decrement*/
  end

   /* ------------------------------------------------------------*/
     /* if gpc entered, get the description and check*/
   /* ------------------------------------------------------------*/

  if (TS0MM002.XGPCD != " ") /* If gpc entered*/
    if (TS0MM002.XGPCD in XGPTBL.XGPCD) /* If in the table*/
      TS0MM002.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* move descr*/
      TS0MW01.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex]; /* save descr*/
    else
      TS0MW01.XGPDESC = " "; /* clear descr*/
      TS0MM002.XGPDESC = " ";
      converseLib.validationFailed(101); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
      set TS0MM002.XGPCD cursor, modified, bold;
    end
  else
    TS0MW01.XGPDESC = " "; /* clear descr*/
    TS0MM002.XGPDESC = " ";
  end


   /* ------------------------------------------------------------*/
     /* check valid ETA end date entered*/
   /* ------------------------------------------------------------*/

  if (TS0MM002.TSNENDDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0MM002.TSNENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0MW01.TSNENDDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MW01.TS0MWEDT = " ";
      TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
      set TS0MM002.TSNENDDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
    set TS0MM002.TSNENDDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* if yss entered, get the description and check*/
   /* ------------------------------------------------------------*/

  if (TS0MM002.TS0MMYSS != " ") /* If gpc entered*/
    if (TS0MM002.TS0MMYSS in YSSTBL.YSSCD) /* If in the table*/
      TS0MM002.YSSDESC = YSSTBL.YSSDESC[sysVar.arrayIndex]; /* move descr*/
      TS0MW01.YSSDESC = YSSTBL.YSSDESC[sysVar.arrayIndex]; /* save descr*/
    else
      TS0MW01.YSSDESC = " "; /* clear descr*/
      TS0MM002.YSSDESC = " ";
      converseLib.validationFailed(158); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MW01.YSSCD = " ";
      TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
      set TS0MM002.TS0MMYSS cursor, modified, bold;
    end
  else
    TS0MW01.YSSDESC = " "; /* clear descr*/
    TS0MM002.YSSDESC = " ";
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA start date entered*/
   /* ------------------------------------------------------------*/

  if (TS0MM002.TSNBEGDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0MM002.TSNBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0MW01.TSNBEGDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MW01.TS0MWBDT = " ";
      TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
      set TS0MM002.TSNBEGDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
    set TS0MM002.TSNBEGDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* if xwh entered, get the description and check*/
   /* ------------------------------------------------------------*/

  if (TS0MM002.XWHCD != " ") /* If gpc entered*/
    if (TS0MM002.XWHCD in XWHTBL.XWHCD) /* If in the table*/
      TS0MM002.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* move descr*/
      TS0MW01.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* save descr*/
    else
      TS0MW01.XWHABRV = " "; /* clear descr*/
      TS0MM002.XWHABRV = " ";
      converseLib.validationFailed(82); /* Error message*/
      TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
      TS0MW01.XWHCD = " ";
      TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
      set TS0MM002.XWHCD cursor, modified, bold;
    end
  else
    TS0MW01.XWHABRV = " "; /* clear descr*/
    TS0MM002.XWHABRV = " ";
  end

   /* ------------------------------------------------------------*/
     /* if destination entered, get the description*/
   /* ------------------------------------------------------------*/

  if (TS0MM002.TSEDEST != " ") /* if destination entered*/
    TSCREC.TSCLOCCD = TS0MM002.TSEDEST; /* move in key*/
    TS0M521(); /* select the location*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
      TS0MM002.XXXCITY = TSCREC.XXXCITY; /* move city descr*/
      TS0MW01.XXXCITY = TSCREC.XXXCITY; /* save city descr*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if location not found*/
        converseLib.validationFailed(40); /* Error message*/
        TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
        TS0MW01.TSEDEST = " ";
        TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
        set TS0MM002.TSEDEST cursor, modified, bold;
        TS0MW01.XXXCITY = " "; /* clear city descr*/
        TS0MM002.XXXCITY = " ";
      end
    end
  else
    converseLib.validationFailed(40); /* Error message*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate problem*/
    TS0MM002.XXXPRCNM = "TS0M570"; /* Process name*/
    set TS0MM002.TSEDEST cursor, modified, bold;
    TS0MW01.XXXCITY = " "; /* clear city descr*/
    TS0MM002.XXXCITY = " ";
  end

  if (TS0MW01.TS0MWPSW == "N") /* if all locations and dates valid*/
    TS0M572(); /* check span and date overlap errors*/
  end

  if (TS0MW01.TS0MWPSW == "N") /* if all locations and dates valid*/
    TS0MW01.TS0MW-MAP2-INVALID-DATA = "N"; /* Invalid data map 2*/
  else
    if (TS0MW01.TS0MWPSW == "Y") /* Problem switch set*/
      TS0MW01.TS0MW-MAP2-INVALID-DATA = "Y"; /* Invalid data map 2*/
    end
  end


end // end TS0M570

// Check date span and overlap
Function TS0M572()
   /* ------------------------------------------------------------*/

            /* CHECK DATE SPAN AND OVERLAP*/

   /* 1) Check that ETA end date is >= ETA begin date.*/
   /* 2) Check that not > 95 days between begin and end dates.*/

   /* Each of these checks will only be performed if the previous*/
      /* check has been successfully completed with no errors.*/

   /* ------------------------------------------------------------*/

  if (TS0MW01.TSNENDDT < TS0MW01.TSNBEGDT) /* if end date LT beg date*/
    TS0MW01.TS0MWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(58); /* error 'must be >=' message*/
    TS0MM002.XXXPRCNM = "TS0M572"; /* process name*/
    set TS0MM002.TSNENDDT cursor, modified, bold;
  end

  if (TS0MW01.TS0MWPSW == "N") /* if no errors*/

     /* check date span < 96 for ETA dates*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0MW01.TSNBEGDT; /* begn date*/
    TA2REC.TA2DBDTN = TS0MW01.TSNENDDT; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN >= 96) /* if diff between dates > 95*/
        TS0MW01.TS0MWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0MM002.XXXPRCNM = "TS0M572"; /* process name*/
        set TS0MM002.TSNBEGDT cursor, modified, bold;
        set TS0MM002.TSNENDDT modified, bold;
      end
    end

  end


end // end TS0M572

// Process valid input request
Function TS0M600()
   /* ------------------------------------------------------------*/
                /* PROCESS VALID INPUT REQUESTS*/

   /* 1) Record map shipment number selections.*/
   /* 2) If a scroll request, adjust temp storage page number.*/
   /* 3) If enter is pressed and no errors set request for data*/
      /* to yes.*/

   /* ------------------------------------------------------------*/

  if (TS0MW01.TS0MWPSW == "N") /* no errors*/

    /* ------------------------------------------------------------*/
                  /* Process Screen Selections*/

       /* 1) check to see if any selections have been made*/
       /* 2) if a selection has been made, then check to see*/
          /* if this shipment id has already been recorded in*/
          /* the shipment id array.*/
       /* 3) if the selction has not been recorded yet or has*/
          /* been deleted from the screen, then update the*/
          /* shipment id array with current values.*/

    /* ------------------------------------------------------------*/

    TS0MW01.TS0MWIXM = 1; /* initialize index*/
    while (TS0MW01.TS0MWIXM <= 13) /* until end of detail*/
      if (TS0MM001.TSFDESTE[TS0MWIXM] != " " /* for each selection field*/
       || TS0MM002.TSFDESTE[TS0MWIXM] != " ") /* for each selection field*/
        if (TS0MM001.TS0MMSEL[TS0MWIXM] == "S" /* if selection made*/
         || TS0MM002.TS0MMSEL[TS0MWIXM] == "S") /* if selection made*/
          TS0MW01.TS0MWSFL = "N"; /* set selection flag*/
          TS0MW01.TS0MWIX2 = 1; /* set index*/
          while (TS0MW01.TS0MWIX2 <= TS0MW01.TS0MWMXP) /* until end of array*/
            if (TS0MW02.TSFSHPID[TS0MWIXM] == TS0MW01.TSWSHPID[TS0MWIX2])
              TS0MW01.TS0MWSFL = "Y"; /* set selection flag*/
              TS0MW01.TS0MWIX2 = TS0MW01.TS0MWMXP + 1; /* end loop*/
            else
              TS0MW01.TS0MWIX2 = TS0MW01.TS0MWIX2 + 1; /* increment index*/
            end
          end
          if (TS0MW01.TS0MWSFL == "N") /* if shpid does not exist*/
            TS0MW01.TS0MWIX2 = 1; /* set index*/
            while (TS0MW01.TS0MWIX2 <= TS0MW01.TS0MWMXP) /* until end array*/
              if (TS0MW01.TSWSHPID[TS0MWIX2] == 0) /* if field is open*/
                TS0MW01.TSWSHPID[TS0MWIX2] = TS0MW02.TSFSHPID[TS0MWIXM];
                TS0MW01.TSWBOL[TS0MWIX2] = TS0MW02.TSFBOL[TS0MWIXM];
                TS0MW01.TSWCARCD[TS0MWIX2] = TS0MW02.TSACARCD[TS0MWIXM];
                TS0MW01.TSWCRAFT[TS0MWIX2] = TS0MW02.TS5CRAFT[TS0MWIXM];
                TS0MW01.TSWSHPNB[TS0MWIX2] = TS0MW02.TSFSHPNB[TS0MWIXM];
                TS0MW01.TSWORIG[TS0MWIX2] = TS0MW02.TSEORIG[TS0MWIXM];
                TS0MW01.TSWDEST[TS0MWIX2] = TS0MW02.TSEDEST[TS0MWIXM];
                TS0MW01.TSWXWHCD[TS0MWIX2] = TS0MW02.XWHCD[TS0MWIXM];
                TS0MW01.TS0MWIX2 = TS0MW01.TS0MWMXP + 1;
              else
                TS0MW01.TS0MWIX2 = TS0MW01.TS0MWIX2 + 1; /* increment index*/
              end
            end
          end
        else
                 /* MOVE 1 TO TS0MW01.TS0MWIX2     ; set index*/
          while (TS0MW01.TS0MWIX2 <= TS0MW01.TS0MWMXP) /* until end of array*/
            if (TS0MW01.TSWSHPID[TS0MWIX2] == TS0MW02.TSFSHPID[TS0MWIXM])
              TS0MW01.TSWSHPID[TS0MWIX2] = 0;
              TS0MW01.TSWBOL[TS0MWIX2] = " ";
              TS0MW01.TSWCARCD[TS0MWIX2] = " ";
              TS0MW01.TSWCRAFT[TS0MWIX2] = " ";
              TS0MW01.TSWSHPNB[TS0MWIX2] = " ";
              TS0MW01.TSWORIG[TS0MWIX2] = " ";
              TS0MW01.TSWDEST[TS0MWIX2] = " ";
              TS0MW01.TSWXWHCD[TS0MWIX2] = " ";
            end
            TS0MW01.TS0MWIX2 = TS0MW01.TS0MWIX2 + 1; /* increment index*/
          end
        end
      end
      TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* increment index*/
    end

    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      TS0MW01.TS0MWTSP = TS0MW01.TS0MWTSP - 1; /* Decrement page number*/
    else
      if (converseVar.eventKey is pf8) /* Scroll forward requested*/
        TS0MW01.TS0MWTSP = TS0MW01.TS0MWTSP + 1; /* Increment page number*/
      else
        if (converseVar.eventKey is pf12) /* Scroll forward requested*/

          /* ------------------------------------------------------------*/
             /* transfer to ts0j, shipment maintenance*/
          /* ------------------------------------------------------------*/

          TS0MW01.TS0MWIXM = 1; /* set index*/
          TS0MW01.TS0MWIXW = 1;
          while (TS0MW01.TS0MWIXM <= TS0MW01.TS0MWMXP) /* while le max*/
            if (TS0MW01.TSWSHPID[TS0MWIXM] > 0) /* if data exists*/
              TSWREC.TSWARR1[TS0MWIXW] = TS0MW01.TSWARR1[TS0MWIXM];
              TSWREC.TSWINQFL = "Y"; /* indicate inquiry exists*/
              TS0MW01.TS0MWIXW = TS0MW01.TS0MWIXW + 1; /* incr index*/
            end
            TS0MW01.TS0MWIXM = TS0MW01.TS0MWIXM + 1; /* incr index*/
          end

          if (TSWREC.TSWINQFL == " ") /* no ship id's found in array*/
            TS0MW01.TS0MWPSW = "Y"; /* indicate error*/
            converseLib.validationFailed(153); /* error message*/
            TS0MM001.XXXPRCNM = "TS0M600"; /* process name*/
          else
            TSWREC.TSWSHPOS = 1; /* set ship id index position*/
            COMMAREA.CATOAP = "TS0J"; /* to application*/
            COMMAREA.CAFROMAP = "TS0M"; /* from application*/
            TSWREC.TSWFRAPP = "TS0M"; /* from application*/
            COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/
            COMMAREA.CAITEM = " "; /* application data*/
            TS0M110(); /* purge any temporary storage*/
            XSTSS01(); /* exit to another application*/
            TS0MW01.TS0MWSWR = "Y"; /* set request for data to yes*/
          end

        else
          if (converseVar.eventKey is enter /* if enter is pressed*/
           && TS0MW01.TS0MWPSW == "N")      /* and no errors*/
          end
        end
      end
    end
  end


end // end TS0M600

// Get the po id and order type
Function TS0MS05()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = TS7REC.PC3PONBR; /* P.O. type*/
  PCYREC.PCYFUNC = "S "; /* Select alternate*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0MS05"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0MM001.XXXPRCNM = "TS0MS05"; /* Process name*/
  TS0MW01.TS0MWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0MS05

//*** RECORD=TS0MW01 ****
// Working storage for TS0G - Schedule Inquiry
// ***********************
Record TS0MW01 type basicRecord
  10 TS0MWIXM TS0MWIXM ; 
  10 TS0MWIXW TS0MWIXW ; 
  10 TS0MWIX2 TS0MWIX2 ; 
  10 TS0MWMXP TS0MWMXP ; 
  10 TS0MWSW1 TS0MWSW1 ; 
  10 TS0MWSW2 TS0MWSW2 ; 
  10 TS0MWSW3 TS0MWSW3 ; 
  10 TS0MWSWM TS0MWSWM ; 
  10 TS0MWSWR TS0MWSWR ; 
  10 TS0MWPSW TS0MWPSW ; 
  10 TS0MW-NO-DATA-MAP-1 TS0MW-NO-DATA-MAP-1 ; 
  10 TS0MW-NO-DATA-MAP-2 TS0MW-NO-DATA-MAP-2 ; 
  10 TS0MW-MAP1-INVALID-DATA TS0MW-MAP1-INVALID-DATA ; 
  10 TS0MW-MAP2-INVALID-DATA TS0MW-MAP2-INVALID-DATA ; 
  10 TS0MWSFL TS0MWSFL ; 
  10 TSEDEST TSEDEST ; 
  10 XXXCITY XXXCITY ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 YSSCD YSSCD ; 
  10 YSSDESC YSSDESC ; 
  10 XGPCD XGPCD ; 
  10 XGPDESC XGPDESC ; 
  10 TS0MWBDT TS0MWBDT ; 
  10 TS0MWEDT TS0MWEDT ; 
  10 TSNBEGDT TSNBEGDT ; 
  10 TSNENDDT TSNENDDT ; 
  10 TSWARR1 TSWARR1 [10] ; 
    15 TSWSHPID TSWSHPID ; 
    15 TSWBOL TSWBOL ; 
    15 TSWCARCD TSWCARCD ; 
    15 TSWCRAFT TSWCRAFT ; 
    15 TSWSHPNB TSWSHPNB ; 
    15 TSWORIG TSWORIG ; 
    15 TSWDEST TSWDEST ; 
    15 TSWXWHCD TSWXWHCD ; 
  10 TS0MWDAT TS0MWDAT ; 
    15 TS0MWPCN TS0MWPCN ; 
    15 TS0MWPYY TS0MWPYY ; 
    15 TS0MWPM1 TS0MWPM1 ; 
    15 TS0MWPM2 TS0MWPM2 ; 
  10 TS0MWWDT TS0MWWDT ; 
    15 TS0MWWCC TS0MWWCC ; 
    15 TS0MWWYY TS0MWWYY ; 
    15 TS0MWWMM TS0MWWMM ; 
    15 TS0MWWDD TS0MWWDD ; 
  10 TS0MWMDT TS0MWMDT ; 
    15 TS0MWMMM TS0MWMMM ; 
    15 TS0MWMDD TS0MWMDD ; 
    15 TS0MWMYY TS0MWMYY ; 
  10 TS0MWTSP TS0MWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TS0MWORI TS0MWORI ; 
    15 TS0MWOR1 TS0MWOR1 ; 
    15 TS0MWOR2 TS0MWOR2 ; 
      20 TS0MWOR3 TS0MWOR3 ; 
      20 TS0MWOR4 TS0MWOR4 ; 
  10 TS0MWSOI TS0MWSOI ; 
end // end TS0MW01

//*** RECORD=TS0MW02 ****
// Temporary storage record for TS0G - Schedule Inquiry
// ***********************
Record TS0MW02 type basicRecord
  10 TS0MWLEN TS0MWLEN ; 
  10 TS0MWLIN TS0MWLIN [13] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSFDESTE TSFDESTE ; 
    15 TSACARCD TSACARCD ; 
    15 TS5CRAFT TS5CRAFT ; 
    15 TSFSHPNB TSFSHPNB ; 
    15 TSEORIG TSEORIG ; 
    15 TSEDEST TSEDEST ; 
    15 XWHCD XWHCD ; 
    15 TSFBOL TSFBOL ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 YSSCD YSSCD ; 
    15 TS0MWPOI TS0MWPOI ; 
      20 TS0MMPYR TS0MMPYR ; 
      20 TS0MMPMO TS0MMPMO ; 
      20 TS0MMDMO TS0MMDMO ; 
      20 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 TSISHPQT TSISHPQT ; 
    15 TSIDETFL TSIDETFL ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
end // end TS0MW02

// po id demand month
DataItem TS0MMDMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem TS0MMPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id year
DataItem TS0MMPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 1
DataItem TS0MW-MAP1-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 2
DataItem TS0MW-MAP2-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 1 to display
DataItem TS0MW-NO-DATA-MAP-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 2 to display
DataItem TS0MW-NO-DATA-MAP-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map begin parm date
DataItem TS0MWBDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem TS0MWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map end parm date
DataItem TS0MWEDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields 2
DataItem TS0MWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0MWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0MWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS0MWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0MWLIN char(105)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map day
DataItem TS0MWMDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map date mmddyy
DataItem TS0MWMDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map month
DataItem TS0MWMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max pass shipment array lines
DataItem TS0MWMXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working map year
DataItem TS0MWMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working 2 char
DataItem TS0MWOR1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working 2 char
DataItem TS0MWOR2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working 1 char
DataItem TS0MWOR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working 1 char
DataItem TS0MWOR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working nike order id
DataItem TS0MWORI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem TS0MWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0MWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0MWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem TS0MWPOI char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0MWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0MWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem TS0MWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SO number
DataItem TS0MWSOI bin(18,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch1
DataItem TS0MWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem TS0MWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch3
DataItem TS0MWSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working map number switch
DataItem TS0MWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0MWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS0MWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working century
DataItem TS0MWWCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working day
DataItem TS0MWWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date ccyymmdd
DataItem TS0MWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working month
DataItem TS0MWWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working year
DataItem TS0MWWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

