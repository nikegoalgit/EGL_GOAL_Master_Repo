package ts0o;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0O ****
// This program allows users to inquire on existing location
// table rows with an active status.  The user can view exist-
// ing rows by specifying criteria for selection (ie. location
// acces code, shipping region code, country code, state code
// or city).  The data base will return 0 to N rows based upon
// the criteria set by the user.  (All fields in the location
// row can be viewed on the inquiry browse screen, thus not
// requiring the user to select a row for a more detailed
// inquiry).
// 
// This program also allows deleting and adding of location
// table rows.  For deletion, a user will select a location
// row from the inquiry screen and press PF15 to delete it.
// A confirmation is then asked for to delete it.  This delete
// only turns the active status to inactive status, thus the
// row still physically exists in the table.  The user may add
// new location rows by pressing PF13 from the inquiry screen
// (blank or filled with rows).  This will position them in an
// add screen.  Location rows can then be added (if entries
// pass edit criteria) by pressing ENTER.  The user may
// continue adding or exit to the inquiry screen.  (If a
// location already exists on an add, a message will appear to
// that effect: 'this row exists in active status' or 'this
// row exists in inactive status',)
// 
// There is no provision for changing a location table row
// since all non-status and non-zz fields are table keys.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 12/04/87   cepple   New application.
// 11/07/96   JCARL1   Remove alarm from msg display.
// 05/04/98   JCARL1   Add consolidation point flag.
// 01/08/98   RVEMPA   Add status indicator field and MODIFY
//                     functionality using PF14.
// 09/28/98   smann2   Remove condition for country code= 'usa'
// 01/21/00   PGHOSH   Incorporated Y2K changes.TS0O253 & 350
//                     ( refer process : Ts0O241 )
// *********************
Program TS0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TS0OW01 TS0OW01; // record
  TS0OW02 TS0OW02; // record
  TSWREC TSWREC; // record
  VTSLOC02 VTSLOC02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSTTBL {deleteAfterUse = yes}; // table
  use YSGTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use TS0OM.TS0OM001,  // forms
      TS0OM.TS0OM002, 
      TS0OM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0OW01 empty; /* Initialize working storage*/
    set TS0OW02 empty; /* Initialize temporary storage*/
    set VTSLOC02 empty; /* Initialize records used*/
    set TSWREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0OM001 initial; /* Initialize map1 output area*/
    set TS0OM002 initial; /* Initialize map2 output area*/

    /*  */
    /* ----------- Y2K OUT BEGIN -----------*/
    /*  */
    /* MOVE 19 TO TS0OW01.TS0OWCEN;      /* Initialize working century*/
    /*  */
    /* ----------- Y2K OUT BEGIN -----------*/
    /*  */
    TS0OW01.TS0OWMAP = "1"; /* Indicate map to be displayed*/
    TS0OW01.TS0OWSWR = "N"; /* Indicate request for data*/
    TS0OW01.TS0OWMFL = "N"; /* Initialize message flag*/
    TS0OW01.TS0OWPSW = "N"; /* Initialize pop up indicator*/
    TS0OW01.TS0OWCFL = "N"; /* Confirm add flag*/
    TS0OW01.TS0OWSPG = 0; /* Set save page to 0*/

    goto TS0O001; /* Converse Location Inquiry/Main.*/


    TS0O001: TS0O001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto TS0O001; /* Converse Location Inquiry/Main.*/


  end // end main
end // end TS0O

// Location Inquiry/Maintenance
Function TS0O001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0OW01.TS0OWMAP == "1") /* Map 1 was requested*/

    TS0O100(); /* Display map 1*/

  else

    if (TS0OW01.TS0OWMAP == "2" /* Map 2 was requested*/
     && TS0OW01.TS0OWFSW == "A") /* and ADD function*/

      TS0O200(); /* Display Location Add Map*/

    else

      if (TS0OW01.TS0OWMAP == "2" /* Map 2 was selected*/
       && TS0OW01.TS0OWFSW == "D") /* and DELETE function*/

        TS0OW01.TS0OWSPG = 0; /* Set save page to zero*/
        TS0OW01.TS0OWDSK = " "; /* Clear delete save key*/
        TS0OW01.TS0OWSPG = TS0OW01.TS0OWTSP; /* Save page number*/
        TS0OW01.TS0OWIXM = 1; /* Initialize index*/
        TS0OW01.TS0OWSIX = 99; /* INITIALIZE SAVE INDEX*/

        while (TS0OW01.TS0OWIXM <= 14 /* Until end of page*/
         && TS0OW01.TS0OWMAP != "1") /* and not map 1*/

          if (TS0OM001.TS0OMSEL[TS0OWIXM] == "S") /* If line selected*/

            TS0O300(); /* Display Location Delete Map*/

            if (TS0OW01.TS0OWIXM <= TS0OW01.TS0OWSIX) /* Update save index*/
              TS0OW01.TS0OWSIX = TS0OW01.TS0OWIXM;
            end

          end

          TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM + 1; /* Increment index*/

        end

        TS0OW01.TS0OWSIX = TS0OW01.TS0OWSIX - 1; /* Decrement save index*/

        TS0OW01.TS0OWMAP = "1"; /* set map to location inquiry*/

      else

        if (TS0OW01.TS0OWMAP == "2" /* Map 2 was selected*/
         && TS0OW01.TS0OWFSW == "U") /* and UPDATE function*/

          TS0OW01.TS0OWSPG = 0; /* Set save page to zero*/
          TS0OW01.TS0OWDSK = " "; /* Clear delete save key*/
          TS0OW01.TS0OWSPG = TS0OW01.TS0OWTSP; /* Save page number*/
          TS0OW01.TS0OWIXM = 1; /* Initialize index*/
          TS0OW01.TS0OWSIX = 99; /* INITIALIZE SAVE INDEX*/

          while (TS0OW01.TS0OWIXM <= 14 /* Until end of page*/
           && TS0OW01.TS0OWMAP != "1") /* and not map 1*/

            if (TS0OM001.TS0OMSEL[TS0OWIXM] == "S") /* If line selected*/

              TS0O400(); /* Display Location Update Map*/

              if (TS0OW01.TS0OWIXM <= TS0OW01.TS0OWSIX) /* Update save index*/
                TS0OW01.TS0OWSIX = TS0OW01.TS0OWIXM;
              end

            end

            TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM + 1; /* Increment index*/

          end

          TS0OW01.TS0OWSIX = TS0OW01.TS0OWSIX - 1; /* Decrement save index*/

          TS0OW01.TS0OWMAP = "1"; /* set map to location inquiry*/

        else

          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1PGMNM = "TS0O001 "; /* Process name*/
          TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
          TA1REC.TA1MAP = TS0OW01.TS0OWMAP; /* Map name*/
          SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

          XSPF4(); /* Exit to Master Menu*/

        end

      end

    end

  end

end // end TS0O001

// Location inquiry/main. map
Function TS0O100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0OW01.TS0OWSWR == "Y") /* The request for data is yes*/
    set TS0OM001 initial; /* Make sure map clear*/
    TS0O110(); /* Obtain the data to display*/
  end

  TS0O120(); /* Format and display the map*/

  TS0O130(); /* Check attention identifier*/

  TS0O140(); /* Reset fields to normal intensity*/

  TS0O150(); /* Verify the entered data*/

  TS0O160(); /* Process valid input request*/


end // end TS0O100

// Obtain the data to display
Function TS0O110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* If no data found, display error message and return to*/
      /* previous process.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  TS0O111(); /* Purge any temporary storage*/

  TS0O112(); /* Select set and open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    set TS0OW02 empty; /* Clear temporary storage record*/
    TS0OW01.TS0OWIXM = 1; /* Initialize display line number*/
    TS0OW01.TS0OWSWC = "N"; /* Initialize end of file switch*/
    TS0OW01.TS0OWSWP = "N"; /* Initialize problem found switch*/
    while (TS0OW01.TS0OWSWC == "N" /* Until end of set or problem found*/
     && TS0OW01.TS0OWSWP == "N") /* or until a problem was found*/
      TS0O113(); /* Obtain data and format page*/
      if (TS0OW01.TS0OWIXM > 14) /* Page is full*/
        TS0O114(); /* Add page to temporary storage*/
      end
    end
    if (TS0OW01.TS0OWSWC == "Y") /* end of set was found*/
      if (TS0OW01.TS0OWIXM > 1) /* and some of the page was formatted*/
        TS0O114(); /* Add page to temporary storage*/
      end
      TS0OW01.TS0OWTSP = 1; /* Initialize page number*/
      TS0OW01.TS0OWSWR = "N"; /* Request for data completed*/
      TS0O115(); /* Close the selected set cursor*/
    end
  end

  if (TS0OW01.TA5TSQIX == 0) /* No data to display*/
    TS0OM001.XXXPRCNM = "TS0O110"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    return; /* Return to previous process*/
  end



end // end TS0O110

// Purge any temporary storage
Function TS0O111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0O"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0OW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0O111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0OM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0OW01.TS0OWTSP = 0; /* Reset current page number*/
  TS0OW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0O111

// Select set
Function TS0O112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("S1", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0O112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0OM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/
    TA1REC.TA1TBLKE = VTSLOC02.VTSLOC02-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0OM001.XXXPRCNM = "TS0O112"; /* Process name*/

    return; /* Return to previous process*/

  end


end // end TS0O112

// Fetch next row and format
Function TS0O113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("N1", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0OW01.TS0OWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0OW01.TS0OWSWP = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0O113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0OM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0OM001.XXXPRCNM = "TS0O113"; /* Process name*/

    else
      if ((TS0OW01.TS-STAT-IND == "A" ||  /* status indicator is active*/
      TS0OW01.TS-STAT-IND == " ") &&      /* status indicator is active*/
      VTSLOC02.XXX-STAT == "A")           /* and row is active*/
        TS0OW02.TSCLOCCD[TS0OWIXM] = VTSLOC02.TS-LOC-CD;
        TS0OW02.YSGCD[TS0OWIXM] = VTSLOC02.YSG-SHP-REG-CD;
        TS0OW02.YSGABRV[TS0OWIXM] = VTSLOC02.YSG-SHP-REG-ABRV;
        TS0OW02.XCTCD[TS0OWIXM] = VTSLOC02.XCT-CTRY-CD;
        TS0OW02.XCTABRV[TS0OWIXM] = VTSLOC02.XCT-CTRY-ABRV;
        TS0OW02.XSTCD[TS0OWIXM] = VTSLOC02.XST-ST-CD;
        TS0OW02.XSTDESC[TS0OWIXM] = VTSLOC02.XST-ST-DESC;
        TS0OW02.XXXCITY[TS0OWIXM] = VTSLOC02.XXX-CITY;
        TS0OW02.TS-LOC-CNSLD-FL[TS0OWIXM] = VTSLOC02.TS-LOC-CNSLD-FL;
        TS0OW02.TS-STAT-IND[TS0OWIXM] = VTSLOC02.XXX-STAT;

        TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM + 1; /* Increment line index*/
      else
        if (TS0OW01.TS-STAT-IND == "I" &&  /* status indicator is inactive*/
        VTSLOC02.XXX-STAT == "I")          /* and row is inactive*/
          TS0OW02.TSCLOCCD[TS0OWIXM] = VTSLOC02.TS-LOC-CD;
          TS0OW02.YSGCD[TS0OWIXM] = VTSLOC02.YSG-SHP-REG-CD;
          TS0OW02.YSGABRV[TS0OWIXM] = VTSLOC02.YSG-SHP-REG-ABRV;
          TS0OW02.XCTCD[TS0OWIXM] = VTSLOC02.XCT-CTRY-CD;
          TS0OW02.XCTABRV[TS0OWIXM] = VTSLOC02.XCT-CTRY-ABRV;
          TS0OW02.XSTCD[TS0OWIXM] = VTSLOC02.XST-ST-CD;
          TS0OW02.XSTDESC[TS0OWIXM] = VTSLOC02.XST-ST-DESC;
          TS0OW02.XXXCITY[TS0OWIXM] = VTSLOC02.XXX-CITY;
          TS0OW02.TS-LOC-CNSLD-FL[TS0OWIXM] = VTSLOC02.TS-LOC-CNSLD-FL;
          TS0OW02.TS-STAT-IND[TS0OWIXM] = VTSLOC02.XXX-STAT;

          TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM + 1; /* Increment line index*/
        end
      end
    end
  end



end // end TS0O113

// Add page to temporary storage
Function TS0O114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS0OW02.TS0OWLEN = 975; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0O"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0OW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    TS0OW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS0OW01.TS0OWIXM = 1; /* Reset display line number*/
    set TS0OW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0O114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0OM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0OM001.XXXPRCNM = "TS0O114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TS0OW01.TS0OWSWP = "Y"; /* indicate problem has been found*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0O114

// Close selected set cursor
Function TS0O115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("C1", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0O115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0OM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0OM001.XXXPRCNM = "TS0O115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0O115

// Format and display the map
Function TS0O120()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0OW01.TS0OWPSW == "N") /* If no pop-up windows set*/
    if (converseVar.validationMsgNum == 0 /* No error message to display*/
     || converseVar.validationMsgNum == 6 /* or fast path error*/
     || converseVar.validationMsgNum == 21) /* or data was not found*/
      set TS0OM001 initial; /* Set map clear*/

      TS0OM001.TS0OMLCD = TS0OW01.TS0OWLCD;
      TS0OM001.TS0OMYSG = TS0OW01.TS0OWYSG;
      TS0OM001.TS0OMXCT = TS0OW01.TS0OWXCT;
      TS0OM001.TS0OMXST = TS0OW01.TS0OWXST;
      TS0OM001.TS0OMCTY = TS0OW01.TS0OWCTY;
      TS0OM001.TS-LOC-CNSLD-FL = TS0OW01.TS-LOC-CNSLD-FL;
      TS0OM001.TS0OSTAT = TS0OW01.TS-STAT-IND;

      if (TS0OW01.TS0OWFSW == "D" /* If coming back from delete*/
       && TS0OW01.TS0OWSIX > 0    /* and save index is GT 0*/
       && TS0OW01.TS0OWSIX != 99) /* and save index has been set*/
        set TS0OM001.TS0OMSEL[TS0OWSIX] cursor; /* Set cursor position*/
        TS0OW01.TS0OWSIX = 0; /* Reset save index*/
      end

      if (TS0OW01.TS0OWFSW == "U" /* If coming back from delete*/
       && TS0OW01.TS0OWSIX > 0    /* and save index is GT 0*/
       && TS0OW01.TS0OWSIX != 99) /* and save index has been set*/
        set TS0OM001.TS0OMSEL[TS0OWSIX] cursor; /* Set cursor position*/
        TS0OW01.TS0OWSIX = 0; /* Reset save index*/
      end

      TS0O121(); /* Format the selected data*/
    end
  end

  /* IF EZEMNO NE 0;                   /* No error message to display*/
  /* SET TS0OM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  if (TS0OW01.TS0OWMFL == "Y") /* If message flag is yes*/
    converseLib.validationFailed(44); /* Indicate update was successful*/
    TS0OM001.XXXPRCNM = "TS0O120"; /* Process name*/
    TS0OW01.TS0OWMFL = "N"; /* Reset message flag*/
  end

  TS0OM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0OM001 ;

  TS0OW01.TS0OWPSW = "N"; /* Reset pop-up switch*/

  TS0O124(); /* Check for user ? inquiry*/


end // end TS0O120

// Format the selected data
Function TS0O121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan location data in the map.*/
   /* ------------------------------------------------------------*/

  TS0OW01.TS0OWDFL = "N"; /* Initialize delete flag*/

  if (TS0OW01.TS0OWDSK != " ") /* If delete save key set*/
    TS0OW01.TS0OWTSP = 1; /* Initialize search page*/
  end

  if (TS0OW01.TS0OWSPG > TS0OW01.TA5TSQIX) /* If save page was deleted*/
    TS0OW01.TS0OWSPG = TS0OW01.TS0OWSPG - 1; /* decrement save page*/
  end

  if (TS0OW01.TS0OWSPG > 0) /* If save page was set*/
    TS0OW01.TS0OWTSP = TS0OW01.TS0OWSPG; /* Move in new page*/
    TS0OW01.TS0OWSPG = 0; /* Reset save page*/
  end

  if (COMMAREA.CAADDFL == "Y") /* If user can perform add*/
    set TS0OM001.TS0OMADD protect; /* Display add PF Key*/
  end

  if (COMMAREA.CADELFL == "Y") /* If user can perform delete*/
    set TS0OM001.TS0OMDEL protect; /* Display delete PF Key*/
  end

  if (COMMAREA.CACHGFL == "Y") /* If user can perform delete*/
    set TS0OM001.TS0OMUPD protect; /* Display update PF Key*/
  end

  if (TS0OW01.TA5TSQIX == 0) /* if no data to display*/
    return; /* do not format data*/
  end

  while (TS0OW01.TS0OWDFL == "N") /* While delete save key not found*/
    TS0O122(); /* Obtain temporary storage page*/
    TS0O123(); /* locate page with key*/
  end

  if (TS0OW01.TS0OWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
    TS0O122(); /* Obtain temporary storage page*/
  end

  set TS0OM001.TS0OMPGL skip; /* Display "PAGE" literal*/
  set TS0OM001.TS0OMOFL skip; /* Display "OF" literal*/

  TS0OM001.TS0OWTSP = TS0OW01.TS0OWTSP; /* Current page number*/
  TS0OM001.TA5TSQIX = TS0OW01.TA5TSQIX; /* Highest page number*/

  TS0OW01.TS0OWIXM = 1; /* Initialize line index*/
  while (TS0OW01.TS0OWIXM <= 14 /* Until end of lines*/
   && TS0OW02.TSCLOCCD[TS0OWIXM] != " ") /* or last line of data*/

    set TS0OM001.TS0OMSEL[TS0OWIXM] normal; /* Display select flag*/

    TS0OM001.TSCLOCCD[TS0OWIXM] = TS0OW02.TSCLOCCD[TS0OWIXM];
    TS0OM001.YSGCD[TS0OWIXM] = TS0OW02.YSGCD[TS0OWIXM];
    TS0OM001.YSGABRV[TS0OWIXM] = TS0OW02.YSGABRV[TS0OWIXM];
    TS0OM001.XCTCD[TS0OWIXM] = TS0OW02.XCTCD[TS0OWIXM];
    TS0OM001.XCTABRV[TS0OWIXM] = TS0OW02.XCTABRV[TS0OWIXM];
    TS0OM001.XSTCD[TS0OWIXM] = TS0OW02.XSTCD[TS0OWIXM];
    TS0OM001.XSTDESC[TS0OWIXM] = TS0OW02.XSTDESC[TS0OWIXM];
    TS0OM001.XXXCITY[TS0OWIXM] = TS0OW02.XXXCITY[TS0OWIXM];
    TS0OM001.TS-LOC-CNSLD-FL[TS0OWIXM] = TS0OW02.TS-LOC-CNSLD-FL[TS0OWIXM];
    TS0OM001.XXX-STAT[TS0OWIXM] = TS0OW02.TS-STAT-IND[TS0OWIXM];
    TS0OM001.TS0OSTAT = TS0OW02.TS-STAT-IND[TS0OWIXM];

    TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM + 1; /* Increment line index*/

  end


end // end TS0O121

// Read temporary storage page
Function TS0O122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS0OW02.TS0OWLEN = 975; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0O"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0OW01.TS0OWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0OW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0O123"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0OM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0OM001.XXXPRCNM = "TS0O123"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear display before next map*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TS0O122

// Locate delete save key
Function TS0O123()
   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is less than or*/
   /* equal to the Delete Save Key.*/
   /* ------------------------------------------------------------*/

  if (TS0OW01.TS0OWDSK == " ") /* No location code entered*/
    TS0OW01.TS0OWDFL = "Y"; /* Indicate key found*/
    return;
  end

  TS0OW01.TS0OWIXM = 1; /* Initialize index*/

  while (TS0OW01.TS0OWIXM <= 14) /* Until key is found*/
    if (TS0OW02.TSCLOCCD[TS0OWIXM] == " " /* no more carriers*/
     || TS0OW02.TSCLOCCD[TS0OWIXM] == TS0OW01.TS0OWDSK)
      if (TS0OW01.TS0OWIXM <= 0) /* Key not on page*/
        if (TS0OW01.TS0OWTSP == 1) /* first page*/
          TS0OW01.TS0OWIXM = 1; /* Reset index*/
        else
          TS0OW01.TS0OWIXM = 14; /* Index to last entry*/
          TS0OW01.TS0OWTSP = TS0OW01.TS0OWTSP - 1; /* decrement page*/
        end
      end
      set TS0OM001.TS0OMSEL[TS0OWIXM] cursor; /* Initial cursor*/
      TS0OW01.TS0OWDFL = "Y"; /* Indicate page was found*/
      TS0OW01.TS0OWDSK = " "; /* Reset starting carrier*/
      return; /* Return to previous process*/
    end
    TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM + 1; /* Increment index*/
  end

  if (TS0OW01.TS0OWTSP == TS0OW01.TA5TSQIX) /* Last page*/
    TS0OW01.TS0OWIXM = 14; /* Set index to last entry*/
    set TS0OM001.TS0OMSEL[TS0OWIXM] cursor; /* Initial cursor*/
    TS0OW01.TS0OWDFL = "Y"; /* Indicate page was found*/
    TS0OW01.TS0OWDSK = " "; /* Reset starting carrier*/
  else
    TS0OW01.TS0OWTSP = TS0OW01.TS0OWTSP + 1; /* Increment page*/
  end


end // end TS0O123

// Check for ? inquiry by user
Function TS0O124()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0OM001.TS0OMYSG == "?" /* if any ? entered*/
   || TS0OM001.TS0OMXCT == "?" 
   || TS0OM001.TS0OMXST == "?")

    if (TS0OM001.TS0OMYSG == "?") /* if ? in region field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                  REGION     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSG01(); /* perform region window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the region     **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0OM001.TS0OMYSG = YSGTBL.YSGCD[XX0XWPIX]; /* move code*/
      else
        TS0OM001.TS0OMYSG = " "; /* clear fields*/
      end
    end

    if (TS0OM001.TS0OMXCT == "?") /* if ? in country field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                COUNTRY  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the country    **/
       /* *  type table code and to the map.                      **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0OM001.TS0OMXCT = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        TS0OM001.TS0OMXCT = " "; /* clear fields*/
      end
    end

    if (TS0OM001.TS0OMXST == "?") /* if ? in state field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                  STATE      "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXST01(); /* perform state window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the state      **/
       /* *  type table code and to the map.                      **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0OM001.TS0OMXST = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
      else
        TS0OM001.TS0OMXST = " "; /* clear fields*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/
    TS0OW01.TS0OWPSW = "Y"; /* bypass exit by indicating fake error*/
    exit stack;

  end


end // end TS0O124

// Check attention identifier
Function TS0O130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0OM001 initial; /* Clear the map fields*/
    TS0OW01.TS0OWSWR = "N"; /* Set request for data = n*/
    set TS0OW02 empty; /* Clear temporary storage*/

    TS0OW01.TS0OWLCD = " "; /* Reset screen keys*/
    TS0OW01.TS0OWYSG = " ";
    TS0OW01.TS0OWXCT = " ";
    TS0OW01.TS0OWXST = " ";
    TS0OW01.TS0OWCTY = " ";
    TS0OW01.TS-LOC-CNSLD-FL = " ";
    TS0OW01.TS-STAT-IND = " ";
    TS0OW01.TA5TSQIX = 0; /* Reset page numbers*/
    TS0OW01.TS0OWTSP = 0;

    exit stack; /* Exit to redisplay map*/
  end

  if (TS0OM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      TS0O111(); /* Purge any temporary storage*/
      set VTSLOC02 empty; /* Clear record*/
      COMMAREA.CATOAP = TS0OM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0OM001.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/

      VTSLOC02.TS-LOC-CD = TS0OW01.TS0OWLCD; /* Reset load keys*/
      VTSLOC02.YSG-SHP-REG-CD = TS0OW01.TS0OWYSG;
      VTSLOC02.XCT-CTRY-CD = TS0OW01.TS0OWXCT;
      VTSLOC02.XST-ST-CD = TS0OW01.TS0OWXST;
      VTSLOC02.XXX-CITY = TS0OW01.TS0OWCTY;
      VTSLOC02.TS-LOC-CNSLD-FL = TS0OW01.TS-LOC-CNSLD-FL;
      VTSLOC02.XXX-STAT = TS0OW01.TS-STAT-IND;

      TS0OW01.TS0OWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0OM001.XXXPRCNM = "TS0O130"; /* PROCESS NAME*/
    end
    set TS0OM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0OM001.XXXPRCNM = "TS0O130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to transportation menu*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0OM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0O111(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0OM001.XXXPRCNM = "TS0O130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    TS0OM001.XXXPRCNM = "TS0O130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && COMMAREA.CAADDFL == "N")     /* and user add not authorized*/
    TS0OM001.XXXPRCNM = "TS0O130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && COMMAREA.CADELFL == "N")     /* and user delete not authorized*/
    TS0OM001.XXXPRCNM = "TS0O130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && TS0OW01.TS-STAT-IND == "I")  /* if status indicator is inactive*/
    TS0OM001.XXXPRCNM = "TS0O130"; /* Process name*/
    converseLib.validationFailed(432); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* and user update not authorized*/
    TS0OM001.XXXPRCNM = "TS0O130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0O130

// Reset highlighted fields
Function TS0O140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0OM001.TS0OMLCD initialAttributes; /* Location code*/
  set TS0OM001.TS0OMYSG initialAttributes; /* Region*/
  set TS0OM001.TS0OMXCT initialAttributes; /* Country*/
  set TS0OM001.TS0OMXST initialAttributes; /* Staten*/
  set TS0OM001.TS0OMCTY initialAttributes; /* City*/
  set TS0OM001.TS0OSTAT initialAttributes; /* Status Indicator*/

  TS0OW01.TS0OWIXM = 1; /* Initialize line index*/

  while (TS0OW01.TS0OWIXM <= 14 /* Until end of lines*/
   && TS0OM001.TSCLOCCD[TS0OWIXM] != " ") /* and location exists*/
    set TS0OM001.TS0OMSEL[TS0OWIXM] normal; /* Reset select flag*/
    TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM + 1; /* Increment line index*/
  end

  set TS0OM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0OM001.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0O140

// Verify the entered data
Function TS0O150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0OM001.CAITEM > " ") /* Application data was entered*/
    set TS0OM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0OM001.XXXPRCNM = "TS0O150"; /* Process name*/
  end

  if (converseVar.eventKey is pf13) /* If add screen requested*/
    return; /* Return to previous module*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    TS0O151(); /* Verify scroll request*/
  else
    TS0O152(); /* Verify any changed data*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0O150

// Verify scroll request
Function TS0O151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0OW01.TS0OWTSP < 2)       /* and no previous pages*/
    TS0OM001.XXXPRCNM = "TS0O151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0OW01.TS0OWTSP >= TS0OW01.TA5TSQIX) /* and no more pages*/
    TS0OM001.XXXPRCNM = "TS0O151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  TS0OW01.TS0OWIXM = 14; /* Initialize line index*/

  while (TS0OW01.TS0OWIXM > 0) /* Until end of lines*/
    if (TS0OM001.TS0OMSEL[TS0OWIXM] != TS0OW02.TS0OMSEL[TS0OWIXM])
      set TS0OM001.TS0OMSEL[TS0OWIXM] cursor, modified, bold; /* Highlight*/
      TS0OM001.XXXPRCNM = "TS0O151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end
    TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM - 1; /* Decrement line number*/
  end


end // end TS0O151

// Verify any changed data
Function TS0O152()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  TS0OW01.TS0OWSFL = "N"; /* Initialize selection flag*/
  TS0OW01.TS0OWIXM = 14; /* Initialize index*/

  while (TS0OW01.TS0OWIXM > 0) /* Until end of lines*/
    if (TS0OM001.TS0OMSEL[TS0OWIXM] != " ") /* If selection is not blank*/
      TS0OW01.TS0OWSFL = "Y"; /* Initialize selection flag*/
      if (TS0OM001.TS0OMSEL[TS0OWIXM] == "S") /* Save the key*/
         /* Next sentence*/
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        set TS0OM001.TS0OMSEL[TS0OWIXM] cursor, modified, bold;
        TS0OW01.TS0OWSWR = "N"; /* Set request for data*/
      end
    end
    TS0OW01.TS0OWIXM = TS0OW01.TS0OWIXM - 1; /* Increment line index*/
  end

  if (TS0OM001.TS0OMLCD == " " /* If select line is blank*/
   && TS0OM001.TS0OMYSG == " " 
   && TS0OM001.TS0OMXCT == " " 
   && TS0OM001.TS0OMXST == " " 
   && TS0OM001.TS0OMCTY == " " 
   && TS0OM001.TS0OSTAT == " " 
   && TS0OM001.TSCLOCCD[1] != " ")

    TS0O111(); /* Purge temporary storage*/
    TS0OW01.TS0OWSWR = "N"; /* Set request for data to no*/

    TS0OW01.TS0OWLCD = " "; /* Reset working storage values*/
    TS0OW01.TS0OWYSG = " "; /* for screen load lines*/
    TS0OW01.TS0OWXCT = " ";
    TS0OW01.TS0OWXST = " ";
    TS0OW01.TS0OWCTY = " ";
    TS0OW01.TS-LOC-CNSLD-FL = " ";
    TS0OW01.TS-STAT-IND = " ";

  else

    if (TS0OM001.TS0OMLCD == " " /* If no data exists*/
     && TS0OM001.TS0OMYSG == " " 
     && TS0OM001.TS0OMXCT == " " 
     && TS0OM001.TS0OMXST == " " 
     && TS0OM001.TS0OMCTY == " " 
     && TS0OM001.TS0OSTAT == " " 
     && TS0OM001.TSCLOCCD[1] == " ")

      converseLib.validationFailed(34); /* Set error message 'enter data'*/
      TS0OM001.XXXPRCNM = "TS0O152"; /* Process name*/

    else

      if (TS0OM001.TS0OMLCD == TS0OW01.TS0OWLCD /* Selection entered*/
       && TS0OM001.TS0OMYSG == TS0OW01.TS0OWYSG 
       && TS0OM001.TS0OMXCT == TS0OW01.TS0OWXCT 
       && TS0OM001.TS0OMXST == TS0OW01.TS0OWXST 
       && TS0OM001.TS0OMCTY == TS0OW01.TS0OWCTY 
       && TS0OM001.TS0OSTAT == TS0OW01.TS-STAT-IND
       && TS0OM001.TSCLOCCD[1] == " "           
       && TS0OW01.TS0OWSFL == "N")             

        TS0OW01.TS0OWSWR = "Y";

      else

        if (TS0OM001.TS0OMLCD == TS0OW01.TS0OWLCD /* If no new data entered*/
         && TS0OM001.TS0OMYSG == TS0OW01.TS0OWYSG 
         && TS0OM001.TS0OMXCT == TS0OW01.TS0OWXCT 
         && TS0OM001.TS0OMXST == TS0OW01.TS0OWXST 
         && TS0OM001.TS0OMCTY == TS0OW01.TS0OWCTY 
         && TS0OM001.TS0OSTAT == TS0OW01.TS-STAT-IND
         && TS0OW01.TS0OWSFL == "N"               
        )                                        
           /* Continue on*/

        else

          if (TS0OM001.TS0OMLCD == TS0OW01.TS0OWLCD /* Selection entered*/
           && TS0OM001.TS0OMYSG == TS0OW01.TS0OWYSG 
           && TS0OM001.TS0OMXCT == TS0OW01.TS0OWXCT 
           && TS0OM001.TS0OMXST == TS0OW01.TS0OWXST 
           && TS0OM001.TS0OMCTY == TS0OW01.TS0OWCTY 
           && TS0OM001.TS0OSTAT == TS0OW01.TS-STAT-IND
           && TS0OM001.TSCLOCCD[1] != " "           
           && TS0OW01.TS0OWSFL == "Y")             

             /* keep going*/

          else

            VTSLOC02.TS-LOC-CD = TS0OM001.TS0OMLCD;
            TS0OW01.TS0OWLCD = TS0OM001.TS0OMLCD;
            VTSLOC02.YSG-SHP-REG-CD = TS0OM001.TS0OMYSG;
            TS0OW01.TS0OWYSG = TS0OM001.TS0OMYSG;
            VTSLOC02.XCT-CTRY-CD = TS0OM001.TS0OMXCT;
            TS0OW01.TS0OWXCT = TS0OM001.TS0OMXCT;
            VTSLOC02.XST-ST-CD = TS0OM001.TS0OMXST;
            TS0OW01.TS0OWXST = TS0OM001.TS0OMXST;
            VTSLOC02.XXX-CITY = TS0OM001.TS0OMCTY;
            TS0OW01.TS0OWCTY = TS0OM001.TS0OMCTY;
            VTSLOC02.XXX-STAT = TS0OM001.TS0OSTAT;
            TS0OW01.TS-STAT-IND = TS0OM001.TS0OSTAT;

            TS0OW01.TS0OWSWR = "Y";

          end

        end

      end

    end

  end


end // end TS0O152

// Process valid input request
Function TS0O160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  TS0OW01.TS0OWDSK = " "; /* Initialize delete save key*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS0OW01.TS0OWTSP = TS0OW01.TS0OWTSP - 1; /* Decrement page number*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      TS0OW01.TS0OWTSP = TS0OW01.TS0OWTSP + 1; /* Increment page number*/
    else
      if (converseVar.eventKey is pf13) /* PF13 was pressed*/
        TS0OW01.TS0OWMAP = "2"; /* Select Map #2*/
        TS0OW01.TS0OWFSW = "A"; /* Select add function*/
        converseLib.validationFailed(0); /* Clear error message field*/
      else
        if (converseVar.eventKey is pf15 /* PF15 was pressed*/
         && TS0OW01.TS0OWSFL == "Y")     /* and selection was made*/
          TS0OW01.TS0OWMAP = "2"; /* Select Map #2*/
          TS0OW01.TS0OWFSW = "D"; /* Select delete function*/
          converseLib.validationFailed(0); /* Clear error message field*/
        else
          if (converseVar.eventKey is pf15 /* PF15 was pressed*/
           && TS0OW01.TS0OWSFL == "N")     /* and selection was not made*/
            converseLib.validationFailed(53); /* error message*/
          else
            if (converseVar.eventKey is pf14 /* PF14 was pressed*/
             && TS0OW01.TS0OWSFL == "Y")     /* and selection was made*/
              TS0OW01.TS0OWMAP = "2"; /* Select Map #2*/
              TS0OW01.TS0OWFSW = "U"; /* Select update function*/
              converseLib.validationFailed(0); /* Clear error message field*/
            else
              if (converseVar.eventKey is pf14 /* PF14 was pressed*/
               && TS0OW01.TS0OWSFL == "N")     /* and selection was not mad*/
                converseLib.validationFailed(53); /* error message*/
              end
            end
          end
        end
      end
    end
  end


end // end TS0O160

// Location maintenance add map
Function TS0O200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0O210(); /* Format and display the map*/

  TS0O220(); /* Check attention identifier*/

  TS0O230(); /* Reset fields to normal intensity*/

  TS0O240(); /* Verify the entered data*/

  TS0O250(); /* Process valid input request*/


end // end TS0O200

// Format and display the map
Function TS0O210()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0OW01.TS0OWPSW == "N") /* If no pop-ups*/
    if (converseVar.validationMsgNum == 0) /* No errors*/
      set TS0OM002 initial; /* Clear map output area*/
      TS0OM002.TS0OMMSG = "PLEASE ENTER NEW LOCATION";
      TS0OM002.TS0OMFUN = " ADD  "; /* Set ADD title to map*/
    end
  end

  TS0OM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* IF EZEMNO NE 0;                   /* error message to display*/
  /* SET TS0OM002 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  if (TS0OW01.TS0OWMFL == "Y") /* If add was successful*/
    converseLib.validationFailed(44); /* display a message*/
    TS0OM002.XXXPRCNM = "TS0O210"; /* Process name*/
    TS0OW01.TS0OWMFL = "N"; /* Reset message flag*/
  end

  TS0OM002.TS0OSTAT = "A";
  set TS0OM002.TS0OSTAT protect;


  converse TS0OM002 ;

  TS0OW01.TS0OWPSW = "N"; /* Reset pop-up switch*/

  TS0O211(); /* Check for user ? inquiry*/


end // end TS0O210

// Check for ? inquiry by user
Function TS0O211()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0OM002.YSGCD == "?" /* if any ? entered*/
   || TS0OM002.XCTCD == "?" 
   || TS0OM002.XSTCD == "?")

    if (TS0OM002.YSGCD == "?") /* if ? in region field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   REGION      ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSG01(); /* perform region window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the region     **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0OM002.YSGCD = YSGTBL.YSGCD[XX0XWPIX]; /* move code*/
        TS0OM002.YSGABRV = YSGTBL.YSGABRV[XX0XWPIX]; /* move name*/
      else
        TS0OM002.YSGCD = " "; /* clear fields*/
        TS0OM002.YSGABRV = " ";
      end
    end

    if (TS0OM002.XCTCD == "?") /* if ? in country field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   COUNTRY     ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the country    **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0OM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        TS0OM002.XCTABRV = XCTTBL.XCTABRV[XX0XWPIX]; /* move name*/
      else
        TS0OM002.XCTCD = " "; /* clear fields*/
        TS0OM002.XCTABRV = " ";
      end
    end

    if (TS0OM002.XSTCD == "?") /* if ? in xst field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                  STATE        ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXST01(); /* perform xst window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the xst        **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0OM002.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
        TS0OM002.XSTDESC = XSTTBL.XSTDESC[XX0XWPIX]; /* move name*/
      else
        TS0OM002.XSTCD = " "; /* clear fields*/
        TS0OM002.XSTDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/
    TS0OW01.TS0OWPSW = "Y"; /* bypass exit by indicating fake error*/
    exit stack;

  end


end // end TS0O211

// Check attention identifier
Function TS0O220()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0OM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0OM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0OM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0OM002.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0OM002.XXXPRCNM = "TS0O220"; /* Process name*/
    end

    set TS0OM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0OM002.XXXPRCNM = "TS0O220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0OW01.TS0OWMAP = "1"; /* Move to map 1*/
    TS0OW01.TS0OWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0OM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    XSTSS01(); /* Exit to another application*/
    TS0OM002.XXXPRCNM = "TS0O220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0OM002.XXXPRCNM = "TS0O220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0O220

// Reset highlighted fields
Function TS0O230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0OM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0OM002.CAITEM initialAttributes; /* Commarea application data*/
  set TS0OM002.TSCLOCCD initialAttributes; /* Commarea application data*/
  set TS0OM002.YSGCD initialAttributes; /* Commarea application data*/
  set TS0OM002.XCTCD initialAttributes; /* Commarea application data*/
  set TS0OM002.XSTCD initialAttributes; /* Commarea application data*/
  set TS0OM002.XXXCITY initialAttributes; /* Commarea application data*/
  set TS0OM002.TS-LOC-CNSLD-FL initialAttributes; /* Commarea application data*/
  set TS0OM002.TS0OSTAT initialAttributes; /* Commarea application data*/


end // end TS0O230

// Verify the entered data
Function TS0O240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0OW01.TS0OWDEF = "N"; /* Initialize data entered flag*/

  if (TS0OM002.CAITEM > " ") /* Application data was entered*/
    set TS0OM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0OM002.XXXPRCNM = "TS0O240"; /* Process name*/
  end

  if (converseVar.eventKey is enter) /* If ENTER was pressed*/
    TS0O241(); /* Validate input data*/
  end


end // end TS0O240

// Validate entered data
Function TS0O241()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0OW01.TS0OWDEF = "Y"; /* Data has been entered*/

  if (TS0OM002.TS-LOC-CNSLD-FL == " ") /* Consolidation point flag*/
    converseLib.validationFailed(422); /* Display error message*/
    TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
    set TS0OM002.TS-LOC-CNSLD-FL cursor, modified, bold; /* highlight field*/
  else
    if (TS0OM002.TS-LOC-CNSLD-FL != "Y" && 
    TS0OM002.TS-LOC-CNSLD-FL != "N")
      converseLib.validationFailed(423); /* Display error message*/
      TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
      set TS0OM002.TS-LOC-CNSLD-FL cursor, modified, bold;
    end
  end

  if (TS0OM002.XXXCITY == " ") /* If city was not entered*/
    converseLib.validationFailed(31); /* error message*/
    TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
    set TS0OM002.XXXCITY cursor, modified, bold; /* highlight field*/
  end

  TS0OM002.XSTDESC = " "; /* Blank out field*/
  /* IF TS0OM002.XCTCD EQ 'USA';       /* If country is USA*/
  if (TS0OM002.XSTCD != " ") /* State code entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0OM002.XSTCD in XSTTBL.XSTCD) /* Check valid state*/
    end

    if (sysVar.arrayIndex == 0 /* Not in table*/
     || TS0OM002.XSTCD == " ") /* or state missing*/
      converseLib.validationFailed(30); /* Display error message*/
      TS0OM002.XSTDESC = " "; /* Blank out field*/
      TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
      set TS0OM002.XSTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0OM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
  end
  /* END;*/

  if (TS0OM002.XCTCD != " ") /* Country was entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0OM002.XCTCD in XCTTBL.XCTCD) /* Check valid country*/
    end
    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(29); /* Display error message*/
      TS0OM002.XCTABRV = " ";
      TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
      set TS0OM002.XCTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0OM002.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
    end
  else /* Country not entered*/
    converseLib.validationFailed(29); /* Display error message*/
    TS0OM002.XCTABRV = " ";
    TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
    set TS0OM002.XCTCD cursor, modified, bold; /* highlight field*/
  end

  if (TS0OM002.YSGCD != " ") /* Region was entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0OM002.YSGCD in YSGTBL.YSGCD) /* Check valid region*/
    end
    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(28); /* Display error message*/
      TS0OM002.YSGABRV = " ";
      TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
      set TS0OM002.YSGCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0OM002.YSGABRV = YSGTBL.YSGABRV[sysVar.arrayIndex];
    end
  else /* Country not entered*/
    converseLib.validationFailed(28); /* Display error message*/
    TS0OM002.YSGABRV = " ";
    TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
    set TS0OM002.YSGCD cursor, modified, bold; /* highlight field*/
  end

  if (TS0OM002.TSCLOCCD == " ") /* Location code missing*/
    converseLib.validationFailed(27); /* Display error message*/
    TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0OM002.XXXPRCNM = "TS0O241"; /* Process name*/
    set TS0OM002.TSCLOCCD cursor, modified, bold; /* highlight field*/
  end


end // end TS0O241

// Process valid input request
Function TS0O250()
   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the location.*/
   /* If found then display message that this row exists in*/
     /* either active or inactive status.*/
   /* If not found then add the row.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter     /* Enter was pressed*/
   && converseVar.validationMsgNum == 0 /* and no errors*/
   && TS0OW01.TS0OWCFL == "N")          /* and confirm add flag is equal to no*/
    TS0OW01.TS0OWCFL = "Y";
    TS0OM002.TS0OMMSG = "                              ";
    converseLib.validationFailed(170);
    set TS0OM002.TSCLOCCD cursor; /* Set cursor*/
    TS0OM002.XXXPRCNM = "TS0O250"; /* Process name*/
    exit stack;
  end

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && TS0OW01.TS0OWDEF == "Y"       /* and data was entered*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    set VTSLOC02 empty; /* Clear record*/
    VTSLOC02.TS-LOC-CD = TS0OM002.TSCLOCCD; /* Location code*/
    TS0O252(); /* Select the row*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If duplicate location code*/
      if (VTSLOC02.XXX-STAT == "A") /* Row exists in active status*/
        converseLib.validationFailed(22); /* Error message*/
        set TS0OM002.TSCLOCCD cursor;
        TS0OM002.XXXPRCNM = "TS0O250"; /* Process name*/
      else
        if (VTSLOC02.XXX-STAT == "I") /* Row exists in inactive status*/
          set TS0OM002.TSCLOCCD cursor;
          converseLib.validationFailed(33);
          TS0OM002.XXXPRCNM = "TS0O250"; /* Process name*/
        end
      end
    end

    if (converseVar.validationMsgNum == 0) /* No errors exist*/
      set VTSLOC02 empty; /* clear record*/
      VTSLOC02.TS-LOC-CD = TS0OM002.TSCLOCCD; /* Location Coe*/
      VTSLOC02.YSG-SHP-REG-CD = TS0OM002.YSGCD; /* Region code*/
      VTSLOC02.XCT-CTRY-CD = TS0OM002.XCTCD; /* Country code*/
      VTSLOC02.XST-ST-CD = TS0OM002.XSTCD; /* State code*/
      VTSLOC02.XXX-CITY = TS0OM002.XXXCITY; /* City*/
      VTSLOC02.TS-LOC-CNSLD-FL = TS0OM002.TS-LOC-CNSLD-FL; /* CNSLD F*/
      VTSLOC02.XXX-STAT = TS0OM002.TS0OSTAT; /* STAT-IND*/
      TS0O112(); /* Select set table row*/
      TS0O251(); /* Fetch table row*/
      while (SQLCA.VAGen_SQLCODE == 0) /* If row exists*/
        if (VTSLOC02.XXX-STAT == "A") /* Row exists in active status*/
          converseLib.validationFailed(32);
          set TS0OM002.YSGCD cursor;
          TS0OM002.XXXPRCNM = "TS0O250"; /* Process name*/
          SQLCA.VAGen_SQLCODE = +100; /* End the loop*/
        else
          if (VTSLOC02.XXX-STAT == "I") /* Row exists in inactive status*/
             /* continue on*/
          end
        end
        TS0O251(); /* Fetch table row*/
      end
    end

    if (converseVar.validationMsgNum == 0) /* If still no errors*/
      TS0O253(); /* Add the new table row*/
      TS0OW01.TS0OWDSK = TS0OM002.TSCLOCCD; /* Save dsk key*/
      TS0OW01.TS0OWMFL = "Y"; /* Set message flag to yes*/
    end
  end

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && TS0OW01.TS0OWCFL == "Y")      /* and confirm add flag is equal to yes*/
    TS0OW01.TS0OWCFL = "N";
  end

  if (converseVar.validationMsgNum == 0) /* No errors*/
    set VTSLOC02 empty; /* Clear record*/
    TS0OW01.TS0OWLCD = " "; /* Reset screen keys*/
    TS0OW01.TS0OWXST = " ";
    TS0OW01.TS0OWCTY = " ";
    VTSLOC02.YSG-SHP-REG-CD = TS0OM002.YSGCD; /* Set screen load keys*/
    TS0OW01.TS0OWYSG = TS0OM002.YSGCD;
    VTSLOC02.XCT-CTRY-CD = TS0OM002.XCTCD;
    TS0OW01.TS0OWXCT = TS0OM002.XCTCD;
    TS0OW01.TS0OWDSK = TS0OM002.TSCLOCCD; /* Set save key*/
    TS0OW01.TS0OWSWR = "Y"; /* Set request for data switch*/
    set TS0OM002 initial; /* Clear map*/
  end


end // end TS0O250

// Fetch next row
Function TS0O251()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("N1", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0OW01.TS0OWSWC = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0O113"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0OM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0OM001.XXXPRCNM = "TS0O113"; /* Process name*/
    return; /* Return to previous process*/
  end


end // end TS0O251

// Select location table row
Function TS0O252()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("S ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0O252"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0OM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0OM001.XXXPRCNM = "TS0O252"; /* Process name*/
  end


end // end TS0O252

// Add location table row
Function TS0O253()
   /* ------------------------------------------------------------*/
   /* This module adds a location table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  VTSLOC02.TS-LOC-CD = TS0OM002.TSCLOCCD; /* Location code*/
  VTSLOC02.YSG-SHP-REG-CD = TS0OM002.YSGCD; /* Region code*/
  VTSLOC02.YSG-SHP-REG-ABRV = TS0OM002.YSGABRV; /* Region code*/
  VTSLOC02.XCT-CTRY-CD = TS0OM002.XCTCD; /* Country code*/
  VTSLOC02.XCT-CTRY-ABRV = TS0OM002.XCTABRV; /* Country code*/
  VTSLOC02.XST-ST-CD = TS0OM002.XSTCD; /* State code*/
  VTSLOC02.XST-ST-DESC = TS0OM002.XSTDESC; /* State code*/
  VTSLOC02.XXX-CITY = TS0OM002.XXXCITY; /* City*/
  VTSLOC02.TS-LOC-CNSLD-FL = TS0OM002.TS-LOC-CNSLD-FL; /* Consolidate*/
  VTSLOC02.XXX-STAT = TS0OM002.TS0OSTAT; /* Status Indicator*/
  VTSLOC02.XXX-STAT = "A"; /* Status*/
  /*  */
  /* ----------- Y2K OUT BEGIN -----------*/
  /*  */
  /* MOVE EZEDTE TO TS0OW01.TS0OWYMD;  /* Working change date*/
  /*  */
  /* ----------- Y2K OUT BEGIN -----------*/
  /*  */
  /* ----------- Y2K IN BEGIN ------------*/
  /*  */
  XX0XS01();
  TS0OW01.TS0OWDTE = XX0XW01.XX0XWDAT;
  /*  */
  /* ------------ Y2K IN END -------------*/
  /*  */
  VTSLOC02.ZZ-CHNG-DT = TS0OW01.TS0OWDTE;
  VTSLOC02.ZZ-CHNG-CT = 1; /* Change count*/

  call "VTSLOC02" ("A ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0O250"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0OM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0OM001.XXXPRCNM = "TS0O250"; /* Process name*/
    return; /* Return to previous process*/
  end


end // end TS0O253

// Location Main. Delete Map
Function TS0O300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0O310(); /* Obtain the data to display*/

  TS0O320(); /* Format and display the map*/

  TS0O330(); /* Check attention identifier*/

  TS0O340(); /* Verify the entered data*/

  TS0O350(); /* Process valid input request*/


end // end TS0O300

// Obtain the data to display
Function TS0O310()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on location inquiry map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   || TS0OW01.TS0OWURF == "Y")          /* or update reload flag is yes*/
    VTSLOC02.TS-LOC-CD = TS0OM001.TSCLOCCD[TS0OWIXM]; /* Loc code*/
    VTSLOC02.YSG-SHP-REG-CD = TS0OM001.YSGCD[TS0OWIXM]; /* Regioncode*/
    VTSLOC02.XCT-CTRY-CD = TS0OM001.XCTCD[TS0OWIXM]; /* Country code*/
    VTSLOC02.XST-ST-CD = TS0OM001.XSTCD[TS0OWIXM]; /* State code*/
    VTSLOC02.XXX-CITY = TS0OM001.XXXCITY[TS0OWIXM]; /* City*/
    VTSLOC02.XXX-STAT = TS0OM001.XXX-STAT[TS0OWIXM]; /* Status ind*/
    TS0O252(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if return code ok*/
      TS0OW01.TS0OWYSG = VTSLOC02.YSG-SHP-REG-CD; /* Region code*/
      TS0OW01.TS0OWXCT = VTSLOC02.XCT-CTRY-CD; /* Country code*/
    end
  end


end // end TS0O310

// Format and display the map
Function TS0O320()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/
    set TS0OM002 initial; /* Clear map output area*/
    TS0OM002.TS0OMFUN = "DELETE"; /* Move delete literal to map*/
    TS0OM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TS0OM002.TSCLOCCD = VTSLOC02.TS-LOC-CD; /* Move selected fields*/
    TS0OM002.YSGCD = VTSLOC02.YSG-SHP-REG-CD; /* to map*/
    TS0OM002.YSGABRV = VTSLOC02.YSG-SHP-REG-ABRV;
    TS0OM002.XCTCD = VTSLOC02.XCT-CTRY-CD;
    TS0OM002.XCTABRV = VTSLOC02.XCT-CTRY-ABRV;
    TS0OM002.XSTCD = VTSLOC02.XST-ST-CD;
    TS0OM002.XSTDESC = VTSLOC02.XST-ST-DESC;
    TS0OM002.XXXCITY = VTSLOC02.XXX-CITY;
    TS0OM002.TS-LOC-CNSLD-FL = VTSLOC02.TS-LOC-CNSLD-FL;
    TS0OM002.TS0OSTAT = VTSLOC02.XXX-STAT;
    TS0OM002.TS0OMMSG = "ENTER TO CONFIRM DELETE - PF3 TO ABORT";
    set TS0OM002.CATOAP cursor; /* set cursor to option field*/
  end

  set TS0OM002.TSCLOCCD protect; /* set all fields non-modifiable*/
  set TS0OM002.YSGCD protect;
  set TS0OM002.XCTCD protect;
  set TS0OM002.XSTCD protect;
  set TS0OM002.XXXCITY protect;
  set TS0OM002.TS-LOC-CNSLD-FL protect;
  set TS0OM002.TS0OSTAT protect;

  /* IF EZEMNO NE 0;                   /* Errors exist*/
  /* SET TS0OM002 ALARM;*/
  /* END;*/

  converse TS0OM002 ;


end // end TS0O320

// Check attention identifier
Function TS0O330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (TS0OM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0OM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0OM002.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0OM002.XXXPRCNM = "TS0O330"; /* Process name*/
    end
    set TS0OM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0OM002.XXXPRCNM = "TS0O330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0OW01.TS0OWMAP = "1"; /* Set to map 1*/
    VTSLOC02.TS-LOC-CD = " "; /* Clear certain map reload fields*/
    VTSLOC02.XST-ST-CD = " ";
    VTSLOC02.XXX-CITY = " ";
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0OM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    XSTSS01(); /* Exit to another application*/
    TS0OM002.XXXPRCNM = "TS0O330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0OM002.XXXPRCNM = "TS0O330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0O330

// Verify the entered data
Function TS0O340()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0OM002.CAITEM > " ") /* Application data was entered*/
    set TS0OM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0OM002.XXXPRCNM = "TS0O330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0O340

// Process valid input request
Function TS0O350()
   /* ------------------------------------------------------------*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* ENTER was pressed*/
   && converseVar.validationMsgNum == 0) /* and no errors*/

    VTSLOC02.XXX-STAT = "I"; /* Inactivate table*/
  /*  */
  /* ----------- Y2K OUT BEGIN -----------*/
  /*  */
  /* MOVE EZEDTE TO TS0OW01.TS0OWYMD;       /* Change the date*/
  /*  */
  /* ----------- Y2K OUT BEGIN -----------*/
  /*  */
  /* ----------- Y2K IN BEGIN ------------*/
  /*  */
    XX0XS01();
    TS0OW01.TS0OWDTE = XX0XW01.XX0XWDAT;
  /*  */
  /* ------------ Y2K IN END -------------*/
  /*  */
    VTSLOC02.ZZ-CHNG-DT = TS0OW01.TS0OWDTE;
    TS0O351(); /* Update table*/

    TS0OW01.TS0OWURF = "N"; /* Initialize upd reload flag*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* commit the update*/
      TS0OW01.TS0OWMFL = "Y"; /* Set message flag to yes*/
      TS0OW01.TS0OWSWR = "Y"; /* Set request for data switch*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row was not found*/
        converseLib.validationFailed(12); /* update error occured*/
        TS0OW01.TS0OWURF = "Y"; /* Set update reload flag*/
        exit stack; /* exit to redisplay map*/
      end
    end

    if (converseVar.validationMsgNum == 0) /* IF no errors occured*/
      VTSLOC02.TS-LOC-CD = " "; /* Move map fields to*/
      VTSLOC02.YSG-SHP-REG-CD = TS0OW01.TS0OWYSG;
      VTSLOC02.XCT-CTRY-CD = TS0OW01.TS0OWXCT;
      VTSLOC02.XST-ST-CD = " ";
      VTSLOC02.XXX-CITY = " ";
      VTSLOC02.TS-LOC-CNSLD-FL = " ";
      VTSLOC02.XXX-STAT = TS0OW01.TS-STAT-IND;
    end
  end

end // end TS0O350

// Updated selected row
Function TS0O351()
   /* ------------------------------------------------------------*/
   /* Update the location row to the inactive status.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("U ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0OW01.TS0OWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0O351"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0OM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0OM001.XXXPRCNM = "TS0O351"; /* Process name*/

    end
  end


end // end TS0O351

// Location Main. Update Map
Function TS0O400()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0O410(); /* Obtain the data to display*/

  TS0O420(); /* Format and display the map*/

  TS0O430(); /* Check attention identifier*/

  TS0O440(); /* Verify the entered data*/

  TS0O450(); /* Process valid input request*/


end // end TS0O400

// Obtain the data to display
Function TS0O410()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on location inquiry map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   || TS0OW01.TS0OWURF == "Y")          /* or update reload flag is yes*/
    VTSLOC02.TS-LOC-CD = TS0OM001.TSCLOCCD[TS0OWIXM]; /* Loc code*/
    VTSLOC02.YSG-SHP-REG-CD = TS0OM001.YSGCD[TS0OWIXM]; /* Regioncode*/
    VTSLOC02.XCT-CTRY-CD = TS0OM001.XCTCD[TS0OWIXM]; /* Country code*/
    VTSLOC02.XST-ST-CD = TS0OM001.XSTCD[TS0OWIXM]; /* State code*/
    VTSLOC02.XXX-CITY = TS0OM001.XXXCITY[TS0OWIXM]; /* City*/
    VTSLOC02.XXX-STAT = TS0OM001.XXX-STAT[TS0OWIXM]; /* Status Ind*/
    TS0O252(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if return code ok*/
      TS0OW01.TS0OWYSG = VTSLOC02.YSG-SHP-REG-CD; /* Region code*/
      TS0OW01.TS0OWXCT = VTSLOC02.XCT-CTRY-CD; /* Country code*/
      TS0OW01.TS-STAT-IND = VTSLOC02.XXX-STAT; /* Status Indicator*/
    end
  end


end // end TS0O410

// Format and display the map
Function TS0O420()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error*/
    set TS0OM002 initial; /* Clear map output area*/
    TS0OM002.TS0OMFUN = "UPDATE"; /* Move update literal to map*/
    TS0OM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TS0OM002.TSCLOCCD = VTSLOC02.TS-LOC-CD; /* Move selected fields*/
    TS0OM002.YSGCD = VTSLOC02.YSG-SHP-REG-CD; /* to map*/
    TS0OM002.YSGABRV = VTSLOC02.YSG-SHP-REG-ABRV;
    TS0OM002.XCTCD = VTSLOC02.XCT-CTRY-CD;
    TS0OM002.XCTABRV = VTSLOC02.XCT-CTRY-ABRV;
    TS0OM002.XSTCD = VTSLOC02.XST-ST-CD;
    TS0OM002.XSTDESC = VTSLOC02.XST-ST-DESC;
    TS0OM002.XXXCITY = VTSLOC02.XXX-CITY;
    TS0OM002.TS-LOC-CNSLD-FL = VTSLOC02.TS-LOC-CNSLD-FL;
    TS0OM002.TS0OSTAT = VTSLOC02.XXX-STAT;
    TS0OM002.TS0OMMSG = "ENTER TO CONFIRM UPDATE - PF3 TO ABORT";
    set TS0OM002.CATOAP cursor; /* set cursor to option field*/
  end

  if (VTSLOC02.XXX-STAT == "I")
    set TS0OM002.TSCLOCCD protect; /* set fields non-modifiable*/
    set TS0OM002.YSGCD protect;
    set TS0OM002.XCTCD protect;
    set TS0OM002.XSTCD protect;
    set TS0OM002.XXXCITY protect;
    set TS0OM002.TS-LOC-CNSLD-FL protect;
    set TS0OM002.TS0OSTAT cursor; /* set cursor at status indicator*/
  else
    set TS0OM002.TSCLOCCD cursor; /* set cursor at location*/
    set TS0OM002.TS0OSTAT protect; /* set field non-modifiable*/
  end

  /* IF EZEMNO NE 0;                   /* Errors exist*/
  /* SET TS0OM002 ALARM;*/
  /* END;*/

  converse TS0OM002 ;

  TS0OW01.TS0OWPSW = "N"; /* Reset pop-up switch*/

  TS0O211(); /* Check for user ? inquiry*/

end // end TS0O420

// Check attention identifier
Function TS0O430()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (TS0OM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0OM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0OM002.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0OM002.XXXPRCNM = "TS0O430"; /* Process name*/
    end
    set TS0OM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0OM002.XXXPRCNM = "TS0O430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0OW01.TS0OWMAP = "1"; /* Set to map 1*/
    VTSLOC02.TS-LOC-CD = " "; /* Clear certain map reload fields*/
    VTSLOC02.XST-ST-CD = " ";
    VTSLOC02.XXX-CITY = " ";
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0OM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    XSTSS01(); /* Exit to another application*/
    TS0OM002.XXXPRCNM = "TS0O430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0OM002.XXXPRCNM = "TS0O430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is enter) /* If ENTER was pressed*/
    TS0O241(); /* Validate input data*/
    if (converseVar.validationMsgNum > 0)
      exit stack; /* Exit to redisplay map*/
    end
  end


end // end TS0O430

// Verify the entered data
Function TS0O440()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0OM002.CAITEM > " ") /* Application data was entered*/
    set TS0OM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0OM002.XXXPRCNM = "TS0O430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0O440

// Process valid input request
Function TS0O450()
   /* ------------------------------------------------------------*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter && 
  TS0OM002.TS0OSTAT != "A")
    converseLib.validationFailed(433); /* Display error message*/
    TS0OM002.TS0OMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0OM002.XXXPRCNM = "TS0O450"; /* Process name*/
    set TS0OM002.TS0OSTAT cursor, modified, bold; /* highlight field*/
  end


  if (converseVar.eventKey is enter /* ENTER was pressed*/
   && converseVar.validationMsgNum == 0) /* and no errors*/

    VTSLOC02.XXX-STAT = TS0OW01.TS-STAT-IND; /* Inactivate table*/
  /* Y2K CHANGE*/
  /* MOVE EZEDTE TO TS0OW01.TS0OWYMD;       /* Change the date*/
    XX0XS01();
    TS0OW01.TS0OWDTE = XX0XW01.XX0XWDAT;
  /* Y2K CHANGE*/
    VTSLOC02.ZZ-CHNG-DT = TS0OW01.TS0OWDTE;
    TS0O451(); /* Update table*/

    TS0OW01.TS0OWURF = "N"; /* Initialize upd reload flag*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* commit the update*/
      TS0OW01.TS0OWMFL = "Y"; /* Set message flag to yes*/
      TS0OW01.TS0OWSWR = "Y"; /* Set request for data switch*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row was not found*/
        converseLib.validationFailed(12); /* update error occured*/
        TS0OW01.TS0OWURF = "Y"; /* Set update reload flag*/
        exit stack; /* exit to redisplay map*/
      end
    end

    if (converseVar.validationMsgNum == 0) /* IF no errors occured*/
      VTSLOC02.TS-LOC-CD = " "; /* Move map fields to*/
      VTSLOC02.YSG-SHP-REG-CD = TS0OW01.TS0OWYSG;
      VTSLOC02.XCT-CTRY-CD = TS0OW01.TS0OWXCT;
      VTSLOC02.XST-ST-CD = " ";
      VTSLOC02.XXX-CITY = " ";
      VTSLOC02.TS-LOC-CNSLD-FL = " ";
      VTSLOC02.XXX-STAT = TS0OW01.TS-STAT-IND;
    end
  end

end // end TS0O450

// Updated selected row
Function TS0O451()
   /* ------------------------------------------------------------*/
   /* Update the location row to the inactive status.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  VTSLOC02.TS-LOC-CD = TS0OM002.TSCLOCCD; /* Location code*/
  VTSLOC02.YSG-SHP-REG-CD = TS0OM002.YSGCD; /* Region code*/
  VTSLOC02.YSG-SHP-REG-ABRV = TS0OM002.YSGABRV; /* Region code*/
  VTSLOC02.XCT-CTRY-CD = TS0OM002.XCTCD; /* Country code*/
  VTSLOC02.XCT-CTRY-ABRV = TS0OM002.XCTABRV; /* Country code*/
  VTSLOC02.XST-ST-CD = TS0OM002.XSTCD; /* State code*/
  VTSLOC02.XST-ST-DESC = TS0OM002.XSTDESC; /* State code*/
  VTSLOC02.XXX-CITY = TS0OM002.XXXCITY; /* City*/
  VTSLOC02.TS-LOC-CNSLD-FL = TS0OM002.TS-LOC-CNSLD-FL; /* Consolidate*/
  VTSLOC02.XXX-STAT = TS0OM002.TS0OSTAT; /* Status Indicator*/
  /* Y2K CHANGE*/
  /* MOVE EZEDTE TO TS0OW01.TS0OWYMD;  /* Working change date*/
  XX0XS01();
  TS0OW01.TS0OWDTE = XX0XW01.XX0XWDAT;
  /* Y2K CHANGE*/
  VTSLOC02.ZZ-CHNG-DT = TS0OW01.TS0OWDTE;

  call "VTSLOC02" ("U ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0OW01.TS0OWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0O451"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0OM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0OM001.XXXPRCNM = "TS0O451"; /* Process name*/

    end
  end


end // end TS0O451

// converse pop up window
Function XPYSG01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YSGTBL.YSGCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YSGTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSGTBL.YSGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSGTBL.YSGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YSGTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YSGTBL.YSGCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YSGTBL.YSGDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YSGTBL.YSGCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYSG01

//*** RECORD=TS0OW01 ****
// Working storage for TS0O - Location Inquiry/Maintenance
// ***********************
Record TS0OW01 type basicRecord
  10 TS0OWIXM TS0OWIXM ; 
  10 TS0OWIX2 TS0OWIX2 ; 
  10 TS0OWSIX TS0OWSIX ; 
  10 TS0OWSPG TS0OWSPG ; 
  10 TS0OWSWC TS0OWSWC ; 
  10 TS0OWSWP TS0OWSWP ; 
  10 TS0OWSWR TS0OWSWR ; 
  10 TS0OWPSW TS0OWPSW ; 
  10 TS0OWTSP TS0OWTSP ; 
  10 TS0OWMAP TS0OWMAP ; 
  10 TS0OWFSW TS0OWFSW ; 
  10 TS0OWDSK TS0OWDSK ; 
  10 TS0OWDFL TS0OWDFL ; 
  10 TS0OWSFL TS0OWSFL ; 
  10 TS0OWCFL TS0OWCFL ; 
  10 TS0OWMFL TS0OWMFL ; 
  10 TS0OWURF TS0OWURF ; 
  10 TS0OWDEF TS0OWDEF ; 
  10 TS0OWDTE TS0OWDTE ; 
    15 TS0OWCEN TS0OWCEN ; 
    15 TS0OWYMD TS0OWYMD ; 
  10 TS0OWLCD TS0OWLCD ; 
  10 TS0OWYSG TS0OWYSG ; 
  10 TS0OWXCT TS0OWXCT ; 
  10 TS0OWXST TS0OWXST ; 
  10 TS0OWCTY TS0OWCTY ; 
  10 TS-LOC-CNSLD-FL TS-LOC-CNSLD-FL ; 
  10 TS-STAT-IND TS-STAT-IND ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end TS0OW01

//*** RECORD=TS0OW02 ****
// Temporary storage record for TS0O - Location Inquiry/Maint.
// ***********************
Record TS0OW02 type basicRecord
  10 TS0OWLEN TS0OWLEN ; 
  10 TS0OWLIN TS0OWLIN [15] ; 
    15 TS0OMSEL TS0OMSEL ; 
    15 TSCLOCCD TSCLOCCD ; 
    15 YSGCD YSGCD ; 
    15 YSGABRV YSGABRV ; 
    15 XCTCD XCTCD ; 
    15 XCTABRV XCTABRV ; 
    15 XSTCD XSTCD ; 
    15 XSTDESC XSTDESC ; 
    15 XXXCITY XXXCITY ; 
    15 TS-LOC-CNSLD-FL TS-LOC-CNSLD-FL ; 
    15 TS-STAT-IND TS-STAT-IND ; 
end // end TS0OW02

// STATUS INDICATOR
DataItem TS-STAT-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection tag
DataItem TS0OMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working century
DataItem TS0OWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Confirm add flag
DataItem TS0OWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// City
DataItem TS0OWCTY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Entered Flag
DataItem TS0OWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete flag
DataItem TS0OWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete Save Key
DataItem TS0OWDSK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working date
DataItem TS0OWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Add/delete function switch
DataItem TS0OWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem TS0OWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0OWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Location code
DataItem TS0OWLCD char(4)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// Temporary storage length
DataItem TS0OWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0OWLIN char(66)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0OWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Message flag
DataItem TS0OWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window switch
DataItem TS0OWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem TS0OWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save index
DataItem TS0OWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save page
DataItem TS0OWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0OWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0OWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0OWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS0OWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Update reload flag
DataItem TS0OWURF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Foreign country code
DataItem TS0OWXCT char(4)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// State
DataItem TS0OWXST char(2)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

// Working year month day
DataItem TS0OWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Region code
DataItem TS0OWYSG char(2)  {
  upperCase = yes, align = left, fillCharacter = nullFill, 
  inputRequired = no
}
end

