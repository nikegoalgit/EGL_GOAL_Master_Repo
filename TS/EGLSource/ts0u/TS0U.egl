package ts0u;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=TS0U ****
// Entry into this application is from the shipment add
// header application.  This application will allow the user to
// add summary records for a shipment, namely: container and
// packing list information and totals.  The container
// information is entered in the heading of the screen and
// packing lists (i.e. po#/product) are entered by the user in
// the detail portion of the screen.
// 
// If the screen has been completely filled up with packing
// lists then pressing enter will take the user to a new screen
// with blank detail and with the same header information
// (assuming that the user has more packing lists to enter for
// this container).  If enter is pressed and the screen is not
// filled up, then a new screen with blank header and detail
// fields will appear allowing the user to add a new container
// for the shipment.  If enter is pressed and no data has been
// entered on a blank detail screen, the application will
// continue to the next application in the shipment add
// process.  The user may also revise previously entered
// screens by pressing PF7 to scroll back.  The user will also
// be allowed to change previously entered screens(i.e. add,
// change,delete).  If enter is pressed on a previously entered
// screen, it will in effect act as a PF8 and scroll 1 page
// forward (PF8 will do the same thing).
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          03/16/88 cepple  New application.
// ts#000   07/13/90 cepple  Allow user to enter any po id
//                           regardless of whether or not it
//                           returns multiple po numbers.
// ts#012   08/02/90 cepple  Add gpc to screen heading.
// ts#008   11/20/90 dhuffm  Change default quality code.
// ts#179   03/08/91 dhuffm  Change to not match on quality
//                           code for P.O.
// TS#000   04/09/91 SFORD   Table Changes(set up time for add)
// TS#230   11/04/91 DHUFFM  Change to automatic size loading
//                           for salesman sample shipments.
// TS#233   12/13/91 SFORD   B-Grade - S.O./P.O. enhancements.
// TS#233   03/06/92 SFORD   B-Grade - S.O./P.O. fix bug load
//                           of '0' in PART_CHAR field S.O.=0
// TS#256   04/06/92 SFORD   Add ('SX','S3','S7') to P.O. Type
//                           when creating detail for Salesman
//                           samples automaticly.
// TS#245   04/10/92 SFORD   Allow user to enter invalid S.O.
// TS#999   04/09/91 SFORD   Table Changes user id
// TS#999   09/02/91 NMASTE  CSP 4.1 -- TS0UW-ORD-PART-CHAR
// TS#999   05/17/95 SLEWIS  ADD S.O NUMBER LENGTH CHANGED
// TS#999   11/28/95 SLEWIS  fix cx'bug
// TS#000   11/07/96 JCARL1  Remove alarm from msg display.
// TS1512   09/03/98 JCARL1  Add PO item sequence number and
//                           associated logic.  Also add
//                           leg number and logic.
// TS000    06/07/99 VKUMAR  Fixed bug in pl-nbr assignment.
//          07/27/99 amohai  change leg-nbr assignment for
//                           cte and hk6
// TS0000   02/25/00 npulug  Fixed seq-nbr population problem.
// *********************
Program TS0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC4REC PC4REC; // record
  PC6REC PC6REC; // record
  PC7REC PC7REC; // record
  PCFREC PCFREC; // record
  PCMREC PCMREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS0UW01 TS0UW01; // record
  TS0UW02 TS0UW02; // record
  TS0UW03 TS0UW03; // record
  TS0UW04 TS0UW04; // record
  TS5REC TS5REC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSOREC TSOREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  TSXREC TSXREC; // record
  VCPLHD04 VCPLHD04; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VPOITM03 VPOITM03; // record
  VPRDCU03 VPRDCU03; // record
  VTSLOC02 VTSLOC02; // record
  WTS4001 WTS4001; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOWTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XRETBL {deleteAfterUse = yes}; // table
  use YCNTBL {deleteAfterUse = yes}; // table
  use TS0UM.TS0UM001,  // forms
      TS0UM.TS0UM002, 
      TS0UM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0UW01 empty; /* Initialize working storage*/
    set TS0UW02 empty;
    set TS0UW03 empty;
    set TS0UW04 empty;
    set FY1REC empty; /* Initialize records used*/
    set PC2REC empty;
    set PC3REC empty;
    set PC4REC empty;
    set PC7REC empty;
    set PCFREC empty;
    set PCYREC empty;
    set PG2REC empty;
    set TAEREC empty;
    set TSHREC empty;
    set TSIREC empty;
    set TSOREC empty;
    set TSTREC empty;
    set TSXREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0UM001 initial; /* Initialize map1 output area*/

    TS0UW01.TS0UWPSW = "N"; /* Initialize problem switch*/
    TS0UW01.TS0UWPWF = "N"; /* Initialize po quantity warning flag*/
    TS0UW01.TS0UWNSF = "N"; /* Initialize negative SQL error flag*/
    TS0UW01.TS0UWCAF = "N"; /* Initialize container added flag*/
    TS0UW01.TS0UWFFL = "Y"; /* Initialize first time thru flag*/
    TS0UW01.TS0UWMIX = 1; /* Initialize ws-map-index*/
    TS0UW01.TS0UWMPX = 1; /* Initialize ws-map-position-index*/
    TS0UW01.TS0UWTIX = 1; /* Initialize ws-tbl-index*/
    TS0UW01.TS0UWPGE = 1; /* Initialize ws-page-counter*/
    TS0UW01.TS0UWCTR = 1; /* Initialize ws-container-counter*/
    TS0UW01.TS0UWPCK = 1; /* Initialize ws-packing-list-counter*/
    TS0UW01.TS0UW-MAP-INDICATOR = "1";
    TS0UW01.TS0UWMCN = 8; /* Initialize max cntnr span number*/
    TS0UW01.TS0UWMAX = 200; /* Initialize max-table-lines*/

    if (TSWREC.TSWADDMO == "1") /* If shpmnt header add opt is 1*/
      TS0UM001.TS0UMHDG = "SUMMARY"; /* "summary"*/
      TS0UM002.TS0UMHDG = "SUMMARY"; /* "summary"*/
      TS0UW01.TS0UW-SUMMARY-SHPMT = "1";
    else
      if (TSWREC.TSWADDMO == "2") /* If shpmnt header add opt is 2*/
        TS0UM001.TS0UMHDG = "COMPLETE"; /* "complete"*/
        TS0UM002.TS0UMHDG = "COMPLETE"; /* "complete"*/
      else
        if (TSWREC.TSWADDMO == "3") /* If shpmnt header add opt is 3*/
          TS0UM001.TS0UMHDG = "TENTATIVE"; /* "tentative"*/
          TS0UM002.TS0UMHDG = "TENTATIVE"; /* "tentative"*/
        end
      end
    end

     /* ===> Left Map*/

    TS0UM001.TSFSHPID = TSWREC.TSFSHPID; /* Nike id*/
    TS0UM001.TSFBOL = TSWREC.TSFBOL; /* bill of lading*/
    if (TSWREC.TSWDOMFL == "Y") /* If domestic shpmnt indicated*/
      TS0UM001.TSHCNTNR = TSWREC.TSFBOL; /* default cntnr to BOL*/
    end
    TS0UM001.TSACARCD = TSWREC.TSACARCD; /* carrier code*/
    TS0UM001.TS5CRAFT = TSWREC.TS5CRAFT; /* craft code*/
    TS0UM001.TSFSHPNB = TSWREC.TSFSHPNB; /* shipment number*/
    TS0UM001.TSEDEST = TSWREC.TSEDEST; /* destination*/
    TS0UM001.XWHCD = TSWREC.XWHCD; /* warehouse*/
    TS0UM001.XGPCD = TSWREC.XGPCD; /* gpc*/

     /* ===> Right Map*/

    TS0UM002.TSFSHPID = TSWREC.TSFSHPID; /* Nike id*/
    TS0UM002.TSFBOL = TSWREC.TSFBOL; /* bill of lading*/
    if (TSWREC.TSWDOMFL == "Y") /* If domestic shpmnt indicated*/
      TS0UM002.TSHCNTNR = TSWREC.TSFBOL; /* default cntnr to BOL*/
    end
    TS0UM002.TSACARCD = TSWREC.TSACARCD; /* carrier code*/
    TS0UM002.TS5CRAFT = TSWREC.TS5CRAFT; /* craft code*/
    TS0UM002.TSFSHPNB = TSWREC.TSFSHPNB; /* shipment number*/
    TS0UM002.TSEDEST = TSWREC.TSEDEST; /* destination*/
    TS0UM002.XWHCD = TSWREC.XWHCD; /* warehouse*/
    TS0UM002.XGPCD = TSWREC.XGPCD; /* gpc*/

    goto TS0U000; /* Check valid from application*/


    TS0U000: TS0U000();
     /* ------------------------------------------------------------*/
     /* Special Initialization*/
     /* ------------------------------------------------------------*/

    goto TS0U001; /* Perform special initialization*/


    TS0U001: TS0U001();
     /* ------------------------------------------------------------*/
     /* Converse main processing*/
     /* ------------------------------------------------------------*/

    goto TS0U002; /* Converse Main Processing*/


    TS0U002: TS0U002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Published Schedule Inquiry/Mainten.*/
     /* ------------------------------------------------------------*/

    goto TS0U002; /* Published Schedule inq/mnt*/


  end // end main
end // end TS0U

// Format and display the map
Function TS0U-10000()
   /* ------------------------------------------------------------*/
                /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no errors and not first time thru - clear detail*/
      /* lines, move working storage to screen.*/
   /* 2) Position cursor.*/
   /* 3) If the negative sql return code flag is set to yes -*/
      /* protect all map fields.*/
   /* 4) Converse the map.*/
   /* 5) Check for user ? pop up window inquiry.*/
   /* ------------------------------------------------------------*/

  if (TS0UW01.TS0UWPSW == "N" /* No error message to display*/
   && TS0UW01.TS0UWFFL == "N" /* and not first time thru*/
   && TS0UW01.TS0UWNSF == "N") /* and no neg sql codes encountered*/

    TS0U-11000(); /* ===> Clear fields*/

    if (TS0UW02.PC3PONBR[1] > 0 /* If data exists in working storage*/
     || TS0UW02.TS0UM-CUST-ORD-ID[1] > 0) /**/

      TS0U-12000(); /* move ws to screen*/

    end

  end

  if (TS0UW01.TS0UWPGE == 0) /* If page is zero*/
    TS0UW01.TS0UWPGE = 1; /* Initialize to 1*/
  end

  TS0UM001.TS0UMPG = TS0UW01.TS0UWPGE; /* move page number to map*/
  TS0UM002.TS0UMPG = TS0UW01.TS0UWPGE; /* move page number to map*/
  TS0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0UM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (TS0UW01.TS0UWPSW == "N") /* No error message to display*/
    if (TS0UM001.TSHCNTNR == " ") /* If container heading is missing*/
      set TS0UM001.TSHCNTNR cursor; /* set container cursor*/
      set TS0UM002.TSHCNTNR cursor; /* set container cursor*/
    else
      set TS0UM001.PC3PONBR[1] cursor; /* set first detail cursor*/
      set TS0UM002.PC3PONBR[1] cursor; /* set first detail cursor*/
    end
  end

   /* *************************************************************/
   /* If a negative SQL code encountered - protect all map fields*/
   /* *************************************************************/

  if (TS0UW01.TS0UWNSF == "Y") /* If negative SQL flag eq 'y'*/

    TS0U-13000(); /* ===> Protect all map fields*/

  end

  if (TS0UW01.TS0UW-MAP-INDICATOR == "1"
  )
    TS0U-15000(); /* ===> converse left  map*/

  else
    TS0U-16000(); /* ===> converse right map*/

  end

  TS0UW01.TS0UWPSW = "N"; /* Reset problem switch*/

  TS0U-19000();
                                   /* check for user ? inquiry on csp codes*/

end // end TS0U-10000

// Clear map fields
Function TS0U-11000()
   /* ------------------------------------------------------------*/
      /* Clear detail lines on maps*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(0);
  TS0UM001.VAGen_EZEMSG = " ";
  TS0UM001.XXXPRCNM = "TS0U";
  TS0UM002.VAGen_EZEMSG = " ";
  TS0UM002.XXXPRCNM = "TS0U";

  TS0UW01.TS0UWIXM = 1; /* initialize count index*/

  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/

    /* ====> Left Map*/
          /* --------*/
    TS0UM001.PC3PONBR[TS0UWIXM] = 0; /* clear detail lines*/
    TS0UM001.TS0UMPOI[TS0UWIXM] = " ";
    TS0UM001.PC4ORTYP[TS0UWIXM] = " ";
    TS0UM001.PC2CUXID[TS0UWIXM] = " ";
    TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] = 0;
    TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] = 0;
    TS0UM001.SY1STNBR[TS0UWIXM] = " ";
    TS0UM001.SY2CLRID[TS0UWIXM] = " ";
    TS0UM001.XDMCD[TS0UWIXM] = " ";
    TS0UM001.TS0UMSHP[TS0UWIXM] = 0;
    TS0UM001.TS0UMCRT[TS0UWIXM] = 0;
    TS0UM001.TS0UMCBM[TS0UWIXM] = 0;
    TS0UM001.TS0UMKG[TS0UWIXM] = 0;

    /* ====> Right Map*/
          /* ---------*/
    TS0UM002.PC3PONBR[TS0UWIXM] = 0; /* clear detail lines*/
    TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] = 0;
    TS0UM002.PC2CUXID[TS0UWIXM] = " ";
    TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] = 0;
    TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] = 0;
    TS0UM002.SY1STNBR[TS0UWIXM] = " ";
    TS0UM002.SY2CLRID[TS0UWIXM] = " ";
    TS0UM002.TS0UMSHP[TS0UWIXM] = 0;
    TS0UM002.TS0UMCRT[TS0UWIXM] = 0;
    TS0UM002.TS0UMCBM[TS0UWIXM] = 0;
    TS0UM002.TS0UMKG[TS0UWIXM] = 0;
    TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] = 0;
    TS0UM002.XQACD[TS0UWIXM] = " ";
    TS0UM002.XPGCD[TS0UWIXM] = " ";
    TS0UM002.XUMCD[TS0UWIXM] = " ";
    TS0UM002.XOWCD[TS0UWIXM] = " ";

    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0U-11000 ********************/
end // end TS0U-11000

// Get display data to maps
Function TS0U-12000()
   /* ------------------------------------------------------------*/

              /* MOVE WORKING STORAGE TO SCREEN*/

   /* 1) If ezeaid is pf8, scroll forward to display*/
      /* working storage or a new blank detail page.*/
   /* 2) If ezeaid is pf7, scroll back to show previously*/
      /* entered detail.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* PF8 pressed*/
   || converseVar.eventKey is enter) /* or ENTER is pressed*/

    TS0U-12100(); /* set the map ws position*/

    TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX + 13;

    if (TS0UW01.TS0UWTIX > TS0UW01.TS0UWMAX) /* if table index GT max*/

      converseLib.validationFailed(104); /* packing list exceeded msg*/
      TS0UM001.XXXPRCNM = "U-12000"; /* process name*/
      TS0UM002.XXXPRCNM = "U-12000"; /* process name*/
      TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/

    else

      TS0U-12200(); /* move ws to map*/

    end

    TS0UW01.TS0UWTIX = TS0UW01.TS0UWIXM; /* restore table index*/

  else

    if (converseVar.eventKey is pf7) /* if PF7 was pressed*/

      if (TS0UW01.TS0UWMPX == 1) /* if map position index is 1*/

        converseLib.validationFailed(2); /* no more page to scroll back to*/
        TS0UM001.XXXPRCNM = "U-12000"; /* process name*/
        TS0UM002.XXXPRCNM = "U-12000"; /* process name*/
        TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/

        TS0U-12300(); /* move ws to map*/

      else

        if (TS0UW01.TS0UWMPX < 14) /* if map position index is LT 14*/

          TS0UW01.TS0UWMPX = 1; /* initialize map pos index*/

          TS0U-12300(); /* move ws to map*/

        else

          TS0UW01.TS0UWMPX = TS0UW01.TS0UWMPX - 13; /* back whole page*/

          TS0U-12300(); /* move ws to map*/

        end

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-12000 ********************/
end // end TS0U-12000

// Set map ws position
Function TS0U-12100()
   /* ------------------------------------------------------------*/

              /* SET MAP WORKING STORAGE POSITION*/

   /* Set the working storage position to the map position index*/
   /* plus one full page.*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWIXM = TS0UW01.TS0UWTIX; /* save the table index*/
  TS0UW01.TS0UWTIX = TS0UW01.TS0UWMPX; /* set table index*/
  TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX + 13; /* set index page ahead*/


end // end TS0U-12100

// Get ws to maps (PF8-ENTER)
Function TS0U-12200()
   /* *************************************************************/
        /* Move the ws fields to the map*/
   /* *************************************************************/

  TS0UW01.TS0UWPGE = TS0UW01.TS0UWPGE + 1; /* add 1 to page counter*/
  TS0UW01.TS0UWWK1 = TS0UW01.TS0UWMPX; /* save map pos index*/
  TS0UW01.TS0UWWK1 = TS0UW01.TS0UWWK1 + 13; /* add 13 to map pos index*/
  TS0UW01.TS0UWTIX = TS0UW01.TS0UWWK1; /* set map pos index*/
  TS0UW01.TS0UWMIX = 1; /* set map index to 1*/

  while (TS0UW01.TS0UWMIX <= 13 /* until end of page*/
   && TS0UW01.TS0UWTIX < TS0UW01.TS0UWMAX) /* and not over max*/

    if (TS0UW02.PC3PONBR[TS0UWTIX] > 0 /* if po exists move data*/
     || TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] > 0) /**/

      TS0U-12210(); /* ===> Move the data to the maps*/

    else

      TS0UW01.TS0UWMIX = 14; /* get out of loop*/

    end

    TS0UW01.TS0UWMIX = TS0UW01.TS0UWMIX + 1; /* incr map indes*/
    TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX + 1; /* incr map indes*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-12200 ********************/
end // end TS0U-12200

// Move the data to the maps
Function TS0U-12210()
   /* *********************************************************************/
      /* Move WS*/
   /* *********************************************************************/

   /* ===> Left  Map*/
       /* ---------*/
  TS0UM001.PC3PONBR[TS0UWMIX] = TS0UW02.PC3PONBR[TS0UWTIX];
  TS0UM001.TS0UMPOI[TS0UWMIX] = TS0UW02.TS0UMPOI[TS0UWTIX];
  TS0UM001.PC4ORTYP[TS0UWMIX] = TS0UW02.PC4ORTYP[TS0UWTIX];
  TS0UM001.PC2CUXID[TS0UWMIX] = TS0UW02.PC2CUXID[TS0UWTIX];
  TS0UM001.TS0UM-CUST-ORD-ID[TS0UWMIX] = TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX];
  TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWMIX] = TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWTIX];
  TS0UM001.SY1STNBR[TS0UWMIX] = TS0UW02.SY1STNBR[TS0UWTIX];
  TS0UM001.SY2CLRID[TS0UWMIX] = TS0UW02.SY2CLRID[TS0UWTIX];
  TS0UM001.XDMCD[TS0UWMIX] = TS0UW02.XDMCD[TS0UWTIX];
  TS0UM001.TS0UMSHP[TS0UWMIX] = TS0UW02.TS0UMSHP[TS0UWTIX];
  TS0UM001.TS0UMCRT[TS0UWMIX] = TS0UW02.TS0UMCRT[TS0UWTIX];
  TS0UM001.TS0UMCBM[TS0UWMIX] = TS0UW02.TS0UMCBM[TS0UWTIX];
  TS0UM001.TS0UMKG[TS0UWMIX] = TS0UW02.TS0UMKG[TS0UWTIX];

  /* ===> Right Map*/
       /* ---------*/
  TS0UM002.PC3PONBR[TS0UWMIX] = TS0UW02.PC3PONBR[TS0UWTIX];
  TS0UM002.PC2CUXID[TS0UWMIX] = TS0UW02.PC2CUXID[TS0UWTIX];
  TS0UM002.TS0UM-CUST-ORD-ID[TS0UWMIX] = TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX];
  TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWMIX] = TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWTIX];
  TS0UM002.SY1STNBR[TS0UWMIX] = TS0UW02.SY1STNBR[TS0UWTIX];
  TS0UM002.SY2CLRID[TS0UWMIX] = TS0UW02.SY2CLRID[TS0UWTIX];
  TS0UM002.TS0UMSHP[TS0UWMIX] = TS0UW02.TS0UMSHP[TS0UWTIX];
  TS0UM002.TS0UMCRT[TS0UWMIX] = TS0UW02.TS0UMCRT[TS0UWTIX];
  TS0UM002.TS0UMCBM[TS0UWMIX] = TS0UW02.TS0UMCBM[TS0UWTIX];
  TS0UM002.TS0UMKG[TS0UWMIX] = TS0UW02.TS0UMKG[TS0UWTIX];
  TS0UM002.TS-SHP-LEG-NBR[TS0UWMIX] = TS0UW02.TS-SHP-LEG-NBR[TS0UWTIX];
  TS0UM002.PC-ITM-SEQ-NBR[TS0UWMIX] = TS0UW02.PC-ITM-SEQ-NBR[TS0UWTIX];
  TS0UM002.XQACD[TS0UWMIX] = TS0UW02.XQACD[TS0UWTIX];
  TS0UM002.XPGCD[TS0UWMIX] = TS0UW02.XPGCD[TS0UWTIX];
  TS0UM002.XUMCD[TS0UWMIX] = TS0UW02.XUMCD[TS0UWTIX];
  TS0UM002.XOWCD[TS0UWMIX] = TS0UW02.XOWCD[TS0UWTIX];

  TS0UW02.TS0UWLIN[TS0UWTIX] = " "; /* clear the ws line*/


   /* **                                                        ***/
   /* ********************** End of TS0U-12210 ********************/
end // end TS0U-12210

// Get ws to maps (PF7)
Function TS0U-12300()
   /* ------------------------------------------------------------*/

                  /* MOVE WORKING STORAGE*/

      /* Move working storage detail to map.*/

   /* ------------------------------------------------------------*/

   /* ******************************************/
      /* Calculate the page*/
   /* ******************************************/

  TS0UW01.TS0UWWK1 = TS0UW01.TS0UWMPX; /* move to work index*/
  TS0UW01.TS0UWWK1 = TS0UW01.TS0UWWK1 + 24; /* add 24 to work index*/
  TS0UW01.TS0UWPGE = TS0UW01.TS0UWWK1 / 13; /* calculate page*/

   /* ******************************************/
      /* Move WS*/
   /* ******************************************/

  TS0UW01.TS0UWTIX = TS0UW01.TS0UWMPX; /* set table index*/

  TS0UW01.TS0UWMIX = 1; /* set map index*/

  while (TS0UW01.TS0UWMIX <= 13 /* while more detail lines*/
   && TS0UW01.TS0UWTIX < TS0UW01.TS0UWMAX) /* and LT max*/

    if (TS0UW02.PC3PONBR[TS0UWTIX] > 0 /* if po exists*/
     || TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] > 0) /**/

      TS0U-12210(); /* Move the data to the maps*/

    else

      TS0UW01.TS0UWMIX = 14; /* get out of loop*/

    end

    TS0UW01.TS0UWMIX = TS0UW01.TS0UWMIX + 1; /* incr map indes*/
    TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX + 1; /* incr map indes*/

  end

  TS0UW01.TS0UWTIX = TS0UW01.TS0UWMPX; /* set table index*/


   /* **                                                        ***/
   /* ********************** End of TS0U-12300 ********************/
end // end TS0U-12300

// Protect map fields
Function TS0U-13000()
   /* *************************************************************/
   /* If a negative SQL code encountered - protect all map fields*/
   /* *************************************************************/

  set TS0UM001.TSHCNTNR protect; /* protect header fields*/
  set TS0UM001.YCNCD protect;
  set TS0UM001.TSHTCBM protect;
  set TS0UM001.TSHTKG protect;
  set TS0UM001.TSHSEAL protect;

  set TS0UM002.TSHCNTNR protect; /* protect header fields*/
  set TS0UM002.YCNCD protect;
  set TS0UM002.TSHTCBM protect;
  set TS0UM002.TSHTKG protect;
  set TS0UM002.TSHSEAL protect;

  TS0UW01.TS0UWIXM = 1; /* initialize count index*/

  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/

    /* ===> Left Map*/
         /* --------*/
    set TS0UM001.PC3PONBR[TS0UWIXM] protect; /* protect detail*/
    set TS0UM001.TS0UMPOI[TS0UWIXM] protect;
    set TS0UM001.PC4ORTYP[TS0UWIXM] protect;
    set TS0UM001.PC2CUXID[TS0UWIXM] protect;
    set TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] protect;
    set TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] protect;
    set TS0UM001.SY1STNBR[TS0UWIXM] protect;
    set TS0UM001.SY2CLRID[TS0UWIXM] protect;
    set TS0UM001.XDMCD[TS0UWIXM] protect;
    set TS0UM001.TS0UMSHP[TS0UWIXM] protect;
    set TS0UM001.TS0UMCRT[TS0UWIXM] protect;
    set TS0UM001.TS0UMCBM[TS0UWIXM] protect;
    set TS0UM001.TS0UMKG[TS0UWIXM] protect;

    /* ===> Right Map*/
         /* ---------*/
    set TS0UM002.PC3PONBR[TS0UWIXM] protect; /* protect detail*/
    set TS0UM002.PC2CUXID[TS0UWIXM] protect;
    set TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] protect;
    set TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] protect;
    set TS0UM002.SY1STNBR[TS0UWIXM] protect;
    set TS0UM002.SY2CLRID[TS0UWIXM] protect;
    set TS0UM002.TS0UMSHP[TS0UWIXM] protect;
    set TS0UM002.TS0UMCRT[TS0UWIXM] protect;
    set TS0UM002.TS0UMCBM[TS0UWIXM] protect;
    set TS0UM002.TS0UMKG[TS0UWIXM] protect;
    set TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] protect;
    set TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] protect;
    set TS0UM002.XQACD[TS0UWIXM] protect;
    set TS0UM002.XPGCD[TS0UWIXM] protect;
    set TS0UM002.XUMCD[TS0UWIXM] protect;
    set TS0UM002.XOWCD[TS0UWIXM] protect;

    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-13000 ********************/
end // end TS0U-13000

// Left Map  - M001
Function TS0U-15000()
   /* ------------------------------------------------------------*/
     /* Converse the Right screen*/
   /* ------------------------------------------------------------*/


  converse TS0UM001 ;

   /* ------------------------------------------------------------*/
     /* Move like fields to the other map*/
   /* ------------------------------------------------------------*/

  TS0UM002.TSHCNTNR = TS0UM001.TSHCNTNR;
  TS0UM002.YCNCD = TS0UM001.YCNCD;
  TS0UM002.TSHTCBM = TS0UM001.TSHTCBM;
  TS0UM002.TSHTKG = TS0UM001.TSHTKG;
  TS0UM002.TSHSEAL = TS0UM001.TSHSEAL;


  TS0UW01.TS0UWMIX = 1; /* set map index to 1*/

  while (TS0UW01.TS0UWMIX <= 13) /* until end of page*/

    TS0UM002.PC3PONBR[TS0UWMIX] = TS0UM001.PC3PONBR[TS0UWMIX];
    TS0UM002.PC2CUXID[TS0UWMIX] = TS0UM001.PC2CUXID[TS0UWMIX];
    TS0UM002.TS0UM-CUST-ORD-ID[TS0UWMIX] = TS0UM001.TS0UM-CUST-ORD-ID[TS0UWMIX];
    TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWMIX] = TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWMIX];
    TS0UM002.TS0UMSHP[TS0UWMIX] = TS0UM001.TS0UMSHP[TS0UWMIX];
    TS0UM002.TS0UMCRT[TS0UWMIX] = TS0UM001.TS0UMCRT[TS0UWMIX];
    TS0UM002.TS0UMCBM[TS0UWMIX] = TS0UM001.TS0UMCBM[TS0UWMIX];
    TS0UM002.TS0UMKG[TS0UWMIX] = TS0UM001.TS0UMKG[TS0UWMIX];
    TS0UM002.SY1STNBR[TS0UWMIX] = TS0UM001.SY1STNBR[TS0UWMIX];
    TS0UM002.SY2CLRID[TS0UWMIX] = TS0UM001.SY2CLRID[TS0UWMIX];

    if (TS0UM001.PC3PONBR[TS0UWMIX] == 0
     && TS0UM001.TS0UMPOI[TS0UWMIX] == " "
     && TS0UM001.PC4ORTYP[TS0UWMIX] == " "
     && TS0UM001.PC2CUXID[TS0UWMIX] == " "
     && TS0UM001.TS0UM-CUST-ORD-ID[TS0UWMIX] == 0
     && TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWMIX] == 0
     && TS0UM001.SY1STNBR[TS0UWMIX] == " "
     && TS0UM001.SY2CLRID[TS0UWMIX] == " "
     && TS0UM001.XDMCD[TS0UWMIX] == " "
     && TS0UM001.TS0UMSHP[TS0UWMIX] == 0
     && TS0UM001.TS0UMCRT[TS0UWMIX] == 0
     && TS0UM001.TS0UMCBM[TS0UWMIX] == 0
     && TS0UM001.TS0UMKG[TS0UWMIX] == 0)

      TS0UM002.PC-ITM-SEQ-NBR[TS0UWMIX] = 0;
      TS0UM002.TS-SHP-LEG-NBR[TS0UWMIX] = 0;
      TS0UM002.XQACD[TS0UWMIX] = " ";
      TS0UM002.XPGCD[TS0UWMIX] = " ";
      TS0UM002.XUMCD[TS0UWMIX] = " ";
      TS0UM002.XOWCD[TS0UWMIX] = " ";

    end

    TS0UW01.TS0UWMIX = TS0UW01.TS0UWMIX + 1; /* incr map index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-15000 ********************/
end // end TS0U-15000

// Right Map - M002
Function TS0U-16000()
   /* ------------------------------------------------------------*/
     /* Converse the Left  screen*/
   /* ------------------------------------------------------------*/


  converse TS0UM002 ;

   /* ------------------------------------------------------------*/
     /* Move like fields to the other map*/
   /* ------------------------------------------------------------*/

  TS0UM001.TSHCNTNR = TS0UM002.TSHCNTNR;
  TS0UM001.YCNCD = TS0UM002.YCNCD;
  TS0UM001.TSHTCBM = TS0UM002.TSHTCBM;
  TS0UM001.TSHTKG = TS0UM002.TSHTKG;
  TS0UM001.TSHSEAL = TS0UM002.TSHSEAL;


  TS0UW01.TS0UWMIX = 1; /* set map index to 1*/

  while (TS0UW01.TS0UWMIX <= 13) /* until end of page*/

    TS0UM001.PC3PONBR[TS0UWMIX] = TS0UM002.PC3PONBR[TS0UWMIX];
    TS0UM001.PC2CUXID[TS0UWMIX] = TS0UM002.PC2CUXID[TS0UWMIX];
    TS0UM001.TS0UM-CUST-ORD-ID[TS0UWMIX] = TS0UM002.TS0UM-CUST-ORD-ID[TS0UWMIX];
    TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWMIX] = TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWMIX];
    TS0UM001.TS0UMSHP[TS0UWMIX] = TS0UM002.TS0UMSHP[TS0UWMIX];
    TS0UM001.TS0UMCRT[TS0UWMIX] = TS0UM002.TS0UMCRT[TS0UWMIX];
    TS0UM001.TS0UMCBM[TS0UWMIX] = TS0UM002.TS0UMCBM[TS0UWMIX];
    TS0UM001.TS0UMKG[TS0UWMIX] = TS0UM002.TS0UMKG[TS0UWMIX];
    TS0UM001.SY1STNBR[TS0UWMIX] = TS0UM002.SY1STNBR[TS0UWMIX];
    TS0UM001.SY2CLRID[TS0UWMIX] = TS0UM002.SY2CLRID[TS0UWMIX];

    if (TS0UM002.PC3PONBR[TS0UWMIX] == 0
     && TS0UM002.PC2CUXID[TS0UWMIX] == " "
     && TS0UM002.TS0UM-CUST-ORD-ID[TS0UWMIX] == 0
     && TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWMIX] == 0
     && TS0UM002.SY1STNBR[TS0UWMIX] == " "
     && TS0UM002.SY2CLRID[TS0UWMIX] == " "
     && TS0UM002.TS0UMSHP[TS0UWMIX] == 0
     && TS0UM002.TS0UMCRT[TS0UWMIX] == 0
     && TS0UM002.TS0UMCBM[TS0UWMIX] == 0
     && TS0UM002.TS0UMKG[TS0UWMIX] == 0
     && TS0UM002.TS-SHP-LEG-NBR[TS0UWMIX] == 0
     && TS0UM002.PC-ITM-SEQ-NBR[TS0UWMIX] == 0
     && TS0UM002.XQACD[TS0UWMIX] == " "
     && TS0UM002.XPGCD[TS0UWMIX] == " "
     && TS0UM002.XUMCD[TS0UWMIX] == " "
     && TS0UM002.XOWCD[TS0UWMIX] == " ") /* if detail line blank*/

      TS0UM001.TS0UMPOI[TS0UWMIX] = " ";
      TS0UM001.PC4ORTYP[TS0UWMIX] = " ";
      TS0UM001.XDMCD[TS0UWMIX] = " ";

    end

    TS0UW01.TS0UWMIX = TS0UW01.TS0UWMIX + 1; /* incr map indes*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0U-16000 ********************/
end // end TS0U-16000

// Check for user ? code inquiry
Function TS0U-19000()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWDEF = "N"; /* set data entered flag to no*/

  if (TS0UM001.YCNCD == "?" /* if ? in container type field*/
   || TS0UM002.YCNCD == "?") /* if ? in container type field*/
    TS0UW01.TS0UWDEF = "Y"; /* set data entered flag to yes*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "              CONTAINER TYPE"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYCN01(); /* perform container type window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the container  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      TS0UM001.YCNCD = YCNTBL.YCNCD[XX0XWPIX]; /* move code*/
      TS0UM002.YCNCD = YCNTBL.YCNCD[XX0XWPIX]; /* move code*/
    else
      TS0UM001.YCNCD = " "; /* clear fields*/
      TS0UM002.YCNCD = " "; /* clear fields*/
    end
  end

  TS0UW01.TS0UWIXM = 1; /* set index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/

    if (TS0UM001.XDMCD[TS0UWIXM] == "?") /* if ? in dimension field*/
      TS0UW01.TS0UWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                DIMENSION"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dimension window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0UM001.XDMCD[TS0UWIXM] = XDMTBL.XDMCD[XX0XWPIX];
      else
        TS0UM001.XDMCD[TS0UWIXM] = " "; /* clear fields*/
      end
    end

    if (TS0UM002.XQACD[TS0UWIXM] == "?") /* if ? in quality field*/
      TS0UW01.TS0UWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 QUALITY"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* perform quality window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0UM002.XQACD[TS0UWIXM] = XQATBL.XQACD[XX0XWPIX];
      else
        TS0UM002.XQACD[TS0UWIXM] = " "; /* clear fields*/
      end
    end

    if (TS0UM002.XPGCD[TS0UWIXM] == "?") /* if ? in package field*/
      TS0UW01.TS0UWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              PACKAGING TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPG01(); /* perform package window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0UM002.XPGCD[TS0UWIXM] = XPGTBL.XPGCD[XX0XWPIX];
      else
        TS0UM002.XPGCD[TS0UWIXM] = " "; /* clear fields*/
      end
    end

    if (TS0UM002.XUMCD[TS0UWIXM] == "?") /* if ? in unit of measure field*/
      TS0UW01.TS0UWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             UNIT OF MEASURE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXUM01(); /* perform package window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0UM002.XUMCD[TS0UWIXM] = XUMTBL.XUMCD[XX0XWPIX];
      else
        TS0UM002.XUMCD[TS0UWIXM] = " "; /* clear fields*/
      end
    end

    if (TS0UM002.XOWCD[TS0UWIXM] == "?") /* if ? in owner group field*/
      TS0UW01.TS0UWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "               OWNER GROUP"; /* heading*/

      if (TS0UM001.XWHCD in XOWTBL.XWHCD) /* If warehouse in table*/
        XX0XW02.XWHCD = TS0UM001.XWHCD; /* Warehouse*/
      else
        XX0XW02.XWHCD = "00"; /* default*/
      end

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform owner group window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the            **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0UM002.XOWCD[TS0UWIXM] = XOWTBL.XOWCD[XX0XWPIX];
      else
        TS0UM002.XOWCD[TS0UWIXM] = " "; /* clear fields*/
      end
    end

    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/

  end

  if (TS0UW01.TS0UWDEF == "Y") /* if a pop up window was displayed*/
    converseLib.clearScreen();
     /* restore the original map*/
    converseLib.clearScreen();
     /* restore the original map*/
  end


end // end TS0U-19000

// Cascade data into ws
Function TS0U-41000()
   /* ------------------------------------------------------------*/

             /* CASCADE DATA INTO WORKING STORAGE*/

      /* This process will cascade the screen data entered by*/
      /* the user into a working storage record in order to*/
      /* fill in all blanks left by the user in the map.*/

   /* ------------------------------------------------------------*/

   /* ** Clear most of w03 working storage ***/
  TS0UW01.TS0UWIXM = 1; /* initialize index*/

  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail*/
    TS0UW03.XOWCD[TS0UWIXM] = " ";
    TS0UW03.XUMCD[TS0UWIXM] = " ";
    TS0UW03.XPGCD[TS0UWIXM] = " ";
    TS0UW03.XQACD[TS0UWIXM] = " ";
    TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM] = 0;
    TS0UW03.TS-SHP-LEG-NBR[TS0UWIXM] = 0;
    TS0UW03.XDMCD[TS0UWIXM] = " ";
    TS0UW03.TS0UMKG[TS0UWIXM] = 0;
    TS0UW03.TS0UMCBM[TS0UWIXM] = 0;
    TS0UW03.TS0UMCRT[TS0UWIXM] = 0;
    TS0UW03.TS0UMSHP[TS0UWIXM] = 0;
    TS0UW03.PC3PONBR[TS0UWIXM] = 0;
    TS0UW03.TS0UMPOI[TS0UWIXM] = " ";
    TS0UW03.PC4ORTYP[TS0UWIXM] = " ";
    TS0UW03.PC2CUXID[TS0UWIXM] = " ";
    TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] = 0;
    TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] = 0;
    TS0UW03.SY1STNBR[TS0UWIXM] = " ";
    TS0UW03.SY2CLRID[TS0UWIXM] = " ";
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end


   /* ***********************************/
       /* cascade p.o. number*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.PC3PONBR = TS0UM001.PC3PONBR[TS0UWIXM];
  TS0UW03.PC3PONBR[TS0UWIXM] = TS0UM001.PC3PONBR[TS0UWIXM];

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM001.PC3PONBR[TS0UWIXM] == 0   /* if blank on screen*/
     && TS0UM001.TS0UMPOI[TS0UWIXM] == " " /* and no overriding po id*/
     && TS0UM001.PC4ORTYP[TS0UWIXM] == " " 
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.PC3PONBR[TS0UWIXM] = TS0UW01.PC3PONBR;
    else
      TS0UW01.PC3PONBR = TS0UM001.PC3PONBR[TS0UWIXM];
      TS0UW03.PC3PONBR[TS0UWIXM] = TS0UM001.PC3PONBR[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade p.o. id*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.TS0UMPOI = TS0UM001.TS0UMPOI[TS0UWIXM];
  TS0UW03.TS0UMPOI[TS0UWIXM] = TS0UM001.TS0UMPOI[TS0UWIXM];

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM001.TS0UMPOI[TS0UWIXM] == " " /* if blank on screen*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.TS0UMPOI[TS0UWIXM] = TS0UW01.TS0UMPOI;
    else
      TS0UW01.TS0UMPOI = TS0UM001.TS0UMPOI[TS0UWIXM];
      TS0UW03.TS0UMPOI[TS0UWIXM] = TS0UM001.TS0UMPOI[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade order type*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.PC4ORTYP = TS0UM001.PC4ORTYP[TS0UWIXM];
  TS0UW03.PC4ORTYP[TS0UWIXM] = TS0UM001.PC4ORTYP[TS0UWIXM];

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM001.PC4ORTYP[TS0UWIXM] == " " /* if blank on screen*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.PC4ORTYP[TS0UWIXM] = TS0UW01.PC4ORTYP;
    else
      TS0UW01.PC4ORTYP = TS0UM001.PC4ORTYP[TS0UWIXM];
      TS0UW03.PC4ORTYP[TS0UWIXM] = TS0UM001.PC4ORTYP[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade customer xref*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.PC2CUXID = TS0UM001.PC2CUXID[TS0UWIXM];
  TS0UW03.PC2CUXID[TS0UWIXM] = TS0UM001.PC2CUXID[TS0UWIXM];

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM001.PC2CUXID[TS0UWIXM] == " " /* if blank on screen*/
     && TS0UM001.SY1STNBR[TS0UWIXM] == " " /* and style is blank*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.PC2CUXID[TS0UWIXM] = TS0UW01.PC2CUXID;
    else
      TS0UW01.PC2CUXID = TS0UM001.PC2CUXID[TS0UWIXM];
      TS0UW03.PC2CUXID[TS0UWIXM] = TS0UM001.PC2CUXID[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade style*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.SY1STNBR = TS0UM001.SY1STNBR[TS0UWIXM];
  TS0UW03.SY1STNBR[TS0UWIXM] = TS0UM001.SY1STNBR[TS0UWIXM];

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM001.SY1STNBR[TS0UWIXM] == " " /* if blank on screen*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.SY1STNBR[TS0UWIXM] = TS0UW01.SY1STNBR;
    else
      TS0UW01.SY1STNBR = TS0UM001.SY1STNBR[TS0UWIXM];
      TS0UW03.SY1STNBR[TS0UWIXM] = TS0UM001.SY1STNBR[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade color*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.SY2CLRID = TS0UM001.SY2CLRID[TS0UWIXM];
  if (TS0UW01.SY2CLRID == " ") /* if color is blank*/
    TS0UW01.SY2CLRID = "00 "; /* default to '00 '*/
  end
  TS0UW03.SY2CLRID[TS0UWIXM] = TS0UW01.SY2CLRID;

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM001.SY2CLRID[TS0UWIXM] == " " /* if blank on screen*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.SY2CLRID[TS0UWIXM] = TS0UW01.SY2CLRID;
    else
      TS0UW01.SY2CLRID = TS0UM001.SY2CLRID[TS0UWIXM];
      TS0UW03.SY2CLRID[TS0UWIXM] = TS0UM001.SY2CLRID[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* move all other fields*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/

    TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] = TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM];
    TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] = TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM];
    TS0UW03.TS0UMSHP[TS0UWIXM] = TS0UM001.TS0UMSHP[TS0UWIXM];
    TS0UW03.TS0UMCRT[TS0UWIXM] = TS0UM001.TS0UMCRT[TS0UWIXM];
    TS0UW03.TS0UMCBM[TS0UWIXM] = TS0UM001.TS0UMCBM[TS0UWIXM];
    TS0UW03.TS0UMKG[TS0UWIXM] = TS0UM001.TS0UMKG[TS0UWIXM];
    TS0UW03.XDMCD[TS0UWIXM] = TS0UM001.XDMCD[TS0UWIXM];
    TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM] = TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM];

    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/

  end

   /* ********************************************/
     /* clear fields that have no values in them*/
   /* ********************************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    if (TS0UM002.XOWCD[TS0UWIXM] == " " /* if detail line blank*/
     && TS0UM002.XUMCD[TS0UWIXM] == " " 
     && TS0UM002.XPGCD[TS0UWIXM] == " " 
     && TS0UM002.XQACD[TS0UWIXM] == " " 
     && TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] == 0
     && TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] == 0
     && TS0UM001.XDMCD[TS0UWIXM] == " " 
     && TS0UM001.TS0UMKG[TS0UWIXM] == 0 
     && TS0UM001.TS0UMCBM[TS0UWIXM] == 0
     && TS0UM001.TS0UMCRT[TS0UWIXM] == 0
     && TS0UM001.TS0UMSHP[TS0UWIXM] == 0
     && TS0UM001.PC3PONBR[TS0UWIXM] == 0
     && TS0UM001.TS0UMPOI[TS0UWIXM] == " "
     && TS0UM001.PC4ORTYP[TS0UWIXM] == " "
     && TS0UM001.PC2CUXID[TS0UWIXM] == " "
     && TS0UM001.SY1STNBR[TS0UWIXM] == " "
     && TS0UM001.SY2CLRID[TS0UWIXM] == " "
     && TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
     && TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0)

      TS0UW03.PC3PONBR[TS0UWIXM] = 0; /* clear cascaded keys*/
      TS0UW03.TS0UMPOI[TS0UWIXM] = " ";
      TS0UW03.PC4ORTYP[TS0UWIXM] = " ";
      TS0UW03.PC2CUXID[TS0UWIXM] = " ";
      TS0UW03.SY1STNBR[TS0UWIXM] = " ";
      TS0UW03.SY2CLRID[TS0UWIXM] = " ";
      TS0UW03.XQACD[TS0UWIXM] = " ";
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0U-41000 ********************/
end // end TS0U-41000

// Set Cascade switch
Function TS0U-41100()
   /* ------------------------------------------------------------*/
      /* Set the cascade switch if the map detail line has data*/
      /* present.*/
   /* ------------------------------------------------------------*/


  if (TS0UM001.PC3PONBR[TS0UWIXM] > 0
   || TS0UM001.TS0UMPOI[TS0UWIXM] > " "
   || TS0UM001.PC4ORTYP[TS0UWIXM] > " "
   || TS0UM001.PC2CUXID[TS0UWIXM] > " "
   || TS0UM001.SY1STNBR[TS0UWIXM] > " "
   || TS0UM001.SY2CLRID[TS0UWIXM] > " "
   || TS0UM001.XDMCD[TS0UWIXM] > " " 
   || TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] > 0
   || TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] > 0
   || TS0UM001.TS0UMKG[TS0UWIXM] > 0 
   || TS0UM001.TS0UMCBM[TS0UWIXM] > 0
   || TS0UM001.TS0UMCRT[TS0UWIXM] > 0
   || TS0UM001.TS0UMSHP[TS0UWIXM] > 0
   || TS0UM002.XOWCD[TS0UWIXM] > " " /* if detail line blank*/
   || TS0UM002.XUMCD[TS0UWIXM] > " " 
   || TS0UM002.XPGCD[TS0UWIXM] > " " 
   || TS0UM002.XQACD[TS0UWIXM] > " " 
   || TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] > 0
   || TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] > 0)

    TS0UW01.TS0UW-CASCADE-SWITCH-ON = "Y";

  else

    TS0UW01.TS0UW-CASCADE-SWITCH-ON = "N";

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-41100 ********************/
end // end TS0U-41100

// Cascade data into ws
Function TS0U-42000()
   /* ------------------------------------------------------------*/

             /* CASCADE DATA INTO WORKING STORAGE*/

      /* This process will cascade the screen data entered by*/
      /* the user into a working storage record in order to*/
      /* fill in all blanks left by the user in the map.*/

   /* ------------------------------------------------------------*/

   /* ** Clear most of w03 working storage ***/
  TS0UW01.TS0UWIXM = 1; /* initialize index*/

  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail*/
    TS0UW03.XOWCD[TS0UWIXM] = " ";
    TS0UW03.XUMCD[TS0UWIXM] = " ";
    TS0UW03.XPGCD[TS0UWIXM] = " ";
    TS0UW03.XQACD[TS0UWIXM] = " ";
    TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM] = 0;
    TS0UW03.TS-SHP-LEG-NBR[TS0UWIXM] = 0;
    TS0UW03.XDMCD[TS0UWIXM] = " ";
    TS0UW03.TS0UMKG[TS0UWIXM] = 0;
    TS0UW03.TS0UMCBM[TS0UWIXM] = 0;
    TS0UW03.TS0UMCRT[TS0UWIXM] = 0;
    TS0UW03.TS0UMSHP[TS0UWIXM] = 0;
    TS0UW03.PC3PONBR[TS0UWIXM] = 0;
    TS0UW03.TS0UMPOI[TS0UWIXM] = " ";
    TS0UW03.PC4ORTYP[TS0UWIXM] = " ";
    TS0UW03.PC2CUXID[TS0UWIXM] = " ";
    TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] = " ";
    TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] = " ";
    TS0UW03.SY1STNBR[TS0UWIXM] = " ";
    TS0UW03.SY2CLRID[TS0UWIXM] = " ";
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end


   /* ***********************************/
       /* cascade p.o. number*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.PC3PONBR = TS0UM002.PC3PONBR[TS0UWIXM];
  TS0UW03.PC3PONBR[TS0UWIXM] = TS0UM002.PC3PONBR[TS0UWIXM];

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM002.PC3PONBR[TS0UWIXM] == 0   /* if blank on screen*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y"
     && TS0UM001.TS0UMPOI[TS0UWIXM] == " " /* and no overriding po id*/
     && TS0UM001.PC4ORTYP[TS0UWIXM] == " ")
      TS0UW03.PC3PONBR[TS0UWIXM] = TS0UW01.PC3PONBR;
    else
      TS0UW01.PC3PONBR = TS0UM002.PC3PONBR[TS0UWIXM];
      TS0UW03.PC3PONBR[TS0UWIXM] = TS0UM002.PC3PONBR[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade customer xref*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.PC2CUXID = TS0UM002.PC2CUXID[TS0UWIXM];
  TS0UW03.PC2CUXID[TS0UWIXM] = TS0UM002.PC2CUXID[TS0UWIXM];

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM002.PC2CUXID[TS0UWIXM] == " " /* if blank on screen*/
     && TS0UM002.SY1STNBR[TS0UWIXM] == " " /* and style is blank*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.PC2CUXID[TS0UWIXM] = TS0UW01.PC2CUXID;
    else
      TS0UW01.PC2CUXID = TS0UM002.PC2CUXID[TS0UWIXM];
      TS0UW03.PC2CUXID[TS0UWIXM] = TS0UM002.PC2CUXID[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade style*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.SY1STNBR = TS0UM002.SY1STNBR[TS0UWIXM];
  TS0UW03.SY1STNBR[TS0UWIXM] = TS0UM002.SY1STNBR[TS0UWIXM];

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM002.SY1STNBR[TS0UWIXM] == " " /* if blank on screen*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.SY1STNBR[TS0UWIXM] = TS0UW01.SY1STNBR;
    else
      TS0UW01.SY1STNBR = TS0UM002.SY1STNBR[TS0UWIXM];
      TS0UW03.SY1STNBR[TS0UWIXM] = TS0UM002.SY1STNBR[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade color*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  TS0UW01.SY2CLRID = TS0UM002.SY2CLRID[TS0UWIXM];
  if (TS0UW01.SY2CLRID == " ") /* if color is blank*/
    TS0UW01.SY2CLRID = "00 "; /* default to '00 '*/
  end
  TS0UW03.SY2CLRID[TS0UWIXM] = TS0UW01.SY2CLRID;

  TS0UW01.TS0UWIXM = 2; /* increment index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    TS0U-41100(); /* ===> set cascade switch*/
    if (TS0UM002.SY2CLRID[TS0UWIXM] == " " /* if blank on screen*/
     && TS0UW01.TS0UW-CASCADE-SWITCH-ON == "Y")
      TS0UW03.SY2CLRID[TS0UWIXM] = TS0UW01.SY2CLRID;
    else
      TS0UW01.SY2CLRID = TS0UM002.SY2CLRID[TS0UWIXM];
      TS0UW03.SY2CLRID[TS0UWIXM] = TS0UM002.SY2CLRID[TS0UWIXM];
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* move all other fields*/
   /* ***********************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/

    TS0UW03.TS0UMSHP[TS0UWIXM] = TS0UM002.TS0UMSHP[TS0UWIXM];
    TS0UW03.TS0UMCRT[TS0UWIXM] = TS0UM002.TS0UMCRT[TS0UWIXM];
    TS0UW03.TS0UMCBM[TS0UWIXM] = TS0UM002.TS0UMCBM[TS0UWIXM];
    TS0UW03.TS0UMKG[TS0UWIXM] = TS0UM002.TS0UMKG[TS0UWIXM];
    TS0UW03.TS-SHP-LEG-NBR[TS0UWIXM] = TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM];
    TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM] = TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM];
    TS0UW03.XQACD[TS0UWIXM] = TS0UM002.XQACD[TS0UWIXM];
    TS0UW03.XPGCD[TS0UWIXM] = TS0UM002.XPGCD[TS0UWIXM];
    TS0UW03.XUMCD[TS0UWIXM] = TS0UM002.XUMCD[TS0UWIXM];
    TS0UW03.XOWCD[TS0UWIXM] = TS0UM002.XOWCD[TS0UWIXM];
    TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] = TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM];
    TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] = TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM];

    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/

  end

   /* ********************************************/
     /* clear fields that have no values in them*/
   /* ********************************************/

  TS0UW01.TS0UWIXM = 1; /* initialize index*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    if (TS0UM002.XOWCD[TS0UWIXM] == " " /* if detail line blank*/
     && TS0UM002.XUMCD[TS0UWIXM] == " " 
     && TS0UM002.XPGCD[TS0UWIXM] == " " 
     && TS0UM002.XQACD[TS0UWIXM] == " " 
     && TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] == 0
     && TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] == 0
     && TS0UM002.TS0UMKG[TS0UWIXM] == 0 
     && TS0UM002.TS0UMCBM[TS0UWIXM] == 0
     && TS0UM002.TS0UMCRT[TS0UWIXM] == 0
     && TS0UM002.TS0UMSHP[TS0UWIXM] == 0
     && TS0UM002.PC3PONBR[TS0UWIXM] == 0
     && TS0UM001.TS0UMPOI[TS0UWIXM] == " "
     && TS0UM001.PC4ORTYP[TS0UWIXM] == " "
     && TS0UM002.PC2CUXID[TS0UWIXM] == " "
     && TS0UM002.SY1STNBR[TS0UWIXM] == " "
     && TS0UM002.SY2CLRID[TS0UWIXM] == " ")

      TS0UW03.PC3PONBR[TS0UWIXM] = 0; /* clear cascaded keys*/
      TS0UW03.TS0UMPOI[TS0UWIXM] = " ";
      TS0UW03.PC4ORTYP[TS0UWIXM] = " ";
      TS0UW03.PC2CUXID[TS0UWIXM] = " ";
      TS0UW03.SY1STNBR[TS0UWIXM] = " ";
      TS0UW03.SY2CLRID[TS0UWIXM] = " ";
      TS0UW03.XQACD[TS0UWIXM] = " ";

    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0U-42000 ********************/
end // end TS0U-42000

// Verify (S ) DREADO.VORHDRR1 or
Function TS0U-43110()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/


  if (TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
   && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0)

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1CUOID = TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM];
  OP1REC.OP1NORID = TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM];
  OP1REC.OP1PARTN = TS0UW03.TS0UW-ORD-PART-CHAR[TS0UWIXM];


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (TS0UW03.PC2CUXID[TS0UWIXM] == " ") /* if no cust info*/

        TS0U-43111();

      end
      return; /* ===> return to previous process*/

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end


    /* ------------------------------------------------------------*/
     /* If row not found, indicate that invalid. "old way"*/
     /* Now: By-pass edit error of this type.*/
     /* Invalid S.O. NBRs will be handled*/
     /* as a warning in TS0U-49900.*/
     /* ie.) Do not stop the user with this type of edit.*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/


    try
      call "VEORHD01" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/

    if (sysVar.errorCode == "00000000") /* Successful call*/

      /* ------------------------------------------------------------*/
      /* If successful, return to the previous process.*/
      /* ------------------------------------------------------------*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

        if (TS0UW03.PC2CUXID[TS0UWIXM] == " ") /* if no cust info*/

          TS0U-43111();

        end
        return; /* ===> return to previous process*/

      end

      return; /* ===> return to previous process*/

    end

  end

  TS0UW01.TS0UWPSW = "Y";
  TS0UM001.XXXPRCNM = "Y-25100";
  TS0UM002.XXXPRCNM = "Y-25100";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "U-43110"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] cursor, bold;
  set TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] bold;
  set TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] cursor, bold;
  set TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


   /* **                                                        ***/
   /* ********************** End of TS0U-43110 ********************/
end // end TS0U-43110

// Select (SA)    DPRODC.VPRDCU01
Function TS0U-43111()
   /* ------------------------------------------------------------*/
   /* Select Customer XREF & ISEG using store info from OP1REC*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = TSWREC.XGPCD;
  PC2REC.KUCCOID = OP1REC.KUCCOID;
  PC2REC.KUMSTRID = OP1REC.KUMSTRID;
  PC2REC.XNXCD = OP1REC.XNXCD;

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        TS0UW03.PC2CUXID[TS0UWIXM] = PC2REC.PC2CUXID;
        TS0UM001.PC2CUXID[TS0UWIXM] = PC2REC.PC2CUXID;
        TS0UM002.PC2CUXID[TS0UWIXM] = PC2REC.PC2CUXID;
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TS0UM001.XXXPRCNM = "U-43111"; /* Module identification*/
  TS0UM002.XXXPRCNM = "U-43111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "U-43111"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of TS0U-43111 ********************/
end // end TS0U-43111

// Verify P.O. NBR Entered
Function TS0U-43410()
   /* ------------------------------------------------------------*/
         /* VERIFY P.O. NUMBER*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = TS0UW03.PC3PONBR[TS0UWIXM]; /* P.O. type*/
  PCYREC.PCYFUNC = "S "; /* Select alternate*/

  TS0US10(); /* select the po*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
    if (PC3REC.YPUCD == "OP" /* po open*/
     || PC3REC.YPUCD == "FC") /* or only factory closed*/
      TS0UW01.TS0UWDAT = PC3REC.PC3POIDT;
      TS0UW01.TS0UWPCC = TS0UW01.TS0UWPCN;
      TS0UW01.TS0UWPYR = TS0UW01.TS0UWPYY;
      TS0UW01.TS0UWPMO = TS0UW01.TS0UWPM1;
      TS0UW01.TS0UWDMO = TS0UW01.TS0UWPM2;
      TS0UW01.TS0UWFCT = PC3REC.FY1FCTYC;
      if (TSWREC.XGPCD == "03")
        TS0UW01.TS0UWPYR = PC3REC.PCFSECD;
      end
      TS0UW03.TS0UMPOI[TS0UWIXM] = TS0UW01.TS0UWPOI;
      TS0UW03.PC4ORTYP[TS0UWIXM] = PC3REC.PC4ORTYP;
      if (TS0UM001.PC3PONBR[TS0UWIXM] != 0) /* If po # on screen*/
        TS0UM001.TS0UMPOI[TS0UWIXM] = TS0UW01.TS0UWPOI;
        TS0UM001.PC4ORTYP[TS0UWIXM] = PC3REC.PC4ORTYP;
      end
    else
      converseLib.validationFailed(267); /* error message*/
      TS0UM001.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UW01.TS0UWPWF = "Y"; /* indicate problem*/
      set TS0UM001.PC3PONBR[TS0UWIXM] cursor, modified, bold;
      set TS0UM002.PC3PONBR[TS0UWIXM] cursor, modified, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
      converseLib.validationFailed(118); /* error message*/
      TS0UM001.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
      set TS0UM001.PC3PONBR[TS0UWIXM] cursor, modified, bold;
      set TS0UM002.PC3PONBR[TS0UWIXM] cursor, modified, bold;
    end
  end
end // end TS0U-43410

// Verify P.O. id entered
Function TS0U-43420()
   /* ------------------------------------------------------------*/
         /* VERIFY P.O. NUMBER OR P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/


  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.FY1FCTYC = TS0UW01.TS0UWFCT; /* Factory code*/
  TS0UW01.TS0UWPCN = TS0UW01.TS0UWPCC; /* redefine*/
  TS0UW01.TS0UWPYY = TS0UW01.TS0UWPYR;
  TS0UW01.TS0UWPM1 = TS0UW01.TS0UWPMO;
  TS0UW01.TS0UWPM2 = TS0UW01.TS0UWDMO;
  PC3REC.PC3POIDT = TS0UW01.TS0UWDAT; /* P.O. id*/
  PC3REC.PC4ORTYP = TS0UW03.PC4ORTYP[TS0UWIXM]; /* P.O. type*/
  PCYREC.PCYFUNC = "SA"; /* Select alternate*/

  TS0US10(); /* Select the p.o. id to obtain p.o. #*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
    if (PC3REC.YPUCD == "OP" /* po open*/
     || PC3REC.YPUCD == "FC") /* or only factory closed*/
      TS0UW03.PC3PONBR[TS0UWIXM] = PC3REC.PC3PONBR;
      if (TS0UM001.TS0UMPOI[TS0UWIXM] != " ") /* If po id on screen*/
        TS0UM001.PC3PONBR[TS0UWIXM] = PC3REC.PC3PONBR;
        TS0UM002.PC3PONBR[TS0UWIXM] = PC3REC.PC3PONBR;
      end
    else
      converseLib.validationFailed(267); /* error message*/
      TS0UM001.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UW01.TS0UWPWF = "Y"; /* indicate problem*/
      set TS0UM001.TS0UMPOI[TS0UWIXM] cursor, modified, bold;
      set TS0UM001.PC4ORTYP[TS0UWIXM] modified, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Row does not exist*/
      converseLib.validationFailed(167); /* No data to display*/
      set TS0UM001.TS0UMPOI[TS0UWIXM] cursor, modified, bold;
      set TS0UM001.PC4ORTYP[TS0UWIXM] modified, bold;
      TS0UM001.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/
        converseLib.validationFailed(298); /* Multiple row error message*/
        set TS0UM001.PC3PONBR[TS0UWIXM] cursor;
        set TS0UM001.TS0UMPOI[TS0UWIXM] bold;
        set TS0UM001.PC4ORTYP[TS0UWIXM] bold;
        TS0UM001.XXXPRCNM = "TS0U434"; /* Process name*/
        TS0UM002.XXXPRCNM = "TS0U434"; /* Process name*/
        TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
      end
    end
  end
end // end TS0U-43420

// select cplhdj4 s7
Function TS0U-44510()
   /* ------------------------------------------------------------*/

         /* Find the previous leg*/

   /* ------------------------------------------------------------*/

  set VCPLHDJ4 empty;
  VCPLHDJ4.XGP-GPC-CD = TS0UM001.XGPCD;
  VCPLHDJ4.PC-PO-NBR = TS0UM002.PC3PONBR[TS0UWIXM];
  VCPLHDJ4.PC-ITM-SEQ-NBR = TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM];
  VCPLHDJ4.TS-DSCHG-LOC-CD = TS0UW01.TS-ORIG-LOC-CD;
   /* *******************tcs changes begin here**********************/
  VCPLHDJ4.TS-DEST-LOC-CD = TS0UW01.TS-ORIG-LOC-CD;
   /* MOVE '*' TO VCPLHDJ4.TS-DEST-LOC-CD;*/
   /* *******************tcs changes end ****************************/
  VCPLHDJ4.TS-ORIG-LOC-CD = "*";

   /* ------------------------------------------------------------*/
   /* Select the row from Packing List/Shipment join view.*/
   /* ------------------------------------------------------------*/

  call "TS4080" ("S1", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

    return; /* Return to previous process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PREVIOUS CPLHD ROW     ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end TS0U-44510

// get next cplhdj4 s7
Function TS0U-44520()
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select the row from Packing List/Shipment join view.*/
   /* ------------------------------------------------------------*/

  call "TS4080" ("N1", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/
   /*  */

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

    return; /* Return to previous process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH PREVIOUS CPLHD ROW      ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end TS0U-44520

// close cplhdj4 s7
Function TS0U-44530()
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Close the cursor s7*/
   /* ------------------------------------------------------------*/

   /* pgudip change begins here*/
   /*  */
   /* the following line was commented as a part of change*/
   /* CALL VCPLHDJ4 'C7',SQLCA,VCPLHDJ4 (NOMAPS,NONCSP; /* Select set*/
   /* the following line was inserted as a part of change*/
  call "TS4080" ("C1", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/
   /*  */
   /* pgudip change begins here*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    return; /* Return to previous process*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE PREVIOUS CPLHD ROW      ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end TS0U-44530

// Select (S )    DREADO.VORHDRR1
Function TS0U-47050()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/

  if (TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
   && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0)

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1CUOID = TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM];
  OP1REC.OP1NORID = TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM];
  OP1REC.OP1PARTN = TS0UW03.TS0UW-ORD-PART-CHAR[TS0UWIXM];


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* ===> return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TS0UW01.TS0UWPSW = "Y"; /* ===> problem switch*/

      TS0UW01.TS0UWPWF = "Y";
      TS0UW01.TS0UWWF7 = "Y";
      TS0UW01.TS0UWSH7[TS0UWIXM] = "Y";


      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end

  TS0UW01.TS0UWPSW = "Y";
  TS0UM001.XXXPRCNM = "U-47050";
  TS0UM002.XXXPRCNM = "U-47050";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "U-47050"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] cursor, bold;
  set TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] bold;
  set TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] cursor, bold;
  set TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


   /* **                                                        ***/
   /* ********************** End of TS0U-47050 ********************/
end // end TS0U-47050

// Verify item in S.O. Database
Function TS0U-47100()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE S.O.*/

   /* ------------------------------------------------------------*/

  TS0U-47110(); /* ===> Select the set of SO items*/

  if (SQLCA.VAGen_SQLCODE == 0)

    TS0U-47120(); /* ===> Fetch 1st item*/

    if (SQLCA.VAGen_SQLCODE == 0)

      TS0UW03.TSISTAT[TS0UWIXM] = "99"; /* Reset status*/
      TS0UW03.XRECD[TS0UWIXM] = "99"; /* Reset exception code*/

    else

      if (SQLCA.VAGen_SQLCODE == 100)

   /* ------------------------------------------------------------*/

       /* Set appropriate switches for no S.O. item found*/

   /* ------------------------------------------------------------*/


        TS0UW01.TS0UWPSW = "Y"; /* Set problem switch*/
        TS0UW01.TS0UWPWF = "Y"; /* Set warning switch*/
        TS0UW01.TS0UWWF1 = "Y"; /* Set warning switch*/
        TS0UW03.XRECD[TS0UWIXM] = "PS"; /* Not on po excep code*/
        if ("PS" in XRETBL.XRECD)
          if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If this is hard error*/
            TS0UW03.TSISTAT[TS0UWIXM] = "ER"; /* Set error status*/
          else
            TS0UW03.TSISTAT[TS0UWIXM] = "99"; /* Reset status*/
          end
        else
          TS0UW03.TSISTAT[TS0UWIXM] = "ER"; /* Set error status*/
        end
        if (TS0UM001.SY1STNBR[TS0UWIXM] != "  "
         || TS0UM001.SY2CLRID[TS0UWIXM] != "  ")
          TS0UW01.TS0UWSH1[TS0UWIXM] = "Y"; /* set for highlights*/
        end

      end /* ===> SQL = 100 for fetch*/

    end /* ===> SQL = 0 for fetch*/

    TS0U-47130(); /* ===> Close the selected set*/

  end /* ===> SQL = 0 for select set*/

   /* **                                                        ***/
   /* ********************** End of TS0U-47100 ********************/
end // end TS0U-47100

// Select (S2) Set       VITEM0R1
Function TS0U-47110()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF SO ITEMS*/

   /* ------------------------------------------------------------*/

  set OP2REC empty;

  OP2REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  OP2REC.OP1CUOID = TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM];
  OP2REC.OP1NORID = TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM];
  OP2REC.OP1PARTN = TS0UW03.TS0UW-ORD-PART-CHAR[TS0UWIXM];
  OP2REC.SY1STNBR = TS0UW03.SY1STNBR[TS0UWIXM];
  OP2REC.SY2CLRID = TS0UW03.SY2CLRID[TS0UWIXM];
  OP2REC.XDMCD = TS0UW03.XDMCD[TS0UWIXM];

  call "IO4150" ("S2", SQLCA, OP2REC) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "U-47110"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "U-47110"; /* Process name*/
    TS0UM002.XXXPRCNM = "U-47110"; /* Process name*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-47110 ********************/
end // end TS0U-47110

// Fetch  (N2) Next row  VITEM0R1
Function TS0U-47120()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DREADO.VITEMOR1*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/


  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

    if (OP2REC.OP2LNIST == "SH") /* accum qty*/
      TS0UW01.TS0UWPOQ = TS0UW01.TS0UWPOQ + OP2REC.OP2TSHPQ; /* accum qty*/
    else /* ===> use on-order qty bucket*/
      TS0UW01.TS0UWPOQ = TS0UW01.TS0UWPOQ + OP2REC.OP2TONOQ; /* accum qty*/
    end
  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      TS0UW01.TS0UWEFL = "Y"; /* end the loop*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0UW01.TS0UWEFL = "Y"; /* end the loop*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "U-47120"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "U-47120"; /* Map name*/
      TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0UM001.XXXPRCNM = "U-47120"; /* Process name*/
      TS0UM002.XXXPRCNM = "U-47120"; /* Process name*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-47120 ********************/
end // end TS0U-47120

// Close  (C2) Set       VITEM0R1
Function TS0U-47130()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DREADO.VITEM0R1*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "U-47130"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "U-47130"; /* Process name*/
    TS0UM002.XXXPRCNM = "U-47130"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-47130 ********************/
end // end TS0U-47130

// Verify item in P.O. Database
Function TS0U-47200()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE P.O.*/

   /* ------------------------------------------------------------*/

  TS0U-47205(); /* Select the set of po items*/

  TS0UW01.TS0UWEFL = "N"; /* ===> end of data flag*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If Select OK*/
    TS0U472(); /* Fetch and accumulate on order qty*/
  end


  if (SQLCA.VAGen_SQLCODE == 0)

    TS0UW03.TSISTAT[TS0UWIXM] = "99"; /* Reset status*/
    TS0UW03.XRECD[TS0UWIXM] = "99"; /* Reset exception code*/
    TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM] = PC6REC.PC6ITMNB; /* Item no.*/
    TS0UW01.TS0UW-PREV-OP1CUOID = PC6REC.OP1CUOID;
    TS0UW01.TS0UW-PREV-OP1NORID = PC6REC.OP1NORID;

    TS0U-47210(); /* ===> Check for multiple sales orders*/

  else

    if (SQLCA.VAGen_SQLCODE == 100)

      TS0U-47220(); /* ===> set item not found switches*/

    end

  end

  if ((SQLCA.VAGen_SQLCODE == 0 /* If fetch OK*/
   || SQLCA.VAGen_SQLCODE == 100))

    TS0U473(); /* Close the selected set*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-47200 ********************/
end // end TS0U-47200

// Select (SI) Set       VPOITM01
Function TS0U-47205()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TSWREC.XWHCD;
  PC6REC.PC3PONBR = TS0UW03.PC3PONBR[TS0UWIXM];
  PC6REC.SY1STNBR = TS0UW03.SY1STNBR[TS0UWIXM];
  PC6REC.SY2CLRID = TS0UW03.SY2CLRID[TS0UWIXM];
  PC6REC.XDMCD = TS0UW03.XDMCD[TS0UWIXM];
   /* MOVE TS0UW03.XQACD(TS0UWIXM) TO PC6REC.XQACD;*/
  PC6REC.XQACD = "*"; /* wildcard quality code*/
  PC6REC.XOWCD = TS0UW03.XOWCD[TS0UWIXM];
  PC6REC.PC2INSEG = "*";
  PC6REC.XPGCD = TS0UW03.XPGCD[TS0UWIXM];
  PC6REC.XUMCD = TS0UW03.XUMCD[TS0UWIXM];
  PC6REC.PC2CUXID = TS0UW03.PC2CUXID[TS0UWIXM];
  if (TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] != 0
   && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] != 0)
    PC6REC.OP1CUOID = TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM];
    PC6REC.OP1NORID = TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM];
    PC6REC.OP1PARTN = TS0UW03.TS0UW-ORD-PART-CHAR[TS0UWIXM];
  else
    PC6REC.OP1CUOID = -1;
    PC6REC.OP1NORID = -1;
    PC6REC.OP1PARTN = "*";
  end
  PC6REC.PC6ETSDT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";

  PCYREC.PCYFUNC = "SI";
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0U471"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U471"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U471"; /* Process name*/

  end


end // end TS0U-47205

// Check for multiple S.O. Nbrs
Function TS0U-47210()
   /* ------------------------------------------------------------*/

   /* Check multiple sales orders existing in the*/
   /* P.O. System for a particular style.*/
   /* ------------------------------------------------------------*/

  while (TS0UW01.TS0UWEFL == "N") /* ===> end of data flag*/

    if (PC6REC.OP1CUOID == TS0UW01.TS0UW-PREV-OP1CUOID
     && PC6REC.OP1NORID == TS0UW01.TS0UW-PREV-OP1NORID)

      TS0U472(); /* Fetch P.O. Item*/

    else


      TS0UW01.TS0UWEFL = "Y"; /* ===> end of data flag*/
      TS0UW01.TS0UWPSW = "Y"; /* ===> problem switch*/

      TS0UW01.TS0UWPWF = "Y";
      TS0UW01.TS0UWWF6 = "Y";
      TS0UW01.TS0UWSH6[TS0UWIXM] = "Y";


    end

  end /* ===> while statement*/

   /* IF EZEMNO ^= 320;/* ===> no multiple sales orders exist*/
  if (TS0UW01.TS0UWSH6[TS0UWIXM] != "Y"
  )
    TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] = TS0UW01.TS0UW-PREV-OP1CUOID;

    TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] = TS0UW01.TS0UW-PREV-OP1NORID;

    TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] = TS0UW01.TS0UW-PREV-OP1CUOID;

    TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] = TS0UW01.TS0UW-PREV-OP1NORID;

    TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] = TS0UW01.TS0UW-PREV-OP1CUOID;

    TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] = TS0UW01.TS0UW-PREV-OP1NORID;

  end

   /* **                                                        ***/
   /* ********************** End of TS0U-47210 ********************/
end // end TS0U-47210

// Set item not found switches
Function TS0U-47220()
   /* ------------------------------------------------------------*/

      /* Set appropriate switches for no P.O. item found*/

   /* ------------------------------------------------------------*/


  TS0UW01.TS0UWPSW = "Y"; /* Set problem switch*/
  TS0UW01.TS0UWPWF = "Y"; /* Set warning switch*/
  TS0UW01.TS0UWWF1 = "Y"; /* Set warning switch*/
  TS0UW03.XRECD[TS0UWIXM] = "PS"; /* Not on po excep code*/
  if ("PS" in XRETBL.XRECD)
    if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If this is hard error*/
      TS0UW03.TSISTAT[TS0UWIXM] = "ER"; /* Set error status*/
    else
      TS0UW03.TSISTAT[TS0UWIXM] = "99"; /* Reset status*/
    end
  else
    TS0UW03.TSISTAT[TS0UWIXM] = "ER"; /* Set error status*/
  end
  if (TS0UM001.SY1STNBR[TS0UWIXM] != "  "
   || TS0UM001.SY2CLRID[TS0UWIXM] != "  ")
    TS0UW01.TS0UWSH1[TS0UWIXM] = "Y"; /* set for highlights*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0U-47220 ********************/
end // end TS0U-47220

// Get shipped  qtys S.O. system
Function TS0U-48100()
   /* ------------------------------------------------------------*/

             /* Accumulate qtys from S.O. system*/

   /* ------------------------------------------------------------*/

  TS0U-47110(); /* ===> Select the set of SO items*/

   /* ===> Init accum ws*/
  TS0UW01.TS0UWPOQ = 0;
  if (SQLCA.VAGen_SQLCODE == 0)

    TS0UW01.TS0UWEFL = "N";

    while (TS0UW01.TS0UWEFL == "N")

      TS0U-47120(); /* ===> Fetch and accum shipped qty*/

    end /* ===> SQL = 0 for fetch*/

    if (TS0UW01.TS0UWEFL == "Y")
      TS0U-47130(); /* ===> Close the selected set*/
    end

  end /* ==== SQL = 0 for select set*/

   /* **                                                        ***/
   /* ********************** End of TS0U-48100 ********************/
end // end TS0U-48100

// Get on order qtys P.O. system
Function TS0U-48200()
   /* **********************************************************/
   /* Select set and accumulate po quantity for an item*/
   /* **********************************************************/

  TS0U471(); /* Select the set of po items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    TS0UW01.TS0UWPOQ = 0; /* Initialze po accum quantity*/
    TS0UW01.TS0UWEFL = "N"; /* Initialze end flag*/

    while (TS0UW01.TS0UWEFL == "N") /* While rows are found*/

      TS0U472(); /* Fetch and accumulate on order qty*/

      if (TS0UW01.TS0UWEFL == "Y") /* If end indicated*/
        TS0U473(); /* Close the selected set*/
      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-48200 ********************/
end // end TS0U-48200

// Get Shipment qtys
Function TS0U-48300()
   /* **********************************************************/
   /* Select set and accumulate ship quantities for an item*/
   /* **********************************************************/


  TS0U481(); /* Select the set of po shipmnt items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    TS0UW01.TS0UWPLQ = 0; /* Initialze po accum quantity*/
    TS0UW01.TS0UWEFL = "N"; /* Initialze end flag*/

    while (TS0UW01.TS0UWEFL == "N") /* While rows are found*/

      TS0U482(); /* Fetch and accumulate on ship qty ttl*/

      if (TS0UW01.TS0UWEFL == "Y") /* If end indicated*/
        TS0U483(); /* Close the selected set*/
      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-48300 ********************/
end // end TS0U-48300

// Get Receipt Qtys
Function TS0U-48400()
        /* **********************************************************/
         /* Select set and accumulate receipt quantities for an item*/
        /* **********************************************************/


  TS0U484(); /* Select the set of receipts items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    TS0UW01.TS0UWRCQ = 0; /* Initialze rcpt acc quantity*/
    TS0UW01.TS0UWEFL = "N"; /* Initialze end flag*/

    while (TS0UW01.TS0UWEFL == "N") /* While rows are found*/

      TS0U485(); /* Fetch and accumulate on rcpt qty ttl*/

      if (TS0UW01.TS0UWEFL == "Y") /* If end indicated*/
        TS0U486(); /* Close the selected set*/
      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0U-48400 ********************/
end // end TS0U-48400

// Verify summary shipment
Function TS0U-49000()
   /* ------------------------------------------------------------*/

           /* CHECK SALESMAN SAMPLE ORDER TYPE,*/
             /* GET SIZE ID WITH QTYS ASSOCIATED WITH IT,*/
             /* AND SAVE CPLIT01 ROW INFORMATION.*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWIXM = 13; /* initialize index*/
  while (TS0UW01.TS0UWIXM > 0) /* until end of detail*/
    if (TS0UW03.XOWCD[TS0UWIXM] == " " /* if detail line blank*/
     && TS0UW03.XUMCD[TS0UWIXM] == " " 
     && TS0UW03.XPGCD[TS0UWIXM] == " " 
     && TS0UW03.XQACD[TS0UWIXM] == " " 
     && TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM] == 0
     && TS0UW03.XDMCD[TS0UWIXM] == " " 
     && TS0UW03.TS0UMKG[TS0UWIXM] == 0 
     && TS0UW03.TS0UMCBM[TS0UWIXM] == 0
     && TS0UW03.TS0UMCRT[TS0UWIXM] == 0
     && TS0UW03.TS0UMSHP[TS0UWIXM] == 0
     && TS0UW03.PC3PONBR[TS0UWIXM] == 0
     && TS0UW03.TS0UMPOI[TS0UWIXM] == " "
     && TS0UW03.PC4ORTYP[TS0UWIXM] == " "
     && TS0UW03.PC2CUXID[TS0UWIXM] == " "
     && TS0UW03.SY1STNBR[TS0UWIXM] == " "
     && TS0UW03.SY2CLRID[TS0UWIXM] == " ")

       /* next sentence*/

    else

      /* **********************************************************/
       /* If this entry is a salesman sample order, then get the*/
       /* size id with qtys associated with it.*/
      /* **********************************************************/
      if (TS0UW03.PC4ORTYP[TS0UWIXM] == "SS" /* If salesman sample*/
       || TS0UW03.PC4ORTYP[TS0UWIXM] == "SX" /* If salesman sample*/
       || TS0UW03.PC4ORTYP[TS0UWIXM] == "S3" /* If salesman sample*/
       || TS0UW03.PC4ORTYP[TS0UWIXM] == "S7") /* If salesman sample*/

        TS0U-49100(); /* Select the set of po sizes*/

        if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

          TS0UW01.TS0UW-PO-SZ-QTY = 0; /* Initialze po accum quantity*/
          TS0UW01.TS0UW-PO-SZ-CNT = 0; /* Initialze po size count*/
          TS0UW01.TS0UWIXW = 40; /* Initialze end flag*/
          while (TS0UW01.TS0UWIXW > 0) /* While rows are found*/
            TS0U-49200(); /* Accumulate on order qt*/
          end
          TS0UW03.TS0UW-PO-SZ-QTY[TS0UWIXM] = TS0UW01.TS0UW-PO-SZ-QTY;
          TS0UW03.TS0UW-PO-SZ-CNT[TS0UWIXM] = TS0UW01.TS0UW-PO-SZ-CNT;
        end

      end

    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM - 1; /* Decrement index*/

  end


end // end TS0U-49000

// Select PO sizes
Function TS0U-49100()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO SIZES*/

   /* ------------------------------------------------------------*/

  set PC7REC empty;
  set PCYREC empty;

  PC7REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC7REC.PC3PONBR = TS0UW03.PC3PONBR[TS0UWIXM];
  PC7REC.PC6ITMNB = TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM];

  PCYREC.PCYFUNC = "S ";
  call "IO3640" (PCYREC, SQLCA, PC7REC) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0U-49100"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOSIZ01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC7REC.PC7KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U-49100"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U-49100"; /* Process name*/

  end


end // end TS0U-49100

// Accumulate PO size qtys
Function TS0U-49200()
   /* ------------------------------------------------------------*/

              /* ACCUMULATE PO SIZE QUANTITIES*/

   /* ------------------------------------------------------------*/

  if (PC7REC.PC7ORDEQ[TS0UWIXW] > 0)
    TS0UW01.TS0UW-PO-SZ-QTY = TS0UW01.TS0UW-PO-SZ-QTY +                             PC7REC.PC7ORDEQ[TS0UWIXW];
    TS0UW01.TS0UW-PO-SZ-CNT = TS0UW01.TS0UW-PO-SZ-CNT + 1;
    TS0UW03.TS0UW-SAVE-SIZE[TS0UWIXM] = TS0UW01.TS0UWIXW;
  end

  TS0UW01.TS0UWIXW = TS0UW01.TS0UWIXW - 1; /* Decrement index*/


end // end TS0U-49200

// Process warnings
Function TS0U-49900()
   /* ------------------------------------------------------------*/
           /* Process Array Warning Flags*/
   /* ------------------------------------------------------------*/

   /* *********************************************/
   /* Process invalid  S.O. warning.*/
   /* flag first.*/
   /* *********************************************/

  if (TS0UW01.TS0UWWF7 == "Y")
    TS0UW01.TS0UWWK2 = 13;

    while (TS0UW01.TS0UWWK2 >= 1)

      if (TS0UW01.TS0UWSH7[TS0UWWK2] == "Y")
        set TS0UM001.TS0UM-CUST-ORD-ID[TS0UWWK2] cursor, bold;
        set TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWWK2] bold;
        set TS0UM002.TS0UM-CUST-ORD-ID[TS0UWWK2] cursor, bold;
        set TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWWK2] bold;
      end

      TS0UM001.XXXPRCNM = "TS0U590"; /* process name*/
      TS0UM002.XXXPRCNM = "TS0U590"; /* process name*/

      converseLib.validationFailed(335); /* ===> invalid S.O. warning*/

      TS0UW01.TS0UWWK2 = TS0UW01.TS0UWWK2 - 1;
    end

    TS0UW01.TS0UWWA7 = "              "; /* Reset warning array*/
    return;

  end

   /* *********************************************/
   /* Process Multiple S.O. warning.*/
   /* flag second*/
   /* *********************************************/

  if (TS0UW01.TS0UWWF6 == "Y")
    TS0UW01.TS0UWWK2 = 13;

    while (TS0UW01.TS0UWWK2 >= 1)

      if (TS0UW01.TS0UWSH6[TS0UWWK2] == "Y")
        set TS0UM001.TS0UM-CUST-ORD-ID[TS0UWWK2] cursor, bold;
        set TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWWK2] bold;
        set TS0UM002.TS0UM-CUST-ORD-ID[TS0UWWK2] cursor, bold;
        set TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWWK2] bold;
      end

      TS0UM001.XXXPRCNM = "U-49900"; /* process name*/
      TS0UM002.XXXPRCNM = "U-49900"; /* process name*/

      converseLib.validationFailed(320); /* ===> Multiple S.O. exists*/

      TS0UW01.TS0UWWK2 = TS0UW01.TS0UWWK2 - 1;
    end

    TS0UW01.TS0UWWA6 = "              "; /* Reset warning array*/
    return;

  end


   /* *********************************************/
   /* Process item not found on po warning*/
   /* flag third*/
   /* *********************************************/

  if (TS0UW01.TS0UWWF1 == "Y")
    TS0UW01.TS0UWWK2 = 13;

    while (TS0UW01.TS0UWWK2 >= 1)

      if (TS0UW01.TS0UWSH1[TS0UWWK2] == "Y")
        set TS0UM001.PC2CUXID[TS0UWWK2] cursor, bold;
        set TS0UM001.SY1STNBR[TS0UWWK2] bold;
        set TS0UM001.SY2CLRID[TS0UWWK2] bold;
        set TS0UM002.PC2CUXID[TS0UWWK2] cursor, bold;
        set TS0UM002.SY1STNBR[TS0UWWK2] bold;
        set TS0UM002.SY2CLRID[TS0UWWK2] bold;
      end

      TS0UM001.XXXPRCNM = "U-49900"; /* process name*/
      TS0UM002.XXXPRCNM = "U-49900"; /* process name*/

      if (TS0UW03.PC3PONBR[TS0UWWK2] == 0 /* * ===> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0UW03.XQACD[TS0UWWK2] == "02" 
       && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWWK2] > 0)

        converseLib.validationFailed(319);
      else
        converseLib.validationFailed(115);
      end

      TS0UW01.TS0UWWK2 = TS0UW01.TS0UWWK2 - 1;
    end

    TS0UW01.TS0UWWA1 = "              "; /* Reset warning array*/
    return;

  end


   /* *********************************************/
   /* Process item quantity undershipmemt warning*/
   /* flag forth*/
   /* *********************************************/

  if (TS0UW01.TS0UWWF2 == "Y")

    TS0UW01.TS0UWWK2 = 13;

    while (TS0UW01.TS0UWWK2 >= 1)

      if (TS0UW01.TS0UWSH2[TS0UWWK2] == "Y")
        set TS0UM001.TS0UMSHP[TS0UWWK2] cursor, bold;
        set TS0UM002.TS0UMSHP[TS0UWWK2] cursor, bold;
      end

      TS0UM001.XXXPRCNM = "U-49900"; /* process name*/
      TS0UM002.XXXPRCNM = "U-49900"; /* process name*/

      if (TS0UW03.PC3PONBR[TS0UWWK2] == 0 /* * ===> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0UW03.XQACD[TS0UWWK2] == "02" 
       && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWWK2] > 0)

        converseLib.validationFailed(321);
      else
        converseLib.validationFailed(251);
      end

      TS0UW01.TS0UWWK2 = TS0UW01.TS0UWWK2 - 1;

    end

    TS0UW01.TS0UWWA2 = "              "; /* Reset warning array*/
    return;

  end


   /* *********************************************/
   /* Process item quantity overshipmemt warning*/
   /* flag fifth (soft error)*/
   /* *********************************************/

  if (TS0UW01.TS0UWWF3 == "Y")
    TS0UW01.TS0UWWK2 = 13;

    while (TS0UW01.TS0UWWK2 >= 1)
      if (TS0UW01.TS0UWSH3[TS0UWWK2] == "Y")
        set TS0UM001.TS0UMSHP[TS0UWWK2] cursor, bold;
        set TS0UM002.TS0UMSHP[TS0UWWK2] cursor, bold;
      end

      TS0UM001.XXXPRCNM = "U-49900"; /* process name*/
      TS0UM002.XXXPRCNM = "U-49900"; /* process name*/

      if (TS0UW03.PC3PONBR[TS0UWWK2] == 0 /* * ===> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0UW03.XQACD[TS0UWWK2] == "02" 
       && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWWK2] > 0)

        converseLib.validationFailed(322);
      else
        converseLib.validationFailed(260);
      end

      TS0UW01.TS0UWWK2 = TS0UW01.TS0UWWK2 - 1;
    end

    TS0UW01.TS0UWWA3 = "              "; /* Reset warning array*/
    return;

  end


   /* *********************************************/
   /* Process item quantity overshipmemt over*/
   /* tolerance warning flag last*/
   /* *********************************************/
  if (TS0UW01.TS0UWWF4 == "Y")
    TS0UW01.TS0UWWK2 = 13;

    while (TS0UW01.TS0UWWK2 >= 1)
      if (TS0UW01.TS0UWSH4[TS0UWWK2] == "Y")
        set TS0UM001.TS0UMSHP[TS0UWWK2] cursor, bold;
        set TS0UM002.TS0UMSHP[TS0UWWK2] cursor, bold;
      end

      TS0UM001.XXXPRCNM = "U-49900"; /* process name*/
      TS0UM002.XXXPRCNM = "U-49900"; /* process name*/

      if (TS0UW03.PC3PONBR[TS0UWWK2] == 0 /* * ===> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0UW03.XQACD[TS0UWWK2] == "02" 
       && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWWK2] > 0)

        converseLib.validationFailed(323);
      else
        converseLib.validationFailed(261);
      end

      TS0UW01.TS0UWWK2 = TS0UW01.TS0UWWK2 - 1;

    end

    TS0UW01.TS0UWWA4 = "              "; /* Reset warning array*/
    return;

  end

   /* **                                                        ***/
   /* ********************** End of TS0U-49900 ********************/
end // end TS0U-49900

// Clear Header Fields
Function TS0U-51400()
   /* ------------------------------------------------------------*/
        /* Clear the Header fields on the map*/
   /* ------------------------------------------------------------*/

  TS0UM001.TSHCNTNR = " "; /* clear header fields*/
  TS0UM001.YCNCD = " ";
  TS0UM001.TSHTCBM = 0;
  TS0UM001.TSHTKG = 0;
  TS0UM001.TSHSEAL = " ";

  TS0UM002.TSHCNTNR = " "; /* clear header fields*/
  TS0UM002.YCNCD = " ";
  TS0UM002.TSHTCBM = 0;
  TS0UM002.TSHTKG = 0;
  TS0UM002.TSHSEAL = " ";

   /* **                                                        ***/
   /* ********************** End of TS0U-51400 ********************/
end // end TS0U-51400

// Check the FROM application
Function TS0U000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0T") /* From allowed application*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end TS0U000

// Obtain tolerance and mode code
Function TS0U001()
   /* ------------------------------------------------------------*/

           /* Obtain tolerances and shipment mode code*/

   /* ------------------------------------------------------------*/

   /* ********************************************************/
   /* Obtain the tolerance for style hard error qty and pct*/
   /* and style soft error qty and pct*/
   /* ********************************************************/

  set TSXREC empty; /* clear pass record*/
  TSXREC.XGPCD = TSWREC.XGPCD;

  TS0US02(); /* Obtain the tolerances*/

  TS0UW01.TS0UWHEQ = TSXREC.TSXSTHQT;
  TS0UW01.TS0UWHEP = TSXREC.TSXSTHPT;
  TS0UW01.TS0UWSEQ = TSXREC.TSXSTSQT;
  TS0UW01.TS0UWSEP = TSXREC.TSXSTSPT;

   /* ** If any of the values are zeroes, then move high-values ***/
   /* ** to them.                                               ***/

  if (TS0UW01.TS0UWHEQ == 0
   && TS0UW01.TS0UWHEP == 0)
    TS0UW01.TS0UWHEQ = 999999999;
    TS0UW01.TS0UWHEP = 999.99;
  end

  TS0US12();

   /* ********************************************************/
   /* Obtain the mode code for this shipment and ave in*/
   /* working storage.*/
   /* ********************************************************/


  TS0UW01.YMTCD = "*"; /* save the code*/


end // end TS0U001

// Build Container map
Function TS0U002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0U-10000(); /* Format and display the map*/

  TS0U200(); /* Check attention identifier*/

  TS0U300(); /* Reset fields to normal intensity*/

  if (TS0UW01.TS0UWNSF == "N") /* If no negative sql codes encountered*/

    TS0U400(); /* Verify the entered data*/

  end

  TS0U500(); /* Process valid input request*/


end // end TS0U002

// Check attention identifier
Function TS0U200()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/
    TSWREC.TSWREJFL = "Y"; /* set shipment rejection flag*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data in*/
    XSTSS01(); /* transfer to application*/
    TS0UW01.TS0UWPSW = "Y"; /* if fails, then indicate error*/
    TS0UM001.XXXPRCNM = "TS0U200"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf10 /* and PF10 was pressed*/
   && TS0UW01.TS0UW-MAP-INDICATOR == "1")
    TS0UM001.XXXPRCNM = "TS0U200"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf11 /* and PF11 was pressed*/
   && TS0UW01.TS0UW-MAP-INDICATOR == "2")
    TS0UM001.XXXPRCNM = "TS0U200"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11) /* and PF11 was not pressed*/

    TS0UM001.XXXPRCNM = "TS0U200"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U200"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


end // end TS0U200

// Reset highlighted fields
Function TS0U300()
   /* ------------------------------------------------------------*/

             /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset header fields normal intensity.*/
   /* 2) Reset all detail fields normal intensity.*/

   /* ------------------------------------------------------------*/

   /* ===> Left  Map*/
       /* ---------*/
  set TS0UM001.TSHCNTNR initialAttributes; /* Container*/
  set TS0UM001.YCNCD initialAttributes; /* Container type*/
  set TS0UM001.TSHTCBM initialAttributes; /* Total cubic meters*/
  set TS0UM001.TSHTKG initialAttributes; /* Total kilograms*/
  set TS0UM001.TSHSEAL initialAttributes; /* Seal*/

   /* ===> Right Map*/
       /* ---------*/
  set TS0UM002.TSHCNTNR initialAttributes; /* Container*/
  set TS0UM002.YCNCD initialAttributes; /* Container type*/
  set TS0UM002.TSHTCBM initialAttributes; /* Total cubic meters*/
  set TS0UM002.TSHTKG initialAttributes; /* Total kilograms*/
  set TS0UM002.TSHSEAL initialAttributes; /* Seal*/

  TS0UW01.TS0UWIXM = 1; /* Initialize line index*/

  while (TS0UW01.TS0UWIXM <= 13) /* Until end of lines*/

   /* ===> Left  Map*/
       /* ---------*/
    set TS0UM001.PC3PONBR[TS0UWIXM] initialAttributes;
    set TS0UM001.TS0UMPOI[TS0UWIXM] initialAttributes;
    set TS0UM001.PC4ORTYP[TS0UWIXM] initialAttributes;
    set TS0UM001.PC2CUXID[TS0UWIXM] initialAttributes;
    set TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] initialAttributes;
    set TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] initialAttributes;
    set TS0UM001.SY1STNBR[TS0UWIXM] initialAttributes;
    set TS0UM001.SY2CLRID[TS0UWIXM] initialAttributes;
    set TS0UM001.XDMCD[TS0UWIXM] initialAttributes;
    set TS0UM001.TS0UMSHP[TS0UWIXM] initialAttributes;
    set TS0UM001.TS0UMCRT[TS0UWIXM] initialAttributes;
    set TS0UM001.TS0UMCBM[TS0UWIXM] initialAttributes;
    set TS0UM001.TS0UMKG[TS0UWIXM] initialAttributes;

   /* ===> Right Map*/
       /* ---------*/
    set TS0UM002.PC3PONBR[TS0UWIXM] initialAttributes;
    set TS0UM002.PC2CUXID[TS0UWIXM] initialAttributes;
    set TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] initialAttributes;
    set TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] initialAttributes;
    set TS0UM002.SY1STNBR[TS0UWIXM] initialAttributes;
    set TS0UM002.SY2CLRID[TS0UWIXM] initialAttributes;
    set TS0UM002.TS0UMSHP[TS0UWIXM] initialAttributes;
    set TS0UM002.TS0UMCRT[TS0UWIXM] initialAttributes;
    set TS0UM002.TS0UMCBM[TS0UWIXM] initialAttributes;
    set TS0UM002.TS0UMKG[TS0UWIXM] initialAttributes;
    set TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] initialAttributes;
    set TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] initialAttributes;
    set TS0UM002.XQACD[TS0UWIXM] initialAttributes;
    set TS0UM002.XPGCD[TS0UWIXM] initialAttributes;
    set TS0UM002.XUMCD[TS0UWIXM] initialAttributes;
    set TS0UM002.XOWCD[TS0UWIXM] initialAttributes;

    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* Increment line index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U300 ***********************/
end // end TS0U300

// Verify the entered data
Function TS0U400()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ENTERED DATA*/

   /* 1) If the map is not empty*/
      /* and pf7, pf8, or enter was pressed;*/
      /* a) Verify an initial P.O. entry.*/
      /* b) If no errors and a style has been entered*/
         /* - verify all detail edits from bottom to top.*/
           /* by calling edits in group1 and group2 until*/
           /* all entered detail has been edited.*/
      /* c) Perform header edits.*/

   /* ------------------------------------------------------------*/

   /* **************************************************/
      /* Check to see if any data exists on the screen*/
   /* **************************************************/

  TS0UW01.TS0UWDEF = "N"; /* initialize data entered flag*/

  if (TS0UM001.TSHCNTNR == " " /* if header fields empty (Left)*/
   && TS0UM001.YCNCD == " "    
   && TS0UM001.TSHTCBM == 0    
   && TS0UM001.TSHTKG == 0     
   && TS0UM001.TSHSEAL == " ")

     /* ========= Next Sentence ===========>*/

  else
    TS0UW01.TS0UWDEF = "Y"; /* set data entered flag*/
  end

  TS0UW01.TS0UWIXM = 1; /* set index to 1*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/

    if (TS0UM001.PC3PONBR[TS0UWIXM] == 0
     && TS0UM001.TS0UMPOI[TS0UWIXM] == " "
     && TS0UM001.PC4ORTYP[TS0UWIXM] == " "
     && TS0UM001.PC2CUXID[TS0UWIXM] == " "
     && TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
     && TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0
     && TS0UM001.SY1STNBR[TS0UWIXM] == " "
     && TS0UM001.SY2CLRID[TS0UWIXM] == " "
     && TS0UM001.XDMCD[TS0UWIXM] == " "
     && TS0UM001.TS0UMSHP[TS0UWIXM] == 0
     && TS0UM001.TS0UMCRT[TS0UWIXM] == 0
     && TS0UM001.TS0UMCBM[TS0UWIXM] == 0
     && TS0UM001.TS0UMKG[TS0UWIXM] == 0
     && TS0UM002.PC3PONBR[TS0UWIXM] == 0
     && TS0UM002.PC2CUXID[TS0UWIXM] == " "
     && TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
     && TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0
     && TS0UM002.SY1STNBR[TS0UWIXM] == " "
     && TS0UM002.SY2CLRID[TS0UWIXM] == " "
     && TS0UM002.TS0UMSHP[TS0UWIXM] == 0
     && TS0UM002.TS0UMCRT[TS0UWIXM] == 0
     && TS0UM002.TS0UMCBM[TS0UWIXM] == 0
     && TS0UM002.TS0UMKG[TS0UWIXM] == 0
     && TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] == 0
     && TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] == 0
     && TS0UM002.XQACD[TS0UWIXM] == " "
     && TS0UM002.XPGCD[TS0UWIXM] == " "
     && TS0UM002.XUMCD[TS0UWIXM] == " "
     && TS0UM002.XOWCD[TS0UWIXM] == " ") /* if detail line blank*/

      /* ========= Next Sentence ===========>*/

    else
      if (TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] > 0)
        TS0U436(); /* populate long key from itm seq*/
      else
        if (TS0UM001.PC3PONBR[TS0UWIXM] == 0
         || TS0UM001.SY1STNBR[TS0UWIXM] == " "
         || TS0UM001.SY2CLRID[TS0UWIXM] == " ")
          /* next sentence*/
        else
          TS0U550(); /* populate itm seq from long key*/
        end
      end
      if (TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] == 0)
        TS0U445(); /* populate leg number*/
      end
      TS0UW01.TS0UWDEF = "Y"; /* set data entered flag*/
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end

   /* *********************************************************/
      /* If data did exist on the screen, perform the edits*/
   /* *********************************************************/

  if (TS0UW01.TS0UWDEF == "Y") /* if data exists on the screen*/

    if (TS0UW01.TS0UW-MAP-INDICATOR == "1") /* === Left map current*/
      TS0U-41000(); /* cascade map data into ws*/
    else
      TS0U-42000(); /* cascade map data into ws*/
    end

    if (converseVar.eventKey is enter /* if ENTER is pressed*/
     || converseVar.eventKey is pf7   /* or pf7 is pressed*/
     || converseVar.eventKey is pf8)  /* or pf8 is pressed*/

      TS0UW01.TS0UWIXM = 13; /* initialize index*/

      while (TS0UW01.TS0UWIXM > 0) /* until end of detail lines*/

        /* if detail line blank*/
        if (TS0UM001.PC3PONBR[TS0UWIXM] == 0
         && TS0UM001.TS0UMPOI[TS0UWIXM] == " "
         && TS0UM001.PC4ORTYP[TS0UWIXM] == " "
         && TS0UM001.PC2CUXID[TS0UWIXM] == " "
         && TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
         && TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0
         && TS0UM001.SY1STNBR[TS0UWIXM] == " "
         && TS0UM001.SY2CLRID[TS0UWIXM] == " "
         && TS0UM001.XDMCD[TS0UWIXM] == " "
         && TS0UM001.TS0UMSHP[TS0UWIXM] == 0
         && TS0UM001.TS0UMCRT[TS0UWIXM] == 0
         && TS0UM001.TS0UMCBM[TS0UWIXM] == 0
         && TS0UM001.TS0UMKG[TS0UWIXM] == 0
         && TS0UM002.PC3PONBR[TS0UWIXM] == 0
         && TS0UM002.PC2CUXID[TS0UWIXM] == " "
         && TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
         && TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0
         && TS0UM002.SY1STNBR[TS0UWIXM] == " "
         && TS0UM002.SY2CLRID[TS0UWIXM] == " "
         && TS0UM002.TS0UMSHP[TS0UWIXM] == 0
         && TS0UM002.TS0UMCRT[TS0UWIXM] == 0
         && TS0UM002.TS0UMCBM[TS0UWIXM] == 0
         && TS0UM002.TS0UMKG[TS0UWIXM] == 0
         && TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] == 0
         && TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] == 0
         && TS0UM002.XQACD[TS0UWIXM] == " "
         && TS0UM002.XPGCD[TS0UWIXM] == " "
         && TS0UM002.XUMCD[TS0UWIXM] == " "
         && TS0UM002.XOWCD[TS0UWIXM] == " ")

           /* ===== Next Sentence ======>*/

        else

          TS0U420(); /* group 1 detail edits*/

          if (TS0UWPSW == "N") /* if no other errors have occurred*/
            TS0U430(); /* group 2 detail edits*/
          end

        end

        TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM - 1; /* decrement index*/

      end /* until end of detail lines*/

      if (TS0UWPSW == "N") /* if no other errors have occurred*/
        TS0U440(); /* header edits*/
      end

      if (TS0UWPSW == "N") /* if no other errors have occurred*/
        TS0U450(); /* check for duplicate packing lists*/
      end

      if (TS0UWPSW == "N") /* if no other errors have occurred*/

        /* **************************************************/
            /* Check to see if PO quantity warning flags*/
            /* needs to be reset, because of data changes.*/
        /* **************************************************/

        if (TS0UW01.TS0UWPWF == "Y") /* If the warning flag is set*/

          TS0U460(); /* Check any data changed to reset warn*/
                                   /* flag*/
        end

        TS0UW04.TS0UWGR4 = TS0UW03.TS0UWGR3; /* Save screen data*/

        if (TS0UW01.TS0UWPWF == "N") /* If no warning flag set*/

          TS0U470(); /* Verify the item on P.O. or S.O.*/

          TS0U480(); /* Verify quantities against po*/



          /* --------------------------------------------------------------*/
           /* Verify summary shipment autosize load for "SS" P.O.s*/

          /* --------------------------------------------------------------*/

          if (TS0UW01.TS0UW-SUMMARY-SHPMT == "1")

            TS0UW01.TS0UW-PO-SZ-QTY = 0;
            TS0UW01.TS0UW-PO-SZ-CNT = 0;

            TS0U-49000(); /* Verify summary shipment*/

          end

        end

        if (TS0UW01.TS0UWWF1 == "Y" /* If any array warnings set*/
         || TS0UW01.TS0UWWF2 == "Y" 
         || TS0UW01.TS0UWWF3 == "Y" 
         || TS0UW01.TS0UWWF4 == "Y" 
         || TS0UW01.TS0UWWF6 == "Y" 
         || TS0UW01.TS0UWWF7 == "Y")

          TS0UW01.TS0UWPSW = "Y"; /* Set problem switch*/

          TS0U-49900(); /* Process warnings*/

        else

          TS0UW01.TS0UWPWF = "N"; /* Reset warning flag*/

        end

      else

         /* **** reset all warning flags and warning arrays *****/
        TS0UW01.TS0UWPWF = "N"; /* reset po warning flag*/
        TS0UW01.TS0UWWA1 = "              "; /* reset po warn arrays*/
        TS0UW01.TS0UWWA2 = "              ";
        TS0UW01.TS0UWWA3 = "              ";
        TS0UW01.TS0UWWA4 = "              ";
        TS0UW01.TS0UWWA6 = "              ";
        TS0UW01.TS0UWWA7 = "              ";

      end

    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0U400 ***********************/
end // end TS0U400

// group 1 edits
Function TS0U420()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 1*/

       /* Edits;*/
         /* 1) owner group*/
         /* 2) unit of measure*/
         /* 3) package type*/
         /* 4) quality code*/
         /* 5) iseg code*/
         /* 6) dimension*/
         /* 7) kilos*/
         /* 8) cubic meters*/
         /* 9) cartons*/
        /* 10) ship quanity*/

   /* ------------------------------------------------------------*/

   /* **************************************/
           /* owner group*/
   /* **************************************/

  if (TS0UW03.XOWCD[TS0UWIXM] != " ") /* if owner group entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0UW03.XOWCD[TS0UWIXM] in XOWTBL.XOWCD) /* Check valid owner group*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XOWTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(105); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
      set TS0UM002.XOWCD[TS0UWIXM] cursor, modified, bold;
      return;
    end
  else
    TS0UW03.XOWCD[TS0UWIXM] = "00"; /* default to '00'*/
  end

   /* **************************************/
           /* unit of measure*/
   /* **************************************/

  if (TS0UW03.XUMCD[TS0UWIXM] != " ") /* if unit of measure entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0UW03.XUMCD[TS0UWIXM] in XUMTBL.XUMCD) /* valid unit of measure*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XUMTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(106); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
      set TS0UM002.XUMCD[TS0UWIXM] cursor, modified, bold;
      return;
    end
  else
    TS0UW03.XUMCD[TS0UWIXM] = "01"; /* default to '01'*/
  end

   /* **************************************/
           /* package type*/
   /* **************************************/

  if (TS0UW03.XPGCD[TS0UWIXM] != " ") /* if package type entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0UW03.XPGCD[TS0UWIXM] in XPGTBL.XPGCD) /* Check valid package type*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XPGTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(107); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
      set TS0UM002.XPGCD[TS0UWIXM] cursor, modified, bold;
      return;
    end
  else
    TS0UW03.XPGCD[TS0UWIXM] = "00"; /* default to '00'*/
  end

   /* **************************************/
           /* quality code*/
   /* **************************************/

  if (TS0UW03.XQACD[TS0UWIXM] != " ") /* if quality code entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0UW03.XQACD[TS0UWIXM] in XQATBL.XQACD) /* Check valid quality code*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XQATBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(108); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
      set TS0UM002.XQACD[TS0UWIXM] cursor, modified, bold;
      return;
    end
  end


   /* **************************************/
           /* dimension*/
   /* **************************************/

  if (TS0UW03.XDMCD[TS0UWIXM] != " ") /* if dimension entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0UW03.XDMCD[TS0UWIXM] in XDMTBL.XDMCD) /* Check valid dimension*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XDMTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(110); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
      set TS0UM001.XDMCD[TS0UWIXM] cursor, modified, bold;
      return;
    end
  else
    TS0UW03.XDMCD[TS0UWIXM] = "00"; /* default to '00'*/
  end

   /* **************************************/
           /* kilos*/
   /* **************************************/

  if (TS0UW03.TS0UMKG[TS0UWIXM] < 0) /* if kilos less than 0*/
    converseLib.validationFailed(76); /* Display error message*/
    TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
    TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
    set TS0UM001.TS0UMKG[TS0UWIXM] cursor, modified, bold;
    set TS0UM002.TS0UMKG[TS0UWIXM] cursor, modified, bold;
    return;
  end

   /* **************************************/
           /* cubic meters*/
   /* **************************************/

  if (TS0UW03.TS0UMCBM[TS0UWIXM] < 0) /* if cubic meters less than 0*/
    converseLib.validationFailed(76); /* Display error message*/
    TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
    TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
    set TS0UM001.TS0UMCBM[TS0UWIXM] cursor, modified, bold;
    set TS0UM002.TS0UMCBM[TS0UWIXM] cursor, modified, bold;
    return;
  end

   /* **************************************/
           /* cartons*/
   /* **************************************/

  if (TS0UW03.TS0UMCRT[TS0UWIXM] <= 0) /* if cartons less than 0*/
    if (TSWREC.TSWDOMFL == "Y") /* if domestic shipment indicated*/
       /* continue on - not required*/
    else
      converseLib.validationFailed(111); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
      set TS0UM001.TS0UMCRT[TS0UWIXM] cursor, modified, bold;
      set TS0UM002.TS0UMCRT[TS0UWIXM] cursor, modified, bold;
      return;
    end
  end

   /* **************************************/
           /* ship quantity*/
   /* **************************************/

  if (TS0UW03.TS0UMSHP[TS0UWIXM] <= 0) /* if ship quantity less than 0*/
    if (TSWREC.TSWDOMFL == "Y") /* if domestic shipment indicated*/
       /* continue on - not required*/
    else
      converseLib.validationFailed(112); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U420"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U420"; /* Process name*/
      set TS0UM001.TS0UMSHP[TS0UWIXM] cursor, modified, bold;
      set TS0UM002.TS0UMSHP[TS0UWIXM] cursor, modified, bold;
      return;
    end
  end

   /* **************************************/
           /* leg indicator*/
   /* **************************************/

  if (TS0UW03.TS-SHP-LEG-NBR[TS0UWIXM] <= 0) /* if leg indicator less than 0*/
    TS0UW03.TS-SHP-LEG-NBR[TS0UWIXM] = 0;
  end


   /* **                                                        ***/
   /* ********************** End of TS0U420 ***********************/
end // end TS0U420

// group 2 edits
Function TS0U430()
   /* ------------------------------------------------------------*/

                 /* EDIT GROUPING 2*/

   /* 1) check style/color in database*/
   /* 2) check customer xref in database*/
   /* 3) check sales order   in database*/
   /* 4) verify correct p.o. id fields*/
   /* 5) verify that p.o. number or p.o. id is entered*/
   /* 6) if no errors found so far*/
      /* - verify that po exists for keys and check quantities*/

   /* ------------------------------------------------------------*/

   /* ***********************************/
   /* Verify style/color*/
   /* ***********************************/

  if (TS0UW03.SY1STNBR[TS0UWIXM] == " ") /* if style is missing*/
    converseLib.validationFailed(114); /* error message*/
    TS0UM001.XXXPRCNM = "TS0U430"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U430"; /* Process name*/
    TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
    set TS0UM001.SY1STNBR[TS0UWIXM] cursor, modified, bold;
    set TS0UM002.SY1STNBR[TS0UWIXM] cursor, modified, bold;
    return;
  else
    PG2REC.SY1STNBR = TS0UW03.SY1STNBR[TS0UWIXM]; /* move keys*/
    PG2REC.SY2CLRID = TS0UW03.SY2CLRID[TS0UWIXM];

    TS0U431(); /* select style/color combination*/

    if (SQLCA.VAGen_SQLCODE == 100) /* style color not found*/
      converseLib.validationFailed(113); /* error message*/
      TS0UM001.XXXPRCNM = "TS0U430"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U430"; /* Process name*/
      TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
      set TS0UM001.SY1STNBR[TS0UWIXM] cursor, modified, bold;
      set TS0UM001.SY2CLRID[TS0UWIXM] modified, bold;
      set TS0UM002.SY1STNBR[TS0UWIXM] cursor, modified, bold;
      set TS0UM002.SY2CLRID[TS0UWIXM] modified, bold;
      return;
    end
  end

   /* ***********************************/
   /* Verify S.O. Number*/
   /* ***********************************/

  TS0U-43110(); /* verify sales order entered*/


   /* ***********************************/
   /* Verify customer x-ref*/
   /* ***********************************/

  if (TS0UW03.PC2CUXID[TS0UWIXM] != " ") /* if cust exists*/

    TS0U432(); /* select the cust xref*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
        converseLib.validationFailed(161); /* error message*/
        TS0UM001.XXXPRCNM = "TS0U430"; /* Process name*/
        TS0UM002.XXXPRCNM = "TS0U430"; /* Process name*/
        TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
        if (TS0UM001.PC2CUXID[TS0UWIXM] != " " /* if cust exists*/
         && TS0UM002.PC2CUXID[TS0UWIXM] != " ") /* if cust exists*/
          set TS0UM001.PC2CUXID[TS0UWIXM] cursor, bold;
          set TS0UM002.PC2CUXID[TS0UWIXM] cursor, bold;
        end
        return;
      end
    end
  end

   /* ***********************************/
   /* Verify p.o. id fields seperately*/
   /* ***********************************/

  if (TS0UW03.PC3PONBR[TS0UWIXM] == 0) /* if no po number was entered*/
    TS0U433(); /* Edit po id fields seperately*/
  end


   /* ***********************************/
   /* Verify p.o. or p.o. id are*/
      /* entered and valid*/
   /* ***********************************/

  TS0U434(); /* Edit po # or po id*/

   /* ***********************************/
   /* Verify p.o. or p.o. id are*/
      /* entered and valid*/
   /* ***********************************/



end // end TS0U430

// Select style/color
Function TS0U431()
   /* ------------------------------------------------------------*/

                 /* SELECT STYLE/COLOR*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* clear record*/

  PG2REC.XGPCD = TSWREC.XGPCD; /* move keys*/
  PG2REC.SY1STNBR = TS0UW03.SY1STNBR[TS0UWIXM];
  PG2REC.SY2CLRID = TS0UW03.SY2CLRID[TS0UWIXM];
  PG2REC.XDMCD = TS0UW03.XDMCD[TS0UWIXM];

  TA1REC.TA1PGMNM = "TS0U431"; /* Process name*/
  TA1REC.TA1MAP = "TS0UM001"; /* Map name*/

  XSPG202(); /* Select the style/color*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWPSW = "Y"; /* Indicate Problem*/
    TS0UM001.XXXPRCNM = "TS0U431"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U431"; /* Process name*/
  end


end // end TS0U431

// Select row in DPRODC.VPRDCU01
Function TS0U432()
   /* ------------------------------------------------------------*/
   /* select Customer Xref*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = TSWREC.XGPCD;
  PC2REC.PC2CUXID = TS0UW03.PC2CUXID[TS0UWIXM];

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TS0UM001.XXXPRCNM = "TS0U432"; /* Module identification*/
  TS0UM002.XXXPRCNM = "TS0U432"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "TS0U432"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS0U432

// Verify the P.O. id fields
Function TS0U433()
   /* ------------------------------------------------------------*/

      /* VERIFY THE ENTRY OF EACH P.O. ID FIELD SEPERATELY*/

     /* If any part of the p.o. id entered*/

     /* Verify:  1) PO order type entered and equal to 'FT'*/
              /* 2) Factory code entered and correct.*/
              /* 3) Delivery month entered and correct.*/
              /* 4) Month entered and correct.*/
              /* 5) Year entered and correct.*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWIDS = "N"; /* Initialize po id and type*/
  TS0UW01.TS0UWIPI = "N"; /* Initialize po id indicator*/
  TS0UW01.TS0UWIOT = "N"; /* Initialize invalid order type id*/

  if (TS0UW03.TS0UMPOI[TS0UWIXM] != " " /* If any fields entered.*/
   || TS0UW03.PC4ORTYP[TS0UWIXM] != " ")

    TS0UW01.TS0UWPOI = TS0UW03.TS0UMPOI[TS0UWIXM]; /* reform field*/

    /* ------------------------------------------------------------*/
     /* Verify po id order type*/
    /* ------------------------------------------------------------*/

    if (TS0UW03.PC4ORTYP[TS0UWIXM] == "  ") /* Nothing there*/
      converseLib.validationFailed(220); /* Invalid order type entered*/
      TS0UW01.TS0UWIDS = "Y"; /* Invalid po id / type*/
      TS0UW01.TS0UWIOT = "Y"; /* Indicate invalid order type*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U435";
      TS0UM002.XXXPRCNM = "TS0U435";
      if (TS0UW01.TS0UWIXM == 1
       || TS0UM001.PC4ORTYP[TS0UWIXM] != " ")
        set TS0UM001.PC4ORTYP[TS0UWIXM] cursor, bold;
      end
    else
      set PC4REC empty;
      PC4REC.XGPCD = TSWREC.XGPCD;
      PC4REC.PC4ORTYP = TS0UW03.PC4ORTYP[TS0UWIXM];
      TS0US06(); /* Select order type*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
         /* continue on*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
          converseLib.validationFailed(220); /* Invalid order type entered*/
          TS0UW01.TS0UWIDS = "Y"; /* Invalid po id / type*/
          TS0UW01.TS0UWIOT = "Y"; /* Indicate invalid order type*/
          TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
          TS0UM001.XXXPRCNM = "TS0U435";
          TS0UM002.XXXPRCNM = "TS0U435";
          if (TS0UW01.TS0UWIXM == 1
           || TS0UM001.PC4ORTYP[TS0UWIXM] != " ")
            set TS0UM001.PC4ORTYP[TS0UWIXM] cursor, bold;
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* FACTORY CODE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0UW01.TS0UWFCT == " ") /* Nothing there*/
      TS0UW01.TS0UWIPI = "Y"; /* Indicate invalid po id*/
      TS0UW01.TS0UWIDS = "Y"; /* Invalid po id / type*/
    else
      FY1REC.FY1FCTYC = TS0UW01.TS0UWFCT; /* Search key*/
      FY1REC.XGPCD = TSWREC.XGPCD; /* gpc*/

      TS0US05(); /* select the factory row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
         /* continue on*/
      else
        TS0UW01.TS0UWIPI = "Y"; /* Indicate invalid po id*/
        TS0UW01.TS0UWIDS = "Y"; /* Invalid po id / type*/
      end
    end

    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0UW01.TS0UWDMO >= "01" /* If valid month entered*/
     && TS0UW01.TS0UWDMO <= "12")
       /* continue on*/
    else
      TS0UW01.TS0UWIPI = "Y"; /* Indicate invalid po id*/
      TS0UW01.TS0UWIDS = "Y"; /* Invalid po id / type*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0UW01.TS0UWPMO >= "01" /* Something there*/
     && TS0UW01.TS0UWPMO <= "12")
       /* continue on*/
    else
      TS0UW01.TS0UWIPI = "Y"; /* Indicate invalid po id*/
      TS0UW01.TS0UWIDS = "Y"; /* Invalid po id / type*/
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0UW01.TS0UWPYR >= "00"
     && TS0UW01.TS0UWPYR <= "99")
      if (TS0UW01.TS0UWPYR > "85")
        TS0UW01.TS0UWPCC = "19";
      else
        TS0UW01.TS0UWPCC = "20";
      end
    else
      if (TS0UW01.TS0UWPY1 >= "A"
       && TS0UW01.TS0UWPY1 <= "Z"
       && TS0UW01.TS0UWPY2 >= "0"
       && TS0UW01.TS0UWPY2 <= "9")
        TS0US07(); /* Select the set of season years*/
        if (SQLCA.VAGen_SQLCODE == 0)
          TS0US08(); /* Fetch the first row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
            TS0UW01.TS0UWCYR = PCFREC.PCFSEYR;
            TS0UW01.TS0UWPYR = TS0UW01.TS0UWCYY;
            TS0UW01.TS0UWPCC = TS0UW01.TS0UWCCC;
          else
            TS0UW01.TS0UWIPI = "Y"; /* Indicate invalid po id*/
            TS0UW01.TS0UWIDS = "Y"; /* Invalid po id / type*/
          end
          TS0US09(); /* Close the set*/
        end
      else
        TS0UW01.TS0UWIPI = "Y"; /* Indicate invalid po id*/
        TS0UW01.TS0UWIDS = "Y"; /* Invalid po id / type*/
      end
    end


    if (TS0UW01.TS0UWIPI == "Y") /* Indicate invalid po id*/
      TS0UW01.TS0UWPSW = "Y";
      TS0UM001.XXXPRCNM = "TS0U435";
      TS0UM002.XXXPRCNM = "TS0U435";
      converseLib.validationFailed(167);
      if (TS0UW01.TS0UWIXM == 1
       || TS0UM001.TS0UMPOI[TS0UWIXM] != " ")
        set TS0UM001.TS0UMPOI[TS0UWIXM] cursor, bold;
      end
    end

    if (TS0UW01.TS0UWIDS == "Y") /* Indicate invalid po id and type*/
      TS0UW01.TS0UWPSW = "Y";
    end

  end


end // end TS0U433

// Verify po # or po id entered
Function TS0U434()
   /* ------------------------------------------------------------*/

         /* VERIFY P.O. NUMBER OR P.O. ID ENTERED*/

   /* 1) If p.o. number or p.o. id not entered then indicate err*/
   /* 2) If the p.o. number was entered then continue on without*/
      /* checking the p.o. id.*/
   /* 3) If only p.o. id fields have been entered and they are*/
      /* correct, then select the p.o. id and obtain a valid*/
      /* p.o. number for the id.*/

   /* ------------------------------------------------------------*/

  if (TS0UW03.TS0UMPOI[TS0UWIXM] == " "        /* if po # or po id not entered*/
   && TS0UW03.PC3PONBR[TS0UWIXM] == 0          
   && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0 /* not B-Grade rqst*/
   && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0)

    converseLib.validationFailed(168); /* error message*/
    TS0UM001.XXXPRCNM = "TS0U434"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U434"; /* Process name*/
    TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
    set TS0UM001.PC3PONBR[TS0UWIXM] cursor, modified, bold;
    set TS0UM001.TS0UMPOI[TS0UWIXM] modified, bold;
    set TS0UM001.PC4ORTYP[TS0UWIXM] modified, bold;
    return;

  else

    if (TS0UW03.PC3PONBR[TS0UWIXM] > 0) /* if po # entered*/

      TS0U-43410();

    else

      if (TS0UM001.XGPCD == "02"                  
       && TS0UW03.TS0UMPOI[TS0UWIXM] == " "       /* if po id not entered*/
       && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] > 0 /* B-Grade rqst*/
       && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] > 0)

       /* ======= Next Sentence =============>*/

      else

        if (TS0UW01.TS0UWIDS == "N") /* If the po id passed previous edits*/

          TS0U-43420();

        end

      end

    end

  end


   /* **************************************/
         /* edit quality code*/
   /* **************************************/

  if (TS0UW03.XQACD[TS0UWIXM] != " ") /* if quality code entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0UW03.XQACD[TS0UWIXM] in XQATBL.XQACD) /* Check valid quality code*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XQATBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(108); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U434"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U434"; /* Process name*/
      set TS0UM002.XQACD[TS0UWIXM] cursor, modified, bold;
      return;
    end
  else
    if (TS0UW03.XQACD[TS0UWIXM] == " ") /* if quality code not entered*/
      if (TS0UM001.XGPCD == "02"
       && TS0UW03.PC4ORTYP[TS0UWIXM] == "QQ")
        TS0UW03.XQACD[TS0UWIXM] = "02"; /* default to '02'*/
      else
        if (TS0UM001.XGPCD == "02"
         && TS0UW03.PC4ORTYP[TS0UWIXM] == "OS")
          TS0UW03.XQACD[TS0UWIXM] = "02"; /* default to '02'*/
        else
          if (TS0UM001.XGPCD == "02"                  
           && TS0UW03.TS0UMPOI[TS0UWIXM] == " "       
           && TS0UW03.PC3PONBR[TS0UWIXM] == 0         
           && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] > 0 /* B-Grade rqst*/
           && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] > 0)
            TS0UW03.XQACD[TS0UWIXM] = "02"; /* default to '02'*/
          else
            if (TS0UM001.XGPCD == "03"
             && TS0UW03.PC4ORTYP[TS0UWIXM] == "IR")
              TS0UW03.XQACD[TS0UWIXM] = "02"; /* default to '02'*/
            else
              TS0UW03.XQACD[TS0UWIXM] = "01"; /* default to '01'*/
            end
          end
        end
      end
    end
  end

end // end TS0U434

// Verify po item seq nbr entered
Function TS0U436()
   /* ------------------------------------------------------------*/

         /* VERIFY P.O. ITEM SEQUENCE NUMBER ENTERED*/

   /* 1) Check to see if gpc, po number, and item sequence number exist*/
      /* on the vpoitm03 view.*/

   /* ------------------------------------------------------------*/


  set VPOITM03 empty;
  set PCYREC empty;
  VPOITM03.XGPCD = TS0UM002.XGPCD;
  VPOITM03.PC3PONBR = TS0UM002.PC3PONBR[TS0UWIXM];
  VPOITM03.PC6ITMNB = TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM];
  PCYREC.PCYFUNC = "SA";

  TS0US11(); /* select PO item*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VPOITM03.PC6STAT == "CX")
      converseLib.validationFailed(438);
      TS0UM001.XXXPRCNM = "TS0U436";
      TS0UW01.TS0UWPWF = "Y";
      set TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] cursor, modified, bold;
    else
      TS0U438();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(439);
      TS0UM001.XXXPRCNM = "TS0U436";
      TS0UW01.TS0UWPWF = "Y";
      set TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] cursor, modified, bold;
    end
  end


end // end TS0U436

// Populate long key from seq nbr
Function TS0U438()
   /* ------------------------------------------------------------*/

         /* Populate long key from PO item sequence number*/

   /* If the PO line item sequence number was entered, move the*/
   /* associated line item to the screen.*/

   /* ------------------------------------------------------------*/

  TS0UM001.PC2CUXID[TS0UWIXM] = VPOITM03.PC2CUXID;
  TS0UM002.PC2CUXID[TS0UWIXM] = VPOITM03.PC2CUXID;
  TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] = VPOITM03.OP1CUOID;
  TS0UM002.TS0UM-CUST-ORD-ID[TS0UWIXM] = VPOITM03.OP1CUOID;
  TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] = VPOITM03.OP1NORID;
  TS0UM002.TS0UM-NIKE-ORD-ID[TS0UWIXM] = VPOITM03.OP1NORID;
  TS0UM001.SY1STNBR[TS0UWIXM] = VPOITM03.SY1STNBR;
  TS0UM002.SY1STNBR[TS0UWIXM] = VPOITM03.SY1STNBR;
  TS0UM001.SY2CLRID[TS0UWIXM] = VPOITM03.SY2CLRID;
  TS0UM002.SY2CLRID[TS0UWIXM] = VPOITM03.SY2CLRID;
  TS0UM001.XDMCD[TS0UWIXM] = VPOITM03.XDMCD;
  TS0UM002.XQACD[TS0UWIXM] = VPOITM03.XQACD;
  TS0UM002.XPGCD[TS0UWIXM] = VPOITM03.XPGCD;
  TS0UM002.XUMCD[TS0UWIXM] = VPOITM03.XUMCD;
  TS0UM002.XOWCD[TS0UWIXM] = VPOITM03.XOWCD;

end // end TS0U438

// Header edits
Function TS0U440()
   /* ------------------------------------------------------------*/

                     /* HEADER EDITS*/

     /* Edits;*/
        /* 1) kilos*/
        /* 2) cubic meters*/
        /* 3) container type*/
        /* 4) container id*/

   /* ------------------------------------------------------------*/

  if (TS0UM001.YCNCD != " ") /* if container type is entered*/

    if (TS0UM001.TSHTCBM == 0) /* if cubic meters not entered*/
      converseLib.validationFailed(119); /* must enter at least one*/
      TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U440"; /* process name*/
      set TS0UM001.TSHTCBM cursor, modified, bold;
      TS0UM002.XXXPRCNM = "TS0U440"; /* process name*/
      set TS0UM002.TSHTCBM cursor, modified, bold;
      return;
    end

    if (TS0UM001.TSHTKG < 0) /* if kilos lt 0*/
      converseLib.validationFailed(76); /* must be greater than zero*/
      TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U440"; /* process name*/
      set TS0UM001.TSHTKG modified, bold;
      TS0UM002.XXXPRCNM = "TS0U440"; /* process name*/
      set TS0UM002.TSHTKG modified, bold;
      return;
    end

    if (TS0UM001.TSHTCBM < 0) /* if cubic meters lt 0*/
      converseLib.validationFailed(76); /* must be greater than zero*/
      TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U440"; /* process name*/
      set TS0UM001.TSHTCBM modified, bold;
      TS0UM002.XXXPRCNM = "TS0U440"; /* process name*/
      set TS0UM002.TSHTCBM modified, bold;
      return;
    end

    /* **************************************/
             /* container type*/
    /* **************************************/

    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0UM001.YCNCD in YCNTBL.YCNCD) /* Check valid container*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YCNTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(120); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U440"; /* Process name*/
      set TS0UM001.YCNCD cursor, modified, bold;
      TS0UM002.XXXPRCNM = "TS0U440"; /* Process name*/
      set TS0UM002.YCNCD cursor, modified, bold;
      return;
    end

  else
    if (TS0UW01.YMTCD == "VL") /* If craft is vessel*/
      converseLib.validationFailed(120); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U440"; /* Process name*/
      set TS0UM001.YCNCD cursor, modified, bold;
      TS0UM002.XXXPRCNM = "TS0U440"; /* Process name*/
      set TS0UM002.YCNCD cursor, modified, bold;
      return;
    end
  end

   /* ************************************/
        /* container id*/
   /* ************************************/

  if (TS0UM001.TSHCNTNR == " ") /* if container not entered*/
    converseLib.validationFailed(121); /* Display error message*/
    TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
    TS0UM001.XXXPRCNM = "TS0U440"; /* Process name*/
    set TS0UM001.TSHCNTNR cursor, modified, bold;
    TS0UM002.XXXPRCNM = "TS0U440"; /* Process name*/
    set TS0UM002.TSHCNTNR cursor, modified, bold;
    return;
  else
    TS0U441(); /* select the container*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if container was found*/
      converseLib.validationFailed(122); /* Display error message*/
      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UM001.XXXPRCNM = "TS0U440"; /* Process name*/
      set TS0UM001.TSHCNTNR cursor, modified, bold;
      TS0UM002.XXXPRCNM = "TS0U440"; /* Process name*/
      set TS0UM002.TSHCNTNR cursor, modified, bold;
    end
  end


end // end TS0U440

// Select container id
Function TS0U441()
   /* ------------------------------------------------------------*/

                 /* SELECT CONTAINER ID*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* clear record*/

  TSHREC.TSFSHPID = TS0UM001.TSFSHPID; /* move key*/
  TSHREC.TSHCNTNR = TS0UM001.TSHCNTNR;

  call "IO2590" ("S ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0U441"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UW01.TS0UWPSW = "Y"; /* Indicate Problem*/
    TS0UM001.XXXPRCNM = "TS0U441"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U441"; /* Process name*/
  end


end // end TS0U441

// Populate leg nbr
Function TS0U445()
   /* ------------------------------------------------------------*/

         /* Populate leg number*/

   /* Find the leg number by checking:*/

   /* If the origin location is a consolidation point*/
   /* find the previous shipment with the same product and*/
   /* discharge location code = origin location code*/
   /* set the leg number to found leg number + 1*/
   /* Else if the discharge port is a consolidation point*/
   /* set the leg number to 1*/
   /* Else*/
   /* set the leg number to 0*/
   /* ------------------------------------------------------------*/

  if (TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] == 0)
    TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] = 0;
  else
    if (TS0UW01.TS-ORIG-LOC-CNSLD-FL == "Y")
      TS0U-44510(); /* scan for previous leg*/
      TS0U-44520(); /* get 1st previous leg*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] = VCPLHDJ4.TS-SHP-LEG-NBR + 1;
      else
        TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] = 0;
      end
      TS0U-44530(); /* close cursor*/
    else
      if (TS0UW01.TS-DSCHG-LOC-CNSLD-FL == "Y")
        TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] = 1;
      else
   /* ***********************tcs changes begin here ************/
        if (TS0UW01.TS-DEST-LOC-CD == "CTE"
         || TS0UW01.TS-DEST-LOC-CD == "HK6")
          TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] = 1;
        else
          TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] = 0;
        end
   /* ***********************tcs changes end *******************/
      end
    end
  end

end // end TS0U445

// Check for duplicate pack lists
Function TS0U450()
   /* ------------------------------------------------------------*/

               /* CHECK FOR DUPLICATE PACKING LISTS*/

   /* 1) Check the map working storage to see if duplicate*/
      /* packing lists have been entered.*/

   /* 2) Compare the map working storage entries to see if*/
      /* duplicate packing lists already exist in the table*/
      /* working storage.*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWIXM = 13; /* initialize index*/
  while (TS0UW01.TS0UWIXM > 0) /* until end of detail*/
    TS0UW01.TS0UWIXW = TS0UW01.TS0UWIXM - 1; /* initialize index*/
    while (TS0UW01.TS0UWIXW > 0) /* until end of detail*/

      if (TS0UW03.PC3PONBR[TS0UWIXM] > 0 /* and po exists*/
       && TS0UW03.PC3PONBR[TS0UWIXM] == TS0UW03.PC3PONBR[TS0UWIXW]
       && TS0UW03.TS0UMPOI[TS0UWIXM] == TS0UW03.TS0UMPOI[TS0UWIXW]
       && TS0UW03.PC4ORTYP[TS0UWIXM] == TS0UW03.PC4ORTYP[TS0UWIXW]
       && TS0UW03.PC2CUXID[TS0UWIXM] == TS0UW03.PC2CUXID[TS0UWIXW]
       && TS0UW03.SY1STNBR[TS0UWIXM] == TS0UW03.SY1STNBR[TS0UWIXW]
       && TS0UW03.SY2CLRID[TS0UWIXM] == TS0UW03.SY2CLRID[TS0UWIXW]
       && TS0UW03.XDMCD[TS0UWIXM] == TS0UW03.XDMCD[TS0UWIXW]
       && TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM]
       == TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXW]
       && TS0UW03.XQACD[TS0UWIXM] == TS0UW03.XQACD[TS0UWIXW]
       && TS0UW03.XPGCD[TS0UWIXM] == TS0UW03.XPGCD[TS0UWIXW]
       && TS0UW03.XUMCD[TS0UWIXM] == TS0UW03.XUMCD[TS0UWIXW]
       && TS0UW03.XOWCD[TS0UWIXM] == TS0UW03.XOWCD[TS0UWIXW]
       && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 
      TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXW]
       && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 
      TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXW])

        set TS0UM001.PC3PONBR[TS0UWIXM] cursor, modified, bold;
        set TS0UM001.TS0UMPOI[TS0UWIXM] modified, bold;
        set TS0UM001.PC4ORTYP[TS0UWIXM] modified, bold;
        set TS0UM001.PC2CUXID[TS0UWIXM] modified, bold;
        set TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] modified, bold;
        set TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] modified, bold;
        set TS0UM001.SY1STNBR[TS0UWIXM] modified, bold;
        set TS0UM001.SY2CLRID[TS0UWIXM] modified, bold;
        set TS0UM001.TS0UMSHP[TS0UWIXM] modified, bold;
        set TS0UM001.TS0UMCRT[TS0UWIXM] modified, bold;
        set TS0UM001.TS0UMCBM[TS0UWIXM] modified, bold;
        set TS0UM001.TS0UMKG[TS0UWIXM] modified, bold;
        set TS0UM001.XDMCD[TS0UWIXM] modified, bold;

        set TS0UM002.PC3PONBR[TS0UWIXM] cursor, modified, bold;
        set TS0UM002.PC2CUXID[TS0UWIXM] modified, bold;
        set TS0UM002.SY1STNBR[TS0UWIXM] modified, bold;
        set TS0UM002.SY2CLRID[TS0UWIXM] modified, bold;
        set TS0UM002.TS0UMSHP[TS0UWIXM] modified, bold;
        set TS0UM002.TS0UMCRT[TS0UWIXM] modified, bold;
        set TS0UM002.TS0UMCBM[TS0UWIXM] modified, bold;
        set TS0UM002.TS0UMKG[TS0UWIXM] modified, bold;
        set TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] modified, bold;
        set TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] modified, bold;
        set TS0UM002.XQACD[TS0UWIXM] modified, bold;
        set TS0UM002.XPGCD[TS0UWIXM] modified, bold;
        set TS0UM002.XUMCD[TS0UWIXM] modified, bold;
        set TS0UM002.XOWCD[TS0UWIXM] modified, bold;

        TS0UM001.XXXPRCNM = "TS0U450"; /* process name*/
        TS0UM002.XXXPRCNM = "TS0U450"; /* process name*/
        TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
        converseLib.validationFailed(117); /* duplicate packing list*/
      end
      TS0UW01.TS0UWIXW = TS0UW01.TS0UWIXW - 1; /* decrement index*/
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM - 1; /* decrement index*/
  end

  TS0UW01.TS0UWIXM = 13; /* initialize index*/
  while (TS0UW01.TS0UWIXM > 0) /* until end of detail*/
    TS0UW01.TS0UWIXW = 1; /* initialize index*/

    while (TS0UW01.TS0UWIXW < TS0UW01.TS0UWMAX) /* until end of table ws*/
      if (TS0UW02.PC3PONBR[TS0UWIXW] > 0 /* and lines exist*/
       || TS0UW02.TS0UM-CUST-ORD-ID[TS0UWIXW] > 0)

        if (TS0UW03.PC3PONBR[TS0UWIXM] > 0
         && TS0UW03.PC3PONBR[TS0UWIXM] == TS0UW02.PC3PONBR[TS0UWIXW]
         && TS0UW03.TS0UMPOI[TS0UWIXM] == TS0UW02.TS0UMPOI[TS0UWIXW]
         && TS0UW03.PC4ORTYP[TS0UWIXM] == TS0UW02.PC4ORTYP[TS0UWIXW]
         && TS0UW03.PC2CUXID[TS0UWIXM] == TS0UW02.PC2CUXID[TS0UWIXW]
         && TS0UW03.SY1STNBR[TS0UWIXM] == TS0UW02.SY1STNBR[TS0UWIXW]
         && TS0UW03.SY2CLRID[TS0UWIXM] == TS0UW02.SY2CLRID[TS0UWIXW]
         && TS0UW03.XDMCD[TS0UWIXM] == TS0UW02.XDMCD[TS0UWIXW]
         && TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM]
         == TS0UW02.PC-ITM-SEQ-NBR[TS0UWIXW]
         && TS0UW03.XQACD[TS0UWIXM] == TS0UW02.XQACD[TS0UWIXW]
         && TS0UW03.XPGCD[TS0UWIXM] == TS0UW02.XPGCD[TS0UWIXW]
         && TS0UW03.XUMCD[TS0UWIXM] == TS0UW02.XUMCD[TS0UWIXW]
         && TS0UW03.XOWCD[TS0UWIXM] == TS0UW02.XOWCD[TS0UWIXW]
         && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 
        TS0UW02.TS0UM-CUST-ORD-ID[TS0UWIXW]
         && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 
        TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWIXW])

          set TS0UM001.PC3PONBR[TS0UWIXM] cursor, modified, bold;
          set TS0UM001.TS0UMPOI[TS0UWIXM] modified, bold;
          set TS0UM001.PC4ORTYP[TS0UWIXM] modified, bold;
          set TS0UM001.PC2CUXID[TS0UWIXM] modified, bold;
          set TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] modified, bold;
          set TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] modified, bold;
          set TS0UM001.SY1STNBR[TS0UWIXM] modified, bold;
          set TS0UM001.SY2CLRID[TS0UWIXM] modified, bold;
          set TS0UM001.TS0UMSHP[TS0UWIXM] modified, bold;
          set TS0UM001.TS0UMCRT[TS0UWIXM] modified, bold;
          set TS0UM001.TS0UMCBM[TS0UWIXM] modified, bold;
          set TS0UM001.TS0UMKG[TS0UWIXM] modified, bold;
          set TS0UM001.XDMCD[TS0UWIXM] modified, bold;

          set TS0UM002.PC3PONBR[TS0UWIXM] cursor, modified, bold;
          set TS0UM002.PC2CUXID[TS0UWIXM] modified, bold;
          set TS0UM002.SY1STNBR[TS0UWIXM] modified, bold;
          set TS0UM002.SY2CLRID[TS0UWIXM] modified, bold;
          set TS0UM002.TS0UMSHP[TS0UWIXM] modified, bold;
          set TS0UM002.TS0UMCRT[TS0UWIXM] modified, bold;
          set TS0UM002.TS0UMCBM[TS0UWIXM] modified, bold;
          set TS0UM002.TS0UMKG[TS0UWIXM] modified, bold;
          set TS0UM002.TS-SHP-LEG-NBR[TS0UWIXM] modified, bold;
          set TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] modified, bold;
          set TS0UM002.XQACD[TS0UWIXM] modified, bold;
          set TS0UM002.XPGCD[TS0UWIXM] modified, bold;
          set TS0UM002.XUMCD[TS0UWIXM] modified, bold;
          set TS0UM002.XOWCD[TS0UWIXM] modified, bold;

          TS0UM001.XXXPRCNM = "TS0U450"; /* process name*/
          TS0UM002.XXXPRCNM = "TS0U450"; /* process name*/
          TS0UW01.TS0UWPSW = "Y"; /* indicate problem*/
          converseLib.validationFailed(117); /* duplicate packing list*/

        end

      end
      TS0UW01.TS0UWIXW = TS0UW01.TS0UWIXW + 1; /* decrement index*/
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM - 1; /* decrement index*/
  end


end // end TS0U450

// Check for po warning fl reset
Function TS0U460()
   /* ------------------------------------------------------------*/

             /* CHECK FOR PO QUANTITY WARNING FLAG RESET*/

      /* If any of the map information has changed from the*/
      /* previous map information saved in TS0UW03, then*/
      /* reset the po quantity warning flag*/

   /* ------------------------------------------------------------*/

   /* **************************************************/
      /* Check to see if PO quantity warning flag*/
      /* needs to be reset*/
   /* **************************************************/

  TS0UW01.TS0UWIXM = 1; /* set index to 1*/
  while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
    if (TS0UW03.XOWCD[TS0UWIXM] == TS0UW04.XOWCD[TS0UWIXM]
     && TS0UW03.XUMCD[TS0UWIXM] == TS0UW04.XUMCD[TS0UWIXM]
     && TS0UW03.XPGCD[TS0UWIXM] == TS0UW04.XPGCD[TS0UWIXM]
     && TS0UW03.XQACD[TS0UWIXM] == TS0UW04.XQACD[TS0UWIXM]
     && TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM]
     == TS0UW04.PC-ITM-SEQ-NBR[TS0UWIXM]
     && TS0UW03.TS-SHP-LEG-NBR[TS0UWIXM]
     == TS0UW04.TS-SHP-LEG-NBR[TS0UWIXM]
     && TS0UW03.XDMCD[TS0UWIXM] == TS0UW04.XDMCD[TS0UWIXM]
     && TS0UW03.TS0UMKG[TS0UWIXM] == TS0UW04.TS0UMKG[TS0UWIXM]
     && TS0UW03.TS0UMCBM[TS0UWIXM] == TS0UW04.TS0UMCBM[TS0UWIXM]
     && TS0UW03.TS0UMCRT[TS0UWIXM] == TS0UW04.TS0UMCRT[TS0UWIXM]
     && TS0UW03.TS0UMSHP[TS0UWIXM] == TS0UW04.TS0UMSHP[TS0UWIXM]
     && TS0UW03.PC3PONBR[TS0UWIXM] == TS0UW04.PC3PONBR[TS0UWIXM]
     && TS0UW03.TS0UMPOI[TS0UWIXM] == TS0UW04.TS0UMPOI[TS0UWIXM]
     && TS0UW03.PC4ORTYP[TS0UWIXM] == TS0UW04.PC4ORTYP[TS0UWIXM]
     && TS0UW03.PC2CUXID[TS0UWIXM] == TS0UW04.PC2CUXID[TS0UWIXM]
     && TS0UW03.SY1STNBR[TS0UWIXM] == TS0UW04.SY1STNBR[TS0UWIXM]
     && TS0UW03.SY2CLRID[TS0UWIXM] == TS0UW04.SY2CLRID[TS0UWIXM]
     && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 
    TS0UW04.TS0UM-CUST-ORD-ID[TS0UWIXM]
     && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 
    TS0UW04.TS0UM-NIKE-ORD-ID[TS0UWIXM])

       /* ======== Next Sentence ==========>*/

    else
      TS0UW01.TS0UWPWF = "N"; /* reset po warning flag*/
      TS0UW01.TS0UWWA1 = "              "; /* reset po warn arrays*/
      TS0UW01.TS0UWWA2 = "              ";
      TS0UW01.TS0UWWA3 = "              ";
      TS0UW01.TS0UWWA4 = "              ";
      TS0UW01.TS0UWWA6 = "              ";
      TS0UW01.TS0UWWA7 = "              ";
      TS0UW01.TS0UWIXM = 14; /* end loop*/
    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
  end


end // end TS0U460

// Verify item exist
Function TS0U470()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE P.O.*/

   /* ------------------------------------------------------------*/


  TS0UW01.TS0UWIXM = 13; /* initialize index*/
  TS0UW01.TS0UWWF5 = "N"; /* initialize switch*/
  while (TS0UW01.TS0UWIXM > 0) /* until end of detail*/

    if (TS0UW03.XOWCD[TS0UWIXM] == " " /* if detail line blank*/
     && TS0UW03.XUMCD[TS0UWIXM] == " " 
     && TS0UW03.XPGCD[TS0UWIXM] == " " 
     && TS0UW03.XQACD[TS0UWIXM] == " " 
     && TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM] == 0
     && TS0UW03.XDMCD[TS0UWIXM] == " " 
     && TS0UW03.TS0UMKG[TS0UWIXM] == 0 
     && TS0UW03.TS0UMCBM[TS0UWIXM] == 0
     && TS0UW03.TS0UMCRT[TS0UWIXM] == 0
     && TS0UW03.TS0UMSHP[TS0UWIXM] == 0
     && TS0UW03.PC3PONBR[TS0UWIXM] == 0
     && TS0UW03.TS0UMPOI[TS0UWIXM] == " "
     && TS0UW03.PC4ORTYP[TS0UWIXM] == " "
     && TS0UW03.PC2CUXID[TS0UWIXM] == " "
     && TS0UW03.SY1STNBR[TS0UWIXM] == " "
     && TS0UW03.SY2CLRID[TS0UWIXM] == " "
     && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
     && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0)

      /* ======== Next Sentence =========>*/

    else

      if (TS0UW03.PC4ORTYP[TS0UWIXM] == "QQ"
       || TS0UW03.PC4ORTYP[TS0UWIXM] == "OS")

        TS0UW01.TS0UWWF5 = "Y";
         /* If b-grade - bypass item on PO*/
      /* ======== Next Sentence =========>*/

      else

        TS0U-47050(); /* ===> Verify S.O. in D.B. warning*/

        if (TSWREC.XGPCD == "02"
         && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] > 0
         && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] > 0
         && TS0UW03.PC3PONBR[TS0UWIXM] == 0
         && TS0UW03.XQACD[TS0UWIXM] == "02")

          TS0U-47100(); /* Verify item in S.O. D.B.*/

        else

          TS0U-47200(); /* Verify item in P.O. D.B.*/

        end

      end

    end

    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM - 1; /* decrement index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U470 ***********************/
end // end TS0U470

// Select (SI) Set       VPOITM01
Function TS0U471()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TSWREC.XWHCD;
  PC6REC.PC3PONBR = TS0UW03.PC3PONBR[TS0UWIXM];
  PC6REC.SY1STNBR = TS0UW03.SY1STNBR[TS0UWIXM];
  PC6REC.SY2CLRID = TS0UW03.SY2CLRID[TS0UWIXM];
  PC6REC.XDMCD = TS0UW03.XDMCD[TS0UWIXM];
   /* MOVE TS0UW03.XQACD(TS0UWIXM) TO PC6REC.XQACD;*/
  PC6REC.XQACD = "*"; /* wildcard quality code*/
  PC6REC.XOWCD = TS0UW03.XOWCD[TS0UWIXM];
  PC6REC.PC6ITMNB = TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM];
  PC6REC.XPGCD = TS0UW03.XPGCD[TS0UWIXM];
  PC6REC.XUMCD = TS0UW03.XUMCD[TS0UWIXM];
  PC6REC.PC2CUXID = TS0UW03.PC2CUXID[TS0UWIXM];
  if (TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] != 0
   && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] != 0)
    PC6REC.OP1CUOID = TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM];
    PC6REC.OP1NORID = TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM];
    PC6REC.OP1PARTN = TS0UW03.TS0UW-ORD-PART-CHAR[TS0UWIXM];
  else
    PC6REC.OP1CUOID = 0;
    PC6REC.OP1NORID = 0;
    PC6REC.OP1PARTN = " ";
  end
  PC6REC.PC6ETSDT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";

  PCYREC.PCYFUNC = "SI";
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0U471"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U471"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U471"; /* Process name*/

  end


end // end TS0U471

// Fetch  (NI) Next row  VPOITM01
Function TS0U472()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NI"; /* move in function code*/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0UW01.TS0UWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UW01.TS0UWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0U472"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0UM001.XXXPRCNM = "TS0U472"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0U472"; /* Process name*/

    else

      TS0UW01.TS0UWPOQ = TS0UW01.TS0UWPOQ + PC6REC.PC6TORDE;

    end
  end


end // end TS0U472

// Close  (CI) Set       VPOITM01
Function TS0U473()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CI"; /* move in function code*/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0U473"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U473"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U473"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0U473

// Check quantity against po
Function TS0U480()
   /* ------------------------------------------------------------*/

           /* CHECK QUANTITY AGAINST PO ITEM QTY,*/
             /* IN-TRANSIT OR IN-PROCESS SHIPMENTS,*/
             /* AND PO RECEIPTS FOR ITEM.*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWIXM = 13; /* initialize index*/
  while (TS0UW01.TS0UWIXM > 0) /* until end of detail*/
    if (TS0UW03.XOWCD[TS0UWIXM] == " " /* if detail line blank*/
     && TS0UW03.XUMCD[TS0UWIXM] == " " 
     && TS0UW03.XPGCD[TS0UWIXM] == " " 
     && TS0UW03.XQACD[TS0UWIXM] == " " 
     && TS0UW03.PC-ITM-SEQ-NBR[TS0UWIXM] == 0
     && TS0UW03.XDMCD[TS0UWIXM] == " " 
     && TS0UW03.TS0UMKG[TS0UWIXM] == 0 
     && TS0UW03.TS0UMCBM[TS0UWIXM] == 0
     && TS0UW03.TS0UMCRT[TS0UWIXM] == 0
     && TS0UW03.TS0UMSHP[TS0UWIXM] == 0
     && TS0UW03.PC3PONBR[TS0UWIXM] == 0
     && TS0UW03.TS0UMPOI[TS0UWIXM] == " "
     && TS0UW03.PC4ORTYP[TS0UWIXM] == " "
     && TS0UW03.PC2CUXID[TS0UWIXM] == " "
     && TS0UW03.SY1STNBR[TS0UWIXM] == " "
     && TS0UW03.SY2CLRID[TS0UWIXM] == " "
     && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
     && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0)

       /* next sentence*/

    else

      /* **********************************************************/
       /* Set a switch to indicate whether this is a default*/
       /* domestic shipment and there was no quantity entered.*/
       /* This switch is set because of CSP's inability to handle*/
       /* complex logic and is used in the following IF statement.*/
      /* **********************************************************/
      TS0UW01.TS0UWDSW = "N"; /* Reset switch*/
      if (TSWREC.TSWDOMFL == "Y" /* If this is domestic shpmnt*/
       && TS0UW03.TS0UMSHP[TS0UWIXM] == 0) /* and no quantity*/
        TS0UW01.TS0UWDSW = "Y"; /* Set switch*/
      end

      /* **********************************************************/
       /* If this entry was not found on the po, then bypass*/
       /* these quantity warning checks*/
      /* **********************************************************/
      if (TS0UW03.XRECD[TS0UWIXM] == "PS" /* If item not on po*/
       || TS0UW01.TS0UWDSW == "Y"         /* or domestic and no quantity*/
       || TS0UW01.TS0UWWF5 == "Y")        /* or b-grade shoes*/
         /* continue on*/
      else

        if (TS0UM001.XGPCD == "02"
         && TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] > 0
         && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] > 0
         && TS0UW03.PC3PONBR[TS0UWIXM] == 0)
         /* AND TS0UW03.XQACD(TS0UWIXM) EQ '02';*/

         /* **********************************************************/
          /* Select set and accumulate so quantity for an item*/
         /* **********************************************************/

          TS0U-48100(); /* Select the set of SO items*/

        else

         /* **********************************************************/
          /* Select set and accumulate po quantity for an item*/
         /* **********************************************************/

          TS0U-48200(); /* Select the set of PO items*/

        end
        /* **********************************************************/
         /* Select set and accumulate ship quantities for an item*/
        /* **********************************************************/

        TS0U-48300(); /* Get Shipment quantities*/


        /* **********************************************************/
         /* Select set and accumulate receipt quantities for an item*/
        /* **********************************************************/

        TS0U-48400(); /* Get Receipt  quantities*/


        /* **********************************************************/
         /* check accumulated quantities against user entered shp qty*/
        /* **********************************************************/

        TS0UW01.TS0UWTTQ = 0; /* Init fields*/
        TS0UW01.TS0UWTTD = 0;
        TS0UW01.TS0UWTTP = 0;

        TS0UW01.TS0UWTTQ = TS0UW01.TS0UWPLQ + TS0UW01.TS0UWRCQ;
        TS0UW01.TS0UWTTQ = TS0UW01.TS0UWTTQ + TS0UW03.TS0UMSHP[TS0UWIXM];

        TS0UW01.TS0UWTTD = TS0UW01.TS0UWPOQ - TS0UW01.TS0UWTTQ;
        if (TS0UW01.TS0UWTTD < 0) /* If negative*/
          TS0UW01.TS0UWTTD = TS0UW01.TS0UWTTD * -1; /* Make positive*/
        end

        if (TS0UW01.TS0UWPOQ != 0) /* If po quantity not zero*/
          TS0UW01.TS0UWTTP = TS0UW01.TS0UWTTD / TS0UW01.TS0UWPOQ * 100;
        end

        TS0UW01.TS0UWPLQ = TS0UW01.TS0UWPLQ + TS0UW01.TS0UWRCQ;
        TS0UW01.TS0UWPOQ = TS0UW01.TS0UWPOQ - TS0UW01.TS0UWPLQ;


        if (TS0UW01.TS0UWTTD <= TS0UW01.TS0UWSEQ /* If below soft error*/
         && TS0UW01.TS0UWTTP <= TS0UW01.TS0UWSEP) /* tolerances*/
          TS0UW03.TSISTAT[TS0UWIXM] = "99"; /* reset status*/
          TS0UW03.XRECD[TS0UWIXM] = "99"; /* reset excep code*/
        else
          /* ** any under shipment ***/
          if (TS0UW03.TS0UMSHP[TS0UWIXM] < TS0UW01.TS0UWPOQ)
            TS0UW01.TS0UWPWF = "Y"; /* Set warning flag*/
            TS0UW01.TS0UWPSW = "Y"; /* Set problem switch*/
            TS0UW01.TS0UWWF2 = "Y"; /* Set array warning*/
            TS0UW01.TS0UWSH2[TS0UWIXM] = "Y"; /* ind highlight row*/
            TS0UW03.TSISTAT[TS0UWIXM] = "99"; /* reset status*/
            TS0UW03.XRECD[TS0UWIXM] = "99"; /* reset excep code*/
          else
            /* ** If overshipment ***/
            if (TS0UW03.TS0UMSHP[TS0UWIXM] > TS0UW01.TS0UWPOQ)
              /* ** overship over tolerance ***/
              if (TS0UW01.TS0UWTTD > TS0UW01.TS0UWHEQ
               && TS0UW01.TS0UWTTP > TS0UW01.TS0UWHEP)
                TS0UW01.TS0UWPWF = "Y"; /* Set warning flag*/
                TS0UW01.TS0UWPSW = "Y"; /* Set problem switch*/
                TS0UW01.TS0UWWF4 = "Y"; /* Set array warning*/
                TS0UW01.TS0UWSH4[TS0UWIXM] = "Y";
                                   /* ind highlight row*/
                TS0UW03.XRECD[TS0UWIXM] = "OH";
                                   /* overship soft error*/
                if ("OH" in XRETBL.XRECD)
                  if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If hard error*/
                    TS0UW03.TSISTAT[TS0UWIXM] = "ER"; /* Set error*/
                  else
                    TS0UW03.TSISTAT[TS0UWIXM] = "99"; /* Reset*/
                  end
                else
                  TS0UW03.TSISTAT[TS0UWIXM] = "ER"; /* Set error*/
                end
              else
                /* ** overship under tolerance ***/
                TS0UW01.TS0UWPWF = "Y"; /* Set warning flag*/
                TS0UW01.TS0UWPSW = "Y"; /* Set problem switch*/
                TS0UW01.TS0UWWF3 = "Y"; /* Set array warning*/
                TS0UW01.TS0UWSH3[TS0UWIXM] = "Y";
                                   /* ind highlight row*/
                TS0UW03.XRECD[TS0UWIXM] = "OS";
                                   /* overship hard error*/
                if ("OS" in XRETBL.XRECD)
                  if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If hard error*/
                    TS0UW03.TSISTAT[TS0UWIXM] = "ER"; /* Set error*/
                  else
                    TS0UW03.TSISTAT[TS0UWIXM] = "99"; /* Reset*/
                  end
                else
                  TS0UW03.TSISTAT[TS0UWIXM] = "ER"; /* Set error*/
                end
              end
            end
          end
        end
      end

    end
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM - 1; /* decrement index*/
  end


end // end TS0U480

// Select (S3) Set       VCPLHDJ4
Function TS0U481()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROW*/

    /* 1) Select the unique packing list row.*/

   /* ------------------------------------------------------------*/

  set VCPLHDJ4 empty;

  VCPLHDJ4.XWH-WHSE-CD = TSWREC.XWHCD; /* warehouse*/
  VCPLHDJ4.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VCPLHDJ4.PC-PO-NBR = TS0UW03.PC3PONBR[TS0UWIXM];
  VCPLHDJ4.PC-PRDCU-ID = TS0UW03.PC2CUXID[TS0UWIXM]; /* customer xref*/
  VCPLHDJ4.SY-STY-NBR = TS0UW03.SY1STNBR[TS0UWIXM]; /* style number*/
  VCPLHDJ4.SY-COLR-CD-ID = TS0UW03.SY2CLRID[TS0UWIXM]; /* color number*/
  VCPLHDJ4.XDM-DIM-CD = TS0UW03.XDMCD[TS0UWIXM]; /* dimension code*/
  VCPLHDJ4.XQA-QUAL-CD = "*"; /* wildcard quality code*/
  VCPLHDJ4.PC-CU-IN-SEG-CD = "*"; /* wildcard iseg*/
  VCPLHDJ4.XOWCD = TS0UW03.XOWCD[TS0UWIXM]; /* owner group*/
  VCPLHDJ4.XPG-PKG-TYP-CD = TS0UW03.XPGCD[TS0UWIXM];
  VCPLHDJ4.XUM-UOM-CD = TS0UW03.XUMCD[TS0UWIXM]; /* unit of measure*/

  if (TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] != 0
   && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] != 0)
    VCPLHDJ4.OP-CUST-ORD-ID = TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM];
    VCPLHDJ4.OP-NIKE-ORD-ID = TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM];
    VCPLHDJ4.OP-ORD-PART-CHAR = TS0UW03.TS0UW-ORD-PART-CHAR[TS0UWIXM];
  else
    VCPLHDJ4.OP-CUST-ORD-ID = 0;
    VCPLHDJ4.OP-NIKE-ORD-ID = 0;
    VCPLHDJ4.OP-ORD-PART-CHAR = " ";
  end

  call "VCPLHDJ4" ("S3", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0U481"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U481"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U481"; /* Process name*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0U481 ***********************/
end // end TS0U481

// Fetch  (N3) Next row  VCPLHDJ4
Function TS0U482()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("N3", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0UW01.TS0UWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UW01.TS0UWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0U482"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0UM001.XXXPRCNM = "TS0U482"; /* Process name*/

    else

      if (VCPLHDJ4.TS-CPL-STAT-CD == "IT"
       || VCPLHDJ4.TS-CPL-STAT-CD == "CC"
       || VCPLHDJ4.TS-CPL-STAT-CD == "IP")


        if (VCPLHDJ4.TS-CPL-STAT-CD == "IP") /* If the record is in-process*/

          if (VCPLHDJ4.TS-NIKE-SHP-ID == TS0UM001.TSFSHPID)
            TS0UW01.TS0UWPLQ = TS0UW01.TS0UWPLQ + VCPLHDJ4.TS-PL-QTOT-SHP;
          end

        else

          TS0UW01.TS0UWPLQ = TS0UW01.TS0UWPLQ + VCPLHDJ4.TS-PL-QTOT-SHP;

        end
      end

    end
  end


end // end TS0U482

// Close  (C3) Set       VCPLHDJ4
Function TS0U483()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("C3", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0U483"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U483"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U483"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0U483

// Select (S8) Set       VFYPO001
Function TS0U484()
   /* ------------------------------------------------------------*/

                 /* SELECT SET OF RECEIPT ROWS*/

    /* 1) Select the set of receipt rows.*/

   /* ------------------------------------------------------------*/

  set PCMREC empty;

  PCMREC.XWHCD = TSWREC.XWHCD; /* warehouse*/
  PCMREC.YMTCD = "*"; /* mode code*/
  PCMREC.XGPCD = TSWREC.XGPCD; /* product code*/
  PCMREC.PC3PONBR = TS0UW03.PC3PONBR[TS0UWIXM]; /* po number*/
  PCMREC.PC2CUXID = TS0UW03.PC2CUXID[TS0UWIXM]; /* cust xref*/
  PCMREC.SY1STNBR = TS0UW03.SY1STNBR[TS0UWIXM]; /* style number*/
  PCMREC.SY2CLRID = TS0UW03.SY2CLRID[TS0UWIXM]; /* color number*/
  PCMREC.XDMCD = TS0UW03.XDMCD[TS0UWIXM]; /* dimension code*/
   /* MOVE TS0UW03.XQACD(TS0UWIXM) TO PCMREC.XQACD;*/
  PCMREC.XQACD = "*"; /* wildcard quality code*/
  PCMREC.PC2INSEG = "*"; /* wildcard iseg*/
  PCMREC.XOWCD = TS0UW03.XOWCD[TS0UWIXM]; /* owner group*/
  PCMREC.XPGCD = TS0UW03.XPGCD[TS0UWIXM]; /* spec difference*/
  PCMREC.XUMCD = TS0UW03.XUMCD[TS0UWIXM]; /* unit of measure*/
  if (TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM] != 0
   && TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM] != 0)
    PCMREC.OP1CUOID = TS0UW03.TS0UM-CUST-ORD-ID[TS0UWIXM];
    PCMREC.OP1NORID = TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWIXM];
    PCMREC.OP1PARTN = TS0UW03.TS0UW-ORD-PART-CHAR[TS0UWIXM];
  else
    PCMREC.OP1CUOID = 0;
    PCMREC.OP1NORID = 0;
    PCMREC.OP1PARTN = " ";
  end

  call "IO3680" ("S8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0U484"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/
    TA1REC.TA1TBLKE = PCMREC.PCMKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U484"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U484"; /* Process name*/

  end

end // end TS0U484

// Fetch  (N8) Next row  VFYPO001
Function TS0U485()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VFYPO001*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("N8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0UW01.TS0UWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/
      TS0UW01.TS0UWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0U485"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0UM001.XXXPRCNM = "TS0U485"; /* Process name*/

    else

      TS0UW01.TS0UWWK2 = 1; /* initialize index*/
      while (TS0UW01.TS0UWWK2 <= 40) /* until end of array*/
        TS0UW01.TS0UWRCQ = TS0UW01.TS0UWRCQ + PCMREC.PCMRCPTQ[TS0UWWK2];
        TS0UW01.TS0UWWK2 = TS0UW01.TS0UWWK2 + 1;
      end

    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0U485 ***********************/
end // end TS0U485

// Close  (C8) Set       VFYPO001
Function TS0U486()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("C8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0U486"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U486"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0U486"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/


  end


   /* **                                                        ***/
   /* ********************** End of TS0U486 ***********************/
end // end TS0U486

// Process valid input request
Function TS0U500()
   /* ------------------------------------------------------------*/

            /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If no errors were found.*/
      /* a) If PF8 of ENTER is pressed.*/
         /* - if screen is full - move screen data to working*/
           /* storage.*/
         /* - if screen is partially full - move screen data*/
           /* to working storage and perform updates*/
         /* - if no detail entered - perform updates and*/
           /* transfer to TS0I or TS0V if option equals to 1*/
           /* or 2 respectively.*/
      /* a) If PF7 is pressed.*/
         /* - move screen data to working storage.*/

   /* ------------------------------------------------------------*/

  if (TS0UW01.TS0UWPSW == "N") /* if no errors have occurred*/

    TS0UW01.TS0UWPWF = "N"; /* Reset po quantity warning flag*/

    if (converseVar.eventKey is pf10) /* or pf10 was pressed*/
      TS0UW-MAP-INDICATOR = "1";
      return;
    end

    if (converseVar.eventKey is pf11) /* or pf11 was pressed*/
      TS0UW-MAP-INDICATOR = "2";
      return;
    end

    if (TS0UW01.TS0UWNSF == "Y") /* if negative SQL flag is yes*/
      TS0UW01.TS0UWNSF = "N"; /* reset neg sql flag*/
      TS0U510(); /* perform the updates again*/
      if (TS0UW01.TS0UWNSF == "N" /* if no problems with updates*/
       && TS0UW01.TS0UWPSW == "N") /* and no other problems*/
        TS0U-51400(); /* ===> Clear Header Fields*/
      end
    else
      if (converseVar.eventKey is enter /* enter was pressed*/
       || converseVar.eventKey is pf8)  /* or pf8 was pressed*/
        if (TS0UW03.PC3PONBR[13] > 0 /* if last detail line contains data*/
         || TS0UW03.TS0UM-CUST-ORD-ID[13] > 0) /**/
          TS0U520(); /* move screen data to working storage*/
        else

          /* **************************************************/
              /* Check to see if all detail lines are empty*/
          /* **************************************************/

          TS0UW01.TS0UWDEF = "N"; /* initialize data entered flag*/
          TS0UW01.TS0UWIXM = 1; /* set index to 1*/
          while (TS0UW01.TS0UWIXM <= 13) /* until end of detail lines*/
            if (TS0UM002.XOWCD[TS0UWIXM] == " " /* if detail line blank*/
             && TS0UM002.XUMCD[TS0UWIXM] == " " 
             && TS0UM002.XPGCD[TS0UWIXM] == " " 
             && TS0UM002.XQACD[TS0UWIXM] == " " 
             && TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] == 0
             && TS0UM001.XDMCD[TS0UWIXM] == " " 
             && TS0UM001.TS0UMKG[TS0UWIXM] == 0 
             && TS0UM001.TS0UMCBM[TS0UWIXM] == 0
             && TS0UM001.TS0UMCRT[TS0UWIXM] == 0
             && TS0UM001.TS0UMSHP[TS0UWIXM] == 0
             && TS0UM001.PC3PONBR[TS0UWIXM] == 0
             && TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM] == 0
             && TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM] == 0
             && TS0UM001.TS0UMPOI[TS0UWIXM] == " "
             && TS0UM001.PC4ORTYP[TS0UWIXM] == " "
             && TS0UM001.PC2CUXID[TS0UWIXM] == " "
             && TS0UM001.SY1STNBR[TS0UWIXM] == " "
             && TS0UM001.SY2CLRID[TS0UWIXM] == " ")

               /* ========= Next Sentence ========>*/

            else
              TS0UW01.TS0UWDEF = "Y"; /* set data entered flag*/
              TS0UW01.TS0UWIXM = 14; /* end loop*/
            end
            TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment index*/
          end
          if (TS0UW01.TS0UWDEF == "Y") /* if detail is partly full*/
            TS0U520(); /* move screen detail to ws*/
            TS0U510(); /* perform updates*/
            if (TS0UW01.TS0UWNSF == "N" /* if no problems with updates*/
             && TS0UW01.TS0UWPSW == "N") /* and no other problems*/
              TS0U-51400(); /* ===> Clear Header Fields*/
              if (TSWREC.TSWDOMFL == "Y") /* If this is a domestic shpmnt*/
                TS0U530(); /* transfer to appropriate appl*/
              end
            end
          else
            TS0U510(); /* perform updates*/
            if (TS0UW01.TS0UWNSF == "N" /* if no problems with updates*/
             && TS0UW01.TS0UWPSW == "N") /* and no other problems*/
              if (TSWREC.TSWCPLFL == "Y") /* if a cpl has been added*/
                if (TS0UM001.TSHCNTNR == " " /* if header fields empty*/
                 && TS0UM001.YCNCD == " "    
                 && TS0UM001.TSHTCBM == 0    
                 && TS0UM001.TSHTKG == 0     
                 && TS0UM001.TSHSEAL == " ")
                  TS0U530(); /* transfer to appropriate appl*/
                else
                  TS0U-51400(); /* ===> Clear Header Fields*/
                  if (TSWREC.TSWDOMFL == "Y")
                                   /* If this is a domestic shpmnt*/
                    TS0U530(); /* transfer to appr appl*/
                  end
                end
              else
                TS0UW01.TS0UWFFL = "N"; /* reset first time thru flag*/
                TS0UW01.TS0UWPSW = "Y"; /* indicate error*/
                if (TS0UM001.TSHCNTNR != " ") /* if container not entered*/
                  set TS0UM001.PC3PONBR[1] cursor; /* set cursor on po*/
                else
                  set TS0UM001.TSHCNTNR cursor; /* set cursor on po*/
                end
                TS0UM001.XXXPRCNM = "TS0U500"; /* process name*/
                TS0UM002.XXXPRCNM = "TS0U500"; /* process name*/
                converseLib.validationFailed(135); /* must enter at least one cpl*/
              end
            end
          end
        end
      else
        if (converseVar.eventKey is pf7) /* if pf7 was pressed*/
          TS0U520(); /* move screen data to ws*/
        end
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0U500 ***********************/
end // end TS0U500

// Perform updates
Function TS0U510()
   /* ------------------------------------------------------------*/

                  /* PERFORM UPDATES*/

       /* 1) If the container has not already been added*/
          /* a. add the container*/
          /* b. if the add is successful*/
             /* - commit*/
             /* - select the maximum Nike packing list number*/
               /* for this shipment id.*/
             /* - if the select in successful, add 1 to the*/
               /* packing list number and add the packing lists.*/
       /* 2) If the container has already been added, then add*/
          /* the packing lists.*/

   /* ------------------------------------------------------------*/

  if (TS0UW02.PC3PONBR[1] > 0 /* if some packing lists exist*/
   || TS0UW02.TS0UM-CUST-ORD-ID[1] > 0) /* if some packing lists exist*/
    /* ***********************************************************/
     /* For domestic shipments determine the orig location*/
     /* by using the first entered po factory.*/

    if (TSWREC.TSEORIG == "  ") /* If no origin location specified*/
      FY1REC.XGPCD = TSWREC.XGPCD; /* Move in keys*/
      FY1REC.FY1FCTYC = TS0UW02.TS0UWFCT[1];
      TS0US05();
      if (SQLCA.VAGen_SQLCODE == 0)
        TSWREC.TSEORIG = FY1REC.TSCLOCCD; /* save orig cd*/
      end
    end
    /* ***********************************************************/
    if (TS0UW01.TS0UWCAF == "N") /* if the container has not been added*/
      TS0U511(); /* add the container*/
      if (SQLCA.VAGen_SQLCODE == 0) /* if container add was sucessful*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the container add*/
        TSWREC.TSWCNTFL = "Y"; /* set passed container addflag 'y'*/
        TS0U512(); /* select the max Nike packing list #*/
        if (SQLCA.VAGen_SQLCODE == -305) /* if null value returned*/
          TS0UW01.TS0UWPCK = 1;
                                   /* move 0 to packing list counter*/
          TS0U513(); /* add packing lists*/
        else
          if (SQLCA.VAGen_SQLCODE == 0) /* if select of pl number successful*/
            TS0UW01.TS0UWPCK = TSGREC.TSGMAXNB + 1;
                                   /* incrmnt max pl number*/
            TS0U513(); /* add packing lists*/
          end
        end
        if (TS0UW01.TS0UWNSF == "N") /* if no neg sql return codes*/
          TS0UW01.TS0UWCTR = TS0UW01.TS0UWCTR + 1;
                                   /* increment cntnr counter*/
        end
      end
    else
      TS0U513(); /* add packing lists*/
    end
  else
    TS0UW01.TS0UWPGE = 1; /* reset the map page*/
  end


end // end TS0U510

// Add container row
Function TS0U511()
   /* ------------------------------------------------------------*/

                    /* ADD CONTAINER ROW*/

    /* 1) Move in appropriate fields to TSHREC*/
    /* 2) Add the container row*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* initialize tshrec*/

  TSHREC.TSHNKCN = TS0UW01.TS0UWCTR; /* Nike container number*/
  TSHREC.TSFSHPID = TS0UM001.TSFSHPID; /* Nike shipment number*/
  TSHREC.TSHCNTNR = TS0UM001.TSHCNTNR; /* container number*/
  TSHREC.YCNCD = TS0UM001.YCNCD; /* container type*/
  TSHREC.TSHSTAT = "IP"; /* container status*/
  TSHREC.TSHTCBM = TS0UM001.TSHTCBM; /* total cubic meters*/
  TSHREC.TSHTKG = TS0UM001.TSHTKG; /* total kilograms*/
  TSHREC.TSHSEAL = TS0UM001.TSHSEAL; /* seal*/
  TSHREC.TSHRCTDT = 0; /* container receipt date*/
  TSHREC.SL1RCRNO = 0; /* RCV report number*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSHREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move in set up date*/
  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
  TSHREC.ZZZCHGCT = 0; /* initialize change count*/
  TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;

  call "IO2590" ("A ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* Set negative SQL flag 'y'*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0U511"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U511"; /* Process name*/
  end


end // end TS0U511

// Select max Nike pl number
Function TS0U512()
   /* ------------------------------------------------------------*/

             /* SELECT MAX NIKE PACKING LIST NUMBER*/

   /* 1) Select the maximum Nike packing list number from VCPLHD04*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in key*/

  TSGREC.TSNFNC = "SM"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == -305) /* of null value returned*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set negative SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0U512"; /* Process name*/
    TA1REC.TA1LOC = "SELECT MAX TABLE PL ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0U512"; /* Process name*/
  end


end // end TS0U512

// Add packing lists
Function TS0U513()
   /* ------------------------------------------------------------*/

                   /* ADD PACKING LISTS*/

      /* 1) Initialize fields*/
      /* 2) If the packing list has already been added - skip*/
      /* 3) If the packing list has not been added*/
         /* a. If the add po style flag has been set then add*/
            /* the style   ***** to production database ******/
         /* b. If the po not updated in add po style then update*/
            /* the po      ***** to production database ******/
         /* c. If packing lists have not reached the maximum -*/
            /* perform the packing list updates process*/
         /* d. If all goes well then commit the updates*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWTIX = 1; /* initialize table index*/
  TS0UW01.TS0UWMPX = 1; /* initialize map position index*/

  while (TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX) /* while less than max*/

    if (TS0UW02.PC3PONBR[TS0UWTIX] > 0 /* and po exists*/
     || TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] > 0) /* and so*/

      if (TS0UW02.TS0UWPAF[TS0UWTIX] == "Y") /* if pl added is yes*/
        /* next sentence*/
      else

        if (TS0UW02.TS0UWAPS[TS0UWTIX] == "Y" /* if add po style flag is yes*/
         && TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX) /* and less than max*/
          TS0US50(); /* add po style*/
        end

        if (TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX /* less than max*/
         && TS0UW01.TS0UWNSF == "N")             /* and no neg sql flag*/
          /* ******* and not updated in add po style ********/
          TS0US55(); /* update po*/
        end

        if (TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX /* less than max*/
         && TS0UW01.TS0UWNSF == "N")             /* and no neg sql flag*/
          TS0US60(); /* packing list updates*/
        end

        if (TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX /* less than max*/
         && TS0UW01.TS0UWNSF == "N")             /* and no neg sql flag*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* commit all updates*/
          TSWREC.TSWCPLFL = "Y"; /* move y to packing list exists*/
          TS0UW02.TS0UWPAF[TS0UWTIX] = "Y"; /* pl added flag*/
        else
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* reset all updates*/
        end

      end

    end

    TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX + 1; /* increment table index*/
  end
  TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX - 1; /* reset table index*/

  if (TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX /* if less than max lines*/
   && TS0UW01.TS0UWNSF == "N")             /* and all updates successful*/
    TS0UW01.TS0UWNSF = "N"; /* reset neg SQL flag*/
    TS0UW01.TS0UWCAF = "N"; /* reset container added flag*/
    set TS0UW02 empty; /* clear table record*/
    set TS0UW03 empty; /* clear screen record*/
    TS0UW01.TS0UWTIX = 1; /* reset table index*/
    TS0UW01.TS0UWMPX = 1; /* reset map position index*/
    TS0UW01.TS0UWPGE = 0; /* reset map page*/
  end


end // end TS0U513

// Move to working storage
Function TS0U520()
   /* ------------------------------------------------------------*/

                  /* MOVE TO WORKING STORAGE*/

       /* This process will move the screen data that was*/
       /* cascaded into working storage into the data base*/
       /* update working storage record in compressed form.*/
       /* It will also take care of any detail line deletions*/
       /* which the user may do when scrolling backwards to*/
       /* maintain the compressed status of the data base update*/
       /* working storage record.*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWFFL = "N"; /* move 'n' to first time thru flag*/
  TS0UW01.TS0UWMPX = TS0UW01.TS0UWTIX; /* set map position index*/
  TS0UW01.TS0UWMIX = 1; /* initialize map index*/

  while (TS0UW01.TS0UWMIX <= 13 /* until end of detail lines*/
   && TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX) /* and not over max index*/

    if (TS0UW03.PC3PONBR[TS0UWMIX] > 0 /* if P.O. exists*/
     || TS0UW03.TS0UM-CUST-ORD-ID[TS0UWMIX] > 0)

      TS0UW02.PC3PONBR[TS0UWTIX] = TS0UW03.PC3PONBR[TS0UWMIX];
      TS0UW02.TS0UMPOI[TS0UWTIX] = TS0UW03.TS0UMPOI[TS0UWMIX];
      TS0UW02.PC4ORTYP[TS0UWTIX] = TS0UW03.PC4ORTYP[TS0UWMIX];
      TS0UW02.PC2CUXID[TS0UWTIX] = TS0UW03.PC2CUXID[TS0UWMIX];
      TS0UW02.SY1STNBR[TS0UWTIX] = TS0UW03.SY1STNBR[TS0UWMIX];
      TS0UW02.SY2CLRID[TS0UWTIX] = TS0UW03.SY2CLRID[TS0UWMIX];
      TS0UW02.TS0UMSHP[TS0UWTIX] = TS0UW03.TS0UMSHP[TS0UWMIX];
      TS0UW02.TS0UMCRT[TS0UWTIX] = TS0UW03.TS0UMCRT[TS0UWMIX];
      TS0UW02.TS0UMCBM[TS0UWTIX] = TS0UW03.TS0UMCBM[TS0UWMIX];
      TS0UW02.TS0UMKG[TS0UWTIX] = TS0UW03.TS0UMKG[TS0UWMIX];
      TS0UW02.XDMCD[TS0UWTIX] = TS0UW03.XDMCD[TS0UWMIX];
      TS0UW02.PC-ITM-SEQ-NBR[TS0UWTIX] = TS0UW03.PC-ITM-SEQ-NBR[TS0UWMIX];
      TS0UW02.TS-SHP-LEG-NBR[TS0UWTIX] = TS0UW03.TS-SHP-LEG-NBR[TS0UWMIX];
      TS0UW02.XQACD[TS0UWTIX] = TS0UW03.XQACD[TS0UWMIX];
      TS0UW02.XPGCD[TS0UWTIX] = TS0UW03.XPGCD[TS0UWMIX];
      TS0UW02.XUMCD[TS0UWTIX] = TS0UW03.XUMCD[TS0UWMIX];
      TS0UW02.XOWCD[TS0UWTIX] = TS0UW03.XOWCD[TS0UWMIX];
      TS0UW02.TSISTAT[TS0UWTIX] = TS0UW03.TSISTAT[TS0UWMIX];
      TS0UW02.XRECD[TS0UWTIX] = TS0UW03.XRECD[TS0UWMIX];
      TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] = TS0UW03.TS0UM-CUST-ORD-ID[TS0UWMIX];
      TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWTIX] = TS0UW03.TS0UM-NIKE-ORD-ID[TS0UWMIX];
      TS0UW02.TS0UW-PO-SZ-CNT[TS0UWTIX] = TS0UW03.TS0UW-PO-SZ-CNT[TS0UWMIX];
      TS0UW02.TS0UW-SAVE-SIZE[TS0UWTIX] = TS0UW03.TS0UW-SAVE-SIZE[TS0UWMIX];
      TS0UW02.TS0UWPAF[TS0UWTIX] = "N";
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX + 1; /* increment index*/
    end
    TS0UW01.TS0UWMIX = TS0UW01.TS0UWMIX + 1; /* increment index*/
  end



  TS0UW01.TS0UWCOM = TS0UW01.TS0UWMPX + 13; /* set one page forward*/
  if (TS0UW01.TS0UWTIX < TS0UW01.TS0UWCOM  /* if table ind LT compress ind*/
   && TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX /* and not over max index*/
   && TS0UW01.TS0UWCOM <= TS0UW01.TS0UWMAX)

    TS0UW01.TS0UWIXM = TS0UW01.TS0UWTIX; /* save table index*/

    /* *************************************************************/
      /* Compress working storage if blank lines in screen working*/
      /* storage.*/
    /* *************************************************************/

    TS0UW01.TS0UWEFL = "N"; /* ===> EXIT LOOP*/

    while (TS0UW01.TS0UWTIX <= TS0UW01.TS0UWMAX /* while table ind LE max*/
     && TS0UW01.TS0UWEFL == "N") /* ===> EXIT LOOP*/

      if (TS0UW02.PC3PONBR[TS0UWCOM] > 0 /* and po exists*/
       || TS0UW02.TS0UM-CUST-ORD-ID[TS0UWCOM] > 0)

        TS0UW02.PC3PONBR[TS0UWTIX] = TS0UW02.PC3PONBR[TS0UWCOM];
        TS0UW02.TS0UMPOI[TS0UWTIX] = TS0UW02.TS0UMPOI[TS0UWCOM];
        TS0UW02.PC4ORTYP[TS0UWTIX] = TS0UW02.PC4ORTYP[TS0UWCOM];
        TS0UW02.PC2CUXID[TS0UWTIX] = TS0UW02.PC2CUXID[TS0UWCOM];
        TS0UW02.SY1STNBR[TS0UWTIX] = TS0UW02.SY1STNBR[TS0UWCOM];
        TS0UW02.SY2CLRID[TS0UWTIX] = TS0UW02.SY2CLRID[TS0UWCOM];
        TS0UW02.TS0UMSHP[TS0UWTIX] = TS0UW02.TS0UMSHP[TS0UWCOM];
        TS0UW02.TS0UMCRT[TS0UWTIX] = TS0UW02.TS0UMCRT[TS0UWCOM];
        TS0UW02.TS0UMCBM[TS0UWTIX] = TS0UW02.TS0UMCBM[TS0UWCOM];
        TS0UW02.TS0UMKG[TS0UWTIX] = TS0UW02.TS0UMKG[TS0UWCOM];
        TS0UW02.XDMCD[TS0UWTIX] = TS0UW02.XDMCD[TS0UWCOM];
        TS0UW02.PC-ITM-SEQ-NBR[TS0UWTIX] = TS0UW02.PC-ITM-SEQ-NBR[TS0UWCOM];
        TS0UW02.TS-SHP-LEG-NBR[TS0UWTIX] = TS0UW02.TS-SHP-LEG-NBR[TS0UWCOM];
        TS0UW02.XQACD[TS0UWTIX] = TS0UW02.XQACD[TS0UWCOM];
        TS0UW02.XPGCD[TS0UWTIX] = TS0UW02.XPGCD[TS0UWCOM];
        TS0UW02.XUMCD[TS0UWTIX] = TS0UW02.XUMCD[TS0UWCOM];
        TS0UW02.XOWCD[TS0UWTIX] = TS0UW02.XOWCD[TS0UWCOM];
        TS0UW02.TSISTAT[TS0UWTIX] = TS0UW02.TSISTAT[TS0UWCOM];
        TS0UW02.XRECD[TS0UWTIX] = TS0UW02.XRECD[TS0UWCOM];
        TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] = TS0UW02.TS0UM-CUST-ORD-ID[TS0UWCOM];
        TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWTIX] = TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWCOM];

      else
        TS0UW01.TS0UWEFL = "Y"; /* ===> EXIT LOOP*/
      end

      TS0UW01.TS0UWCOM = TS0UW01.TS0UWCOM + 1; /* increment compress index*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX + 1; /* increment table index*/

    end

    /* *************************************************************/
      /* Initialize lines at end of working storage table that have*/
      /* already been moved up.*/
    /* *************************************************************/

    TS0UW01.TS0UWEFL = "N"; /* ===> EXIT LOOP*/

    while (TS0UW01.TS0UWTIX < TS0UW01.TS0UWCOM /* while tbl ind LT compr*/
     && TS0UW01.TS0UWEFL == "N") /* ===> EXIT LOOP*/

      if (TS0UW02.PC3PONBR[TS0UWTIX] > 0 /* and po exists*/
       || TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] > 0)

        TS0UW02.PC3PONBR[TS0UWTIX] = 0;
        TS0UW02.TS0UMPOI[TS0UWTIX] = " ";
        TS0UW02.PC4ORTYP[TS0UWTIX] = " ";
        TS0UW02.PC2CUXID[TS0UWTIX] = " ";
        TS0UW02.SY1STNBR[TS0UWTIX] = " ";
        TS0UW02.SY2CLRID[TS0UWTIX] = " ";
        TS0UW02.TS0UMSHP[TS0UWTIX] = 0;
        TS0UW02.TS0UMCRT[TS0UWTIX] = 0;
        TS0UW02.TS0UMCBM[TS0UWTIX] = 0;
        TS0UW02.TS0UMKG[TS0UWTIX] = 0;
        TS0UW02.XDMCD[TS0UWTIX] = " ";
        TS0UW02.PC-ITM-SEQ-NBR[TS0UWTIX] = 0;
        TS0UW02.TS-SHP-LEG-NBR[TS0UWTIX] = 0;
        TS0UW02.XQACD[TS0UWTIX] = " ";
        TS0UW02.XPGCD[TS0UWTIX] = " ";
        TS0UW02.XUMCD[TS0UWTIX] = " ";
        TS0UW02.XOWCD[TS0UWTIX] = " ";
        TS0UW02.TSISTAT[TS0UWTIX] = "  ";
        TS0UW02.XRECD[TS0UWTIX] = "  ";
        TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] = 0;
        TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWTIX] = 0;

      else
        TS0UW01.TS0UWEFL = "Y"; /* ===> EXIT LOOP*/
      end

      TS0UW01.TS0UWTIX = TS0UW01.TS0UWTIX + 1; /* increment table index*/
      TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment save index*/

    end

    TS0UW01.TS0UWTIX = TS0UW01.TS0UWIXM; /* restore table index*/

  end


end // end TS0U520

// Transfer to appropriate appl
Function TS0U530()
   /* ------------------------------------------------------------*/

            /* TRANSFER TO APPROPRIATE APPLICATION*/

   /* 1) If add menu option was 1, then transfer back to TS0I*/
   /* 2) If add menu option was 2, then transfer to TS0V*/

   /* ------------------------------------------------------------*/

  if (TSWREC.TSWADDMO == "1") /* if shipment add option 1*/
    COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
    XSTSS01(); /* transfer to application*/
    TS0UW01.TS0UWPSW = "Y"; /* indicate error*/
    TS0UM001.XXXPRCNM = "TS0U530"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  else
    if (TSWREC.TSWADDMO == "2") /* if shipment add option 2*/
      COMMAREA.CATOAP = "TS0V"; /* Set to TS0V menu*/
      COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
      XSTSS01(); /* transfer to application*/
      TS0UW01.TS0UWPSW = "Y"; /* indicate error*/
      TS0UM001.XXXPRCNM = "TS0U530"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end
end // end TS0U530

// Populate seq nbr from long key
Function TS0U550()
   /* ------------------------------------------------------------*/

         /* Populate item sequence number from long key*/

   /* Find the corresponding PO item sequence number from the long*/
   /* key entered.*/

   /* ------------------------------------------------------------*/

  WTS4001.IO-TASK = "L1";
  if (TS0UM001.XGPCD == " ")
    WTS4001.XGP-GPC-CD = TS0UM002.XGPCD;
  else
    WTS4001.XGP-GPC-CD = TS0UM001.XGPCD;
  end
  if (TS0UM001.PC3PONBR[TS0UWIXM] == 0)
    WTS4001.PC-PO-NBR = TS0UM002.PC3PONBR[TS0UWIXM];
  else
    WTS4001.PC-PO-NBR = TS0UM001.PC3PONBR[TS0UWIXM];
  end
  WTS4001.PC-ITM-SEQ-NBR = 0;
  if (TS0UM001.SY1STNBR[TS0UWIXM] == " ")
    WTS4001.SY-STY-NBR = TS0UM002.SY1STNBR[TS0UWIXM];
  else
    WTS4001.SY-STY-NBR = TS0UM001.SY1STNBR[TS0UWIXM];
  end
  if (TS0UM001.SY2CLRID[TS0UWIXM] == " ")
    WTS4001.SY-COLR-CD-ID = TS0UM002.SY2CLRID[TS0UWIXM];
  else
    WTS4001.SY-COLR-CD-ID = TS0UM001.SY2CLRID[TS0UWIXM];
  end
  if (TS0UM001.XDMCD[TS0UWIXM] == " ")
    WTS4001.XDM-DIM-CD = "*";
  else
    WTS4001.XDM-DIM-CD = TS0UM001.XDMCD[TS0UWIXM];
  end
  WTS4001.XWH-WHSE-CD = TS0UM001.XWHCD;
  if (TS0UM002.XQACD[TS0UWIXM] == " ")
    WTS4001.XQA-QUAL-CD = "*";
  else
    WTS4001.XQA-QUAL-CD = TS0UM002.XQACD[TS0UWIXM];
  end
  if (TS0UM002.XUMCD[TS0UWIXM] == " ")
    WTS4001.XUM-UOM-CD = "*";
  else
    WTS4001.XUM-UOM-CD = TS0UM002.XUMCD[TS0UWIXM];
  end
  if (TS0UM002.XOWCD[TS0UWIXM] == " ")
    WTS4001.XOW-OWN-GRP-CD = "*";
  else
    WTS4001.XOW-OWN-GRP-CD = TS0UM002.XOWCD[TS0UWIXM];
  end
  WTS4001.PC-PRDCU-ID = TS0UM001.PC2CUXID[TS0UWIXM];
  WTS4001.OP-CUST-ORD-ID = TS0UM001.TS0UM-CUST-ORD-ID[TS0UWIXM];
  WTS4001.OP-NIKE-ORD-ID = TS0UM001.TS0UM-NIKE-ORD-ID[TS0UWIXM];
  if (TS0UM002.XPGCD[TS0UWIXM] == " ")
    WTS4001.XPG-PKG-TYP-CD = "*";
  else
    WTS4001.XPG-PKG-TYP-CD = TS0UM002.XPGCD[TS0UWIXM];
  end
  if (TSFREC.TSFDESTE == 0)
    WTS4001.TS-EST-DEST-DT = -1;
  else
    WTS4001.TS-EST-DEST-DT = TSFREC.TSFDESTE;
  end
  if (TS0UM002.TS0UMSHP[TS0UWIXM] == 0)
    if (TS0UM001.TS0UMSHP[TS0UWIXM] == 0)
      WTS4001.TS-CPL-QTOT-SHP = -1;
    else
      WTS4001.TS-CPL-QTOT-SHP = TS0UM001.TS0UMSHP[TS0UWIXM];
    end
  else
    WTS4001.TS-CPL-QTOT-SHP = TS0UM002.TS0UMSHP[TS0UWIXM];
  end
  WTS4001.IO-RETURN-CODE = "00";
  TS0US51();
  if (WTS4001.IO-RETURN-CODE == "00")
    TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] = WTS4001.PC-ITM-SEQ-NBR;
  else
    TS0UM002.PC-ITM-SEQ-NBR[TS0UWIXM] = 0;
  end

end // end TS0U550

// Select row DTRANS.VTSTOL01
Function TS0US02()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the tstol table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO5020" ("S ", SQLCA, TSXREC) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US02"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTOL01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0UM001.XXXPRCNM = "TS0US02"; /* Process name*/

  end


end // end TS0US02

// Select the factory row
Function TS0US05()
   /* ------------------------------------------------------------*/

         /* SELECT THE FACTORY ROW FROM DFCTY.DFCTY001*/

   /* ------------------------------------------------------------*/


  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US05"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
    TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0UM001.XXXPRCNM = "TS0US05"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US05"; /* Process name*/
    TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0US05

// Select from DPRODC.VPOTYP01
Function TS0US06()
   /* ------------------------------------------------------------*/

         /* SELECT THE PO TYPE ROW FROM DPRODC.VPOTYP01*/

   /* ------------------------------------------------------------*/

  call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US06"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE PO TYPE TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0UM001.XXXPRCNM = "TS0US06"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US06"; /* Process name*/
    TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0US06

// Select set DPRODC.VPOVFY01
Function TS0US07()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VPOVFY01*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set PCFREC empty;
  PCFREC.PCFSECD = TS0UW01.TS0UWPYR;
  PCFREC.PCFBUYMO = -1;
  PCFREC.XXXSTAT = "*";

  call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US07"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US07"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US07"; /* Process name*/
    TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0US07

// Fetch row  DPRODC.VPOVFY01
Function TS0US08()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOVFY01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok or*/
   || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US08"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US08"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US08"; /* Process name*/

  end


end // end TS0US08

// Close set  DPRODC.VPOVFY01
Function TS0US09()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VPOVFY01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0US09"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US09"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US09"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0UW01.TS0UWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0US09

// Select from DPRODC.VPOHDR01
Function TS0US10()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/

      if (TS0UW03.PC3PONBR[TS0UWIXM] > 0 /* If po number entered*/
       && SQLCA.VAGen_SQLCODE == -811)   /* Multiple rows returned*/
         /* continue on*/
      else
        return; /* Return to previous process*/
      end

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0US10"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0UM001.XXXPRCNM = "TS0US10"; /* Process name*/
  TS0UM002.XXXPRCNM = "TS0US10"; /* Process name*/
  TS0UW01.TS0UWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0US10

// Select from DPRODC.VPOITM03
Function TS0US11()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the VPOITM03*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    else
       /* continue on*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0US11"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. ITEM ROW    ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0UM001.XXXPRCNM = "TS0US11"; /* Process name*/
  TS0UM002.XXXPRCNM = "TS0US11"; /* Process name*/
  TS0UW01.TS0UWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0US11

// Get consolidation flags
Function TS0US12()
   /* ------------------------------------------------------------*/
   /* This module gets the consolidation flags for the origin and*/
   /* discharge location codes.*/
   /* ------------------------------------------------------------*/

  set TSFREC empty;
  TSFREC.TSFSHPID = TSWREC.TSFSHPID;
  TS0US70();

  if (SQLCA.VAGen_SQLCODE == 0)
    set VTSLOC02 empty;
    VTSLOC02.TS-LOC-CD = TSFREC.TSEORIG;
    TS0US75();
    if (SQLCA.VAGen_SQLCODE == 0)
      TS0UW01.TS-ORIG-LOC-CNSLD-FL = VTSLOC02.TS-LOC-CNSLD-FL;
      TS0UW01.TS-ORIG-LOC-CD = VTSLOC02.TS-LOC-CD;
    else
      TS0UW01.TS-ORIG-LOC-CNSLD-FL = "N";
      TS0UW01.TS-ORIG-LOC-CD = " ";
    end
    set VTSLOC02 empty;
    VTSLOC02.TS-LOC-CD = TSFREC.TSFDSCHG;
    TS0US75();
    if (SQLCA.VAGen_SQLCODE == 0)
      TS0UW01.TS-DSCHG-LOC-CNSLD-FL = VTSLOC02.TS-LOC-CNSLD-FL;
      TS0UW01.TS-DSCHG-LOC-CD = VTSLOC02.TS-LOC-CD;
    else
      TS0UW01.TS-DSCHG-LOC-CNSLD-FL = "N";
      TS0UW01.TS-DSCHG-LOC-CD = " ";
    end
   /* *************************tcs changes begin here*********************/
   /* ***pgudip commenting this code...destination code can be directly***/
   /* ***moved instead of fetching from tsloc...the flag is not needed***/
   /* SET VTSLOC02 EMPTY;*/
   /*  */
   /* MOVE TSFREC.TSEDEST TO VTSLOC02.TS-LOC-CD;*/
   /* TS0US75;*/
   /* IF SQLCA.SQLCODE = 0;*/
   /* MOVE VTSLOC02.TS-LOC-CNSLD-FL TO TS0UW01.TS-DEST-LOC-CNSLD-FL;*/
   /* MOVE VTSLOC02.TS-LOC-CD TO TS0UW01.TS-DEST-LOC-CD;*/
   /* ELSE;*/
   /* MOVE 'N' TO TS0UW01.TS-DEST-LOC-CNSLD-FL;*/
   /* MOVE ' ' TO TS0UW01.TS-DEST-LOC-CD;*/
   /* END;*/
   /* ***pgudip commenting ends here...destination code can be directly***/
   /* ***moved instead of fetching from tsloc...the flag is not needed***/
   /* ***this is the line we are inserting............................***/
    TS0UW01.TS-DEST-LOC-CD = TSFREC.TSEDEST;
   /* *************************tcs changes end ***************************/
  end


end // end TS0US12

// Select (SB) Set       VCPLHD04
Function TS0US15()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "SB"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US15"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US15"; /* Process name*/
  end


end // end TS0US15

// Fetch  (NB) Next row  VCPLHD04
Function TS0US20()
   /* ------------------------------------------------------------*/

                 /* FETCH PACKING LIST ROW*/

    /* 1) Fetch the packing list row.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "NB"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      TS0UW01.TS0UWSWC = "Y"; /* set oen of set switch*/
    else
      if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
       || SQLCA.VAGen_SQLCODE == -904)
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0US20"; /* Process name*/
      TA1REC.TA1LOC = "FETCH THE TABLE ROW";
      TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0UM001.XXXPRCNM = "TS0US20"; /* Process name*/
      TS0UM002.XXXPRCNM = "TS0US20"; /* Process name*/

    end
  end


end // end TS0US20

// Add packing list row VCPLHD04
Function TS0US25()
   /* ------------------------------------------------------------*/

                   /* ADD PACKING LIST ROW*/

    /* 1) Move in all fields to VCPLHD04.*/
    /* 2) Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

  set VCPLHD04 empty; /* initialize record*/

  VCPLHD04.TS-NIKE-SHP-ID = TS0UM001.TSFSHPID; /* shipment number*/
  VCPLHD04.TS-NIKE-PL-NBR = TS0UW01.TS0UWPCK; /* Nike pl number*/
  VCPLHD04.PC-PO-NBR = TS0UW02.PC3PONBR[TS0UWTIX]; /* po number*/
  VCPLHD04.PC-ITM-SEQ-NBR = TS0UW02.PC-ITM-SEQ-NBR[TS0UWTIX]; /* po item sequence number*/
  VCPLHD04.FY-FCTY-CD = TS0UW02.TS0UWFCT[TS0UWTIX]; /* factory code*/
  VCPLHD04.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VPRDCU03.XGPCD = TSWREC.XGPCD; /* product code*/
  VCPLHD04.PC-PRDCU-ID = TS0UW02.PC2CUXID[TS0UWTIX];
  VPRDCU03.PC2CUXID = TS0UW02.PC2CUXID[TS0UWTIX];
  VCPLHD04.SY-STY-NBR = TS0UW02.SY1STNBR[TS0UWTIX]; /* style number*/
  VCPLHD04.SY-COLR-CD-ID = TS0UW02.SY2CLRID[TS0UWTIX]; /* color*/
  VCPLHD04.XDM-DIM-CD = TS0UW02.XDMCD[TS0UWTIX]; /* dimension code*/
  VCPLHD04.XQA-QUAL-CD = TS0UW02.XQACD[TS0UWTIX]; /* quality code*/
  VCPLHD04.XOW-OWN-GRP-CD = TS0UW02.XOWCD[TS0UWTIX]; /* owner group*/
  TS0US63();
  VCPLHD04.PC-CU-IN-SEG-CD = VPRDCU03.PC2INSEG;
  VCPLHD04.XPG-PKG-TYP-CD = TS0UW02.XPGCD[TS0UWTIX];
  VCPLHD04.XUM-UOM-CD = TS0UW02.XUMCD[TS0UWTIX]; /* unit of measure*/
  VCPLHD04.OP-CUST-ORD-ID = TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX];
  VCPLHD04.OP-NIKE-ORD-ID = TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWTIX];
  if (TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] > 0)
    VCPLHD04.OP-ORD-PART-CHAR = TS0UW02.TS0UW-ORD-PART-CHAR[TS0UWTIX];
  else
    VCPLHD04.OP-ORD-PART-CHAR = " ";
  end
  VCPLHD04.TS-SHP-LEG-NBR = TS0UW02.TS-SHP-LEG-NBR[TS0UWTIX];
  VCPLHD04.TS-MUSICAL-STY-FL = "N"; /* musical style flag*/
  VCPLHD04.TS-MUSICAL-STY-GRP = " "; /* musical style group*/

  if (TS0UW02.TSISTAT[TS0UWTIX] == "  " /* If no other status set*/
   || TS0UW02.TSISTAT[TS0UWTIX] == "99") /* OR OK*/
    VCPLHD04.TS-CPL-STAT-CD = "IP";
                                   /* cpl status flag indicating in-process*/
  else
    VCPLHD04.TS-CPL-STAT-CD = TS0UW02.TSISTAT[TS0UWTIX];
  end

  if (TS0UW02.XRECD[TS0UWTIX] == "  " /* If no other exception*/
   || TS0UW02.XRECD[TS0UWTIX] == "99") /* OR OK*/
    VCPLHD04.XRE-RCPT-XCEP-CD = "  "; /* Set exception cd*/
  else
    VCPLHD04.XRE-RCPT-XCEP-CD = TS0UW02.XRECD[TS0UWTIX]; /* move exception cd*/
  end

  VCPLHD04.TS-PL-QTOT-SHP = TS0UW02.TS0UMSHP[TS0UWTIX];
  VCPLHD04.TS-PL-QTOT-RSRV = 0; /* quantity reserved*/
  VCPLHD04.TS-PL-QTOT-RCV = 0; /* quantity received*/
  VCPLHD04.TS-PL-TOT-CRTN = TS0UW02.TS0UMCRT[TS0UWTIX];
  VCPLHD04.TS-PL-TOT-CBM = TS0UW02.TS0UMCBM[TS0UWTIX];
  VCPLHD04.TS-PL-TOT-KG = TS0UW02.TS0UMKG[TS0UWTIX];
  VCPLHD04.TS-NIKE-CNTNR-NBR1 = TS0UW01.TS0UWCTR;
  VCPLHD04.TS-CPL-QTOT-SHP1 = TS0UW02.TS0UMSHP[TS0UWTIX];
  VCPLHD04.TS-CPL-QTOT-RSRV1 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV1 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN1 = TS0UW02.TS0UMCRT[TS0UWTIX];
                                   /* quantity cartons #1*/
  VCPLHD04.TS-CPL-TOT-CBM1 = TS0UW02.TS0UMCBM[TS0UWTIX];
  VCPLHD04.TS-CPL-TOT-KG1 = TS0UW02.TS0UMKG[TS0UWTIX];
  VCPLHD04.TS-LOCR = " "; /* letter of credit*/
  VCPLHD04.TS-FCTY-FILE-NBR = 0; /* factory file number*/
  VCPLHD04.TS-DET-FL = "N"; /* detail flag*/
  VCPLHD04.TS-TEXT1 = " "; /* comment line*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  VCPLHD04.ZZ-SDT = XX0XW01.XX0XWDAT; /* move in set up date*/
  VCPLHD04.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM; /* move in set up time*/
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/
  VCPLHD04.ZZ-CHNG-CNT = 0; /* initialize change count*/
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;

  TSGREC.TSNFNC = "A "; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0UW02.TS0UWPAF[TS0UWTIX] = "Y"; /* packing list added flag*/
    TS0UW01.TS0UWPCK = TS0UW01.TS0UWPCK + 1; /* increment pl counter*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US25"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US25"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US25"; /* Process name*/

  end



end // end TS0US25

// Check 8 cntnr span error
Function TS0US30()
   /* ------------------------------------------------------------*/

             /* CHECK FOR 8 CONTAINER SPAN ERRORS*/

       /* 1) Clear the save container arrays.*/
       /* 2) Save all the cpl container assignments into an*/
          /* array.*/
       /* 3) Record container numbers and check for any*/
          /* excessive container ouverlaps.*/
       /* 4) Fetch the next cpl record.*/

       /* ** If the number of unique containers is gt 8, then*/
          /* do not add this cpl and cycle to the next cpl.*/

   /* ------------------------------------------------------------*/

  TS0UW01.TS0UWIXM = 1; /* set index*/
  while (TS0UW01.TS0UWIXM <= TS0UW01.TS0UWMCN) /* le max cntnrs*/
    TS0UW01.TSHNKCN[TS0UWIXM] = 0; /* clear the arrays*/
    TS0UW01.TS0UWNCN[TS0UWIXM] = 0;
    TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment counter*/
  end

  TS0UW01.TS0UWSWC = "N"; /* set end set switch to no*/
  TS0UW01.TS0UWSPF = "N"; /* set span error flag to no*/
  while (TS0UW01.TS0UWSWC == "N" /* while rows exist to fetch*/
   && TS0UW01.TS0UWSPF == "N") /* and no span errors encountered*/
    /* --------------------------------------------------------*/
     /* Save all the cpl cntnr numbers into an array*/
    /* --------------------------------------------------------*/
    TS0UW01.TSHNKCN[1] = VCPLHD04.TS-NIKE-CNTNR-NBR1;
    TS0UW01.TSHNKCN[2] = VCPLHD04.TS-NIKE-CNTNR-NBR2;
    TS0UW01.TSHNKCN[3] = VCPLHD04.TS-NIKE-CNTNR-NBR3;
    TS0UW01.TSHNKCN[4] = VCPLHD04.TS-NIKE-CNTNR-NBR4;
    TS0UW01.TSHNKCN[5] = VCPLHD04.TS-NIKE-CNTNR-NBR5;
    TS0UW01.TSHNKCN[6] = VCPLHD04.TS-NIKE-CNTNR-NBR6;
    TS0UW01.TSHNKCN[7] = VCPLHD04.TS-NIKE-CNTNR-NBR7;
    TS0UW01.TSHNKCN[8] = VCPLHD04.TS-NIKE-CNTNR-NBR8;

    /* -----------------------------------------------------------*/
     /* Record cntnr numbers and check for excessive cntnr overlap*/
    /* -----------------------------------------------------------*/
    TS0UW01.TS0UWIXM = 1; /* set index*/
    while (TS0UW01.TS0UWSPF == "N" /* while no span errors encountered*/
     && TS0UW01.TSHNKCN[TS0UWIXM] > 0) /* and cntnrs exist*/
      TS0UW01.TS0UWIXW = 1; /* set index*/
      TS0UW01.TS0UWEFL = "N"; /* set endflag*/
      while (TS0UW01.TS0UWIXW <= TS0UW01.TS0UWMCN /* le max cntnrs*/
       && TS0UW01.TS0UWEFL == "N") /* and end flag not set*/
        if (TS0UW01.TS0UWNCN[TS0UWIXW] == TS0UW01.TSHNKCN[TS0UWIXM])
          TS0UW01.TS0UWEFL = "Y"; /* set endflag*/
        else
          if (TS0UW01.TS0UWNCN[TS0UWIXW] == 0) /* if empty*/
            TS0UW01.TS0UWNCN[TS0UWIXW] = TS0UW01.TSHNKCN[TS0UWIXM];
            TS0UW01.TS0UWEFL = "Y"; /* set endflag*/
          end
        end
        TS0UW01.TS0UWIXW = TS0UW01.TS0UWIXW + 1; /* increment counter*/
        TS0UW01.TS0UWWK1 = TS0UW01.TS0UWMCN + 1; /* set work value*/
        if (TS0UW01.TS0UWIXW == TS0UW01.TS0UWWK1) /* if over max*/
          TS0UW01.TS0UWSPF = "Y"; /* set span error flag*/
          converseLib.validationFailed(123); /* set span error message*/
          TS0UM001.XXXPRCNM = "TS0US30"; /* process name*/
          TS0UM002.XXXPRCNM = "TS0US30"; /* process name*/
        end
      end
      TS0UW01.TS0UWIXM = TS0UW01.TS0UWIXM + 1; /* increment counter*/
      TS0UW01.TS0UWWK1 = TS0UW01.TS0UWMCN + 1; /* set work value*/
      if (TS0UW01.TS0UWIXM == TS0UW01.TS0UWWK1) /* if over max*/
        TS0UW01.TS0UWSPF = "Y"; /* set span error flag*/
        converseLib.validationFailed(123); /* set span error message*/
        TS0UM001.XXXPRCNM = "TS0US30"; /* process name*/
        TS0UM002.XXXPRCNM = "TS0US30"; /* process name*/
      end
    end
    TS0US20(); /* fetch the next cpl row*/
  end

end // end TS0US30

// Select (SO) Unique    VCPLHD04
Function TS0US35()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TS0UM001.TSFSHPID; /* shipment number*/
  VCPLHD04.PC-PO-NBR = TS0UW02.PC3PONBR[TS0UWTIX]; /* po number*/
  VCPLHD04.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VCPLHD04.PC-PRDCU-ID = TS0UW02.PC2CUXID[TS0UWTIX]; /* customer xref*/
  VCPLHD04.SY-STY-NBR = TS0UW02.SY1STNBR[TS0UWTIX]; /* style number*/
  VCPLHD04.SY-COLR-CD-ID = TS0UW02.SY2CLRID[TS0UWTIX]; /* color number*/
  VCPLHD04.XDM-DIM-CD = TS0UW02.XDMCD[TS0UWTIX]; /* dimension code*/
  VCPLHD04.XQA-QUAL-CD = TS0UW02.XQACD[TS0UWTIX]; /* quality code*/
  VCPLHD04.XOW-OWN-GRP-CD = TS0UW02.XOWCD[TS0UWTIX]; /* owner group*/
  VCPLHD04.XPG-PKG-TYP-CD = TS0UW02.XPGCD[TS0UWTIX];
  VCPLHD04.XUM-UOM-CD = TS0UW02.XUMCD[TS0UWTIX]; /* unit of measure*/
  VCPLHD04.OP-CUST-ORD-ID = TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX];
  VCPLHD04.OP-NIKE-ORD-ID = TS0UW02.TS0UM-NIKE-ORD-ID[TS0UWTIX];
  if (TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] > 0)
    VCPLHD04.OP-ORD-PART-CHAR = TS0UW02.TS0UW-ORD-PART-CHAR[TS0UWTIX];
  else
    VCPLHD04.OP-ORD-PART-CHAR = " "; /**/
  end
  TSGREC.TSNFNC = "SO"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US35"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US35"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US35"; /* Process name*/

  end


end // end TS0US35

// Update pl row VCPLHD04
Function TS0US40()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

       /* - Find next available container field in VCPLHD04 which*/
         /* has not been filled.*/
       /* - Move in all fields to VCPLHD04.*/
       /* - Add the packing list row to DTRANS.VCPLHD04*/

   /* ------------------------------------------------------------*/

   /* ****************************************************/
   /* move fields to next available container*/
   /* ****************************************************/

  if (VCPLHD04.TS-NIKE-CNTNR-NBR2 <= 0)
    VCPLHD04.TS-NIKE-CNTNR-NBR2 = TS0UW01.TS0UWCTR;
    VCPLHD04.TS-CPL-QTOT-SHP2 = TS0UW02.TS0UMSHP[TS0UWTIX];
    VCPLHD04.TS-CPL-QTOT-RSRV2 = 0; /* reserved #2*/
    VCPLHD04.TS-CPL-QTOT-RCV2 = 0; /* received #2*/
    VCPLHD04.TS-CPL-TOT-CRTN2 = TS0UW02.TS0UMCRT[TS0UWTIX];
    VCPLHD04.TS-CPL-TOT-CBM2 = TS0UW02.TS0UMCBM[TS0UWTIX];
    VCPLHD04.TS-CPL-TOT-KG2 = TS0UW02.TS0UMKG[TS0UWTIX];
  else
    if (VCPLHD04.TS-NIKE-CNTNR-NBR3 <= 0)
      VCPLHD04.TS-NIKE-CNTNR-NBR3 = TS0UW01.TS0UWCTR;
      VCPLHD04.TS-CPL-QTOT-SHP3 = TS0UW02.TS0UMSHP[TS0UWTIX];
      VCPLHD04.TS-CPL-QTOT-RSRV3 = 0; /* reserved #3*/
      VCPLHD04.TS-CPL-QTOT-RCV3 = 0; /* received #3*/
      VCPLHD04.TS-CPL-TOT-CRTN3 = TS0UW02.TS0UMCRT[TS0UWTIX];
      VCPLHD04.TS-CPL-TOT-CBM3 = TS0UW02.TS0UMCBM[TS0UWTIX];
      VCPLHD04.TS-CPL-TOT-KG3 = TS0UW02.TS0UMKG[TS0UWTIX];
    else
      if (VCPLHD04.TS-NIKE-CNTNR-NBR4 <= 0)
        VCPLHD04.TS-NIKE-CNTNR-NBR4 = TS0UW01.TS0UWCTR; /* container#4*/
        VCPLHD04.TS-CPL-QTOT-SHP4 = TS0UW02.TS0UMSHP[TS0UWTIX]; /* shipped#4*/
        VCPLHD04.TS-CPL-QTOT-RSRV4 = 0; /* reserved #4*/
        VCPLHD04.TS-CPL-QTOT-RCV4 = 0; /* received #4*/
        VCPLHD04.TS-CPL-TOT-CRTN4 = TS0UW02.TS0UMCRT[TS0UWTIX]; /* cartons #4*/
        VCPLHD04.TS-CPL-TOT-CBM4 = TS0UW02.TS0UMCBM[TS0UWTIX]; /* cbms #4*/
        VCPLHD04.TS-CPL-TOT-KG4 = TS0UW02.TS0UMKG[TS0UWTIX]; /* kilos #4*/
      else
        if (VCPLHD04.TS-NIKE-CNTNR-NBR5 <= 0)
          VCPLHD04.TS-NIKE-CNTNR-NBR5 = TS0UW01.TS0UWCTR;
          VCPLHD04.TS-CPL-QTOT-SHP5 = TS0UW02.TS0UMSHP[TS0UWTIX];
          VCPLHD04.TS-CPL-QTOT-RSRV5 = 0;
          VCPLHD04.TS-CPL-QTOT-RCV5 = 0;
          VCPLHD04.TS-CPL-TOT-CRTN5 = TS0UW02.TS0UMCRT[TS0UWTIX];
          VCPLHD04.TS-CPL-TOT-CBM5 = TS0UW02.TS0UMCBM[TS0UWTIX];
          VCPLHD04.TS-CPL-TOT-KG5 = TS0UW02.TS0UMKG[TS0UWTIX];
        else
          if (VCPLHD04.TS-NIKE-CNTNR-NBR6 <= 0)
            VCPLHD04.TS-NIKE-CNTNR-NBR6 = TS0UW01.TS0UWCTR;
            VCPLHD04.TS-CPL-QTOT-SHP6 = TS0UW02.TS0UMSHP[TS0UWTIX];
            VCPLHD04.TS-CPL-QTOT-RSRV6 = 0;
            VCPLHD04.TS-CPL-QTOT-RCV6 = 0;
            VCPLHD04.TS-CPL-TOT-CRTN6 = TS0UW02.TS0UMCRT[TS0UWTIX];
            VCPLHD04.TS-CPL-TOT-CBM6 = TS0UW02.TS0UMCBM[TS0UWTIX];
            VCPLHD04.TS-CPL-TOT-KG6 = TS0UW02.TS0UMKG[TS0UWTIX];
          else
            if (VCPLHD04.TS-NIKE-CNTNR-NBR7 <= 0)
              VCPLHD04.TS-NIKE-CNTNR-NBR7 = TS0UW01.TS0UWCTR;
              VCPLHD04.TS-CPL-QTOT-SHP7 = TS0UW02.TS0UMSHP[TS0UWTIX];
              VCPLHD04.TS-CPL-QTOT-RSRV7 = 0;
              VCPLHD04.TS-CPL-QTOT-RCV7 = 0;
              VCPLHD04.TS-CPL-TOT-CRTN7 = TS0UW02.TS0UMCRT[TS0UWTIX];
              VCPLHD04.TS-CPL-TOT-CBM7 = TS0UW02.TS0UMCBM[TS0UWTIX];
              VCPLHD04.TS-CPL-TOT-KG7 = TS0UW02.TS0UMKG[TS0UWTIX];
            else
              if (VCPLHD04.TS-NIKE-CNTNR-NBR8 <= 0)
                VCPLHD04.TS-NIKE-CNTNR-NBR8 = TS0UW01.TS0UWCTR;
                VCPLHD04.TS-CPL-QTOT-SHP8 = TS0UW02.TS0UMSHP[TS0UWTIX];
                VCPLHD04.TS-CPL-QTOT-RSRV8 = 0;
                VCPLHD04.TS-CPL-QTOT-RCV8 = 0;
                VCPLHD04.TS-CPL-TOT-CRTN8 = TS0UW02.TS0UMCRT[TS0UWTIX];
                VCPLHD04.TS-CPL-TOT-CBM8 = TS0UW02.TS0UMCBM[TS0UWTIX];
                VCPLHD04.TS-CPL-TOT-KG8 = TS0UW02.TS0UMKG[TS0UWTIX];
              end
            end
          end
        end
      end
    end
  end

   /* ****************************************************/
   /* move in all other fields to VCPLHD04*/
   /* ****************************************************/

  if (TS0UW02.TSISTAT[TS0UWTIX] == "  ") /* If status not set*/
     /* continue on*/
  else
    if (TS0UW02.TSISTAT[TS0UWTIX] == "99") /* If status ok*/
      VCPLHD04.TS-CPL-STAT-CD = "IP";
    else
      VCPLHD04.TS-CPL-STAT-CD = TS0UW02.TSISTAT[TS0UWTIX];
    end
  end

  if (TS0UW02.XRECD[TS0UWTIX] == "  ") /* If exception set*/
     /* continue on*/
  else
    if (TS0UW02.XRECD[TS0UWTIX] == "99") /* If except ok*/
      VCPLHD04.XRE-RCPT-XCEP-CD = "  ";
    else
      VCPLHD04.XRE-RCPT-XCEP-CD = TS0UW02.XRECD[TS0UWTIX];
    end
  end

  VCPLHD04.TS-PL-QTOT-SHP = TS0UW02.TS0UMSHP[TS0UWTIX] + VCPLHD04.TS-PL-QTOT-SHP;
  VCPLHD04.TS-PL-TOT-CRTN = TS0UW02.TS0UMCRT[TS0UWTIX] + VCPLHD04.TS-PL-TOT-CRTN;
  VCPLHD04.TS-PL-TOT-CBM = TS0UW02.TS0UMCBM[TS0UWTIX] + VCPLHD04.TS-PL-TOT-CBM;
  VCPLHD04.TS-PL-TOT-KG = TS0UW02.TS0UMKG[TS0UWTIX] + VCPLHD04.TS-PL-TOT-KG;

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0UW02.TS0UWPAF[TS0UWTIX] = "Y"; /* packing list added flag*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US40"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US40"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US40"; /* Process name*/

  end


end // end TS0US40

// Close (CB) Set        VCPLHD04
Function TS0US45()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET OF PACKING LIST ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "CB"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US45"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE THE TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US45"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US45"; /* Process name*/

  end


end // end TS0US45

// Add po style
Function TS0US50()
   /* ------------------------------------------------------------*/
   /* ---*****************************************************----*/
   /* ---***********  added later when production ************----*/
   /* ---***********  data base exists            ************----*/
   /* ---*****************************************************----*/
   /* ------------------------------------------------------------*/
end // end TS0US50

// Call TS4000 - Itm Seq Populate
Function TS0US51()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine accesses calls the TS4000 subroutine.  This*/
   /* subroutine takes the "long PO key" and returns the best fit*/
   /* PO item sequence number.*/
   /* XGP-GPC-CD, SY-STY-NBR, SY-CLR-CD-ID, XWH-WHSE-CD, and PC-PRDCU-ID*/
   /* must be populated in calling process in WTS4001.  The name of the*/
   /* process must be moved to TA1PGMNM in TA1REC, for Error*/
   /* Diagnosis Reporting.*/

   /* This subroutine will return the i/o return code in*/
   /* WTS4001.IO-RETURN-CODE and, if a normal*/
   /* return, the PC-ITM-SEQ-NBR in WTS4001.*/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  call "TS4000" (WTS4001) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (WTS4001.IO-RETURN-CODE == "00") /* Normal return code*/

    return; /* Return to previous process*/

  end

  TA1REC.TA1MAP = WTS4001.IO-RETURN-CODE; /* i/o return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "TS0U-55010 CALL TS4000        ";

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* i/o return code*/


end // end TS0US51

// Update po style
Function TS0US55()
   /* ------------------------------------------------------------*/
   /* ---*****************************************************----*/
   /* ---***********  added later when production ************----*/
   /* ---***********  data base exists            ************----*/
   /* ---*****************************************************----*/
   /* ------------------------------------------------------------*/
end // end TS0US55

// Packing list updates
Function TS0US60()
   /* ------------------------------------------------------------*/

                   /* PACKING LIST UPDATES*/

      /* 1) Move in all key fields to tsirec*/
      /* 2) Select the packing list row to see if it exists*/
         /* - if contention problems - exit the loop*/
         /* - if row was not found then perform add pl row*/
         /* - if row was found then perform update pl row*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TS0UM001.TSFSHPID; /* shipment number*/
  VCPLHD04.PC-PO-NBR = TS0UW02.PC3PONBR[TS0UWTIX]; /* po number*/
  VCPLHD04.PC-ITM-SEQ-NBR = TS0UW02.PC-ITM-SEQ-NBR[TS0UWTIX]; /* po item sequence number*/
  VCPLHD04.TS-SHP-LEG-NBR = TS0UW02.TS-SHP-LEG-NBR[TS0UWTIX]; /* leg number*/
  VCPLHD04.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VPRDCU03.XGPCD = TSWREC.XGPCD; /* product code*/
  VCPLHD04.PC-PRDCU-ID = TS0UW02.PC2CUXID[TS0UWTIX]; /* customer xref*/
  VPRDCU03.PC2CUXID = TS0UW02.PC2CUXID[TS0UWTIX]; /* customer xref*/
  TS0US63(); /* get iseg*/
  VCPLHD04.PC-CU-IN-SEG-CD = VPRDCU03.PC2INSEG; /* iseg*/
  VCPLHD04.SY-STY-NBR = TS0UW02.SY1STNBR[TS0UWTIX]; /* style number*/
  VCPLHD04.SY-COLR-CD-ID = TS0UW02.SY2CLRID[TS0UWTIX]; /* color number*/
  VCPLHD04.XDM-DIM-CD = TS0UW02.XDMCD[TS0UWTIX]; /* dimension code*/
  VCPLHD04.XQA-QUAL-CD = TS0UW02.XQACD[TS0UWTIX];
  VCPLHD04.XOW-OWN-GRP-CD = TS0UW02.XOWCD[TS0UWTIX]; /* owner group*/
  VCPLHD04.XPG-PKG-TYP-CD = TS0UW02.XPGCD[TS0UWTIX];
  VCPLHD04.XUM-UOM-CD = TS0UW02.XUMCD[TS0UWTIX]; /* unit of measure*/
  if (TS0UW02.TS0UM-CUST-ORD-ID[TS0UWTIX] > 0)
    VCPLHD04.OP-ORD-PART-CHAR = TS0UW02.TS0UW-ORD-PART-CHAR[TS0UWTIX];
  else
    VCPLHD04.OP-ORD-PART-CHAR = " ";
  end

   /* **********************************************/
     /* select the table rows from dtrans.vcplhd01*/
   /* **********************************************/

  TS0US15(); /* select the table rows*/
  TS0US20(); /* fetch the first table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/

    TS0US25(); /* add packing list row*/

    if (TS0UW01.TS0UW-SUMMARY-SHPMT == "1" /* If summary shipment*/
     && TS0UW02.TS0UW-PO-SZ-CNT[TS0UWTIX] == 1) /* and only 1 size*/

      if (TS0UW02.PC4ORTYP[TS0UWTIX] == "SS" /* and salesman sample*/
       || TS0UW02.PC4ORTYP[TS0UWTIX] == "SX" /* and salesman sample*/
       || TS0UW02.PC4ORTYP[TS0UWTIX] == "S3" /* and salesman sample*/
       || TS0UW02.PC4ORTYP[TS0UWTIX] == "S7") /* and salesman sample*/

        TS0US61(); /* Add cplit01 row*/

        TS0US62(); /* Update cplhd01 row*/

      end

    end

  else

    if (SQLCA.VAGen_SQLCODE == 0) /* if row was found*/
      TS0US30(); /* Check 8 cntnr span error*/
      if (TS0UW01.TS0UWSPF == "N") /* if no span errors encountered*/
        TS0US35(); /* select unique table row*/
        if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/
          TS0US25(); /* add packing list row*/
        else
          if (SQLCA.VAGen_SQLCODE == 0) /* if row was found*/
            TS0US40(); /* update packing list row*/
          end
        end
      end
    end

  end

  TS0US45(); /* close the selected set*/


end // end TS0US60

// Add packing list row VCPLIT01
Function TS0US61()
   /* ------------------------------------------------------------*/

                   /* ADD PACKING LIST ITEM ROW*/

    /* 1) Move in all fields to TSOREC.*/
    /* 2) Add the packing list row to dtrans.vcplit01*/

   /* ------------------------------------------------------------*/

  set TSOREC empty; /* initialize record*/

  TSOREC.TSFSHPID = TS0UM001.TSFSHPID; /* shipment number*/
  TSOREC.TSHNKCN = TS0UW01.TS0UWCTR; /* container #*/
  TSOREC.TSIPLNBR = VCPLHD04.TS-NIKE-PL-NBR; /* Nike pl number*/
  TSOREC.TSOFRCRT = 1; /* From carton*/
  TSOREC.TSOTOCRT = TS0UW02.TS0UMCRT[TS0UWTIX]; /* To carton*/
  TSOREC.SY5SZID = TS0UW02.TS0UW-SAVE-SIZE[TS0UWTIX]; /* Size id*/
  TSOREC.TSIMSCFL = "N"; /* musical style flag*/
  TSOREC.TSIMSCGR = " "; /* musical style group*/

  TSOREC.TSOSHPQT = TS0UW02.TS0UMSHP[TS0UWTIX]; /* quantity shipped*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSOREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move in set up date*/
  TSOREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSOREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
  TSOREC.ZZZCHGCT = 0; /* initialize change count*/

  TSGREC.TSNFNC = "A "; /* move selection to pass record*/
  call "IO2580" (TSGREC, SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0UW02.TSIDETFL[TS0UWTIX] = "Y"; /* Detail flag = y*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US61"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US61"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US61"; /* Process name*/

  end


end // end TS0US61

// Update pl row VCPLHD04
Function TS0US62()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

       /* - Move in all fields to VCPLHD04.*/
       /* - Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

   /* ****************************************************/
   /* move in all other fields to VCPLHD04*/
   /* ****************************************************/

  if (TS0UW02.TSIDETFL[TS0UWTIX] == "Y") /* If detail exists*/
    VCPLHD04.TS-DET-FL = TS0UW02.TSIDETFL[TS0UWTIX];
    TS0UW02.TSIDETFL[TS0UWTIX] = "N"; /* Reset flag*/
  end

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0UW02.TS0UWPAF[TS0UWTIX] = "Y"; /* packing list added flag*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US62"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US62"; /* Process name*/
    TS0UM002.XXXPRCNM = "TS0US62"; /* Process name*/

  end


end // end TS0US62

// Select (S ) Unique    VPRDCU03
Function TS0US63()
   /* ------------------------------------------------------------*/

                 /* SELECT UNIQUE CUST XREF ROW*/

    /* 1) Select the customer xref row.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "S "; /* move selection to pass record*/
  call "VPRDCU03" (TSGREC, SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0UW01.TS0UWTIX = TS0UW01.TS0UWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0UW01.TS0UWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US63"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0UM001.XXXPRCNM = "TS0US63"; /* Process name*/
  end


end // end TS0US63

// Select row DTRANS.VSHPHD01
Function TS0US70()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the shphd table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US70"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0UM001.XXXPRCNM = "TS0US70"; /* Process name*/

  end


end // end TS0US70

// Select row DTRANS.VTSLOC02
Function TS0US75()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the tsloc table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("S ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0US71"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0UM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0UM001.XXXPRCNM = "TS0US71"; /* Process name*/

  end


end // end TS0US75

//*** RECORD=TS0UW01 ****
// Working storage for TS0u - Container Build
// ***********************
Record TS0UW01 type basicRecord
  10 TSNFNC TSNFNC ; 
  10 YMTCD YMTCD ; 
  10 TS0UWIXM TS0UWIXM ; 
  10 TS0UWIXW TS0UWIXW ; 
  10 TS0UWCOM TS0UWCOM ; 
  10 TS0UWMIX TS0UWMIX ; 
  10 TS0UWMPX TS0UWMPX ; 
  10 TS0UWTIX TS0UWTIX ; 
  10 TS0UWPGE TS0UWPGE ; 
  10 TS0UWCTR TS0UWCTR ; 
  10 TS0UWPCK TS0UWPCK ; 
  10 TS0UWMAX TS0UWMAX ; 
  10 TS0UWMCN TS0UWMCN ; 
  10 TS0UWWK1 TS0UWWK1 ; 
  10 TS0UWWK2 TS0UWWK2 ; 
  10 TS0UWPSW TS0UWPSW ; 
  10 TS0UWPWF TS0UWPWF ; 
  10 TS0UWWA1 TS0UWWA1 ; 
    15 TS0UWWF1 TS0UWWF1 ; 
    15 TS0UWSH1 TS0UWSH1 [13] ; 
  10 TS0UWWA2 TS0UWWA2 ; 
    15 TS0UWWF2 TS0UWWF2 ; 
    15 TS0UWSH2 TS0UWSH2 [13] ; 
  10 TS0UWWA3 TS0UWWA3 ; 
    15 TS0UWWF3 TS0UWWF3 ; 
    15 TS0UWSH3 TS0UWSH3 [13] ; 
  10 TS0UWWA4 TS0UWWA4 ; 
    15 TS0UWWF4 TS0UWWF4 ; 
    15 TS0UWSH4 TS0UWSH4 [13] ; 
  10 TS0UWWA6 TS0UWWA6 ; 
    15 TS0UWWF6 TS0UWWF6 ; 
    15 TS0UWSH6 TS0UWSH6 [13] ; 
  10 TS0UWWA7 TS0UWWA7 ; 
    15 TS0UWWF7 TS0UWWF7 ; 
    15 TS0UWSH7 TS0UWSH7 [13] ; 
  10 TS0UWHEQ TS0UWHEQ ; 
  10 TS0UWHEP TS0UWHEP ; 
  10 TS0UWSEQ TS0UWSEQ ; 
  10 TS0UWSEP TS0UWSEP ; 
  10 TS0UWTTQ TS0UWTTQ ; 
  10 TS0UWTTD TS0UWTTD ; 
  10 TS0UWTTP TS0UWTTP ; 
  10 TS0UWPOQ TS0UWPOQ ; 
  10 TS0UWPLQ TS0UWPLQ ; 
  10 TS0UWRCQ TS0UWRCQ ; 
  10 TS0UWIDS TS0UWIDS ; 
  10 TS0UWIPI TS0UWIPI ; 
  10 TS0UWIOT TS0UWIOT ; 
  10 TS0UWFFL TS0UWFFL ; 
  10 TS0UWSPF TS0UWSPF ; 
  10 TS0UWNSF TS0UWNSF ; 
  10 TS0UWCAF TS0UWCAF ; 
  10 TS0UWEFL TS0UWEFL ; 
  10 TS0UWSWR TS0UWSWR ; 
  10 TS0UWDSW TS0UWDSW ; 
  10 TS0UWSWC TS0UWSWC ; 
  10 TS0UWDEF TS0UWDEF ; 
  10 TS0UWFSW TS0UWFSW ; 
  10 TS0UWCYR TS0UWCYR ; 
    15 TS0UWCCC TS0UWCCC ; 
    15 TS0UWCYY TS0UWCYY ; 
  10 TS0UWPID TS0UWPID ; 
    15 TS0UWPCC TS0UWPCC ; 
    15 TS0UWPOI TS0UWPOI ; 
      20 TS0UWPYR TS0UWPYR ; 
        25 TS0UWPY1 TS0UWPY1 ; 
        25 TS0UWPY2 TS0UWPY2 ; 
      20 TS0UWPMO TS0UWPMO ; 
      20 TS0UWDMO TS0UWDMO ; 
      20 TS0UWFCT TS0UWFCT ; 
  10 TS0UWDAT TS0UWDAT ; 
    15 TS0UWPCN TS0UWPCN ; 
    15 TS0UWPYY TS0UWPYY ; 
    15 TS0UWPM1 TS0UWPM1 ; 
    15 TS0UWPM2 TS0UWPM2 ; 
  10 PC3PONBR PC3PONBR ; 
  10 TS0UMPOI TS0UMPOI ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC2CUXID PC2CUXID ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 TSHNKCN TSHNKCN [8] ; 
  10 TS0UWNCN TS0UWNCN [8] ; 
  10 TS0UWWF5 TS0UWWF5 ; 
  10 TS0UW-SUMMARY-SHPMT TS0UW-SUMMARY-SHPMT ; 
  10 TS0UW-PO-SZ-QTY TS0UW-PO-SZ-QTY ; 
  10 TS0UW-PO-SZ-CNT TS0UW-PO-SZ-CNT ; 
  10 TS0UW-MAP-INDICATOR TS0UW-MAP-INDICATOR ; 
  10 TS0UW-CASCADE-SWITCH-ON TS0UW-CASCADE-SWITCH-ON ; 
  10 TS0UW-PREV-OP1CUOID TS0UW-PREV-OP1CUOID ; 
  10 TS0UW-PREV-OP1NORID TS0UW-PREV-OP1NORID ; 
  10 TS-ORIG-LOC-CNSLD-FL TS-ORIG-LOC-CNSLD-FL ; 
  10 TS-DSCHG-LOC-CNSLD-FL TS-DSCHG-LOC-CNSLD-FL ; 
  10 TS-DEST-LOC-CNSLD-FL TS-DEST-LOC-CNSLD-FL ; 
  10 TS-ORIG-LOC-CD TS-ORIG-LOC-CD ; 
  10 TS-DSCHG-LOC-CD TS-DSCHG-LOC-CD ; 
  10 TS-DEST-LOC-CD TS-DEST-LOC-CD ; 
  10 XGP-GPC-CD XGP-GPC-CD ; 
end // end TS0UW01

//*** RECORD=TS0UW02 ****
// Working map detail record for TS0U - Container Build
// ***********************
Record TS0UW02 type basicRecord
  10 TS0UWLIN TS0UWLIN [200] ; 
    15 PC3PONBR PC3PONBR ; 
    15 TS0UMPOI TS0UMPOI ; 
      20 TS0UWPYR TS0UWPYR ; 
      20 TS0UWPMO TS0UWPMO ; 
      20 TS0UWDMO TS0UWDMO ; 
      20 TS0UWFCT TS0UWFCT ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 TS0UMSHP TS0UMSHP ; 
    15 TS0UMCRT TS0UMCRT ; 
    15 TS0UMCBM TS0UMCBM ; 
    15 TS0UMKG TS0UMKG ; 
    15 XDMCD XDMCD ; 
    15 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
    15 XQACD XQACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 TSISTAT TSISTAT ; 
    15 XRECD XRECD ; 
    15 TS0UWPAF TS0UWPAF ; 
    15 TS0UWAPS TS0UWAPS ; 
    15 TSIDETFL TSIDETFL ; 
    15 TS0UW-PO-SZ-CNT TS0UW-PO-SZ-CNT ; 
    15 TS0UW-SAVE-SIZE TS0UW-SAVE-SIZE ; 
    15 TS0UM-CUST-ORD-ID TS0UM-CUST-ORD-ID ; 
      20 * num(8) ; 
      20 TS0UW-ORD-PART-CHAR TS0UW-ORD-PART-CHAR ; 
    15 TS0UM-NIKE-ORD-ID TS0UM-NIKE-ORD-ID ; 
    15 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
end // end TS0UW02

//*** RECORD=TS0UW03 ****
// Working map detail record for TS0U - Container Build
// ***********************
Record TS0UW03 type basicRecord
  10 TS0UWGR3 TS0UWGR3 ; 
    15 TS0UWLN3 TS0UWLN3 [13] ; 
      20 PC3PONBR PC3PONBR ; 
      20 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
      20 TS0UMPOI TS0UMPOI ; 
      20 PC4ORTYP PC4ORTYP ; 
      20 PC2CUXID PC2CUXID ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 TS0UMSHP TS0UMSHP ; 
      20 TS0UMCRT TS0UMCRT ; 
      20 TS0UMCBM TS0UMCBM ; 
      20 TS0UMKG TS0UMKG ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 XOWCD XOWCD ; 
      20 TSISTAT TSISTAT ; 
      20 XRECD XRECD ; 
      20 TS0UW-PO-SZ-QTY TS0UW-PO-SZ-QTY ; 
      20 TS0UW-PO-SZ-CNT TS0UW-PO-SZ-CNT ; 
      20 TS0UW-SAVE-SIZE TS0UW-SAVE-SIZE ; 
      20 TS0UM-CUST-ORD-ID TS0UM-CUST-ORD-ID ; 
        25 * num(8) ; 
        25 TS0UW-ORD-PART-CHAR TS0UW-ORD-PART-CHAR ; 
      20 TS0UM-NIKE-ORD-ID TS0UM-NIKE-ORD-ID ; 
      20 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
end // end TS0UW03

//*** RECORD=TS0UW04 ****
// Working map detail record for TS0U - Container Build
// ***********************
Record TS0UW04 type basicRecord
  10 TS0UWGR4 TS0UWGR4 ; 
    15 TS0UWLN4 TS0UWLN4 [13] ; 
      20 PC3PONBR PC3PONBR ; 
      20 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
      20 TS0UMPOI TS0UMPOI ; 
      20 PC4ORTYP PC4ORTYP ; 
      20 PC2CUXID PC2CUXID ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 TS0UMSHP TS0UMSHP ; 
      20 TS0UMCRT TS0UMCRT ; 
      20 TS0UMCBM TS0UMCBM ; 
      20 TS0UMKG TS0UMKG ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 XOWCD XOWCD ; 
      20 TSISTAT TSISTAT ; 
      20 XRECD XRECD ; 
      20 TS0UW-PO-SZ-QTY TS0UW-PO-SZ-QTY ; 
      20 TS0UW-PO-SZ-CNT TS0UW-PO-SZ-CNT ; 
      20 TS0UW-SAVE-SIZE TS0UW-SAVE-SIZE ; 
      20 TS0UM-CUST-ORD-ID TS0UM-CUST-ORD-ID ; 
        25 * num(8) ; 
        25 TS0UW-ORD-PART-CHAR TS0UW-ORD-PART-CHAR ; 
      20 TS0UM-NIKE-ORD-ID TS0UM-NIKE-ORD-ID ; 
      20 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
end // end TS0UW04

// Destination consolidation flag
DataItem TS-DEST-LOC-CNSLD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id map display
DataItem TS0UM-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id map display
DataItem TS0UM-NIKE-ORD-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cubic meters
DataItem TS0UMCBM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cartons
DataItem TS0UMCRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// kilograms
DataItem TS0UMKG decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id
DataItem TS0UMPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shipment
DataItem TS0UMSHP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cascade entered data switch
DataItem TS0UW-CASCADE-SWITCH-ON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0UW-MAP-INDICATOR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-part-char
DataItem TS0UW-ORD-PART-CHAR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO size count
DataItem TS0UW-PO-SZ-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO size quantity
DataItem TS0UW-PO-SZ-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous op-cust-ord-id
DataItem TS0UW-PREV-OP1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous op-nike-ord-id
DataItem TS0UW-PREV-OP1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO size bucket
DataItem TS0UW-SAVE-SIZE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Summary shipment switch
DataItem TS0UW-SUMMARY-SHPMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-add-po-style-fl
DataItem TS0UWAPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// container added flag
DataItem TS0UWCAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem TS0UWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-compress-index
DataItem TS0UWCOM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-container-counter
DataItem TS0UWCTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century/year
DataItem TS0UWCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0UWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem TS0UWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data entered flag
DataItem TS0UWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0UWDMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Domestic no quantity switch
DataItem TS0UWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end flag for loops
DataItem TS0UWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory
DataItem TS0UWFCT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time through flag
DataItem TS0UWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add/delete function switch
DataItem TS0UWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage 3 group
DataItem TS0UWGR3 char(1079)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage 3 group
DataItem TS0UWGR4 char(1079)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hard error percent
DataItem TS0UWHEP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hard error quantity
DataItem TS0UWHEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id/type correct switch
DataItem TS0UWIDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. type correct switch
DataItem TS0UWIOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. id correct switch
DataItem TS0UWIPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working index 1
DataItem TS0UWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 2
DataItem TS0UWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line
DataItem TS0UWLIN char(82)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage 3 line
DataItem TS0UWLN3 char(83)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage 4 line
DataItem TS0UWLN4 char(83)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-table-lines
DataItem TS0UWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max container span number
DataItem TS0UWMCN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-map-index
DataItem TS0UWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-map-position-index
DataItem TS0UWMPX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIKE_CNTNR_NBR array
DataItem TS0UWNCN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Negative SQL return flag
DataItem TS0UWNSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-tbl-pl-added-fl
DataItem TS0UWPAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id century
DataItem TS0UWPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-packing-list-counter
DataItem TS0UWPCK smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem TS0UWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-page-counter
DataItem TS0UWPGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id redefinition
DataItem TS0UWPID char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Packing list accumulated qty
DataItem TS0UWPLQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem TS0UWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0UWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0UWPMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id yr, mo1, mo1, factory
DataItem TS0UWPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO accumulated quantity
DataItem TS0UWPOQ decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0UWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO quantity warning flag
DataItem TS0UWPWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year char 1
DataItem TS0UWPY1 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year char 2
DataItem TS0UWPY2 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0UWPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0UWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Reciepts accumulated quantity
DataItem TS0UWRCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Soft error percent
DataItem TS0UWSEP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Soft error quantity
DataItem TS0UWSEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Set highlights flag 1
DataItem TS0UWSH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 2
DataItem TS0UWSH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 3
DataItem TS0UWSH3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 4
DataItem TS0UWSH4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 6
DataItem TS0UWSH6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 7
DataItem TS0UWSH7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Span error flag indicator
DataItem TS0UWSPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0UWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0UWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-table-index
DataItem TS0UWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total shipping/received diff
DataItem TS0UWTTD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received pct
DataItem TS0UWTTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received qty
DataItem TS0UWTTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warning array 1
DataItem TS0UWWA1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 2
DataItem TS0UWWA2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 3
DataItem TS0UWWA3 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 4
DataItem TS0UWWA4 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 6
DataItem TS0UWWA6 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 7
DataItem TS0UWWA7 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  1
DataItem TS0UWWF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  2
DataItem TS0UWWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  3
DataItem TS0UWWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  4
DataItem TS0UWWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  5
DataItem TS0UWWF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  6
DataItem TS0UWWF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  7
DataItem TS0UWWF7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage index 1
DataItem TS0UWWK1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index 2
DataItem TS0UWWK2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

