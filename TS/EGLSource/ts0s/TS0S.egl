package ts0s;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0S ****
// This program allows users to inquire/maintenance on existing
// Transit Time table rows.  The user can view existing rows by
// specifying criteria for selection (ie. Transit Time Origin
// Code, Transit Time Destination Code and Mode Code).  The
// database will return 0 to N rows based upon the criteria set
// by the user.  This program will then match location
// description information with the transit time rows returned
// and display it for browsing.
// 
// This program allows deleting, adding, and changing of
// Transit Time table rows:
// 
//    For deletion, a user will select a Transit Time row(s)
//    from the browse screen and press PF15 to delete it.
//    A confirmation is then asked for to delete it.  Hitting
//    ENTER will cycle through rows selected and PFkey 3 will
//    exit the user to the browse screen.
// 
//    The user may add new Transit Time rows by pressing PF13
//    from the browse screen (blank or filled with rows).
//    This will position them in an add screen.  Transit Time
//    rows can then be added (if entries pass edit criteria)
//    by pressing ENTER.  The user may continue adding of exit
//    to the browse screen.
// 
//    A user can select one or more rows for change and hit
//    PF14.  The user will then be positioned in a change
//    screen where they can make their changes to non-key
//    fields and hit ENTER to cycle to the next row selected
//    for change or PF3 to return to the browse screen.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          01/11/88 cepple  New application.
// fix      09/12/90 cepple  Remove edits not allowing zero
//                           for TT days and duplicate orig
//                           and dest.
//          11/07/96 JCARL1  Remove alarm for msg display.
// *********************
Program TS0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TS0SW01 TS0SW01; // record
  TS0SW02 TS0SW02; // record
  TSCREC TSCREC; // record
  TSEREC TSEREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use YSGTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use TS0SM.TS0SM001,  // forms
      TS0SM.TS0SM002, 
      TS0SM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0SW01 empty; /* Initialize working storage*/
    set TS0SW02 empty; /* Initialize temporary storage*/
    set TSCREC empty; /* Initialize records used*/
    set TSEREC empty;
    set TSWREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0SM001 initial; /* Initialize map1 output area*/
    set TS0SM002 initial; /* Initialize map2 output area*/

    /* Y2K OUT*/
    /* MOVE 19 TO TS0SW01.TS0SWCEN;      /* Initialize working century*/
    /* Y2K OUT*/
    TS0SW01.TS0SWMAP = "1"; /* Indicate map to be displayed*/
    TS0SW01.TS0SWMFL = "N"; /* Iitialize message flag*/
    TS0SW01.TS0SWPSW = "N"; /* Iitialize problem switch*/
    TS0SW01.TS0SWWFL = "N"; /* Iitialize warning flag*/
    TS0SW01.TS0SWSWR = "N"; /* Set request for data to no*/

    goto TS0S001; /* Converse Location Inquiry/Main.*/


    TS0S001: TS0S001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto TS0S001; /* Converse Location Inquiry/Main.*/


  end // end main
end // end TS0S

// Transit Time Inq/Maint
Function TS0S001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWMAP == "1") /* Map 1 was requested*/
    TS0S100(); /* Display map 1*/
  else
    if (TS0SW01.TS0SWMAP == "2" /* Map 2 was requested*/
     && TS0SW01.TS0SWFSW == "A") /* and ADD function*/
      TS0S200(); /* Display Transit Time Add Map*/
    else
      if (TS0SW01.TS0SWMAP == "2" /* Map 2 was selected*/
       && TS0SW01.TS0SWFSW == "C") /* and CHANGE function*/

        TS0SW01.TS0SWIXM = 1; /* Initialize index*/
        while (TS0SW01.TS0SWIXM <= 13 /* Until end of page*/
         && TS0SW01.TS0SWMAP != "1") /* and not map 1*/
          if (TS0SM001.TS0SMSEL[TS0SWIXM] == "S") /* If line selected*/
            TS0S300(); /* Display Transit Time Change Map*/
          end
          TS0SW01.TS0SWIXM = TS0SW01.TS0SWIXM + 1; /* Increment index*/
        end
        TS0SW01.TS0SWMAP = "1";
                                   /* set map to transit time browse*/
      else
        if (TS0SW01.TS0SWMAP == "2" /* Map 2 was selected*/
         && TS0SW01.TS0SWFSW == "D") /* and DELETE function*/

          TS0SW01.TS0SWSK1 = " "; /* Clear save keys*/
          TS0SW01.TS0SWSK2 = " ";
          TS0SW01.TS0SWSK3 = " ";
          TS0SW01.TS0SWSPG = 0; /* Set save page to zero*/
          TS0SW01.TS0SWSPG = TS0SW01.TS0SWTSP; /* Save page number*/
          TS0SW01.TS0SWSIX = 0; /* INITIALIZE SAVE INDEX*/
          TS0SW01.TS0SWIXM = 1; /* Initialize index*/

          while (TS0SW01.TS0SWIXM <= 13 /* Until end of page*/
           && TS0SW01.TS0SWMAP != "1") /* and not map 1*/
            if (TS0SM001.TS0SMSEL[TS0SWIXM] == "S") /* If line selected*/
              TS0SW01.TS0SWSIX = TS0SW01.TS0SWIXM;
              TS0S400(); /* Display Transit Time Delete Map*/
            end
            TS0SW01.TS0SWIXM = TS0SW01.TS0SWIXM + 1; /* Increment index*/
          end
          if (TS0SW01.TS0SWSIX <= 0 /* If save index less than 1*/
           && TS0SW01.TS0SWSPG != 1) /* and not first page*/
            TS0SW01.TS0SWSIX = 13; /* set index to last entry*/
            TS0SW01.TS0SWSPG = TS0SW01.TS0SWSPG - 1; /* decrement save page*/
          else
            if (TS0SW01.TS0SWSIX <= 0 /* If save index less than 1*/
             && TS0SW01.TS0SWSPG == 1) /* and first page*/
              TS0SW01.TS0SWSIX = 1; /* set index to first entry*/
            end
          end
          TS0SW01.TS0SWMAP = "1";
                                   /* set map to transit time browse*/
        else
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1PGMNM = "TS0S001 "; /* Process name*/
          TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
          TA1REC.TA1MAP = TS0SW01.TS0SWMAP; /* Map name*/
          SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
          XSPF4(); /* Exit to Master Menu*/
        end
      end
    end
  end


end // end TS0S001

// Transit Time inq/maint map
Function TS0S100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWSWR == "Y") /* The request for data is yes*/
    TS0S110(); /* Obtain the data to display*/
  end

  TS0S120(); /* Format and display the map*/

  TS0S130(); /* Check attention identifier*/

  TS0S140(); /* Reset fields to normal intensity*/

  TS0S150(); /* Verify the entered data*/

  TS0S160(); /* Process valid input request*/


end // end TS0S100

// Obtain the data to display
Function TS0S110()
   /* ------------------------------------------------------------*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* If no data found, display error message and return to*/
      /* previous process.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/


  TS0S111(); /* Purge any temporary storage*/

  set TSEREC empty; /* Clear transit time record*/

  TSEREC.TSEORIG = TS0SW01.TSEORIG; /* Set time record search*/
  TSEREC.TSEDEST = TS0SW01.TSEDEST;
  TSEREC.YMTCD = TS0SW01.YMTCD;

  TS0S112(); /* Select set and open the cursor*/
  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    set TS0SW02 empty; /* Clear temporary storage record*/
    TS0SW01.TS0SWIXM = 1; /* Initialize display line number*/
    TS0SW01.TS0SWSWC = "N"; /* Initialize end of file switch*/
    TS0SW01.TS0SWPSW = "N"; /* Init problem found switch*/
    while (TS0SW01.TS0SWSWC == "N" /* Until end of set or problem found*/
     && TS0SW01.TS0SWPSW == "N") /* or until a problem was found*/
      TS0S113(); /* Obtain data and format page*/
      if (TS0SW01.TS0SWIXM > 13) /* Page is full*/
        TS0S114(); /* Add page to temporary storage*/
      end
    end
    if (TS0SW01.TS0SWSWC == "Y") /* end of set was found*/
      if (TS0SW01.TS0SWIXM > 1) /* and some of the page was formatted*/
        TS0S114(); /* Add page to temporary storage*/
      end
      TS0SW01.TS0SWTSP = 1; /* Initialize page number*/
      TS0SW01.TS0SWSWR = "N"; /* Request for data completed*/
      TS0S115(); /* Close the selected set cursor*/
    end
  end

  if (TS0SW01.TA5TSQIX == 0) /* No data to display*/
    TS0SM001.XXXPRCNM = "TS0S110"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    TS0SW01.TS0SWPSW = "N"; /* Indicate problem*/
  end


end // end TS0S110

// Purge any temporary storage
Function TS0S111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0S"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0S111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0SM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0SW01.TS0SWTSP = 0; /* Reset current page number*/
  TS0SW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0S111

// Select set
Function TS0S112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  call "IO2360" ("S1", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0S112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0SM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0SM001.XXXPRCNM = "TS0E112"; /* Process name*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0S112

// Fetch next row and format
Function TS0S113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO2360" ("N1", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0SW01.TS0SWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0S113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0SM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0SM001.XXXPRCNM = "TS0S113"; /* Process name*/

    else
      TS0SW02.TSEORIG[TS0SWIXM] = TSEREC.TSEORIG; /* Save data*/
      TS0SW02.TSEOYSC[TS0SWIXM] = TSEREC.TSEOYSC;
      TS0SW02.TSEOXSC[TS0SWIXM] = TSEREC.TSEOXSC;
      TS0SW02.TSEOXCC[TS0SWIXM] = TSEREC.TSEOXCC;
      TS0SW02.TSEOCTY[TS0SWIXM] = TSEREC.TSEOCTY;
      TS0SW02.TSEDEST[TS0SWIXM] = TSEREC.TSEDEST;
      TS0SW02.TSEDYSC[TS0SWIXM] = TSEREC.TSEDYSC;
      TS0SW02.TSEDXSC[TS0SWIXM] = TSEREC.TSEDXSC;
      TS0SW02.TSEDXCC[TS0SWIXM] = TSEREC.TSEDXCC;
      TS0SW02.TSEDCTY[TS0SWIXM] = TSEREC.TSEDCTY;
      TS0SW02.YMTCD[TS0SWIXM] = TSEREC.YMTCD;
      TS0SW02.TSETRNTM[TS0SWIXM] = TSEREC.TSETRNTM;

      TS0SW01.TS0SWIXM = TS0SW01.TS0SWIXM + 1; /* Increment line index*/
    end
  end



end // end TS0S113

// Add page to temporary storage
Function TS0S114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS0SW02.TS0SWLEN = 1027; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0S"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    TS0SW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS0SW01.TS0SWIXM = 1; /* Reset display line number*/
    set TS0SW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0S114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0SM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0SM001.XXXPRCNM = "TS0S114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TS0SW01.TS0SWPSW = "Y"; /* indicate problem has been found*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0S114

// Close selected set cursor
Function TS0S115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2360" ("C1", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0S115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0SM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0SM001.XXXPRCNM = "TS0S115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0S115

// Format and display the map
Function TS0S120()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWPSW == "N") /* No error message to display*/
    set TS0SM001 initial; /* Clear map output area*/
    TS0SM001.TS0SMFLC = TS0SW01.TSEORIG;
    TS0SM001.TS0SMTLC = TS0SW01.TSEDEST;
    TS0SM001.TS0SMYMT = TS0SW01.YMTCD;
    set TS0SM001.TS0SMSEL[1] cursor; /* set cursor to top field*/
    TS0S121(); /* Format the selected data*/
  end

  /* IF EZEMNO NE 0;                   /* No error message to display*/
  /* SET TS0SM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  if (TS0SW01.TS0SWMFL == "Y") /* If message flag is yes*/
    converseLib.validationFailed(44); /* Indicate update was successful*/
    TS0SM001.XXXPRCNM = "TS0S120"; /* Process name*/
    TS0SW01.TS0SWMFL = "N"; /* Reset message flag*/
  end

  TS0SM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0SM001 ;

  TS0SW01.TS0SWPSW = "N"; /* Reset problem switch*/

  TS0S124(); /* Check for ? inquiry by the user*/


end // end TS0S120

// Format the selected data
Function TS0S121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan location data in the map.*/
   /* ------------------------------------------------------------*/

  TS0SW01.TS0SWDFL = "N"; /* Initialize delete flag*/

  if (TS0SW01.TS0SWSK1 != " " /* If change save key set*/
   || TS0SW01.TS0SWSK2 != " " 
   || TS0SW01.TS0SWSK3 != " ")
    TS0SW01.TS0SWTSP = 1; /* Initialize search page*/
  end

  if (TS0SW01.TS0SWSPG > TS0SW01.TA5TSQIX) /* If save page was delete*/
    TS0SW01.TS0SWSPG = TS0SW01.TS0SWSPG - 1; /* decrement save page*/
  end

  if (TS0SW01.TS0SWSPG > 0) /* If save page was set*/
    TS0SW01.TS0SWTSP = TS0SW01.TS0SWSPG; /* Move in new page*/
    TS0SW01.TS0SWDFL = "Y"; /* set delete flag*/
    TS0S122(); /* Obtain temporary storage page*/
    set TS0SM001.TS0SMSEL[TS0SWSIX] cursor; /* set cursor*/
    TS0SW01.TS0SWSIX = 0; /* Reset save index*/
    TS0SW01.TS0SWSPG = 0; /* Reset save page*/
  end

  if (COMMAREA.CAADDFL == "Y") /* If user can perform add*/
    set TS0SM001.TS0SMADD skip; /* Display add PF Key*/
  end

  if (COMMAREA.CACHGFL == "Y") /* If user can perform delete*/
    set TS0SM001.TS0SMCHG skip; /* Display change PF Key*/
  end

  if (COMMAREA.CADELFL == "Y") /* If user can perform delete*/
    set TS0SM001.TS0SMDEL skip; /* Display change PF Key*/
  end

  if (TS0SW01.TA5TSQIX == 0) /* if no data to display*/
    set TS0SM001.TS0SMFLC cursor; /* set cursor*/

    /* Do not format page*/

  else

    while (TS0SW01.TS0SWDFL == "N") /* While delete save key not found*/
      TS0S122(); /* Obtain temporary storage page*/
      TS0S123(); /* locate page with key*/
    end

    if (TS0SW01.TS0SWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      TS0S122(); /* Obtain temporary storage page*/
    end

    set TS0SM001.TS0SMPGL skip; /* Display "PAGE" literal*/
    set TS0SM001.TS0SMOFL skip; /* Display "OF" literal*/

    TS0SM001.TS0SWTSP = TS0SW01.TS0SWTSP; /* Current page number*/
    set TS0SM001.TS0SWTSP skip; /* Display number*/
    TS0SM001.TA5TSQIX = TS0SW01.TA5TSQIX; /* Highest page number*/
    set TS0SM001.TA5TSQIX skip; /* Display number*/

    TS0SW01.TS0SWIXM = 1; /* Initialize line index*/
    while (TS0SW01.TS0SWIXM <= 13 /* Until end of lines*/
     && TS0SW02.TSEORIG[TS0SWIXM] != " ") /* or last line of data*/

      set TS0SM001.TS0SMSEL[TS0SWIXM] normal; /* Display select flag*/

      TS0SM001.TSEORIG[TS0SWIXM] = TS0SW02.TSEORIG[TS0SWIXM];
      TS0SM001.TS0SMFYS[TS0SWIXM] = TS0SW02.TSEOYSC[TS0SWIXM];
      TS0SM001.TS0SMFXC[TS0SWIXM] = TS0SW02.TSEOXCC[TS0SWIXM];
      TS0SM001.TS0SMFST[TS0SWIXM] = TS0SW02.TSEOXSC[TS0SWIXM];
      TS0SM001.TS0SMFCT[TS0SWIXM] = TS0SW02.TSEOCTY[TS0SWIXM];
      TS0SM001.TSEDEST[TS0SWIXM] = TS0SW02.TSEDEST[TS0SWIXM];
      TS0SM001.TS0SMTYS[TS0SWIXM] = TS0SW02.TSEDYSC[TS0SWIXM];
      TS0SM001.TS0SMTXC[TS0SWIXM] = TS0SW02.TSEDXCC[TS0SWIXM];
      TS0SM001.TS0SMTST[TS0SWIXM] = TS0SW02.TSEDXSC[TS0SWIXM];
      TS0SM001.TS0SMTCT[TS0SWIXM] = TS0SW02.TSEDCTY[TS0SWIXM];
      TS0SM001.YMTCD[TS0SWIXM] = TS0SW02.YMTCD[TS0SWIXM];
      TS0SM001.TSETRNTM[TS0SWIXM] = TS0SW02.TSETRNTM[TS0SWIXM];

      TS0SW01.TS0SWIXM = TS0SW01.TS0SWIXM + 1; /* Increment line index*/

    end
  end


end // end TS0S121

// Read temporary storage page
Function TS0S122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS0SW02.TS0SWLEN = 1027; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0S"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0SW01.TS0SWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0SW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0S122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0SM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0SM001.XXXPRCNM = "TS0S122"; /* Process name*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate Problem*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TS0S122

// Locate save key
Function TS0S123()
   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is less than or*/
   /* equal to the Change Save Key.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWSK1 == " " /* No transit time code entered*/
   && TS0SW01.TS0SWSK2 == " " 
   && TS0SW01.TS0SWSK3 == " ")
    TS0SW01.TS0SWDFL = "Y"; /* Indicate key found*/
  else

    TS0SW01.TS0SWIXM = 1; /* Initialize index*/

    while (TS0SW01.TS0SWIXM <= 13) /* Until key is found*/
      if (TS0SW02.YMTCD[TS0SWIXM] == TS0SW01.TS0SWSK3
       && TS0SW02.TSEDEST[TS0SWIXM] == TS0SW01.TS0SWSK2
       && TS0SW02.TSEORIG[TS0SWIXM] == TS0SW01.TS0SWSK1)
        set TS0SM001.TS0SMSEL[TS0SWIXM] cursor; /* Initial cursor*/
        TS0SW01.TS0SWDFL = "Y"; /* Indicate page was found*/
        TS0SW01.TS0SWSK1 = " "; /* Reset starting code*/
        TS0SW01.TS0SWSK2 = " ";
        TS0SW01.TS0SWSK3 = " ";
        return; /* stop search*/
      end
      TS0SW01.TS0SWIXM = TS0SW01.TS0SWIXM + 1; /* Increment index*/
    end
    TS0SW01.TS0SWTSP = TS0SW01.TS0SWTSP + 1; /* Increment page*/
  end


end // end TS0S123

// Check for user ? inquiry
Function TS0S124()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0SM001.TS0SMYMT == "?") /* if any ? entered*/

    if (TS0SM001.TS0SMYMT == "?") /* if ? in mode field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 MODE CODE     ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYMT01(); /* perform mode window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the mode       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0SM001.TS0SMYMT = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
      else
        TS0SM001.TS0SMYMT = " "; /* clear fields*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0SW01.TS0SWPSW = "Y"; /* bypass exit by indicating fake error*/
    exit stack;

  end


end // end TS0S124

// Check attention identifier
Function TS0S130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0SM001 initial; /* Clear the map fields*/
    TS0SW01.TS0SWSWR = "N"; /* Set request for data = n*/
    set TS0SW02 empty; /* Clear temporary storage*/

    TS0SW01.TSEORIG = " "; /* Reset screen keys*/
    TS0SW01.TSEDEST = " ";
    TS0SW01.YMTCD = " ";
    TS0SW01.TA5TSQIX = 0; /* Reset page numbers*/
    TS0SW01.TS0SWTSP = 0;

    exit stack; /* Exit to redisplay map*/
  end

  if (TS0SM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      TS0S111(); /* Purge any temporary storage*/
      set TSEREC empty; /* Clear record*/
      COMMAREA.CATOAP = TS0SM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0SM001.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/

      TSEREC.TSEORIG = TS0SW01.TSEORIG; /* Reset load keys*/
      TSEREC.TSEDEST = TS0SW01.TSEDEST;
      TSEREC.YMTCD = TS0SW01.YMTCD;

      TS0SW01.TS0SWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set TS0SM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0SM001.XXXPRCNM = "TS0S130"; /* Process name*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item*/
    TS0S111(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0SM001.XXXPRCNM = "TS0S130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0SM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0S111(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0SM001.XXXPRCNM = "TS0S130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    TS0SM001.XXXPRCNM = "TS0S130"; /* Process name*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && COMMAREA.CAADDFL == "N")     /* and user add not authorized*/
    TS0SM001.XXXPRCNM = "TS0S130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* and user chg not authorized*/
    TS0SM001.XXXPRCNM = "TS0S130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && COMMAREA.CADELFL == "N")     /* and user chg not authorized*/
    TS0SM001.XXXPRCNM = "TS0S130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

end // end TS0S130

// Reset highlighted fields
Function TS0S140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0SM001.TSEORIG initialAttributes; /* origin code*/
  set TS0SM001.TSEDEST initialAttributes; /* destination code*/
  set TS0SM001.YMTCD initialAttributes; /* mode code*/

  TS0SW01.TS0SWIXM = 1; /* Initialize line index*/

  while (TS0SW01.TS0SWIXM <= 13 /* Until end of lines*/
   && TS0SM001.TSEORIG[TS0SWIXM] != " ") /* and location exists*/
    set TS0SM001.TS0SMSEL[TS0SWIXM] normal; /* Reset select flag*/
    TS0SW01.TS0SWIXM = TS0SW01.TS0SWIXM + 1; /* Increment line index*/
  end

  set TS0SM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0SM001.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0S140

// Verify the entered data
Function TS0S150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0SM001.CAITEM > " ") /* Application data was entered*/
    set TS0SM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM001.XXXPRCNM = "TS0S150"; /* Process name*/
  end

  if (converseVar.eventKey is pf13) /* If add screen requested*/

      /* Return to previous process*/

  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0S151(); /* Verify scroll request*/
    else
      TS0S152(); /* Verify any changed data*/
    end

    if (TS0SW01.TS0SWPSW == "Y") /* Errors were found*/
      exit stack; /* Exit to redisplay map*/
    end
  end


end // end TS0S150

// Verify scroll request
Function TS0S151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0SW01.TS0SWTSP < 2)       /* and no previous pages*/
    TS0SM001.XXXPRCNM = "TS0S151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0SW01.TS0SWTSP >= TS0SW01.TA5TSQIX) /* and no more pages*/
    TS0SM001.XXXPRCNM = "TS0S151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
  end

  TS0SW01.TS0SWIXM = 13; /* Initialize line index*/

  while (TS0SW01.TS0SWIXM > 0) /* Until end of lines*/
    if (TS0SM001.TS0SMSEL[TS0SWIXM] != TS0SW02.TS0SMSEL[TS0SWIXM])
      set TS0SM001.TS0SMSEL[TS0SWIXM] cursor, modified, bold; /* Highlight*/
      TS0SM001.XXXPRCNM = "TS0S151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
      TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    end
    TS0SW01.TS0SWIXM = TS0SW01.TS0SWIXM - 1; /* Decrement line number*/
  end


end // end TS0S151

// Verify any changed data
Function TS0S152()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  TS0SW01.TS0SWSFL = "N"; /* Initialize selection flag*/
  TS0SW01.TS0SWIXM = 13; /* Initialize index*/

  while (TS0SW01.TS0SWIXM > 0) /* Until end of lines*/
    if (TS0SM001.TS0SMSEL[TS0SWIXM] != " ") /* If selection is not blank*/
      TS0SW01.TS0SWSFL = "Y"; /* Initialize selection flag*/
      if (TS0SM001.TS0SMSEL[TS0SWIXM] == "S") /* Save the key*/
         /* Next sentence*/
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
        TS0SM001.XXXPRCNM = "TS0S152"; /* Process name*/
        set TS0SM001.TS0SMSEL[TS0SWIXM] cursor, modified, bold;
        TS0SW01.TS0SWSWR = "N"; /* Set request for data*/
      end
    end
    TS0SW01.TS0SWIXM = TS0SW01.TS0SWIXM - 1; /* Increment line index*/
  end

  if (TS0SM001.TS0SMFLC == " " /* If select lines are blank*/
   && TS0SM001.TS0SMTLC == " " 
   && TS0SM001.TS0SMYMT == " " 
   && TS0SM001.TSEORIG[1] != " ")
    TS0S111(); /* Purge temporary storage*/
    TS0SW01.TS0SWSWR = "N"; /* Set request for data to no*/
    TS0SW01.TSEORIG = " "; /* Reset working storage values*/
    TS0SW01.TSEDEST = " ";
    TS0SW01.YMTCD = " ";
    exit stack; /* Exit to redisplay map*/
  else
    if (TS0SM001.TS0SMFLC == " " /* If select lines are blank*/
     && TS0SM001.TS0SMTLC == " " 
     && TS0SM001.TS0SMYMT == " " 
     && TS0SM001.TSEORIG[1] == " ") /* and no data exists*/
      converseLib.validationFailed(34); /* Set error message 'enter data'*/
      TS0SW01.TS0SWSWR = "N"; /* Set request for data to no*/
      TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
      TS0SM001.XXXPRCNM = "TS0S152"; /* Process name*/
    else
      if (TS0SM001.TS0SMFLC == TS0SW01.TSEORIG /* If no new data entered*/
       && TS0SM001.TS0SMTLC == TS0SW01.TSEDEST 
       && TS0SM001.TS0SMYMT == TS0SW01.YMTCD   
       && TS0SW01.TS0SWSFL == "N")            

         /* Continue on*/

      else
        if (TS0SM001.TS0SMFLC == TS0SW01.TSEORIG /* If no new data entered*/
         && TS0SM001.TS0SMTLC == TS0SW01.TSEDEST 
         && TS0SM001.TS0SMYMT == TS0SW01.YMTCD   
         && TS0SM001.TSEORIG[1] != " "           /* and data exists*/
         && TS0SW01.TS0SWSFL == "Y")            

           /* keep going*/

        else
          TSEREC.TSEORIG = TS0SM001.TS0SMFLC; /* save keys*/
          TSEREC.TSEDEST = TS0SM001.TS0SMTLC;
          TSEREC.YMTCD = TS0SM001.TS0SMYMT;
          TS0SW01.TS0SWSWR = "Y";
        end
      end
    end
  end


end // end TS0S152

// Process valid input request
Function TS0S160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  TS0SW01.TS0SWIFL = "N"; /* Set inquiry flag*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS0SW01.TS0SWTSP = TS0SW01.TS0SWTSP - 1; /* Decrement page number*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      TS0SW01.TS0SWTSP = TS0SW01.TS0SWTSP + 1; /* Increment page number*/
    else
      if (converseVar.eventKey is pf13) /* PF13 was pressed*/
        TS0SW01.TS0SWMAP = "2"; /* Select Map #2*/
        TS0SW01.TS0SWFSW = "A"; /* Select add function*/
        converseLib.validationFailed(0); /* Clear error message field*/
      else
        if (converseVar.eventKey is pf14 /* PF14 was pressed*/
         && TS0SW01.TS0SWSFL == "Y")     /* and selection was made*/
          TS0SW01.TS0SWMAP = "2"; /* Select Map #2*/
          TS0SW01.TS0SWFSW = "C"; /* Select change function*/
          converseLib.validationFailed(0); /* Clear error message field*/
        else
          if (converseVar.eventKey is pf14 /* PF14 was pressed*/
           && TS0SW01.TS0SWSFL == "N")     /* and selection was not made*/
            converseLib.validationFailed(53); /* error message*/
            TS0SM001.XXXPRCNM = "TS0S160"; /* Process name*/
            TS0SW01.TS0SWPSW = "Y"; /* error message*/
          else
            if (converseVar.eventKey is pf15 /* PF15 was pressed*/
             && TS0SW01.TS0SWSFL == "Y")     /* and selection was made*/
              TS0SW01.TS0SWMAP = "2"; /* Select Map #2*/
              TS0SW01.TS0SWFSW = "D"; /* Select change function*/
              converseLib.validationFailed(0); /* Clear error message field*/
            else
              if (converseVar.eventKey is pf15 /* PF15 was pressed*/
               && TS0SW01.TS0SWSFL == "N")     /* and selection was not made*/
                converseLib.validationFailed(53); /* error message*/
                TS0SM001.XXXPRCNM = "TS0S160"; /* Process name*/
                TS0SW01.TS0SWPSW = "Y"; /* error message*/
              else
                if (converseVar.eventKey is enter /* enter was pressed*/
                 && TS0SW01.TS0SWSFL == "Y"       /* and selection was made*/
                 && TS0SM001.TS0SMFLC == TS0SW01.TSEORIG
                 && TS0SM001.TS0SMTLC == TS0SW01.TSEDEST
                 && TS0SM001.TS0SMYMT == TS0SW01.YMTCD)
                  TS0SW01.TS0SWMAP = "2"; /* Select Map #2*/
                  TS0SW01.TS0SWFSW = "C"; /* Select change function*/
                  TS0SW01.TS0SWIFL = "Y"; /* Set inquiry flag*/
                  converseLib.validationFailed(0); /* Clear error message field*/
                else
                  if (converseVar.eventKey is enter /* enter was pressed*/
                   && TS0SW01.TS0SWSFL == "N"       /* and sel not was made*/
                   && TS0SM001.TS0SMFLC == TS0SW01.TSEORIG
                   && TS0SM001.TS0SMTLC == TS0SW01.TSEDEST
                   && TS0SM001.TS0SMYMT == TS0SW01.YMTCD)
                    converseLib.validationFailed(34); /* data must be entered*/
                    TS0SW01.TS0SWPSW = "Y"; /* error message*/
                    TS0SW01.TS0SWSWR = "N";
                                   /* set request for data no*/
                    set TS0SM001.TS0SMSEL[1] cursor;
                  else
                    TS0SW01.TSEORIG = TS0SM001.TS0SMFLC; /* save code*/
                    TS0SW01.TSEDEST = TS0SM001.TS0SMTLC;
                    TS0SW01.YMTCD = TS0SM001.TS0SMYMT;
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end TS0S160

// Transit Time maint add map
Function TS0S200()
   /* ------------------------------------------------------------*/
   /* This is the process used to display add map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0S210(); /* Format and display the map*/

  TS0S220(); /* Check attention identifier*/

  TS0S230(); /* Reset fields to normal intensity*/

  TS0S240(); /* Verify the entered data*/

  TS0S250(); /* Process valid input request*/


end // end TS0S200

// Format and display the map
Function TS0S210()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWPSW == "N") /* No errors*/
    set TS0SM002 initial; /* Clear map output area*/
    TS0SM002.TS0SMMSG = "PLEASE ENTER NEW TRANSIT TIME";
    TS0SM002.TS0SMFUN = " ADD  "; /* Set ADD title to map*/
  end

  TS0SM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (TS0SW01.TS0SWPSW == "Y") /* error message to display*/
    set TS0SM002 alarm; /* Indicate sound alarm*/
  end

  if (TS0SW01.TS0SWMFL == "Y") /* If add was successful*/
    converseLib.validationFailed(44); /* display a message*/
    TS0SM002.XXXPRCNM = "TS0S210"; /* Process name*/
    TS0SW01.TS0SWMFL = "N"; /* Reset message flag*/
  end

  converse TS0SM002 ;

  TS0SW01.TS0SWPSW = "N"; /* Reset problem switch*/

  TS0S211(); /* Check for user ? inquiry*/


end // end TS0S210

// Check for user ? inquiry
Function TS0S211()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0SM002.YMTCD == "?") /* if any ? entered*/

    if (TS0SM002.YMTCD == "?") /* if ? in mode field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 MODE CODE     ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYMT01(); /* perform mode window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the mode       **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0SM002.YMTCD = YMTTBL.YMTCD[XX0XWPIX]; /* move code*/
        TS0SM002.YMTDESC = YMTTBL.YMTDESC[XX0XWPIX]; /* move desc*/
      else
        TS0SM002.YMTCD = " "; /* clear fields*/
        TS0SM002.YMTDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0SW01.TS0SWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0S211

// Check attention identifier
Function TS0S220()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0SM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0SM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0SM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0SM002.CAITEM; /* Application data*/
      TS0S111(); /* Purge temporary storage*/
      XSTSS01(); /* Exit to another application*/
      if (TS0SW01.TSEORIG != " " /* If data keys were saved*/
       || TS0SW01.TSEDEST != " " 
       || TS0SW01.YMTCD != " ") 
        TS0SW01.TS0SWSWR = "Y"; /* Reset list loading*/
      end
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0SM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0SM002.XXXPRCNM = "TS0S220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0SW01.TS0SWMAP = "1"; /* Move to map 1*/
    TS0SW01.TS0SWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0SM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0S111(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0SM002.XXXPRCNM = "TS0S220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0SM002.XXXPRCNM = "TS0S220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0S220

// Reset highlighted fields
Function TS0S230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0SM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0SM002.CAITEM initialAttributes; /* Commarea application data*/
  set TS0SM002.TSETRNTM initialAttributes; /* Map fields*/
  set TS0SM002.YMTCD initialAttributes;
  set TS0SM002.TSEORIG initialAttributes;
  set TS0SM002.TSEDEST initialAttributes;


end // end TS0S230

// Verify the entered data
Function TS0S240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0SW01.TS0SWDEF = "N"; /* Initialize data entered flag*/

  if (TS0SM002.CAITEM > " ") /* Application data was entered*/
    set TS0SM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM002.XXXPRCNM = "TS0S240"; /* Process name*/
  else
    if (converseVar.eventKey is enter /* If ENTER was pressed*/
     && TS0SM002.TSETRNTM == 0        /* and no data was entered*/
     && TS0SM002.YMTCD == " "         
     && TS0SM002.TSEORIG == " "       
     && TS0SM002.TSEDEST == " ")     
      exit stack; /* Exit to redisplay map*/
    else
      TS0S241(); /* Validate input data*/
    end
  end


end // end TS0S240

// Validate any input data
Function TS0S241()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0SW01.TS0SWDEF = "Y"; /* Data has been entered*/

  if (TS0SM002.TSEDEST != " ") /* If destination entered*/
    set TSCREC empty; /* Clear record*/
    TSCREC.TSCLOCCD = TS0SM002.TSEDEST;
    TS0S242(); /* Verify location code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If location not found*/
      converseLib.validationFailed(40); /* Set error*/
      TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
      TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
      TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      set TS0SM002.TSEDEST cursor, modified, bold; /* highlight field*/
      TS0SM002.TS0SMTYS = " "; /* Clear fields*/
      TS0SM002.TS0SMTYD = " ";
      TS0SM002.TS0SMTXC = " ";
      TS0SM002.TS0SMTXD = " ";
      TS0SM002.TS0SMTST = " ";
      TS0SM002.TS0SMTSD = " ";
      TS0SM002.TS0SMTCT = " ";
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* If location found*/
       && TSCREC.XXXSTAT == "A")   /* and location is active*/
        TS0SM002.TS0SMTYS = TSCREC.YSGCD;
        TS0SM002.TS0SMTYD = TSCREC.YSGABRV;
        TS0SM002.TS0SMTXC = TSCREC.XCTCD;
        TS0SM002.TS0SMTXD = TSCREC.XCTABRV;
        TS0SM002.TS0SMTST = TSCREC.XSTCD;
        TS0SM002.TS0SMTSD = TSCREC.XSTDESC;
        TS0SM002.TS0SMTCT = TSCREC.XXXCITY;
      else
        if (SQLCA.VAGen_SQLCODE == 0 /* If location found*/
         && TSCREC.XXXSTAT == "I")   /* and location is inactive*/
          converseLib.validationFailed(40); /* Set error*/
          TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
          TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
          TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
          set TS0SM002.TSEDEST cursor, modified, bold; /* highlight field*/
          TS0SM002.TS0SMTYS = " "; /* Clear fields*/
          TS0SM002.TS0SMTYD = " ";
          TS0SM002.TS0SMTXC = " ";
          TS0SM002.TS0SMTXD = " ";
          TS0SM002.TS0SMTST = " ";
          TS0SM002.TS0SMTSD = " ";
          TS0SM002.TS0SMTCT = " ";
        end
      end
    end
  else
    converseLib.validationFailed(40); /* Set error*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
    TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set TS0SM002.TSEDEST cursor, modified, bold; /* highlight field*/
    TS0SM002.TS0SMTYS = " "; /* Clear fields*/
    TS0SM002.TS0SMTYD = " ";
    TS0SM002.TS0SMTXC = " ";
    TS0SM002.TS0SMTXD = " ";
    TS0SM002.TS0SMTST = " ";
    TS0SM002.TS0SMTSD = " ";
    TS0SM002.TS0SMTCT = " ";
  end

  if (TS0SM002.TSEORIG != " ") /* If origin entered*/
    set TSCREC empty; /* Clear record*/
    TSCREC.TSCLOCCD = TS0SM002.TSEORIG;
    TS0S242(); /* Verify location code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If location not found*/
      converseLib.validationFailed(41); /* Set error*/
      TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
      TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
      TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      set TS0SM002.TSEORIG cursor, modified, bold; /* highlight field*/
      TS0SM002.TS0SMFYS = " "; /* Clear fields*/
      TS0SM002.TS0SMFYD = " ";
      TS0SM002.TS0SMFXC = " ";
      TS0SM002.TS0SMFXD = " ";
      TS0SM002.TS0SMFST = " ";
      TS0SM002.TS0SMFSD = " ";
      TS0SM002.TS0SMFCT = " ";
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* If location found*/
       && TSCREC.XXXSTAT == "A")   /* and location is active*/
        TS0SM002.TS0SMFYS = TSCREC.YSGCD;
        TS0SM002.TS0SMFYD = TSCREC.YSGABRV;
        TS0SM002.TS0SMFXC = TSCREC.XCTCD;
        TS0SM002.TS0SMFXD = TSCREC.XCTABRV;
        TS0SM002.TS0SMFST = TSCREC.XSTCD;
        TS0SM002.TS0SMFSD = TSCREC.XSTDESC;
        TS0SM002.TS0SMFCT = TSCREC.XXXCITY;
      else
        if (SQLCA.VAGen_SQLCODE == 0 /* If location found*/
         && TSCREC.XXXSTAT == "I")   /* and location is inactive*/
          converseLib.validationFailed(41); /* Set error*/
          TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
          TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
          TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
          set TS0SM002.TSEORIG cursor, modified, bold; /* highlight field*/
          TS0SM002.TS0SMFYS = " "; /* Clear fields*/
          TS0SM002.TS0SMFYD = " ";
          TS0SM002.TS0SMFXC = " ";
          TS0SM002.TS0SMFXD = " ";
          TS0SM002.TS0SMFST = " ";
          TS0SM002.TS0SMFSD = " ";
          TS0SM002.TS0SMFCT = " ";
        end
      end
    end
  else
    converseLib.validationFailed(41); /* Set error*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
    TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set TS0SM002.TSEORIG cursor, modified, bold; /* highlight field*/
    TS0SM002.TS0SMFYS = " "; /* Clear fields*/
    TS0SM002.TS0SMFYD = " ";
    TS0SM002.TS0SMFXC = " ";
    TS0SM002.TS0SMFXD = " ";
    TS0SM002.TS0SMFST = " ";
    TS0SM002.TS0SMFSD = " ";
    TS0SM002.TS0SMFCT = " ";
  end

  if (TS0SM002.YMTCD == " ") /* If mode is entered*/
    converseLib.validationFailed(42); /* Display error message*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
    TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0SM002.YMTDESC = " "; /* Clear description*/
    set TS0SM002.YMTCD cursor, modified, bold; /* highlight field*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0SM002.YMTCD in YMTTBL.YMTCD) /* Check valid mode*/
    end

    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YMTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(42); /* Display error message*/
      TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
      TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
      TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0SM002.YMTDESC = " "; /* Clear description*/
      set TS0SM002.YMTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0SM002.YMTDESC = YMTTBL.YMTDESC[sysVar.arrayIndex];
    end
  end

  if (TS0SM002.TSETRNTM < 0) /* If time not entered or lt 0*/
    converseLib.validationFailed(43); /* Display error message*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM002.XXXPRCNM = "TS0S241"; /* Process name*/
    TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set TS0SM002.TSETRNTM cursor, modified, bold; /* highlight field*/
  end

   /* *************************************************************/
   /* Commented out on 9/12/90.  Edit no longer needed to*/
   /* not allow duplicate destination and origin.*/
   /* *************************************************************/
   /* IF TS0SW01.TS0SWPSW EQ 'N'      ; If no errors*/
    /* AND TS0SM002.TSEORIG EQ TS0SM002.TSEDEST; and dest eq orig*/
    /* MOVE 67 TO EZEMNO             ; Display error message*/
    /* MOVE 'Y' TO TS0SW01.TS0SWPSW  ; Indicate problem*/
    /* MOVE 'TS0S241' TO TS0SM002.XXXPRCNM  ; Process name*/
    /* MOVE 'PLEASE CORRECT FIELDS IN ERROR' TO TS0SM002.TS0SMMSG*/
    /* SET TS0SM002.TSEORIG CURSOR,MODIFIED,BRIGHT; highlight fld*/
    /* SET TS0SM002.TSEDEST MODIFIED,BRIGHT;*/
   /* END ;*/


end // end TS0S241

// Select location table row
Function TS0S242()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0S242"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0SM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0SM001.XXXPRCNM = "TS0S242"; /* Process name*/
  end


end // end TS0S242

// Process valid input request
Function TS0S250()
   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the agent.*/
   /* If found then display message that this row exists in*/
     /* either active or inactive status.*/
   /* If not found then add the row.*/
   /* ------------------------------------------------------------*/

  set TSEREC empty; /* clear record*/

  TSEREC.YMTCD = TS0SM002.YMTCD; /* move keys*/
  TSEREC.TSEORIG = TS0SM002.TSEORIG;
  TSEREC.TSEDEST = TS0SM002.TSEDEST;
  if (converseVar.eventKey is enter /* Enter was pressed*/
   && TS0SW01.TS0SWDEF == "Y"       /* and data was entered*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    if (TS0SW01.TS0SWWFL == "N") /* if no confirmation sent*/
      converseLib.validationFailed(170);
      TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
      TS0SW01.TS0SWWFL = "Y"; /* set warning flag*/
      TS0SM002.TS0SMMSG = " "; /* Clear message field*/
    else
      TS0SW01.TS0SWWFL = "N"; /* reset warning flag*/
      TS0S251(); /* Select  table row*/
      if (SQLCA.VAGen_SQLCODE != 100) /* If row exists*/
        converseLib.validationFailed(52);
        TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
        TS0SM002.XXXPRCNM = "TS0S250"; /* Process name*/
        TS0SW01.TS0SWSWR = "Y"; /* Set request for data switch*/
        set TS0SM002.YMTCD cursor, modified, bold; /* Set cursor*/
        set TS0SM002.TSEORIG modified, bold;
        set TS0SM002.TSEDEST modified, bold;
      end
      if (TS0SW01.TS0SWPSW == "N") /* No errors exist*/
        TS0S252(); /* Add the new table row*/
        TS0SW01.TS0SWSK1 = TS0SM002.TSEORIG; /* Save locate keys*/
        TS0SW01.TS0SWSK2 = TS0SM002.TSEDEST;
        TS0SW01.TS0SWSK3 = TS0SM002.YMTCD;
        TS0SW01.TS0SWMFL = "Y"; /* Set message flag to yes*/
      end
    end
  end

  if (TS0SW01.TS0SWPSW == "N") /* No errors exist*/
    set TSEREC empty; /* Clear record*/
    TS0SW01.TSEORIG = TS0SM002.TSEORIG;
    TS0SW01.TSEDEST = " ";
    TS0SW01.YMTCD = " ";
    TS0SW01.TS0SWSWR = "Y"; /* Set request for data switch*/
    set TS0SM002 initial; /* Clear map*/
  end


end // end TS0S250

// Select transit time table row
Function TS0S251()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the agent table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2360" ("S ", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0S251"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0SM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0SW01.TS0SWPSW = "Y"; /* Indicate Problem*/
    TS0SM001.XXXPRCNM = "TS0S251"; /* Process name*/
  end


end // end TS0S251

// Add transit time table row
Function TS0S252()
   /* ------------------------------------------------------------*/
   /* This module adds an agent table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  TSEREC.TSETRNTM = TS0SM002.TSETRNTM; /* transit time*/
  TSEREC.YMTCD = TS0SM002.YMTCD;
  if (TS0SM002.YMTCD in YMTTBL.YMTCD)
    TSEREC.YMTABRV = YMTTBL.YMTABRV[sysVar.arrayIndex];
  end
  TSEREC.TSEORIG = TS0SM002.TSEORIG;
  TSEREC.TSEOYSC = TS0SM002.TS0SMFYS;
  TSEREC.TSEOYSA = TS0SM002.TS0SMFYD;
  TSEREC.TSEOXCC = TS0SM002.TS0SMFXC;
  TSEREC.TSEOXCA = TS0SM002.TS0SMFXD;
  TSEREC.TSEOXSC = TS0SM002.TS0SMFST;
  TSEREC.TSEOXSD = TS0SM002.TS0SMFSD;
  TSEREC.TSEOCTY = TS0SM002.TS0SMFCT;
  TSEREC.TSEDEST = TS0SM002.TSEDEST;
  TSEREC.TSEDYSC = TS0SM002.TS0SMTYS;
  TSEREC.TSEDYSA = TS0SM002.TS0SMTYD;
  TSEREC.TSEDXCC = TS0SM002.TS0SMTXC;
  TSEREC.TSEDXCA = TS0SM002.TS0SMTXD;
  TSEREC.TSEDXSC = TS0SM002.TS0SMTST;
  TSEREC.TSEDXSD = TS0SM002.TS0SMTSD;
  TSEREC.TSEDCTY = TS0SM002.TS0SMTCT;
  /* Y2K CHANGE*/
  /* MOVE EZEDTE TO TS0SW01.TS0SWYMD;*/
  XX0XS01();
  TS0SW01.TS0SWDTE = XX0XW01.XX0XWDAT;
  /* Y2K CHANGE*/
  TSEREC.ZZZCHGDT = TS0SW01.TS0SWDTE;
  TSEREC.ZZZCHGCT = 0; /* Change count*/

  call "IO2360" ("A ", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0S252"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0SM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0SM001.XXXPRCNM = "TS0S252"; /* Process name*/
  end


end // end TS0S252

// Transit time chg/inq map
Function TS0S300()
   /* ------------------------------------------------------------*/
   /* This is the process to display a change map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0S310(); /* Obtain the data to display*/

  TS0S320(); /* Format and display the map*/

  TS0S330(); /* Check attention identifier*/

  TS0S340(); /* Reset Highlighted fields*/

  TS0S350(); /* Verify the entered data*/

  TS0S360(); /* Process valid input request*/


end // end TS0S300

// Obtain the data to display
Function TS0S310()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on transit time browse map.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWPSW == "N" /* No errors*/
   || TS0SW01.TS0SWURF == "Y") /* or update reload flag is yes*/
    TSEREC.TSEORIG = TS0SM001.TSEORIG[TS0SWIXM]; /* Origin*/
    TSEREC.TSEDEST = TS0SM001.TSEDEST[TS0SWIXM]; /* Destination*/
    TSEREC.YMTCD = TS0SM001.YMTCD[TS0SWIXM]; /* Mode code*/
    TS0SW01.TS0SWSK1 = TS0SM001.TSEORIG[TS0SWIXM]; /* save keys*/
    TS0SW01.TS0SWSK2 = TS0SM001.TSEDEST[TS0SWIXM];
    TS0SW01.TS0SWSK3 = TS0SM001.YMTCD[TS0SWIXM];
    TS0S251(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If selection was successful*/

      /* continue*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* selection was unsuccesful*/
        TS0SW01.TS0SWMAP = "1"; /* set to map 1*/
        TS0SW01.TS0SWSWR = "Y"; /* reload data*/
        converseLib.validationFailed(69); /* set error*/
        exit stack; /* exit to redisplay map*/
      end
    end
  end


end // end TS0S310

// Format and display the map
Function TS0S320()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWPSW == "N") /* No error*/
    set TS0SM002 initial; /* Clear map output area*/
    set TS0SM002.TSETRNTM cursor; /* set cursor*/
    TS0SM002.TS0SMFUN = "CHANGE"; /* Move change literal to map*/
    TS0SM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TS0SM002.TSETRNTM = TSEREC.TSETRNTM; /* move table values*/
    TS0SM002.YMTCD = TSEREC.YMTCD;
    if (TSEREC.YMTCD in YMTTBL.YMTCD)
      TS0SM002.YMTDESC = YMTTBL.YMTDESC[sysVar.arrayIndex];
    end
    TS0SM002.TSEORIG = TSEREC.TSEORIG;
    TS0SM002.TS0SMFYS = TSEREC.TSEOYSC;
    TS0SM002.TS0SMFYD = TSEREC.TSEOYSA;
    TS0SM002.TS0SMFXC = TSEREC.TSEOXCC;
    TS0SM002.TS0SMFXD = TSEREC.TSEOXCA;
    TS0SM002.TS0SMFST = TSEREC.TSEOXSC;
    TS0SM002.TS0SMFSD = TSEREC.TSEOXSD;
    TS0SM002.TS0SMFCT = TSEREC.TSEOCTY;
    TS0SM002.TSEDEST = TSEREC.TSEDEST;
    TS0SM002.TS0SMTYS = TSEREC.TSEDYSC;
    TS0SM002.TS0SMTYD = TSEREC.TSEDYSA;
    TS0SM002.TS0SMTXC = TSEREC.TSEDXCC;
    TS0SM002.TS0SMTXD = TSEREC.TSEDXCA;
    TS0SM002.TS0SMTST = TSEREC.TSEDXSC;
    TS0SM002.TS0SMTSD = TSEREC.TSEDXSD;
    TS0SM002.TS0SMTCT = TSEREC.TSEDCTY;
  end

  if (COMMAREA.CACHGFL == "N" /* if only inquire capabilities*/
   || TS0SW01.TS0SWIFL == "Y") /* or inquiry flag is set*/
    TS0SM002.TS0SMFUN = "INQUIRE"; /* Move inquire literal to map*/
    set TS0SM002.TSETRNTM protect; /* Set all fields non-modifiable*/
  end

  if (TS0SW01.TS0SWPSW == "N" /* No error*/
   && TS0SW01.TS0SWIFL == "Y") /* and inquiry flag is set*/
    set TS0SM002.CATOAP cursor; /* Set cursor*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set TS0SM002 alarm;
  end

  set TS0SM002.YMTCD protect; /* Protect key fields*/
  set TS0SM002.TSEORIG protect;
  set TS0SM002.TSEDEST protect;

  converse TS0SM002 ;

  TS0SW01.TS0SWPSW = "N"; /* Initialize problem switch*/

  TS0S211(); /* Check for ? inquiry by the user*/


end // end TS0S320

// Check attention identifier
Function TS0S330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0SM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0SM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0SM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0SM002.CAITEM; /* Application data*/
      TS0S111(); /* Purge temporary storage*/
      XSTSS01(); /* Exit to another application*/
      TS0SW01.TS0SWSWR = "Y"; /* Reset list loading*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0SM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0SM002.XXXPRCNM = "TS0S330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0SW01.TS0SWMAP = "1"; /* Move to map 1*/
    TS0SW01.TS0SWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0SM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0S111(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0SM002.XXXPRCNM = "TS0S330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0SM002.XXXPRCNM = "TS0S330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0S330

// Reset highlighted fields
Function TS0S340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0SM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0SM002.CAITEM initialAttributes; /* Commarea application data*/
  set TS0SM002.TSETRNTM initialAttributes; /* Map fields*/
  set TS0SM002.YMTCD initialAttributes;
  set TS0SM002.TSEORIG initialAttributes;
  set TS0SM002.TSEDEST initialAttributes;


end // end TS0S340

// Verify the entered data
Function TS0S350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0SW01.TS0SWDEF = "N"; /* Initialize data entered flag*/

  if (TS0SM002.CAITEM > " ") /* Application data was entered*/
    set TS0SM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM002.XXXPRCNM = "TS0S240"; /* Process name*/
  else
    if (converseVar.eventKey is enter /* If ENTER was pressed*/
     && TS0SM002.TSETRNTM == TSEREC.TSETRNTM) /* and no data was entered*/
      TS0SM001.TS0SMSEL[TS0SWIXM] = " "; /* Clear selection*/
      exit stack; /* Exit to redisplay map*/
    else
      TS0S351(); /* Validate input data*/
    end
  end


end // end TS0S350

// Validate any input data
Function TS0S351()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0SW01.TS0SWDEF = "Y"; /* Data has been entered*/

  if (TS0SM002.TSETRNTM < 0) /* If time not entered or lt 0*/
    converseLib.validationFailed(43); /* Display error message*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM002.XXXPRCNM = "TS0S351"; /* Process name*/
    TS0SM002.TS0SMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    set TS0SM002.TSETRNTM cursor, modified, bold; /* highlight field*/
  end


end // end TS0S351

// Process valid input request
Function TS0S360()
   /* ------------------------------------------------------------*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWPSW == "Y") /* errors occurred*/
    exit stack;
  else
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && TS0SW01.TS0SWPSW == "N"       /* and no errors*/
     && TS0SW01.TS0SWIFL == "N"       /* and not inquiry*/
     && TS0SW01.TS0SWDEF == "Y")      /* and data was entered*/

      TSEREC.TSETRNTM = TS0SM002.TSETRNTM; /* transit time*/
      TSEREC.YMTCD = TS0SM002.YMTCD;
      TSEREC.TSEORIG = TS0SM002.TSEORIG;
      TSEREC.TSEOYSC = TS0SM002.TS0SMFYS;
      TSEREC.TSEOYSA = TS0SM002.TS0SMFYD;
      TSEREC.TSEOXCC = TS0SM002.TS0SMFXC;
      TSEREC.TSEOXCA = TS0SM002.TS0SMFXD;
      TSEREC.TSEOXSC = TS0SM002.TS0SMFST;
      TSEREC.TSEOXSD = TS0SM002.TS0SMFSD;
      TSEREC.TSEOCTY = TS0SM002.TS0SMFCT;
      TSEREC.TSEDEST = TS0SM002.TSEDEST;
      TSEREC.TSEDYSC = TS0SM002.TS0SMTYS;
      TSEREC.TSEDYSA = TS0SM002.TS0SMTYD;
      TSEREC.TSEDXCC = TS0SM002.TS0SMTXC;
      TSEREC.TSEDXCA = TS0SM002.TS0SMTXD;
      TSEREC.TSEDXSC = TS0SM002.TS0SMTST;
      TSEREC.TSEDXSD = TS0SM002.TS0SMTSD;
      TSEREC.TSEDCTY = TS0SM002.TS0SMTCT;
  /* Y2K CHANGE*/
  /* MOVE EZEDTE TO TS0SW01.TS0SWYMD;*/
      XX0XS01();
      TS0SW01.TS0SWDTE = XX0XW01.XX0XWDAT;
  /* Y2K CHANGE*/
      TSEREC.ZZZCHGDT = TS0SW01.TS0SWDTE;


      TS0S361(); /* Update table*/

      TS0SW01.TS0SWURF = "N"; /* Initialize upd reload flag*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the update*/
        TS0SW01.TS0SWMFL = "Y"; /* Set message flag to yes*/
        TS0SW01.TS0SWSWR = "Y"; /* Set request for data switch*/
        set TS0SM002 initial; /* Clear map area*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row was not found*/
          converseLib.validationFailed(12); /* update error occured*/
          TS0SM002.XXXPRCNM = "TS0S360"; /* Process name*/
          TS0SW01.TS0SWURF = "Y"; /* Set update reload flag*/
          TS0SW01.TS0SWSWR = "Y"; /* Set request for data switch*/
          exit stack; /* exit to redisplay map*/
        end
      end

    end
  end
  if (TS0SW01.TS0SWPSW == "N") /* IF no errors occured*/
    TSEREC.YMTCD = TS0SM002.YMTCD; /* Save reload keys*/
    TSEREC.TSEORIG = TS0SM002.TSEORIG;
    TSEREC.TSEDEST = TS0SM002.TSEDEST;
    TS0SM001.TS0SMSEL[TS0SWIXM] = " "; /* Set blank to select*/
  else
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0S360

// Updated selected row
Function TS0S361()
   /* ------------------------------------------------------------*/
   /* Update the agent row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2360" ("U ", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0SW01.TS0SWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0SW01.TS0SWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0SW01.TS0SWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0S361"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0SM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0SM001.XXXPRCNM = "TS0S361"; /* Process name*/

    end
  end


end // end TS0S361

// Transit Time Delete Map
Function TS0S400()
   /* ------------------------------------------------------------*/
   /* This is the process to display a delete map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0S410(); /* Obtain the data to display*/

  TS0S420(); /* Format and display the map*/

  TS0S430(); /* Check attention identifier*/

  TS0S440(); /* Reset Highlighted fields*/

  TS0S450(); /* Verify the entered data*/

  TS0S460(); /* Process valid input request*/


end // end TS0S400

// Obtain the data to display
Function TS0S410()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on Transit time browse map.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWPSW == "N" /* No errors*/
   || TS0SW01.TS0SWURF == "Y") /* or update reload flag is yes*/
    TSEREC.TSEORIG = TS0SM001.TSEORIG[TS0SWIXM]; /* Origin*/
    TSEREC.TSEDEST = TS0SM001.TSEDEST[TS0SWIXM]; /* Destination*/
    TSEREC.YMTCD = TS0SM001.YMTCD[TS0SWIXM]; /* Mode code*/
    TS0S251(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If selection was successful*/

      /* continue*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* selection was unsuccesful*/
        TS0SW01.TS0SWSIX = TS0SW01.TS0SWSIX - 1; /* decrement save index*/
        TS0SW01.TS0SWMAP = "1"; /* set to map 1*/
        TS0SW01.TS0SWSWR = "Y"; /* reload data*/
        converseLib.validationFailed(69); /* set error*/
        exit stack; /* exit to redisplay map*/
      end
    end
  end


end // end TS0S410

// Format and display the map
Function TS0S420()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWPSW == "N") /* No error*/
    set TS0SM002 initial; /* Clear map output area*/
    set TS0SM002.CATOAP cursor;
    TS0SM002.TS0SMMSG = "PRESS ENTER TO DELETE OR PF3 TO ABORT";
    TS0SM002.TS0SMFUN = "DELETE"; /* Move change literal to map*/
    TS0SM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TS0SM002.TSETRNTM = TSEREC.TSETRNTM; /* move table values*/
    TS0SM002.YMTCD = TSEREC.YMTCD;
    if (TSEREC.YMTCD in YMTTBL.YMTCD)
      TS0SM002.YMTDESC = YMTTBL.YMTDESC[sysVar.arrayIndex];
    end
    TS0SM002.TSEORIG = TSEREC.TSEORIG;
    TS0SM002.TS0SMFYS = TSEREC.TSEOYSC;
    TS0SM002.TS0SMFYD = TSEREC.TSEOYSA;
    TS0SM002.TS0SMFXC = TSEREC.TSEOXCC;
    TS0SM002.TS0SMFXD = TSEREC.TSEOXCA;
    TS0SM002.TS0SMFST = TSEREC.TSEOXSC;
    TS0SM002.TS0SMFSD = TSEREC.TSEOXSD;
    TS0SM002.TS0SMFCT = TSEREC.TSEOCTY;
    TS0SM002.TSEDEST = TSEREC.TSEDEST;
    TS0SM002.TS0SMTYS = TSEREC.TSEDYSC;
    TS0SM002.TS0SMTYD = TSEREC.TSEDYSA;
    TS0SM002.TS0SMTXC = TSEREC.TSEDXCC;
    TS0SM002.TS0SMTXD = TSEREC.TSEDXCA;
    TS0SM002.TS0SMTST = TSEREC.TSEDXSC;
    TS0SM002.TS0SMTSD = TSEREC.TSEDXSD;
    TS0SM002.TS0SMTCT = TSEREC.TSEDCTY;
  end

  TS0SM002.TS0SMFUN = "DELETE"; /* Move change literal to map*/
  TS0SM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  set TS0SM002.TSETRNTM protect; /* Set all fields non-modifiable*/
  set TS0SM002.YMTCD protect;
  set TS0SM002.TSEORIG protect;
  set TS0SM002.TSEDEST protect;

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set TS0SM002 alarm;
  end

  converse TS0SM002 ;

  TS0SW01.TS0SWPSW = "N"; /* Initialize problem switch*/

end // end TS0S420

// Check attention identifier
Function TS0S430()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0SM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0SM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0SM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0SM002.CAITEM; /* Application data*/
      TS0S111(); /* Purge temporary storage*/
      XSTSS01(); /* Exit to another application*/
      TS0SW01.TS0SWTSP = TS0SW01.TS0SWSPG; /* reset current page*/
      TS0SW01.TS0SWSWR = "Y"; /* Reset list loading*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0SM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0SM002.XXXPRCNM = "TS0S430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0SW01.TS0SWMAP = "1"; /* Move to map 1*/
    TS0SW01.TS0SWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0SM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0S111(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0SM002.XXXPRCNM = "TS0S430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0SM002.XXXPRCNM = "TS0S430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0S430

// Reset highlighted fields
Function TS0S440()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0SM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0SM002.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0S440

// Verify the entered data
Function TS0S450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0SM002.CAITEM > " ") /* Application data was entered*/
    set TS0SM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0SW01.TS0SWPSW = "Y"; /* Indicate problem*/
    TS0SM002.XXXPRCNM = "TS0S450"; /* Process name*/
  end


end // end TS0S450

// Process valid input request
Function TS0S460()
   /* ------------------------------------------------------------*/
   /* If no errors then delete.*/
   /* ------------------------------------------------------------*/

  if (TS0SW01.TS0SWPSW == "Y") /* errors occurred*/
    exit stack;
  else
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && TS0SW01.TS0SWPSW == "N")      /* and no errors*/

      TSEREC.TSEORIG = TS0SM002.TSEORIG; /* move in fields*/
      TSEREC.TSEDEST = TS0SM002.TSEDEST;
      TSEREC.YMTCD = TS0SM002.YMTCD;

      TS0S461(); /* Delete table row*/

      TS0SW01.TS0SWURF = "N"; /* Initialize upd reload flag*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the update*/
        TS0SW01.TS0SWSIX = TS0SW01.TS0SWSIX - 1; /* decrement save index*/
        TS0SW01.TS0SWMFL = "Y"; /* Set message flag to yes*/
        TS0SW01.TS0SWSWR = "Y"; /* Set request for data switch*/
        TS0SM001.TS0SMSEL[TS0SWIXM] = " "; /* Set blank to select*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row was not found*/
          converseLib.validationFailed(69); /* update error occured*/
          TS0SM002.XXXPRCNM = "TS0S460"; /* Process name*/
          TS0SW01.TS0SWURF = "Y"; /* Set update reload flag*/
          TS0SW01.TS0SWSWR = "Y"; /* Set request for data switch*/
          exit stack; /* exit to redisplay map*/
        end
      end

      if (TS0SW01.TS0SWPSW == "N") /* IF no errors occured*/
        TSEREC.TSEORIG = TS0SW01.TSEORIG; /* set load fields*/
        TSEREC.TSEDEST = TS0SW01.TSEDEST;
        TSEREC.YMTCD = TS0SW01.YMTCD;
        set TS0SM002 initial; /* Clear map area*/
      else
        exit stack; /* Exit to redisplay map*/
      end
    end
  end


end // end TS0S460

// delete selected row
Function TS0S461()
   /* ------------------------------------------------------------*/
   /* Delete the agent table row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2360" ("D ", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0SW01.TS0SWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0SW01.TS0SWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0SW01.TS0SWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0S461"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0SM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0SM001.XXXPRCNM = "TS0S461"; /* Process name*/

    end
  end


end // end TS0S461

//*** RECORD=TS0SW01 ****
// Working storage for TS0d - Agent Inquiry/Maintenance
// ***********************
Record TS0SW01 type basicRecord
  10 TS0SWIXM TS0SWIXM ; 
  10 TS0SWSIX TS0SWSIX ; 
  10 TS0SWSWC TS0SWSWC ; 
  10 TS0SWPSW TS0SWPSW ; 
  10 TS0SWSWR TS0SWSWR ; 
  10 TS0SWTSP TS0SWTSP ; 
  10 TS0SWSPG TS0SWSPG ; 
  10 TS0SWMAP TS0SWMAP ; 
  10 TS0SWFSW TS0SWFSW ; 
  10 TS0SWSK1 TS0SWSK1 ; 
  10 TS0SWSK2 TS0SWSK2 ; 
  10 TS0SWSK3 TS0SWSK3 ; 
  10 TSEORIG TSEORIG ; 
  10 TSEDEST TSEDEST ; 
  10 YMTCD YMTCD ; 
  10 TS0SWSFL TS0SWSFL ; 
  10 TS0SWMFL TS0SWMFL ; 
  10 TS0SWURF TS0SWURF ; 
  10 TS0SWDEF TS0SWDEF ; 
  10 TS0SWIFL TS0SWIFL ; 
  10 TS0SWDFL TS0SWDFL ; 
  10 TS0SWWFL TS0SWWFL ; 
  10 TS0SWDTE TS0SWDTE ; 
    15 TS0SWCEN TS0SWCEN ; 
    15 TS0SWYMD TS0SWYMD ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end TS0SW01

//*** RECORD=TS0SW02 ****
// Temporary storage record for TS0d - Agent Inquiry/Maint.
// ***********************
Record TS0SW02 type basicRecord
  10 TS0SWLEN TS0SWLEN ; 
  10 TS0SWLIN TS0SWLIN [13] ; 
    15 TS0SMSEL TS0SMSEL ; 
    15 TSEORIG TSEORIG ; 
    15 TSEOYSC TSEOYSC ; 
    15 TSEOXSC TSEOXSC ; 
    15 TSEOXCC TSEOXCC ; 
    15 TSEOCTY TSEOCTY ; 
    15 TSEDEST TSEDEST ; 
    15 TSEDYSC TSEDYSC ; 
    15 TSEDXSC TSEDXSC ; 
    15 TSEDXCC TSEDXCC ; 
    15 TSEDCTY TSEDCTY ; 
    15 YMTCD YMTCD ; 
    15 TSETRNTM TSETRNTM ; 
end // end TS0SW02

// selection field
DataItem TS0SMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working century
DataItem TS0SWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Entered Flag
DataItem TS0SWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete flag
DataItem TS0SWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working date
DataItem TS0SWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Add/delete function switch
DataItem TS0SWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry flag
DataItem TS0SWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0SWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS0SWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0SWLIN char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0SWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Message flag
DataItem TS0SWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0SWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem TS0SWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save index
DataItem TS0SWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Save Key1
DataItem TS0SWSK1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save Key2
DataItem TS0SWSK2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save Key3
DataItem TS0SWSK3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save page
DataItem TS0SWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0SWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0SWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS0SWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Update reload flag
DataItem TS0SWURF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag
DataItem TS0SWWFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working year month day
DataItem TS0SWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

