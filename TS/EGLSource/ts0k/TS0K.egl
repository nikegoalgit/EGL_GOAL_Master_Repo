package ts0k;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0K ****
// This program allows users to pull up shipment information
// sorted in Container/Style sequence for a specific Carrier
// or Forwarder within an ETA Date Range.  Craft, Shipment
// Number, and Destination can also be entered to further
// specify the number of shipment rows in this inquiry.
// 
// CONTROL    DATE    NAME   DESCRIPTION OF CHANGE
// -------  -------- ------  ----------------------------------
//          05/09/88 CEPPLE  New application.
//          05/29/90 CEPPLE  Fix map so cursor autoskips
//                           to next field.
//                           Get rid of suppression past status
// TS#006   07/20/90 CEPPLE  Add b/l and container selections
// TS#017                    to the map.  Set these up so that
// TS#036                    User can indicate 'like' function
//                           by ending entered string with '*'.
//                           Fix edits to allow both carrier
//                           and forwarder to be entered.
// TS#012   08/06/90 CEPPLE  User can now specify gpc in header
//                           selection criteria.
// Fix      08/16/90 CEPPLE  Clear TSWREC from application and
//                           inquiry flag in initialization.
// TS#5     10/02/90 SPOPA   Use TSHNKCNX array in TS7REC.
// TS#015   11/14/90 KSTOKK  Increase allowable ETA date range
//                           from 31 to 95 days.
// TS#135   12/03/90 KSTOKK  Increase current temporary storage
//                           page number from two to four
//                           bytes.
// TS#146   12/17/90 DHUFFM  Fix to carry information to ts0j.
// TS#000   02/13/91 KSTOKK  Increase TS0KWLIN length from 77
//                           to 81.
// TS#000   03/05/91 DHUFFM  Increase TS0KWLEN for BOL increase
// TS#212   10/14/91 DHUFFM  Chg to right/left inq screens.
// TS#242   03/16/92 KSTOKK  Fix to carry map header info from
//                           left to right map and back again
//                           and give msg if no data available
//                           or invalid data found and allow
//                           fast path from map 2.
// TS#256   08/20/92 RCHINI  Fix PF7 and PF8 problem when
//                           trying to page forward with no
//                           more pages and then selecting with
//                           PF12.  Data was not getting sent
//                           to transfer program in this case.
// TS#246   09/08/92 RCHINI  Change key fields edit.  The user
//                           has to enter 1 of 4 fields to
//                           obtain the data to be displayed.
//                           1.  Carrier
//                           2.  Freight Forwarder
//                           3.  BOL
//                           4.  Container
//                           Any 1 of these fields will bring
//                           back data to be displayed.  Also
//                           changed select from S2 to S8 for
//                           reading DTRANS.VSHPHD02 table.
//                           Modified map 2.  On the detail
//                           lines of map 2, I removed the ETA
//                           and replaced the ETA with the
//                           carrier code.
// TS#246   10/05/92 SFORD   Fixed 'S' Stealthy problem by
//                           initializing maps.
// TS#246   10/06/92 SFORD   Noticed some commented code and
//                           removed it.
// TS#260   12/05/92 TGIEBE  Disabled access to application
//                           TS0J when PF12 pressed and no
//                           shipment detail info selected.
// TS#000   04/17/95 SLEWIS  SO. SIZE CHANGE
// TS#000   11/07/96 JCARL1  Remove alarm from msg display.
//          03/05/97 LWILS2  Added a working storage ts0kw03 to
//                           get the count of the vshphd02 recs
//                           on a wildcard select.
//                           Added a select count module to
//                           keep this program from scanning
//                           the ship header database when
//                           there are more than 50 pages of
//                           records to display.
//          03/27/97 Lwils2  Added a query for xgp_gpc_cd on
//                           IO5240 call for both the select
//                           count and the scan-8.
// TS#000   06/27/00 NKUMAR  Remove the count application
//                           before vshphd02 fetch.
// 
// 
// *********************
Program TS0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC3REC PC3REC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS0KW01 TS0KW01; // record
  TS0KW02 TS0KW02; // record
  TS0KW03 TS0KW03; // record
  TS7REC TS7REC; // record
  TSCREC TSCREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use TS0KM.TS0KM001,  // forms
      TS0KM.TS0KM002, 
      TS0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Schedule Inquiry.*/
     /* ------------------------------------------------------------*/

    set TSNREC empty; /* Initialize records*/
    set TS7REC empty;
    set TSCREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set ERRSQLCA empty;
    set SQLCA empty;
    set TS0KW01 empty; /* Initialize working storage*/
    set TS0KW02 empty; /* Initialize temporary storage*/
    set TS0KM001 initial; /* Initialize map output area*/
    set TS0KM002 initial; /* Initialize map output area*/

    TS0KW01.TS0KWSWR = "N"; /* Indicate request for data*/
    TS0KW01.TS0KWSWM = "1"; /* Set map #1*/
    TS0KW01.TS0KWMXP = 10; /* set max number of passed shipment #s*/

    TSWREC.TSWFRAPP = " "; /* Clear from application*/
    TSWREC.TSWINQFL = " "; /* Clear inquiry flag*/
    TS0KW01.TS0KWIXM = 1; /* set index*/
    while (TS0KW01.TS0KWIXM <= TS0KW01.TS0KWMXP) /* while le max pass lines*/
      TSWREC.TSWSHPID[TS0KWIXM] = 0; /* clear all pass fields*/
      TSWREC.TSWBOL[TS0KWIXM] = " ";
      TSWREC.TSWCARCD[TS0KWIXM] = " ";
      TSWREC.TSWCRAFT[TS0KWIXM] = " ";
      TSWREC.TSWSHPNB[TS0KWIXM] = " ";
      TSWREC.TSWORIG[TS0KWIXM] = " ";
      TSWREC.TSWDEST[TS0KWIXM] = " ";
      TSWREC.TSWXWHCD[TS0KWIXM] = " ";
      TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* incr index*/
    end

    goto TS0K001; /* Converse Trans. Schedule Inquiry*/


    TS0K001: TS0K001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment Carrier Inquiry.       .*/
     /* ------------------------------------------------------------*/

    goto TS0K001; /* Converse Shipment Carrier Inquiry*/


  end // end main
end // end TS0K

// Shipment carrier inquiry
Function TS0K001()
   /* ------------------------------------------------------------*/

                /* SHIPMENT CARRIER INQUIRY*/

   /* This is the main process used to display the schedule map.*/
   /* Processing always return to the top of this group.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0KW01.TS0KWSWR == "Y" /* If request for data is yes*/
   && TS0KW01.TS0KWPSW == "N") /* and no errors*/
    TS0K100(); /* Obtain the data to display*/
  end

  if (TS0KW01.TS0KWSWM == "1") /* Map 1 is requested*/
    TS0K200(); /* Format and display map 1*/
  else
    if (TS0KW01.TS0KWSWM == "2") /* Map 2 is requested*/
      TS0K250(); /* Format and display map 2*/
    end
  end

  TS0K300(); /* Check attention identifier*/

  TS0K400(); /* Reset fields to normal intensity*/

  if (TS0KW01.TS0KWSWM == "1") /* Map 1 is requested*/
    TS0K500(); /* Verify map 1 entered data*/
  else
    if (TS0KW01.TS0KWSWM == "2") /* Map 2 is requested*/
      TS0K550(); /* Verify map 2 entered data*/
    end
  end

  TS0K600(); /* Process valid input request*/


end // end TS0K001

// Obtain the data to display
Function TS0K100()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move valid screen parameters to TSNREC fields.*/
   /* 2) Select sets and open cursors for DTRANS.VSHPHD02.*/
   /* 3) Fetch rows from SHIPMENT HEADER table.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Initialize records*/
  set TS7REC empty; /* Initialize records*/
  set TS0KW03 empty; /* Initialize records*/

  if (TS0KW01.TS0KWSWM == "2")
    if (TS0KM002.TS0KMCAR == " ") /* if the carrier has not been entered*/
      TS7REC.TSACARCD = "*"; /* wild card the carrier*/
    else
      TS7REC.TSACARCD = TS0KM002.TS0KMCAR;
    end
  else
    if (TS0KM001.TS0KMCAR == " ") /* if the carrier has not been entered*/
      TS7REC.TSACARCD = "*"; /* wild card the carrier*/
    else
      TS7REC.TSACARCD = TS0KM001.TS0KMCAR;
    end
  end

  TSNREC.TSNBEGDT = TS0KW01.TSNBEGDT;
  TS0KW03.TSCBEGDT = TS0KW01.TSNBEGDT;
  TSNREC.TSNENDDT = TS0KW01.TSNENDDT;
  TS0KW03.TSCENDDT = TS0KW01.TSNENDDT;

  if (TS0KW01.TS0KWSWM == "2")
    if (TS0KM002.TS0KMCFT == " ") /* if field is blank*/
      TS7REC.TS5CRAFT = "*"; /* default field*/
    else
      TS7REC.TS5CRAFT = TS0KM002.TS0KMCFT;
    end
  else
    if (TS0KM001.TS0KMCFT == " ") /* if field is blank*/
      TS7REC.TS5CRAFT = "*"; /* default field*/
    else
      TS7REC.TS5CRAFT = TS0KM001.TS0KMCFT;
    end
  end

  if (TS0KW01.TS0KWSWM == "2")
    if (TS0KM002.TS0KMSHP == " ") /* if field is blank*/
      TS7REC.TSFSHPNB = "*"; /* default field*/
    else
      TS7REC.TSFSHPNB = TS0KM002.TS0KMSHP;
    end
  else
    if (TS0KM001.TS0KMSHP == " ") /* if field is blank*/
      TS7REC.TSFSHPNB = "*"; /* default field*/
    else
      TS7REC.TSFSHPNB = TS0KM001.TS0KMSHP;
    end
  end

  if (TS0KW01.TS0KWSWM == "2")
    if (TS0KM002.TSFRWRDR == " ") /* if field is blank*/
      TS7REC.TSFRWRDR = "*"; /* default field*/
    else
      TS7REC.TSFRWRDR = TS0KM002.TSFRWRDR;
    end
  else
    if (TS0KM001.TSFRWRDR == " ") /* if field is blank*/
      TS7REC.TSFRWRDR = "*"; /* default field*/
    else
      TS7REC.TSFRWRDR = TS0KM001.TSFRWRDR;
    end
  end

  if (TS0KW01.TS0KWSWM == "2")
    if (TS0KM002.TS0KMDST == " ") /* if field is blank*/
      TS7REC.TSEDEST = "*"; /* default field*/
    else
      TS7REC.TSEDEST = TS0KM002.TS0KMDST;
    end
  else
    if (TS0KM001.TS0KMDST == " ") /* if field is blank*/
      TS7REC.TSEDEST = "*"; /* default field*/
    else
      TS7REC.TSEDEST = TS0KM001.TS0KMDST;
    end
  end

  if (TS0KW01.TS0KWSWM == "2")
    if (TS0KM002.XWHCD == " ") /* if field is blank*/
      TS7REC.XWHCD = "*"; /* default field*/
    else
      TS7REC.XWHCD = TS0KM002.XWHCD;
    end
  else
    if (TS0KM001.XWHCD == " ") /* if field is blank*/
      TS7REC.XWHCD = "*"; /* default field*/
    else
      TS7REC.XWHCD = TS0KM001.XWHCD;
    end
  end

   /* *** 03-27-27 this query was added for the gpc code *******/
  if (TS0KW01.TS0KWSWM == "2")
    if (TS0KM002.XGPCD == " ") /* if field is blank*/
      TS7REC.XGPCD = "*"; /* default field*/
    else
      TS7REC.XGPCD = TS0KM002.XGPCD;
    end
  else
    if (TS0KM001.XGPCD == " ") /* if field is blank*/
      TS7REC.XGPCD = "*"; /* default field*/
    else
      TS7REC.XGPCD = TS0KM001.XGPCD;
    end
  end

   /* **********************************************************/
  TS0K105(); /* Process wildcard b/l and container*/
  if (TS0KW01.TS0KWPSW == "Y") /* Indicate problem*/
    return;
  end

  TS0K110(); /* Purge any temporary storage*/

  /* NKUMAR BEGIN*/
  /* PERFORM TS0K115;                 /* Select count on Vshphd02*/
  /* IF TS0KW01.TS0KWPSW EQ 'Y';      /* Indicate problem*/
  /* EZERTN;*/
  /* ELSE;*/
  /* NKUMAR END*/
  TS0K120(); /* Select set, open the cursor Vshphd02*/
  /* NKUMAR BEGIN*/
  /* END;*/
  /* NKUMAR END*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
    set TS0KW02 empty; /* Set screen WS empty*/
    TS0KW01.TS0KWSW1 = "N"; /* Set end of selected set switch*/
    TS0KW01.TS0KWIXM = 1; /* Set counter for screen ws*/

    while (TS0KW01.TS0KWSW1 == "N") /* While data exists to fetch*/
      TS0K130(); /* Fetch and process information*/
      if (TS0KW01.TS0KWIXM > 13) /* page is fulll page exists*/
        TS0K140(); /* add that page to temp storage*/
      end
    end

    if (TS0KW01.TS0KWSW1 == "Y") /* If last fetch of detail done*/
      if (TS0KW01.TS0KWIXM > 1) /* and a partial page exists*/
        TS0K140(); /* add that page to temp storage*/
      end
      TS0KW01.TS0KWTSP = 1; /* initialize page number*/
      TS0KW01.TS0KWSWR = "N"; /* reset request for data switch*/
      TS0K150(); /* Close the shphd selected set*/
    end

  end

  if (TS0KW01.TA5TSQIX == 0) /* No data to display*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    TS0KW01.TS0KWPSW = "Y";
    if (TS0KW01.TS0KWSWM == "1") /* On map 1*/
      TS0KW01.TS0KW-NO-DATA-MAP-1 = "Y"; /* Set no data map 1 to 'Y'*/
      TS0KM001.XXXPRCNM = "TS0K100"; /* Process name*/
    else
      if (TS0KW01.TS0KWSWM == "2") /* On map 2*/
        TS0KW01.TS0KW-NO-DATA-MAP-2 = "Y"; /* Set no data map 2 to 'Y'*/
        TS0KM002.XXXPRCNM = "TS0K100"; /* Process name*/
      end
    end
  else
    if (TS0KW01.TS0KWSWM == "1") /* On map 1*/
      TS0KW01.TS0KW-NO-DATA-MAP-1 = "N"; /* Set no data map 1 to 'N'*/
    else
      if (TS0KW01.TS0KWSWM == "2") /* On map 2*/
        TS0KW01.TS0KW-NO-DATA-MAP-2 = "N"; /* Set no data map 2 to 'N'*/
      end
    end
  end


end // end TS0K100

// Process wildcard b/l and cntnr
Function TS0K105()
   /* ------------------------------------------------------------*/

       /* Process wildcard B/L and Container Numbers*/

   /* 1) Process B/L*/
      /* . Check to see if any thing other than spaces exist in*/
        /* the field.  If not then fill the field with '%'s.*/
      /* . If something was entered, then determine if the user*/
        /* entered an '*'.  If they did, then fill the remainder*/
        /* of the field with '%'s for iomod LIKE usage.*/
   /* 2) Process Container*/
      /* . Same processing technique.*/

   /* ------------------------------------------------------------*/

   /* *************************************************************/
    /* Process B/L*/
   /* *************************************************************/
  TS0KW01.TS0KWCFL = "N"; /* Initialize character found to no*/
  TS0KW01.TS0KWIXM = 1; /* Set counter*/
  while (TS0KW01.TS0KWIXM <= 16
   && TS0KW01.TS0KWCFL == "N")
    if (TS0KW01.TS0KWBLC[TS0KWIXM] != " ") /* If something other than ' '*/
      TS0KW01.TS0KWCFL = "Y"; /* Indicate exists*/
    end
    TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1;
  end

  if (TS0KW01.TS0KWCFL == "N") /* If the field is blanks*/
    move "%" to TS0KW01.TS0KWBLC[1] for all; /* Move all '%'s to field*/
  else
    TS0KW01.TS0KWIXM = 1; /* Set counter*/
   /* **** added the error message 413 (wildcard valid only at the end) ****/
    while (TS0KW01.TS0KWIXM <= 16)
      if (TS0KW01.TS0KWBLC[TS0KWIXM] == "*") /* If '*' found*/
        if (TS0KW01.TS0KWIXM == 1)
          TS0KW01.TS0KWIXM = 16; /* End loop*/
          converseLib.validationFailed(413); /* Wild card valid only at the end*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
          TS0KM001.XXXPRCNM = "TS0K105"; /* Process name*/
          TS0KM002.XXXPRCNM = "TS0K105"; /* Process name*/
          TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
          return;
        else
          move "%" to TS0KW01.TS0KWBLC[TS0KWIXM] for all; /* Fill remaining*/
          TS0KW01.TS0KWIXM = 16; /* End loop*/
        end
      end
      TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1;
    end
  end

  TS7REC.TSFBOL = TS0KW01.TS0KMBOL;
  TS0KW01.TS0KMBOL = TS0KM001.TS0KMBOL;


   /* *************************************************************/
    /* Process Container*/
   /* *************************************************************/
  TS0KW01.TS0KWCFL = "N"; /* Initialize character found to no*/
  TS0KW01.TS0KWIXM = 1; /* Set counter*/
  while (TS0KW01.TS0KWIXM <= 14
   && TS0KW01.TS0KWCFL == "N")
    if (TS0KW01.TS0KWCNC[TS0KWIXM] != " ") /* If something other than ' '*/
      TS0KW01.TS0KWCFL = "Y"; /* Indicate exists*/
    end
    TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1;
  end

   /* **** added the error message 413 (wildcard valid only at the end) ****/
  if (TS0KW01.TS0KWCFL == "N") /* If the field is blanks*/
    move "%" to TS0KW01.TS0KWCNC[1] for all; /* Move all '%'s to field*/
  else
    TS0KW01.TS0KWIXM = 1; /* Set counter*/
    while (TS0KW01.TS0KWIXM <= 14)
      if (TS0KW01.TS0KWCNC[TS0KWIXM] == "*") /* If '*' found*/
        if (TS0KW01.TS0KWIXM == 1)
          TS0KW01.TS0KWIXM = 14; /* /End loop*/
          converseLib.validationFailed(413); /* Wild card valid ony at the end*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
          TS0KM001.XXXPRCNM = "TS0K105"; /* Process name*/
          TS0KM002.XXXPRCNM = "TS0K105"; /* Process name*/
          TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
          return;
        else
          move "%" to TS0KW01.TS0KWCNC[TS0KWIXM] for all; /* Fill remaining*/
          TS0KW01.TS0KWIXM = 14; /* End loop*/
        end
      end
      TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1;
    end
  end

  TS7REC.TSHCNTNR = TS0KW01.TS0KMCNT;
  TS0KW01.TS0KMCNT = TS0KM001.TS0KMCNT;


end // end TS0K105

// Purge any temporary storage
Function TS0K110()
   /* ------------------------------------------------------------*/

              /* PURGE ANY TEMPORARY STORAGE*/

   /* 1) Purge any temporary storage for this application.*/

   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0K"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0K110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0KM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0KW01.TS0KWTSP = 0; /* Reset current page number*/
  TS0KW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0K110

// Select (S8)    DTRANS.VSHPHD02
Function TS0K120()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VSHPHD02*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S8";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0K120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0KM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0KM001.XXXPRCNM = "TS0K120"; /* Process name*/
    TS0KM002.XXXPRCNM = "TS0K120"; /* Process name*/
    TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0K120

// Fetch  (N8)    DTRANS.VSHPHD02
Function TS0K130()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VSHPHD01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "N8";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0KW01.TS0KWSW1 = "Y"; /* Set end switch*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
      TS0KW01.TS0KWSW1 = "Y"; /* Set end switch*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0K120"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0KM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0KM001.XXXPRCNM = "TS0K120"; /* Process name*/
      TS0KM002.XXXPRCNM = "TS0K120"; /* Process name*/

    else

  /* NKUMAR BEGIN*/
      TS0KW03.TSCCNT = TS0KW03.TSCCNT + 1;
      if (TS0KW03.TSCCNT > 650) /* Check the count of the selected records*/
        converseLib.validationFailed(412); /* Error message over count over 50 pages*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        TS0KM001.XXXPRCNM = "TS0K130"; /* Process name*/
        TS0KM002.XXXPRCNM = "TS0K130"; /* Process name*/
        TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
        return;
      end
  /* NKUMAR END*/
      if (TS0KM001.XGPCD == "  "         /* If gpc not entered*/
       || TS0KM002.XGPCD == "  "         
       || TS0KM001.XGPCD == TS7REC.XGPCD /* or matches*/
       || TS0KM002.XGPCD == TS7REC.XGPCD) /* or matches*/

        TS0KW02.TSFSHPID[TS0KWIXM] = TS7REC.TSFSHPID;
        TS0KW02.TSACARCD[TS0KWIXM] = TS7REC.TSACARCD;
        TS0KW02.TS5CRAFT[TS0KWIXM] = TS7REC.TS5CRAFT;
        TS0KW02.TSFSHPNB[TS0KWIXM] = TS7REC.TSFSHPNB;
        TS0KW02.TSFDESTE[TS0KWIXM] = TS7REC.TSFDESTE;
        TS0KW02.TSEORIG[TS0KWIXM] = TS7REC.TSEORIG;
        TS0KW02.TSEDEST[TS0KWIXM] = TS7REC.TSEDEST;
        TS0KW02.XWHCD[TS0KWIXM] = TS7REC.XWHCD;
        TS0KW02.TSFBOL[TS0KWIXM] = TS7REC.TSFBOL;
        TS0KW02.TSHCNTNR[TS0KWIXM] = TS7REC.TSHCNTNR;
        if (TS7REC.TSHSTAT == "RC") /* If cntnr received*/
          TS0KW02.YSSCD[TS0KWIXM] = TS7REC.TSHSTAT;
        else
          TS0KW02.YSSCD[TS0KWIXM] = TS7REC.TSISTAT;
        end
        TS0KW02.PC2CUXID[TS0KWIXM] = TS7REC.PC2CUXID;
        TS0KW02.SY1STNBR[TS0KWIXM] = TS7REC.SY1STNBR;
        TS0KW02.SY2CLRID[TS0KWIXM] = TS7REC.SY2CLRID;
        TS0KW02.XDMCD[TS0KWIXM] = TS7REC.XDMCD;
        TS0KW02.PC3PONBR[TS0KWIXM] = TS7REC.PC3PONBR;

        TS0KS01(); /* get PO id and OT cd*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If PO found*/
          TS0KW01.TS0KWDAT = PC3REC.PC3POIDT;
          TS0KW01.TS0KWPMO = TS0KW01.TS0KWPM1;
          TS0KW01.TS0KWDMO = TS0KW01.TS0KWPM2;
          TS0KW01.TS0KWFAC = PC3REC.FY1FCTYC;
          if (PC3REC.XGPCD == "03")
            TS0KW01.TS0KWPYR = PC3REC.PCFSECD;
          else
            TS0KW01.TS0KWPYR = TS0KW01.TS0KWPYY;
          end
          TS0KW02.PC4ORTYP[TS0KWIXM] = PC3REC.PC4ORTYP;
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* If PO not found*/
            TS0KW01.TS0KWIDT = "  ";
            TS0KW02.PC4ORTYP[TS0KWIXM] = "  ";
          end
        end

        TS0KW02.TS0KWPOD[TS0KWIXM] = TS0KW01.TS0KWIDT;

        TS0KW02.OP1CUOID[TS0KWIXM] = TS7REC.OP1CUOID;
        TS0KW02.OP1NORID[TS0KWIXM] = TS7REC.OP1NORID;

        /* ***************************************************/
         /* Determine the quanitity for the container*/
        /* ***************************************************/

        if (TS7REC.TSHNKCN in TS7REC.TSHNKCNX) /* Container number in array*/
          TS0KW02.TSISHPQT[TS0KWIXM] = TS7REC.TSISHPQX[sysVar.arrayIndex];
        end

        TS0KW02.TSIDETFL[TS0KWIXM] = TS7REC.TSIDETFL;

        TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* increment counter*/

      end

    end
  end


end // end TS0K130

// Add page to temporary storage
Function TS0K140()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TS0KW02.TS0KWLEN = 1365; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0K"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0K140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0KM001.XXXPRCNM = "TS0K140"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  TS0KW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TS0KW01.TS0KWIXM = 1; /* Reset display line number*/

  set TS0KW02 empty; /* Clear temporary storage record*/


end // end TS0K140

// Close  (C8)    DTRANS.VSHPHD02
Function TS0K150()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VSHPHD01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "C8";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0K150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0KM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0KM001.XXXPRCNM = "TS0K150"; /* Process name*/
    TS0KM002.XXXPRCNM = "TS0K150"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0K150

// Format and display    TS0KM001
Function TS0K200()
   /* ------------------------------------------------------------*/
               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0KW01.TS0KWPSW == "N") /* No errors found*/

    set TS0KM001 initial; /* clear the map*/
    set TS0KM002 initial; /* clear the map*/

       /* Move in left screen heading data*/

    TS0KM001.TS0KMCAR = TS0KW01.TS0KMCAR;
    TS0KM001.TS0KMCFT = TS0KW01.TS0KMCFT;
    TS0KM001.TS0KMSHP = TS0KW01.TS0KMSHP;
    TS0KM001.TS0KMBOL = TS0KW01.TS0KMBOL;
    TS0KM001.TS0KMCNT = TS0KW01.TS0KMCNT;
    TS0KM001.TS0KMDST = TS0KW01.TS0KMDST;
    TS0KM001.XXXCITY = TS0KW01.XXXCITY;
    TS0KM001.XWHCD = TS0KW01.XWHCD;
    TS0KM001.XGPCD = TS0KW01.XGPCD;
    TS0KM001.TSFRWRDR = TS0KW01.TSFRWRDR;
    TS0KM001.TSNBEGDT = TS0KW01.TS0KWBDT;
    TS0KM001.TSNENDDT = TS0KW01.TS0KWEDT;

  end

  if (TS0KW01.TS0KWPSW == " ") /* first time thru and sw not set*/

    if (TS0KW01.TS0KWBDT == " ") /* if beginning date is blank*/
      XX0XS01(); /* call date routine*/
      TS0KW01.TS0KWMYY = XX0XW01.XX0XWYY; /* set date to mmddyy*/
      TS0KW01.TS0KWMMM = XX0XW01.XX0XWMM;
      TS0KW01.TS0KWMDD = XX0XW01.XX0XWDD;
    end

    if (TS0KW01.TS0KWBDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0KW01.TS0KWMDT; /* begn date*/
      TA2REC.TA2DYAOD = -9; /* subtr 9 days from  todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0KM001.TSNBEGDT = TA2REC.TA2GRGA; /* move end date*/
        TS0KM002.TSNBEGDT = TA2REC.TA2GRGA; /* move end date*/
        TS0KW01.TS0KWBDT = TA2REC.TA2GRGA;
      end
    end

    if (TS0KW01.TS0KWEDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0KM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = 22; /* add 21 days to todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0KM001.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0KM002.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0KW01.TS0KWEDT = TA2REC.TA2GRGA;
      end
    end

  end

  if (TS0KW01.TS0KWPSW == "N") /* No errors found*/

    TS0K210(); /* Format the data on the page*/

    if (TS0KM001.TS5CRAFT[1] != " ") /* if detail does exist*/
      set TS0KM001.TS0KMSEL[1] cursor; /* set cursor to carrier code*/
    end

  end

  TS0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0KM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* IF EZEMNO NE 0;                   /* Error message to display*/
  /* SET TS0KM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  converse TS0KM001 ;

  TS0KW01.TS0KWPSW = "N"; /* reset problem switch*/
  TS0KW01.TS0KW-MAP1-INVALID-DATA = "N"; /* reset map problem switch*/
  TS0KW01.TS0KW-MAP2-INVALID-DATA = "N"; /* reset map problem switch*/

  TS0K220(); /* Check for ? inquiry by user*/

   /* Move left screen heading data into right screen heading*/

  TS0KM002.TS0KMCAR = TS0KM001.TS0KMCAR;
  TS0KM002.TS0KMCFT = TS0KM001.TS0KMCFT;
  TS0KM002.TS0KMSHP = TS0KM001.TS0KMSHP;
  TS0KM002.TS0KMBOL = TS0KM001.TS0KMBOL;
  TS0KM002.TS0KMCNT = TS0KM001.TS0KMCNT;
  TS0KM002.TS0KMDST = TS0KM001.TS0KMDST;
  TS0KM002.XXXCITY = TS0KM001.XXXCITY;
  TS0KM002.XWHCD = TS0KM001.XWHCD;
  TS0KM002.XGPCD = TS0KM001.XGPCD;
  TS0KM002.TSFRWRDR = TS0KM001.TSFRWRDR;
  TS0KM002.TSNBEGDT = TS0KM001.TSNBEGDT;
  TS0KM002.TSNENDDT = TS0KM001.TSNENDDT;

end // end TS0K200

// Format the selected data
Function TS0K210()
   /* ------------------------------------------------------------*/
               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating first leg fields on map.*/
      /* - supress all generic carrier code fields.*/
   /* ------------------------------------------------------------*/

  if (TS0KW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TS0K211(); /* Obtain temporary storage page*/

    set TS0KM001.TS0KMPGL skip; /* Display "PAGE" literal*/
    set TS0KM001.TS0KMOFL skip; /* Display "OF" literal*/

    TS0KM001.TS0KWTSP = TS0KW01.TS0KWTSP; /* Current page number*/
    TS0KM001.TA5TSQIX = TS0KW01.TA5TSQIX; /* Highest page number*/

    TS0KW01.TS0KWIXM = 1; /* Initialize line indexes*/
    TS0KW01.TS0KWIX2 = 0;

      /* move in first line of screen data*/

    TS0KM001.TS5CRAFT[TS0KWIXM] = TS0KW02.TS5CRAFT[TS0KWIXM];

    TS0KW01.TS0KWWDT = TS0KW02.TSFDESTE[TS0KWIXM];
                                   /* make date mmddyy*/
    TS0KW01.TS0KWMMM = TS0KW01.TS0KWWMM; /* month*/
    TS0KW01.TS0KWMDD = TS0KW01.TS0KWWDD; /* day*/
    TS0KW01.TS0KWMYY = TS0KW01.TS0KWWYY; /* year*/
    TS0KM001.TSFDESTE[TS0KWIXM] = TS0KW01.TS0KWMDT;

    TS0KM001.TSEDEST[TS0KWIXM] = TS0KW02.TSEDEST[TS0KWIXM];
    TS0KM001.TSFBOL[TS0KWIXM] = TS0KW02.TSFBOL[TS0KWIXM];
    TS0KM001.TSHCNTNR[TS0KWIXM] = TS0KW02.TSHCNTNR[TS0KWIXM];
    TS0KM001.PC2CUXID[TS0KWIXM] = TS0KW02.PC2CUXID[TS0KWIXM];
    TS0KM001.SY1STNBR[TS0KWIXM] = TS0KW02.SY1STNBR[TS0KWIXM];
    TS0KM001.SY2CLRID[TS0KWIXM] = TS0KW02.SY2CLRID[TS0KWIXM];
    TS0KM001.YSSCD[TS0KWIXM] = TS0KW02.YSSCD[TS0KWIXM];
    TS0KM001.TSISHPQT[TS0KWIXM] = TS0KW02.TSISHPQT[TS0KWIXM];
    if (TS0KW02.TSIDETFL[TS0KWIXM] == "Y")
      TS0KM001.TSIDETFL[TS0KWIXM] = "*";
    else
      TS0KM001.TSIDETFL[TS0KWIXM] = " ";
    end

    set TS0KM001.TS0KMSEL[TS0KWIXM] normal; /* display the selection*/

    TS0KW01.TS0KWIXW = 1; /* set index*/
    while (TS0KW01.TS0KWIXW <= TS0KW01.TS0KWMXP) /* until end of array*/
      if (TS0KW02.TSFSHPID[TS0KWIXM] == TS0KW01.TSWSHPID[TS0KWIXW])
        TS0KM001.TS0KMSEL[TS0KWIXM] = "S"; /* move s to field*/
        TS0KW01.TS0KWIXW = TS0KW01.TS0KWMXP + 1; /* end loop*/
      else
        TS0KW01.TS0KWIXW = TS0KW01.TS0KWIXW + 1; /* increment index*/
      end
    end

    TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* Increment line indexes*/
    TS0KW01.TS0KWIX2 = TS0KW01.TS0KWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0k212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0k210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0KW01.TS0KWIXM <= 13 /* Until end of lines*/
     && TS0KW02.TS5CRAFT[TS0KWIXM] != " ") /* and lines exist*/

      TS0KM001.TS5CRAFT[TS0KWIXM] = TS0KW02.TS5CRAFT[TS0KWIXM];

      TS0KW01.TS0KWWDT = TS0KW02.TSFDESTE[TS0KWIXM];
      TS0KW01.TS0KWMMM = TS0KW01.TS0KWWMM;
      TS0KW01.TS0KWMDD = TS0KW01.TS0KWWDD;
      TS0KW01.TS0KWMYY = TS0KW01.TS0KWWYY;
      TS0KM001.TSFDESTE[TS0KWIXM] = TS0KW01.TS0KWMDT;

      TS0KM001.TSEDEST[TS0KWIXM] = TS0KW02.TSEDEST[TS0KWIXM];
      TS0KM001.TSFBOL[TS0KWIXM] = TS0KW02.TSFBOL[TS0KWIXM];
      TS0KM001.TSHCNTNR[TS0KWIXM] = TS0KW02.TSHCNTNR[TS0KWIXM];
      TS0KM001.PC2CUXID[TS0KWIXM] = TS0KW02.PC2CUXID[TS0KWIXM];
      TS0KM001.SY1STNBR[TS0KWIXM] = TS0KW02.SY1STNBR[TS0KWIXM];
      TS0KM001.SY2CLRID[TS0KWIXM] = TS0KW02.SY2CLRID[TS0KWIXM];
      TS0KM001.YSSCD[TS0KWIXM] = TS0KW02.YSSCD[TS0KWIXM];
      TS0KM001.TSISHPQT[TS0KWIXM] = TS0KW02.TSISHPQT[TS0KWIXM];
      if (TS0KW02.TSIDETFL[TS0KWIXM] == "Y")
        TS0KM001.TSIDETFL[TS0KWIXM] = "*";
      else
        TS0KM001.TSIDETFL[TS0KWIXM] = " ";
      end

      if (TS0KW02.TSFSHPID[TS0KWIXM] == TS0KW02.TSFSHPID[TS0KWIX2])
         /* continue on*/
        if (TS0KW02.TS5CRAFT[TS0KWIXM] == TS0KW02.TS5CRAFT[TS0KWIX2])
          TS0KM001.TS5CRAFT[TS0KWIXM] = " "; /* move ' ' to craft*/
          TS0K212(); /* continue repeating supression*/
        end
      end

      if (TS0KM001.TS5CRAFT[TS0KWIXM] != " ") /* if craft exists on map*/
        set TS0KM001.TS0KMSEL[TS0KWIXM] normal; /* display the selection*/

        TS0KW01.TS0KWIXW = 1; /* set index*/
        while (TS0KW01.TS0KWIXW <= TS0KW01.TS0KWMXP) /* until end of array*/
          if (TS0KW02.TSFSHPID[TS0KWIXM] == TS0KW01.TSWSHPID[TS0KWIXW])
            TS0KM001.TS0KMSEL[TS0KWIXM] = "S"; /* move s to field*/
            TS0KW01.TS0KWIXW = TS0KW01.TS0KWMXP + 1; /* end loop*/
          else
            TS0KW01.TS0KWIXW = TS0KW01.TS0KWIXW + 1; /* increment index*/
          end
        end

      end

      TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* Increment line index*/
      TS0KW01.TS0KWIX2 = TS0KW01.TS0KWIX2 + 1;
    end
  end


end // end TS0K210

// Read temporary storage page
Function TS0K211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/

   /* ------------------------------------------------------------*/

  TS0KW02.TS0KWLEN = 1365; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0K"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0KW01.TS0KWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0KW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0K211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0KM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    TS0KM001.XXXPRCNM = "TS0K211"; /* Process name*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0K211

// Continue supression nested IF
Function TS0K212()
   /* ------------------------------------------------------------*/
               /* CONTINUE SUPRESSION OF NESTED IF*/

   /* 1) This process is used in order to help maintain better*/
      /* readability in TS0k210.  The nested IF for the necessary*/
      /* screen suppression is very large, therefore causing poor*/
      /* indentation of lines.  The indentation is still poor*/
      /* within this process but the size is of TS0G210 is kept*/
      /* at a much more reasonable level.*/

   /* ------------------------------------------------------------*/

  if (TS0KW02.TSFSHPNB[TS0KWIXM] == TS0KW02.TSFSHPNB[TS0KWIX2])
    if (TS0KW02.TSFDESTE[TS0KWIXM] == TS0KW02.TSFDESTE[TS0KWIX2])
      TS0KM001.TSFDESTE[TS0KWIXM] = " "; /* move ' ' to est dest*/
      if (TS0KW02.TSEDEST[TS0KWIXM] == TS0KW02.TSEDEST[TS0KWIX2])
        TS0KM001.TSEDEST[TS0KWIXM] = " "; /* move ' ' to dest*/
        if (TS0KW02.TSFBOL[TS0KWIXM] == TS0KW02.TSFBOL[TS0KWIX2])
          TS0KM001.TSFBOL[TS0KWIXM] = " "; /* move ' ' to bol*/
          if (TS0KW02.TSHCNTNR[TS0KWIXM] == TS0KW02.TSHCNTNR[TS0KWIX2])
            TS0KM001.TSHCNTNR[TS0KWIXM] = " "; /* move ' ' to cntnr*/
          end
        end
      end
    end
  end


end // end TS0K212

// Check for ? inquiry by user
Function TS0K220()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0KM001.XWHCD == "?" /* if any ? entered*/
   || TS0KM002.XWHCD == "?" /* if any ? entered*/
   || TS0KM001.XGPCD == "?" 
   || TS0KM002.XGPCD == "?")

    if (TS0KM001.XWHCD == "?" /* if ? in warehouse field*/
     || TS0KM002.XWHCD == "?") /* if any ? entered*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                WAREHOUSE    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* perform warehouse window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and abbreviation to the map.         **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0KM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
        TS0KM002.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        TS0KM001.XWHCD = " "; /* clear fields*/
        TS0KM002.XWHCD = " "; /* clear fields*/
      end
    end

    if (TS0KM001.XGPCD == "?" /* if ? in GPC fIeld*/
     || TS0KM002.XGPCD == "?")
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code.                                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0KM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        TS0KM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      else
        TS0KM001.XGPCD = " "; /* clear fields*/
        TS0KM002.XGPCD = " "; /* clear fields*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/
    converseLib.clearScreen();
     /* restore the original map*/

    TS0KW01.TS0KWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0K220

// Format and display    TS0KM002
Function TS0K250()
   /* ------------------------------------------------------------*/
               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0KW01.TS0KWPSW == "N") /* No errors found*/

    set TS0KM001 initial; /* clear the map*/
    set TS0KM002 initial; /* clear the map*/

    /* Move in right screen heading data*/

    TS0KM002.TS0KMCAR = TS0KW01.TS0KMCAR;
    TS0KM002.TS0KMCFT = TS0KW01.TS0KMCFT;
    TS0KM002.TS0KMSHP = TS0KW01.TS0KMSHP;
    TS0KM002.TS0KMBOL = TS0KW01.TS0KMBOL;
    TS0KM002.TS0KMCNT = TS0KW01.TS0KMCNT;
    TS0KM002.TS0KMDST = TS0KW01.TS0KMDST;
    TS0KM002.XXXCITY = TS0KW01.XXXCITY;
    TS0KM002.XWHCD = TS0KW01.XWHCD;
    TS0KM002.XGPCD = TS0KW01.XGPCD;
    TS0KM002.TSFRWRDR = TS0KW01.TSFRWRDR;
    TS0KM002.TSNBEGDT = TS0KW01.TS0KWBDT;
    TS0KM002.TSNENDDT = TS0KW01.TS0KWEDT;

  end

  if (TS0KW01.TS0KWPSW == " ") /* first time thru and sw not set*/

    if (TS0KW01.TS0KWBDT == " ") /* if beginning date is blank*/
      XX0XS01(); /* call date routine*/
      TS0KW01.TS0KWMYY = XX0XW01.XX0XWYY; /* set date to mmddyy*/
      TS0KW01.TS0KWMMM = XX0XW01.XX0XWMM;
      TS0KW01.TS0KWMDD = XX0XW01.XX0XWDD;
    end

    if (TS0KW01.TS0KWBDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0KW01.TS0KWMDT; /* begn date*/
      TA2REC.TA2DYAOD = -9; /* subtr 9 days from  todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0KM002.TSNBEGDT = TA2REC.TA2GRGA; /* move end date*/
        TS0KM001.TSNBEGDT = TA2REC.TA2GRGA; /* move end date*/
        TS0KW01.TS0KWBDT = TA2REC.TA2GRGA;
      end
    end

    if (TS0KW01.TS0KWEDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0KM002.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = 22; /* add 21 days to todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0KM002.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0KM001.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0KW01.TS0KWEDT = TA2REC.TA2GRGA;
      end
    end

  end

  if (TS0KW01.TS0KWPSW == "N") /* No errors found*/

    TS0K260(); /* Format the data on the page*/

    if (TS0KM002.TS5CRAFT[1] != " ") /* if detail does exist*/
      set TS0KM002.TS0KMSEL[1] cursor; /* set cursor to carrier code*/
    end

  end

  TS0KM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* IF EZEMNO NE 0;                  /* Error message to display*/
  /* SET TS0KM002 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  converse TS0KM002 ;

  TS0KW01.TS0KWPSW = "N"; /* reset problem switch*/
  TS0KW01.TS0KW-MAP1-INVALID-DATA = "N"; /* reset invalid data flag*/
  TS0KW01.TS0KW-MAP2-INVALID-DATA = "N"; /* reset invalid data flag*/

  TS0K220(); /* Check for ? inquiry by user*/

   /* Move right screen heading data into left screen heading*/

  TS0KM001.TS0KMCAR = TS0KM002.TS0KMCAR;
  TS0KM001.TS0KMCFT = TS0KM002.TS0KMCFT;
  TS0KM001.TS0KMSHP = TS0KM002.TS0KMSHP;
  TS0KM001.TS0KMBOL = TS0KM002.TS0KMBOL;
  TS0KM001.TS0KMCNT = TS0KM002.TS0KMCNT;
  TS0KM001.TS0KMDST = TS0KM002.TS0KMDST;
  TS0KM001.XXXCITY = TS0KM002.XXXCITY;
  TS0KM001.XWHCD = TS0KM002.XWHCD;
  TS0KM001.XGPCD = TS0KM002.XGPCD;
  TS0KM001.TSFRWRDR = TS0KM002.TSFRWRDR;
  TS0KM001.TSNBEGDT = TS0KM002.TSNBEGDT;
  TS0KM001.TSNENDDT = TS0KM002.TSNENDDT;

end // end TS0K250

// Format the selected data
Function TS0K260()
   /* ------------------------------------------------------------*/

               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating first leg fields on map.*/
      /* - supress all generic carrier code fields.*/

   /* ------------------------------------------------------------*/

  if (TS0KW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TS0K211(); /* Obtain temporary storage page*/

    set TS0KM002.TS0KMPGL skip; /* Display "PAGE" literal*/
    set TS0KM002.TS0KMOFL skip; /* Display "OF" literal*/

    TS0KM002.TS0KWTSP = TS0KW01.TS0KWTSP; /* Current page number*/
    TS0KM002.TA5TSQIX = TS0KW01.TA5TSQIX; /* Highest page number*/

    TS0KW01.TS0KWIXM = 1; /* Initialize line indexes*/
    TS0KW01.TS0KWIX2 = 0;

      /* move in first line of screen data*/

    TS0KM002.TS5CRAFT[TS0KWIXM] = TS0KW02.TS5CRAFT[TS0KWIXM];
    TS0KM002.TSFSHPNB[TS0KWIXM] = TS0KW02.TSFSHPNB[TS0KWIXM];

    TS0KM002.TSACARCD[TS0KWIXM] = TS0KW02.TSACARCD[TS0KWIXM];

    TS0KM002.TS0KMWHS[TS0KWIXM] = TS0KW02.XWHCD[TS0KWIXM];
    TS0KM002.PC2CUXID[TS0KWIXM] = TS0KW02.PC2CUXID[TS0KWIXM];
    TS0KM002.TS0KMPOD[TS0KWIXM] = TS0KW02.TS0KWPOD[TS0KWIXM];
    TS0KM002.PC4ORTYP[TS0KWIXM] = TS0KW02.PC4ORTYP[TS0KWIXM];
    TS0KM002.PC3PONBR[TS0KWIXM] = TS0KW02.PC3PONBR[TS0KWIXM];
    if (TS0KW02.OP1NORID[TS0KWIXM] > 0)
      TS0KW01.TS0KWSOI = TS0KW02.OP1NORID[TS0KWIXM] / 1000;
      TS0KW01.TS0KWSOI = TS0KW01.TS0KWSOI + TS0KW02.OP1CUOID[TS0KWIXM];
      TS0KM002.TS0KMSOI[TS0KWIXM] = TS0KW01.TS0KWSOI;
    else
      TS0KM002.TS0KMSOI[TS0KWIXM] = 0;
    end
    TS0KM002.SY1STNBR[TS0KWIXM] = TS0KW02.SY1STNBR[TS0KWIXM];
    TS0KM002.SY2CLRID[TS0KWIXM] = TS0KW02.SY2CLRID[TS0KWIXM];
    TS0KM002.XDMCD[TS0KWIXM] = TS0KW02.XDMCD[TS0KWIXM];
    TS0KM002.TSISHPQT[TS0KWIXM] = TS0KW02.TSISHPQT[TS0KWIXM];

    set TS0KM002.TS0KMSEL[TS0KWIXM] normal; /* display the selection*/

    TS0KW01.TS0KWIXW = 1; /* set index*/
    while (TS0KW01.TS0KWIXW <= TS0KW01.TS0KWMXP) /* until end of array*/
      if (TS0KW02.TSFSHPID[TS0KWIXM] == TS0KW01.TSWSHPID[TS0KWIXW])
        TS0KM002.TS0KMSEL[TS0KWIXM] = "S"; /* move s to field*/
        TS0KW01.TS0KWIXW = TS0KW01.TS0KWMXP + 1; /* end loop*/
      else
        TS0KW01.TS0KWIXW = TS0KW01.TS0KWIXW + 1; /* increment index*/
      end
    end

    TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* Increment line indexes*/
    TS0KW01.TS0KWIX2 = TS0KW01.TS0KWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0k212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0k210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0KW01.TS0KWIXM <= 13 /* Until end of lines*/
     && TS0KW02.TS5CRAFT[TS0KWIXM] != " ") /* and lines exist*/

      TS0KM002.TS5CRAFT[TS0KWIXM] = TS0KW02.TS5CRAFT[TS0KWIXM];
      TS0KM002.TSFSHPNB[TS0KWIXM] = TS0KW02.TSFSHPNB[TS0KWIXM];

      TS0KM002.TSACARCD[TS0KWIXM] = TS0KW02.TSACARCD[TS0KWIXM];

      TS0KM002.TS0KMWHS[TS0KWIXM] = TS0KW02.XWHCD[TS0KWIXM];
      TS0KM002.PC2CUXID[TS0KWIXM] = TS0KW02.PC2CUXID[TS0KWIXM];
      TS0KM002.TS0KMPOD[TS0KWIXM] = TS0KW02.TS0KWPOD[TS0KWIXM];
      TS0KM002.PC4ORTYP[TS0KWIXM] = TS0KW02.PC4ORTYP[TS0KWIXM];
      TS0KM002.PC3PONBR[TS0KWIXM] = TS0KW02.PC3PONBR[TS0KWIXM];
      if (TS0KW02.OP1NORID[TS0KWIXM] > 0)
        TS0KW01.TS0KWSOI = TS0KW02.OP1NORID[TS0KWIXM] / 1000;
        TS0KW01.TS0KWSOI = TS0KW01.TS0KWSOI + TS0KW02.OP1CUOID[TS0KWIXM];
        TS0KM002.TS0KMSOI[TS0KWIXM] = TS0KW01.TS0KWSOI;
      else
        TS0KM002.TS0KMSOI[TS0KWIXM] = 0;
      end
      TS0KM002.SY1STNBR[TS0KWIXM] = TS0KW02.SY1STNBR[TS0KWIXM];
      TS0KM002.SY2CLRID[TS0KWIXM] = TS0KW02.SY2CLRID[TS0KWIXM];
      TS0KM002.XDMCD[TS0KWIXM] = TS0KW02.XDMCD[TS0KWIXM];
      TS0KM002.TSISHPQT[TS0KWIXM] = TS0KW02.TSISHPQT[TS0KWIXM];

      if (TS0KW02.TSFSHPID[TS0KWIXM] == TS0KW02.TSFSHPID[TS0KWIX2])
         /* continue on*/
        if (TS0KW02.TSACARCD[TS0KWIXM] == TS0KW02.TSACARCD[TS0KWIX2])
          TS0KM002.TSACARCD[TS0KWIXM] = " "; /* move ' ' to carrier*/
          TS0K261(); /* continue repeating supression*/
        end
      end

      if (TS0KM002.TS5CRAFT[TS0KWIXM] != " ") /* if craft exists on map*/
        set TS0KM002.TS0KMSEL[TS0KWIXM] normal; /* display the selection*/

        TS0KW01.TS0KWIXW = 1; /* set index*/
        while (TS0KW01.TS0KWIXW <= TS0KW01.TS0KWMXP) /* until end of array*/
          if (TS0KW02.TSFSHPID[TS0KWIXM] == TS0KW01.TSWSHPID[TS0KWIXW])
            TS0KM002.TS0KMSEL[TS0KWIXM] = "S"; /* move s to field*/
            TS0KW01.TS0KWIXW = TS0KW01.TS0KWMXP + 1; /* end loop*/
          else
            TS0KW01.TS0KWIXW = TS0KW01.TS0KWIXW + 1; /* increment index*/
          end
        end

      end

      TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* Increment line index*/
      TS0KW01.TS0KWIX2 = TS0KW01.TS0KWIX2 + 1;
    end
  end


end // end TS0K260

// Continue supression nested IF
Function TS0K261()
   /* ------------------------------------------------------------*/
               /* CONTINUE SUPRESSION OF NESTED IF*/

   /* 1) This process is used in order to help maintain better*/
      /* readability in TS0k210.  The nested IF for the necessary*/
      /* screen suppression is very large, therefore causing poor*/
      /* indentation of lines.  The indentation is still poor*/
      /* within this process but the size is of TS0k260 is kept*/
      /* at a much more reasonable level.*/

   /* ------------------------------------------------------------*/

  if (TS0KW02.TS5CRAFT[TS0KWIXM] == TS0KW02.TS5CRAFT[TS0KWIX2])
    TS0KM002.TS5CRAFT[TS0KWIXM] = " "; /* move ' ' to craft*/
    if (TS0KW02.TSFSHPNB[TS0KWIXM] == TS0KW02.TSFSHPNB[TS0KWIX2])
      TS0KM002.TSFSHPNB[TS0KWIXM] = " "; /* move ' ' to ship nbr*/
      if (TS0KW02.TSEDEST[TS0KWIXM] == TS0KW02.TSEDEST[TS0KWIX2])
        if (TS0KW02.TSFBOL[TS0KWIXM] == TS0KW02.TSFBOL[TS0KWIX2])
          if (TS0KW02.TSHCNTNR[TS0KWIXM] == TS0KW02.TSHCNTNR[TS0KWIX2])
            if (TS0KW02.XWHCD[TS0KWIXM] == TS0KW02.XWHCD[TS0KWIX2])
              TS0KM002.TS0KMWHS[TS0KWIXM] = "  ";
              if (TS0KW02.PC2CUXID[TS0KWIXM] == TS0KW02.PC2CUXID[TS0KWIX2])
                if (TS0KW02.TS0KWPOD[TS0KWIXM] == TS0KW02.TS0KWPOD[TS0KWIX2])
        /* MOVE '  ' TO TS0KM002.TS0KMPOD(TS0KWIXM);*/
                  if (TS0KW02.PC4ORTYP[TS0KWIXM] == TS0KW02.PC4ORTYP[TS0KWIX2])
        /* MOVE '  ' TO TS0KM002.PC4ORTYP(TS0KWIXM);*/
                    if (TS0KW02.PC3PONBR[TS0KWIXM] == TS0KW02.PC3PONBR[TS0KWIX2])
        /* MOVE '  ' TO TS0KM002.PC3PONBR(TS0KWIXM);*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end TS0K261

// Check attention identifier
Function TS0K300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If PF16 pressed, exit to published schedule application.*/
   /* 6) If PF17 pressed, exit to projected schedule application.*/
   /* 7) If any AI pressed other than ENTER, PF7, or PF8*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    TS0KW01.TS0KWPSW = "N"; /* Reset problem switch*/
    TS0KW01.TS0KWSWR = "N"; /* Reset request for data*/
    TS0KM001.XXXPRCNM = "TS0K300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0KM001.CATOAP > " " /* FAST PATH was requested from map 1*/
   || TS0KM002.CATOAP > " ") /* FAST PATH was requested from map 2*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (TS0KW01.TS0KWSWM == "1") /* If already map 1*/
        COMMAREA.CATOAP = TS0KM001.CATOAP; /* TO application*/
        COMMAREA.CAITEM = TS0KM001.CAITEM; /* Application data*/
      else
        if (TS0KW01.TS0KWSWM == "2") /* If already map 2*/
          COMMAREA.CATOAP = TS0KM002.CATOAP; /* TO application*/
          COMMAREA.CAITEM = TS0KM002.CAITEM; /* Application data*/
        end
      end
      COMMAREA.CAUSERA = " "; /* clear user area*/
      TS0K110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
      if (TS0KW01.TS0KMCAR != " " /* If keys exist*/
       && TS0KW01.TS0KWBDT != " " 
       && TS0KW01.TS0KWEDT != " ")
        TS0KW01.TS0KWSWR = "Y"; /* set request for data to yes*/
      else
        if (TS0KW01.TSFRWRDR != " " /* If keys exist*/
         && TS0KW01.TS0KWBDT != " " 
         && TS0KW01.TS0KWEDT != " ")
          TS0KW01.TS0KWSWR = "Y"; /* set request for data to yes*/
        end
      end
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
    end
    if (TS0KW01.TS0KWSWM == "1") /* If already map 1*/
      set TS0KM001.CATOAP cursor, modified, bold; /* Highlight*/
      TS0KM001.XXXPRCNM = "TS0K200"; /* Process name*/
    else
      if (TS0KW01.TS0KWSWM == "2") /* If already map 2*/
        set TS0KM002.CATOAP cursor, modified, bold; /* Highlight*/
        TS0KM002.XXXPRCNM = "TS0K200"; /* Process name*/
      end
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS0K110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0KM001.XXXPRCNM = "TS0K300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0KM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS0K110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0KM001.XXXPRCNM = "TS0K300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end
  if (converseVar.eventKey is pf10) /* PF10 was pressed*/
    if (TS0KW01.TS0KWSWM == "1") /* If already map 1*/
      TS0KW01.TS0KWPSW = "Y";
      TS0KM001.XXXPRCNM = "TS0K300";
      converseLib.validationFailed(4);
      exit stack;
    else
      TS0KW01.TS0KWSWM = "1"; /* move in map number*/
    end
  end

  if (converseVar.eventKey is pf11) /* PF11 was pressed*/
    if (TS0KW01.TS0KWSWM == "2") /* If already map 2*/
      TS0KW01.TS0KWPSW = "Y";
      TS0KM002.XXXPRCNM = "TS0K300";
      converseLib.validationFailed(4);
      exit stack;
    else
      TS0KW01.TS0KWSWM = "2"; /* move in map number*/
    end
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not scroll request*/
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf10  
   && converseVar.eventKey not pf11  
   && converseVar.eventKey not pf12)
    TS0KM001.XXXPRCNM = "TS0K200"; /* Process name*/
    TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0K300

// Reset highlighted fields
Function TS0K400()
   /* ------------------------------------------------------------*/
                /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0KM001.TS0KMCAR initialAttributes; /* Reset all fields*/
  set TS0KM001.TS0KMCFT initialAttributes;
  set TS0KM001.TS0KMSHP initialAttributes;
  set TS0KM001.TS0KMBOL initialAttributes;
  set TS0KM001.TS0KMCNT initialAttributes;
  set TS0KM001.TS0KMDST initialAttributes;
  set TS0KM001.XWHCD initialAttributes;
  set TS0KM001.XGPCD initialAttributes;
  set TS0KM001.TSNBEGDT initialAttributes;
  set TS0KM001.TSFRWRDR initialAttributes;
  set TS0KM001.TSNENDDT initialAttributes;
  set TS0KM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0KM001.CAITEM initialAttributes; /* Commarea application data*/

  set TS0KM002.TS0KMCAR initialAttributes; /* Reset all fields*/
  set TS0KM002.TS0KMCFT initialAttributes;
  set TS0KM002.TS0KMSHP initialAttributes;
  set TS0KM002.TS0KMBOL initialAttributes;
  set TS0KM002.TS0KMCNT initialAttributes;
  set TS0KM002.TS0KMDST initialAttributes;
  set TS0KM002.XWHCD initialAttributes;
  set TS0KM002.XGPCD initialAttributes;
  set TS0KM002.TSNBEGDT initialAttributes;
  set TS0KM002.TSFRWRDR initialAttributes;
  set TS0KM002.TSNENDDT initialAttributes;
  set TS0KM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0KM002.CAITEM initialAttributes; /* Commarea application data*/

  TS0KW01.TS0KWIXM = 1; /* Initialize line index*/
  while (TS0KW01.TS0KWIXM <= 13) /* Until end of lines*/
    if (TS0KM001.TS5CRAFT[TS0KWIXM] != " ") /* if carrier code exists*/
      set TS0KM001.TS0KMSEL[TS0KWIXM] normal; /* Reset select flag*/
    end
    if (TS0KM002.TS5CRAFT[TS0KWIXM] != " ") /* if carrier code exists*/
      set TS0KM002.TS0KMSEL[TS0KWIXM] normal; /* Reset select flag*/
    end
    TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* Increment line index*/
  end


end // end TS0K400

// Verify entered data   TS0KM001
Function TS0K500()
   /* ------------------------------------------------------------*/
                /* VERIFY MAP 1 THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0KM001.CAITEM > " ") /* Application data was entered*/
    set TS0KM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate error message*/
    TS0KM001.XXXPRCNM = "TS0K500"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0K510(); /* Verify scroll request*/
      TS0K520(); /* Do edits*/
    else
      if (TS0KM001.TS0KMCAR == " " /* If no data entered*/
       && TS0KM001.TS0KMCFT == " " 
       && TS0KM001.TS0KMSHP == " " 
       && TS0KM001.TS0KMBOL == " " 
       && TS0KM001.TS0KMCNT == " " 
       && TS0KM001.TS0KMDST == " " 
       && TS0KM001.TSNBEGDT == " " 
       && TS0KM001.TSFRWRDR == " " 
       && TS0KM001.TSNENDDT == " " 
       && TS0KM001.XWHCD == " "    
       && TS0KM001.XGPCD == " ")  

        TS0K110(); /* purge temporary storage*/
        set TS0KW02 empty; /* empty screen ws*/

        TS0KW01.TS0KWIXM = 1; /* set index to 1*/
        while (TS0KW01.TS0KWIXM <= TS0KW01.TS0KWMXP) /* until end array*/
          TS0KW01.TSWSHPID[TS0KWIXM] = 0; /* clear fields*/
          TS0KW01.TSWBOL[TS0KWIXM] = " ";
          TS0KW01.TSWCARCD[TS0KWIXM] = " ";
          TS0KW01.TSWCRAFT[TS0KWIXM] = " ";
          TS0KW01.TSWSHPNB[TS0KWIXM] = " ";
          TS0KW01.TSWORIG[TS0KWIXM] = " ";
          TS0KW01.TSWDEST[TS0KWIXM] = " ";
          TS0KW01.TSWXWHCD[TS0KWIXM] = " ";
          TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* increment index*/
        end

        TS0KW01.TS0KMCAR = " "; /* Save the keys*/
        TS0KW01.TS0KMCFT = " ";
        TS0KW01.TS0KMSHP = " ";
        TS0KW01.TS0KMBOL = " ";
        TS0KW01.TS0KMCNT = " ";
        TS0KW01.TS0KMDST = " ";
        TS0KW01.TS0KWBDT = " ";
        TS0KW01.TSFRWRDR = " ";
        TS0KW01.TS0KWEDT = " ";
        TS0KW01.XWHCD = " ";
        TS0KW01.XGPCD = " ";
        set TS0KM001 initial; /* clear map*/
        set TS0KM002 initial; /* clear map*/
        TS0KW01.TS0KWPSW = "Y"; /* indicate error message*/
        set TS0KM001.TS0KMCAR cursor; /* set cursor*/
        set TS0KM002.TS0KMCAR cursor; /* set cursor*/
        converseLib.validationFailed(34); /* data must be entered*/
        TS0KM001.XXXPRCNM = "TS0K500"; /* process name*/
        TS0KM002.XXXPRCNM = "TS0K500"; /* process name*/
      else
        if (TS0KM001.TS0KMCAR != TS0KW01.TS0KMCAR
         /* If any new data entered*/
         || TS0KM001.TS0KMCFT != TS0KW01.TS0KMCFT
         || TS0KM001.TS0KMSHP != TS0KW01.TS0KMSHP
         || TS0KM001.TS0KMBOL != TS0KW01.TS0KMBOL
         || TS0KM001.TS0KMCNT != TS0KW01.TS0KMCNT
         || TS0KM001.TS0KMDST != TS0KW01.TS0KMDST
         || TS0KM001.TSNBEGDT != TS0KW01.TS0KWBDT
         || TS0KM001.TSFRWRDR != TS0KW01.TSFRWRDR
         || TS0KM001.TSNENDDT != TS0KW01.TS0KWEDT
         || TS0KM001.XWHCD != TS0KW01.XWHCD
         || TS0KM001.XGPCD != TS0KW01.XGPCD
         || TS0KW01.TS0KW-NO-DATA-MAP-1 == "Y"
         || TS0KW01.TS0KW-NO-DATA-MAP-2 == "Y"
         || TS0KW01.TS0KW-MAP1-INVALID-DATA == "Y"
         || TS0KW01.TS0KW-MAP2-INVALID-DATA == "Y")

          TS0K110(); /* purge temporary storage*/
          set TS0KW02 empty; /* empty screen ws*/

          TS0KW01.TS0KWIXM = 1; /* set index to 1*/
          while (TS0KW01.TS0KWIXM <= TS0KW01.TS0KWMXP) /* until end array*/
            TS0KW01.TSWSHPID[TS0KWIXM] = 0; /* clear shpid field*/
            TS0KW01.TSWBOL[TS0KWIXM] = " ";
            TS0KW01.TSWCARCD[TS0KWIXM] = " ";
            TS0KW01.TSWCRAFT[TS0KWIXM] = " ";
            TS0KW01.TSWSHPNB[TS0KWIXM] = " ";
            TS0KW01.TSWORIG[TS0KWIXM] = " ";
            TS0KW01.TSWDEST[TS0KWIXM] = " ";
            TS0KW01.TSWXWHCD[TS0KWIXM] = " ";
            TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* increment index*/
          end

          TS0KW01.TS0KMCAR = TS0KM001.TS0KMCAR;
          TS0KW01.TS0KMCFT = TS0KM001.TS0KMCFT;
          TS0KW01.TS0KMSHP = TS0KM001.TS0KMSHP;
          TS0KW01.TS0KMBOL = TS0KM001.TS0KMBOL;
          TS0KW01.TS0KMCNT = TS0KM001.TS0KMCNT;
          TS0KW01.TS0KMDST = TS0KM001.TS0KMDST;
          TS0KW01.TS0KWBDT = TS0KM001.TSNBEGDT;
          TS0KW01.TSFRWRDR = TS0KM001.TSFRWRDR;
          TS0KW01.TS0KWEDT = TS0KM001.TSNENDDT;
          TS0KW01.XWHCD = TS0KM001.XWHCD;
          TS0KW01.XGPCD = TS0KM001.XGPCD;

          set TS0KM001 initial; /* clear map*/
          set TS0KM002 initial; /* clear map*/

          TS0KM001.TS0KMCAR = TS0KW01.TS0KMCAR;
          TS0KM001.TS0KMCFT = TS0KW01.TS0KMCFT;
          TS0KM001.TS0KMSHP = TS0KW01.TS0KMSHP;
          TS0KM001.TS0KMBOL = TS0KW01.TS0KMBOL;
          TS0KM001.TS0KMCNT = TS0KW01.TS0KMCNT;
          TS0KM001.TS0KMDST = TS0KW01.TS0KMDST;
          TS0KM001.TSFRWRDR = TS0KW01.TSFRWRDR;
          TS0KM001.TSNBEGDT = TS0KW01.TS0KWBDT;
          TS0KM001.TSNENDDT = TS0KW01.TS0KWEDT;
          TS0KM001.XWHCD = TS0KW01.XWHCD;
          TS0KM001.XGPCD = TS0KW01.XGPCD;

          TS0KW01.TS0KWSWR = "Y"; /* set request for data to yes*/
          TS0K520(); /* Verify any changed data*/

        else /* If no data was changed*/

          TS0K520(); /* Verify selections and other data*/

        end
      end
    end
  end


end // end TS0K500

// Verify scroll request
Function TS0K510()
   /* ------------------------------------------------------------*/

               /* VERIFY SCROLL REQUEST*/

   /* 1) Ensure that pages exist to scroll forward or back.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0KW01.TS0KWTSP < 2)       /* and no previous pages*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM001.XXXPRCNM = "TS0K510"; /* Process name*/
    TS0KM002.XXXPRCNM = "TS0K510"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0KW01.TS0KWTSP >= TS0KW01.TA5TSQIX) /* and no more pages*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM001.XXXPRCNM = "TS0K510"; /* Process name*/
    TS0KM002.XXXPRCNM = "TS0K510"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end


end // end TS0K510

// Verify any changed data
Function TS0K520()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify valid selections.*/
   /* 2) Verify that all dates entered are valid.*/
   /* 3) Verify that all locations entered are valid.*/
   /* 4) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* check valid selections*/
   /* ------------------------------------------------------------*/

  TS0KW01.TS0KWIXM = 13; /* set index to 13*/
  while (TS0KW01.TS0KWIXM > 0) /* until end of selection lines*/
    if (TS0KM001.TS0KMSEL[TS0KWIXM] != "S" /* if selection is not 's'*/
     && TS0KM001.TS0KMSEL[TS0KWIXM] != " ") /* selection is not blank*/
      converseLib.validationFailed(13); /* Error message*/
      TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
      TS0KM001.XXXPRCNM = "TS0K520"; /* Process name*/
      set TS0KM001.TS0KMSEL[TS0KWIXM] cursor, modified, bold;
    end
    TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM - 1; /* decrement*/
  end

   /* ------------------------------------------------------------*/
     /* check for at least 1 of the key fields entered*/
   /* ------------------------------------------------------------*/

  TS0K523(); /* key fields edit*/

   /* ------------------------------------------------------------*/
     /* if destination entered, get the description*/
   /* ------------------------------------------------------------*/

  if (TS0KM001.TS0KMDST != " ") /* if destination entered*/
    TSCREC.TSCLOCCD = TS0KM001.TS0KMDST; /* move in key*/
    TS0K521(); /* select the location*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
      TS0KM001.XXXCITY = TSCREC.XXXCITY; /* move city descr*/
      TS0KW01.XXXCITY = TSCREC.XXXCITY; /* save city descr*/
    else
      TS0KW01.XXXCITY = " "; /* clear city descr*/
      TS0KM001.XXXCITY = " "; /* clear city descr*/
    end
  else
    TS0KW01.XXXCITY = " "; /* clear city descr*/
    TS0KM001.XXXCITY = " "; /* clear city descr*/
  end

   /* ------------------------------------------------------------*/
     /* if gpc entered, validate*/
   /* ------------------------------------------------------------*/

  if (TS0KM001.XGPCD != " ") /* if gpc entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0KM001.XGPCD in XGPTBL.XGPCD) /* If valid code*/
       /* next sentence*/
    else
      converseLib.validationFailed(101); /* Display error message*/
      TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
      TS0KM001.XXXPRCNM = "TS0K520"; /* Process name*/
      set TS0KM001.XGPCD cursor, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
     /* if warehouse entered, validate*/
   /* ------------------------------------------------------------*/

  if (TS0KM001.XWHCD != " ") /* if warehouse entered*/
    if (TS0KM001.XWHCD in XWHTBL.XWHCD) /* If valid code*/
       /* next sentence*/
    else
      converseLib.validationFailed(82); /* Display error message*/
      TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
      TS0KM001.XXXPRCNM = "TS0K520"; /* Process name*/
      set TS0KM001.XWHCD cursor, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA end date entered*/
   /* ------------------------------------------------------------*/

  if (TS0KM001.TSNENDDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0KM001.TSNENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0KW01.TSNENDDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
      TS0KM001.XXXPRCNM = "TS0K520"; /* Process name*/
      set TS0KM001.TSNENDDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM001.XXXPRCNM = "TS0K520"; /* Process name*/
    set TS0KM001.TSNENDDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA start date entered*/
   /* ------------------------------------------------------------*/

  if (TS0KM001.TSNBEGDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0KM001.TSNBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0KW01.TSNBEGDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
      TS0KM001.XXXPRCNM = "TS0K520"; /* Process name*/
      set TS0KM001.TSNBEGDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM001.XXXPRCNM = "TS0K520"; /* Process name*/
    set TS0KM001.TSNBEGDT cursor, modified, bold;
  end

  if (TS0KW01.TS0KWPSW == "N") /* if all locations and dates valid*/
    TS0K522(); /* check span and date overlap errors*/
  end

  if (TS0KW01.TS0KWPSW == "N") /* if all locations and dates valid*/
    TS0KW01.TS0KW-MAP1-INVALID-DATA = "N"; /* Invalid data map 1*/
  else
    if (TS0KW01.TS0KWPSW == "Y") /* Problem switch set to 'Y'*/
      TS0KW01.TS0KW-MAP1-INVALID-DATA = "Y"; /* Invalid data map 1*/
    end
  end

end // end TS0K520

// Select (S)     DTRANS.VTSLOC01
Function TS0K521()
   /* ------------------------------------------------------------*/
                /* SELECT LOCATION DATA*/

   /* 1) Select location.*/
   /* 2) If an  unexpected return code is recieved:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0K521"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0KW01.TS0KWPSW = "Y"; /* Indicate Problem*/
    TS0KM001.XXXPRCNM = "TS0K521"; /* Process name*/
    TS0KM002.XXXPRCNM = "TS0K521"; /* Process name*/
  end


end // end TS0K521

// Check date span and overlap
Function TS0K522()
   /* ------------------------------------------------------------*/

            /* CHECK DATE SPAN AND OVERLAP*/

   /* 1) Check that ETA end date is >= ETA begin date.*/
   /* 2) Check that not > 95 days between begin and end dates.*/

   /* Each of these checks will only be performed if the previous*/
      /* check has been successfully completed with no errors.*/

   /* ------------------------------------------------------------*/

  if (TS0KW01.TSNENDDT < TS0KW01.TSNBEGDT) /* if end date LT beg date*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(58); /* error 'must be >=' message*/
    TS0KM001.XXXPRCNM = "TS0K522"; /* process name*/
    set TS0KM001.TSNENDDT cursor, modified, bold;
    set TS0KM002.TSNENDDT cursor, modified, bold;
  end

  if (TS0KW01.TS0KWPSW == "N") /* if no errors*/

     /* check date span < 96 for ETA dates*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0KW01.TSNBEGDT; /* begn date*/
    TA2REC.TA2DBDTN = TS0KW01.TSNENDDT; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN >= 96) /* if diff between dates > 95*/
        TS0KW01.TS0KWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0KM001.XXXPRCNM = "TS0K522"; /* process name*/
        set TS0KM001.TSNBEGDT cursor, modified, bold;
        set TS0KM001.TSNENDDT modified, bold;
        set TS0KM002.TSNBEGDT cursor, modified, bold;
        set TS0KM002.TSNENDDT modified, bold;
      end
    end

  end


end // end TS0K522

// Key fields edit
Function TS0K523()
   /* ---------------------------------------------------------------------*/

     /* At least 1 of the following 4 fields has to be entered.*/

     /* 1.  CARRIER CODE*/
     /* 2.  Frieght Forwarder*/
     /* 3.  Bill of Lading*/
     /* 4.  Container Number*/

     /* If none of the fields are entered, display an error message*/
     /* indicating that 1 of the fields must be entered.*/

   /* ---------------------------------------------------------------------*/

  if (TS0KM001.TS0KMCAR == " " /* carrier code = spaces*/
   && TS0KM001.TSFRWRDR == " " /* freight forwarder code = spaces*/
   && TS0KM001.TS0KMBOL == " " /* bill of lading = spaces*/
   && TS0KM001.TS0KMCNT == " ") /* container = spaces*/
    converseLib.validationFailed(364); /* at least 1 field must be entered*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM001.XXXPRCNM = "TS0K523"; /* process name*/
    set TS0KM001.TS0KMCAR cursor, modified, bold;
    set TS0KM001.TSFRWRDR modified, bold;
    set TS0KM001.TS0KMBOL modified, bold;
    set TS0KM001.TS0KMCNT modified, bold;
  end

   /* An additional edit is required to make sure that either the carrier*/
   /* code or the freight forwarder is entered - not both at the same time*/

  if (TS0KM001.TSFRWRDR != " " /* has the ff code been entered*/
   && TS0KM001.TS0KMCAR != " ") /* and the carrier code entered?*/
    converseLib.validationFailed(142); /* error message*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM001.XXXPRCNM = "TS0K523"; /* process name*/
    set TS0KM001.TS0KMCAR cursor, modified, bold;
    set TS0KM001.TSFRWRDR modified, bold;
  end
end // end TS0K523

// Verify entered data   TS0KM002
Function TS0K550()
   /* ------------------------------------------------------------*/
                /* VERIFY MAP 2 ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0KM002.CAITEM > " ") /* Application data was entered*/
    set TS0KM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate error message*/
    TS0KM002.XXXPRCNM = "TS0K550"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0K510(); /* Verify scroll request*/
      TS0K570(); /* Do edits*/
    else
      if (TS0KM002.TS0KMCAR == " " /* If no data entered*/
       && TS0KM002.TS0KMCFT == " " 
       && TS0KM002.TS0KMSHP == " " 
       && TS0KM002.TS0KMBOL == " " 
       && TS0KM002.TS0KMCNT == " " 
       && TS0KM002.TS0KMDST == " " 
       && TS0KM002.TSNBEGDT == " " 
       && TS0KM002.TSFRWRDR == " " 
       && TS0KM002.TSNENDDT == " " 
       && TS0KM002.XWHCD == " "    
       && TS0KM002.XGPCD == " ")  

        TS0K110(); /* purge temporary storage*/
        set TS0KW02 empty; /* empty screen ws*/

        TS0KW01.TS0KWIXM = 1; /* set index to 1*/
        while (TS0KW01.TS0KWIXM <= TS0KW01.TS0KWMXP) /* until end array*/
          TS0KW01.TSWSHPID[TS0KWIXM] = 0; /* clear fields*/
          TS0KW01.TSWBOL[TS0KWIXM] = " ";
          TS0KW01.TSWCARCD[TS0KWIXM] = " ";
          TS0KW01.TSWCRAFT[TS0KWIXM] = " ";
          TS0KW01.TSWSHPNB[TS0KWIXM] = " ";
          TS0KW01.TSWORIG[TS0KWIXM] = " ";
          TS0KW01.TSWDEST[TS0KWIXM] = " ";
          TS0KW01.TSWXWHCD[TS0KWIXM] = " ";
          TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* increment index*/
        end

        TS0KW01.TS0KMCAR = " "; /* Save the keys*/
        TS0KW01.TS0KMCFT = " ";
        TS0KW01.TS0KMSHP = " ";
        TS0KW01.TS0KMBOL = " ";
        TS0KW01.TS0KMCNT = " ";
        TS0KW01.TS0KMDST = " ";
        TS0KW01.TS0KWBDT = " ";
        TS0KW01.TSFRWRDR = " ";
        TS0KW01.TS0KWEDT = " ";
        TS0KW01.XWHCD = " ";
        TS0KW01.XGPCD = " ";
        set TS0KM002 initial; /* clear map*/
        TS0KW01.TS0KWPSW = "Y"; /* indicate error message*/
        set TS0KM002.TS0KMCAR cursor; /* set cursor*/
        converseLib.validationFailed(34); /* data must be entered*/
        TS0KM002.XXXPRCNM = "TS0K550"; /* process name*/
      else
        if (TS0KM002.TS0KMCAR != TS0KW01.TS0KMCAR
         /* If any new data entered*/
         || TS0KM002.TS0KMCFT != TS0KW01.TS0KMCFT
         || TS0KM002.TS0KMSHP != TS0KW01.TS0KMSHP
         || TS0KM002.TS0KMBOL != TS0KW01.TS0KMBOL
         || TS0KM002.TS0KMCNT != TS0KW01.TS0KMCNT
         || TS0KM002.TS0KMDST != TS0KW01.TS0KMDST
         || TS0KM002.TSNBEGDT != TS0KW01.TS0KWBDT
         || TS0KM002.TSFRWRDR != TS0KW01.TSFRWRDR
         || TS0KM002.TSNENDDT != TS0KW01.TS0KWEDT
         || TS0KM002.XWHCD != TS0KW01.XWHCD
         || TS0KM002.XGPCD != TS0KW01.XGPCD
         || TS0KW01.TS0KW-NO-DATA-MAP-1 == "Y"
         || TS0KW01.TS0KW-NO-DATA-MAP-2 == "Y"
         || TS0KW01.TS0KW-MAP1-INVALID-DATA == "Y"
         || TS0KW01.TS0KW-MAP2-INVALID-DATA == "Y")

          TS0K110(); /* purge temporary storage*/
          set TS0KW02 empty; /* empty screen ws*/

          TS0KW01.TS0KWIXM = 1; /* set index to 1*/
          while (TS0KW01.TS0KWIXM <= TS0KW01.TS0KWMXP) /* until end array*/
            TS0KW01.TSWSHPID[TS0KWIXM] = 0; /* clear shpid field*/
            TS0KW01.TSWBOL[TS0KWIXM] = " ";
            TS0KW01.TSWCARCD[TS0KWIXM] = " ";
            TS0KW01.TSWCRAFT[TS0KWIXM] = " ";
            TS0KW01.TSWSHPNB[TS0KWIXM] = " ";
            TS0KW01.TSWORIG[TS0KWIXM] = " ";
            TS0KW01.TSWDEST[TS0KWIXM] = " ";
            TS0KW01.TSWXWHCD[TS0KWIXM] = " ";
            TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* increment index*/
          end

          TS0KW01.TS0KMCAR = TS0KM002.TS0KMCAR;
          TS0KW01.TS0KMCFT = TS0KM002.TS0KMCFT;
          TS0KW01.TS0KMSHP = TS0KM002.TS0KMSHP;
          TS0KW01.TS0KMBOL = TS0KM002.TS0KMBOL;
          TS0KW01.TS0KMCNT = TS0KM002.TS0KMCNT;
          TS0KW01.TS0KMDST = TS0KM002.TS0KMDST;
          TS0KW01.TS0KWBDT = TS0KM002.TSNBEGDT;
          TS0KW01.TSFRWRDR = TS0KM002.TSFRWRDR;
          TS0KW01.TS0KWEDT = TS0KM002.TSNENDDT;
          TS0KW01.XWHCD = TS0KM002.XWHCD;
          TS0KW01.XGPCD = TS0KM002.XGPCD;

          set TS0KM002 initial; /* clear map*/

          TS0KM002.TS0KMCAR = TS0KW01.TS0KMCAR;
          TS0KM002.TS0KMCFT = TS0KW01.TS0KMCFT;
          TS0KM002.TS0KMSHP = TS0KW01.TS0KMSHP;
          TS0KM002.TS0KMBOL = TS0KW01.TS0KMBOL;
          TS0KM002.TS0KMCNT = TS0KW01.TS0KMCNT;
          TS0KM002.TS0KMDST = TS0KW01.TS0KMDST;
          TS0KM002.TSFRWRDR = TS0KW01.TSFRWRDR;
          TS0KM002.TSNBEGDT = TS0KW01.TS0KWBDT;
          TS0KM002.TSNENDDT = TS0KW01.TS0KWEDT;
          TS0KM002.XWHCD = TS0KW01.XWHCD;
          TS0KM002.XGPCD = TS0KW01.XGPCD;

          TS0KW01.TS0KWSWR = "Y"; /* set request for data to yes*/
          TS0K570(); /* Verify any changed data*/

        else /* If no data was changed*/

          TS0K570(); /* Verify selections and other data*/

        end
      end
    end
  end


end // end TS0K550

// Verify any changed data
Function TS0K570()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA MAP 2*/

   /* 1) Verify valid selections.*/
   /* 2) Verify that all dates entered are valid.*/
   /* 3) Verify that all locations entered are valid.*/
   /* 4) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* check valid selections*/
   /* ------------------------------------------------------------*/

  TS0KW01.TS0KWIXM = 13; /* set index to 13*/
  while (TS0KW01.TS0KWIXM > 0) /* until end of selection lines*/
    if (TS0KM002.TS0KMSEL[TS0KWIXM] != "S" /* if selection is not 's'*/
     && TS0KM002.TS0KMSEL[TS0KWIXM] != " ") /* selection is not blank*/
      converseLib.validationFailed(13); /* Error message*/
      TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
      TS0KM002.XXXPRCNM = "TS0K570"; /* Process name*/
      set TS0KM002.TS0KMSEL[TS0KWIXM] cursor, modified, bold;
    end
    TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM - 1; /* decrement*/
  end

   /* ------------------------------------------------------------*/
     /* check for key fields being entered*/
   /* ------------------------------------------------------------*/

  TS0K573(); /* key fields edit*/

   /* ------------------------------------------------------------*/
     /* if destination entered, get the description*/
   /* ------------------------------------------------------------*/

  if (TS0KM002.TS0KMDST != " ") /* if destination entered*/
    TSCREC.TSCLOCCD = TS0KM002.TS0KMDST; /* move in key*/
    TS0K521(); /* select the location*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
      TS0KM002.XXXCITY = TSCREC.XXXCITY; /* move city descr*/
      TS0KW01.XXXCITY = TSCREC.XXXCITY; /* save city descr*/
    else
      TS0KW01.XXXCITY = " "; /* clear city descr*/
      TS0KM002.XXXCITY = " "; /* clear city descr*/
    end
  else
    TS0KW01.XXXCITY = " "; /* clear city descr*/
    TS0KM002.XXXCITY = " "; /* clear city descr*/
  end

   /* ------------------------------------------------------------*/
     /* if gpc entered, validate*/
   /* ------------------------------------------------------------*/

  if (TS0KM002.XGPCD != " ") /* if gpc entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0KM002.XGPCD in XGPTBL.XGPCD) /* If valid code*/
       /* next sentence*/
    else
      converseLib.validationFailed(101); /* Display error message*/
      TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
      TS0KM002.XXXPRCNM = "TS0K570"; /* Process name*/
      set TS0KM002.XGPCD cursor, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
     /* if warehouse entered, validate*/
   /* ------------------------------------------------------------*/

  if (TS0KM002.XWHCD != " ") /* if warehouse entered*/
    if (TS0KM002.XWHCD in XWHTBL.XWHCD) /* If valid code*/
       /* next sentence*/
    else
      converseLib.validationFailed(82); /* Display error message*/
      TS0KW01.TS0KWPSW = "Y"; /* Indicate problem*/
      TS0KM002.XXXPRCNM = "TS0K570"; /* Process name*/
      set TS0KM002.XWHCD cursor, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA end date entered*/
   /* ------------------------------------------------------------*/

  if (TS0KM002.TSNENDDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0KM002.TSNENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0KW01.TSNENDDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
      TS0KM002.XXXPRCNM = "TS0K570"; /* Process name*/
      set TS0KM002.TSNENDDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM002.XXXPRCNM = "TS0K570"; /* Process name*/
    set TS0KM002.TSNENDDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA start date entered*/
   /* ------------------------------------------------------------*/

  if (TS0KM002.TSNBEGDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0KM002.TSNBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0KW01.TSNBEGDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
      TS0KM002.XXXPRCNM = "TS0K570"; /* Process name*/
      set TS0KM002.TSNBEGDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM002.XXXPRCNM = "TS0K570"; /* Process name*/
    set TS0KM002.TSNBEGDT cursor, modified, bold;
  end

  if (TS0KW01.TS0KWPSW == "N") /* if all locations and dates valid*/
    TS0K572(); /* check span and date overlap errors*/
  end

  if (TS0KW01.TS0KWPSW == "N") /* if all locations and dates valid*/
    TS0KW01.TS0KW-MAP2-INVALID-DATA = "N"; /* Invalid data map 2*/
  else
    if (TS0KW01.TS0KWPSW == "Y") /* Problem switch set*/
      TS0KW01.TS0KW-MAP2-INVALID-DATA = "Y"; /* Invalid data map 2*/
    end
  end


end // end TS0K570

// Check date span and overlap
Function TS0K572()
   /* ------------------------------------------------------------*/

            /* CHECK DATE SPAN AND OVERLAP*/

   /* 1) Check that ETA end date is >= ETA begin date.*/
   /* 2) Check that not > 95 days between begin and end dates.*/

   /* Each of these checks will only be performed if the previous*/
      /* check has been successfully completed with no errors.*/

   /* ------------------------------------------------------------*/

  if (TS0KW01.TSNENDDT < TS0KW01.TSNBEGDT) /* if end date LT beg date*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(58); /* error 'must be >=' message*/
    TS0KM002.XXXPRCNM = "TS0K572"; /* process name*/
    set TS0KM002.TSNENDDT cursor, modified, bold;
  end

  if (TS0KW01.TS0KWPSW == "N") /* if no errors*/

     /* check date span < 96 for ETA dates*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0KW01.TSNBEGDT; /* begn date*/
    TA2REC.TA2DBDTN = TS0KW01.TSNENDDT; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN >= 96) /* if diff between dates > 95*/
        TS0KW01.TS0KWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0KM002.XXXPRCNM = "TS0K572"; /* process name*/
        set TS0KM002.TSNBEGDT cursor, modified, bold;
        set TS0KM002.TSNENDDT modified, bold;
      end
    end

  end


end // end TS0K572

// Key fields edit
Function TS0K573()
   /* ---------------------------------------------------------------------*/

     /* At least 1 of the following 4 fields has to be entered.*/

     /* 1.  CARRIER CODE*/
     /* 2.  Frieght Forwarder*/
     /* 3.  Bill of Lading*/
     /* 4.  Container Number*/

     /* If none of the fields are entered, display an error message*/
     /* indicating that 1 of the fields must be entered.*/

   /* ---------------------------------------------------------------------*/

  if (TS0KM002.TS0KMCAR == " " /* carrier code = spaces*/
   && TS0KM002.TSFRWRDR == " " /* freight forwarder code = spaces*/
   && TS0KM002.TS0KMBOL == " " /* bill of lading = spaces*/
   && TS0KM002.TS0KMCNT == " ") /* container = spaces*/
    converseLib.validationFailed(364); /* at least 1 field must be entered*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM002.XXXPRCNM = "TS0K573"; /* process name*/
    set TS0KM002.TS0KMCAR cursor, modified, bold;
    set TS0KM002.TSFRWRDR modified, bold;
    set TS0KM002.TS0KMBOL modified, bold;
    set TS0KM002.TS0KMCNT modified, bold;
  end

    /* An additional edit is required to make sure that either the carrier*/
    /* code or the freight forwarder is entered - not both at the same.*/

  if (TS0KM002.TSFRWRDR != " " /* has the ff code been entered*/
   && TS0KM002.TS0KMCAR != " ") /* and the carrier code entered?*/
    converseLib.validationFailed(142); /* error message*/
    TS0KW01.TS0KWPSW = "Y"; /* indicate problem*/
    TS0KM002.XXXPRCNM = "TS0K573"; /* process name*/
    set TS0KM002.TS0KMCAR cursor, modified, bold;
    set TS0KM002.TSFRWRDR modified, bold;
  end
end // end TS0K573

// Process valid input request
Function TS0K600()
   /* ------------------------------------------------------------*/
                /* PROCESS VALID INPUT REQUESTS*/

   /* 1) Record map shipment number selections.*/
   /* 2) If a scroll request, adjust temp storage page number.*/
   /* 3) If enter is pressed and no errors set request for data*/
      /* to yes.*/

   /* ------------------------------------------------------------*/

  if (TS0KW01.TS0KWPSW == "N") /* no errors*/

    /* ------------------------------------------------------------*/
                  /* Process Screen Selections*/

       /* 1) check to see if any selections have been made*/
       /* 2) if a selection has been made, then check to see*/
          /* if this shipment id has already been recorded in*/
          /* the shipment id array.*/
       /* 3) if the selction has not been recorded yet or has*/
          /* been deleted from the screen, then update the*/
          /* shipment id array with current values.*/

    /* ------------------------------------------------------------*/

    TS0KW01.TS0KWIXM = 1; /* initialize index*/
    while (TS0KW01.TS0KWIXM <= 13) /* until end of detail*/
      if (TS0KM001.TS5CRAFT[TS0KWIXM] != " " /* for each selection field*/
       || TS0KM002.TS5CRAFT[TS0KWIXM] != " ")
        if (TS0KM001.TS0KMSEL[TS0KWIXM] == "S" /* if selection made*/
         || TS0KM002.TS0KMSEL[TS0KWIXM] == "S")
          TS0KW01.TS0KWSFL = "N"; /* set selection flag*/
          TS0KW01.TS0KWIX2 = 1; /* set index*/
          while (TS0KW01.TS0KWIX2 <= TS0KW01.TS0KWMXP) /* until end of array*/
            if (TS0KW02.TSFSHPID[TS0KWIXM] == TS0KW01.TSWSHPID[TS0KWIX2])
              TS0KW01.TS0KWSFL = "Y"; /* set selection flag*/
              TS0KW01.TS0KWIX2 = TS0KW01.TS0KWMXP + 1; /* end loop*/
            else
              TS0KW01.TS0KWIX2 = TS0KW01.TS0KWIX2 + 1; /* increment index*/
            end
          end
          if (TS0KW01.TS0KWSFL == "N") /* if shpid does not exist*/
            TS0KW01.TS0KWIX2 = 1; /* set index*/
            while (TS0KW01.TS0KWIX2 <= TS0KW01.TS0KWMXP) /* until end array*/
              if (TS0KW01.TSWSHPID[TS0KWIX2] == 0) /* if field is open*/
                TS0KW01.TSWSHPID[TS0KWIX2] = TS0KW02.TSFSHPID[TS0KWIXM];
                TS0KW01.TSWBOL[TS0KWIX2] = TS0KW02.TSFBOL[TS0KWIXM];
                TS0KW01.TSWCARCD[TS0KWIX2] = TS0KW02.TSACARCD[TS0KWIXM];
                TS0KW01.TSWCRAFT[TS0KWIX2] = TS0KW02.TS5CRAFT[TS0KWIXM];
                TS0KW01.TSWSHPNB[TS0KWIX2] = TS0KW02.TSFSHPNB[TS0KWIXM];
                TS0KW01.TSWORIG[TS0KWIX2] = TS0KW02.TSEORIG[TS0KWIXM];
                TS0KW01.TSWDEST[TS0KWIX2] = TS0KW02.TSEDEST[TS0KWIXM];
                TS0KW01.TSWXWHCD[TS0KWIX2] = TS0KW02.XWHCD[TS0KWIXM];
                TS0KW01.TS0KWIX2 = TS0KW01.TS0KWMXP + 1; /* end loop*/
              else
                TS0KW01.TS0KWIX2 = TS0KW01.TS0KWIX2 + 1; /* increment index*/
              end
            end
          end
        else
          /* MOVE 1 TO TS0KW01.TS0KWIX2;   /* set index value*/
          while (TS0KW01.TS0KWIX2 <= TS0KW01.TS0KWMXP)
            if (TS0KW01.TSWSHPID[TS0KWIX2] == TS0KW02.TSFSHPID[TS0KWIXM])
              TS0KW01.TSWSHPID[TS0KWIX2] = 0; /* reset ws ship id*/
              TS0KW01.TSWBOL[TS0KWIX2] = " ";
              TS0KW01.TSWCARCD[TS0KWIX2] = " ";
              TS0KW01.TSWCRAFT[TS0KWIX2] = " ";
              TS0KW01.TSWSHPNB[TS0KWIX2] = " ";
              TS0KW01.TSWORIG[TS0KWIX2] = " ";
              TS0KW01.TSWDEST[TS0KWIX2] = " ";
              TS0KW01.TSWXWHCD[TS0KWIX2] = " ";
            end
            TS0KW01.TS0KWIX2 = TS0KW01.TS0KWIX2 + 1; /* increment index*/
          end
        end
      end
      TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* increment index*/
    end

    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      TS0KW01.TS0KWTSP = TS0KW01.TS0KWTSP - 1; /* Decrement page number*/
    else
      if (converseVar.eventKey is pf8) /* Scroll forward requested*/
        TS0KW01.TS0KWTSP = TS0KW01.TS0KWTSP + 1; /* Increment page number*/
      else
        if (converseVar.eventKey is pf12) /* Scroll forward requested*/

          /* ------------------------------------------------------------*/
             /* transfer to ts0j, shipment maintenance*/
          /* ------------------------------------------------------------*/

          TS0KW01.TS0KWIXM = 1; /* set index*/
          TS0KW01.TS0KWIXW = 1;
          while (TS0KW01.TS0KWIXM <= TS0KW01.TS0KWMXP) /* while le max*/
            if (TS0KW01.TSWSHPID[TS0KWIXM] > 0) /* if data exists*/
              TSWREC.TSWARR1[TS0KWIXW] = TS0KW01.TSWARR1[TS0KWIXM];
              TSWREC.TSWINQFL = "Y"; /* indicate inquiry exists*/
              TS0KW01.TS0KWIXW = TS0KW01.TS0KWIXW + 1; /* incr index*/
            end
            TS0KW01.TS0KWIXM = TS0KW01.TS0KWIXM + 1; /* incr index*/
          end

          if (TSWREC.TSWINQFL == " ") /* no ship id's found in array*/
            TS0KW01.TS0KWPSW = "Y"; /* indicate error*/
            converseLib.validationFailed(153); /* error message*/
            TS0KM001.XXXPRCNM = "TS0K600"; /* process name*/
          else
            TSWREC.TSWSHPOS = 1; /* set ship id index position*/
            COMMAREA.CATOAP = "TS0J"; /* to application*/
            COMMAREA.CAFROMAP = "TS0K"; /* from application*/
            TSWREC.TSWFRAPP = "TS0K"; /* from application*/
            COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass dataa*/
            COMMAREA.CAITEM = " "; /* application data*/
            TS0K110(); /* purge any temporary storage*/
            XSTSS01(); /* exit to another application*/
            TS0KW01.TS0KWSWR = "Y"; /* set request for data to yes*/
          end

        else
          if (converseVar.eventKey is enter /* if enter is pressed*/
           && TS0KW01.TS0KWPSW == "N")      /* and no errors*/
          end
        end
      end
    end
  end


end // end TS0K600

// select (S )    DPRODC.VPOHDR01
Function TS0KS01()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PCYREC.PCYFUNC = "S "; /* Select alternate*/
  PC3REC.XGPCD = TS7REC.XGPCD; /* GPC*/
  PC3REC.PC3PONBR = TS7REC.PC3PONBR; /* P.O. nbr*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0KS01"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0KM001.XXXPRCNM = "TS0KS01"; /* Process name*/
  TS0KM002.XXXPRCNM = "TS0KS01"; /* Process name*/
  TS0KW01.TS0KWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0KS01

//*** RECORD=TS0KW01 ****
// Working storage for TS0G - Schedule Inquiry
// ***********************
Record TS0KW01 type basicRecord
  10 TS0KWIXM TS0KWIXM ; 
  10 TS0KWIXW TS0KWIXW ; 
  10 TS0KWIX2 TS0KWIX2 ; 
  10 TS0KWMXP TS0KWMXP ; 
  10 TS0KWSW1 TS0KWSW1 ; 
  10 TS0KWSW2 TS0KWSW2 ; 
  10 TS0KWSW3 TS0KWSW3 ; 
  10 TS0KWCFL TS0KWCFL ; 
  10 TS0KWSWR TS0KWSWR ; 
  10 TS0KWPSW TS0KWPSW ; 
  10 TS0KW-NO-DATA-MAP-1 TS0KW-NO-DATA-MAP-1 ; 
  10 TS0KW-NO-DATA-MAP-2 TS0KW-NO-DATA-MAP-2 ; 
  10 TS0KW-MAP1-INVALID-DATA TS0KW-MAP1-INVALID-DATA ; 
  10 TS0KW-MAP2-INVALID-DATA TS0KW-MAP2-INVALID-DATA ; 
  10 TS0KWSFL TS0KWSFL ; 
  10 TS0KMCAR TS0KMCAR ; 
  10 TS0KMCFT TS0KMCFT ; 
  10 TS0KMSHP TS0KMSHP ; 
  10 TS0KMDST TS0KMDST ; 
  10 XXXCITY XXXCITY ; 
  10 XWHCD XWHCD ; 
  10 XGPCD XGPCD ; 
  10 TS0KMBOL TS0KMBOL ; 
    15 TS0KWBLC TS0KWBLC [16] ; 
  10 TS0KMCNT TS0KMCNT ; 
    15 TS0KWCNC TS0KWCNC [14] ; 
  10 TSNBEGDT TSNBEGDT ; 
  10 TS0KWBDT TS0KWBDT ; 
  10 TSFRWRDR TSFRWRDR ; 
  10 TSNENDDT TSNENDDT ; 
  10 TS0KWEDT TS0KWEDT ; 
  10 TSWARR1 TSWARR1 [10] ; 
    15 TSWSHPID TSWSHPID ; 
    15 TSWBOL TSWBOL ; 
    15 TSWCARCD TSWCARCD ; 
    15 TSWCRAFT TSWCRAFT ; 
    15 TSWSHPNB TSWSHPNB ; 
    15 TSWORIG TSWORIG ; 
    15 TSWDEST TSWDEST ; 
    15 TSWXWHCD TSWXWHCD ; 
  10 TS0KWWDT TS0KWWDT ; 
    15 TS0KWWCC TS0KWWCC ; 
    15 TS0KWWYY TS0KWWYY ; 
    15 TS0KWWMM TS0KWWMM ; 
    15 TS0KWWDD TS0KWWDD ; 
  10 TS0KWMDT TS0KWMDT ; 
    15 TS0KWMMM TS0KWMMM ; 
    15 TS0KWMDD TS0KWMDD ; 
    15 TS0KWMYY TS0KWMYY ; 
  10 TS0KWTSP TS0KWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TS0KWSWM TS0KWSWM ; 
  10 TS0KWDAT TS0KWDAT ; 
    15 TS0KWPCN TS0KWPCN ; 
    15 TS0KWPYY TS0KWPYY ; 
    15 TS0KWPM1 TS0KWPM1 ; 
    15 TS0KWPM2 TS0KWPM2 ; 
  10 TS0KWIDT TS0KWIDT ; 
    15 TS0KWPYR TS0KWPYR ; 
    15 TS0KWPMO TS0KWPMO ; 
    15 TS0KWDMO TS0KWDMO ; 
    15 TS0KWFAC TS0KWFAC ; 
  10 TS0KWSOI TS0KWSOI ; 
end // end TS0KW01

//*** RECORD=TS0KW02 ****
// Temporary storage record for TS0G - Schedule Inquiry
// ***********************
Record TS0KW02 type basicRecord
  10 TS0KWLEN TS0KWLEN ; 
  10 TS0KWLIN TS0KWLIN [13] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSACARCD TSACARCD ; 
    15 TS5CRAFT TS5CRAFT ; 
    15 TSFSHPNB TSFSHPNB ; 
    15 TSFDESTE TSFDESTE ; 
    15 TSEORIG TSEORIG ; 
    15 TSEDEST TSEDEST ; 
    15 XWHCD XWHCD ; 
    15 TSFBOL TSFBOL ; 
    15 YSSCD YSSCD ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 PC2CUXID PC2CUXID ; 
    15 TS0KWPOD TS0KWPOD ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC3PONBR PC3PONBR ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 TSISHPQT TSISHPQT ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 TSIDETFL TSIDETFL ; 
  10 TS0KWORI TS0KWORI ; 
    15 TS0KWOR1 TS0KWOR1 ; 
    15 TS0KWOR2 TS0KWOR2 ; 
      20 TS0KWOR3 TS0KWOR3 ; 
      20 TS0KWOR4 TS0KWOR4 ; 
end // end TS0KW02

//*** RECORD=TS0KW03 ****
//    TRANSPORTATION COUNT INQUIRY PARAMETERS
//    PARAMETERS TO PASS:    Entered function ===> TSCFNC
// 
//    DATE      NAME       DESCRIPTION OF CHANGE
//    -----   -------     -----------------------------
//   03/05/97  LWILS2      NEW RECORD USED TO TRANSFER DATA
//   03/24/97  LWILS2      added gpc code  TO TRANSFER DATA
// ***********************
Record TS0KW03 type basicRecord
  5 TSCOGRP TSCOGRP ; 
    10 TSCFNC TSCFNC ; 
    10 TSCCNT TSCCNT ; 
    10 TSCFILL TSCFILL ; 
    10 TSCBEGDT TSCBEGDT ; 
    10 TSCENDDT TSCENDDT ; 
    10 TSCLOCXR TSCLOCXR ; 
    10 TSCHICXR TSCHICXR ; 
end // end TS0KW03

// Bill of Lading
DataItem TS0KMBOL char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save carrier
DataItem TS0KMCAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save craft
DataItem TS0KMCFT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Container number
DataItem TS0KMCNT char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save destination
DataItem TS0KMDST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save shipment number
DataItem TS0KMSHP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 1
DataItem TS0KW-MAP1-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 2
DataItem TS0KW-MAP2-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 1 to display
DataItem TS0KW-NO-DATA-MAP-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 2 to display
DataItem TS0KW-NO-DATA-MAP-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map begin parm date
DataItem TS0KWBDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bill of Lading characters
DataItem TS0KWBLC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Character enterd flag
DataItem TS0KWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Container number characters
DataItem TS0KWCNC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0KWDMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map end parm date
DataItem TS0KWEDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWFAC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWIDT char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields 2
DataItem TS0KWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0KWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0KWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS0KWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0KWLIN char(105)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map day
DataItem TS0KWMDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map date mmddyy
DataItem TS0KWMDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map month
DataItem TS0KWMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max pass shipment array lines
DataItem TS0KWMXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working map year
DataItem TS0KWMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWOR1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWOR2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWOR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWOR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWORI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0KWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWPM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWPM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWPOD char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0KWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0KWPYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem TS0KWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipping order number
DataItem TS0KWSOI bin(18,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch1
DataItem TS0KWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem TS0KWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch3
DataItem TS0KWSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map number
DataItem TS0KWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0KWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS0KWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working century
DataItem TS0KWWCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working day
DataItem TS0KWWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date ccyymmdd
DataItem TS0KWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working month
DataItem TS0KWWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working year
DataItem TS0KWWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

