package ts0h;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0H ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// TARTYPE         JCL statement        Variable        Columns
// -------         -------------        --------        -------
//    J                JOB              TARUSRID          5-10
//                     " "              TARUSRNM         27-46
//    N  (Test only)  NOTIFY            TARUSRID         23-28
//    O               OUTPUT            TARCOPY            34
//                    "    "            TARDEST          41-46
//    P             Parameters          TARJCL            1-80
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          11/29/89  CEPPLE  New application.
//          09/25/90  CEPPLE  Add map 10 for customer report
//                            to application.
// ts#147   11/19/90  DHUFFM  Split hard + soft error reports
//                            for separate requests.
//          03/05/91  KSTOKK  Add map 12 for Shipment Summary
//                            reports.
//          03/29/91  SFORD   Add map 13 & 14 for NIL Delivery
//                            Status Reports
//          08/04/92  SFORD   Modified map 14 for NIL Delivery
//                            Order Status Report.  Add sort
//                            question.
// TS#300   11/11/92  SFORD   Modified map 14 for NIL Delivery
//                            Order Status Report.  Add sort
//                            more questions.
// TS#357   07/27/93  NMASTE  Modified map 11 to select which
//                            NIKE Ship ID Customer Reports to
//                            print.
// TS#280   12/27/93  NMASTE  Added map 15 for Carrier Contract
//                            Terms Report to print.
// TS#364   09/02/94  SFORD   fix printer problem to rmt???
//                            for Carrier Contract
// TS#000   11/07/96  JCARL1  Remove alarm from msg display
// Y2KFIX   12/02/97  KSUMME  Y2K MODIFICATIONS MADE TO:
//                            TS0H124, TS0H125, TS0H144,
//                            TS0H154, map TS0HM014
// TS1609   03/17/98  MHUYNH  Allow to include all statuses in
//                            reports.
// TS1609   04/02/98  smann2  use theater of operation
//                            in Ts0H115 process
// TS1624   04/07/98  VKUMAR  Disabled soft err printing option
// *********************
Program TS0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TS0HW01 TS0HW01; // record
  TS0HW02 TS0HW02; // record
  TS0HW03 TS0HW03; // record
  TS0HW04 TS0HW04; // record
  TS0HW05 TS0HW05; // record
  TS0HW06 TS0HW06; // record
  TS0HW07 TS0HW07; // record
  TS0HW08 TS0HW08; // record
  TS0HW09 TS0HW09; // record
  TS0HW10 TS0HW10; // record
  TS0HW11 TS0HW11; // record
  TS0HW12 TS0HW12; // record
  TS0HW13 TS0HW13; // record
  TS0HW14 TS0HW14; // record
  TS0HW15 TS0HW15; // record
  TSAREC TSAREC; // record
  TSCREC TSCREC; // record
  TSFREC TSFREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  XCTHREC XCTHREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use YMTTBL {deleteAfterUse = yes}; // table
  use TS0HT02 {deleteAfterUse = yes}; // table
  use TS0HT03 {deleteAfterUse = yes}; // table
  use TS0HT04 {deleteAfterUse = yes}; // table
  use TS0HT05 {deleteAfterUse = yes}; // table
  use TS0HT06 {deleteAfterUse = yes}; // table
  use TS0HT07 {deleteAfterUse = yes}; // table
  use TS0HT08 {deleteAfterUse = yes}; // table
  use TS0HT09 {deleteAfterUse = yes}; // table
  use TS0HT1O {deleteAfterUse = yes}; // table
  use TS0HT11 {deleteAfterUse = yes}; // table
  use TS0HT51 {deleteAfterUse = yes}; // table
  use TS0HT12 {deleteAfterUse = yes}; // table
  use TS0HT13 {deleteAfterUse = yes}; // table
  use TS0HT14 {deleteAfterUse = yes}; // table
  use TS0HT15 {deleteAfterUse = yes}; // table
  use TS0HM.TA0PM001,  // forms
      TS0HM.TS0HM002, 
      TS0HM.TS0HM003, 
      TS0HM.TS0HM004, 
      TS0HM.TS0HM005, 
      TS0HM.TS0HM006, 
      TS0HM.TS0HM007, 
      TS0HM.TS0HM008, 
      TS0HM.TS0HM010, 
      TS0HM.TS0HM011, 
      TS0HM.TS0HM012, 
      TS0HM.TS0HM013, 
      TS0HM.TS0HM014, 
      TS0HM.TS0HM015, 
      TS0HM.TS0HM099
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set TS0HM002 initial; /* M002 input/output*/
    set TS0HM003 initial; /* M003 input/output*/
    set TS0HM004 initial; /* M004 input/output*/
    set TS0HM005 initial; /* M005 input/output*/
    set TS0HM006 initial; /* M006 input/output*/
    set TS0HM007 initial; /* M007 input/output*/
    set TS0HM008 initial; /* M008 input/output*/
    /* SET TS0HM009 CLEAR;               /* M009 input/output*/
    set TS0HM010 initial; /* M010 input/output*/
    set TS0HM011 initial; /* M011 input/output*/
    set TS0HM012 initial; /* M012 input/output*/
    set TS0HM013 initial; /* M012 input/output*/
    set TS0HM014 initial; /* M012 input/output*/
    set TS0HM015 initial; /* M012 input/output*/
    set TS0HM099 initial; /* M099 input/output*/
    set TS0HW01 empty; /* Working storage*/
    set TS0HW02 empty;
    set TS0HW03 empty;
    set TS0HW04 empty;
    set TS0HW05 empty;
    set TS0HW06 empty;
    set TS0HW07 empty;
    set TS0HW08 empty;
    /* SET TS0HW09 EMPTY;*/
    set TS0HW10 empty;
    set TS0HW11 empty;
    set TS0HW12 empty;
    set TS0HW13 empty;
    set TS0HW14 empty;
    set TS0HW15 empty;
    set TSAREC empty; /* DTRANS.VTSCAR01 record*/
    set TSCREC empty; /* DTRANS.VTSLOC01 record*/
    set TSFREC empty; /* DTRANS.VSHPHD01 record*/
    set TSNREC empty; /* Pass record for IO2570*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /* Date edit fields*/
    set TA6REC empty; /* Print subroutine parameters*/

    TS0HW01.TS0HWPSW = "N"; /* Initialize problem switch*/

     /* ------------------------------------------------------------*/
     /* Indicate that the report distribution must be obtained.*/
     /* ------------------------------------------------------------*/

    TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

     /* ------------------------------------------------------------*/
     /* Indicate the number of selection lines on the report menu.*/
     /* ------------------------------------------------------------*/

    TS0HW01.TS0HWIXL = 15; /* Number of selection lines*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS0H001; /* Converse the main process*/


    TS0H001: TS0H001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS0H001; /* Converse the main process*/


  end // end main
end // end TS0H

// Main process to display a map
Function TS0H001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0HW01.TS0HWSWX != "Y") /* EXIT not requested*/

    if (TS0HW01.TS0HMSEL[1] == "S" /* Line 1 was selected*/
     || TA6REC.TA6SUBSW == "I")    /* or information requested*/

      TS0H010(); /* Specify report distribution*/

    end

    if (TS0HW01.TS0HMSEL[2] == "S") /* Line 2 was selected*/
      TS0H020(); /* Transportation Carriers Report*/
    end

    if (TS0HW01.TS0HMSEL[3] == "S") /* Line 3 was selected*/
      TS0H030(); /* Transportation Carrier/Crafts Rpt*/
    end

    if (TS0HW01.TS0HMSEL[4] == "S") /* Line 4 was selected*/
      TS0H040(); /* Location by City Report*/
    end

    if (TS0HW01.TS0HMSEL[5] == "S") /* Line 5 was selected*/
      TS0H050(); /* Location by Shipping Region Report*/
    end

    if (TS0HW01.TS0HMSEL[6] == "S") /* Line 6 was selected*/
      TS0H060(); /* Transit Time by Origin Report*/
    end

    if (TS0HW01.TS0HMSEL[7] == "S") /* Line 7 was selected*/
      TS0H070(); /* Transit Time by Destination Report*/
    end

    if (TS0HW01.TS0HMSEL[8] == "S") /* Line 8 was selected*/
      TS0H080(); /* Trans Carrier Contracts Report*/
    end

    /* IF TS0HW01.TS0HMSEL(9) EQ 'S';  /* Line 9 was selected*/
    /* PERFORM TS0H090;               Soft error report*/
    /* END;*/

    if (TS0HW01.TS0HMSEL[10] == "S") /* Line 10 was selected*/
      TS0H100(); /* Hard error report*/
    end

    if (TS0HW01.TS0HMSEL[11] == "S") /* Line 11 was selected*/
      TS0H110(); /* Customer reports*/
    end

    if (TS0HW01.TS0HMSEL[12] == "S") /* Line 12 was selected*/
      TS0H120(); /* Shipment Summary by ATD Report*/
    end

    if (TS0HW01.TS0HMSEL[13] == "S") /* Line 13 was selected*/
      TS0H130(); /* NIL Delivery Shipping Status Report*/
    end

    if (TS0HW01.TS0HMSEL[14] == "S") /* Line 14 was selected*/
      TS0H140(); /* NIL Delivery Order    Status Report*/
    end

    if (TS0HW01.TS0HMSEL[15] == "S") /* Line 15 was selected*/
      TS0H150(); /* Carrier Contract Terms Report*/
    end

  end

  TS0HW01.TS0HWSWX = "N"; /* Reset exit requested switch*/

  TS0H990(); /* Report Request Menu*/


end // end TS0H001

// Specify report distribution
Function TS0H010()
   /* ------------------------------------------------------------*/
   /* Obtain and/or display the routing information for the user.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/

  while (TA6REC.TA6RTNCD < "0") /* Until subroutine completed*/
    XPTA0P(); /* Print Request Subroutine*/
  end

   /* ------------------------------------------------------------*/
   /* If first time through, indicate information was obtained.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.TA6SUBSW == "I") /* Obtain report distribution*/

    TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    TS0HW01.TS0HMSEL[1] = "*"; /* Indicate function completed*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    TS0HW01.TS0HMSEL[1] = "C"; /* Indicate function cancelled*/

    /* ------------------------------------------------------------*/
     /* If missing distribution information, indicate that exit was*/
     /* requested.  Otherwise, return to continue processing.*/
    /* ------------------------------------------------------------*/

    if (TA6REC.XURDEST == " "  /* No print destination*/
     || TA6REC.XURUSRNM == " " /* or report recipient*/
     || TA6REC.XURBLDID == " ") /* or NIKE building*/

      TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    else

      return; /* Return to previous process*/

    end

  else

    TS0HM002.XXXPRCNM = "TS0H010"; /* Module identification*/
    TS0HM003.XXXPRCNM = "TS0H010";
    TS0HM004.XXXPRCNM = "TS0H010";
    TS0HM005.XXXPRCNM = "TS0H010";
    TS0HM099.XXXPRCNM = "TS0H010";
    converseLib.validationFailed(10); /* Indicate system error*/

  end


end // end TS0H010

// ** Trans Carriers Report **
Function TS0H020()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H021(); /* Format and display the map*/

  TS0H022(); /* Check attention identifier*/

  TS0H023(); /* Reset fields to normal intensity*/

  TS0H024(); /* Verify the data that was entered*/

  TS0H025(); /* Process valid input request*/


end // end TS0H020

// Format and display the map
Function TS0H021()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  set TS0HM002 initial;

  TS0HM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM002.XURDEST = TA6REC.XURDEST; /* Print destination*/
  TS0HM002.XRODESC = TA6REC.XRODESC; /* Printer description*/
  TS0HM002.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  TS0HM002.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  TS0HM002.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM002 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM002 ;


end // end TS0H021

// Check attention identifier
Function TS0H022()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[2] = "C"; /* Indicate selection cancelled*/

    set TS0HM002 initial; /* M002 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM002.XXXPRCNM = "TS0H022"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H022

// Reset highlighted fields
Function TS0H023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/



end // end TS0H023

// Verify the entered data
Function TS0H024()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/



end // end TS0H024

// Process valid input request
Function TS0H025()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT02.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW02 empty; /* Parameters work area*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW02.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT02.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT02.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT02.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM002.XXXPRCNM = "TS0H025"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(18); /* Job was submitted*/
    TS0HW01.TS0HMSEL[2] = "*"; /* Indicate function completed*/

    set TS0HM002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H025

// ** Trans Carr/Crafts Report **
Function TS0H030()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H031(); /* Format and display the map*/

  TS0H032(); /* Check attention identifier*/

  TS0H033(); /* Reset fields to normal intensity*/

  TS0H034(); /* Verify the data that was entered*/

  TS0H035(); /* Process valid input request*/



end // end TS0H030

// Format and display the map
Function TS0H031()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  set TS0HM003 initial;

  TS0HM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM003.XURDEST = TA6REC.XURDEST; /* Print destination*/
  TS0HM003.XRODESC = TA6REC.XRODESC; /* Printer description*/
  TS0HM003.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  TS0HM003.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  TS0HM003.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM003 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM003 ;


end // end TS0H031

// Check attention identifier
Function TS0H032()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[3] = "C"; /* Indicate selection cancelled*/

    set TS0HM003 initial; /* m003 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM003.XXXPRCNM = "TS0H032"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end



end // end TS0H032

// Reset highlighted fields
Function TS0H033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/



end // end TS0H033

// Verify the entered data
Function TS0H034()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/



end // end TS0H034

// Process valid input request
Function TS0H035()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT03.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW03 empty; /* Parameters work area*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW03.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT03.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT03.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT03.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM003.XXXPRCNM = "TS0H035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(19); /* Job was submitted*/
    TS0HW01.TS0HMSEL[3] = "*"; /* Indicate function completed*/

    set TS0HM003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H035

// ** Location by City Report **
Function TS0H040()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H041(); /* Format and display the map*/

  TS0H042(); /* Check attention identifier*/

  TS0H043(); /* Reset fields to normal intensity*/

  TS0H044(); /* Verify the data that was entered*/

  TS0H045(); /* Process valid input request*/


end // end TS0H040

// Format and display the map
Function TS0H041()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  set TS0HM004 initial;

  TS0HM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM004.XURDEST = TA6REC.XURDEST; /* Print destination*/
  TS0HM004.XRODESC = TA6REC.XRODESC; /* Printer description*/
  TS0HM004.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  TS0HM004.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  TS0HM004.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM004 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM004 ;


end // end TS0H041

// Check attention identifier
Function TS0H042()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[4] = "C"; /* Indicate selection cancelled*/

    set TS0HM004 initial; /* m004 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM004.XXXPRCNM = "TS0H042"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H042

// Reset highlighted fields
Function TS0H043()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/



end // end TS0H043

// Verify the entered data
Function TS0H044()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/



end // end TS0H044

// Process valid input request
Function TS0H045()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT04.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW04 empty; /* Parameters work area*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW04.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT04.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT04.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT04.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM004.XXXPRCNM = "TS0H045"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(20); /* Job was submitted*/
    TS0HW01.TS0HMSEL[4] = "*"; /* Indicate function completed*/

    set TS0HM004 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H045

// ** Location by Ship Rgn Rpt **
Function TS0H050()
   /* GET TS0H020*/
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H051(); /* Format and display the map*/

  TS0H052(); /* Check attention identifier*/

  TS0H053(); /* Reset fields to normal intensity*/

  TS0H054(); /* Verify the data that was entered*/

  TS0H055(); /* Process valid input request*/


end // end TS0H050

// Format and display the map
Function TS0H051()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  set TS0HM005 initial;

  TS0HM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM005.XURDEST = TA6REC.XURDEST; /* Print destination*/
  TS0HM005.XRODESC = TA6REC.XRODESC; /* Printer description*/
  TS0HM005.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  TS0HM005.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  TS0HM005.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM005 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM005 ;


end // end TS0H051

// Check attention identifier
Function TS0H052()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[5] = "C"; /* Indicate selection cancelled*/

    set TS0HM005 initial; /* m005 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM005.XXXPRCNM = "TS0H052"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H052

// Reset highlighted fields
Function TS0H053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/



end // end TS0H053

// Verify the entered data
Function TS0H054()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/



end // end TS0H054

// Process valid input request
Function TS0H055()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT05.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW05 empty; /* Parameters work area*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW05.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT05.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT05.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT05.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM005.XXXPRCNM = "TS0H055"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(20); /* Job was submitted*/
    TS0HW01.TS0HMSEL[5] = "*"; /* Indicate function completed*/

    set TS0HM005 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H055

// ** Transit Time by Origin  **
Function TS0H060()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H061(); /* Format and display the map*/

  TS0H062(); /* Check attention identifier*/

  TS0H063(); /* Reset fields to normal intensity*/

  TS0H064(); /* Verify the data that was entered*/

  TS0H065(); /* Process valid input request*/


end // end TS0H060

// Format and display the map
Function TS0H061()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  set TS0HM006 initial;

  TS0HM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM006.XURDEST = TA6REC.XURDEST; /* Print destination*/
  TS0HM006.XRODESC = TA6REC.XRODESC; /* Printer description*/
  TS0HM006.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  TS0HM006.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  TS0HM006.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM006 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM006 ;


end // end TS0H061

// Check attention identifier
Function TS0H062()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[6] = "C"; /* Indicate selection cancelled*/

    set TS0HM006 initial; /* m006 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM006.XXXPRCNM = "TS0H062"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H062

// Reset highlighted fields
Function TS0H063()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/



end // end TS0H063

// Verify the entered data
Function TS0H064()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/



end // end TS0H064

// Process valid input request
Function TS0H065()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT06.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW06 empty; /* Parameters work area*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW06.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT06.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT06.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT06.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM006.XXXPRCNM = "TS0H065"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(277); /* Job was submitted*/
    TS0HW01.TS0HMSEL[6] = "*"; /* Indicate function completed*/

    set TS0HM006 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H065

// ** Transit Time by Destin  **
Function TS0H070()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H071(); /* Format and display the map*/

  TS0H072(); /* Check attention identifier*/

  TS0H073(); /* Reset fields to normal intensity*/

  TS0H074(); /* Verify the data that was entered*/

  TS0H075(); /* Process valid input request*/


end // end TS0H070

// Format and display the map
Function TS0H071()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  set TS0HM007 initial;

  TS0HM007.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM007.XURDEST = TA6REC.XURDEST; /* Print destination*/
  TS0HM007.XRODESC = TA6REC.XRODESC; /* Printer description*/
  TS0HM007.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  TS0HM007.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  TS0HM007.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM007 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM007 ;


end // end TS0H071

// Check attention identifier
Function TS0H072()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[7] = "C"; /* Indicate selection cancelled*/

    set TS0HM007 initial; /* m007 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM007.XXXPRCNM = "TS0H072"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H072

// Reset highlighted fields
Function TS0H073()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/



end // end TS0H073

// Verify the entered data
Function TS0H074()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/



end // end TS0H074

// Process valid input request
Function TS0H075()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT07.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW07 empty; /* Parameters work area*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW07.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT07.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT07.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT07.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM007.XXXPRCNM = "TS0H075"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(278); /* Job was submitted*/
    TS0HW01.TS0HMSEL[7] = "*"; /* Indicate function completed*/

    set TS0HM007 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H075

// ** Trans Carrier Contracts **
Function TS0H080()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H081(); /* Format and display the map*/

  TS0H082(); /* Check attention identifier*/

  TS0H083(); /* Reset fields to normal intensity*/

  TS0H084(); /* Verify the data that was entered*/

  TS0H085(); /* Process valid input request*/


end // end TS0H080

// Format and display the map
Function TS0H081()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  set TS0HM008 initial;

  TS0HM008.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM008.XURDEST = TA6REC.XURDEST; /* Print destination*/
  TS0HM008.XRODESC = TA6REC.XRODESC; /* Printer description*/
  TS0HM008.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  TS0HM008.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  TS0HM008.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM008 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM008 ;


end // end TS0H081

// Check attention identifier
Function TS0H082()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[8] = "C"; /* Indicate selection cancelled*/

    set TS0HM008 initial; /* m008 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM008.XXXPRCNM = "TS0H082"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H082

// Reset highlighted fields
Function TS0H083()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/



end // end TS0H083

// Verify the entered data
Function TS0H084()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/



end // end TS0H084

// Process valid input request
Function TS0H085()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT08.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW08 empty; /* Parameters work area*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW08.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT08.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT08.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT08.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM008.XXXPRCNM = "TS0H085"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(279); /* Job was submitted*/
    TS0HW01.TS0HMSEL[8] = "*"; /* Indicate function completed*/

    set TS0HM008 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H085

// ** Hard Errors Report      **
Function TS0H100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H101(); /* Format and display the map*/

  TS0H102(); /* Check attention identifier*/

  TS0H103(); /* Reset fields to normal intensity*/

  TS0H104(); /* Verify the data that was entered*/

  TS0H105(); /* Process valid input request*/


end // end TS0H100

// Format and display the map
Function TS0H101()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  set TS0HM010 initial;

  TS0HM010.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM010.XURDEST = TA6REC.XURDEST; /* Print destination*/
  TS0HM010.XRODESC = TA6REC.XRODESC; /* Printer description*/
  TS0HM010.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
  TS0HM010.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
  TS0HM010.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM010 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM010 ;


end // end TS0H101

// Check attention identifier
Function TS0H102()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[10] = "C"; /* Indicate selection cancelled*/

    set TS0HM010 initial; /* m010 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM010.XXXPRCNM = "TS0H102"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H102

// Reset highlighted fields
Function TS0H103()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/



end // end TS0H103

// Verify the entered data
Function TS0H104()
   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/



end // end TS0H104

// Process valid input request
Function TS0H105()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT1O.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW10 empty; /* Parameters work area*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW10.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT1O.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT1O.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT1O.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM010.XXXPRCNM = "TS0H105"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(306); /* Job was submitted*/
    TS0HW01.TS0HMSEL[10] = "*"; /* Indicate function completed*/

    set TS0HM010 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H105

// ** Cust. Rpt by Ship Id    **
Function TS0H110()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H111(); /* Format and display the map*/

  TS0H112(); /* Check attention identifier*/

  TS0H113(); /* Reset fields to normal intensity*/

  TS0H114(); /* Verify the data that was entered*/

  TS0H115(); /* Process valid input request*/


end // end TS0H110

// Format and display the map
Function TS0H111()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  if (TS0HW01.TS0HWPSW == "N") /* If no errors have occured*/

    set TS0HM011 initial;

    TS0HM011.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TS0HM011.XURDEST = TA6REC.XURDEST; /* Print destination*/
    TS0HM011.XRODESC = TA6REC.XRODESC; /* Printer description*/
    TS0HM011.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    TS0HM011.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    TS0HM011.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM011 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM011 ;

  TS0HW01.TS0HWPSW = "N"; /* Reset problem switch*/
  TS0HM011.XXXPRCNM = "TS0H"; /* Reset map process name*/


end // end TS0H111

// Check attention identifier
Function TS0H112()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[11] = "C"; /* Indicate selection cancelled*/

    set TS0HM011 initial; /* m011 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM011.XXXPRCNM = "TS0H112"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H112

// Reset highlighted fields
Function TS0H113()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0HM011.TS0HM-SHP-NTF-RPT initialAttributes;
  set TS0HM011.TS0HM-PL-DTL-RPT initialAttributes;
  set TS0HM011.TS0HM-SHP-NTF-MAT-CTNT-RPT initialAttributes;
  set TS0HM011.TS0HM-DLVR-CNFM-RPT initialAttributes;

  TS0HW01.TS0HWIXM = 1;
  while (TS0HW01.TS0HWIXM <= 10)
    set TS0HM011.TSFSHPID[TS0HWIXM] initialAttributes;
    TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXM + 1;
  end


end // end TS0H113

// Verify the entered data
Function TS0H114()
   /* ------------------------------------------------------------*/
                 /* VERIFY THE ENTERED DATA*/

   /* 1) Check to see that at least one report has been entered.*/
   /* 2) Check to see that at least one ship id has been entered.*/
   /* 2) Check that no duplicate ship ids have been entered.*/
   /* 3) If a ship id has been entered, then verify each of the*/
      /* entered ship ids against the DTRANS.VSHPHD01 table.*/

   /* ------------------------------------------------------------*/

  set TS0HW11 empty;

   /* *****************************************/
   /* At least one ship id has been entered*/
   /* *****************************************/
  TS0HW01.TS0HWIXM = 1;
  while (TS0HW01.TS0HWIXM <= 10)
    if (TS0HM011.TSFSHPID[TS0HWIXM] > 0)
      TS0HW01.TS0HWIXM = 12; /* End the loop*/
    else
      if (TS0HW01.TS0HWIXM == 10) /* If no entries found*/
        converseLib.validationFailed(300); /* Must enter at least one shp id*/
        set TS0HM011.TSFSHPID[1] cursor, bold;
        TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
        TS0HM011.XXXPRCNM = "TS0H114";
      end
    end
    TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXM + 1;
  end

   /* *****************************************/
   /* Check to see if duplicates entered*/
   /* *****************************************/
  TS0HW01.TS0HWIXM = 10;
  while (TS0HW01.TS0HWIXM > 0)
    if (TS0HM011.TSFSHPID[TS0HWIXM] > 0) /* If nike shp id entered*/
      TS0HW01.TS0HWIXW = 1;
      while (TS0HW01.TS0HWIXW <= 10)
        if (TS0HM011.TSFSHPID[TS0HWIXM] == TS0HM011.TSFSHPID[TS0HWIXW]
         && TS0HW01.TS0HWIXM != TS0HW01.TS0HWIXW)
          converseLib.validationFailed(303); /* Must enter at least one shp id*/
          set TS0HM011.TSFSHPID[TS0HWIXM] cursor, bold;
          TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
          TS0HM011.XXXPRCNM = "TS0H114";
        end
        TS0HW01.TS0HWIXW = TS0HW01.TS0HWIXW + 1;
      end
    end
    TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXM - 1;
  end

   /* *****************************************/
   /* Verify each of the ship ids*/
   /* *****************************************/
  if (TS0HW01.TS0HWPSW == "N") /* If something was entered*/

    TS0HW01.TS0HWIXM = 10;
    while (TS0HW01.TS0HWIXM > 0)
      if (TS0HM011.TSFSHPID[TS0HWIXM] > 0) /* If shipment id entered*/
        set TSFREC empty;
        TSFREC.TSFSHPID = TS0HM011.TSFSHPID[TS0HWIXM];
        TS0HS90(); /* Select ship id from table*/
        if (SQLCA.VAGen_SQLCODE == 0 /* If found*/
         && TSFREC.YSSCD != "IP")    /* and not in-process*/
          TS0HW11.TSFSHPID[TS0HWIXM] = TS0HM011.TSFSHPID[TS0HWIXM];
        else
          if (SQLCA.VAGen_SQLCODE == 100 /* If not found*/
           || TSFREC.YSSCD == "IP")      /* or in-process*/
            converseLib.validationFailed(59); /* Invalid shp id entered*/
            set TS0HM011.TSFSHPID[TS0HWIXM] cursor, bold;
            TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
            TS0HM011.XXXPRCNM = "TS0H114";
          end
        end
      end
      TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXM - 1;
    end

  end

   /* *****************************************/
   /* At least one report has been entered*/
   /* *****************************************/

  if (TS0HM011.TS0HM-SHP-NTF-RPT != "S")
    if (TS0HM011.TS0HM-PL-DTL-RPT != "S")
      if (TS0HM011.TS0HM-SHP-NTF-MAT-CTNT-RPT != "S")
        if (TS0HM011.TS0HM-DLVR-CNFM-RPT != "S")
          converseLib.validationFailed(053); /* Must enter at least one rpt*/
          set TS0HM011.TS0HM-SHP-NTF-RPT cursor, bold;
          set TS0HM011.TS0HM-PL-DTL-RPT bold;
          set TS0HM011.TS0HM-SHP-NTF-MAT-CTNT-RPT bold;
          set TS0HM011.TS0HM-DLVR-CNFM-RPT bold;
          TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
          TS0HM011.XXXPRCNM = "TS0H114";
        end
      end
    end
  end

   /* *****************************************/
   /* Valid report 'S'election code*/
   /* *****************************************/

  if (TS0HM011.TS0HM-SHP-NTF-MAT-CTNT-RPT != " ")
    if (TS0HM011.TS0HM-SHP-NTF-MAT-CTNT-RPT != "S")
      set TS0HM011.TS0HM-SHP-NTF-MAT-CTNT-RPT cursor, bold;
      converseLib.validationFailed(013); /* 'S' only*/
      TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
      TS0HM011.XXXPRCNM = "TS0H114";
    else
      TS0HW11.TS0HW-SHP-NTF-MAT-CTNT-RPT = "Y";
    end
  else
    TS0HW11.TS0HW-SHP-NTF-MAT-CTNT-RPT = "N";
  end

  if (TS0HM011.TS0HM-DLVR-CNFM-RPT != " ")
    if (TS0HM011.TS0HM-DLVR-CNFM-RPT != "S")
      set TS0HM011.TS0HM-DLVR-CNFM-RPT cursor, bold;
      converseLib.validationFailed(013); /* 'S' only*/
      TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
      TS0HM011.XXXPRCNM = "TS0H114";
    else
      TS0HW11.TS0HW-DLVR-CNFM-RPT = "Y";
    end
  else
    TS0HW11.TS0HW-DLVR-CNFM-RPT = "N";
  end

  if (TS0HM011.TS0HM-PL-DTL-RPT != " ")
    if (TS0HM011.TS0HM-PL-DTL-RPT != "S")
      set TS0HM011.TS0HM-PL-DTL-RPT cursor, bold;
      converseLib.validationFailed(013); /* 'S' only*/
      TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
      TS0HM011.XXXPRCNM = "TS0H114";
    else
      TS0HW11.TS0HW-PL-DTL-RPT = "Y";
    end
  else
    TS0HW11.TS0HW-PL-DTL-RPT = "N";
  end

  if (TS0HM011.TS0HM-SHP-NTF-RPT != " ")
    if (TS0HM011.TS0HM-SHP-NTF-RPT != "S")
      set TS0HM011.TS0HM-SHP-NTF-RPT cursor, bold;
      converseLib.validationFailed(013); /* 'S' only*/
      TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
      TS0HM011.XXXPRCNM = "TS0H114";
    else
      TS0HW11.TS0HW-SHP-NTF-RPT = "Y";
    end
  else
    TS0HW11.TS0HW-SHP-NTF-RPT = "N";
  end

  TS0HW11.TS0HW-CLR-US-CSTMS-RPT = "N";

   /* *---------------------------------------------------**/
   /* * Exit to redisplay the map if problem found        **/
   /* *---------------------------------------------------**/
  if (TS0HW01.TS0HWPSW == "Y")
    exit stack;
  end


end // end TS0H114

// Process valid input request
Function TS0H115()
   /* ------------------------------------------------------------*/
    /* Call sub-routine to find which environment*/
    /* the program is executing in, development*/
    /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (sysVar.errorCode == "00000000") /* Call successful*/

      /* next sentence*/

  else

    converseLib.validationFailed(87); /* Error with print request*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* If on production system*/

    TS0H116(); /* Format production jcl*/
  else
    TS0H117(); /* Format test jcl*/

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/
   /* max cond for normal completion*/
  TA6REC.TA6-MAX-COND-CODE = 1;
  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM011.XXXPRCNM = "TS0H115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(301); /* Job was submitted*/
    TS0HW01.TS0HMSEL[11] = "*"; /* Indicate function completed*/

    set TS0HM011 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H115

// Process production jcl
Function TS0H116()
   /* ------------------------------------------------------------*/
   /* Initialize work area and indexes.*/
   /* ------------------------------------------------------------*/

  /* SET TA6REC EMPTY;*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1;
  TS0HW01.TS0HWIXT = 1;


   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT11.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      TS0HW11.TS0HWONI = "Y"; /* Indicate comming from online*/
      TA6REC.TARJCL[TA6INDEX] = TS0HW11.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT11.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT11.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT11.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

end // end TS0H116

// Process test jcl
Function TS0H117()
   /* ------------------------------------------------------------*/
   /* Initialize work area and indexes.*/
   /* ------------------------------------------------------------*/

  /* SET TA6REC EMPTY;*/

  move " " to TA6REC.TA6ROW[1] for all;

  TA6REC.TA6INDEX = 1;
  TS0HW01.TS0HWIXT = 1;


   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT51.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      TS0HW11.TS0HWONI = "Y"; /* Indicate comming from online*/
      TA6REC.TARJCL[TA6INDEX] = TS0HW11.TARJCL; /* Parameters*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT51.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT51.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT51.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

end // end TS0H117

// ** Shipment Summary Report **
Function TS0H120()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H121(); /* Format and display the map*/

  TS0H122(); /* Check attention identifier*/

  TS0H123(); /* Reset fields to normal intensity*/

  TS0H124(); /* Verify the data that was entered*/

  TS0H125(); /* Process valid input request*/


end // end TS0H120

// Format and display the map
Function TS0H121()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  if (TS0HW01.TS0HWPSW == "N") /* If no errors have occured*/

    set TS0HM012 initial;

    TS0HM012.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TS0HM012.XURDEST = TA6REC.XURDEST; /* Print destination*/
    TS0HM012.XRODESC = TA6REC.XRODESC; /* Printer description*/
    TS0HM012.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    TS0HM012.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    TS0HM012.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM012 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM012 ;

  TS0HW01.TS0HWPSW = "N"; /* Reset problem switch*/
  TS0HM012.XXXPRCNM = "TS0H"; /* Reset map process name*/


end // end TS0H121

// Check attention identifier
Function TS0H122()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[12] = "C"; /* Indicate selection cancelled*/

    set TS0HM012 initial; /* m012 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM012.XXXPRCNM = "TS0H122"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H122

// Reset highlighted fields
Function TS0H123()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0HM012.TS0HWMO initialAttributes;
  set TS0HM012.TS0HWYR initialAttributes;

end // end TS0H123

// Verify the entered data
Function TS0H124()
   /* ------------------------------------------------------------*/
                 /* VERIFY THE ENTERED DATA*/

      /* Check to see that an ATD month and year have been*/
      /* entered.*/

   /* ------------------------------------------------------------*/

   /* /---------------------  Y2K OUT BEGIN  ------------------------0*/
                                                                 /* Y*/
   /* /IF TS0HM012.TS0HWYR EQ 0;         /* No year*/
   /* MOVE 309 TO EZEMNO;             /* Must enter year*/
   /* SET TS0HM012.TS0HWYR CURSOR,BRIGHT;*/
   /* MOVE 'Y' TO TS0HW01.TS0HWPSW;   /* Indicate problem*/
   /* MOVE 'TS0H124' TO TS0HM012.XXXPRCNM;*/
   /* END;*/

   /* /----------------------  Y2K OUT END  ------------------------*/

  if (TS0HM012.TS0HWMO == 0 /* No month*/
   || TS0HM012.TS0HWMO > 12) /* Invalid month*/
    converseLib.validationFailed(165); /* Must enter month*/
    set TS0HM012.TS0HWMO cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
    TS0HM012.XXXPRCNM = "TS0H124";
  end

   /* *---------------------------------------------------**/
   /* * Exit to redisplay the map if problem found        **/
   /* *---------------------------------------------------**/
  if (TS0HW01.TS0HWPSW == "Y")
    exit stack;
  end


end // end TS0H124

// Process valid input request
Function TS0H125()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT12.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW12 empty; /* Parameters work area*/

      TS0HW12.TS0HWONI = "O"; /* Indicate online processing*/

      if (TS0HM012.TS0HWMO > 0)
   /* --------------------  Y2K OUT BEGIN  --------------*/
   /*  */
   /* IF TS0HM012.TS0HWYR GT 0;*/
   /*  */
   /* ---------------------  Y2K OUT END  ---------------*/
        TS0HW12.TS0HWMO = TS0HM012.TS0HWMO;
        TS0HW12.TS0HWYR = TS0HM012.TS0HWYR;
   /* --------------------  Y2K OUT BEGIN  --------------*/
   /*  */
   /* END;*/
   /*  */
   /* ---------------------  Y2K OUT END  ---------------*/
      end

      TA6REC.TARJCL[TA6INDEX] = TS0HW12.TARJCL; /* Parameters*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* OUTPUT ARRAY INDEX*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT12.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT12.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT12.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM012.XXXPRCNM = "TS0H125"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(310); /* Job was submitted*/
    TS0HW01.TS0HMSEL[12] = "*"; /* Indicate function completed*/

    set TS0HM012 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H125

// ** NIL Delivery Ship Status *
Function TS0H130()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H131(); /* Format and display the map*/

  TS0H132(); /* Check attention identifier*/

  TS0H133(); /* Reset fields to normal intensity*/

  TS0H134(); /* Verify the data that was entered*/

  TS0H135(); /* Process valid input request*/


end // end TS0H130

// Format and display the map
Function TS0H131()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  if (TS0HW01.TS0HWPSW == "N") /* If no errors have occured*/

    set TS0HM013 initial;

    TS0HM013.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TS0HM013.XURDEST = TA6REC.XURDEST; /* Print destination*/
    TS0HM013.XRODESC = TA6REC.XRODESC; /* Printer description*/
    TS0HM013.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    TS0HM013.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    TS0HM013.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM013 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM013 ;

  TS0HW01.TS0HWPSW = "N"; /* Reset problem switch*/
  TS0HM013.XXXPRCNM = "TS0H"; /* Reset map process name*/


end // end TS0H131

// Check attention identifier
Function TS0H132()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[13] = "C"; /* Indicate selection cancelled*/

    set TS0HM013 initial; /* M013 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM013.XXXPRCNM = "TS0H132"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H132

// Reset highlighted fields
Function TS0H133()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0HM013.PC2CUXID initialAttributes;

end // end TS0H133

// Verify the entered data
Function TS0H134()
   /* ------------------------------------------------------------*/
                 /* VERIFY THE ENTERED DATA*/

      /* Check to see that an Customer XREF has been entered.*/

   /* ------------------------------------------------------------*/

  if (TS0HM013.PC2CUXID == " ") /* No customer entered*/
    converseLib.validationFailed(146); /* Must enter customer*/
    set TS0HM013.PC2CUXID cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
    TS0HM013.XXXPRCNM = "TS0H134";
  else

    TS0HW01.PC2CUXID = TS0HM013.PC2CUXID; /* ===> CUSTOMER ENTERED*/
    if (TS0HW01.TS0HWXR1 == " " /* ===> customer root invalid*/
     || TS0HW01.TS0HWXR2 == " " /* ===> customer root invalid*/
     || TS0HW01.TS0HWXR3 == " ") /* ===> customer root invalid*/
      converseLib.validationFailed(296); /* Must enter customer root*/
      set TS0HM013.PC2CUXID cursor, bold;
      TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
      TS0HM013.XXXPRCNM = "TS0H134";
    end

  end


   /* *---------------------------------------------------**/
   /* * Exit to redisplay the map if problem found        **/
   /* *---------------------------------------------------**/
  if (TS0HW01.TS0HWPSW == "Y")
    exit stack;
  end


end // end TS0H134

// Process valid input request
Function TS0H135()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT13.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW13 empty; /* Parameters work area*/

      TS0HW13.TS0HWONI = "O"; /* Indicate online processing*/
      TS0HW13.PC2CUXID = TS0HM013.PC2CUXID;

      TA6REC.TARJCL[TA6INDEX] = TS0HW13.TARJCL; /* Parameters*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* OUTPUT ARRAY INDEX*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT13.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT13.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT13.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM013.XXXPRCNM = "TS0H135"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(311); /* Job was submitted*/
    TS0HW01.TS0HMSEL[13] = "*"; /* Indicate function completed*/

    set TS0HM013 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H135

// ** NIL Delivery Order Status *
Function TS0H140()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H141(); /* Format and display the map*/

  TS0H142(); /* Check attention identifier*/

  TS0H143(); /* Reset fields to normal intensity*/

  TS0H144(); /* Verify the data that was entered*/

  TS0H145(); /* Process valid input request*/


end // end TS0H140

// Format and display the map
Function TS0H141()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  if (TS0HW01.TS0HWPSW == "N") /* If no errors have occured*/

    set TS0HM014 initial;

    TS0HM014.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TS0HM014.XURDEST = TA6REC.XURDEST; /* Print destination*/
    TS0HM014.XRODESC = TA6REC.XRODESC; /* Printer description*/
    TS0HM014.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    TS0HM014.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    TS0HM014.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/
    TS0HM014.TS0HMSTA = "N"; /* 'cx' status question*/
    TS0HM014.TS0HM-SORT-ETS-FLAG = "N"; /* Origin sort flag*/
    TS0HM014.TS0HM-SORT-CTRY-FLAG = "N"; /* Origin sort flag*/

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                  /* Message to display*/
  /* ;*/
  /* SET TS0HM014 ALARM;            /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM014 ;

  TS0HW01.TS0HWPSW = "N"; /* Reset problem switch*/
  TS0HM014.XXXPRCNM = "TS0H"; /* Reset map process name*/


end // end TS0H141

// Check attention identifier
Function TS0H142()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[14] = "C"; /* Indicate selection cancelled*/

    set TS0HM014 initial; /* M014 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM014.XXXPRCNM = "TS0H142"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H142

// Reset highlighted fields
Function TS0H143()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0HM014.PC2CUXID initialAttributes;

   /* ------> BEGIN  PO ID MONTH RANGE*/
          /* ------------------------*/
  set TS0HM014.TS0HMBYY initialAttributes;
  set TS0HM014.TS0HMBM1 initialAttributes;
  set TS0HM014.TS0HMBM2 initialAttributes;

   /* ------> ENDING PO ID MONTH RANGE*/
          /* ------------------------*/
  set TS0HM014.TS0HMEYY initialAttributes;
  set TS0HM014.TS0HMEM1 initialAttributes;
  set TS0HM014.TS0HMEM2 initialAttributes;

   /* ------> include 'cx' item status question*/
          /* ---------------------------------*/
  set TS0HM014.TS0HMSTA initialAttributes;

   /* ------> sort by questions*/
          /* -----------------*/
  set TS0HM014.TS0HM-SORT-ETS-FLAG initialAttributes;
  set TS0HM014.TS0HM-SORT-CTRY-FLAG initialAttributes;

end // end TS0H143

// Verify the entered data
Function TS0H144()
   /* ------------------------------------------------------------*/
                 /* VERIFY THE ENTERED DATA*/

      /* Check item status question.*/

      /* Check to see that an PO ID month and year have been*/
      /* entered. (default begin P.O. range to end P.O. range*/
                        /* if it wasn't entered.*/

      /* Check to see that an Customer XREF has been entered.*/

   /* ------------------------------------------------------------*/


          /* -----------------------------------*/
          /* Sort by country of origin question.*/
          /* -----------------------------------*/

  if (TS0HM014.TS0HM-SORT-CTRY-FLAG != "Y" /* ===>  yes*/
   && TS0HM014.TS0HM-SORT-CTRY-FLAG != "N") /* ===>  no*/
    converseLib.validationFailed(46); /* ===>  Must be y/n*/
    set TS0HM014.TS0HM-SORT-CTRY-FLAG cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
    TS0HM012.XXXPRCNM = "TS0H144";
  end

          /* -----------------------------------*/
          /* Sort by ETS date question.*/
          /* -----------------------------------*/

  if (TS0HM014.TS0HM-SORT-ETS-FLAG != "Y" /* ===>  yes*/
   && TS0HM014.TS0HM-SORT-ETS-FLAG != "N") /* ===>  no*/
    converseLib.validationFailed(46); /* ===>  Must be y/n*/
    set TS0HM014.TS0HM-SORT-ETS-FLAG cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
    TS0HM012.XXXPRCNM = "TS0H144";
  end

          /* -----------------------------------*/
          /* Sort by question edit*/
          /* -----------------------------------*/

  if (TS0HM014.TS0HM-SORT-ETS-FLAG == "Y" /* ===>  yes*/
   && TS0HM014.TS0HM-SORT-CTRY-FLAG == "Y") /* ===>  yes*/
    converseLib.validationFailed(184); /* ===>  only one may be selected*/
    set TS0HM014.TS0HM-SORT-ETS-FLAG cursor, bold;
    set TS0HM014.TS0HM-SORT-CTRY-FLAG bold;
    TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
    TS0HM012.XXXPRCNM = "TS0H144";
  end


          /* -----------------------------------*/
          /* Include 'CX' item status question.*/
          /* -----------------------------------*/

  if (TS0HM014.TS0HMSTA != "Y" /* ===>  yes*/
   && TS0HM014.TS0HMSTA != "N") /* ===>  no*/
    converseLib.validationFailed(46); /* ===>  Must be y/n*/
    set TS0HM014.TS0HMSTA cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
    TS0HM012.XXXPRCNM = "TS0H144";
  end

          /* ------------------------*/
   /* ------> ENDING PO ID MONTH RANGE*/
          /* ------------------------*/

  if (TS0HM014.TS0HMEYY == 0 /* ===>  No year*/
   && TS0HM014.TS0HMEM1 == 0 /* ===>  No month*/
   && TS0HM014.TS0HMEM2 == 0) /* ===>  No month*/

    /* ======== NEXT SENTENCE ========>*/

  else

    if (TS0HM014.TS0HMEM2 == 0 /* ===>  No month*/
     || TS0HM014.TS0HMEM2 > 12) /* ===>  Invalid month*/
      converseLib.validationFailed(165); /* ===>  Must enter month*/
      set TS0HM014.TS0HMEM2 cursor, bold;
      TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
      TS0HM012.XXXPRCNM = "TS0H144"; /* ===>*/
    end

    if (TS0HM014.TS0HMEM1 == 0 /* ===>  No month*/
     || TS0HM014.TS0HMEM1 > 12) /* ===>  Invalid month*/
      converseLib.validationFailed(165); /* ===>  Must enter month*/
      set TS0HM014.TS0HMEM1 cursor, bold; /* ===>*/
      TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
      TS0HM012.XXXPRCNM = "TS0H144"; /* ===>*/
    end

   /* --------------------  Y2K OUT BEGIN  -----------------*/
   /*  */
   /* IF TS0HM014.TS0HMEYY EQ 0;     /* ===>  No year*/
   /* MOVE 164 TO EZEMNO;          /* ===>  Must enter year*/
   /* SET TS0HM014.TS0HMEYY CURSOR,BRIGHT;*/
   /* MOVE 'Y' TO TS0HW01.TS0HWPSW;/* ===>  Indicate problem*/
   /* MOVE 'TS0H144' TO TS0HM014.XXXPRCNM;*/
   /* END;*/
   /*  */
   /* ---------------------  Y2K OUT END  ------------------*/

  end /* ===> Ending P.O. MONTH RANGE Entered*/
                                   /* check*/

          /* ------------------------*/
   /* ------> BEGIN  PO ID MONTH RANGE*/
          /* ------------------------*/

  if (TS0HM014.TS0HMBM2 == 0 /* ===>  No month*/
   || TS0HM014.TS0HMBM2 > 12) /* ===>  Invalid month*/
    converseLib.validationFailed(165); /* ===>  Must enter month*/
    set TS0HM014.TS0HMBM2 cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
    TS0HM012.XXXPRCNM = "TS0H144";
  end

  if (TS0HM014.TS0HMBM1 == 0 /* ===>  No month*/
   || TS0HM014.TS0HMBM1 > 12) /* ===>  Invalid month*/
    converseLib.validationFailed(165); /* ===>  Must enter month*/
    set TS0HM014.TS0HMBM1 cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
    TS0HM012.XXXPRCNM = "TS0H144";
  end

   /* --------------------  Y2K OUT BEGIN  -----------------*/
   /*  */
   /* IF TS0HM014.TS0HMBYY EQ 0;       /* ===>  No year*/
   /* MOVE 164 TO EZEMNO;            /* ===>  Must enter year*/
   /* SET TS0HM014.TS0HMBYY CURSOR,BRIGHT;*/
   /* MOVE 'Y' TO TS0HW01.TS0HWPSW;  /* ===>  Indicate problem*/
   /* MOVE 'TS0H144' TO TS0HM014.XXXPRCNM;*/
   /* END;*/
   /*  */
   /* ---------------------  Y2K OUT END  ------------------*/

          /* ---------------------------------------*/
   /* ------> check customer or customer root entered*/
          /* ---------------------------------------*/
  if (TS0HM014.PC2CUXID == " ") /* ===>  No customer entered*/
    converseLib.validationFailed(146); /* ===>  Must enter customer*/
    set TS0HM014.PC2CUXID cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
    TS0HM014.XXXPRCNM = "TS0H144";

  else

    TS0HW01.PC2CUXID = TS0HM014.PC2CUXID; /* ===> CUSTOMER ENTERED*/
    if (TS0HW01.TS0HWXR1 == " " /* ===> customer root invalid*/
     || TS0HW01.TS0HWXR2 == " " /* ===> customer root invalid*/
     || TS0HW01.TS0HWXR3 == " ") /* ===> customer root invalid*/
      converseLib.validationFailed(296); /* ===>  Must enter customer root*/
      set TS0HM014.PC2CUXID cursor, bold;
      TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
      TS0HM014.XXXPRCNM = "TS0H134";
    end

  end


   /* *---------------------------------------------------**/
   /* * Exit to redisplay the map if problem found        **/
   /* *---------------------------------------------------**/
  if (TS0HW01.TS0HWPSW == "Y")
    exit stack;
  end

       /* *---------------------------------------------------**/
       /* * If the Ending P.O. ID MONTH RANGE not entered*/
       /* *   default the beginning entered date entered.*/
       /* *---------------------------------------------------**/

  if (TS0HM014.TS0HMEYY == 0 /* ===>  No year*/
   && TS0HM014.TS0HMEM1 == 0 /* ===>  No month*/
   && TS0HM014.TS0HMEM2 == 0) /* ===>  No month*/
    TS0HM014.TS0HMEYY = TS0HM014.TS0HMBYY; /* ===> year*/
    TS0HM014.TS0HMEM1 = TS0HM014.TS0HMBM1; /* ===> month 1*/
    TS0HM014.TS0HMEM2 = TS0HM014.TS0HMBM2; /* ===> month 2*/
  end

   /* ------------------------------------------------------------*/
   /* DATE   (for beginning range)*/
   /* ------------------------------------------------------------*/

  TS0HW01.TS0HWBYY = TS0HM014.TS0HMBYY;
  if (TS0HW01.TS0HWBYY > 85)
    TS0HW01.TS0HWBCC = 19;
  else
    TS0HW01.TS0HWBCC = 20;
  end

  TS0HW01.TS0HWBM1 = TS0HM014.TS0HMBM1;

  TS0HW01.TS0HWBM2 = TS0HM014.TS0HMBM2;


   /* ------------------------------------------------------------*/
   /* DATE   (for ending   range)*/
   /* ------------------------------------------------------------*/
  TS0HW01.TS0HWEYY = TS0HM014.TS0HMEYY;
  if (TS0HW01.TS0HWEYY > 85)
    TS0HW01.TS0HWECC = 19;
  else
    TS0HW01.TS0HWECC = 20;
  end

  TS0HW01.TS0HWEM1 = TS0HM014.TS0HMEM1;

  TS0HW01.TS0HWEM2 = TS0HM014.TS0HMEM2;

end // end TS0H144

// Process valid input request
Function TS0H145()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT14.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS0HW14 empty; /* Parameters work area*/

      TS0HW14.TS0HWONI = "O"; /* Indicate online processing*/
      TS0HW14.PC2CUXID = TS0HM014.PC2CUXID;
      TS0HW14.TS0HWRNG = TS0HW01.TS0HWRNG;
      TS0HW14.TS0HMSTA = TS0HM014.TS0HMSTA;

      if (TS0HM014.TS0HM-SORT-ETS-FLAG == "Y")
        TS0HW14.TS0HM-SORT-FLAG = "1";
      else
        if (TS0HM014.TS0HM-SORT-CTRY-FLAG == "Y")
          TS0HW14.TS0HM-SORT-FLAG = "2";
        else
          TS0HW14.TS0HM-SORT-FLAG = " "; /* --> default style sort*/
        end
      end

      TA6REC.TARJCL[TA6INDEX] = TS0HW14.TARJCL; /* Parameters*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* OUTPUT ARRAY INDEX*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT14.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT14.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT14.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM014.XXXPRCNM = "TS0H145"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(312); /* Job was submitted*/
    TS0HW01.TS0HMSEL[14] = "*"; /* Indicate function completed*/

    set TS0HM014 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H145

// ** Carrier Contract Terms   **
Function TS0H150()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H151(); /* Format and display the map*/

  TS0H152(); /* Check attention identifier*/

  TS0H153(); /* Reset fields to normal intensity*/

  TS0H154(); /* Verify the data that was entered*/

  TS0H155(); /* Process valid input request*/


end // end TS0H150

// Format and display the map
Function TS0H151()
   /* ------------------------------------------------------------*/
   /* Format the current date and report print destination.*/
   /* ------------------------------------------------------------*/

  if (TS0HW01.TS0HWPSW == "N") /* If no errors have occured*/

    set TS0HM015 initial;

    TS0HM015.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TS0HM015.XURDEST = TA6REC.XURDEST; /* Print destination*/
    TS0HM015.XRODESC = TA6REC.XRODESC; /* Printer description*/
    TS0HM015.XURUSRNM = TA6REC.XURUSRNM; /* Report recipient*/
    TS0HM015.XURBLDID = TA6REC.XURBLDID; /* NIKE building*/
    TS0HM015.XURCOPY = TA6REC.XURCOPY; /* Number of copies*/

  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                  /* Message to display*/
  /* ;*/
  /* SET TS0HM015 ALARM;            /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  converse TS0HM015 ;

  TS0HW01.TS0HWPSW = "N"; /* Reset problem switch*/
  TS0HM015.XXXPRCNM = "TS0H"; /* Reset map process name*/


end // end TS0H151

// Check attention identifier
Function TS0H152()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, indicate selection cancelled,*/
   /* clear the map fields and exit to display the next map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS0HW01.TS0HMSEL[15] = "C"; /* Indicate selection cancelled*/

    set TS0HM015 initial; /* M015 input/output*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If EXIT was requested, indicate exit to the selection menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0HW01.TS0HWSWX = "Y"; /* Indicate exit requested*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM015.XXXPRCNM = "TS0H152"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS0H152

// Reset highlighted fields
Function TS0H153()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0HM015.YMTCD initialAttributes;
  set TS0HM015.XGPCD initialAttributes;
  set TS0HM015.TS-CARR-GRP-CD initialAttributes;
  set TS0HM015.TSEORIG initialAttributes;
  set TS0HM015.TSEDEST initialAttributes;
  set TS0HM015.TSDBEGDT initialAttributes;

end // end TS0H153

// Verify the entered data
Function TS0H154()
   /* ------------------------------------------------------------*/
                 /* VERIFY THE ENTERED DATA*/
      /* Verify BUNgL Request.*/
      /* Verify Contract Begin Date.*/
      /* Verify Destination Code.*/
      /* Verify Origin Code.*/
      /* Verify Carrier Group Code.*/
      /* Verify XGP code.*/
      /* Verify YMT code -- Required*/
   /* ------------------------------------------------------------*/

  set TS0HW15 empty;

          /* -----------------------------------*/
          /* Verify BUNgL Request.*/
          /* -----------------------------------*/

  if (TS0HM015.TS0HM-BUNDL == " ")
    TS0HM015.TS0HM-BUNDL = "N";
  end

  if (TS0HM015.TS0HM-BUNDL == "N"
   || TS0HM015.TS0HM-BUNDL == "Y")

    if ("R" in TS0HT15.TARTYPE)
      TS0HW15.PRT-TARJCL = TS0HT15.TARJCL[sysVar.arrayIndex];
    end /* BUNgL routing*/

    TS0HW15.JOB-TARJCL = TS0HT15.TARJCL[1];

    if (TS0HM015.TS0HM-BUNDL == "N") /* send to remote printer*/
      TS0HW15.TS0HW-JOB-NUM = "1";
      TS0HW15.TS0HW-JOB-NUM-1 = "1";
      TS0HW15.TS0HW-PRT-CLASS = "P";
    else /* send to xerox/BUNgL printer*/
      TS0HW15.TS0HW-JOB-NUM = "2";
      TS0HW15.TS0HW-JOB-NUM-1 = "2";
      TS0HW15.TS0HW-PRT-CLASS = "N";
      TA6REC.XURDEST = "RMT999";
    end

    TS0HT15.TARJCL[1] = TS0HW15.JOB-TARJCL;
    TS0HT15.TARJCL[sysVar.arrayIndex] = TS0HW15.PRT-TARJCL;

  else

    TS0HW01.TS0HWPSW = "Y"; /* error has occurred*/
    TS0HM015.XXXPRCNM = "TS0H154";
    set TS0HM015.TS0HM-BUNDL cursor, bold;
    converseLib.validationFailed(46); /* 'y' or 'n' msg*/

  end

          /* -----------------------------------*/
          /* Verify Contract Begin Date.*/
          /* -----------------------------------*/

   /* --------------------  Y2K IN BEGIN  ------------*/

  set TA2REC empty;

   /* ---------------------  Y2K IN END  -------------*/
  if (TS0HM015.TSDBEGDT == 0)
    TS0HW15.TSDBEGDT = TS0HM015.TSDBEGDT;

  else

    TA2REC.TA2GRGA = TS0HM015.TSDBEGDT;
    TA2REC.TA2GRTYP = "A";

    TA2REC.TA2DTOPT = "GREGGREG";

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      TS0HW15.TSDBEGDT = TA2REC.TA2GRGGN;
    else
      TS0HW01.TS0HWPSW = "Y"; /* error has occurred*/
      TS0HM015.XXXPRCNM = "TS0H154";
      set TS0HM015.TSDBEGDT cursor, bold;
      converseLib.validationFailed(57); /* invalid date msg*/
    end

  end



          /* -----------------------------------*/
          /* Verify Destination Code.*/
          /* -----------------------------------*/

  if (TS0HM015.TSEDEST == " ")
    TS0HW15.TSEDEST = "*";

  else

    TSCREC.TSCLOCCD = TS0HM015.TSEDEST;
    TS0HS01(); /* verify location*/

    if (SQLCA.VAGen_SQLCODE != 0)
      TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
      converseLib.validationFailed(40); /* ===>  Invalid destination msg*/
      TS0HM015.XXXPRCNM = "TS0H154";
      set TS0HM015.TSEDEST cursor, bold;
      TS0HM015.TS0HM-DEST = " ";
    else
      TS0HW15.TSEDEST = TS0HM015.TSEDEST;
      TS0HM015.TS0HM-DEST = TSCREC.XXXCITY;
    end

  end


          /* -----------------------------------*/
          /* Verify Origin Code.*/
          /* -----------------------------------*/

  if (TS0HM015.TSEORIG == " ")
    TS0HW15.TSEORIG = "*";

  else

    TSCREC.TSCLOCCD = TS0HM015.TSEORIG;
    TS0HS01(); /* verify location*/

    if (SQLCA.VAGen_SQLCODE != 0)
      TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
      converseLib.validationFailed(41); /* ===>  Invalid origin msg*/
      TS0HM015.XXXPRCNM = "TS0H154";
      set TS0HM015.TSEORIG cursor, bold;
      TS0HM015.TS0HM-ORIG = " ";
    else
      TS0HW15.TSEORIG = TS0HM015.TSEORIG;
      TS0HM015.TS0HM-ORIG = TSCREC.XXXCITY;
    end

  end


          /* -----------------------------------*/
          /* Verify Carrier Group.*/
          /* -----------------------------------*/

  if (TS0HM015.TS-CARR-GRP-CD == " ")
    TS0HW15.TS-CARR-GRP-CD = "*";
  else
    TSAREC.TSACARCD = TS0HM015.TS-CARR-GRP-CD;
    TS0HS02(); /* verify carrier group*/

    if (SQLCA.VAGen_SQLCODE != 0)
      TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
      converseLib.validationFailed(388); /* ===>  Invalid carrier msg*/
      TS0HM015.XXXPRCNM = "TS0H154";
      set TS0HM015.TS-CARR-GRP-CD cursor, bold;
      TS0HM015.TSACARSN = " ";
    else
      TS0HW15.TS-CARR-GRP-CD = TSAREC.TS-CARR-GRP-CD;
      TS0HM015.TSACARSN = TSAREC.TSACARSN;
    end

  end


          /* -----------------------------------*/
          /* Verify GPC Code.*/
          /* -----------------------------------*/

  if (TS0HM015.XGPCD == " ")
    TS0HW15.XGPCD = "*";
    TS0HM015.XGPABRV = " ";
  else
    if (TS0HM015.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      TS0HM015.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      TS0HW15.XGPCD = TS0HM015.XGPCD;
    else
      converseLib.validationFailed(101); /* ===>  Invalid xgpcd*/
      TS0HM015.XGPABRV = " ";
      set TS0HM015.XGPCD cursor, bold;
      TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
      TS0HM015.XXXPRCNM = "TS0H154";
    end
  end


          /* -----------------------------------*/
          /* Verify YMT Code.*/
          /* -----------------------------------*/

  if (TS0HM015.YMTCD != " "
   && TS0HM015.YMTCD in YMTTBL.YMTCD
   && YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
    TS0HM015.YMTSDESC = YMTTBL.YMTSDESC[sysVar.arrayIndex];
    TS0HW15.YMTCD = TS0HM015.YMTCD;
  else
    converseLib.validationFailed(42); /* ===>  Invalid ymtcd*/
    TS0HM015.YMTSDESC = " ";
    set TS0HM015.YMTCD cursor, bold;
    TS0HW01.TS0HWPSW = "Y"; /* ===>  Indicate problem*/
    TS0HM015.XXXPRCNM = "TS0H154";
  end


   /* *---------------------------------------------------**/
   /* * Exit to redisplay the map if problem found        **/
   /* *---------------------------------------------------**/

  if (TS0HW01.TS0HWPSW == "Y")
    exit stack;
  end


end // end TS0H154

// Process valid input request
Function TS0H155()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS0HW01.TS0HWIXT = 1; /* Input table index*/
  TA6REC.TA6INDEX = 1; /* Output array index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (TS0HT15.TARTYPE[TS0HWIXT] == "P") /* Parameters statement*/

      TA6REC.TARJCL[TA6INDEX] = TS0HW15.PARM-TARJCL; /* Parameters*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* OUTPUT ARRAY INDEX*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = TS0HT15.TARJCL[TS0HWIXT]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0HT15.TARTYPE[TS0HWIXT]; /* Type*/

      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Output array index*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0HT15.TARJCL[TS0HWIXT] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TS0HW01.TS0HWIXT = TS0HW01.TS0HWIXT + 1; /* Input table index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6RTNCD = " "; /* Clear subroutine return code*/
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* No message*/

  XPTA0P(); /* Call Print Request application*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0HM015.XXXPRCNM = "TS0H155"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(398); /* Job was submitted*/
    TS0HW01.TS0HMSEL[15] = "*"; /* Indicate function completed*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0H155

// Report Request Menu
Function TS0H990()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0H991(); /* Format and display the map*/

  TS0H992(); /* Check attention identifier*/

  TS0H993(); /* Reset fields to normal intensity*/

  TS0H994(); /* Verify the data that was entered*/

  TS0H995(); /* Process valid input request*/


end // end TS0H990

// Format and display the map
Function TS0H991()
   /* ------------------------------------------------------------*/
   /* Format the map output area.*/
   /* ------------------------------------------------------------*/

  TS0HW01.TS0HWIXM = 1; /* Initialize map index*/

  while (TS0HW01.TS0HWIXM <= TS0HW01.TS0HWIXL) /* Until end of array*/

    TS0HM099.TS0HMSEL[TS0HWIXM] = TS0HW01.TS0HMSEL[TS0HWIXM];

    TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS0HM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0HM099.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS0HM099.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Message to display*/
  /* ;*/
  /* SET TS0HM099 ALARM;             /* Indicate sound alarm*/
  /* ;*/
  /* END;*/

  set TS0HM099.TS0HMSEL[9] protect;
  converse TS0HM099 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = TS0HM099.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS0HM099.CAITEM; /* Application data*/


end // end TS0H991

// Check attention identifier
Function TS0H992()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set TS0HM099 initial; /* M099 input/output*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    TS0HS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSTSS01(); /* Exit to another application*/

      set TS0HM099.CATOAP cursor, bold; /* Highlight*/

    else

      TS0HM099.XXXPRCNM = "TS0H992"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    TS0HS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS0HM099"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "TS0A"; /* TO application*/
    end

    XSTSS01(); /* Exit to another application*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    TS0HS99(); /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    TS0HM099.XXXPRCNM = "TS0H992"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    TS0HS99(); /* Exit to display map*/

  end


end // end TS0H992

// Reset highlighted fields
Function TS0H993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  TS0HW01.TS0HWIXM = 1; /* Initialize index*/

  while (TS0HW01.TS0HWIXM <= TS0HW01.TS0HWIXL) /* Until all lines are reset*/

    set TS0HM099.TS0HMSEL[TS0HWIXM] initialAttributes; /* Reset select field*/

    TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXM + 1; /* Increment line index*/

  end

  set TS0HM099.CATOAP initialAttributes; /* TO application*/
  set TS0HM099.CAITEM initialAttributes; /* Application data*/


end // end TS0H993

// Verify the entered data
Function TS0H994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    TS0HM099.XXXPRCNM = "TS0H994"; /* Module identification*/
    set TS0HM099.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Check for proper select tag.*/
   /* ------------------------------------------------------------*/

  TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXL; /* Initialize line index*/

  while (TS0HW01.TS0HWIXM > 0) /* Until all lines are verified*/

    /* ------------------------------------------------------------*/
     /* Indicate an error if the line was not selected properly.*/
    /* ------------------------------------------------------------*/

    if (TS0HM099.TS0HMSEL[TS0HWIXM] != TS0HW01.TS0HMSEL[TS0HWIXM]
     && TS0HM099.TS0HMSEL[TS0HWIXM] != " " /* Line was selected*/
     && TS0HM099.TS0HMSEL[TS0HWIXM] != "S") /* and not with an "S"*/

      TS0HM099.XXXPRCNM = "TS0H994"; /* Module identification*/
      set TS0HM099.TS0HMSEL[TS0HWIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid*/

    end

    TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXM - 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the map if any error was found.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TS0HS99(); /* Exit to display map*/
  end


end // end TS0H994

// Process valid input request
Function TS0H995()
   /* ------------------------------------------------------------*/
   /* Save the selections in the working storage array.*/
   /* ------------------------------------------------------------*/

  move TS0HM099.TS0HMSEL to TS0HW01.TS0HMSEL[1] for all; /* Menu selections*/

   /* ------------------------------------------------------------*/
   /* If missing distribution information and at least one line*/
   /* was selected, force report distribution specification.*/
   /* ------------------------------------------------------------*/

  if (TA6REC.XURDEST == " "  /* No print destination*/
   || TA6REC.XURUSRNM == " " /* or report recipient*/
   || TA6REC.XURBLDID == " ") /* or NIKE building*/

    if (TS0HW01.TS0HMSEL[1] != "S" /* Report distribution not selected*/
     && "S" in TS0HW01.TS0HMSEL)   /* and another line was selected*/

      converseLib.validationFailed(21); /* Indicate missing or invalid*/
      TS0HW01.TS0HMSEL[1] = "S"; /* Force report distribution*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If specify distribution selected, indicate to subroutine to*/
   /* display report distribution, but, do not submit any JCL.*/
   /* ------------------------------------------------------------*/

  if (TS0HW01.TS0HMSEL[1] == "S") /* Report distribution selected*/
    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/
  end


end // end TS0H995

// Verify LOCATIONs
Function TS0HS01()
   /* ------------------------------------------------------------*/
   /* Select DTRANS.VTSLOC01*/
   /* ------------------------------------------------------------*/


  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/


  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    end


    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TR0BS01"; /* Process name*/
    TS0HM015.XXXPRCNM = "TR0BS01"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";

    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSCREC.TSCKEY; /* Table key*/


    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


    exit stack; /* Return to previous process*/

  end


   /* **                                                       ***/
   /* ****************** End of TS0HS01 **************************/
end // end TS0HS01

// Verify CARRIERs
Function TS0HS02()
   /* ------------------------------------------------------------*/
   /* Select DTRANS.VTSCAR01*/
   /* ------------------------------------------------------------*/


  call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == -911)

      converseLib.validationFailed(11); /* Resource not available*/
      TA1REC.TA1FUNC = "POST"; /* Warning*/
      exit stack;

    else

      converseLib.validationFailed(10); /* System error*/
      TA1REC.TA1FUNC = "RETN"; /* Terminate*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0HS02"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0HM015"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSAREC.TSAKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0HM015.XXXPRCNM = "TS0HS02"; /* Process name*/

    return; /* Return to previous process*/

  end


   /* **                                                       ***/
   /* ****************** End of TS0HS02 **************************/
end // end TS0HS02

// Select from DTRANS.VSHPHD01
Function TS0HS90()
   /* GET TS0Hs90*/
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VSHPHD01*/

   /* Select the unique table row from the database.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S "; /* move in selection*/
  call "IO2540" (TSNREC, SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0HS90"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0HM011"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSFREC.TSFKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0HW01.TS0HWPSW = "Y"; /* Indicate problem*/
    TS0HM011.XXXPRCNM = "TS0HS90"; /* Process name*/
  end


end // end TS0HS90

// Clear selections and exit
Function TS0HS99()
   /* ------------------------------------------------------------*/
   /* Reset any pending selections in working storage.*/
   /* ------------------------------------------------------------*/

  TS0HW01.TS0HWIXM = 1; /* Initialize map index*/

  while (TS0HW01.TS0HWIXM <= TS0HW01.TS0HWIXL) /* Until end of array*/

    if (TS0HW01.TS0HMSEL[TS0HWIXM] == "S") /* Entry is selected*/
      TS0HW01.TS0HMSEL[TS0HWIXM] = " "; /* Reset entry*/
    end

    TS0HW01.TS0HWIXM = TS0HW01.TS0HWIXM + 1; /* Increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Exit to display the selection menu map.*/
   /* ------------------------------------------------------------*/

  exit stack; /* Exit to display map*/


end // end TS0HS99

//*** RECORD=TS0HW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TS0HW01 type basicRecord
  10 TS0HMSEL TS0HMSEL [98] ; 
  10 TS0HWIXL TS0HWIXL ; 
  10 TS0HWIXM TS0HWIXM ; 
  10 TS0HWIXW TS0HWIXW ; 
  10 TS0HWIXT TS0HWIXT ; 
  10 TS0HWSWX TS0HWSWX ; 
  10 TS0HWPSW TS0HWPSW ; 
  10 * char(3) ; 
  10 TS0HWRNG TS0HWRNG ; 
    15 TS0HWBDT TS0HWBDT ; 
      25 TS0HWBCC TS0HWBCC ; 
      25 TS0HWBYY TS0HWBYY ; 
      25 TS0HWBM1 TS0HWBM1 ; 
      25 TS0HWBM2 TS0HWBM2 ; 
    15 * char(1) ; 
    15 TS0HWEDT TS0HWEDT ; 
      25 TS0HWECC TS0HWECC ; 
      25 TS0HWEYY TS0HWEYY ; 
      25 TS0HWEM1 TS0HWEM1 ; 
      25 TS0HWEM2 TS0HWEM2 ; 
  10 * char(1) ; 
  10 PC2CUXID PC2CUXID ; 
    15 TS0HWXR1 TS0HWXR1 ; 
    15 TS0HWXR2 TS0HWXR2 ; 
    15 TS0HWXR3 TS0HWXR3 ; 
    15 TS0HWXR4 TS0HWXR4 ; 
    15 TS0HWXR5 TS0HWXR5 ; 
end // end TS0HW01

//*** RECORD=TS0HW02 ****
// ------------------------------------------------------------
// Parameters for ts1021 - Transportation Carriers
// ------------------------------------------------------------
// ***********************
Record TS0HW02 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW02

//*** RECORD=TS0HW03 ****
// ------------------------------------------------------------
// Parameters for TS1031 - Transportation Carriers/Craft
// ------------------------------------------------------------
// ***********************
Record TS0HW03 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW03

//*** RECORD=TS0HW04 ****
// ------------------------------------------------------------
// Parameters for TS1041 - Location by City
// ------------------------------------------------------------
// ***********************
Record TS0HW04 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW04

//*** RECORD=TS0HW05 ****
// ------------------------------------------------------------
// Parameters for TS1051 - Location by Shipping Region
// ------------------------------------------------------------
// ***********************
Record TS0HW05 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW05

//*** RECORD=TS0HW06 ****
// ------------------------------------------------------------
// Parameters for TS1061 - Transit Time by Origin
// ------------------------------------------------------------
// ***********************
Record TS0HW06 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW06

//*** RECORD=TS0HW07 ****
// ------------------------------------------------------------
// Parameters for TS1071 - Transit Time by Destination
// ------------------------------------------------------------
// ***********************
Record TS0HW07 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW07

//*** RECORD=TS0HW08 ****
// ------------------------------------------------------------
// Parameters for TS1161 - Transportation Carrier Contracts
// ------------------------------------------------------------
// ***********************
Record TS0HW08 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW08

//*** RECORD=TS0HW09 ****
// ------------------------------------------------------------
// Parameters for TS1311 - Hard and Soft Errors Reports
// ------------------------------------------------------------
// ***********************
Record TS0HW09 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW09

//*** RECORD=TS0HW10 ****
// ------------------------------------------------------------
// Parameters for TS1311 - Hard and Soft Errors Reports
// ------------------------------------------------------------
// ***********************
Record TS0HW10 type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(80) ; 
end // end TS0HW10

//*** RECORD=TS0HW11 ****
// ------------------------------------------------------------
// Parameters for TS1521 - Customer Reports
// ------------------------------------------------------------
// ***********************
Record TS0HW11 type basicRecord
  5 TARJCL TARJCL ; 
    10 TS0HWONI TS0HWONI ; 
    10 TS0HW-SHP-NTF-RPT TS0HW-SHP-NTF-RPT ; 
    10 TS0HW-PL-DTL-RPT TS0HW-PL-DTL-RPT ; 
    10 TS0HW-CLR-US-CSTMS-RPT TS0HW-CLR-US-CSTMS-RPT ; 
    10 TS0HW-SHP-NTF-MAT-CTNT-RPT TS0HW-SHP-NTF-MAT-CTNT-RPT ; 
    10 TS0HW-DLVR-CNFM-RPT TS0HW-DLVR-CNFM-RPT ; 
    10 TSFSHPID TSFSHPID [10] ; 
    10 * char(34) ; 
end // end TS0HW11

//*** RECORD=TS0HW12 ****
// ------------------------------------------------------------
// Parameters for TS1672 - Shipment Summary by ATD Report
// ------------------------------------------------------------
// ***********************
Record TS0HW12 type basicRecord
  5 TARJCL TARJCL ; 
    10 TS0HWONI TS0HWONI ; 
    10 TS0HWMO TS0HWMO ; 
    10 TS0HWYR TS0HWYR ; 
    10 * char(73) ; 
end // end TS0HW12

//*** RECORD=TS0HW13 ****
// ------------------------------------------------------------
// Parameters for TS171D - NIL Delivery Shipping Status Report
// ------------------------------------------------------------
// ***********************
Record TS0HW13 type basicRecord
  5 TARJCL TARJCL ; 
    10 TS0HWONI TS0HWONI ; 
    10 PC2CUXID PC2CUXID ; 
    10 * char(74) ; 
end // end TS0HW13

//*** RECORD=TS0HW14 ****
// ------------------------------------------------------------
// Parameters for TS171D - NIL Delivery Shipping Status Report
// ------------------------------------------------------------
// ***********************
Record TS0HW14 type basicRecord
  5 TARJCL TARJCL ; 
    10 TS0HWONI TS0HWONI ; 
    10 PC2CUXID PC2CUXID ; 
    10 TS0HWRNG TS0HWRNG ; 
    10 TS0HMSTA TS0HMSTA ; 
    10 TS0HM-SORT-FLAG TS0HM-SORT-FLAG ; 
    10 * char(53) ; 
end // end TS0HW14

//*** RECORD=TS0HW15 ****
// ------------------------------------------------------------
// Parameters for TS201D - Carrier Contract Terms Report
// ------------------------------------------------------------
// ***********************
Record TS0HW15 type basicRecord
  5 JOB-TARJCL JOB-TARJCL ; 
    10 * char(7) ; 
    10 TS0HW-JOB-NUM TS0HW-JOB-NUM ; 
    10 * char(72) ; 
  5 PRT-TARJCL PRT-TARJCL ; 
    10 TS0HW-PRT-CLASS TS0HW-PRT-CLASS ; 
    10 * char(11) ; 
    10 TS0HW-JOB-NUM-1 TS0HW-JOB-NUM-1 ; 
    10 * char(10) ; 
    10 * char(57) ; 
  5 * char(1) ; 
  5 PARM-TARJCL PARM-TARJCL ; 
    10 TS0HWONI TS0HWONI ; 
    10 YMTCD YMTCD ; 
    10 XGPCD XGPCD ; 
    10 TS-CARR-GRP-CD TS-CARR-GRP-CD ; 
    10 TSEORIG TSEORIG ; 
    10 TSEDEST TSEDEST ; 
    10 TSDBEGDT TSDBEGDT ; 
    10 * char(59) ; 
end // end TS0HW15

// Job Card
DataItem JOB-TARJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job Control Language statement
DataItem PARM-TARJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BUNDL Control
DataItem PRT-TARJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sort Flag
DataItem TS0HM-SORT-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Menu selection field
DataItem TS0HMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Include 'CX' item orders
DataItem TS0HMSTA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0HW-CLR-US-CSTMS-RPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0HW-DLVR-CNFM-RPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0HW-JOB-NUM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job number identifier
DataItem TS0HW-JOB-NUM-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0HW-PL-DTL-RPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0HW-PRT-CLASS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0HW-SHP-NTF-MAT-CTNT-RPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0HW-SHP-NTF-RPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID Range Century "begin"
DataItem TS0HWBCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID Range Date    "begin"
DataItem TS0HWBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID Range Month 1 "begin"
DataItem TS0HWBM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID Range Month 2 "begin"
DataItem TS0HWBM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID Range Year    "begin"
DataItem TS0HWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID Range Century "end  "
DataItem TS0HWECC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID Range Date    "end  "
DataItem TS0HWEDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO ID Range Month 1 "end  "
DataItem TS0HWEM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID Range Month 2 "end  "
DataItem TS0HWEM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// PO ID Range Year    "end  "
DataItem TS0HWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem TS0HWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0HWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem TS0HWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working storage index
DataItem TS0HWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ATD month
DataItem TS0HWMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Online Indicator
DataItem TS0HWONI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0HWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO ID Range parameter
DataItem TS0HWRNG char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit requested switch
DataItem TS0HWSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer xref root position 1
DataItem TS0HWXR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer xref root position 2
DataItem TS0HWXR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer xref root position 3
DataItem TS0HWXR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer xref trlr position 4
DataItem TS0HWXR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer xref trlr position 5
DataItem TS0HWXR5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ATD year
DataItem TS0HWYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

