package ts05;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pv.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS05 ****
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There is one screen which may be displayed.
// 
// The application builds a list containing packing list
// summary information associated with a particular order or
// customer (previously requested).  The list is displayed and
// the user may page backward and forward to view the
// information.  The user may select a row to view in greater
// detail.  The user may also enter a shipment id with which
// selected rows may be associated, or may enter a zero for the
// shipment id to request that selected rows be disassociated
// with any shipment id.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// Any modified data is verified; if complete and correct, the
// table row is updated with the changed data.  The screen is
// redisplayed to the user, indicating that the update has been
// completed.
// 
// If the user requests to view a packing list in more detail,
// only one row may be selected at a time.  If more than one
// line was selected, the application will return to the screen
// with an error message.  If the user requests to update the
// database, up to one page of rows (14 rows/page) may be
// selected at a time.  No rows may be selected when scrolling
// forward or backward.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// --------  --------  ------  --------------------------------
// CONTROL     DATE     NAME   DESCRIPTION OF CHANGE
// --------  --------  ------  --------------------------------
//           09/19/89  mchow   New application.
// 00000000  10/26/89  mchow   Made minor requested changes.
//      112  01/31/90  jbaker  Default YSSCD = 'IP'. Change
//                             XPTS001 flow to pass TSWPLFLG
//                             regardless of from app. add
//                             tswivpfl to screen and process.
// TS#0      06/11/91  rvakel  Regenned for table changes.
// TS1009    10/24/91  dchian  TS05001-allow both cust & ord #
//                     mchow   to be present without error msg.
//                             TS05112-always use order # over
//                             customer #, if it is there, to
//                             obtain data.
// TS1030    01/29/92  dchian  Change heading on map(TS05M001).
// TS29      07/08/92  dchian  P/L summary to display in P/L #
//                             descending order.
// TS1026    07/09/92  dchian  Allow disassociation of ship id
//                             from P/L when ship id has been
//                             deleted.
// TS14      07/13/92  dchian  Add select field by P/L number.
// TS9       08/05/92  dchian  Allow printing from this appl
//                             (P/L Summary and Duty Drawback)
// TS39      09/23/92  dchian  Flag Packing List that are in
//                             completed status.
// TS#0      10/14/92  dchian  Regenned for table changes.
// TS#0      11/11/92  dchian  Correct errors msg to TA0020.
// TS38      07/28/93  dchian  Highlight P/L in error from Auto
//                             Packlist Build process and add
//                             ability to turn of highlight.
// TS38      08/18/93  dchian  Add the ability to delete P/L
//                             created by Auto Build process.
// TS#0      09/29/93  dchian  Correct temp storage length,
//                             causing appl updt by another app
// TS8057    10/05/93  dchian  Add ability to dis-associate P/L
//                             after invoiced and void/credit.
// 1H8400    10/18/93  hkempe  Changed to follow Nike's way of
//                             submitting online job - TS05001,
//                             TS05120, TS05164, TS05T01,
//                             TA3REC, tarrec/TARRECH,
//                             XSTAS-CICS-REG-ID.
// TS8060    11/29/93  aivers  Allow users to update pick
//                             schedule number to number other
//                             than zero in TS05 to prevent
//                             balancing of selected shipments.
// TS#0      01/18/84  hkempe  Changed to allow for a nine
//                             digit order nbr - TS05M001.
// TS8901    03/04/94  hkempe  Generate/Compile to pick up
//                             revised COMMAREA, TSWREC, TSYREC
//                             TSZREC, TS4REC, TS6REC.
// y2kfix    11/12/97  oricha  Y2K modifications:  regen only
//                             for xx0xs01 century adjustment.
// Ts1631    05/29/98  bchell  Use theater of opearation routin
//                             Refer ( TS05-CICS-REG-ID,
//                              TS05001, Ts05164)
// Ts0000    06/01/98  rkalla  fix cics-reg-id problem.
// *********************
Program TS05 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  TARRECH TARRECH { redefines = TARREC } ; // record
  TS05W00 TS05W00; // record
  TS05W01 TS05W01; // record
  TS4REC TS4REC; // record
  TS6REC TS6REC; // record
  TSUREC TSUREC; // record
  TSVREC TSVREC; // record
  TSWREC TSWREC; // record
  TSYREC TSYREC; // record
  TSZREC TSZREC; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TS05T01 {deleteAfterUse = yes}; // table
  use TS05M.TA0PM001,  // forms
      TS05M.TS05M001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set TS05M001 initial; /* M001 input/output*/
    set TS05W00 empty; /* Working storage*/
    set TS05W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TA6REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

     /* ------------------------------------------------------------*/
     /* If valid data was passed in TSWREC, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "TS03" /* Application entered from within the*/
     /* system*/
     || COMMAREA.CAFROMAP == "TS04" 
     || COMMAREA.CAFROMAP == "TS05" 
     || COMMAREA.CAFROMAP == "TS06")
      /* OR COMMAREA.CAFROMAP = 'TS07';*/

      TS05W00.TS05WFRM = COMMAREA.CAFROMAP; /* save NIL appl name*/

      if (TSWREC.TSWIVPFL != " ")
        TS05W00.TS05WHIF = TSWREC.TSWIVPFL; /* move to w/s hold field*/
      else
        TS05W00.TS05WHIF = "N";
      end

      if (TSWREC.KUCCOID > 0  /* if customer number*/
       || TSWREC.OP1CUOID > 0 /* or order number is present*/
       || TSWREC.TSVPLNBR > 0) /* or P/L number is present*/
        /* check customer first*/
        if (TSWREC.KUCCOID > 0 /* request is by customer*/
         && TSWREC.TSWPLFLG == "C")
          TS05W01.KUCCOID = TSWREC.KUCCOID; /* cust number*/
          /* is this for a specific shipment?*/
          if (TSWREC.TSFSHPID > 0)
            TS05W00.TS05WSWS = "S"; /* format selection type flag*/
          end
        else
          if (TSWREC.KUCCOID > 0 /* request is by customer*/
           && TSWREC.TSWPLFLG == "S")
            TS05W01.KUCCOID = TSWREC.KUCCOID; /* cust number*/
            /* is this for a specific shipment?*/
            if (TSWREC.TSFSHPID > 0)
              TS05W00.TS05WSWS = "S"; /* format selection type flag*/
            end
          else
            if (TSWREC.OP1CUOID > 0 /* request is by order*/
             && TSWREC.TSWPLFLG == "O")
              TS05W01.TS05MCID = TSWREC.OP1CUOID; /* cust ord id*/
              TS05W01.TS05MNID = TSWREC.OP1NORID; /* nike ord id*/
            else
              TS05W01.TS05W-TSVPLNBR = TSWREC.TSVPLNBR;
            end
          end
        end
        TS05W00.TS05WERR = "N"; /* error has not occurred*/
        TS05W00.TS05WSWF = "N"; /* Format the map switch*/
        TS05W00.TS05WSWR = "Y"; /* Request for data switch*/
        TS05W00.TS05WSW1 = "N"; /* first time, but input data*/

      else

        if (TSWREC.TSWIVPFL != " ")
          TS05W00.TS05WHIF = TSWREC.TSWIVPFL; /* move to w/s hold field*/
        else
          TS05W00.TS05WIPF = "N";
        end
        set TSWREC empty; /* get rid of invalid data*/
        converseLib.validationFailed(360); /* must enter valid data*/
        set TS05M001.KUCCOID cursor; /* position cursor and highlight*/
        TS05W00.TS05WERR = "Y"; /* error has occurred*/
        TS05W00.TS05WSWF = "Y"; /* Format the map switch*/
        TS05W00.TS05WSWR = "N"; /* Request for data switch*/
        TS05W00.TS05WSW1 = "Y"; /* first time, no input data*/

      end

    else

      set TSWREC empty; /* get rid of invalid data*/
      TS05W00.TS05WHIF = "N"; /* move to w/s hold field*/
      COMMAREA.CAITEM = " "; /* Clear passed data*/
      converseLib.validationFailed(360); /* must enter valid data*/
      set TS05M001.KUCCOID cursor; /* position cursor and highlight*/
      TS05W00.TS05WERR = "Y"; /* error has occurred*/
      TS05W00.TS05WSWF = "Y"; /* Format the map switch*/
      TS05W00.TS05WSWR = "N"; /* Request for data switch*/
      TS05W00.TS05WSW1 = "Y"; /* first time, no input data*/

    end

     /* this formats the flag that is used when data is selected*/
    TS05W00.TS05WIPF = TS05W00.TS05WHIF;

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS05001; /* Converse the main process*/


    TS05001: TS05001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS05001; /* Converse the main process*/


  end // end main
end // end TS05

// process valid input request
Function TS05-CICS-REG-ID()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end


  return;
                                        /* retn to performing process*/
end // end TS05-CICS-REG-ID

// Main process to display a map
Function TS05001()
   /* ------------------------------------------------------------*/
   /* Determine which CICS region this application is executing in.*/
   /* ------------------------------------------------------------*/

   /* XSTAS-CICS-REG-ID;               /* which cics region*/
  TS05-CICS-REG-ID(); /* which cics region*/

   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMODID == " ") /* no previous entry*/
    TSWREC.XXXMODID = "001";
  end

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If data is requested, first obtain the data then display*/
      /* the map.*/
   /* 2) Otherwise, display the map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Check if this is a request for new data, a screen entry*/
   /* error, or a continuation of screen processing.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0) /* a possible error has occurred*/
    if (converseVar.validationMsgNum == 001 /* update successful*/
     || converseVar.validationMsgNum == 362) /* print submit message*/
      TS05WERR = "N"; /* not an error*/
    else
      TS05WERR = "Y"; /* an error has occurred*/
    end
  else
    TS05WERR = "N"; /* no error has occurred*/
  end

  if (TS05WERR == "Y"             /* an error has occurred*/
   || converseVar.eventKey is pf7 /* scroll backward requested*/
   || converseVar.eventKey is pf8 /* scroll forward requested*/
   || TS05W00.TS05WSWF == "Y")    /* format the map*/

  else
    /* ------------------------------------------------------------*/
     /* Check kind of request - by customer or order number.*/
     /* Logic changed for TS1009 - assumes that, if the map order*/
     /* number is not blank, request is by order, not customer.*/
    /* ------------------------------------------------------------*/

    if (TS05W01.KUCCOID > 0  /* request by company id*/
     || TS05W01.TS05MCID > 0 /* request by order*/
     || TS05W01.TS05W-TSVPLNBR > 0) /* request by P/L*/

      TS05W00.TS05WSWR = "Y"; /* request for data switch*/
      TS05W00.TS05WSWF = "N"; /* format the map switch*/

      if (TS05W01.TS05W-TSVPLNBR > 0) /* request by P/L*/
        TS05M001.TS05M-TSVPLNBR = TS05W01.TS05W-TSVPLNBR;
        TS05W00.TS05WSWS = "P"; /* select by P/L*/
      else
        if (TS05W01.TS05MCID > 0) /* request by order assumed*/
          TS05M001.TS05MCID = TS05W01.TS05MCID;
          TS05M001.TS05MNID = TS05W01.TS05MNID;
          TS05W00.TS05WSWS = "O"; /* select by order*/
        else /* request by company id*/
          if (TS05W00.TS05WSWS != "O")
            TS05M001.KUCCOID = TS05W01.KUCCOID;
            if (TS05W00.TS05WSWS == "S") /* request by company*/
              /* request is by shipment*/
            else /* request by customer only*/
              TS05W00.TS05WSWS = "C"; /* select by company id*/
            end
          end
        end
      end

    else /* not requested by P/l or order or*/
                                   /* customer*/
      TS05W00.TS05WSWR = "N"; /* request for data switch*/
      TS05W00.TS05WSWF = "Y"; /* format the map switch*/
      TS05W00.TS05WSWS = " "; /* select not established*/
      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(360); /* enter customer id or order number*/
        set TS05M001.KUCCOID cursor; /* position cursor*/
      end
      set TS05W01 empty; /* force selection*/
    end


  end

  TS05M001.TSWIVPFL = TS05W00.TS05WHIF; /* Format ivc'd p/l flag*/


  TS05100(); /* Obtain data and display map*/

end // end TS05001

// List the rows in the table
Function TS05100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  TS05110(); /* Obtain the data to display*/

  TS05120(); /* Format and display the map*/

  TS05130(); /* Check attention identifier*/

  TS05140(); /* Reset fields to normal intensity*/

  TS05150(); /* Verify the entered data*/

  TS05160(); /* Process valid input request*/


end // end TS05100

// Obtain the data to display
Function TS05110()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMODID == " ") /* no previous entry*/
    TSWREC.XXXMODID = "110";
  end

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TS05WSWR == "N" /* Data was not requested*/
   || converseVar.validationMsgNum > 0) /* or an error was found*/
    if (converseVar.validationMsgNum != 001) /* successful return*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If required data not present, signal error and return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS05W01.KUCCOID > 0  /* customer entered*/
   || TS05W01.TS05MCID > 0 /* order entered*/
   || TS05W01.TS05W-TSVPLNBR > 0) /* P/L number entered*/
     /* next sentence               ; Return to previous process*/
  else

    converseLib.validationFailed(360); /* must enter cust or ord or pl*/
    set TS05M001.KUCCOID cursor, bold;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS05W00.XXXTSLEN = 654; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TS05111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  TS05112(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WCNT = 0; /* zero out PL counter*/

  while (TS05W00.TS05WSWC == "N") /* Until end of cursor*/

    TS05113(); /* Fetch selected rows*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (TS05W00.TS05WIXM > 13) /* Page is full*/
      TS05114(); /* Add page to temporary storage*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TS05WIXM > 1) /* Page was formatted*/
    TS05114(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  TS05115(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TA5TSQIX == 0) /* No pages formatted*/

    TS05W00.XXXTSPAG = 0; /* reset current page to zero*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
     /* save data attempted*/
    TS05W01.KUCCOID = TS05M001.KUCCOID;
    TS05W01.TS05MCID = TS05M001.TS05MCID;
    TS05W01.TS05MNID = TS05M001.TS05MNID;
    TS05W01.TS05W-TSVPLNBR = TS05M001.TS05M-TSVPLNBR;
    if (TS05M001.TS05M-TSVPLNBR > 0)
      set TS05M001.TS05M-TSVPLNBR cursor, bold; /* highlight*/
      set TS05M001.TS05MCID normal;
      set TS05M001.TS05MNID normal;
      set TS05M001.KUCCOID normal;
    else
      if (TS05M001.TS05MCID > 0)
        set TS05M001.TS05MCID cursor, bold; /* highlight*/
        set TS05M001.TS05MNID bold; /* highlight*/
        set TS05M001.KUCCOID normal;
      else
        set TS05M001.KUCCOID cursor, bold; /* highlight*/
        TSWREC.TSFSHPID = 0; /* set ship id to 0*/
      end
    end

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* If only 1 packing list found and program entered from menu*/
   /* with order number, send on to TS06 - Packing List Detail.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TS05WCNT == 1      /* only one found*/
   && TS05W00.TS05WFRM == "TS03" /* from the menu*/
   && TS05W00.TS05WSWS == "O")   /* select by order*/

    /* ------------------------------------------------------------*/
     /* move the passing data to tswrec, commarea, purge temporary*/
     /* storage, exit application.*/
    /* ------------------------------------------------------------*/

    TS05W00.XXXTSPAG = 1; /* Desired page number*/
    TS05S05(); /* retrieve from temp storage*/

    TSWREC.OP1CUOID = TS05W01.OP1CUOID[1];
    TSWREC.OP1NORID = TS05W01.OP1NORID[1];
    TSWREC.TSVPLNBR = TS05W01.TSVPLNBR[1];
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
    COMMAREA.CAFROMAP = "TS05";
    COMMAREA.CATOAP = "TS06"; /* Packing List Detail*/

    TS05111(); /* Purge any temporary storage*/

    XSTSS02(); /* exit to another application*/

  end

  TS05W00.TS05WFRM = " "; /* clear this field*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No message to display*/
    TS05W00.XXXTSPAG = 1; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WSWR = "N"; /* Request for data switch*/
  TS05W00.TS05WSWF = "Y"; /* Format the map switch*/


end // end TS05110

// Purge any temporary storage
Function TS05111()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    TSWREC.XXXMODID = "111";
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TS05W01 empty; /* M001 display storage*/

  TS05W00.TS05WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  TS05W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TS05W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05111

// Select set and open cursor
Function TS05112()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "112";

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/
   /* Always obtain data in this sequence if all three numbers are*/
   /* entered, P/l or order or customer.*/
  if (TS05M001.TS05M-TSVPLNBR > 0) /* inquire by P/L*/
    TSVREC.TSVPLNBR = TS05M001.TS05M-TSVPLNBR;
    TS05W00.TS05WSWS = "P"; /* select by P/L number*/
    try
      call "IO4700" ("S5", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* select tbl set*/
  else
    if (TS05M001.TS05MCID > 0)
      TSVREC.OP1CUOID = TS05M001.TS05MCID; /* inquire by order*/
      if (TS05M001.TS05MNID == 0) /* if sub id not entered*/
        TSVREC.OP1NORID = 1; /* use default of one*/
        TS05M001.TS05MNID = 1; /* use default of one*/
      else
        TSVREC.OP1NORID = TS05M001.TS05MNID; /* inquire by order*/
      end
      TS05W00.TS05WSWS = "O"; /* select by order number*/
      try
        call "IO4700" ("S4", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Select tbl set*/
    else
      TSVREC.KUCCOID = TS05M001.KUCCOID; /* inquire by customer*/
      TSVREC.NIAIVCDT = -1; /* retrieve all invoice dates*/
      TSVREC.TSVPLNBR = -1; /* retrieve all nil pl nbrs*/
      if (TS05W00.TS05WSWS == "S") /* select by shipment/customer id*/
        TSVREC.TSFSHPID = TSWREC.TSFSHPID; /* retrieve for ship id*/
      else
        TSVREC.TSFSHPID = -1; /* retrieve all ship ids*/
        TS05W00.TS05WSWS = "C"; /* select by customer id*/
      end
      try
        call "IO4700" ("S3", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Select tbl set*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS05W00.TS05WIXM = 1; /* Display line index*/
    TS05W00.TS05WSWC = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05112

// Fetch next row in the cursor
Function TS05113()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "113";

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TS05WSWS == "P") /* select by P/L number*/
    try
      call "IO4700" ("N5", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* fetch next row*/
  else
    if (TS05W00.TS05WSWS == "S" /* select by shipment and customer*/
     || TS05W00.TS05WSWS == "C")
      try
        call "IO4700" ("N3", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Fetch next*/
    else /* select by order and sub order*/
      try
        call "IO4700" ("N4", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Fetch next*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      if (TS05W00.TS05WIPF == "N" /* display only uninvoiced p/l's*/
       && TSVREC.NIAIVCDT == 0)   /* packing list not invoiced*/

        TS05S01(); /* count containers*/

        TS05S02(); /* Save in display storage*/

      else
        if (TS05W00.TS05WIPF == "Y") /* display all p/l's*/

          TS05S01(); /* count containers*/

          TS05S02(); /* Save in display storage*/
        end

      end

      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS05W00.TS05WSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05113

// Add page to temporary storage
Function TS05114()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "114";

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS05W01.XXXTSLEN = TS05W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS05W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS05W01 empty; /* M001 display storage*/

    TS05W00.TS05WIXM = 1; /* Display line index*/

    TS05W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05114

// Close selected set cursor
Function TS05115()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "115";

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TS05WSWS == "P") /* select by P/L*/
    try
      call "IO4700" ("C5", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* close tbl set*/
  else
    if (TS05W00.TS05WSWS == "S" /* select by customer and ship id*/
     || TS05W00.TS05WSWS == "C") /* select all ship id's by customer*/
      try
        call "IO4700" ("C3", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Close tbl set*/
    else
      try
        call "IO4700" ("C4", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      end /* Close tbl set*/
    end
  end

   /* move ' ' to ts05w00.ts05wsws ;*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05115

// Format and converse the map
Function TS05120()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMODID == " ") /* no modid*/
    TSWREC.XXXMODID = "120";
  end

   /* ------------------------------------------------------------*/
   /* If no error was found, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0   /* No error found*/
   || converseVar.validationMsgNum == 001 /* Update successful*/
   || converseVar.validationMsgNum == 362) /* submit print successful*/

    if (TS05W00.TS05WSWF == "Y") /* Map must be formatted*/
      TS05121(); /* Format the data on the map*/
    end

  else

    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS05M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS05M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS05M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If authorized for delete, display delete function at bottom*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CADELFL == "Y"
   && COMMAREA.CADLVL[1] == "Y")
    set TS05M001.TS05M-LIT1 skip;
  end


   /* ------------------------------------------------------------*/
   /* If authorized for pf9/pf10 (lock/unlock) display  at bottom*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CACLVL[2] == "Y")
    set TS05M001.TS05M-LIT2 skip;
    set TS05M001.TS05M-LIT3 skip;
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0)
      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TS05M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    TS05M001.XXXMODID = TSWREC.XXXMODID; /* Module identification*/

    set TS05M001 alarm; /* Indicate sound alarm*/

  end

   /* ------------------------------------------------------------*/
   /* If first time and neither customer nor order was passed,*/
   /* set map select fields dark.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TS05WSW1 == "Y" /* this is the first time*/
   || TS05W00.TA5TSQIX == 0)  /* no pages formatted*/

    TS05W00.TS05WSW1 = "N"; /* no longer first time*/
    TS05W00.TS05WIXM = 1; /* init map index*/

    while (TS05W00.TS05WIXM <= 13) /* max on map page*/

      set TS05M001.TS05MSEL[TS05WIXM] skip, invisible; /* hide field*/

      TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1; /* increment*/

    end

    /* SET TS05M001.KUCCOID CURSOR   ; to enter something*/

  end

  converse TS05M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/
  converseLib.validationFailed(0); /* Message number*/
  TS05W00.TS05WERR = "N"; /* error indicator*/
  TS05W00.TS05WFRM = " "; /* clear from appl*/

  COMMAREA.CATOAP = TS05M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS05M001.CAITEM; /* Application data*/
  TS05W00.TS05WHIF = TS05M001.TSWIVPFL; /* save ivc'd p/l flag*/


end // end TS05120

// Format the display data
Function TS05121()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "121"; /* error mod*/

   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS05M001 initial; /* M001 input/output area*/

  TS05W00.TS05WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS05W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (TS05W00.TS05WSWU == "Y") /* Current page was changed*/

        TS05S04(); /* Update temporary storage page*/

        TS05W00.TS05WSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS05W00.XXXTSPAG > TS05W00.TA5TSQIX) /* Desired greater highest*/
        TS05W00.XXXTSPAG = TS05W00.TA5TSQIX; /* Default to highest*/
      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is less than the lowest page*/
       /* in storage, default to the lowest page number.*/
      /* ------------------------------------------------------------*/

      if (TS05W00.XXXTSPAG < 1) /* Desired less than lowest*/
        TS05W00.XXXTSPAG = 1; /* Default to lowest*/
      end

      TS05S05(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TS05M001.XXXTSPAG = TS05W00.XXXTSPAG; /* Current page*/
    TS05M001.TA5TSQIX = TS05W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS05M001.TSWIVPFL = TS05W00.TS05WIPF; /* ivc'd p/l flag*/

  if (TS05W01.KUCCOID > 0  /* customer present*/
   || TS05W01.TS05MCID > 0 /* order present*/
   || TS05W01.TS05W-TSVPLNBR > 0) /* packing list present*/

    if (TS05W01.TS05W-TSVPLNBR > 0 /* packing list present*/
     && TS05W00.TS05WSWS == "P")   /* request by packing list nbr*/
      TS05M001.KUCCOID = TS05W01.KUCCOID;
      TS05M001.TS05MCID = TS05W01.TS05MCID;
      TS05M001.TS05MNID = TS05W01.TS05MNID;
      TS05M001.TS05M-TSVPLNBR = TS05W01.TS05W-TSVPLNBR;
      set TS05M001.TS05MSEL cursor; /* position cursor*/
    else
      if (TS05W01.TS05MCID > 0 /* order present*/
       && TS05W00.TS05WSWS == "O") /* request by order number*/
        TS05M001.KUCCOID = TS05W01.KUCCOID;
        TS05M001.TS05MCID = TS05W01.TS05MCID;
        TS05M001.TS05MNID = TS05W01.TS05MNID;
        set TS05M001.TS05MSEL cursor; /* position cursor*/

      else
        if (TS05W01.KUCCOID > 0 /* customer present*/
         && TS05W00.TS05WSWS != "O") /* request by ship id or cust*/
          TS05M001.KUCCOID = TS05W01.KUCCOID;
          set TS05M001.TS05MSEL cursor; /* position cursor*/
        end
      end
    end
  else
    set TS05M001.KUCCOID cursor; /* Position cursor*/
    converseLib.validationFailed(360); /* must enter valid customer/order*/
    return;
  end


  TS05W00.TS05WIXM = 1; /* Initialize line index*/

  while (TS05W00.TS05WIXM <= 13) /* Until screen is full*/
    if (TS05W01.TSVPLNBR[TS05WIXM] > 0) /* or end of data*/

      if (TS05W00.TS05WIXM == 1) /* First select field*/

        set TS05M001.TS05MSEL[TS05WIXM] cursor, normal; /* Position cursor*/
      else
        set TS05M001.TS05MSEL[TS05WIXM] normal; /* Unprotect*/

      end

      TS05M001.TS05MSEL[TS05WIXM] = TS05W01.TS05WSEL[TS05WIXM];
      TS05M001.TS-NIL-STAT[TS05WIXM] = TS05W01.TS-NIL-STAT[TS05WIXM];
      TS05M001.TSVPLNBR[TS05WIXM] = TS05W01.TSVPLNBR[TS05WIXM];
      TS05M001.TSFSHPID[TS05WIXM] = TS05W01.TSFSHPID[TS05WIXM];
      TS05M001.XWHCD[TS05WIXM] = TS05W01.XWHCD[TS05WIXM];

      if (TS05W01.SR1PKDT[TS05WIXM] > 0) /* rework date for display*/
        TS05W00.TS05WSDT = TS05W01.SR1PKDT[TS05WIXM]; /* work area*/
        TS05W00.TS05WPYY = TS05W00.TS05WSYY; /* move year*/
        TS05W00.TS05WPMM = TS05W00.TS05WSMM; /* move month*/
        TS05W00.TS05WPDD = TS05W00.TS05WSDD; /* move day*/
        TS05M001.SR1PKDT[TS05WIXM] = TS05W00.TS05WPDT; /* move to map*/
      end

      if (TS05W01.NIAIVCDT[TS05WIXM] > 0) /* rework date for display*/
        TS05W00.TS05WSDT = TS05W01.NIAIVCDT[TS05WIXM]; /* work area*/
        TS05W00.TS05WPYY = TS05W00.TS05WSYY; /* move year*/
        TS05W00.TS05WPMM = TS05W00.TS05WSMM; /* move month*/
        TS05W00.TS05WPDD = TS05W00.TS05WSDD; /* move day*/
        TS05M001.NIAIVCDT[TS05WIXM] = TS05W00.TS05WPDT; /* to map*/
      end

      TS05M001.OP1CUOID[TS05WIXM] = TS05W01.OP1CUOID[TS05WIXM];
      TS05M001.OP1NORID[TS05WIXM] = TS05W01.OP1NORID[TS05WIXM];
      TS05M001.TS05WCTN[TS05WIXM] = TS05W01.TS05WCTN[TS05WIXM];
      TS05M001.TSISHPQT[TS05WIXM] = TS05W01.TSISHPQT[TS05WIXM];
      if (TS05W01.XDSCD[TS05WIXM] == " ") /* if ship from whse*/
        TS05M001.TSVNPLLB[TS05WIXM] = TS05W01.TSVNPLLB[TS05WIXM];
        TS05M001.TSVNPLFT[TS05WIXM] = TS05W01.TSVNPLFT[TS05WIXM];
      else
        TS05M001.TSVNPLLB[TS05WIXM] = TS05W01.TSVNPLLB[TS05WIXM];
        TS05M001.TSVNPLFT[TS05WIXM] = TS05W01.TSVNPLFT[TS05WIXM];
      end

       /* if p/l in error, highlight the entire line*/

      if (TS05W01.TS-NIL-PL-ERR-FL[TS05WIXM] == "Y")
        set TS05M001.TS-NIL-STAT[TS05WIXM] protect, bold;
        set TS05M001.TSVPLNBR[TS05WIXM] protect, bold;
        set TS05M001.TSFSHPID[TS05WIXM] protect, bold;
        set TS05M001.XWHCD[TS05WIXM] protect, bold;
        set TS05M001.SR1PKDT[TS05WIXM] protect, bold;
        set TS05M001.NIAIVCDT[TS05WIXM] protect, bold;
        set TS05M001.OP1CUOID[TS05WIXM] protect, bold;
        set TS05M001.OP1NORID[TS05WIXM] protect, bold;
        set TS05M001.TS05WCTN[TS05WIXM] protect, bold;
        set TS05M001.TSISHPQT[TS05WIXM] protect, bold;
        set TS05M001.TSVNPLLB[TS05WIXM] protect, bold;
        set TS05M001.TSVNPLFT[TS05WIXM] protect, bold;
      end
    else

      set TS05M001.TS05MSEL[TS05WIXM] skip, invisible;

    end

    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1; /* Increment line index*/

  end


end // end TS05121

// Check attention identifier
Function TS05130()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "130"; /* module identification*/

   /* ------------------------------------------------------------*/
   /* To delete P/L, it takes two pf5 in order to delete.  This*/
   /* is to prevent just one pf5 after intermediate function to*/
   /* to delete a P/L.*/
   /* ------------------------------------------------------------*/
  if (TS05W00.TS05W-PF5-CNT == 1
   && converseVar.eventKey not pf5)
    TS05W00.TS05W-PF5-CNT = 0;
  end

  if (TS05W00.TS05W-PF13-CNT == 1
   && converseVar.eventKey not pf13)
    TS05W00.TS05W-PF13-CNT = 0;
  end

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    converseLib.clearScreen();
     /* clear M001 display*/

    TS05W00.TS05WSWF = "Y"; /* Format the map switch*/
    TS05W00.TS05WSWR = "N"; /* Request for data switch*/
    TS05W00.TS05WERR = "N"; /* error indicator*/
    converseLib.validationFailed(0); /* no error*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (TS05M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TS05111(); /* Purge temporary storage*/

      XSTSS02(); /* Exit to another application*/

      set TS05M001.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS05M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "TS04"; /* TO application*/
      TSWREC.KUCCOID = TS05M001.KUCCOID; /* send along cust id*/
      set TS05M001 initial; /* clear map*/
    end

    TS05111(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER or pf5 or pf6 or PF13 or PF9, or PF 10*/
   /* make sure select field either blank or 's'.  Anything else*/
   /* is invalid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* enter was pressed*/
   || converseVar.eventKey is pf5   /* pf5 was pressed*/
   || converseVar.eventKey is pf6   /* pf6 was pressed*/
   || converseVar.eventKey is pf9   /* pf9  was pressed*/
   || converseVar.eventKey is pf10  /* pf10 was pressed*/
   || converseVar.eventKey is pf13) /* pf13 was pressed*/

    TS05131(); /* check for valid select*/

     /* check pf13 function authorization (associate/dis-associate)*/

    if (converseVar.eventKey is pf13
     && converseVar.validationMsgNum == 0) /* no errors so far*/
      if ("S" in TS05M001.TS05MSEL) /* something selected*/

        if (COMMAREA.CAINQFL == "Y" /* inquiry permitted*/
         && COMMAREA.CACHGFL == "Y") /* update permitted*/
           /* security passed*/
        else
          converseLib.validationFailed(208); /* not authorized*/
        end

      else
        converseLib.validationFailed(361); /* must select something*/
      end
    end

     /* check pf5 function authorization (delete packlist)*/

    if (converseVar.eventKey is pf5
     && converseVar.validationMsgNum == 0) /* no errors so far*/
      if ("S" in TS05M001.TS05MSEL) /* something selected*/

        if (COMMAREA.CAINQFL == "Y" /* inquiry permitted*/
         && COMMAREA.CADELFL == "Y" /* delete permitted*/
         && COMMAREA.CADLVL[1] == "Y")
           /* security passed*/
        else
          converseLib.validationFailed(208); /* not authorized*/
        end

      else
        converseLib.validationFailed(361); /* must select something*/
      end
    end


     /* check pf9 and pf10 authorization (lock/unlock packlist)*/

    if (converseVar.eventKey is pf9
     || converseVar.eventKey is pf10
     && converseVar.validationMsgNum == 0) /* no errors so far*/
      if ("S" in TS05M001.TS05MSEL) /* something selected*/

        if (COMMAREA.CACLVL[2] == "Y" /* user has authority*/
        )                             /* security passed*/
        else
          converseLib.validationFailed(208); /* not authorized*/
        end

      else
        converseLib.validationFailed(361); /* must select something*/
      end
    end

    if (converseVar.validationMsgNum > 0) /* an error occurred*/
      exit stack; /* return to top of application*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and pf5 was not pressed*/
   && converseVar.eventKey not pf6   /* and pf6 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      set TS05M001 initial; /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS05130

// Check for valid select
Function TS05131()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "131";

   /* ------------------------------------------------------------*/
   /* Scan the map array for 'S'elect, and count finds.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WIXS = 1; /* select index*/
  TS05W00.TS05WCNT = 0; /* select counter*/

  while (TS05W00.TS05WIXS <= 13)
    if (TS05M001.TS05MSEL[TS05WIXS] > " ") /* something entered*/
      if (TS05M001.TS05MSEL[TS05WIXS] == "S" /* row selected*/
       || TS05M001.TS05MSEL[TS05WIXS] == "P" /* print p/l*/
       || TS05M001.TS05MSEL[TS05WIXS] == "D" /* print duty drawback*/
       || TS05M001.TS05MSEL[TS05WIXS] == "B") /* print both reports*/
        if (TS05M001.TS05MSEL[TS05WIXS] == "S")
          TS05W00.TS05WCNT = TS05W00.TS05WCNT + 1; /* increment counter*/
        end
      else
        converseLib.validationFailed(338); /* invalid action code*/
        set TS05M001.TS05MSEL[TS05WIXS] cursor, bold;
        TS05W00.TS05WIXS = 13; /* stop loop*/
      end
    end
    TS05W00.TS05WIXS = TS05W00.TS05WIXS + 1; /* increment index*/
  end



end // end TS05131

// Reset highlighted fields
Function TS05140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS05M001.KUCCOID initialAttributes; /* requested customer nbr*/
  set TS05M001.TS05MCID initialAttributes; /* requested cust ord id*/
  set TS05M001.TS05MNID initialAttributes; /* requested nike ord id*/
  set TS05M001.TS05M-TSVPLNBR initialAttributes; /* requested P/L nbr*/
  set TS05M001.TS05MSHP initialAttributes; /* associated ship id*/
  set TS05M001.TSWIVPFL initialAttributes; /* ivc'd p/l flag*/

  TS05W00.TS05WIXM = 1; /* Initialize line index*/

  while (TS05W00.TS05WIXM <= 13 /* Until end of lines*/
   && TS05M001.TSVPLNBR[TS05WIXM] > 0) /* or end of display*/

    set TS05M001.TS05MSEL[TS05WIXM] normal; /* Reset select flag*/

    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1; /* Increment line index*/

  end

  set TS05M001.CATOAP initialAttributes; /* TO application*/
  set TS05M001.CAITEM initialAttributes; /* Application data*/


end // end TS05140

// Verify the entered data
Function TS05150()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "150"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (TS05M001.CAITEM > " ") /* Application data was entered*/

    set TS05M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || TS05M001.XXXTSPAG != TS05W00.XXXTSPAG) /* or page changed*/

    if ("S" in TS05M001.TS05MSEL /* something was selected*/
     || "P" in TS05M001.TS05MSEL /* p/l print requested*/
     || "D" in TS05M001.TS05MSEL /* duty drawback print requested*/
     || "B" in TS05M001.TS05MSEL) /* P/L & duty print requested*/

      set TS05M001.TS05MSEL[sysVar.arrayIndex] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* can't change with scroll*/

    else /* nothing selected*/

      if (TS05M001.KUCCOID != TS05W01.KUCCOID   /* customer changed*/
       || TS05M001.TS05MCID != TS05W01.TS05MCID /* cust order changed*/
       || TS05M001.TS05MNID != TS05W01.TS05MNID /* NIKE order changed*/
       || TS05M001.TSWIVPFL != TS05W00.TS05WIPF /* ivc'd p/l flag changed*/
       || TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* p/l chged*/

        converseLib.validationFailed(14); /* can't change with scroll*/

        if (TS05M001.KUCCOID != TS05W01.KUCCOID) /* customer changed*/
          set TS05M001.KUCCOID cursor, bold; /* Highlight*/

        else /* order changed*/
          if (TS05M001.TS05MCID != TS05W01.TS05MCID /* cust order changed*/
           || TS05M001.TS05MNID != TS05W01.TS05MNID) /* NIKE order changed*/
            set TS05M001.TS05MCID cursor, bold; /* Highlight*/
            set TS05M001.TS05MNID bold; /* Highlight*/
          else /* ivc'd p/l flag changed*/
            if (TS05M001.TSWIVPFL != TS05W00.TS05WIPF) /* ivc'd p/l flg chgd*/
              set TS05M001.TSWIVPFL cursor, bold; /* Highlight*/
            else
              set TS05M001.TS05M-TSVPLNBR cursor, bold; /* Highlight*/
            end
          end

        end

      else /* nothing selected or changed*/

        TS05151(); /* Verify scroll request*/

      end

    end
    /* ------------------------------------------------------------*/
     /* Exit to display the map.*/
    /* ------------------------------------------------------------*/

    if (converseVar.validationMsgNum == 0) /* No errors were found*/
      TS05W00.TS05WSWR = "N"; /* request for data*/
      TS05W00.TS05WSWF = "Y"; /* request for data*/
    end

    return; /* return to prev process*/

  end

   /* ------------------------------------------------------------*/
   /* If ENTER, neither the customer company id nor the order*/
   /* number were changed, and one row 's'elected, exit to*/
   /* another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/

    if ("S" in TS05M001.TS05MSEL /* request packing list detail*/
     || "P" in TS05M001.TS05MSEL /* request p/l print*/
     || "D" in TS05M001.TS05MSEL /* request duty print*/
     || "B" in TS05M001.TS05MSEL) /* request both to print*/

      TS05W01.TS05WPOS = sysVar.arrayIndex; /* select position*/

      if (TS05M001.KUCCOID != TS05W01.KUCCOID   /* cust company chngd*/
       || TS05M001.TS05MCID != TS05W01.TS05MCID /* cust ord chngd*/
       || TS05M001.TS05MNID != TS05W01.TS05MNID /* cust ord chngd*/
       || TS05M001.TSWIVPFL != TS05W00.TS05WIPF /* ivc'd p/l flag changed*/
       || TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* pl changed*/

        if (TS05M001.TSWIVPFL != TS05W00.TS05WIPF) /* ivc'd p/l flag changed*/
          set TS05M001.TSWIVPFL cursor, bold; /* Highlight*/
        else
          if (TS05M001.TS05MCID > 0)
            set TS05M001.TS05MCID cursor, bold; /* highlight*/
            set TS05M001.TS05MNID bold; /* highlight*/
          else
            if (TS05M001.KUCCOID > 0)
              set TS05M001.KUCCOID cursor, bold; /* highlight*/
            else
              if (TS05M001.TS05M-TSVPLNBR > 0)
                set TS05M001.TS05M-TSVPLNBR cursor, bold; /* highlight*/
              end
            end
          end
        end

        converseLib.validationFailed(187); /* cannot change data with select*/

      else /* nothing changed, continue*/

        TS05152(); /* check if exit requested*/

      end

    else /* request new data*/

      if (TS05M001.KUCCOID == TS05W01.KUCCOID   /* cust company same*/
       && TS05M001.TS05MCID == TS05W01.TS05MCID /* cust ord same*/
       && TS05M001.TS05MNID == TS05W01.TS05MNID /* cust ord same*/
       && TS05M001.TSWIVPFL == TS05W00.TS05WIPF /* ivc'd p/l flag same*/
       && TS05M001.TS05M-TSVPLNBR == TS05W01.TS05W-TSVPLNBR) /* pl same*/

        if (TS05M001.KUCCOID > 0
         || TS05M001.TS05MCID > 0
         || TS05M001.TS05M-TSVPLNBR > 0)

          if (TS05M001.TSVPLNBR[1] > 0) /* data retrieved*/

            set TS05M001.TS05MSEL[1] cursor, bold; /* highlight*/
            converseLib.validationFailed(361); /* select something*/

          else /* retrieve data*/

            TS05111(); /* purge any temporary storage*/

            if (TS05M001.TS05M-TSVPLNBR > 0)
              TS05M001.KUCCOID = 0; /* clear customer*/
              TS05M001.TS05MCID = 0; /* clear cust ord*/
              TS05M001.TS05MNID = 0; /* clear nike ord*/
            else
              if (TS05M001.TS05MCID > 0)
                TS05M001.KUCCOID = 0; /* clear customer*/
              else
                TS05M001.TS05MCID = 0; /* clear cust ord*/
                TS05M001.TS05MNID = 0; /* clear NIKE ord*/
              end
            end

            TS05153(); /* verify data change request*/

          end

        else

          set TS05M001.KUCCOID cursor, bold; /* highlight*/
          converseLib.validationFailed(360); /* must enter customer or order*/

        end

      else /* something changed, process request*/

        converseLib.validationFailed(0); /* no errors at this point*/
        TS05153(); /* verify data change request*/

      end

    end

   /* EZEFLO;                         /* return to top of application*/

  end

   /* ------------------------------------------------------------*/
   /* If PF5 (delete P/L),*/
   /* neither the customer company id nor the order number can*/
   /* change, and at least one row must be 's'elected.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* delete p/l*/
    if ("S" in TS05M001.TS05MSEL) /* something selected*/
      if (TS05M001.KUCCOID != TS05W01.KUCCOID   /* cust co chnged*/
       || TS05M001.TS05MCID != TS05W01.TS05MCID /* cust ord chnged*/
       || TS05M001.TS05MNID != TS05W01.TS05MNID /* nike ord chnged*/
       || TS05M001.TSWIVPFL != TS05W00.TS05WIPF /* ivc flg chnged*/
       || TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* pl chnged*/
        converseLib.validationFailed(187); /* can't chg data w/ sel*/
        if (TS05M001.TS05M-TSVPLNBR > 0)
          set TS05M001.TS05M-TSVPLNBR cursor, bold;
        else
          if (TS05M001.TS05MCID > 0)
            set TS05M001.TS05MCID cursor, bold;
            set TS05M001.TS05MNID bold;
          else
            if (TS05M001.KUCCOID > 0)
              set TS05M001.KUCCOID cursor, bold;
            else
              set TS05M001.TSWIVPFL cursor, bold;
            end
          end
        end
      else
        if (TS05M001.KUCCOID > 0)
          TS05158(); /* verify delete request*/
        else
          set TS05M001.KUCCOID cursor, bold;
          converseLib.validationFailed(146); /* invalid/missing cust id*/
        end
      end
    else /* nothing selected*/
      if (TS05M001.KUCCOID > 0
       || TS05M001.TS05MCID > 0
       || TS05M001.TS05M-TSVPLNBR > 0)

        set TS05M001.TS05MSEL[1] cursor, bold;
        converseLib.validationFailed(361); /* select something*/
      else
        set TS05M001.KUCCOID cursor, bold;
        converseLib.validationFailed(360);
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF6 (set P/L error off, un-highlight),*/
   /* neither the customer company id nor the order number can*/
   /* change, and at least one row must be 's'elected.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* set error/highlight off*/
    if ("S" in TS05M001.TS05MSEL) /* something selected*/
      if (TS05M001.KUCCOID != TS05W01.KUCCOID   /* cust co chnged*/
       || TS05M001.TS05MCID != TS05W01.TS05MCID /* cust ord chnged*/
       || TS05M001.TS05MNID != TS05W01.TS05MNID /* nike ord chnged*/
       || TS05M001.TSWIVPFL != TS05W00.TS05WIPF /* ivc flg chnged*/
       || TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* pl chnged*/
        converseLib.validationFailed(187); /* can't chg data w/ sel*/
        if (TS05M001.TS05M-TSVPLNBR > 0)
          set TS05M001.TS05M-TSVPLNBR cursor, bold;
        else
          if (TS05M001.TS05MCID > 0)
            set TS05M001.TS05MCID cursor, bold;
            set TS05M001.TS05MNID bold;
          else
            if (TS05M001.KUCCOID > 0)
              set TS05M001.KUCCOID cursor, bold;
            else
              set TS05M001.TSWIVPFL cursor, bold;
            end
          end
        end
      else
        if (TS05M001.KUCCOID > 0)
          TS05159(); /* verify error off request*/
        else
          set TS05M001.KUCCOID cursor, bold;
          converseLib.validationFailed(146); /* invalid/missing cust id*/
        end
      end
    else /* nothing selected*/
      if (TS05M001.KUCCOID > 0
       || TS05M001.TS05MCID > 0
       || TS05M001.TS05M-TSVPLNBR > 0)

        set TS05M001.TS05MSEL[1] cursor, bold;
        converseLib.validationFailed(361); /* select something*/
      else
        set TS05M001.KUCCOID cursor, bold;
        converseLib.validationFailed(360);
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If PF9 (lock packing list) or PF10 (unlock pack list)*/
   /* No entry fields can be changed if any row has been*/
   /* 's'elected.  At least one row must be selected.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* lock packlist*/
   || converseVar.eventKey is pf10) /* unlock packlist*/
    if ("S" in TS05M001.TS05MSEL) /* something selected*/
      if (TS05M001.KUCCOID != TS05W01.KUCCOID   /* cust co chnged*/
       || TS05M001.TS05MCID != TS05W01.TS05MCID /* cust ord chnged*/
       || TS05M001.TS05MNID != TS05W01.TS05MNID /* nike ord chnged*/
       || TS05M001.TSWIVPFL != TS05W00.TS05WIPF /* ivc flg chnged*/
       || TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* pl chnged*/
        converseLib.validationFailed(187); /* can't chg data w/ sel*/
        if (TS05M001.TS05M-TSVPLNBR > 0)
          set TS05M001.TS05M-TSVPLNBR cursor, bold;
        else
          if (TS05M001.TS05MCID > 0)
            set TS05M001.TS05MCID cursor, bold;
            set TS05M001.TS05MNID bold;
          else
            if (TS05M001.KUCCOID > 0)
              set TS05M001.KUCCOID cursor, bold;
            else
              set TS05M001.TSWIVPFL cursor, bold;
            end
          end
        end
      else
        if (TS05M001.KUCCOID > 0)
          TS05157(); /* checks that p/l not invoiced*/
                             /* or that not more than one selected*/
        else
          set TS05M001.KUCCOID cursor, bold;
          converseLib.validationFailed(146); /* invalid/missing cust id*/
        end
      end
    else /* nothing selected*/
      if (TS05M001.KUCCOID > 0
       || TS05M001.TS05MCID > 0
       || TS05M001.TS05M-TSVPLNBR > 0)

        set TS05M001.TS05MSEL[1] cursor, bold;
        converseLib.validationFailed(361); /* select something*/
      else
        set TS05M001.KUCCOID cursor, bold;
        converseLib.validationFailed(360);
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If PF13 (associate or dis-associate P/L shipment),*/
   /* neither the customer company id nor the order number can*/
   /* change, and at least one row must be 's'elected.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* request for update*/

    if ("S" in TS05M001.TS05MSEL) /* something selected*/

      if (TS05M001.KUCCOID != TS05W01.KUCCOID   /* cust company chngd*/
       || TS05M001.TS05MCID != TS05W01.TS05MCID /* cust ord chngd*/
       || TS05M001.TS05MNID != TS05W01.TS05MNID /* cust ord chngd*/
       || TS05M001.TSWIVPFL != TS05W00.TS05WIPF /* ivc'd p/l flag chngd*/
       || TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* pl chngd*/

        if (TS05M001.TS05M-TSVPLNBR > 0)
          set TS05M001.TS05M-TSVPLNBR cursor, bold; /* highlight*/
        else
          if (TS05M001.TS05MCID > 0)
            set TS05M001.TS05MCID cursor, bold; /* highlight*/
            set TS05M001.TS05MNID bold; /* highlight*/
          else
            if (TS05M001.KUCCOID > 0)
              set TS05M001.KUCCOID cursor, bold; /* highlight*/
            else
              set TS05M001.TSWIVPFL cursor, bold; /* highlight*/
            end
          end
        end

        converseLib.validationFailed(187); /* cannot change data with select*/

      else /* nothing changed, continue*/

        if (TS05M001.KUCCOID > 0) /* existing customer id*/

          TS05154(); /* verify update request*/

          if (TS05M001.TS05MSHP > 0) /* association requested*/

            TS05155(); /* verify shipment association*/

          else /* disassociation requested*/

            TS05156(); /* verify shipment disassociation*/

          end

        else /* shouldn't be here !*/

          set TS05M001.KUCCOID cursor, bold; /* highlight*/
          converseLib.validationFailed(146); /* invalid/missing customer id*/

        end

      end

    else /* nothing selected*/

      if (TS05M001.KUCCOID > 0
       || TS05M001.TS05MCID > 0
       || TS05M001.TS05M-TSVPLNBR > 0)

        set TS05M001.TS05MSEL[1] cursor, bold; /* highlight*/
        converseLib.validationFailed(361); /* select something*/
      else
        set TS05M001.KUCCOID cursor, bold; /* highlight*/
        converseLib.validationFailed(360); /* must enter customer or order*/

      end

    end

  end



   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end TS05150

// Verify scroll request
Function TS05151()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "151";

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS05W00.XXXTSPAG < 2)       /* and no previous pages*/

    converseLib.validationFailed(2); /* No previous page to display*/
    if (TS05W00.TA5TSQIX != 0)
      set TS05M001.TS05MSEL[1] cursor;
    end

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS05W00.XXXTSPAG >= TS05W00.TA5TSQIX) /* and no more pages*/

    converseLib.validationFailed(3); /* No more pages to display*/
    if (TS05W00.TA5TSQIX != 0)
      set TS05M001.TS05MSEL[1] cursor;
    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WIXM = 13; /* Initialize line index*/

  while (TS05W00.TS05WIXM > 0) /* Until end of lines*/

    if (TS05M001.TS05MSEL[TS05WIXM] != TS05W01.TS05WSEL[TS05WIXM])

      set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    TS05W00.TS05WIXM = TS05W00.TS05WIXM - 1; /* Decrement line number*/

  end

  if (TS05M001.KUCCOID != TS05W01.KUCCOID) /* customer changed*/
    set TS05M001.KUCCOID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/
  end

  if (TS05M001.TS05MCID != TS05W01.TS05MCID /* cust order changed*/
   || TS05M001.TS05MNID != TS05W01.TS05MNID) /* NIKE order changed*/
    set TS05M001.TS05MCID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/
  end

  if (TS05M001.TSWIVPFL != TS05W00.TS05WIPF) /* ivc'd p/l flag changed*/
    set TS05M001.TSWIVPFL cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/
  end

  if (TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* p/l changed*/
    set TS05M001.TS05M-TSVPLNBR cursor, bold; /* highlight*/
    converseLib.validationFailed(14); /* modifications not allowed*/
  end
end // end TS05151

// Check if exit requested
Function TS05152()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "152"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* Check if print was requested along with select option.*/
   /* If so, ignore select option and process print option.*/
   /* ------------------------------------------------------------*/

  if ("P" in TS05M001.TS05MSEL /* request print p/l*/
   || "D" in TS05M001.TS05MSEL /* request print duty drawback*/
   || "B" in TS05M001.TS05MSEL) /* request print both*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* check how many rows selected (counted in ts05131).*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TS05WCNT > 1) /* too many selects*/

    converseLib.validationFailed(184); /* Only 1 select with ENTER*/
    set TS05M001.TS05MSEL[TS05WPOS] cursor, bold;

  else /* only one row*/

    if (TS05M001.KUCCOID == 0  /* no customer*/
     && TS05M001.TS05MCID == 0 /* no order*/
     && TS05M001.TS05M-TSVPLNBR == 0) /* no packing list*/

      converseLib.validationFailed(360); /* enter customer or order or p/l*/
      set TS05M001.KUCCOID cursor, bold;

    else /* valid selection*/

      if (TS05M001.TS05MSHP == 0) /* no shipment id entered*/

        /* ------------------------------------------------------------*/
         /* we already know the position of the select for the table*/
         /* cursor from ts05150*/
        /* ------------------------------------------------------------*/
        TSWREC.TSWPLFLG = TS05W00.TS05WSWS; /* select type*/
        TSWREC.TSWIVPFL = TS05M001.TSWIVPFL; /* invoiced p/l flag*/
        TSWREC.KUCCOID = TS05M001.KUCCOID;
        TSWREC.TSWIVPFL = TS05M001.TSWIVPFL;
        TSWREC.OP1CUOID = TS05M001.OP1CUOID[TS05WPOS];
        TSWREC.OP1NORID = TS05M001.OP1NORID[TS05WPOS];
        TSWREC.TSVPLNBR = TS05M001.TSVPLNBR[TS05WPOS];
        COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
        COMMAREA.CATOAP = "TS06"; /* TO application*/

        TS05111(); /* Purge temporary storage*/

        XSTSS02(); /* Exit to another application*/

      else /* shipment id entered*/

        converseLib.validationFailed(235); /* shipment id and enter don't mix!*/
        set TS05M001.TS05MSHP cursor, bold;

      end

    end

  end


end // end TS05152

// Verify data change request
Function TS05153()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "153";

   /* ------------------------------------------------------------*/
   /* At this point, EZEAID is 'ENTER' and either the customer id*/
   /* or order number has changed.  What was changed, as well as*/
   /* to what it was changed must be verified and acted upon.*/
   /* Regardless of which changed, if both customer id and order*/
   /* are zero, an error message must be displayed.  If both have*/
   /* changed and neither is zero, an error message must be*/
   /* displayed.  If neither of the above situations is true,*/
   /* then each individual combination must be examined for*/
   /* validity.  If valid, then temporary storage should be*/
   /* purged, the map information transferred to TS05W01, the*/
   /* map then cleared, the request for data reset to 'y'es,*/
   /* and the application returned to the top.  If not valid,*/
   /* then the appropriate error message must be displayed.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify the invoiced packing list flag.  must be 'n' or 'y'*/
   /* =>If it is the only thing changed, get out because executing*/
     /* the rest of the code may change the select key data.*/
   /* ------------------------------------------------------------*/

  if (TS05M001.TSWIVPFL != TS05W00.TS05WIPF) /* flag has changed*/
    if (TS05M001.TSWIVPFL != "N"
     && TS05M001.TSWIVPFL != "Y")
      converseLib.validationFailed(46);
      set TS05M001.TSWIVPFL cursor, bold; /* highlight*/
      exit stack; /* asfasfdas           /* return to previous process*/
    else
      TS05W00.TS05WIPF = TS05M001.TSWIVPFL;
      if (TS05M001.KUCCOID != TS05W01.KUCCOID   /* customer has changed*/
       || TS05M001.TS05MCID != TS05W01.TS05MCID /* order has changed*/
       || TS05M001.TS05MNID != TS05W01.TS05MNID /* order has changed*/
       || TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* pl chg*/
         /* next sentence*/
      else
        TS05111(); /* purge any temporary storage*/
        TS05W01.KUCCOID = TS05M001.KUCCOID;
        TS05W01.TS05MCID = TS05M001.TS05MCID;
        TS05W01.TS05MNID = TS05M001.TS05MNID;
        TS05W01.TS05W-TSVPLNBR = TS05M001.TS05M-TSVPLNBR;
        set TS05M001 initial; /* clear screen*/
        exit stack; /* dadfas           /* return to previous process*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* Verify if both customer and order are zero.*/
   /* ------------------------------------------------------------*/

  if (TS05M001.KUCCOID == 0  /* customer is zero*/
   && TS05M001.TS05MCID == 0 /* order is also zero*/
   && TS05M001.TS05M-TSVPLNBR == 0) /* p/l is also zero*/

    converseLib.validationFailed(360); /* must enter cust or ord or pl*/
    TS05111(); /* purge any temporary storage*/
    set TS05M001 initial; /* clear screen*/
    set TS05M001.KUCCOID cursor, bold; /* Highlight*/

    exit stack; /* dfadfadfa              /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Verify customer, order and P/l changed and not zeros.*/
   /* ------------------------------------------------------------*/

  if (TS05M001.KUCCOID != TS05W01.KUCCOID               /* customer has changed*/
   && TS05M001.TS05MCID != TS05W01.TS05MCID             /* order was also changed*/
   && TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR /* pl also chg*/
   && TS05M001.KUCCOID > 0                              /* customer is not zero*/
   && TS05M001.TS05MCID > 0                             /* order is also not zero*/
   && TS05M001.TS05M-TSVPLNBR > 0)                      /* p/l is also not zero*/

    set TS05M001.KUCCOID cursor, bold; /* Highlight*/
    converseLib.validationFailed(360); /* must enter customer or order*/

    exit stack; /* adfasdfasd             /* return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* At this point packing list or order or customer has changed*/
   /* and is greater than zero.  Verify which one.*/
   /* ------------------------------------------------------------*/

   /* If P/L changed and not zero, request by P/L*/
     /* else default request by order if not zero.*/

  if (TS05M001.TS05M-TSVPLNBR != TS05W01.TS05W-TSVPLNBR) /* p/l chged*/
    if (TS05M001.TS05M-TSVPLNBR > 0) /* new p/l enterd*/
      TS05111(); /* purge any temporary storage*/
      TS05W00.TS05WSWS = "P"; /* request by p/l nbr*/
      TS05W00.TS05WSWR = "Y"; /* request for data*/
      TS05W00.TS05WSWF = "N"; /* format map*/
      TS05W01.TS05W-TSVPLNBR = TS05M001.TS05M-TSVPLNBR;
      set TS05M001 initial; /* clear map*/
      exit stack; /* dfasfasdfsdf        /* return to previous process*/
    else
      if (TS05M001.TS05MCID > 0) /* default to order*/
        TS05111(); /* purge temporary storage*/
        TS05W00.TS05WSWS = "O"; /* request by order*/
        TS05W00.TS05WSWR = "Y"; /* request for data*/
        TS05W00.TS05WSWF = "N"; /* format map*/
        TS05W01.TS05MCID = TS05M001.TS05MCID;
        TS05W01.TS05MNID = TS05M001.TS05MNID;
        set TS05M001 initial; /* clear map*/
        exit stack; /* asdfasdfafda         /* return to previous process*/
      end
    end
  end

   /* If order changed and not zero, request by order*/
     /* else default request by customer if not zero.*/

  if (TS05M001.TS05MCID != TS05W01.TS05MCID) /* order changed*/
    if (TS05M001.TS05MCID > 0) /* new order entered*/
      TS05111(); /* purge any temporary storage*/
      TS05W00.TS05WSWS = "O"; /* request by customer*/
      TS05W00.TS05WSWR = "Y"; /* request for data*/
      TS05W00.TS05WSWF = "N"; /* format map*/
      TS05W01.TS05MCID = TS05M001.TS05MCID;
      TS05W01.TS05MNID = TS05M001.TS05MNID;
      set TS05M001 initial; /* clear map*/
      exit stack; /* dfasfdaf           /* return to previous process*/
    else
      if (TS05M001.KUCCOID > 0) /* default to customer if not zero*/
        TS05111(); /* purge any temporary storage*/
        TS05W00.TS05WSWS = "C"; /* request by customer*/
        TS05W00.TS05WSWR = "Y"; /* request for data*/
        TS05W00.TS05WSWF = "N"; /* format map*/
        TS05W01.KUCCOID = TS05M001.KUCCOID;
        set TS05M001 initial; /* clear map*/
        exit stack; /* afasfsaf            /* return to previous process*/
      end
    end
  end

   /* If nike order changed and not zero, also order > zero, req by ord*/
     /* else default request by customer if not zero.*/

  if (TS05M001.TS05MNID != TS05W01.TS05MNID /* nike ord changed*/
   && TS05M001.TS05MNID > 0)                /* new nike order entered*/
    if (TS05M001.TS05MCID > 0) /* order > zero*/
      TS05111(); /* purge any temporary storage*/
      TS05W00.TS05WSWS = "O"; /* request by customer*/
      TS05W00.TS05WSWR = "Y"; /* request for data*/
      TS05W00.TS05WSWF = "N"; /* format map*/
      TS05W01.TS05MCID = TS05M001.TS05MCID;
      TS05W01.TS05MNID = TS05M001.TS05MNID;
      set TS05M001 initial; /* clear map*/
      exit stack; /* dfasfasasf          /* return to previous process*/
    else
      if (TS05M001.KUCCOID > 0) /* default to customer if not zero*/
        TS05111(); /* purge any temporary storage*/
        TS05W00.TS05WSWS = "C"; /* request by customer*/
        TS05W00.TS05WSWR = "Y"; /* request for data*/
        TS05W00.TS05WSWF = "N"; /* format map*/
        TS05W01.KUCCOID = TS05M001.KUCCOID;
        set TS05M001 initial; /* clear map*/
        exit stack; /* dfasfasdf            /* return to previous process*/
      end
    end
  end

   /* If customer changed and not zero, request by customer*/
     /* else issue error message.*/

  if (TS05M001.KUCCOID != TS05W01.KUCCOID) /* customer changed*/
    if (TS05M001.KUCCOID > 0) /* new customer entered*/
      TS05111(); /* purge any temporary storage*/
      TS05W00.TS05WSWS = "C"; /* request by customer*/
      TS05W00.TS05WSWR = "Y"; /* request for data*/
      TS05W00.TS05WSWF = "N"; /* format map*/
      TS05W01.KUCCOID = TS05M001.KUCCOID;
      set TS05M001 initial; /* clear map*/
      exit stack; /* fdasfasfas           /* return to previous process*/
    else

       /* how did it get this far?*/
       /* all three numbers are zeros or unchanged.*/

      converseLib.validationFailed(360); /**/
      TS05111(); /* purge any temporary storage*/
      TS05W01.KUCCOID = TS05M001.KUCCOID; /* customer id*/
      TS05W01.TS05MCID = TS05M001.TS05MCID; /* cust order*/
      TS05W01.TS05MNID = TS05M001.TS05MNID; /* NIKE order*/
      TS05W01.TS05W-TSVPLNBR = TS05M001.TS05M-TSVPLNBR; /* p/l nbr*/
      set TS05M001.KUCCOID cursor, bold; /* Highlight*/
      exit stack; /* dfsafasdf*/
    end
  end
end // end TS05153

// Verify update request
Function TS05154()
   /* ------------------------------------------------------------*/
   /* At this point, the customer id is not equal to zero, the*/
   /* map data is unchanged, and at least one row has been*/
   /* selected.*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "154";

   /* ------------------------------------------------------------*/
   /* If selection was entered and the packing list has been*/
   /* invoiced, it cannot be selected for change.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WIXM = 1;

  while (TS05W00.TS05WIXM <= 13)

    if (TS05M001.TS05MSEL[TS05WIXM] == "S"
     && TS05W01.TS05WSWI[TS05WIXM] != "Y") /* update allowed*/

      set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(194); /* Indicate cannot update*/
      TS05W00.TS05WIXM = 13; /* end loop*/

    end

    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* verify the shipment id.*/
   /* ------------------------------------------------------------*/

  if (TS05M001.TS05MSHP > 0) /* shipment id entered*/
     /* AND TS05M001.TS05MSHP NE TS05W01.TS05MSHP ;*/
    set TSUREC empty; /* clear NIL shipment record*/
    TSUREC.KUCCOID = TS05M001.KUCCOID; /* customer id*/
    TSUREC.TSFSHPID = TS05M001.TS05MSHP; /* shipment id*/

    TS05S06(); /* get shipment id*/

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end TS05154

// Verify shipment id association
Function TS05155()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "155";

   /* ------------------------------------------------------------*/
   /* Build tsvrec key to select all packing lists associated*/
   /* with the requested shipment id.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty;
  TSVREC.KUCCOID = TS05M001.KUCCOID; /* customer id*/
  TSVREC.TSFSHPID = TS05M001.TS05MSHP; /* shipment id*/
  TSVREC.TSVPLNBR = -1; /* any NIL pl nbr*/
  TSVREC.NIAIVCDT = 0; /* zero invoice dates only*/

   /* ------------------------------------------------------------*/
   /* Verify requested ship id association*/
   /* ------------------------------------------------------------*/

  TS05S07(); /* select/open pack list cursor*/

  TS05W00.TS05WSWC = "N"; /* init cursor eof switch*/
  TS05W01.TS05WSWN = "N"; /* shipment invoiced switch*/
  TS05W00.TS05WIXS = 1; /* init select index*/

  while (TS05W00.TS05WSWC == "N") /* not end of cursor*/

    TS05S08(); /* fetch next associated packing list*/

    TS05W00.TS05WIXS = TS05W00.TS05WIXS + 1; /* increment index*/

  end

  TS05S09(); /* close pack list cursor*/

  if (TS05W01.TS05WSWN == "Y") /* shipment has been invoiced*/
    if (COMMAREA.CACLVL[1] == "Y") /* authorize to dis-assoc ivc'd pl?*/
       /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(196); /* shipment invoiced*/
      set TS05M001.TS05MSHP cursor, bold; /* highlight*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify selected packing list associations.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WIXM = 1; /* init map index*/
  TS05W00.TS05WCNT = 0; /* init counter*/

  while (TS05W00.TS05WIXM <= 13)

    if (TS05M001.TS05MSEL[TS05WIXM] == "S") /* row selected*/

      if (TS05M001.TSFSHPID[TS05WIXM] > 0) /* already associated*/

        TS05W00.TS05WCNT = TS05W00.TS05WCNT + 1; /* increment counter*/

        if (TS05W00.TS05WCNT == 1) /* first bad select*/
          set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
        else
          set TS05M001.TS05MSEL[TS05WIXM] bold; /* highlight*/
        end

        converseLib.validationFailed(195); /* must disassoc first*/

      end
    end

    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1; /* increment*/

  end

  if (converseVar.validationMsgNum > 0) /* an error has occurred*/
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* Verify selected packing list shipment type.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WIXM = 1; /* init map index*/
  TS05W00.TS05WCNT = 0; /* init counter*/

  while (TS05W00.TS05WIXM <= 13)

    if (TS05M001.TS05MSEL[TS05WIXM] == "S") /* row selected*/

      if (TSUREC.YSTCD == "EX") /* not direct ship*/
        if (TS05W01.XDSCD[TS05WIXM] != " ") /* direct ship*/

          converseLib.validationFailed(234); /* shipment types do not match*/
          TS05W00.TS05WCNT = TS05W00.TS05WCNT + 1; /* increment counter*/

          if (TS05W00.TS05WCNT == 1) /* first bad select*/
            set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
          else
            set TS05M001.TS05MSEL[TS05WIXM] bold; /* highlight*/
          end

        end
      else /* direct ship*/
        if (TS05W01.XDSCD[TS05WIXM] == " ") /* not direct ship*/

          converseLib.validationFailed(234); /* shipment types do not match*/
          TS05W00.TS05WCNT = TS05W00.TS05WCNT + 1; /* increment counter*/

          if (TS05W00.TS05WCNT == 1) /* first bad select*/
            set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
          else
            set TS05M001.TS05MSEL[TS05WIXM] bold; /* highlight*/
          end

        end

      end
    end

    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1; /* increment*/

  end

  if (converseVar.validationMsgNum > 0) /* an error has occurred*/
    exit stack;
  end


end // end TS05155

// Verify shipment disassociation
Function TS05156()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "156";

   /* ------------------------------------------------------------*/
   /* Verify selected packing list disassociations.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WIXM = 1; /* init map index*/

  while (TS05W00.TS05WIXM <= 13)

    if (TS05M001.TS05MSEL[TS05WIXM] == "S") /* row selected*/

      if (TS05M001.TSFSHPID[TS05WIXM] == 0) /* not associated*/

        if (TS05W00.TS05WIXM == 1) /* first bad select*/
          set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
        else
          set TS05M001.TS05MSEL[TS05WIXM] bold; /* highlight*/
        end

        converseLib.validationFailed(232); /* not associated*/

      end

    end

    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1; /* increment*/

  end

  if (converseVar.validationMsgNum > 0) /* an error has occurred*/
    exit stack;
  end


end // end TS05156

// VERIFY PF5 DELETE P/L REQUEST
Function TS05157()
  TSWREC.XXXMODID = "157";

   /* If selection was entered and the packing list has been*/
   /* invoiced, it cannot be selected for change.  More than*/
   /* one packing list cannot be selected for locking or unlocking.*/

  TS05W00.TS05WIXM = 1;
  TS05W00.TS05W-SEL-CNT = 0;

  while (TS05W00.TS05WIXM <= 13)
    if (TS05M001.TS05MSEL[TS05WIXM] == "S")
      TS05W00.TS05W-SEL-CNT = TS05W00.TS05W-SEL-CNT + 1; /* count*/
      if (TS05W01.TS05WSWI[TS05WIXM] == "N") /* update not allowed*/
        set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
        converseLib.validationFailed(194); /* indicate update not allowed*/
      else /* update allowed*/
         /* next sentence*/
      end
    end
    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;
  end

  if (TS05W00.TS05W-SEL-CNT > 1) /* more than one p/l select for lk/unlk*/
    TS05W00.TS05WIXM = 13;
    while (TS05W00.TS05WIXM > 0)
      if (TS05M001.TS05MSEL[TS05WIXM] == "S")
        set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
        converseLib.validationFailed(390); /* may only lock/unlock one at a time*/
      end
      TS05W00.TS05WIXM = TS05W00.TS05WIXM - 1;
    end
  end

  if (converseVar.validationMsgNum != 0) /* errors found*/
    exit stack; /* exit to display map*/
  end
end // end TS05157

// VERIFY PF5 DELETE P/L REQUEST
Function TS05158()
  TSWREC.XXXMODID = "158";

   /* if selection was entered and the packing list has been*/
   /* invoiced, it cannot be selected for change.*/

  TS05W00.TS05WIXM = 1;
  TS05W00.TS05W-SEL-CNT = 0;

  while (TS05W00.TS05WIXM <= 13)
    if (TS05M001.TS05MSEL[TS05WIXM] == "S")
      TS05W00.TS05W-SEL-CNT = TS05W00.TS05W-SEL-CNT + 1; /* count # del*/
      if (TS05W01.TS05WSWI[TS05WIXM] == "N") /* update not allowed*/
        set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
        converseLib.validationFailed(194); /* indicate update not allowed*/
      else /* updatea allowed*/
        if (TS05M001.TSFSHPID[TS05WIXM] == 0) /* pl not assoc shpmnt*/
           /* next sentence, ok to delete*/
        else /* pl assoc shpmnt,*/
           /* check if shpmnt is assoc to more than one p/l*/
          TS05S15(); /* if so, must dis-assoc p/l b4 delete*/
          if (SQLCA.VAGen_SQLCODE == 0) /* one row found*/
             /* next sentence*/
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
              set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
              converseLib.validationFailed(12); /* update by another appl*/
            else
              set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
              converseLib.validationFailed(380); /* must dis-associate*/
            end
          end
        end

        if (TS05W01.TS-NIL-PL-BLD-IND[TS05WIXM] != "A")
          set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
          converseLib.validationFailed(381); /* may not delete, not build by autopl*/
        end

      end
    end
    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;
  end

  if (TS05W00.TS05W-SEL-CNT > 1) /* more than one p/l select for delete*/
    TS05W00.TS05WIXM = 13;
    while (TS05W00.TS05WIXM > 0)
      if (TS05M001.TS05MSEL[TS05WIXM] == "S")
        set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
        converseLib.validationFailed(382); /* may delete only 1 p/l at a time*/
      end
      TS05W00.TS05WIXM = TS05W00.TS05WIXM - 1;
    end
  end

  if (converseVar.validationMsgNum != 0) /* errors found*/
    TS05W00.TS05W-PF5-CNT = 0;
    exit stack; /* exit to display map*/
  end
end // end TS05158

// VERIFY PF6 UNHIGHLIGHT ERR REQ
Function TS05159()
  TSWREC.XXXMODID = "159";

  TS05W00.TS05WIXM = 1;

  while (TS05W00.TS05WIXM <= 13)
    if (TS05M001.TS05MSEL[TS05WIXM] == "S")
      if (TS05W01.TS05WSWI[TS05WIXM] == "N") /* UPdt NOT ALLOWED, invc'd*/
        set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
        converseLib.validationFailed(194); /* indicate update not allowed*/
        TS05W00.TS05WIXM = 13; /* end loop*/
      end
    end
    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;
  end

  if (converseVar.validationMsgNum != 0) /* error found*/
    exit stack; /* exit to display map*/
  end

end // end TS05159

// Process valid input request
Function TS05160()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "160";

  if (converseVar.validationMsgNum != 0)
    return;
  end
   /* ------------------------------------------------------------*/
   /* process print*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0) /* no errors present*/
    if (converseVar.eventKey is enter) /* enter was pressed*/
      if ("P" in TS05M001.TS05MSEL /* request p/l print*/
       || "D" in TS05M001.TS05MSEL /* request duty drawback print*/
       || "B" in TS05M001.TS05MSEL) /* request p/l and duty print*/
        TS05164(); /* setup and submit print req*/
        return;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the top of the application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* scro l backward requested*/

    TS05W00.XXXTSPAG = TS05W00.XXXTSPAG - 1; /* decrement page number*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If a scroll foreward was requested, increment the page*/
   /* number and return to the top of the application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* scroll foreward requested*/

    TS05W00.XXXTSPAG = TS05W00.XXXTSPAG + 1; /* increment page number*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* If a change was made to the current page number change the*/
   /* number and return to the top of the application.*/
   /* ------------------------------------------------------------*/

  if (TS05M001.XXXTSPAG != TS05W00.XXXTSPAG) /* if current page chgd*/

    TS05W00.XXXTSPAG = TS05M001.XXXTSPAG; /* save new page nbr*/

    return;

  end


   /* ------------------------------------------------------------*/
   /* pick up and convert the current system date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01();

   /* ------------------------------------------------------------*/
   /* PF5 delete packing list request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5)
    TS05W00.TS05W-PF5-CNT = TS05W00.TS05W-PF5-CNT + 1;
    if (TS05W00.TS05W-PF5-CNT == 1)
      converseLib.validationFailed(383);
      exit stack;
    else
      if (TS05W00.TS05W-PF5-CNT == 2)
        TS05WIXM = 1;
        while (TS05W00.TS05WIXM <= 13)
          if (TS05M001.TS05MSEL[TS05WIXM] == "S")
            TS05165(); /* delete p/l*/
          end
          TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;
        end
        TS05W00.TS05W-PF5-CNT = 0;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* PF6 un-highlight packing list (error off) request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6)
    TS05WIXM = 1;
    while (TS05W00.TS05WIXM <= 13)
      if (TS05M001.TS05MSEL[TS05WIXM] == "S")
        TS05166(); /* un-highlight p/l*/
      end
      TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;
    end
  end


   /* ------------------------------------------------------------*/
   /* PF9 or PF10 - lock or unlock pack list*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9)
    TS05W00.TS05W-PK-SCHED-NBR = 1;
  end

  if (converseVar.eventKey is pf10)
    TS05W00.TS05W-PK-SCHED-NBR = 0;
  end

  if (converseVar.eventKey is pf9
   || converseVar.eventKey is pf10)
    TS05WIXM = 1;
    while (TS05W00.TS05WIXM <= 13)
      if (TS05M001.TS05MSEL[TS05WIXM] == "S")
        TS05167(); /* lock or unlock p/l*/
      end
      TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Check if this is an association or disassociation request*/
   /* and proceed accordingly.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13)

    if (TS05M001.TS05MSHP > 0) /* association request*/

      TS05161(); /* associate*/

    else /* disassociation request*/

      /* ------------------------------------------------------------*/
       /* When disassociating packing lists from a shipment id, each*/
       /* selected packing list must be completely processed one at a*/
       /* time: each must have its associated shipment id checked for*/
       /* any invoiced packing lists before allowing updates; each*/
       /* must then be updated and the associated shipment id updated*/
      /* ------------------------------------------------------------*/

      TS05W00.TS05WIXM = 1; /* init map index*/

      while (TS05W00.TS05WIXM <= 13) /* max map rows*/

        if (TS05M001.TS05MSEL[TS05WIXM] == "S")

          TS05162(); /* check all p/l associated with ship id*/

          TS05163(); /* disassociate packing list*/

        end

        TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1; /* increment*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Refresh and display map when updates successfully completed*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no error so far*/

    converseLib.validationFailed(001); /* update successful*/

    if (TS05M001.TS05M-TSVPLNBR > 0) /* P/L entered*/
      TS05111(); /* purge temporary storage*/
      TS05W00.TS05WSWS = "P"; /* request by P/L*/
      TS05W00.TS05WSWR = "Y"; /* request for data*/
      TS05W00.TS05WSWF = "N"; /* format map*/
      TS05W01.TS05W-TSVPLNBR = TS05M001.TS05M-TSVPLNBR;
      set TS05M001 initial; /* clear map*/
    else
      if (TS05M001.KUCCOID > 0 /* customer id entered*/
       && TS05M001.TS05MCID > 0) /* order id entered*/

        TS05111(); /* purge temporary storage*/
        TS05W00.TS05WSWS = "O"; /* request by order*/
        TS05W00.TS05WSWR = "Y"; /* request for data*/
        TS05W00.TS05WSWF = "N"; /* format map*/
        TS05W01.TS05MCID = TS05M001.TS05MCID;
        TS05W01.TS05MNID = TS05M001.TS05MNID;
        set TS05M001 initial; /* clear map*/

      else

        TS05111(); /* purge temporary storage*/
        TS05W00.TS05WSWS = "C"; /* request by customer*/
        TS05W00.TS05WSWR = "Y"; /* request for data*/
        TS05W00.TS05WSWF = "N"; /* format map*/
        TS05W01.KUCCOID = TS05M001.KUCCOID;
        set TS05M001 initial; /* clear map*/

      end

    end

  end


end // end TS05160

// Associate with valid shipment
Function TS05161()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "161";

   /* ------------------------------------------------------------*/
   /* When associating packing lists to a shipment id: each*/
   /* selected packing list must be updated with the shipment id*/
   /* and current date and time; the packing list total quantity*/
   /* shipped, total cubit volume and total weight must be*/
   /* accumulated into appropriate working areas; then, when all*/
   /* selected packing lists have been successfully updated, the*/
   /* shipment record must be updated with the current date and*/
   /* time and the addition of the accumulated packing list total*/
   /* quantity shipped, total cubit volume and total weight.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WSHQ = 0; /* init tot ship qty accum*/
  TS05W00.TS05WLBS = 0; /* init tot lbs qty accum*/
  TS05W00.TS05WFT3 = 0; /* init tot ft3 accum*/
  TS05W00.TS05WIXM = 1; /* init map index*/

  while (TS05W00.TS05WIXM <= 13) /* max map rows*/

    if (TS05M001.TS05MSEL[TS05WIXM] == "S")

      set TSVREC empty; /* init packing list record*/
      /* ------------------------------------------------------------*/
       /* Build tsvrec key.*/
      /* ------------------------------------------------------------*/

      TSVREC.TSVPLNBR = TS05W01.TSVPLNBR[TS05WIXM]; /* NIL pl nbr*/
      TSVREC.OP1CUOID = TS05W01.OP1CUOID[TS05WIXM]; /* cust order id*/
      TSVREC.OP1NORID = TS05W01.OP1NORID[TS05WIXM]; /* NIKE order id*/

      TS05S11(); /* select single row*/

      if (TSVREC.ZZZCHGCT == TS05W01.ZZZCHGCT[TS05WIXM]) /* no prev updates*/
        TSVREC.TSFSHPID = TS05M001.TS05MSHP; /* assoc ship id*/
        TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
        TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        TS05S12(); /* update tsvrec*/

        /* ------------------------------------------------------------*/
         /* Accumulate packing list totals.*/
        /* ------------------------------------------------------------*/

        TS05W00.TS05WSHQ = TS05W00.TS05WSHQ + TSVREC.TSISHPQT;
        TS05W00.TS05WLBS = TS05W00.TS05WLBS + TSVREC.TSVNPLLB;
        TS05W00.TS05WFT3 = TS05W00.TS05WFT3 + TSVREC.TSVNPLFT;

      else
                                   /* someone else got to this record first*/

        set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
        converseLib.validationFailed(12); /* updated by another, please retry*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
        TA1REC.TA1PGMNO = TSWREC.XXXMODID;
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "TS05161 ";
        TA1REC.TA1LOCAT[3] = "IO4700  ";
        TA1REC.TA1LOCAT[4] = "        ";
        TA1REC.TA1MAP = "TS05M001";
        TA1REC.TA1DBASE = "DTRANS  ";
        TA1REC.TA1TBLVU = "VNLPLO01";
        TAEREC.TAEDESC1 = "RECORD UPDATED BY ANOTHER APPL";
        TAEREC.TAEDESC2 = TSVREC.TSVKEY;

        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* roll back everything so far*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

        exit stack;

      end

    end

    TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;

  end

  if (converseVar.validationMsgNum == 0) /* no error so far*/

    TSUREC.TSUSHPQT = TSUREC.TSUSHPQT + TS05W00.TS05WSHQ;
                                   /* add tot shp qty*/
    TSUREC.TSUNSPLB = TSUREC.TSUNSPLB + TS05W00.TS05WLBS; /* add tot lbs*/
    TSUREC.TSUNSPFT = TSUREC.TSUNSPFT + TS05W00.TS05WFT3; /* add tot ft3*/
    TSUREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    TSUREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    TS05S13(); /* update tsurec*/

    if (SQLCA.VAGen_SQLCODE == +100) /* not found*/

      set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(12); /* updated by another, please retry*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
      TA1REC.TA1PGMNO = TSWREC.XXXMODID;
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "TS05161 ";
      TA1REC.TA1LOCAT[3] = "IO4690  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "TS05M001";
      TA1REC.TA1DBASE = "DTRANS  ";
      TA1REC.TA1TBLVU = "VNLSHP01";
      TAEREC.TAEDESC1 = "RECORD UPDATED BY ANOTHER APPL";
      TAEREC.TAEDESC2 = TSUREC.TSUKEY;

      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* roll back everything so far*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

      exit stack;

    end

  end


end // end TS05161

// Check any associated pack list
Function TS05162()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "162";

   /* ------------------------------------------------------------*/
   /* Build tsvrec key to select all packing lists associated*/
   /* with the selected packing list shipment id.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* init packing list record*/
  TSVREC.KUCCOID = TS05M001.KUCCOID; /* customer id*/
  TSVREC.TSFSHPID = TS05W01.TSFSHPID[TS05WIXM]; /* shipment id*/
  TSVREC.TSVPLNBR = -1; /* any NIL pl nbr*/
  TSVREC.NIAIVCDT = -1; /* any invoice date*/

   /* ------------------------------------------------------------*/
   /* Verify packing list ship id association*/
   /* ------------------------------------------------------------*/

  TS05S07(); /* select/open pack list cursor*/

  TS05W00.TS05WSWC = "N"; /* init cursor eof switch*/
  TS05W01.TS05WSWN = "N"; /* shipment invoiced switch*/
  TS05W00.TS05WIXS = 1; /* init select index*/

  while (TS05W00.TS05WSWC == "N") /* not end of cursor*/

    TS05S08(); /* fetch next associated pack list*/

    TS05W00.TS05WIXS = TS05W00.TS05WIXS + 1; /* increment index*/

  end

  TS05S09(); /* close pack list cursor*/

  if (TS05W01.TS05WSWN == "Y") /* shipment has been invoiced*/
    if (COMMAREA.CACLVL[1] == "Y") /* authorize to dis-assoc ivc'd p/l?*/
      set TSVREC empty; /* init packing list record*/
      TSVREC.TSFSHPID = TS05W01.TSFSHPID[TS05WIXM]; /* shipment id*/
      TSVREC.OP1CUOID = TS05W01.OP1CUOID[TS05WIXM]; /* order nbr*/
      TSVREC.OP1NORID = TS05W01.OP1NORID[TS05WIXM]; /* nike nbr*/
      TS05S20(); /* check if multiple pl for order*/
      if (SQLCA.VAGen_SQLCODE == -811)
        converseLib.validationFailed(385); /* multiple order, confirm pf13*/
      else
        converseLib.validationFailed(386); /* confirm pf13*/
      end
      TS05W00.TS05W-PF13-CNT = TS05W00.TS05W-PF13-CNT + 1;
      if (TS05W00.TS05W-PF13-CNT > 1)
        converseLib.validationFailed(0);
        TS05W00.TS05W-PF13-CNT = 0;
      else
        exit stack;
      end
    else
      converseLib.validationFailed(196); /* shipment invoiced*/
      set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* roll back everything so far*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If okay so far, retrieve selected packing list record; then*/
   /* if that is okay, retrieve the associated shipment record.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* init packing list record*/
   /* ------------------------------------------------------------*/
   /* Build tsvrec key.*/
   /* ------------------------------------------------------------*/

  TSVREC.TSVPLNBR = TS05W01.TSVPLNBR[TS05WIXM]; /* NIL pl nbr*/
  TSVREC.OP1CUOID = TS05W01.OP1CUOID[TS05WIXM]; /* cust order id*/
  TSVREC.OP1NORID = TS05W01.OP1NORID[TS05WIXM]; /* NIKE order id*/

  TS05S11(); /* select unique order row*/

  if (TSVREC.ZZZCHGCT == TS05W01.ZZZCHGCT[TS05WIXM]) /* no prev updates*/

    set TSUREC empty; /* init shipment record*/
    /* ------------------------------------------------------------*/
     /* Build tsurec key.*/
    /* ------------------------------------------------------------*/

    TSUREC.KUCCOID = TSVREC.KUCCOID; /* customer id*/
    TSUREC.TSFSHPID = TSVREC.TSFSHPID; /* associated shipment id*/

    TS05S14(); /* select unique shipment row*/

  else
                                   /* someone else got to this record first*/

    converseLib.validationFailed(12); /* updated by another, please retry*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "TS05";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "TS05162 ";
    TA1REC.TA1LOCAT[3] = "IO4700  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "TS05M001";
    TA1REC.TA1DBASE = "DTRANS  ";
    TA1REC.TA1TBLVU = "VNLPLO01";
    TAEREC.TAEDESC1 = "RECORD UPDATED BY ANOTHER APPL";
    TAEREC.TAEDESC2 = TSVREC.TSVKEY;

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back everything so far*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

    exit stack;
  end


end // end TS05162

// Disassociate with valid shpmnt
Function TS05163()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "163";

   /* ------------------------------------------------------------*/
    /* Disassociate with a shipment id.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* When disassociating packing lists from a shipment id:*/
   /*  */
   /* 1) the shipment record associated with the selected packing*/
   /* list may have been delete.  In this case update just the*/
   /* packing list with the current date and time, and zero*/
   /* in the shipment id.*/
   /* 2) if the shipment record associated with the selected*/
   /* packing list is present, update with the current date*/
   /* and time, and the packing list total quantity shipped,*/
   /* total cubit volume and total weight must be subtracted*/
   /* from the shipment total quantity, volume and weight.*/
   /* Also the packing list has to be updated same as #1.*/
   /* ------------------------------------------------------------*/

  if (VAGen_SQLCODE == 0) /* shipment not found, from select ts05s14*/
    TSUREC.TSUSHPQT = TSUREC.TSUSHPQT - TSVREC.TSISHPQT; /* sub tot shp qty*/
    TSUREC.TSUNSPLB = TSUREC.TSUNSPLB - TSVREC.TSVNPLLB; /* sub tot lbs*/
    TSUREC.TSUNSPFT = TSUREC.TSUNSPFT - TSVREC.TSVNPLFT; /* sub tot ft3*/

    TSUREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
    TSUREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

    TS05S13(); /* update tsurec*/

    if (SQLCA.VAGen_SQLCODE == +100) /* record not found*/
       /* someone else got to this record first*/

      set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(12); /* updated by another, please retry*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "TS05";
      TA1REC.TA1LOCAT[1] = "UPDATE  ";
      TA1REC.TA1LOCAT[2] = "TS05163 ";
      TA1REC.TA1LOCAT[3] = "IO4690  ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1MAP = "TS05M001";
      TA1REC.TA1DBASE = "DTRANS  ";
      TA1REC.TA1TBLVU = "VNLSHP01";
      TAEREC.TAEDESC1 = "RECORD UPDATED BY ANOTHER APPL";
      TAEREC.TAEDESC2 = TSUREC.TSUKEY;

      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* roll back everything so far*/
      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

      exit stack;
    end
  end

  TSVREC.TSFSHPID = 0; /* assoc ship id*/
  TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  TS05S12(); /* update tsvrec*/

  if (SQLCA.VAGen_SQLCODE == +100) /* record not found*/
     /* someone else got to this record first*/

    set TS05M001.TS05MSEL[TS05WIXM] cursor, bold; /* highlight*/
    converseLib.validationFailed(12); /* updated by another, please retry*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "TS05";
    TA1REC.TA1LOCAT[1] = "UPDATE  ";
    TA1REC.TA1LOCAT[2] = "TS05163 ";
    TA1REC.TA1LOCAT[3] = "IO4700  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "TS05M001";
    TA1REC.TA1DBASE = "DTRANS  ";
    TA1REC.TA1TBLVU = "VNLPLO01";
    TAEREC.TAEDESC1 = "RECORD UPDATED BY ANOTHER APPL";
    TAEREC.TAEDESC2 = TSVREC.TSVKEY;

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back everything so far*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/

    exit stack;
  end


end // end TS05163

// Format/submit a background job
Function TS05164()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS05W00.TS05W-NDX = 1; /* init ts05t01 index (in)*/
  TA6REC.TA6INDEX = 1; /* Initialize index (out)*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error*/
    exit stack;
  end
  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* PROD region*/
    TS05W00.TS05W-NDX = 1; /* Input table index*/
  else
    if ("/*EOF" in TS05T01.TARJCL) /* TEST region*/
      TS05W00.TS05W-NDX = sysVar.arrayIndex;
      TS05W00.TS05W-NDX = TS05W00.TS05W-NDX + 1; /* Input table index*/
    else
      TS05W00.TS05W-NDX = 1; /* Input table index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TS05W00.TS05W-NDX > 0) /* Until end of table*/

    if (TS05T01.TARTYPE[TS05W-NDX] == "1") /* Parameters statement*/
      TS05W00.TS05WIXM = 1;
      while (TS05W00.TS05WIXM <= 13)
        if (TS05M001.TS05MSEL[TS05WIXM] == "P"
         || TS05M001.TS05MSEL[TS05WIXM] == "B")
          TS05W00.TARJCL = " "; /* init param work area*/
          TS05W00.TS05W-FLD1 = TS05M001.TSVPLNBR[TS05WIXM]; /* p/l nbr*/
          TS05W00.TS05W-FLD2 = TS05M001.KUCCOID; /* cust nbr*/
          TA6REC.TARJCL[TA6INDEX] = TS05W00.TARJCL; /* Param*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
        end
        TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;
      end
    else
      if (TS05T01.TARTYPE[TS05W-NDX] == "2") /* Parameters statement*/
        TS05W00.TS05WIXM = 1;
        while (TS05W00.TS05WIXM <= 13)
          if (TS05M001.TS05MSEL[TS05WIXM] == "D"
           || TS05M001.TS05MSEL[TS05WIXM] == "B")
            TS05W00.TARJCL = " "; /* init parm work area*/
            TS05W00.TS05W-FLD1 = TS05M001.TSVPLNBR[TS05WIXM]; /* p/l*/
            TS05W00.TS05W-FLD2 = TS05M001.KUCCOID; /* cust nbr*/
            TA6REC.TARJCL[TA6INDEX] = TS05W00.TARJCL; /* Parm*/
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
          end
          TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1;
        end
      else
        if (TS05T01.TARTYPE[TS05W-NDX] == "H") /* dsnT/dsnD statement*/

          /* ------------------------------------------------------------*/
          /* Format dsnT/dsnD system statement.*/
          /* ------------------------------------------------------------*/

          set TARREC empty;

          TARREC.TARJCL = TS05T01.TARJCL[TS05W-NDX];

          if (TA3REC.TA3RGNID == "04"
           || TA3REC.TA3RGNID == "08")
            TARRECH.XXX-DSN-SYSTEM = "T"; /* dsnT region*/
          else
            TARRECH.XXX-DSN-SYSTEM = "D"; /* dsnD region*/
          end

          TA6REC.TARJCL[TA6INDEX] = TARREC.TARJCL;

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        else

          /* ------------------------------------------------------------*/
          /* Format the Job Control Language statement from the table.*/
          /* ------------------------------------------------------------*/

          TA6REC.TARJCL[TA6INDEX] = TS05T01.TARJCL[TS05W-NDX]; /* jcl*/
          TA6REC.TARTYPE[TA6INDEX] = TS05T01.TARTYPE[TS05W-NDX];
                                   /* type*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end
      end
    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS05T01.TARJCL[TS05W-NDX] == "/*EOF") /* End of table*/
      TS05W00.TS05W-NDX = 0; /* Indicate end of table*/
    else
      TS05W00.TS05W-NDX = TS05W00.TS05W-NDX + 1; /* Increment index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "164"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    converseLib.validationFailed(362); /* job submitted message*/
    TS05W00.TS05WSWF = "Y"; /* refresh and redisplay map*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS05164

// PF5 DELETE PACKING LIST
Function TS05165()
  TSWREC.XXXMODID = "165";

   /* DELETE PACKING LIST ORDER*/

  set TSVREC empty;
  TSVREC.TSVPLNBR = TS05W01.TSVPLNBR[TS05WIXM];
  TSVREC.OP1CUOID = TS05W01.OP1CUOID[TS05WIXM];
  TSVREC.OP1NORID = TS05W01.OP1NORID[TS05WIXM];
  TS05S16(); /* delete p/l order*/

   /* DELETE PACKING LIST CARTON(S)*/

  set TSYREC empty;
  set TS4REC empty;
  TSYREC.TSVPLNBR = TS05W01.TSVPLNBR[TS05WIXM];
  TSYREC.OP1CUOID = TS05W01.OP1CUOID[TS05WIXM];
  TSYREC.OP1NORID = TS05W01.OP1NORID[TS05WIXM];
  TS4REC.TS4TASK = "D2"; /* delete all crtn by pl,ord,nike*/
  TS05S18(); /* delete p/l carton(s)*/

   /* DELETE PACKING LIST STYLE(S)*/

  set TSZREC empty;
  set TS6REC empty;
  TSZREC.TSVPLNBR = TS05W01.TSVPLNBR[TS05WIXM];
  TSZREC.OP1CUOID = TS05W01.OP1CUOID[TS05WIXM];
  TSZREC.OP1NORID = TS05W01.OP1NORID[TS05WIXM];
  TS6REC.TS6TASK = "D2"; /* delete all sty by pl,ord,nike*/
  TS05S19(); /* delete p/l style(s)*/

   /* At this point, if p/l is assoc to shipment, it is the only*/
   /* p/l for this shipment.*/

  if (TS05W01.TSFSHPID[TS05WIXM] > 0) /* assoc to shipment*/
    set TSUREC empty;
    TSUREC.KUCCOID = TS05M001.KUCCOID;
    TSUREC.TSFSHPID = TS05W01.TSFSHPID[TS05WIXM];
    TS05S17(); /* delete shipment*/
  end
end // end TS05165

// PF6 UN-HIGHLIGHT P/L ERROR
Function TS05166()
  TSWREC.XXXMODID = "165";

  set TSVREC empty;

  TSVREC.TSVPLNBR = TS05W01.TSVPLNBR[TS05WIXM]; /* pl nbr*/
  TSVREC.OP1CUOID = TS05W01.OP1CUOID[TS05WIXM]; /* cust id*/
  TSVREC.OP1NORID = TS05W01.OP1NORID[TS05WIXM]; /* nike id*/

  TS05S11(); /* select unique row*/

  if (TSVREC.ZZZCHGCT == TS05W01.ZZZCHGCT[TS05WIXM]) /* no prev updt*/
    TSVREC.TS-NIL-PL-ERR-FL = "N";
    TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* curr date*/
    TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* curr time*/

    TS05S12(); /* update tsvrec*/

  else /* updated by another appl*/
    set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
    converseLib.validationFailed(12); /* updated by another appl*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
    TA1REC.TA1PGMNO = TSWREC.XXXMODID;
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "TS05166 ";
    TA1REC.TA1LOCAT[3] = "IO4700  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "TS05M001";
    TA1REC.TA1DBASE = "DTRANS  ";
    TA1REC.TA1TBLVU = "VNLPLO01";
    TAEREC.TAEDESC1 = "RECORD UPDATED BY ANOTHER APPL";
    TAEREC.TAEDESC2 = TSVREC.TSVKEY;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* err diag rtn*/
    exit stack;
  end

end // end TS05166

// Check p/l has not been updated
Function TS05167()
  TSWREC.XXXMODID = "167";

  set TSUREC empty;

  TSUREC.KUCCOID = TS05M001.KUCCOID; /* cust id*/
  TSUREC.TSFSHPID = TS05M001.TSFSHPID[TS05WIXM]; /* ship id*/

  TS05S21();

  if (SQLCA.VAGen_SQLCODE == 0) /* assoc header found*/
    TS05168(); /* update tsurec (lock/unlock)*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found to update*/
      converseLib.validationFailed(389);
      set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
      exit stack;
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found to update*/
      converseLib.validationFailed(388);
      set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
      exit stack;
    end
  end

end // end TS05167

// Check p/l has not been updated
Function TS05168()
  TSWREC.XXXMODID = "168";

  set TSVREC empty;

  TSVREC.TSVPLNBR = TS05W01.TSVPLNBR[TS05WIXM]; /* pl nbr*/
  TSVREC.OP1CUOID = TS05W01.OP1CUOID[TS05WIXM]; /* cust id*/
  TSVREC.OP1NORID = TS05W01.OP1NORID[TS05WIXM]; /* nike id*/

  TS05S11(); /* select unique row*/

  if (TSVREC.ZZZCHGCT == TS05W01.ZZZCHGCT[TS05WIXM]) /* no prev updt*/
    if (TSVREC.PK2SCHNO == 0
     || TSVREC.PK2SCHNO == 1)
      TSVREC.TS-NIL-PL-ERR-FL = "N";
      TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* curr date*/
      TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* curr time*/
      TSVREC.PK2SCHNO = TS05W00.TS05W-PK-SCHED-NBR;
                                         /* pick sched nbr*/
      TS05S22(); /* update tsvrec*/

    else
      set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
      converseLib.validationFailed(391); /* Shipment already balanced*/
      exit stack;
    end

  else /* updated by another appl*/
    set TS05M001.TS05MSEL[TS05WIXM] cursor, bold;
    converseLib.validationFailed(12); /* updated by another appl*/
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
    TA1REC.TA1PGMNO = TSWREC.XXXMODID;
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "TS05168 ";
    TA1REC.TA1LOCAT[3] = "IO4700  ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1MAP = "TS05M001";
    TA1REC.TA1DBASE = "DTRANS  ";
    TA1REC.TA1TBLVU = "VNLPLO01";
    TAEREC.TAEDESC1 = "RECORD UPDATED BY ANOTHER APPL";
    TAEREC.TAEDESC2 = TSVREC.TSVKEY;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* roll back*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* err diag rtn*/
    exit stack;
  end

end // end TS05168

// Count cartons for a plan nbr
Function TS05S01()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S01";

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TS4REC empty; /* Clear parm record area*/
  set TSYREC empty; /* Clear row storage area*/

  TSYREC.TSVPLNBR = TSVREC.TSVPLNBR; /* NIL plan nbr*/
  TSYREC.OP1CUOID = TSVREC.OP1CUOID; /* Cust order number*/
  TSYREC.OP1NORID = TSVREC.OP1NORID; /* NIKE order number*/
  TS4REC.TS4TASK = "SC"; /* select count*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TS4REC.TS4FUNCT = 0; /* count of cartons*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S01

// Save data in display storage
Function TS05S02()
   /* ------------------------------------------------------------*/
   /* If the first line on a page, save the heading information.*/
   /* ------------------------------------------------------------*/

  if (TS05W00.TS05WIXM == 1) /* First line on page*/

    if (TS05W00.TS05WSWS == "S" /* select by cust id and ship id*/
     || TS05W00.TS05WSWS == "C") /* select by customer id*/
      TS05W01.KUCCOID = TS05M001.KUCCOID; /* company*/
      TS05W01.TS05MCID = 0;
      TS05W01.TS05MNID = 0;
    else
      if (TS05W00.TS05WSWS == "O") /* select by order number*/
        TS05W01.TS05MCID = TS05M001.TS05MCID; /* Cust order nbr*/
        TS05W01.TS05MNID = TS05M001.TS05MNID; /* NIKE order nbr*/
        TS05W01.KUCCOID = TSVREC.KUCCOID; /* company*/
        TS05W01.TS05W-TSVPLNBR = 0;
      else
        TS05W01.TS05W-TSVPLNBR = TS05M001.TS05M-TSVPLNBR; /* pl*/
        TS05W01.KUCCOID = TSVREC.KUCCOID; /* company*/
        TS05W01.TS05MCID = TSVREC.OP1CUOID; /* cust ord*/
        TS05W01.TS05MNID = TSVREC.OP1NORID; /* nike ord*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  TS05W00.TS05WCNT = TS05W00.TS05WCNT + 1; /* count how many PLs found*/

  if (TSVREC.TS-NIL-STAT == "C")
    TS05W01.TS-NIL-STAT[TS05WIXM] = TSVREC.TS-NIL-STAT;
  else
    TS05W01.TS-NIL-STAT[TS05WIXM] = " ";
  end

  TS05W01.TS-NIL-PL-ERR-FL[TS05WIXM] = TSVREC.TS-NIL-PL-ERR-FL;
  TS05W01.TS-NIL-PL-BLD-IND[TS05WIXM] = TSVREC.TS-NIL-PL-BLD-IND;

  TS05W01.TSVPLNBR[TS05WIXM] = TSVREC.TSVPLNBR; /* NIL plan nbr*/
  TS05W01.TSFSHPID[TS05WIXM] = TSVREC.TSFSHPID; /* shipment id*/
  TS05W01.XWHCD[TS05WIXM] = TSVREC.XWHCD; /* warehouse code*/
  TS05W01.SR1PKDT[TS05WIXM] = TSVREC.SR1PKDT; /* pick sched date*/
  TS05W01.NIAIVCDT[TS05WIXM] = TSVREC.NIAIVCDT; /* invoice date*/
  if (TSVREC.NIAIVCDT > 0)
    TS05W01.TS05WSWI[TS05WIXM] = "N"; /* allow inquiry only*/
  else
    TS05W01.TS05WSWI[TS05WIXM] = "Y"; /* allow update/inquiry*/
  end
  TS05W01.OP1CUOID[TS05WIXM] = TSVREC.OP1CUOID; /* cust order nbr*/
  TS05W01.OP1NORID[TS05WIXM] = TSVREC.OP1NORID; /* NIKE order nbr*/
  TS05W01.XDSCD[TS05WIXM] = TSVREC.XDSCD; /* ship code*/
  TS05W01.TSISHPQT[TS05WIXM] = TSVREC.TSISHPQT; /* total weight*/
  TS05W01.TSVNPLLB[TS05WIXM] = TSVREC.TSVNPLLB; /* total weight*/
  TS05W01.TSVNPLFT[TS05WIXM] = TSVREC.TSVNPLFT; /* total volume*/
  TS05W01.TS05WCTN[TS05WIXM] = TS4REC.TS4FUNCT; /* calc nbr cartons*/
  TS05W01.ZZZCHGCT[TS05WIXM] = TSVREC.ZZZCHGCT; /* rec change count*/

  TS05W00.TS05WIXM = TS05W00.TS05WIXM + 1; /* Increment line index*/


end // end TS05S02

// Update temporary storage page
Function TS05S04()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S04";

   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS05W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S04

// Read temporary storage page
Function TS05S05()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S05";

   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS05W01.XXXTSLEN = TS05W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = TS05W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS05W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S05

// Select valid shipment id
Function TS05S06()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S06";

   /* ------------------------------------------------------------*/
   /* Select valid shipment id.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* select single row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      converseLib.validationFailed(244); /* match not made*/
      set TS05M001.TS05MSHP cursor, bold; /* highlight error*/
      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/


  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(10); /* system error*/
    converseLib.clearScreen();
     /* clear screen before display*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S06

// Select/open cursor for ship pl
Function TS05S07()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S07";

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S07

// Fetch next assocd packing list
Function TS05S08()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S08";

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      if (TSVREC.NIAIVCDT > 0) /* this record has been invoiced*/

        TS05W01.TS05WSWN = "Y"; /* shipment has invoiced PLs*/
        TS05W00.TS05WSWC = "Y"; /* eof*/

      end

      return;

    else
      /* ------------------------------------------------------------*/
       /* If end of selected set, indicate end of cursor.*/
      /* ------------------------------------------------------------*/

      if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

        TS05W00.TS05WSWC = "Y"; /* Indicate end of cursor*/

        return; /* Return to previous process*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S08

// Close packing list cursor
Function TS05S09()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S09";

   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4700" ("C1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S09

// Select one packing list row
Function TS05S11()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S11";

   /* ------------------------------------------------------------*/
   /* Select unique packing list*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* select single row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/


  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(10); /* system error*/
    converseLib.clearScreen();
     /* clear screen before display*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOCAT[1] = "SELECT  ";
  TA1REC.TA1LOCAT[2] = "IO4700  ";
  TA1REC.TA1LOCAT[3] = "TS05S12 ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S11

// Update packing list
Function TS05S12()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S12";

   /* ------------------------------------------------------------*/
   /* Update packing list*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* select single row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/


  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    if (sysVar.errorCode == "00000000" /* call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/

      converseLib.validationFailed(12); /* updated by someone else, retry*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/

    else

      converseLib.validationFailed(10); /* system error*/
      converseLib.clearScreen();
       /* clear screen before display*/
      TA1REC.TA1FUNC = "POST"; /* termination function*/

    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOCAT[1] = "UPDATE";
  TA1REC.TA1LOCAT[2] = "IO4700";
  TA1REC.TA1LOCAT[3] = "TS05S12";
  TA1REC.TA1LOCAT[4] = "      ";
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S12

// update shipping
Function TS05S13()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S13";

   /* ------------------------------------------------------------*/
   /* Update shipment id.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4690" ("U ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* select single row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == +100) /* not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/


  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(10); /* system error*/
    converseLib.clearScreen();
     /* clear screen before display*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOCAT[1] = "UPDATE";
  TA1REC.TA1LOCAT[2] = "IO4690";
  TA1REC.TA1LOCAT[3] = "TS05S13";
  TA1REC.TA1LOCAT[4] = "      ";
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S13

// Select one shipment row
Function TS05S14()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S14";

   /* ------------------------------------------------------------*/
   /* Select unique packing list*/
   /* ------------------------------------------------------------*/


  try
    call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* select single row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/

   /* If not found, this is ok also because logic added not to*/
   /* update this row futher down.  This allows disassociation*/
   /* of a ship id from P/L when shipment has been deleted.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* not found*/

      return;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/


  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(10); /* system error*/
    converseLib.clearScreen();
     /* clear screen before display*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOCAT[1] = "SELECT  ";
  TA1REC.TA1LOCAT[2] = "IO4690  ";
  TA1REC.TA1LOCAT[3] = "TS05S14 ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1PGMAP = "TS05M001"; /* Program application*/
  TA1REC.TA1PGMNO = "TS05"; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S14

// SELECT PACKING LIST BY SHIP ID
Function TS05S15()
  TSWREC.XXXMODID = "S15";

  set TSVREC empty;
  TSVREC.TSFSHPID = TS05M001.TSFSHPID[TS05WIXM]; /* ship id*/

  try
    call "IO4700" ("SS", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0   /* one row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* more than one row found*/
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(10); /* system error*/
    converseLib.clearScreen();
     /* clear screen b4 display*/
    TA1REC.TA1FUNC = "POST";
  end

  TA1REC.TA1TYPE = "DB2"; /* type of err*/
  TA1REC.TA1LOCAT[1] = "SELECT";
  TA1REC.TA1LOCAT[2] = "IO4700";
  TA1REC.TA1LOCAT[3] = "TS05S15";
  TA1REC.TA1LOCAT[4] = "       ";
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* pgm appl*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* pgm nbr*/
  TA1REC.TA1DBASE = "DTRANS  "; /* database*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* view*/
  TA1REC.TA1TBLKE = TSVREC.TSVGROUP; /* key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* err diag routine*/

  exit stack; /* exit to display map*/

end // end TS05S15

// DELETE UNIQUE PACKING LIST
Function TS05S16()
  TSWREC.XXXMODID = "S16";

  try
    call "IO4700" ("D ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000") /* call successful*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
      converseLib.validationFailed(11); /* indicate not available*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(12); /* updted by someone else*/
      else
        converseLib.validationFailed(10); /* system error*/
        converseLib.clearScreen();
         /* clear screen b4 display*/
      end
    end
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOCAT[1] = "DELETE  ";
  TA1REC.TA1LOCAT[2] = "IO4700  ";
  TA1REC.TA1LOCAT[3] = "TS05S16 ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLPLO01";
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  exit stack;

end // end TS05S16

// DELETE UNIQUE SHIPMENT HEADER
Function TS05S17()
  TSWREC.XXXMODID = "S17";

  try
    call "IO4690" ("D ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000") /* call successful*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
      converseLib.validationFailed(11); /* indicate not available*/
    else
      converseLib.validationFailed(10); /* system error*/
      converseLib.clearScreen();
       /* clear screen b4 display*/
    end
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOCAT[1] = "DELETE  ";
  TA1REC.TA1LOCAT[2] = "IO4690  ";
  TA1REC.TA1LOCAT[3] = "TS05S17 ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLSHP01";
  TA1REC.TA1TBLKE = TSUREC.TSUKEY;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  exit stack;

end // end TS05S17

Function TS05S18()
  TSWREC.XXXMODID = "S18";

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000") /* call successful*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
      converseLib.validationFailed(11); /* indicate not available*/
    else
      converseLib.validationFailed(10); /* system error*/
      converseLib.clearScreen();
       /* clear screen b4 display*/
    end
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOCAT[1] = "DELETE  ";
  TA1REC.TA1LOCAT[2] = "IO4700  ";
  TA1REC.TA1LOCAT[3] = "TS05S16 ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLPLO01";
  TA1REC.TA1TBLKE = TSYREC.TSYKEY;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  exit stack;

end // end TS05S18

Function TS05S19()
  TSWREC.XXXMODID = "S19";

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000") /* call successful*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    if (SQLCA.VAGen_SQLCODE == -911) /* resource not available*/
      converseLib.validationFailed(11); /* indicate not available*/
    else
      converseLib.validationFailed(10); /* system error*/
      converseLib.clearScreen();
       /* clear screen b4 display*/
    end
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOCAT[1] = "DELETE  ";
  TA1REC.TA1LOCAT[2] = "IO4700  ";
  TA1REC.TA1LOCAT[3] = "TS05S16 ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLPLO01";
  TA1REC.TA1TBLKE = TSZREC.TSZKEY;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  exit stack;

end // end TS05S19

Function TS05S20()
  TSWREC.XXXMODID = "S20";

  try
    call "IO4700" ("SX", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* one row found*/
     || SQLCA.VAGen_SQLCODE == -811) /* move than one row found*/
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* temination function*/
  else
    converseLib.validationFailed(10); /* system error*/
    converseLib.clearScreen();
     /* clear screen b4 redisplay*/
    TA1REC.TA1FUNC = "POST"; /* terminate function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* type of error*/
  TA1REC.TA1LOCAT[1] = "SELECT  ";
  TA1REC.TA1LOCAT[2] = "IO4700  ";
  TA1REC.TA1LOCAT[3] = "TS05S20 ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* program number*/
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1DBASE = "DTRANS  "; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis rtn*/

  exit stack;

end // end TS05S20

// Select one p/l header row
Function TS05S21()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/
  TSWREC.XXXMODID = "S21";


   /* ------------------------------------------------------------*/
   /* Select associated packing list header*/
   /* ------------------------------------------------------------*/
  try
    call "IO4690" ("SA", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end /* select single row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100)
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/


  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(10); /* system error*/
    converseLib.clearScreen();
     /* clear screen before display*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOCAT[1] = "SELECT  ";
  TA1REC.TA1LOCAT[2] = "IO4690  ";
  TA1REC.TA1LOCAT[3] = "TS05S21 ";
  TA1REC.TA1LOCAT[4] = "        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLSHP01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSUREC.TSUKEY; /* Table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S21

// Update packing list
Function TS05S22()
   /* ------------------------------------------------------------*/
   /* Module identification.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "S22";

   /* ------------------------------------------------------------*/
   /* Update packing list*/
   /* ------------------------------------------------------------*/


  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* select single row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/


  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(10); /* system error*/
    converseLib.clearScreen();
    
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOCAT[1] = "UPDATE";
  TA1REC.TA1LOCAT[2] = "IO4700";
  TA1REC.TA1LOCAT[3] = "TS05S22";
  TA1REC.TA1LOCAT[4] = "      ";
  TA1REC.TA1MAP = "TS05M001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* roll back any updates*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS05S22

//*** RECORD=TS05W00 ****
// ------------------------------------------------------------
// Application working storage for counters, switches, misc.
// ------------------------------------------------------------
// 
//   DATE       NAME     DESCRIPTION OF CHANGE
// --------    ------    --------------------------------------
// 10/19/89    MCHOW     New record
// 10/24/89    MCHOW     Deleted unused items
// 08/05/92    DCHIAN    Add new items for print request.
// ***********************
Record TS05W00 type basicRecord
  5 TS05WGRP TS05WGRP ; 
    10 TS05WFRM TS05WFRM ; 
    10 TS05WERR TS05WERR ; 
    10 TS05WIXM TS05WIXM ; 
    10 TS05WIXS TS05WIXS ; 
    10 TS05WCNT TS05WCNT ; 
    10 * int ; 
    10 * int ; 
    10 TS05WSHQ TS05WSHQ ; 
    10 TS05WLBS TS05WLBS ; 
    10 TS05WFT3 TS05WFT3 ; 
    10 TS05WSWC TS05WSWC ; 
    10 TS05WSWF TS05WSWF ; 
    10 TS05WSWR TS05WSWR ; 
    10 TS05WSWS TS05WSWS ; 
    10 TS05WSWU TS05WSWU ; 
    10 TS05WSW1 TS05WSW1 ; 
    10 TS05WSDT TS05WSDT ; 
      15 TS05WSCC TS05WSCC ; 
      15 TS05WSYY TS05WSYY ; 
      15 TS05WSMM TS05WSMM ; 
      15 TS05WSDD TS05WSDD ; 
    10 TS05WPDT TS05WPDT ; 
      15 TS05WPMM TS05WPMM ; 
      15 TS05WPDD TS05WPDD ; 
      15 TS05WPYY TS05WPYY ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 TS05WIPF TS05WIPF ; 
    10 TS05WHIF TS05WHIF ; 
    10 TS05W-NDX TS05W-NDX ; 
    10 TARJCL TARJCL ; 
      15 TS05W-FLD1 TS05W-FLD1 ; 
      15 * char(1) ; // Filler
      15 TS05W-FLD2 TS05W-FLD2 ; 
      15 * char(61) ; // Filler
    10 TS05W-SEL-CNT TS05W-SEL-CNT ; 
    10 TS05W-PF5-CNT TS05W-PF5-CNT ; 
    10 TS05W-PF13-CNT TS05W-PF13-CNT ; 
    10 TS05W-PK-SCHED-NBR TS05W-PK-SCHED-NBR ; 
end // end TS05W00

//*** RECORD=TS05W01 ****
// ------------------------------------------------------------
// Map 001 display storage.
// ------------------------------------------------------------
// 
//   DATE       NAME     DESCRIPTION OF CHANGE
// --------    ------    --------------------------------------
// 10/19/89    MCHOW     New record.
// 07/14/92    DCHIAN    Add selection field tsvplnbr.
// 08/17/92    DCHIAN    Change internal table occurrence to 13
// ***********************
Record TS05W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(654) ; 
    10 KUCCOID KUCCOID ; 
    10 TS05MCID TS05MCID ; 
    10 TS05MNID TS05MNID ; 
    10 TS05MSHP TS05MSHP ; 
    10 TS05W-TSVPLNBR TS05W-TSVPLNBR ; 
    10 TS05WSWA TS05WSWA ; 
    10 TS05WSWN TS05WSWN ; 
    10 TS05WPOS TS05WPOS ; 
    10 TS05WSEL TS05WSEL [13] ; 
    10 TS-NIL-PL-ERR-FL TS-NIL-PL-ERR-FL [13] ; 
    10 TS-NIL-PL-BLD-IND TS-NIL-PL-BLD-IND [13] ; 
    10 TS-NIL-STAT TS-NIL-STAT [13] ; 
    10 TS05WSWI TS05WSWI [13] ; 
    10 TSVPLNBR TSVPLNBR [13] ; 
    10 TSFSHPID TSFSHPID [13] ; 
    10 XWHCD XWHCD [13] ; 
    10 SR1PKDT SR1PKDT [13] ; 
    10 NIAIVCDT NIAIVCDT [13] ; 
    10 OP1CUOID OP1CUOID [13] ; 
    10 OP1NORID OP1NORID [13] ; 
    10 TS05WCTN TS05WCTN [13] ; 
    10 XDSCD XDSCD [13] ; 
    10 TSISHPQT TSISHPQT [13] ; 
    10 TSVNPLLB TSVNPLLB [13] ; 
    10 TSVNPLFT TSVNPLFT [13] ; 
    10 ZZZCHGCT ZZZCHGCT [13] ; 
end // end TS05W01

// op-cust-ord-id
DataItem TS05MCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem TS05MNID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// assoc ship id
DataItem TS05MSHP num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Numeric tsvplnbr
DataItem TS05W-FLD1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Numeric kuccoid
DataItem TS05W-FLD2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index used for ts05t01
DataItem TS05W-NDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS05W-PF13-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS05W-PF5-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold 1 or -1 (if pf9 or pf10)
DataItem TS05W-PK-SCHED-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS05W-SEL-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS05W-TSVPLNBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// counter for packing lists
DataItem TS05WCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// calc nbr crtns
DataItem TS05WCTN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// error switch
DataItem TS05WERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from appl
DataItem TS05WFRM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ts-nil-pl-ft3 accumulator
DataItem TS05WFT3 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// group level
DataItem TS05WGRP char(156)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold ivc'd packing list flag
DataItem TS05WHIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoiced packing list flag
DataItem TS05WIPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS05WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for select returns
DataItem TS05WIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ts-nil-pl-lbs accumulator
DataItem TS05WLBS decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Pick Sched Date disp day
DataItem TS05WPDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pick Sched Date display area
DataItem TS05WPDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pick Sched Date disp month
DataItem TS05WPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select position
DataItem TS05WPOS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pick Sched Date disp year
DataItem TS05WPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pick Sched Date work century
DataItem TS05WSCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pick Sched Date work day1
DataItem TS05WSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pick Sched Date work area1
DataItem TS05WSDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line selection indicator
DataItem TS05WSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pl-qtot-shp accumulator
DataItem TS05WSHQ decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Pick Sched Date work month1
DataItem TS05WSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First time, no input data sw
DataItem TS05WSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// assoc/disassoc switch
DataItem TS05WSWA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS05WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem TS05WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// this pack list invoiced switch
DataItem TS05WSWI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shipmnt invoiced switch
DataItem TS05WSWN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS05WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select switch (c,o,blank)
DataItem TS05WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem TS05WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pick Sched Date work year1
DataItem TS05WSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

