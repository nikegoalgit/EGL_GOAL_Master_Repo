package ts08;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pv.common.*;
import sm.common.*;
import sp.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS08 ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (ts08TTYP).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// ts08TTYP        JCL statement        Variable        Columns
// --------        -------------        --------        -------
//    E                EXEC             ts08WEXE         16-21
//    G            GDG parameter        ts08MGEN         21-22
//    J                JOB              ts08WUID          5-10
//    N  (Test only)  NOTIFY            ts08WUID         23-28
//    O               OUTPUT            ts08MRMT         32-36
//                    "    "            ts08MCPY           45
//    P             Parameters          ts08WJCL          1-80
//    R            RUN parameter        ts08WRUN         21-24
//    W            WHSE parameter       XWHCD            22-23
// 
// The data in working storage (ts08W01) is substituted and the
// statement is written to the internal reader.
// 
// The user may exit to any allowed application, via PF key,
// from the menu, only.
// 
// CONTROL    DATE    NAME  DESCRIPTION OF CHANGE
// -------  -------- ------ -----------------------------------
//          10/07/89 mwalto New application.
//          11/15/89 mwalto Check for ord status code (TS08S13)
//          02/16/90 jjohns Comment out edits in TS08S12)
// ts#000   10/08/90 cepple XROTBL delimeter check changed from
//                          '99' to '9999'.
//          12/04/90 jlucas chge printer screen to call TA0P.
// TS#0     11/06/91 rvakel Regenned for table changes.
// TS#0     10/14/92 dchian Regenned for table changes.
// 1H0002   07/19/93 SMACMI changed hard-coded div-cd '02'
//                          in TS08S13 to call IN8000 and check
//                          the returned 'xdv-nil-process-fl'
//                          instead
// TS#0     10/06/93 HKEMPE Changed to follow Nike's standard
//                          way of submitting job online -
//                          TS08001, TS08002, TS08010, TS08025,
//                          TS08035, TS08991, TS08995, TS08T02,
//                          TS08T03, TS08W02, TS08W03, TA3REC,
//                          TARREC/TARRECH, XSTAS-CICS-REG-ID.
// TS#0     01/18/94 HKEMPE Changed to allow for a nine digit
//                          order nbr - TS08M003.
// TS8901   03/04/94 HKEMPE Generate/Compile to pick up revised
//                          COMMAREA, TSWREC, OP1REC, & XWHTBL.
// TS1631   05/29/98 bchell Use theater of opeartion routine
//                          refer ( TS08-CICS-REG-ID,
//                          TS08010, TS08025, Ts08035 procs )
// TS0000   06/01/98 rkalla fix cics-reg-id production problem.
// DLVRUSA  04/09/01 SBHARA MODIFIED FOR USA NSC-GO LIVE
//                          TO BUILD THE PACKLIST FOR US NIL
//                          ORDERS.  This change is now for
//                          whse 22 (Airborne Sample) only.
// *********************
Program TS08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  INRREC INRREC; // record
  INRREC06 INRREC06 { redefines = INRREC } ; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  TARRECH TARRECH { redefines = TARREC } ; // record
  TS08W00 TS08W00; // record
  TS08W01 TS08W01; // record
  TS08W02 TS08W02; // record
  TS08W03 TS08W03; // record
  TSVREC TSVREC; // record
  TSWREC TSWREC; // record
  UT1REC UT1REC; // record
  UT2REC UT2REC; // record
  XCTHREC XCTHREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TS08T02; // table
  use TS08T03; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use TS08M.TA0PM001,  // forms
      TS08M.TS08M002, 
      TS08M.TS08M003, 
      TS08M.TS08M099
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    TS08001: TS08001();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Transportation Report Request process.*/
     /* ------------------------------------------------------------*/

    goto TS08002; /* transportation Report Request*/


    TS08002: TS08002();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Transportation Report Request process.*/
     /* ------------------------------------------------------------*/

    goto TS08002; /* Transportation Report Request*/


  end // end main
end // end TS08

// process valid input request
Function TS08-CICS-REG-ID()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error encountered with print request*/
    exit stack;
  end


  return;
                                        /* retn to performing process*/
end // end TS08-CICS-REG-ID

// Report Requests initialization
Function TS08001()
   /* ------------------------------------------------------------*/
   /* Perform transportation application initialization.*/
   /* Obtain the CICS Logon User Identification.*/
   /* Initialize the application working storage.*/
   /* Search the Remote Printer Destination Table (XROTBL) to*/
   /* determine the default remote printer destination.*/
   /* Initialize the selection line index limit.*/
   /* ------------------------------------------------------------*/

  XSENTRY(); /* Application entry validation*/

  XSSEGTR(); /* set segmented transaction id*/

  if (COMMAREA.CAFROMAP != COMMAREA.CACURRAP) /* Application has changed*/
    if (COMMAREA.CAFRMSYS == "TS") /* Came from within the transport.*/
                                   /* system*/
      TSWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/
    else
      set TSWREC empty; /* Clear work record area*/
    end
    COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
                                   /* Save current application*/
    VGVar.handleHardIOErrors = 1; /* Return all file errors*/
    converseVar.commitOnConverse = 1; /* Commit on every converse*/
  end


  set TS08W01 empty; /* Initialize working storage*/
  set TA0PM001 initial; /* Initialize map output area*/
  set TS08M002 initial; /* Initialize map output area*/
  set TS08M003 initial; /* Initialize map output area*/
  set TS08M099 initial; /* Initialize map output area*/

  set TA6REC empty; /* Print subroutine parameters*/

  TA6REC.TA6SUBSW = "I"; /* Indicate obtain information*/

  TS08W01.TS08WIXL = 3; /* Number of menu selection lines*/


end // end TS08001

// TRANSPORTATION REPORT REQUESTS
Function TS08002()
   /* ------------------------------------------------------------*/
   /* Invoke the process for each selection entered on the menu.*/
   /* After all selections are processed, display the menu.*/
   /* ------------------------------------------------------------*/

  if (TS08W01.TS08MSEL[1] == "S" /* Line 1 was selected*/
   || TA6REC.TA6SUBSW == "I")    /* or information requested*/
    TS08010(); /* Specify/Override Default Printer*/
  end


  if (TS08W01.TS08MSEL[2] == "S" /* Line 2 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    TS08020(); /* Print packing list by customer*/
  end


  if (TS08W01.TS08MSEL[3] == "S" /* Line 3 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    TS08030(); /* build packing list from order*/
  end

  TS08990(); /* Transportation Report Request Menu*/


end // end TS08002

// Specify/Override Printer
Function TS08010()
   /* -----------------------------------------------------------*/
   /* Determine which CICS region this application is executing in.*/
   /* -----------------------------------------------------------*/

   /* XSTAS-CICS-REG-ID;               /* Find CICS region*/
  TS08-CICS-REG-ID(); /* Find CICS region*/

  if (COMMAREA.CAMSG != " ") /* If an error occurred*/
    converseLib.validationFailed(10);
  end

   /* -----------------------------------------------------------*/
   /* Obtain and/or display the routing information for the user.*/
   /* -----------------------------------------------------------*/

  XPTA0P(); /* Report distribution information*/

   /* -----------------------------------------------------------*/
   /* If first time through, indicate information was obtained.*/
   /* -----------------------------------------------------------*/

  if (TA6REC.TA6SUBSW == "I") /* Obtain report distribution*/

    TA6REC.TA6SUBSW = "N"; /* Indicate information obtained*/

    return; /* Return to previous process*/

  end

   /* -----------------------------------------------------------*/
   /* If successful, indicate the selected function is completed.*/
   /* -----------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    TS08W01.TS08MSEL[1] = "*"; /* Indicate function compledted*/

    TS08W01.TS08WCPY = TA6REC.XURCOPY; /* # of copies*/
    TS08W01.TS08MRMT = TA6REC.XURDEST; /* Destination*/
    TS08W01.TS08MDES = TA6REC.XRODESC; /* Printer Description*/

    return;

  end

   /* -----------------------------------------------------------*/
   /* If user cancelled request, indicate user cancelled.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* -----------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "1")        /* and user cancelled request*/

    TS08W01.TS08MSEL[1] = "C"; /* Indicate function cancelled*/

    /* -----------------------------------------------------------*/
     /* If missing distribution information, indicate that exit was*/
     /* requested.  Otherwise, return to continue processing.*/
    /* -----------------------------------------------------------*/

    if (TA6REC.XURDEST == " "  /* No print destination*/
     || TA6REC.XURUSRNM == " " /* or report recipient*/
     || TA6REC.XURBLDID == " ") /* or NIKE building*/

      TS08W01.TS08WSWX = "Y"; /* Indicate exit requested*/

    else

      return; /* Return to previous process.*/

    end

  else

    TS08M002.XXXPRCNM = "TS08M010"; /* Module identification*/
    TS08M003.XXXPRCNM = "TS08M010"; /* Module identification*/
    TS08M099.XXXPRCNM = "TS08M010"; /* Module identification*/
    converseLib.validationFailed(10); /* indicate system error*/

  end


end // end TS08010

// PRINT PACKING LISTS
Function TS08020()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TS08021(); /* Format and display the map*/

  TS08022(); /* Check attention identifier*/

  TS08023(); /* Reset fields to normal intensity*/

  TS08024(); /* Verify the entered data*/

  TS08025(); /* Process valid input request*/


end // end TS08020

// Format and display the map
Function TS08021()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    TS08M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TS08M002.XURDEST = TS08W01.TS08MRMT; /* Printer*/
    TS08M002.XRODESC = TS08W01.TS08MDES; /* Description*/
    TS08M002.XURCOPY = TS08W01.TS08WCPY; /* # of copies*/

    if (TS08W01.TS08WMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TS08W01.TS08WMNO);
    end /* Job submitted message number*/
    TS08W01.TS08WMNO = 0; /* Reset message number*/

    if (TS08M002.XURCOPY == 0)
      TS08M002.XURCOPY = 1;
    end

  else

    set TS08M002 alarm; /* Indicate sound alarm*/

  end

  converse TS08M002 ;


end // end TS08021

// Check attention identifier
Function TS08022()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS08W01.TS08MSEL[2] = "C"; /* Indicate selection cancelled*/

    set TS08M002 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(04); /* Indicate invalid attention key*/
    TS08M002.XXXPRCNM = "TS08022"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TS08022

// Reset highlighted fields
Function TS08023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  TS08W01.TS08WIXM = 1; /* Initialize map index*/

  while (TS08W01.TS08WIXM <= 20) /* Until all are reset*/

    set TS08M002.TSVPLNBR[TS08WIXM] initialAttributes; /* packing list number*/
    set TS08M002.KUCCOID[TS08WIXM] initialAttributes; /* customer number*/

    TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment index*/

  end


end // end TS08023

// Verify the entered data
Function TS08024()
   /* ------------------------------------------------------------*/
   /* Ensure that at least one line was entered.*/
   /* Verify the bill of lading selection list.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS08M002.XURCOPY == 0) /* number of copies invalid*/
    set TS08M002.XURCOPY cursor, modified, bold;
    converseLib.validationFailed(16); /* invalid number of copies*/
    TS08M002.XXXPRCNM = "TS08024"; /* process name*/
    exit stack; /* Exit to redisplay map*/
  end

  TS08W01.TS08WSWL = "N"; /* Initialize line switch*/

  TS08W01.TS08WIXM = 1; /* Initialize map index*/

  while (TS08W01.TS08WIXM <= 20 /* Until all p/l# & cust# are searched*/
   && TS08W01.TS08WSWL == "N") /* or an entered line is found*/

    if (TS08M002.TSVPLNBR[TS08WIXM] != 0 /* p/l#  was entered*/
     || TS08M002.KUCCOID[TS08WIXM] != 0) /* cust# was entered*/

      TS08W01.TS08WSWL = "Y"; /* Indicate line was entered*/

    end

    TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment index*/

  end

  if (TS08W01.TS08WSWL == "N") /* No line was entered*/

    set TS08M002.TSVPLNBR[1] cursor, modified, bold;
    set TS08M002.KUCCOID[1] modified, bold;
    converseLib.validationFailed(226); /* P/L or CUSTOMER nbr missing*/
    TS08M002.XXXPRCNM = "TS08024"; /* Process name*/

  else

    TS08W01.TS08WIXM = 20; /* check data on map from bottom up*/

    while (TS08W01.TS08WIXM > 0) /* Until all lines verified*/

      if (TS08M002.TSVPLNBR[TS08WIXM] != 0 /* p/l#  was entered*/
       || TS08M002.KUCCOID[TS08WIXM] != 0) /* cust# was entered*/

        TS08S12(); /* Verify p/l no. & cust no.*/
         /* highlight error if 1 of the 2 fields contains all zeros*/

      end

      TS08W01.TS08WIXM = TS08W01.TS08WIXM - 1; /* Decrement from index*/

    end

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS08024

// Process valid input request
Function TS08025()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
   /* MODIFIED THE SUB SYSTEM FROM DSND TO DSNF  SBHARA*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  TS08W01.TS08WIXT = 1; /* Initialize table index*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error*/
    exit stack;
  end

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* PROD region*/
    TS08W01.TS08WIXT = 1; /* Input table index*/
  else
    if ("/*EOF" in TS08T02.TARJCL) /* TEST region*/
      TS08W01.TS08WIXT = sysVar.arrayIndex;
      TS08W01.TS08WIXT = TS08W01.TS08WIXT + 1; /* Input table index*/
    else
      TS08W01.TS08WIXT = 1; /* Input table index*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TS08W01.TS08WIXT > 0) /* Until end of table*/

    if (TS08T02.TARTYPE[TS08WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS08W02 empty; /* Parameters work area*/

      TS08W01.TS08WIXM = 1; /* Initialize map from index*/

      while (TS08W01.TS08WIXM <= 20) /* Until all lines processed*/

        if (TS08M002.TSVPLNBR[TS08WIXM] != 0 /* P/L # was entered*/
         && TS08M002.KUCCOID[TS08WIXM] != 0) /* Cust # was entered*/

          TS08W02.TS08WPLN = TS08M002.TSVPLNBR[TS08WIXM];
          TS08W02.TS08WCOI = TS08M002.KUCCOID[TS08WIXM];
                                   /* sub nbr*/

          TA6REC.TARJCL[TA6INDEX] = TS08W02.TARJCL;
                                   /* Report parameters*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment from index*/

      end

    else
      if (TS08T02.TARTYPE[TS08WIXT] == "H") /* dsnT/dsnD statement*/

        /* ------------------------------------------------------------*/
        /* Format dsnT/dsnD system statement.*/
        /* ------------------------------------------------------------*/

        set TARREC empty;

        TARREC.TARJCL = TS08T02.TARJCL[TS08WIXT];

        if (TA3REC.TA3RGNID == "04"
         || TA3REC.TA3RGNID == "08")
          TARRECH.XXX-DSN-SYSTEM = "T"; /* dsnT region*/
        else
          /* DLVRUSA MODIFIED TO ADD REGION CODE "05" FOR DSNF SBHARA*/
          if (TA3REC.TA3RGNID == "02")
            TARRECH.XXX-DSN-SYSTEM = "D"; /* dsnD region*/
          else
            if (TA3REC.TA3RGNID == "05")
              TARRECH.XXX-DSN-SYSTEM = "F"; /* dsnF region*/
            end
          end
        end

        TA6REC.TARJCL[TA6INDEX] = TARREC.TARJCL;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

      else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = TS08T02.TARJCL[TS08WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = TS08T02.TARTYPE[TS08WIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS08T02.TARJCL[TS08WIXT] == "/*EOF") /* End of table*/

      TS08W01.TS08WIXT = 0; /* Indicate end of table*/
    else
      TS08W01.TS08WIXT = TS08W01.TS08WIXT + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "025"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    TS08W01.TS08WMNO = 221; /* Job was submitted*/
    TS08W01.TS08MSEL[2] = "*"; /* Indicate function completed*/

    set TS08M002 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS08025

// BUILD PACKING LIST FROM ORDER
Function TS08030()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TS08031(); /* Format and display the map*/

  TS08032(); /* Check attention identifier*/

  TS08033(); /* Reset fields to normal intensity*/

  TS08034(); /* Verify the entered data*/

  TS08035(); /* Process valid input request*/


end // end TS08030

// Format and display the map
Function TS08031()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    TS08M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TS08M003.XURDEST = TS08W01.TS08MRMT; /* Printer*/
    TS08M003.XRODESC = TS08W01.TS08MDES; /* Description*/
    TS08M003.XURCOPY = TS08W01.TS08WCPY; /* # of copies*/

    if (TS08W01.TS08WMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TS08W01.TS08WMNO);
    end /* Job submitted message number*/
    TS08W01.TS08WMNO = 0; /* Reset message number*/

    if (TS08M003.XURCOPY == 0)
      TS08M003.XURCOPY = 1;
    end

  else

    set TS08M003 alarm; /* Indicate sound alarm*/

  end

  converse TS08M003 ;


end // end TS08031

// Check attention identifier
Function TS08032()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    TS08W01.TS08MSEL[3] = "C"; /* Indicate selection cancelled*/

    set TS08M003 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(04); /* Indicate invalid attention key*/
    TS08M002.XXXPRCNM = "TS08032"; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TS08032

// Reset highlighted fields
Function TS08033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  TS08W01.TS08WIXM = 1; /* Initialize map index*/

  while (TS08W01.TS08WIXM <= 20) /* Until all are reset*/

    set TS08M003.OP1CUOID[TS08WIXM] initialAttributes; /* customer order number*/
    set TS08M003.OP1NORID[TS08WIXM] initialAttributes; /* nike order number*/

    TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment index*/

  end


end // end TS08033

// Verify the entered data
Function TS08034()
   /* ------------------------------------------------------------*/
   /* Ensure that at least one line was entered.*/
   /* Verify the order number selection list.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS08M003.XURCOPY == 0) /* number of copies invalid*/
    set TS08M003.XURCOPY cursor, modified, bold;
    converseLib.validationFailed(16); /* invalid number of copies*/
    TS08M003.XXXPRCNM = "TS08034"; /* process name*/
    exit stack; /* exit to redisplay map*/
  end

  TS08W01.TS08WSWL = "N"; /* Initialize line switch*/

  TS08W01.TS08WIXM = 1; /* Initialize map index*/

  while (TS08W01.TS08WIXM <= 20 /* Until all pl/# & cust# are searched*/
   && TS08W01.TS08WSWL == "N") /* or an entered line is found*/

    if (TS08M003.OP1CUOID[TS08WIXM] != 0 /* op-cust-ord-id was entered*/
     || TS08M003.OP1NORID[TS08WIXM] != 0) /* op-nike-ord-id was entered*/

      TS08W01.TS08WSWL = "Y"; /* Indicate line was entered*/

    end

    TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment index*/

  end

  if (TS08W01.TS08WSWL == "N") /* No line was entered*/

    set TS08M003.OP1CUOID[1] cursor, modified, bold;
    set TS08M003.OP1NORID[1] modified, bold;
    converseLib.validationFailed(226); /* P/L CUSTOMER nbr missing*/
    TS08M003.XXXPRCNM = "TS08034"; /* Process name*/

  else

    TS08W01.TS08WIXM = 20; /* check map data from bottom up*/

    while (TS08W01.TS08WIXM > 0) /* Until all lines verified*/

      if (TS08M003.OP1CUOID[TS08WIXM] != 0 /* op-cust-ord-id was entered*/
       || TS08M003.OP1NORID[TS08WIXM] != 0) /* op-nike-ord-id was entered*/

        TS08S13(); /* Verify order number*/
         /* highlight error if 1 of the 2 fields contains all zeros*/

      end

      TS08W01.TS08WIXM = TS08W01.TS08WIXM - 1; /* Decrement from index*/

    end

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS08034

// Process valid input request
Function TS08035()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/
   /* MODIFIED THE SUB SYSTEM FROM DSND TO DSNF FOR TESTING SBHARA*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  TS08W01.TS08WIXT = 1; /* Initialize table index*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error*/
    exit stack;
  end

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* PROD region*/
    TS08W01.TS08WIXT = 1; /* Input table index*/
  else

    if ("/*EOF" in TS08T03.TARJCL) /* TEST region*/
      TS08W01.TS08WIXT = sysVar.arrayIndex;
      TS08W01.TS08WIXT = TS08W01.TS08WIXT + 1; /* Input table index*/
    else
      TS08W01.TS08WIXT = 1; /* Input table index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TS08W01.TS08WIXT > 0) /* Until end of table*/

    if (TS08T03.TARTYPE[TS08WIXT] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      set TS08W03 empty; /* Parameters work area*/

      TS08W01.TS08WIXM = 1; /* Initialize map from index*/

      while (TS08W01.TS08WIXM <= 20) /* Until all lines processed*/

        if (TS08M003.OP1CUOID[TS08WIXM] != 0 /* op-cust-ord-id*/
         && TS08M003.OP1NORID[TS08WIXM] != 0) /* op-nike-ord-id*/

          TS08W03.TS08WCOR = TS08M003.OP1CUOID[TS08WIXM];
          TS08W03.TS08WNOR = TS08M003.OP1NORID[TS08WIXM];
                                   /* sub nbr*/

          TA6REC.TARJCL[TA6INDEX] = TS08W03.TARJCL;
                                   /* Report parameters*/

          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment from index*/

      end

    else
      if (TS08T03.TARTYPE[TS08WIXT] == "H") /* dsnT/dsnD statement*/

        /* ------------------------------------------------------------*/
        /* Format dsnT/dsnD system statement.*/
        /* ------------------------------------------------------------*/

        set TARREC empty;

        TARREC.TARJCL = TS08T03.TARJCL[TS08WIXT];

        if (TA3REC.TA3RGNID == "04"
         || TA3REC.TA3RGNID == "08")
          TARRECH.XXX-DSN-SYSTEM = "T"; /* dsnT region*/
        else
          /* DLVRUSA MODIFIED TO ADD REGION CODE "05" FOR DSNF SBHARA*/
          if (TA3REC.TA3RGNID == "02")
            TARRECH.XXX-DSN-SYSTEM = "D"; /* dsnD region*/
          else
            if (TA3REC.TA3RGNID == "05")
              TARRECH.XXX-DSN-SYSTEM = "F"; /* dsnF region*/
            end
          end
        end

        TA6REC.TARJCL[TA6INDEX] = TARREC.TARJCL;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

      else

        /* ------------------------------------------------------------*/
        /* Format the Job Control Language statement from the table.*/
        /* ------------------------------------------------------------*/

        TA6REC.TARJCL[TA6INDEX] = TS08T03.TARJCL[TS08WIXT]; /* JCL*/
        TA6REC.TARTYPE[TA6INDEX] = TS08T03.TARTYPE[TS08WIXT]; /* Type*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

      end

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS08T03.TARJCL[TS08WIXT] == "/*EOF") /* End of table*/

      TS08W01.TS08WIXT = 0; /* Indicate end of table*/
    else
      TS08W01.TS08WIXT = TS08W01.TS08WIXT + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "035"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    TS08W01.TS08WMNO = 222; /* Job was submitted*/
    TS08W01.TS08MSEL[3] = "*"; /* Indicate function completed*/

    set TS08M003 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS08035

// Report Request Menu
Function TS08990()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  TS08991(); /* Format and display the map*/

  TS08992(); /* Check attention identifier*/

  TS08993(); /* Reset fields to normal intensity*/

  TS08994(); /* Verify the entered data*/

  TS08995(); /* Process valid input request*/


end // end TS08990

// Format and display the map
Function TS08991()
   /* ------------------------------------------------------------*/
   /* Indicate sound audible alarm for any error.*/
   /* If no error or first time, format and display the map.*/
   /* Highlight warehouse code if warehouse not valid.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set TS08M099 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    if (COMMAREA.CAITEM > " ") /* Application data exists*/
      TS08M099.CAITEM = COMMAREA.CAITEM; /* Application data*/
      set TS08M099.CAITEM modified; /* Set MDT on*/
      COMMAREA.CAITEM = " "; /* Clear application data*/
    end

    set TS08M099 initial; /* Clear map output area*/

    if (TS08W01.TS08WMNO != 0) /* Job has been submitted*/
      if (TS08W01.TS08WMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TS08W01.TS08WMNO);
      end /* Job submitted message number*/
      TS08W01.TS08WMNO = 0; /* Reset message number*/
    end

    TS08M099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    TS08W01.TS08WIXM = 1; /* Initialize map index*/

    while (TS08W01.TS08WIXM <= TS08W01.TS08WIXL) /* Until all lines are done*/
      TS08M099.TS08MSEL[TS08WIXM] = TS08W01.TS08MSEL[TS08WIXM];
      if (TS08M099.TS08MSEL[TS08WIXM] == "S") /* Selected not processed*/
        set TS08M099.TS08MSEL[TS08WIXM] modified; /* Set MDT on*/
      end
      TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment index*/
    end

  end


  converse TS08M099 ;


end // end TS08991

// Check attention identifier
Function TS08992()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set TS08M099 initial; /* Clear map output area*/

    TS08S99(); /* Exit to redisplay map*/

  end

  if (TS08M099.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      if (TS08M099.CATOAP == COMMAREA.CACURRAP) /* Same as current*/

        set TS08M099.CATOAP cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(04); /* Indicate invalid request*/
        TS08M099.XXXPRCNM = "TS08992"; /* Process name*/

        TS08S99(); /* Exit to redisplay map*/

      end

      COMMAREA.CATOAP = TS08M099.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS08M099.CAITEM; /* Application data*/

      COMMAREA.CAUSERA = TSWREC.CAUSERA; /* Application user area*/

      XSEXIT(); /* Transfer to requested application*/

      set TS08M099.CATOAP cursor, modified, bold; /* Highlight*/

      TS08M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
      converseLib.validationFailed(); /* Force alarm to sound*/
      TS08M099.XXXPRCNM = "TS08992"; /* Process name*/

      COMMAREA.CATOAP = " "; /* Clear TO application*/
      COMMAREA.CAITEM = " "; /* and application data*/

      TS08S99(); /* Exit to redisplay map*/

    else

      set TS08M099.CATOAP cursor, modified, bold; /* Highlight application*/
      converseLib.validationFailed(05); /* Indicate PF key not valid*/
      TS08M099.XXXPRCNM = "TS08992"; /* Process name*/

      TS08S99(); /* Exit to redisplay map*/

    end

  end

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/

    XSPF1(); /* Exit to the HELP facility*/

    TS08M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TS08M099.XXXPRCNM = "TS08992"; /* Process name*/

    TS08S99(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "TS03"; /* NIL Menu*/

    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    TS08M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TS08M099.XXXPRCNM = "TS08992"; /* Process name*/

    TS08S99(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    TS08M099.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(); /* Force alarm to sound*/
    TS08M099.XXXPRCNM = "TS08992"; /* Process name*/

    TS08S99(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(04); /* Indicate invalid attention key*/
    TS08M099.XXXPRCNM = "TS08992"; /* Process name*/

    TS08S99(); /* Exit to redisplay map*/

  end


end // end TS08992

// Reset highlighted fields
Function TS08993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  TS08W01.TS08WIXM = 1; /* Initialize index*/

  while (TS08W01.TS08WIXM <= TS08W01.TS08WIXL) /* Until all lines are reset*/

    set TS08M099.TS08MSEL[TS08WIXM] initialAttributes; /* Reset select tag*/

    TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment line index*/

  end

  set TS08M099.CATOAP initialAttributes; /* FAST PATH application*/
  set TS08M099.CAITEM initialAttributes; /* Application data*/


end // end TS08993

// Verify the entered data
Function TS08994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Check for proper select tag.*/
   /* Indicate an error if the line was not selected properly.*/
   /* ------------------------------------------------------------*/

  if (TS08M099.CAITEM > " ") /* Application data was entered*/

    set TS08M099.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS08M099.XXXPRCNM = "TS08994"; /* Process name*/

  end

  TS08W01.TS08WIXM = TS08W01.TS08WIXL; /* Initialize line index*/

  while (TS08W01.TS08WIXM > 0) /* Until all lines are verified*/

    if (TS08M099.TS08MSEL[TS08WIXM] != TS08W01.TS08MSEL[TS08WIXM]
     && TS08M099.TS08MSEL[TS08WIXM] != " " /* Line was selected*/
     && TS08M099.TS08MSEL[TS08WIXM] != "S") /* and not with an "S"*/

      set TS08M099.TS08MSEL[TS08WIXM] cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Only "S" is valid for this field*/
      TS08M099.XXXPRCNM = "TS08994"; /* Process name*/

    end

    TS08W01.TS08WIXM = TS08W01.TS08WIXM - 1; /* Decrement line number*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    TS08S99(); /* Exit to redisplay map*/
  end


end // end TS08994

// Process valid input request
Function TS08995()
   /* ------------------------------------------------------------*/
   /* Save warehouse code and selection tags.*/
   /* If no default print destination and at least one report was*/
   /* selected, force selection of printer.*/
   /* If warehouse changed, obtain Warehouse Control Table row.*/
   /* If no row is found, reset any menu selections.*/
   /* ------------------------------------------------------------*/

  TS08W01.TS08WIXM = 1; /* Initialize map line index*/

  while (TS08W01.TS08WIXM <= TS08W01.TS08WIXL) /* Until all lines are moved*/

    if (TS08M099.TS08MSEL[TS08WIXM] != TS08W01.TS08MSEL[TS08WIXM])

      TS08W01.TS08MSEL[TS08WIXM] = TS08M099.TS08MSEL[TS08WIXM];

    end

    TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment line number*/

  end

  if (TS08W01.TS08MRMT == " " /* No default print destination*/
   && TS08W01.TS08MSEL[1] != "S") /* and specify printer not selected*/

    TS08W01.TS08WIXM = 1; /* Initialize map line index*/

    while (TS08W01.TS08WIXM <= TS08W01.TS08WIXL /* Until end of selections*/
     && TS08W01.TS08MSEL[1] != "S") /* or specification is forced*/

      if (TS08W01.TS08MSEL[TS08WIXM] == "S") /* Report was selected*/

        TS08W01.TS08MSEL[1] = "S"; /* Force printer specification*/

      end

      TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment line number*/

    end

  end

  if (TS08W01.TS08MSEL[1] == "S") /* If specify printer selected*/

    TS08W01.TS08WIXP = 0; /* Initialize page index*/

    TA6REC.TA6SUBSW = "N"; /* Indicate do not submit JCL*/

  end


end // end TS08995

// Select Set DTRANS.VNLPLO01
Function TS08S02()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* if not available - return an error message*/
   /* if any other error - indicate a system error*/
   /* ------------------------------------------------------------*/

  set TSVREC empty;

  TSVREC.TSVPLNBR = TS08M002.TSVPLNBR[TS08WIXM]; /* P/L no.*/
  TSVREC.KUCCOID = TS08M002.KUCCOID[TS08WIXM]; /* CUST no.*/
  TSVREC.TSFSHPID = -1; /* TS NIKE SHIP CODE*/
  TSVREC.NIAIVCDT = -1; /* NIL INVOICE DATE*/

  call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* expected return code*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(11); /* resourse not available*/
      exit stack;
    end
  else
    converseLib.validationFailed(10); /* unexpected return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS08S02 "; /* Process name*/
    TA1REC.TA1LOC = "VERIFY P/L NBR & CUSTOMER NBR";
    TA1REC.TA1MAP = "TS08M002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS "; /* data base name*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    TS08M002.XXXPRCNM = "TS08S02"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
end // end TS08S02

// Select Set DTRANS.VNLPLO01
Function TS08S03()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows*/
   /* if not available - return an error message*/
   /* if any other error - indicate a system error*/
   /* ------------------------------------------------------------*/

  set TSVREC empty;

  TSVREC.OP1CUOID = TS08M003.OP1CUOID[TS08WIXM]; /* cust ord id*/
  TSVREC.OP1NORID = TS08M003.OP1NORID[TS08WIXM]; /* nike ord id*/
  TSVREC.TSFSHPID = -1; /* ts nike ship id*/
  TSVREC.NIAIVCDT = -1; /* nil invoice date*/

  call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* expected return code*/
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(11); /* resourse not available*/
      exit stack;
    end
  else
    converseLib.validationFailed(10); /* unexpected return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS08S03 "; /* Process name*/
    TA1REC.TA1LOC = "VERIFY P/L NBR & CUSTOMER NBR";
    TA1REC.TA1MAP = "TS08M003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS "; /* data base name*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    TS08M002.XXXPRCNM = "TS08S03"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
end // end TS08S03

// VERIFY P/L & CUSTOMER NUMBERS
Function TS08S12()
   /* ------------------------------------------------------------*/
   /* Verify that the p/l and customer number*/
   /* If not on table                   - return an error*/
   /* If on table but is a direct ship  - return an error*/
   /* If on table but has been invoiced - return an error*/
   /* if resource not available (-911)  - return a message*/
   /* If any other error, indicate a system error*/
   /* ------------------------------------------------------------*/

  TS08W01.TS08WSWL = "N"; /* Initialize line error switch*/
  TS08W01.TS08WIX2 = TS08W01.TS08WIXM - 1; /* Initialize index*/

   /* check for duplicate p/l no. & cust no. entered*/

  while (TS08W01.TS08WIX2 > 0) /* Until all lines checked*/
    if (TS08M002.TSVPLNBR[TS08WIXM] == TS08M002.TSVPLNBR[TS08WIX2]
     && TS08M002.KUCCOID[TS08WIXM] == TS08M002.KUCCOID[TS08WIX2])
      TS08W01.TS08WSWL = "Y"; /* Indicate line error*/
      set TS08M002.TSVPLNBR[TS08WIXM] cursor, modified, bold;
      set TS08M002.KUCCOID[TS08WIXM] modified, bold;
      converseLib.validationFailed(32); /* duplicate entry*/
      TS08M002.XXXPRCNM = "TS08S12"; /* Process name*/
    end
    TS08W01.TS08WIX2 = TS08W01.TS08WIX2 - 1; /* Initialize index*/
  end

  if (TS08W01.TS08WSWL != "N") /* line error*/
    exit stack; /* Exit to redisplay map*/
  end

   /* check p/l no. & cust no. against the data base*/

  TS08S02(); /* open cursor for DTRANS.VNLPLO01*/

  if (TS08M002.TSVPLNBR[TS08WIXM] > 0 /* packing list nbr*/
   && TS08M002.KUCCOID[TS08WIXM] > 0) /* customer nbr*/

    set TSVREC empty; /* Initialize record area*/

    TSVREC.TSVPLNBR = TS08M002.TSVPLNBR[TS08WIXM]; /* p/l no.*/
    TSVREC.KUCCOID = TS08M002.KUCCOID[TS08WIXM]; /* cust no.*/
    TSVREC.TSFSHPID = -1; /* TS nike ship code*/
    TSVREC.NIAIVCDT = -1; /* NIL invoice date*/

    call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* fetch next row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* p/l no. & cust no. found*/
      /* next sentence*/
         /* IF TSVREC.XDSCD EQ '1'      ; direct ship code*/
           /* MOVE 225 TO EZEMNO        ; this p/l is a direct ship*/
           /* SET TS08M002.TSVPLNBR(TS08WIXM) CURSOR,MODIFIED,BRIGHT;*/
         /* END ;*/
         /* IF TSVREC.NIAIVCDT GT 0     ; invoice date*/
           /* MOVE 194 TO EZEMNO; this p/l has already been invoiced*/
           /* SET TS08M002.TSVPLNBR(TS08WIXM) CURSOR,MODIFIED,BRIGHT;*/
         /* END ;*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(11); /* resourse not available*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          set TS08M002.TSVPLNBR[TS08WIXM] cursor, modified, bold;
          set TS08M002.KUCCOID[TS08WIXM] modified, bold;
          converseLib.validationFailed(226); /* p/l - cust missing or invalid*/
          TS08M002.XXXPRCNM = "TS08S12"; /* Process name*/
        else
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "TS08S12 "; /* Process name*/
          TA1REC.TA1LOC = "VERIFY P/L NBR & CUSTOMER NBR";
          TA1REC.TA1MAP = "TS08M002"; /* Map name*/
          TA1REC.TA1DBASE = "DTRANS "; /* data base name*/
          TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
          TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

          TS08M002.XXXPRCNM = "TS08S12"; /* Process name*/

          exit stack; /* Exit to redisplay map*/
        end
      end
    end
  else
    if (TS08M002.TSVPLNBR[TS08WIXM] <= 0) /* packing list nbr*/
      converseLib.validationFailed(226); /* p/l - cust missing or invalid*/
      set TS08M002.TSVPLNBR[TS08WIXM] cursor, modified, bold;
    end
    if (TS08M002.KUCCOID[TS08WIXM] <= 0) /* customer nbr*/
      converseLib.validationFailed(226); /* p/l - cust missing or invalid*/
      set TS08M002.KUCCOID[TS08WIXM] cursor, modified, bold;
    end
  end

   /* CLOSE CURSOR FOR DTRANS.VNLPLO01*/

  TS08S22();

end // end TS08S12

// VERIFY ORDER NUMBER
Function TS08S13()
   /* ------------------------------------------------------------*/
   /* Verify the order number*/
   /* If found on DTRANS.VNLPLO01     - return an error*/
   /* If not found on DREADO.VORHDR01 - return an error*/
   /* If not a direct ship            - return an error*/
   /* If division code not NIL        - return an error*/
   /* if resource not availale (-911) - return a message*/
   /* If any other sqlcode error, indicate a system error*/
   /* ------------------------------------------------------------*/

  TS08W01.TS08WSWL = "N"; /* Initialize line error switch*/
  TS08W01.TS08WIX2 = TS08W01.TS08WIXM - 1; /* Initialize index*/

   /* check for duplicate order numbers entered on the screen*/

  while (TS08W01.TS08WIX2 > 0) /* Until all lines checked*/
    if (TS08M003.OP1CUOID[TS08WIXM] == TS08M003.OP1CUOID[TS08WIX2]
     && TS08M003.OP1NORID[TS08WIXM] == TS08M003.OP1NORID[TS08WIX2])
      TS08W01.TS08WSWL = "Y"; /* Indicate line error*/
      set TS08M003.OP1CUOID[TS08WIXM] cursor, modified, bold;
      set TS08M003.OP1NORID[TS08WIXM] modified, bold;
      converseLib.validationFailed(32); /* duplicate entry*/
      TS08M003.XXXPRCNM = "TS08S13"; /* Process name*/
    end
    TS08W01.TS08WIX2 = TS08W01.TS08WIX2 - 1; /* Initialize index*/
  end

  if (TS08W01.TS08WSWL != "N") /* Indicate line error*/
    exit stack; /* Exit to redisplay map*/
  end

  TS08S03(); /* open cursor for dtrans.vnlplo01*/

   /* check order numbers against the data base*/

  if (TS08M003.OP1CUOID[TS08WIXM] > 0 /* op-cust-ord-id*/
   && TS08M003.OP1NORID[TS08WIXM] > 0) /* op-nike-ord-id*/

    set TSVREC empty; /* Initialize record area*/

    TSVREC.OP1CUOID = TS08M003.OP1CUOID[TS08WIXM]; /* cust ord id*/
    TSVREC.OP1NORID = TS08M003.OP1NORID[TS08WIXM]; /* nike ord id*/
    TSVREC.TSFSHPID = -1; /* TS nike ship id*/
    TSVREC.NIAIVCDT = -1; /* NIL invoice date*/

    call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* dtrans.vnlplo01*/

    if (SQLCA.VAGen_SQLCODE == 100) /* No p/l nbr for this order*/

      set OP1REC empty; /* Initialize record area*/

      TS08W01.TS08WORD = TS08M003.OP1CUOID[TS08WIXM]; /* cust ord id*/
      OP1REC.OP1CUOID = TS08M003.OP1CUOID[TS08WIXM]; /* cust ord id*/
      OP1REC.OP1NORID = TS08M003.OP1NORID[TS08WIXM]; /* nike ord id*/
      OP1REC.OP1PARTN = TS08W01.TS08WPRT; /* part char*/

      call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* dorder.vorhdr01*/

      if (SQLCA.VAGen_SQLCODE == 0) /* order nbr exists*/
        if (XOSCD == "OP" /* order status is opened*/
         || XOSCD == "PS") /* order status is partially shipped*/
          /* DLVRUSA MODIFICATIONS SBHARA 04/09/01*/
          if (OP1REC.XDSCD == "1"  /* if order not direct ship*/
           /* OR (OP1REC.XWHCD EQ '04'*/
           /* Memphis Footwear*/
           /* OR OP1REC.XWHCD EQ '07'*/
           /* Wilsonville*/
           /* OR OP1REC.XWHCD EQ '09'*/
           /* Promo*/
           || OP1REC.XWHCD == "22" /* Airborne Sample*/
           /* OR OP1REC.XWHCD EQ '42'*/
           /* Canada*/
           /* OR OP1REC.XWHCD EQ '51');*/
           /* Memphis Apparel*/
          )                        /* NEXT SENTENCE;*/
          else
            converseLib.validationFailed(224); /* order not direct ship*/
            set TS08M003.OP1CUOID[TS08WIXM] cursor, modified, bold;
            set TS08M003.OP1NORID[TS08WIXM] modified, bold;
          end

          set INRREC empty;
          INRREC.INR-RULE-TYPE = "DIVISNCODE";
          INRREC06.XDV-DIV-CD = OP1REC.XDVCD;
          INRREC06.INR-SEARCH-FL = "Y";

          XSINS-PROCESS-RULE(); /* CALL IN8000*/

          if (INRREC.INR-RETURN-CODE > 1) /* BAD RETURN FROM IN8000*/
            converseLib.validationFailed(10); /* ERROR, PLEASE NOTIFY PGM'G*/
            TA1REC.TA1TYPE = "APPL";
            TA1REC.TA1FUNC = "RETN";
            TA1REC.TA1MAP = "TS08M002";
            TA1REC.TA1LOCAT = "TS08S13"; /* Process name*/
            TA1REC.TA1PGMNM = "TS08   "; /* Process name*/
            TAEREC.TAEDESC1 = "ERROR OCCURRED-IN8000 RET-CD > 1";
            TAEREC.TAEDESC2 = INRREC.INR-PARAMETERS;

            call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diag routine*/

            TS08M002.XXXPRCNM = "TS08S13"; /* Process name*/

            exit stack; /* Exit to redisplay map*/

          else

  /* ******IF OP1REC.XDVCD NE '02'; /* if division code not NIL*/
            if (INRREC06.INR-XDV-NIL-PROCESS-FL[INR-SEARCH-SUB] != "Y")
              converseLib.validationFailed(227); /* division code not international*/
              set TS08M003.OP1CUOID[TS08WIXM] cursor, modified, bold;
              set TS08M003.OP1NORID[TS08WIXM] modified, bold;
            end
          end
        else
          converseLib.validationFailed(259); /* order status is not 'op' or 'ps'*/
          set TS08M003.OP1CUOID[TS08WIXM] cursor, modified, bold;
          set TS08M003.OP1NORID[TS08WIXM] modified, bold;
        end
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(11); /* resource not available*/
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            set TS08M003.OP1CUOID[TS08WIXM] cursor, modified, bold;
            set TS08M003.OP1NORID[TS08WIXM] modified, bold;
            converseLib.validationFailed(173); /* Indicate missing order nbr*/
            TS08M003.XXXPRCNM = "TS08S13"; /* Process name*/
          else
            TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
            TA1REC.TA1PGMNM = "TS08S13 "; /* Process name*/
            TA1REC.TA1LOC = "VERFIY ORDER NUMBER ";
            TA1REC.TA1MAP = "TS08M003"; /* Map name*/
            TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
            TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
            TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

            TS08M003.XXXPRCNM = "TS08S13"; /* Process name*/

            exit stack; /* Exit to redisplay map*/

          end

        end

      end
    else
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == -811)
        set TS08M003.OP1CUOID[TS08WIXM] cursor, modified, bold;
        set TS08M003.OP1NORID[TS08WIXM] modified, bold;
        converseLib.validationFailed(223); /* ord nbr already has p/l #*/
        TS08M003.XXXPRCNM = "TS08S13"; /* Process name*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(11); /* resources not available*/
        else

          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1PGMNM = "TS08S13 "; /* Process name*/
          TA1REC.TA1LOC = "VERFIY ORDER NUMBER ";
          TA1REC.TA1MAP = "TS08M003"; /* Map name*/
          TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
          TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

          TS08M003.XXXPRCNM = "TS08S13"; /* Process name*/

          exit stack; /* Exit to redisplay map*/

        end
      end
    end
  else
    if (TS08M003.OP1CUOID[TS08WIXM] <= 0) /* op-cust-ord-id*/
      converseLib.validationFailed(173); /* Indicate missing order nbr*/
      set TS08M003.OP1CUOID[TS08WIXM] cursor, modified, bold;
    end
    if (TS08M003.OP1NORID[TS08WIXM] <= 0) /* op-nike-ord-id*/
      converseLib.validationFailed(173); /* Indicate missing order nbr*/
      set TS08M003.OP1NORID[TS08WIXM] cursor, modified, bold;
    end
  end

  TS08S23(); /* CLOSE CURSOR FOR DTRANS.VNLPLO01*/

end // end TS08S13

// Close Set DTRANS.VNLPLO01
Function TS08S22()
   /* ------------------------------------------------------------*/
   /* Close cursor for DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/

  call "IO4700" ("C1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* expected return code*/
    converseLib.validationFailed(10); /* unexpected return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS08S22 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS08M002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS "; /* data base name*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    TS08M002.XXXPRCNM = "TS08S22"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
end // end TS08S22

// Close Set DTRANS.VNLPLO01
Function TS08S23()
   /* ------------------------------------------------------------*/
   /* Close cursor for DTRANS.VNLPLO01*/
   /* ------------------------------------------------------------*/

  call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* expected return code*/
    converseLib.validationFailed(10); /* unexpected return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS08S23 "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS08M003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS "; /* data base name*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diag routine*/

    TS08M002.XXXPRCNM = "TS08S23"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end
end // end TS08S23

// Clear selections and exit
Function TS08S99()
   /* ------------------------------------------------------------*/
   /* Reset any selections in working storage.*/
   /* Exit to redisplay the selection menu map.*/
   /* ------------------------------------------------------------*/

  TS08W01.TS08WIXM = 1; /* Initialize map index*/

  while (TS08W01.TS08WIXM <= TS08W01.TS08WIXL) /* Until end of array*/

    if (TS08W01.TS08MSEL[TS08WIXM] == "S") /* Entry is selected*/
      TS08W01.TS08MSEL[TS08WIXM] = " "; /* Reset entry*/
    end

    TS08W01.TS08WIXM = TS08W01.TS08WIXM + 1; /* Increment index*/

  end

  exit stack; /* Exit to redisplay map*/


end // end TS08S99

//*** RECORD=INRREC06 ****
// ---- Distribution Systems Processing Rules Information ----
// 
// This record redefines record INRREC used for the
// 'DIVISNCODE' rule type call to subroutine IN8000.
// 
// -------  --------  ------  --------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  --------------------------------
// NEW      07/09/93  DANNAN  NEW RECORD
// ************************
Record INRREC06 type basicRecord // VAGen Info - redefined INRREC
  5 INR-PARAMETERS INR-PARAMETERS ; 
    10 * num(2) ; // FILLER
    10 * char(10) ; // FILLER
    10 INR-INPUT INR-INPUT ; 
      15 XDV-DIV-CD XDV-DIV-CD ; 
      15 INR-SEARCH-FL INR-SEARCH-FL ; 
      15 * char(67) ; // FILLER
    10 * num(6) ; // FILLER
    10 * char(12) ; // FILLER
    10 INR-TABLE INR-TABLE ; 
      15 INR-RULES INR-RULES [80] ; 
        20 INR-DIVISNCODE-KEY INR-DIVISNCODE-KEY ; 
        20 INR-XDV-PI-PROCESS-FL INR-XDV-PI-PROCESS-FL ; 
        20 INR-XDV-NIL-PROCESS-FL INR-XDV-NIL-PROCESS-FL ; 
        20 * char(26) ; // FILLER
end // end INRREC06

//*** RECORD=TS08W00 ****
// JCL variable storage for SR0Q - SHIPREC Report Requests
// ***********************
Record TS08W00 type basicRecord
  10 TS08WEXE TS08WEXE ; 
  10 TS08MGEN TS08MGEN ; 
  10 TS08MCPY TS08MCPY ; 
  10 TS08WJCL TS08WJCL ; 
end // end TS08W00

//*** RECORD=TS08W01 ****
// Working storage for SR0Q - SHIPREC Report Requests
// ***********************
Record TS08W01 type basicRecord
  10 TS08WORD TS08WORD ; 
    15 * char(8) ; 
    15 TS08WPRT TS08WPRT ; 
  10 TS08WIXL TS08WIXL ; 
  10 TS08WIXM TS08WIXM ; 
  10 TS08WIX2 TS08WIX2 ; 
  10 TS08WIXP TS08WIXP ; 
  10 TS08WIXT TS08WIXT ; 
  10 TS08WUID TS08WUID ; 
  10 TS08MRMT TS08MRMT ; 
  10 TS08MDES TS08MDES ; 
  10 TS08WCPY TS08WCPY ; 
  10 TS08WSWL TS08WSWL ; 
  10 TS08WSWS TS08WSWS ; 
  10 TS08WMNO TS08WMNO ; 
  10 TS08TTYP TS08TTYP ; 
  10 TS08MSEL TS08MSEL [98] ; 
  10 TS08WSWX TS08WSWX ; 
end // end TS08W01

//*** RECORD=TS08W02 ****
// Parameters for TS1281 - Print Packing List by Customer
// ***********************
Record TS08W02 type basicRecord
  10 TARJCL TARJCL ; 
    15 TS08WPLN TS08WPLN ; 
    15 * char(1) ; 
    15 TS08WCOI TS08WCOI ; 
    15 * char(61) ; 
end // end TS08W02

//*** RECORD=TS08W03 ****
// Parameters for TS1291 - Build Packing List by Order
// ***********************
Record TS08W03 type basicRecord
  10 TARJCL TARJCL ; 
    15 TS08WCOR TS08WCOR ; 
    15 TS08WNOR TS08WNOR ; 
    15 * char(67) ; 
end // end TS08W03

// DIVISNCODE KEY
DataItem INR-DIVISNCODE-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIL PROCESS FLAG ('Y' OR 'N')
DataItem INR-XDV-NIL-PROCESS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PAIRCOUNT PROCESS FLAG
DataItem INR-XDV-PI-PROCESS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of copies to print
DataItem TS08MCPY num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer description
DataItem TS08MDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print from generation number
DataItem TS08MGEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer destination
DataItem TS08MRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select field
DataItem TS08MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// JCL statement type
DataItem TS08TTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust company id
DataItem TS08WCOI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem TS08WCOR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Default printer copies
DataItem TS08WCPY num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// EXEC procedure name
DataItem TS08WEXE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem TS08WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem TS08WIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS08WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for page number
DataItem TS08WIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem TS08WIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job Control Language statement
DataItem TS08WJCL char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted message number
DataItem TS08WMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem TS08WNOR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem TS08WORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// picking list number
DataItem TS08WPLN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-part-char
DataItem TS08WPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line error switch
DataItem TS08WSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem TS08WSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Exit required switch
DataItem TS08WSWX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem TS08WUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

