package ts0v;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pv.common.*;
import pw.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=TS0V ****
// ************************************************************
// **                                                        **
// **               TRANSPORTATION SYSTEM                    **
// **               ---------------------                    **
// **                                                        **
// **          Packing List Maintenance/Inquiry/Add          **
// **                                                        **
// Note: As of 09/26/91, this application as been re-written
//       to process Packing List Maintenance/Inquiry/Add
//       functions.
// 
// The following documentation refers to the original
// application.
// 
// This application should be cloned from the Shipment Add TS0V
// Application.  This application is entered from one of 4
// applications:
// 
//    1. TS0J - Shipment Maintenance Menu P/L Add Option
//    2. TS0P - Shipment Product Inquiry
//    3. TS01 - Shipment Maintenance P/L Browse
//    4. TS0Y - Shipment Maintenance Container Browse
// 
// 1. If entered from TS0J, all packing lists are selected in
//    this application that do not have detail.  This applica-
//    tion will check the user's security.  If they have add
//    capability then the user will be able to add detail to
//    the packing lists.  Otherwise the user will only be able
//    to view the packing lists.
// 
//    For an add:  PF3 will add detail for the current packing
//    list, advance to container assignment for un-assigned
//    packing lists and exit back to TS0J.  PA2 will ignore
//    detail for the current packing list, advance to container
//    assignment for un-assigned packing lists and exit to
//    TS0J.  Pressing ENTER will add detail for the current
//    packing list and advance to the next packing list.  If
//    ENTER is pressed and no changes were made on the map,
//    then you will just advance to the next packing list with
//    no updates.  At the end of the packing list loop, the
//    program will check for any packing lists in more than one
//    container.  If in more than one container and detail has
//    been added, then the user will enter carton ranges in
//    container assignment screens until no more containers
//    exist to assign, at which point the user will be taken
//    back to the TS0J menu.
// 
//    For an inquiry:  ENTER will advance to the next packing
//    list and PF3/PA2 will advance to the container assignment
//    screens.  PF3 pressed again will exit to TS0J.
// 
// 2. If entered from TS0P, all packing lists were selected in
//    the TS0P application.  This application will check the
//    users' security.  If they have add capability, then the
//    user will be able to add detail to the packing lists.
//    Otherwise, the user will only be able to view the
//    packing lists.
// 
//    For an add:  Same as for TS0J only exit back to TS0P.
// 
//    For an inquiry:  Same as for TS0J only exit back to TS0P.
// 
// 3. If entered from TS01, all packing lists were selected in
//    the TS01 application.  If the user pressed ENTER on the
//    TS01 screen, they will only be able to inquire on pack-
//    ing lists in this application.  If they pressed PF16 from
//    TS01, they will only be able to view container assign-
//    ments.  If they pressed PF13 from TS01, and their
//    security allows it, they can add or change detail for
//    packing lists in this application.  If they pressed PF13
//    from TS01 and their security only allows inquiry, then
//    they will only be able to view P/L detail.
// 
//    For an add:  Same as for TS0J only exit back to TS01.
// 
//    For P/L inquiry:  Same as for TS0J only exit back to
//                 TS01.
// 
//    For Container assignment inquiry:  Enter will advance
//                 through all containers for every packing
//                 list.  PF3 will exit back to TS01.
// 
// 3. If entered from TS0Y, all packing lists were selected in
//    the TS0Y application.
// 
//    For Container assignment inquiry:  Enter will advance
//                 through all containers for every packing
//                 list.  PF3 will exit back to TS0Y.
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          08/18/88 cepple  New application.
// ts#000   07/25/90 cepple  Add new cpl item selection "s4"
//                           for new sort for map 1.
//                           Fix carton counting for GPC02 in
//                           TS02162 process.
//                           Increase max number of cartons
//                           allowable from 2500 to 5000.
// ts#012   08/02/90 cepple  Add gpc to map 1 and map 2 screen
//                           heading information.
// fix      08/13/90 cepple  Since PC3PONBR is not always GT
//                           zero, look at TSIPLNBR instead for
//                           more data to process.
// fix      08/16/90 cepple  When coming from TS0P the applica-
//                           tion will now move the passed
//                           warehouse code to TSWREC.XWHCD.
// fix      08/23/90 cepple  Wildcard quality when verifying
//                           size in detail edits.
// ts#141   11/12/90 cepple  Detect and fix discrepancies be-
//                           tween packing list and detail.
// ts#158   12/07/90 cepple  Eliminate all warnings when user
//                           selects a carton range for maint.
// ts#000   01/11/91 cepple  program not checking for duplicate
//                           s on original pack/list cartons.
//                           Modify overlap check processes.
// ts#000   01/29/91 cepple  gpc 02 with colors other than '00'
//                           were causing abend to occur in
//                           TS02S38. Other changes regarding
//                           hard coded '00' were in TS02S24,
//                           TS02163, and TS02262.
// ts#000   02/01/91 cepple  fix index problem in TS02163 and
//                           TS02262.
// TS#167   02/06/91 KSTOKK  Set mode code to blanks if
//                           Carr/Craft not found.
// TS#175   02/19/91 cepple  Fix so that all gpc's have ability
//                           to handle multiple colors.
// TS#179   03/11/91 dhuffm  Change to not match on quality
//                           code for P.O.
// TS#192   04/02/91 dhuffm  Fix to assign 'ER' status
//                           correctly if p/l in more than 1
//                           screen.
// TS#000   04/09/91 SFORD   table changes 'TSOREC'
// TS#195   05/06/91 dhuffm  Chg to not include shipments with
//                           'ER' status when checking style/
//                           size overrages.
// TS#168   05/17/91 dhuffm  Fix to assign cartons to
//                           containers correctly.
// TS#184   09/26/91 SFORD   Re-write of application to handle
//                           carton ranges in the VCPLIT01 D.B.
//                           This application will function as
//                           Packing List Maintenance/Inquery
//                           Add and will transfer to TS02 to
//                           handle Container Carton Assignment
//                           Maintenance/Inquery/Add
// TS#184   10/01/91 SFORD   Security fix logic & status ER fix
// TS#224   10/07/91 SFORD   Increased occurs to 500 to handle
//                           number of CPLIT01 Rows.
//                           - add call to TSCTL01 to prevent
//                           CICS run-away task ABEND.
// TS#184   10/10/91 SFORD   Allow access from option 5 from
//                           "TS0J".
// TS#FIX   10/10/91 SFORD   Fix status update problem for
//                           GPC=02. Module TS0V-57000 setting
//                           TS0VW03.TSISTAT and should't be.
// TS#FIX   10/21/91 SFORD   Increased occurs to 1600 to handle
//                           number of CPLIT01 Rows.
// TS#233   03/02/92 SFORD   Modifications due to B-grade SO/PO
//                           project.
// TS#fix   03/14/92 SFORD   Fixed error re-setting bug V-63522
//                           added 'SE' to list
// TS#fix   04/22/92 SFORD   Changed (S6/N6/C6) TO (SB/NB/CB)
// TS#999   08/13/93 SFORD   table change added user id
// TS#999   03/09/94 SFORD   table change 03/11/94
// TS#999   03/16/94 SFORD   cplit01 change for 6 digit crtns
// TS#999   07/05/95 SLEWIS  CHG S.O. NBR TO 9.3 FROM 8.2
// TS#999   10/23/95 JCARL1  Added freight scanned flag by
//                           looking at the DTRANS.VPLAUX01
//                           table for bar codes.
// TS#373   04/30/96 BKEPFO  Added a field to TS0VM001 to
//                           display the last one to update.
// TS#000   05/23/96 JCARL1  Fixed omission of so sub order
//                           number move in ts0v-02400.
// TS#279   08/14/96 dkesle  Changed processing for 'AR'
//                           shipment types
// TS121    09/08/96 jcarl1  Added MCO to map as enterable
//                           field.  Also pop-up-window for it.
// TS121    09/19/96 jcarl1  Fixed apparel display problem.
// TS000    10/15/96 jcarl1  Fixed overage tolerance problem.
//                           Due to TS0VWPOQ, TS0VWTTD, and
//                           TS0VWPSX being defined as packed
//                           7.2. to 9 binary.
// TS000    11/07/96 JCARL1  Remove beeps from error msg.
// TS000    11/22/96 DKESLE  Add 'PI' to list of excep codes
//                           that reset status in 63522
// TS000    02/11/97 Lwils2  moved the 'updt by: ' field on the
//                           top line and lengthen the comment
//                           field from 53 to 60 to display the
//                           the whole text field. Currently
//                           the user id is being truncated.
// TS000    02/20/97 Lwils2  change the field attribute for
//                           'updt by: ' to a color of blue ins
//                           tead of green.
// TS000   06/10/97 RKRISH   Added new process for updating
//                          Vplaux01 rows when a Change is made
//                          to the Cplit rows. OPTION PF13 from
//                          TS0V screen.
// TS000   07/02/97 RCORLE   Fix out-ofrange & blank screen
// TS000   08/20/97 RKALLA   Fixed the VPLAUX01 consistency wit
//                           VCPLIT01.
// TS000   08/27/97 RKALLA   VPLAUX rows will not populate if
//                           they are primarily blank
// TS000   09/02/97 RKALLA   Minor modifications for VPLAUX
// ts000   09/24/97 RKALLA   Fixed production problem on cplit0
// ts1264  10/16/97 SMANN2   Fixed the bug in no of cartons
//                           displayed when same carton contain
//                           more than one color for GPC '03'
// TS1485  12/02/97 SMANN2   Validate data entered when PF18
//                           is pressed also.( TS0V-50000 proc)
// TS1504  01/02/98 RVEMPA   Update VCPLHD03 for MCO for a PO,
//                           GPC, NIKE-SHP-ID if MCO is updated
//                           ( Refer TS0V-63600 )
// TS1510  01/07/98 dkesle   change calculation for total
//                           cartons for gpc 03
// TS914   01/09/98 skamba   Fix Apparel B-grade shipments
//                           (refer : TS0V-02620, Ts0v-02710)
// TS1511  02/03/98 skamba   Fix DC shipments problems
//                           (refer : TS0V-02620, Ts0v-02710)
// TS1536  02/17/98 RKALLA   Fixed the problem with Vplaux row
//                           insert abend by creating new progr
//                           am TS4580 and corresponding JCLs
// TS1570  03/17/98 skamba   Sales man samples fix for
//                            undershipment( refer :
//                            TS0V-59000)
// TS1536  06/29/98 skamba   Fix Apprel B- grades for UOM code
//                           (refer : TS0V-02620, Ts0V-02710
//                           ,  TS0V-0720, Ts0v-02730)
// TS1501  07/13/98 skamba   Changed Carton no.length (6 to 9)
//                           and columns(from 4 to 3 )
//                           in screen Ts0VM001
//                           ( IO module Ts4580 modifications
//                           will be installed later, till
//                           then SSC18 MFG CD field will be
//                           protected on TS0V )
// TS1511  07/13/98 smann2   Wild card mode code only for
//                           DC shipments
//                           (refer : TS0V-02620, Ts0v-02710)
// TS1501  09/13/98 BCHELL   Install SSCC18 changes
// TS1512  09/30/98 jcarl1   Add item sequence number and leg
//                           number to screen.
// TS2085  02/09/99 LRAO     TO POPULATE SPACE IN FACTORY DESC
//                           IF FCTY IS INVALID
//         05/13/99 LRAO     TO remove soft error for
//                           invoice nbr missing ts0v-54000
//         05/18/99 LRAO     TO remove ERROR IF PO IN FC STATUS
// TS000   06/06/99 VKUMAR   Included hard error 'AP' in the
//                           condition in -63522.
// TS2280  06/09/99 VKUMAR   Fix for multiple packing lists
//                           with same sty/clr under single PO.
// 
// TS2269  06/10/99 NPULUG   Creation of bar-code rows using
//                           PF13 key in the map for gpc='02
//                           and gpc = '03'.
// TS0000  07/30/99 NPULUG   Populate sscc18 map field from
//                           plaux table if available
//                           for gpc = '02'
// TS2432  08/18/99 AMOHAI   Changed TS0V-64000 and TS0V-64300
//                           and added a new proc TS0V-64010
//                           to call NIKEBOTH pgm TS4200 to
//                           take backup of VCPLHD records and
//                           VCNTNR records that are going to
//                           be deleted
// TS000   09/23/99 PGHOSH   CHANGED MSG 162 TO 444, TS0V-14000
// TS000   12/03/99 NPULUG   Modified proc TS0V-02400 to
//                           display only sty/colr selected
// TS#00   01/20/00 VKUMAR   Changed the application to display
//                           the corrcet mfg-id. Fixed a bug in
//                           in displaying the selected packing
//                           list.
// ts#0002/17/00 RRENGA      Color not to be displayed in
//                           detail lines for gpc=03 also
// 
// TS0000  03/06/00 npulug   Modified not to display mesg 425
//                           if manufacturing-id other than
//                           0091201 is populated taking from
//                           from plaux tble
// TS0000  09/20/00 VGOTTI   Modified to change the barcode
//                           process for apparel and equipment
//                           keeping footwear barcode prosess
//                           unchanged.
// TS0000  11/30/00 npulug   Modified to not allow entry
//                           of duplicate carton ranges
//                           ( Changed TS0V-55200.) for the
//                           size.
// TS0000  02/09/01 JKUNDU   Change the Map TR0DM001 to acco-
//                           modate carton length as 9(9).
// TS0000  03/20/01 GRAMAC   Change the Map TS0VM001 to block
//                           the last two bytes of
//                           manufacturing id . Changed
//                           TS0V-20000,TS0V-54000,TS0V-60000,
//                           TS0VS-68100,TS0VS-68200,TS0V-21000
// TS0000  05/21/01 nkumar   modified to allow users to be able
//                           to change mfg-id only.
// TS0000  11/02/01 NPULUG   Increased length of seq# in the
//                           map from 3 to 4
// *********************
Program TS0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OPBREC OPBREC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC6REC PC6REC; // record
  PC7REC PC7REC; // record
  PCMREC PCMREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TS0VW01 TS0VW01; // record
  TS0VW02 TS0VW02; // record
  TS0VW03 TS0VW03; // record
  TS0VW04 TS0VW04; // record
  TS0VW10 TS0VW10; // record
  TS0VW11 TS0VW11; // record
  TS0VW12 TS0VW12; // record
  TS0VW13 TS0VW13; // record
  TS0VW14 TS0VW14; // record
  TS0VW15 TS0VW15; // record
  TS0VW16 TS0VW16; // record
  TS0VW17 TS0VW17; // record
  TS0VW20 TS0VW20; // record
  TS0VW21 TS0VW21; // record
  TS0VW22 TS0VW22; // record
  TS0VW23 TS0VW23; // record
  TS0VW24 TS0VW24; // record
  TS0VW25 TS0VW25; // record
  TS0VW26 TS0VW26; // record
  TS0VW27 TS0VW27; // record
  TS5REC TS5REC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSOREC TSOREC; // record
  TSPREC TSPREC; // record
  TSQREC TSQREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  TSXREC TSXREC; // record
  VCPLHD04 VCPLHD04; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VFCTY003 VFCTY003; // record
  VPLAUX01 VPLAUX01; // record
  WEU0100 WEU0100; // record
  WTS4201 WTS4201; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XRETBL {deleteAfterUse = yes}; // table
  use YSSTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use TS0VT01 {deleteAfterUse = yes}; // table
  use TS0VTP1 {deleteAfterUse = yes}; // table
  use TS0VTP2 {deleteAfterUse = yes}; // table
  use TS0VT02 {deleteAfterUse = yes}; // table
  use TS0VM.TA0PM001,  // forms
      TS0VM.TS0VM001, 
      TS0VM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation processes.*/
     /* ------------------------------------------------------------*/

    set TS0VW01 empty; /* Initialize working storage*/
    set TS0VW02 empty;
    set TS0VW03 empty;
    set TS0VW04 empty;
    set TS0VW10 empty;
    set TS0VW12 empty;
    set TS0VW13 empty;
    set TS0VW20 empty;
    set TS0VW21 empty;
    set TS0VW22 empty;
    set WEU0100 empty;

    set OPBREC empty; /* Initialize records used*/
    set OP3REC empty;
    set OP8REC empty;
    set PG2REC empty;
    set PG3REC empty;
    set PC2REC empty;
    set PC3REC empty;
    set PC6REC empty;
    set PC7REC empty;
    set PCMREC empty;
    set PCYREC empty;
    set TAEREC empty;
    set TSHREC empty;
    set TSOREC empty;
    set TSIREC empty;
    set TSPREC empty;
    set TSQREC empty;
    set TSTREC empty;
    set TSXREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0VM001 initial; /* Initialize - map1 output area*/

    TS0VW01.TS0VWHUP = "N"; /* - Header  update flag*/
    TS0VW01.TS0VWIUP = "N"; /* - Item    update flag*/
    TS0VW01.TS0VWWFL = "N"; /* - warning flag for totals*/
    TS0VW01.TS0VWWUP = "N"; /* - warning update flag*/
    TS0VW01.TS0VWWF1 = "N"; /* - warning flag 1*/
    TS0VW01.TS0VWWF2 = "N"; /* - warning flag 2*/
    TS0VW01.TS0VWWF3 = "N"; /* - warning flag 3*/
    TS0VW01.TS0VWWF4 = "N"; /* - warning flag 4*/
    TS0VW01.TS0VWWF5 = "N"; /* - warning flag 5*/
    TS0VW01.TS0VWSWU = "N"; /* - temp storage update switch*/
    TS0VW01.TS0VWSWF = "N"; /* - format the map switch*/
    TS0VW01.MFG-CD-FLAG = "N"; /* - Init Manu-id flg(2) for ENTER*/
    TS0VW01.MFG-CD-FLAG1 = "N"; /* - Init Manu-id flg(2) for PF13*/
    TS0VW01.TS0VWMAP = "1"; /* - map number*/
    TSWREC.XXXMSGNO = 0; /* - info message number*/

    TS0VW01.TS0VWQU1 = 6; /* - multiples for gpc '02'*/
    TS0VW01.TS0VWQU2 = 12;
    TS0VW01.TS0VWQU3 = 24;

    TS0VW01.TS0VWMGC = 30; /* - max-gpc-cpl-lines*/
    TS0VW01.TS0VW-MAX-CRTN-RNG = 1600;

    if (TSWREC.TSWFRAPP == "TS0P") /* If entering from TS0P*/
      TS0VW01.TS0VWIX1 = 1; /* Set up index*/

      while (TS0VW01.TS0VWIX1 <= 10) /* Until end of pass array*/

        if (TSWREC.TSWSHPID[TS0VWIX1] > 0) /* Find the first shpmnt*/
          TSWREC.TSFSHPID = TSWREC.TSWSHPID[TS0VWIX1]; /* save id*/
          TS0VM001.TSFSHPID = TSWREC.TSWSHPID[TS0VWIX1]; /* Nike id*/
          TS0VM001.TSFBOL = TSWREC.TSWBOL[TS0VWIX1]; /* bill of lading*/
          TS0VM001.TSACARCD = TSWREC.TSWCARCD[TS0VWIX1];
                                     /* carrier code*/
          TS0VM001.TSFSHPNB = TSWREC.TSWSHPNB[TS0VWIX1]; /* ship num*/
          TS0VM001.TSEDEST = TSWREC.TSWDEST[TS0VWIX1]; /* destination*/
          TS0VM001.XWHCD = TSWREC.TSWXWHCD[TS0VWIX1]; /* warehouse*/
          TSWREC.XWHCD = TSWREC.TSWXWHCD[TS0VWIX1]; /* warehouse*/
          TS0VM001.XGPCD = TSWREC.XGPCD; /* gpc*/
          TS0VW01.TS0VWIX1 = 10 + 1; /* End loop*/
        else
          TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* Incr counter*/
        end

      end

    else /* ===> not from TS0P*/

      TS0VM001.TSFSHPID = TSWREC.TSFSHPID; /* Nike id*/
      TS0VM001.TSFBOL = TSWREC.TSFBOL; /* bill of lading*/
      TS0VM001.TSACARCD = TSWREC.TSACARCD; /* carrier code*/
      TS0VM001.TS5CRAFT = TSWREC.TS5CRAFT; /* craft code*/
      TS0VM001.TSFSHPNB = TSWREC.TSFSHPNB; /* shipment number*/
      TS0VM001.TSEDEST = TSWREC.TSEDEST; /* destination*/
      TS0VM001.XWHCD = TSWREC.XWHCD; /* warehouse*/
      TS0VM001.XGPCD = TSWREC.XGPCD; /* gpc*/

    end

    goto TS0V-00000; /* Check valid from application*/


     /* **                                                        ***/
     /* ********************** End of XPTS001 - FLOW ****************/
    TS0V-00000: TS0V-00000();
     /* ------------------------------------------------------------*/
     /* Init TS0V - Get Tolerances*/
     /* ------------------------------------------------------------*/

    goto TS0V-01000; /* ===> Get Tolerances*/


     /* **                                                        ***/
     /* ********************** End of TS0V-00000  - FLOW ************/
    TS0V-01000: TS0V-01000();
     /* ------------------------------------------------------------*/
     /* Init TS0V - Get initial cpl rows.*/
     /* ------------------------------------------------------------*/

    goto TS0V-02000;


     /* **                                                        ***/
     /* ********************** End of TS0V-01000 - FLOW *************/
    TS0V-02000: TS0V-02000();
     /* ------------------------------------------------------------*/
     /* Init TS0V - Get the shipment carton-detail maintenance.*/
     /* ------------------------------------------------------------*/

    goto TS0V-03000; /* Check origin and set flag*/


     /* **                                                        ***/
     /* ********************** End of TS0V-02000 - FLOW *************/
    TS0V-03000: TS0V-03000();
     /* ------------------------------------------------------------*/
       /* Init TS0V - shipment carton-detail maintenance.*/
     /* ------------------------------------------------------------*/

    goto TS0V-04000; /* Converse shipment carton maintenance*/


     /* **                                                        ***/
     /* ********************** End of TS0V-03000 - FLOW *************/
    TS0V-04000: TS0V-04000();
     /* *************************************************************/
        /* Flow to converse the TS0V carton-detail mnt. application*/
     /* *************************************************************/

    goto TS0V-04000; /* Converse TS0V maps*/


     /* **                                                        ***/
     /* ********************** End of TS0V-04000 - FLOW *************/
  end // end main
end // end TS0V

// ---> Check the FROM appl.
Function TS0V-00000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0J" /* From allowed application*/
   || COMMAREA.CAFROMAP == "TS0P" 
   || COMMAREA.CAFROMAP == "TS0Y" 
   || COMMAREA.CAFROMAP == "TS01" 
   || COMMAREA.CAFROMAP == "TS0V" 
   || COMMAREA.CAFROMAP == "TS0U" 
   || COMMAREA.CAFROMAP == "TS02")

     /* ==========  NEXT SENTENCE ==========>*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-00000 ********************/
end // end TS0V-00000

// Maint/inq shipment detail
Function TS0V-00001()
   /* ------------------------------------------------------------*/
   /* this is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* If request for data is yes;*/
   /* 1) Obtain the data for display.*/
   /* End*/
   /*  */
   /* 2) Format the map output area and display the map.*/
   /*  */
   /* 3) Check the attention identifier used to respond.*/
   /*  */
   /* 4) Reset highlighted fields to normal intensity.*/
   /*  */
   /* 5) Verify the data that was entered.*/
   /*  */
   /* 6) Process a valid input request.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWSWR == "Y" /* ===> If request for data is yes*/
   && converseVar.validationMsgNum == 0) /* ===> no DB2 errors detected*/

    TS0V-10000(); /* Obtain the data for display*/

  end

  TS0V-20000(); /* Format and display the map*/

  TS0V-30000(); /* Check attention identifier*/

  TS0V-40000(); /* Reset fields to normal intensity*/

  TS0V-50000(); /* Verify the entered data*/

  TS0V-60000(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of TS0V-00001 ********************/
end // end TS0V-00001

// Format/submit a background job
Function TS0V-001()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0VTP1.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0VWPRM = " "; /* INITIALIZE*/
      TS0VWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TS0VWNID = TS0VM001.TSFSHPID; /* NIKE ID*/
      TS0VWPLNBR = TSIREC.TSIPLNBR; /* NIKE PL NBR*/
      TS0VWMFGID = TS0VM001.FY-FCTY-MFG-CD; /* MFG ID*/
      TS0VWMFGID-03 = TS0VM001.MFG-CD-GPC03; /* MFG ID-03*/

      TA6REC.TARJCL[TA6INDEX] = TS0VWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0VTP1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0VTP1.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0VTP1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0V-001

// Format/submit a background job
Function TS0V-002()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0VT01.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0VWPRM = " "; /* INITIALIZE*/
      TS0VWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TS0VWNID = TS0VM001.TSFSHPID; /* NIKE ID*/
      TS0VWPLNBR = TSIREC.TSIPLNBR; /* NIKE PL NBR*/
      TS0VWMFGID = TS0VM001.FY-FCTY-MFG-CD; /* MFG ID*/
      TS0VWMFGID-03 = TS0VM001.MFG-CD-GPC03; /* MFG ID-03*/

      TA6REC.TARJCL[TA6INDEX] = TS0VWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0VT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0VT01.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0VT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0V-002

// ---> Get tolerance and mode cd
Function TS0V-01000()
   /* ------------------------------------------------------------*/
   /*  */
   /* Obtain tolerances for GPC Styles*/
   /* and mode code for this shipment*/
   /*  */
   /* ------------------------------------------------------------*/
   /* ********************************************************/
   /* Obtain the tolerance for style hard error qty and pct*/
   /* and style soft error qty and pct*/
   /* ********************************************************/

  set TSXREC empty; /* clear pass record*/
  TSXREC.XGPCD = TSWREC.XGPCD;

  TS0V-01100(); /* ===> Obtain the tolerances*/

  TS0VW01.TS0VWIHQ = TSXREC.TSXSTHQT;
  TS0VW01.TS0VWIHP = TSXREC.TSXSTHPT;
  TS0VW01.TS0VWISQ = TSXREC.TSXSTSQT;
  TS0VW01.TS0VWISP = TSXREC.TSXSTSPT;
  TS0VW01.TS0VWZHQ = TSXREC.TSXSZHQT;
  TS0VW01.TS0VWZHP = TSXREC.TSXSZHPT;
  TS0VW01.TS0VWZSQ = TSXREC.TSXSZSQT;
  TS0VW01.TS0VWZSP = TSXREC.TSXSZSPT;

   /* ** If any hard error values are zero, then move high-values*/
   /* ** to them.*/

  if (TS0VW01.TS0VWIHQ == 0
   && TS0VW01.TS0VWIHP == 0)
    TS0VW01.TS0VWIHQ = 999999999;
    TS0VW01.TS0VWIHP = 999.99;
  end


  if (TS0VW01.TS0VWZHQ == 0
   && TS0VW01.TS0VWZHP == 0)
    TS0VW01.TS0VWZHQ = 999999999;
    TS0VW01.TS0VWZHP = 999.99;
  end


   /* ********************************************************/
   /* Obtain the mode code for this shipment and ave in*/
   /* working storage.*/
   /* ********************************************************/

  set TS5REC empty;

  TS5REC.TSACARCD = TSWREC.TSACARCD; /* move in keys*/
  TS5REC.TS5CRAFT = TSWREC.TS5CRAFT;

  TS0V-01200(); /* ===> Get mode code*/

  TS0VW01.YMTCD = TS5REC.YMTCD; /* save the code*/


   /* **                                                        ***/
   /* ********************** End of TS0V-01000 ********************/
end // end TS0V-01000

// Select (S ) unique    VTSTOL01
Function TS0V-01100()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the tstol table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO5020" ("S ", SQLCA, TSXREC) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-01100"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTOL01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0VM001.XXXPRCNM = "V-01100"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-01100 ********************/
end // end TS0V-01100

// Select (S ) unique    VCRAFT01
Function TS0V-01200()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the craft table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TS5REC.YMTCD = "  "; /* Move spaces to mode code*/

    if (SQLCA.VAGen_SQLCODE != 100) /* handled in previous statement*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-01200"; /* Process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-01200"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-01200 ********************/
end // end TS0V-01200

// ---> Initialize TS0V cpl rows
Function TS0V-02000()
   /* ------------------------------------------------------------*/
   /*  */
   /* INITIALIZE TS0V CPL ROWS*/
   /*  */
   /* 1) If the from application is TS0J, then select all*/
   /* the cpl headers associated with the  shipment.*/
   /* 2) If the from application is other than TS0J, then*/
   /* select only the cpl headers which are passed in*/
   /* the common pass record.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
  )
   /* ======= Next Sentence ===========>*/

  else
    exit stack; /* ====> Flow to display error*/

  end
  if (COMMAREA.CAFROMAP == "TS0J" /* ===> If coming from Maint. Menu*/
   || COMMAREA.CAFROMAP == "TS0U") /* ===> If coming from Add Menu*/

    /* ------------------------------------------------------------*/
       /* If TS0J is the from application, then select all the*/
       /* cpl headers which do not contain detail for maintenance.*/
       /* If TS0U is the from application, then select the*/
       /* cpl header which was built if TS0U.*/
    /* ------------------------------------------------------------*/
    TS0VW01.TS0VWIFU = "Y";

    TS0V-02100(); /* ===> Select set of cpl table rows*/
                                   /* (S2/S7)*/

    TS0V-02200(); /* ===> fetch the cpl rows (N2/N7)*/

    TS0VW01.TS0VWCPX = 1; /* ===> reset cpl index*/

    TS0V-02300(); /* ===> close selected set of cpl rows*/
                                   /* (C2/C7)*/

  else

    /* ------------------------------------------------------------*/
       /* From application is equal to TS0Y, TS0P, or TS01.*/
       /* Load only the CPL headers passed through the TSWREC*/
       /* pass array.*/
    /* ------------------------------------------------------------*/

    TS0VW01.TS0VWIX2 = 1; /* ===> initialize index*/
    TS0VW01.TS0VWCPX = 1; /* ===> set cpl index*/

    while (TS0VW01.TS0VWIX2 <= 10) /* ===> while data exists in the array*/

      if (TSWREC.TSW2SHP[TS0VWIX2] > 0
       && TSWREC.TSW2SHP[TS0VWIX2] == TSWREC.TSFSHPID)

        if (TSWREC.TSWPLNBR[TS0VWIX2] in TS0VW02.TSIPLNBR)
          /* ===> NEXT SENTENCE ---> P.L. already exists*/
        else
          TS0V-02400(); /* ===> select unique CPLHD01 (SA)*/
        end

      end

      TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* ===> increment index*/

    end

    TS0VW01.TS0VWCPX = 1; /* ===> reset cpl index*/

  end

   /* ------------------------------------------------------------*/
     /* Load the first set of like rows into the gpc-cpl array.*/
     /* (** E.G.*/
       /* When processing GPC = '03'*/
              /* Load all colors associated with PL/Style.*/
       /* When processing GPC = '02'*/
              /* Load one color  associated with PL/Style. **)*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWIFU == "N")
    TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPXCTR;
  end
  TS0VW01.TS0VWSIX = TS0VW01.TS0VWCPX; /* ===> save the cpx index*/
  TS0VW01.TS0VWGCX = 1; /* ===> set up gpc-cpl index*/
  TS0VW01.TS0VWGCT = 0; /* ===> initialize gpc-cpl container*/
                                   /* total*/
  TS0VW01.TS0VWGST = 0; /* ===> initialize gpc-cpl ship quantity*/
                                   /* total*/

  TS0VW01.PC3PONBR = TS0VW02.PC3PONBR[TS0VWCPX];
  TS0VW01.PC2CUXID = TS0VW02.PC2CUXID[TS0VWCPX];
  TS0VW01.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX];
  TS0VW01.SY2CLRID = TS0VW02.SY2CLRID[TS0VWCPX];
  TS0VW01.XDMCD = TS0VW02.XDMCD[TS0VWCPX];
  TS0VW01.PC2INSEG = TS0VW02.PC2INSEG[TS0VWCPX];
  TS0VW01.XQACD = TS0VW02.XQACD[TS0VWCPX];
  TS0VW01.XPGCD = TS0VW02.XPGCD[TS0VWCPX];
  TS0VW01.XUMCD = TS0VW02.XUMCD[TS0VWCPX];
  TS0VW01.XOWCD = TS0VW02.XOWCD[TS0VWCPX];
  TS0VW01.OP1CUOID = TS0VW02.OP1CUOID[TS0VWCPX];
  TS0VW01.OP1NORID = TS0VW02.OP1NORID[TS0VWCPX];
  TS0V-02520();

  if (TSWREC.XGPCD == "03")

    while (TS0VW02.PC3PONBR[TS0VWCPX] == TS0VW01.PC3PONBR
     && TS0VW02.PC2CUXID[TS0VWCPX] == TS0VW01.PC2CUXID
     && TS0VW02.SY1STNBR[TS0VWCPX] == TS0VW01.SY1STNBR
     && TS0VW02.SY2CLRID[TS0VWCPX] == TS0VW01.SY2CLRID
     && TS0VW02.XDMCD[TS0VWCPX] == TS0VW01.XDMCD
     && TS0VW02.PC2INSEG[TS0VWCPX] == TS0VW01.PC2INSEG
     && TS0VW02.XQACD[TS0VWCPX] == TS0VW01.XQACD
     && TS0VW02.XPGCD[TS0VWCPX] == TS0VW01.XPGCD
     && TS0VW02.XUMCD[TS0VWCPX] == TS0VW01.XUMCD
     && TS0VW02.XOWCD[TS0VWCPX] == TS0VW01.XOWCD
     && TS0VW02.OP1CUOID[TS0VWCPX] == TS0VW01.OP1CUOID
     && TS0VW02.OP1NORID[TS0VWCPX] == TS0VW01.OP1NORID)

      /* ------------------------------------------------------------*/
          /* Move data to gpc-cpl array*/
      /* ------------------------------------------------------------*/

      TS0V-02500(); /* ===> move data to gpc-cpl array*/


       /* ------------------------------------------------------------*/
          /* Get P.O. Data*/
       /* ------------------------------------------------------------*/

      TS0VW03.TS0VWPSQ[TS0VWGCX] = 0; /* ===> Initialize total qty*/
      move 0 to TS0VW01.TS0VWPSX[1] for all; /* ===> Initialize array*/
      TS0VW03.TS0VWPSA[TS0VWGCX] = TS0VW01.TS0VWPSA;

      TS0V-02600(); /* ===> Obtain all po on order qtys for*/
                                   /* this item*/

      /* ------------------------------------------------------------*/
          /* Get Receipt Data*/
      /* ------------------------------------------------------------*/
      TS0VW03.TS0VWRSQ[TS0VWGCX] = 0; /* Initialize total qty*/
      move 0 to TS0VW01.TS0VWRSX[1] for all; /* ===> Initialize array*/
      TS0VW03.TS0VWRSA[TS0VWGCX] = TS0VW01.TS0VWRSA;

      TS0V-02700(); /* ===> Obtain all receipt qtys for this*/
                                   /* item*/

      /* ------------------------------------------------------------*/
          /* Get Transportation data*/
      /* ------------------------------------------------------------*/

      TS0VW03.TS0VWSSQ[TS0VWGCX] = 0; /* ===> Initialize total qty*/
      move 0 to TS0VW01.TS0VWSSX[1] for all; /* ===> Initialize array*/
      TS0VW03.TS0VWSSA[TS0VWGCX] = TS0VW01.TS0VWSSA;

      TS0V-02800(); /* ===> Obtain all shipped qtys for this*/
                                   /* item*/

      /* ------------------------------------------------------------*/
       /* Increment the indexes*/
      /* ------------------------------------------------------------*/

      TS0VW01.TS0VWGCX = TS0VW01.TS0VWGCX + 1;
      TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1;

    end

  else /* ===> Process GPC = '02'*/

    while (TS0VW02.PC3PONBR[TS0VWCPX] == TS0VW01.PC3PONBR
     && TS0VW02.PC2CUXID[TS0VWCPX] == TS0VW01.PC2CUXID
     && TS0VW02.SY1STNBR[TS0VWCPX] == TS0VW01.SY1STNBR
     && TS0VW02.SY2CLRID[TS0VWCPX] == TS0VW01.SY2CLRID
     && TS0VW02.XDMCD[TS0VWCPX] == TS0VW01.XDMCD
     && TS0VW02.PC2INSEG[TS0VWCPX] == TS0VW01.PC2INSEG
     && TS0VW02.XQACD[TS0VWCPX] == TS0VW01.XQACD
     && TS0VW02.XPGCD[TS0VWCPX] == TS0VW01.XPGCD
     && TS0VW02.XUMCD[TS0VWCPX] == TS0VW01.XUMCD
     && TS0VW02.XOWCD[TS0VWCPX] == TS0VW01.XOWCD
     && TS0VW02.OP1CUOID[TS0VWCPX] == TS0VW01.OP1CUOID
     && TS0VW02.OP1NORID[TS0VWCPX] == TS0VW01.OP1NORID)

      /* ------------------------------------------------------------*/
          /* Move data to gpc-cpl array*/
      /* ------------------------------------------------------------*/

      TS0V-02500(); /* ===> move data to gpc-cpl array*/

       /* ------------------------------------------------------------*/
          /* Get on order quantities from either the Order System*/
          /* of the Production Order System.*/
       /* ------------------------------------------------------------*/

      if (TS0VW02.PC3PONBR[TS0VWCPX] == 0
       && TS0VW02.XQACD[TS0VWCPX] == "02"
       && TS0VW02.OP1CUOID[TS0VWCPX] > 0
       && TS0VW02.OP1NORID[TS0VWCPX] > 0)

       /* ------------------------------------------------------------*/
          /* Get S.O. Data (B-grade shipment 2nd leg)*/
          /* (ie. Warehouse 15 to a customer)*/
       /* ------------------------------------------------------------*/

        TS0VW03.TS0VWPSQ[TS0VWGCX] = 0; /* ===> Initialize total qty*/
        move 0 to TS0VW01.TS0VWPSX[1] for all; /* ===> Initialize array*/
        TS0VW03.TS0VWPSA[TS0VWGCX] = TS0VW01.TS0VWPSA;

        TS0V-02550(); /* ===> Obtain all SO on order qtys for*/
                                   /* this item*/

      else

       /* ------------------------------------------------------------*/
          /* Get P.O. Data*/
       /* ------------------------------------------------------------*/

        TS0VW03.TS0VWPSQ[TS0VWGCX] = 0; /* Initialize total qty*/
        move 0 to TS0VW01.TS0VWPSX[1] for all; /* ===> Initialize array*/
        TS0VW03.TS0VWPSA[TS0VWGCX] = TS0VW01.TS0VWPSA;

        TS0V-02600(); /* ===> Obtain all po on order qtys for*/
                                   /* this item*/
      end

      /* ------------------------------------------------------------*/
          /* Get Receipt Data*/
      /* ------------------------------------------------------------*/

      TS0VW03.TS0VWRSQ[TS0VWGCX] = 0; /* ===> Initialize total qty*/
      move 0 to TS0VW01.TS0VWRSX[1] for all; /* ===> Initialize array*/
      TS0VW03.TS0VWRSA[TS0VWGCX] = TS0VW01.TS0VWRSA;

      TS0V-02700(); /* ===> Obtain all receipt qtys for this*/
                                   /* item*/

      /* ------------------------------------------------------------*/
          /* Get Transportation data*/
      /* ------------------------------------------------------------*/

      TS0VW03.TS0VWSSQ[TS0VWGCX] = 0; /* ===> Initialize total qty*/
      move 0 to TS0VW01.TS0VWSSX[1] for all; /* ===> Initialize array*/
      TS0VW03.TS0VWSSA[TS0VWGCX] = TS0VW01.TS0VWSSA;

      TS0V-02800(); /* ===> Obtain all shipped qtys for this*/
                                   /* item*/

      /* ------------------------------------------------------------*/
       /* Increment the indexes*/
      /* ------------------------------------------------------------*/

      TS0VW01.TS0VWGCX = TS0VW01.TS0VWGCX + 1;
      TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1;

    end

  end /* ===> GPC check*/

  TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX - 1; /* ===> decr cpl index*/

  TS0VW01.TS0VWGCX = 1; /* ===> reset gpc-cpl index*/

  TS0VW01.TS0VWSWR = "Y"; /* ===> set request for data switch*/

   /* **                                                        ***/
   /* ********************** End of TS0V-02000 ********************/
end // end TS0V-02000

// Select (S2/S7) set    VCPLHD04
Function TS0V-02100()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPL TABLE ROWS*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* Move in id*/

  if (COMMAREA.CAFROMAP == "TS0J") /* If coming from Maint. Menu*/
    TSGREC.TSNFNC = "S2"; /* Move selection to pass record*/
  end

  if (COMMAREA.CAFROMAP == "TS0U") /* If coming from Add    Menu*/
    TSGREC.TSNFNC = "S7"; /* Move selection to pass record*/
  end

  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02100"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
    TS0VM001.XXXPRCNM = "V-02100"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-02100 ********************/
end // end TS0V-02100

// Fetch  (N2/N7) next   VCPLHD04
Function TS0V-02200()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPL TABLE ROW*/

      /* Fetch the next row from the selected set of rows,*/
      /* until all rows fetched or contention occurrs.*/

   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWSWC = "N"; /* Initialize end of set flag*/

  TS0VW01.TS0VWCPX = 1; /* Set container pl index to 1*/

  while (TS0VW01.TS0VWSWC == "N") /* While not end of set*/

    if (COMMAREA.CAFROMAP == "TS0J") /* If coming from Maint. Menu*/
      TSGREC.TSNFNC = "N2"; /* Move selection to pass record*/
    end

    if (COMMAREA.CAFROMAP == "TS0U") /* If coming from Add    Menu*/
      TSGREC.TSNFNC = "N7"; /* Move selection to pass record*/
    end


    call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* select table set*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS0VW01.TS0VWSWC = "Y"; /* End of set found*/

    else

      if (SQLCA.VAGen_SQLCODE == 0) /* Good return code*/

        /* ------------------------------------------------------------*/
          /* First populate TSIREC from VCPLHD04.*/
          /* Then move the TSIREC fields to working storage.*/
        /* ------------------------------------------------------------*/

        TS0VW14.VCPLHD04-WORK-AREA = VCPLHD04.VCPLHD04-GRP;
        TS0VW14.TSIREC-FIXED-1 = TS0VW14.VCPLHD04-FIXED-1;
        TS0VW14.TSIREC-FIXED-2 = TS0VW14.VCPLHD04-FIXED-2;
        TS0VW14.TSIREC-FIXED-3 = TS0VW14.VCPLHD04-FIXED-3;
        TSIREC.TSIGROUP = TS0VW14.TSIREC-WORK-AREA;

        TS0VW02.TSFSHPID[TS0VWCPX] = TSIREC.TSFSHPID; /* save keys*/
        TS0VW02.TSIPLNBR[TS0VWCPX] = TSIREC.TSIPLNBR;
        TS0VW02.PC3PONBR[TS0VWCPX] = TSIREC.PC3PONBR;
        TS0VW02.PC2CUXID[TS0VWCPX] = TSIREC.PC2CUXID;
        TS0VW02.SY1STNBR[TS0VWCPX] = TSIREC.SY1STNBR;
        TS0VW02.SY2CLRID[TS0VWCPX] = TSIREC.SY2CLRID;
        TS0VW02.XDMCD[TS0VWCPX] = TSIREC.XDMCD;
        TS0VW02.PC2INSEG[TS0VWCPX] = TSIREC.PC2INSEG;
        TS0VW02.XQACD[TS0VWCPX] = TSIREC.XQACD;
        TS0VW02.XPGCD[TS0VWCPX] = TSIREC.XPGCD;
        TS0VW02.XOWCD[TS0VWCPX] = TSIREC.XOWCD;
        TS0VW02.XUMCD[TS0VWCPX] = TSIREC.XUMCD;
        TS0VW02.OP1CUOID[TS0VWCPX] = TSIREC.OP1CUOID;
        TS0VW02.OP1NORID[TS0VWCPX] = TSIREC.OP1NORID;
        TS0VW02.PC-ITM-SEQ-NBR[TS0VWCPX] = VCPLHD04.PC-ITM-SEQ-NBR;
        TS0VW02.TS-SHP-LEG-NBR[TS0VWCPX] = VCPLHD04.TS-SHP-LEG-NBR;

        /* -------------------------------------------------*/
          /* Record the containers associated with the*/
          /* current gpc-cpl packing list.*/
        /* -------------------------------------------------*/

        if (COMMAREA.CAFROMAP == "TS0U") /* If coming from Add    Menu*/
          TS0VW01.TSHNKCN1 = TSIREC.TSHNKCN1;
          TS0VW01.TSHNKCN2 = TSIREC.TSHNKCN2;
          TS0VW01.TSHNKCN3 = TSIREC.TSHNKCN3;
          TS0VW01.TSHNKCN4 = TSIREC.TSHNKCN4;
          TS0VW01.TSHNKCN5 = TSIREC.TSHNKCN5;
          TS0VW01.TSHNKCN6 = TSIREC.TSHNKCN6;
          TS0VW01.TSHNKCN7 = TSIREC.TSHNKCN7;
          TS0VW01.TSHNKCN8 = TSIREC.TSHNKCN8;
        end

      else

        if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
          converseLib.validationFailed(11); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          TA1REC.TA1FUNC = "ABND"; /* Termination function*/
        end

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "V-02200"; /* Process name*/
        TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
        TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
        TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        exit stack; /* ===>  Exit to redisplay map*/

      end /* ===> sql ^= 100*/

    end /* ===> sql  = 100*/

    TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1; /* increment cpl index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02200 ********************/
end // end TS0V-02200

// Close  (C2/C7) set    VCPLHD04
Function TS0V-02300()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPL ROWS*/

   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0J") /* If coming from Maint. Menu*/
    TSGREC.TSNFNC = "C2"; /* Move selection to pass record*/
  end

  if (COMMAREA.CAFROMAP == "TS0U") /* If coming from Add    Menu*/
    TSGREC.TSNFNC = "C7"; /* Move selection to pass record*/
  end

  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-02300"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
    TS0VM001.XXXPRCNM = "V-02300"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02300 ********************/
end // end TS0V-02300

// Select (SA) unique    VCPLHD04
Function TS0V-02400()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT A SINGLE CPL TABLE ROW*/
   /*  */
   /* Select all P/L rows for a product in CPLHD04 table.*/
   /*  */
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIFU = "N";
  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSW2SHP[TS0VWIX2]; /* Move in keys*/
  VCPLHD04.TS-NIKE-PL-NBR = TSWREC.TSWPLNBR[TS0VWIX2];
  TS0VW01.SELD-NIKE-PL-NBR = VCPLHD04.TS-NIKE-PL-NBR;

  TSGREC.TSNFNC = "SA"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/

   /* IF TSWREC.XGPCD = '03';*/
   /* ;*/
   /* MOVE '*' TO VCPLHD04.SY-COLR-CD-ID; /* Select all the colrs for style*/
   /* ;*/
   /* END;*/

    TS0V-02410(); /* Select the set (S6) VCPLHD04*/

    if (SQLCA.VAGen_SQLCODE == 0) /* If set select ok*/

      TS0VW01.TS0VWSWC = "N"; /* Set end of set switch*/

      while (TS0VW01.TS0VWSWC == "N") /* Until end of set*/

        TS0V-02420(); /* Fetch next row (N6) VCPLHD04*/

        TS0VW01.CURR-NIKE-PL-NBR = VCPLHD04.TS-NIKE-PL-NBR;

        if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
          if (TS0VW01.SELD-NIKE-PL-NBR == TS0VW01.CURR-NIKE-PL-NBR)

          /* ------------------------------------------------------------*/
            /* First populate the TSIREC from the VCPLHD04 record.*/
            /* Then move the tsirec fields to working storage.*/
          /* ------------------------------------------------------------*/

            TS0VW14.VCPLHD04-WORK-AREA = VCPLHD04.VCPLHD04-GRP;
            TS0VW14.TSIREC-FIXED-1 = TS0VW14.VCPLHD04-FIXED-1;
            TS0VW14.TSIREC-FIXED-2 = TS0VW14.VCPLHD04-FIXED-2;
            TS0VW14.TSIREC-FIXED-3 = TS0VW14.VCPLHD04-FIXED-3;
            TSIREC.TSIGROUP = TS0VW14.TSIREC-WORK-AREA;

            TS0VW02.TSFSHPID[TS0VWCPX] = TSIREC.TSFSHPID; /* save keys*/
            TS0VW02.TSIPLNBR[TS0VWCPX] = TSIREC.TSIPLNBR;
            TS0VW02.PC3PONBR[TS0VWCPX] = TSIREC.PC3PONBR;
            TS0VW02.PC2CUXID[TS0VWCPX] = TSIREC.PC2CUXID;
            TS0VW02.SY1STNBR[TS0VWCPX] = TSIREC.SY1STNBR;
            TS0VW02.SY2CLRID[TS0VWCPX] = TSIREC.SY2CLRID;
            TS0VW02.XDMCD[TS0VWCPX] = TSIREC.XDMCD;
            TS0VW02.PC2INSEG[TS0VWCPX] = TSIREC.PC2INSEG;
            TS0VW02.XQACD[TS0VWCPX] = TSIREC.XQACD;
            TS0VW02.XPGCD[TS0VWCPX] = TSIREC.XPGCD;
            TS0VW02.XOWCD[TS0VWCPX] = TSIREC.XOWCD;
            TS0VW02.XUMCD[TS0VWCPX] = TSIREC.XUMCD;
            TS0VW02.OP1CUOID[TS0VWCPX] = TSIREC.OP1CUOID;
            TS0VW02.OP1NORID[TS0VWCPX] = TSIREC.OP1NORID;
            TS0VW01.XXX-USER-ID = TSIREC.XXX-USER-ID;
            TS0VW02.PC-ITM-SEQ-NBR[TS0VWCPX] = VCPLHD04.PC-ITM-SEQ-NBR;
            TS0VW02.TS-SHP-LEG-NBR[TS0VWCPX] = VCPLHD04.TS-SHP-LEG-NBR;

            TS0VW01.TS0VWCPXCTR = TS0VW01.TS0VWCPX;
            TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1; /* Increment cpl index*/

          else
            TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1; /* Increment cpl index*/
          end

        else

          TS0VW01.TS0VWSWC = "Y"; /* Set end of set switch*/

        end

      end

      TS0V-02430(); /* Close set (C6) VCPLHD01*/

    end

    TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1; /* Increment cpl index*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Unexpected return code*/
      TS0VW01.TS0VWIFU = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-02400"; /* PROCESS NAME*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      exit stack; /* ===> Exit to re-display map*/

    end
  end

   /* **                                                        ***/
   /* ********************** End of TS0V-02400 ********************/
end // end TS0V-02400

// Select (SB) set       VCPLHD04
Function TS0V-02410()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT SET AND OPEN CURSOR FOR DTRANS.VCPLHD04*/
   /*  */
   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/
   /*  */
   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "SB"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02410"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02410"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02410 ********************/
end // end TS0V-02410

// Fetch  (NB) next      VCPLHD04
Function TS0V-02420()
   /* ------------------------------------------------------------*/
   /*  */
   /* FETCH ROW FROM DTRANS.VCPLHD04*/
   /*  */
   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/
   /*  */
   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "NB"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100 /* Valid return code*/
   || SQLCA.VAGen_SQLCODE == 0) 
    if (SQLCA.VAGen_SQLCODE == 0)
      TS0VW14.VCPLHD04-WORK-AREA = VCPLHD04.VCPLHD04-GRP;
      TS0VW14.TSIREC-FIXED-1 = TS0VW14.VCPLHD04-FIXED-1;
      TS0VW14.TSIREC-FIXED-2 = TS0VW14.VCPLHD04-FIXED-2;
      TS0VW14.TSIREC-FIXED-3 = TS0VW14.VCPLHD04-FIXED-3;
      TSIREC.TSIGROUP = TS0VW14.TSIREC-WORK-AREA;
    end
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02420"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02420"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02420 ********************/
end // end TS0V-02420

// Close  (CB) set       VCPLHD04
Function TS0V-02430()
   /* ------------------------------------------------------------*/
   /*  */
   /* CLOSE SELECTED SET FROM DTRANS.VCPLHD04*/
   /*  */
   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/
   /*  */
   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "CB"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-02430"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02430"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> exit to re-display map*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0V-02430 ********************/
end // end TS0V-02430

// Move data to GPC-CPL array
Function TS0V-02500()
   /* *************************************************************/
   /*  */
   /* MOVE DATA TO GPC-CPL ARRAY*/
   /*  */
   /* 1) Save the totals in the gpc-cpl array.*/
   /* 2) Move similar data from TS0VW02 cpl-tbl array to*/
   /* TS0VW03 gpc-cpl array.*/
   /*  */
   /*  */
   /* *************************************************************/

  TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
  TSIREC.TSIPLNBR = TS0VW02.TSIPLNBR[TS0VWCPX];

  TS0V-02510(); /* ===> Select (SA) the cpl header*/


  TS0VW01.TS0VWGST = TS0VW01.TS0VWGST + TSIREC.TSISHPQT;
  TS0VW01.TS0VWGCT = TS0VW01.TS0VWGCT + TSIREC.TSICRTQT;

  TS0VW03.TSFSHPID[TS0VWGCX] = TSIREC.TSFSHPID;
  TS0VW03.TSIPLNBR[TS0VWGCX] = TSIREC.TSIPLNBR;
  TS0VW03.PC3PONBR[TS0VWGCX] = TSIREC.PC3PONBR;
  TS0VW03.PC2CUXID[TS0VWGCX] = TSIREC.PC2CUXID;
  TS0VW03.SY1STNBR[TS0VWGCX] = TSIREC.SY1STNBR;
  TS0VW03.SY2CLRID[TS0VWGCX] = TSIREC.SY2CLRID;
  TS0VW03.TSISTAT[TS0VWGCX] = TSIREC.TSISTAT;
  TS0VW03.XDMCD[TS0VWGCX] = TSIREC.XDMCD;
  TS0VW03.PC2INSEG[TS0VWGCX] = TSIREC.PC2INSEG;
  TS0VW03.PC-XCT-ORIG-CD[TS0VWGCX] = VCPLHD04.PC-XCT-ORIG-CD;
  TS0VW03.PC-ITM-SEQ-NBR[TS0VWGCX] = VCPLHD04.PC-ITM-SEQ-NBR;
  TS0VW03.TS-SHP-LEG-NBR[TS0VWGCX] = VCPLHD04.TS-SHP-LEG-NBR;
  TS0VW03.XQACD[TS0VWGCX] = TSIREC.XQACD;
  TS0VW03.XPGCD[TS0VWGCX] = TSIREC.XPGCD;
  TS0VW03.XOWCD[TS0VWGCX] = TSIREC.XOWCD;
  TS0VW03.XUMCD[TS0VWGCX] = TSIREC.XUMCD;
  TS0VW03.OP1CUOID[TS0VWGCX] = TSIREC.OP1CUOID;
  TS0VW03.OP1NORID[TS0VWGCX] = TSIREC.OP1NORID;
  TS0VW03.TSIDETFL[TS0VWGCX] = TSIREC.TSIDETFL;
  TS0VW03.FY1FCTYC[TS0VWGCX] = TSIREC.FY1FCTYC;
  TS0VW03.TSPFCIVC[TS0VWGCX] = TSIREC.TSPFCIVC;
  TS0VW03.TSPFILE[TS0VWGCX] = TSIREC.TSPFILE;
  TS0VW03.TSILOCR[TS0VWGCX] = TSIREC.TSILOCR;
  TS0VW03.TSIMSCFL[TS0VWGCX] = TSIREC.TSIMSCFL;
  TS0VW03.TSIMSCGR[TS0VWGCX] = TSIREC.TSIMSCGR;
  TS0VW03.TSRTEXT[TS0VWGCX] = TSIREC.TSRTEXT;
  TS0VW03.XRECD[TS0VWGCX] = TSIREC.XRECD;
  TS0VW03.ZZZCHGCT[TS0VWGCX] = TSIREC.ZZZCHGCT;
  TS0VW03.TS0VWAFL[TS0VWGCX] = "N";

  if (TS0VW01.TS0VWGCX == 1)
    TS0VW01.TSPFCIVC = TSIREC.TSPFCIVC;
    TS0VW01.TSPFILE = TSIREC.TSPFILE;
    TS0VW01.TSILOCR = TSIREC.TSILOCR;
    TS0VW01.TSIMSCFL = TSIREC.TSIMSCFL;
    TS0VW01.TSIMSCGR = TSIREC.TSIMSCGR;
    TS0VW01.TSRTEXT = TSIREC.TSRTEXT;
    TS0VW01.PC-XCT-ORIG-CD = VCPLHD04.PC-XCT-ORIG-CD;
    TS0VW01.PC-ITM-SEQ-NBR = VCPLHD04.PC-ITM-SEQ-NBR;
    TS0VW01.TS-SHP-LEG-NBR = VCPLHD04.TS-SHP-LEG-NBR;
  end
   /* **                                                        ***/
   /* ********************** End of TS0V-02500 ********************/
end // end TS0V-02500

// Select (SA) unique    VCPLHD04
Function TS0V-02510()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT THE PACKING LIST ROW*/
   /*  */
   /* 1) Select the container packing list row to get all the*/
   /* fields.*/
   /*  */
   /* ------------------------------------------------------------*/

  set VCPLHD04 empty;
  VCPLHD04.TS-NIKE-SHP-ID = TSIREC.TSFSHPID;
  VCPLHD04.TS-NIKE-PL-NBR = TSIREC.TSIPLNBR;
  TSGREC.TSNFNC = "SA"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0VW14.VCPLHD04-WORK-AREA = VCPLHD04.VCPLHD04-GRP;
    TS0VW14.TSIREC-FIXED-1 = TS0VW14.VCPLHD04-FIXED-1;
    TS0VW14.TSIREC-FIXED-2 = TS0VW14.VCPLHD04-FIXED-2;
    TS0VW14.TSIREC-FIXED-3 = TS0VW14.VCPLHD04-FIXED-3;
    TSIREC.TSIGROUP = TS0VW14.TSIREC-WORK-AREA;
  else

    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen map 1*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02510"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02510"; /* Process name*/


    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/


    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02510 ********************/
end // end TS0V-02510

// Get Shipment Type
Function TS0V-02520()
   /* ------------------------------------------------------------*/

           /* Get shipment type using nike ship id*/

   /* ------------------------------------------------------------*/

  TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* nike ship id*/

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02520"; /* Process name*/
    TA1REC.TA1LOC = "GET SHIPMENT TYPE USING NIKE SHIP ID";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
    TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02520"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02520 ********************/
end // end TS0V-02520

// Get S.O. on order quantities
Function TS0V-02550()
   /* **********************************************************/
   /* Select set and accumulate SO quantity for item sizes*/
   /* **********************************************************/


  TS0V-02560(); /* Select (S2) set of S.O. Items*/

  move 0 to TS0VW01.TS0VWPSX[1] for all; /* Initialize po size qty array*/
  TS0VW01.TS0VWEFL = "N"; /* Initialize end loop flag*/

  TS0V-02570(); /* Fetch  (N2) next S.O. Items row*/

  while (TS0VW01.TS0VWEFL == "N") /* While rows are found*/

    TS0V-02580(); /* Select (S ) unique S.O. Size run*/

    if (OPBREC.OPBSZRC == 0)

      TS0VW01.TS0VWIX3 = 1; /* Set up index*/

      while (TS0VW01.TS0VWIX3 <= 40)

        if (OP3REC.OP3SZAFL[TS0VWIX3] == "Y") /* if active*/

          if (OP2REC.OP2LNIST == "SH") /* ship complete status*/

            TS0VW01.TS0VWWK1 = 0;
            TS0VW01.TS0VWWK2 = 0;
            TS0VW01.TS0VWWK1 = OP3REC.OP3SHPQT[TS0VWIX3];
            TS0VW01.TS0VWWK2 = TS0VW01.TS0VWPSX[TS0VWIX3];
            TS0VW01.TS0VWPSX[TS0VWIX3] = TS0VW01.TS0VWWK1 +             TS0VW01.TS0VWWK2;

       /* ** Add to total SO quantity ***/
            TS0VW01.TS0VWWK1 = 0;
            TS0VW01.TS0VWWK2 = 0;
            TS0VW01.TS0VWWK1 = TS0VW03.TS0VWPSQ[TS0VWGCX];
            TS0VW01.TS0VWWK2 = OP3REC.OP3SHPQT[TS0VWIX3];
            TS0VW03.TS0VWPSQ[TS0VWGCX] = TS0VW01.TS0VWWK1 +             TS0VW01.TS0VWWK2;

          else /* ===> use on-order qty bucket*/

            TS0VW01.TS0VWWK1 = 0;
            TS0VW01.TS0VWWK2 = 0;
            TS0VW01.TS0VWWK1 = OP3REC.OP3ONOQT[TS0VWIX3];
            TS0VW01.TS0VWWK2 = TS0VW01.TS0VWPSX[TS0VWIX3];
            TS0VW01.TS0VWPSX[TS0VWIX3] = TS0VW01.TS0VWWK1 +             TS0VW01.TS0VWWK2;

       /* ** Add to total SO quantity ***/
            TS0VW01.TS0VWWK1 = 0;
            TS0VW01.TS0VWWK2 = 0;
            TS0VW01.TS0VWWK1 = TS0VW03.TS0VWPSQ[TS0VWGCX];
            TS0VW01.TS0VWWK2 = OP3REC.OP3ONOQT[TS0VWIX3];
            TS0VW03.TS0VWPSQ[TS0VWGCX] = TS0VW01.TS0VWWK1 +             TS0VW01.TS0VWWK2;

          end /* end if active size*/

        end /* end if active size*/

        TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 + 1; /* Incr index*/

      end

      TS0V-02570(); /* Fetch  (N2) next S.O. Items row*/

    end

  end

  TS0V-02590(); /* Close  (C2) set of S.O. Items*/

  TS0VW03.TS0VWPSA[TS0VWGCX] = TS0VW01.TS0VWPSA;


   /* **                                                        ***/
   /* ********************** End of TS0V-02550 ********************/
end // end TS0V-02550

// Select (S2) set       VITEM0R1
Function TS0V-02560()
   /* *******************************************************/
   /* * Select set from VITEM0R1*/
   /* *******************************************************/

   /* Build order key*/

  set OP2REC empty;
  OP2REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  OP2REC.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX];
  OP2REC.SY2CLRID = TS0VW02.SY2CLRID[TS0VWCPX];
  OP2REC.XDMCD = TS0VW02.XDMCD[TS0VWCPX];
  OP2REC.OP1CUOID = TS0VW02.OP1CUOID[TS0VWCPX];
  OP2REC.OP1NORID = TS0VW02.OP1NORID[TS0VWCPX];
  TS0VW01.TS0VW-CUST-ORD-ID = TS0VW02.OP1CUOID[TS0VWCPX];
  OP2REC.OP1PARTN = TS0VW01.OP1PARTN;


  call "IO4150" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02560"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02560"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02560 ********************/
end // end TS0V-02560

// Fetch  (N2) next row  VITEM0R1
Function TS0V-02570()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DREADO.VITEM0R1*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0) /* End of selected set*/

     /* ========= NEXT SENTENCE =============>*/

  else

    TS0VW01.TS0VWEFL = "Y"; /* Indicate end of loop*/

    if (SQLCA.VAGen_SQLCODE != 100) /* If error besides not found*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-02570"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-02570"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02570 ********************/
end // end TS0V-02570

// Call DB2000 size run  VSIZE0R1
Function TS0V-02580()
   /* ---------------------------------------------------------*/
   /* Select Order DB item/size set using DB2000*/
   /* ---------------------------------------------------------*/

   /* build order key*/
  OP3REC.OP1PARTN = OP2REC.OP1PARTN;
  OP3REC.OP1CUOID = OP2REC.OP1CUOID;
  OP3REC.OP1NORID = OP2REC.OP1NORID;
  OP3REC.OP2LNINB = OP2REC.OP2LNINB;
  OP8REC.OP8MAP = "V-02580";
  OP8REC.OP8LOCAT[1] = "TS0V";
  OP8REC.OP8LOCAT[2] = "V-02580";

  OP8REC.OP8TASK = "S "; /* set parameters for DB2000*/

  call "DB2000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes}; /* select items/sizes*/

  if (OPBREC.OPBSZRC != 0)

    set SQLCA empty;

    SQLCA.VAGen_SQLCODE = OPBREC.OPBSZRC;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DREADO";
    TA1REC.TA1TBLVU = "DB2000  ";
    TA1REC.TA1TBLKE = " ";
    TA1REC.TA1LOC = "V-02580";
    TA1REC.TA1PGMNM = "CSP    ";

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02580 ********************/
end // end TS0V-02580

// Close  (C2) set       VITEM0R1
Function TS0V-02590()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/


  call "IO4150" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-02590"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02590"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> Exit to redisplay map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02590 ********************/
end // end TS0V-02590

// Get P.O. on order quantities
Function TS0V-02600()
   /* **********************************************************/
   /* Select set and accumulate po quantity for item sizes*/
   /* **********************************************************/

  if (TSWREC.XGPCD == "02"
   && TS0VW02.XQACD[TS0VWCPX] == "02")

     /* *===== NEXT SENTENCE - bypass item on PO*/

  else


    if (TS0VW02.PC-ITM-SEQ-NBR[TS0VWCPX] == 0)
      TS0V-02620(); /* Select (SI) set of P.O. Items*/
    else
      TS0V-02621();
    end

    move 0 to TS0VW01.TS0VWPSX[1] for all; /* Initialize po size qty array*/
    TS0VW01.TS0VWEFL = "N"; /* Initialize end loop flag*/

    while (TS0VW01.TS0VWEFL == "N") /* While rows are found*/

      if (TS0VW02.PC-ITM-SEQ-NBR[TS0VWCPX] == 0)
        TS0V-02630(); /* Fetch  (NI) next P.O. Items row*/
      end

      if (TS0VW01.TS0VWEFL == "N") /* If not end of loop*/

        if (TS0VW02.PC-ITM-SEQ-NBR[TS0VWCPX] == 0)
          /* do nothing*/
        else
          TS0VW01.TS0VWEFL = "Y";
        end

        TS0V-02640(); /* Select (S ) unique P.O. Size row*/

      else

        TS0V-02650(); /* Close  (NI) next P.O. Items row*/

      end
    end

    TS0VW03.TS0VWPSA[TS0VWGCX] = TS0VW01.TS0VWPSA;

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02600 ********************/
end // end TS0V-02600

// Select (SI) set       VPOITM01
Function TS0V-02620()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TSWREC.XWHCD;
  PC6REC.PC3PONBR = TS0VW02.PC3PONBR[TS0VWCPX];
  PC6REC.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX];
  PC6REC.SY2CLRID = TS0VW02.SY2CLRID[TS0VWCPX];
  PC6REC.XDMCD = TS0VW02.XDMCD[TS0VWCPX];
  PC6REC.XQACD = "*"; /* wildcard quality code*/
  PC6REC.XOWCD = TS0VW02.XOWCD[TS0VWCPX];
  PC6REC.PC2INSEG = TS0VW02.PC2INSEG[TS0VWCPX];
  PC6REC.XPGCD = TS0VW02.XPGCD[TS0VWCPX];
  PC6REC.XUMCD = TS0VW02.XUMCD[TS0VWCPX];


  PC6REC.YMTCD = TS0VW01.YMTCD;


  PC6REC.PC2CUXID = TS0VW02.PC2CUXID[TS0VWCPX];

  if (TS0VW02.OP1CUOID[TS0VWCPX] > 0
   && TS0VW02.OP1NORID[TS0VWCPX] > 0)
    TS0VW01.TS0VW-CUST-ORD-ID = TS0VW02.OP1CUOID[TS0VWCPX];
    PC6REC.OP1PARTN = TS0VW01.OP1PARTN;
    PC6REC.OP1CUOID = TS0VW02.OP1CUOID[TS0VWCPX];
    PC6REC.OP1NORID = TS0VW02.OP1NORID[TS0VWCPX];
  else
    PC6REC.OP1CUOID = 0;
    PC6REC.OP1NORID = 0;
    PC6REC.OP1PARTN = " ";
  end

  if (TSFREC.YSTCD == "AR")
    PC6REC.OP1CUOID = -1;
    PC6REC.OP1NORID = -1;
    PC6REC.OP1PARTN = "*";
  end

  if (TSFREC.YSTCD == "DC")
    PC6REC.YMTCD = "*"; /* wildcard Mode Code for DC shipments*/
  end

  PC6REC.PC6ETSDT = -1;
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";


  if (TSWREC.XGPCD == "03"
   && TSWREC.XWHCD != "18"
   && TS0VW02.XQACD[TS0VWCPX] == "02")
    PC6REC.XWHCD = "*";
    PC6REC.PC2CUXID = "*";
    PC6REC.XUMCD = "*";
    PC6REC.XOWCD = "*";
    PC6REC.PC2INSEG = "*";
    PC6REC.OP1CUOID = -1;
    PC6REC.OP1NORID = -1;
    PC6REC.OP1PARTN = "*";
    PC6REC.YMTCD = "*"; /* wildcard Mode Code*/
  end


  PCYREC.PCYFUNC = "SI";
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* SELECT TABLE SET*/


  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02620"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02620"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02620 ********************/
end // end TS0V-02620

// Select (SA) unique    VPOITM01
Function TS0V-02621()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.PC3PONBR = TS0VW02.PC3PONBR[TS0VWCPX];
  PC6REC.PC6ITMNB = TS0VW02.PC-ITM-SEQ-NBR[TS0VWCPX];


  PCYREC.PCYFUNC = "SA";
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* SELECT TABLE SET*/


  if (SQLCA.VAGen_SQLCODE == 0 || 
  SQLCA.VAGen_SQLCODE == 100) /* Unexpected return code*/
    /* do nothing*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02620"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02620"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02620 ********************/
end // end TS0V-02621

// Fetch  (NI) next      VPOITM01
Function TS0V-02630()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NI"; /* move in function code*/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* End of selected set*/
     /* continue on                 ; end of set found*/
  else
    TS0VW01.TS0VWEFL = "Y"; /* Indicate end of loop*/
    if (SQLCA.VAGen_SQLCODE != 100) /* If error besides not found*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-02630"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-02630"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02630 ********************/
end // end TS0V-02630

// Select (S ) unique    VPOSIZ01
Function TS0V-02640()
   /* ------------------------------------------------------------*/

                 /* SELECT THE PO ITEM SIZES ROW*/

   /* ------------------------------------------------------------*/

   /* **------------------------*/
   /* ** Process the P.O. sizes*/
   /* **------------------------*/

  PC7REC.XGPCD = PC6REC.XGPCD; /* move in selection keys*/
  PC7REC.PC3PONBR = PC6REC.PC3PONBR;
  PC7REC.PC6ITMNB = PC6REC.PC6ITMNB;

  call "IO3640" ("S ", SQLCA, PC7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/

    TS0VW01.TS0VWIX3 = 1; /* Set up index*/

    while (TS0VW01.TS0VWIX3 <= 40)

      TS0VW01.TS0VWWK1 = 0;
      TS0VW01.TS0VWWK2 = 0;
      TS0VW01.TS0VWWK1 = PC7REC.PC7ORDEQ[TS0VWIX3];
      TS0VW01.TS0VWWK2 = TS0VW01.TS0VWPSX[TS0VWIX3];
      TS0VW01.TS0VWPSX[TS0VWIX3] = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWWK2;

      /* ** Add to total po quantity ***/
      TS0VW01.TS0VWWK1 = 0;
      TS0VW01.TS0VWWK2 = 0;
      TS0VW01.TS0VWWK1 = TS0VW03.TS0VWPSQ[TS0VWGCX];
      TS0VW01.TS0VWWK2 = PC7REC.PC7ORDEQ[TS0VWIX3];
      TS0VW03.TS0VWPSQ[TS0VWGCX] = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWWK2;

      TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 + 1; /* Incr index*/
    end

  else

    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen map 1*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02640"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOSIZ01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC7REC.PC7KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02640"; /* Process name*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02640 ********************/
end // end TS0V-02640

// Close  (CI) set       VPOITM01
Function TS0V-02650()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CI"; /* move in function code*/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-02650"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02650"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> Exit to redisplay map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02650 ********************/
end // end TS0V-02650

// Get receipt quantities
Function TS0V-02700()
   /* **********************************************************/
   /* Select set and accumulate receipt quantities for an item*/
   /* (NOTE: If the PO NBR = 0, this means that a b-grade*/
   /* shipment is in process*/
   /* **********************************************************/

  if (TSWREC.XGPCD == "02"
   && TS0VW02.XQACD[TS0VWCPX] == "02"
   && TS0VW02.PC3PONBR[TS0VWCPX] > 0)

     /* *======> NEXT SENTENCE - bypass receipt items*/

  else

    TS0V-02710(); /* Select (S8) set  VFYPO001*/

    move 0 to TS0VW01.TS0VWRSX[1] for all; /* Initialize receipt qty array*/
    TS0VW01.TS0VWEFL = "N"; /* Initialize end loop flag*/

    while (TS0VW01.TS0VWEFL == "N") /* While rows are found*/

      TS0V-02720(); /* Fetch (N8) next  VFYPO001*/

      if (TS0VW01.TS0VWEFL == "Y") /* If end of loop*/

        TS0V-02730(); /* Close (C8) set   VFYPO001*/

      end

    end

    TS0VW03.TS0VWRSA[TS0VWGCX] = TS0VW01.TS0VWRSA;

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02700 ********************/
end // end TS0V-02700

// Select (S8) set       VFYPO001
Function TS0V-02710()
   /* ------------------------------------------------------------*/

                 /* SELECT SET OF RECEIPT ROWS*/

   /* ------------------------------------------------------------*/

  set PCMREC empty;

  PCMREC.XWHCD = TSWREC.XWHCD; /* warehouse*/
  PCMREC.XGPCD = TSWREC.XGPCD; /* product code*/


  PCMREC.YMTCD = PC6REC.YMTCD; /* mode code*/


  PCMREC.PC3PONBR = TS0VW02.PC3PONBR[TS0VWCPX]; /* po number*/
  PCMREC.PC2CUXID = TS0VW02.PC2CUXID[TS0VWCPX]; /* cust xref*/
  PCMREC.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX]; /* style number*/
  PCMREC.SY2CLRID = TS0VW02.SY2CLRID[TS0VWCPX]; /* color number*/
  PCMREC.XDMCD = TS0VW02.XDMCD[TS0VWCPX]; /* dimension code*/
   /* MOVE TS0VW02.XQACD(TS0VWCPX) TO PCMREC.XQACD;*/
  PCMREC.XQACD = "*"; /* wildcard quality code*/
  PCMREC.XOWCD = TS0VW02.XOWCD[TS0VWCPX]; /* owner group*/
  PCMREC.PC2INSEG = TS0VW02.PC2INSEG[TS0VWCPX]; /* spec difference*/
  PCMREC.XPGCD = TS0VW02.XPGCD[TS0VWCPX]; /* spec difference*/
  PCMREC.XUMCD = TS0VW02.XUMCD[TS0VWCPX]; /* unit of measure*/

  if (TS0VW02.OP1CUOID[TS0VWCPX] > 0
   && TS0VW02.OP1NORID[TS0VWCPX] > 0)
    TS0VW01.TS0VW-CUST-ORD-ID = TS0VW02.OP1CUOID[TS0VWCPX];
    PCMREC.OP1PARTN = TS0VW01.OP1PARTN; /* partition character*/
    PCMREC.OP1CUOID = TS0VW02.OP1CUOID[TS0VWCPX]; /* cust ord id*/
    PCMREC.OP1NORID = TS0VW02.OP1NORID[TS0VWCPX]; /* nike ord id*/
  else
    PCMREC.OP1PARTN = " "; /* partition character*/
    PCMREC.OP1CUOID = 0; /* cust ord id*/
    PCMREC.OP1NORID = 0; /* nike ord id*/
  end


  if (TSWREC.XGPCD == "03"
   && TSWREC.XWHCD != "18"
   && TS0VW02.XQACD[TS0VWCPX] == "02")
    PCMREC.XWHCD = "*";
    PCMREC.PC2CUXID = "*";
    PCMREC.XOWCD = "*";
    PCMREC.XUMCD = "*";
    PCMREC.PC2INSEG = "*";
    PCMREC.OP1CUOID = -1;
    PCMREC.OP1NORID = -1;
    PCMREC.OP1PARTN = "*";
    PCMREC.YMTCD = "*"; /* wildcard Mode code*/
  end

  if (TSFREC.YSTCD == "AR")
    PCMREC.OP1CUOID = -1; /* cust ord id*/
    PCMREC.OP1NORID = -1; /* nike ord id*/
    PCMREC.OP1PARTN = "*"; /* partition character*/
  end

  if (TSFREC.YSTCD == "DC")
    PCMREC.YMTCD = "*"; /* wildcard Mode code for DC shipments*/
  end

  call "IO3680" ("SG", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02710"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/
    TA1REC.TA1TBLKE = PCMREC.PCMKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02710"; /* Process name*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02710 ********************/
end // end TS0V-02710

// Fetch  (N8) next row  VFYPO001
Function TS0V-02720()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VFYPO001*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("NG", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0VW01.TS0VWEFL = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0VW01.TS0VWEFL = "Y"; /* end the loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-02720"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-02720"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    else

      TS0VW01.TS0VWIX3 = 1; /* initialize index*/

      while (TS0VW01.TS0VWIX3 <= 40) /* until end of array*/

        TS0VW01.TS0VWWK1 = 0;
        TS0VW01.TS0VWWK2 = 0;
        TS0VW01.TS0VWWK1 = PCMREC.PCMRCPTQ[TS0VWIX3];
        TS0VW01.TS0VWWK2 = TS0VW01.TS0VWRSX[TS0VWIX3];
        TS0VW01.TS0VWRSX[TS0VWIX3] = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWWK2;

         /* ** Add to receipt total ***/
        TS0VW01.TS0VWWK1 = 0;
        TS0VW01.TS0VWWK2 = 0;
        TS0VW01.TS0VWWK1 = TS0VW03.TS0VWRSQ[TS0VWGCX];
        TS0VW01.TS0VWWK2 = PCMREC.PCMRCPTQ[TS0VWIX3];
        TS0VW03.TS0VWRSQ[TS0VWGCX] = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWWK2;

        TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 + 1;

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02720 ********************/
end // end TS0V-02720

// Close  (C8) set       VFYPO001
Function TS0V-02730()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VFYPO001*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("CG", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-02730"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02730"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02730 ********************/
end // end TS0V-02730

// Get shipped quantities
Function TS0V-02800()
   /* **********************************************************/
   /* Select set and accumulate shipped item size quantities*/
   /* Use seq# if avilable, Else use long key to get shp qtys*/
   /* **********************************************************/
  if (TS0VW02.PC-ITM-SEQ-NBR[TS0VWCPX] == 0) /* If seq# zero, pass*/
                                          /* long key to VCPLHD02*/
    TS0V-02810(); /* ===> Select (S3) set VCPLHD02*/

    move 0 to TS0VW01.TS0VWSSX[1] for all; /* Initialize shipped qty array*/
    TS0VW01.TS0VWEFL = "N"; /* Initialize end loop flag*/

    while (TS0VW01.TS0VWEFL == "N") /* While rows are found*/

      TS0V-02820(); /* ===> Fetch  (N3) next row   VCPLHD02*/

      if (TS0VW01.TS0VWEFL == "N") /* If not end of loop*/

        if (TSTREC.TSFSHPID != TS0VM001.TSFSHPID /* If not this shipment/pl*/
         || TSTREC.TSIPLNBR != TS0VW03.TSIPLNBR[TS0VWGCX])

          if (TSTREC.TSISTAT == "IT" /* Only count in-transit quantities*/
           || TSTREC.TSISTAT == "CC") /* Or custom-cleared*/

          /* OR TSTREC.TSISTAT EQ 'ER'   ; Don't count in-error qtys*/
          /* OR TSTREC.TSISTAT EQ 'CR'   ; Don't count 'cr' status*/

            set TSHREC empty; /* clear work record*/
            set TS5REC empty; /* clear work record*/
            TS5REC.TSACARCD = TSTREC.TSACARCD; /* move in keys*/
            TS5REC.TS5CRAFT = TSTREC.TS5CRAFT;

            TS0V-01200(); /* ===> Select (S ) unique     VCRAFT01*/

            if (TS5REC.YMTCD == TS0VW01.YMTCD) /* If modes are equal*/

              TS0V-02840(); /* ===> Get P.L. size qtys*/
                                   /* quantities*/

            end

          end

        end

      else

        TS0V-02850(); /* ===> Close  (C3) set VCPLHD02*/

      end

    end

  else /* ===> When seq# available,*/
                                  /* use short key*/
    TS0V-02815(); /* ===> Select (S9) set VCPLHDJ4*/

    move 0 to TS0VW01.TS0VWSSX[1] for all; /* Initialize shipped qty array*/
    TS0VW01.TS0VWEFL = "N"; /* Initialize end loop flag*/

    while (TS0VW01.TS0VWEFL == "N") /* While rows are found*/

      TS0V-02825(); /* ===> Fetch  (N9) next row VCPLHDJ4*/

      TS0V-02826(); /* Move some VCPLHDJ4 fields to TSTREC*/

      if (TS0VW01.TS0VWEFL == "N") /* If not end of loop*/

        if (TSTREC.TSFSHPID != TS0VM001.TSFSHPID /* If not this shipment/pl*/
         || TSTREC.TSIPLNBR != TS0VW03.TSIPLNBR[TS0VWGCX])

          if (TSTREC.TSISTAT == "IT" /* Only count in-transit quantities*/
           || TSTREC.TSISTAT == "CC") /* Or custom-cleared*/

          /* OR TSTREC.TSISTAT EQ 'ER'   ; Don't count in-error qtys*/
          /* OR TSTREC.TSISTAT EQ 'CR'   ; Don't count 'cr' status*/

            set TSHREC empty; /* clear work record*/
            set TS5REC empty; /* clear work record*/
            TS5REC.TSACARCD = TSTREC.TSACARCD; /* move in keys*/
            TS5REC.TS5CRAFT = TSTREC.TS5CRAFT;

            TS0V-01200(); /* ===> Select (S ) unique     VCRAFT01*/

            if (TS5REC.YMTCD == TS0VW01.YMTCD) /* If modes are equal*/

              TS0V-02840(); /* ===> Get P.L. size qtys*/
                                   /* quantities*/

            end

          end

        end

      else

        TS0V-02855(); /* ===> Close  (C9) set VCPLHDJ4*/

      end

    end

  end

  TS0VW03.TS0VWSSA[TS0VWGCX] = TS0VW01.TS0VWSSA;

   /*  */
   /* ********************** End of TS0V-02800 ********************/
end // end TS0V-02800

// Select (S3) set       VCPLHD02
Function TS0V-02810()
   /* ------------------------------------------------------------*/

           /* SELECT PACKING LIST FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  set TSTREC empty;

  TSTREC.XWHCD = TSWREC.XWHCD; /* warehouse*/
  TSTREC.XGPCD = TSWREC.XGPCD; /* product code*/
  TSTREC.PC3PONBR = TS0VW02.PC3PONBR[TS0VWCPX]; /* po number*/
  TSTREC.PC2CUXID = TS0VW02.PC2CUXID[TS0VWCPX]; /* customer xref*/
  TSTREC.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX]; /* style number*/
  TSTREC.SY2CLRID = TS0VW02.SY2CLRID[TS0VWCPX]; /* color number*/
  TSTREC.XDMCD = TS0VW02.XDMCD[TS0VWCPX]; /* dimension code*/
   /* MOVE TS0VW02.XQACD(TS0VWCPX) TO TSTREC.XQACD;*/
  TSTREC.XQACD = "*"; /* wildcard quality code*/
  TSTREC.XOWCD = TS0VW02.XOWCD[TS0VWCPX]; /* owner group*/
  TSTREC.PC2INSEG = TS0VW02.PC2INSEG[TS0VWCPX]; /* spec difference*/
  TSTREC.XPGCD = TS0VW02.XPGCD[TS0VWCPX]; /* spec difference*/
  TSTREC.XUMCD = TS0VW02.XUMCD[TS0VWCPX]; /* unit of measure*/

  if (TS0VW02.OP1CUOID[TS0VWCPX] > 0
   && TS0VW02.OP1NORID[TS0VWCPX] > 0)
    TS0VW01.TS0VW-CUST-ORD-ID = TS0VW02.OP1CUOID[TS0VWCPX];
    TSTREC.OP1PARTN = TS0VW01.OP1PARTN; /* Partition character;*/
    TSTREC.OP1CUOID = TS0VW02.OP1CUOID[TS0VWCPX]; /* cust ord id*/
    TSTREC.OP1NORID = TS0VW02.OP1NORID[TS0VWCPX]; /* nike ord id*/
  else
    TSTREC.OP1PARTN = " "; /* Partition character;*/
    TSTREC.OP1CUOID = 0; /* cust ord id*/
    TSTREC.OP1NORID = 0; /* nike ord id*/
  end

  call "IO4230" ("S3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02810"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
    TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02810"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02810 ********************/
end // end TS0V-02810

// Select (S9) set       VCPLHDJ4
Function TS0V-02815()
   /* ------------------------------------------------------------*/

           /* SELECT PACKING LIST FROM DTRANS.VCPLHDJ4*/

   /* ------------------------------------------------------------*/

  set VCPLHDJ4 empty;

  VCPLHDJ4.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VCPLHDJ4.PC-PO-NBR = TS0VW02.PC3PONBR[TS0VWCPX]; /* po number*/
  VCPLHDJ4.PC-ITM-SEQ-NBR = TS0VW02.PC-ITM-SEQ-NBR[TS0VWCPX];

  call "VCPLHDJ4" ("S9", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02815"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
    TA1REC.TA1TBLKE = " "; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02815"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02815 ********************/
end // end TS0V-02815

// Fetch  (N3) next row  VCPLHD02
Function TS0V-02820()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("N3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
    /* ========== NEXT SENTENCE ========>*/
  else
    TS0VW01.TS0VWEFL = "Y"; /* end the loop*/
    if (SQLCA.VAGen_SQLCODE != 100) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-02820"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-02820"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end



   /* **                                                        ***/
   /* ********************** End of TS0V-02820 ********************/
end // end TS0V-02820

// Fetch  (N9) next row  VCPLHDJ4
Function TS0V-02825()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHDJ4*/

   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("N9", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
    /* ========== NEXT SENTENCE ========>*/
  else
    TS0VW01.TS0VWEFL = "Y"; /* end the loop*/
    if (SQLCA.VAGen_SQLCODE != 100) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-02825"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-02825"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end



   /* **                                                        ***/
   /* ********************** End of TS0V-02825 ********************/
end // end TS0V-02825

// Some CPLHDJ4 flds moved>TSTREC
Function TS0V-02826()
   /* **********************************************************/
   /* Some VCPLHDJ4 fields are moved to TSTREC since*/
   /* subsequent processes use TSTREC.*/
   /* **********************************************************/

  TSTREC.TSFSHPID = VCPLHDJ4.TS-NIKE-SHP-ID;
  TSTREC.TSIPLNBR = VCPLHDJ4.TS-NIKE-PL-NBR;
  TSTREC.TSISTAT = VCPLHDJ4.TS-CPL-STAT-CD;
  TSTREC.TSACARCD = VCPLHDJ4.TS-CARR-CD;
  TSTREC.TS5CRAFT = VCPLHDJ4.TS-CRAFT-NBR;
  TSTREC.PC3PONBR = VCPLHDJ4.PC-PO-NBR;

   /*  */
   /* ********************** End of TS0V-02826  *******************/
end // end TS0V-02826

// Get packing list size rows
Function TS0V-02840()
   /* **********************************************************/
   /* Select set and accumulate packing list item rows*/
   /* **********************************************************/

  TS0V-02841(); /* Select (S2) set   VCPLIT01*/

  TS0VW01.TS0VWEFL = "N"; /* Initialize end switch*/

  while (TS0VW01.TS0VWEFL == "N") /* While rows are found*/

    TS0V-02842(); /* Fetch  (N2) next  VCPLIT01*/
                                   /* qtys*/

    if (TS0VW01.TS0VWEFL == "Y") /* If end of loop indicated*/

      TS0V-02844(); /* Close  (C2) next  VCPLIT01*/

    end

  end

  TS0VW01.TS0VWEFL = "N"; /* Reinitialize end switch*/


   /* **                                                        ***/
   /* ********************** End of TS0V-02840 ********************/
end // end TS0V-02840

// Select (S2) set       VCPLIT01
Function TS0V-02841()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPLIT TABLE ROWS*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TSTREC.TSFSHPID; /* move in id*/
  TSOREC.TSIPLNBR = TSTREC.TSIPLNBR; /* move in pl number*/

  call "IO2580" ("S2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02841"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02841"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02841 ********************/
end // end TS0V-02841

// Fetch  (N2) next row  VCPLIT01
Function TS0V-02842()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPLIT TABLE ROW*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0VW01.TS0VWEFL = "Y"; /* End loop*/
  else

    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-02842"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0VM001.XXXPRCNM = "V-02842"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    else

      if (TSOREC.TSHNKCN == TSHREC.TSHNKCN) /* ===> Nike container nbrs*/
        /* ===> CPLIT01 D.B.  vs.  CNTNR01 D.B.*/

        /* ===== NEXT SENTENCE =======>*/

      else /* ===>*/

        TSHREC.TSFSHPID = TSOREC.TSFSHPID; /* ===> Nike Ship id*/
        TSHREC.TSHNKCN = TSOREC.TSHNKCN; /* ===> Nike container nbr*/

        TS0V-02843(); /* *===> Select (SA) unique   VCNTNR01*/

      end

      if (TSHREC.TSHSTAT != "RC")
        if (TSOREC.SY5SZID > 0
         && TSOREC.SY5SZID <= 40)
          TS0VW01.TS0VWIX3 = TSOREC.SY5SZID;
          TS0VW01.TS0VWSSX[TS0VWIX3] = TS0VW01.TS0VWSSX[TS0VWIX3] +         TSOREC.TSOSHPQT;

        /* ** Add to total shipmnt qty ***/
          TS0VW01.TS0VWWK1 = 0;
          TS0VW01.TS0VWWK2 = 0;
          TS0VW01.TS0VWWK1 = TS0VW03.TS0VWSSQ[TS0VWGCX];
          TS0VW01.TS0VWWK2 = TSOREC.TSOSHPQT;
          TS0VW03.TS0VWSSQ[TS0VWGCX] = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWWK2;

        end /* ===> size in range*/
      end /* ===> Container not received*/
    end /* ===> unexpected return code*/
  end /* ===> Selected set*/


   /* **                                                        ***/
   /* ********************** End of TS0V-02842 ********************/
end // end TS0V-02842

// Select (SA) unique    VCNTNR01
Function TS0V-02843()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the container table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-02843"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02843"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02843 ********************/
end // end TS0V-02843

// Close  (C2) set       VCPLIT01
Function TS0V-02844()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-02844"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02844 ********************/
end // end TS0V-02844

// Close  (C3) set       VCPLHD02
Function TS0V-02850()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("C3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-02850"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02850"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===>exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02850 ********************/
end // end TS0V-02850

// Close  (C9) set       VCPLHDJ4
Function TS0V-02855()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHDJ4*/

   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("C9", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-02855"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-02855"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===>exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-02855 ********************/
end // end TS0V-02855

// ---> Check origin & set flags
Function TS0V-03000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK ORIGIN AND SET FLAGS*/
   /*  */
   /* 1) Select the shipment header for shipment status code.*/
   /* 2) Check the from application to determine the*/
   /* pf3 key set function and the security set up*/
   /* flags.*/
   /*  */
   /* ------------------------------------------------------------*/

  TS0V-03100(); /* Select shipment status code*/

  if (COMMAREA.CAFROMAP == "TS0P") /* If coming from 'TS0P'*/

    TS0VM001.TS0VMPF3 = "PF3:EXIT TO STYLE INQUIRY";
    TS0VM001.TS0VMPA2 = "PA2:CANCEL";
    TS0VW01.TS0VWMAP = "1"; /* set for map 1*/

    TS0VW01.TS0VWOPT = "I"; /* Set option flag to inquiry*/
    TS0VM001.TS0VMHDG = "INQUIRY"; /* Set map heading*/

  else

    if (COMMAREA.CAFROMAP == "TS0J") /* If coming from 'TS0J'*/

      TS0VM001.TS0VMPA2 = "PA2:CANCEL";
      TS0VM001.TS0VMPF3 = "PF3:EXIT TO MAINT MENU";
      TS0VW01.TS0VWMAP = "1"; /* set for map 1*/

      if (COMMAREA.CAADDFL == "Y" /* If user has update security*/
       && COMMAREA.CACHGFL == "Y")

        TS0V-03200(); /* Set the flags*/

      else

        TS0VW01.TS0VWOPT = "I"; /* Set option flag to inquiry*/
        TS0VM001.TS0VMHDG = "INQUIRY"; /* Set map heading*/

      end

    else

      if (COMMAREA.CAFROMAP == "TS01") /* If coming from 'TS01'*/

        TS0VM001.TS0VMPA2 = "PA2:CANCEL";
        TS0VW01.TS0VWMAP = "1"; /* set for map 1*/

        if (COMMAREA.CAADDFL == "Y" /* If user has update security*/
         && COMMAREA.CACHGFL == "Y")

          TS0V-03300(); /* ===> Set map literal*/

        else

          TSWREC.TSWOPTSW = "I";
          TS0VW01.TS0VWOPT = "I"; /* Set option flag to inquiry*/
          TS0VM001.TS0VMHDG = "INQUIRY"; /* Set map heading*/
          TS0VM001.TS0VMPF3 = "PF3:EXIT TO P/L BROWSE";

        end

      else

        if (COMMAREA.CAFROMAP == "TS0U") /* If coming from 'TS0U'*/

          TS0VM001.TS0VMP18 = "                   ";
          TS0VM001.TS0VMPA2 = "PA2:REJECT SHIPMENT";
          TS0VW01.TS0VWMAP = "1"; /* set for map 1*/
          TS0VM001.TS0VMHDG = "ADD   "; /* Set map heading*/
          TS0VM001.TS0VMPF3 = "                      ";
          TS0VW01.TS0VWOPT = "A"; /* Set option flag to inquiry*/

        else

          if (COMMAREA.CAFROMAP == "TS02") /* If coming from 'TS02'*/

            if (TSWREC.TSWFRAPP == "TS0P") /* If coming from 'TS0P'*/

              TS0VM001.TS0VMPF3 = "PF3:EXIT TO STYLE INQUIRY";
              TS0VM001.TS0VMPA2 = "PA2:CANCEL";
              TS0VW01.TS0VWMAP = "1"; /* set for map 1*/

              TS0VW01.TS0VWOPT = "I"; /* Set option flag to inquiry*/
              TS0VM001.TS0VMHDG = "INQUIRY"; /* Set map heading*/

            else

              if (TSWREC.TSWFRAPP == "TS01") /* If coming from 'TS01'*/

                TS0VM001.TS0VMPA2 = "PA2:CANCEL";
                TS0VW01.TS0VWMAP = "1"; /* set for map 1*/

                if (COMMAREA.CAADDFL == "Y" /* If user has update security*/
                 && COMMAREA.CACHGFL == "Y")

                  TS0V-03300(); /* ===> Set map literal*/

                else

                  TS0VW01.TS0VWOPT = "I";
                                   /* Set option flag to inquiry*/
                  TS0VM001.TS0VMHDG = "INQUIRY"; /* Set map heading*/
                  TS0VM001.TS0VMPF3 = "PF3:EXIT TO P/L BROWSE";

                end

              end

            end

          end /* If coming from 'TS02'*/

        end

      end

    end

  end

   /* ===> init enterable map fields*/

  TS0VW01.TSPFCIVC = TS0VW03.TSPFCIVC[1];
  TS0VW01.TSPFILE = TS0VW03.TSPFILE[1];
  TS0VW01.TSILOCR = TS0VW03.TSILOCR[1];
  TS0VW01.TSIMSCFL = TS0VW03.TSIMSCFL[1];
  TS0VW01.TSIMSCGR = TS0VW03.TSIMSCGR[1];
  TS0VW01.TSRTEXT = TS0VW03.TSRTEXT[1];
  TS0VW01.PC-XCT-ORIG-CD = TS0VW03.PC-XCT-ORIG-CD[1];

   /* **                                                        ***/
   /* ********************** End of TS0V-03000 ********************/
end // end TS0V-03000

// Select (S ) Unique    VSHPHD01
Function TS0V-03100()
   /* ------------------------------------------------------------*/

               /* SELECT THE SHIPMENT HEADER*/

       /* 1) Select the shipment header in order to get the*/
          /* shipment status code.*/

   /* ------------------------------------------------------------*/

  set TSFREC empty; /* Clear the record*/
  TSFREC.TSFSHPID = TS0VW02.TSFSHPID[TS0VWCPX];

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Return code ok*/
    /* ======== NEXT SENTENCE ==========>*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* If other than a valid code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-03100"; /* Process name*/
      TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSFREC.TSFKEY; /* Table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      exit stack; /* ===> exit to re-display map*/

    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-03100 ********************/
end // end TS0V-03100

// Set flags
Function TS0V-03200()
   /* ------------------------------------------------------------*/

                      /* SET THE FLAGS*/

       /* 1) Find the shipment status code in YSSTBL.*/
       /* 2) Set flags accordingly.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* Check for any detail in the gpc-cpl array*/
   /* ------------------------------------------------------------*/
  TS0VW01.TS0VWFND = "N"; /* Set found flag to no*/
  TS0VW01.TS0VWIX1 = 1; /* Set up index*/

  while (TS0VW01.TS0VWIX1 <= TS0VW01.TS0VWMGC /* While le max*/
   && TS0VW03.TSIPLNBR[TS0VWIX1] > 0) /* and data exists*/

    if (TS0VW03.TSIDETFL[TS0VWIX1] == "Y") /* If detail exists*/
      TS0VW01.TS0VWFND = "Y"; /* Set found flag to yes*/
      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWMGC + 1; /* end loop*/
    else
      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* incr loop*/
    end

  end

  if (TSFREC.YSSCD in YSSTBL.YSSCD /* If code in table and active*/
   && YSSTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    if (YSSTBL.YSSUPDFL[sysVar.arrayIndex] == "Y") /* If code allows updates*/
      if (TS0VW01.TS0VWFND == "Y") /* If detail exists*/
        TS0VW01.TS0VWOPT = "C"; /* Set option to change*/
        TS0VM001.TS0VMHDG = "CHANGE"; /* Set headings*/
      else
        TS0VW01.TS0VWOPT = "A"; /* Set option to add*/
        TS0VM001.TS0VMHDG = "ADD"; /* Set headings*/
      end
    else
      TS0VW01.TS0VWOPT = "I"; /* Set option to inquiry*/
      TS0VM001.TS0VMHDG = "INQUIRY"; /* Set headings*/
    end

    TS0VW01.TS0VWFND = "N"; /* Set found flag to no*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-03200 ********************/
end // end TS0V-03200

// Set map literals
Function TS0V-03300()
   /* ------------------------------------------------------------*/
   /* Set map literals on the map*/
   /* ------------------------------------------------------------*/


  if (TSWREC.TSWOPTSW == "D") /* ===> If passed option is "D"*/

    TS0VW01.TS0VWOPT = "D";
                                   /* ===> Set option flag to delete*/
    TS0VM001.TS0VMHDG = "DELETE"; /* ===> Set map heading*/
    TS0VM001.TS0VMPF3 = "PF3:EXIT TO ABORT";

  else

    if (TSWREC.TSWOPTSW == "M") /* ===> If passed option is "M"*/

      TS0VM001.TS0VMPF3 = "PF3:EXIT TO P/L BROWSE";
      TS0VM001.TS0VMHDG = "MAINT."; /* ===> Set map heading*/

      TS0V-03200(); /* ===> Set the flags*/

    else

      TS0VW01.TS0VWOPT = "I";
                                   /* ===> Set option flag to inquiry*/
      TS0VM001.TS0VMHDG = "INQUIRY";
                                   /* ===> Set map heading*/
      TS0VM001.TS0VMPF3 = "PF3:EXIT TO P/L BROWSE";

    end

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-03300 ********************/
end // end TS0V-03300

// ===> MAINLINE PROCESSING <====
Function TS0V-04000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, indicate error and exit to Master Menu.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWMAP == "1") /* Map 1 was requested*/

    TS0V-00001(); /* Display map 1*/

  else

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-04000"; /* Process name*/
    TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
    TA1REC.TA1MAP = TS0VW01.TS0VWMAP; /* Map name*/
    SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    XSPF4(); /* Exit to Master Menu*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0V-04000 ********************/
end // end TS0V-04000

// ---> Obtain data for display
Function TS0V-10000()
   /* ------------------------------------------------------------*/
   /*  */
   /* /* OBTAIN DATA FOR DISPLAY*/
   /*  */
   /* 1) Cycle through all the gpc-cpl packing lists and*/
   /* select the cartons for those with detail*/
   /* 2) When selecting the cartons, compress the cartons into*/
   /* ranges which will exist in the map working storage.*/
   /*  */
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWM20 = 1; /* ===> Max    index for TS0VW20 record*/
  TS0VW01.TS0VWIX2 = 1; /* ===> Set up index for TS0VW20 record*/
  TS0VW01.TS0VWIX1 = 1; /* ===> Set temp storage index*/
  TS0VW01.TS0VWGCX = 1; /* ===> Set up index for gpc-cpl array.*/
  TS0VW01.TS0VWSWE = "Y"; /* ===> init initial edit switch*/

  set TS0VW04 empty; /* ===> Set temp storage record empty*/
  set TS0VW20 empty; /* ===> set original carton table empty*/
  set TS0VW25 empty;

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS0VW01.XXXTSLEN = 858; /* Temporary storage page length*/
   /* ==> (22 display lines) * ( 39 length of display line) =  858*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TS0VS-TS-1(); /* ===> Purge Temp. Storage*/

  while (TS0VW01.TS0VWGCX <= TS0VW01.TS0VWMGC /* While le max gpc-cpl lines*/
   && TS0VW03.TSIPLNBR[TS0VWGCX] > 0       /* and data exists*/
   && COMMAREA.CAFROMAP != "TS0U") /* ===> not in "add function"*/

    if (TS0VW03.TSIDETFL[TS0VWGCX] == "Y") /* If cpl has detail*/

      TSOREC.TSFSHPID = TSWREC.TSFSHPID; /* move in id*/
      TSOREC.TSIPLNBR = TS0VW03.TSIPLNBR[TS0VWGCX]; /* move pl number*/

      TS0V-11000(); /* Select the set of cartons*/

      TS0VW01.TS0VWSWC = "N"; /* Set end of data switch*/
      TS0VW01.TS0VWSCN = 0; /* Set save carton number*/
      TS0VW01.TS0VWSSZ = 0; /* Set save size id*/


      TS0V-12000(); /* Fetch the carton*/
      /* -------> Prime Read*/
               /* ----------*/

      while (TS0VW01.TS0VWSWC == "N") /* Until end of selected set*/


        if (TSOREC.SY5SZID != TS0VW01.TS0VWSSZ) /* ===> saved sz id*/

          TS0V-13000(); /* ===> Select the size descriptions*/

        end /* ===> P.L. change*/


        TS0V-14000(); /* ===> save the data in W.S. records &*/
                                   /* T.S.*/

        TS0VW01.TS0VWSSZ = TSOREC.SY5SZID; /* ===> save size id*/

        TS0V-12000(); /* Fetch the carton*/
        /* -------> Driving Read*/
                 /* ------------*/
      end /* ===> Until end of selected set*/


      TS0V-15000(); /* Close the selected set*/


    end /* ===> If cpl has detail*/


    TS0VW01.TS0VWGCX = TS0VW01.TS0VWGCX + 1; /* ===> Incr gpc-cpl index*/

  end /* ===> While le max gpc-cpl lines*/

  set TS0VW26 empty;
  TS0VW25.TS0VW25IX = 1;
  TS0VW26.TSFSHPID = TSWREC.TSFSHPID; /* move in id*/
  TS0V-10001();
  TS0VW01.TS0VWSWC = "N"; /* Set end of data switch*/
  TS0V-10002();

  if (TS0VW01.TS0VWSWC == "N")
    if (TS0VW26.TSIPLNBR in TS0VW03.TSIPLNBR)
      TS0VW25.TS-NIKE-CNTNR-NBR[TS0VW25IX] = TS0VW26.TSHNKCN;
      TS0VW25.TS-NIKE-PL-NBR[TS0VW25IX] = TS0VW26.TSIPLNBR;
      TS0V-10003();
      TS0VW25.SY-CLR-CD-ID[TS0VW25IX] = TSIREC.SY2CLRID;
    end
  end

  while (TS0VW01.TS0VWSWC == "N") /* Until end of selected set*/
    TS0V-10002();
    TS0V-10003();
    TS0VW25.TMP-CLR-CD-ID = TSIREC.SY2CLRID;
    if (TS0VW01.TS0VWSWC == "N")
      TS0VW25.TS0VW25IX1 = 1;
      while (TS0VW25.TS0VW25IX1 <= TS0VW25.TS0VW25IX)
        if (TS0VW26.TSHNKCN == TS0VW25.TS-NIKE-CNTNR-NBR[TS0VW25IX1]
         && TS0VW25.TMP-CLR-CD-ID == TS0VW25.SY-CLR-CD-ID[TS0VW25IX1]
         && TS0VW26.TSIPLNBR == TS0VW25.TS-NIKE-PL-NBR[TS0VW25IX1])
          TS0VW25.TS0VW25IX1 = TS0VW25.TS0VW25IX1 + 1;
        else
          TS0VW25.TS0VW25IX1 = TS0VW25.TS0VW25IX1 + 1;
          if (TS0VW25.TS0VW25IX1 > TS0VW25.TS0VW25IX)
            if (TS0VW26.TSIPLNBR in TS0VW03.TSIPLNBR)
              TS0VW25.TS0VW25IX = TS0VW25.TS0VW25IX + 1;
              TS0VW25.TS-NIKE-CNTNR-NBR[TS0VW25IX] = TS0VW26.TSHNKCN;
              TS0VW25.TS-NIKE-PL-NBR[TS0VW25IX] = TS0VW26.TSIPLNBR;
              TS0VW25.SY-CLR-CD-ID[TS0VW25IX] = TSIREC.SY2CLRID;
              TS0VW25.ARRCNT = TS0VW25.TS0VW25IX;
              TS0VW25.TS0VW25IX1 = TS0VW25.TS0VW25IX + 1;
            end
          end
        end
      end
    end
  end

  TS0V-10004();

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWIX1 > 1) /* ===> Page was formatted*/

    TS0VS-TS-4(); /* ===> Add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
     /* Add a blank page to temp storage to allow for new carton*/
   /* detail to be entered for the add process*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0U") /* ===>  "ADD function"*/

    TS0VS-TS-4(); /* ===> Add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, load a blank page to T.S.*/
   /* so detail can be added to P.L.*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TA5TSQIX == 0) /* ===> No pages formatted*/

    TS0VS-TS-4(); /* ===> Add page to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* ===> No message to display*/
   || converseVar.validationMsgNum == 114) /* ===>*/

    TS0VW01.XXXTSPAG = 1; /* ===> Desired page number*/

    TS0VS-TS-2(); /* ===> Read 1st to temporary storage*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWM20 = TS0VW01.TS0VWIX2; /* ===> Save Max index*/
  TS0VW01.TS0VWSWR = "N"; /* ===> Request for data switch*/
  TS0VW01.TS0VWSWF = "Y"; /* ===> Format the map switch*/


   /* **                                                        ***/
   /* ********************** End of TS0V-10000 ********************/
end // end TS0V-10000

// Select (SA) unique    VCPLHD04
Function TS0V-10001()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPLIT TABLE ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("S1", SQLCA, TS0VW26) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-10001"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-10001"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-10001*********************/
end // end TS0V-10001

// Select (SA) unique    VCPLHD04
Function TS0V-10002()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPLIT TABLE ROW*/

      /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N1", SQLCA, TS0VW26) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return codes*/

  /* Next sentence*/
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS0VW01.TS0VWSWC = "Y";
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-10002"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-10002"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-10002 ********************/
end // end TS0V-10002

// Select (SA) unique    VCPLHD04
Function TS0V-10003()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT THE PACKING LIST ROW*/
   /*  */
   /* 1) Select the container packing list row to get all the*/
   /* fields.*/
   /*  */
   /* ------------------------------------------------------------*/

  set VCPLHD04 empty;
  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSFSHPID;
  VCPLHD04.TS-NIKE-PL-NBR = TS0VW26.TSIPLNBR;
  TSGREC.TSNFNC = "SA"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0VW14.VCPLHD04-WORK-AREA = VCPLHD04.VCPLHD04-GRP;
    TS0VW14.TSIREC-FIXED-1 = TS0VW14.VCPLHD04-FIXED-1;
    TS0VW14.TSIREC-FIXED-2 = TS0VW14.VCPLHD04-FIXED-2;
    TS0VW14.TSIREC-FIXED-3 = TS0VW14.VCPLHD04-FIXED-3;
    TSIREC.TSIGROUP = TS0VW14.TSIREC-WORK-AREA;
  else

    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen map 1*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-10003"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-10003"; /* Process name*/


    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/


    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-10003 ********************/
end // end TS0V-10003

// Select (SA) unique    VCPLHD04
Function TS0V-10004()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C1", SQLCA, TS0VW26) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-10004"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-10004"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-10004 ********************/
end // end TS0V-10004

// Select (S4) set       VCPLIT01
Function TS0V-11000()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPLIT TABLE ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("S4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-11000"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-11000"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-11000 ********************/
end // end TS0V-11000

// Fetch  (N4) next row  VCPLIT01
Function TS0V-12000()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPLIT TABLE ROW*/

      /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return codes*/
    /* ====== NEXT SENTENCE =========>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS0VW01.TS0VWSWC = "Y"; /* ===> end of cursor switch*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-12000"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-12000"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-12000 ********************/
end // end TS0V-12000

// Select the size description
Function TS0V-13000()
   /* ------------------------------------------------------------*/

             /* SELECT SIZE FROM DTRANS.VSCALE01*/

    /* 1) move in the keys*/
    /* 2) select the number*/


   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.PG3FUNCD = "PC"; /* translator function*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  PG3REC.XGPCD = TSWREC.XGPCD; /* keys*/
  PG3REC.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX];
  PG3REC.SY2CLRID = TS0VW03.SY2CLRID[TS0VWGCX];
  PG3REC.XDMCD = TS0VW02.XDMCD[TS0VWCPX];
  PG3REC.XQACD = "**";

  TA1REC.TA1PGMNM = "V-13000"; /* What executes this sgrp*/

  XSTS301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                   /* SIZE BREAKS.*/

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

    converseLib.validationFailed(114);
  end

  if (PG3REC.PG3RETCD == "00" /* If good return code*/
   || converseVar.validationMsgNum == 114)
    /* -----------------------------------*/
     /* save the size desc in T.S. record*/
    /* -----------------------------------*/
    if (TSOREC.SY5SZID > 0) /* If size id exists*/
      TS0VW01.TS0VWWK2 = TSOREC.SY5SZID; /* working index*/
      TS0VW01.SY4IDDSC = PG3REC.SY4IDDSC[TS0VWWK2];
    else
      TS0VW01.SY4IDDSC = "*****";
    end

  else

    if (PG3REC.PG3RETCD != "09") /* or not found*/
      /* ========  NEXT SENTENCE=======>*/
    else

      if (PG3REC.PG3RETCD == "09") /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0VM001.XXXPRCNM = "V-13000"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-13000 ********************/
end // end TS0V-13000

// Save data in T.S./W.S. record
Function TS0V-14000()
   /* ------------------------------------------------------------*/
   /*  */
   /* save   DATA FOR DISPLAY*/
   /*  */
   /* 1) Save the carton row in an origanal table "TS0VW20"*/
   /*  */
   /* 2) Save and consolidate ranges for like sizes & qtys/crtn*/
   /* in to size ranges even if they are in different*/
   /* containers.*/
   /*  */
   /* ------------------------------------------------------------*/


   /* ***/
   /* **---------------------------------------------------*/
   /* ** When the size id stays the same*/
   /* **  and the qtys per carton are the same*/
   /* ** - Increment the last saved "to" carton nbr*/
   /* ** -  If "from" carton nbr <= saved "to" carton nbr*/
   /* **    then*/
   /* **       add the qtys to the map's curr row range*/
   /* **    else*/
   /* **       create a new map's row range*/
   /* **---------------------------------------------------*/
   /* ***/

  TS0VW01.TS0VWPPC = TS0VW01.TS0VWCPC; /* ===> curr to prev (per carton)*/

  if (TSOREC.TSOTOCRT == 0)
    TSOREC.TSOTOCRT = TSOREC.TSOFRCRT;
  end

  TS0VW01.TS0VWWK3 = TSOREC.TSOTOCRT;
  TS0VW01.TS0VWWK4 = TSOREC.TSOFRCRT;
  TS0VW01.TS0VWWK5 = TS0VW01.TS0VWWK3 - TS0VW01.TS0VWWK4 + 1;

  if (TS0VW01.TS0VWWK5 > 0)
    TS0VW01.TS0VWCPC = TSOREC.TSOSHPQT / TS0VW01.TS0VWWK5;
  else
    TS0VW01.TS0VWCPC = 0;
  end


  TS0VW20.TSOGROUP[TS0VWIX2] = TSOREC.TSOGROUP;
  TS0VW20.TS0VWQPC[TS0VWIX2] = TS0VW01.TS0VWCPC;
  TS0VW20.SY2CLRID[TS0VWIX2] = TS0VW03.SY2CLRID[TS0VWGCX];

  if (TSOREC.SY5SZID == TS0VW01.TS0VWSSZ /* ===> sz id same*/
   && TS0VW01.TS0VWCPC == TS0VW01.TS0VWPPC)
                                   /* ===> curr = prev (per carton)*/

    TS0VW01.TS0VWSCN = TS0VW01.TS0VWSCN + 1; /* ===> incr. carton*/

    if (TSOREC.TSOFRCRT <= TS0VW01.TS0VWSCN) /* ===> carton*/

       /* **-----------------------------------------------------*/
       /* ** If the page has already been written to temp storage*/
       /* **   read it into back into the T.S. table record.*/
       /* **   update the last range with qtys & "to" carton*/
       /* **else*/
       /* **   update the previous range with qtys & "to" carton*/
       /* **-----------------------------------------------------*/

      if (TS0VW01.TS0VWIX1 == 1) /* ===> map index*/

        TS0V-14100(); /* ===> re-load/update the previous T.S.*/
                                   /* page*/

      else

         /* **-----------------------------------*/
         /* ** Calculate the total ship quantity.*/
         /* **-----------------------------------*/

        TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 - 1; /* ===> dcrm map index*/

        TS0VW01.TS0VWWK3 = TS0VW04.TSOSHPQT[TS0VWIX1];
        TS0VW01.TS0VWWK4 = TSOREC.TSOSHPQT;
        TS0VW01.TS0VWWK5 = TS0VW01.TS0VWWK3 + TS0VW01.TS0VWWK4;
        TS0VW04.TSOSHPQT[TS0VWIX1] = TS0VW01.TS0VWWK5;

         /* **-----------------------------------*/
        /* **  Save "to" range and carton #*/
         /* **-----------------------------------*/
        if (TSOREC.TSOTOCRT >= TS0VW01.TS0VWSCN) /* ===> Save carton #*/

          TS0VW04.TSOTOCRT[TS0VWIX1] = TSOREC.TSOTOCRT;
          TS0VW01.TS0VWSCN = TSOREC.TSOTOCRT; /* ===> Save carton #*/

        end

        TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> Incr map index*/

      end

    else /* ===> create new map range*/

       /* **------------------------------------*/
       /* ** Move records to map working storage*/
       /* **------------------------------------*/

      TS0VW04.TSFSHPID[TS0VWIX1] = TSOREC.TSFSHPID;
      TS0VW04.TSNIKCNT[TS0VWIX1] = TSOREC.TSHNKCN;
      TS0VW04.TSIPLNBR[TS0VWIX1] = TSOREC.TSIPLNBR;
      TS0VW04.TSOFRCRT[TS0VWIX1] = TSOREC.TSOFRCRT;
      TS0VW04.TSOTOCRT[TS0VWIX1] = TSOREC.TSOTOCRT;
      TS0VW04.SY2CLRID[TS0VWIX1] = TS0VW03.SY2CLRID[TS0VWGCX];
      TS0VW04.SY5SZID[TS0VWIX1] = TSOREC.SY5SZID;
      TS0VW04.SY4IDDSC[TS0VWIX1] = TS0VW01.SY4IDDSC;
      TS0VW04.TSOSHPQT[TS0VWIX1] = TSOREC.TSOSHPQT;
      TS0VW04.TS0VWQPC[TS0VWIX1] = TS0VW01.TS0VWCPC;

      TS0VW01.TS0VWSCN = TSOREC.TSOTOCRT; /* ===> save crt #*/

      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> Incr map index*/

      if (TS0VW01.TS0VWIX1 > 22) /* ===> T.S. Page full*/

        TS0VS-TS-4(); /* ===> Add page to temporary storage*/

      end /* ===> T.S. page full*/

    end /* ===> Saved carton # <= curr carton #*/

  else /* ===> create new map range*/

     /* **------------------------------------*/
     /* ** Move records to map working storage*/
     /* **------------------------------------*/
    TS0VW04.TSFSHPID[TS0VWIX1] = TSOREC.TSFSHPID;
    TS0VW04.TSNIKCNT[TS0VWIX1] = TSOREC.TSHNKCN;
    TS0VW04.TSIPLNBR[TS0VWIX1] = TSOREC.TSIPLNBR;
    TS0VW04.TSOFRCRT[TS0VWIX1] = TSOREC.TSOFRCRT;
    TS0VW04.TSOTOCRT[TS0VWIX1] = TSOREC.TSOTOCRT;
    TS0VW04.SY2CLRID[TS0VWIX1] = TS0VW03.SY2CLRID[TS0VWGCX];
    TS0VW04.SY5SZID[TS0VWIX1] = TSOREC.SY5SZID;
    TS0VW04.SY4IDDSC[TS0VWIX1] = TS0VW01.SY4IDDSC;
    TS0VW04.TSOSHPQT[TS0VWIX1] = TSOREC.TSOSHPQT;
    TS0VW04.TS0VWQPC[TS0VWIX1] = TS0VW01.TS0VWCPC;

    TS0VW01.TS0VWSCN = TSOREC.TSOTOCRT; /* ===> save crt #*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> Incr map index*/

    if (TS0VW01.TS0VWIX1 > 22) /* ===> T.S. Page full*/

      TS0VS-TS-4(); /* ===> Add page to temporary storage*/

    end /* ===> T.S. page full*/

  end /* ===> size ids same*/

  TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* ===> Orig. table index*/

  if (TS0VW01.TS0VWIX2 > TS0VW01.TS0VW-MAX-CRTN-RNG)
    TS0VM001.XXXPRCNM = "V-14000";
    converseLib.validationFailed(444); /* ===> cannot enter over 1600 cartons*/
    exit stack; /* ===> exit to display error*/
  end /* ===> size ids same*/


   /* **                                                        ***/
   /* ********************** End of TS0V-14000 ********************/
end // end TS0V-14000

// Re-load/update prev. range
Function TS0V-14100()
   /* ------------------------------------------------------------*/
   /* Update the last range processed on the previous T.S. page*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Default to the highest page number.*/
   /* ------------------------------------------------------------*/

  TS0VW01.XXXTSPAG = TS0VW01.TA5TSQIX; /* ===> Default to highest*/

  TS0VS-TS-2(); /* ===> Obtain temporary storage page*/

   /* ------------------------------------------------------------*/
   /* - The last T.S. page will need to be changed, read previous*/
         /* temporary storage page.*/
   /* - Then update of last range is performed.*/
   /* ------------------------------------------------------------*/


   /* **-----------------------------------*/
   /* ** Calculate the total ship quantity.*/
   /* **-----------------------------------*/

  TS0VWIX1 = 22; /* ===> Set the index to the last range*/

  TS0VW01.TS0VWWK3 = TS0VW04.TSOSHPQT[TS0VWIX1];
  TS0VW01.TS0VWWK4 = TSOREC.TSOSHPQT;
  TS0VW01.TS0VWWK5 = TS0VW01.TS0VWWK3 + TS0VW01.TS0VWWK4;
  TS0VW04.TSOSHPQT[TS0VWIX1] = TS0VW01.TS0VWWK5;
  TS0VW04.TSOTOCRT[TS0VWIX1] = TSOREC.TSOTOCRT; /* ===> Save "to" range*/
  TS0VW01.TS0VWSCN = TSOREC.TSOTOCRT; /* ===> Save carton #*/


  TS0VS-TS-3(); /* ===> Update temporary storage page*/

  set TS0VW04 empty; /* ===> Re-set T.S. record array*/
  TS0VWIX1 = 1; /* ===> Re-set the index to the 1st*/
                                   /* range*/



   /* **                                                        ***/
   /* ********************** End of TS0V-14100 ********************/
end // end TS0V-14100

// Close  (C4) set       VCPLIT01
Function TS0V-15000()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-15000"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-15000"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-15000 ********************/
end // end TS0V-15000

// ---> Format/display the map
Function TS0V-20000()
   /* ------------------------------------------------------------*/
   /* /* FORMAT AND DISPLAY THE MAP*/
   /*  */
   /* 1) If no errors have occurred, clear screen detail and*/
   /* move working storage to screen.*/
   /* 2) Set the cursor to the necessary field for display.*/
   /* 3) If a negative sql code has been encountered or inquiry,*/
   /* set all fields protect.*/
   /* 4) If only one color, then darken the color input fields.*/
   /* 5) Converse the map.*/
   /*  */
   /* ------------------------------------------------------------*/

  set TS0VW16 empty;
  if (converseVar.validationMsgNum == 0 /* ===> No error message to display*/
   || converseVar.validationMsgNum == 114) /* ===> No error message to display*/

    if (TS0VW01.TS0VWSWF == "Y") /* ===> Map must be formatted*/


      TS0VW01.TS0VWSWF = "N"; /* ===> Format Map switch*/

      TS0V-20100(); /* ===> Accumulate no of cartons*/

      TS0V-21000(); /* ===> Move the header fields to the*/
                                   /* map*/

      TS0V-22000(); /* ===> Obtain po id and type for screen*/

      TS0V-23000(); /* ===> Select the style short name*/

      TS0V-23500(); /* ===> Open vplaux cursor*/
      TS0V-23510(); /* ===> Obtain the freight scanned flag*/
      /* TCS CHANGES BEGIN*/
      TS0V-23515(); /* ===> Display Criteria for PF13*/
      /* TCS CHANGES END*/
      TS0V-23520(); /* ===> close vplaux cursor*/

      TS0V-24000(); /* ===> Load the detail of the map*/

    end

  else /* error found*/

    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end /* === error message check*/


   /* ------------------------------------------------------------*/
     /* if set to 'I' or 'D' - protect all map fields.*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWOPT == "I" /* or inquiry is indicated*/
   || TS0VW01.TS0VWOPT == "D") /* or delete is indicated*/

    TS0V-25000(); /* ===> protect fields*/

  /* gramac change begin*/
    set TS0VM001.MFG-CD-GPC03 initialAttributes; /* protect field*/
  /* IF TS0VM001.XGPCD = '02'*/
  /* AND TS0VW01.TS0VW-EQMT-FL = 'N';*/
  /* SET TS0VM001.MFG-CD-GPC03 DARK,AUTOSKIP,NOHILITE;*/
  /* ELSE;*/
  /* SET TS0VM001.MFG-CD-GPC03 AUTOSKIP;*/
  /* END;*/
  /* gramac change ends*/

  else

    if (TS0VM001.FY-FCTY-MFG-CD == " "
     || TS0VM001.FY-FCTY-MFG-CD == 0)
      set TS0VM001.FY-FCTY-MFG-CD normal;
    else
      set TS0VM001.FY-FCTY-MFG-CD protect;
    end

    if (TS0VM001.XGPCD == "02"
     && TS0VW01.TS0VW-EQMT-FL == "N")
  /* gramac change begins*/
  /* SET TS0VM001.MFG-CD-GPC03 DARK,AUTOSKIP,NOHILITE;*/
      set TS0VM001.MFG-CD-GPC03 initialAttributes;
  /* gramac change ends*/
    else
      if (TS0VM001.MFG-CD-GPC03 == " "
       || TS0VM001.MFG-CD-GPC03 not numeric)
  /* gramac change begin*/
  /* SET TS0VM001.MFG-CD-GPC03 NORMAL;*/
        set TS0VM001.MFG-CD-GPC03 initialAttributes;
  /* gramac change end*/
      else
  /* gramac change begin*/
  /* SET TS0VM001.MFG-CD-GPC03 PROTECT;*/
        set TS0VM001.MFG-CD-GPC03 initialAttributes;
  /* gramac change end*/
      end
    end
  end

  TS0V-26000(); /* ===> Suppress "TO" cartons*/

  if (TSWREC.XXXMSGNO != 0) /* Message to display*/

    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end /* Message number*/

  /* SET TS0VM001 ALARM;            /* Indicate sound alarm*/

  end

  converse TS0VM001 ;

  TS0V-27000(); /* ===> Restore  "TO" cartons*/

   /* ------------------------------------------------------------*/
   /* Clear the message fields*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMSGNO = 0; /* Message number*/
  TS0VM001.XXXPRCNM = "TS0V"; /* Process name*/


   /* **                                                        ***/
   /* ********************** End of TS0V-20000 ********************/
end // end TS0V-20000

// Calculate carton count
Function TS0V-20100()

  TS0V-20110(); /* Select (S1) set VCPLIT01 & VCPLHD01*/

  TS0VW01.TS0VWEFL = "N"; /* Initialize end switch*/
  TS0VW01.PREV-TO-CRTN-NBR = 0;
  TS0VW01.TSSUMCRT = 0;

  TS0V-20120(); /* Fetch  (N2) next  VCPLIT01 & VCPLHD01*/

  while (TS0VW01.TS0VWEFL == "N") /* While rows are found*/

    if (TS0VW16.TS-FROM-CRTN-NBR > TS0VW01.PREV-TO-CRTN-NBR)
      TS0VW01.TSSUMCRT = TS0VW01.TSSUMCRT + (TS0VW16.TS-TO-CRTN-NBR -                        TS0VW16.TS-FROM-CRTN-NBR) + 1;
      TS0VW01.PREV-TO-CRTN-NBR = TS0VW16.TS-TO-CRTN-NBR;
    else
      if (TS0VW16.TS-TO-CRTN-NBR > TS0VW01.PREV-TO-CRTN-NBR)
        TS0VW01.TSSUMCRT = TS0VW01.TSSUMCRT + (TS0VW16.TS-TO-CRTN-NBR -                          TS0VW01.PREV-TO-CRTN-NBR);
        TS0VW01.PREV-TO-CRTN-NBR = TS0VW16.TS-TO-CRTN-NBR;
      end
    end

    TS0V-20120(); /* Fetch  (N2) next  VCPLIT01 & VCPLHD01*/
                                  /* cartons*/
  end

  TS0V-20130(); /* Close  (C1) VCPLIT01 & vcplhd01*/

end // end TS0V-20100

// Select (S1) set  (Use TS2830)
Function TS0V-20110()

  TS0VW16.TSCFNC = "S1";
  TS0VW16.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in id*/
  TS0VW16.PC-PO-NBR = TSTREC.PC3PONBR; /* move in PC PO NUMBER*/
  TS0VW16.SY-STY-NBR = TS0VW03.SY1STNBR[1]; /* move in style number*/

  call "TS2830" (TS0VW16, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-20110"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01/VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-20110"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end

end // end TS0V-20110

// Fetch (N1) next row ( TS2830 )
Function TS0V-20120()

  TS0VW16.TSCFNC = "N1";

  call "TS2830" (TS0VW16, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0VW01.TS0VWEFL = "Y"; /* End loop*/
  else

    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-20120"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01/VCPLHD01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0VM001.XXXPRCNM = "V-20120"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end

end // end TS0V-20120

// Close  (C1) set  (USE TS2830)
Function TS0V-20130()

  TS0VW16.TSCFNC = "C1";

  call "TS2830" (TS0VW16, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-20130"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01/VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-20130";

    exit stack; /* ===> exit to re-display map*/

  end

end // end TS0V-20130

// Display map header fields
Function TS0V-21000()
   /* ------------------------------------------------------------*/
     /* Move map header fields to the map.*/
   /* ** Always move in the first row in the gpc-cpl array due to*/
     /* the fact that all the rows contain the same header data.*/
   /* ------------------------------------------------------------*/

  TS0VM001.TS0VMPO = TS0VW03.PC3PONBR[1]; /* move fields*/
  TS0VM001.FY1FCTYC = TS0VW03.FY1FCTYC[1];
  TS0VM001.PC2CUXID = TS0VW03.PC2CUXID[1];
  TS0VM001.SY1STNBR = TS0VW03.SY1STNBR[1];
  TS0VM001.DIMCD = TS0VW03.XDMCD[1];
  TS0VM001.PC2INSEG = TS0VW03.PC2INSEG[1];
  TS0VM001.XQACD = TS0VW03.XQACD[1];
  TS0VM001.XPGCD = TS0VW03.XPGCD[1];
  TS0VM001.XOWCD = TS0VW03.XOWCD[1];
  TS0VM001.XUMCD = TS0VW03.XUMCD[1];
  TS0VW01.TS0VW-CUST-ORD-ID = TS0VW03.OP1CUOID[1];
  TS0VW01.TS0VW-NIKE-ORD-ID = TS0VW03.OP1NORID[1];
  TS0VM001.TS0VW-SALES-ORDER = TS0VW01.TS0VW-SALES-ORDER;
  TS0VM001.TS0VMCTN = TS0VW01.TS0VWGCT; /* total cartons*/
   /* IF TSWREC.XGPCD = '03';*/
   /* MOVE TS0VW01.TSSUMCRT TO TS0VM001.TS0VMCTN;/* total cartons*/
   /* END;*/
  TS0VM001.TS0VMQTY = TS0VW01.TS0VWGST; /* total quantity*/

  TS0VM001.PC-ITM-SEQ-NBR = TS0VW01.PC-ITM-SEQ-NBR;
  TS0VM001.TS-SHP-LEG-NBR = TS0VW01.TS-SHP-LEG-NBR;
  TS0VM001.TSIMSCFL = TS0VW01.TSIMSCFL;
  TS0VM001.TSIMSCGR = TS0VW01.TSIMSCGR;
  TS0VM001.TSILOCR = TS0VW01.TSILOCR;
  TS0VM001.TSPFCIVC = TS0VW01.TSPFCIVC;
  TS0VM001.PC-XCT-ORIG-CD = TS0VW01.PC-XCT-ORIG-CD;
  TS0VM001.TSPFILE = TS0VW01.TSPFILE;
  TS0VM001.TSRTEXT = TS0VW01.TSRTEXT;
  TS0VM001.XXX-USER-ID = TS0VW01.XXX-USER-ID;

   /* /IF TSWREC.XGPCD ^= '03';*/
  TS0VM001.TS0VMCLR = TS0VW03.SY2CLRID[1];
   /* /END;*/

  TS0VS-21100();

  if (TS0VW01.FRSTPASS != 1)
    TS0VW01.PCXCTCD-BAK = TS0VW01.PC-XCT-ORIG-CD; /* store Orig-cd*/

    if (TSWREC.XGPCD == "03"
     || TSWREC.XGPCD == "02")
      TS0V-21050(); /* POPULATE SSCC18MFG ID */
    end

    if (TSWREC.XGPCD == "02"
     && TS0VW01.TS0VW-EQMT-FL == "N")
      if (TS0VM001.FY-FCTY-MFG-CD == 0)
        TS0V-21100(); /* POPULATE SSCC18MFG ID */
      end
  /* gramac change begins*/
  /* SET TS0VM001.MFG-CD-GPC03 DARK,PROTECT;*/
      set TS0VM001.MFG-CD-GPC03 initialAttributes;
  /* gramac change ends*/
    end

    set TS0VM001.FY-FCTY-MFG-CD protect;

    TS0VW01.TS0VWMFGID-BAK = TS0VM001.FY-FCTY-MFG-CD; /* Store SSCC18*/
    TS0VW01.TS0VWMFGID-BAK-03 = TS0VM001.MFG-CD-GPC03;

    TS0VW01.FRSTPASS = 1;
  end
   /* ********************** End of TS0V-21000 ********************/
end // end TS0V-21000

// Obtain Manufacture code
Function TS0V-21050()
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /*  */
   /* ------------------------------------------------------------*/

  set TS0VW24 empty;

  TS0VW24.TS-NIKE-SHP-ID = TS0VM001.TSFSHPID;
  TS0VW24.TS-NIKE-PL-NBR = TSWREC.TSWPLNBR;

  TS0V-21051(); /* Open cursor(vplaux01)*/

  TS0V-21052(); /* Fetch from vplaux01*/

  TS0V-21053(); /* Close cursor(vplaux01)*/

   /* ********************** End of TS0V-21050 ********************/
end // end TS0V-21050

// Obtain Manufacture code
Function TS0V-21051()
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /*  */
   /* ------------------------------------------------------------*/
  try
    call "VPLAUX01" ("S2", SQLCA, TS0VW24) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-21051"; /* Process name*/
    TA1REC.TA1LOC = "OPEN CURSOR             ";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-21051"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end

   /* ********************** End of TS0V-21051 ********************/
end // end TS0V-21051

// Obtain Manufacture code
Function TS0V-21052()
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /*  */
   /* ------------------------------------------------------------*/
  try
    call "VPLAUX01" ("N2", SQLCA, TS0VW24) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch  row*/
  TS0VM001.FY-FCTY-MFG-CD = TS0VW24.TS-UCC-128-CD-7;
  TS0VM001.MFG-CD-GPC03 = TS0VW24.TS-UCC-128-CD-2;
  if (SQLCA.VAGen_SQLCODE == 0 ||  /* Unexpected return code*/
  SQLCA.VAGen_SQLCODE == 100)     

  else
    TS0VW01.TS0VWEFL = "Y"; /* Indicate end of loop*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-21052"; /* Process name*/
    TA1REC.TA1LOC = "FETCH  SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-21052"; /* Process name*/

  end

  /* *********************End of TS0V-21052*****************************/
end // end TS0V-21052

// Obtain Manufacture code
Function TS0V-21053()
   /* ------------------------------------------------------------*/
   /*  */
   /*  */
   /*  */
   /* ------------------------------------------------------------*/
  try
    call "VPLAUX01" ("C2", SQLCA, TS0VW24) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/
  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-21053"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-21053"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* ===> Exit to redisplay map*/

  end

   /* ********************** End of TS0V-21053 ********************/
end // end TS0V-21053

// Obtain Manufacture code
Function TS0V-21100()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the DFCTY.VFCTY003 through TS0VW23*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set TS0VW23 empty;

  TS0VW23.XGPCD = TSWREC.XGPCD;
  TS0VW23.FY1FCTYC = TS0VW03.FY1FCTYC[1];

  try
    call "VFCTY003" ("S ", SQLCA, TS0VW23) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

   /* **------------------------------------*/
   /* ** Load maps Factory manufacture data*/
   /* **------------------------------------*/

      TS0VM001.FY-FCTY-MFG-CD = TS0VW23.FY-FCTY-MFG-CD;

      return; /* ===> Return to previous process*/


    end /* ===> sql = 0*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Row NOT found*/

      TS0VM001.FY-FCTY-MFG-CD = " ";

      return; /* ===> Return to previous process*/

    end /* ===> sql = 100*/

  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0V-21100"; /* Process name*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY003"; /* Table view name*/
  TA1REC.TA1TBLKE = TS0VW23.VFCTY003-KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS0VM001.XXXPRCNM = "TS0V-21100"; /* Process name*/

   /* ********************** End of TS0V-21100 ********************/
end // end TS0V-21100

// Obtain po id and type
Function TS0V-22000()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  set PC3REC empty;

  PC3REC.XGPCD = TSWREC.XGPCD;
  PC3REC.PC3PONBR = TS0VW03.PC3PONBR[1];
  PCYREC.PCYFUNC = "S ";

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

   /* **------------------------*/
   /* ** Load maps P.O. data*/
   /* **------------------------*/

  /* **************TCS CHANGES BEGIN ************************/
      TS0VW01.POHDR-EXISTS = "Y";
  /* **************TCS CHANGES END***************************/
      TS0VW01.TS0VWDAT = PC3REC.PC3POIDT; /* reformat the date*/

      if (TSWREC.XGPCD == "03") /* if apparel*/
        TS0VM001.TS0VMPYR = PC3REC.PCFSECD;
      else
        TS0VM001.TS0VMPYR = TS0VW01.TS0VWPYY;
      end

      TS0VM001.TS0VMPMO = TS0VW01.TS0VWPM1;
      TS0VM001.TS0VMDMO = TS0VW01.TS0VWPM2;
      TS0VM001.FY1FCTYC = PC3REC.FY1FCTYC;
      TS0VM001.PC4ORTYP = PC3REC.PC4ORTYP;


   /* **------------------------*/
   /* ** Check status code*/
   /* **------------------------*/

      if (TS0VW01.TS0VWOPT != "I") /* ===> Inquery mode*/

        if (PC3REC.YPUCD == "CL"
         || PC3REC.YPUCD == "NC"
         /* OR PC3REC.YPUCD = 'FC'*/
         || PC3REC.YPUCD == "CX")

          TSWREC.XXXMSGNO = 267; /* ===> informational msg only*/
          TS0VM001.XXXPRCNM = "V-22000"; /* ===> proc name*/

        else
          if (TS0VM001.PC-XCT-ORIG-CD == " ")
            TS0VM001.PC-XCT-ORIG-CD = PC3REC.PC-XCT-ORIG-CD;
          end
        end
      end

      return; /* ===> Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
        TS0VW01.POHDR-EXISTS = "N";
        TS0VM001.TS0VMPYR = " ";
        TS0VM001.TS0VMPMO = " ";
        TS0VM001.TS0VMDMO = " ";
        TS0VM001.FY1FCTYC = " ";
        TS0VM001.PC4ORTYP = " ";

        return; /* ===> Return to previous process*/

      end /* ===> sql = 100*/

    end /* ===> sql = 0*/

  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "V-22000"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0VM001.XXXPRCNM = "V-22000"; /* Process name*/

   /* **                                                        ***/
   /* ********************** End of TS0V-22000 ********************/
end // end TS0V-22000

// Select style short name
Function TS0V-23000()
   /* ------------------------------------------------------------*/

               /* SELECT THE STYLE SHORT NAME*/

   /* ------------------------------------------------------------*/

  PG2REC.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX]; /* Move in style #*/
  PG2REC.XGPCD = TSWREC.XGPCD; /* Move in gpc code*/

  TA1REC.TA1PGMNM = "V-23000"; /* Process name*/
  TA1REC.TA1MAP = "TS0VM001"; /* Map name*/

  XSPG201();
                                   /* Get the first style/color combination*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Return code ok*/

    TS0VM001.SY1SSTNM = PG2REC.SY1SSTNM;

    TS0VW01.TS0VWIX1 = 1; /* Set index*/

    while (TS0VW01.TS0VWIX1 <= TS0VW01.TS0VWMGC /* While le max*/
     && TS0VW03.TSIPLNBR[TS0VWIX1] > 0)

      TS0VW03.SY4SZSCL[TS0VWIX1] = PG2REC.SY4SZSCL;

      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* Incr index*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-23000 ********************/
end // end TS0V-23000

// Select (S2) scan      VPLAUX01
Function TS0V-23500()
   /* ------------------------------------------------------------*/
   /* Select rows from VPLAUX01*/
   /* ------------------------------------------------------------*/

  VPLAUX01.TS-NIKE-SHP-ID = TS0VW03.TSFSHPID[1];
  VPLAUX01.TS-NIKE-PL-NBR = TS0VW03.TSIPLNBR[1];

  TS0VW11.TSCFNC = "S2";
  call "VPLAUX01" (TS0VW11, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-23500"; /* Process name*/
    TA1REC.TA1LOC = "SELECT BAR CODE INFO           ";
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
    TA1REC.TA1TBLKE = TS0VM001.TSFSHPID; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-23500"; /* Process name*/

    exit stack;

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-23500 ********************/
end // end TS0V-23500

// Fetch  (N2) next row  VPLAUX01
Function TS0V-23510()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE PLAUX TABLE ROW*/

   /* ------------------------------------------------------------*/

  TS0VW11.TSCFNC = "N2";
  call "VPLAUX01" (TS0VW11, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0VM001.TS0VM-SCANFLAG = "N";
  else

    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-23510"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0VM001.XXXPRCNM = "V-23510"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    else

      TS0VM001.TS0VM-SCANFLAG = "Y";

    end
  end /* ===> Selected set*/


   /* **                                                        ***/
   /* ********************** End of TS0V-23510 ********************/
end // end TS0V-23510

// Display Criteria for PF13
Function TS0V-23515()
   /* ------------------------------------------------------------*/

              /* Display PF13 for GPC CODE = '02' and '03'*/

   /* ------------------------------------------------------------*/
  if (TSWREC.XGPCD == "02")
    TS0VM001.TS0VMP13 = "PF13:BAR CODE CREATE";
  else

    if (TSWREC.XGPCD == "03")
      if (TSWREC.TSWOPTSW != "I")
        TS0VM001.TS0VMP13 = "PF13:BAR CODE CREATE";
      else
        TS0VM001.TS0VMP13 = " ";
      end
    end

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-23515 ********************/
end // end TS0V-23515

// Close  (C2) set       VPLAUX01
Function TS0V-23520()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF PLAUX ROWS*/

   /* ------------------------------------------------------------*/

  TS0VW11.TSCFNC = "C2";
  call "VPLAUX01" (TS0VW11, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-23520"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-23520 ********************/
end // end TS0V-23520

// Move detail lines to the map
Function TS0V-24000()
   /* ------------------------------------------------------------*/
   /*  */
   /* MOVE WORKING STORAGE TO SCREEN*/
   /*  */
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS0VW01.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (TS0VW01.TS0VWSWU == "Y") /* Current page was changed*/

        TS0VS-TS-5(); /* Update temporary storage page*/

        TS0VW01.TS0VWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* - PF8 was requested, add a new page to temp storage to*/
       /* allow the user to enter additional carton detail data.*/
       /*  */
       /* - <ENTER> requested, add a new page to temp storage because*/
       /* last detail entry was entered*/
       /*  */
       /* - Default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS0VW01.XXXTSPAG > TS0VW01.TA5TSQIX) /* Desired > highest*/

        if (converseVar.eventKey is pf8 /* ===> New page requested*/
         || converseVar.eventKey is enter) /* ===> New page requested*/
          set TS0VW04 empty; /* ===> clear the temp storage page*/
          TS0VS-TS-4(); /* ===> Add temporary storage page*/
        else
          TS0VW01.XXXTSPAG = TS0VW01.TA5TSQIX; /* Default to highest*/
        end

      end

      TS0VS-TS-2(); /* ===> Obtain temporary storage page*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Move data from screen 1 working storage to map.*/
   /* ------------------------------------------------------------*/

  set TS0VW10 empty;
  TS0VW01.TS0VWIX1 = 1; /* ===> map index*/

  while (TS0VW01.TS0VWIX1 <= 22) /* ===> Until end of page*/

    if (TS0VW04.TSOFRCRT[TS0VWIX1] > 0
    )
  /* ** Move lines to screen*/
      TS0VM001.TSOMPCNT[TS0VWIX1] = TS0VW04.TSNIKCNT[TS0VWIX1];
      TS0VM001.TSOFRCRT[TS0VWIX1] = TS0VW04.TSOFRCRT[TS0VWIX1];
      TS0VM001.TSOTOCRT[TS0VWIX1] = TS0VW04.TSOTOCRT[TS0VWIX1];
      TS0VM001.SY2CLRID[TS0VWIX1] = TS0VW04.SY2CLRID[TS0VWIX1];
      TS0VM001.SY4IDDSC[TS0VWIX1] = TS0VW04.SY4IDDSC[TS0VWIX1];
      TS0VM001.TSOSHPQT[TS0VWIX1] = TS0VW04.TSOSHPQT[TS0VWIX1];

  /* ** Move lines to screen*/
      TS0VW10.TSNIKCNT[TS0VWIX1] = TS0VW04.TSNIKCNT[TS0VWIX1];
      TS0VW10.TSOFRCRT[TS0VWIX1] = TS0VW04.TSOFRCRT[TS0VWIX1];
      TS0VW10.TSOTOCRT[TS0VWIX1] = TS0VW04.TSOTOCRT[TS0VWIX1];
      TS0VW10.SY2CLRID[TS0VWIX1] = TS0VW04.SY2CLRID[TS0VWIX1];
      TS0VW10.SY4IDDSC[TS0VWIX1] = TS0VW04.SY4IDDSC[TS0VWIX1];
      TS0VW10.TSOSHPQT[TS0VWIX1] = TS0VW04.TSOSHPQT[TS0VWIX1];
      TS0VW10.SY5SZID[TS0VWIX1] = TS0VW04.SY5SZID[TS0VWIX1];
      TS0VW10.TS0VWQPC[TS0VWIX1] = TS0VW04.TS0VWQPC[TS0VWIX1];
      TS0VW10.TS0VWAPS[TS0VWIX1] = TS0VW04.TS0VWAPS[TS0VWIX1];
      TS0VW10.TSISTAT[TS0VWIX1] = TS0VW04.TSISTAT[TS0VWIX1];
      TS0VW10.XRECD[TS0VWIX1] = TS0VW04.XRECD[TS0VWIX1];

    else

  /* ** Move lines to screen*/
      TS0VM001.TSOMPCNT[TS0VWIX1] = 0;
      TS0VM001.TSOFRCRT[TS0VWIX1] = 0;
      TS0VM001.TSOTOCRT[TS0VWIX1] = 0;
      TS0VM001.SY2CLRID[TS0VWIX1] = " ";
      TS0VM001.SY4IDDSC[TS0VWIX1] = " ";
      TS0VM001.TSOSHPQT[TS0VWIX1] = 0;

  /* ** Move lines to screen*/
      TS0VW10.TSNIKCNT[TS0VWIX1] = 0;
      TS0VW10.TSOFRCRT[TS0VWIX1] = 0;
      TS0VW10.TSOTOCRT[TS0VWIX1] = 0;
      TS0VW10.SY2CLRID[TS0VWIX1] = " ";
      TS0VW10.SY4IDDSC[TS0VWIX1] = " ";
      TS0VW10.TSOSHPQT[TS0VWIX1] = 0;
      TS0VW10.SY5SZID[TS0VWIX1] = 0;
      TS0VW10.TS0VWQPC[TS0VWIX1] = 0;
      TS0VW10.TS0VWAPS[TS0VWIX1] = " ";
      TS0VW10.TSISTAT[TS0VWIX1] = " ";
      TS0VW10.XRECD[TS0VWIX1] = " ";

    end

     /* ** set data fields as defined*/
    set TS0VM001.TSOFRCRT[TS0VWIX1] initialAttributes;
    set TS0VM001.TSOTOCRT[TS0VWIX1] initialAttributes;
    set TS0VM001.SY4IDDSC[TS0VWIX1] initialAttributes;
    set TS0VM001.TSOSHPQT[TS0VWIX1] initialAttributes;

    /* /IF TSWREC.XGPCD = '03';*/
    /* /  SET TS0VM001.SY2CLRID(TS0VWIX1) DEFINED;*/
    /* /ELSE;*/
    set TS0VM001.SY2CLRID[TS0VWIX1] skip, invisible;
    /* /END;*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* Incr map index*/

  end

   /* ------------------------------------------------------------*/
   /* Set the cursor position*/
   /* ------------------------------------------------------------*/

  TS0VM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (TS0VM001.PC-XCT-ORIG-CD == " ") /* If MCO is missing*/

    set TS0VM001.PC-XCT-ORIG-CD cursor; /* set MCO cursor*/

  else

    if (TS0VM001.FY-FCTY-MFG-CD == " "
     || TS0VM001.FY-FCTY-MFG-CD == 0)
      set TS0VM001.FY-FCTY-MFG-CD cursor;
      set TS0VM001.FY-FCTY-MFG-CD normal;
    else
      if (TS0VM001.TSILOCR == " ") /* If L/C is missing*/
        set TS0VM001.TSILOCR cursor; /* set L/C cursor*/
      else
        set TS0VM001.TSOFRCRT[1] cursor; /* set first detail cursor*/
      end
    end

  end


  TS0VM001.XXXTSPAG = TS0VW01.XXXTSPAG; /* display current T.S. page*/
  TS0VM001.TA5TSQIX = TS0VW01.TA5TSQIX; /* display total T.S. pages*/


   /* **                                                        ***/
   /* ********************** End of TS0V-24000 ********************/
end // end TS0V-24000

// Protect fields on the map
Function TS0V-25000()
   /* ------------------------------------------------------------*/
    /* Protect fields on the map*/
   /* ------------------------------------------------------------*/
  if (TS0VW01.TS0VWOPT == "D" /* ===> If delete is indicated*/
   && converseVar.validationMsgNum == 0) /* ===> and no other messages*/

    converseLib.validationFailed(154); /* ===> Press ENTER to delete msg*/
    TS0VM001.XXXPRCNM = "V-25000"; /* ===>*/

  end

  if (TS0VW01.TS0VWOPT == "I" /* ===> If inquery is indicated*/
   && TSWREC.XXXMSGNO == 267) /* ===> P.O. Closed message*/

    TSWREC.XXXMSGNO = 0; /* ===> reset message*/

  end

  set TS0VM001.XXXPRCNM cursor; /* ===>*/

  set TS0VM001.TSIMSCFL protect; /* ===> protect header fields*/
  set TS0VM001.TSIMSCGR protect;
  set TS0VM001.TSILOCR protect;
  set TS0VM001.TSPFCIVC protect;
   /* TCS ENHANCEMENT BEGIN TS1501*/
  set TS0VM001.FY-FCTY-MFG-CD protect;
   /* TCS ENHANCEMENT END   TS1501*/
  set TS0VM001.PC-XCT-ORIG-CD protect;
  set TS0VM001.TSRTEXT protect;
  set TS0VM001.TS0VM-SCANFLAG protect;

  TS0VW01.TS0VWIX1 = 1; /* ===> initialize count index*/

  while (TS0VW01.TS0VWIX1 <= 22) /* ===> until end of detail lines*/

    set TS0VM001.TSOFRCRT[TS0VWIX1] protect; /* ===> protect detail*/
    set TS0VM001.TSOTOCRT[TS0VWIX1] protect;
    set TS0VM001.SY4IDDSC[TS0VWIX1] protect;
    set TS0VM001.TSOSHPQT[TS0VWIX1] protect;

    /* /IF TSWREC.XGPCD = '03';*/
    /* /  SET TS0VM001.SY2CLRID(TS0VWIX1) PROTECT;*/
    /* /ELSE;*/
    set TS0VM001.SY2CLRID[TS0VWIX1] skip, invisible;
    /* /END*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* increment index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-25000 ********************/
end // end TS0V-25000

// Suppress "TO" Cartons
Function TS0V-26000()
   /* **----------------------------------------------------------*/
   /* **    Suppress the "TO" cartons*/
   /* **----------------------------------------------------------*/

  TS0VW01.TS0VWIX1 = 1; /* ===> map index*/

  while (TS0VW01.TS0VWIX1 <= 22) /* ===> Until end of page*/

    if (TS0VM001.TSOTOCRT[TS0VWIX1] == TS0VM001.TSOFRCRT[TS0VWIX1])
      TS0VM001.TSOTOCRT[TS0VWIX1] = 0;
    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* Incr map index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-26000 ********************/
end // end TS0V-26000

// Restore  "TO" Cartons
Function TS0V-27000()
   /* **----------------------------------------------------------*/
   /* **    Restore  the "TO" cartons*/
   /* **----------------------------------------------------------*/

  TS0VW01.TS0VWIX1 = 1; /* ===> map index*/

  while (TS0VW01.TS0VWIX1 <= 22) /* ===> Until end of page*/

    if (TS0VM001.TSOFRCRT[TS0VWIX1] > 0
     && TS0VM001.TSOTOCRT[TS0VWIX1] == 0)

      TS0VM001.TSOTOCRT[TS0VWIX1] = TS0VM001.TSOFRCRT[TS0VWIX1];

    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* Incr map index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-27000 ********************/
end // end TS0V-27000

// --->Check attention identifier
Function TS0V-30000()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2 /* PA2 was pressed*/
   && COMMAREA.CAFROMAP == "TS0U") /* If from TS0U (add function)*/

    TS0VS-TS-1(); /* ===> Purge temp storage*/

    COMMAREA.CATOAP = "TS0I"; /* ===> Set current to TS0I*/
    TSWREC.TSWREJFL = "Y"; /* ===> Set shipment reject flag*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move in pass data*/
    XSTSS01(); /* transfer to application*/
    TS0VM001.XXXPRCNM = "V-30000";
    exit stack; /* ===> Exit to redisplay map*/

  end

  if (converseVar.eventKey is pa2 /* PA2 was pressed*/
   && COMMAREA.CAFROMAP != "TS0U") /* If not from TS0U (add function)*/
    /* ***/
    /* ** Restore the working storage by using the saved data*/
    /* ** in TS0VW10 so that the map can be refreshed.*/
    /* ***/
    TS0VW01.TS0VWIX1 = 1; /* set map copy ws index*/
    while (TS0VW01.TS0VWIX1 <= 22) /* until end of page*/
      /* ** Restore working storage as before*/
      TS0VW04.TSNIKCNT[TS0VWIX1] = TS0VW10.TSNIKCNT[TS0VWIX1];
      TS0VW04.TSOFRCRT[TS0VWIX1] = TS0VW10.TSOFRCRT[TS0VWIX1];
      TS0VW04.TSOTOCRT[TS0VWIX1] = TS0VW10.TSOTOCRT[TS0VWIX1];
      TS0VW04.SY2CLRID[TS0VWIX1] = TS0VW10.SY2CLRID[TS0VWIX1];
      TS0VW04.SY4IDDSC[TS0VWIX1] = TS0VW10.SY4IDDSC[TS0VWIX1];
      TS0VW04.TSOSHPQT[TS0VWIX1] = TS0VW10.TSOSHPQT[TS0VWIX1];
      TS0VW04.SY5SZID[TS0VWIX1] = TS0VW10.SY5SZID[TS0VWIX1];
      TS0VW04.TS0VWAPS[TS0VWIX1] = TS0VW10.TS0VWAPS[TS0VWIX1];
      TS0VW04.TSISTAT[TS0VWIX1] = TS0VW10.TSISTAT[TS0VWIX1];
      TS0VW04.XRECD[TS0VWIX1] = TS0VW10.XRECD[TS0VWIX1];
      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* incr map indexes*/
    end

    exit stack; /* ===> Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3 /* PF3 was pressed*/
   && COMMAREA.CAFROMAP != "TS0U") /* If not from TS0U (add function)*/

    if (TSWREC.TSWFRAPP == "TS0P") /* If came from TS0P*/
      COMMAREA.CATOAP = "TS0P"; /* Set current to TS0P*/
    else
      if (COMMAREA.CAFROMAP == "TS01") /* If came from TS01*/
        COMMAREA.CATOAP = "TS01"; /* Set current to TS01*/
      else
        if (COMMAREA.CAFROMAP == "TS0Y") /* If came from TS0Y*/
          COMMAREA.CATOAP = "TS0Y"; /* Set current to TS0Y*/
        else
          if (COMMAREA.CAFROMAP == "TS0J") /* If came from TS0J*/
            COMMAREA.CATOAP = "TS0J"; /* Set current to TS0J*/
          else
            if (COMMAREA.CAFROMAP == "TS02") /* If came from TS02*/
              COMMAREA.CATOAP = TSWREC.TSWFRAPP;
              TSWREC.TSWFRAPP = " ";
            end
          end
        end
      end
    end

    TS0VS-TS-1(); /* ===> Purge temp storage*/

    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move in pass data*/
    XSTSS01(); /* transfer to application*/
    TS0VM001.XXXPRCNM = "V-30000";
    exit stack; /* ===> Exit to redisplay map*/

  end

  if (converseVar.eventKey is enter /* ===> ENTER was not pressed*/
   && TS0VW01.TS0VWSWR == "Y")      /* ===> SQL Error Obtain the data*/
                                   /* section*/
  end

  if (COMMAREA.CAFROMAP == "TS0U") /* If from TS0U (add function)*/

    if (converseVar.eventKey not enter /* ===> ENTER was not pressed*/
     && converseVar.eventKey not pf7   /* ===> and PF7 was not pressed*/
     && converseVar.eventKey not pf8)  /* ===> and PF8 was not pressed*/

      TS0VM001.XXXPRCNM = "V-30000"; /* ===> Process name*/
      converseLib.validationFailed(4); /* ===> Indicate invalid attention key*/
      if (converseVar.eventKey is pa1 /* ===> PA1 was pressed*/
       || converseVar.eventKey is pa3) /* ===> or PA3 was pressed*/
        converseLib.clearScreen();
         /* ===> Clear screen before redisplay*/
      end
      exit stack; /* ===> Exit to redisplay map*/
    end

  else

   /* ************************TCS CHANGES BEGIN***************/
    if (converseVar.eventKey not enter /* ===> ENTER was not pressed*/
     && converseVar.eventKey not pf7   /* ===> and PF7 was not pressed*/
     && converseVar.eventKey not pf8   /* ===> and PF8 was not pressed*/
     && converseVar.eventKey not pf13  /* ===> and PF13 was not pressed*/
     && converseVar.eventKey not pf18) /* ===> and PF18 was not pressed*/
   /* ************************TCS CHANGES END*****************/

      TS0VM001.XXXPRCNM = "V-30000"; /* ===> Process name*/
      converseLib.validationFailed(4); /* ===> Indicate invalid attention key*/
      if (converseVar.eventKey is pa1 /* ===> PA1 was pressed*/
       || converseVar.eventKey is pa3) /* ===> or PA3 was pressed*/
        converseLib.clearScreen();
         /* ===> Clear screen before redisplay*/
      end
      exit stack; /* ===> Exit to redisplay map*/
   /* *******TCS CHANGES BEGIN***************/
    else
   /* VGOTTI*/
      if (converseVar.eventKey is pf13
       && TS0VW01.TS0VWOPT == "I"
       && (TS0VM001.XGPCD == "03" || TS0VW01.TS0VW-EQMT-FL == "Y"))

        TS0VM001.XXXPRCNM = "V-30000"; /* ===> Process name*/
        converseLib.validationFailed(4); /* ===> Indicate invalid attention ke*/
        if (converseVar.eventKey is pa1 /* ===> PA1 was pressed*/
         || converseVar.eventKey is pa3) /* ===> or PA3 was pressed*/
          converseLib.clearScreen();
           /* ===> Clear screen before redisplay*/
        end
        exit stack; /* ===> Exit to redisplay map*/
      end
   /* *******TCS CHANGES END*****************/
    end

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-30000 ********************/
end // end TS0V-30000

// ---> Reset highlighted fields
Function TS0V-40000()
   /* ------------------------------------------------------------*/

             /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset header fields normal intensity.*/
   /* 2) Reset all detail fields normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0VM001.TSIMSCFL initialAttributes; /* musical flag*/
  set TS0VM001.TSIMSCGR initialAttributes; /* musical group*/
  set TS0VM001.TSILOCR initialAttributes; /* letter of credit*/
  set TS0VM001.TSPFCIVC initialAttributes; /* factory invoice*/
  /* VGOTTI CHANGE BEGIN*/
  /* FOR GPC 02 PROTECT THE MFG-CD FIELD*/
  if (TSWREC.XGPCD != "02"
   || TS0VW01.TS0VW-EQMT-FL == "Y")
    set TS0VM001.FY-FCTY-MFG-CD initialAttributes; /* factory Mfg code*/
    set TS0VM001.MFG-CD-GPC03 initialAttributes; /* factory Mfg code-GPC03*/
  end
  /* VGOTTI CHANGE ENDS*/
  set TS0VM001.PC-XCT-ORIG-CD initialAttributes; /* MCO*/
  set TS0VM001.TSRTEXT initialAttributes; /* comment line*/
  set TS0VM001.TS0VMCTN initialAttributes; /* carton total*/
  set TS0VM001.TS0VMQTY initialAttributes; /* quantity total*/

  TS0VW01.TS0VWIX1 = 1; /* Initialize line index*/

  while (TS0VW01.TS0VWIX1 <= 22) /* Until end of lines*/

    set TS0VM001.TSOFRCRT[TS0VWIX1] initialAttributes;
    set TS0VM001.TSOTOCRT[TS0VWIX1] initialAttributes;
    set TS0VM001.SY4IDDSC[TS0VWIX1] initialAttributes;
    set TS0VM001.TSOSHPQT[TS0VWIX1] initialAttributes;
   /* /  IF TSWREC.XGPCD = '03';*/
   /* /    SET TS0VM001.SY2CLRID(TS0VWIX1) DEFINED;*/
   /* /  END;*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* Increment line index*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-40000 ********************/
end // end TS0V-40000

// ---> Verify the entered data
Function TS0V-50000()
   /* ------------------------------------------------------------*/
   /*  */
   /* /* VERIFY THE ENTERED DATA*/
   /*  */
   /* 1) If the map is not empty*/
   /* and pf7, pf8, or enter or PF18 was pressed;*/
   /* a) Verify an initial P.O. entry.*/
   /* b) If no errors and a style has been entered*/
   /* - verify all detail edits from bottom to top.*/
   /* by performing screen detail edits until*/
   /* all entered detail has been edited.*/
   /* c) Perform header edits.*/
   /*  */
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
      /* Check to see if any data exists on the screen*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWDEF = "N"; /* ===> Initialize data entered flag*/
  TS0VW01.TS0VWHEF = "N";

  TS0VW01.TS0VWIX1 = 1; /* ===> set index to 1*/
  while (TS0VW01.TS0VWIX1 <= 22) /* ===> until end of detail lines*/
    if (TS0VM001.TSOFRCRT[TS0VWIX1] == 0 /* ===> if detail line blank*/
     && TS0VM001.TSOTOCRT[TS0VWIX1] == 0 
     && TS0VM001.SY4IDDSC[TS0VWIX1] == " "
     && TS0VM001.TSOSHPQT[TS0VWIX1] == 0)

      /* AND TS0VM001.SY2CLRID(TS0VWIX1) = ' '*/
      /* ========= NEXT SENTENCE ============>*/

    else
      TS0VW01.TS0VWDEF = "Y"; /* ===> set data entered flag*/
      TS0VW01.TS0VWHEF = "Y";
      TS0VW01.TS0VWIX1 = 23; /* ===> end loop*/
    end
    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* increment index*/
  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* ===> Scroll back request*/
   || converseVar.eventKey is pf8) /* ===> or scroll forward request*/

    TS0V-50100(); /* ===> Verify scroll*/

  end

  if (TS0VW01.TS0VWOPT == "I"
   || TS0VW01.TS0VWOPT == "D")

    return; /* ===> Exit to previous process skip*/
                                   /* remaining edits*/

  end

   /* ------------------------------------------------------------*/
      /* If data did exist on the screen, perform the edits*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWDEF == "Y") /* ===> if data exists on the screen*/

    if (converseVar.eventKey is enter /* ===> ENTER is pressed*/
     || converseVar.eventKey is pf7   /* ===> Scroll back request*/
     || converseVar.eventKey is pf8   /* ===> or scroll forward request*/
     || converseVar.eventKey is pf18) /* ===> or Container Assignment request*/

      TS0VW01.TS0VWIX1 = 22; /* ===> initialize indexes*/

      while (TS0VW01.TS0VWIX1 > 0) /* ===> until end of detail*/

        if (TS0VM001.TSOFRCRT[TS0VWIX1] == 0 /* ===> detail line blank*/
         && TS0VM001.TSOTOCRT[TS0VWIX1] == 0 
         && TS0VM001.SY4IDDSC[TS0VWIX1] == " "
         && TS0VM001.TSOSHPQT[TS0VWIX1] == 0)

          /* removed the condition  TS0VM001.SY2CLRID(TS0VWIX1) = ' '*/
          /* from the above IF condition to avoid the display of the*/
          /* message 'cartons are missing' while trying to delete a carton*/
          /* ============ NEXT SENTENCE ==========>*/

        else

          /* ------------------------------------------------------------*/
           /* Default the color if only one packing list color processed*/
          /* ------------------------------------------------------------*/

          /* IF TS0VW03.TSIPLNBR(1) > 0 /* ===> If only one cpl in array*/
          /* AND TS0VW03.TSIPLNBR(2) = 0*/
          /* AND TS0VM001.SY2CLRID(TS0VWIX1) = '  ';/* ===> and no color*/

          /* MOVE TS0VW03.SY2CLRID(1) TO TS0VM001.SY2CLRID(TS0VWIX1);*/

          /* END;                     /* ===> If only one cpl in array*/

          /* ------------------------------------------------------------*/
              /* Perform detail edits.*/
          /* ------------------------------------------------------------*/

          TS0V-50200(); /* ===> range entry edits*/

          if (TS0VM001.TSOFRCRT[TS0VWIX1] > 0 /* ===> detail line exists*/
           && converseVar.validationMsgNum == 0
          )                                  
            TS0V-51000(); /* ===> total quantity edits*/

            TS0V-52000(); /* ===> size edits*/

            TS0V-53000(); /* ===> color, carton #s*/

          end /* ===> Detail line blank*/

        end /* ===> Detail line blank*/

        /* ---> save color ID for comparision when size id look up*/
        /* MOVE TS0VM001.SY2CLRID(TS0VWIX1) TO TS0VW01.TS0VWCID;*/
        TS0VW01.TS0VWCID = TS0VW03.SY2CLRID[1];

        TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 - 1; /* ===> decr. index*/

      end /* ===> Until end of detail*/

      TS0V-54000(); /* ===> header edits*/

      if (TS0VW01.TS0VWDEF == "Y"           /* ===> if data has been changed*/
       && converseVar.validationMsgNum == 0 /* ===> no errors encountered*/
      )                                    
        TS0V-55000(); /* ===> check for overlaps*/

        /* ------------------------------------------------------------*/
            /* Check for map detail warnings*/
        /* ------------------------------------------------------------*/


        TS0V-56000(); /* ===> check for warning flag reset*/


        /* **************************************************/
         /* Move the map detail to WS copy of map*/
        /* **************************************************/

        if (converseVar.validationMsgNum == 0) /* ===> no warning messages*/

          set TS0VW12 empty;
          TS0VW01.TS0VWIX1 = 1; /* Initialize index*/

          while (TS0VW01.TS0VWIX1 <= 22) /* Until end of map detail*/

            TS0VW12.TSNIKCNT[TS0VWIX1] = TS0VM001.TSOMPCNT[TS0VWIX1];
            TS0VW12.TSOFRCRT[TS0VWIX1] = TS0VM001.TSOFRCRT[TS0VWIX1];
            TS0VW12.TSOTOCRT[TS0VWIX1] = TS0VM001.TSOTOCRT[TS0VWIX1];
            /* MOVE TS0VM001.SY2CLRID(TS0VWIX1) TS0VW12.SY2CLRID(TS0VWIX1);*/
            TS0VW12.SY4IDDSC[TS0VWIX1] = TS0VM001.SY4IDDSC[TS0VWIX1];
            TS0VW12.TSOSHPQT[TS0VWIX1] = TS0VM001.TSOSHPQT[TS0VWIX1];

            TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* increment index*/

          end


          TS0V-57000(); /* ===> Check for 6,12,24 warning*/

          TS0V-58000(); /* ===> Verify against p.o.*/

          /* **----------------------------------------------*/
          /* ** Re-set initial edit flag*/
          /* ** & check warning flags set*/
          /* **----------------------------------------------*/

          TS0VW01.TS0VWSWE = "N"; /* ===> set initial edit flag*/

          if (TS0VW01.TS0VWWF1 == "Y" /* ===> If any array warnings set*/
           || TS0VW01.TS0VWWF2 == "Y" 
           || TS0VW01.TS0VWWF3 == "Y" 
           || TS0VW01.TS0VWWF4 == "Y" 
           || TS0VW01.TS0VWWF5 == "Y" 
           || TS0VW01.TS0VWWF6 == "Y" 
           || TS0VW01.TS0VWWF7 == "Y")

            TS0V-59000(); /* ===> Process warnings*/

          end /* ===> warning flag set*/

        end /* ===> no overlap errors encountered*/

      end /* ===> Until end of detail*/

    end /* ===> ENTER, PF7, PF8 is pressed*/

  else

    if (TS0VM001.XXXTSPAG == 1) /* ===> on first page*/

      converseLib.validationFailed(133); /* ===> at least 1 range must be entered*/
      set TS0VM001.TSOFRCRT[1] cursor; /* set cursor*/
      TS0VM001.XXXPRCNM = "V-50000"; /* process name*/

    end /* ===> Data exists on the screen*/

  end /* ===> Data exists on the screen*/


   /* **                                                        ***/
   /* ********************** End of TS0V-50000 ********************/
end // end TS0V-50000

// Verify scroll request
Function TS0V-50100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* ===> Scroll back request*/
   && TS0VW01.XXXTSPAG < 2)       /* ===> No previous pages*/

    converseLib.clearScreen();
    
    set TS0VM001.TSOFRCRT[1] cursor;
    TS0VM001.XXXPRCNM = "V-50100"; /* ===> Module identification*/
    converseLib.validationFailed(2); /* ===> No previous page to display*/
    exit stack; /* ===> Exit to re-display map*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, allow the request for a*/
   /* new blank page.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* ===> Scroll forward request*/
   && TS0VW01.XXXTSPAG >= TS0VW01.TA5TSQIX) /* ===> No more pages*/

    if (TS0VW01.TS0VWOPT == "I")
      converseLib.clearScreen();
      
      set TS0VM001.TSOFRCRT[1] cursor;
      TS0VM001.XXXPRCNM = "V-50100"; /* ===> Module identification*/
      converseLib.validationFailed(3); /* ===> No more pages to display*/
      exit stack; /* ===> Exit to re-display map*/
    end
  end


   /* **                                                        ***/
   /* ********************** End Of TS0V-50100 ********************/
end // end TS0V-50100

// Initial range edits
Function TS0V-50200()
   /* ***-----------------------------------------------------****/
   /* *** Verify that the range was entered properly*/
   /* ***-----------------------------------------------------****/


  if (TSWREC.XGPCD == "02"
   && TS0VM001.TSOSHPQT[TS0VWIX1] == 0
   && TS0VM001.SY4IDDSC[TS0VWIX1] == " "
   && TS0VM001.TSOTOCRT[TS0VWIX1] == 0
   && TS0VM001.TSOFRCRT[TS0VWIX1] == 0)

    /* ========== NEXT SENTENCE ==========>*/

  else
    if (TS0VM001.TSOSHPQT[TS0VWIX1] == 0)
      set TS0VM001.TSOSHPQT[TS0VWIX1] cursor, bold;
      TS0VM001.XXXPRCNM = "V-50200"; /* ===> Module identification*/
      converseLib.validationFailed(112); /* ===> Size missing or invalid*/
    end
    if (TS0VM001.SY4IDDSC[TS0VWIX1] == " ")
      set TS0VM001.SY4IDDSC[TS0VWIX1] cursor, bold;
      TS0VM001.XXXPRCNM = "V-50200"; /* ===> Module identification*/
      converseLib.validationFailed(127); /* ===> Size missing or invalid*/
    end
   /* IF TSWREC.XGPCD = '03'*/
   /* AND TS0VM001.SY2CLRID(TS0VWIX1) = ' ';*/
   /* SET TS0VM001.SY2CLRID(TS0VWIX1) CURSOR,BRIGHT;*/
   /* MOVE 'V-50200' TO TS0VM001.XXXPRCNM;/* ===> Module identification*/
   /* MOVE 128 TO EZEMNO;          /* ===> color missing or invalid*/
   /* END*/

    if (TS0VM001.TSOTOCRT[TS0VWIX1] == 0)
      set TS0VM001.TSOTOCRT[TS0VWIX1] cursor, bold;
      TS0VM001.XXXPRCNM = "V-50200"; /* ===> Module identification*/
      converseLib.validationFailed(111); /* ===> Size missing or invalid*/
    end
    if (TS0VM001.TSOFRCRT[TS0VWIX1] == 0)
      set TS0VM001.TSOFRCRT[TS0VWIX1] cursor, bold;
      TS0VM001.XXXPRCNM = "V-50200"; /* ===> Module identification*/
      converseLib.validationFailed(111); /* ===> Size missing or invalid*/
    end
  end


   /* **                                                        ***/
   /* ********************** End Of TS0V-50200 ********************/
end // end TS0V-50200

// Total quantity edits
Function TS0V-51000()
   /* ------------------------------------------------------------*/

                   /* TOTAL QUANTITY EDITS*/

         /* 1) Total quantity*/
            /* - check entry*/
            /* - check evenly divisible*/
            /* - verify size total matches production size*/
              /* total (*** on production db - add later ***)*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* total quantity*/
   /* ------------------------------------------------------------*/

  if (TS0VM001.TSOSHPQT[TS0VWIX1] == 0) /* if ship quantity is missing*/
    converseLib.validationFailed(112); /* ship quantity error*/
    set TS0VM001.TSOSHPQT[TS0VWIX1] cursor, modified, bold;
    TS0VM001.XXXPRCNM = "V-51000"; /* process name*/

  else

    if (TS0VM001.TSOFRCRT[TS0VWIX1] >= 0 /* ===> if to cartons positive*/
     && TS0VM001.TSOTOCRT[TS0VWIX1] >= 0)

      if (TS0VM001.TSOTOCRT[TS0VWIX1] >= TS0VM001.TSOFRCRT[TS0VWIX1]
       || TS0VM001.TSOTOCRT[TS0VWIX1] == 0) /* ===> "TO" ctn eq 0*/

        /* ------------------------------------------------------------*/
         /* 1) Check to see if quantity is evenly divisible by cartons.*/
         /* 2) Done by checking whether or not a remainder exists after*/
            /* shipping quantity is divided by the number of cartons.*/

          /* **** working fields are used due to line length *****/
          /* **** restrictions.( WK1, WK2, etc.)             *****/
        /* ------------------------------------------------------------*/

        if (TS0VM001.TSOFRCRT[TS0VWIX1] > 0) /* ===> From carton exists*/

          if (TS0VM001.TSOTOCRT[TS0VWIX1] > TS0VM001.TSOFRCRT[TS0VWIX1])

            TS0VW01.TS0VWWK1 = TS0VM001.TSOTOCRT[TS0VWIX1];
            TS0VW01.TS0VWWK2 = TS0VM001.TSOFRCRT[TS0VWIX1];
            TS0VW01.TS0VWWK3 = TS0VW01.TS0VWWK1 - TS0VW01.TS0VWWK2;
            TS0VW01.TS0VWWK3 = TS0VW01.TS0VWWK3 + 1; /* ===> include to ctn*/

          else
            TS0VW01.TS0VWWK3 = 1; /* only 1 carton exists*/
          end

          TS0VW01.TS0VWWK2 = TS0VM001.TSOSHPQT[TS0VWIX1];
          TS0VW01.TS0VWWK1 = TS0VW01.TS0VWWK2 % TS0VW01.TS0VWWK3;

          if (TS0VW01.TS0VWWK1 > 0) /* If a remainder exists*/
            converseLib.validationFailed(136); /* must be evenly divisible*/
            set TS0VM001.TSOSHPQT[TS0VWIX1] cursor, modified, bold;
            TS0VM001.XXXPRCNM = "V-51000"; /* process name*/
          end

        end /* ===> if from carton does exist*/

      end /* ===> "TO" > "FROM"*/

    end /* ===> "TO" cartons positive*/

  end /* ===> Ship quantity is missing*/


   /* **                                                        ***/
   /* ********************** End of TS0V-51000 ********************/
end // end TS0V-51000

// Size edits
Function TS0V-52000()
   /* ------------------------------------------------------------*/

                      /* SIZE EDITS*/

         /* 1) Size*/
            /* - check entry*/
            /* - find size for po/product on production dp*/
              /* (*** on production db - add later ***)*/
            /* - if not on production db then check size*/
              /* in dprod.vscale01 table*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                  /* size*/
   /* ------------------------------------------------------------*/

  if (TS0VM001.SY4IDDSC[TS0VWIX1] == " ") /* if size is missing*/
    converseLib.validationFailed(127); /* size is missing or invalid*/
    set TS0VM001.SY4IDDSC[TS0VWIX1] cursor, modified, bold;
    TS0VM001.XXXPRCNM = "V-52000"; /* process name*/
  else

   /* MOVE 1 TO TS0VW01.TS0VWIX2;    /* set index count*/
   /* MOVE 'N' TO TS0VW01.TS0VWFND;  /* set found flag*/

   /* WHILE TS0VWIX2 LE 30      /* ===> until end of cpl-gpc table array*/
   /* AND TS0VW03.TSIPLNBR(TS0VWIX2) GT 0;/* ===> and elements exist*/

   /* IF TS0VM001.SY2CLRID(TS0VWIX1) EQ TS0VW03.SY2CLRID(TS0VWIX2);*/
   /* MOVE 'Y' TO TS0VW01.TS0VWFND;/* ===> set found to yes*/
   /* MOVE 31 TO TS0VW01.TS0VWIX2;/* ===> end loop*/
   /* END;*/

   /* TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1;/* ===> incr. index*/

   /* END;*/

   /* IF TS0VW01.TS0VWFND EQ 'N';    /* ===> if color not found*/
       /* continue on - cannot edit size without valid color*/
   /* MOVE 127 TO EZEMNO;          /* ===> size is missing or invalid*/
   /* SET TS0VM001.SY4IDDSC(TS0VWIX1) CURSOR,MODIFIED,BRIGHT;*/
   /* MOVE 'V-52000' TO TS0VM001.XXXPRCNM;/* ===> process name*/
   /* ELSE;*/

   /* IF TS0VM001.SY2CLRID(TS0VWIX1) NE TS0VW01.TS0VWCID;*/
        /* ***/
    TS0V-52100(); /* ===> Select the size for validity*/
        /* ***/
   /* END;                         /* ===> Color id change*/

    if (PG3REC.PG3RETCD == "00") /* if size is ok*/

        /* ------------------------------------------------------------*/
         /* *** loop thru the previously obtained (NOT compressed)  ****/
         /* *** size translations until a match                     ****/
        /* ------------------------------------------------------------*/

      TS0VW01.TS0VWIX2 = 1; /* set index*/
      TS0VW01.TS0VWFND = "N"; /* found flag*/

      while (TS0VW01.TS0VWIX2 <= 40)

        if (TS0VM001.SY4IDDSC[TS0VWIX1] == PG3REC.SY4IDDSC[TS0VWIX2])
          TS0VW01.SY5SZID[TS0VWIX1] = TS0VW01.TS0VWIX2; /* save pos*/
          TS0VW01.TS0VWIX2 = 41; /* get out of loop*/
          TS0VW01.TS0VWFND = "Y"; /* found flag*/
        end

        TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1;
      end

      if (TS0VW01.TS0VWFND == "Y") /* if the size was found*/

        if (TS0VM001.TS0VMPO == 999999) /* if the po is 999999*/
          TS0VW01.TS0VWAPS[TS0VWIX1] = "Y"; /* add po size flag*/
        else
          TS0VW01.TS0VWAPS[TS0VWIX1] = "N"; /* move no*/
        end

      else

        converseLib.validationFailed(127); /* size is missing or invalid*/
        set TS0VM001.SY4IDDSC[TS0VWIX1] cursor, modified, bold;
        TS0VM001.XXXPRCNM = "V-52000"; /* process name*/

      end

    else

      if (PG3REC.PG3RETCD != "09") /* if size not found*/
        converseLib.validationFailed(127); /* size is missing or invalid*/
        set TS0VM001.SY4IDDSC[TS0VWIX1] cursor, modified, bold;
        TS0VM001.XXXPRCNM = "V-52000"; /* process name*/
      end

    end

    /* END;*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-52000 ********************/
end // end TS0V-52000

// Select size from      VSCALE01
Function TS0V-52100()
   /* ------------------------------------------------------------*/

             /* SELECT SIZE FROM DTRANS.VSCALE01*/

    /* 1) move in the keys*/
    /* 2) select the number*/

   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Clear record*/

  PG3REC.PG3FUNCD = "PC"; /* translator function*/
  PG3REC.PG3DATFM = "N"; /* not compressed*/
  PG3REC.XGPCD = TSWREC.XGPCD; /* keys*/
  PG3REC.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX];

   /* MOVE TS0VM001.SY2CLRID(TS0VWIX1) TO PG3REC.SY2CLRID;*/
  PG3REC.SY2CLRID = TS0VM001.TS0VMCLR;

  PG3REC.XDMCD = TS0VW02.XDMCD[TS0VWCPX];
  PG3REC.XQACD = "**";

  TS0VM001.XXXPRCNM = "V-52100"; /* Process name*/

  XSPG301(); /* THIS STATEMENT GROUP WILL FIND THE*/
                                   /* SIZE BREAKS.*/

  if (PG3REC.PG3RETCD == "00" /* if good return code*/
   || PG3REC.PG3RETCD != "09") /* or not found*/
    /* ========== NEXT SENETENCE ==========>*/
  else

    if (PG3REC.PG3RETCD == "09") /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0VM001.XXXPRCNM = "V-52100"; /* Process name*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-52100 ********************/
end // end TS0V-52100

// Color, carton #s edits
Function TS0V-53000()
   /* ------------------------------------------------------------*/

                  /* COLOR AND CARTON #s EDIT*/

         /* 1) color*/
            /* - look for a match in the*/
              /* gpc-cpl working storage.*/
         /* 2) carton numbers*/
            /* - check for from carton entry*/
            /* - check for from carton less than to carton*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* color*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX2 = 1; /* set index count*/
  TS0VW01.TS0VWFND = "N"; /* set found flag*/

  while (TS0VWIX2 <= 30 /* until end of cpl-gpc table array*/
   && TS0VW03.TSIPLNBR[TS0VWIX2] > 0) /* and elements exist*/

   /* IF TS0VM001.SY2CLRID(TS0VWIX1) EQ TS0VW03.SY2CLRID(TS0VWIX2);*/
    if (TS0VM001.TS0VMCLR == TS0VW03.SY2CLRID[TS0VWIX2])
      TS0VW01.TS0VWFND = "Y"; /* set found to yes*/
      TS0VW01.TS0VWIX2 = 31; /* end loop*/
    end

    TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* increment index*/

  end

  if (TS0VW01.TS0VWFND == "Y") /* if found flag is yes*/
    /* ============= NEXT SENTENCE =============>*/
  else
    converseLib.validationFailed(305); /* clr is missing or invalid*/
    set TS0VM001.SY2CLRID[TS0VWIX1] cursor, modified, bold;
    TS0VM001.XXXPRCNM = "V-53000"; /* process name*/
  end

   /* ------------------------------------------------------------*/
           /* carton #s - (from - to)*/
   /* ------------------------------------------------------------*/

  if (TS0VM001.TSOTOCRT[TS0VWIX1] < 0) /* if to carton negative*/
    converseLib.validationFailed(129); /* invalid carton number*/
    set TS0VM001.TSOTOCRT[TS0VWIX1] cursor, modified, bold;
    TS0VM001.XXXPRCNM = "V-53000"; /* process name*/
  else

    if (TS0VM001.TSOTOCRT[TS0VWIX1] > 0) /* if to carton entered*/

      if (TS0VM001.TSOFRCRT[TS0VWIX1] > 0) /* if from carton entered*/

        if (TS0VM001.TSOFRCRT[TS0VWIX1] > TS0VM001.TSOTOCRT[TS0VWIX1])
          converseLib.validationFailed(129); /* invalid carton number*/
          set TS0VM001.TSOTOCRT[TS0VWIX1] cursor, modified, bold;
          TS0VM001.XXXPRCNM = "V-53000"; /* process name*/
        end

      end

    end

  end

  if (TS0VM001.TSOFRCRT[TS0VWIX1] <= 0) /* if to carton negative or missing*/
    converseLib.validationFailed(129); /* invalid carton number*/
    set TS0VM001.TSOFRCRT[TS0VWIX1] cursor, modified, bold;
    TS0VM001.XXXPRCNM = "V-53000"; /* process name*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-53000 ********************/
end // end TS0V-53000

// Header edits
Function TS0V-54000()
   /* ------------------------------------------------------------*/

                     /* HEADER EDITS*/

     /* Edits;*/
        /* 1) invoice*/
        /* 2) letter of credit (optional - no edit)*/
        /* 3) group*/
        /* 4) musical*/
        /* 5) Manufacturing Country of Origin (MCO)*/
        /* 6) Factory Manufacture Code(SSCC18)*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
                   /* invoice*/
   /* ------------------------------------------------------------*/

  if (TS0VM001.TSPFCIVC == " ") /* if invoice is blank  entered*/

    if (TS0VW01.TS0VWWF10 == "Y")
        /* ===============NEXT SENTENCE ==========>*/
    else
   /* IF TSWREC.TSWDOMFL EQ 'Y';     /* If domestic user*/
   /* ;/* ======== NEXT SENTENCE ==========>*/
   /* ELSE;*/
      /* npulug begins*/

      converseLib.validationFailed(130); /* invoice is missing*/
      TS0VM001.XXXPRCNM = "V-54000"; /* process name*/
      set TS0VM001.TSPFCIVC cursor, modified, bold;
      TS0VW01.TS0VWWF10 = "Y";

      /* npulug ends*/
    end
   /* END;*/
   /*  */
  else

    /* npulug begins*/
    TS0V-54050(); /* ==========> Validate invoice entered*/
    /* npulug ends*/
    if (TS0VM001.TSPFCIVC != TS0VW03.TSPFCIVC[1])

      TS0V-54100(); /* ===> Select the factory invoice*/
                                   /* ===> file #*/

      if (SQLCA.VAGen_SQLCODE == 0) /* ===> if found*/
        /* =========== NEXT SENTENCE =========>*/
      else

        if (SQLCA.VAGen_SQLCODE == 100 /* if not found*/
         && TS0VM001.TSPFILE == TS0VW03.TSPFILE[1])
                                   /* ===> and not changed*/

          TS0V-54200(); /* ===> Get the next factory invoice*/
                                   /* ===> file #*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
                   /* group*/
   /* ------------------------------------------------------------*/

  if (TS0VM001.TSIMSCFL == "Y") /* if musical flag is yes*/
    TS0VM001.TSIMSCGR = "A"; /* set group to 'a'*/
  else
    TS0VM001.TSIMSCGR = " "; /* set group to ' '*/
  end

   /* ------------------------------------------------------------*/
                   /* musical flag*/
   /* ------------------------------------------------------------*/

  if (TS0VM001.TSIMSCFL == "Y" /* if musical flag is valid*/
   || TS0VM001.TSIMSCFL == "N")

    /* ========= NEXT SENTENCE ===========>*/

  else

    if (TS0VM001.TSIMSCFL == " ") /* if musical flag is valid*/
      TS0VM001.TSIMSCFL = "N"; /* default to no*/
    else
      converseLib.validationFailed(46); /* only 'y' or 'n' valid*/
      TS0VM001.XXXPRCNM = "V-54000"; /* process name*/
      set TS0VM001.TSIMSCFL cursor, modified, bold;
    end

  end

   /* ------------------------------------------------------------*/
                   /* MCO*/
   /* ------------------------------------------------------------*/

  if (TS0VW03.PC-XCT-ORIG-CD[1] == TS0VM001.PC-XCT-ORIG-CD
  )
  else
    TS0VW01.TS0VWWF8 = "N";
    TS0VW01.TS0VWWF9 = "N";
    TS0V-54300(); /* get MCO from PO*/
  end

  if (TS0VM001.PC-XCT-ORIG-CD == "?") /* country list requested*/

    XPXX001(); /* window intialization*/
    XX0XW02.XX0XWHDR = "    COUNTRY"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until end of request*/
      XPXCT01(); /* display country rows*/
    end

    if (XX0XW02.XX0XWPIX == 0)
      TS0VM001.PC-XCT-ORIG-CD = PC3REC.PC-XCT-ORIG-CD; /* move PO MCO*/
    else
      TS0VM001.PC-XCT-ORIG-CD = XCTTBL.XCTCD[XX0XWPIX]; /* move XCT*/
    end

    set TS0VM001.PC-XCT-ORIG-CD cursor;
    converseLib.clearScreen();

    exit stack;

  end

  if (TS0VM001.PC-XCT-ORIG-CD == PC3REC.PC-XCT-ORIG-CD
  ) /* NEXT SENTENCE*/
  else
    if (TS0VW01.TS0VWWF9 == "Y"
    )
    else
      converseLib.validationFailed(410); /* MCO's don't match*/
      TS0VM001.XXXPRCNM = "V-54000"; /* process name*/
      set TS0VM001.PC-XCT-ORIG-CD cursor, modified, bold;
      TS0VW01.TS0VWWF9 = "Y";
      TS0VW03.PC-XCT-ORIG-CD[1] = TS0VM001.PC-XCT-ORIG-CD;
      return;
    end
  end

  if (TS0VM001.PC-XCT-ORIG-CD == " ")
    if (TS0VW01.TS0VWWF8 == "Y"
    )
    else
      converseLib.validationFailed(409); /* MCO is blank*/
      TS0VM001.XXXPRCNM = "V-54000"; /* process name*/
      set TS0VM001.PC-XCT-ORIG-CD cursor, modified, bold;
      TS0VW01.TS0VWWF8 = "Y";
      TS0VW03.PC-XCT-ORIG-CD[1] = TS0VM001.PC-XCT-ORIG-CD;
      return;
    end
  else
    if (TS0VM001.PC-XCT-ORIG-CD in XCTTBL.XCTCD /* verify country*/
    )                                           /* next sentence*/
    else
      converseLib.validationFailed(411); /* MCO is not valid*/
      TS0VM001.XXXPRCNM = "TS0V-54000"; /* process name*/
      set TS0VM001.PC-XCT-ORIG-CD cursor, modified, bold;
    end
  end
   /* ------------------------------------------------------------*/
                   /* Factory Manufacture Code SSCC18MFGID*/
   /* ------------------------------------------------------------*/
  if (TS0VW01.TS0VWMFGID-BAK != TS0VM001.FY-FCTY-MFG-CD  
   || TS0VW01.TS0VWMFGID-BAK-03 != TS0VM001.MFG-CD-GPC03 /* Field changed*/
   || TS0VW01.TS0VWMFGUPFL == "Y")                       /* MFG ID CHANGE FLAG*/
     /* nkumar ends (one line)..*/
    TS0VW01.TS0VWMFGUPFL = "Y"; /* MFG ID CHANGE FLAG*/
  else
    TS0VW01.TS0VWMFGUPFL = "N"; /* MFG ID CHANGE FLAG*/
  end /**/
  /* ***************************************************************/
  /* This code is uncommented at the time of installation of SSC18 MFG code*/
  /* ***************************************************************/

  if (TS0VW01.MFG-CD-FLAG == "Y"
   && TS0VM001.MFG-CD-GPC03 == "  ")
    TS0VM001.MFG-CD-GPC03 = "00";
  end

  if (TSWREC.XGPCD == "02" /* Footwear Check - not equipment prod*/
   && TS0VW01.TS0VW-EQMT-FL == "N")
    if (TS0VM001.FY-FCTY-MFG-CD != 0091201)

      if (TS0VW01.TS0VWMFGUPFL == "N"
       && TS0VM001.FY-FCTY-MFG-CD != 0000000)

           /* =================> next sentence*/
      else
        converseLib.validationFailed(425);
        TS0VM001.XXXPRCNM = "V-54000";
        set TS0VM001.FY-FCTY-MFG-CD cursor, modified, bold;
      end
    end

  /* Gramac change begins*/
  end
  /* ELSE;                          /* GPC Not = '02' OR eqipment product*/
  /* IF TS0VM001.FY-FCTY-MFG-CD NE ' ';*/
  /* IF TS0VM001.FY-FCTY-MFG-CD GE 0*/
  /* AND TS0VM001.MFG-CD-GPC03 GE 0;*/
  /* ;*/
  /* ELSE;                      /* SSCC18 MFG ID is not NUMERIC*/
  /* IF TS0VM001.FY-FCTY-MFG-CD GE 0    /* Validation removed*/
  /* AND TS0VM001.MFG-CD-GPC03 EQ ' '*/
  /* AND TS0VW01.TS0VWMFGUPFL EQ 'Y';*/
  /* MOVE 451 TO EZEMNO;*/
  /* MOVE 'V-54000' TO TS0VM001.XXXPRCNM;*/
  /* SET TS0VM001.MFG-CD-GPC03 CURSOR,MODIFIED,BRIGHT;*/
  /* MOVE 'Y' TO TS0VW01.MFG-CD-FLAG;*/
  /* EZERTN;*/
  /* ELSE;*/
  /* IF TS0VM001.FY-FCTY-MFG-CD GE 0*/
  /* AND TS0VM001.MFG-CD-GPC03 NOT NUMERIC*/
  /* AND TS0VW01.TS0VWMFGUPFL EQ 'Y';*/
  /* MOVE 427 TO EZEMNO;*/
  /* MOVE 'V-54000' TO TS0VM001.XXXPRCNM;*/
  /* SET TS0VM001.MFG-CD-GPC03 CURSOR,MODIFIED,BRIGHT;*/
  /* EZERTN;*/
  /* ELSE;*/
  /* IF TS0VW01.TS0VWMFGUPFL EQ 'Y';*/
  /* MOVE 427 TO EZEMNO;*/
  /* MOVE 'V-54000' TO TS0VM001.XXXPRCNM;*/
  /* SET TS0VM001.FY-FCTY-MFG-CD CURSOR,MODIFIED,BRIGHT;*/
  /* SET TS0VM001.MFG-CD-GPC03 MODIFIED,BRIGHT;*/
  /* END;*/
  /* END;*/
  /* END;*/
  /* END;*/
  /* END;*/
  /* END;                           /* End of GPC check */
  /* Gramac change ends*/

  /* Gramac change begins     /* validation on MFG-CD-GPC03 removed*/
  /* IF TSWREC.XGPCD = '03'*/
  /* OR TS0VW01.TS0VW-EQMT-FL EQ 'Y';*/
  /* IF TS0VM001.FY-FCTY-MFG-CD = 0*/
  /* AND (TS0VM001.MFG-CD-GPC03 GE 0*/
  /* OR TS0VM001.MFG-CD-GPC03 NE ' ');*/
  /* MOVE 451 TO EZEMNO;*/
  /* MOVE 'V-54000' TO TS0VM001.XXXPRCNM;*/
  /* SET TS0VM001.MFG-CD-GPC03 CURSOR,MODIFIED,BRIGHT;*/
  /* EZERTN;*/
  /* END;*/
  /* END;*/
  /* Gramac change ends*/

  if (TS0VW01.TS0VWMFGUPFL == "Y") /* MFG ID CHANGE FLAG*/
    if (TS0VW01.TS0VWMFGFL != "Y")
      converseLib.validationFailed(426);
      TS0VM001.XXXPRCNM = "V-54000";
      set TS0VM001.FY-FCTY-MFG-CD cursor, modified, bold;
      TS0VW01.TS0VWMFGFL = "Y";
      return;
    end
  end

   /* **************TCS CHANGES BEGIN***************************/
   /* --------------------------------------------------------*/
   /* If PF13 is pressed first for bar-code creation,the flag*/
   /* ur0vw01-bc-create-flag will be set if the ur0vm001.fy-fcty*/
   /* -mfg-cd is blank or zeroes. Once the user presses enter*/
   /* key, the job for bar-code creation will be submitted*/
   /* if the fy-fcty-mfg-cd field is not blank or zeroes.*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is enter
   && TS0VW01.TS0V-BC-CREATE-FLAG == "Y"
   && TS0VM001.FY-FCTY-MFG-CD != "       "
   && TS0VM001.FY-FCTY-MFG-CD != "0000000"
   /* Gramac change begins*/
   /* AND TS0VM001.MFG-CD-GPC03 GE '00'*/
   /* Gramac change ends*/
  )
    TS0V-68000(); /* Bar code create job submit*/
    TS0VW01.TS0V-BC-CREATE-FLAG = "N";
    TS0VM-SCANFLAG = "P";
    return;
  end
   /* **************TCS CHANGES END*****************************/

  TS0VW01.TSIMSCFL = TS0VM001.TSIMSCFL;
  TS0VW01.TSIMSCGR = TS0VM001.TSIMSCGR;
  TS0VW01.TSRTEXT = TS0VM001.TSRTEXT;
  TS0VW01.TSPFCIVC = TS0VM001.TSPFCIVC;
  TS0VW01.TSILOCR = TS0VM001.TSILOCR;
  TS0VW01.TSPFILE = TS0VM001.TSPFILE;
  TS0VW01.PC-XCT-ORIG-CD = TS0VM001.PC-XCT-ORIG-CD;
  TS0VW01.TS0VWMFGID-BAK = TS0VM001.FY-FCTY-MFG-CD;
  TS0VW01.TS0VWMFGID-BAK-03 = TS0VM001.MFG-CD-GPC03;

   /* **                                                        ***/
   /* ********************** End of TS0V-54000 ********************/
end // end TS0V-54000

// Validate invoice no entered
Function TS0V-54050()
   /* *************************************************************/
   /* Validate the invoice number entered                      **/
   /* *************************************************************/

  TS0VW01.TS0VINVC = TS0VM001.TSPFCIVC;
  TS0VW01.TSIVIDX = 1;
  TS0VW01.TS0VINFLG = "N";

  while (TS0VW01.TSIVIDX <= 14
   && TS0VW01.TS0VINFLG == "N")

    if (TS0VW01.TS0VINV[TSIVIDX] != " ")

      if ((TS0VW01.TS0VINV[TSIVIDX] >= "A"
       && TS0VW01.TS0VINV[TSIVIDX] <= "Z")
       || (TS0VW01.TS0VINV[TSIVIDX] >= "0"
       && TS0VW01.TS0VINV[TSIVIDX] <= "9"))
         /* ===========>CONTINUE*/
      else
        if (TS0VW01.TS0VWWF11 == "Y")
           /* ===========>CONTINUE*/
        else
          converseLib.validationFailed(445);
          TS0VM001.XXXPRCNM = "V-54050"; /* process name*/
          set TS0VM001.TSPFCIVC cursor, modified, bold;
          TS0VW01.TS0VWWF11 = "Y";
          exit stack;
        end
      end
    else
      TS0VW01.TS0VINFLG = "Y";
    end

    TS0VW01.TSIVIDX = TS0VW01.TSIVIDX + 1;
  end

  while (TS0VW01.TSIVIDX <= 14)

    if (TS0VW01.TS0VINV[TSIVIDX] == " ")
      /* ===========>CONTINUE*/
    else
      if (TS0VW01.TS0VWWF11 == "Y")
        /* ===========>CONTINUE*/
      else
        converseLib.validationFailed(445);
        TS0VM001.XXXPRCNM = "V-54050"; /* process name*/
        set TS0VM001.TSPFCIVC cursor, modified, bold;
        TS0VW01.TS0VWWF11 = "Y";
        exit stack;
      end
    end

    TS0VW01.TSIVIDX = TS0VW01.TSIVIDX + 1;
  end

end // end TS0V-54050

// Select the fcty. inv. file #
Function TS0V-54100()
   /* ------------------------------------------------------------*/

             /* SELECT THE FACTORY INVOICE NUMBER*/

   /* ------------------------------------------------------------*/

  TSPREC.XGPCD = TSWREC.XGPCD; /* move in KEYS*/
  TSPREC.FY1FCTYC = TS0VM001.FY1FCTYC;
  TSPREC.TSPFCIVC = TS0VM001.TSPFCIVC;

  call "IO2600" ("S ", SQLCA, TSPREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* return code ok*/
    TS0VM001.TSPFILE = TSPREC.TSPFILE; /* move file # to map*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* if other than a valid code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-54100"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFIVC001"; /* Table view name*/
      TA1REC.TA1TBLKE = TSPREC.TSPKEY; /* Table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-54100 ********************/
end // end TS0V-54100

// Get the next fcty. inv. file #
Function TS0V-54200()
   /* ------------------------------------------------------------*/

             /* GET THE NEXT FACTORY INVOICE NUMBER*/

   /* ------------------------------------------------------------*/

  TSPREC.XGPCD = "**"; /* move in KEYS*/
  TSPREC.FY1FCTYC = "****";
  TSPREC.TSPFCIVC = "*";

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSPREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSPREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/

  call "IO2600" ("G ", SQLCA, TSPREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* return code ok*/
    TS0VM001.TSPFILE = TSPREC.TSPNBRNX; /* move next file # to map*/
  else

    if (SQLCA.VAGen_SQLCODE != 100) /* if other than a valid code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-54200"; /* Process name*/
      TA1REC.TA1LOC = "GET THE NEXT NUMBER";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFIVC001"; /* Table view name*/
      TA1REC.TA1TBLKE = TSPREC.TSPKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      exit stack;

    else

      TS0VM001.TSPFILE = +1; /* move next file # to map*/

      /* ------------------------------------------------------------*/
       /* Add the new seed invoice number generation row*/
      /* ------------------------------------------------------------*/

      TSPREC.XGPCD = "**"; /* move in KEYS*/
      TSPREC.FY1FCTYC = "****";
      TSPREC.TSPFILE = -1;
      TSPREC.TSPNBRNX = 2;
      TSPREC.TSPFCIVC = "*";

      /* *******************************************/
      /* *********** get current date **************/
      /* ************ and time *********************/
      /* *******************************************/

      XX0XS01();
      TSPREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move in set up date*/
      TSPREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
      TSPREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
      TSPREC.ZZZCHGCT = 0; /* initialize change count*/


      call "IO2600" ("A ", SQLCA, TSPREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

      if (SQLCA.VAGen_SQLCODE == 0) /* return code ok*/
        /* ========= NEXT SENTENCE ==============>*/
      else

        if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
         || SQLCA.VAGen_SQLCODE == -904)
          converseLib.validationFailed(11); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          TA1REC.TA1FUNC = "ABND"; /* Termination function*/
        end

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "V-54200"; /* Process name*/
        TA1REC.TA1LOC = "ADD A TABLE ROW";
        TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
        TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VFIVC001"; /* Table view name*/
        TA1REC.TA1TBLKE = TSPREC.TSPKEY; /* Table key*/
        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
        TS0VM001.XXXPRCNM = "V-54200"; /* Process name*/
        exit stack;
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-54200 ********************/
end // end TS0V-54200

// Select the MCO from VPOHDR01
Function TS0V-54300()
   /* ------------------------------------------------------------*/

             /* Select the MCO from the PO hdr*/

   /* ------------------------------------------------------------*/

  PC3REC.XGPCD = TS0VM001.XGPCD; /* move in KEYS*/
  PC3REC.PC3PONBR = TS0VM001.TS0VMPO;

  call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* return code ok*/
  )                            /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* if other than a valid code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-54300"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
      TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      exit stack;
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-54100 ********************/
end // end TS0V-54300

// Overlap edits
Function TS0V-55000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK FOR OVERLAPPING RANGES*/
   /*  */
   /* Find the last detail line with an entry and assign the*/
   /* index to wk5 working field.  This will reduce the*/
   /* number of lines processed each time.*/
   /*  */
   /* Check for this range within previously entered ranges.*/
   /*  */
   /* A) Check the map to see if overlapping 'from'*/
   /* ranges have been entered.*/
   /*  */
   /* B) Check the map to see if overlapping 'to'*/
   /* ranges have been entered.*/
   /*  */
   /* C) Compare the map  entries to see if*/
   /* overlapping 'from' ranges already exist in the table*/
   /* working storage.*/
   /*  */
   /* D) Compare the map  entries to see if*/
   /* overlapping 'to' ranges already exist in the table*/
   /* working storage.*/
   /*  */
   /* Check for previously entered ranges within this range.*/
   /*  */
   /* E) Compare the map entries to see if overlapping*/
   /* ranges are entered within existing ranges in the*/
   /* current detail on the map.*/
   /*  */
   /* F) Compare the map entries to see if overlapping*/
   /* ranges are entered within existing ranges in the*/
   /* current detail in working storage.*/
   /*  */
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWPAG = TS0VW01.XXXTSPAG; /* ===> save current page*/

   /* ------------------------------------------------------------*/
   /* Find the last detail line with data entered and assign*/
   /* its index to wk5 working field.*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX1 = 1; /* initialize index*/

  while (TS0VW01.TS0VWIX1 <= 22) /* until end of detail*/

    if (TS0VM001.TSOFRCRT[TS0VWIX1] > 0) /* if data exists*/
      TS0VW01.TS0VWWK5 = TS0VW01.TS0VWIX1;
    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* increment index*/

  end


   /* ------------------------------------------------------------*/
    /* A) overlapping 'from' ranges within the map*/
    /* B) overlapping 'to' ranges within the map*/
   /* ------------------------------------------------------------*/

  TS0V-55100(); /* ====> overlap check within map*/


   /* ------------------------------------------------------------*/
     /* C) overlapping 'from' ranges within working storage*/
     /* D) overlapping 'to' ranges within working storage*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TA5TSQIX > 1) /* ===> more than one T.S. page*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWWK5; /* initialize index*/

    while (TS0VW01.TS0VWIX1 > 0) /* until end of detail*/

      if (TS0VM001.TSOFRCRT[TS0VWIX1] > 0) /* ===> carton range exists*/

        TS0V-55200(); /* ====> overlap check outside map*/

      end /* ===> carton range exists*/

      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 - 1; /* decrement index*/

    end /* ===> processing a ranges in the map*/

  end /* ===> more than one T.S. page*/



   /* ------------------------------------------------------------*/
     /* E) check for previously entered map ranges within this*/
        /* range*/
   /* ------------------------------------------------------------*/

  TS0V-55300(); /* ====> overlap check inside map*/


   /* ------------------------------------------------------------*/
     /* F) check for previously entered ws ranges within this*/
        /* range*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TA5TSQIX > 1) /* ===> more than one T.S. page*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWWK5; /* initialize index*/

    while (TS0VW01.TS0VWIX1 > 0) /* until end of detail*/

      if (TS0VM001.TSOFRCRT[TS0VWIX1] > 0) /* ===> carton range exists*/

        TS0V-55400(); /* ====> overlap check outside map*/

      end /* ===> carton range exists*/

      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 - 1; /* decrement index*/

    end /* ===> processing a ranges in the map*/

  end /* ===> more than one T.S. page*/

   /* ------------------------------------------------------------*/
     /* Re-set the current T.S. page*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TA5TSQIX > 1) /* ===> more than one T.S. page*/

    TS0VW01.XXXTSPAG = TS0VW01.TS0VWPAG; /* ===> re-set current page*/

    TS0VS-TS-2(); /* ===> Obtain next T.S. page*/

  end /* ===> more than one T.S. page*/

   /* **                                                        ***/
   /* ********************** End of TS0V-55000 ********************/
end // end TS0V-55000

// Check ranges within Map
Function TS0V-55100()
   /* ------------------------------------------------------------*/
    /* 1) overlapping 'from' ranges within the map*/
    /* 2) overlapping 'to' ranges within the map*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX1 = TS0VW01.TS0VWWK5; /* initialize index*/

  while (TS0VW01.TS0VWIX1 > 0) /* until end of detail*/

    TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX1 - 1; /* initialize index*/
    TS0VW01.TS0VWWK1 = TS0VM001.TSOFRCRT[TS0VWIX1]; /* move work data*/

    if (TS0VM001.TSOTOCRT[TS0VWIX1] > 0) /* if 'to' carton entered*/
      TS0VW01.TS0VWWK2 = TS0VM001.TSOTOCRT[TS0VWIX1];
    else
      TS0VW01.TS0VWWK2 = TS0VM001.TSOFRCRT[TS0VWIX1];
    end

    while (TS0VW01.TS0VWIX2 > 0) /* until end of detail*/
      TS0VW01.TS0VWWK3 = TS0VM001.TSOFRCRT[TS0VWIX2];

      if (TS0VM001.TSOTOCRT[TS0VWIX2] > 0) /* if 'to' carton entered*/
        TS0VW01.TS0VWWK4 = TS0VM001.TSOTOCRT[TS0VWIX2];
      else
        TS0VW01.TS0VWWK4 = TS0VM001.TSOFRCRT[TS0VWIX2];
      end

      if (TS0VW01.TS0VWWK1 > 0 /* and carton exists*/
       && TS0VW01.TS0VWWK1 >= TS0VW01.TS0VWWK3
       && TS0VW01.TS0VWWK1 <= TS0VW01.TS0VWWK4
       && TS0VM001.SY4IDDSC[TS0VWIX1] == TS0VM001.SY4IDDSC[TS0VWIX2])

        /* IF TS0VM001.SY2CLRID(TS0VWIX1) EQ TS0VM001.SY2CLRID(TS0VWIX2);*/

        set TS0VM001.TSOFRCRT[TS0VWIX1] cursor, modified, bold;
        set TS0VM001.SY4IDDSC[TS0VWIX1] modified, bold;

          /* IF TSWREC.XGPCD = '03';*/
          /* SET TS0VM001.SY2CLRID(TS0VWIX1) MODIFIED,BRIGHT;*/
          /* END;*/

        TS0VM001.XXXPRCNM = "V-55100"; /* process name*/
        converseLib.validationFailed(131); /* overlapping ranges*/

        /* END;*/

      end

      if (TS0VW01.TS0VWWK2 > 0 /* and carton exists*/
       && TS0VW01.TS0VWWK2 >= TS0VW01.TS0VWWK3
       && TS0VW01.TS0VWWK2 <= TS0VW01.TS0VWWK4
       && TS0VM001.SY4IDDSC[TS0VWIX1] == TS0VM001.SY4IDDSC[TS0VWIX2])

        if (TS0VM001.SY2CLRID[TS0VWIX1] == TS0VM001.SY2CLRID[TS0VWIX2])

          set TS0VM001.TSOTOCRT[TS0VWIX1] cursor, modified, bold;
          set TS0VM001.SY4IDDSC[TS0VWIX1] modified, bold;

          if (TSWREC.XGPCD == "03")
            set TS0VM001.SY2CLRID[TS0VWIX1] modified, bold;
          end

          TS0VM001.XXXPRCNM = "V-55100"; /* process name*/
          converseLib.validationFailed(131); /* overlapping ranges*/

        end

      end

      TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 - 1; /* decrement index*/

    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 - 1; /* decrement index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-55100 ********************/
end // end TS0V-55100

// Check ranges within T.S.
Function TS0V-55200()
   /* ------------------------------------------------------------*/
      /* Start processing the map range against T.S. ranges*/

       /* Working storage:*/
         /* 1. TS0VWWK1 = Map   "FROM"  carton*/
         /* 2. TS0VWWK2 = Map   "TO"    carton*/
         /* 3. TS0VWWK3 = T.S.  "FROM"  carton*/
         /* 4. TS0VWWK4 = T.S.  "TO"    carton*/

       /* Indexes:*/
         /* 1. TS0VWIX1 = Index for Map*/
         /* 2. TS0VWIX2 = Index for Temp. storage*/
   /* Check*/
     /* A) Overlapping 'FROM' ranges within temp.   storage*/
     /* B) Overlapping 'TO' ranges within temp.   storage*/
   /* ------------------------------------------------------------*/


  TS0V-55210(); /* ===> Get the first T.S. Page to*/
                                  /* process*/

  TS0VW01.TS0VWWK1 = TS0VM001.TSOFRCRT[TS0VWIX1];

  if (TS0VM001.TSOTOCRT[TS0VWIX1] > 0) /* ===> 'TO' carton entered*/
    TS0VW01.TS0VWWK2 = TS0VM001.TSOTOCRT[TS0VWIX1];
  else
    TS0VW01.TS0VWWK2 = TS0VM001.TSOFRCRT[TS0VWIX1];
  end


   /* ------------------------------------------------------------*/
      /* Process each range in the map against all T.S. ranges*/
         /* 1. indexed by TS0VWIX1*/
      /* Process all T.S. pages, other than the current page*/
         /* 2. indexed by TS0VWIX2*/
   /* ------------------------------------------------------------*/

  while (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> LE last T.S. page*/

    while (TS0VW01.TS0VWIX2 <= 22) /* ===> Process curr T.S. page*/

      if (TS0VW04.TSOFRCRT[TS0VWIX2] > 0) /* ===> T.S. Range exists*/

        TS0VW01.TS0VWWK3 = TS0VW04.TSOFRCRT[TS0VWIX2];

        if (TS0VW04.TSOTOCRT[TS0VWIX2] > 0) /* ===> 'TO' carton entered*/
          TS0VW01.TS0VWWK4 = TS0VW04.TSOTOCRT[TS0VWIX2];
        else
          TS0VW01.TS0VWWK4 = TS0VW04.TSOFRCRT[TS0VWIX2];
        end


        /* ------------------------------------------------------------*/
          /* Check the range for:---->  Map "FROM" Range*/
        /* ------------------------------------------------------------*/

        if (TS0VW01.TS0VWWK1 >= TS0VW01.TS0VWWK3
         && TS0VW01.TS0VWWK1 <= TS0VW01.TS0VWWK4
         /* AND TS0VM001.SY2CLRID(TS0VWIX1) EQ TS0VW04.SY2CLRID(TS0VWIX2)*/
         && TS0VM001.SY4IDDSC[TS0VWIX1] == TS0VW04.SY4IDDSC[TS0VWIX2])

          set TS0VM001.TSOFRCRT[TS0VWIX1] cursor, modified, bold;
          set TS0VM001.SY4IDDSC[TS0VWIX1] modified, bold;

          /* IF TSWREC.XGPCD = '03';*/
          /* SET TS0VM001.SY2CLRID(TS0VWIX1) MODIFIED,BRIGHT;*/
          /* END;*/

          TS0VM001.XXXPRCNM = "V-55200"; /* ===> process name*/
          converseLib.validationFailed(131); /* ===> overlapping ranges*/

        end /* ===>  Check Map "FROM"   Range*/


        /* ------------------------------------------------------------*/
          /* Check the range for:---->  Map "TO"   Range*/
        /* ------------------------------------------------------------*/

        if (TS0VW01.TS0VWWK2 >= TS0VW01.TS0VWWK3
         && TS0VW01.TS0VWWK2 <= TS0VW01.TS0VWWK4
         && TS0VM001.SY2CLRID[TS0VWIX1] == TS0VW04.SY2CLRID[TS0VWIX2]
         && TS0VM001.SY4IDDSC[TS0VWIX1] == TS0VW04.SY4IDDSC[TS0VWIX2])

          set TS0VM001.TSOTOCRT[TS0VWIX1] cursor, modified, bold;
          set TS0VM001.SY4IDDSC[TS0VWIX1] modified, bold;

          /* IF TSWREC.XGPCD = '03';*/
          /* SET TS0VM001.SY2CLRID(TS0VWIX1) MODIFIED,BRIGHT;*/
          /* END;*/

          TS0VM001.XXXPRCNM = "V-55200"; /* ===> process name*/
          converseLib.validationFailed(131); /* ===> overlapping ranges*/

        end /* ===>  Check Map "TO"   Range*/

      end /* ===> T.S. & Map range exists*/

      TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* ===> increment index*/

    end /* ===> Processing Curr T.S. page*/

    TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> incr. T.S. page*/

    TS0V-55220(); /* ===> get the next T.S. Page to*/
                                   /* process*/

  end /* ===> Processing all T.S. pages*/


   /* **                                                        ***/
   /* ********************** End of TS0V-55200 ********************/
end // end TS0V-55200

// Get 1st T.S. Page to process
Function TS0V-55210()
   /* ------------------------------------------------------------*/
      /* Get the first T.S. Page to process*/
         /* 1. indexed by TS0VWIX2*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX2 = 1; /* initialize index*/

  if (TS0VW01.TS0VWPAG > 1) /* ===> If saved page > page #1*/

    TS0VW01.XXXTSPAG = 1; /* ===> set to 1 of T.S. page #1*/

  else

    TS0VW01.XXXTSPAG = 2; /* ===> set to 2 of T.S. page #1*/

  end

  TS0VS-TS-2(); /* ===> Obtain next T.S. page*/


   /* **                                                        ***/
   /* ********************** End of TS0V-55210 ********************/
end // end TS0V-55210

// Get next T.S. page to process
Function TS0V-55220()
   /* ------------------------------------------------------------*/
   /* Get the next T.S. page to process*/
   /* ------------------------------------------------------------*/


  TS0VW01.TS0VWIX2 = 1; /* ===> Init T.S. index*/

  if (TS0VW01.XXXTSPAG == TS0VW01.TS0VWPAG) /* ===> (curr = save curr) page*/

    TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> incr. T.S. page*/

  end

  if (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> LE last T.S. page*/

    TS0VS-TS-2(); /* ===> Obtain next T.S. page*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-55220 ********************/
end // end TS0V-55220

// Check prev. ranges within Map
Function TS0V-55300()
   /* ------------------------------------------------------------*/
     /* 5) check for previously entered map ranges within this*/
        /* range*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX1 = TS0VW01.TS0VWWK5; /* initialize index*/

  while (TS0VW01.TS0VWIX1 > 0) /* until end of detail*/

    TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX1 - 1; /* initialize index*/
    TS0VW01.TS0VWWK1 = TS0VM001.TSOFRCRT[TS0VWIX1]; /* move work data*/

    if (TS0VM001.TSOTOCRT[TS0VWIX1] > 0) /* if 'to' carton entered*/
      TS0VW01.TS0VWWK2 = TS0VM001.TSOTOCRT[TS0VWIX1];
    else
      TS0VW01.TS0VWWK2 = TS0VM001.TSOFRCRT[TS0VWIX1];
    end

    while (TS0VW01.TS0VWIX2 > 0) /* until end of detail*/

      TS0VW01.TS0VWWK3 = TS0VM001.TSOFRCRT[TS0VWIX2];

      if (TS0VM001.TSOTOCRT[TS0VWIX2] > 0) /* if 'to' carton entered*/
        TS0VW01.TS0VWWK4 = TS0VM001.TSOTOCRT[TS0VWIX2];
      else
        TS0VW01.TS0VWWK4 = TS0VM001.TSOFRCRT[TS0VWIX2];
      end

      if (TS0VW01.TS0VWWK1 > 0 /* and carton exists*/
       && TS0VW01.TS0VWWK3 >= TS0VW01.TS0VWWK1
       && TS0VW01.TS0VWWK4 <= TS0VW01.TS0VWWK2
       && TS0VM001.SY4IDDSC[TS0VWIX1] == TS0VM001.SY4IDDSC[TS0VWIX2])

        /* IF TS0VM001.SY2CLRID(TS0VWIX1) EQ TS0VM001.SY2CLRID(TS0VWIX2);*/

        set TS0VM001.TSOFRCRT[TS0VWIX1] cursor, modified, bold;

        if (TS0VM001.TSOTOCRT[TS0VWIX1] > 0) /* carton exists*/
          set TS0VM001.TSOTOCRT[TS0VWIX1] modified, bold;
        end

          /* IF TSWREC.XGPCD = '03';*/
          /* SET TS0VM001.SY2CLRID(TS0VWIX1) MODIFIED,BRIGHT;*/
          /* END;*/

        set TS0VM001.SY4IDDSC[TS0VWIX1] modified, bold;
        TS0VM001.XXXPRCNM = "V-55300"; /* process name*/
        converseLib.validationFailed(131); /* overlapping ranges*/

        /* END;*/

      end

      TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 - 1; /* decrement index*/
    end
    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 - 1; /* decrement index*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-55300 ********************/
end // end TS0V-55300

// Check prev. ranges within T.S.
Function TS0V-55400()
   /* ------------------------------------------------------------*/
      /* Start processing the map range against T.S. ranges*/

       /* Working storage:*/
         /* 1. TS0VWWK1 = Map   "FROM"  carton*/
         /* 2. TS0VWWK2 = Map   "TO"    carton*/
         /* 3. TS0VWWK3 = T.S.  "FROM"  carton*/
         /* 4. TS0VWWK4 = T.S.  "TO"    carton*/

       /* Indexes:*/
         /* 1. TS0VWIX1 = Index for Map*/
         /* 2. TS0VWIX2 = Index for Temp. storage*/
   /* Check*/
     /* F) check for previously entered ws ranges within this*/
        /* range*/
   /* ------------------------------------------------------------*/


  TS0V-55210(); /* ===> Get the first T.S. Page to*/
                                   /* process*/

  TS0VW01.TS0VWWK1 = TS0VM001.TSOFRCRT[TS0VWIX1];

  if (TS0VM001.TSOTOCRT[TS0VWIX1] > 0) /* ===> 'TO' carton entered*/
    TS0VW01.TS0VWWK2 = TS0VM001.TSOTOCRT[TS0VWIX1];
  else
    TS0VW01.TS0VWWK2 = TS0VM001.TSOFRCRT[TS0VWIX1];
  end


   /* ------------------------------------------------------------*/
      /* Process each range in the map against all T.S. ranges*/
         /* 1. indexed by TS0VWIX1*/
      /* Process all T.S. pages, other than the current page*/
         /* 2. indexed by TS0VWIX2*/
   /* ------------------------------------------------------------*/

  while (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> LE last T.S. page*/

    while (TS0VW01.TS0VWIX2 <= 22) /* ===> Process curr T.S. page*/

      if (TS0VW04.TSOFRCRT[TS0VWIX2] > 0) /* ===> T.S. Range exists*/

        TS0VW01.TS0VWWK3 = TS0VW04.TSOFRCRT[TS0VWIX2];

        if (TS0VW04.TSOTOCRT[TS0VWIX2] > 0) /* ===> 'TO' carton entered*/
          TS0VW01.TS0VWWK4 = TS0VW04.TSOTOCRT[TS0VWIX2];
        else
          TS0VW01.TS0VWWK4 = TS0VW04.TSOFRCRT[TS0VWIX2];
        end


        /* ------------------------------------------------------------*/
          /* Check the range for:---->*/
        /* ===> Map   "FROM"  vs.  T.S. "FROM"*/
        /* ===> T.S.  "TO"    vs.  T.S. "TO"*/
        /* ------------------------------------------------------------*/

        if (TS0VW01.TS0VWWK3 >= TS0VW01.TS0VWWK1
         /* ===> "FROM" T.S. vs. "FROM*/
         && TS0VW01.TS0VWWK4 <= TS0VW01.TS0VWWK2
         && TS0VM001.SY2CLRID[TS0VWIX1] == TS0VW04.SY2CLRID[TS0VWIX2]
         && TS0VM001.SY4IDDSC[TS0VWIX1] == TS0VW04.SY4IDDSC[TS0VWIX2])


          set TS0VM001.TSOFRCRT[TS0VWIX1] cursor, modified, bold;
          set TS0VM001.TSOTOCRT[TS0VWIX1] modified, bold;
          set TS0VM001.SY4IDDSC[TS0VWIX1] modified, bold;

          /* IF TSWREC.XGPCD = '03';*/
          /* SET TS0VM001.SY2CLRID(TS0VWIX1) MODIFIED,BRIGHT;*/
          /* END;*/

          TS0VM001.XXXPRCNM = "V-55400"; /* process name*/
          converseLib.validationFailed(131); /* overlapping ranges*/

        end

      end /* ===> T.S. & Map range exists*/

      TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* ===> increment index*/

    end /* ===> Processing Curr T.S. page*/

    TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> incr. T.S. page*/

    TS0V-55220(); /* ===> get the next T.S. Page to*/
                                   /* process*/

  end /* ===> Processing all T.S. pages*/


   /* **                                                        ***/
   /* ********************** End of TS0V-55400 ********************/
end // end TS0V-55400

// Check for reset warning flags
Function TS0V-56000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CHECK FOR MAP DETAIL CHANGES TO RESET FLAG*/
   /*  */
   /* If any of the map information has changed from the*/
   /* previous map information saved in TS0VW12, then*/
   /* reset the edits warning flag*/
   /*  */
   /* ------------------------------------------------------------*/

   /* **************************************************/
   /* Check to see if warning flag*/
   /* needs to be reset*/
   /* **************************************************/

  TS0VW01.TS0VWIX1 = 1; /* set index to 1*/

  while (TS0VW01.TS0VWIX1 <= 22) /* until end of detail lines*/

    if (TS0VM001.TSOFRCRT[TS0VWIX1] == TS0VW12.TSOFRCRT[TS0VWIX1]
     && TS0VM001.TSOTOCRT[TS0VWIX1] == TS0VW12.TSOTOCRT[TS0VWIX1]
     /* AND TS0VM001.SY2CLRID(TS0VWIX1) EQ TS0VW12.SY2CLRID(TS0VWIX1)*/
     && TS0VM001.SY4IDDSC[TS0VWIX1] == TS0VW12.SY4IDDSC[TS0VWIX1]
     && TS0VM001.TSOSHPQT[TS0VWIX1] == TS0VW12.TSOSHPQT[TS0VWIX1])

      /* ========== NEXT SENTENCE ================>*/

    else
      TS0VW01.TS0VWWUP = "N"; /* warning update indicator flag*/
      TS0VW01.TS0VWWFL = "N"; /* reset po style warning flag*/
      TS0VW01.TS0VWWA1 = "                          ";
      TS0VW01.TS0VWWA2 = "                          ";
      TS0VW01.TS0VWWA3 = "                          ";
      TS0VW01.TS0VWWA4 = "                          ";
      TS0VW01.TS0VWWA5 = "                          ";
      TS0VW01.TS0VWWA6 = "                          ";
      TS0VW01.TS0VWWA7 = "                          ";
      TS0VW01.TS0VWIX1 = 23; /* end loop*/
    end
    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* increment index*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-56000 ********************/
end // end TS0V-56000

// Check 6,12,24 multiple warning
Function TS0V-57000()
   /* ------------------------------------------------------------*/

               /* CHECK 6, 12, 24 MULTIPLE WARNINGS*/

     /* 1) If the product code is '02' and no errors or warnings*/
        /* occurred so far;*/
        /* a) find the number of cartons.*/
        /* b) multiply number of cartons by 6, 12,and 24 quantity*/
        /* c) check to see if total ship quantity is equal to one*/
           /* of the calculated multiples.*/

        /* **** working fields are used due to line length *****/
        /* **** restrictions.                              *****/

   /* ------------------------------------------------------------*/

  if (TSWREC.XGPCD == "02") /* if the gpc code is '02'*/

    TS0VW01.TS0VWIX1 = 22; /* initialize index*/

    while (TS0VW01.TS0VWIX1 > 0) /* until end of detail*/

      if (TS0VM001.TSOFRCRT[TS0VWIX1] == 0) /* if detail line blank*/

        /* ============ NEXT SENTENCE ============>*/

      else

        if (TS0VM001.TSOTOCRT[TS0VWIX1] > TS0VM001.TSOFRCRT[TS0VWIX1])

          TS0VW01.TS0VWWK1 = TS0VM001.TSOTOCRT[TS0VWIX1];
          TS0VW01.TS0VWWK2 = TS0VM001.TSOFRCRT[TS0VWIX1];
          TS0VW01.TS0VWWK4 = TS0VW01.TS0VWWK1 - TS0VW01.TS0VWWK2;
          TS0VW01.TS0VWWK4 = TS0VW01.TS0VWWK4 + 1; /* include to carton*/

        else

          TS0VW01.TS0VWWK4 = 1; /* only 1 carton exists*/

        end

        TS0VW01.TS0VWWK1 = TS0VW01.TS0VWWK4 * TS0VW01.TS0VWQU1; /* 6*/
        TS0VW01.TS0VWWK2 = TS0VW01.TS0VWWK4 * TS0VW01.TS0VWQU2; /* 12*/
        TS0VW01.TS0VWWK3 = TS0VW01.TS0VWWK4 * TS0VW01.TS0VWQU3; /* 24*/

        if (TS0VM001.TSOSHPQT[TS0VWIX1] != TS0VW01.TS0VWWK1 /* if not*/
         && TS0VM001.TSOSHPQT[TS0VWIX1] != TS0VW01.TS0VWWK2 /* equal to*/
         && TS0VM001.TSOSHPQT[TS0VWIX1] != TS0VW01.TS0VWWK3) /* any*/

          if (TS0VM001 is modified
           || TS0VW01.TS0VWSWE == "Y") /* ===> edit switch*/

            TS0VW01.TS0VWWF1 = "Y"; /* indicate warning flag 1*/
            TS0VW01.TS0VWSH1[TS0VWIX1] = "Y"; /* Set highlight flag*/

          end

        end

      end

      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 - 1; /* decrement index*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-57000 ********************/
end // end TS0V-57000

// ---> Verify against the P.O.
Function TS0V-58000()
   /* *************************************************************/
   /*  */
   /* VERIFY ENTRIES AGAINST P.O.*/
   /* ---------------------------*/
   /*  */
   /* 1) This process will first obtain the color/size*/
   /* quantities from save WS in order to use them*/
   /* in quantity check calculations.*/
   /*  */
   /* 2) If there is no po on order quantity for a*/
   /* particular size, then issue a warning indicating*/
   /* this size not found on p.o.*/
   /*  */
   /* 3) Perform other calculations in order to determine*/
   /* over shipments per size row and issue appropriate*/
   /* warnings.*/
   /*  */
   /* *************************************************************/

  move 0 to TS0VW03.TS0VWWQT[1] for all; /* ===> Initialize WS style qty*/
  move 0 to TS0VW01.TS0VWWSX[1] for all; /* ===> Initialize WS qty array*/

  move TS0VW01.TS0VWWSA to TS0VW03.TS0VWWSA[1] for all; /* ===> Load W.S. size array*/

  if (TS0VW01.TA5TSQIX > 1) /* ===> more than one T.S. page*/

    TS0V-58100(); /* ===> Obtain Temp Storage size*/
                                   /* quantities*/

  end

  TS0VW01.TS0VWIX1 = 22; /* ===> initialize index*/

  while (TS0VW01.TS0VWIX1 > 0) /* until end of detail*/

    if (TS0VM001.TSOFRCRT[TS0VWIX1] == 0) /* if detail line blank*/

      /* ======= NEXT SENTENCE ================>*/

    else

      if (TS0VM001.XGPCD == "02" /* ===> Skip all edits if gpc 02*/
       && TS0VM001.XQACD == "02" /* ===> and quality 02*/
       && TS0VM001.TS0VMPO > 0)  /* ===> and P.O. nbr present*/

        /* ======= NEXT SENTENCE ================>*/

      else /* ===> Do the edit checks*/


        TS0V-58200(); /* ===> Locate/load arrays for color*/


        /* **----------------------------------------------------****/
         /* If this entry was not found on the po, then bypass*/
            /* these quantity warning checks*/
        /* **----------------------------------------------------****/


        if (TS0VW01.TS0VWPSX[TS0VWIX3] == 0) /* ===> If no qty for this size*/


          TS0V-58300(); /* ===> Set Flags, no P.O. Data*/


        else /* ===> Process qtys for size*/


          TS0V-58400(); /* ===> Load size qty array map assoc.*/


          TS0V-58500(); /* ===> Check for errors*/


          TS0V-58600(); /* ===> check qtys entered vs. accum*/


          TS0V-58700(); /* ===> check for errors*/


        end /* ===> No qty for this size*/

      end /* ===> Skip all edits*/

    end /* ===> Detail line blank*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 - 1; /* ===> decrement index*/

  end /* ===> Until end of detail*/

  TS0V-58800(); /* ===> process error table*/


   /* **                                                        ***/
   /* ********************** End of TS0V-58000 ********************/
end // end TS0V-58000

// Obtain size qtys not curr T.S.
Function TS0V-58100()
   /* ------------------------------------------------------------*/

              /* OBTAIN WS SIZE QUANTITIES*/

      /* 1) This process will cycle through temp. storage*/
         /* and add up size ship quantities for each particular*/
         /* color for all temp. storage values.*/

       /* Note:*/
             /* Don't process current T.S page because map qtys*/
              /* will be used in later calculations.*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWPAG = TS0VW01.XXXTSPAG; /* ===> save current page*/

  if (TS0VW01.XXXTSPAG > 1) /* ===> If not on T.S. page #1*/

    TS0VW01.XXXTSPAG = 1; /* ===> set to T.S. page #1*/

  else

    TS0VW01.XXXTSPAG = 2; /* ===> set to T.S. page #2*/

  end

  TS0VS-TS-2(); /* ===> Obtain next T.S. page*/

  while (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> LE last T.S. page*/

    /* ** Locate clr and add shp qty to appropriate size bucket ***/

    TS0VW01.TS0VWIX1 = 1; /* initialize index*/

    while (TS0VW01.TS0VWIX1 <= 22) /* ===> LE last map column*/

      move 0 to TS0VW01.TS0VWWSX[1] for all;

      if (TS0VW04.SY2CLRID[TS0VWIX1] in TS0VW03.SY2CLRID /* ===> Locate clr*/
       && TS0VW04.TSOFRCRT[TS0VWIX1] > 0)                /* ===> data exists*/

        TS0VW01.TS0VWWSA = TS0VW03.TS0VWWSA[sysVar.arrayIndex];

        TS0VW01.TS0VWIX3 = TS0VW04.SY5SZID[TS0VWIX1];

        TS0VW01.TS0VWWK1 = 0;
        TS0VW01.TS0VWWK2 = 0;

        TS0VW01.TS0VWWK1 = TS0VW04.TSOSHPQT[TS0VWIX1];
        TS0VW01.TS0VWWK2 = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWWSX[TS0VWIX3];
        TS0VW01.TS0VWWSX[TS0VWIX3] = TS0VW01.TS0VWWK2;
        TS0VW03.TS0VWWSA[sysVar.arrayIndex] = TS0VW01.TS0VWWSA;

        TS0VW01.TS0VWWK2 = 0;
        TS0VW01.TS0VWWK2 = TS0VW03.TS0VWWQT[sysVar.arrayIndex];
        TS0VW03.TS0VWWQT[sysVar.arrayIndex] = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWWK2;

      end /* ===> Locate clr*/

      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> increment index*/

    end /* ===> LE last map column*/

    TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> incr. index*/

    if (TS0VW01.XXXTSPAG == TS0VW01.TS0VWPAG) /* ===> T.S. page = curr page*/

      TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> incr. index*/

    end

    if (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> LE last T.S. page*/

      TS0VS-TS-2(); /* ===> Obtain next T.S. page*/

    end

  end /* ===> Processing of all T.S. pages*/

  TS0VW01.XXXTSPAG = TS0VW01.TS0VWPAG; /* ===> re-set current page*/

  TS0VS-TS-2(); /* ===> Obtain next T.S. page*/

   /* **                                                        ***/
   /* ********************** End of TS0V-58100 ********************/
end // end TS0V-58100

// P.O. Size re-define/load
Function TS0V-58200()
   /* **********************************************************/
   /* Redefine po size qty check quantities for the*/
   /* particular gpc-cpl packing list color being edited.*/
   /* **********************************************************/

  TS0VW01.TS0VWIX3 = TS0VW01.SY5SZID[TS0VWIX1]; /* ===> set index*/

  move 0 to TS0VW01.TS0VWPSX[1] for all; /* ===> Initialize po on order qty array*/

  /* IF TS0VM001.SY2CLRID(TS0VWIX1) IN TS0VW03.SY2CLRID;/* ===> Locate clr*/
  if (TS0VM001.TS0VMCLR in TS0VW03.SY2CLRID) /* ===> Locate clr*/
    TS0VW01.TS0VWPSA = TS0VW03.TS0VWPSA[sysVar.arrayIndex]; /* ===> size qtys*/
    TS0VW01.TS0VWPSQ = TS0VW03.TS0VWPSQ[sysVar.arrayIndex]; /* ===> total qtys*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-58200 ********************/
end // end TS0V-58200

// No P.O. size data error <set>
Function TS0V-58300()
   /* *************************************************************/
   /* ***   Set appropriate flags for error*/
   /* *************************************************************/

  if (TS0VM001 is modified
   || TS0VW01.TS0VWSWE == "Y") /* ===> edit switch*/

    TS0VW01.TS0VWWUP = "Y"; /* Set update warning flag*/
    TS0VW01.TS0VWWF2 = "Y"; /* Set warning switch*/
    TS0VW01.TS0VWSH2[TS0VWIX1] = "Y"; /* set for highlights*/

  end

  TS0VW04.XRECD[TS0VWIX1] = "PZ"; /* size not on po excep code*/

  if ("PZ" in XRETBL.XRECD)

    if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If this is hard error*/
      TS0V-58310(); /* check size error table*/
    else
      TS0VW04.TSISTAT[TS0VWIX1] = "99"; /* Reset status*/
    end

  else

    TS0V-58310(); /* check size error table*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0V-58300 ********************/
end // end TS0V-58300

// Check size error table
Function TS0V-58310()
   /* *************************************************************/
   /* Check the size error table*/
   /* *************************************************************/

  TS0VW01.TS0VWPS1 = "N"; /* initialize problem switch*/
  TS0VW01.TS0VWHEX = 1; /* initialize index*/
  TS0VW04.TSISTAT[TS0VWIX1] = "ER"; /* set error*/

  while (TS0VW01.TS0VWHEX <= 40)

    /* IF TS0VM001.SY2CLRID(TS0VWIX1) EQ TS0VW13.SY2CLRID(TS0VWHEX)*/
    if (TS0VM001.TS0VMCLR == TS0VW13.SY2CLRID[TS0VWHEX]
     && TS0VW01.SY5SZID[TS0VWIX1] == TS0VW13.SY5SZID[TS0VWHEX])

      TS0VW01.TS0VWPS1 = "Y"; /* error already listed in table*/
      TS0VW01.TS0VWHEX = 40; /* end loop*/

    else
      /* ========= NEXT SENTENCE =========>*/
    end

    TS0VW01.TS0VWHEX = TS0VW01.TS0VWHEX + 1; /* increase index*/

  end

  TS0VW01.TS0VWHEX = 1; /* initialize index*/

  while (TS0VW01.TS0VWPS1 == "N" /* while not already listed*/
   && TS0VW01.TS0VWHEX <= 40)

    if (TS0VW13.SY2CLRID[TS0VWHEX] == " " /* find next blank in table*/
     && TS0VW13.SY5SZID[TS0VWHEX] == 0)  

      /* MOVE TS0VM001.SY2CLRID(TS0VWIX1) TO TS0VW13.SY2CLRID(TS0VWHEX);*/
      TS0VW13.SY2CLRID[TS0VWHEX] = TS0VM001.TS0VMCLR;
      TS0VW13.SY5SZID[TS0VWHEX] = TS0VW01.SY5SZID[TS0VWIX1];
      TS0VW13.XRECD[TS0VWHEX] = TS0VW04.XRECD[TS0VWIX1];
      TS0VW01.TS0VWPS1 = "Y"; /* end loop*/

    else
      /* ========= NEXT SENTENCE =========>*/
    end

    TS0VW01.TS0VWHEX = TS0VW01.TS0VWHEX + 1; /* increase index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-58310 ********************/
end // end TS0V-58310

// Load size qty arrays map assoc
Function TS0V-58400()
   /* **********************************************************/
   /* Get the previous size quantities on this screen*/
   /* **********************************************************/

  move 0 to TS0VW03.TS0VWMQT[1] for all; /* Initialize map qty array*/
  move 0 to TS0VW01.TS0VWMSX[1] for all; /* Initialize map size qty array*/
  move TS0VW01.TS0VWMSA to TS0VW03.TS0VWMSA[1] for all;

  TS0V-58410(); /* Add up previous size quantities on screen*/

   /* **********************************************************/
   /* Redefine rest of size qty check quantities for the*/
   /* particular gpc-cpl packing list color being edited.*/
   /* **********************************************************/

  move 0 to TS0VW01.TS0VWRSX[1] for all; /* Initialize receipt qty array*/
  move 0 to TS0VW01.TS0VWSSX[1] for all; /* Initialize shipped qty array*/
  move 0 to TS0VW01.TS0VWWSX[1] for all; /* Initialize WS qty array*/
  move 0 to TS0VW01.TS0VWMSX[1] for all; /* Initialize map size qty array*/

   /* IF TS0VM001.SY2CLRID(TS0VWIX1) IN TS0VW03.SY2CLRID; /* Locate clr*/
  if (TS0VM001.TS0VMCLR in TS0VW03.SY2CLRID) /* Locate clr*/
    TS0VW01.TS0VWRSA = TS0VW03.TS0VWRSA[sysVar.arrayIndex];
    TS0VW01.TS0VWRSQ = TS0VW03.TS0VWRSQ[sysVar.arrayIndex];
    TS0VW01.TS0VWSSA = TS0VW03.TS0VWSSA[sysVar.arrayIndex];
    TS0VW01.TS0VWSSQ = TS0VW03.TS0VWSSQ[sysVar.arrayIndex];
    TS0VW01.TS0VWWSA = TS0VW03.TS0VWWSA[sysVar.arrayIndex];
    TS0VW01.TS0VWWQT = TS0VW03.TS0VWWQT[sysVar.arrayIndex];
    TS0VW01.TS0VWMSA = TS0VW03.TS0VWMSA[sysVar.arrayIndex];
    TS0VW01.TS0VWMQT = TS0VW03.TS0VWMQT[sysVar.arrayIndex];
  end

   /* **********************************************************/
   /* check accumulated quantities against user entered shp qty*/
     /* per size.*/
   /* **********************************************************/

  TS0VW01.TS0VWTTQ = 0; /* Init fields*/
  TS0VW01.TS0VWTTD = 0;
  TS0VW01.TS0VWTTP = 0;

  TS0VW01.TS0VWPOQ = TS0VW01.TS0VWPSX[TS0VWIX3]; /* ===> po*/
  TS0VW01.TS0VWRCQ = TS0VW01.TS0VWRSX[TS0VWIX3]; /* ===> receipts*/
  TS0VW01.TS0VWPLQ = TS0VW01.TS0VWSSX[TS0VWIX3]; /* ===> shipmnts*/
  TS0VW01.TS0VWWSQ = TS0VW01.TS0VWWSX[TS0VWIX3]; /* ===> WS*/
  TS0VW01.TS0VWMPQ = TS0VW01.TS0VWMSX[TS0VWIX3]; /* ===> Map*/


  TS0VW01.TS0VWTTQ = TS0VW01.TS0VWPLQ + TS0VW01.TS0VWRCQ;
  TS0VW01.TS0VWTTQ = TS0VW01.TS0VWTTQ + TS0VW01.TS0VWWSQ;
  TS0VW01.TS0VWTTQ = TS0VW01.TS0VWTTQ + TS0VW01.TS0VWMPQ;
  TS0VW01.TS0VWTTQ = TS0VW01.TS0VWTTQ + TS0VM001.TSOSHPQT[TS0VWIX1];

   /* ** calculate total differance*/
  TS0VW01.TS0VWTTD = TS0VW01.TS0VWPOQ - TS0VW01.TS0VWTTQ;
  if (TS0VW01.TS0VWTTD < 0) /* If negative*/
    TS0VW01.TS0VWTTD = TS0VW01.TS0VWTTD * -1; /* Make positive*/
  end

   /* ** calculate total percentage off*/
  if (TS0VW01.TS0VWPOQ != 0) /* If po quantity not zero*/
    TS0VW01.TS0VWTTP = TS0VW01.TS0VWTTD / TS0VW01.TS0VWPOQ * 100;
  end

  TS0VW01.TS0VWPLQ = TS0VW01.TS0VWPLQ + TS0VW01.TS0VWRCQ;
  TS0VW01.TS0VWPLQ = TS0VW01.TS0VWPLQ + TS0VW01.TS0VWWSQ;
  TS0VW01.TS0VWPLQ = TS0VW01.TS0VWPLQ + TS0VW01.TS0VWMPQ;
  TS0VW01.TS0VWPOQ = TS0VW01.TS0VWPOQ - TS0VW01.TS0VWPLQ;


   /* **                                                        ***/
   /* ********************** End of TS0V-58400 ********************/
end // end TS0V-58400

// Obtain map size qtys
Function TS0V-58410()
   /* ------------------------------------------------------------*/

              /* Get MAP SIZE QUANTITIES*/

      /* 1) This process will cycle through all previous map*/
         /* entries and add up ship quantities for each*/
         /* particular color for all except the current row*/
         /* being edited.*/

   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIXW = 1; /* initialize index*/
  while (TS0VW01.TS0VWIXW <= 22) /* LE last map line*/

    if (TS0VM001.TSOFRCRT[TS0VWIXW] > 0 /* If this row is valid*/
     && TS0VW01.TS0VWIXW != TS0VW01.TS0VWIX1) /* and not current row*/

      /* ** Locate clr and add shp qty to appropriate size bucket ***/

      move 0 to TS0VW01.TS0VWMSX[1] for all;

      /* IF TS0VM001.SY2CLRID(TS0VWIXW) IN TS0VW03.SY2CLRID;/* Locate clr*/
      if (TS0VM001.TS0VMCLR in TS0VW03.SY2CLRID) /* Locate clr*/

        TS0VW01.TS0VWMSA = TS0VW03.TS0VWMSA[sysVar.arrayIndex];
        TS0VW01.TS0VWIX4 = TS0VW01.SY5SZID[TS0VWIXW];
        TS0VW01.TS0VWWK1 = 0;
        TS0VW01.TS0VWWK2 = 0;
        TS0VW01.TS0VWWK1 = TS0VM001.TSOSHPQT[TS0VWIXW];
        TS0VW01.TS0VWWK2 = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWMSX[TS0VWIX4];
        TS0VW01.TS0VWMSX[TS0VWIX4] = TS0VW01.TS0VWWK2;
        TS0VW03.TS0VWMSA[sysVar.arrayIndex] = TS0VW01.TS0VWMSA;

        TS0VW01.TS0VWWK2 = 0;
        TS0VW01.TS0VWWK2 = TS0VW03.TS0VWMQT[sysVar.arrayIndex];
        TS0VW03.TS0VWMQT[sysVar.arrayIndex] = TS0VW01.TS0VWWK1 + TS0VW01.TS0VWWK2;

      end

    end

    TS0VW01.TS0VWIXW = TS0VW01.TS0VWIXW + 1; /* increment index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-58410 ********************/
end // end TS0V-58410

// Check for errors (size level)
Function TS0V-58500()
   /* ------------------------------------------------------------*/
    /* check for errors*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWTTD <= TS0VW01.TS0VWZSQ /* ===> If below soft error*/
   && TS0VW01.TS0VWTTP <= TS0VW01.TS0VWZSP) /* ===> tolerances*/

    TS0VW04.TSISTAT[TS0VWIX1] = "99"; /* ===> Set error status*/
    TS0VW04.XRECD[TS0VWIX1] = "99"; /* ===> ok*/

  else

      /* **-----------------------------***/
      /* **    any under shipment       ***/
      /* **-----------------------------***/

    if (TS0VM001.TSOSHPQT[TS0VWIX1] < TS0VW01.TS0VWPOQ)

      if (TS0VM001 is modified
       || TS0VW01.TS0VWSWE == "Y") /* ===> edit switch*/

        TS0VW01.TS0VWWUP = "Y"; /* ===> Set update warning flag*/
        TS0VW01.TS0VWWF3 = "Y"; /* ===> Set array warning*/
        TS0VW01.TS0VWSH3[TS0VWIX1] = "Y"; /* ===> ind highlight row*/

      end

      TS0VW04.TSISTAT[TS0VWIX1] = "99"; /* ===> Set error status*/
      TS0VW04.XRECD[TS0VWIX1] = "99"; /* ===> ok*/

    else

        /* **-----------------------------***/
        /* **   overship verify check     ***/
        /* **-----------------------------***/

      if (TS0VM001.TSOSHPQT[TS0VWIX1] > TS0VW01.TS0VWPOQ)

          /* **-----------------------------***/
          /* **   overship over tolerance   ***/
          /* **-----------------------------***/

        if (TS0VW01.TS0VWTTD > TS0VW01.TS0VWZHQ
         && TS0VW01.TS0VWTTP > TS0VW01.TS0VWZHP)

          if (TS0VM001 is modified
           || TS0VW01.TS0VWSWE == "Y") /* ===> edit switch*/

            TS0VW01.TS0VWWUP = "Y"; /* ===> Set update warning flag*/
            TS0VW01.TS0VWWF5 = "Y"; /* ===> Set array warning*/
            TS0VW01.TS0VWSH5[TS0VWIX1] = "Y";
                                   /* ===> ind highlight row*/

          end

          TS0VW04.XRECD[TS0VWIX1] = "OH"; /* Over Hard code*/

          if ("OH" in XRETBL.XRECD)

            if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If hard error*/
              TS0V-58310(); /* check size error table*/
            else
              TS0VW04.TSISTAT[TS0VWIX1] = "99"; /* Reset stat*/
            end

          else

            TS0V-58310(); /* check size error table*/

          end

        else

            /* **-----------------------------***/
            /* **  overship under tolerance   ***/
            /* **-----------------------------***/

          if (TS0VM001 is modified
           || TS0VW01.TS0VWSWE == "Y") /* ===> edit switch*/

            TS0VW01.TS0VWWUP = "Y"; /* ===> Set update warning flag*/
            TS0VW01.TS0VWWF4 = "Y"; /* ===> Set array warning*/
            TS0VW01.TS0VWSH4[TS0VWIX1] = "Y";
                                   /* ===> ind highlight row*/

          end

          TS0VW04.XRECD[TS0VWIX1] = "OS"; /* Over soft code*/

          if ("OS" in XRETBL.XRECD)

            if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If hard error*/
              TS0V-58310(); /* check size error table*/
            else
              TS0VW04.TSISTAT[TS0VWIX1] = "99"; /* Reset stat*/
            end

          else

            TS0V-58310(); /* check size error table*/

          end

        end

      end

    end

  end



   /* **                                                        ***/
   /* ********************** End of TS0V-58500 ********************/
end // end TS0V-58500

// Verify entered vs. accum qtys
Function TS0V-58600()
   /* **********************************************************/
   /* check accumulated quantities against user entered shp qty*/
     /* per style.*/
   /* **********************************************************/

  TS0VW01.TS0VWTTQ = 0; /* Init fields*/
  TS0VW01.TS0VWTTD = 0;
  TS0VW01.TS0VWTTP = 0;

  TS0VW01.TS0VWPOQ = TS0VW01.TS0VWPSQ; /* po*/
  TS0VW01.TS0VWRCQ = TS0VW01.TS0VWRSQ; /* receipts*/
  TS0VW01.TS0VWPLQ = TS0VW01.TS0VWSSQ; /* shipmnts*/
  TS0VW01.TS0VWWSQ = TS0VW01.TS0VWWQT; /* WS*/
  TS0VW01.TS0VWMPQ = TS0VW01.TS0VWMQT; /* Map*/


  TS0VW01.TS0VWTTQ = TS0VW01.TS0VWPLQ + TS0VW01.TS0VWRCQ;
  TS0VW01.TS0VWTTQ = TS0VW01.TS0VWTTQ + TS0VW01.TS0VWWSQ;
  TS0VW01.TS0VWTTQ = TS0VW01.TS0VWTTQ + TS0VW01.TS0VWMPQ;
  TS0VW01.TS0VWTTQ = TS0VW01.TS0VWTTQ + TS0VM001.TSOSHPQT[TS0VWIX1];

   /* ** calculate total differance*/
  TS0VW01.TS0VWTTD = TS0VW01.TS0VWPOQ - TS0VW01.TS0VWTTQ;
  if (TS0VW01.TS0VWTTD < 0) /* If negative*/
    TS0VW01.TS0VWTTD = TS0VW01.TS0VWTTD * -1; /* Make positive*/
  end

   /* ** calculate total percentage off*/
  if (TS0VW01.TS0VWPOQ != 0) /* If po quantity not zero*/
    TS0VW01.TS0VWTTP = TS0VW01.TS0VWTTD / TS0VW01.TS0VWPOQ * 100;
  end

  TS0VW01.TS0VWPLQ = TS0VW01.TS0VWPLQ + TS0VW01.TS0VWRCQ;
  TS0VW01.TS0VWPLQ = TS0VW01.TS0VWPLQ + TS0VW01.TS0VWWSQ;
  TS0VW01.TS0VWPLQ = TS0VW01.TS0VWPLQ + TS0VW01.TS0VWMPQ;
  TS0VW01.TS0VWPOQ = TS0VW01.TS0VWPOQ - TS0VW01.TS0VWPLQ;


   /* **                                                        ***/
   /* ********************** End of TS0V-58600 ********************/
end // end TS0V-58600

// Check for errors (item level)
Function TS0V-58700()
   /* ------------------------------------------------------------*/
    /* Check for errors*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWTTD <= TS0VW01.TS0VWISQ /* If below soft error*/
   && TS0VW01.TS0VWTTP <= TS0VW01.TS0VWISP) /* tolerances*/

    /* =========  NEXT SENTENCE =============>*/

  else

    /* **------------------------*/
    /* ** any under shipment ***/
    /* **------------------------*/
    if (TS0VM001.TSOSHPQT[TS0VWIX1] < TS0VW01.TS0VWPOQ)
      /* =========  NEXT SENTENCE =============>*/
    else

      /* **------------------------*/
      /* ** overship  ***/
      /* **------------------------*/
      if (TS0VM001.TSOSHPQT[TS0VWIX1] > TS0VW01.TS0VWPOQ)

        /* **------------------------*/
        /* ** overship over tolerance ***/
        /* **------------------------*/
        if (TS0VW01.TS0VWTTD > TS0VW01.TS0VWIHQ
         && TS0VW01.TS0VWTTP > TS0VW01.TS0VWIHP)

          if (TS0VM001 is modified
           || TS0VW01.TS0VWSWE == "Y") /* ===> edit switch*/

            TS0VW01.TS0VWWUP = "Y"; /* Set update warning flag*/
            TS0VW01.TS0VWWF6 = "Y"; /* Set array warning*/
            TS0VW01.TS0VWSH6[TS0VWIX1] = "Y"; /* ind highlight row*/

          end

          TS0VW04.XRECD[TS0VWIX1] = "OH"; /* Over hard code*/
          if ("OH" in XRETBL.XRECD)
            if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If hard error*/
              TS0V-58310(); /* check size error table*/
            else
              TS0VW04.TSISTAT[TS0VWIX1] = "99"; /* Reset stat*/
            end
          else
            TS0V-58310(); /* check size error table*/
          end
        else

          /* **------------------------*/
          /* ** overship under tolerance ***/
          /* **------------------------*/
          if (TS0VM001 is modified
           || TS0VW01.TS0VWSWE == "Y") /* ===> edit switch*/

            TS0VW01.TS0VWWUP = "Y"; /* Set update warning flag*/
            TS0VW01.TS0VWWF7 = "Y"; /* Set array warning*/
            TS0VW01.TS0VWSH7[TS0VWIX1] = "Y"; /* ind hghlght*/

          end

          if (TS0VW04.TSISTAT[TS0VWIX1] == "  "
           || TS0VW04.TSISTAT[TS0VWIX1] == "99")
            if (TS0VW04.XRECD[TS0VWIX1] == " "
             || TS0VW04.XRECD[TS0VWIX1] == "99")
              TS0VW04.XRECD[TS0VWIX1] = "OS"; /* Over soft code*/
            end
          end

          if ("OS" in XRETBL.XRECD)

            if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If hard error*/
              TS0V-58310(); /* check size error table*/
            else
              /* =========  NEXT SENTENCE =============>*/
            end

          else

            TS0V-58310(); /* check size error table*/

          end

        end

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-58700 ********************/
end // end TS0V-58700

// process errors in table
Function TS0V-58800()
   /* ------------------------------------------------------------*/
    /* Clear fixed error from the table*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX1 = 1; /* intialize index*/

  while (TS0VW01.TS0VWIX1 <= 22)

    if (TS0VW04.TSISTAT[TS0VWIX1] == "ER")

      /* ======= NEXT SENTENCE ================>*/

    else

      TS0V-58810(); /* clear fixed errors from table*/

    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1;

  end

   /* update T.S. with status only*/
  TS0VS-TS-6();

   /* **                                                        ***/
   /* ********************** End of TS0V-58800 ********************/
end // end TS0V-58800

// Clear fixed errors from table
Function TS0V-58810()
   /* ------------------------------------------------------------*/
    /* Clear the fixed errors from the table*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWHEX = 1; /* initialize index*/

  while (TS0VW01.TS0VWHEX <= 40)

    /* IF TS0VM001.SY2CLRID(TS0VWIX1) EQ TS0VW13.SY2CLRID(TS0VWHEX)*/
    if (TS0VM001.TS0VMCLR == TS0VW13.SY2CLRID[TS0VWHEX]
     && TS0VW01.SY5SZID[TS0VWIX1] == TS0VW13.SY5SZID[TS0VWHEX])

      TS0VW13.SY2CLRID[TS0VWHEX] = " "; /* clear table color*/
      TS0VW13.SY5SZID[TS0VWHEX] = 0; /* clear table size*/
      TS0VW13.XRECD[TS0VWHEX] = " "; /* clear table exception code*/

    else
      /* ========= NEXT SENTENCE ================>*/
    end

    TS0VW01.TS0VWHEX = TS0VW01.TS0VWHEX + 1;

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-58810 ********************/
end // end TS0V-58810

// Process warning flags set
Function TS0V-59000()
   /* ------------------------------------------------------------*/
   /* Process Array Warning Flags*/
   /* ------------------------------------------------------------*/

   /* *********************************************/
   /* Process 6,12,24 multiple warning*/
   /* flag first.*/
   /* *********************************************/

  if (TS0VW01.TS0VWWF1 == "Y")

    TS0VW01.TS0VWIX3 = 22;

    while (TS0VW01.TS0VWIX3 >= 1)

      if (TS0VW01.TS0VWSH1[TS0VWIX3] == "Y")
        set TS0VM001.TSOSHPQT[TS0VWIX3] cursor, bold;
      end

      TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 - 1;

    end

    TS0VM001.XXXPRCNM = "V-59000"; /* process name*/
    converseLib.validationFailed(124);
    TS0VW01.TS0VWWA1 = "                          ";

    return;

  end


   /* *********************************************/
   /* Process size not found on P.O. or S.O.*/
   /* flag second.*/
   /* *********************************************/

  if (TS0VW01.TS0VWWF2 == "Y")

    TS0VW01.TS0VWIX3 = 22;

    while (TS0VW01.TS0VWIX3 >= 1)

      if (TS0VW01.TS0VWSH2[TS0VWIX3] == "Y")
        set TS0VM001.SY4IDDSC[TS0VWIX3] cursor, bold;
      end

      TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 - 1;

    end

    TS0VM001.XXXPRCNM = "V-59000"; /* process name*/
    TS0VW01.TS0VWWA2 = "                          ";

    if (TS0VM001.TS0VMPO == 0 /* ===> B-Grade shipment criteria*/
     && TS0VM001.XGPCD == "02"
     && TS0VM001.XQACD == "02"
     && TS0VM001.TS0VW-SALES-ORDER > 0)

      converseLib.validationFailed(327); /* ===> size not on S.O.*/

    else
      converseLib.validationFailed(125); /* ===> size not on P.O.*/

    end


    return;

  end


   /* *********************************************/
   /* Process size quantity undershipmemt warning*/
   /* flag third  (below P.O. size qtys)*/
   /* *********************************************/

  if (TS0VW01.TS0VWWF3 == "Y")

    TS0VW01.TS0VWIX3 = 22;

    while (TS0VW01.TS0VWIX3 >= 1)

      if (TS0VW01.TS0VWSH3[TS0VWIX3] == "Y")
        set TS0VM001.TSOSHPQT[TS0VWIX3] cursor, bold;
      end

      TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 - 1;

    end

    TS0VM001.XXXPRCNM = "V-59000"; /* process name*/
    TS0VW01.TS0VWWA3 = "                          ";

    if (TS0VM001.TS0VMPO == 0 /* ===> B-Grade shipment criteria*/
     && TS0VM001.XGPCD == "02"
     && TS0VM001.XQACD == "02"
     && TS0VM001.TS0VW-SALES-ORDER > 0)

      converseLib.validationFailed(324); /* ===> Qtys below S.O. size qtys*/

    else /**/
      if (TS0VM001.PC4ORTYP != "SS" /* ===>Salesman sample check*/
       && TS0VM001.PC4ORTYP != "SX")

        converseLib.validationFailed(262); /* ===> Qtys below P.O. size qtys*/

      end /* End of Salesman sample check*/
      /*  */
    end


    return;

  end


   /* *********************************************/
   /* Process item quantity overshipmemt warning*/
   /* flag fourth  (size qtys "soft error")*/
   /* *********************************************/

  if (TS0VW01.TS0VWWF4 == "Y")

    TS0VW01.TS0VWIX3 = 22;

    while (TS0VW01.TS0VWIX3 >= 1)

      if (TS0VW01.TS0VWSH4[TS0VWIX3] == "Y")
        set TS0VM001.TSOSHPQT[TS0VWIX3] cursor, bold;
      end

      TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 - 1;

    end

    TS0VM001.XXXPRCNM = "V-59000"; /* process name*/
    TS0VW01.TS0VWWA4 = "                          ";

    if (TS0VM001.TS0VMPO == 0 /* ===> B-Grade shipment criteria*/
     && TS0VM001.XGPCD == "02"
     && TS0VM001.XQACD == "02"
     && TS0VM001.TS0VW-SALES-ORDER > 0)

      converseLib.validationFailed(325); /* ===> Qtys above S.O. size qtys*/
                                  /* (soft error)*/
    else
      converseLib.validationFailed(263); /* ===> Qtys above P.O. size qtys*/
                                  /* (soft error)*/
    end

    return;

  end


   /* *********************************************/
   /* Process item quantity overshipmemt over*/
   /* tolerance warning flag last*/
   /* flag five    (size qtys "hard error")*/
   /* *********************************************/

  if (TS0VW01.TS0VWWF5 == "Y")

    TS0VW01.TS0VWIX3 = 22;

    while (TS0VW01.TS0VWIX3 >= 1)

      if (TS0VW01.TS0VWSH5[TS0VWIX3] == "Y")
        set TS0VM001.TSOSHPQT[TS0VWIX3] cursor, bold;
      end

      TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 - 1;

    end

    TS0VM001.XXXPRCNM = "V-59000"; /* process name*/
    TS0VW01.TS0VWWA5 = "                          ";

    if (TS0VM001.TS0VMPO == 0 /* ===> B-Grade shipment criteria*/
     && TS0VM001.XGPCD == "02"
     && TS0VM001.XQACD == "02"
     && TS0VM001.TS0VW-SALES-ORDER > 0)

      converseLib.validationFailed(326); /* ===> Qtys above S.O. size qtys*/
                                  /* (hard error)*/
    else
      converseLib.validationFailed(264); /* ===> Qtys above P.O. size qtys*/
                                  /* (hard error)*/
    end

    return;

  end


   /* *********************************************/
   /* Process style quantity overshipmemt over*/
   /* tolerance warning flag last*/
   /* flag six     (style qtys "hard error")*/
   /* *********************************************/

  if (TS0VW01.TS0VWWF6 == "Y")

    TS0VW01.TS0VWIX3 = 22;

    while (TS0VW01.TS0VWIX3 >= 1)

      if (TS0VW01.TS0VWSH6[TS0VWIX3] == "Y")
        set TS0VM001.TSOSHPQT[TS0VWIX3] cursor, bold;
      end

      TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 - 1;

    end

    TS0VM001.XXXPRCNM = "V-59000"; /* process name*/
    TS0VW01.TS0VWWA6 = "                          ";

    if (TS0VM001.TS0VMPO == 0 /* ===> B-Grade shipment criteria*/
     && TS0VM001.XGPCD == "02"
     && TS0VM001.XQACD == "02"
     && TS0VM001.TS0VW-SALES-ORDER > 0)

      converseLib.validationFailed(323); /* ===> Qtys above S.O. item qtys*/
                                  /* (hard error)*/
    else
      converseLib.validationFailed(261); /* ===> Qtys above P.O. item qtys*/
                                  /* (hard error)*/
    end

    return;

  end


   /* *********************************************/
   /* Process style quantity overshipmemt under*/
   /* tolerance warning flag last*/
   /* flag seven   (style qtys "soft error")*/
   /* *********************************************/

  if (TS0VW01.TS0VWWF7 == "Y")

    TS0VW01.TS0VWIX3 = 22;

    while (TS0VW01.TS0VWIX3 >= 1)

      if (TS0VW01.TS0VWSH7[TS0VWIX3] == "Y")
        set TS0VM001.TSOSHPQT[TS0VWIX3] cursor, bold;
      end

      TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 - 1;

    end

    TS0VM001.XXXPRCNM = "V-59000"; /* process name*/
    TS0VW01.TS0VWWA7 = "                          ";

    if (TS0VM001.TS0VMPO == 0 /* ===> B-Grade shipment criteria*/
     && TS0VM001.XGPCD == "02"
     && TS0VM001.XQACD == "02"
     && TS0VM001.TS0VW-SALES-ORDER > 0)

      converseLib.validationFailed(322); /* ===> Qtys above S.O. item qtys*/
                                  /* (soft error)*/
    else
      converseLib.validationFailed(260); /* ===> Qtys above P.O. item qtys*/
                                  /* (soft error)*/
    end

    return;

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-59000 ********************/
end // end TS0V-59000

// ---> Process input request
Function TS0V-60000()
   /* ------------------------------------------------------------*/
   /*  */
   /* PROCESS VALID INPUT REQUESTS*/
   /*  */
   /* 1) If no errors were found*/
   /* and no warnings.*/
   /* (** process the updates made to each screen*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0)
    return; /* ===> Exit to display error*/
  end

  TS0V-61000(); /* ===> set update flags*/

  if (TS0VW01.TS0VWOPT == "D"      /* if delete indicated*/
   || TS0VW01.TS0VWOPT == "I"      /* ===> Inquiry*/
   || converseVar.eventKey is pf7  /* ===> Pf7 was pressed*/
   || converseVar.eventKey is pf8  /* ===> Pf8 was pressed*/
   || converseVar.eventKey is pf13 /* ===> Pf13 was pressed*/
   || TS0VW01.TA5TSQIX > TS0VW01.XXXTSPAG) /* ===> More T.S. pages*/

    /* ======== Bypass the updates =====>*/

  else

    if (converseVar.eventKey is enter /* enter was pressed*/
     && TS0VM001.TSOFRCRT[22] > 0)    /* ===> last entry filled*/

     /* ======== Bypass the updates =====>*/

    else

      TS0V-62000(); /* ===> Check for total warnings*/

      if (TS0VW01.TS0VWIUP == "Y" /* ===> item update flag*/
       || TS0VW01.TS0VWHUP == "Y") /* ===> header update flag*/

       /* --------------------------------------------------------*/
       /* If any data was entered*/
       /* perform the updates.*/
       /* --------------------------------------------------------*/

        TS0V-63000(); /* ===> Perform the updates*/

      end

    end

  end

   /* --------------------------------------------------------*/
   /* If ENTER was pressed and the user had the delete option*/
   /* operating then delete the packing list and all its*/
   /* detail.*/
   /* --------------------------------------------------------*/
  TS0VW01.TS0VWDFL = "N"; /* Set delete flag*/

  if (converseVar.eventKey is enter /* enter was pressed*/
   && TS0VW01.TS0VWOPT == "D")      /* If delete requested*/

    TS0V-64000(); /* Delete packing list and detail*/

    TS0VW01.TS0VWDFL = "Y"; /* Indicate delete occurred*/

  end

   /* --------------------------------------------------------*/
   /* If ENTER  was pressed, check to see if another*/
     /* processing page for this packing list needs to be*/
     /* displayed or new packing list. If none, then continue*/
     /* to container assignment screens.*/
   /* --------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter was pressed*/

    TS0VW01.TS0VWUPF = "N"; /* Set update flag indicator*/

    if (TS0VW01.TS0VWSWR == "Y") /* ===> update occurred*/
      TS0VW01.TS0VWUPF = "Y"; /* ===> Set update flag*/
    end

    if (TS0VW01.TA5TSQIX > TS0VW01.XXXTSPAG /* ===> More T.S. pages*/
     && TS0VW01.TS0VWDFL == "N")            /* ===>  Delete has not occurred*/

      TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> Incr. page number*/

      set TS0VW10 empty; /* Clear screen display ws*/

      TS0VW01.TS0VWSWF = "Y"; /* ===> Format the map switch*/
      TS0VW01.TS0VWSWE = "Y"; /* ===> Switch for P.O. Edits*/

      return; /* ===> Return to previous process*/


    else

      if (TS0VW01.TA5TSQIX == TS0VW01.XXXTSPAG /* ===> on last T.S. pages*/
       && TS0VW01.TS0VWDFL == "N"              /* ===>  Delete has not occurred*/
       && TS0VM001.TSOFRCRT[22] > 0            /* ===> last entry filled*/
       && TS0VW01.TS0VWOPT != "I")             /* ===> Inquiry*/

        TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> Incr. page number*/

        set TS0VW10 empty; /* Clear screen display ws*/

        TS0VW01.TS0VWSWF = "Y"; /* ===> Format the map switch*/
        TS0VW01.TS0VWSWE = "Y"; /* ===> Switch for P.O. Edits*/

        return; /* ===> Return to previous process*/


      else

       /* -----------------------------------------------*/
       /* Check for more packing lists in the cpl array.*/
       /* 1) If more exist, load the next set of gpc-cpl*/
       /* array packing lists and redisplay map # 1.*/
       /* 2) Else, exit to TS02 container assignment*/
       /* -----------------------------------------------*/


        TS0VW01.TS0VWEFL = "Y"; /* ===> set end flag*/
        TS0VM001.TSIMSCFL = " "; /* ===> clear header fields*/
        TS0VM001.TSIMSCGR = " ";
        TS0VM001.TSILOCR = " ";
        TS0VM001.TSPFCIVC = " ";
        TS0VM001.TSRTEXT = " ";
        TS0VM001.PC-XCT-ORIG-CD = " ";
        TS0VM001.TSPFILE = 0;

        TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1;

        if (TS0VW02.PC3PONBR[TS0VWCPX] > 0 /* ===> More packing list*/
         && COMMAREA.CAFROMAP == "TS0U"    
        )                                 
          TS0VW01.TS0VWWF10 = "N";
          TS0V-65000(); /* ===> Load gp-cpl and set data request*/

        else

          if (TS0VW02.PC3PONBR[TS0VWCPX] > 0 /* ===> More packing list*/
           && COMMAREA.CAFROMAP == "TS0J"    
          )                                 
            TS0V-65000(); /* ===> Load gp-cpl and set data request*/

          else

         /* --------------------------------------------------------*/
          /* If a delete has occurred, then do not continue to*/
            /* container assignment screen. Instead, determine from*/
            /* where the application was initiated and DXFR back to*/
            /* that point.*/
         /* --------------------------------------------------------*/
            if (TS0VW01.TS0VWDFL == "Y") /* ===> Delete has occurred*/

              TS0V-66000(); /* ===> Check for delete pl transfer*/

            else

              TS0V-67000(); /* ===> Set up for container assign*/

              exit stack;

            end

          end

        end

      end

    end

  else /* ===> enter was not pressed*/

    if (converseVar.eventKey is pf7 /* ===> Pf7 was pressed*/
     || converseVar.eventKey is pf8) /* ===> Pf8 was pressed*/

      /* ------------------------------------------------------------*/
       /* If a scroll backward was requested, decrement the page*/
       /* number and return to the previous process.*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf7) /* ===> Scroll back requested*/

        TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG - 1; /* ===> Decr. page number*/

        TS0VW01.TS0VWSWF = "Y"; /* ===> Format the map switch*/
        TS0VW01.TS0VWSWE = "Y"; /* ===> Switch for P.O. Edits*/

        return; /* ===> Return to previous process*/

      end

      /* ------------------------------------------------------------*/
       /* If a scroll forward was requested, increment the page*/
       /* number and return to the previous process.*/
      /* ------------------------------------------------------------*/

      if (converseVar.eventKey is pf8) /* ===> Scroll forward requested*/

        TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> Incr. page number*/

        TS0VW01.TS0VWSWF = "Y"; /* ===> Format the map switch*/
        TS0VW01.TS0VWSWE = "Y"; /* ===> Switch for P.O. Edits*/

        return; /* ===> Return to previous process*/

      end

    else /* ===> Enter, PF7, or PF8 was not*/
                                   /* requested*/
   /* *****************TCS CHANGE BEGINS*****************/


      /* --------------------------------------------------------*/
      /* If PF13 was pressed and there are currently no bar code*/
      /* rows, then submit job to create bar code rows*/
      /* --------------------------------------------------------*/
      if (TS0VW01.MFG-CD-FLAG1 == "Y"
       && TS0VM001.MFG-CD-GPC03 == " ")
        TS0VM001.MFG-CD-GPC03 = "00";
      end

      if (converseVar.eventKey is pf13 /* ===> PF13 was pressed*/
       && TS0VW01.TS0VWOPT == "C")    
        if (TS0VM001.XGPCD == "02"
         && TS0VW01.TS0VW-EQMT-FL == "N")
          if (TS0VM001.FY-FCTY-MFG-CD == "0000000"
           || TS0VM001.FY-FCTY-MFG-CD == "      ")
            if (TS0VW01.POHDR-EXISTS == "Y")
              VFCTY003.XGPCD = TSIREC.XGPCD;
              VFCTY003.FY1FCTYC = PC3REC.FY1FCTYC;
              call "VFCTY003" ("S ", SQLCA, VFCTY003) {isNoRefresh = yes, isExternal = yes};

              if (SQLCA.VAGen_SQLCODE == 0)
                if (VFCTY003.FY-FCTY-MFG-CD != "0000000"
                 && VFCTY003.FY-FCTY-MFG-CD != "      ")
                  TS0V-68000(); /* Bar code create job submit*/
                  TS0VM-SCANFLAG = "P";
                  return;
                else
                  converseLib.validationFailed(443);
                  TS0VM001.XXXPRCNM = "V-60000"; /* process name*/
                  set TS0VM001.FY-FCTY-MFG-CD cursor, modified, bold;
                  TS0VW01.TS0V-BC-CREATE-FLAG = "Y";
                  exit stack;
                end
              else
                TS0VM001.XXXPRCNM = "V-60000"; /* process name*/
                converseLib.validationFailed(442);
                return;
              end
            else
              TS0VM001.XXXPRCNM = "V-60000"; /* process name*/
              converseLib.validationFailed(441);
              return;
            end

          else
            TS0V-68000();
            TS0VW01.TS0V-BC-CREATE-FLAG = "N";
            TS0VM-SCANFLAG = "P";
            return;
          end

        else
          if (TS0VM001.XGPCD == "03"
           || TS0VW01.TS0VW-EQMT-FL == "Y")
            if ((TS0VM001.FY-FCTY-MFG-CD == "0000000"
             || TS0VM001.FY-FCTY-MFG-CD == "      "))
              converseLib.validationFailed(451);
              TS0VM001.XXXPRCNM = "V-60000";
              set TS0VM001.FY-FCTY-MFG-CD cursor, modified, bold;
              return;
            else
  /* Gramac change begins*/

  /* IF TS0VM001.MFG-CD-GPC03 GE 0;*/
              TS0V-68000(); /* Bar code create job submit*/
              TS0VM-SCANFLAG = "P";
              return;
  /* ELSE;*/
  /* IF TS0VM001.MFG-CD-GPC03 EQ ' ';*/
  /* MOVE 451 TO EZEMNO;*/
  /* MOVE 'V-60000' TO TS0VM001.XXXPRCNM;*/
  /* SET TS0VM001.MFG-CD-GPC03 CURSOR,MODIFIED,BRIGHT;*/
  /* MOVE 'Y' TO TS0VW01.MFG-CD-FLAG1;*/
  /* EZERTN;*/
  /* ELSE;*/
  /* IF TS0VM001.MFG-CD-GPC03 NOT NUMERIC*/
  /* AND TS0VM001.MFG-CD-GPC03 NE ' ';*/
  /* MOVE 427 TO EZEMNO;*/
  /* MOVE 'V-54000' TO TS0VM001.XXXPRCNM;*/
  /* SET TS0VM001.MFG-CD-GPC03 CURSOR,MODIFIED,BRIGHT;*/
  /* EZERTN;*/
  /* END;*/
  /* END;*/
  /* END;*/
  /* Gramac change begins*/
            end
          else
            converseLib.validationFailed(4);
            return;
          end
        end

      end

   /* *****************TCS CHANGE ENDS*****************/
      /* --------------------------------------------------------*/
      /* If PF18 was pressed, then start showing the containers*/
      /* for the current set of gpc-cpl indexes*/
      /* --------------------------------------------------------*/

      if (converseVar.eventKey is pf18) /* ===> Pf18 was pressed*/

        TS0V-67000(); /* ===> Set up for container assign*/

        exit stack;

      end

    end /* ===> PF7 OR PF8 Request*/

  end /* ===> Enter request*/

   /* **                                                        ***/
   /* ********************** End of TS0V-60000 ********************/
end // end TS0V-60000

// Check if updates are necessary
Function TS0V-61000()
   /* ------------------------------------------------------------*/
   /* This module will determine if temp storage and/or databases*/
   /* will need to be updated.*/
   /* ------------------------------------------------------------*/


  if (TS0VW03.TSIMSCFL[1] != TS0VM001.TSIMSCFL /* ===> fields changed?*/
   || TS0VW03.TSIMSCGR[1] != TS0VM001.TSIMSCGR 
   || TS0VW03.TSILOCR[1] != TS0VM001.TSILOCR   
   || TS0VW03.TSPFCIVC[1] != TS0VM001.TSPFCIVC 
   || TS0VW03.TSPFILE[1] != TS0VM001.TSPFILE   
   || TS0VW03.TSRTEXT[1] != TS0VM001.TSRTEXT   
   || TS0VW03.PC-XCT-ORIG-CD[1] != TS0VM001.PC-XCT-ORIG-CD
   || TS0VW01.TS0VWWUP == "Y")                 /* or warning update indicated*/

    TS0VW01.TS0VWHUP = "Y"; /* ===> header update flag*/

  end


  TS0VW01.TS0VWSWU = "N"; /* ===> temp storage update switch*/

  TS0VW01.TS0VWIX1 = 1; /* ===> set index to 1*/

  while (TS0VW01.TS0VWIX1 <= 22) /* ===> until end of detail lines*/

    if (TS0VM001.TSOFRCRT[TS0VWIX1] != TS0VW10.TSOFRCRT[TS0VWIX1]
     || TS0VM001.TSOTOCRT[TS0VWIX1] != TS0VW10.TSOTOCRT[TS0VWIX1]
     /* OR TS0VM001.SY2CLRID(TS0VWIX1) NE TS0VW10.SY2CLRID(TS0VWIX1)*/
     || TS0VM001.SY4IDDSC[TS0VWIX1] != TS0VW10.SY4IDDSC[TS0VWIX1]
     || TS0VM001.TSOSHPQT[TS0VWIX1] != TS0VW10.TSOSHPQT[TS0VWIX1])

      TS0VW10.TSOFRCRT[TS0VWIX1] = TS0VM001.TSOFRCRT[TS0VWIX1];
      TS0VW10.TSOTOCRT[TS0VWIX1] = TS0VM001.TSOTOCRT[TS0VWIX1];
      /* MOVE TS0VM001.SY2CLRID(TS0VWIX1) TO TS0VW10.SY2CLRID(TS0VWIX1);*/
      /* MOVE TS0VM001.TS0VMCLR TO TS0VW10.SY2CLRID(TS0VWIX1);*/
      TS0VW10.SY4IDDSC[TS0VWIX1] = TS0VM001.SY4IDDSC[TS0VWIX1];
      TS0VW10.TSOSHPQT[TS0VWIX1] = TS0VM001.TSOSHPQT[TS0VWIX1];

      TS0VW01.TS0VWIUP = "Y"; /* ===> set data entered flag*/
      TS0VW01.TS0VWHUP = "Y";
      TS0VW01.TS0VWSWU = "Y";
                                   /* ===> temp storage update switch*/

    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* increment index*/

  end

   /* ------------------------------------------------------------*/
   /* Check and set the CPLHD01 status update switch*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWHUP != "Y") /* ===> CPLHD01 update switch not set*/
    TS0V-61100(); /* ===> Check CPLHD01 status update*/
   /* necessary*/
  end

   /* **                                                        ***/
   /* ********************** End of TS0V-61000 ********************/
end // end TS0V-61000

// Set CPLHD01 update switch
Function TS0V-61100()
   /* ------------------------------------------------------------*/
   /* Set the CPLHD01 update switch if the status has changed*/
   /* to move to cplhd.*/
   /* ------------------------------------------------------------*/


  TS0VW01.TS0VWPAG = TS0VW01.XXXTSPAG; /* ===> save current page #*/

  TS0VW01.TS0VWIX1 = 1;

  while (TS0VW01.TS0VWIX1 <= TS0VW01.TS0VWMGC /* until end of array*/
   && TS0VW03.TSIPLNBR[TS0VWIX1] > 0) /* and data exists*/

    TS0VW01.XXXTSPAG = 1;

    while (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> Desired <= highest*/

      TS0VS-TS-2(); /* ===> Obtain temporary storage page*/

      /* ------------------------------------------------------------*/
         /* Process the current T.S. page to build the new CPLIT01*/
      /* ------------------------------------------------------------*/

      TS0VW01.TS0VWIX2 = 1; /* ===> T.S. index*/

      while (TS0VW01.TS0VWIX2 <= 22) /* ===> Until end of page*/

        if (TS0VW04.SY2CLRID[TS0VWIX2] == TS0VW03.SY2CLRID[TS0VWIX1])

          if (TS0VW04.TSISTAT[TS0VWIX2] != TS0VW03.TSISTAT[TS0VWIX1]
           || TS0VW04.XRECD[TS0VWIX2] != TS0VW03.XRECD[TS0VWIX1])

            TS0VW01.TS0VWHUP = "Y"; /* Indicate update warning*/

          end

        end /* ===> colors the same*/


        TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* ===> T.S. index*/

      end

      TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> Desired <= highest*/

    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* incr the counter*/

  end

   /* ------------------------------------------------------------*/
   /* Re-load the current T.S. page.*/
   /* ------------------------------------------------------------*/

  TS0VW01.XXXTSPAG = TS0VW01.TS0VWPAG; /* ===> re-set current page*/

  TS0VS-TS-2(); /* ===> Obtain orig T.S. page*/


   /* **                                                        ***/
   /* ********************** End of TS0V-61100 ********************/
end // end TS0V-61100

// Check for total warning-error
Function TS0V-62000()
   /* ------------------------------------------------------------*/
   /* CHECK FOR TOTAL WARNINGS*/
   /*  */
   /* 1) If the total warning flag is set and the map has not*/
   /* been modified - continue on to next process.*/
   /* 2) Else*/
   /* a. Check the shipping quantity total entered against*/
   /* the map total.*/
   /* - Add all screen 1 ws shipping quantity totals to*/
   /* shipping total count.*/
   /* - Add all screen shipping quantity totals on current*/
   /* map to shipping total count.*/
   /* - Compare total count with screen total - if does*/
   /* not match then issue warning.*/
   /* b. If warning has been issued, ezeflo to map.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (TS0VW01.TS0VWWFL == "Y" /* ===> if warning flag is yes*/
   && TS0VM001 not modified)  /* ===> and map is not modified*/

    TS0VW01.TS0VWWFL = "N"; /* ===> reset warning flag*/

    if (TS0VW01.TS0VWSHT != TS0VM001.TS0VMQTY) /* ===> map ship total*/
      TS0VW01.TS0VWHUP = "Y"; /* ===> header update need*/
    end

       /* **------------------------***/
       /* ** set saved & map fields ***/
       /* **------------------------***/
    TS0VM001.TS0VMCTN = TS0VW01.TS0VWCTT; /* ===> map carton total*/
    TS0VW01.TS0VWGCT = TS0VW01.TS0VWCTT; /* ===>  save carton total*/
    TS0VM001.TS0VMQTY = TS0VW01.TS0VWSHT; /* ===> map shipping total*/
    TS0VW01.TS0VWGST = TS0VW01.TS0VWSHT; /* ===> save gpc ship total*/

  else

    TS0VW01.TS0VWWFL = "N"; /* ===> reset warning flag*/

    /* ------------------------------------------------------------*/
      /* Calculate the total qtys in T.S. pages*/
    /* ------------------------------------------------------------*/

    TS0VW01.TS0VWSHT = 0; /* ===> initialize shipping total count*/

    TS0V-62100(); /* ===> Accum qtys in all T.S. pages*/

    /* ------------------------------------------------------------*/
     /* Add the maps ws ranges into shipping total count by looping*/
        /* through the current map and determine if any of the*/
        /* original totals have been changed - if so, then subtract*/
        /* old total and add the new  total.  If the total is*/
        /* associated with a newly added carton range entry, then*/
        /* just add the ship quantity to the total ship quantity.*/
    /* ------------------------------------------------------------*/

    TS0VW01.TS0VWIX1 = 1; /* ===> Initialize the index*/

    while (TS0VW01.TS0VWIX1 <= 22) /* ===> Until end of screen data*/

      if (TS0VW10.TSOFRCRT[TS0VWIX1] > 0) /* ===> Original row*/

        if (TS0VM001.TSOSHPQT[TS0VWIX1] != TS0VW10.TSOSHPQT[TS0VWIX1])

          TS0VW01.TS0VWWK1 = TS0VW10.TSOSHPQT[TS0VWIX1];
          TS0VW01.TS0VWWK2 = TS0VM001.TSOSHPQT[TS0VWIX1];

           /* ----------------------*/
           /* subtract old quantity*/
           /* ----------------------*/
          TS0VW01.TS0VWSHT = TS0VW01.TS0VWSHT - TS0VW01.TS0VWWK1;

           /* ----------------------*/
           /* add new quantity*/
           /* ----------------------*/
          TS0VW01.TS0VWSHT = TS0VW01.TS0VWSHT + TS0VW01.TS0VWWK2;

        end

      else

        TS0VW01.TS0VWSHT = TS0VW01.TS0VWSHT + TS0VM001.TSOSHPQT[TS0VWIX1];

      end

      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> increment index*/

    end

    /* ------------------------------------------------------------*/
        /* compare the actual shipping total with screen total*/
    /* ------------------------------------------------------------*/

    if (TS0VM001.TS0VMQTY != TS0VW01.TS0VWSHT) /* ===> if totals equal*/

      TS0VW01.TS0VWWFL = "Y"; /* ===> indicate warning*/
      converseLib.validationFailed(126); /* ===> totals do not match*/
      TS0VM001.XXXPRCNM = "V-62000"; /* ===> process name*/
      set TS0VM001.TSOSHPQT[1] cursor; /* ===> set cursor*/
      set TS0VM001.TS0VMQTY skip, bold; /* ===> set total bright*/
      set TS0VM001.TS0VMCTN skip, bold; /* ===> set total bright*/

      exit stack; /* ===> exit to redisplay the map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-62000 ********************/
end // end TS0V-62000

// Get size qtys in T.S.
Function TS0V-62100()
   /* ------------------------------------------------------------*/

              /* ACCUM  WS SIZE QUANTITIES*/

      /* 1) This process will cycle through temp. storage*/
         /* and add up size ship quantities for all*/
         /* temp. storage values.*/

   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWPAG = TS0VW01.XXXTSPAG; /* ===> save current page #*/

   /* ------------------------------------------------------------*/
   /* update the page in*/
   /* storage before obtaining the next one to display.*/
   /* ------------------------------------------------------------*/


  TS0VS-TS-5(); /* Update temporary storage page*/

  TS0VW01.TS0VWSWU = "N"; /* Storage update switch*/



  if (TS0VW01.XXXTSPAG > 1) /* ===> If not on T.S. page #1*/

    TS0VW01.XXXTSPAG = 1; /* ===> set to T.S. page #1*/

  end

     /* **------------------------------------***/
     /* **  Process all  temp. storage pages***/
     /* **------------------------------------***/

  while (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> LE last T.S. page*/

    TS0VS-TS-2(); /* ===> Obtain next T.S. page*/

    TS0VW01.TS0VWIX1 = 1; /* initialize index*/

    while (TS0VW01.TS0VWIX1 <= 22) /* ===> LE last map column*/

      if (TS0VW04.TSOFRCRT[TS0VWIX1] > 0) /* ===> data exists*/

        TS0VW01.TS0VWSHT = TS0VW01.TS0VWSHT + TS0VW04.TSOSHPQT[TS0VWIX1];

      end /* ===> Locate clr*/

      TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> increment index*/

    end /* ===> LE last map column*/

    TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> incr. index*/

  end /* ===> Processing of all T.S. pages*/


  TS0VW01.XXXTSPAG = TS0VW01.TS0VWPAG; /* ===> re-set current page*/

  TS0VS-TS-2(); /* ===> Obtain orig T.S. page*/

   /* **                                                        ***/
   /* ********************** End of TS0V-62100 ********************/
end // end TS0V-62100

// ---> Update requested changes
Function TS0V-63000()
   /* ------------------------------------------------------------*/

                    /* PERFORM UPDATES*/

     /* 1) This process will take all the changes/adds*/
        /* which were made on the current map and update the*/
        /* database with them.*/

   /* ------------------------------------------------------------*/

  XX0XS01(); /* ===> get system date and timne for*/
                                   /* updates*/

    /* ***/
  TS0V-63100(); /* ===> Set errors for CPLHD01 rows*/
    /* ***/

  if (TS0VW01.TS0VWIUP == "Y"     /* ===> If detail needs update*/
   || TS0VW01.TS0VWMFGUPFL == "Y" /* ===> If MFGID needs update*/
  )                               /* ***/
    TS0V-63200(); /* ===> Build new CPLIT01 table set used*/
                                   /* for update*/
    /* ***/

    /* ***/
    TS0V-63300(); /* ===> Delete old CPLIT01 table set*/
    /* ***/

    TS0V-63400(); /* ===> Insert new CPLIT01 table set*/
    /* ***/

  end

  if (TS0VW01.PCXCTCD-BAK != TS0VM001.PC-XCT-ORIG-CD)
    TS0V-63600(); /* Call to new subroutine for Updating MCO*/
  end

  if (TS0VW03.TSIMSCFL[1] != TS0VM001.TSIMSCFL /* ===> fields changed?*/
   || TS0VW03.TSIMSCGR[1] != TS0VM001.TSIMSCGR 
   || TS0VW03.TSILOCR[1] != TS0VM001.TSILOCR   
   || TS0VW03.TSPFCIVC[1] != TS0VM001.TSPFCIVC 
   || TS0VW03.TSPFILE[1] != TS0VM001.TSPFILE   
   || TS0VW03.TSRTEXT[1] != TS0VM001.TSRTEXT   
   || TS0VW03.PC-XCT-ORIG-CD[1] != TS0VM001.PC-XCT-ORIG-CD
   || TS0VW01.TS0VWHUP == "Y")                 /* or warning update indicated*/

    TS0V-63500();

  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


   /* **                                                        ***/
   /* ********************** End of TS0V-63000 ********************/
end // end TS0V-63000

// Set errors for CPLHD01 rows
Function TS0V-63100()
   /* ------------------------------------------------------------*/
   /* Determine which, out of all errors assigned,*/
   /* to move to cplhd.*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX1 = 1;

  while (TS0VW01.TS0VWIX1 <= TS0VW01.TS0VWMGC /* until end of array*/
   && TS0VW03.TSIPLNBR[TS0VWIX1] > 0) /* and data exists*/

    TS0VW01.XXXTSPAG = 1;

    while (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> Desired <= highest*/

      TS0VS-TS-2(); /* ===> Obtain temporary storage page*/

      /* ------------------------------------------------------------*/
         /* Process the current T.S. page to build the new CPLIT01*/
      /* ------------------------------------------------------------*/

      TS0VW01.TS0VWIX2 = 1; /* ===> T.S. index*/

      while (TS0VW01.TS0VWIX2 <= 22) /* ===> Until end of page*/

        if (TS0VW04.SY2CLRID[TS0VWIX2] == TS0VW03.SY2CLRID[TS0VWIX1])

          TS0V-63110(); /* ===> Move the appropriate status code*/

        end /* ===> colors the same*/


        TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* ===> T.S. index*/

      end

      TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> Desired <= highest*/

    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* incr the counter*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0V-63100 ********************/
end // end TS0V-63100

// move appropriate status code
Function TS0V-63110()
   /* **---------------------------------------------------------*/
   /* **  If status has changed set the appropriate status*/
   /* **---------------------------------------------------------*/

  if (TS0VW04.TSISTAT[TS0VWIX2] == "ER" /* ===> If hard error*/
   && TS0VW04.TSOSHPQT[TS0VWIX2] > 0)   /* ===> qtys exist*/

    TS0VW03.TSISTAT[TS0VWIX1] = TS0VW04.TSISTAT[TS0VWIX2];
    TS0VW03.XRECD[TS0VWIX1] = TS0VW04.XRECD[TS0VWIX2];

  else

    if (TS0VW04.XRECD[TS0VWIX2] != "  " /* If a reason code assigned*/
     && TS0VW04.XRECD[TS0VWIX2] != "99" 
     && TS0VW04.TSOSHPQT[TS0VWIX2] > 0) /* ===> qtys exist*/

      TS0VW03.TSISTAT[TS0VWIX1] = "  ";
      TS0VW03.XRECD[TS0VWIX1] = TS0VW04.XRECD[TS0VWIX2];

    else

      TS0VW03.TSISTAT[TS0VWIX1] = "  ";
      TS0VW03.XRECD[TS0VWIX1] = "  ";

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63110 ********************/
end // end TS0V-63110

// Build CPLIT01 table set
Function TS0V-63200()
   /* ------------------------------------------------------------*/
   /*  */
   /* Process all T.S. pages to build a new CPLIT01 table set*/
   /* which will be used to create new D.B. rows.*/
   /*  */
   /* Indexes used:*/
   /* 1. TS0VWIX1    ;===> Temp Storage index (TS0VW04)*/
   /* 2. TS0VWIX2    ;===> New  table   index (TS0VW21)*/
   /* 3. TS0VWIX3    ;===> Orig table   index (TS0VW20)*/
   /* 4. TS0VWM21    ;===> Max  table   index (TS0VW21)*/
   /* ------------------------------------------------------------*/

  TS0VW01.XXXTSPAG = 1; /* ===> request 1st T.S. page*/
  TS0VW01.TS0VWM21 = 1; /* ===> init Max table index*/
  set TS0VW21 empty; /* ===> Init the new table*/

   /* ------------------------------------------------------------*/
   /* Obtain the desired page from temporary storage.*/
   /* and process all T.S. pages.*/
   /* ------------------------------------------------------------*/

  if (TS0VW01.TA5TSQIX > 0) /* Pages were formatted*/

    /* ------------------------------------------------------------*/
     /* update the page in*/
     /* storage before obtaining the next one to display.*/
    /* ------------------------------------------------------------*/


    TS0VS-TS-5(); /* Update temporary storage page*/

    TS0VW01.TS0VWSWU = "N"; /* Storage update switch*/


    TS0VW01.TS0VWIX2 = 1; /* ===> New table index*/

    while (TS0VW01.XXXTSPAG <= TS0VW01.TA5TSQIX) /* ===> Desired <= highest*/

      TS0VS-TS-2(); /* ===> Obtain temporary storage page*/

      /* ------------------------------------------------------------*/
         /* Process the current T.S. page to build the new CPLIT01*/
        /* table set which will be used as the source for new row to*/
        /* be created.*/
      /* ------------------------------------------------------------*/

      TS0VW01.TS0VWIX1 = 1; /* ===> T.S. index*/

      while (TS0VW01.TS0VWIX1 <= 22) /* ===> Until end of page*/

        /* ------------------------------------------------------------*/
        /* PROCESS EACH T.S. ROW*/
        /* 1. Save the "FROM" carton in save carton counter index*/
        /* 2. Process the T.S. row until each carton*/
        /* between the "FROM"  & "TO" carton has been processed*/
        /* ------------------------------------------------------------*/

        if (TS0VW04.TSOFRCRT[TS0VWIX1] > 0)

          /* ===> save from carton # and use it as a carton counter*/
          TS0VW01.TS0VWSCN = TS0VW04.TSOFRCRT[TS0VWIX1];

          /* ===> Calculate the qtys per carton for map range*/
          TS0VW01.TS0VWWK1 = TS0VW04.TSOTOCRT[TS0VWIX1] - TS0VW04.TSOFRCRT[TS0VWIX1] + 1;

          TS0VW04.TS0VWQPC[TS0VWIX1] = TS0VW04.TSOSHPQT[TS0VWIX1] / TS0VW01.TS0VWWK1;
          while (TS0VW01.TS0VWSCN <= TS0VW04.TSOTOCRT[TS0VWIX1])

            TS0V-63210(); /* ===> Process the T.S. ROW*/

          end

          TS0V-63220(); /* ===> Call CICS timer interrupt*/

        end /* ===> carton range exists*/

        TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> T.S. index*/

      end

      TS0VW01.XXXTSPAG = TS0VW01.XXXTSPAG + 1; /* ===> Desired <= highest*/

    end


  end


   /* **                                                        ***/
   /* ********************** End of TS0V-64200 ********************/
end // end TS0V-63200

// Process T.S. row to new table
Function TS0V-63210()
   /* ------------------------------------------------------------*/
   /* Process the current T.S. page to build the new CPLIT01*/
   /* table set which will be used as the source for row to*/
   /* be created.*/
   /*  */
   /* The current T.S. row in the T.S. page is loaded to a*/
   /* carton w.s. record to simplify the processing of the*/
   /* the carton range.*/
   /* ------------------------------------------------------------*/
   /*  */
  set TS0VW22 empty; /* ===> init W.S. carton record*/

  TS0VW22.TSOFRCRT = TS0VW01.TS0VWSCN; /* ===> Carton counter #*/
   /*  */
  TS0VW22.TSFSHPID = TS0VW04.TSFSHPID[TS0VWIX1];
  TS0VW22.TSNIKCNT = TS0VW04.TSNIKCNT[TS0VWIX1];
  TS0VW22.SY2CLRID = TS0VW04.SY2CLRID[TS0VWIX1];
  TS0VW22.SY5SZID = TS0VW04.SY5SZID[TS0VWIX1];
  TS0VW22.TS0VWQPC = TS0VW04.TS0VWQPC[TS0VWIX1];
  TS0VW22.ZZZSDT = XX0XW01.XX0XWDAT;
  TS0VW22.ZZZCHGDT = XX0XW01.XX0XWDAT;
  TS0VW22.ZZZCHGTM = XX0XW01.XX0XWTIM;
  TS0VW22.ZZZCHGCT = 0;


  if (TS0VW22.SY2CLRID in TS0VW03.SY2CLRID)
    TS0VW22.TSIPLNBR = TS0VW03.TSIPLNBR[sysVar.arrayIndex];
  end

  TS0VW25.TS0VW25IX2 = 1;
  if (TS0VW22.TSNIKCNT != 0)
    while (TS0VW25.TS0VW25IX2 <= TS0VW25.ARRCNT)
      if (TS0VW22.TSNIKCNT == TS0VW25.TS-NIKE-CNTNR-NBR[TS0VW25IX2]
       && TS0VW22.SY2CLRID == TS0VW25.SY-CLR-CD-ID[TS0VW25IX2])
        TS0VW22.TSIPLNBR = TS0VW25.TS-NIKE-PL-NBR[TS0VW25IX2];
        TS0VW25.TS0VW25IX2 = TS0VW25.ARRCNT + 1;
      else
        TS0VW25.TS0VW25IX2 = TS0VW25.TS0VW25IX2 + 1;
      end
    end
  end

   /* ------------------------------------------------------------*/
    /* set-up for processing the carton range.*/
   /* ------------------------------------------------------------*/


  TS0V-63211(); /* ===> get container assignment from*/
                                   /* original table*/

  TS0VW22.TSHNKCN = TS0VW01.TSHNKCN;


   /* ------------------------------------------------------------*/
    /* Process the carton range.*/
   /* ------------------------------------------------------------*/

  while (TS0VW01.TS0VWSCN <= TS0VW04.TSOTOCRT[TS0VWIX1])

    TS0VW01.TS0VWSCN = TS0VW01.TS0VWSCN + 1; /* ===> incr. carton counter*/

    if (TS0VW01.TS0VWSCN <= TS0VW04.TSOTOCRT[TS0VWIX1])

      TS0V-63211(); /* ===> get container assignment from*/
                                   /* orig. table*/

      if (TS0VW01.TSHNKCN == TS0VW22.TSHNKCN)

        /* ============ NEXT SENTENCE =========>*/

      else /* ===> carton counter > "TO" carton*/

        TS0VW22.TSOTOCRT = TS0VW01.TS0VWSCN - 1;

        TS0VW01.TS0VWWK1 = TS0VW22.TSOTOCRT - TS0VW22.TSOFRCRT + 1;
        TS0VW22.TSOSHPQT = TS0VW01.TS0VWWK1 * TS0VW22.TS0VWQPC; /* ===>*/

        TS0V-63212(); /* ===> Move the assigned range to new*/
                                   /* table*/

        return; /* ===> return to previous process*/

      end /* ===> container nbrs are equal*/

    else /* ===> carton counter > "TO" carton*/

      TS0VW22.TSOTOCRT = TS0VW04.TSOTOCRT[TS0VWIX1];

      TS0VW01.TS0VWWK1 = TS0VW22.TSOTOCRT - TS0VW22.TSOFRCRT + 1;
      TS0VW22.TSOSHPQT = TS0VW01.TS0VWWK1 * TS0VW22.TS0VWQPC; /* ===>*/

      TS0V-63212(); /* ===> Move the assigned range to new*/
                                   /* table*/

      return; /* ===> return to previous process*/

    end /* ===> carton counter <= "TO" carton*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-63210 ********************/
end // end TS0V-63210

// Get container from orig table
Function TS0V-63211()
   /* ------------------------------------------------------------*/
    /* Find the container # associated with the current carton*/
    /* counter, Using key data for look-up.*/


   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX3 = 1; /* ===> Orig table index*/

  while (TS0VW01.TS0VWIX3 <= TS0VW01.TS0VWM20)
                                   /* ===> Until end of orig. table*/

    if (TS0VW20.TSIPLNBR[TS0VWIX3] == TS0VW22.TSIPLNBR 
     && TS0VW01.TS0VWSCN >= TS0VW20.TSOFRCRT[TS0VWIX3] /* ===> saved crtn*/
     && TS0VW01.TS0VWSCN <= TS0VW20.TSOTOCRT[TS0VWIX3]) /* ===> saved crtn*/

      TS0VW01.TSHNKCN = TS0VW20.TSHNKCN[TS0VWIX3];

      return; /* ===> return to previous process*/

    end

    TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 + 1; /* ===> Incr Orig. table index*/

  end

    /* **--------------------------------------------------*/
    /* ** If container not found, default to 1st  container*/
    /* **    that is associated with the packing list's*/
    /* **    color row in the GPC-CPL table array.*/
    /* **--------------------------------------------------*/


  if (TS0VW22.SY2CLRID in TS0VW03.SY2CLRID)
    TS0VW22.TSIPLNBR = TS0VW03.TSIPLNBR[sysVar.arrayIndex];
  end

  TS0VW25.TS0VW25IX2 = 1;
  if (TS0VW22.TSNIKCNT != 0)
    while (TS0VW25.TS0VW25IX2 <= TS0VW25.ARRCNT)
      if (TS0VW22.TSNIKCNT == TS0VW25.TS-NIKE-CNTNR-NBR[TS0VW25IX2]
       && TS0VW22.SY2CLRID == TS0VW25.SY-CLR-CD-ID[TS0VW25IX2])
        TS0VW22.TSIPLNBR = TS0VW25.TS-NIKE-PL-NBR[TS0VW25IX2];
        TS0VW25.TS0VW25IX2 = TS0VW25.ARRCNT + 1;
      else
        TS0VW25.TS0VW25IX2 = TS0VW25.TS0VW25IX2 + 1;
      end
    end
  end

  TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
  TSIREC.TSIPLNBR = TS0VW22.TSIPLNBR;

  TS0V-02510(); /* Select the cplhd*/


  if (TSIREC.TSHNKCN1 > 0) /* ===>  nike cntnr nbr*/
    TS0VW01.TSHNKCN = TSIREC.TSHNKCN1; /* ===> default nike cntnr nbr*/
  else
    if (TSIREC.TSHNKCN2 > 0) /* ===>  nike cntnr nbr*/
      TS0VW01.TSHNKCN = TSIREC.TSHNKCN2;
                                   /* ===> default nike cntnr nbr*/
    else
      if (TSIREC.TSHNKCN3 > 0) /* ===>  nike cntnr nbr*/
        TS0VW01.TSHNKCN = TSIREC.TSHNKCN3;
                                   /* ===> default nike cntnr nbr*/
      else
        if (TSIREC.TSHNKCN4 > 0) /* ===>  nike cntnr nbr*/
          TS0VW01.TSHNKCN = TSIREC.TSHNKCN4;
                                   /* ===> default nike cntnr nbr*/
        else
          if (TSIREC.TSHNKCN5 > 0) /* ===>  nike cntnr nbr*/
            TS0VW01.TSHNKCN = TSIREC.TSHNKCN5;
                                   /* ===> default nike cntnr nbr*/
          else
            if (TSIREC.TSHNKCN6 > 0) /* ===>  nike cntnr nbr*/
              TS0VW01.TSHNKCN = TSIREC.TSHNKCN6;
                                   /* ===> default nike cntnr nbr*/
            else

              if (TSIREC.TSHNKCN7 > 0) /* ===>  nike cntnr nbr*/
                TS0VW01.TSHNKCN = TSIREC.TSHNKCN7;
                                   /* ===> default nike cntnr nbr*/
              else
                TS0VW01.TSHNKCN = TSIREC.TSHNKCN8;
                                   /* ===> default nike cntnr nbr*/
              end

            end
          end
        end
      end
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63211 ********************/
end // end TS0V-63211

// Move assigned range to table
Function TS0V-63212()
   /* ------------------------------------------------------------*/
   /* -- Process the assigned row to the new table TS0VW21*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX2 = 1; /* ===> Index for the new table*/

  while (TS0VW01.TS0VWIX2 <= TS0VW01.TS0VWM21) /* ===> index <= max index*/

    if (TS0VW21.TSOFRCRT[TS0VWIX2] == 0) /* ===> empty row*/

      TS0VW21.TSOGROUP[TS0VWIX2] = TS0VW22.TSOGROUP;
      TS0VW21.SY2CLRID[TS0VWIX2] = TS0VW22.SY2CLRID;
      TS0VW21.TS0VWQPC[TS0VWIX2] = TS0VW22.TS0VWQPC;

      TS0VW01.TS0VWM21 = TS0VW01.TS0VWIX2 + 1; /* ===> save max index*/

      return; /* ===> return to previous process*/

    else /* ===> carton counter > "TO" carton*/

                                   /* ===> key data same*/
      if (TS0VW21.TSIPLNBR[TS0VWIX2] == TS0VW22.TSIPLNBR
       && TS0VW21.TSHNKCN[TS0VWIX2] == TS0VW22.TSHNKCN
       && TS0VW21.SY2CLRID[TS0VWIX2] == TS0VW22.SY2CLRID
       && TS0VW21.SY5SZID[TS0VWIX2] == TS0VW22.SY5SZID
       && TS0VW21.TS0VWQPC[TS0VWIX2] == TS0VW22.TS0VWQPC)

        TS0VW01.TS0VWWK1 = TS0VW22.TSOFRCRT - TS0VW21.TSOTOCRT[TS0VWIX2];
        TS0VW01.TS0VWWK2 = TS0VW21.TSOFRCRT[TS0VWIX2] - TS0VW22.TSOTOCRT;

        if (TS0VW01.TS0VWWK1 == 1 /* ===> Merge required*/
         || TS0VW01.TS0VWWK2 == 1)

          if (TS0VW01.TS0VWWK1 == 1) /* ===> Merge required*/

            TS0V-63213(); /* ====> Merge W22("FROM-1")=W21"TO"*/

          else

            TS0V-63214(); /* ====> Merge W21("FROM-1")=W22"TO"*/

          end
          return; /* ===> Return to previous process*/
                                   /* ===> (merge complete)*/

        end /* ===> Merge required*/

      end /* ===> key data same*/

    end /* ===> empty row*/

    TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* Incr map index*/

  end /* ===> index <= max index*/

  TS0VW01.TS0VWM21 = TS0VW01.TS0VWIX2 + 1; /* ===> save max index*/

   /* **                                                        ***/
   /* ********************** End of TS0V-63212 ********************/
end // end TS0V-63212

// merge W22("FROM"-1) = W21"TO"
Function TS0V-63213()
   /* **--------------------------------------------------------***/
   /* ** Merge for the the new range "FROM" carton to the existing*/
   /* ** range in the new table.*/
   /* **   ie. W22.("FROM" - 1) = W21."TO"*/
   /* **--------------------------------------------------------***/


  TS0VW21.TSOTOCRT[TS0VWIX2] = TS0VW22.TSOTOCRT;

  TS0VW21.TSOSHPQT[TS0VWIX2] = TS0VW21.TSOSHPQT[TS0VWIX2] + TS0VW22.TSOSHPQT;


   /* **--------------------------------------------------------***/
   /* ** Continue through remainder of table to*/
   /* **    check if other end of range warrants a merge*/
   /* **--------------------------------------------------------***/

  TS0VW01.TS0VWIXW = TS0VW01.TS0VWIX2 + 1; /* Incr new table index*/


  while (TS0VW01.TS0VWIXW <= TS0VW01.TS0VWM21) /* ===> index <= max index*/

    if (TS0VW21.TSOFRCRT[TS0VWIXW] == 0) /* ===> empty row*/

      /* ======= NEXT SENTENCE ========>*/

    else /* ===> carton counter > "TO" carton*/

                                   /* ===> key data same*/
      if (TS0VW21.TSIPLNBR[TS0VWIXW] == TS0VW22.TSIPLNBR
       && TS0VW21.TSHNKCN[TS0VWIXW] == TS0VW22.TSHNKCN
       && TS0VW21.SY2CLRID[TS0VWIXW] == TS0VW22.SY2CLRID
       && TS0VW21.SY5SZID[TS0VWIXW] == TS0VW22.SY5SZID
       && TS0VW21.TS0VWQPC[TS0VWIXW] == TS0VW22.TS0VWQPC)

        TS0VW01.TS0VWWK2 = TS0VW21.TSOFRCRT[TS0VWIXW] - TS0VW22.TSOTOCRT;

        if (TS0VW01.TS0VWWK2 == 1) /* ===> Merge required*/

          TS0VW21.TSOTOCRT[TS0VWIX2] = TS0VW21.TSOTOCRT[TS0VWIXW];

          TS0VW21.TSOSHPQT[TS0VWIX2] = TS0VW21.TSOSHPQT[TS0VWIX2] + TS0VW21.TSOSHPQT[TS0VWIXW];
    /* **-------------------------------------------***/
    /* **  void this merged row so it will not be*/
    /* **     picked up in the database load*/
    /* **     and exit to the previous process*/
    /* **-------------------------------------------***/

          TS0VW21.TSOSHPQT[TS0VWIXW] = 0;
          TS0VW21.TS0VWQPC[TS0VWIXW] = 0;

          return; /* ===> Return to previous process*/
                                   /* ===> (merge complete)*/

        end /* ===> Merge required*/

      end /* ===> key data same*/

    end /* ===> empty row*/

    TS0VW01.TS0VWIXW = TS0VW01.TS0VWIXW + 1; /* Incr new table index*/

  end /* ===> index <= max index*/


   /* **                                                        ***/
   /* ********************** End of TS0V-63213 ********************/
end // end TS0V-63213

// merge W21("FROM"-1) = W22"TO"
Function TS0V-63214()
   /* **--------------------------------------------------------***/
   /* ** Merge to the the new table "FROM" carton, the new*/
   /* ** range being processed.*/
   /* **   ie. W21.("FROM" - 1) = W22."TO"*/
   /* **--------------------------------------------------------***/


  TS0VW21.TSOFRCRT[TS0VWIX2] = TS0VW22.TSOFRCRT;

  TS0VW21.TSOSHPQT[TS0VWIX2] = TS0VW21.TSOSHPQT[TS0VWIX2] + TS0VW22.TSOSHPQT;


   /* **--------------------------------------------------------***/
   /* ** Continue through remainder of table to*/
   /* **    check if other end of range warrants a merge*/
   /* **--------------------------------------------------------***/

  TS0VW01.TS0VWIXW = TS0VW01.TS0VWIX2 + 1; /* Incr new table index*/


  while (TS0VW01.TS0VWIXW <= TS0VW01.TS0VWM21) /* ===> index <= max index*/

    if (TS0VW21.TSOFRCRT[TS0VWIXW] == 0) /* ===> empty row*/

      /* ======= NEXT SENTENCE ========>*/

    else /* ===> carton counter > "TO" carton*/

                                   /* ===> key data same*/
      if (TS0VW21.TSIPLNBR[TS0VWIXW] == TS0VW22.TSIPLNBR
       && TS0VW21.TSHNKCN[TS0VWIXW] == TS0VW22.TSHNKCN
       && TS0VW21.SY2CLRID[TS0VWIXW] == TS0VW22.SY2CLRID
       && TS0VW21.SY5SZID[TS0VWIXW] == TS0VW22.SY5SZID
       && TS0VW21.TS0VWQPC[TS0VWIXW] == TS0VW22.TS0VWQPC)

        TS0VW01.TS0VWWK1 = TS0VW22.TSOFRCRT - TS0VW21.TSOTOCRT[TS0VWIX2];

        if (TS0VW01.TS0VWWK1 == 1) /* ===> Merge required*/

          TS0VW21.TSOFRCRT[TS0VWIX2] = TS0VW21.TSOFRCRT[TS0VWIXW];

          TS0VW21.TSOSHPQT[TS0VWIX2] = TS0VW21.TSOSHPQT[TS0VWIX2] + TS0VW21.TSOSHPQT[TS0VWIXW];
    /* **-------------------------------------------***/
    /* **  Void this merged row so it will not be*/
    /* **     picked up in the database load*/
    /* **     and exit to the previous process*/
    /* **-------------------------------------------***/

          TS0VW21.TSOSHPQT[TS0VWIXW] = 0;
          TS0VW21.TS0VWQPC[TS0VWIXW] = 0;

          return; /* ===> Return to previous process*/
                                   /* ===> (merge complete)*/

        end /* ===> Merge required*/

      end /* ===> key data same*/

    end /* ===> empty row*/

    TS0VW01.TS0VWIXW = TS0VW01.TS0VWIXW + 1; /* Incr new table index*/

  end /* ===> index <= max index*/


   /* **                                                        ***/
   /* ********************** End of TS0V-63214 ********************/
end // end TS0V-63214

// Select (S )    DTRANS.VTSCTL01
Function TS0V-63220()
   /* ------------------------------------------------------------*/

               /* Select the row in the control table*/

   /* ------------------------------------------------------------*/


  call "IO2530" ("S ", SQLCA, TSQREC) {isNoRefresh = yes, isExternal = yes}; /* Select a row*/

  if (SQLCA.VAGen_SQLCODE == 0)

   /* ======= NEXT SENTENCE ==========>*/

  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      converseLib.validationFailed(09); /* Indicate not available*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-63220"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSCTL01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


    end

    TS0VM001.XXXPRCNM = "V-63220"; /* Process name*/

    exit stack; /* ===> Exit to display error message*/

  end /* ===> SQL = 0*/



   /* **                                                        ***/
   /* ********************** End of TS0V-63220 ********************/
end // end TS0V-63220

// Delete old carton rows
Function TS0V-63300()
   /* ------------------------------------------------------------*/
     /* Delete old VCPLit01 rows*/
   /* ------------------------------------------------------------*/


  TS0VW01.TS0VWIX1 = 1; /* Set index*/

  while (TS0VW01.TS0VWIX1 <= TS0VW01.TS0VWMGC /* Until end of array*/
   && TS0VW03.TSIPLNBR[TS0VWIX1] > 0) /* and data exists*/

    TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
    TSIREC.TSIPLNBR = TS0VW03.TSIPLNBR[TS0VWIX1];

    TS0V-02510(); /* Select the cplhd*/

    /* -------------------------------------------------*/
      /* If the packing list contains detail*/
    /* -------------------------------------------------*/

    if (TSIREC.TSIDETFL == "Y") /* If the cplhd has detail*/

      /* ------------------------------------------------------------*/
        /* Delete the carton detail for the Nike Plan NBR*/
      /* ------------------------------------------------------------*/

      TSOREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
      TSOREC.TSIPLNBR = TS0VW03.TSIPLNBR[TS0VWIX1];
      VPLAUX01.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in keys*/
      VPLAUX01.TS-NIKE-PL-NBR = TS0VW03.TSIPLNBR[TS0VWIX1];
      TSOREC.TSHNKCN = -1;
      TSOREC.TSOFRCRT = -1;
      TSOREC.SY5SZID = -1;

      TS0V-63310(); /* ===> Delete (DS) Set VCPLIT01*/

    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* Incr gpc-cpl index*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-63300 ********************/
end // end TS0V-63300

// Delete (DS) set       VCPLIT01
Function TS0V-63310()
   /* ------------------------------------------------------------*/

                  /* DELETE THE CARTON ROW*/

    /* 1) Delete the carton row from the data base*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("DS", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* ========== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-63310"; /* Process name*/
    TA1REC.TA1LOC = "DELETE TABLE SET";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-63310"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===>  Exit to display the map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63310 ********************/
end // end TS0V-63310

// Delete the VPLAUX01 rows
Function TS0V-63320()
   /* ------------------------------------------------------------*/

                  /* DELETE THE VPLAUX ROW*/

    /* 1) Delete the VPLAUX row from the data base*/

   /* ------------------------------------------------------------*/

  TS0VW11.TSCFNC = "D1";
  call "VPLAUX01" (TS0VW11, SQLCA, VPLAUX01) {isNoRefresh = yes, isExternal = yes}; /* Delete table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* ========== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-63320"; /* Process name*/
    TA1REC.TA1LOC = "DELETE TABLE SET";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLAUX01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-63320"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===>  Exit to display the map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63320 ********************/
end // end TS0V-63320

// Insert new carton rows
Function TS0V-63400()
   /* ------------------------------------------------------------*/
     /* Process the newly created table into the database*/
     /* by inserting new VCPLIT01 rows*/
   /* ------------------------------------------------------------*/


  TS0VW01.TS0VWIX1 = 1; /* initialize index*/

  while (TS0VW01.TS0VWIX1 <= TS0VW01.TS0VWM21) /* ===> max new table entries*/

    if (TS0VW21.TSOSHPQT[TS0VWIX1] > 0)

      TSOREC.TSOGROUP = TS0VW21.TSOGROUP[TS0VWIX1];


      TS0V-63410(); /* ===> Insert VCPLIT01 Rows*/

    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> increment index*/

  end /* ===> LE last map column*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value


  TS0V-63401(); /* Call batch program TS4580 for VPLAUX*/
                                   /* processing*/

   /* **                                                        ***/
   /* ********************** End of TS0V-63400 ********************/
end // end TS0V-63400

// Call program TS4580
Function TS0V-63401()
   /* ------------------------------------------------------------*/
      /* This process is used to call the Batch program TS4580 to*/
      /* manipulate the VPLAUX01 rows based on the Changes made to*/
      /* VCPLIT01 table rows.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)          /* Good return code*/

     /* next sentence*/

  else

    converseLib.validationFailed(87); /* Error with print request*/
    exit stack;
  end

  if (TA3REC.TA3RGNID == "03") /* prod environment*/
    TS0V-001(); /* format prod batch sub*/
  else
    TS0V-002(); /* format test batch sub*/
  end

  return;
                                        /* retn to performing process*/
end // end TS0V-63401

// Insert (A ) Row       VCPLIT01
Function TS0V-63410()
   /* ------------------------------------------------------------*/

                     /* ADD CARTONS*/

       /* Add the carton row to DTRANS.VCPLIT01*/

   /* ------------------------------------------------------------*/


  call "IO2580" ("A ", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-63410"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-63410"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0-63410 *********************/
end // end TS0V-63410

// Process the CPLHD01 update
Function TS0V-63500()
   /* ------------------------------------------------------------*/

                    /* PERFORM UPDATES FOR CPLHD01*/

     /* 1) This process will take all the changes/adds*/
        /* which were made on the current map and update the*/
        /* database with them.*/

   /* ------------------------------------------------------------*/


  TS0VW01.TS0VWWUP = "N"; /* reset warning update flag*/

   /* ------------------------------------------------------*/
   /* Cycle through all the gpc-cpl packing lists and update*/
   /* the cplhd rows.*/
   /* ------------------------------------------------------*/
  TS0VW01.TS0VWIX1 = 1;

  while (TS0VW01.TS0VWIX1 <= TS0VW01.TS0VWMGC /* until end of array*/
   && TS0VW03.TSIPLNBR[TS0VWIX1] > 0) /* and data exists*/

    TSIREC.TSFSHPID = TSWREC.TSFSHPID;
    TSIREC.TSIPLNBR = TS0VW03.TSIPLNBR[TS0VWIX1];

    TS0V-02510(); /* ===> Select the CPLHD01 row*/

    TS0V-63510(); /* ===> Recalc shipment totals*/

    TS0V-63520(); /* ===> Update the row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* ===> If row found*/
      /* ----------------------------------------------------------*/
         /* update the cplhd array.*/
      /* ----------------------------------------------------------*/
      TS0VW03.TSIMSCFL[TS0VWIX1] = TS0VM001.TSIMSCFL;
      TS0VW03.TSIMSCGR[TS0VWIX1] = TS0VM001.TSIMSCGR;
      TS0VW03.TSILOCR[TS0VWIX1] = TS0VM001.TSILOCR;
      TS0VW03.TSPFCIVC[TS0VWIX1] = TS0VM001.TSPFCIVC;
      TS0VW03.TSPFILE[TS0VWIX1] = TS0VM001.TSPFILE;
      TS0VW03.TSRTEXT[TS0VWIX1] = TS0VM001.TSRTEXT;
      TS0VW03.PC-XCT-ORIG-CD[TS0VWIX1] = TS0VM001.PC-XCT-ORIG-CD;
      TS0VW03.PC-ITM-SEQ-NBR[TS0VWIX1] = TS0VM001.PC-ITM-SEQ-NBR;
      TS0VW03.TS-SHP-LEG-NBR[TS0VWIX1] = TS0VM001.TS-SHP-LEG-NBR;
    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* incr the counter*/

  end

   /* ------------------------------------------------------*/
   /* Select the factory invoice number and if not found*/
   /* then add the factory invoice number.*/
   /* ------------------------------------------------------*/

  TS0V-63530(); /* Select/Add the factory invoice number*/



   /* **                                                        ***/
   /* ********************** End of TS0V-63500 ********************/
end // end TS0V-63500

// Recalculate the shpmnt totals
Function TS0V-63510()
   /* ------------------------------------------------------------*/
   /*  */
   /* RECALCULATE THE SHIPMENT TOTALS*/
   /* -------------------------------*/
   /*  */
   /* 1. Uses the VCPLIT01 selected set to accum/calculate*/
   /* appropriate totals on the VCPLHD01 rows.*/
   /*  */
   /*  */
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWCCT = 0; /* ===> container count*/

  TS0VW01.TSISHPQT = 0; /* ===> Init totals qtys*/
  TS0VW01.TSICRTQT = 0;

  TS0VW01.TSISHPQ1 = 0; /* ===> Init carton qtys/container*/
  TS0VW01.TSISHPQ2 = 0;
  TS0VW01.TSISHPQ3 = 0;
  TS0VW01.TSISHPQ4 = 0;
  TS0VW01.TSISHPQ5 = 0;
  TS0VW01.TSISHPQ6 = 0;
  TS0VW01.TSISHPQ7 = 0;
  TS0VW01.TSISHPQ8 = 0;

  TS0VW01.TSICRTQ1 = 0; /* ===> Init carton/container*/
  TS0VW01.TSICRTQ2 = 0;
  TS0VW01.TSICRTQ3 = 0;
  TS0VW01.TSICRTQ4 = 0;
  TS0VW01.TSICRTQ5 = 0;
  TS0VW01.TSICRTQ6 = 0;
  TS0VW01.TSICRTQ7 = 0;
  TS0VW01.TSICRTQ8 = 0;

   /* ------------------------------------------------------------*/
        /* Select the carton rows*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX2 = 1; /* ===> container index*/

  while (TS0VW01.TS0VWIX2 <= 8 /* ===> container index*/
  )
    set TSOREC empty;
    TSOREC.TSFSHPID = TSIREC.TSFSHPID;
    TSOREC.TSIPLNBR = TSIREC.TSIPLNBR;

    TS0V-63511(); /* ===> Load nike container to TSOREC*/

    if (TSOREC.TSHNKCN > 0
    )
      TS0VW01.TS0VWCCT = TS0VW01.TS0VWCCT + 1; /* ===> container count*/

      TS0VW01.TS0VWWK2 = 0; /* ===> init highest range found*/

      TS0V-63512(); /* ===> Select the VCPLIT01/carton rows*/

      TS0VW01.TS0VWSWC = "N";

      TS0V-63513(); /* ===> Fetch the VCPLIT01 row*/
      /* -----> Prime  read*/
      /* -----------*/

   /* ------------------------------------------------------------*/
          /* Process the selected set of VCPLIT01 rows.*/
   /* ------------------------------------------------------------*/

      while (TS0VW01.TS0VWSWC == "N") /* ===> Process the selected set*/

        TS0V-63514(); /* ===> accum   carton qtys/containers*/

        TS0V-63515(); /* ===> accum   cartons/containers*/

        TS0V-63513(); /* ===> Fetch the CPLIT row*/
     /* -----> Driving read*/
           /* ------------*/

      end

      TS0V-63516(); /* ===> Close the selected set*/

    end /* ====> container exists*/

    TS0VW01.TS0VWIX2 = TS0VW01.TS0VWIX2 + 1; /* ===> container index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63510 ********************/
end // end TS0V-63510

// Load Nike cntnr nbr for TSOREC
Function TS0V-63511()
   /* ------------------------------------------------------------*/
   /* Get the appropriate nike container number loaded into*/
   /* w.s. for further processing of all the GPC-CPL array*/
   /* ------------------------------------------------------------*/


  if (TS0VW01.TS0VWIX2 == 1) /* ===> container position*/

    TSOREC.TSHNKCN = TSIREC.TSHNKCN1;
  else

    if (TS0VW01.TS0VWIX2 == 2) /* ===> container position*/

      TSOREC.TSHNKCN = TSIREC.TSHNKCN2;
    else

      if (TS0VW01.TS0VWIX2 == 3) /* ===> container position*/

        TSOREC.TSHNKCN = TSIREC.TSHNKCN3;
      else

        if (TS0VW01.TS0VWIX2 == 4) /* ===> container position*/

          TSOREC.TSHNKCN = TSIREC.TSHNKCN4;
        else

          if (TS0VW01.TS0VWIX2 == 5) /* ===> container position*/

            TSOREC.TSHNKCN = TSIREC.TSHNKCN5;
          else

            if (TS0VW01.TS0VWIX2 == 6) /* ===> container position*/

              TSOREC.TSHNKCN = TSIREC.TSHNKCN6;
            else

              if (TS0VW01.TS0VWIX2 == 7) /* ===> container position*/

                TSOREC.TSHNKCN = TSIREC.TSHNKCN7;
              else

                if (TS0VW01.TS0VWIX2 == 8) /* ===> container position*/

                  TSOREC.TSHNKCN = TSIREC.TSHNKCN8;
                end

              end

            end

          end

        end

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63511 ********************/
end // end TS0V-63511

// Select (S3) set       VCPLIT01
Function TS0V-63512()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPLIT TABLE ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("S3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-63512"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-63512"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63512 ********************/
end // end TS0V-63512

// Fetch  (N3) next row  VCPLIT01
Function TS0V-63513()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPLIT TABLE ROW*/

      /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return codes*/
    /* ====== NEXT SENTENCE =========>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS0VW01.TS0VWSWC = "Y"; /* ===> end of cursor switch*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-63513"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-63513"; /* Process name*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V962 ***********************/
end // end TS0V-63513

// Accum.   carton qtys/container
Function TS0V-63514()
   /* ------------------------------------------------------------*/
   /* 1.  Accumulate CPLIT01/carton qtys for each container*/
   /* existing in the CPLHD01 row.*/
   /*  */
   /* 2.  Load qtys to appropriate P.L. accumulators*/
   /* and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN1)
    TS0VW01.TSISHPQ1 = TS0VW01.TSISHPQ1 + TSOREC.TSOSHPQT;
    TS0VW01.TSISHPQT = TS0VW01.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN2)
    TS0VW01.TSISHPQ2 = TS0VW01.TSISHPQ2 + TSOREC.TSOSHPQT;
    TS0VW01.TSISHPQT = TS0VW01.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN3)
    TS0VW01.TSISHPQ3 = TS0VW01.TSISHPQ3 + TSOREC.TSOSHPQT;
    TS0VW01.TSISHPQT = TS0VW01.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN4)
    TS0VW01.TSISHPQ4 = TS0VW01.TSISHPQ4 + TSOREC.TSOSHPQT;
    TS0VW01.TSISHPQT = TS0VW01.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN5)
    TS0VW01.TSISHPQ5 = TS0VW01.TSISHPQ5 + TSOREC.TSOSHPQT;
    TS0VW01.TSISHPQT = TS0VW01.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN6)
    TS0VW01.TSISHPQ6 = TS0VW01.TSISHPQ6 + TSOREC.TSOSHPQT;
    TS0VW01.TSISHPQT = TS0VW01.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN7)
    TS0VW01.TSISHPQ7 = TS0VW01.TSISHPQ7 + TSOREC.TSOSHPQT;
    TS0VW01.TSISHPQT = TS0VW01.TSISHPQT + TSOREC.TSOSHPQT;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN8)
    TS0VW01.TSISHPQ8 = TS0VW01.TSISHPQ8 + TSOREC.TSOSHPQT;
    TS0VW01.TSISHPQT = TS0VW01.TSISHPQT + TSOREC.TSOSHPQT;
  end

   /* **                                                        ***/
   /* ********************** End of TS0V-63514 ********************/
end // end TS0V-63514

// Accum.       cartons/container
Function TS0V-63515()
   /* ------------------------------------------------------------*/
   /* Accumulate CPLIT01/cartons for each container*/
   /* existing in the CPLHD01 row.*/
   /*  */
   /* Before processing gets started, make sure there is no*/
   /* overlap in ranges, could cause count problems.*/
   /*  */
   /* 1. Calculate the carton count between the carton ranges*/
   /*  */
   /* 2. Load the carton count to appropriate P.L. accumulator*/
   /* and return to previous process*/
   /* ------------------------------------------------------------*/


  if (TSOREC.TSOFRCRT > TS0VW01.TS0VWWK2)

    TS0VW01.TS0VWWK1 = TSOREC.TSOTOCRT - TSOREC.TSOFRCRT + 1;

  else

    if (TSOREC.TSOTOCRT <= TS0VW01.TS0VWWK2) /* ===> highest to carton*/

      return; /* ===> return to previous process*/
                                  /* ===> (cartons counted)*/
    else

      TS0VW01.TS0VWWK1 = TSOREC.TSOTOCRT - TS0VW01.TS0VWWK2;

    end

  end

  if (TSOREC.TSOTOCRT > TS0VW01.TS0VWWK2) /* ===> Save the highest to carton*/
    TS0VW01.TS0VWWK2 = TSOREC.TSOTOCRT;
  end

   /* **--------------------------------------------------------*/
   /* **   Load the carton count to appropriate P.L. accumulator*/
   /* **   and return to previous process*/
   /* **--------------------------------------------------------*/

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN1)
    TS0VW01.TSICRTQ1 = TS0VW01.TSICRTQ1 + TS0VW01.TS0VWWK1;
    TS0VW01.TSICRTQT = TS0VW01.TSICRTQT + TS0VW01.TS0VWWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN2)
    TS0VW01.TSICRTQ2 = TS0VW01.TSICRTQ2 + TS0VW01.TS0VWWK1;
    TS0VW01.TSICRTQT = TS0VW01.TSICRTQT + TS0VW01.TS0VWWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN3)
    TS0VW01.TSICRTQ3 = TS0VW01.TSICRTQ3 + TS0VW01.TS0VWWK1;
    TS0VW01.TSICRTQT = TS0VW01.TSICRTQT + TS0VW01.TS0VWWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN4)
    TS0VW01.TSICRTQ4 = TS0VW01.TSICRTQ4 + TS0VW01.TS0VWWK1;
    TS0VW01.TSICRTQT = TS0VW01.TSICRTQT + TS0VW01.TS0VWWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN5)
    TS0VW01.TSICRTQ5 = TS0VW01.TSICRTQ5 + TS0VW01.TS0VWWK1;
    TS0VW01.TSICRTQT = TS0VW01.TSICRTQT + TS0VW01.TS0VWWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN6)
    TS0VW01.TSICRTQ6 = TS0VW01.TSICRTQ6 + TS0VW01.TS0VWWK1;
    TS0VW01.TSICRTQT = TS0VW01.TSICRTQT + TS0VW01.TS0VWWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN7)
    TS0VW01.TSICRTQ7 = TS0VW01.TSICRTQ7 + TS0VW01.TS0VWWK1;
    TS0VW01.TSICRTQT = TS0VW01.TSICRTQT + TS0VW01.TS0VWWK1;
    return; /* ===> Return to previous process*/
  end

  if (TSOREC.TSHNKCN == TSIREC.TSHNKCN8)
    TS0VW01.TSICRTQ8 = TS0VW01.TSICRTQ8 + TS0VW01.TS0VWWK1;
    TS0VW01.TSICRTQT = TS0VW01.TSICRTQT + TS0VW01.TS0VWWK1;
  end

   /* **                                                        ***/
   /* ********************** End of TS0V-63515 ********************/
end // end TS0V-63515

// Close  (C3) set       VCPLIT01
Function TS0V-63516()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-63516"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-63516"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63516 ********************/
end // end TS0V-63516

// Update container packing list
Function TS0V-63520()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

    /* 1) Update the container packing list row with new fields*/
       /* provided by this application.*/

   /* ------------------------------------------------------------*/


  TS0V-63521(); /* ====> Load the TSIREC for CPLHD01*/
                                   /* update*/

  TS0V-63522(); /* ===> Recheck status fields from edits*/

  TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
  TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;

  TS0VW14.TSIREC-WORK-AREA = TSIREC.TSIGROUP;
  TS0VW14.VCPLHD04-FIXED-1 = TS0VW14.TSIREC-FIXED-1;
  TS0VW14.VCPLHD04-FIXED-2 = TS0VW14.TSIREC-FIXED-2;
  TS0VW14.VCPLHD04-FIXED-3 = TS0VW14.TSIREC-FIXED-3;
  TS0VW14.PC-ITM-SEQ-NBR = VCPLHD04.PC-ITM-SEQ-NBR;
  TS0VW14.PC-XCT-ORIG-CD = VCPLHD04.PC-XCT-ORIG-CD;
  VCPLHD04.VCPLHD04-GRP = TS0VW14.VCPLHD04-WORK-AREA;

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/

    /* ============ NEXT SENTENCE ============>*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-63520"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-62520"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack;


  end

   /* **                                                        ***/
   /* ********************** End of TS0V-63520 ********************/
end // end TS0V-63520

// Load VCPLHD04 rec for update
Function TS0V-63521()
   /* ----------------------------------------------------------*/
     /* Restore the TSIREC with updated fields*/
   /* ----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* ===> Load totals qtys*/
   /* ------------------------------------------------------------*/

  TSIREC.TSISHPQT = TS0VW01.TSISHPQT; /* ===> Load totals qtys*/
  TSIREC.TSICRTQT = TS0VW01.TSICRTQT;

   /* ------------------------------------------------------------*/
   /* ===> Load carton qtys/container*/
   /* ------------------------------------------------------------*/

  TSIREC.TSISHPQ1 = TS0VW01.TSISHPQ1;
                                   /* ===> Load carton qty/container*/
  TSIREC.TSISHPQ2 = TS0VW01.TSISHPQ2;
  TSIREC.TSISHPQ3 = TS0VW01.TSISHPQ3;
  TSIREC.TSISHPQ4 = TS0VW01.TSISHPQ4;
  TSIREC.TSISHPQ5 = TS0VW01.TSISHPQ5;
  TSIREC.TSISHPQ6 = TS0VW01.TSISHPQ6;
  TSIREC.TSISHPQ7 = TS0VW01.TSISHPQ7;
  TSIREC.TSISHPQ8 = TS0VW01.TSISHPQ8;

   /* ------------------------------------------------------------*/
   /* ===> Load carton/container*/
   /* ------------------------------------------------------------*/

  TSIREC.TSICRTQ1 = TS0VW01.TSICRTQ1; /* ===> Load carton/container*/
  TSIREC.TSICRTQ2 = TS0VW01.TSICRTQ2;
  TSIREC.TSICRTQ3 = TS0VW01.TSICRTQ3;
  TSIREC.TSICRTQ4 = TS0VW01.TSICRTQ4;
  TSIREC.TSICRTQ5 = TS0VW01.TSICRTQ5;
  TSIREC.TSICRTQ6 = TS0VW01.TSICRTQ6;
  TSIREC.TSICRTQ7 = TS0VW01.TSICRTQ7;
  TSIREC.TSICRTQ8 = TS0VW01.TSICRTQ8;

   /* ------------------------------------------------------------*/
    /* Load map data*/
   /* ------------------------------------------------------------*/

  TSIREC.TSIMSCFL = TS0VM001.TSIMSCFL;
  TSIREC.TSIMSCGR = TS0VM001.TSIMSCGR;
  TSIREC.TSILOCR = TS0VM001.TSILOCR;
  TSIREC.TSPFCIVC = TS0VM001.TSPFCIVC;
  TSIREC.TSPFILE = TS0VM001.TSPFILE;
  TSIREC.TSRTEXT = TS0VM001.TSRTEXT;
  VCPLHD04.PC-XCT-ORIG-CD = TS0VM001.PC-XCT-ORIG-CD;

   /* ------------------------------------------------------------*/
    /* Determine if the detail flag should be set = yes*/
   /* ------------------------------------------------------------*/

  if (TSIREC.TSISHPQ1 <= 0 /* If there is nothing shipped*/
   && TSIREC.TSISHPQ2 <= 0 
   && TSIREC.TSISHPQ3 <= 0 
   && TSIREC.TSISHPQ4 <= 0 
   && TSIREC.TSISHPQ5 <= 0 
   && TSIREC.TSISHPQ6 <= 0 
   && TSIREC.TSISHPQ7 <= 0 
   && TSIREC.TSISHPQ8 <= 0 
   && TSIREC.TSICRTQ1 <= 0 
   && TSIREC.TSICRTQ2 <= 0 
   && TSIREC.TSICRTQ3 <= 0 
   && TSIREC.TSICRTQ4 <= 0 
   && TSIREC.TSICRTQ5 <= 0 
   && TSIREC.TSICRTQ6 <= 0 
   && TSIREC.TSICRTQ7 <= 0 
   && TSIREC.TSICRTQ8 <= 0)

    TSIREC.TSIDETFL = "N"; /* Set detail flag to no*/

    if (TSIREC.TSIPLNBR in TS0VW03.TSIPLNBR) /* Find position of pl*/
      TS0VW03.TSIDETFL[sysVar.arrayIndex] = "N"; /* Set detail flag to no*/
    end

  else

    TSIREC.TSIDETFL = "Y"; /* Set detail flag to yes*/

    if (TSIREC.TSIPLNBR in TS0VW03.TSIPLNBR) /* Find position of pl*/
      TS0VW03.TSIDETFL[sysVar.arrayIndex] = "Y"; /* Set detail flag to no*/
    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63521 ********************/
end // end TS0V-63521

// Load status for VCPLHD01
Function TS0V-63522()
   /* ------------------------------------------------------------*/
   /* Recheck status fields from edits*/
   /* ------------------------------------------------------------*/

  if (TSIREC.TSIPLNBR in TS0VW03.TSIPLNBR) /* Find position of pl*/

    if (TS0VW03.TSISTAT[sysVar.arrayIndex] == "  " /* If status not set*/
     || TS0VW03.TSISTAT[sysVar.arrayIndex] == "99") /* If status ok*/

      /* ------------------------------------------------------------*/
        /* Set appropriate data for the CPLHD01 status not in error*/
      /* ------------------------------------------------------------*/

      if (TSIREC.XRECD == "OH" /* If overage error hard*/
       || TSIREC.XRECD == "OS" /* or overage error soft*/
       || TSIREC.XRECD == "PZ" /* or size not on po error*/
       || TSIREC.XRECD == "PS" /* or style not on po error*/
       || TSIREC.XRECD == "UN" /* or undershipment*/
       || TSIREC.XRECD == "SE" /* or undershipment*/
       || TSIREC.XRECD == "PI" /* or invalid po, id, type*/
       || TSIREC.XRECD == "IF" /* or invalid fivc*/
       || TSIREC.XRECD == "MI" /* or missing fivc*/
       || TSIREC.XRECD == "  ") /* or blank*/

        TSIREC.XRECD = "  "; /* move code*/

        if (TSWREC.YSSCD == "CC" /* If custom-clear status*/
         || TSWREC.YSSCD == "CR")

          TSIREC.TSISTAT = "CC"; /* move status*/

        else

          if (TSWREC.YSSCD == "RC")
            TSIREC.TSISTAT = "RC"; /* move status*/
          else
            TSIREC.TSISTAT = "IT"; /* move status*/
          end

        end /* ===> Custom-clear status?*/

      end /* ===> exception error status code*/
                                   /* check*/

    else /* ===> CPLHD01 status set in error*/

      /* ------------------------------------------------------------*/
        /* Set appropriate data for the CPLHD01 status in error*/
      /* ------------------------------------------------------------*/

      TSIREC.XRECD = TS0VW03.XRECD[sysVar.arrayIndex]; /* move exception cd*/

      if (TSWREC.YSSCD == "CC" /* If custom-clear status*/
       || TSWREC.YSSCD == "CR")

        TSIREC.TSISTAT = "CR"; /* move status*/

      else

        if (TSWREC.YSSCD == "RC")
          TSIREC.TSISTAT = "RC"; /* move status*/
        else
          TSIREC.TSISTAT = TS0VW03.TSISTAT[sysVar.arrayIndex]; /* move status*/
        end

      end /* ===> Custom-clear status?*/

    end /* ===> Error status set?*/

  end /* ===> Find position of pl*/


   /* ------------------------------------------------------------*/
   /* Check the error table for current color*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWHEX = 1;

  while (TS0VW01.TS0VWHEX <= 40)

    if (TSIREC.SY2CLRID == TS0VW13.SY2CLRID[TS0VWHEX])
                                   /* ===>color in error table*/

      TSIREC.TSISTAT = "ER";
      TSIREC.XRECD = TS0VW13.XRECD[TS0VWHEX];

      return; /* ===> Return to previous process*/

    else
      /* ============ NEXT SENTENCE ============>*/
    end

    TS0VW01.TS0VWHEX = TS0VW01.TS0VWHEX + 1;

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63522 ********************/
end // end TS0V-63522

// Add the factory invoice number
Function TS0V-63530()
   /* ------------------------------------------------------------*/

                /* ADD THE FACTORY INVOICE NUMBER*/

      /* 1) Select the invoice to see if it exists*/
      /* 2) If it does not, then add it.*/

   /* ------------------------------------------------------------*/

  TSPREC.XGPCD = TSWREC.XGPCD; /* move in KEYS*/
  TSPREC.FY1FCTYC = TS0VM001.FY1FCTYC;
  TSPREC.TSPFCIVC = TS0VM001.TSPFCIVC;

  call "IO2600" ("S ", SQLCA, TSPREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 100) /* If the invoice does not exist*/

    /* ------------------------------------------------------------*/
     /* Add the invoice number*/
    /* ------------------------------------------------------------*/

    TSPREC.XGPCD = TSWREC.XGPCD; /* move in KEYS*/
    TSPREC.FY1FCTYC = TS0VM001.FY1FCTYC;
    TSPREC.TSPFILE = TS0VM001.TSPFILE;
    TSPREC.TSPNBRNX = TS0VM001.TSPFILE;
    TSPREC.TSPFCIVC = TS0VM001.TSPFCIVC;

    TSPREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move in set up date*/
    TSPREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
    TSPREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
    TSPREC.ZZZCHGCT = 0; /* initialize change count*/


    call "IO2600" ("A ", SQLCA, TSPREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

    if (SQLCA.VAGen_SQLCODE == 0) /* return code ok*/

      /* ========== NEXT SENTENCE ============>*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-63530"; /* Process name*/
      TA1REC.TA1LOC = "ADD A TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFIVC001"; /* Table view name*/
      TA1REC.TA1TBLKE = TSPREC.TSPKEY; /* Table key*/
      TS0VM001.XXXPRCNM = "V-63530"; /* ===> map process name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/


      exit stack;

    end

  else

    if (SQLCA.VAGen_SQLCODE != 0) /* if other than a valid code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-63530"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFIVC001"; /* Table view name*/
      TA1REC.TA1TBLKE = TSPREC.TSPKEY; /* Table key*/
      TS0VM001.XXXPRCNM = "V-63530"; /* ===> map process name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/


      exit stack;

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-63530 ********************/
end // end TS0V-63530

// Process the TS2850 update
Function TS0V-63600()
   /* ------------------------------------------------------------*/

                    /* PERFORM UPDATES FOR CPLHD01*/

     /* 1) This process will take all the changes/adds*/
        /* which were made on the current map and update the*/
        /* database with them.*/

   /* ------------------------------------------------------------*/
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;

  VCPLHD04.PC-XCT-ORIG-CD = TS0VM001.PC-XCT-ORIG-CD;
  VCPLHD04.TS-NIKE-SHP-ID = TS0VM001.TSFSHPID;
  VCPLHD04.XGP-GPC-CD = TS0VM001.XGPCD;
  VCPLHD04.PC-PO-NBR = TS0VM001.TS0VMPO;

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "TS2850" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/

    /* ============ NEXT SENTENCE ============>*/

  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-63600"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-63600"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack;


  end

end // end TS0V-63600

// ---> Delete P.L. & detail
Function TS0V-64000()
   /* -----------------------------------------------------------*/
   /*  */
   /* DELETE THE PACKING LIST AND DETAIL*/
   /*  */
   /* 1) Cycle through all the entries in the gpc-cpl array.*/
   /* - If the packing list contains detail*/
   /* delete all cartons.*/
   /* - Then delete the packing list.*/
   /*  */
   /* 2) Clean up any containers which are not associated with*/
   /* any other packing lists on this shipment.*/
   /* - Record all the unique container numbers from the*/
   /* deleted packing lists.*/
   /* - Select the set of packing lists that are associated*/
   /* with each container.  If there are no packing lists*/
   /* associated with the container, then delete the*/
   /* container.*/
   /*  */
   /* ------------------------------------------------------------*/

   /* -----------------------------------------------------------*/
   /* Delete the detail and the cpl header for each entry in*/
   /* the gpc-cpl array.*/
   /* -----------------------------------------------------------*/

  TS0VW01.TS0VWCTA = 0; /* Clear container save array 1-8*/
  TS0VW01.TS0VWIX1 = 1; /* Set index*/

  while (TS0VW01.TS0VWIX1 <= TS0VW01.TS0VWMGC /* Until end of array*/
   && TS0VW03.TSIPLNBR[TS0VWIX1] > 0) /* and data exists*/

    TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
    TSIREC.TSIPLNBR = TS0VW03.TSIPLNBR[TS0VWIX1];

    TS0V-02510(); /* Select the cplhd*/

    if (SQLCA.VAGen_SQLCODE == 0)

      TS0V-64100(); /* ===> record containers*/

      /* -------------------------------------------------*/
        /* If the packing list contains detail*/
      /* -------------------------------------------------*/

      if (TSIREC.TSIDETFL == "Y") /* If the cplhd has detail*/

        /* ------------------------------------------------------------*/
          /* Delete the carton detail for the Nike Plan NBR*/
        /* ------------------------------------------------------------*/

        TSOREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
        TSOREC.TSIPLNBR = TS0VW03.TSIPLNBR[TS0VWIX1];
        TSOREC.TSHNKCN = -1;
        TSOREC.TSOFRCRT = -1;
        TSOREC.SY5SZID = -1;

        TS0V-63310(); /* ===> Delete (DS) Set VCPLIT01*/
        /* -----------------------------------------------------------*/
        /* Delete the barcodes from VPLAUX for the Nike Plan NBR*/
        /* -----------------------------------------------------------*/
        TS0V-63320(); /* ===> Delete (D1) Set VPLAUX01*/

      end

    end
    /* **************** TCS changes begins here *********************/

    /* call TS4200 to take backup before deleting VCPLHD01 rows*/

    set WTS4201 empty;
    WTS4201.TS4201-DELETE-TYP = "D2";
    TS0V-64010(); /* call TS4200 to take backup*/

    /* **************** TCS changes ends   here *********************/

    TS0V-64200(); /* ===> Delete the VCPLHD01*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* Incr gpc-cpl index*/

  end

   /* -------------------------------------------------*/
    /* Clean-up remaining containers*/
   /* -------------------------------------------------*/

  TS0V-64300(); /* ===> Clean-up remaining container*/


   /* -------------------------------------------------*/
   /* Commit all D.B. updates/deletes*/
   /* -------------------------------------------------*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* ===> commit all D.B. updates &*/
                                   /* deletes*/

   /* **                                                        ***/
   /* ********************** End of TS0V-64000 ********************/
end // end TS0V-64000

// Backup before deletion
Function TS0V-64010()
   /* ------------------------------------------------------------*/

   /* This PROC will take a backup of the rows to be deleted from*/
   /* either packing list or container tables.*/

   /* ------------------------------------------------------------*/

   /* **************** TCS changes begins here *********************/

  if (WTS4201.TS4201-DELETE-TYP == "D2")
    WTS4201.TS4201-NIKE-SHP-ID = TSIREC.TSFSHPID;
    WTS4201.TS4201-NIKE-PL-NBR = TSIREC.TSIPLNBR;
    call "TS4200" (WTS4201) {isNoRefresh = yes, isExternal = yes}; /* Take backup before deletion*/
  else
    if (WTS4201.TS4201-DELETE-TYP == "D3")
      WTS4201.TS4201-NIKE-SHP-ID = TSWREC.TSFSHPID;
      WTS4201.TS4201-NIKE-CNTNR-NBR = TS0VW01.TS0VWCNT[TS0VWIX1];
      call "TS4200" (WTS4201) {isNoRefresh = yes, isExternal = yes}; /* Take backup before deletion*/
    end
  end

  if (WTS4201.TS4201-RETURN-CODE == "00") /* if good return code*/
    if (WTS4201.TS4201-SQLCODE == 0 /* if normal*/
     || WTS4201.TS4201-SQLCODE == 100) /* if no row found*/
       /* ========== NEXT SENTENCE =======>*/
    end
  else

    if (WTS4201.TS4201-SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    if (WTS4201.TS4201-RETURN-CODE == "01")
      converseLib.validationFailed(01);
    end

    if (WTS4201.TS4201-RETURN-CODE == "02")
      converseLib.validationFailed(02);
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-64010"; /* Process name*/
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    if (WTS4201.TS4201-DELETE-TYP == "D2")
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
      TA1REC.TA1LOC = "TS0V-64000 CALL TS4200";
    else
      if (WTS4201.TS4201-DELETE-TYP == "D3")
        TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
        TA1REC.TA1LOC = "TS0V-64300 CALL TS4200";
      end
    end


    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-64010"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display the map*/

  end

   /* ***************** TCS changes end here  **********************/
   /* ***                                                        ***/
   /* *********************** End of TS0V-64210 ********************/
end // end TS0V-64010

// Record containers to process
Function TS0V-64100()
   /* -------------------------------------------------*/
    /* Record the containers associated with the*/
    /* current gpc-cpl packing list.*/
   /* -------------------------------------------------*/

   /* ===> P.L. container #1*/
       /* -----------------*/

  if (TSIREC.TSHNKCN1 > 0) /* ===> container exist*/

    TS0VW01.TSHNKCN = TSIREC.TSHNKCN1; /* ===> Save container w.s.*/

    TS0V-64110(); /* ===> Save the container*/

  end


   /* ===> P.L. container #2*/
       /* -----------------*/

  if (TSIREC.TSHNKCN2 > 0) /* ===> container exist*/

    TS0VW01.TSHNKCN = TSIREC.TSHNKCN2; /* ===> Save container w.s.*/

    TS0V-64110(); /* ===> Save the container*/

  end


   /* ===> P.L. container #3*/
       /* -----------------*/

  if (TSIREC.TSHNKCN3 > 0) /* ===> container exist*/

    TS0VW01.TSHNKCN = TSIREC.TSHNKCN3; /* ===> Save container w.s.*/

    TS0V-64110(); /* ===> Save the container*/

  end


   /* ===> P.L. container #4*/
       /* -----------------*/

  if (TSIREC.TSHNKCN4 > 0) /* ===> container exist*/

    TS0VW01.TSHNKCN = TSIREC.TSHNKCN4; /* ===> Save container w.s.*/

    TS0V-64110(); /* ===> Save the container*/

  end


   /* ===> P.L. container #5*/
       /* -----------------*/

  if (TSIREC.TSHNKCN5 > 0) /* ===> container exist*/

    TS0VW01.TSHNKCN = TSIREC.TSHNKCN5; /* ===> Save container w.s.*/

    TS0V-64110(); /* ===> Save the container*/

  end


   /* ===> P.L. container #6*/
       /* -----------------*/

  if (TSIREC.TSHNKCN6 > 0) /* ===> container exist*/

    TS0VW01.TSHNKCN = TSIREC.TSHNKCN6; /* ===> Save container w.s.*/

    TS0V-64110(); /* ===> Save the container*/

  end


   /* ===> P.L. container #7*/
       /* -----------------*/

  if (TSIREC.TSHNKCN7 > 0) /* ===> container exist*/

    TS0VW01.TSHNKCN = TSIREC.TSHNKCN7; /* ===> Save container w.s.*/

    TS0V-64110(); /* ===> Save the container*/

  end


   /* ===> P.L. container #8*/
       /* -----------------*/

  if (TSIREC.TSHNKCN8 > 0) /* ===> container exist*/

    TS0VW01.TSHNKCN = TSIREC.TSHNKCN8; /* ===> Save container w.s.*/

    TS0V-64110(); /* ===> Save the container*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-64100 ********************/
end // end TS0V-64100

// Save the nike container nbr
Function TS0V-64110()
   /* ------------------------------------------------------------*/
    /* Save the containers associated with the*/
    /* gpc-cpl packing lists.*/
       /* - check to see if nike container has been saved already*/
   /* ------------------------------------------------------------*/

  TS0VW01.TS0VWIX3 = 1; /* set index*/

  while (TS0VW01.TS0VWIX3 <= 8) /* Until end of array*/

    if (TS0VW01.TSHNKCN == TS0VW01.TS0VWCNT[TS0VWIX3])

      return; /* ===> Return to previous process*/

    else

      if (TS0VW01.TS0VWCNT[TS0VWIX3] == 0) /* If no cntnr entered*/

        TS0VW01.TS0VWCNT[TS0VWIX3] = TS0VW01.TSHNKCN;
        return; /* ===> Return to previous process*/

      end

    end

    TS0VW01.TS0VWIX3 = TS0VW01.TS0VWIX3 + 1; /* incr loop*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-64110 ********************/
end // end TS0V-64110

// Delete (D ) row       VCPLHD04
Function TS0V-64200()
   /* ------------------------------------------------------------*/

                 /* DELETE THE PACKING LIST ROW*/

    /* 1) Delete the container packing list row*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TSIREC.TSFSHPID;
  VCPLHD04.TS-NIKE-PL-NBR = TSIREC.TSIPLNBR;

  TSGREC.TSNFNC = "D "; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* ========== NEXT SENTENCE =======>*/
  else

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-64200"; /* Process name*/
    TA1REC.TA1LOC = "DELETE TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-64200"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display the map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-64200 ********************/
end // end TS0V-64200

// Delete containers w/o P.L.s
Function TS0V-64300()
   /* ----------------------------------------------------------*/
   /* Cleanup all containers which are not associated with any*/
   /* other packing lists.*/
   /* (** use previously built container array from above)*/
   /* -----------------------------------------------------------*/

  TS0VW01.TS0VWIX1 = 1; /* ===> Set the index*/

  while (TS0VW01.TS0VWIX1 <= 8 /* ===> Until end of array*/
   && TS0VW01.TS0VWCNT[TS0VWIX1] > 0) /* ===> and data exists*/

    TS0V-64310(); /* ===> Select set of packing lists*/

    TS0V-64320(); /* ===> Fetch a packing list row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* ===> If no row found*/

    /* **************** TCS changes begins here *********************/

    /* Call TS4200 to take backup before deleting VCNTNR01 rows*/

      set WTS4201 empty;
      WTS4201.TS4201-DELETE-TYP = "D3";
      TS0V-64010(); /* call TS4200 to take backup*/

    /* **************** TCS changes ends   here *********************/


      TS0V-64330(); /* ===> Delete the cntnr*/

    end

    TS0V-64340(); /* ===> Close the selected set*/

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* ===> Incr index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-64300 ********************/
end // end TS0V-64300

// Select (S3) set       VCPLHD04
Function TS0V-64310()
   /* ------------------------------------------------------------*/
   /*  */
   /* SELECT SET AND OPEN CURSOR VCPLHD01*/
   /*  */
   /* 1) If unexpected return code:*/
   /* a. call error diagnosis routine.*/
   /* b. indicate system error.*/
   /*  */
   /* ------------------------------------------------------------*/

  TSIREC.TSHNKCN1 = TS0VW01.TS0VWCNT[TS0VWIX1]; /* put cntnr # in 1-8*/
  TSIREC.TSHNKCN2 = TS0VW01.TS0VWCNT[TS0VWIX1];
  TSIREC.TSHNKCN3 = TS0VW01.TS0VWCNT[TS0VWIX1];
  TSIREC.TSHNKCN4 = TS0VW01.TS0VWCNT[TS0VWIX1];
  TSIREC.TSHNKCN5 = TS0VW01.TS0VWCNT[TS0VWIX1];
  TSIREC.TSHNKCN6 = TS0VW01.TS0VWCNT[TS0VWIX1];
  TSIREC.TSHNKCN7 = TS0VW01.TS0VWCNT[TS0VWIX1];
  TSIREC.TSHNKCN8 = TS0VW01.TS0VWCNT[TS0VWIX1];
  TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* shipment id*/
  TSIREC.PC3PONBR = -1; /* default po number*/
  TS0VW14.TSIREC-WORK-AREA = TSIREC.TSIGROUP;
  TS0VW14.VCPLHD04-FIXED-1 = TS0VW14.TSIREC-FIXED-1;
  TS0VW14.VCPLHD04-FIXED-2 = TS0VW14.TSIREC-FIXED-2;
  TS0VW14.VCPLHD04-FIXED-3 = TS0VW14.TSIREC-FIXED-3;
  TS0VW14.PC-ITM-SEQ-NBR = VCPLHD04.PC-ITM-SEQ-NBR;
  TS0VW14.TS-SHP-LEG-NBR = VCPLHD04.TS-SHP-LEG-NBR;
  TS0VW14.PC-XCT-ORIG-CD = VCPLHD04.PC-XCT-ORIG-CD;
  VCPLHD04.VCPLHD04-GRP = TS0VW14.VCPLHD04-WORK-AREA;

  TSGREC.TSNFNC = "S3"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-64310"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-64310"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-64310 ********************/
end // end TS0V-64310

// Fetch  (N3) next row  VCPLHD04
Function TS0V-64320()
   /* ------------------------------------------------------------*/
   /*  */
   /* FETCH ROW VCPLHD01*/
   /*  */
   /* 1) If no row found then continue.*/
   /* 2) If unexpected return code:*/
   /* a. call error diagnosis routine.*/
   /* b. indicate system error.*/
   /*  */
   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N3"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Valid return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    if (SQLCA.VAGen_SQLCODE == 0)
      TS0VW14.VCPLHD04-WORK-AREA = VCPLHD04.VCPLHD04-GRP;
      TS0VW14.TSIREC-FIXED-1 = TS0VW14.VCPLHD04-FIXED-1;
      TS0VW14.TSIREC-FIXED-2 = TS0VW14.VCPLHD04-FIXED-2;
      TS0VW14.TSIREC-FIXED-3 = TS0VW14.VCPLHD04-FIXED-3;
      TSIREC.TSIGROUP = TS0VW14.TSIREC-WORK-AREA;
    end
  else

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "V-64320"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-64320"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-64320 ********************/
end // end TS0V-64320

// Delete (D ) row       VCNTNR01
Function TS0V-64330()
   /* ------------------------------------------------------------*/
   /*  */
   /* DELETE THE CONTAINER PACKING LIST ROW*/
   /*  */
   /* Delete the table row.*/
   /*  */
   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
  TSHREC.TSHNKCN = TS0VW01.TS0VWCNT[TS0VWIX1];

  call "IO2590" ("D ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
    /* ========== Next Sentence ==========>*/
  else

    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "V-64330"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0VM001.XXXPRCNM = "V-64330"; /* Process name*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/

      exit stack; /* ===> Exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0V-64330 ********************/
end // end TS0V-64330

// Close  (C3) set       VCPLHD04
Function TS0V-64340()
   /* ------------------------------------------------------------*/
   /*  */
   /* CLOSE SELECTED SET CURSOR VCPLHD04*/
   /*  */
   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
   /* a. call error diagnosis routine.*/
   /* b. indicate system error.*/
   /*  */
   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C3"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "V-64340"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0VM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0VM001.XXXPRCNM = "V-64340"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0V-64340 ********************/
end // end TS0V-64340

// Load gpc-cpl and set switches
Function TS0V-65000()
   /* ------------------------------------------------------------*/
   /*  */
   /* LOAD GPC-CPL ARRAY AND SET REQUEST FOR DATA SWITCH*/
   /*  */
   /* ------------------------------------------------------------*/
   /*  */
   /* --------------------------------------------------*/
   /* Reset working storages.*/
   /* --------------------------------------------------*/
  set TS0VW03 empty; /* clear gpc-cpl array*/
  set TS0VW04 empty; /* clear screen 1 ws*/

   /* --------------------------------------------------*/
   /* Load next set of gpc-cpl array entries*/
   /* --------------------------------------------------*/

  TS0VW01.TS0VWSIX = TS0VW01.TS0VWCPX; /* save cpx index*/
  TS0VW01.TS0VWGCX = 1; /* set up gpc-cpl index*/
  TS0VW01.TS0VWGCT = 0; /* initialize gpc-cpl ctn total*/
  TS0VW01.TS0VWGST = 0; /* initialize gpc-cpl ship total*/
  TS0VW01.PC3PONBR = TS0VW02.PC3PONBR[TS0VWCPX];
  TS0VW01.PC2CUXID = TS0VW02.PC2CUXID[TS0VWCPX];
  TS0VW01.SY1STNBR = TS0VW02.SY1STNBR[TS0VWCPX];
  TS0VW01.SY2CLRID = TS0VW02.SY2CLRID[TS0VWCPX];
  TS0VW01.XDMCD = TS0VW02.XDMCD[TS0VWCPX];
  TS0VW01.PC2INSEG = TS0VW02.PC2INSEG[TS0VWCPX];
  TS0VW01.XQACD = TS0VW02.XQACD[TS0VWCPX];
  TS0VW01.XPGCD = TS0VW02.XPGCD[TS0VWCPX];
  TS0VW01.XUMCD = TS0VW02.XUMCD[TS0VWCPX];
  TS0VW01.XOWCD = TS0VW02.XOWCD[TS0VWCPX];
  TS0VW01.OP1CUOID = TS0VW02.OP1CUOID[TS0VWCPX];
  TS0VW01.OP1NORID = TS0VW02.OP1NORID[TS0VWCPX];

  if (TSWREC.XGPCD == "03"
  )
    while (TS0VW02.PC3PONBR[TS0VWCPX] == TS0VW01.PC3PONBR
     && TS0VW02.PC2CUXID[TS0VWCPX] == TS0VW01.PC2CUXID
     && TS0VW02.SY1STNBR[TS0VWCPX] == TS0VW01.SY1STNBR
     && TS0VW02.SY2CLRID[TS0VWCPX] == TS0VW01.SY2CLRID
     && TS0VW02.XDMCD[TS0VWCPX] == TS0VW01.XDMCD
     && TS0VW02.PC2INSEG[TS0VWCPX] == TS0VW01.PC2INSEG
     && TS0VW02.XQACD[TS0VWCPX] == TS0VW01.XQACD
     && TS0VW02.XPGCD[TS0VWCPX] == TS0VW01.XPGCD
     && TS0VW02.XUMCD[TS0VWCPX] == TS0VW01.XUMCD
     && TS0VW02.XOWCD[TS0VWCPX] == TS0VW01.XOWCD
     && TS0VW02.OP1CUOID[TS0VWCPX] == TS0VW01.OP1CUOID
     && TS0VW02.OP1NORID[TS0VWCPX] == TS0VW01.OP1NORID)


      TS0V-02500(); /* ===> move data into gpc-cpl array*/


       /* ------------------------------------------------------------*/
      /* Get all po on order qtys*/
       /* ------------------------------------------------------------*/

      move 0 to TS0VW01.TS0VWPSX[1] for all; /* Initialize array*/
      TS0VW03.TS0VWPSA[TS0VWGCX] = TS0VW01.TS0VWPSA;

      TS0V-02600(); /* ===> Obtain all po on order qtys*/


       /* ------------------------------------------------------------*/
      /* Get all receipt qtys*/
       /* ------------------------------------------------------------*/

      move 0 to TS0VW01.TS0VWRSX[1] for all; /* Initialize array*/
      TS0VW03.TS0VWRSA[TS0VWGCX] = TS0VW01.TS0VWRSA;

      TS0V-02700(); /* ===> Obtain all receipt qtys*/


       /* ------------------------------------------------------------*/
      /* Get all shipped qtys*/
       /* ------------------------------------------------------------*/

      move 0 to TS0VW01.TS0VWSSX[1] for all; /* Initialize array*/
      TS0VW03.TS0VWSSA[TS0VWGCX] = TS0VW01.TS0VWSSA;

      TS0V-02800(); /* ===> Obtain all shipped qtys*/

      TS0VW01.TS0VWGCX = TS0VW01.TS0VWGCX + 1;
      TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1;

    end
  else
    while (TS0VW02.PC3PONBR[TS0VWCPX] == TS0VW01.PC3PONBR
     && TS0VW02.PC2CUXID[TS0VWCPX] == TS0VW01.PC2CUXID
     && TS0VW02.SY1STNBR[TS0VWCPX] == TS0VW01.SY1STNBR
     && TS0VW02.SY2CLRID[TS0VWCPX] == TS0VW01.SY2CLRID
     && TS0VW02.XDMCD[TS0VWCPX] == TS0VW01.XDMCD
     && TS0VW02.PC2INSEG[TS0VWCPX] == TS0VW01.PC2INSEG
     && TS0VW02.XQACD[TS0VWCPX] == TS0VW01.XQACD
     && TS0VW02.XPGCD[TS0VWCPX] == TS0VW01.XPGCD
     && TS0VW02.XUMCD[TS0VWCPX] == TS0VW01.XUMCD
     && TS0VW02.XOWCD[TS0VWCPX] == TS0VW01.XOWCD
     && TS0VW02.OP1CUOID[TS0VWCPX] == TS0VW01.OP1CUOID
     && TS0VW02.OP1NORID[TS0VWCPX] == TS0VW01.OP1NORID)


      TS0V-02500(); /* ===> move data into gpc-cpl array*/


       /* ------------------------------------------------------------*/
          /* Get on order quantities from either the Order System*/
          /* of the Production Order System.*/
       /* ------------------------------------------------------------*/

      if (TS0VW02.PC3PONBR[TS0VWCPX] == 0
       && TS0VW02.XQACD[TS0VWCPX] == "02"
       && TS0VW02.OP1CUOID[TS0VWCPX] > 0
       && TS0VW02.OP1NORID[TS0VWCPX] > 0)

       /* ------------------------------------------------------------*/
          /* Get S.O. Data (B-grade shipment 2nd leg)*/
          /* (ie. Warehouse 15 to a customer)*/
       /* ------------------------------------------------------------*/

        TS0VW03.TS0VWPSQ[TS0VWGCX] = 0; /* ===> Initialize total qty*/
        move 0 to TS0VW01.TS0VWPSX[1] for all; /* ===> Initialize array*/
        TS0VW03.TS0VWPSA[TS0VWGCX] = TS0VW01.TS0VWPSA;

        TS0V-02550(); /* ===> Obtain all SO on order qtys for*/
                                   /* this item*/

      else


       /* ------------------------------------------------------------*/
       /* Get all po on order qtys*/
       /* ------------------------------------------------------------*/

        move 0 to TS0VW01.TS0VWPSX[1] for all; /* Initialize array*/
        TS0VW03.TS0VWPSA[TS0VWGCX] = TS0VW01.TS0VWPSA;

        TS0V-02600(); /* ===> Obtain all po on order qtys*/

      end
       /* ------------------------------------------------------------*/
      /* Get all receipt qtys*/
       /* ------------------------------------------------------------*/

      move 0 to TS0VW01.TS0VWRSX[1] for all; /* Initialize array*/
      TS0VW03.TS0VWRSA[TS0VWGCX] = TS0VW01.TS0VWRSA;

      TS0V-02700(); /* ===> Obtain all receipt qtys*/


       /* ------------------------------------------------------------*/
      /* Get all shipped qtys*/
       /* ------------------------------------------------------------*/

      move 0 to TS0VW01.TS0VWSSX[1] for all; /* Initialize array*/
      TS0VW03.TS0VWSSA[TS0VWGCX] = TS0VW01.TS0VWSSA;

      TS0V-02800(); /* ===> Obtain all shipped qtys*/


      TS0VW01.TS0VWGCX = TS0VW01.TS0VWGCX + 1;
      TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX + 1;

    end
  end

  TS0VW01.TS0VWCPX = TS0VW01.TS0VWCPX - 1; /* decr cpl index*/

  TS0VW01.TS0VWGCX = 1; /* reset gpc-cpl index*/

  TS0VW01.TS0VWSWR = "Y"; /* ===> set request for data switch*/

   /* ===> init enterable map fields*/

  TS0VW01.TSPFCIVC = TS0VW03.TSPFCIVC[1];
  TS0VW01.TSPFILE = TS0VW03.TSPFILE[1];
  TS0VW01.TSILOCR = TS0VW03.TSILOCR[1];
  TS0VW01.TSIMSCFL = TS0VW03.TSIMSCFL[1];
  TS0VW01.TSIMSCGR = TS0VW03.TSIMSCGR[1];
  TS0VW01.TSRTEXT = TS0VW03.TSRTEXT[1];
  TS0VW01.PC-XCT-ORIG-CD = TS0VW03.PC-XCT-ORIG-CD[1];


   /* **                                                        ***/
   /* ********************** End of TS0V-65000 ********************/
end // end TS0V-65000

// Transfer if delete occurred
Function TS0V-66000()
   /* ------------------------------------------------------------*/

            /* TRANSFER IF A DELETE HAS OCCURRED*/

   /* If a delete has occurred, then do not continue to*/
     /* container assignment screen. Instead, determine from*/
     /* where the application was initiated and DXFR back to*/
     /* that point.*/

   /* --------------------------------------------------------*/
  if (TSWREC.TSWFRAPP == "TS0P") /* If from TS0P*/
    COMMAREA.CATOAP = "TS0P"; /* Set to TS0P*/
  else
    if (COMMAREA.CAFROMAP == "TS01") /* If from TS01*/
      COMMAREA.CATOAP = "TS01"; /* Set to TS01*/
      TSWREC.TSWFRAPP = " ";
    else
      if (COMMAREA.CAFROMAP == "TS0Y") /* If from TS0Y*/
        COMMAREA.CATOAP = "TS0Y"; /* Set to TS0Y*/
      else
        if (COMMAREA.CAFROMAP == "TS0J") /* If from TS0J*/
          COMMAREA.CATOAP = "TS0J"; /* Set to TS0J*/
        end
      end
    end
  end

  COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

  XSTSS01(); /* transfer to application*/

  TS0VM001.XXXPRCNM = "V-66000";

  exit stack;


   /* **                                                        ***/
   /* ********************** End of TS0V-66000 ********************/
end // end TS0V-66000

// Continue to container assign
Function TS0V-67000()
   /* ------------------------------------------------------------*/
   /*  */
   /* CONTINUE TO CONTAINER ASSIGNMENT*/
   /*  */
   /* --------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0U"
   && TS0VW01.TS0VWCCT == 1) /* ===> container count total*/

    COMMAREA.CATOAP = "TS0I"; /* ===> Set to TS0I*/

  else
    COMMAREA.CATOAP = "TS02"; /* ===> Set to TS02*/

    if (COMMAREA.CAFROMAP != "TS02")
      TSWREC.TSWFRAPP = COMMAREA.CAFROMAP; /* Save from app for ts02*/
    end

  end

  COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

  TS0VS-TS-1(); /* ===> Purge temp storage*/

  XSTSS01(); /* transfer to application*/

  TS0VM001.XXXPRCNM = "V-67000";

  exit stack;


   /* **                                                        ***/
   /* ********************** End of TS0V-67000 ********************/
end // end TS0V-67000

Function TS0V-68000()
   /* ------------------------------------------------------------*/
   /*  */
   /* submit job to create needed DTRANS.VPLAUX01 ROWS*/
   /*  */
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /*  */
   /* determine environment, test or production, so correct*/
   /* JCL can be submitted*/
   /*  */
   /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "ASSIGN ";
  call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};

  if (sysVar.errorCode == "00000000"
   && TA3REC.TA3RTNCD == 0) /* Good return code*/

     /* next sentence*/

  else

    converseLib.validationFailed(87); /* Error with print request*/
    exit stack;
  end

  if (TA3REC.TA3RGNID == "03") /* prod environment*/
    TS0VS-68100(); /* format prod batch sub*/
  else
    TS0VS-68200(); /* format test batch sub*/
  end

  return;
end // end TS0V-68000

// check if equipment product
Function TS0VS-21100()
   /* --------------------- TS0VS-21100     ---------------------------*/

   /* Determine whether or not this is an Equipment product*/

  set WEU0100 empty; /* initialize the passing record*/
  set SQLCA empty; /* initialize sqlca record*/

  WEU0100.WEU0100-EQUIP-PROD-FL = "N";
  TS0VW01.TS0VW-EQMT-FL = "N";
  WEU0100.WEU0100-CALLING-APPL = "TS0V";
  WEU0100.SQLCAREC = SQLCA.SQLCAREC;

  WEU0100.XGPCD = TSWREC.XGPCD;
  WEU0100.SY1STNBR = TS0VW03.SY1STNBR[1];
  WEU0100.SY2CLRID = TS0VW03.SY2CLRID[1];
  WEU0100.XDMCD = TS0VW03.XDMCD[1];

  if (TS0VW03.SY2CLRID[1] != " ")
    if (TS0VW03.XDMCD[1] == " ")
      WEU0100.XDMCD = "00";
    end
  end

  TS0VS-21110(); /* select unique*/

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* good return*/
    if (WEU0100.WEU0100-EQUIP-PROD-FL == "Y") /* if equipment product*/
      TS0VW01.TS0VW-EQMT-FL = "Y";
    end
  end

end // end TS0VS-21100

// EU0100 select unique
Function TS0VS-21110()
   /* ------------------- TS0VS-21110    --------------------------*/

  WEU0100.WEU0100-TASK = "SU";
  WEU0100.WEU0100-CALLER-LOCATION = "TS0V-EU0100-SU";

  try
    call "EU0100" (WEU0100) {isNoRefresh = yes, isExternal = yes};
  end /* select unique*/

  SQLCA.SQLCAREC = WEU0100.SQLCAREC;

  if (WEU0100.WEU0100-RETURN-CODE == 0) /* call successful*/
    return; /* return to av0as-check-eqmt*/
  end

  TA1REC.TA1MAP = WEU0100.WEU0100-RETURN-CODE; /* CSP return cd*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (WEU0100.WEU0100-RETURN-CODE == 8) /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
  end

  TA1REC.TA1TYPE = "DB2"; /* type of error*/
  TA1REC.TA1LOC = "TS0V-EU0100-SU "; /* program location*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "EU0100"; /* called program*/
  TA1REC.TA1DBASE = "DEQUIP"; /* database name*/
  TA1REC.TA1TBLVU = "VEQPRD01"; /* table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  TS0VM001.XXXPRCNM = "V-02620"; /* Process name*/
  exit stack;
   /* ------------------- TS0V-EU0100-SU --------------------------*/
end // end TS0VS-21110

// Submit prod bar code job
Function TS0VS-68100()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize input  JCL table index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TS0VTP2.TARJCL[TA6INDEX] != "/*EOF") /* Not end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

   /* VGOTTI CHANGE BEGIN*/
    if (TS0VTP2.TARTYPE[TA6INDEX] == "P")
      TS0VW27.TS4SHPID = TS0VM001.TSFSHPID;
      TS0VW27.TS4COMMA = ",";
      TS0VW27.TS4PLNBR = VPLAUX01.TS-NIKE-PL-NBR;
      TS0VW27.TS4COMMA1 = ",";
      TS0VW27.FY-FCTY-MFG-CD = TS0VM001.FY-FCTY-MFG-CD;
      TS0VW27.MFG-CD-GPC03 = TS0VM001.MFG-CD-GPC03;
      TS0VW27.TS4FILL = " ";
      TA6REC.TARJCL[TA6INDEX] = TS0VW27.TS4PARM; /* PARM*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0VTP2.TARJCL[TA6INDEX]; /* JCL*/
    end

    TA6REC.TARTYPE[TA6INDEX] = TS0VTP2.TARTYPE[TA6INDEX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment input table index*/

  end
   /* VGOTTI CHANGE ENDS*/

  TA6REC.TARJCL[TA6INDEX] = TS0VTP2.TARJCL[TA6INDEX]; /* JCL*/
  TA6REC.TARTYPE[TA6INDEX] = TS0VTP2.TARTYPE[TA6INDEX]; /* Type*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.XURDEST = "RMT999"; /* Default to handle TA0P problems*/
  TA6REC.TA6SUBSW = "S"; /* Submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* CICS job completed message*/

  XPTA0P(); /* Batch Request Subroutine*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0VM001.XXXPRCNM = "V-68100"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(440); /* Job was submitted*/
    set TS0VM001.FY-FCTY-MFG-CD protect;
  /* gramac change begins*/
  /* SET TS0VM001.MFG-CD-GPC03 PROTECT;*/
    set TS0VM001.MFG-CD-GPC03 initialAttributes;
  /* gramac change ends*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback tspgm commit cnt*/
  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0VS-68100

// Submit test bar code job
Function TS0VS-68200()
   /* ------------------------------------------------------------*/
   /* Initialize the work areas and indexes to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize input  JCL table index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TS0VT02.TARJCL[TA6INDEX] != "/*EOF") /* Not end of table*/

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    if (TS0VT02.TARTYPE[TA6INDEX] == "P")
      TS0VW27.TS4SHPID = TS0VM001.TSFSHPID;
      TS0VW27.TS4COMMA = ",";
      TS0VW27.TS4PLNBR = VPLAUX01.TS-NIKE-PL-NBR;
      TS0VW27.TS4COMMA1 = ",";
      TS0VW27.FY-FCTY-MFG-CD = TS0VM001.FY-FCTY-MFG-CD;
      TS0VW27.MFG-CD-GPC03 = TS0VM001.MFG-CD-GPC03;
      TS0VW27.TS4FILL = " ";
      TA6REC.TARJCL[TA6INDEX] = TS0VW27.TS4PARM; /* PARM*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0VT02.TARJCL[TA6INDEX]; /* JCL*/
    end

    TA6REC.TARTYPE[TA6INDEX] = TS0VT02.TARTYPE[TA6INDEX]; /* Type*/
    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment input table index*/

  end

  TA6REC.TARJCL[TA6INDEX] = TS0VT02.TARJCL[TA6INDEX]; /* JCL*/
  TA6REC.TARTYPE[TA6INDEX] = TS0VT02.TARTYPE[TA6INDEX]; /* Type*/

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.XURDEST = "RMT999"; /* Default to handle TA0P problems*/
  TA6REC.TA6SUBSW = "S"; /* Submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* CICS job completed message*/

  XPTA0P(); /* Batch Request Subroutine*/

   /* ------------------------------------------------------------*/
   /* If a successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TS0VM001.XXXPRCNM = "V-68200"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(440); /* Job was submitted*/
    set TS0VM001.FY-FCTY-MFG-CD protect;
  /* gramac begins*/
  /* SET TS0VM001.MFG-CD-GPC03 PROTECT;*/
    set TS0VM001.MFG-CD-GPC03 initialAttributes;
  /* gramac ends*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback tspgm commit cnt*/
  converseLib.validationFailed(10); /* Indicate system error*/

  exit stack; /* Exit to display map*/


end // end TS0VS-68200

// Purge any temp. storage pages
Function TS0VS-TS-1()
   /* ------------------------------------------------------------*/
   /* If the last function was purge, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5FNCCD == "P") /* Last function was purge*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TS0VW04 empty; /* Map 1 display storage record*/

  TS0VW01.TS0VWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  TS0VW01.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TS0VW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS0VM001.XXXPRCNM = "VS-TS-1"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TS0VM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/

  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of TS0VS-TS-1 ********************/
end // end TS0VS-TS-1

// Obtain temporary storage page
Function TS0VS-TS-2()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS0VW04.XXXTSLEN = TS0VW01.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = TS0VW01.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS0VW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS0VM001.XXXPRCNM = "VS-TS-2"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = TS0VM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End of TS0VS-TS-2 ********************/
end // end TS0VS-TS-2

// Update temporary storage page
Function TS0VS-TS-3()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS0VW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS0VM001.XXXPRCNM = "VS-ST-3"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = TS0VM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End Of TS0VS-TS-3 ********************/
end // end TS0VS-TS-3

// Add page to temp. storage
Function TS0VS-TS-4()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS0VW04.XXXTSLEN = TS0VW01.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (TS0VW01.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  try
    call "TA0050" (TS0VW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS0VW04 empty; /* M001 display storage*/

    TS0VW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    TS0VW01.TS0VWIX1 = 1; /* Display line number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS0VM001.XXXPRCNM = "VS-TS-4"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = TS0VM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of TS0VS-TS-4 ********************/
end // end TS0VS-TS-4

// Update temporary storage page
Function TS0VS-TS-5()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/
  TS0VW01.TS0VWIX1 = 1;

  while (TS0VW01.TS0VWIX1 <= 22) /* ===> Max map detail lines*/

    TS0VW04.TSNIKCNT[TS0VWIX1] = TS0VM001.TSOMPCNT[TS0VWIX1];
    TS0VW04.TSOFRCRT[TS0VWIX1] = TS0VM001.TSOFRCRT[TS0VWIX1];
    TS0VW04.TSOTOCRT[TS0VWIX1] = TS0VM001.TSOTOCRT[TS0VWIX1];
    /* MOVE TS0VM001.SY2CLRID(TS0VWIX1) TO TS0VW04.SY2CLRID(TS0VWIX1);*/
    TS0VW04.SY2CLRID[TS0VWIX1] = TS0VM001.TS0VMCLR;
    TS0VW04.SY4IDDSC[TS0VWIX1] = TS0VM001.SY4IDDSC[TS0VWIX1];
    TS0VW04.TSOSHPQT[TS0VWIX1] = TS0VM001.TSOSHPQT[TS0VWIX1];

    TS0VW04.SY5SZID[TS0VWIX1] = TS0VW01.SY5SZID[TS0VWIX1];

    TS0VW04.TSFSHPID[TS0VWIX1] = TS0VM001.TSFSHPID;

    if (TS0VW04.TSIPLNBR[TS0VWIX1] == 0)
      /* IF TS0VM001.SY2CLRID(TS0VWIX1) IN TS0VW03.SY2CLRID;*/
      if (TS0VM001.TS0VMCLR in TS0VW03.SY2CLRID)
        TS0VW04.TSIPLNBR[TS0VWIX1] = TS0VW03.TSIPLNBR[sysVar.arrayIndex];
      end
    end

    TS0VW01.TS0VWIX1 = TS0VW01.TS0VWIX1 + 1; /* increment index*/

  end

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS0VW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS0VM001.XXXPRCNM = "VS-TS-5"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = TS0VM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End Of TS0VS-TS-5 ********************/
end // end TS0VS-TS-5

// update T.S. with status code
Function TS0VS-TS-6()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* with status code.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS0VW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TS0VM001.XXXPRCNM = "VS-TS-6"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = TS0VM001.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* ********************** End Of TS0VS-TS-6 ********************/
end // end TS0VS-TS-6

// Size description translation
Function XSTS301()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine was copied from XSPG301. This subroutine*/
   /* does a check for zero size records, unlike XSPG301.If no*/
   /* size records are found, it returns control to TS0V screen.*/
   /* This subroutine accesses the Production Style/Color and the*/
   /* Product Scale Tables and returns the Size Identification,*/
   /* Size Description and Division Code for all valid sizes of a*/
   /* GPC/Style/Color/Dimension.*/

   /* *** Code the following before this is executed:         ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3FUNCD: PC = all valid sizes             ****/
   /* ***                    IE = int. sz id to desc.         ****/
   /* ***                    EI = desc. to int. sz id         ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3DATFM: C = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3XDVCD: Highest division code to return. ****/
   /* ***                    Valid codes are '01','02','03'.  ****/
   /* ***                    Blank defaults to all divisions. ****/
   /* ***                                                     ****/
   /* ***   TA1REC.TA1PGMNM: The name of the calling process, ****/
   /* ***                    for Error Diagnosis Reporting.   ****/

   /* This subroutine will return the CSP return code in EZERT8,*/
   /* the Size Translation Subroutine return code in PG3RETCD*/
   /* and, if a normal return, the size information in PG3SIZES.*/

   /* *** Both return codes must indicate normal return.      ****/
   /* ***                                                     ****/
   /* ***   EZERT8                                            ****/
   /* ***   ------                                            ****/
   /* ***   '00000000' = Normal return                        ****/
   /* ***   OTHER      = Unexpected error has occurred        ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3RETCD                                   ****/
   /* ***   ---------------                                   ****/
   /* ***   '00'  = Normal return                             ****/
   /* ***   '09'  = Data in use by another application        ****/
   /* ***   OTHER = Unexpected error has occurred             ****/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Obtain size descriptions from Size Translation Subroutine.*/
   /* ------------------------------------------------------------*/

  try
    call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Size translation*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "00")       /* and normal return*/

    return; /* Return to previous process*/

  end
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100)

   /* MOVE 114 TO EZEMNO;*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
    TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";
    TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && PG3REC.PG3RETCD == "99")       /* and negative SQL error*/

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
      TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/
      TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    else

      TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
      TAEREC.TAEDESC2 = PG3REC.PG3GROUP; /* Subroutine parameters*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "XSPG301 DESCRIPTION TRANSLATION";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end XSTS301

//*** RECORD=TS0VW01 ****
// Working storage for TS0V - Shipment carton-detail add
// 
//          This working storage contains all working fields
//          and arrays used by this application.
// 
// ***********************
Record TS0VW01 type basicRecord
  10 * char(1) ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 TS0VWPAG TS0VWPAG ; 
  10 TS0VWSWR TS0VWSWR ; 
  10 TS0VWSWU TS0VWSWU ; 
  10 TS0VWSWF TS0VWSWF ; 
  10 TS0VWSWE TS0VWSWE ; 
  10 TS0VWPS1 TS0VWPS1 ; 
  10 TS0VWSWC TS0VWSWC ; 
  10 TS0VWSW1 TS0VWSW1 ; 
  10 TS0VWOPT TS0VWOPT ; 
  10 TS0VWHUP TS0VWHUP ; 
  10 TS0VWIUP TS0VWIUP ; 
  10 TS0VCNTR TS0VCNTR ; 
  10 TS0VTOCTN TS0VTOCTN ; 
  10 * char(1) ; 
  10 TS0VWQPC TS0VWQPC ; 
  10 TS0VWCPC TS0VWCPC ; 
  10 TS0VWPPC TS0VWPPC ; 
  10 * char(1) ; 
  10 TS0VWADA TS0VWADA ; 
    15 TS0VWAPS TS0VWAPS [24] ; 
    15 TS0VWAFL TS0VWAFL [24] ; 
  10 TS0VWUPF TS0VWUPF ; 
  10 * char(1) ; 
  10 TS0VWDEF TS0VWDEF ; 
  10 TS0VWHEF TS0VWHEF ; 
  10 TS0VWDFL TS0VWDFL ; 
  10 TS0VWEFL TS0VWEFL ; 
  10 TS0VWFND TS0VWFND ; 
  10 * char(1) ; 
  10 TS0VWGCT TS0VWGCT ; 
  10 TS0VWGST TS0VWGST ; 
  10 TS0VWCCT TS0VWCCT ; 
  10 TS0VWCTT TS0VWCTT ; 
  10 TS0VWCTM TS0VWCTM ; 
  10 * char(1) ; 
  10 TS0VWCPX TS0VWCPX ; 
  10 TS0VWGCX TS0VWGCX ; 
  10 TS0VWHEX TS0VWHEX ; 
  10 TS0VWIXW TS0VWIXW ; 
  10 TS0VWIX1 TS0VWIX1 ; 
  10 TS0VWIX2 TS0VWIX2 ; 
  10 TS0VWIX3 TS0VWIX3 ; 
  10 TS0VWIX4 TS0VWIX4 ; 
  10 TS0VW-MAX-CRTN-RNG TS0VW-MAX-CRTN-RNG ; 
  10 TS0VWM20 TS0VWM20 ; 
  10 TS0VWM21 TS0VWM21 ; 
  10 * char(1) ; 
  10 TS0VWMAP TS0VWMAP ; 
  10 * char(1) ; 
  10 TS0VWMCT TS0VWMCT ; 
  10 TS0VWMGC TS0VWMGC ; 
  10 * char(1) ; 
  10 TS0VWPWF TS0VWPWF ; 
  10 TS0VWWUP TS0VWWUP ; 
  10 TS0VWWFL TS0VWWFL ; 
  10 TS0VWWA1 TS0VWWA1 ; 
    15 TS0VWWF1 TS0VWWF1 ; 
    15 TS0VWSH1 TS0VWSH1 [22] ; 
  10 TS0VWWA2 TS0VWWA2 ; 
    15 TS0VWWF2 TS0VWWF2 ; 
    15 TS0VWSH2 TS0VWSH2 [22] ; 
  10 TS0VWWA3 TS0VWWA3 ; 
    15 TS0VWWF3 TS0VWWF3 ; 
    15 TS0VWSH3 TS0VWSH3 [22] ; 
  10 TS0VWWA4 TS0VWWA4 ; 
    15 TS0VWWF4 TS0VWWF4 ; 
    15 TS0VWSH4 TS0VWSH4 [22] ; 
  10 TS0VWWA5 TS0VWWA5 ; 
    15 TS0VWWF5 TS0VWWF5 ; 
    15 TS0VWSH5 TS0VWSH5 [22] ; 
  10 TS0VWWA6 TS0VWWA6 ; 
    15 TS0VWWF6 TS0VWWF6 ; 
    15 TS0VWSH6 TS0VWSH6 [22] ; 
  10 TS0VWWA7 TS0VWWA7 ; 
    15 TS0VWWF7 TS0VWWF7 ; 
    15 TS0VWSH7 TS0VWSH7 [22] ; 
  10 TS0VWWF8 TS0VWWF8 ; 
  10 TS0VWWF9 TS0VWWF9 ; 
  10 * char(1) ; 
  10 TS0VWWK1 TS0VWWK1 ; 
  10 TS0VWWK2 TS0VWWK2 ; 
  10 TS0VWWK3 TS0VWWK3 ; 
  10 TS0VWWK4 TS0VWWK4 ; 
  10 TS0VWWK5 TS0VWWK5 ; 
  10 TS0VWWK6 TS0VWWK6 ; 
  10 TS0VWWK7 TS0VWWK7 ; 
  10 TS0VWWK8 TS0VWWK8 ; 
  10 TS0VWWK9 TS0VWWK9 ; 
  10 TS0VWW10 TS0VWW10 ; 
  10 * char(1) ; 
  10 TS0VWPSQ TS0VWPSQ ; 
  10 TS0VWPSA TS0VWPSA ; 
    15 TS0VWPSX TS0VWPSX [40] ; 
  10 * char(1) ; 
  10 TS0VWRSQ TS0VWRSQ ; 
  10 TS0VWRSA TS0VWRSA ; 
    15 TS0VWRSX TS0VWRSX [40] ; 
  10 * char(1) ; 
  10 TS0VWSSQ TS0VWSSQ ; 
  10 TS0VWSSA TS0VWSSA ; 
    15 TS0VWSSX TS0VWSSX [40] ; 
  10 * char(1) ; 
  10 TS0VWWQT TS0VWWQT ; 
  10 TS0VWWSA TS0VWWSA ; 
    15 TS0VWWSX TS0VWWSX [40] ; 
  10 * char(1) ; 
  10 TS0VWMQT TS0VWMQT ; 
  10 TS0VWMSA TS0VWMSA ; 
    15 TS0VWMSX TS0VWMSX [40] ; 
  10 * char(1) ; 
  10 TS0VWTTQ TS0VWTTQ ; 
  10 TS0VWTTP TS0VWTTP ; 
  10 TS0VWTTD TS0VWTTD ; 
  10 * char(1) ; 
  10 TS0VWIHQ TS0VWIHQ ; 
  10 TS0VWIHP TS0VWIHP ; 
  10 TS0VWISQ TS0VWISQ ; 
  10 TS0VWISP TS0VWISP ; 
  10 TS0VWZHQ TS0VWZHQ ; 
  10 TS0VWZHP TS0VWZHP ; 
  10 TS0VWZSQ TS0VWZSQ ; 
  10 TS0VWZSP TS0VWZSP ; 
  10 * char(1) ; 
  10 TS0VWPOQ TS0VWPOQ ; 
  10 TS0VWPLQ TS0VWPLQ ; 
  10 TS0VWRCQ TS0VWRCQ ; 
  10 TS0VWWSQ TS0VWWSQ ; 
  10 TS0VWMPQ TS0VWMPQ ; 
  10 TS0VWQU1 TS0VWQU1 ; 
  10 TS0VWQU2 TS0VWQU2 ; 
  10 TS0VWQU3 TS0VWQU3 ; 
  10 * char(1) ; 
  10 TS0VWSCC TS0VWSCC ; 
  10 TS0VWSCR TS0VWSCR ; 
  10 TS0VWSCN TS0VWSCN ; 
  10 TS0VWSHT TS0VWSHT ; 
  10 TS0VWSIX TS0VWSIX ; 
  10 TS0VWSSZ TS0VWSSZ ; 
  10 TS0VWSQP TS0VWSQP ; 
  10 TS0VWPCK TS0VWPCK ; 
  10 TS0VWPLN TS0VWPLN ; 
  10 TS0VWCID TS0VWCID ; 
  10 * char(1) ; 
  10 TS0VWDAT TS0VWDAT ; 
    15 TS0VWPCN TS0VWPCN ; 
    15 TS0VWPYY TS0VWPYY ; 
    15 TS0VWPM1 TS0VWPM1 ; 
    15 TS0VWPM2 TS0VWPM2 ; 
  10 * char(1) ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
  10 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
  10 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
  10 PC2CUXID PC2CUXID ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XQACD XQACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 YMTCD YMTCD ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 * char(1) ; 
  10 SY4IDDSC SY4IDDSC ; 
  10 SY5SZID SY5SZID [40] ; 
  10 * char(1) ; 
  10 TS0VW-SALES-ORDER TS0VW-SALES-ORDER ; 
    15 TS0VW-CUST-ORD-ID TS0VW-CUST-ORD-ID ; 
      20 * char(8) ; 
      20 OP1PARTN OP1PARTN ; 
    15 TS0VW-NIKE-ORD-ID TS0VW-NIKE-ORD-ID ; 
  10 * char(1) ; 
  10 TSPFCIVC TSPFCIVC ; 
  10 TSPFILE TSPFILE ; 
  10 TSILOCR TSILOCR ; 
  10 TSIMSCFL TSIMSCFL ; 
  10 TSIMSCGR TSIMSCGR ; 
  10 TSRTEXT TSRTEXT ; 
  10 * char(1) ; 
  10 TS0VWCTA TS0VWCTA ; 
    15 TS0VWCNT TS0VWCNT [8] ; 
  10 TSHNKCN TSHNKCN ; 
  10 TSHNKCN1 TSHNKCN1 ; 
  10 TSHNKCN2 TSHNKCN2 ; 
  10 TSHNKCN3 TSHNKCN3 ; 
  10 TSHNKCN4 TSHNKCN4 ; 
  10 TSHNKCN5 TSHNKCN5 ; 
  10 TSHNKCN6 TSHNKCN6 ; 
  10 TSHNKCN7 TSHNKCN7 ; 
  10 TSHNKCN8 TSHNKCN8 ; 
  10 * char(1) ; 
  10 TSICRTQT TSICRTQT ; 
  10 TSICRTQ1 TSICRTQ1 ; 
  10 TSICRTQ2 TSICRTQ2 ; 
  10 TSICRTQ3 TSICRTQ3 ; 
  10 TSICRTQ4 TSICRTQ4 ; 
  10 TSICRTQ5 TSICRTQ5 ; 
  10 TSICRTQ6 TSICRTQ6 ; 
  10 TSICRTQ7 TSICRTQ7 ; 
  10 TSICRTQ8 TSICRTQ8 ; 
  10 * char(1) ; 
  10 TSOSHPQT TSOSHPQT ; 
  10 TS0VWQTY TS0VWQTY ; 
  10 * char(1) ; 
  10 TSISHPQT TSISHPQT ; 
  10 TSISHPQ1 TSISHPQ1 ; 
  10 TSISHPQ2 TSISHPQ2 ; 
  10 TSISHPQ3 TSISHPQ3 ; 
  10 TSISHPQ4 TSISHPQ4 ; 
  10 TSISHPQ5 TSISHPQ5 ; 
  10 TSISHPQ6 TSISHPQ6 ; 
  10 TSISHPQ7 TSISHPQ7 ; 
  10 TSISHPQ8 TSISHPQ8 ; 
  10 * char(1) ; 
  10 XXX-USER-ID XXX-USER-ID ; 
  10 CPLCRTNS CPLCRTNS ; 
  10 VPLAUXCNT VPLAUXCNT ; 
  10 PREV-TO-CRTN-NBR PREV-TO-CRTN-NBR ; 
  10 TSSUMCRT TSSUMCRT ; 
  10 PCXCTCD-BAK PCXCTCD-BAK ; 
  10 FRSTPASS FRSTPASS ; 
  10 TS0VWPRM TS0VWPRM ; 
    15 TS0VWPID TS0VWPID ; 
    15 TS0VWNID TS0VWNID ; 
    15 TS0VWPLNBR TS0VWPLNBR ; 
    15 TS0VWMFGID-GR TS0VWMFGID-GR ; 
      20 TS0VWMFGID TS0VWMFGID ; 
      20 TS0VWMFGID-03 TS0VWMFGID-03 ; 
    15 TS0VWFIL TS0VWFIL ; 
  10 TS0VWMFGFL TS0VWMFGFL ; 
  10 TS0VWMFGUPFL TS0VWMFGUPFL ; 
  10 TS0VWMFGID-BAK TS0VWMFGID-BAK ; 
  10 TS0VWMFGID-BAK-03 TS0VWMFGID-BAK-03 ; 
  10 POHDR-EXISTS POHDR-EXISTS ; 
  10 TS0V-BC-CREATE-FLAG TS0V-BC-CREATE-FLAG ; 
  10 SELD-NIKE-PL-NBR SELD-NIKE-PL-NBR ; 
  10 CURR-NIKE-PL-NBR CURR-NIKE-PL-NBR ; 
  10 TS0VWCPXCTR TS0VWCPXCTR ; 
  10 TS0VWIFU TS0VWIFU ; 
  10 TS0VINVC TS0VINVC ; 
    15 TS0VINV TS0VINV [14] ; 
  10 TSIVIDX TSIVIDX ; 
  10 TS0VINFLG TS0VINFLG ; 
  10 TS0VWWF10 TS0VWWF10 ; 
  10 TS0VWWF11 TS0VWWF11 ; 
  10 * char(1) ; 
  10 TS0VW-EQMT-FL TS0VW-EQMT-FL ; 
  10 MFG-CD-FLAG MFG-CD-FLAG ; 
  10 MFG-CD-FLAG1 MFG-CD-FLAG1 ; 
end // end TS0VW01

//*** RECORD=TS0VW02 ****
// Working CPLHD record for TS0V - Shipment carton-detail add
// 
//         This record is used to store the initial load
//         information for the container packing lists which
//         exist for this shipment id.
// ***********************
Record TS0VW02 type basicRecord
  10 TS0VWLN2 TS0VWLN2 [200] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
    15 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XQACD XQACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
end // end TS0VW02

//*** RECORD=TS0VW03 ****
// Working GPC-CPL record for TS0V - Shipment carton-detail add
// 
//         This record is used to store container packing lists
//         which are similar.  It is primarily for the purpose
//         of handling GPC 03 apparel color packing lists.
// ***********************
Record TS0VW03 type basicRecord
  10 TS0VWLN3 TS0VWLN3 [30] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    15 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
    15 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 TSISTAT TSISTAT ; 
    15 XRECD XRECD ; 
    15 SY4SZSCL SY4SZSCL ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 TSPFILE TSPFILE ; 
    15 TSILOCR TSILOCR ; 
    15 TSPFCIVC TSPFCIVC ; 
    15 XDMCD XDMCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XQACD XQACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 TSIDETFL TSIDETFL ; 
    15 TSIMSCFL TSIMSCFL ; 
    15 TSIMSCGR TSIMSCGR ; 
    15 TSRTEXT TSRTEXT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
    15 TS0VWAFL TS0VWAFL ; 
    15 TS0VWPSQ TS0VWPSQ ; 
    15 TS0VWPSA TS0VWPSA ; 
    15 TS0VWRSQ TS0VWRSQ ; 
    15 TS0VWRSA TS0VWRSA ; 
    15 TS0VWSSQ TS0VWSSQ ; 
    15 TS0VWSSA TS0VWSSA ; 
    15 TS0VWWQT TS0VWWQT ; 
    15 TS0VWWSA TS0VWWSA ; 
    15 TS0VWMQT TS0VWMQT ; 
    15 TS0VWMSA TS0VWMSA ; 
end // end TS0VW03

//*** RECORD=TS0VW04 ****
// Working map 1 record for TS0V - Shipment carton-detail add
// 
//         This record is designed to keep track of all data
//         entered by the user on map 1 detail lines in order
//         to allow scrolling within previously entered data.
// ***********************
Record TS0VW04 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TS0VWLN4 TS0VWLN4 [22] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSNIKCNT TSNIKCNT ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 TSOSHPQT TSOSHPQT ; 
    15 SY5SZID SY5SZID ; 
    15 TS0VWQPC TS0VWQPC ; 
    15 TS0VWAPS TS0VWAPS ; 
    15 TSISTAT TSISTAT ; 
    15 XRECD XRECD ; 
end // end TS0VW04

//*** RECORD=TS0VW10 ****
// Working map 1 record for TS0V - Shipment carton-detail add
// 
//         This record is a copy of map 1 used to compare
//         changes on the screen to determine whether or not
//         to perform edits/updates. It is also used to restore
//         working storage in the event PA2 is pressed.
// ***********************
Record TS0VW10 type basicRecord
  10 TS0VWLN4 TS0VWLN4 [22] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSNIKCNT TSNIKCNT ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 TSOSHPQT TSOSHPQT ; 
    15 SY5SZID SY5SZID ; 
    15 TS0VWQPC TS0VWQPC ; 
    15 TS0VWAPS TS0VWAPS ; 
    15 TSISTAT TSISTAT ; 
    15 XRECD XRECD ; 
end // end TS0VW10

//*** RECORD=TS0VW11 ****
//   TRANSPORTATION VPLAUX01 RECORD PARAMETERS
//   PARAMETERS TO PASS:    Entered function ===> TSCFNC
//                          VCPLIT01 SIZE ID ===> CPLITSZID
// 
//   DATE      NAME       DESCRIPTION OF CHANGE
//   -----   -------     -----------------------------
//  08/12/97  RKALLA      NEW RECORD USED TO TRANSFER DATA
// ***********************
Record TS0VW11 type basicRecord
  5 TS0VGRP TS0VGRP ; 
    10 TSCFNC TSCFNC ; 
    10 CPLITSZID CPLITSZID ; 
end // end TS0VW11

//*** RECORD=TS0VW12 ****
// Working map 1 record for TS0V - Shipment carton-detail add
// 
//         This record is a copy of map 1 used to compare
//         changes from the previous time the user has hit
//         enter.  It is needed for po edit warning processing.
// ***********************
Record TS0VW12 type basicRecord
  10 TS0VWLN4 TS0VWLN4 [22] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSNIKCNT TSNIKCNT ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 TSOTOCRT TSOTOCRT ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 TSOSHPQT TSOSHPQT ; 
    15 SY5SZID SY5SZID ; 
    15 TS0VWQPC TS0VWQPC ; 
    15 TS0VWAPS TS0VWAPS ; 
    15 TSISTAT TSISTAT ; 
    15 XRECD XRECD ; 
end // end TS0VW12

//*** RECORD=TS0VW13 ****
// Working map 1 record for TS02 - hard error by size table
// 
//         This record is designed to keep track of all sizes
//         that have hard errors.  This will allow process to
//         correctly assign status code to the packing list.
// ***********************
Record TS0VW13 type basicRecord
  10 TS0VWL13 TS0VWL13 [40] ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY5SZID SY5SZID ; 
    15 XRECD XRECD ; 
end // end TS0VW13

//*** RECORD=TS0VW14 ****
// This is a VCPLHD04 to TSIREC conversion work area.
// 
//         This record is used to convert from VCPLHD03 to
//         TSIREC and vice versa.
// ***********************
Record TS0VW14 type basicRecord
  10 VCPLHD04-WORK-AREA VCPLHD04-WORK-AREA ; 
    15 VCPLHD04-FIXED-1 VCPLHD04-FIXED-1 ; 
    15 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
    15 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
    15 VCPLHD04-FIXED-2 VCPLHD04-FIXED-2 ; 
    15 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    15 VCPLHD04-FIXED-3 VCPLHD04-FIXED-3 ; 
  10 * char(3) ; 
  10 TSIREC-WORK-AREA TSIREC-WORK-AREA ; 
    15 TSIREC-FIXED-1 TSIREC-FIXED-1 ; 
    15 TSIREC-FIXED-2 TSIREC-FIXED-2 ; 
    15 TSIREC-FIXED-3 TSIREC-FIXED-3 ; 
end // end TS0VW14

//*** RECORD=TS0VW15 ****
// Record to store the size and carton ranges, to be used by
// VPLAUX01 SEARCH. Created by RKALLA.
// TS000  09/24/97  INCREASED THE SIZE OF THE ARRAY TO 18000
// ***********************
Record TS0VW15 type basicRecord
  10 TS-CRTN-NBR TS-CRTN-NBR [18000] ; 
  10 TS-UCC-128-CD TS-UCC-128-CD [18000] ; 
  10 PK-CRTN-CD PK-CRTN-CD [18000] ; 
end // end TS0VW15

Record TS0VW16 type basicRecord
  5 TS0VGRP1 TS0VGRP1 ; 
    10 TSCFNC TSCFNC ; 
    10 TS-NIKE-SHP-ID TS-NIKE-SHP-ID ; 
    10 PC-PO-NBR PC-PO-NBR ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 TS-FROM-CRTN-NBR TS-FROM-CRTN-NBR ; 
    10 TS-TO-CRTN-NBR TS-TO-CRTN-NBR ; 
end // end TS0VW16

Record TS0VW17 type basicRecord
  10 TSFRCRT-CUR TSFRCRT-CUR ; 
  10 TSTOCRT-CUR TSTOCRT-CUR ; 
  10 TSCRTNS-CUR TSCRTNS-CUR ; 
end // end TS0VW17

//*** RECORD=TS0VW20 ****
// **************      COPY OF          ***********************
// ******** TRANSPORTATION CARTON TABLE ***********************
// 
// This record mirrors the DB2 TABLE VIEW: DTRANS.VCPLIT01
// 
// It will contain the data which the T.S. pages were construct
// and will be the source of data base deletes befor the new
// rows are to be inserted.
// ***********************
Record TS0VW20 type basicRecord
  3 TS0VW20G TS0VW20G [1600] ; 
    5 SY2CLRID SY2CLRID ; 
    5 TS0VWQPC TS0VWQPC ; 
    5 TSOGROUP TSOGROUP ; 
      10 TSOKEY TSOKEY ; 
        15 TSFSHPID TSFSHPID ; 
        15 TSHNKCN TSHNKCN ; 
        15 TSIPLNBR TSIPLNBR ; 
      10 TSOFRCRT TSOFRCRT ; 
      10 TSOTOCRT TSOTOCRT ; 
      10 SY5SZID SY5SZID ; 
      10 TSIMSCFL TSIMSCFL ; 
      10 TSIMSCGR TSIMSCGR ; 
      10 TSOSHPQT TSOSHPQT ; 
      10 ZZZSDT ZZZSDT ; 
      10 ZZZCHGDT ZZZCHGDT ; 
      10 ZZZCHGTM ZZZCHGTM ; 
      10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0VW20

//*** RECORD=TS0VW21 ****
// **************      COPY OF          ***********************
// ******** TRANSPORTATION CARTON TABLE ***********************
// 
// This record mirrors the DB2 TABLE VIEW: DTRANS.VCPLIT01
// 
// It will contain the data which the T.S. pages were construct
// and will be used as a w.s. templete when creating a new
// table, TS0VW22.
// ***********************
Record TS0VW21 type basicRecord
  5 SY2CLRID SY2CLRID [1600] ; 
  5 TS0VWQPC TS0VWQPC [1600] ; 
  5 TSOGROUP TSOGROUP [1600] ; 
    10 TSOKEY TSOKEY ; 
      15 TSFSHPID TSFSHPID ; 
      15 TSHNKCN TSHNKCN ; 
      15 TSIPLNBR TSIPLNBR ; 
    10 TSOFRCRT TSOFRCRT ; 
    10 TSOTOCRT TSOTOCRT ; 
    10 SY5SZID SY5SZID ; 
    10 TSIMSCFL TSIMSCFL ; 
    10 TSIMSCGR TSIMSCGR ; 
    10 TSOSHPQT TSOSHPQT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0VW21

//*** RECORD=TS0VW22 ****
// **************      COPY OF          ***********************
// ******** TRANSPORTATION CARTON TABLE ***********************
// 
// This record mirrors the DB2 TABLE VIEW: DTRANS.VCPLIT01
// 
// It will contain the data for one row and will be used as a
// w.s. area befor it is loaded to the new TS0VW21 table.
// 
// ***********************
Record TS0VW22 type basicRecord
  5 SY2CLRID SY2CLRID ; 
  5 TS0VWQPC TS0VWQPC ; 
  5 TSNIKCNT TSNIKCNT ; 
  5 TSOGROUP TSOGROUP ; 
    10 TSOKEY TSOKEY ; 
      15 TSFSHPID TSFSHPID ; 
      15 TSHNKCN TSHNKCN ; 
      15 TSIPLNBR TSIPLNBR ; 
    10 TSOFRCRT TSOFRCRT ; 
    10 TSOTOCRT TSOTOCRT ; 
    10 SY5SZID SY5SZID ; 
    10 TSIMSCFL TSIMSCFL ; 
    10 TSIMSCGR TSIMSCGR ; 
    10 TSOSHPQT TSOSHPQT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0VW22

//*** RECORD=TS0VW23 ****
// ********************** FACTORY TABLE ***********************
// 
// DB2 TABLE VIEW:      DFCTY.VFCTY003
// 
// COPYLIB MEMBER:      dfcty003
// 
// I/O MODULE:          vfcty003
// 
// KEY TO DB2 TABLE:    xgpcd,
//                      fy1fctyc
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 09/07/97   jniese   copied from fy1rec.
// 02/11/98  retrofit  add fy_fcty_xref_nbr to record and
//                     change from view vfcty002 to vfcty003.
// ***********************
Record TS0VW23 type basicRecord
  5 VFCTY003-GROUP VFCTY003-GROUP ; 
    10 VFCTY003-KEY VFCTY003-KEY ; 
      15 XGPCD XGPCD ; 
      15 FY1FCTYC FY1FCTYC ; 
    10 FY-FCTY-TYP-CD FY-FCTY-TYP-CD ; 
    10 FY1FCTNM FY1FCTNM ; 
    10 FY1FCTSN FY1FCTSN ; 
    10 FY-FCTY-NBR FY-FCTY-NBR ; 
    10 FY-FCTY-XREF-NBR FY-FCTY-XREF-NBR ; 
    10 TSCLOCCD TSCLOCCD ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 PC-XCT-ORIG-CD PC-XCT-ORIG-CD ; 
    10 FY1FCTPH FY1FCTPH ; 
    10 FY1FAX FY1FAX ; 
    10 FY1TELEX FY1TELEX ; 
    10 FY1FCTRP FY1FCTRP ; 
    10 FY1REPPH FY1REPPH ; 
    10 FY1MGR FY1MGR ; 
    10 FY1FASST FY1FASST ; 
    10 FY1FRGN FY1FRGN ; 
    10 FY6FOCD FY6FOCD ; 
    10 YABCD YABCD ; 
    10 YBCCD YBCCD ; 
    10 FY1DOWNB FY1DOWNB ; 
    10 FY1DOWNE FY1DOWNE ; 
    10 FY1PRTY FY1PRTY ; 
    10 FY1PERFR FY1PERFR ; 
    10 FY1MADD FY1MADD ; 
    10 FY1REFPC FY1REFPC ; 
    10 FY1REFDT FY1REFDT ; 
    10 FY1PRFPC FY1PRFPC ; 
    10 FY1PRFDT FY1PRFDT ; 
    10 FY1MFGDY FY1MFGDY ; 
    10 FY1FABDY FY1FABDY ; 
    10 FY1STDC FY1STDC ; 
    10 FY1SPCLC FY1SPCLC ; 
    10 FY1STCDY FY1STCDY ; 
    10 FY1LSTDY FY1LSTDY ; 
    10 FY1BGDPC FY1BGDPC ; 
    10 FY1MSCPC FY1MSCPC ; 
    10 FY1CMNT1 FY1CMNT1 ; 
    10 FY1CMNT2 FY1CMNT2 ; 
    10 FY1PFYCD FY1PFYCD ; 
    10 FY1FMRMO FY1FMRMO ; 
    10 FY1CNTFL FY1CNTFL ; 
    10 FY-PC-BAR-CD-FL FY-PC-BAR-CD-FL ; 
    10 FY1DFPRC FY1DFPRC ; 
    10 FY1DFLDT FY1DFLDT ; 
    10 FY-FCTY-MFG-CD FY-FCTY-MFG-CD ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0VW23

//*** RECORD=TS0VW24 ****
// ************** TRANSPORTATION AUXILLARY RECORD *************
// 
// DB2 TABLE VIEW:      DTRANS.VPLAUX01
// 
// COPYLIB MEMBER:      DCL01098
// 
// I/O MODULE:          VPLAUX01
// 
// KEY TO DB2 TABLE:
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 10/23/95   JCARL1   New record.
// ***********************
Record TS0VW24 type basicRecord
  5 TS0VW24-GROUP TS0VW24-GROUP ; 
    10 TS-NIKE-SHP-ID TS-NIKE-SHP-ID ; 
    10 TS-NIKE-CNTNR-NBR TS-NIKE-CNTNR-NBR ; 
    10 TS-NIKE-PL-NBR TS-NIKE-PL-NBR ; 
    10 TS-CRTN-NBR TS-CRTN-NBR ; 
    10 PK-CRTN-CD PK-CRTN-CD ; 
    10 TS-UCC-128-CD TS-UCC-128-CD ; 
      15 TS-UCC-128-CD-3 TS-UCC-128-CD-3 ; 
      15 TS-UCC-128-CD-7 TS-UCC-128-CD-7 ; 
      15 TS-UCC-128-CD-2 TS-UCC-128-CD-2 ; 
      15 TS-UCC-128-CD-8 TS-UCC-128-CD-8 ; 
    10 SY-SZ-ID SY-SZ-ID ; 
    10 TS-CRTN-UNT-SHP TS-CRTN-UNT-SHP ; 
    10 ZZ-SDT ZZ-SDT ; 
end // end TS0VW24

//*** RECORD=TS0VW25 ****
// ********************** FACTORY TABLE ***********************
// 
// DB2 TABLE VIEW:      DFCTY.VFCTY003
// 
// COPYLIB MEMBER:      dfcty003
// 
// I/O MODULE:          vfcty003
// 
// KEY TO DB2 TABLE:    xgpcd,
//                      fy1fctyc
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 09/07/97   jniese   copied from fy1rec.
// 02/11/98  retrofit  add fy_fcty_xref_nbr to record and
//                     change from view vfcty002 to vfcty003.
// ***********************
Record TS0VW25 type basicRecord
  5 TS0VW25-GROUP TS0VW25-GROUP [3000] ; 
    10 TS-NIKE-CNTNR-NBR TS-NIKE-CNTNR-NBR ; 
    10 TS-NIKE-PL-NBR TS-NIKE-PL-NBR ; 
    10 SY-CLR-CD-ID SY-CLR-CD-ID ; 
  5 TMP-CLR-CD-ID TMP-CLR-CD-ID ; 
  5 TS0VW25IX TS0VW25IX ; 
  5 TS0VW25IX1 TS0VW25IX1 ; 
  5 ARRCNT ARRCNT ; 
  5 TS0VW25IX2 TS0VW25IX2 ; 
end // end TS0VW25

//*** RECORD=TS0VW26 ****
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 06/01/99   VKUMAR   New record.
// ***********************
Record TS0VW26 type basicRecord
  5 TSOGROUP TSOGROUP ; 
    10 TSOKEY TSOKEY ; 
      15 TSFSHPID TSFSHPID ; 
      15 TSHNKCN TSHNKCN ; 
      15 TSIPLNBR TSIPLNBR ; 
    10 TSOFRCRT TSOFRCRT ; 
    10 TSOTOCRT TSOTOCRT ; 
    10 SY5SZID SY5SZID ; 
    10 TSIMSCFL TSIMSCFL ; 
    10 TSIMSCGR TSIMSCGR ; 
    10 TSOSHPQT TSOSHPQT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0VW26

//*** RECORD=TS0VW27 ****
// Working storage record to hold nike ship id and packing
// list number for creation of bar code rows
// control    date          name    description of change
// -------    ----          ----    ---------------------
// TS2269     05/25/99     NPULUG   Added fy-fcty-mfg-cd
//                                  to take value from map
//                                  for bar-code creation
// ***********************
Record TS0VW27 type basicRecord
  5 TS4PARM TS4PARM ; 
    10 TS4SHPID TS4SHPID ; 
    10 TS4COMMA TS4COMMA ; 
    10 TS4PLNBR TS4PLNBR ; 
    10 TS4COMMA1 TS4COMMA1 ; 
    10 FY-FCTY-MFG-CD-GR FY-FCTY-MFG-CD-GR ; 
      15 FY-FCTY-MFG-CD FY-FCTY-MFG-CD ; 
      15 MFG-CD-GPC03 MFG-CD-GPC03 ; 
    10 TS4FILL TS4FILL ; 
end // end TS0VW27

DataItem ARRCNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem CURR-NIKE-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FRSTPASS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem FY-FCTY-MFG-CD-GR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EQUIPMENT PRODUCT FLAG
DataItem MFG-CD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EQUIPMENT PRODUCT FLAG
DataItem MFG-CD-FLAG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SSCC18 MFG ID FOR GPC03
DataItem MFG-CD-GPC03 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PCXCTCD-BAK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem POHDR-EXISTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PREV-TO-CRTN-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SELD-NIKE-PL-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY-CLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TMP-CLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem TS-FROM-CRTN-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_STY_NBR
DataItem TS-TO-CRTN-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_UCC_128_CD
DataItem TS-UCC-128-CD-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS-UCC-128-CD-3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_UCC_128_CD
DataItem TS-UCC-128-CD-7 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_UCC_128_CD
DataItem TS-UCC-128-CD-8 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0V-BC-CREATE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VCNTR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0VGRP1 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VINFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VINV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INVOICE FIELD
DataItem TS0VINVC char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VTOCTN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem TS0VW-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// EQUIPMENT PRODUCT FLAG
DataItem TS0VW-EQMT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-cartons
DataItem TS0VW-MAX-CRTN-RNG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem TS0VW-NIKE-ORD-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sales order format
DataItem TS0VW-SALES-ORDER num(12,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TS0VW22 Record Group
DataItem TS0VW20G char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem TS0VW24-GROUP char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem TS0VW25-GROUP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VW25IX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0VW25IX1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0VW25IX2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// array for adds
DataItem TS0VWADA char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton added flag
DataItem TS0VWAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-add-po-style-fl
DataItem TS0VWAPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// container count total
DataItem TS0VWCCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved "SY_COLR_CD_ID"
DataItem TS0VWCID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved container numbers array
DataItem TS0VWCNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "curr" Quantity per carton
DataItem TS0VWCPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-cpl-index
DataItem TS0VWCPX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWCPXCTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1-8 container save array
DataItem TS0VWCTA num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Carton total # incl musicals
DataItem TS0VWCTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Carton total count
DataItem TS0VWCTT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date
DataItem TS0VWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data entered flag
DataItem TS0VWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete successful flag
DataItem TS0VWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end flag for loops #1
DataItem TS0VWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWFIL char(53)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Found flag
DataItem TS0VWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GPC-CPL carton total count
DataItem TS0VWGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gpc-cpl array index
DataItem TS0VWGCX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GPC-CPL shipping total count
DataItem TS0VWGST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Header entered flag
DataItem TS0VWHEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-hard-error-index
DataItem TS0VWHEX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Header update switch
DataItem TS0VWHUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWIFU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style Hard error percent
DataItem TS0VWIHP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style Hard error quantity
DataItem TS0VWIHQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style Soft error percent
DataItem TS0VWISP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style Soft error quantity
DataItem TS0VWISQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Item   update switch
DataItem TS0VWIUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working index 1
DataItem TS0VWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 2
DataItem TS0VWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 3
DataItem TS0VWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 4
DataItem TS0VWIX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index (TRASH)
DataItem TS0VWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line 13
DataItem TS0VWL13 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line
DataItem TS0VWLN2 char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage 3 line
DataItem TS0VWLN3 char(980)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line 4
DataItem TS0VWLN4 char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// MAX     index for record W20
DataItem TS0VWM20 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// MAX     index for record W21
DataItem TS0VWM21 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0VWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-cpl-table-lines
DataItem TS0VWMCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0VWMFGFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWMFGID char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWMFGID-03 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWMFGID-BAK char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWMFGID-BAK-03 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWMFGID-GR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWMFGUPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-gpc-cpl-table-lines
DataItem TS0VWMGC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map accumulated quantity
DataItem TS0VWMPQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map style qty
DataItem TS0VWMQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map qty by size array
DataItem TS0VWMSA char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map qty by size
DataItem TS0VWMSX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0VWNID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Option switch
DataItem TS0VWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS0VWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-packing-list-counter
DataItem TS0VWPCK smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem TS0VWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWPID char(5)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// saved "TS_NIKE_PL_NBR"
DataItem TS0VWPLN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0VWPLNBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Packing list accumulated qty
DataItem TS0VWPLQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem TS0VWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0VWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// PO accumulated quantity
DataItem TS0VWPOQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// "prev" Quantity per carton
DataItem TS0VWPPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0VWPRM char(80)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0VWPS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po on order qty by size array
DataItem TS0VWPSA char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po on order qty by style
DataItem TS0VWPSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po on order qty by size
DataItem TS0VWPSX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Edits Warning flag per screen
DataItem TS0VWPWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0VWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Quantity per carton
DataItem TS0VWQPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save map range TS_CRTN_UNT_SHP
DataItem TS0VWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage quantity 1
DataItem TS0VWQU1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage quantity 2
DataItem TS0VWQU2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage quantity 3
DataItem TS0VWQU3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Reciepts accumulated quantity
DataItem TS0VWRCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// receipts qty by size array
DataItem TS0VWRSA char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// receipts qty by style
DataItem TS0VWRSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// receipts qty by size
DataItem TS0VWRSX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save total # cntnrs to display
DataItem TS0VWSCC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save carton number
DataItem TS0VWSCN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save total # cartons to assign
DataItem TS0VWSCR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 1
DataItem TS0VWSH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 2
DataItem TS0VWSH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 3
DataItem TS0VWSH3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 4
DataItem TS0VWSH4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 5
DataItem TS0VWSH5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 6
DataItem TS0VWSH6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 7
DataItem TS0VWSH7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipping total count
DataItem TS0VWSHT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save index, ts0vw02 updating
DataItem TS0VWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save quantity per carton
DataItem TS0VWSQP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shipments qty by size array
DataItem TS0VWSSA char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shipments qty by style
DataItem TS0VWSSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shipments qty by size
DataItem TS0VWSSX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save size id
DataItem TS0VWSSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Multi-use switch
DataItem TS0VWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0VWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Initial edit switch
DataItem TS0VWSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem TS0VWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0VWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update  for data switch
DataItem TS0VWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total shipping/received diff
DataItem TS0VWTTD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received pct
DataItem TS0VWTTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received qty
DataItem TS0VWTTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update occurred flag
DataItem TS0VWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage num 10
DataItem TS0VWW10 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warning array 1
DataItem TS0VWWA1 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 2
DataItem TS0VWWA2 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 3
DataItem TS0VWWA3 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 4
DataItem TS0VWWA4 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 5
DataItem TS0VWWA5 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 6
DataItem TS0VWWA6 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 7
DataItem TS0VWWA7 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  1
DataItem TS0VWWF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWWF10 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0VWWF11 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  2
DataItem TS0VWWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  3
DataItem TS0VWWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  4
DataItem TS0VWWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  5
DataItem TS0VWWF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  6
DataItem TS0VWWF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  7
DataItem TS0VWWF7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  8
DataItem TS0VWWF8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  9
DataItem TS0VWWF9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Before update warning flag
DataItem TS0VWWFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage num 1
DataItem TS0VWWK1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 2
DataItem TS0VWWK2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 3
DataItem TS0VWWK3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 4
DataItem TS0VWWK4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 5
DataItem TS0VWWK5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 6
DataItem TS0VWWK6 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 7
DataItem TS0VWWK7 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 8
DataItem TS0VWWK8 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 9
DataItem TS0VWWK9 decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working stor style qty
DataItem TS0VWWQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working stor qty by size array
DataItem TS0VWWSA char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WS accumulated quantity
DataItem TS0VWWSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working stor qty by size
DataItem TS0VWWSX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update warning flag
DataItem TS0VWWUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size Hard error percent
DataItem TS0VWZHP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size Hard error quantity
DataItem TS0VWZHQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size Soft error percent
DataItem TS0VWZSP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size Soft error quantity
DataItem TS0VWZSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS4COMMA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS4COMMA1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS4FILL char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS4PARM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS4PLNBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS4SHPID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSCRTNS-CUR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSFRCRT-CUR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First fixed area of TSIREC
DataItem TSIREC-FIXED-1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second fixed area of TSIREC
DataItem TSIREC-FIXED-2 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Third fixed area of TSIREC
DataItem TSIREC-FIXED-3 char(417)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSIREC Work area
DataItem TSIREC-WORK-AREA char(456)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TSIVIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSNIKCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSSUMCRT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TSTOCRT-CUR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First fixed area of VCPLHD03
DataItem VCPLHD04-FIXED-1 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second fixed area of VCPLHD03
DataItem VCPLHD04-FIXED-2 char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Third fixed area of VCPLHD03
DataItem VCPLHD04-FIXED-3 char(417)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VCPLHD03 Work area
DataItem VCPLHD04-WORK-AREA char(464)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

