package ts0c;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0C ****
// This programm will display the Transportation Carrier DB2
// Table for the user to view and/or maintain.  The rows in
// the table are read and the data to be displayed is stored
// in Tempory Storage, one display page per queue record.
// The user may scroll forward and backward to view these
// pages.
// 
// The user may inquire and/or change the detail information
// for a carrier by selecting the carrier and pressing the PF
// key that indicates the function to be performed.  New
// carriers may be added, by authorized users, by pressing the
// PF key that indicates that function, without selecting any
// lines.  A carrier may not be deleted from the table.  The
// status must be changed to inactivate a carrier that may no
// longer be used.  The user may also request to view and/or
// maintain the crafts, agents or contracts that are associated
// with a carrier by selecting the carrier and pressing the PF
// key that indicates the data to be displayed.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 12/10/87   cepple   New application.
// 12/08/93   NMASTE   Added TS-CARR-GRP-CD
// 11/07/96   JCARL1   Remove alarm from msg display.
// y2kfix     oricha   y2k modifications:  xx0xs01 replaces
//                     ezedte and ezetim for ts0c252, ts0c360,
//                     xpts001 flow.
// 06/17/98   JGUIDO   Add SCAC to map2.
//                     Convert to DTRANS.VTSCAR02 view.
// *********************
Program TS0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TS0CW01 TS0CW01; // record
  TS0CW02 TS0CW02; // record
  TS0CW03 TS0CW03; // record
  TSWREC TSWREC; // record
  VTSCAR02 VTSCAR02; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use TS0CM.TS0CM001,  // forms
      TS0CM.TS0CM002, 
      TS0CM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0CW01 empty; /* Initialize working storage*/
    set TS0CW02 empty; /* Initialize temporary storage*/
    set VTSCAR02 empty; /* Initialize record storage*/
    set TSWREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0CM001 initial; /* Initialize map1 output area*/
    set TS0CM002 initial; /* Initialize map2 output area*/

     /* --------------- y2k out begin ---------------*/
     /* MOVE 19 TO TS0CW01.TS0CWCEN;      /* Initialize century*/
     /* --------------- y2k out end -----------------*/

    TS0CW01.TS0CWMAP = "1"; /* Indicate map to be displayed*/
    TS0CW01.TS0CWSWR = "Y"; /* Indicate request for data*/
    TS0CW01.TS0CWPSW = "N"; /* Initialize problem switch*/

    if (COMMAREA.CAITEM != " ") /* If fast path item entered*/

      TS0CW01.TS0CWDSK = COMMAREA.CAITEM; /* Initalize search key*/

    end

    COMMAREA.CAITEM = " "; /* Clear common area item*/

    goto TS0C001; /* Converse Location Inquiry/Main.*/


    TS0C001: TS0C001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Carrier process.*/
     /* ------------------------------------------------------------*/

    goto TS0C001; /* Converse Carrier Inquiry/Main.*/


  end // end main
end // end TS0C

// Carrier Inquiry/Maintenance
Function TS0C001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map in*/
          /* add or change mode.  Whichever is requested.*/
   /* 3) Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0CW01.TS0CWMAP == "1") /* Map 1 was requested*/
    TS0C100(); /* Display map 1*/
  else
    if (TS0CW01.TS0CWMAP == "2" /* Map 2 was requested*/
     && TS0CW01.TS0CWFSW == "A") /* and ADD function*/
      TS0C200(); /* Display Carrier Add Map*/
    else
      if (TS0CW01.TS0CWMAP == "2" /* Map 2 was selected*/
       && TS0CW01.TS0CWFSW == "C") /* and CHANGE function*/

        TS0CW01.TS0CWIXM = 1;
        while (TS0CW01.TS0CWIXM <= 14 /* Until end of page*/
         && TS0CW01.TS0CWMAP != "1") /* and not map 1*/

          if (TS0CM001.TS0CMSEL[TS0CWIXM] == "S") /* If line selected*/
            TS0C300(); /* Display Carrier Change Map*/
          end

          TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM + 1; /* Increment index*/
        end
        TS0CW01.TS0CWMAP = 1; /* Set map to 1*/
      else

        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1PGMNM = "TS0C001 "; /* Process name*/
        TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
        TA1REC.TA1MAP = TS0CW01.TS0CWMAP; /* Map name*/
        SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        XSPF4(); /* Exit to Master Menu*/

      end

    end

  end

end // end TS0C001

// Carrier Inquiry/Maint. Map
Function TS0C100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display the inquiry map.*/
   /* Processing always returns to the top of this process and*/
   /* falls through to subordinate processes until an error is*/
   /* found or a valid request is processed. Sequence is as*/
   /* follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0C110(); /* Obtain the data to display*/

  TS0C120(); /* Format and display the map*/

  TS0C130(); /* Check attention identifier*/

  TS0C140(); /* Reset fields to normal intensity*/

  TS0C150(); /* Verify the entered data*/

  TS0C160(); /* Process valid input request*/


end // end TS0C100

// Obtain the data to display
Function TS0C110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* If no data found, display error message and return to*/
      /* previous process.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (TS0CW01.TS0CWSWR == "N") /* Data was not requested*/
    return; /* Return to previous process*/
  end

  TS0C111(); /* Purge any temporary storage*/

  TS0C112(); /* Select set and open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    set TS0CW02 empty; /* Clear temporary storage record*/
    TS0CW01.TS0CWIXM = 1; /* Initialize display line number*/
    TS0CW01.TS0CWSWC = "N"; /* Initialize end of file switch*/
    TS0CW01.TS0CWSWP = "N"; /* Initialize problem found switch*/
    while (TS0CW01.TS0CWSWC == "N" /* Until end of set or problem found*/
     && TS0CW01.TS0CWSWP == "N") /* or until a problem was found*/
      TS0C113(); /* Obtain data and format page*/
      if (TS0CW01.TS0CWIXM > 14) /* Page is full*/
        TS0C114(); /* Add page to temporary storage*/
      end
    end
    if (TS0CW01.TS0CWSWC == "Y") /* end of set was found*/
      if (TS0CW01.TS0CWIXM > 1) /* and some of the page was formatted*/
        TS0C114(); /* Add page to temporary storage*/
      end
      TS0CW01.TS0CWTSP = 1; /* Initialize page number*/
      TS0CW01.TS0CWSWR = "N"; /* Request for data completed*/
      TS0C115(); /* Close the selected set cursor*/
    end
  end

  if (TS0CW01.TA5TSQIX == 0) /* No data to display*/
    TS0CM001.XXXPRCNM = "TS0C110"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    return; /* Return to previous process*/
  end



end // end TS0C110

// Purge any temporary storage
Function TS0C111()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0C"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0C111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0CM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0CW01.TS0CWTSP = 0; /* Reset current page number*/
  TS0CW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0C111

// Select set and open cursor
Function TS0C112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  call "VTSCAR02" ("S1", SQLCA, VTSCAR02) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0C112"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR02"; /* Table view name*/
    TA1REC.TA1TBLKE = VTSCAR02.VTSCAR02-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0CM001.XXXPRCNM = "TS0C112"; /* Process name*/

    return; /* Return to previous process*/

  end


end // end TS0C112

// Fetch next row and format
Function TS0C113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "VTSCAR02" ("N1", SQLCA, VTSCAR02) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0CW01.TS0CWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Row found from fetch*/
      TS0CW02.TSACARCD[TS0CWIXM] = VTSCAR02.TSACARCD; /* Save data*/
      TS0CW02.TSACARNM[TS0CWIXM] = VTSCAR02.TSACARNM;
      TS0CW02.TSACARSN[TS0CWIXM] = VTSCAR02.TSACARSN;
      TS0CW02.TSACONFL[TS0CWIXM] = VTSCAR02.TSACONFL;
      TS0CW02.TF-SCAC-CD[TS0CWIXM] = VTSCAR02.TF-SCAC-CD;
      TS0CW02.XXXSTAT[TS0CWIXM] = VTSCAR02.XXXSTAT;

      TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM + 1; /* Increment line index*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0CW01.TS0CWSWP = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0C113"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0CM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSCAR02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0CM001.XXXPRCNM = "TS0C113"; /* Process name*/

    end
  end



end // end TS0C113

// Add page to temporary storage
Function TS0C114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS0CW02.TS0CWLEN = 735; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0C"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    TS0CW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS0CW01.TS0CWIXM = 1; /* Reset display line number*/
    set TS0CW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0C114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0CM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0CM001.XXXPRCNM = "TS0O114"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TS0CW01.TS0CWSWP = "Y"; /* indicate that a problem has been*/
                                   /* found*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0C114

// Close selected set cursor
Function TS0C115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VTSCAR02" ("C1", SQLCA, VTSCAR02) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0C115"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0CM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0CM001.XXXPRCNM = "TS0C115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0C115

// Format and display the map
Function TS0C120()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || converseVar.validationMsgNum == 6) /* or fastpath error*/
    set TS0CM001 initial; /* Clear map output area*/
    TS0C121(); /* Format the selected data*/
  end

  /* IF EZEMNO NE 0;                   /* No error message to display*/
  /* SET TS0CM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  if (TS0CW01.TS0CWMFL == "Y") /* If update message to display*/
    converseLib.validationFailed(44);
    TS0CM001.XXXPRCNM = "TS0C120"; /* Process name*/
    TS0CW01.TS0CWMFL = "N"; /* Reset message flag*/
  end

  TS0CM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0CM001 ;


end // end TS0C120

// Format the selected data
Function TS0C121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan carrier data in the map.*/
   /* ------------------------------------------------------------*/

  TS0CW01.TS0CWDFL = "N"; /* Initialize change flag*/

  if (TS0CW01.TS0CWDSK != " ") /* If delete save key set*/
    TS0CW01.TS0CWTSP = 1; /* Initialize search page*/
  end

  if (COMMAREA.CAADDFL == "Y") /* If user can perform add*/
    set TS0CM001.TS0CMADD skip; /* Display add PF Key*/
  end

  if (COMMAREA.CACHGFL == "Y") /* If user can perform change*/
    TS0CM001.TS0CMCHG = "14:CHG"; /* Set change field on map*/
  else
    TS0CM001.TS0CMCHG = "      "; /* Set change field on map*/
  end

  if (TS0CW01.TA5TSQIX == 0) /* if no data to display*/
    return; /* do not format data*/
  end

  while (TS0CW01.TS0CWDFL == "N") /* While delete save key not found*/
    TS0C122(); /* Obtain temporary storage page*/
    TS0C123(); /* Check for key on page*/
  end

  if (TS0CW01.TS0CWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
    TS0C122(); /* Obtain temporary storage page*/
  end

  set TS0CMPGL skip; /* Display "PAGE" literal*/
  set TS0CMOFL skip; /* Display "OF" literal*/

  TS0CM001.TS0CWTSP = TS0CW01.TS0CWTSP; /* Current page number*/
  TS0CM001.TA5TSQIX = TS0CW01.TA5TSQIX; /* Highest page number*/

  TS0CW01.TS0CWIXM = 1; /* Initialize line index*/

  while (TS0CW01.TS0CWIXM <= 14 /* Until end of lines*/
   && TS0CW02.TSACARCD[TS0CWIXM] != " ") /* Or last line of data*/

    set TS0CM001.TS0CMSEL[TS0CWIXM] normal; /* Display select flag*/
    TS0CM001.TSACARCD[TS0CWIXM] = TS0CW02.TSACARCD[TS0CWIXM];
    TS0CM001.TSACARNM[TS0CWIXM] = TS0CW02.TSACARNM[TS0CWIXM];
    TS0CM001.TSACARSN[TS0CWIXM] = TS0CW02.TSACARSN[TS0CWIXM];
    TS0CM001.TSACONFL[TS0CWIXM] = TS0CW02.TSACONFL[TS0CWIXM];
    TS0CM001.XXXSTAT[TS0CWIXM] = TS0CW02.XXXSTAT[TS0CWIXM];

    TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM + 1; /* Increment line index*/

  end


end // end TS0C121

// Read temporary storage page
Function TS0C122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS0CW02.TS0CWLEN = 735; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0C"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0CW01.TS0CWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0CW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0C123"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0CM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0CM001.XXXPRCNM = "TS0C123"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TS0C122

// Check for key on page
Function TS0C123()
   /* ------------------------------------------------------------*/
   /* Check to see if the delete save key is located on this*/
   /* page. If found position cursor on key or position less than*/
   /* the key if not found.*/
   /* ------------------------------------------------------------*/

  if (TS0CW01.TS0CWDSK == " ") /* No carrier code entered*/
    TS0CW01.TS0CWDFL = "Y"; /* Indicate key found*/
    return;
  end

  TS0CW01.TS0CWIXM = 1; /* Initialize index*/
  while (TS0CW01.TS0CWIXM <= 14) /* Until key is found*/

    if (TS0CW02.TSACARCD[TS0CWIXM] == " " /* no more carriers*/
     || TS0CW02.TSACARCD[TS0CWIXM] > TS0CW01.TS0CWDSK)

      TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM - 1; /* Decrement index*/
      if (TS0CW01.TS0CWIXM <= 0) /* Key not on page*/

        if (TS0CW01.TS0CWTSP == 1) /* first page*/
          TS0CW01.TS0CWIXM = 1; /* Reset index*/
        else
          TS0CW01.TS0CWIXM = 14; /* Index to last entry*/
          TS0CW01.TS0CWTSP = TS0CW01.TS0CWTSP - 1; /* decrement page*/
        end

      else

         /* Check for positioning cursor on key with beginning letter*/
         /* to match.*/

        if (TS0CW02.TSACARCD[TS0CWIXM] != TS0CW01.TS0CWDSK)

          TS0CW01.TS0CWMPK = TS0CW02.TSACARCD[TS0CWIXM]; /* Map key*/
          if (TS0CW01.TS0CWMP1 <= TS0CW01.TS0CWDS1) /* If le first letter*/
            TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM + 1; /* Increment index*/
            TS0CW01.TS0CWMPK = TS0CW02.TSACARCD[TS0CWIXM]; /* Map key*/
            if (TS0CW01.TS0CWMP1 >= TS0CW01.TS0CWDS1 /* If ge first letter*/
             && TS0CW01.TS0CWDS1 != " ")             /* and not blank*/
              if (TS0CW01.TS0CWMP1 > TS0CW01.TS0CWDS1)
                TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM - 1;
              end
            else
              if (TS0CW01.TS0CWMP2 >= TS0CW01.TS0CWDS2 /* If ge 2nd letter*/
               && TS0CW01.TS0CWDS2 != " ")             /* and not blank*/
                if (TS0CW01.TS0CWMP2 > TS0CW01.TS0CWDS2)
                  TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM - 1;
                end
              else
                if (TS0CW01.TS0CWMP3 >= TS0CW01.TS0CWDS3
                 /* If ge 3rd letter*/
                 && TS0CW01.TS0CWDS3 != " ") /* and not blank*/
                  if (TS0CW01.TS0CWMP3 > TS0CW01.TS0CWDS3)
                    TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM - 1;
                  end
                else
                  if (TS0CW01.TS0CWMP4 >= TS0CW01.TS0CWDS4 /* If ge 4th ltr*/
                   && TS0CW01.TS0CWDS4 != " ")             /* and not blank*/
                    if (TS0CW01.TS0CWMP4 > TS0CW01.TS0CWDS4)
                      TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM - 1;
                    end
                  end
                end
              end
            end
          end
        end

      end

      set TS0CM001.TS0CMSEL[TS0CWIXM] cursor; /* Initial cursor*/
      TS0CW01.TS0CWDFL = "Y"; /* Indicate page was found*/
      TS0CW01.TS0CWDSK = " "; /* Reset starting carrier*/
      TS0CW01.TS0CMNCD = " "; /* Reset saved carrier code*/
      return; /* Return to previous process*/

    end
    TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM + 1; /* Increment index*/
  end

  if (TS0CW01.TS0CWTSP == TS0CW01.TA5TSQIX) /* Last page*/
    TS0CW01.TS0CWIXM = 14; /* Set index to last entry*/
    set TS0CM001.TS0CMSEL[TS0CWIXM] cursor; /* Initial cursor*/
    TS0CW01.TS0CWDFL = "Y"; /* Indicate page was found*/
    TS0CW01.TS0CWDSK = " "; /* Reset starting carrier*/
    TS0CW01.TS0CMNCD = " "; /* Reset saved carrier code*/
  else
    TS0CW01.TS0CWTSP = TS0CW01.TS0CWTSP + 1; /* Increment page*/
  end


end // end TS0C123

// Check attention identifier
Function TS0C130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0CM001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0CM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      TS0C111(); /* Purge temporary storage*/
      COMMAREA.CATOAP = TS0CM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0CM001.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
      TS0CW01.TS0CWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0CM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0CM001.XXXPRCNM = "TS0C130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* Set to transportation menu*/
    COMMAREA.CAITEM = " "; /* Clear item area*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    /* GET FIX*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0CM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0C111(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0CM001.XXXPRCNM = "TS0O130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    TS0CW01.TS0CWMFL = "N"; /* Reset message flag*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf19) /* and PF19 was not pressed*/

    TS0CM001.XXXPRCNM = "TS0C130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && COMMAREA.CAADDFL == "N")     /* and user add not authorized*/
    TS0CM001.XXXPRCNM = "TS0C130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* and user chg not authorized*/
    TS0CM001.XXXPRCNM = "TS0C130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0C130

// Reset highlighted fields
Function TS0C140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0CM001.TS0CMNCD initialAttributes; /* Starting carrier code*/
  TS0CW01.TS0CWIXM = 1; /* Initialize line index*/

  while (TS0CW01.TS0CWIXM <= 14 /* Until end of lines*/
   && TS0CM001.TSACARCD[TS0CWIXM] != " ") /* and carrier exists*/

    set TS0CM001.TS0CMSEL[TS0CWIXM] normal; /* Reset select flag*/
    TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM + 1; /* Increment line index*/

  end

  set TS0CM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0CM001.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0C140

// Verify the entered data
Function TS0C150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0CM001.CAITEM > " ") /* Application data was entered*/
    set TS0CM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0CM001.XXXPRCNM = "TS0C150"; /* Process name*/
  end

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    TS0CM001.TS0CMMSG = " "; /* Clear message field*/
    TS0CW01.TS0CWMFL = "N"; /* Clear message flag*/
    TS0C151(); /* Verify scroll request*/
  else
    TS0C152(); /* Verify any changed data*/
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0C150

// Verify scroll request
Function TS0C151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0CW01.TS0CWTSP < 2)       /* and no previous pages*/
    TS0CM001.XXXPRCNM = "TS0C151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0CW01.TS0CWTSP >= TS0CW01.TA5TSQIX) /* and no more pages*/
    TS0CM001.XXXPRCNM = "TS0C151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

  TS0CW01.TS0CWIXM = 14; /* Initialize line index*/
  while (TS0CW01.TS0CWIXM > 0) /* Until end of lines*/

    if (TS0CM001.TS0CMSEL[TS0CWIXM] != " ") /* If select also entered*/
      set TS0CM001.TS0CMSEL[TS0CWIXM] cursor, modified, bold; /* Highlight*/
      TS0CM001.XXXPRCNM = "TS0C151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end

    TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM - 1; /* Decrement line number*/

  end

  if (TS0CM001.TS0CMNCD != " ") /* If carrier cd entered*/
    set TS0CM001.TS0CMNCD cursor, modified, bold; /* Highlight*/
    TS0CM001.XXXPRCNM = "TS0C151"; /* Process name*/
    converseLib.validationFailed(14); /* Modifications not allowed*/
  end


end // end TS0C151

// Verify any changed data
Function TS0C152()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (TS0CM001.TS0CMNCD != TS0CW01.TS0CMNCD) /* If carrier code entered*/
    TS0CW01.TS0CWDSK = TS0CM001.TS0CMNCD; /* Save the key*/
    TS0CW01.TS0CMNCD = TS0CM001.TS0CMNCD; /* update carrier code*/
  end


  TS0CW01.TS0CWIXM = 14; /* Initialize index*/
  TS0CW01.TS0CWSFL = "N"; /* Selection flag*/

  while (TS0CW01.TS0CWIXM > 0) /* Until end of lines*/
    if (TS0CM001.TS0CMSEL[TS0CWIXM] != " ") /* If selection is not blank*/
      TS0CW01.TS0CWSFL = "Y"; /* Selection flag*/
      if (TS0CM001.TS0CMSEL[TS0CWIXM] == "S") /* Save the key*/
        TS0CW01.TS0CWDSK = TS0CM001.TSACARCD[TS0CWIXM];
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        set TS0CM001.TS0CMSEL[TS0CWIXM] cursor, modified, bold;
        TS0CW01.TS0CWSWR = "N"; /* Set request for data*/
      end
    end
    TS0CW01.TS0CWIXM = TS0CW01.TS0CWIXM - 1; /* Increment line index*/
  end


  if (converseVar.validationMsgNum == 0)
    if (converseVar.eventKey is pf14)
      if ("S" in TS0CM001.TS0CMSEL)
         /* carrier has been selected for update, go for it..*/
      else
        converseLib.validationFailed(53);
      end
    end
  end

end // end TS0C152

// Process valid input request
Function TS0C160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  TS0CW01.TS0CWIFL = "N"; /* Initialize inquiry flag*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS0CW01.TS0CWTSP = TS0CW01.TS0CWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    TS0CW01.TS0CWTSP = TS0CW01.TS0CWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/
  end

  if (TS0CM001.TS0CMNCD != TS0CW01.TS0CMNCD) /* If carrier code entered*/
    TS0CW01.TS0CMNCD = TS0CM001.TS0CMNCD; /* Update code*/
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    TS0CW01.TS0CWMAP = "2"; /* Select Map #2*/
    TS0CW01.TS0CWFSW = "A"; /* Select add function*/
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    TS0CW01.TS0CWMAP = "2"; /* Select Map #2*/
    TS0CW01.TS0CWFSW = "C"; /* Select delete function*/
  end

  if (converseVar.eventKey is pf17 /* PF17 was pressed*/
   || converseVar.eventKey is pf18 /* PF18 was pressed*/
   || converseVar.eventKey is pf19) /* PF19 was pressed*/

    TS0C161(); /* Check transfer options*/

  end

  if (converseVar.eventKey is enter) /* If ENTER is pressed*/
    TS0CM001.TS0CMMSG = " "; /* Set message field blank*/
  end

  if (converseVar.eventKey is enter /* If ENTER is pressed*/
   && TS0CW01.TS0CWSFL == "Y")      /* and selection was entered*/
    TS0CW01.TS0CWMAP = "2"; /* Select Map #2*/
    TS0CW01.TS0CWFSW = "C"; /* Select delete function*/
    TS0CW01.TS0CWIFL = "Y"; /* Set inquiry flag*/
    converseLib.validationFailed(0); /* Clear error message*/
  end


end // end TS0C160

// Check PF17 PF18 PF19 options
Function TS0C161()
   /* ------------------------------------------------------------*/
   /* Check for transfer options when PF17, PF18, or PF19 is*/
   /* pressed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CATOAP = "TS0B"; /* transfer*/
    COMMAREA.CAITEM = TS0CW01.TS0CWDSK;
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "TS0D"; /* transfer*/
    COMMAREA.CAITEM = TS0CW01.TS0CWDSK;
  end

  if (converseVar.eventKey is pf19) /* PF19 was pressed*/
    COMMAREA.CATOAP = "TS0E"; /* transfer*/
    COMMAREA.CAITEM = TS0CW01.TS0CWDSK;
  end

  XSTSS01(); /* exit to another application*/


end // end TS0C161

// Carrier maintenance add map
Function TS0C200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display the add map. Proc-*/
   /* essing always returns to the top of this process and falls*/
   /* through to subordinate processes until an error is found or*/
   /* PF3 is requested.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0C210(); /* Format and display the map*/

  TS0C220(); /* Check attention identifier*/

  TS0C230(); /* Reset fields to normal intensity*/

  TS0C240(); /* Verify the entered data*/

  TS0C250(); /* Process valid input request*/


end // end TS0C200

// Format and display the map
Function TS0C210()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && TS0CW01.TS0CWPSW == "N")          /* and no pop up window has occurred*/
    set TS0CM002 initial; /* Clear map output area*/
    TS0CM002.XXXSTAT = "A"; /* default status to active*/
    TS0CM002.TS0CMSTA = "ACTIVE"; /* status description*/
    TS0CM002.TS0CMMSG = "PLEASE ENTER NEW CARRIER"; /* message*/
  end

  set TS0CM002.XXXSTAT protect; /* protect status field*/
  TS0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0CM002.ZZZSDT = VGVar.currentShortGregorianDate; /* Creation date*/
  TS0CM002.ZZZCHGDT = VGVar.currentShortGregorianDate; /* Modification date (Init.)*/

  TS0CM002.TS0CMFUN = "ADD"; /* Add literal*/

  if (converseVar.validationMsgNum != 0) /* error message to display*/
  /* SET TS0CM002 ALARM;             /* Indicate sound alarm*/
    TS0CM002.TS0CMMSG = " "; /* clear the message*/
  end

  if (TS0CW01.TS0CWMFL == "Y") /* If message to display*/
    TS0CM002.TS0CMMSG = " "; /* clear the message on subsequent*/
                                   /* passes*/
    converseLib.validationFailed(44); /* Update successful*/
    TS0CM002.XXXPRCNM = "TS0C210"; /* Process name*/
    TS0CW01.TS0CWMFL = "N"; /* Reset message flag*/
  end

  converse TS0CM002 ;

  TS0CW01.TS0CWPSW = "N"; /* Reset pop-up switch*/

  TS0C211(); /* Check for ? inquiry by user*/


end // end TS0C210

// Check for ? inquiry by user
Function TS0C211()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0CM002.XSTCD == "?" /* if any ? entered*/
   || TS0CM002.XCTCD == "?")

    if (TS0CM002.XSTCD == "?") /* if ? in state code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                  STATE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXST01(); /* perform state code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the state      **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0CM002.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
        TS0CM002.XSTDESC = XSTTBL.XSTDESC[XX0XWPIX]; /* move name*/
      else
        TS0CM002.XSTCD = " "; /* clear fields*/
        TS0CM002.XSTDESC = " ";
      end
    end

    if (TS0CM002.XCTCD == "?") /* if ? in country code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 COUNTRY  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the country    **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0CM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        TS0CM002.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      else
        TS0CM002.XCTCD = " "; /* clear fields*/
        TS0CM002.XCTDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/
    TS0CW01.TS0CWPSW = "Y"; /* bypass exit by indicating fake error*/
    exit stack;

  end


end // end TS0C211

// Check attention identifier
Function TS0C220()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0CM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0CM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0CM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0CM002.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0CM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0CM002.XXXPRCNM = "TS0C220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0CW01.TS0CWMAP = "1"; /* move to map 1*/
    TS0CW01.TS0CWSWR = "Y"; /* set request for data*/
    TS0CW01.TS0CWMFL = "N"; /* reset message flag*/
    exit stack; /* exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0CM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    XSTSS01(); /* Exit to another application*/
    TS0CM002.XXXPRCNM = "TS0C220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0CM002.XXXPRCNM = "TS0O220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0C220

// Reset highlighted fields
Function TS0C230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0CM002.TSACARCD initialAttributes; /* Carrier code*/
  set TS0CM002.TSACARNM initialAttributes; /* Carrier name*/
  set TS0CM002.TSACARSN initialAttributes; /* Carrier short name*/
  set TS0CM002.TF-SCAC-CD initialAttributes; /* SCAC*/
  set TS0CM002.XXXSTAT initialAttributes; /* Carrier row status*/
  set TS0CM002.XSTCD initialAttributes; /* State code*/
  set TS0CM002.XCTCD initialAttributes; /* Country code*/
  set TS0CM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0CM002.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0C230

// Verify data entered
Function TS0C240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0CW01.TS0CWDEF = "N"; /* Initialize data entered flag*/

  if (TS0CM002.CAITEM > " ") /* Application data was entered*/
    set TS0CM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0CM002.XXXPRCNM = "TS0C240"; /* Process name*/
  end

  if (converseVar.eventKey is enter /* If ENTER was pressed*/
   && TS0CM002.TSACARCD == " "      /* and no data was entered*/
   && TS0CM002.TSACARNM == " "      
   && TS0CM002.TSACARSN == " "      
   && TS0CM002.TF-SCAC-CD == " "    
   && TS0CM002.XXXSTAT == " "       
   && TS0CM002.TSAPHONE == " "      
   && TS0CM002.TSACONFL == " "      
   && TS0CM002.XXX-ADDR1 == " "     
   && TS0CM002.XXX-ADDR2 == " "     
   && TS0CM002.XXX-ADDR3 == " "     
   && TS0CM002.XXXCITY == " "       
   && TS0CM002.XSTCD == " "         
   && TS0CM002.XXXZIP == " "        
   && TS0CM002.XCTCD == " ")       

    return; /* Return to previous process*/

  else

    TS0C241(); /* Validate input data*/

  end


end // end TS0C240

// Validate the input data
Function TS0C241()
   /* ------------------------------------------------------------*/
   /* Verify entered data.*/
   /* Highlight any error application data that was entered.*/
   /* ------------------------------------------------------------*/

  TS0CW01.TS0CWDEF = "Y"; /* Data has been entered*/

  if (TS0CM002.XCTCD != " ") /* Country was entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/

    if (TS0CM002.XCTCD in XCTTBL.XCTCD) /* Check valid country*/
    end

    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(29); /* Display error message*/
      TS0CM002.XXXPRCNM = "TS0C241"; /* Process name*/
      set TS0CM002.XCTCD cursor, modified, bold; /* highlight field*/
      TS0CM002.XCTDESC = " "; /* Reset desc field*/
    else /* Move description to table*/
      TS0CM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

  else

    TS0CM002.XCTDESC = " "; /* Clear country description*/

  end

  if (TS0CM002.XCTCD == "USA") /* If country is USA*/

    if (TS0CM002.XSTCD != " ") /* State code entered*/
      sysVar.arrayIndex = 0; /* Initialize ezetst*/

      if (TS0CM002.XSTCD in XSTTBL.XSTCD) /* Check valid state*/
      end

    end

    if (sysVar.arrayIndex == 0 /* Not in table*/
     || TS0CM002.XSTCD == " ") /* or state missing*/
      converseLib.validationFailed(30); /* Display error message*/
      TS0CM002.XXXPRCNM = "TS0C241"; /* Process name*/
      set TS0CM002.XSTCD cursor, modified, bold; /* highlight field*/
      TS0CM002.XSTDESC = " "; /* Reset desc field*/
    else /* Move description to table*/
      TS0CM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end

  else

    TS0CM002.XSTDESC = " "; /* Clear state description*/

  end

  if (TS0CM002.TSACARSN == " ") /* If short name is missing*/
    set TS0CM002.TSACARSN cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(37); /* error message*/
    TS0CM002.XXXPRCNM = "TS0C241"; /* Process name*/
  end

  if (TS0CM002.TSACARNM == " ") /* If name is missing*/
    set TS0CM002.TSACARNM cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(38); /* error message*/
    TS0CM002.XXXPRCNM = "TS0C241"; /* Process name*/
  end

  if (TS0CM002.TS-CARR-GRP-CD == " ") /* If code is missing*/
    set TS0CM002.TS-CARR-GRP-CD cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(392); /* error message*/
    TS0CM002.XXXPRCNM = "TS0C241"; /* Process name*/
  end

  if (TS0CM002.TSACARCD == " ") /* If code is missing*/
    set TS0CM002.TSACARCD cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(39); /* error message*/
    TS0CM002.XXXPRCNM = "TS0C241"; /* Process name*/
  end


end // end TS0C241

// Process valid input request
Function TS0C250()
   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the carrier.*/
   /* If found then display error message ' carrier code already*/
     /* exists.*/
   /* If not found then add the row.*/
   /* ------------------------------------------------------------*/

  TS0CW01.TS0CWMFL = "N"; /* Initialize message change flag*/

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && TS0CW01.TS0CWDEF == "Y"       /* and data was entered*/
   && converseVar.validationMsgNum == 0) /* and no errors*/

    TS0C251(); /* Select table row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* If carrier doesn't already exists*/
      VTSCAR02.TSACONFL = "N"; /* Default contract to no*/
      TS0C252(); /* Add the new table row*/
      TS0CW01.TS0CWDSK = TS0CM002.TSACARCD; /* Save key*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* If carrier code already exists*/
        converseLib.validationFailed(23); /* error message*/
        set TS0CM002.TSACARCD cursor, modified, bold;
      end
    end

    if (converseVar.validationMsgNum == 0) /* No errors*/
      TS0CW01.TS0CWSWR = "Y"; /* Set request for data switch*/
      TS0CW01.TS0CWMFL = "Y"; /* Set change message flag*/
      set TS0CM002 initial; /* Clear map*/
    end

  end


end // end TS0C250

// Select carrier  table row
Function TS0C251()
   /* ------------------------------------------------------------*/
   /* This module selects a table row from the carrier table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  VTSCAR02.TSACARCD = TS0CM002.TSACARCD; /* Carrier code*/

  call "VTSCAR02" ("S ", SQLCA, VTSCAR02) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

    /* this situation is handled in the process that called it*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      /* this situation is handled in the process that called it*/

    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0C251"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0CM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSCAR02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0CM001.XXXPRCNM = "TS0C251"; /* Process name*/

    end
  end


end // end TS0C251

// Add Carrier  table row
Function TS0C252()
   /* ------------------------------------------------------------*/
   /* This module adds a carrier table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  VTSCAR02.TSACARCD = TS0CM002.TSACARCD; /* Move fields to record*/
  VTSCAR02.TS-CARR-GRP-CD = TS0CM002.TS-CARR-GRP-CD;
  VTSCAR02.TSACARNM = TS0CM002.TSACARNM;
  VTSCAR02.TSACARSN = TS0CM002.TSACARSN;
  VTSCAR02.TF-SCAC-CD = TS0CM002.TF-SCAC-CD;
  VTSCAR02.XXXSTAT = TS0CM002.XXXSTAT;
  VTSCAR02.TSAPHONE = TS0CM002.TSAPHONE;
  VTSCAR02.XXX-ADDR1 = TS0CM002.XXX-ADDR1;
  VTSCAR02.XXX-ADDR2 = TS0CM002.XXX-ADDR2;
  VTSCAR02.XXX-ADDR3 = TS0CM002.XXX-ADDR3;
  VTSCAR02.XXXCITY = TS0CM002.XXXCITY;
  VTSCAR02.XSTCD = TS0CM002.XSTCD;
  VTSCAR02.XXXZIP = TS0CM002.XXXZIP;
  VTSCAR02.XCTCD = TS0CM002.XCTCD;

   /* -------------- y2k out begin ---------------*/
   /* MOVE EZEDTE TO TS0CW01.TS0CWYMD;*/
   /* MOVE TS0CW01.TS0CWDTE TO VTSCAR02.ZZZCHGDT;*/
   /* MOVE TS0CW01.TS0CWDTE TO VTSCAR02.ZZZSDT;*/
   /* XX0XS01;                          /* get the current time*/
   /* MOVE XX0XW01.XX0XWTIM TO VTSCAR02.ZZZCHGTM;*/
   /* -------------- y2k out begin ---------------*/

   /* -------------- y2k in  begin ---------------*/
  XX0XS01(); /* call date routine*/
  VTSCAR02.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VTSCAR02.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VTSCAR02.ZZZSDT = XX0XW01.XX0XWDAT;
   /* -------------- y2k in  end ----------------*/

  call "VTSCAR02" ("A ", SQLCA, VTSCAR02) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0C252"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0CM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0CM001.XXXPRCNM = "TS0C252"; /* Process name*/

  end


end // end TS0C252

// Carrier Main. Change Map
Function TS0C300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display the change map.*/
   /* Processing always returns to the top of this process and*/
   /* falls through subordinate processes until an error is found*/
   /* or a valid request is processed.  Sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0C310(); /* Obtain the data to display*/

  TS0C320(); /* Format and display the map*/

  TS0C330(); /* Check attention identifier*/

  TS0C340(); /* Reset highlighted fields*/

  TS0C350(); /* Verify the entered data*/

  TS0C360(); /* Process valid input request*/


end // end TS0C300

// Obtain the data to display
Function TS0C310()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on location inquiry map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* No errors*/
   || TS0CW01.TS0CWURF == "Y")          /* or update reload flag set*/
    TS0CM002.TSACARCD = TS0CM001.TSACARCD[TS0CWIXM]; /* Carrier code*/
    TS0CW01.TS0CWDSK = TS0CM001.TSACARCD[TS0CWIXM]; /* Save key*/
    TS0C251(); /* Select data for map*/
  end


end // end TS0C310

// Format and display the map
Function TS0C320()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0CW01.TS0CWPSW == "N") /* If no pop up windows have occurred*/
    if (converseVar.validationMsgNum == 0 /* no errors*/
     || TS0CW01.TS0CWURF == "Y")          /* or update reload flag is yes*/

      set TS0CM002 initial; /* Clear map output area*/

      TS0CM002.TSACARCD = VTSCAR02.TSACARCD; /* Move fields to map*/
      TS0CM002.TS-CARR-GRP-CD = VTSCAR02.TS-CARR-GRP-CD;
      TS0CM002.TSACARNM = VTSCAR02.TSACARNM;
      TS0CM002.TSACARSN = VTSCAR02.TSACARSN;
      TS0CM002.TF-SCAC-CD = VTSCAR02.TF-SCAC-CD;
      TS0CM002.XXXSTAT = VTSCAR02.XXXSTAT;

      if (VTSCAR02.XXXSTAT == "A")
        TS0CM002.TS0CMSTA = "ACTIVE";
      end

      if (VTSCAR02.XXXSTAT == "I")
        TS0CM002.TS0CMSTA = "INACTIVE";
      end

      TS0CM002.TSAPHONE = VTSCAR02.TSAPHONE;
      TS0CM002.TSACONFL = VTSCAR02.TSACONFL;
      TS0CM002.XXX-ADDR1 = VTSCAR02.XXX-ADDR1;
      TS0CM002.XXX-ADDR2 = VTSCAR02.XXX-ADDR2;
      TS0CM002.XXX-ADDR3 = VTSCAR02.XXX-ADDR3;
      TS0CM002.XXXCITY = VTSCAR02.XXXCITY;
      TS0CM002.XSTCD = VTSCAR02.XSTCD;
      if (VTSCAR02.XSTCD in XSTTBL.XSTCD)
        TS0CM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
      end
      TS0CM002.XXXZIP = VTSCAR02.XXXZIP;
      TS0CM002.XCTCD = VTSCAR02.XCTCD;
      if (VTSCAR02.XCTCD in XCTTBL.XCTCD)
        TS0CM002.XCTDESC = XCTTBL.XCTABRV[sysVar.arrayIndex];
      end
      TS0CM002.ZZZSDT = VTSCAR02.ZZZSDT;
      TS0CM002.ZZZCHGDT = VTSCAR02.ZZZCHGDT;

      TS0CM002.TS0CMMSG = "PLEASE ENTER YOUR CHANGES"; /* message*/

      set TS0CM002.TF-SCAC-CD cursor;

    end
  end

  set TS0CM002.TSACARCD skip; /* Setup fields*/
  TS0CM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS0CM002.TS0CMFUN = "CHANGE"; /* Move change literal to map*/

  if (COMMAREA.CACHGFL == "N" /* If user has no change capabilities*/
   || TS0CW01.TS0CWIFL == "Y") /* or inquiry flag is set*/
    TS0CM002.TS0CMFUN = "INQUIRE"; /* Move inquire literal to map*/
    TS0CM002.TS0CMMSG = " "; /* clear message field*/
    set TS0CM002.TSACARNM protect; /* Protect all fields*/
    set TS0CM002.TSACARSN protect;
    set TS0CM002.TS-CARR-GRP-CD protect;
    set TS0CM002.XXXSTAT protect;
    set TS0CM002.TSAPHONE protect;
    set TS0CM002.TSACONFL protect;
    set TS0CM002.TF-SCAC-CD protect;
    set TS0CM002.XXX-ADDR1 protect;
    set TS0CM002.XXX-ADDR2 protect;
    set TS0CM002.XXX-ADDR3 protect;
    set TS0CM002.XXXCITY protect;
    set TS0CM002.XSTCD protect;
    set TS0CM002.XXXZIP protect;
    set TS0CM002.XCTCD protect;
    set TS0CM002.CATOAP cursor;
  end

  if (converseVar.validationMsgNum != 0) /* error message to display*/
    TS0CM002.TS0CMMSG = " "; /* clear message field*/
  /* SET TS0CM002 ALARM;             /* Indicate sound alarm*/
  end

  converse TS0CM002 ;

  TS0CW01.TS0CWPSW = "N"; /* Reset pop-up switch*/

  TS0C211(); /* Check for ? inquiry by user*/


end // end TS0C320

// Check attention identifier
Function TS0C330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0CM002 initial; /* clear the map*/
    exit stack; /* exit to redisplay map*/
  end

  if (TS0CM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0CM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0CM002.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0CM002.XXXPRCNM = "TS0C330"; /* Process name*/
    end

    set TS0CM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0CM002.XXXPRCNM = "TS0C330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0CW01.TS0CWMAP = "1"; /* Set to map 1*/
    TS0CW01.TS0CWSWR = "Y"; /* Set request for data switch*/
    TS0CW01.TS0CWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0CM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    XSTSS01(); /* Exit to another application*/
    TS0CM002.XXXPRCNM = "TS0C330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0CM002.XXXPRCNM = "TS0C330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/
  end


end // end TS0C330

// Reset highlighted fields
Function TS0C340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0CM002.TSACARCD initialAttributes; /* Carrier code*/
  set TS0CM002.TSACARNM initialAttributes; /* Carrier name*/
  set TS0CM002.TSACARSN initialAttributes; /* Carrier short name*/
  set TS0CM002.TF-SCAC-CD initialAttributes; /* SCAC*/
  set TS0CM002.XXXSTAT initialAttributes; /* Carrier row status*/
  set TS0CM002.XSTCD initialAttributes; /* State code*/
  set TS0CM002.XCTCD initialAttributes; /* Country code*/
  set TS0CM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0CM002.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0C340

// Verify the entered data
Function TS0C350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0CW01.TS0CWDEF = "N"; /* Initialize data entered flag*/

  if (TS0CM002.CAITEM > " ") /* Application data was entered*/
    set TS0CM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0CM002.XXXPRCNM = "TS0C350"; /* Process name*/
  end

  if (converseVar.eventKey is enter          /* If ENTER was pressed*/
   && TS0CM002.TSACARCD == VTSCAR02.TSACARCD /* and no data entered*/
   && TS0CM002.TS-CARR-GRP-CD == VTSCAR02.TS-CARR-GRP-CD
   && TS0CM002.TSACARNM == VTSCAR02.TSACARNM 
   && TS0CM002.TSACARSN == VTSCAR02.TSACARSN 
   && TS0CM002.TF-SCAC-CD == VTSCAR02.TF-SCAC-CD
   && TS0CM002.XXXSTAT == VTSCAR02.XXXSTAT   
   && TS0CM002.TSAPHONE == VTSCAR02.TSAPHONE 
   && TS0CM002.TSACONFL == VTSCAR02.TSACONFL 
   && TS0CM002.XXX-ADDR1 == VTSCAR02.XXX-ADDR1
   && TS0CM002.XXX-ADDR2 == VTSCAR02.XXX-ADDR2
   && TS0CM002.XXX-ADDR3 == VTSCAR02.XXX-ADDR3
   && TS0CM002.XXXCITY == VTSCAR02.XXXCITY   
   && TS0CM002.XSTCD == VTSCAR02.XSTCD       
   && TS0CM002.XXXZIP == VTSCAR02.XXXZIP     
   && TS0CM002.XCTCD == VTSCAR02.XCTCD       
   && TS0CW01.TS0CWDEF == "N")              

    return; /* Exit to redisplay map*/

  else

    TS0C351(); /* Validate entered data*/

  end


end // end TS0C350

// Validate the input data
Function TS0C351()
   /* ------------------------------------------------------------*/
   /* Validate all applicable entered data.*/
   /* ------------------------------------------------------------*/

  TS0CW01.TS0CWDEF = "Y"; /* Data has been entered*/

  if (TS0CM002.XCTCD != " ") /* Country was entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/

    if (TS0CM002.XCTCD in XCTTBL.XCTCD) /* Check valid country*/
    end

    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(29); /* Display error message*/
      TS0CM002.XXXPRCNM = "TS0C351"; /* Process name*/
      set TS0CM002.XCTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0CM002.XCTDESC = XCTTBL.XCTABRV[sysVar.arrayIndex];
    end

  else

    TS0CM002.XCTDESC = " "; /* Clear country description*/

  end

  if (TS0CM002.XCTCD == "USA") /* If country is USA*/

    if (TS0CM002.XSTCD != " ") /* State code entered*/
      sysVar.arrayIndex = 0; /* Initialize ezetst*/

      if (TS0CM002.XSTCD in XSTTBL.XSTCD) /* Check valid state*/
      end

    end

    if (sysVar.arrayIndex == 0 /* Not in table*/
     || TS0CM002.XSTCD == " ") /* or state missing*/
      converseLib.validationFailed(30); /* Display error message*/
      TS0CM002.XXXPRCNM = "TS0C351"; /* Process name*/
      set TS0CM002.XSTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0CM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end

  else

    TS0CM002.XSTDESC = " "; /* Clear state description*/

  end

  if (TS0CM002.XXXSTAT == "A") /* If status is active*/
    TS0CM002.TS0CMSTA = "ACTIVE"; /* Move active literal*/

  else

    if (TS0CM002.XXXSTAT == "I") /* If status is inactive*/
      TS0CM002.TS0CMSTA = "INACTIVE"; /* Move inactive literal*/
    else
      set TS0CM002.XXXSTAT cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(36); /* Status is missing or invalid*/
      TS0CM002.XXXPRCNM = "TS0C351"; /* Process name*/
    end

  end

  if (TS0CM002.TSACARSN == " ") /* If short name is missing*/
    set TS0CM002.TSACARSN cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(37); /* error message*/
    TS0CM002.XXXPRCNM = "TS0C351"; /* Process name*/
  end

  if (TS0CM002.TSACARNM == " ") /* If name is missing*/
    set TS0CM002.TSACARNM cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(38); /* error message*/
    TS0CM002.XXXPRCNM = "TS0C351"; /* Process name*/
  end

  if (TS0CM002.TS-CARR-GRP-CD == " ") /* If group code*/
    set TS0CM002.TS-CARR-GRP-CD cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(392); /* error message*/
    TS0CM002.XXXPRCNM = "TS0C351"; /* Process name*/
  else
    TS0CS-01();
  end


end // end TS0C351

// Process valid input request
Function TS0C360()
   /* ------------------------------------------------------------*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  TS0CW01.TS0CWMFL = "N"; /* Initialize change message flag*/

  if (converseVar.eventKey is enter     /* ENTER was pressed*/
   && converseVar.validationMsgNum == 0 /* and no errors*/
   && TS0CW01.TS0CWDEF == "Y")          /* and data was entered*/

    VTSCAR02.TSACARCD = TS0CM002.TSACARCD;
    VTSCAR02.TS-CARR-GRP-CD = TS0CM002.TS-CARR-GRP-CD;
    VTSCAR02.TSACARNM = TS0CM002.TSACARNM;
    VTSCAR02.TSACARSN = TS0CM002.TSACARSN;
    VTSCAR02.TF-SCAC-CD = TS0CM002.TF-SCAC-CD;
    VTSCAR02.XXXSTAT = TS0CM002.XXXSTAT;
    VTSCAR02.TSAPHONE = TS0CM002.TSAPHONE;
    VTSCAR02.TSACONFL = TS0CM002.TSACONFL;
    VTSCAR02.XXX-ADDR1 = TS0CM002.XXX-ADDR1;
    VTSCAR02.XXX-ADDR2 = TS0CM002.XXX-ADDR2;
    VTSCAR02.XXX-ADDR3 = TS0CM002.XXX-ADDR3;
    VTSCAR02.XXXCITY = TS0CM002.XXXCITY;
    VTSCAR02.XSTCD = TS0CM002.XSTCD;
    VTSCAR02.XXXZIP = TS0CM002.XXXZIP;
    VTSCAR02.XCTCD = TS0CM002.XCTCD;

   /* -------------- y2k out begin ------------------*/
   /* MOVE EZEDTE TO TS0CW01.TS0CWYMD;*/
   /* MOVE TS0CW01.TS0CWDTE TO VTSCAR02.ZZZCHGDT;*/
   /* MOVE EZETIM TO TS0CW01.TS0CWTM1;*/
   /* MOVE TS0CW01.TS0CWHR1 TO TS0CW01.TS0CWHR3;*/
   /* MOVE TS0CW01.TS0CWMN1 TO TS0CW01.TS0CWMN3;*/
   /* MOVE TS0CW01.TS0CWTM3 TO DTSCAR02.ZZZCHGTM;*/
   /* -------------- y2k out begin ------------------*/

   /* -------------- y2k out begin ------------------*/
    XX0XS01(); /* call date routine*/
    VTSCAR02.ZZZCHGTM = XX0XW01.XX0XWTIM;
    VTSCAR02.ZZZCHGDT = XX0XW01.XX0XWDAT;
   /* -------------- y2k out begin ------------------*/

    TS0C361(); /* Update table*/

    TS0CW01.TS0CWURF = "N"; /* Initialize update reload flag*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row does exist*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* commit updates*/
      TS0CW01.TS0CWMFL = "Y"; /* Set change message flag*/
      TS0CW01.TS0CWSWR = "Y"; /* Set request for data switch*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row does not exist*/
        converseLib.validationFailed(12); /* set update error message*/
        TS0CW01.TS0CWURF = "Y"; /* Set reload flag*/

      end
    end
  end

  if (converseVar.validationMsgNum != 0) /* errors occured*/
    exit stack; /* exit to redisplay map*/
  else
    TS0CM001.TS0CMSEL[TS0CWIXM] = " "; /* Clear select field*/
  end


end // end TS0C360

// Updated selected row
Function TS0C361()
   /* ------------------------------------------------------------*/
   /* Update the carrier row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "VTSCAR02" ("U ", SQLCA, VTSCAR02) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0C361"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0CM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0CM001.XXXPRCNM = "TS0C361"; /* Process name*/

  end


end // end TS0C361

// Validate ts-carr-grp-cd
Function TS0CS-01()
   /* ------------------------------------------------------------*/
   /* Select DTRANS.VTSCAR01*/
   /* ------------------------------------------------------------*/

  set TS0CW03 empty;
  TS0CW03.TSACARCD = TS0CM002.TS-CARR-GRP-CD;


  call "IO2340" ("S ", SQLCA, TS0CW03) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE != 0)

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/
      set TS0CM002.TS-CARR-GRP-CD cursor, bold;
      converseLib.validationFailed(392);
      return;
    end

    if (SQLCA.VAGen_SQLCODE == -911)

      converseLib.validationFailed(11); /* Resource not available*/
      TA1REC.TA1FUNC = "POST"; /* Warning*/

    else

      converseLib.validationFailed(10); /* System error*/
      TA1REC.TA1FUNC = "RETN"; /* Terminate*/

    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0CS01"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0CM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TS0CW03.VTSCAR02-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0CM002.XXXPRCNM = "TS0CS01"; /* Process name*/

    return; /* Return to previous process*/

  end


   /* **                                                       ***/
   /* ****************** End of TS0CS-01 *************************/
end // end TS0CS-01

//*** RECORD=TS0CW01 ****
// Working storage for TS0O - Location Inquiry/Maintenance
// ***********************
Record TS0CW01 type basicRecord
  10 TS0CWIXM TS0CWIXM ; 
  10 TS0CWSWC TS0CWSWC ; 
  10 TS0CWSWR TS0CWSWR ; 
  10 TS0CWPSW TS0CWPSW ; 
  10 TS0CWTSP TS0CWTSP ; 
  10 TS0CWMAP TS0CWMAP ; 
  10 TS0CWFSW TS0CWFSW ; 
  10 TS0CWDSK TS0CWDSK ; 
    15 TS0CWDS1 TS0CWDS1 ; 
    15 TS0CWDS2 TS0CWDS2 ; 
    15 TS0CWDS3 TS0CWDS3 ; 
    15 TS0CWDS4 TS0CWDS4 ; 
  10 TS0CWMPK TS0CWMPK ; 
    15 TS0CWMP1 TS0CWMP1 ; 
    15 TS0CWMP2 TS0CWMP2 ; 
    15 TS0CWMP3 TS0CWMP3 ; 
    15 TS0CWMP4 TS0CWMP4 ; 
  10 TS0CWDFL TS0CWDFL ; 
  10 TS0CWMFL TS0CWMFL ; 
  10 TS0CWSFL TS0CWSFL ; 
  10 TS0CWIFL TS0CWIFL ; 
  10 TS0CWURF TS0CWURF ; 
  10 TS0CWSWP TS0CWSWP ; 
  10 TS0CWDEF TS0CWDEF ; 
  10 TS0CMNCD TS0CMNCD ; 
  10 TS0CWDTE TS0CWDTE ; 
    15 TS0CWCEN TS0CWCEN ; 
    15 TS0CWYMD TS0CWYMD ; 
  10 TS0CWTM1 TS0CWTM1 ; 
    15 TS0CWHR1 TS0CWHR1 ; 
    15 TS0CWC1 TS0CWC1 ; 
    15 TS0CWMN1 TS0CWMN1 ; 
    15 TS0CWC2 TS0CWC2 ; 
    15 TS0CWSEC TS0CWSEC ; 
  10 TS0CWTM2 TS0CWTM2 ; 
    15 TS0CWHR2 TS0CWHR2 ; 
    15 TS0CWCOL TS0CWCOL ; 
    15 TS0CWMN2 TS0CWMN2 ; 
  10 TS0CWTM3 TS0CWTM3 ; 
    15 TS0CWHR3 TS0CWHR3 ; 
    15 TS0CWMN3 TS0CWMN3 ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end TS0CW01

//*** RECORD=TS0CW02 ****
// Temporary storage record for TS0O - Location Inquiry/Maint.
// ***********************
Record TS0CW02 type basicRecord
  10 TS0CWLEN TS0CWLEN ; 
  10 TS0CWLIN TS0CWLIN [15] ; 
    15 TS0CMSEL TS0CMSEL ; 
    15 TSACARCD TSACARCD ; 
    15 TSACARNM TSACARNM ; 
    15 TSACARSN TSACARSN ; 
    15 TSACONFL TSACONFL ; 
    15 TF-SCAC-CD TF-SCAC-CD ; 
    15 XXXSTAT XXXSTAT ; 
end // end TS0CW02

//*** RECORD=TS0CW03 ****
// *************** TRANSPORTATION CARRIER TABLE ***************
// *************** This is a clone of TSAREC    ***************
// 
// DB2 TABLE VIEW:      DTRANS.VTSCAR01
// 
// COPYLIB MEMBER:      DTSCAR02
// 
// I/O MODULE:          IO2340
// 
// KEY TO DB2 TABLE:    TSACARCD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 12/14/93   NMASTE   New record.
// ***********************
Record TS0CW03 type basicRecord
  5 VTSCAR02-GROUP VTSCAR02-GROUP ; 
    10 VTSCAR02-KEY VTSCAR02-KEY ; 
      15 TSACARCD TSACARCD ; 
    10 TSACARNM TSACARNM ; 
    10 TSACARSN TSACARSN ; 
    10 TSACONFL TSACONFL ; 
    10 TSAPHONE TSAPHONE ; 
    10 TF-SCAC-CD TF-SCAC-CD ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 XXXSTAT XXXSTAT ; 
    10 TS-CARR-GRP-CD TS-CARR-GRP-CD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0CW03

//*** RECORD=VTSCAR02 ****
// *************** TRANSPORTATION CARRIER TABLE ***************
// *************** This is a clone of TSAREC    ***************
// 
// DB2 TABLE VIEW:      DTRANS.VTSCAR01
// 
// COPYLIB MEMBER:      DTSCAR02
// 
// I/O MODULE:          IO2340
// 
// KEY TO DB2 TABLE:    TSACARCD
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 12/14/93   NMASTE   New record.
// ************************
Record VTSCAR02 type basicRecord
  5 VTSCAR02-GROUP VTSCAR02-GROUP ; 
    10 VTSCAR02-KEY VTSCAR02-KEY ; 
      15 TSACARCD TSACARCD ; 
    10 TSACARNM TSACARNM ; 
    10 TSACARSN TSACARSN ; 
    10 TSACONFL TSACONFL ; 
    10 TSAPHONE TSAPHONE ; 
    10 TF-SCAC-CD TF-SCAC-CD ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 XXXSTAT XXXSTAT ; 
    10 TS-CARR-GRP-CD TS-CARR-GRP-CD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VTSCAR02

// Next carrier code
DataItem TS0CMNCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection tag
DataItem TS0CMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Colon 1
DataItem TS0CWC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Colon 2
DataItem TS0CWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage century
DataItem TS0CWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Colon
DataItem TS0CWCOL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Entered Flag
DataItem TS0CWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete flag
DataItem TS0CWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete Save Key Letter 1
DataItem TS0CWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete Save Key Letter 2
DataItem TS0CWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete Save Key Letter 3
DataItem TS0CWDS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete Save Key Letter 4
DataItem TS0CWDS4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete Save Key
DataItem TS0CWDSK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage date
DataItem TS0CWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Add/delete function switch
DataItem TS0CWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hour1
DataItem TS0CWHR1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hour2
DataItem TS0CWHR2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hour3
DataItem TS0CWHR3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry flag
DataItem TS0CWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0CWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS0CWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0CWLIN char(53)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0CWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change message flag
DataItem TS0CWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minute1
DataItem TS0CWMN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minute2
DataItem TS0CWMN2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minute3
DataItem TS0CWMN3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map WS Carrier  Letter1
DataItem TS0CWMP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map WS Carrier  Letter 2
DataItem TS0CWMP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map WS Carrier  Letter 3
DataItem TS0CWMP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map WS Carrier  Letter 4
DataItem TS0CWMP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map WS Carrier Index key
DataItem TS0CWMPK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up switch
DataItem TS0CWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second1
DataItem TS0CWSEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Selection flag
DataItem TS0CWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0CWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0CWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0CWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Time1
DataItem TS0CWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Time2
DataItem TS0CWTM2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Time3
DataItem TS0CWTM3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current temporary storage page
DataItem TS0CWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Update reload flag
DataItem TS0CWURF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage yr,mo,day
DataItem TS0CWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VTSCAR02-GROUP char(238)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VTSCAR02-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

