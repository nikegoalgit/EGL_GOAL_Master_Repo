package ts0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0I ****
// This application controls the entry and exit for the
// shipment add process.  If a user wants to add a shipment,
// they will enter this program via the shipment add menu and
// will then proceed to the header add (regardless of the
// option selected since tentative, complete, summary & combine
// shipments all need a header).
// 
// When a user has completed entering one of the 1st 3 types
// of shipments, they will return to this application via the
// accept/reject screen to either accept or reject the
// shipment they have just entered.
// The 4th type of shipment will transfer to TS0J to view
// the newly created combined shipment.
// 
// There is another way to enter this application and that is
// on a shipment rejection.  The user may reject the shipment
// at any point (header add, container add, packing list add)
// by pressing a PA2 key.  PA2 will transfer them to this
// application where all shipment rows are deleted and a
// shipment add menu prompts them for adding a new shipment.
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 03/01/88   CEPPLE   New application.
// 04/09/91   SFORD    Table Changes with TSOREC
// 09/26/91   SFORD    Allow access by "TS02"
// 11/06/91   DHUFFM   Fix to reset carton eof switch.
// 12/10/91   SFORD    Add option 4 and screen 3 fuctions for
//                     combining several shipments into one
//                     shipment.
// 02/10/92   KSTOKK   Chg combine shipment process to include
//                     CPLIT detail if not duplicate P/L style.
// 12/23/92   TGIEBE   Add multiple screen page scrolling
//                     functionality to application.  New page
//                     of data created if po number entered
//                     in 50th position.
// 02/24/93   TGIEBE   Fix problem with ord part char field
//                     not correctly being assigned in
//                     combine shipment function.
// 08/13/93   SFORD    Table Changes with TSFREC, TSHREC,
//                     TSTREC, TSIREC.
// 03/09/94   SFORD    Table Changes with TSIREC, TSOREC
// 10/11/96   FDunn    TS0I.TS0IM.TS0IM003 TSFSHPID - Increased
//                     Length from 6 to 8.
// 11/07/96   JCARL1   Removed alarm from msg display.
// 03/27/99   JGUIDO   Add code and tables to submit TS2461.
// 08/14/97   rkalla   CTE project for DC shipments done.
// 09/28/98   BCHELL   submit batch job Ts4031 which inturn
//                     runs programs Ts4030 and TS4040
//                     (Refer Ts0I255 )
// 05/28/99   AMOHAI   Changed TS0I-36131, TS0I-36200,
//                     TS0I-36210, TS0I-36220, TS0I-36230
//                     to use VCPLHD04 rec instead of TSIREC
//                     ( for inserting PC-ITM-SEQ-NBR also
//                       into CPLHD table )
// 04/05/01   SVENK1   Prompt users and not allow them to
//                     combine USA & CANADA destination
//                     shipments.
// 
// *********************
Program TS0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TS0IW01 TS0IW01; // record
  TS0IW02 TS0IW02; // record
  TS0IW03 TS0IW03; // record
  TS0IW04 TS0IW04; // record
  TS0IW05 TS0IW05; // record
  TS0IW06 TS0IW06; // record
  TS0IW07 TS0IW07; // record
  TS5REC TS5REC; // record
  TSCREC TSCREC; // record
  TSEREC TSEREC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSOREC TSOREC; // record
  TSQREC TSQREC; // record
  TSRREC TSRREC; // record
  TSSREC TSSREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  VCPLHD03 VCPLHD03; // record
  VCPLHD04 VCPLHD04; // record
  VCPLHDJ4 VCPLHDJ4; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use YSTTBL {deleteAfterUse = yes}; // table
  use TS0ITP1 {deleteAfterUse = yes}; // table
  use TS0IT01 {deleteAfterUse = yes}; // table
  use TS0ITP2 {deleteAfterUse = yes}; // table
  use TS0IT02 {deleteAfterUse = yes}; // table
  use TS0IM.TA0PM001,  // forms
      TS0IM.TS0IM001, 
      TS0IM.TS0IM002, 
      TS0IM.TS0IM003, 
      TS0IM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TSEREC empty; /* Initialize record storage*/
    set TSFREC empty;
    set TSRREC empty;
    set TSSREC empty;
    set TSHREC empty;
    set TSOREC empty;
    set TSIREC empty;
    set TSQREC empty;
    set TS5REC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set TS0IW01 empty;
    set TS0IW02 empty;
    set TS0IW03 empty;
    set TS0IW04 empty;
    set TS0IW05 empty;
    set TS0IW06 empty;
    set XX0XW01 empty;
    set TS0IM001 initial; /* Initialize map1 output area*/
    set TS0IM002 initial; /* Initialize map2 output area*/
    set TS0IM003 initial; /* Initialize map3 output area*/

    TS0IW01.TS0IWMAP = "1"; /* Indicate map to be displayed*/
    TS0IW01.TS0IWPSW = "N"; /* Initialize problem switch*/
    TS0IW01.TS0IWWFL = "N"; /* Initialize warning flag*/
    TS0IW01.TS0IWMXP = 50; /* Set maximum po numbers*/
    TS0IW01.TS0IWMAX = 500; /* Set maximum cpl ws table lines*/
    TS0IW01.TS0IW-MAX-PL-DETAIL = 500; /* max packing list detail*/
    TS0IW01.TS0IWMX2 = 5000; /* Set maximum carton table lines*/

    goto TS0I001; /* Special initialization (TS0I)*/


    TS0I001: TS0I001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment Add menu/accept*/
     /* ------------------------------------------------------------*/

    goto TS0I002; /* Converse Shipment add menu/accept*/


    TS0I002: TS0I002();
     /* ------------------------------------------------------------*/
       /* Flow to converse Shipment add menu/accept.*/
     /* ------------------------------------------------------------*/


    goto TS0I002; /* converse shipment add menu/accept*/


  end // end main
end // end TS0I

// Format/submit a background job
Function TS0I-085()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0ITP1.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0IWPRM = " "; /* INITIALIZE*/
      TS0IWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TS0IWNID = TS0IM002.TSFSHPID; /* NIKE ID*/
      TA6REC.TARJCL[TA6INDEX] = TS0IWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0ITP1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0ITP1.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0ITP1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0I-085

// Format/submit a background job
Function TS0I-086()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0IT01.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0IWPRM = " "; /* INITIALIZE*/
      TS0IWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TS0IWNID = TS0IM002.TSFSHPID; /* NIKE ID*/
      TA6REC.TARJCL[TA6INDEX] = TS0IWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0IT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0IT01.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0IT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0I-086

// Format/submit Ts4031, Ts4041
Function TS0I-087()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0ITP2.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0IWPRM-3 = " "; /* INITIALIZE*/
      TS0IWNID-3 = TS0IM002.TSFSHPID; /* NIKE ID*/
      TA6REC.TARJCL[TA6INDEX] = TS0IWPRM-3; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0ITP2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0ITP2.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0ITP2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0I-087

// Format/submit TS4031,Ts4041
Function TS0I-088()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0IT02.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0IWPRM-3 = " "; /* INITIALIZE*/
      TS0IWNID-3 = TS0IM002.TSFSHPID; /* NIKE ID*/
      TA6REC.TARJCL[TA6INDEX] = TS0IWPRM-3; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0IT02.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0IT02.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0IT02.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0I-088

// Maint/inq shipment detail
Function TS0I-30000()
   /* ------------------------------------------------------------*/
   /* this is the main process used to display map #3. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* If request for data is yes;*/
   /* 1) Obtain the data for display.*/
   /* End*/
   /*  */
   /* 2) Format the map output area and display the map.*/
   /*  */
   /* 3) Check the attention identifier used to respond.*/
   /*  */
   /* 4) Reset highlighted fields to normal intensity.*/
   /*  */
   /* 5) Verify the data that was entered.*/
   /*  */
   /* 6) Process a valid input request.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (TS0IW04.TS0IWSWR == "Y" /* ===> If request for data is yes*/
   && converseVar.validationMsgNum == 0) /* ===> no DB2 errors detected*/

    TS0I-31000(); /* Obtain the data for display*/

  end

  TS0I-32000(); /* Format and display the map*/

  TS0I-33000(); /* Check attention identifier*/

  TS0I-34000(); /* Reset fields to normal intensity*/

  TS0I-35000(); /* Verify the entered data*/

  TS0I-36000(); /* Process valid input request*/


   /* **                                                        ***/
   /* ********************** End of TS0I-30000 ********************/
end // end TS0I-30000

// ---> Obtain data for display
Function TS0I-31000()
   /* ------------------------------------------------------------*/
   /*  */
   /* /* OBTAIN DATA FOR DISPLAY*/
   /*  */
   /* ------------------------------------------------------------*/

  set TS0IW04 empty; /* clear any working storage*/
  set TS0IW06 empty; /* clear any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length*/
   /* ------------------------------------------------------------*/

  TS0IW04.XXXTSLEN = 200; /* temp storage page length constant*/
   /* ===>  (50 po number fields * 4 length of po number = 200)*/

  TS0I-31200(); /* purge any temporary storage*/

  TS0I-32300(); /* add initial blank temp storage rec.*/

  TS0I-31100(); /* ===> Get Next Nike Ship Id*/

  if (TSWREC.XGPCD in XGPTBL.XGPCD)
    TS0IW04.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
  end

  TS0IW04.TS0IWSWR = "N"; /* ===> Request for data switch*/
  TS0IW04.TS0IWSWF = "Y"; /* ===> Format the map switch*/


   /* **                                                        ***/
   /* ********************** End of TS0I-31000 ********************/
end // end TS0I-31000

// Get next Nike shipment number
Function TS0I-31100()
   /* ------------------------------------------------------------*/

               /* SELECT NEXT NIKE SHIPMENT NUMBER*/

   /* Select the shipment Number.*/
   /* If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSQREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSQREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/

  call "IO2530" ("G ", SQLCA, TSQREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* End of selected set*/

    TS0IW04.TSFSHPID = TSQREC.TSQNBRNX;
  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      converseLib.validationFailed(09); /* Indicate not available*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "I-31100"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSCTL01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM003.XXXPRCNM = "I-31100"; /* Process name*/

      exit stack; /* ===> Flow to display message*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-31100 ********************/
end // end TS0I-31100

// Purge any temporary storage
Function TS0I-31200()
   /* ---------------------------------------------------------*/
   /*  */
   /* PURGE ANY TEMPORARY STORAGE FOR APPLICATION TS0I*/
   /*  */
   /* ---------------------------------------------------------*/


  TA5REC.TA5APPID = "TS0I"; /* application ID*/
  TA5REC.TA5FNCCD = "P"; /* function code*/

  call "TA0050" (TS0IW06, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temporary storage sub*/

  if (TA5REC.TA5RTNCD != 0) /* error was found*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = "I-31200"; /* process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0IM003"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

  end

  TS0IW04.TS0IWTSP = 1; /* init requested page*/
  TS0IW04.TS0IW-CURRENT-PAGE = 1; /* init current page*/
  TS0IW04.TA5TSQIX = 0; /* init total page*/


end // end TS0I-31200

// ---> Format/display the map
Function TS0I-32000()
   /* ------------------------------------------------------------*/
   /* /* FORMAT AND DISPLAY THE MAP*/
   /*  */
   /* 1) If no errors have occurred, clear screen detail and*/
   /* move working storage to screen.*/
   /* 2) Converse the map.*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    if (TS0IW04.TS0IWSWF == "Y") /* Map must be formatted*/

      if (TS0IW04.TS0IW-CURRENT-PAGE != TS0IW04.TS0IWTSP)

        if (TS0IW04.TS0IW-DATA-MODIFIED == "Y") /* map data modified*/

          TS0I-32500(); /* load temp storage rec*/

          TS0I-32400(); /* update temp storage*/

        end

        TS0I-32200(); /* read temp storage*/

        TS0IW04.TS0IW-CURRENT-PAGE = TS0IW04.TS0IWTSP;

      end

      TS0I-32100(); /* load the map with data*/

      TS0IW04.TS0IWSWF = "N"; /* format map switch*/

    end

  else /* error found*/

    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* message number*/

  end /* error message check*/



  if (TSWREC.XXXMSGNO != 0) /* message to display*/

    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end /* message number*/

  /* SET TS0IM003 ALARM;               /* indicate sound alarm*/

  end


  converse TS0IM003 ;


   /* ------------------------------------------------------------*/
   /* Clear the message fields*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMSGNO = 0; /* message number*/
  TS0IM003.XXXPRCNM = "TS0I"; /* process name*/


   /* **                                                        ***/
   /* ********************** End of TS0I-32000 ********************/
end // end TS0I-32000

// Load the map with display data
Function TS0I-32100()
   /* ---------------------------------------------------------------*/
   /* Load the map with display data from the map WS record.*/
   /* ---------------------------------------------------------------*/

  set TS0IM003 initial; /* clear map values*/

   /* ---------------------------------------------------------------*/
   /* Move header level data from working storage to map.*/
   /* ---------------------------------------------------------------*/

  TS0IM003.TSFSHPID = TS0IW04.TSFSHPID; /* nike ship id number*/
  TS0IM003.XGPCD = TSWREC.XGPCD; /* gpc code*/
  TS0IM003.XGPDESC = TS0IW04.XGPDESC; /* gpc description*/
  TS0IM003.YSTCD = TS0IW04.YSTCD; /* shipment code*/
  TS0IM003.YSTDESC = TS0IW04.YSTDESC; /* shipment description*/
  TS0IM003.PC2CUXID = TS0IW04.PC2CUXID; /* customer xref*/
  TS0IM003.PC2NAME = TS0IW04.PC2NAME; /* xref description*/

  set TS0IM003.TS0IW-INFO-MSG skip, invisible;
  set TS0IM003.PC2CUXID cursor;

  TS0IM003.XXXCURDT = VGVar.currentShortGregorianDate;

  TS0IM003.TS0IWTSP = TS0IW04.TS0IWTSP; /* current page of data*/
  TS0IM003.TA5TSQIX = TS0IW04.TA5TSQIX; /* total no. pages of data*/

   /* ---------------------------------------------------------------*/
   /* Move detail level data from temporary storage to map.*/
   /* ---------------------------------------------------------------*/

  TS0IW01.TS0IWIXM = 1; /* initialize index*/

  while (TS0IW01.TS0IWIXM <= TS0IW01.TS0IWMXP) /* until max po numbers*/

   /* detail display data*/
    TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] = TS0IW06.PC3PONBR[TS0IWIXM];

    TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* increment index*/

  end


end // end TS0I-32100

// Read temporary storage page
Function TS0I-32200()
   /* ------------------------------------------------------------*/
   /* READ TEMPORARY STORAGE PAGE*/
   /*  */
   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
   /* redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0IW06.XXXTSLEN = TS0IW04.XXXTSLEN; /* temp storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* application identification*/
  TA5REC.TA5TSQIX = TS0IW04.TS0IWTSP; /* temp storage page request*/
  TA5REC.TA5FNCCD = "R"; /* function code*/

  call "TA0050" (TS0IW06, TA5REC) {isNoRefresh = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    TA1REC.TA1PGMNM = "I-32200"; /* process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0IM003"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* error diagnosis routine*/

    TS0IM003.XXXPRCNM = "I-32200"; /* process name*/
    TS0IW01.TS0IWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* indicate system error*/
    converseLib.clearScreen();
    
    exit stack;
  end


end // end TS0I-32200

// Add page to temporary storage
Function TS0I-32300()
  /* ----------------------------------------------------------*/
  /* Add a page to temporary storage.*/
  /* ----------------------------------------------------------*/

  TS0IW06.XXXTSLEN = TS0IW04.XXXTSLEN; /* temp storage page length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  if (TS0IW04.TA5TSQIX == 0 /* No pages are formatted*/
   && TA5REC.TA5FNCCD == "P") /* and last function purge*/

    TA5REC.TA5FNCCD = "N"; /* Function code*/
  else
    TA5REC.TA5FNCCD = "A"; /* Function code*/

  end

  call "TA0050" (TS0IW06, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    TA1REC.TA1PGMNM = "I-32300"; /* process name*/
    TA1REC.TA1LOC = "ADD PAGE  TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0IM003"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

    TS0IM003.XXXPRCNM = "I-32300"; /* process name*/
    converseLib.validationFailed(10); /* indicate system error*/

    converseLib.clearScreen();
     /* clear screen*/

    return; /* return to prev process*/

  end

  TS0IW04.TA5TSQIX = TA5REC.TA5TSQIX; /* total temp storage pages*/


end // end TS0I-32300

// Update temporary storage page
Function TS0I-32400()
  /* ----------------------------------------------------------*/
  /* Update current temporary storage page.*/
  /* ----------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* update function code*/

  try
    call "TA0050" (TS0IW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temporary storage*/

  if (TA5REC.TA5RTNCD != 0) /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* application ID*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/
    TA1REC.TA1PGMNM = "I-32400"; /* process name*/
    TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TA0IM003"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

    TS0IM003.XXXPRCNM = "I-32400"; /* process name*/
    converseLib.validationFailed(10); /* indicate system error*/

    converseLib.clearScreen();
     /* clear screen*/

    return; /* return to prev process*/

  end


end // end TS0I-32400

// Load temp storage from map
Function TS0I-32500()
   /* ---------------------------------------------------------*/
   /* Load temporary storage record from current map values.*/
   /* ---------------------------------------------------------*/

  TS0IW01.TS0IWIXM = 1; /* initialize index*/

  while (TS0IW01.TS0IWIXM <= TS0IW01.TS0IWMXP) /* max po numbers*/

    TS0IW06.PC3PONBR[TS0IWIXM] = TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM]; /* move map to temp storage*/

    TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* increment index*/

  end


end // end TS0I-32500

// --->Check attention identifier
Function TS0I-33000()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/

   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    /* ***/
    /* ** Restore the working storage by using the saved data*/
    /* ** in TS0IW04 so that the map can be refreshed.*/
    /* ***/

    TS0IW01.TS0IWIXM = 1; /* set map copy ws index*/

    while (TS0IW01.TS0IWIXM <= TS0IW01.TS0IWMXP) /* until max po numbers*/

      /* ** Restore working storage as before*/

      TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] = TS0IW06.PC3PONBR[TS0IWIXM];

      TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* incr map indexes*/

    end

    exit stack; /* ===> Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS0IW01.TS0IWMAP = "1"; /**/

    exit stack; /* ===> Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter /* ===> ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* ===> PF7   was not pressed*/
   && converseVar.eventKey not pf8)  /* ===> PF8   was not pressed*/

    TS0IM003.XXXPRCNM = "I-33000"; /* ===> Process name*/
    converseLib.validationFailed(4); /* ===> Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* ===> PA1 was pressed*/
     || converseVar.eventKey is pa3) /* ===> or PA3 was pressed*/
      converseLib.clearScreen();
       /* ===> Clear screen before redisplay*/
    end

    exit stack; /* ===> Exit to redisplay map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-33000 ********************/
end // end TS0I-33000

// ---> Reset highlighted fields
Function TS0I-34000()
   /* ------------------------------------------------------------*/

             /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset header fields normal intensity.*/
   /* 2) Reset all detail fields normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0IM003.TS0IW-INFO-MSG skip, invisible;

  set TS0IM003.YSTCD initialAttributes; /* Shipment type code*/

  set TS0IM003.PC2CUXID initialAttributes; /* customer*/

  TS0IW01.TS0IWIXM = 1; /* initialize map index*/
  TS0IW01.TS0IWIXW = 1; /* initialize ws  index*/

  while (TS0IW01.TS0IWIXM <= TS0IW01.TS0IWMXP) /* until max po numbers*/

    set TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] initialAttributes;

    TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* increment map index*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-34000 ********************/
end // end TS0I-34000

// ---> Verify the entered data
Function TS0I-35000()
   /* ------------------------------------------------------------*/
   /*  */
   /* VERIFY THE ENTERED DATA*/
   /*  */
   /* 1) If PF7/PF8 pressed*/
   /* - Check to see if page available to process request.*/
   /* 2) Perform header edits.*/
   /* 3) If on first page of temporary storage*/
   /* - Check to see if any detail po data exists.*/
   /* 4) Validate entered po numbers.*/
   /* 5) Check for US/Canada shipment and promt the error msg*/
   /* when users try to combine US/Canada destination shipments*/
   /* 6) Check for duplicate po numbers.*/
   /*  */
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify scroll request.  Ensure that pages exist to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* scroll back request*/
   && TS0IW04.TS0IWTSP < 2)       /* no previous pages*/
    TS0IW01.TS0IWPSW = "Y"; /* indicate problem*/
    TS0IM003.XXXPRCNM = "I-35000"; /* process name*/
    converseLib.validationFailed(2); /* no prev page to display*/
  end

  if (converseVar.eventKey is pf8 /* scroll forward request*/
   && TS0IW04.TS0IWTSP >= TS0IW04.TA5TSQIX) /* no next page*/
    TS0IW01.TS0IWPSW = "Y"; /* indicate problem*/
    TS0IM003.XXXPRCNM = "I-35000"; /* process name*/
    converseLib.validationFailed(3); /* no more pages to display*/
  end

   /* ------------------------------------------------------------*/
   /* Verify Shipment type entered*/
   /* ------------------------------------------------------------*/

  if (TS0IM003.YSTCD != TS0IW04.YSTCD /* if data modified or blank*/
   || TS0IW04.YSTCD == " "            
  )                                  
    TS0IW04.TS0IW-DATA-MODIFIED = "Y";

    TS0I-35200(); /* verify shipment type*/

  end /* shipment type code*/

   /* ------------------------------------------------------------*/
   /* Verify Customers entered*/
   /* ------------------------------------------------------------*/

  if (TS0IM003.PC2CUXID != TS0IW04.PC2CUXID) /* if data modified*/

    TS0IW04.TS0IW-DATA-MODIFIED = "Y"; /* set switch*/

    TS0I-35300(); /* validate customer xref*/

  end

   /* ------------------------------------------------------------*/
   /* Check to see if any po number data entered on the screen.*/
   /* ------------------------------------------------------------*/

  if (TS0IW04.TA5TSQIX == 1) /* check for data existance only on page 1*/

    TS0IW01.TS0IWIXM = 1; /* initialize index*/

    while (TS0IW01.TS0IWIXM <= TS0IW01.TS0IWMXP) /* until max po numbers*/

      if (TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] == 0) /* nothing entered*/

        /* ========= NEXT SENTENCE ============>*/

      else

        TS0IW01.TS0IWIXM = 99; /* loop termination*/

      end

      TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* increment index*/

    end

    if (TS0IW01.TS0IWIXM < 99) /* no detail data entered*/

      converseLib.validationFailed(34); /* error message*/
      set TS0IM003.TS0IM-PC-PO-NBR[1] cursor, bold; /* set cursor*/
      TS0IM003.XXXPRCNM = "I-35000"; /* process name*/

      exit stack; /* exit to flow*/

    end /* detail data exists*/
  end /* check first page data existance*/

   /* ------------------------------------------------------------*/
   /* Verify the that the P.O. Numbers entered are valid*/
   /* ------------------------------------------------------------*/

  TS0IW01.TS0IWIXM = TS0IW01.TS0IWMXP; /* max po numbers*/

  while (TS0IW01.TS0IWIXM > 0) /* until end of detail*/

    if (TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] !=  /* check if data modified*/
    TS0IW06.PC3PONBR[TS0IWIXM])               

      TS0IW04.TS0IW-DATA-MODIFIED = "Y"; /* set switch*/

    end

    if (TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] > 0) /* po number exists*/

      TS0I-35100(); /* validate po number*/

   /* SVENK1 CHANGE BEGIN*/

      if (converseVar.validationMsgNum == 0) /* No error message to display*/

        TS0I-35110(); /* select the cplhd row*/

        TS0IW01.TS0IWSW3 = "N"; /* set up end of set switches*/

        TS0I-35120(); /* fetch the cplhd row*/

        while (TS0IW01.TS0IWSW3 == "N") /* while not end of cplhd row*/

          TS0I-35140(); /* select the dest location*/
          if ((TSCREC.XCTCD == "USA" ||  /* usa destination shps*/
          TSCREC.XCTCD == "CANA") &&     /* canada destination shps*/
          XX0XW01.XX0XWDAT >= 20011203)  /* date after US GOLIVE date*/
            converseLib.validationFailed(453); /* no access to combine USA/Canada shp*/
            TS0IM003.XXXPRCNM = "TS0I-35140"; /* process name*/
            TS0IW01.TS0IWPSW = "Y"; /* set error switch*/
            set TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] cursor, bold;

            TS0I-35130(); /* close the cplhd row*/
            return;

          end

          TS0I-35120(); /* fetch the cplhd row*/

        end

        TS0I-35130(); /* close the cplhd row*/

      end
  /* SVENK1 CHANGE ENDS*/

    else

      TS0IW06.PC3PONBR[TS0IWIXM] = 0; /* fill temp storage page*/

    end

    TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM - 1; /* decrement index*/

  end /* until end of detail*/

  /* ------------------------------------------------------------------*/
  /* If no errors detected, check for duplicate po numbers.*/
  /* ------------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0
  )
    TS0I-35400(); /* check for duplicate po's*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-35000 ********************/
end // end TS0I-35000

// Select (S ) unique    VPOHDR01
Function TS0I-35100()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty;
  set PC3REC empty;

  PCYREC.PCYFUNC = "S ";
  PC3REC.XGPCD = TSWREC.XGPCD;
  PC3REC.PC3PONBR = TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM];

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      set TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] cursor, bold;
      converseLib.validationFailed(116); /* Missing or invalid*/
      TS0IM003.XXXPRCNM = "I-35100"; /* Process name*/

      return; /* Return to previous process*/

    end

  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "I-35100"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS0IM003.XXXPRCNM = "I-35100"; /* Process name*/

  exit stack; /* ===> exit to display error message*/


   /* **                                                        ***/
   /* ********************** End of TS0I-35100 ********************/
end // end TS0I-35100

// SELECT CPLHDJ4
Function TS0I-35110()
   /* ------------------------------------------------------------*/

   /* Select the row from Packing List/Shipment join view.*/

   /* ------------------------------------------------------------*/

  set VCPLHDJ4 empty;
  VCPLHDJ4.XGP-GPC-CD = PC3REC.XGPCD;
  VCPLHDJ4.PC-PO-NBR = PC3REC.PC3PONBR;

  call "VCPLHDJ4" ("S2", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0I-35110"; /* Process name*/
  TA1REC.TA1LOC = "OPEN CPLHDJ4 CURSOR";
  TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  TS0IM001.XXXPRCNM = "TS0I-35000"; /* Process name*/
  TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/

end // end TS0I-35110

// GET NEXT CPLHDJ4
Function TS0I-35120()
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select the row from Packing List/Shipment join view.*/
   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("N2", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0IW01.TS0IWSW3 = "Y"; /* end of set found*/
  end

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/
    return; /* Return to previous process*/
  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0I-35120"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM001.XXXPRCNM = "TS0I-35000"; /* Process name*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
  end
end // end TS0I-35120

// CLOSE CPLHDJ4
Function TS0I-35130()

   /* ------------------------------------------------------------*/
   /* Close the cursor*/
   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("C2", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
    return; /* Return to previous process*/
  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0I-35130"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE THE FETCH CURSOR";
    TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM001.XXXPRCNM = "TS0I-35000"; /* Process name*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
  end
end // end TS0I-35130

// Select from DTRANS.VTSLOC01
Function TS0I-35140()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTSLOC01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  set TSCREC empty;
  TSCREC.TSCLOCCD = VCPLHDJ4.TS-DEST-LOC-CD;

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0I-35140"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IW01.TS0IWPSW = "Y"; /* indicate problem*/
    TS0IM003.XXXPRCNM = "TS0I-35000"; /* Process name*/
  end

end // end TS0I-35140

// Verify Shipment Type
Function TS0I-35200()
   /* ------------------------------------------------------------*/
            /* 1) shipment type code*/
   /* ------------------------------------------------------------*/

  if (TS0IM003.YSTCD == " ") /* if shipment type is blank*/

    TS0IM003.YSTDESC = " "; /* clear description*/
    TS0IW04.YSTDESC = " "; /* clear description*/
    converseLib.validationFailed(328); /* must be FC or DC*/
    TS0IM003.XXXPRCNM = "I-35200"; /* Process name*/
    set TS0IM003.YSTCD cursor, modified, bold; /* highlight field*/

  else

    if (TS0IM003.YSTCD in YSTTBL.YSTCD /* Check valid code*/
     && YSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/

      TS0IM003.YSTDESC = YSTTBL.YSTDESC[sysVar.arrayIndex];
      TS0IW04.YSTDESC = YSTTBL.YSTDESC[sysVar.arrayIndex];

      if (TS0IM003.YSTCD == "DC" /* Check valid code*/
       || TS0IM003.YSTCD == "FC") /* Check valid code*/

        TS0IW04.YSTCD = YSTTBL.YSTCD[sysVar.arrayIndex]; /* save code*/

      else /* error*/

        TS0IW04.YSTCD = " "; /* Clear code*/
        converseLib.validationFailed(328); /* must be FC or DC*/
        TS0IM003.XXXPRCNM = "I-35200"; /* Process name*/
        set TS0IM003.YSTCD cursor, bold; /* highlight field*/

      end
    else /* error*/

      converseLib.validationFailed(328); /* must be FC or DC*/
      TS0IM003.XXXPRCNM = "I-35200"; /* Process name*/
      TS0IW04.YSTCD = " "; /* Clear description*/
      TS0IM003.YSTDESC = " "; /* Clear description*/
      TS0IW04.YSTDESC = " "; /* Clear description*/
      set TS0IM003.YSTCD cursor, bold; /* highlight field*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-35200 ********************/
end // end TS0I-35200

// Verify Customer xref entered
Function TS0I-35300()
   /* ------------------------------------------------------------*/
                 /* Verify CXREF entered       */
   /* ------------------------------------------------------------*/

  TS0IW04.PC2CUXID = TS0IM003.PC2CUXID;
                                  /* ;*/
  if (TS0IW04.PC2CUXID == " ")

    TS0IM003.PC2NAME = " ";
    TS0IW04.PC2NAME = " ";

    return; /* ===>;*/

  end

  if (TS0IW04.TS0IW-CXREF-1 == " "
   || TS0IW04.TS0IW-CXREF-2 == " "
   || TS0IW04.TS0IW-CXREF-3 == " ")

    TS0IM003.XXXPRCNM = "I-35300"; /* Process name*/
    converseLib.validationFailed(296); /* ===> entire root must be entered*/
    TS0IW04.PC2CUXID = " ";
    TS0IM003.PC2NAME = " ";
    TS0IW04.PC2NAME = " ";
    set TS0IM003.PC2CUXID bold, cursor;

    return; /* ===>;*/

  end
  if (TS0IW04.TS0IW-CXREF-45 == " ")

    TS0IM003.PC2NAME = " ";
    TS0IW04.PC2NAME = " ";

    return; /* ===>;*/

  end
   /* ------------------------------------------------------------*/
                    /* Select CXREF entered       */
   /* ------------------------------------------------------------*/

  set PC2REC empty;

  PC2REC.XGPCD = TS0IM003.XGPCD;
  PC2REC.PC2CUXID = TS0IM003.PC2CUXID;

  call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* select row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* return code ok*/

    TS0IM003.PC2NAME = PC2REC.PC2NAME;
    TS0IW04.PC2NAME = PC2REC.PC2NAME;

  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS0IM003.PC2NAME = " ";
      TS0IW04.PC2NAME = " ";
      TS0IW04.PC2CUXID = " ";
      converseLib.validationFailed(161); /* ===> invalid*/
      TS0IM003.XXXPRCNM = "I-35300"; /* Process name*/
      set TS0IM003.PC2CUXID bold, cursor;
    else

      if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
       || SQLCA.VAGen_SQLCODE == -904)
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "I-35300"; /* Process name*/
      TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW";
      TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM003.XXXPRCNM = "I-35300"; /* Process name*/
      set TS0IM003.PC2CUXID bold, cursor;

      exit stack; /* ===> Exit to display error*/

    end

  end


   /* ********************** End of TS0I-35300 ********************/
end // end TS0I-35300

// Verify unique P.O.s entered
Function TS0I-35400()
   /* ------------------------------------------------------------*/
   /* Verify the that the P.O. Numbers entered are unique*/
   /* * ------------------------------------------------------------*/

  TS0IW01.TS0IWIXM = TS0IWMXP; /* initialize index 1*/
  while (TS0IW01.TS0IWIXM > 0) /* more to check index 1*/

    TS0IW01.TS0IWIXW = TS0IW01.TS0IWIXM - 1; /* set index 2*/

    while (TS0IW01.TS0IWIXW > 0) /* more to check index 2*/

      if (TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] == 
      TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXW] /* duplicate po check*/
       && TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] > 0) /* value entered*/

        TS0IW01.TS0IWPSW = "Y"; /* indicate problem*/
        TS0IM003.XXXPRCNM = "I-35400"; /* process name*/
        converseLib.validationFailed(330); /* duplicate po's entered*/
        set TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] cursor, bold;

      end

      TS0IW01.TS0IWIXW = TS0IW01.TS0IWIXW - 1; /* decrement index 2*/
    end

    TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM - 1; /* decrement index 1*/
  end

  if (TS0IW04.TA5TSQIX >= 2) /* temp storage pages*/

    TS0IW01.TS0IWIXT = TS0IW04.TS0IWTSP; /* save current page*/

    TS0IW04.TS0IWTSP = 1; /* init temp page counter*/
    while (TS0IW04.TS0IWTSP <= TS0IW04.TA5TSQIX) /* more pages to check*/

      if (TS0IW04.TS0IWTSP != TS0IW01.TS0IWIXT) /* not on current page*/
        TS0I-32200(); /* read temp storage*/

        TS0IW01.TS0IWIXM = TS0IW01.TS0IWMXP; /* init map index value*/

        while (TS0IW01.TS0IWIXM > 0) /* check index 1*/

          TS0IW01.TS0IWIXW = TS0IW01.TS0IWMXP; /* init ws index*/

          while (TS0IW01.TS0IWIXW > 0) /* check index 2*/

            if (TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] == 
            TS0IW06.PC3PONBR[TS0IWIXW]
             && TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] > 0) /* value entered*/

              TS0IW01.TS0IWPSW = "Y"; /* indicate problem*/
              TS0IM003.XXXPRCNM = "I-35400"; /* process name*/
              converseLib.validationFailed(330); /* duplicate po numbers*/
              set TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] cursor, bold;

            end

            TS0IW01.TS0IWIXW = TS0IW01.TS0IWIXW - 1; /* decrement index 2*/
          end

          TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM - 1; /* decrement index 1*/
        end
      end

      TS0IW04.TS0IWTSP = TS0IW04.TS0IWTSP + 1; /* inc temp page counter*/
    end

    TS0IW04.TS0IWTSP = TS0IW01.TS0IWIXT; /* reload current page*/
    TS0I-32200(); /* read current page*/
  end


end // end TS0I-35400

// ---> Process input request
Function TS0I-36000()
   /* ------------------------------------------------------------*/
   /*  */
   /* PROCESS VALID INPUT REQUESTS*/
   /*  */
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum > 0)
    return; /* exit to display error*/
  end

  TS0I-32500(); /* load temp storage rec*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (TS0IW04.TS0IWTSP == TS0IW04.TA5TSQIX /* located on max page*/
    )                                       
      TS0IWIXM = TS0IW01.TS0IWMXP; /* max po numbers*/
      if (TS0IM003.TS0IM-PC-PO-NBR[TS0IWIXM] != 0) /* po no. in 50th pos.*/

        TS0I-32400(); /* update temp storage*/

        TS0IW04.TS0IWTSP = TS0IW04.TS0IWTSP + 1; /* inc current page*/
        TS0IW-CURRENT-PAGE = TS0IW04.TS0IWTSP; /* balance pages*/
        set TS0IW06 empty; /* clear temp storage*/
        TS0I-32300(); /* write blank record*/
        TS0IW04.TS0IWSWF = "Y"; /* format the map switch*/
      else /* po not in 50th pos.*/

        /* ------------------------------------------------------------*/
        /* If data has been modified:*/
        /* - Count the number of shipment container P.L. items*/
        /* - that will be combined into a single shipment*/
        /* - Table the packing lists requested for combine function.*/
        /* Else:*/
        /* - Insert the tabled Packing lists.*/
        /* - Transfer to TS0T ==> Shipment Header Add*/
        /* ------------------------------------------------------------*/

        if (TS0IW04.TS0IW-DATA-MODIFIED == "Y"
        )
          TS0I-36100(); /* table all shipment to be inserted*/

          TS0IM003.XXXPRCNM = "I-36000"; /* Process name*/
          if (TSTREC.YSTCD == "DC"
           && (TSTREC.TSEDEST == "CTE" || TSTREC.YSSCD == "CX"))

            if (TSTREC.YSSCD == "ER")
              converseLib.validationFailed(417);
              return;
            end
          end
          if (TS0IW07.POCNT > 0)

            if (TS0IW07.POCNT == TS0IW07.CTECNT)

            else
              if (TS0IW07.CTECNT > 0)
                converseLib.validationFailed(416);
                return;
              end
            end
          end


          if (TS0IW04.TS0IW-PL-COUNT == 0)
            converseLib.validationFailed(329); /* ===> No data to process*/
          else
            TS0IW04.TS0IW-INFO-MSG1 = "       THE NEW COMBINED SHIPMENT WILL CONTAIN ";

            TS0IW04.TS0IW-INFO-MSG2 = TS0IW04.TS0IW-PL-COUNT;

            TS0IW04.TS0IW-INFO-MSG3 = " ITEMS               ";

            TS0IM003.TS0IW-INFO-MSG = TS0IW04.TS0IW-INFO-MSG;

            converseLib.validationFailed(170); /* Press enter to add, PF3 to abort*/

            set TS0IM003.TS0IW-INFO-MSG initialAttributes;
            set TS0IM003 alarm;

            TS0IW04.TS0IW-DATA-MODIFIED = "N";
          end

        else /* data was not modified*/

          XX0XS01(); /* get current data and time*/

          TS0I-36200(); /* insert all tabled shipments*/

          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* commit all Database updates*/

          TS0I-36300(); /* transfer to other application*/

        end
      end

    else /* not on maximum page*/
      TS0IW04.TS0IWTSP = TS0IW04.TS0IWTSP + 1; /* inc current page count*/
      TS0IW04.TS0IWSWF = "Y"; /* format the map switch*/
    end

  else /* not ENTER pressed*/

    if (converseVar.eventKey is pf7) /* PF7 pressed*/
      TS0IW04.TS0IWTSP = TS0IW04.TS0IWTSP - 1; /* decrement temp page*/
    end

    if (converseVar.eventKey is pf8) /* PF8 pressed*/
      TS0IW04.TS0IWTSP = TS0IW04.TS0IWTSP + 1; /* increment temp page*/
    end

    TS0IW04.TS0IWSWF = "Y"; /* format the map switch*/

  end


end // end TS0I-36000

// Table Container P/L for insert
Function TS0I-36100()
   /* ***********************************************************/
   /*  */
   /* ***********************************************************/

  set TS0IW05 empty; /* init the P/L item record/table*/
  TS0IW07.CTECNT = 0;
  TS0IW07.POCNT = 0;

  TS0IW04.TS0IW-PL-COUNT = 0; /* init counter*/

  TS0IW01.TS0IWIXM = 1; /* set index to 1*/

  while (TS0IW01.TS0IWIXM <= TS0IW01.TS0IW-MAX-PL-DETAIL) /* const value*/

    TS0IW04.TS0IW-CREATE-CPLIT-DETAIL[TS0IWIXM] = "N";
    TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1;

  end

  TS0IW01.TS0IWIXT = TS0IW04.TS0IWTSP; /* save current temp page*/

  TS0I-32400(); /* update temp page*/

  TS0IW04.TS0IWTSP = 1; /* init temp page counter*/

  while (TS0IW04.TS0IWTSP <= TS0IW04.TA5TSQIX) /* more pages to read*/

    if (TS0IW04.TA5TSQIX >= 2) /* temp pages exist*/
      TS0I-32200(); /* read temp storage page*/
    end

    TS0IW01.TS0IWIXM = 1; /* initialize index*/

    while (TS0IW01.TS0IWIXM <= TS0IW01.TS0IWMXP) /* until max po numbers*/

      if (TS0IW06.PC3PONBR[TS0IWIXM] > 0) /* po number exists*/

        TS0I-36110(); /* select (S2) set VCPLHD02*/
        TS0IW01.TS0IWSW1 = "N"; /* initialize switch*/
        while (TS0IW01.TS0IWSW1 == "N")
          TS0I-36120();
          if (TSTREC.YSTCD == "DC"
           && (TSTREC.TSEDEST == "CTE" || TSTREC.YSSCD == "CX"))
            TS0IW07.CTECNT = TS0IW07.CTECNT + 1;
            TS0IW07.POCNT = TS0IW07.POCNT + 1;

            if (TSTREC.YSSCD == "ER")
              return;
            end
          else
            TS0IW07.POCNT = TS0IW07.POCNT + 1;
          end

        end
        TS0I-36140(); /* close (C2) set VCPLHD02*/
        if (TS0IW07.POCNT > 0)

          if (TS0IW07.POCNT == TS0IW07.CTECNT)

          else
            if (TS0IW07.CTECNT > 0)
              return;
            end
          end
        end

        TS0I-36110(); /* select (S2) set VCPLHD02*/

        TS0IW01.TS0IWSW1 = "N"; /* initialize switch*/

        TS0I-36120(); /* fetch  (N2) Next row VCPLHD02*/

        while (TS0IW01.TS0IWSW1 == "N"
        )
          if (TSTREC.YSTCD == TS0IW04.YSTCD) /* ship type requested*/

            if (TS0IW04.PC2CUXID == " ") /* no cxref requested*/
              TS0I-36130(); /* table the p/l for update*/
            end

            if (TS0IW04.TS0IW-CXREF-123 > " " /* cxref root request*/
             && TS0IW04.TS0IW-CXREF-45 > " "  
             && TS0IW04.PC2CUXID == TSTREC.PC2CUXID)

              TS0I-36130(); /* table the p/l for update*/

            end

            TS0IW-PC-PRDCU-ID = TSTREC.PC2CUXID;

            if (TS0IW04.TS0IW-CXREF-123 > " " /* cxref root request*/
             && TS0IW04.TS0IW-CXREF-45 == " " 
             && TS0IW04.TS0IW-CXREF-123 == TS0IW04.TS0IW-CXREF-ROOT)

              TS0I-36130(); /* === Table the P/L for update*/

            end

          end

          TS0I-36120(); /* fetch  (N2) next row VCPLHD02*/

        end

        TS0I-36140(); /* close (C2) set VCPLHD02*/

      end

      TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* increment index*/
    end

    TS0IW04.TS0IWTSP = TS0IW04.TS0IWTSP + 1; /* increment temp page*/
  end

  TS0IW04.TS0IWTSP = TS0IW01.TS0IWIXT; /* reload current page*/
  TS0I-32200(); /* read current page*/


   /* **                                                        ***/
   /* ********************** End of TS0I-36100 ********************/
end // end TS0I-36100

// Select (S5) Set       VCPLHD02
Function TS0I-36110()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWs*/

   /* ------------------------------------------------------------*/

  set TSTREC empty;

  TSTREC.XGPCD = TS0IM003.XGPCD; /* map gpc code*/
  TSTREC.PC3PONBR = TS0IW06.PC3PONBR[TS0IWIXM]; /* temp po number*/

  call "IO4230" ("S5", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "I-36110"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
    TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM003.XXXPRCNM = "I-36110"; /* Process name*/

    exit stack; /* ===> Exit to display error message*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0I-36110 ********************/
end // end TS0I-36110

// Fetch  (N5) Next      VCPLHD02
Function TS0I-36120()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("N5", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    /* ========== Next Sentence ==============>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      TS0IW01.TS0IWSW1 = "Y"; /* end the loop*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end


      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "I-36120"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM003.XXXPRCNM = "I-36120"; /* Process name*/

      exit stack;

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-36120 ********************/
end // end TS0I-36120

// Table the P/L items for insert
Function TS0I-36130()
   /* *****************************************************************/
   /* Table the P/L items that are needed for insert*/
   /* *****************************************************************/

  TS0IW01.TS0IWIXW = 1; /* init index*/

  while (TS0IW01.TS0IWIXW <= TS0IW01.TS0IW-MAX-PL-DETAIL /* const value*/
   && TS0IW05.TSFSHPID[TS0IWIXW] > 0)

    if (TSTREC.PC3PONBR == TS0IW05.PC3PONBR[TS0IWIXW]
     && TSTREC.PC2CUXID == TS0IW05.PC2CUXID[TS0IWIXW]
     && TSTREC.SY1STNBR == TS0IW05.SY1STNBR[TS0IWIXW]
     && TSTREC.SY2CLRID == TS0IW05.SY2CLRID[TS0IWIXW]
     && TSTREC.XDMCD == TS0IW05.XDMCD[TS0IWIXW]
     && TSTREC.PC2INSEG == TS0IW05.PC2INSEG[TS0IWIXW]
     && TSTREC.XQACD == TS0IW05.XQACD[TS0IWIXW]
     && TSTREC.XPGCD == TS0IW05.XPGCD[TS0IWIXW]
     && TSTREC.XOWCD == TS0IW05.XOWCD[TS0IWIXW]
     && TSTREC.XUMCD == TS0IW05.XUMCD[TS0IWIXW]
     && TSTREC.OP1CUOID == TS0IW05.OP1CUOID[TS0IWIXW]
     && TSTREC.OP1NORID == TS0IW05.OP1NORID[TS0IWIXW])

      TS0IW05.TSISHPQT[TS0IWIXW] = TS0IW05.TSISHPQT[TS0IWIXW]       + TSTREC.TSISHPQT;

      TS0IW05.TSIRSVQT[TS0IWIXW] = TS0IW05.TSIRSVQT[TS0IWIXW]       + TSTREC.TSIRSVQT;

      TS0IW05.TSIRCVQT[TS0IWIXW] = TS0IW05.TSIRCVQT[TS0IWIXW]       + TSTREC.TSIRCVQT;

      TS0IW05.TSICRTQT[TS0IWIXW] = TS0IW05.TSICRTQT[TS0IWIXW]       + TSTREC.TSICRTQT;

      TS0IW05.TSIPLCBM[TS0IWIXW] = TS0IW05.TSIPLCBM[TS0IWIXW]       + TSTREC.TSIPLCBM;

      TS0IW05.TSIPLTKG[TS0IWIXW] = TS0IW05.TSIPLTKG[TS0IWIXW]       + TSTREC.TSIPLTKG;

      TS0IW04.TS0IW-CREATE-CPLIT-DETAIL[TS0IWIXW] = "N";
      return; /* merge performed so return to*/
                                   /* previous process*/


    end
    TS0IW01.TS0IWIXW = TS0IW01.TS0IWIXW + 1; /* increment index*/

  end

  TS0IW04.TS0IW-CREATE-CPLIT-DETAIL[TS0IWIXW] = "Y";
  TS0IW05.TSFSHPID[TS0IWIXW] = TSTREC.TSFSHPID;
  TS0IW05.TSIPLNBR[TS0IWIXW] = TSTREC.TSIPLNBR;
  TS0IW05.XGPCD[TS0IWIXW] = TSTREC.XGPCD;
  TS0IW05.PC3PONBR[TS0IWIXW] = TSTREC.PC3PONBR;
  TS0IW05.PC2CUXID[TS0IWIXW] = TSTREC.PC2CUXID;
  TS0IW05.SY1STNBR[TS0IWIXW] = TSTREC.SY1STNBR;
  TS0IW05.SY2CLRID[TS0IWIXW] = TSTREC.SY2CLRID;
  TS0IW05.XDMCD[TS0IWIXW] = TSTREC.XDMCD;
  TS0IW05.PC2INSEG[TS0IWIXW] = TSTREC.PC2INSEG;
  TS0IW05.XQACD[TS0IWIXW] = TSTREC.XQACD;
  TS0IW05.XPGCD[TS0IWIXW] = TSTREC.XPGCD;
  TS0IW05.XOWCD[TS0IWIXW] = TSTREC.XOWCD;
  TS0IW05.XUMCD[TS0IWIXW] = TSTREC.XUMCD;
  TS0IW05.OP1CUOID[TS0IWIXW] = TSTREC.OP1CUOID;
  TS0IW05.OP1NORID[TS0IWIXW] = TSTREC.OP1NORID;
  TS0IW05.TSISHPQT[TS0IWIXW] = TSTREC.TSISHPQT;
  TS0IW05.TSIRSVQT[TS0IWIXW] = TSTREC.TSIRSVQT;
  TS0IW05.TSIRCVQT[TS0IWIXW] = TSTREC.TSIRCVQT;
  TS0IW05.TSICRTQT[TS0IWIXW] = TSTREC.TSICRTQT;
  TS0IW05.TSIPLCBM[TS0IWIXW] = TSTREC.TSIPLCBM;
  TS0IW05.TSIPLTKG[TS0IWIXW] = TSTREC.TSIPLTKG;
  TS0IW05.TSIDETFL[TS0IWIXW] = TSTREC.TSIDETFL;

  TS0IW04.TS0IW-PL-COUNT = TS0IW04.TS0IW-PL-COUNT + 1;

   /* **                                                        ***/
   /* ********************** End of TS0I-36130 ********************/
end // end TS0I-36130

// Select (SA) unique    VCPLHD04
Function TS0I-36131()
   /* ------------------------------------------------------------*/

             /* SELECT ROW FROM DTRANS.VCPLHD04*/

   /* 1) This module select a table row from the cplhd table.*/
   /* 2) It will return a system error if an unexpected return*/
   /* code is received.*/

   /* ------------------------------------------------------------*/

  set VCPLHD04 empty;

  VCPLHD04.TS-NIKE-SHP-ID = TS0IW05.TSFSHPID[TS0IWIXW]; /* move in keys*/
  VCPLHD04.TS-NIKE-PL-NBR = TS0IW05.TSIPLNBR[TS0IWIXW];

  TSGREC.TSNFNC = "SA"; /* move in function code*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If valid return code*/
   /* ============ Next Sentence =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "I-36131"; /* Process name*/
    TA1REC.TA1LOC = "SELECT A TABLE ROW";
    TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
    TA1REC.TA1TBLKE = VCPLHD04.VCPLHD04-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IW01.TS0IWPSW = "Y"; /* indicate problem*/
    TS0IM003.XXXPRCNM = "I-36131"; /* Process name*/

    exit stack;
  end


   /* **                                                        ***/
   /* ********************** End of TS0I-36131 ********************/
end // end TS0I-36131

// Close  (C5) Set       VCPLHD02
Function TS0I-36140()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("C5", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "I-36140"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM002.XXXPRCNM = "I-36140"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* === Exit to display error msg*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0I-36140 ********************/
end // end TS0I-36140

// Process P/L Inserts
Function TS0I-36200()
   /* ***********************************************************/
   /* Process the P/L inserts to the databases*/
   /* ***********************************************************/


  TS0IW04.TSIPLCBM = 0;
  TS0IW04.TSIPLTKG = 0;

  TS0IW01.TS0IWIXW = 1; /* set index to 1*/

  while (TS0IW05.TSFSHPID[TS0IWIXW] > 0)

    TS0I-36131(); /* select the row from CPLHD04*/

    VCPLHD04.TS-PL-QTOT-SHP = TS0IW05.TSISHPQT[TS0IWIXW];
    VCPLHD04.TS-PL-QTOT-RSRV = TS0IW05.TSIRSVQT[TS0IWIXW];
    VCPLHD04.TS-PL-QTOT-RCV = TS0IW05.TSIRCVQT[TS0IWIXW];
    VCPLHD04.TS-PL-TOT-CRTN = TS0IW05.TSICRTQT[TS0IWIXW];
    VCPLHD04.TS-PL-TOT-CBM = TS0IW05.TSIPLCBM[TS0IWIXW];
    VCPLHD04.TS-PL-TOT-KG = TS0IW05.TSIPLTKG[TS0IWIXW];
    VCPLHD04.TS-DET-FL = TS0IW05.TSIDETFL[TS0IWIXW];

    TS0IW04.TS0IW-MSG-1 = "CONSOLIDATED SHIPMENT FROM NIKE ID: ";

    TS0IW04.TS0IW-MSG-2 = TS0IW05.TSFSHPID[TS0IWIXW];

    TS0IW04.TS0IW-MSG-3 = ", BY USER: ";
    TS0IW04.TS0IW-MSG-4 = COMMAREA.CAUSERID;

    VCPLHD04.TS-TEXT1 = TS0IW04.TSRTEXT;

    if (TS0IW04.TS0IW-CREATE-CPLIT-DETAIL[TS0IWIXW] == "Y"
     && TS0IW05.TSIDETFL[TS0IWIXW] == "Y")
      VCPLHD04.TS-DET-FL = "Y";
    else
      VCPLHD04.TS-DET-FL = "N";
    end

    VCPLHD04.TS-CPL-STAT-CD = "IP";
    VCPLHD04.XRE-RCPT-XCEP-CD = "  ";
    VCPLHD04.TS-NIKE-SHP-ID = TS0IM003.TSFSHPID;
    VCPLHD04.TS-NIKE-PL-NBR = TS0IW01.TS0IWIXW;

    /* PERFORM TS0I-36205;            /* ===> Populate TS-SHP-LEG-NBR*/

    TS0I-36210(); /* ===> Clear container buckets*/

    VCPLHD04.TS-NIKE-CNTNR-NBR1 = 1;
    VCPLHD04.TS-CPL-QTOT-SHP1 = VCPLHD04.TS-PL-QTOT-SHP;
    VCPLHD04.TS-CPL-QTOT-RSRV1 = VCPLHD04.TS-PL-QTOT-RSRV;
    VCPLHD04.TS-CPL-QTOT-RCV1 = VCPLHD04.TS-PL-QTOT-RCV;
    VCPLHD04.TS-CPL-TOT-CRTN1 = VCPLHD04.TS-PL-TOT-CRTN;
    VCPLHD04.TS-CPL-TOT-CBM1 = VCPLHD04.TS-PL-TOT-CBM;
    VCPLHD04.TS-CPL-TOT-KG1 = VCPLHD04.TS-PL-TOT-KG;

    VCPLHD04.ZZ-SDT = XX0XW01.XX0XWDAT; /* set up date*/
    VCPLHD04.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM; /* set up time*/
    VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* change date*/
    VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* change time*/
    VCPLHD04.ZZ-CHNG-CNT = 0; /* change count*/

    TS0I-36220(); /* ===> Insert the new CPLHD04 row*/

    if (TS0IW04.TS0IW-CREATE-CPLIT-DETAIL[TS0IWIXW] == "Y"
     && TS0IW05.TSIDETFL[TS0IWIXW] == "Y")
      TS0I-36230(); /* ===> Process CPLIT01 row*/
    end

    /* -----------------------------------------------------------*/
    /* Accumulate the field for the container need for insert*/
    /* -----------------------------------------------------------*/

    TS0IW04.TSIPLCBM = TS0IW04.TSIPLCBM + VCPLHD04.TS-PL-TOT-CBM;
    TS0IW04.TSIPLTKG = TS0IW04.TSIPLTKG + VCPLHD04.TS-PL-TOT-KG;


    TS0IW01.TS0IWIXW = TS0IW01.TS0IWIXW + 1; /* increment index*/

  end


  TS0I-36240(); /* ===> Create container row*/


   /* **                                                        ***/
   /* ********************** End of TS0I-36200 ********************/
end // end TS0I-36200

// Clear the container fields
Function TS0I-36210()
   /* ***********************************************************/
   /* **    Clear the container buckets since this will be*/
   /* **    a summary shipment with no detail.*/
   /* ***********************************************************/


  VCPLHD04.TS-NIKE-CNTNR-NBR1 = 0;
  VCPLHD04.TS-NIKE-CNTNR-NBR2 = 0;
  VCPLHD04.TS-NIKE-CNTNR-NBR3 = 0;
  VCPLHD04.TS-NIKE-CNTNR-NBR4 = 0;
  VCPLHD04.TS-NIKE-CNTNR-NBR5 = 0;
  VCPLHD04.TS-NIKE-CNTNR-NBR6 = 0;
  VCPLHD04.TS-NIKE-CNTNR-NBR7 = 0;
  VCPLHD04.TS-NIKE-CNTNR-NBR8 = 0;

  VCPLHD04.TS-CPL-QTOT-SHP1 = 0;
  VCPLHD04.TS-CPL-QTOT-SHP2 = 0;
  VCPLHD04.TS-CPL-QTOT-SHP3 = 0;
  VCPLHD04.TS-CPL-QTOT-SHP4 = 0;
  VCPLHD04.TS-CPL-QTOT-SHP5 = 0;
  VCPLHD04.TS-CPL-QTOT-SHP6 = 0;
  VCPLHD04.TS-CPL-QTOT-SHP7 = 0;
  VCPLHD04.TS-CPL-QTOT-SHP8 = 0;

  VCPLHD04.TS-CPL-QTOT-RSRV1 = 0;
  VCPLHD04.TS-CPL-QTOT-RSRV2 = 0;
  VCPLHD04.TS-CPL-QTOT-RSRV3 = 0;
  VCPLHD04.TS-CPL-QTOT-RSRV4 = 0;
  VCPLHD04.TS-CPL-QTOT-RSRV5 = 0;
  VCPLHD04.TS-CPL-QTOT-RSRV6 = 0;
  VCPLHD04.TS-CPL-QTOT-RSRV7 = 0;
  VCPLHD04.TS-CPL-QTOT-RSRV8 = 0;

  VCPLHD04.TS-CPL-QTOT-RCV1 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV2 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV3 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV4 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV5 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV6 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV7 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV8 = 0;

  VCPLHD04.TS-CPL-TOT-CRTN1 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN2 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN3 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN4 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN5 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN6 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN7 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN8 = 0;

  VCPLHD04.TS-CPL-TOT-CBM1 = 0;
  VCPLHD04.TS-CPL-TOT-CBM2 = 0;
  VCPLHD04.TS-CPL-TOT-CBM3 = 0;
  VCPLHD04.TS-CPL-TOT-CBM4 = 0;
  VCPLHD04.TS-CPL-TOT-CBM5 = 0;
  VCPLHD04.TS-CPL-TOT-CBM6 = 0;
  VCPLHD04.TS-CPL-TOT-CBM7 = 0;
  VCPLHD04.TS-CPL-TOT-CBM8 = 0;

  VCPLHD04.TS-CPL-TOT-KG1 = 0;
  VCPLHD04.TS-CPL-TOT-KG2 = 0;
  VCPLHD04.TS-CPL-TOT-KG3 = 0;
  VCPLHD04.TS-CPL-TOT-KG4 = 0;
  VCPLHD04.TS-CPL-TOT-KG5 = 0;
  VCPLHD04.TS-CPL-TOT-KG6 = 0;
  VCPLHD04.TS-CPL-TOT-KG7 = 0;
  VCPLHD04.TS-CPL-TOT-KG8 = 0;

   /* **                                                        ***/
   /* ********************** End of TS0I-36210 ********************/
end // end TS0I-36210

// Add (A ) insert row   VCPLHD04
Function TS0I-36220()
   /* ------------------------------------------------------------*/
                   /* ADD PACKING LIST HEADER ROW*/
   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "A "; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/

   /* =========== Next Sentence =============>*/

  else

    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "I-36220"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0IM003.XXXPRCNM = "I-36220"; /* Process name*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0Y-36220 ********************/
end // end TS0I-36220

// Process CPLIT01 detail rows
Function TS0I-36230()
   /* ------------------------------------------------------------*/

                    /* PROCESS CPLIT ROWS*/

    /* 1) Select (S4) CPLIT rows for current CPLHD04 row*/
    /* being processed in the CPLHD04 hold table.*/
    /* 2) For every CPLIT01 row selected build/insert CPLIT01 row*/
    /* into D.B. using new data:  NIKE SHIP ID, P/L NBR, NIKE*/
    /* CNTNR # = 1, and set ZZ fields current.*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TS0IW05.TSFSHPID[TS0IWIXW]; /* move in nike ship*/
  TSOREC.TSIPLNBR = TS0IW05.TSIPLNBR[TS0IWIXW]; /* move p/l nbr*/

  TS0I-36231(); /* Select (S4) CPLIT01 rows*/

  TS0IW01.TS0IWSW1 = "N"; /* Initialize end of data switch*/

  TS0I-36232(); /* Fetch (N4) CPLIT01 row*/

   /* -------> Prime Read*/
           /* ----------*/

  while (TS0IW01.TS0IWSW1 == "N") /* Until end of selected set CPLIT01*/

   /* Move in new fields*/
    TSOREC.TSFSHPID = VCPLHD04.TS-NIKE-SHP-ID; /* Nike ship id*/
    TSOREC.TSHNKCN = 1; /* Nike cntnr nbr*/
    TSOREC.TSIPLNBR = VCPLHD04.TS-NIKE-PL-NBR; /* Nike P/L nbr*/

    TSOREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set-up date*/
    TSOREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    TSOREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    TSOREC.ZZZCHGCT = 0; /* Change count*/

    TS0I-36233(); /* Add (A ) CPLIT01 row*/

    TSOREC.TSFSHPID = TS0IW05.TSFSHPID[TS0IWIXW]; /* move in nike ship*/
    TSOREC.TSIPLNBR = TS0IW05.TSIPLNBR[TS0IWIXW]; /* move p/l nbr*/

    TS0I-36232(); /* Fetch (N4) next CPLIT01 row*/

    /* -------> Driving Read*/
             /* ------------*/

  end /* ===> Until end of selected set*/

  TS0I-36234(); /* Close (C4) CPLIT01 set*/


   /*  */
   /*  */
   /* ********************** End of TS0I-36230 ********************/
end // end TS0I-36230

// Select (S4) set       VCPLIT01
Function TS0I-36231()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPLIT TABLE ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("S4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "I-36231"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM001.XXXPRCNM = "I-36231"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-36231 ********************/
end // end TS0I-36231

// Fetch  (N4) next row  VCPLIT01
Function TS0I-36232()
   /* ------------------------------------------------------------*/

              /* FETCH (N4) next row CPLIT*/

      /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Valid return codes*/
    /* ====== NEXT SENTENCE =========>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100)
      TS0IW01.TS0IWSW1 = "Y"; /* ===> end of cursor switch*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "I-36232"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM001.XXXPRCNM = "I-36232"; /* Process name*/

      exit stack; /* ===> exit to re-display map*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-36232 ********************/
end // end TS0I-36232

// Insert (A ) Row       VCPLIT01
Function TS0I-36233()
   /* ------------------------------------------------------------*/

                     /* ADD (A ) CPLIT DETAIL ROW*/

   /* ------------------------------------------------------------*/


  call "IO2580" ("A ", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== NEXT SENTENCE =============>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "I-36233"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0IM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM001.XXXPRCNM = "I-36233"; /* Process name*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0I-36233 ********************/
end // end TS0I-36233

// Close  (C4) set       VCPLIT01
Function TS0I-36234()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPLIT ROWS*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C4", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "I-36234"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM001.XXXPRCNM = "I-36234"; /* Process name*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-36234 ********************/
end // end TS0I-36234

// Add (A ) insert row   VCNTNR01
Function TS0I-36240()
   /* ------------------------------------------------------------*/

                    /* ADD CONTAINER ROW*/

    /* 1) Move in appropriate fields to TSHREC*/
    /* 2) Add the container row*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* initialize tshrec*/

  TSHREC.TSFSHPID = TS0IM003.TSFSHPID; /* Nike shipment number*/
  TSHREC.TSHNKCN = 1; /* Nike container number*/
  TSHREC.TSHCNTNR = "CONTAINER-01"; /* container number*/
  TSHREC.YCNCD = "  "; /* container type*/
  TSHREC.TSHSTAT = "IP"; /* container status*/
  TSHREC.TSHTCBM = TS0IW04.TSIPLCBM; /* total cubic meters*/
  TSHREC.TSHTKG = TS0IW04.TSIPLTKG; /* total kilograms*/
  TSHREC.TSHSEAL = " "; /* seal*/
  TSHREC.TSHRCTDT = 0; /* container receipt date*/
  TSHREC.SL1RCRNO = 0; /* RCV report number*/
  TSHREC.XRECD = " "; /* receipt exception  code*/

  TSHREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move in set up date*/
  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
  TSHREC.ZZZCHGCT = 0; /* initialize change count*/


  call "IO2590" ("A ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* =========== Next Sentence =======>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "I-36240"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0IM003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0IM003.XXXPRCNM = "I-36240"; /* Process name*/

    exit stack; /* ===> exit to display error message*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-36240 ********************/
end // end TS0I-36240

// Process transfer to TS0T
Function TS0I-36300()
   /* ------------------------------------------------------------*/
   /* Transfer to application TS0T*/
   /* ------------------------------------------------------------*/


  TSWREC.TSFSHPID = TSQREC.TSQNBRNX; /* move in Nike-shp-id*/
  TSWREC.TSWADDMO = "4";
  TSWREC.TSWREJFL = "N";
  TSWREC.TSWHDRFL = "N";
  TSWREC.TSWCNTFL = "Y"; /* ===> Containers created flag*/
  TSWREC.TSWCPLFL = "Y"; /* ===> P/Ls       created flag*/
  TSWREC.TSWCRTFL = "N";
  TSWREC.TSFBOL = " ";
  TSWREC.TSACARCD = " ";
  TSWREC.TS5CRAFT = " ";
  TSWREC.TSFSHPNB = " ";
  TSWREC.TSEORIG = " ";
  TSWREC.TSEDEST = " ";
  TSWREC.XWHCD = " ";
  COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

  COMMAREA.CATOAP = "TS0T"; /* Set to TS0T menu*/

  XSTSS01(); /* transfer to application*/

  TS0IM003.XXXPRCNM = "I-36300"; /* Process name*/

  exit stack; /* Exit to redisplay map*/



   /* **                                                        ***/
   /* ********************** End of TS0I-36300 ********************/
end // end TS0I-36300

// Special initialization (TS0I)
Function TS0I001()
   /* ------------------------------------------------------------*/

              /* SPECIAL INITIALIZATION (TS0I)*/

   /* This special initialization process is required by*/
   /* TS0I to determine whether the entry into this application*/
   /* is from the shipment add process.  This process determines*/
   /* whether the user has come from TS0T, TS0U, TS0V, or TS0W.*/

   /* 1) If the user has come from within shipment add;*/
      /* a) if the reject flag has been set in common pass data*/
         /* - delete entire shipment*/
         /* - display screen 1 for new shipment add*/
      /* b) else*/
         /* - display screen 2 for accept or reject of shipment*/
   /* 2) Else if the user has come from without shipment add;*/
      /* a) display screen 1 for new shipment add*/

   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0U" /* If comming from another*/
   || COMMAREA.CAFROMAP == "TS0V" /* shipment add application*/
   || COMMAREA.CAFROMAP == "TS0W" 
   || COMMAREA.CAFROMAP == "TS02")

    if (TSWREC.TSWREJFL == "Y") /* if shp reject flag is yes*/
      TS0I010(); /* delete entire shipment*/
      TS0IW01.TS0IWMAP = "1"; /* set to map 1 for new shp add*/
    else
      TS0IW01.TS0IWMAP = "2"; /* set to map 2 for shp acc/rej*/
    end

  end

  if (COMMAREA.CAFROMAP == "TS0T" /* If comming from another*/
   && TSWREC.TSWADDMO == "4"      
  )                              
    TS0I010(); /* delete entire shipment*/

    TS0IW01.TS0IWMAP = "1"; /* set to map 1 for new shp add*/

  end
end // end TS0I001

// Shipment Add Menu/Accept
Function TS0I002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map for Shipment menu.*/
   /* 2) Otherwise, if specified, display the second map for*/
          /* shipment accept menu.*/
   /* 3) Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0IW01.TS0IWMAP == "1") /* Map 1 was requested*/
    TS0I100(); /* Display Shipment Add map*/
  else
    if (TS0IW01.TS0IWMAP == "2") /* Map 2 was requested*/
      TS0I200(); /* Display Shipment Accept/Reject map*/
    else
      if (TS0IW01.TS0IWMAP == "3") /* Map 2 was requested*/
        TS0I-30000(); /* Display Shipment Accept/Reject map*/
      else
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1PGMNM = "TS0T002 "; /* Process name*/
        TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
        TA1REC.TA1MAP = TS0IW01.TS0IWMAP; /* Map name*/
        SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

        XSPF4(); /* Exit to Master Menu*/

      end
    end
  end


end // end TS0I002

// Delete entire shipment
Function TS0I010()
   /* ------------------------------------------------------------*/

                  /* DELETE ENTIRE SHIPMENT*/

      /* 1) Delete the container packing list.*/
      /* 1) Delete the shipment containers.*/
      /* 1) Delete the shipment header.*/

   /* ------------------------------------------------------------*/

  if (TSWREC.TSWCPLFL == "Y") /* if container packing lists exists*/
    TS0I011(); /* delete the container packing lists*/
  end

  if (TSWREC.TSWCNTFL == "Y") /* if containers exist*/
    TS0I012(); /* delete the containers*/
  end

  if (TS0IW01.TS0IWPSW == "N") /* if all other deletes are ok*/
    TS0I013(); /* delete the shipment header*/
  end

end // end TS0I010

// Delete the container pack list
Function TS0I011()
   /* ------------------------------------------------------------*/

              /* DELETE THE CONTAINER PACKING LIST*/

      /* 1) Select the set of container packing list rows.*/
      /* 2) Fetch all container packing list row keys into ws.*/
      /* 2) While container packing list rows exist in ws.*/
         /* a) get the container packing list.*/
         /* b) if the detail flag is set to 'yes'.*/
              /* i) select the set of cartons*/
             /* ii) while cartons exist to fetch*/
                 /* - fetch the carton*/
                 /* - delete the carton*/
            /* iii) close the selected set of cartons*/
         /* c) delete the container packing list.*/
      /* 3) Close the selected set of container packing lists.*/

    /* If any errors occur in the process of selecting,*/
    /* fetching, deleting, and closing the database table rows,*/
    /* the errors will be handled in the appropriate statement*/
    /* group and 'EZEFLO' will be used to exit and display the*/
    /* map.*/

   /* ------------------------------------------------------------*/

  TS0IW01.TS0IWSW1 = "N"; /* set up end of set switches*/
  TS0IW01.TS0IWSW2 = "N";

  TS0IS04(); /* select the set of container packing lists*/

  TS0IW01.TS0IWIXM = 1; /* initialize counter*/
  while (TS0IW01.TS0IWSW1 == "N") /* while not end of set cpl*/
    TS0IS08(); /* fetch the cpl row*/
    TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* increment counter*/
  end

  TS0IS12(); /* close the selected set of container pack list rows*/

  TS0IW01.TS0IWIXM = 1; /* initialize counter*/
  while (TS0IW02.TSFSHPID[TS0IWIXM] > 0 /* while not end of set cpl*/
   && TS0IW01.TS0IWIXM <= TS0IW01.TS0IWMAX) /* and less than max*/
    if (TS0IW02.TSIDETFL[TS0IWIXM] == "Y") /* carton detail exists*/

      TS0IS16(); /* select the set of cartons*/

      TS0IW01.TS0IWIXW = 1; /* initialize counter*/
      while (TS0IW01.TS0IWSW2 == "N") /* while not end of set cartons*/
        TS0IS20(); /* fetch the carton row*/
        TS0IW01.TS0IWIXW = TS0IW01.TS0IWIXW + 1; /* increment counter*/
      end

      TS0IS28(); /* close the selected carton set*/

      TS0IW01.TS0IWIXW = 1; /* initialize counter*/
      while (TS0IW03.TSIPLNBR[TS0IWIXW] > 0 /* while not end of cartons*/
       && TS0IW01.TS0IWIXW <= TS0IW01.TS0IWMX2) /* and less than max*/
        TS0IS24(); /* delete the carton*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit db deletions*/
        TS0IW01.TS0IWIXW = TS0IW01.TS0IWIXW + 1; /* increment counter*/
      end

    end
    TS0IS32(); /* delete the container pack list row*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit db deletions*/
    TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* increment counter*/
  end


end // end TS0I011

// Delete the containers
Function TS0I012()
   /* ------------------------------------------------------------*/

                 /* DELETE THE CONTAINERS*/

      /* 1) Select the set of container rows.*/
      /* 2) While container rows exist to fetch.*/
         /* a) fetch the container.*/
         /* c) delete the container.*/
      /* 3) Close the selected set of containers.*/

    /* If any errors occur in the process of selecting,*/
    /* fetching, deleting, and closing the database table rows,*/
    /* the errors will be handled in the appropriate statement*/
    /* group and 'EZEFLO' will be used to exit and display the*/
    /* map.*/

   /* ------------------------------------------------------------*/

  TS0IW01.TS0IWSW1 = "N"; /* set up end of set switch*/

  TS0IS36(); /* select the set of containers*/

  TS0IS40(); /* fetch the first container*/

  while (TS0IW01.TS0IWSW1 == "N") /* while not end of set containers*/
    TS0IS44(); /* delete the container row*/
    TS0IS40(); /* fetch the next container row*/
  end

  TS0IS48(); /* close the selected set of container rows*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit all db deletions*/


end // end TS0I012

// Delete the shpmnt header tbls
Function TS0I013()
   /* ------------------------------------------------------------*/

                /* DELETE THE SHIPMENT HEADER*/

         /* 1) Select the shipment header.*/
         /* 2) If shipment header address indicator is yes,*/
            /* delete the address row.*/
         /* 3) If shipment header text indicator is yes,*/
            /* delete the text rows.*/
         /* 4) Delete the shipment header.*/

   /* ------------------------------------------------------------*/

  TS0IS52(); /* select the shipment*/

  if (TSFREC.TSFADRID == "Y") /* if address exists*/
    TS0IS56(); /* delete the address*/
  end

  if (TSFREC.TSFTXTID == "Y") /* if text exists*/
    TS0IW01.TS0IWIXM = 1; /* set index*/
    while (TS0IW01.TS0IWIXM <= 2) /* until end of text lines*/
      TS0IS60(); /* delete the text*/
      TS0IW01.TS0IWIXM = TS0IW01.TS0IWIXM + 1; /* increment*/
    end
  end

  TS0IS64(); /* delete the shipment header*/


end // end TS0I013

// Shipment Add Menu
Function TS0I100()
   /* ------------------------------------------------------------*/

               /* SHIPMENT HEADER ADD MAIN MAP*/

   /* This is the process used to display the shipment*/
   /* header add main map.*/
   /* Processing always returns to the top of this process and*/
   /* falls through to subordinate processes until an error is*/
   /* found or a valid request is processed. Sequence is as*/
   /* follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0I110(); /* Format and display the map*/

  TS0I120(); /* Check attention identifier*/

  TS0I130(); /* Reset fields to normal intensity*/

  TS0I140(); /* Verify the entered data*/

  TS0I150(); /* Process valid input request*/


end // end TS0I100

// Format and display the map
Function TS0I110()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* If no error to display:*/
     /* 1) clear the map.*/
   /* Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  /* IF EZEMNO NE 0;                   /* Error message to display*/
  /* SET TS0IM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  TS0IM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0IM001 ;

  TS0IW01.TS0IWPSW = "N"; /* Reset error switch*/

  TS0I111(); /* check for user ? inquiry*/


end // end TS0I110

// Check for ? inquiry by user
Function TS0I111()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0IM001.XGPCD == "?") /* if ? in general prod code*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "                   GPC "; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXGP01(); /* perform product code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the container  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      TS0IM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
    else
      TS0IM001.XGPCD = " "; /* clear fields*/
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0IW01.TS0IWPSW = "Y"; /* redisplay the map by setting fake*/
                                   /* error*/

  end


end // end TS0I111

// Check attention identifier
Function TS0I120()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If PF16 pressed, exit to published schedule application.*/
   /* 6) If PF17 pressed, exit to schedule inquiry application.*/
   /* 7) If any AI pressed other than ENTER indicate PF/PA key*/
      /* error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "TS0I"; /* restart this application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    XSTSS01(); /* Exit to another application*/
    TS0IM001.XXXPRCNM = "TS0I120"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0IM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && TS0IM001.CATOAP != "TS0W"     /* Not fast path to ts0w*/
     && TS0IM001.CATOAP != "TS0T")    /* Not fast path to ts0t*/
      set TSWREC empty; /* clear pass record*/
      COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move record*/
      COMMAREA.CATOAP = TS0IM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0IM001.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      if (TS0IM001.CATOAP == "TS0W" /* ts0w*/
       || TS0IM001.CATOAP == "TS0T") /* ts0t*/
        converseLib.validationFailed(6); /* Invalid transfer*/
      else
        converseLib.validationFailed(5); /* Indicate PF key not valid*/
      end
      TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    end
    set TS0IM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0IM001.XXXPRCNM = "TS0I120"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    set TSWREC empty; /* clear pass record*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move record*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    XSTSS01(); /* Exit to another application*/
    TS0IM001.XXXPRCNM = "TS0I120"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0IM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    XSTSS01(); /* Exit to another application*/
    TS0IM001.XXXPRCNM = "TS0I120"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0IM001.XXXPRCNM = "TS0I120"; /* Process name*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0I120

// Reset highlighted fields
Function TS0I130()
   /* ------------------------------------------------------------*/

              /* RESET HIGHLIGHTED FIELDS*/

   /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0IM001.TS0IMOPT initialAttributes; /* Reset all map fields*/
  set TS0IM001.XGPCD initialAttributes;
  set TS0IM001.TS0IMDFL initialAttributes;


end // end TS0I130

// Verify the entered data
Function TS0I140()
   /* ------------------------------------------------------------*/

                  /* VERIFY THE ENTERED DATA*/

       /* Edit;*/
           /* 1) valid domestic flag entered*/
           /* 2) valid GPC code is entered*/
           /* 3) valid screen option entered*/

   /* ------------------------------------------------------------*/

  if (TS0IM001.TS0IMDFL != "Y" /* if option entered not valid*/
   && TS0IM001.TS0IMDFL != "N" 
   && TS0IM001.TS0IMDFL != " ")
    converseLib.validationFailed(46); /* Display error message*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    TS0IM001.XXXPRCNM = "TS0I140"; /* Process name*/
    set TS0IM001.TS0IMDFL cursor, modified, bold; /* highlight field*/
  else
    if (TS0IM001.TS0IMDFL == " ")
      TSWREC.TSWDOMFL = "N"; /* save dom flag*/
      TS0IM001.TS0IMDFL = "N"; /* set dom flag*/
    else
      TSWREC.TSWDOMFL = TS0IM001.TS0IMDFL; /* save dom flag*/
    end
  end

  if (TS0IM001.XGPCD == " ") /* if general product is blank*/
    converseLib.validationFailed(101); /* Display error message*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    TS0IM001.XXXPRCNM = "TS0I140"; /* Process name*/
    set TS0IM001.XGPCD cursor, modified, bold; /* highlight field*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0IM001.XGPCD in XGPTBL.XGPCD) /* Check valid code*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XGPTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(101); /* Display error message*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
      TS0IM001.XXXPRCNM = "TS0T140"; /* Process name*/
      set TS0IM001.XGPCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TSWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex]; /* save code*/
    end
  end

  if (TS0IM001.TS0IMOPT != "1" /* if option entered not valid*/
   && TS0IM001.TS0IMOPT != "2" 
   && TS0IM001.TS0IMOPT != "3" 
   && TS0IM001.TS0IMOPT != "4")
    converseLib.validationFailed(09); /* Display error message*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    TS0IM001.XXXPRCNM = "TS0I140"; /* Process name*/
    set TS0IM001.TS0IMOPT cursor, modified, bold; /* highlight field*/
  else
    TSWREC.TSWADDMO = TS0IM001.TS0IMOPT; /* save option to pass*/
  end


end // end TS0I140

// Process valid input request
Function TS0I150()
   /* ------------------------------------------------------------*/

             /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If ENTER is pressed, and no data input errors;*/
      /* - get the next nike shipment number*/
   /* 2) If no errors occurred in the IOMOD call;*/
      /* - move common pass data to TSWREC*/
      /* - move TSWREC to commarea.causera*/
      /* - DXFR to TS0T shipment header add application*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed and no errors*/
   && TS0IW01.TS0IWPSW == "N")     

    if (TS0IM001.TS0IMOPT == "4") /* If combine shipments requested*/

      TS0IW01.TS0IWMAP = "3";
      TS0IW04.TS0IWSWR = "Y";

    else

      TS0I151(); /* get the next Nike shipment number*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If shipment number call OK*/

        TSWREC.TSFSHPID = TSQREC.TSQNBRNX; /* move in Nike-shp-id*/
        TSWREC.TSWREJFL = "N";
        TSWREC.TSWHDRFL = "N";
        TSWREC.TSWCNTFL = "N";
        TSWREC.TSWCPLFL = "N";
        TSWREC.TSWCRTFL = "N";
        TSWREC.TSFBOL = " ";
        TSWREC.TSACARCD = " ";
        TSWREC.TS5CRAFT = " ";
        TSWREC.TSFSHPNB = " ";
        TSWREC.TSEORIG = " ";
        TSWREC.TSEDEST = " ";
        TSWREC.XWHCD = " ";
        COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

        if (TS0IM001.TS0IMOPT == "3") /* If tentative shipment requested*/
          COMMAREA.CATOAP = "TS0W"; /* Set to TS0W menu*/
        else
          COMMAREA.CATOAP = "TS0T"; /* Set to TS0T menu*/
        end

        XSTSS01(); /* transfer to application*/

        TS0IW01.TS0IWPSW = "Y"; /* If trans fails indicate error*/
        TS0IM001.XXXPRCNM = "TS0I150"; /* Process name*/
        exit stack; /* Exit to redisplay map*/

      end

    end /* ===> combine shipments requested*/

  end


end // end TS0I150

// Get next Nike shipment number
Function TS0I151()
   /* ------------------------------------------------------------*/

               /* SELECT NEXT NIKE SHIPMENT NUMBER*/

   /* Select the shipment Number.*/
   /* If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSQREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSQREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/

  call "IO2530" ("G ", SQLCA, TSQREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    converseLib.validationFailed(09); /* Indicate not available*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0I151"; /* Process name*/
      TA1REC.TA1LOC = "SELECT A TABLE ROW";
      TA1REC.TA1MAP = "TS0IM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSCTL01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM001.XXXPRCNM = "TS0I151"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if errors occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0I151

// Shipment accept menu
Function TS0I200()
   /* ------------------------------------------------------------*/

                 /* SHIPMENT ACCEPT MENU*/

   /* This is the main process used to display the shipmnt accept*/
   /* map.  Processing always returns to the top of this process*/
   /* and falls through to subordinate processes until an error*/
   /* is found or PF3 is requestes.*/
   /* Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0I210(); /* Format and display the map*/

  TS0I220(); /* Check attention identifier*/

  TS0I230(); /* Reset fields to normal intensity*/

  TS0I240(); /* Verify the entered data*/

  TS0I250(); /* Process valid input request*/


end // end TS0I200

// Format and display the map
Function TS0I210()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0IW01.TS0IWPSW == "N") /* No errors*/
    TS0IM002.TSFSHPID = TSWREC.TSFSHPID; /* move in fields*/
    TS0IM002.TSFBOL = TSWREC.TSFBOL;
    TS0IM002.TSACARCD = TSWREC.TSACARCD;
    TS0IM002.TS5CRAFT = TSWREC.TS5CRAFT;
    TS0IM002.TSFSHPNB = TSWREC.TSFSHPNB;
    TS0IM002.TSEORIG = TSWREC.TSEORIG;
    TS0IM002.TSEDEST = TSWREC.TSEDEST;
  end

  /* IF EZEMNO NE 0;                   /* error message to display*/
  /* SET TS0IM002 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  TS0IM002.XXXCURDT = VGVar.currentShortGregorianDate; /* move in date*/

  converse TS0IM002 ;

  TS0IW01.TS0IWPSW = "N"; /* reset error flag*/

end // end TS0I210

// Check attention identifier
Function TS0I220()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    TS0IM002.TS0IMOPT = " "; /* clear map option*/
    exit stack; /* exit to redisplay the map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0IM002.XXXPRCNM = "TS0I220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0I220

// Reset highlighted fields
Function TS0I230()
   /* ------------------------------------------------------------*/

              /* RESET HIGHLIGHTED FIELDS*/

   /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0IM002.TS0IMOPT initialAttributes; /* Reset all map fields*/


end // end TS0I230

// Verify data entered
Function TS0I240()
   /* ------------------------------------------------------------*/

                  /* VERIFY THE ENTERED DATA*/

   /* Edit the option entered.*/

   /* ------------------------------------------------------------*/

  if (TS0IM002.TS0IMOPT != 1 /* if the option not valid*/
   && TS0IM002.TS0IMOPT != 2 
   && TS0IM002.TS0IMOPT != 3)
    converseLib.validationFailed(9); /* Display error message*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    TS0IM002.XXXPRCNM = "TS0I240"; /* Process name*/
    set TS0IM002.TS0IMOPT cursor, modified, bold; /* highlight field*/
  end


end // end TS0I240

// Process valid input request
Function TS0I250()
   /* ------------------------------------------------------------*/

             /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If ENTER is pressed, update to appropriate shipment*/
      /* status and proceed to appropriate application.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed and no errors*/
   && TS0IW01.TS0IWPSW == "N")     
    if (TS0IM002.TS0IMOPT == 1 /* If option 1 or 2 entered*/
     || TS0IM002.TS0IMOPT == 2)
      TS0I251(); /* Update ship hdr to IT,CC,orTN*/
      TS0I252(); /* Update packing lists IT,CC,CR,orTN*/
      TS0I253(); /* Update containers  to IT,CC,orTN*/
      if (TSFREC.YSTCD == "BA") /* if shp-typ is 'ba'*/
        TS0I254(); /* submit batch job ts2461*/
      end

      if (TSFREC.YSTCD != "TN") /* if shp-typ is not tentative*/
        TS0I255(); /* submit batch job TS4031*/
      end

      if (SQLCA.VAGen_SQLCODE == 0) /* if update successful*/
        if (TS0IM002.TS0IMOPT == 1) /* if option 1*/
          set TS0IM001 initial; /* clear the map*/
          set TS0IM002 initial; /* clear the map*/
          TS0IM001.TS0IMMSG = "SHIPMENT SUCCESSFULLY ADDED";
          TS0IW01.TS0IWMAP = "1"; /* go to map 1*/
        end
        if (TS0IM002.TS0IMOPT == 2) /* if option 2*/
          if (COMMAREA.CACHGFL == "N") /* if user has no change ability*/
            set TS0IM001 initial; /* clear the map*/
            set TS0IM002 initial; /* clear the map*/
            TS0IM001.TS0IMMSG = "SHIPMENT SUCCESSFULLY ADDED";
            TS0IW01.TS0IWMAP = "1"; /* go to map 1*/
          else
            COMMAREA.CATOAP = "TS0J"; /* Set to TS0J menu*/
            COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/

            XSTSS01(); /* transfer to application*/

            TS0IW01.TS0IWPSW = "Y"; /* if trans fails then error*/
            TS0IM002.XXXPRCNM = "TS0I250"; /* Process name*/
            exit stack; /* Exit to redisplay map*/
          end
        end
      end
    else
      if (TS0IM002.TS0IMOPT == 3) /* if option 3*/
        if (TS0IW01.TS0IWWFL == "N") /* if no warning set*/
          TS0IM002.TS0IMMSG = "PRESS ENTER TO CONFIRM DELETE";
          TS0IW01.TS0IWWFL = "Y"; /* set warn flag*/
        else
          TS0I010(); /* delete the entire shipment*/
          if (TS0IW01.TS0IWPSW == "N") /* if no errors occurred*/
            set TS0IM001 initial; /* clear the map*/
            set TS0IM002 initial; /* clear the map*/
            TS0IM001.TS0IMMSG = "SHIPMENT SUCCESSFULLY REJECTED";
            TS0IW01.TS0IWMAP = "1"; /* go to map 1*/
            TS0IW01.TS0IWWFL = "N"; /* reset warn flag*/
          end
        end
      end
    end
  end


end // end TS0I250

// Update shp hdr row IT,TN,CC
Function TS0I251()
   /* ------------------------------------------------------------*/

               /* Update the shipment header row*/

   /* 1) Select the shipment header row.*/
   /* 2) If sqlcode eq 0, then update the shipment header row.*/

   /* ------------------------------------------------------------*/

  TS0IS68(); /* Select the shipment header row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If the row was found*/

    TS0IS69(); /* Check date diff between atd and eta*/
    if (TA2REC.TA2DBDDN == 3) /* If default difference*/
      TS0IS70();
                                   /* Obtain transit time from orig to dest*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
        TS0IS71(); /* Calc new eta by adding tt to atd*/
      end
    end

    TSFREC.TSEORIG = TSWREC.TSEORIG; /* Move in orig cd*/

    TS0IS72(); /* update the shipment header row selected set*/

  end


end // end TS0I251

// Update p/l rows to IT,TN,CC,CR
Function TS0I252()
   /* ------------------------------------------------------------*/

               /* UPDATE THE PACKING LIST ROWS TO "IT" or "TN"*/

   /* 1) Select the set of packing list rows.*/
   /* 2) Fetch the first row.*/
   /* 3) While rows exist to fetch,*/
      /* a. Update the packing list row status to 'IT' or 'TN'*/
      /* b. Fetch the next row.*/
   /* 4) Close the select set of packing list rows.*/

   /* ------------------------------------------------------------*/

  TS0IS04(); /* Select the set of packing list rows*/

  TS0IS76(); /* Fetch the first packing list row*/

  while (SQLCA.VAGen_SQLCODE == 0) /* While rows are found and no other errors*/

    TS0IS80(); /* Update the  packing list row*/

    TS0IS76(); /* Fetch the next packing list row*/

  end

  TS0IS12(); /* Close the selected set of packing list rows*/



end // end TS0I252

// Update cntnr rows to IT,CC,CR
Function TS0I253()
   /* ------------------------------------------------------------*/

        /* UPDATE THE CNTNR ROWS TO IT,TN, or CC*/

   /* 1) Select the set of packing list rows.*/
   /* 2) Fetch the first row.*/
   /* 3) While rows exist to fetch,*/
      /* a. Update the packing list row status*/
      /* b. Fetch the next row.*/
   /* 4) Close the select set of packing list rows.*/

   /* ------------------------------------------------------------*/

  TS0IS36(); /* Select the set of containers*/

  TS0IS40(); /* Fetch the first container*/

  while (SQLCA.VAGen_SQLCODE == 0) /* While rows are found and no other errors*/

    TS0IS84(); /* Update the  container*/

    TS0IS40(); /* Fetch the next container*/

  end

  TS0IS48(); /* Close the selected set of containers*/



end // end TS0I253

// process valid input request
Function TS0I254()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
   /* MOVE '600' TO FB09M001.XXXMODID;    /* module identification*/
    converseLib.validationFailed(8); /* Error with print request*/
    exit stack;
  end

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* prod environment*/
    TS0I-085(); /* format prod batch sub*/
  else
    TS0I-086(); /* format test batch sub*/
  end

  return;
                                        /* retn to performing process*/
end // end TS0I254

// submit TS4031 proc
Function TS0I255()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
   /* MOVE '600' TO FB09M001.XXXMODID;    /* module identification*/
    converseLib.validationFailed(8); /* Error with print request*/
    exit stack;
  end

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* prod environment*/
    TS0I-087(); /* format prod batch sub*/
  else
    TS0I-088(); /* format test batch sub*/
  end

  return;
                                        /* retn to performing process*/
end // end TS0I255

// Select set of cont pack list
Function TS0IS04()
   /* ------------------------------------------------------------*/

            /* SELECT SET OF CONTAINER PACKING LIST ROWS*/

       /* Select the set of table rows.*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TSWREC.TSFSHPID; /* move in id*/

  TSGREC.TSNFNC = "S1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0IS04"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM002.XXXPRCNM = "TS0IS04"; /* Process name*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/

  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS04

// Fetch the cont pack list row
Function TS0IS08()
   /* ------------------------------------------------------------*/

            /* FETCH THE CONTAINER PACKING LIST ROW*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0IW01.TS0IWSW1 = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS08"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM001.XXXPRCNM = "TS0IS08"; /* Process name*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    else

      TS0IW02.TSFSHPID[TS0IWIXM] = TSIREC.TSFSHPID; /* save keys*/
      TS0IW02.TSIPLNBR[TS0IWIXM] = TSIREC.TSIPLNBR;
      TS0IW02.TSIDETFL[TS0IWIXM] = TSIREC.TSIDETFL;

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS08

// Close the selected set of CPL
Function TS0IS12()
   /* ------------------------------------------------------------*/

            /* CLOSE THE SELECTED SET OF CARTONS*/

   /* Close the selected set of table rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0IS12"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM001.XXXPRCNM = "TS0IS12"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  if (TS0IW01.TS0IWPSW == "Y") /* if errors occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS12

// Select set of cartons
Function TS0IS16()
   /* ------------------------------------------------------------*/

                   /* SELECT SET OF CARTONS*/

       /* Select the set of table rows.*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TS0IW02.TSFSHPID[TS0IWIXM]; /* move in id*/
  TSOREC.TSIPLNBR = TS0IW02.TSIPLNBR[TS0IWIXM]; /* move in pl*/

  call "IO2580" ("S2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0IS16"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM002.XXXPRCNM = "TS0IS16"; /* Process name*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/

  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS16

// Fetch carton row
Function TS0IS20()
   /* ------------------------------------------------------------*/

                 /* FETCH THE CARTON ROW*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("N2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0IW01.TS0IWSW2 = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS20"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM001.XXXPRCNM = "TS0IS20"; /* Process name*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    else
      TS0IW03.TSIPLNBR[TS0IWIXW] = TSOREC.TSIPLNBR;
      TS0IW03.TSHNKCN[TS0IWIXW] = TSOREC.TSHNKCN;
      TS0IW03.TSOFRCRT[TS0IWIXW] = TSOREC.TSOFRCRT;
      TS0IW03.SY5SZID[TS0IWIXW] = TSOREC.SY5SZID;
    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS20

// Delete the carton row
Function TS0IS24()
   /* ------------------------------------------------------------*/

                   /* DELETE THE CARTON ROW*/

         /* Delete the table row.*/

   /* ------------------------------------------------------------*/

  TSOREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
  TSOREC.TSIPLNBR = TS0IW03.TSIPLNBR[TS0IWIXW];
  TSOREC.TSHNKCN = TS0IW03.TSHNKCN[TS0IWIXW];
  TSOREC.TSOFRCRT = TS0IW03.TSOFRCRT[TS0IWIXW];
  TSOREC.SY5SZID = TS0IW03.SY5SZID[TS0IWIXW];

  call "IO2580" ("D ", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
     /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS24"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/

      TS0IM002.XXXPRCNM = "TS0IS24"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occured*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset all db changes*/
    exit stack; /* exit to redisplay the map*/
  end



end // end TS0IS24

// Close the selected of cartons
Function TS0IS28()
   /* ------------------------------------------------------------*/

            /* CLOSE THE SELECTED SET OF CARTONS*/

   /* Close the selected set of table rows.*/

   /* ------------------------------------------------------------*/

  call "IO2580" ("C2", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Expected return code*/
    TS0IW01.TS0IWSW2 = "N"; /* Reset switch*/

  else /* Unexpected return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0IS28"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM001.XXXPRCNM = "TS0IS28"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS28

// Delete the cont pack list row
Function TS0IS32()
   /* ------------------------------------------------------------*/

            /* DELETE THE CONTAINER PACKING LIST ROW*/

         /* Delete the table row.*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TS0IW02.TSFSHPID[TS0IWIXM]; /* move keys*/
  TSIREC.TSIPLNBR = TS0IW02.TSIPLNBR[TS0IWIXM];

  TSGREC.TSNFNC = "D "; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS32"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/

      TS0IM002.XXXPRCNM = "TS0IS32"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occured*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset any db changes*/
    exit stack; /* exit to redisplay the map*/
  end



end // end TS0IS32

// Select set of containers
Function TS0IS36()
   /* ------------------------------------------------------------*/

                   /* SELECT SET OF CONTAINERS*/

       /* Select the set of table rows.*/

   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = TSWREC.TSFSHPID; /* move in id*/

  call "IO2590" ("S1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0IS36"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM002.XXXPRCNM = "TS0IS36"; /* Process name*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/

  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS36

// Fetch container
Function TS0IS40()
   /* ------------------------------------------------------------*/

                  /* FETCH THE CONTAINER*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2590" ("N1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0IW01.TS0IWSW1 = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS40"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM001.XXXPRCNM = "TS0IS40"; /* Process name*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/
    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS40

// Delete the container row
Function TS0IS44()
   /* ------------------------------------------------------------*/

            /* DELETE THE CONTAINER PACKING LIST ROW*/

         /* Delete the table row.*/

   /* ------------------------------------------------------------*/

  call "IO2590" ("D ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
     /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS44"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/

      TS0IM002.XXXPRCNM = "TS0IS44"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occured*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* reset any db changes*/
    exit stack; /* exit to redisplay the map*/
  end



end // end TS0IS44

// Close the selected cont set
Function TS0IS48()
   /* ------------------------------------------------------------*/

            /* CLOSE THE SELECTED SET OF CONTAINERS*/

   /* Close the selected set of table rows.*/

   /* ------------------------------------------------------------*/

  call "IO2590" ("C1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0IS48"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0IM001.XXXPRCNM = "TS0IS48"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end

  if (TS0IW01.TS0IWPSW == "Y") /* if errors occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS48

// Select the shipment header
Function TS0IS52()
   /* ------------------------------------------------------------*/

                /* SELECT THE SHIPMENT HEADER*/

         /* 1) Select the shipment header.*/

   /* ------------------------------------------------------------*/

  TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* move ship id to record*/

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS52"; /* Process name*/
      TA1REC.TA1LOC = "SELECT THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM002.XXXPRCNM = "TS0IS52"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occured*/
    exit stack; /* exit to redisplay the map*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit db deletion*/
  end


end // end TS0IS52

// Delete the shipment address
Function TS0IS56()
   /* ------------------------------------------------------------*/

                /* DELETE THE SHIPMENT ADDRESS*/

         /* 1) Delete the shipment address.*/

   /* ------------------------------------------------------------*/

  TSSREC.TSFSHPID = TSWREC.TSFSHPID; /* move ship id to record*/

  call "IO2700" ("D ", SQLCA, TSSREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS56"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSADR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM002.XXXPRCNM = "TS0IS56"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occured*/
    exit stack; /* exit to redisplay the map*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit db deletion*/
  end


end // end TS0IS56

// Delete the shipment text
Function TS0IS60()
   /* ------------------------------------------------------------*/

                /* DELETE THE SHIPMENT TEXT*/

         /* 1) Delete the shipment text.*/

   /* ------------------------------------------------------------*/

  TSRREC.TSFSHPID = TSWREC.TSFSHPID; /* move ship id to record*/
  TSRREC.TSRSEQNB = TS0IW01.TS0IWIXM; /* move sequence number*/

  call "IO2690" ("D ", SQLCA, TSRREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS60"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSTXT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM002.XXXPRCNM = "TS0IS60"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occured*/
    exit stack; /* exit to redisplay the map*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit db deletion*/
  end


end // end TS0IS60

// Delete the shipment header
Function TS0IS64()
   /* ------------------------------------------------------------*/

                /* DELETE THE SHIPMENT HEADER*/

         /* 1) Delete the shipment header.*/

   /* ------------------------------------------------------------*/

  TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* move ship id to record*/

  call "IO2540" ("D ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS64"; /* Process name*/
      TA1REC.TA1LOC = "DELETE THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM002.XXXPRCNM = "TS0IS64"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occured*/
    exit stack; /* exit to redisplay the map*/
  else
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit db deletion*/
  end


end // end TS0IS64

// Select the shipment header
Function TS0IS68()
   /* ------------------------------------------------------------*/

               /* SELECT SHIPMENT HEADER ROW*/

   /* Select the shipment header row.*/
   /* If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* move key in*/

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    converseLib.validationFailed(09); /* Indicate not available*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS68"; /* Process name*/
      TA1REC.TA1LOC = "UPDATE THE SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM002.XXXPRCNM = "TS0IS68"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if errors occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS68

// Check diff between atd and eta
Function TS0IS69()
   /* ------------------------------------------------------------*/

               /* CHECK DIFFERENCE BETWEEN ATD AND ETA*/

   /* 1) Add 3 days to ATD for comparison purposes.*/

   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
  TA2REC.TA2GRGGN = TSFREC.TSFDPRTA; /* begn date*/
  TA2REC.TA2DYAOD = 3; /* add 3 days to atd date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* call date routine*/

  if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
    if (TA2REC.TA2GRGGN == TSFREC.TSFDESTE) /* If dates are same*/
      TA2REC.TA2DBDDN = 3; /* Indicate three days difference*/
    end
  end


end // end TS0IS69

// Select from DTRANS.VTTIME01
Function TS0IS70()
   /* ------------------------------------------------------------*/
            /* SELECT FROM DTRANS.VTTIME01*/

    /* 1) Obtain the vessel code from DTRANS.VCRAFT01 first*/
    /* 2) If vessel found, then select transit time*/

   /* ------------------------------------------------------------*/

  set TS5REC empty;
  TS5REC.TSACARCD = TSFREC.TSACARCD;
  TS5REC.TS5CRAFT = TSFREC.TS5CRAFT;

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE != 100) /* handled in previous statement*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS70"; /* Process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0IM002.XXXPRCNM = "TS0IS70"; /* PROCESS NAME*/
    end

  else

    TSEREC.YMTCD = TS5REC.YMTCD;
    TSEREC.TSEORIG = TSWREC.TSEORIG;
    TSEREC.TSEDEST = TSFREC.TSEDEST;

    call "IO2360" ("S ", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

    if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
     && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS70"; /* Process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      TS0IM002.XXXPRCNM = "TS0IS70"; /* Process name*/
    end

  end


end // end TS0IS70

// Calc new eta from transit time
Function TS0IS71()
   /* ------------------------------------------------------------*/

               /* CALCULATE NEW ETA DATE*/

   /* 1) Add transit time to ATD.*/

   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear record*/
  TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
  TA2REC.TA2GRGGN = TSFREC.TSFDPRTA; /* begn date*/
  TA2REC.TA2DYAOD = TSEREC.TSETRNTM; /* add tt days to atd date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* call date routine*/

  if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
    TSFREC.TSFDESTE = TA2REC.TA2GRGGN; /* move in new eta*/
  end


end // end TS0IS71

// Update the shipment header
Function TS0IS72()
   /* ------------------------------------------------------------*/

               /* UPDATE SHIPMENT HEADER ROW*/

   /* Update the shipment header row to 'in-transit'*/
     /* or 'tentative'.*/
   /* If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0W") /* IF COMMING FROM TENTATIVE*/
    TSFREC.YSSCD = "TN"; /* change status to tentative*/
  else
    if (TSFREC.TSFCCLDT > 0) /* If customs cleared date entered*/
      TSFREC.YSSCD = "CC"; /* change status to custom cleared*/
    else
      TSFREC.YSSCD = "IT"; /* change status to in-transit*/
    end
  end

  XX0XS01(); /* get current date and time*/

  TSFREC.TSFSTADT = XX0XW01.XX0XWDAT; /* change status date*/
  TSFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  TSFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  TSFREC.XXX-USER-ID = COMMAREA.CAUSERID;

  call "IO2540" ("U ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    converseLib.validationFailed(09); /* Indicate not available*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS72"; /* Process name*/
      TA1REC.TA1LOC = "UPDATE THE SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM002.XXXPRCNM = "TS0IS72"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if errors occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS72

// Fetch the cont pack list row
Function TS0IS76()
   /* ------------------------------------------------------------*/

            /* FETCH THE CONTAINER PACKING LIST ROW*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS76"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM001.XXXPRCNM = "TS0IS76"; /* Process name*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate problem*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if error occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS76

// Update the packing list
Function TS0IS80()
   /* ------------------------------------------------------------*/

               /* UPDATE CPL HEADER ROW*/

   /* Update the CPL header row to 'in-transit'*/
   /* If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  if (TSIREC.TSISTAT == "IP" /* if the status is in-process*/
   || TSFREC.TSFCCLDT > 0)   /* or custom clear date is entered*/

    if (COMMAREA.CAFROMAP == "TS0W") /* if from tentative application*/
      TSIREC.TSISTAT = "TN"; /* change status to tentative*/
    else
      if (TSFREC.TSFCCLDT > 0) /* If custom clear date entered*/
        if (TSIREC.TSISTAT == "ER") /* If p/l in error*/
          TSIREC.TSISTAT = "CR"; /* change status to cust clr err*/
        else
          TSIREC.TSISTAT = "CC"; /* change status to cust clear*/
        end
      else
        TSIREC.TSISTAT = "IT"; /* change status to in-transit*/
      end
    end

    XX0XS01(); /* get current date and time*/

    TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
    TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
    TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;

    TSGREC.TSNFNC = "U ";
    call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      converseLib.validationFailed(09); /* Indicate not available*/
      TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
        if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
          converseLib.validationFailed(11); /* Indicate not available*/
          TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "TS0I252"; /* Process name*/
        TA1REC.TA1LOC = "UPDATE THE SELECTED TABLE ROW";
        TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
        TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        TS0IM002.XXXPRCNM = "TS0IS80"; /* Process name*/

      end
    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if errors occurred*/
    exit stack; /* exit to redisplay the map*/
  end


end // end TS0IS80

// Update the container status
Function TS0IS84()
   /* ------------------------------------------------------------*/

               /* UPDATE SHIPMENT HEADER ROW*/

   /* Update the shipment header row to 'in-transit'*/
     /* or 'tentative'.*/
   /* If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0W") /* IF COMMING FROM TENTATIVE*/
    TSHREC.TSHSTAT = "TN"; /* change status to tentative*/
  else
    if (TSFREC.TSFCCLDT > 0) /* If customs cleared date entered*/
      TSHREC.TSHSTAT = "CC"; /* change status to custom cleared*/
    else
      TSHREC.TSHSTAT = "IT"; /* change status to in-transit*/
    end
  end

  XX0XS01(); /* get current date and time*/

  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/
  TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;

  call "IO2590" ("U ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    converseLib.validationFailed(09); /* Indicate not available*/
    TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0IW01.TS0IWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0IS84"; /* Process name*/
      TA1REC.TA1LOC = "UPDATE THE SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0IM002.XXXPRCNM = "TS0IS84"; /* Process name*/

    end
  end

  if (TS0IW01.TS0IWPSW == "Y") /* if errors occurred*/
    exit stack; /* exit to redisplay the map*/
  end



end // end TS0IS84

//*** RECORD=TS0IW01 ****
// Working storage for TS0i - Shipment add menu
// ***********************
Record TS0IW01 type basicRecord
  10 TS0IWMAP TS0IWMAP ; 
  10 TS0IWPSW TS0IWPSW ; 
  10 TS0IWWFL TS0IWWFL ; 
  10 TS0IWSW1 TS0IWSW1 ; 
  10 TS0IWSW2 TS0IWSW2 ; 
  10 TS0IWSW3 TS0IWSW3 ; 
  10 TS0IWIXM TS0IWIXM ; 
  10 TS0IWIXW TS0IWIXW ; 
  10 TS0IWIXT TS0IWIXT ; 
  10 TS0IWMAX TS0IWMAX ; 
  10 TS0IWMX2 TS0IWMX2 ; 
  10 TS0IWMXP TS0IWMXP ; 
  10 TS0IW-MAX-PL-DETAIL TS0IW-MAX-PL-DETAIL ; 
  10 TS0IWPRM TS0IWPRM ; 
    15 TS0IWPID TS0IWPID ; 
    15 TS0IWNID TS0IWNID ; 
    15 TS0IWFIL TS0IWFIL ; 
  10 TS0IWPRM-2 TS0IWPRM-2 ; 
    15 TS0IWNID-2 TS0IWNID-2 ; 
    15 TS0IPLNBR-2 TS0IPLNBR-2 ; 
    15 TS0IWFIL-2 TS0IWFIL-2 ; 
  10 TS0IWPRM-3 TS0IWPRM-3 ; 
    15 TS0IWNID-3 TS0IWNID-3 ; 
    15 TS0IWFIL-3 TS0IWFIL-3 ; 
end // end TS0IW01

//*** RECORD=TS0IW02 ****
// Working storage for TS0i - Container packing list keys
// ***********************
Record TS0IW02 type basicRecord
  10 TS0IWLN2 TS0IWLN2 [500] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSIDETFL TSIDETFL ; 
end // end TS0IW02

//*** RECORD=TS0IW03 ****
// Working storage for TS0I - Carton keys
// ***********************
Record TS0IW03 type basicRecord
  10 TS0IWLN3 TS0IWLN3 [5000] ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSHNKCN TSHNKCN ; 
    15 TSOFRCRT TSOFRCRT ; 
    15 SY5SZID SY5SZID ; 
end // end TS0IW03

//*** RECORD=TS0IW04 ****
// Working storage for TS0i - Shipment add menu
// ***********************
Record TS0IW04 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 TS0IWSWR TS0IWSWR ; 
  10 TS0IWSWF TS0IWSWF ; 
  10 TS0IW-CURRENT-PAGE TS0IW-CURRENT-PAGE ; 
  10 TS0IWTSP TS0IWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TS0IW-DATA-MODIFIED TS0IW-DATA-MODIFIED ; 
  10 TSFSHPID TSFSHPID ; 
  10 YSTCD YSTCD ; 
  10 YSTDESC YSTDESC ; 
  10 XGPDESC XGPDESC ; 
  10 TS0IW-PC-PRDCU-ID TS0IW-PC-PRDCU-ID ; 
    15 TS0IW-CXREF-ROOT TS0IW-CXREF-ROOT ; 
    15 * char(2) ; 
  10 PC2CUXID PC2CUXID ; 
    15 TS0IW-CXREF-123 TS0IW-CXREF-123 ; 
      20 TS0IW-CXREF-1 TS0IW-CXREF-1 ; 
      20 TS0IW-CXREF-2 TS0IW-CXREF-2 ; 
      20 TS0IW-CXREF-3 TS0IW-CXREF-3 ; 
    15 TS0IW-CXREF-45 TS0IW-CXREF-45 ; 
  10 PC2NAME PC2NAME ; 
  10 TS0IW-PL-COUNT TS0IW-PL-COUNT ; 
  10 TS0IW-INFO-MSG TS0IW-INFO-MSG ; 
    15 TS0IW-INFO-MSG1 TS0IW-INFO-MSG1 ; 
    15 TS0IW-INFO-MSG2 TS0IW-INFO-MSG2 ; 
    15 TS0IW-INFO-MSG3 TS0IW-INFO-MSG3 ; 
  10 TSRTEXT TSRTEXT ; 
    15 TS0IW-MSG-1 TS0IW-MSG-1 ; 
    15 TS0IW-MSG-2 TS0IW-MSG-2 ; 
    15 TS0IW-MSG-3 TS0IW-MSG-3 ; 
    15 TS0IW-MSG-4 TS0IW-MSG-4 ; 
  10 TS0IM-PC-PO-NBR TS0IM-PC-PO-NBR [50] ; 
  10 TSIPLCBM TSIPLCBM ; 
  10 TSIPLTKG TSIPLTKG ; 
  10 TS0IW-CREATE-CPLIT-DETAIL TS0IW-CREATE-CPLIT-DETAIL [500] ; 
end // end TS0IW04

//*** RECORD=TS0IW05 ****
// ******* TRANSPORTATION CONTAINER PACKING LIST TABLE *******
// 
//    This is a table record to hold the P.L. items that
//    will be used in the combined shipment insert process.
// 
// ***********************
Record TS0IW05 type basicRecord
  5 TS0IW-PL-GROUP TS0IW-PL-GROUP [500] ; 
    10 TSFSHPID TSFSHPID ; 
    10 TSIPLNBR TSIPLNBR ; 
    10 PC3PONBR PC3PONBR ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 PC2CUXID PC2CUXID ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 TSISHPQT TSISHPQT ; 
    10 TSIRSVQT TSIRSVQT ; 
    10 TSIRCVQT TSIRCVQT ; 
    10 TSICRTQT TSICRTQT ; 
    10 TSIPLCBM TSIPLCBM ; 
    10 TSIPLTKG TSIPLTKG ; 
    10 TSIDETFL TSIDETFL ; 
end // end TS0IW05

//*** RECORD=TS0IW06 ****
// ****************** TEMPORARY STORAGE RECORD ****************
// **                   Communication Link                   **
// **                                                        **
// 
// 
//    RECORD NAME:      TS0IW06
// 
//    MAP   NAMES:      TS0IM006
// 
//    THIS RECORD ACTS AS COMMUNICATION LINK TO TEMPORARY
// STORAGE.  IT CONTAINS THE TEMPORARY STORAGE RECORD LENGTH,
// AND DETAIL PURCHASE ORDER NUMBERS FOR THE COMBINE SHIPMENT
// APPLICATION.
// 
// **                                                        **
// **                                                        **
// ****************** TEMPORARY STORAGE RECORD ****************
// ***********************
Record TS0IW06 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 TS0IW-TEMP-STORAGE-GROUP TS0IW-TEMP-STORAGE-GROUP [50] ; 
    10 PC3PONBR PC3PONBR ; 
end // end TS0IW06

Record TS0IW07 type basicRecord
  10 CTECNT CTECNT ; 
  10 POCNT POCNT ; 
end // end TS0IW07

DataItem CTECNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem POCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_NBR Map display format
DataItem TS0IM-PC-PO-NBR num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IPLNBR-2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Create cplit detail flag
DataItem TS0IW-CREATE-CPLIT-DETAIL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temp storage page
DataItem TS0IW-CURRENT-PAGE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CXREF Root position 1
DataItem TS0IW-CXREF-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CXREF Root
DataItem TS0IW-CXREF-123 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CXREF Root position 2
DataItem TS0IW-CXREF-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CXREF Root position 3
DataItem TS0IW-CXREF-3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CXREF Trailer
DataItem TS0IW-CXREF-45 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CXREF Root
DataItem TS0IW-CXREF-ROOT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified data flag
DataItem TS0IW-DATA-MODIFIED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Combine ship info msg field
DataItem TS0IW-INFO-MSG char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Combine ship info msg field
DataItem TS0IW-INFO-MSG1 char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Combine ship info msg field
DataItem TS0IW-INFO-MSG2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Combine ship info msg field
DataItem TS0IW-INFO-MSG3 char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IW-MAX-PL-DETAIL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// combined from        "literal"
DataItem TS0IW-MSG-1 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE SHIP ID Field
DataItem TS0IW-MSG-2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BY USER              "literal"
DataItem TS0IW-MSG-3 char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id field
DataItem TS0IW-MSG-4 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PRDCU_ID
DataItem TS0IW-PC-PRDCU-ID char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Combine ship item counter
DataItem TS0IW-PL-COUNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem TS0IW-PL-GROUP char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group level array
DataItem TS0IW-TEMP-STORAGE-GROUP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWFIL char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWFIL-2 char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWFIL-3 char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working index 1
DataItem TS0IWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 3
DataItem TS0IWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working index 2
DataItem TS0IWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working storage line
DataItem TS0IWLN2 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage line
DataItem TS0IWLN3 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0IWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-table-lines
DataItem TS0IWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max-carton-lines
DataItem TS0IWMX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max page po number constant
DataItem TS0IWMXP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWNID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWNID-2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWNID-3 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWPID char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWPRM-2 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0IWPRM-3 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// problem switch
DataItem TS0IWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of fetch switch #1
DataItem TS0IWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of fetch switch #2
DataItem TS0IWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of fetch switch #3
DataItem TS0IWSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map 1 switch
DataItem TS0IWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0IWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Requested temp storage page
DataItem TS0IWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag
DataItem TS0IWWFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

