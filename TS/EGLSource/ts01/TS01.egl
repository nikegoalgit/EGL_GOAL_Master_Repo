package ts01;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS01 ****
// This program allows users to browse through a shipments
// container packing list totals.  Pfkeys 13 - 18 will allow
// a user to perform more specific add/change/delete/inquiry
// functions on specific pieces of a shipment's container
// packing lists.  A row must be selected with an 's' in the
// select field of the desired row prior to pressing a pfkey.
// The exception is PF18.
// 
// A user with inquiry capability can access options:
//       16 - view a containers cartons
//       18 - browse this shipments packing lists
// Inquiry capability will also allow inquiry of pl and
// container header screens by selecting (s) a map row and
// hitting enter.
// 
// A user with change capability can access options:
//       14 - change a packing list or add detail to an
//            existing packing list.
// 
// A user with add capability can access options:
//       13 - add detail to a packing list with no detail.
// 
// A user with delete capability can access options:
//       15 - delete a packing list and detail.
// 
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          08/16/88 cepple  New application.
// ts#012   08/02/90 cepple  Add gpc to screen heading infor.
// fix      08/13/90 cepple  Since PC3PONBR is not always GT
//                           zero, fix to look at TSIPLNBR
//                           instead for more data.
// fix      10/29/90 cepple  fix so that XRECD is cleared when
//                           packing list status is corrected.
// ts#000   01/09/91 cepple  allow user to change statuses from
//                           'it' to 'er'.
// ts#170   03/04/91 dhuffm  allow user to change statuses to
//                           and from 'rc'.
// ts#205   06/19/91 dhuffm  Create separate packing list item
//                           for a footwear style/color.
// TS#184   09/26/91 SFORD   Modified method of call/transfer
//                           to "TS0V" & "TS02"
// T220     10/15/91 KSTOKK  Changed check for existing data in
//                           TS01200 & TS01520.
// fix      10/18/91 KSTOKK  Fix so status fld isn't under-
//                           scored if line data doesn't exist.
// T000     12/10/91 KSTOKK  Add left/right screen functions,
//                           increase B/L to 16 chars, add SO
//                           and DIM.
// T#999    08/13/93 SFORD   table change - user-id to cplhd01
// T#999    04/18/95 SLEWIS  CHG SO NUMBER LENGTH
// TS120    08/22/96 JCARL1  Fixed error in apparel line
//                           supression by making SO part of
//                           the compare key.
// TS000    11/08/96 JCARL1  Remove alarm from msg display.
// TS1512   09/21/98 mhuynh  Add po line item seq nbr to screen
// TS000    12/20/99 VKUMAR  Changed TS01210, commented the
//                           checking for displaying select
//                           lines.
// TS000    05/15/00 npulug  Increased the length of invoice
//                           field to 14 and decreased the
//                           length of POID field (Essentially
//                           merged POID parts).
// TS000    12/07/01 bnagar  changes for Online security access
//                           for US related shipments.
//                           Added rec:TSCREC,proc: TS01-1630
//                           Modified proc: TS01520,TS01300,
//                           TS01600
// *********************
Program TS01 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC3REC PC3REC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS01W01 TS01W01; // record
  TS01W02 TS01W02; // record
  TSCREC TSCREC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  VCPLHD03 VCPLHD03; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSSTBL {deleteAfterUse = yes}; // table
  use TS01M.TS01M001,  // forms
      TS01M.TS01M002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Shipment Pack List Browse Screen.*/
     /* ------------------------------------------------------------*/

    set TS01W01 empty; /* Initialize working storage*/
    set TS01W02 empty; /* Initialize temporary storage*/
    set TAEREC empty;
    set TSFREC empty;
    set VCPLHD03 empty;
    set TSGREC empty;
    set TSNREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS01M001 initial; /* Initialize map1 output area*/
    set TS01M002 initial; /* Initialize map2 output area*/

    TS01W01.TS01WSWR = "Y"; /* Indicate request for data*/
    TS01W01.TS01WPSW = "N"; /* Initialize problem switch*/
    TS01W01.TS01WMFL = "N"; /* Initialize message flag*/
    TS01W01.TS01WMSL = 10; /* Initialize max selection lines*/
    TS01W01.TS01WMCP = 8; /* Initialize max cpl array lines*/

     /* ***************************************/
     /* Check to see if a cursor positioning*/
     /* key was passed.*/
     /* ***************************************/
    if (TSWREC.PC3PONBR == 0) /* If po not passed*/
       /* continue on*/
    else
      TS01W01.TS01WSPO = TSWREC.PC3PONBR; /* move in save key*/
      TSWREC.PC3PONBR = 0;
    end

    goto TS01000; /* Check valid from application*/


    TS01000: TS01000();
     /* ------------------------------------------------------------*/
     /* Converse TS01 special initialization*/
     /* ------------------------------------------------------------*/

    goto TS01001; /* Converse special initialization*/


    TS01001: TS01001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment CNTNR Inq/Mnt process.*/
     /* ------------------------------------------------------------*/

    goto TS01002; /* Converse Shp CNTNR Inquiry/Main.*/


    TS01002: TS01002();
     /* ------------------------------------------------------------*/
      /* Flow to converse Transportation Shipment CNTNR Maint/Inq.*/
     /* ------------------------------------------------------------*/

    goto TS01002; /* Converse shipment CNTNR mnt/inq*/


  end // end main
end // end TS01

// Select from DTRANS.VTSLOC01
Function TS01-1630()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTSLOC01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* -----------------------------------------------------------*/

  set TSCREC empty;
  TSCREC.TSCLOCCD = TSWREC.TSEDEST;

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS01-1630"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


    TS01W01.TS01WPSW = "Y"; /* indicate problem*/
    TS01M001.XXXPRCNM = "TS01-1630"; /* Process name*/
  end


end // end TS01-1630

// Format header display data
Function TS01-205()
   /* ------------------------------------------------------------*/
   /* Format the map header portion of the Left/Right screens*/
   /* ------------------------------------------------------------*/

    /* ===> Left map*/
    /* ===> --------*/

  TS01M001.TSFSHPID = TSWREC.TSFSHPID;
  TS01M001.TSFBOL = TSWREC.TSFBOL;
  TS01M001.TSACARCD = TSWREC.TSACARCD;
  TS01M001.TS5CRAFT = TSWREC.TS5CRAFT;
  TS01M001.TSFSHPNB = TSWREC.TSFSHPNB;
  TS01M001.TSEDEST = TSWREC.TSEDEST;
  TS01M001.XWHCD = TSWREC.XWHCD;
  TS01M001.XGPCD = TSWREC.XGPCD;


    /* ===> Right map*/
    /* ===> ---------*/

  TS01M002.TSFSHPID = TSWREC.TSFSHPID;
  TS01M002.TSFBOL = TSWREC.TSFBOL;
  TS01M002.TSACARCD = TSWREC.TSACARCD;
  TS01M002.TS5CRAFT = TSWREC.TS5CRAFT;
  TS01M002.TSFSHPNB = TSWREC.TSFSHPNB;
  TS01M002.TSEDEST = TSWREC.TSEDEST;
  TS01M002.XWHCD = TSWREC.XWHCD;
  TS01M002.XGPCD = TSWREC.XGPCD;


end // end TS01-205

// Left  Map "M001"
Function TS01-215()
   /* ------------------------------------------------------------*/
   /* Converse Left screen*/
   /* ------------------------------------------------------------*/

  converse TS01M001 ;

end // end TS01-215

// Right Map "M002"
Function TS01-220()
   /* ------------------------------------------------------------*/
   /* Converse  Right screen*/
   /* ------------------------------------------------------------*/

  converse TS01M002 ;

end // end TS01-220

// Check the FROM application
Function TS01000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0J" /* From allowed application*/
   || COMMAREA.CAFROMAP == "TS0Y" 
   || COMMAREA.CAFROMAP == "TS02" 
   || COMMAREA.CAFROMAP == "TS0V")

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end TS01000

// Special initialization TS01
Function TS01001()
   /* ------------------------------------------------------------*/

             /* SPECIAL INITIALIZATION FOR TS01*/

       /* 1) Select the shipment header row to see if it exists.*/
       /* 2) If the row does exist then get the shipment status*/
          /* and save the select the status to determine the*/
          /* update and delete restrictions for this shipment.*/
       /* 3) Clear the selection pass arrays in TSWREC.*/

   /* ------------------------------------------------------------*/

  TS01W01.TS01WMAP = "1"; /* initialize mapnbr*/

  TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* move in key*/

  TS01S01();
                                   /* select the shphd from DTRANS.VSHPHD01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if header was found*/
    if (TSFREC.YSSCD in YSSTBL.YSSCD)
      TS01W01.YSSDELFL = YSSTBL.YSSDELFL[sysVar.arrayIndex];
    end
    if (TSFREC.YSSCD in YSSTBL.YSSCD)
      TS01W01.YSSUPDFL = YSSTBL.YSSUPDFL[sysVar.arrayIndex];
    end
    TSWREC.XGPCD = TSFREC.XGPCD;
    TSWREC.TSEORIG = TSFREC.TSEORIG;
    TSWREC.TSEDEST = TSFREC.TSEDEST;
    TSWREC.XWHCD = TSFREC.XWHCD;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if header was not found*/
      converseLib.validationFailed(140);
                                   /* header deleted by another application*/
      TS01M001.XXXPRCNM = "TS01001";
      TS01M002.XXXPRCNM = "TS01001";
      TS01W01.TS01WSWR = "N"; /* set request for data to no*/
    end
  end

  TS01W01.TS01WIXM = 1; /* set index*/
  while (TS01W01.TS01WIXM <= TS01W01.TS01WMSL) /* until end of arrays*/
    TSWREC.TSW2SHP = 0; /* clear all passed fields*/
    TSWREC.TSWPLNBR = 0;
    TSWREC.TSWNKCTN = 0;
    TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* increment counter*/
  end


end // end TS01001

// Shipment Container Browse
Function TS01002()
   /* ------------------------------------------------------------*/

            /* SHIPMENT PACK LIST BROWSE SCREEN*/

   /* This is the main process used to display the pack list*/
   /* browse screen.*/
   /* Processing sequence is as follows:*/

   /* 1) If request for data is yes;*/
      /* - Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) If no errors are found.*/
      /* - Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS01W01.TS01WSWR == "Y") /* The request for data is yes*/
    TS01100(); /* Obtain the data to display*/
  end

  TS01200(); /* Format and display the map*/

  TS01300(); /* Check attention identifier*/

  TS01400(); /* Reset fields to normal intensity*/

  TS01500(); /* Verify the entered data*/

  if (TS01W01.TS01WPSW == "N") /* If no errors have occurred*/
    TS01600(); /* Process valid input request*/
  end


end // end TS01002

// Obtain the data to display
Function TS01100()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Purge any existing queue in temporary storage.*/
   /* 2) Select and open the cursor for DTRANS.VCPLHD01.*/
   /* 3) For each CPL fetched, format the pages in temporary*/
      /* storage.*/
   /* 4) Close the selected set of DTRANS.VCPLHD01.*/
   /* 5) If no data found, display error message and return to*/
      /* previous process.*/
      /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  TS01110(); /* Purge any temporary storage*/

  TS01120(); /* Select set DTRANS.VCPLHD01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
    TS01W01.TS01WSW1 = "N"; /* Initialize end of file switch*/
    TS01W01.TS01WPSW = "N"; /* Initialize problem found switch*/
    TS01W01.TS01WIXM = 1; /* Initialize display line number*/
    set TS01W02 empty; /* Clear temporary storage record*/
    while (TS01W01.TS01WSW1 == "N" /* Until end of set or problem found*/
     && TS01W01.TS01WPSW == "N") /* or until a problem was found*/
      TS01130(); /* Obtain data and format page*/
      if (TS01W01.TS01WIXM > 14) /* Page is full*/
        TS01140(); /* Add page to temporary storage*/
      end
    end
    if (TS01W01.TS01WSW1 == "Y") /* end of set was found*/
      if (TS01W01.TS01WIXM > 1) /* and some of page formatted*/
        TS01140(); /* Add page to temporary storage*/
      end
      if (TS01W01.TS01WSPG == 0) /* If save page set*/
        TS01W01.TS01WTSP = 1; /* Initialize page number*/
      else
        TS01W01.TS01WTSP = TS01W01.TS01WSPG;
      end
      TS01W01.TS01WSWR = "N"; /* Request for data completed*/
      TS01150(); /* Close DTRANS.VCPLHD01*/
    end
  end

  if (TS01W01.TA5TSQIX == 0) /* No data to display*/
    TS01M001.XXXPRCNM = "TS01100"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01100"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
  end


end // end TS01100

// Purge any temporary storage
Function TS01110()
   /* ------------------------------------------------------------*/

                /* PURGE ANY TEMPORARY STORAGE*/

   /* 1) Purge any temporary storage for this application.*/

   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS01"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS01W02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage sub*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS01110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS01W01.TS01WTSP = 0; /* Reset current page number*/
  TS01W01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS01110

// Select set DTRANS.VCPLHD01
Function TS01120()
   /* ------------------------------------------------------------*/

        /* SELECT SET AND OPEN CURSOR FOR DTRANS.VCPLHD03*/

   /* 1) Select the set of table rows.*/
   /* 2) If not available, return an error message to the user.*/
   /* 3) If any other, indicate system error.*/

   /* ------------------------------------------------------------*/

  VCPLHD03.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in keys*/
  VCPLHD03.PC-PO-NBR = -1;
  VCPLHD03.PC-PRDCU-ID = "*";
  VCPLHD03.SY-STY-NBR = "*";
  VCPLHD03.SY-COLR-CD-ID = "*";
  VCPLHD03.XDM-DIM-CD = "*";
  VCPLHD03.XQA-QUAL-CD = "*";
  VCPLHD03.XOW-OWN-GRP-CD = "*";
  VCPLHD03.PC-CU-IN-SEG-CD = "*";
  VCPLHD03.XPG-PKG-TYP-CD = "*";
  VCPLHD03.XUM-UOM-CD = "*";

  TSGREC.TSNFNC = "S6"; /* move in function code*/
  call "VCPLHD03" (TSGREC, SQLCA, VCPLHD03) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS01120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD03"; /* Table view name*/
    TA1REC.TA1TBLKE = VCPLHD03.VCPLHD03-KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS01M001.XXXPRCNM = "TS01120"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01120"; /* Process name*/

  end


end // end TS01120

// Fetch row from DTRANS.VCPLHD01
Function TS01130()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD03*/

   /* 1) Fetch the next row from the selected set of rows.*/
   /* 2) If end of file, set end of file switch.*/
   /* 3) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N6"; /* move in function code*/
  call "VCPLHD03" (TSGREC, SQLCA, VCPLHD03) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS01W01.TS01WSW1 = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS01W01.TS01WSW2 = "Y"; /* end of set found*/
      TS01W01.TS01WPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS01130"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS01M001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD03"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS01M001.XXXPRCNM = "TS01130"; /* Process name*/
      TS01M002.XXXPRCNM = "TS01130"; /* Process name*/

    else

      TS01W02.TSIPLNBR[TS01WIXM] = VCPLHD03.TS-NIKE-PL-NBR;
      TS01W02.PC3PONBR[TS01WIXM] = VCPLHD03.PC-PO-NBR;

      TS01131(); /* Retrieve po id and order type*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If the row was found*/
        TS01W01.TS01WDAT = PC3REC.PC3POIDT;
        if (TSWREC.XGPCD == "03") /* If apparel*/
          TS01W02.TS01MPYR[TS01WIXM] = PC3REC.PCFSECD;
        else
          TS01W02.TS01MPYR[TS01WIXM] = TS01W01.TS01WPYY;
        end
        TS01W02.TS01MPMO[TS01WIXM] = TS01W01.TS01WPM1;
        TS01W02.TS01MDMO[TS01WIXM] = TS01W01.TS01WPM2;
        TS01W02.FY1FCTYC[TS01WIXM] = PC3REC.FY1FCTYC;
        TS01W02.PC4ORTYP[TS01WIXM] = PC3REC.PC4ORTYP;
      end


      TS01W02.PC6ITMNB[TS01WIXM] = VCPLHD03.PC-ITM-SEQ-NBR;
      TS01W02.PC2CUXID[TS01WIXM] = VCPLHD03.PC-PRDCU-ID;
      TS01W02.TS01W-CUST-ORD-ID[TS01WIXM] = VCPLHD03.OP-CUST-ORD-ID;
      TS01W02.TS01W-NIKE-ORD-ID[TS01WIXM] = VCPLHD03.OP-NIKE-ORD-ID;
      TS01W02.XDMCD[TS01WIXM] = VCPLHD03.XDM-DIM-CD;
      TS01W02.XQACD[TS01WIXM] = VCPLHD03.XQA-QUAL-CD;
      TS01W02.XOWCD[TS01WIXM] = VCPLHD03.XOW-OWN-GRP-CD;
      TS01W02.PC2INSEG[TS01WIXM] = VCPLHD03.PC-CU-IN-SEG-CD;
      TS01W02.XPGCD[TS01WIXM] = VCPLHD03.XPG-PKG-TYP-CD;
      TS01W02.XUMCD[TS01WIXM] = VCPLHD03.XUM-UOM-CD;
      TS01W02.SY1STNBR[TS01WIXM] = VCPLHD03.SY-STY-NBR;
      TS01W02.SY2CLRID[TS01WIXM] = VCPLHD03.SY-COLR-CD-ID;
      TS01W02.TSPFCIVC[TS01WIXM] = VCPLHD03.TS-FIVC;
      TS01W02.TSISHPQT[TS01WIXM] = VCPLHD03.TS-PL-QTOT-SHP;
      TS01W02.TSICRTQT[TS01WIXM] = VCPLHD03.TS-PL-TOT-CRTN;
      TS01W02.TSISTAT[TS01WIXM] = VCPLHD03.TS-CPL-STAT-CD;
      TS01W02.TSIDETFL[TS01WIXM] = VCPLHD03.TS-DET-FL;

      TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* Increment line index*/

    end
  end


end // end TS01130

// Get po id and order type
Function TS01131()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = VCPLHD03.PC-PO-NBR; /* P.O. type*/
  PCYREC.PCYFUNC = "S "; /* Select alternate*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS01131"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS01M001.XXXPRCNM = "TS01131"; /* Process name*/
  TS01M002.XXXPRCNM = "TS01131"; /* Process name*/
  TS01W01.TS01WPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS01131

// Add page to temporary storage
Function TS01140()
   /* ------------------------------------------------------------*/

              /* ADD PAGE TO TEMPORARY STORAGE*/

   /* 1) Add the next page to temporary storage.*/

   /* ------------------------------------------------------------*/

  TS01W02.TS01WLEN = 1190; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS01"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS01W02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage sub*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    TS01W01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS01W01.TS01WIXM = 1; /* Reset display line number*/
    set TS01W02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS01140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS01M001.XXXPRCNM = "TS01140"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TS01W01.TS01WPSW = "Y"; /* indicate problem has been found*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS01140

// Close set DTRANS.VCPLHD01
Function TS01150()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD01*/

   /* 1) Close the selected set of table rows.*/
   /* 2) If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C6"; /* move in function code*/
  call "VCPLHD03" (TSGREC, SQLCA, VCPLHD03) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS01150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS01M001.XXXPRCNM = "TS01150"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS01150

// Format and display the map
Function TS01200()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) Format the map heading.*/
   /* 2) If no error to display, format the selected data.*/
   /* 3) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS01W01.TS01WPSW == "N") /* no errors*/
    set TS01M001 initial; /* set map clear left screen*/
    set TS01M002 initial; /* set map clear right screen*/

     /* Clear the selection save array fields*/

    TS01W01.TS01WIXM = 1;
    while (TS01W01.TS01WIXM <= TS01W01.TS01WMSL) /* until end of arrays*/
      TSWREC.TSW2SHP[TS01WIXM] = 0; /* clear array fields*/
      TSWREC.TSWPLNBR[TS01WIXM] = 0;
      TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1;
    end

    TS01-205(); /* format header display data*/

    TS01210(); /* format the selected data*/

    set TS01M001.TS01MSEL[1] cursor;
    set TS01M002.TS01MSEL[1] cursor;

  end

  if (COMMAREA.CACLVL[1] == "N") /* If user has no status change*/
    TS01W01.TS01WIXM = 1; /* Initialize line index*/
    while (TS01W01.TS01WIXM <= 14 /* Until end of lines*/
     /* AND TS01W02.PC3PONBR(TS01WIXM) NE 0; /* and data exists*/
     /* po information may not have been on cplhd*/
     && TS01W02.SY1STNBR[TS01WIXM] != " ") /* and data exists*/
      set TS01M001.TSISTAT[TS01WIXM] skip; /* left screen*/
      TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* Increment line index*/
    end
  else
    TS01W01.TS01WIXM = 1; /* Initialize line index*/
    while (TS01W01.TS01WIXM <= 14 /* Until end of lines*/
     /* AND TS01W02.PC3PONBR(TS01WIXM) NE 0; /* and data exists*/
     /* po information may not have been on cplhd*/
     && TS01W02.SY1STNBR[TS01WIXM] != " ") /* and data exists*/
      if (TS01W02.TSISTAT[TS01WIXM] == "ER"
       || TS01W02.TSISTAT[TS01WIXM] == "IT"
       || TS01W02.TSISTAT[TS01WIXM] == "CR"
       || TS01W02.TSISTAT[TS01WIXM] == "CC"
       || TS01W02.TSISTAT[TS01WIXM] == "RC")
        set TS01M001.TSISTAT[TS01WIXM] normal; /* left screen*/
      else
        set TS01M001.TSISTAT[TS01WIXM] skip; /* left screen*/
      end
      TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* Increment line index*/
    end
  end


  /* IF EZEMNO GT 0;                  /* error message to display*/
  /* IF TS01W01.TS01WMAP EQ '1 ';     /* Map 1 was requested left*/
  /* SET TS01M001 ALARM;            /* indicate sound alarm left screen*/
  /* ELSE;*/
  /* IF TS01W01.TS01WMAP EQ '2 ';     /* Map 2 was requested right*/
  /* SET TS01M002 ALARM;*/
  /* END;*/
  /* END;*/
  /* END;*/

  TS01M001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date left screen*/
  TS01M002.XXXCURDT = VGVar.currentShortGregorianDate; /* current date right screen*/


  if (TS01W01.TS01WMAP == "1 ") /* Map 1 was requested left*/
    TS01-215(); /* ===> left  map M001 format*/

  else

    if (TS01W01.TS01WMAP == "2 ") /* Map 2 was requested right*/
      TS01-220(); /* ===> right map M002 format*/
    end

  end


  TS01M001.XXXPRCNM = "TS01"; /* ===> reset map process name left*/
  TS01M002.XXXPRCNM = "TS01"; /* ===> reset map process name right*/

  TS01W01.TS01WPSW = "N"; /* reset error switch*/


end // end TS01200

// Format the selected data
Function TS01210()
   /* ------------------------------------------------------------*/

                 /* FORMAT THE SELECTED DATA*/

   /* 1) Obtain the next page from temporary storage.*/
   /* 2) Format the plan location data in the map.*/

   /* ------------------------------------------------------------*/

  TS01W01.TS01WCFL = "N"; /* Initialize delete flag*/

  if (TS01W01.TS01WSPO != 0) /* If delete save key set*/
    TS01W01.TS01WTSP = 1; /* Initialize search page*/
  end

  if (COMMAREA.CACHGFL == "N" /* If user cannot perform change*/
   || COMMAREA.CAADDFL == "N") /* If user cannot perform add*/
    set TS01M001.TS01MCHG protect, invisible; /* Darken add/chg PF Key*/
    set TS01M002.TS01MCHG protect, invisible; /* Darken add/chg Pf Key*/
  end

  if (COMMAREA.CADELFL == "N") /* If user cannot perform delete*/
    set TS01M001.TS01MDEL protect, invisible; /* Darken delete PF Key*/
    set TS01M002.TS01MDEL protect, invisible; /* Darken delete PF Key*/
  end

  if (TS01W01.TA5TSQIX == 0) /* if no data to display*/
     /* do not format data*/
  else

    while (TS01W01.TS01WCFL == "N") /* While delete save key not found*/
      TS01211(); /* Obtain temporary storage page*/
      TS01212(); /* locate page with key*/
    end

    if (TS01W01.TS01WTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      TS01211(); /* Obtain temporary storage page*/
    end

    TS01M001.TS01WTSP = TS01W01.TS01WTSP; /* Current page*/
    TS01M002.TS01WTSP = TS01W01.TS01WTSP; /* Current page*/
    TS01M001.TA5TSQIX = TS01W01.TA5TSQIX; /* Highest page*/
    TS01M002.TA5TSQIX = TS01W01.TA5TSQIX; /* Highest page*/

    TS01W01.TS01WIXM = 1; /* Initialize line indexes*/
    TS01W01.TS01WIXW = 0;

      /* move in first line of screen data (Left Screen)*/

   /* ******Npulug changes begin*************/
   /* Increased the length of invoice field and decreased*/
   /* the length of POID ( Essentially merged POID fields)*/
   /* ******************************************************/
    TS01M001.TS01MPOI[TS01WIXM] = TS01W02.TS01WPOIRNG[TS01WIXM];
   /* MOVE TS01W02.TS01MPYR(TS01WIXM) TO TS01M001.TS01MPYR(TS01WIXM);*/
   /* MOVE TS01W02.TS01MPMO(TS01WIXM) TO TS01M001.TS01MPMO(TS01WIXM);*/
   /* MOVE TS01W02.TS01MDMO(TS01WIXM) TO TS01M001.TS01MDMO(TS01WIXM);*/
   /* ******Npulug changes end***************/
    TS01M001.FY1FCTYC[TS01WIXM] = TS01W02.FY1FCTYC[TS01WIXM];
    TS01M001.PC4ORTYP[TS01WIXM] = TS01W02.PC4ORTYP[TS01WIXM];
    TS01M001.PC3PONBR[TS01WIXM] = TS01W02.PC3PONBR[TS01WIXM];
    TS01M001.PC6ITMNB[TS01WIXM] = TS01W02.PC6ITMNB[TS01WIXM];
    TS01M001.PC2CUXID[TS01WIXM] = TS01W02.PC2CUXID[TS01WIXM];
    TS01M001.SY1STNBR[TS01WIXM] = TS01W02.SY1STNBR[TS01WIXM];
    TS01M001.SY2CLRID[TS01WIXM] = TS01W02.SY2CLRID[TS01WIXM];
    TS01M001.TSPFCIVC[TS01WIXM] = TS01W02.TSPFCIVC[TS01WIXM];
    TS01M001.TSISHPQT[TS01WIXM] = TS01W02.TSISHPQT[TS01WIXM];
    TS01M001.TSICRTQT[TS01WIXM] = TS01W02.TSICRTQT[TS01WIXM];
    TS01M001.TSISTAT[TS01WIXM] = TS01W02.TSISTAT[TS01WIXM];
    TS01M001.TSIDETFL[TS01WIXM] = TS01W02.TSIDETFL[TS01WIXM];

    if (TS01M001.TSIDETFL[TS01WIXM] == "Y") /* if detail flag is yes*/
      TS01M001.TSIDETFL[TS01WIXM] = "*"; /* move '*' to detail*/
    else
      TS01M001.TSIDETFL[TS01WIXM] = " "; /* move ' ' to detail*/
    end

    set TS01M001.TS01MSEL[TS01WIXM] normal; /* display the selection*/
    set TS01M002.TS01MSEL[TS01WIXM] normal; /* display the selection*/

    if (TS01W02.TSISTAT[TS01WIXM] == "ER" /* Only unprotect er,it,cr,cc*/
     || TS01W02.TSISTAT[TS01WIXM] == "IT" 
     || TS01W02.TSISTAT[TS01WIXM] == "CR" 
     || TS01W02.TSISTAT[TS01WIXM] == "CC")
      set TS01M001.TSISTAT[TS01WIXM] normal; /* display and open*/
    else
      set TS01M001.TSISTAT[TS01WIXM] skip; /* display the stat*/
    end

      /* move in first line of screen data (Right Screen)*/

    TS01M002.TS01MPYR[TS01WIXM] = TS01W02.TS01MPYR[TS01WIXM];
    TS01M002.TS01MPMO[TS01WIXM] = TS01W02.TS01MPMO[TS01WIXM];
    TS01M002.TS01MDMO[TS01WIXM] = TS01W02.TS01MDMO[TS01WIXM];
    TS01M002.FY1FCTYC[TS01WIXM] = TS01W02.FY1FCTYC[TS01WIXM];
    TS01M002.PC4ORTYP[TS01WIXM] = TS01W02.PC4ORTYP[TS01WIXM];
    TS01M002.PC3PONBR[TS01WIXM] = TS01W02.PC3PONBR[TS01WIXM];
    TS01M002.PC2CUXID[TS01WIXM] = TS01W02.PC2CUXID[TS01WIXM];
    TS01M002.TS01M-SALES-ORDER[TS01WIXM] = TS01W02.TS01W-SALES-ORDER[TS01WIXM];
    TS01M002.SY1STNBR[TS01WIXM] = TS01W02.SY1STNBR[TS01WIXM];
    TS01M002.SY2CLRID[TS01WIXM] = TS01W02.SY2CLRID[TS01WIXM];
    TS01M002.XDMCD[TS01WIXM] = TS01W02.XDMCD[TS01WIXM];
    TS01M002.TSISHPQT[TS01WIXM] = TS01W02.TSISHPQT[TS01WIXM];
    TS01M002.TSICRTQT[TS01WIXM] = TS01W02.TSICRTQT[TS01WIXM];


    TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* Increment line indexes*/
    TS01W01.TS01WIXW = TS01W01.TS01WIXW + 1;

     /* Move all display lines to the left and right screens.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS01213' statement which will continue*/
    /* * the nested IF in another process, therefore making TS01210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS01W01.TS01WIXM <= 14 /* Until end of lines*/
     && TS01W02.TSIPLNBR[TS01WIXM] != 0) /* or last line of data*/

   /* IF TSWREC.XGPCD EQ '03';*/
   /* IF TS01W02.TS01WPOI(TS01WIXM) EQ TS01W02.TS01WPOI(TS01WIXW)*/
   /* AND TS01W02.PC4ORTYP(TS01WIXM) EQ TS01W02.PC4ORTYP(TS01WIXW)*/
   /* AND TS01W02.PC3PONBR(TS01WIXM) EQ TS01W02.PC3PONBR(TS01WIXW)*/
   /* AND TS01W02.PC6ITMNB(TS01WIXM) EQ TS01W02.PC6ITMNB(TS01WIXW)*/
   /* AND TS01W02.PC2CUXID(TS01WIXM) EQ TS01W02.PC2CUXID(TS01WIXW)*/
   /* AND TS01W02.XDMCD(TS01WIXM) EQ TS01W02.XDMCD(TS01WIXW)*/
   /* AND TS01W02.XQACD(TS01WIXM) EQ TS01W02.XQACD(TS01WIXW)*/
   /* AND TS01W02.XOWCD(TS01WIXM) EQ TS01W02.XOWCD(TS01WIXW)*/
   /* AND TS01W02.PC2INSEG(TS01WIXM) EQ TS01W02.PC2INSEG(TS01WIXW)*/
   /* AND TS01W02.XPGCD(TS01WIXM) EQ TS01W02.XPGCD(TS01WIXW)*/
   /* AND TS01W02.XUMCD(TS01WIXM) EQ TS01W02.XUMCD(TS01WIXW)*/
   /* AND TS01W02.SY1STNBR(TS01WIXM) EQ TS01W02.SY1STNBR(TS01WIXW)*/
   /* AND TS01W02.SY2CLRID(TS01WIXM) EQ TS01W02.SY2CLRID(TS01WIXW)*/
   /* AND (TS01W02.TS01W-SALES-ORDER(TS01WIXM) EQ*/
   /* TS01W02.TS01W-SALES-ORDER(TS01WIXW));*/
   /* ; /* continue on*/
   /* ELSE;*/
   /* SET TS01M001.TS01MSEL(TS01WIXM) NORMAL; /* Display select flag*/
   /* SET TS01M002.TS01MSEL(TS01WIXM) NORMAL; /* Display select flag*/
   /* END;*/
   /* ELSE;*/
      set TS01M001.TS01MSEL[TS01WIXM] normal; /* Display select flag*/
      set TS01M002.TS01MSEL[TS01WIXM] normal; /* Display select flag*/
   /* END;*/

      if (TS01W02.TSISTAT[TS01WIXM] == "ER" /* Only unprotect er,it,cr,cc*/
       || TS01W02.TSISTAT[TS01WIXM] == "IT" 
       || TS01W02.TSISTAT[TS01WIXM] == "CR" 
       || TS01W02.TSISTAT[TS01WIXM] == "CC")
        set TS01M001.TSISTAT[TS01WIXM] normal; /* display and open*/
      else
        set TS01M001.TSISTAT[TS01WIXM] skip; /* display the stat*/
      end


        /* move data to the Left screen*/

   /* ******Npulug changes begin*************/
   /* Increased the length of invoice field and decreased*/
   /* the length of POID ( Essentially merged POID fields)*/
   /* ******************************************************/
      TS01M001.TS01MPOI[TS01WIXM] = TS01W02.TS01WPOIRNG[TS01WIXM];
   /* MOVE TS01W02.TS01MPYR(TS01WIXM) TO TS01M001.TS01MPYR(TS01WIXM);*/
   /* MOVE TS01W02.TS01MPMO(TS01WIXM) TO TS01M001.TS01MPMO(TS01WIXM);*/
   /* MOVE TS01W02.TS01MDMO(TS01WIXM) TO TS01M001.TS01MDMO(TS01WIXM);*/
   /* ******Npulug changes end***************/
      TS01M001.FY1FCTYC[TS01WIXM] = TS01W02.FY1FCTYC[TS01WIXM];
      TS01M001.PC4ORTYP[TS01WIXM] = TS01W02.PC4ORTYP[TS01WIXM];
      TS01M001.PC3PONBR[TS01WIXM] = TS01W02.PC3PONBR[TS01WIXM];
      TS01M001.PC6ITMNB[TS01WIXM] = TS01W02.PC6ITMNB[TS01WIXM];
      TS01M001.PC2CUXID[TS01WIXM] = TS01W02.PC2CUXID[TS01WIXM];
      TS01M001.SY1STNBR[TS01WIXM] = TS01W02.SY1STNBR[TS01WIXM];
      TS01M001.SY2CLRID[TS01WIXM] = TS01W02.SY2CLRID[TS01WIXM];
      TS01M001.TSPFCIVC[TS01WIXM] = TS01W02.TSPFCIVC[TS01WIXM];
      TS01M001.TSISHPQT[TS01WIXM] = TS01W02.TSISHPQT[TS01WIXM];
      TS01M001.TSICRTQT[TS01WIXM] = TS01W02.TSICRTQT[TS01WIXM];
      TS01M001.TSISTAT[TS01WIXM] = TS01W02.TSISTAT[TS01WIXM];
      TS01M001.TSIDETFL[TS01WIXM] = TS01W02.TSIDETFL[TS01WIXM];


        /* move data to the Right screen*/

      TS01M002.TS01MPYR[TS01WIXM] = TS01W02.TS01MPYR[TS01WIXM];
      TS01M002.TS01MPMO[TS01WIXM] = TS01W02.TS01MPMO[TS01WIXM];
      TS01M002.TS01MDMO[TS01WIXM] = TS01W02.TS01MDMO[TS01WIXM];
      TS01M002.FY1FCTYC[TS01WIXM] = TS01W02.FY1FCTYC[TS01WIXM];
      TS01M002.PC4ORTYP[TS01WIXM] = TS01W02.PC4ORTYP[TS01WIXM];
      TS01M002.PC3PONBR[TS01WIXM] = TS01W02.PC3PONBR[TS01WIXM];
      TS01M002.PC2CUXID[TS01WIXM] = TS01W02.PC2CUXID[TS01WIXM];
      TS01M002.TS01M-SALES-ORDER[TS01WIXM] = TS01W02.TS01W-SALES-ORDER[TS01WIXM];
      TS01M002.SY1STNBR[TS01WIXM] = TS01W02.SY1STNBR[TS01WIXM];
      TS01M002.SY2CLRID[TS01WIXM] = TS01W02.SY2CLRID[TS01WIXM];
      TS01M002.XDMCD[TS01WIXM] = TS01W02.XDMCD[TS01WIXM];
      TS01M002.TSISHPQT[TS01WIXM] = TS01W02.TSISHPQT[TS01WIXM];
      TS01M002.TSICRTQT[TS01WIXM] = TS01W02.TSICRTQT[TS01WIXM];



      if (TS01W02.TS01WPOI[TS01WIXM] == TS01W02.TS01WPOI[TS01WIXW])
   /* npulug changes begin**********/
        TS01M001.TS01MPOI[TS01WIXM] = " "; /* move ' ' to poidyr*/
   /* MOVE ' ' TO TS01M001.TS01MPYR(TS01WIXM); /* move ' ' to poidyr*/
   /* MOVE ' ' TO TS01M001.TS01MPMO(TS01WIXM); /* move ' ' to poidmo*/
   /* MOVE ' ' TO TS01M001.TS01MDMO(TS01WIXM); /* move ' ' to poidmo*/
   /* npulug changes end************/
        TS01M001.FY1FCTYC[TS01WIXM] = " "; /* move ' ' to poidfct*/
        TS01M002.TS01MPYR[TS01WIXM] = " "; /* move ' ' to poidyr*/
        TS01M002.TS01MPMO[TS01WIXM] = " "; /* move ' ' to poidmo*/
        TS01M002.TS01MDMO[TS01WIXM] = " "; /* move ' ' to poidmo*/
        TS01M002.FY1FCTYC[TS01WIXM] = " "; /* move ' ' to poidfct*/

        TS01213(); /* continue repeating supression*/
      end


      if (TS01M001.TSIDETFL[TS01WIXM] == "Y") /* if detail flag is yes*/
        TS01M001.TSIDETFL[TS01WIXM] = "*"; /* move '*' to detail*/
      else
        TS01M001.TSIDETFL[TS01WIXM] = " "; /* move ' ' to detail*/
      end


      TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* Increment line index*/
      TS01W01.TS01WIXW = TS01W01.TS01WIXW + 1;


    end
  end


end // end TS01210

// Read temporary storage page
Function TS01211()
   /* ------------------------------------------------------------*/

                /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/

   /* ------------------------------------------------------------*/

  TS01W02.TS01WLEN = 1190; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS01"; /* Application identification*/
  TA5REC.TA5TSQIX = TS01W01.TS01WTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS01W02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage sub*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS01211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS01M001.XXXPRCNM = "TS01211"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear display before next map*/
    converseLib.clearScreen();
     /* Clear display before next map*/

    TS01W01.TS01WPSW = "Y"; /* Indicate problem map*/
  end


end // end TS01211

// Locate change save key
Function TS01212()
   /* ------------------------------------------------------------*/

                 /* LOCATE THE SAVE KEY*/

    /* 1) Locate the page in which the key is less than or*/
       /* equal to the Save Key.*/
   /* ------------------------------------------------------------*/

  if (TS01W01.TS01WSPO == 0) /* No location code entered*/
    TS01W01.TS01WCFL = "Y"; /* Indicate key found*/
  else

    TS01W01.TS01WIXM = 1; /* Initialize index*/
    while (TS01W01.TS01WIXM <= 14) /* Until key is found*/
      TS01W01.TS01WWFL = "N"; /* set working flag to no*/
      while (TS01W01.TS01WIXM <= 14) /* Until key is found*/
        if (TS01W01.TS01WIXM < 14) /* if lt last line*/
          TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* Increment index*/
        else
          TS01W01.TS01WWFL = "Y"; /* indicate last line reached*/
        end
        if (TS01W02.PC3PONBR[TS01WIXM] > TS01W01.TS01WSPO
         || TS01W02.PC3PONBR[TS01WIXM] == 0)
          TS01W01.TS01WIXM = TS01W01.TS01WIXM - 1; /* decrement index*/
          set TS01M001.TS01MSEL[TS01WIXM] cursor; /* Initial cursor*/
          set TS01M002.TS01MSEL[TS01WIXM] cursor; /* Initial cursor*/
          TS01W01.TS01WCFL = "Y"; /* Indicate page was found*/
          TS01W01.TS01WSPO = 0; /* Reset starting po*/
          return; /* Return to previous process*/
        else
          if (TS01W01.TS01WWFL == "N") /* as long as not last line*/
            TS01W01.TS01WIXM = TS01W01.TS01WIXM - 1; /* decrement index*/
          end
          if (TS01W02.PC3PONBR[TS01WIXM] >= TS01W01.TS01WSPO)
            if (TS01W02.PC3PONBR[TS01WIXM] > TS01W01.TS01WSPO)
              TS01W01.TS01WIXM = TS01W01.TS01WIXM - 1; /* decr index*/
            end
            if (TS01W01.TS01WIXM <= 1) /* Key first or not on page*/
              if (TS01W01.TS01WTSP == 1) /* first page*/
                TS01W01.TS01WIXM = 1; /* Reset index*/
              else
                TS01W01.TS01WIXM = 14; /* Index to last entry*/
                TS01W01.TS01WTSP = TS01W01.TS01WTSP - 1; /* decr page*/
              end
            end
            set TS01M001.TS01MSEL[TS01WIXM] cursor; /* Initial cursor*/
            set TS01M002.TS01MSEL[TS01WIXM] cursor; /* Initial cursor*/
            TS01W01.TS01WCFL = "Y"; /* Indicate page was found*/
            TS01W01.TS01WSPO = 0; /* Reset starting po*/
            return; /* Return to previous process*/
          end
          TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* increment index*/
        end
      end
      TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* Increment index*/
    end

    if (TS01W01.TS01WTSP == TS01W01.TA5TSQIX) /* Last page*/
      TS01W01.TS01WIXM = 14; /* Set index to last entry*/
      set TS01M001.TS01MSEL[TS01WIXM] cursor; /* Initial cursor*/
      set TS01M002.TS01MSEL[TS01WIXM] cursor; /* Initial cursor*/
      TS01W01.TS01WCFL = "Y"; /* Indicate page was found*/
      TS01W01.TS01WSPO = 0; /* Reset starting po*/
    else
      TS01W01.TS01WTSP = TS01W01.TS01WTSP + 1; /* Increment page*/
    end
  end


end // end TS01212

// Continue repeating suppression
Function TS01213()
   /* ------------------------------------------------------------*/

               /* CONTINUE SUPRESSION OF NESTED IF*/

   /* 1) This process is used in order to help maintain better*/
      /* readability in TS01210.  The nested IF for the necessary*/
      /* screen suppression is very large, therefore causing poor*/
      /* indentation of lines.*/

   /* ------------------------------------------------------------*/

  if (TS01W02.PC4ORTYP[TS01WIXM] == TS01W02.PC4ORTYP[TS01WIXW])
    TS01M001.PC4ORTYP[TS01WIXM] = " "; /* move ' ' to order type*/
    TS01M002.PC4ORTYP[TS01WIXM] = " "; /* move ' ' to order type*/
    if (TS01W02.PC3PONBR[TS01WIXM] == TS01W02.PC3PONBR[TS01WIXW])
      TS01M001.PC3PONBR[TS01WIXM] = 0; /* move 0 to po nbr*/
      TS01M002.PC3PONBR[TS01WIXM] = 0; /* move 0 to po nbr*/
    end
  end


end // end TS01213

// Check attention identifier
Function TS01300()
   /* ------------------------------------------------------------*/

         /* CHECK THE ATTENTION IDENTIFIER*/

   /* 1) Check attention identifier used to invoke transaction.*/
   /* 2) If FAST PATH was requested, transfer to the application.*/
   /* 3) If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

   /* bnagar change begin - 12/11/01*/
  if ((converseVar.eventKey is pf13 || 
  converseVar.eventKey is pf15))
    TS01-1630(); /* select the dest location*/
    if ((TSCREC.XCTCD == "USA" ||  /* usa destination shps*/
    TSCREC.XCTCD == "CANA" ||      /* canada destination shps*/
    TSCREC.XCTCD == "GUAM" ||      
    TSCREC.XCTCD == "USVI" ||      
    TSCREC.XCTCD == "PUER" ||      
    TSCREC.XCTCD == "JAMA" ||      
    TSCREC.XCTCD == "BAHA" ||      
    TSCREC.XCTCD == "SAIP"))       /**/
      converseLib.validationFailed(452); /* no access to USA/Canada shp*/
      TS01M001.XXXPRCNM = "TS01600"; /* process name*/
      set TS01M001.TSFSHPID cursor, protect, bold; /* highlighted fi*/
      set TS01M001.TSFBOL protect, bold;
      set TS01M001.TSACARCD protect, bold;
      set TS01M001.TS5CRAFT protect, bold;
      set TS01M001.TSFSHPNB protect, bold;
      exit stack;
    end
  end
   /* bnagar change end - 12/11/01*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS01M001 initial; /* Clear the map fields*/
    set TS01M002 initial; /* Clear the map fields*/
    TS01W01.TS01WSWR = "N"; /* Set request for data = n*/
    set TS01W02 empty; /* Clear temporary storage*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TSWREC.TSHCNTNR = " "; /* Clear the save container value*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move in pass data*/
    COMMAREA.CATOAP = "TS0J"; /* set to transportation menu*/
    TS01110(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS01M001.XXXPRCNM = "TS01300"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf10 /* PF10 was pressed*/
   && TS01W01.TS01WMAP == "1 ")    /* Left map currently displayed*/
    TS01W01.TS01WPSW = "Y"; /* indicate error*/
    TS01M001.XXXPRCNM = "TS01300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf11 /* PF11 was pressed*/
   && TS01W01.TS01WMAP == "2 ")    /* right map currently displayed*/
    TS01W01.TS01WPSW = "Y"; /* indicate error*/
    TS01M002.XXXPRCNM = "TS01300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    TS01110(); /* Purge any temporary storage*/
    COMMAREA.CATOAP = "TS0Y"; /* Set to TS0y current*/
    TSWREC.TSWADDMO = "M"; /* pass option*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
    XSTSS01(); /* transfer to application*/
    TS01W01.TS01WPSW = "Y"; /* if fails, then indicate error*/
    TS01M001.XXXPRCNM = "TS01300"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    if (COMMAREA.CAADDFL == "N" /* if user add not authorized*/
     || COMMAREA.CACHGFL == "N" /* or user change not authorized*/
     || TS01W01.YSSUPDFL == "N") /* or status update not authorized*/
      TS01W01.TS01WPSW = "Y"; /* indicate error*/
      TS01M001.XXXPRCNM = "TS01300"; /* Process name*/
      TS01M002.XXXPRCNM = "TS01300"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      if (converseVar.eventKey is pa1 /* PA1 was pressed*/
       || converseVar.eventKey is pa3) /* or PA3 was pressed*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    if (COMMAREA.CADELFL == "N" /* if user delete not authorized*/
     || TS01W01.YSSDELFL == "N") /* or status delete not authorized*/
      TS01W01.TS01WPSW = "Y"; /* indicate error*/
      TS01M001.XXXPRCNM = "TS01300"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      if (converseVar.eventKey is pa1 /* PA1 was pressed*/
       || converseVar.eventKey is pa3) /* or PA3 was pressed*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf15  /* and PF15 was not pressed*/
   && converseVar.eventKey not pf16  /* and PF16 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/

    TS01W01.TS01WPSW = "Y"; /* indicate error*/
    TS01M001.XXXPRCNM = "TS01300"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

end // end TS01300

// Reset highlighted fields
Function TS01400()
   /* ------------------------------------------------------------*/

                /* RESET HIGHLIGHTED FIELDS*/

      /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  if (TS01W02.PC3PONBR[1] != 0) /* If data exists*/
    set TS01M001.TS01MSEL[1] cursor; /* Reset cursor*/
    set TS01M002.TS01MSEL[1] cursor; /* Reset cursor*/
  end

  TS01W01.TS01WIXM = 1; /* Initialize line index*/
  while (TS01W01.TS01WIXM <= 14 /* Until end of lines*/
   && TS01W02.PC3PONBR[TS01WIXM] != 0) /* and data exists*/
    if (TS01M001.PC3PONBR[TS01WIXM] > 0) /* if data exists*/
      set TS01M001.TS01MSEL[TS01WIXM] normal; /* set fields to normal*/
      set TS01M002.TS01MSEL[TS01WIXM] normal; /* set fields to normal*/
    end
    set TS01M001.TSISTAT[TS01WIXM] normal;
    TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* Increment line index*/
  end


end // end TS01400

// Verify the entered data
Function TS01500()
   /* ------------------------------------------------------------*/

                /* VERIFY THE ENTERED DATA*/

   /* 1) Determine whether a valid request to scroll was entered.*/
   /* 2) If not a scroll request, verify any changed data.*/
   /* 3) If any errors were found, exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    TS01510(); /* Verify scroll request*/
  end

  TS01520(); /* Verify any changed data*/


end // end TS01500

// Verify scroll request
Function TS01510()
   /* ------------------------------------------------------------*/

                /* VERIFY THE SCROLL REQUEST*/

     /* 1) Ensure that pages exist to scroll forward or back.*/
     /* 2) Indicate an error for any data that was modified.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS01W01.TS01WTSP < 2)       /* and no previous pages*/
    TS01M001.XXXPRCNM = "TS01510"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01510"; /* Process name*/
    TS01W01.TS01WPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS01W01.TS01WTSP >= TS01W01.TA5TSQIX) /* and no more pages*/
    TS01M001.XXXPRCNM = "TS01510"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01510"; /* Process name*/
    TS01W01.TS01WPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end


  TS01W01.TS01WIXM = 14; /* Initialize line index*/


  while (TS01W01.TS01WIXM > 0) /* Until end of lines*/
    if (TS01M001.TS01MSEL[TS01WIXM] != TS01W02.TS01MSEL[TS01WIXM]
     || TS01M002.TS01MSEL[TS01WIXM] != TS01W02.TS01MSEL[TS01WIXM])
      set TS01M001.TS01MSEL[TS01WIXM] cursor, modified, bold; /* Highlight*/
      set TS01M002.TS01MSEL[TS01WIXM] cursor, modified, bold; /* Highlight*/
      TS01M001.XXXPRCNM = "TS01510"; /* Process name*/
      TS01M002.XXXPRCNM = "TS01510"; /* Process name*/
      TS01W01.TS01WPSW = "Y"; /* indicate error*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end
    TS01W01.TS01WIXM = TS01W01.TS01WIXM - 1; /* Decrement line number*/
  end


end // end TS01510

// Verify any changed data
Function TS01520()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) If ezeaid was ENTER, PF13, PF15, PF16*/
      /* then verify that a valid selection has been entered.*/

   /* ------------------------------------------------------------*/

  TS01W01.TS01WSFL = "N"; /* Initialize selection flag*/
  TS01W01.TS01WSTF = "N"; /* Initialize status chg flag*/
  TS01W01.TS01WIXM = 14; /* Initialize index*/

  while (TS01W01.TS01WIXM > 0) /* Until end of lines*/

  /* IF TS01W02.PC3PONBR(TS01WIXM) NE 0;    /* if data exists*/
  /* po information may not exist on cplhd*/
    if (TS01W02.SY1STNBR[TS01WIXM] != " " /* if data exists*/
    )                                     /* If the status has been changed*/
      if (TS01M001.TSISTAT[TS01WIXM] != TS01W02.TSISTAT[TS01WIXM])
        TS01W01.TS01WSTF = "Y"; /* Set status chg flag*/
        if (TS01M001.TSISTAT[TS01WIXM] in YSSTBL.YSSCD)
   /* bnagar change begin - 12/07/01*/
          TS01-1630();
          if ((TSCREC.XCTCD == "USA" ||  /* usa destination shps*/
          TSCREC.XCTCD == "CANA" ||      /* canada destination shps*/
          TSCREC.XCTCD == "GUAM" ||      
          TSCREC.XCTCD == "USVI" ||      
          TSCREC.XCTCD == "PUER" ||      
          TSCREC.XCTCD == "JAMA" ||      
          TSCREC.XCTCD == "BAHA" ||      
          TSCREC.XCTCD == "SAIP"))       /**/
            converseLib.validationFailed(452); /* no access to USA/Canada shp*/
            TS01M001.XXXPRCNM = "TS01520"; /* process name*/
            set TS01M001.TSFSHPID cursor, protect, bold; /* highlighted f*/
            set TS01M001.TSFBOL protect, bold;
            set TS01M001.TSACARCD protect, bold;
            set TS01M001.TS5CRAFT protect, bold;
            set TS01M001.TSISTAT[TS01WIXM] protect, bold;
            set TS01M001.TSEDEST protect, bold;
            exit stack;
          end

          if (TS01W02.TSISTAT[TS01WIXM] == "ER"
           && TS01M001.TSISTAT[TS01WIXM] != "IT"
           && TS01M001.TSISTAT[TS01WIXM] != "RC")
            converseLib.validationFailed(291); /* invalid change*/
            set TS01M001.TSISTAT[TS01WIXM] cursor, modified, bold;
            TS01W01.TS01WPSW = "Y"; /* move yes to error switch*/
          end

          if (TS01W02.TSISTAT[TS01WIXM] == "CR"
           && TS01M001.TSISTAT[TS01WIXM] != "CC"
           && TS01M001.TSISTAT[TS01WIXM] != "RC")
            converseLib.validationFailed(292); /* invalid change*/
            set TS01M001.TSISTAT[TS01WIXM] cursor, modified, bold;
            TS01W01.TS01WPSW = "Y"; /* move yes to error switch*/
          end

          if (TS01W02.TSISTAT[TS01WIXM] == "IT"
           && TS01M001.TSISTAT[TS01WIXM] != "ER"
           && TS01M001.TSISTAT[TS01WIXM] != "RC")
            converseLib.validationFailed(307); /* invalid change*/
            set TS01M001.TSISTAT[TS01WIXM] cursor, modified, bold;
            TS01W01.TS01WPSW = "Y"; /* move yes to error switch*/
          end

          if (TS01W02.TSISTAT[TS01WIXM] == "CC"
           && TS01M001.TSISTAT[TS01WIXM] != "CR"
           && TS01M001.TSISTAT[TS01WIXM] != "RC")
            converseLib.validationFailed(308); /* invalid change*/
            set TS01M001.TSISTAT[TS01WIXM] cursor, modified, bold;
            TS01W01.TS01WPSW = "Y"; /* move yes to error switch*/
          end
   /* bnagar change end - 12/07/01*/

        else
          converseLib.validationFailed(36); /* status is missing or invalid*/
          set TS01M001.TSISTAT[TS01WIXM] cursor, modified, bold;
          TS01W01.TS01WPSW = "Y"; /* move yes to error switch*/
        end
      end
    end

    if (TS01M001.TS01MSEL[TS01WIXM] != " " /* If selection is not blank*/
     || TS01M002.TS01MSEL[TS01WIXM] != " ") /* If selection is not blank*/
      TS01W01.TS01WSFL = "Y"; /* Initialize selection flag*/
      if (TS01M001.TS01MSEL[TS01WIXM] == "S" /* Save the key*/
       || TS01M002.TS01MSEL[TS01WIXM] == "S") /* Save the key*/
             /* continue on*/
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        set TS01M001.TS01MSEL[TS01WIXM] cursor, modified, bold;
        set TS01M002.TS01MSEL[TS01WIXM] cursor, modified, bold;
        TS01W01.TS01WPSW = "Y"; /* move yes to error switch*/
      end
    end

    TS01W01.TS01WIXM = TS01W01.TS01WIXM - 1; /* decrement line index*/
  end

  if (TS01W01.TS01WPSW == "N" /* If no other errors*/
   && TS01W01.TS01WSTF == "N") /* and no status changes*/
    if (converseVar.eventKey is enter /* If enter is pressed*/
     || converseVar.eventKey is pf13  /* or pf16 is pressed*/
     || converseVar.eventKey is pf15  /* or pf15 is pressed*/
     || converseVar.eventKey is pf16) /* or pf16 is pressed*/

      if (TS01W01.TS01WSFL == "N") /* If no selection is made*/
        converseLib.validationFailed(153); /* Error message and highlight*/
        TS01M001.XXXPRCNM = "TS01520"; /* Process name*/
        TS01M002.XXXPRCNM = "TS01520"; /* Process name*/
        TS01W01.TS01WPSW = "Y"; /* Move yes to error switch*/
      else
        if (TSWREC.YSSCD == "TN") /* If this shipment is tentative*/
          converseLib.validationFailed(268); /* invalid transfer requested*/
          TS01M001.XXXPRCNM = "TS01520"; /* Process name*/
          TS01M002.XXXPRCNM = "TS01520"; /* Process name*/
          TS01W01.TS01WPSW = "Y"; /* Move yes to error switch*/
        end
      end

    end
  end


end // end TS01520

// Process valid input request
Function TS01600()
   /* ------------------------------------------------------------*/

              /* PROCESS VALID INPUT REQUESTS*/

     /* 1) If selection is made, record the selection information*/
        /* in the pass arrays.*/
     /* 2) If status has been changed, then perform processing*/
        /* for status changes.*/
     /* 3) If a scroll request, adjust temporary storage page*/
        /* number.*/
     /* 4) Transfer to requested map or application according*/
        /* to PFkey pressed.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* Check for selections*/
   /* ------------------------------------------------------------*/
  if (TS01W01.TS01WSFL == "Y") /* if selection is made*/
    TS01W01.TS01WIXM = 1; /* set up index*/
    TS01W01.TS01WIXW = 1; /* set up index*/
    while (TS01W01.TS01WIXM <= 14 /* Until end of lines*/
     && TS01W01.TS01WIXW <= TS01W01.TS01WMSL) /* le max select lines*/
      if (TS01M001.TS01MSEL[TS01WIXM] == "S" /* Save the key*/
       || TS01M002.TS01MSEL[TS01WIXM] == "S") /* Save the key*/
        TSWREC.TSW2SHP[TS01WIXW] = TSWREC.TSFSHPID;
        TSWREC.TSWPLNBR[TS01WIXW] = TS01W02.TSIPLNBR[TS01WIXM];
        TSWREC.PC3PONBR = TS01W02.PC3PONBR[TS01WIXM];
        TS01W01.TS01WIXW = TS01W01.TS01WIXW + 1; /* Increment line index*/
      end
      TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* increment line index*/
    end
  end

  TS01W01.TS01WSPO = 0; /* Initialize save po*/
  TS01W01.TS01WSPG = 0; /* Initialize save page*/

   /* ------------------------------------------------------------*/
           /* Check for status changes*/
   /* ------------------------------------------------------------*/
  if (TS01W01.TS01WSTF == "Y" /* if status change has been made*/
   && TS01W01.TS01WSWF != "Y") /* and no warning has been issued*/
   /* bnagar change begin - 12/07/01*/
    TS01-1630();
    if ((TSCREC.XCTCD == "USA" ||  /* usa destination shps*/
    TSCREC.XCTCD == "CANA" ||      /* canada destination shps*/
    TSCREC.XCTCD == "GUAM" ||      
    TSCREC.XCTCD == "USVI" ||      
    TSCREC.XCTCD == "PUER" ||      
    TSCREC.XCTCD == "JAMA" ||      
    TSCREC.XCTCD == "BAHA" ||      
    TSCREC.XCTCD == "SAIP"))       /**/
      converseLib.validationFailed(452); /* no access to USA/Canada shp*/
      TS01M001.XXXPRCNM = "TS01601"; /* process name*/
      set TS01M001.TSFSHPID cursor, protect, bold; /* highlighted f*/
      set TS01M001.TSFBOL protect, bold;
      set TS01M001.TSACARCD protect, bold;
      set TS01M001.TS5CRAFT protect, bold;
      set TS01M001.TSISTAT[TS01WIXM] protect, bold;
      set TS01M001.TSEDEST protect, bold;
      exit stack;
    end
    TS01W01.TS01WSWF = "Y"; /* set warning*/
    TS01W01.TS01WPSW = "Y"; /* set error flag*/
    converseLib.validationFailed(290); /* indicate confirm message*/
    TS01W01.TS01WIXM = 1;
    while (TS01W01.TS01WIXM <= 14) /* Until end of lines*/
        /* Save the current screen statuses for recheck purposes*/
      TS01W01.TSISTAT[TS01WIXM] = TS01M001.TSISTAT[TS01WIXM];
      TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* increment line index*/
    end
   /* bnagar change end - 12/07/01*/
    return; /* Go to bottom of this process*/
  else
    if (TS01W01.TS01WSTF == "Y") /* if status change has been made*/
   /* bnagar change begin - 12/07/01*/
      TS01-1630(); /* get destination ctry*/
      if ((TSCREC.XCTCD == "USA" ||  /* usa destination shps*/
      TSCREC.XCTCD == "CANA" ||      /* canada destination shps*/
      TSCREC.XCTCD == "GUAM" ||      
      TSCREC.XCTCD == "USVI" ||      
      TSCREC.XCTCD == "PUER" ||      
      TSCREC.XCTCD == "JAMA" ||      
      TSCREC.XCTCD == "BAHA" ||      
      TSCREC.XCTCD == "SAIP"))      
        converseLib.validationFailed(452); /* no access to USA/Canada shp*/
        TS01M001.XXXPRCNM = "TS01602"; /* process name*/
        set TS01M001.TSFSHPID cursor, protect, bold; /* highlighted f*/
        set TS01M001.TSFBOL protect, bold;
        set TS01M001.TSACARCD protect, bold;
        set TS01M001.TS5CRAFT protect, bold;
        set TS01M001.TSISTAT[TS01WIXM] protect, bold;
        set TS01M001.TSEDEST protect, bold;
        exit stack;
      end
      TS01610(); /* Check for warning flag reset*/
      if (TS01W01.TS01WIXM == 99) /* if something status changed*/
        TS01W01.TS01WSWF = "Y"; /* set warning*/
        TS01W01.TS01WPSW = "Y"; /* set error flag*/
        converseLib.validationFailed(290); /* indicate confirm message*/
        TS01W01.TS01WIXM = 1;
        while (TS01W01.TS01WIXM <= 14) /* Until end of lines*/
             /* Save the current screen status for recheck purposes*/
          TS01W01.TSISTAT[TS01WIXM] = TS01M001.TSISTAT[TS01WIXM];
          TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* increment line index*/
        end
        return; /* Go to bottom of this process*/
      else
        TS01W01.TS01WSWF = "N"; /* reset warning*/
        TS01620(); /* Perform status updates*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with updates*/
          TS01W01.TS01WSWR = "Y"; /* Indicate request for data yes*/
          TS01W01.TS01WSPG = TS01W01.TS01WTSP; /* save curr page*/
          converseLib.validationFailed(44); /* Indicate update successful*/
          return; /* Go to bottom of this process*/
        end
      end
   /* bnagar change end - 12/07/01*/
    end
  end

   /* ------------------------------------------------------------*/
           /* Check for pfkey operations*/
   /* ------------------------------------------------------------*/
   /* bnagar change begin- 12/09/01*/
  if ((converseVar.eventKey is pf13 || 
  converseVar.eventKey is pf15))
    TS01-1630(); /* select the dest location*/
    if ((TSCREC.XCTCD == "USA" ||  /* usa destination shps*/
    TSCREC.XCTCD == "CANA" ||      /* canada destination shps*/
    TSCREC.XCTCD == "GUAM" ||      
    TSCREC.XCTCD == "USVI" ||      
    TSCREC.XCTCD == "PUER" ||      
    TSCREC.XCTCD == "JAMA" ||      
    TSCREC.XCTCD == "BAHA" ||      
    TSCREC.XCTCD == "SAIP"))       /**/
      converseLib.validationFailed(452); /* no access to USA/Canada shp*/
      TS01M001.XXXPRCNM = "TS01600"; /* process name*/
      TS01W01.TS01WPSW = "Y"; /* set error switch*/
      set TS01M001.TSFSHPID cursor, modified, bold; /* highlighted fi*/
      set TS01M001.TSFBOL protect, bold;
      set TS01M001.TSACARCD protect, bold;
      set TS01M001.TS5CRAFT protect, bold;
      set TS01M001.TSFSHPNB protect, bold;
      return;
    end
  end
   /* bnagar change end  - 12/09/01*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS01W01.TS01WTSP = TS01W01.TS01WTSP - 1; /* Decrement page number*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      TS01W01.TS01WTSP = TS01W01.TS01WTSP + 1; /* Increment page number*/
    else
      if (converseVar.eventKey is pf10) /* Request for left screen*/
        TS01W01.TS01WMAP = "1 "; /* Update map nbr to '1 '*/
      else
        if (converseVar.eventKey is pf11) /* Request for right screen*/
          TS01W01.TS01WMAP = "2 "; /* Update map nbr to '2 '*/
        else
          if (converseVar.eventKey is pf13) /* PF13 was pressed*/
            COMMAREA.CATOAP = "TS0V"; /* Set to TS0V current*/
            TSWREC.TSWOPTSW = "M"; /* pass option*/
            COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
            XSTSS01(); /* transfer to application*/
            TS01W01.TS01WPSW = "Y"; /* if fails, indicate error*/
            TS01M001.XXXPRCNM = "TS01600"; /* Process name*/
            TS01M002.XXXPRCNM = "TS01600"; /* Process name*/
          else
            if (converseVar.eventKey is pf15) /* PF15 was pressed*/
              COMMAREA.CATOAP = "TS0V"; /* Set to TS0V current*/
              TSWREC.TSWOPTSW = "D"; /* pass option*/
              COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
              XSTSS01(); /* transfer to application*/
              TS01W01.TS01WPSW = "Y"; /* if fails, indicate error*/
              TS01M001.XXXPRCNM = "TS01600"; /* Process name*/
              TS01M002.XXXPRCNM = "TS01600"; /* Process name*/
            else
              if (converseVar.eventKey is pf16) /* PF16 was pressed*/
                COMMAREA.CATOAP = "TS02"; /* Set to TS02 current*/
                TSWREC.TSWFRAPP = "TS01"; /* Set to TS01*/
                TSWREC.TSWOPTSW = "I"; /* pass option*/
                COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
                XSTSS01(); /* transfer to application*/
                TS01W01.TS01WPSW = "Y"; /* if fails, indicate error*/
                TS01M001.XXXPRCNM = "TS01600"; /* Process name*/
                TS01M002.XXXPRCNM = "TS01600"; /* Process name*/
              else
                if (converseVar.eventKey is enter) /* ENTER was pressed*/
                  COMMAREA.CATOAP = "TS0V"; /* Set to TS0V current*/
                  TSWREC.TSWOPTSW = "I"; /* pass option*/
                  COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
                  XSTSS01(); /* transfer to application*/
                  TS01W01.TS01WPSW = "Y"; /* if fails, indicate error*/
                  TS01M001.XXXPRCNM = "TS01600"; /* Process name*/
                  TS01M002.XXXPRCNM = "TS01600"; /* Process name*/
                end /* enter*/
              end /* PF16*/
            end /* PF15*/
          end /* PF13*/
        end /* PF11*/
      end /* PF10*/
    end /* PF8*/
  end /* PF7*/



end // end TS01600

// Check for warning flag reset
Function TS01610()
   /* ------------------------------------------------------------*/

                /* CHECK FOR WARNING FLAG RESET*/

     /* 1) If the user has change anything since the warning was*/
        /* issued, then indicate it by setting ts01wixm to 99*/

   /* ------------------------------------------------------------*/

  TS01W01.TS01WIXM = 1; /* set up index*/
  while (TS01W01.TS01WIXM <= 14) /* Until end of lines*/
    if (TS01M001.TSISTAT[TS01WIXM] != TS01W01.TSISTAT[TS01WIXM])
      TS01W01.TS01WIXM = 99; /* end loop*/
    end
    TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* increment line index*/
  end


end // end TS01610

// Perform status updates
Function TS01620()
   /* ------------------------------------------------------------*/

                  /* PERFORM STATUS UPDATES*/

     /* 1) Process and update each packing list row that has*/
        /* changed.*/

   /* ------------------------------------------------------------*/

  TS01W01.TS01WIXM = 1;
  while (TS01W01.TS01WIXM <= 14)
    if (TS01M001.TSISTAT[TS01WIXM] != TS01W02.TSISTAT[TS01WIXM])
      TS01621(); /* Select the unique packing list*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If selection ok*/
        TS01623(); /* Update the selected row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If update ok*/
          TS01W02.TSISTAT[TS01WIXM] = TS01M001.TSISTAT[TS01WIXM];
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
          
        else
          TS01W01.TS01WIXM = 99; /* End loop*/
        end
      else
        TS01W01.TS01WIXM = 99; /* End loop*/
      end
    end
    TS01W01.TS01WIXM = TS01W01.TS01WIXM + 1; /* increment line index*/
  end


end // end TS01620

// Select row DTRANS.VCPLHD01
Function TS01621()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  set VCPLHD03 empty;
  VCPLHD03.TS-NIKE-SHP-ID = TS01M001.TSFSHPID; /* shipment number*/
  VCPLHD03.TS-NIKE-SHP-ID = TS01M002.TSFSHPID; /* shipment number*/
  VCPLHD03.TS-NIKE-PL-NBR = TS01W02.TSIPLNBR[TS01WIXM]; /* pl number*/

  TSGREC.TSNFNC = "SA"; /* move selection to pass record*/
  call "VCPLHD03" (TSGREC, SQLCA, VCPLHD03) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS01621"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD03"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS01M001.XXXPRCNM = "TS01621"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01621"; /* Process name*/
  end


end // end TS01621

// Update row DTRANS.VCPLHD03
Function TS01623()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

       /* - Move in all fields to VCPLHD03.*/
       /* - Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

  VCPLHD03.TS-CPL-STAT-CD = TS01M001.TSISTAT[TS01WIXM]; /* pl status*/
  VCPLHD03.XRE-RCPT-XCEP-CD = "  "; /* Clear the exception code*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  VCPLHD03.XXX-USER-ID = COMMAREA.CAUSERID;
  VCPLHD03.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD03.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "VCPLHD03" (TSGREC, SQLCA, VCPLHD03) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS01623"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD03"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS01M001.XXXPRCNM = "TS01623"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01623"; /* Process name*/
  end


end // end TS01623

// Select shipment header row
Function TS01S01()
   /* ------------------------------------------------------------*/

                /* SELECT THE SHIPMENT HEADER*/

         /* 1) Select the shipment header.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S "; /* move selection to pass record*/
  call "IO2540" (TSNREC, SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If valid return code*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS01S01"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW ";
    TA1REC.TA1MAP = "TS01M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS01W01.TS01WPSW = "Y"; /* Indicate not available*/
    TS01M001.XXXPRCNM = "TS01S01"; /* Process name*/
    TS01M002.XXXPRCNM = "TS01S01"; /* Process name*/

  end


end // end TS01S01

//*** RECORD=TS01W01 ****
// Working storage for TS0O - Location Inquiry/Maintenance
// ***********************
Record TS01W01 type basicRecord
  10 TS01WARY TS01WARY [10] ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 TSHNKCN TSHNKCN ; 
    15 TS01WAPO TS01WAPO ; 
  10 TS01WCSK TS01WCSK ; 
    15 TS01WSCN TS01WSCN ; 
    15 TS01WSPO TS01WSPO ; 
  10 TS01WCFL TS01WCFL ; 
  10 TS01WMAP TS01WMAP ; 
  10 TS01WIXM TS01WIXM ; 
  10 TS01WIXW TS01WIXW ; 
  10 TS01WMCP TS01WMCP ; 
  10 TS01WMFL TS01WMFL ; 
  10 TS01WWFL TS01WWFL ; 
  10 TS01WMSL TS01WMSL ; 
  10 TS01WPSW TS01WPSW ; 
  10 TS01WSFL TS01WSFL ; 
  10 TS01WSTF TS01WSTF ; 
  10 TS01WSW1 TS01WSW1 ; 
  10 TS01WSW2 TS01WSW2 ; 
  10 TS01WSWR TS01WSWR ; 
  10 TS01WSWF TS01WSWF ; 
  10 TS01WTSP TS01WTSP ; 
  10 TS01WSPG TS01WSPG ; 
  10 TSISTAT TSISTAT [14] ; 
  10 TSIDETFL TSIDETFL ; 
  10 PC3PONBR PC3PONBR ; 
  10 TSISHPQT TSISHPQT ; 
  10 TSICRTQT TSICRTQT ; 
  10 TSIPLCBM TSIPLCBM ; 
  10 TSIPLTKG TSIPLTKG ; 
  10 TSHSEAL TSHSEAL ; 
  10 YCNCD YCNCD ; 
  10 TSHTKG TSHTKG ; 
  10 TSHTCBM TSHTCBM ; 
  10 TS01WDAT TS01WDAT ; 
    15 TS01WPCN TS01WPCN ; 
    15 TS01WPYY TS01WPYY ; 
    15 TS01WPM1 TS01WPM1 ; 
    15 TS01WPM2 TS01WPM2 ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 YSSDELFL YSSDELFL ; 
  10 YSSUPDFL YSSUPDFL ; 
end // end TS01W01

//*** RECORD=TS01W02 ****
// Temporary storage record for TS01 - Shp CPL   Inq/Maint.
// ***********************
Record TS01W02 type basicRecord
  10 TS01WLEN TS01WLEN ; 
  10 TS01WLIN TS01WLIN [14] ; 
    15 TS01MSEL TS01MSEL ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TS01WPOI TS01WPOI ; 
      20 TS01WPOIRNG TS01WPOIRNG ; 
        25 TS01MPYR TS01MPYR ; 
        25 TS01MPMO TS01MPMO ; 
        25 TS01MDMO TS01MDMO ; 
      20 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC6ITMNB PC6ITMNB ; 
    15 PC2CUXID PC2CUXID ; 
    15 TS01W-SALES-ORDER TS01W-SALES-ORDER ; 
      20 TS01W-CUST-ORD-ID TS01W-CUST-ORD-ID ; 
      20 TS01W-NIKE-ORD-ID TS01W-NIKE-ORD-ID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 TSPFCIVC TSPFCIVC ; 
    15 TSISHPQT TSISHPQT ; 
    15 TSICRTQT TSICRTQT ; 
    15 TSISTAT TSISTAT ; 
    15 TSIDETFL TSIDETFL ; 
end // end TS01W02

// demand month
DataItem TS01MDMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// production month
DataItem TS01MPMO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// production year
DataItem TS01MPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map selection field
DataItem TS01MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cust order id of sales order
DataItem TS01W-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Nike order id of sales order
DataItem TS01W-NIKE-ORD-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sales order number
DataItem TS01W-SALES-ORDER num(12,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Array save po number
DataItem TS01WAPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cpl information save array
DataItem TS01WARY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change flag
DataItem TS01WCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change Save Key
DataItem TS01WCSK char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem TS01WDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem TS01WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem TS01WIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS01WLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS01WLIN char(85)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS01WMAP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max cpl array lines (1-8)
DataItem TS01WMCP smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Message flag
DataItem TS01WMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max selection lines
DataItem TS01WMSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem TS01WPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS01WPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS01WPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem TS01WPOI char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS01WPOIRNG char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS01WPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS01WPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Save container number
DataItem TS01WSCN char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem TS01WSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save page
DataItem TS01WSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Save po number
DataItem TS01WSPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Status change flag
DataItem TS01WSTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch1
DataItem TS01WSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem TS01WSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status change warning flag
DataItem TS01WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS01WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS01WTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work flag
DataItem TS01WWFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

