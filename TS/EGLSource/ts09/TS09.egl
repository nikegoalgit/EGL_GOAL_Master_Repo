package ts09;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS09 ****
// This program allows users to pull up all container numbers
// associated with a given CARRIER/CRAFT/SHIPMENT and then
// select any or all of these either to submit a batch job that
// will create a PACKING LIST REPORT for the selected container
// numbers or to view the products packed in the containers.
// They will be able to narrow the selection by entering a
// warehouse, destination or even a single container number.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      05/09/90  LSUTTO  New application.
// TS#118   08/03/90  SPOPA   Change message displayed after a
//                            batch job request is submitted.
// TS#5     08/21/90  SPOPA   Add PF20:VIEW function.
// TS#162   12/21/90  DHUFFM  Fix carton combine problem.
// TS#000   02/13/91  KSTOKK  Increase TS09W05 filler field
//                            length from 924 to 972.
// TS#187   03/21/91  DHUFFM  Fix divide by 0 problem.
// TS#000   04/09/91  SFORD   Table changes "TSOREC'
// TS#000   05/24/91  CEPPLE  Length passed to temp storage was
//                            not changed to 972 in previous
//                            fix for W05. Is corrected.
// TS#184   09/26/91  SFORD   modified M003 logic to handle
//                            carton ranges.
// TS#233   12/16/91  KSTOKK  Add left/right screen functions,
//                            so nbr & cust po, incr B/L lngth.
// TS#244   03/18/92  SFORD   Add style description to M003.
// TS#339   10/12/93  NMASTE  Fix calculated units per case.
// TS#347   03/16/94  SFORD   RE-SIZE MAP FOR 6 DIGIT CARTONS
// TS#000   04/19/95  SLEWIS  CHG SO NUMBER LENGTH
// TS#000   11/07/96  JCARL1  Remove alarm from msg display.
// TS#000   12/04/96  DKESLE  Changed TS09815 routine so sizes
//                            marked with 'X' on syclr gut code
//                            would have description on screen
// TS#000   04/17/97  RKRISH  Added an error message when craft
//                            table entries were not found
// TS#000   12/11/97  RKALLA  Added an error message when TSLOC
//                            table entries were not found
//                            Process TS09622 was changed.
// TS#000   11/22/00  npulug  Corrected the length of rec to
//                            1416 in TS09s03
// TS0000   02/23/01 BNAGAR  Change the Map ts09M003 to acco-
//                           modate carton length as 9(9).
// *********************
Program TS09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  OP1REC OP1REC; // record
  PC3REC PC3REC; // record
  PG2REC PG2REC; // record
  PG3REC PG3REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TS09W01 TS09W01; // record
  TS09W02 TS09W02; // record
  TS09W03 TS09W03; // record
  TS09W04 TS09W04; // record
  TS09W05 TS09W05; // record
  TS09W06 TS09W06; // record
  TS09W07 TS09W07; // record
  TS5REC TS5REC; // record
  TS7REC TS7REC; // record
  TSCREC TSCREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSOREC TSOREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TS09T01; // table
  use XWHTBL; // table
  use YSSTBL; // table
  use TS09M.TA0PM001,  // forms
      TS09M.TS09M001, 
      TS09M.TS09M002, 
      TS09M.TS09M003, 
      TS09M.TS09M004, 
      TS09M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* ------------------------------------------------------------*/

    set TS09M001 initial; /* Initialize map output area*/
    set TS09M002 initial; /* Initialize map output area*/
    set TS09M003 initial; /* Initialize map output area*/
    set TS09M004 initial; /* Initialize map output area*/
    set TS09W01 empty; /* Initialize working storage*/
    set TS09W02 empty; /* Initialize temporary storage*/
    set TS09W03 empty; /* Initialize parameters area*/
    set TS09W04 empty; /* Initialize working storage*/
    set TS09W05 empty; /* Initialize temporary storage*/
    set TS09W06 empty; /* Initialize working storage*/
    set TS09W07 empty; /* Initialize temporary storage*/
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set TA6REC empty;

    TS09W01.TS09WMAP = "1"; /* Map to be displayed*/
    TS09W01.TS09WSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS09001; /* Converse main process*/


    TS09001: TS09001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS09001; /* Converse main process*/


  end // end main
end // end TS09

// Select (S ) Unique VORHDRR1
Function TS09-71300()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/


  if (TS7REC.OP1PARTN == " "
   && TS7REC.OP1CUOID == 0
   && TS7REC.OP1NORID == 0)

    TS09W05.TS09W-SALES-ORDER-NBR[TS09WIXM] = 0;
    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1PARTN = TS7REC.OP1PARTN;
  OP1REC.OP1CUOID = TS7REC.OP1CUOID;
  OP1REC.OP1NORID = TS7REC.OP1NORID;


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      TS09W05.OP1CUPO[TS09WIXM] = OP1REC.OP1CUPO;
                                            /* Retrieve cust po*/

      return; /* ===> return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TS09W05.OP1CUPO[TS09WIXM] = " ";
                                  /* Move spaces to cust po*/

      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TS09M002.XXXPRCNM = "9-71300";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "9-71300"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end TS09-71300

// Left  map "M002"
Function TS09-72000()
   /* ------------------------------------------------------------*/
   /* Converse left screen*/
   /* ------------------------------------------------------------*/

  converse TS09M002 ;

  COMMAREA.CATOAP = TS09M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS09M002.CAITEM; /* Application data*/


end // end TS09-72000

// Right map "M004"
Function TS09-72005()
   /* ------------------------------------------------------------*/
   /* Converse right screen*/
   /* ------------------------------------------------------------*/

  converse TS09M004 ;

  COMMAREA.CATOAP = TS09M004.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS09M004.CAITEM; /* Application data*/


end // end TS09-72005

// Main process to display a map
Function TS09001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, if specified, display the third map.*/
   /* 4) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WMAP == "1") /* Map 001 was requested*/

    TS09100(); /* Obtain the data to display*/

    TS09200(); /* Format and display the map*/

    TS09300(); /* Check attention identifier*/

    TS09400(); /* Reset fields to normal intensity*/

    TS09500(); /* Verify the entered data*/

    TS09600(); /* Process valid input request*/

  else

    if (TS09W01.TS09WMAP == "2" /* Map 002 was requested*/
     || TS09W01.TS09WMAP == "4" /* Map 004 was requested*/
    )                          
      TS09710(); /* Obtain the data to display*/

      TS09720(); /* Format and display the map*/

      TS09730(); /* Check attention identifier*/

      TS09740(); /* Reset fields to normal intensity*/

      TS09750(); /* Verify the entered data*/

      TS09760(); /* Process valid input request*/

    else

      if (TS09W01.TS09WMAP == "3") /* Map 003 was requested*/

        TS09810(); /* Obtain the data to display*/

        TS09820(); /* Format and display the map*/

        TS09830(); /* Check attention identifier*/

        TS09840(); /* Reset fields to normal intensity*/

        TS09850(); /* Verify the entered data*/

        TS09860(); /* Process valid input request*/

      else

        /* ------------------------------------------------------------*/
         /* Write the error to the Error Diagnosis Reporting Facility.*/
        /* ------------------------------------------------------------*/

        TSWREC.XXXMODID = "001"; /* Module identification*/
        TSWREC.XXXMSGNO = 10; /* Unexpected error occurred*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = TS09W01.TS09WMAP; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        /* ------------------------------------------------------------*/
         /* Exit to display the application system menu.*/
        /* ------------------------------------------------------------*/

        COMMAREA.CATOAP = "TS0A"; /* TO application*/

        XSTSS01(); /* Exit to another application*/

        /* ------------------------------------------------------------*/
         /* Abnormally terminate the transaction if the exit failed.*/
        /* ------------------------------------------------------------*/

        TA1REC.TA1FUNC = "ABND"; /* Termination function*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

    end

  end


end // end TS09001

// Obtain the data to display
Function TS09100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move valid screen parameters to TS7REC fields.*/
   /* 2) Select sets and open cursors for DTRANS.VSHPHD02.*/
   /* 3) Fetch rows from SHIPMENT HEADER table.*/
      /* - While rows exist to fetch.*/
          /* . Process the containers associated with each*/
            /* shipment header.*/

   /* ------------------------------------------------------------*/

  TS09110(); /* Purge any temporary storage*/

  TS09W01.TS09WSW1 = "N"; /* Set end of selected set switch*/
  TS09W01.TS09WIXM = 1; /* Set counter for screen ws*/

  if (TS09W01.TS09MCNT == " ") /* Container not entered*/

    TS09120(); /* Select set by carr/craft/ship*/

    while (TS09W01.TS09WSW1 == "N") /* Until end of rows*/

      TS09130(); /* Fetch next by carr/craft/ship*/

      if (TS09W01.TS09WSW1 == "N") /* Not end of rows*/
        TS09140(); /* Format the data on the page*/
      end

    end

    TS09150(); /* Close set by carr/craft/ship*/

  else


    TS09160(); /* Open set by container number*/

    while (TS09W01.TS09WSW1 == "N") /* Until end of rows*/

      TS09170(); /* Fetch next by container number*/

      if (TS09W01.TS09WSW1 == "N") /* Not end of rows*/
        TS09140(); /* Format the data on the page*/
      end

    end

    TS09180(); /* Close set by container number*/

  end

  if (TS09W01.TS09WIXM > 1) /* Partial page exists*/
    TS09S01(); /* add that page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TA5TSQIX == 0) /* No pages formatted*/

    TSWREC.XXXMODID = "100"; /* Module identification*/
    TSWREC.XXXMSGNO = 21; /* No data to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS09W01.TS09WSWR = "N"; /* Request for data switch*/
  TS09W01.TS09WTSP = 1; /* initialize page number*/


end // end TS09100

// Purge M001 temporary storage
Function TS09110()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS19"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS09W02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS09W01.TS09WTSP = 0; /* Current page number*/
  TS09W01.TA5TSQIX = 0; /* Highest page number*/

  set TS09W02 empty; /* Page storage area*/


end // end TS09110

// Select set by carr/craft/ship
Function TS09120()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VSHPHD02*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TS7REC empty; /* Row storage area*/

  TS7REC.TSACARCD = TS09W01.TS09MCAR; /* Carrier*/
  TS7REC.TS5CRAFT = TS09W01.TS09MCFT; /* Craft*/
  TS7REC.TSFSHPNB = TS09W01.TS09MSHP; /* Shipment*/

  if (TS09W01.TS09MDST == " ") /* Destination not entered*/
    TS7REC.TSEDEST = "*"; /* Indicate all destinations*/
  else
    TS7REC.TSEDEST = TS09W01.TS09MDST; /* Destination*/
  end

  if (TS09W01.TS09MWHS == " ") /* Warehouse not entered*/
    TS7REC.XWHCD = "*"; /* Indicate all warehouses*/
  else
    TS7REC.XWHCD = TS09W01.TS09MWHS; /* Warehouse*/
  end

  if (TS09W01.YSSCD == " ") /* Status not entered*/
    TS7REC.TSHSTAT = "*"; /* Indicate all statuses*/
  else
    TS7REC.TSHSTAT = TS09W01.YSSCD; /* Status*/
  end

  call "IO5240" ("S6", SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TSWREC.XXXMODID = "120"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET BY CARR/CRAFT/SHIP";
    TA1REC.TA1MAP = "TS09M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09120

// Fetch next by carr/craft/ship
Function TS09130()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VSHPHD02*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO5240" ("N6", SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    TS09W01.TS09WSW1 = "Y"; /* Set end switch*/

  else

    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

      TSWREC.XXXMODID = "130"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS09130"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT BY CARR/CRAFT/SHIP";
      TA1REC.TA1MAP = "TS09M001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      exit stack; /* Exit to display map*/

    end

  end


end // end TS09130

// Format the data on the page
Function TS09140()
   /* ------------------------------------------------------------*/
   /* Format the selected row into working storage.*/
   /* ------------------------------------------------------------*/

  if (TS7REC.TSHCNTNR != " ") /* Container not blank*/

    TS09W02.TSHCNTNR[TS09WIXM] = TS7REC.TSHCNTNR;
    TS09W02.TSHSTAT[TS09WIXM] = TS7REC.TSHSTAT;
    TS09W02.TSEDEST[TS09WIXM] = TS7REC.TSEDEST;
    TS09W02.XWHCD[TS09WIXM] = TS7REC.XWHCD;
    TS09W02.TSACARCD[TS09WIXM] = TS7REC.TSACARCD;
    TS09W02.TS5CRAFT[TS09WIXM] = TS7REC.TS5CRAFT;
    TS09W02.TSFSHPNB[TS09WIXM] = TS7REC.TSFSHPNB;
    TS09W02.TSFDESTE[TS09WIXM] = TS7REC.TSFDESTE;

    TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* increment counter*/

    if (TS09W01.TS09WIXM > 12) /* Page is full*/
      TS09S01(); /* Add page to temp storage*/
    end

  end


end // end TS09140

// Close set by carr/craft/ship
Function TS09150()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VSHPHD02*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO5240" ("C6", SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TSWREC.XXXMODID = "150"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SET BY CARR/CRAFT/SHIP";
    TA1REC.TA1MAP = "TS09M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09150

// Open set by container number
Function TS09160()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VSHPHD02*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TS7REC empty; /* Row storage area*/

  TS7REC.TSHCNTNR = TS09W01.TS09MCNT; /* Container number*/

  if (TS09W01.YSSCD == " ") /* Status not entered*/
    TS7REC.TSHSTAT = "*"; /* All statuses*/
  else
    TS7REC.TSHSTAT = TS09W01.YSSCD; /* Container status*/
  end

  call "IO5240" ("S7", SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TSWREC.XXXMODID = "160"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09160"; /* Process name*/
    TA1REC.TA1LOC = "OPEN SET BY CONTAINER NUMBER";
    TA1REC.TA1MAP = "TS09M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09160

// Fetch next by container number
Function TS09170()
   /* ------------------------------------------------------------*/
                   /* FETCH NEXT ROW VSHPHD02*/
   /* ------------------------------------------------------------*/

  call "IO5240" ("N7", SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    TS09W01.TS09WSW1 = "Y"; /* Indicate end of rows*/

  else

    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

      TSWREC.XXXMODID = "170"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS09170"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT BY CONTAINER NUMBER";
      TA1REC.TA1MAP = "TS09M001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      exit stack; /* Exit to display map*/

    end

  end


end // end TS09170

// Close set by container number
Function TS09180()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VSHPHD02*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO5240" ("C7", SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TSWREC.XXXMODID = "180"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09180"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SET BY CONTAINER NUMBER";
    TA1REC.TA1MAP = "TS09M001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09180

// Format and display the map
Function TS09200()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data on the page.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    TS09210(); /* Format data on the page*/
  else
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS09M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS09M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS09M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/

      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TS09M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    TS09M001.XXXMODID = TSWREC.XXXMODID; /* Module identification*/

  /* SET TS09M001 ALARM;             /* Indicate sound alarm*/

  end

  converse TS09M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = TS09M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS09M001.CAITEM; /* Application data*/


end // end TS09200

// Format the selected data
Function TS09210()
   /* ------------------------------------------------------------*/
   /* Clear the map and format the heading information.*/
   /* ------------------------------------------------------------*/

  set TS09M001 initial; /* clear the map*/

  TS09M001.TS09MCAR = TS09W01.TS09MCAR; /* move in heading*/
  TS09M001.TS09MCFT = TS09W01.TS09MCFT;
  TS09M001.TS09MSHP = TS09W01.TS09MSHP;
  TS09M001.TS09MDST = TS09W01.TS09MDST;
  TS09M001.XXXCITY = TS09W01.XXXCITY;
  TS09M001.TS09MWHS = TS09W01.TS09MWHS;
  TS09M001.XWHABRV = TS09W01.XWHABRV;
  TS09M001.YSSCD = TS09W01.YSSCD;
  TS09M001.YSSABRV = TS09W01.YSSABRV;

  if (TS09W01.TA5TSQIX == 0) /* No pages were formatted*/
    TS09M001.TS09MCNT = TS09W01.TS09MCNT; /* Container*/
  end

   /* ------------------------------------------------------------*/

               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating first leg fields on map.*/
      /* - supress all generic carrier code fields.*/

   /* ------------------------------------------------------------*/

  if (TS09W01.TA5TSQIX > 0) /* Pages were formatted*/

    TA5REC.TA5TSQIX = TS09W01.TS09WTSP; /* Page number*/

    TS09211(); /* Obtain temporary storage page*/

    set TS09M001.TS09MPGL skip; /* Display "PAGE" literal*/
    set TS09M001.TS09MOFL skip; /* Display "OF" literal*/

    TS09M001.TS09WTSP = TS09W01.TS09WTSP; /* Current page number*/
    TS09M001.TA5TSQIX = TS09W01.TA5TSQIX; /* Highest page number*/

    set TS09M001.TS09MSEL[1] cursor; /* Establish cursor position*/

    TS09W01.TS09WIXM = 1; /* Initialize line indexes*/

    while (TS09W01.TS09WIXM <= 12) /* Until end of lines*/

      if (TS09W02.TSHCNTNR[TS09WIXM] > " ") /* Line was formatted*/

        set TS09M001.TS09MSEL[TS09WIXM] normal; /* Unprotect*/

        TS09M001.TS09MSEL[TS09WIXM] = TS09W02.TS09MSEL[TS09WIXM];
        TS09M001.TSHCNTNR[TS09WIXM] = TS09W02.TSHCNTNR[TS09WIXM];
        TS09M001.TSHSTAT[TS09WIXM] = TS09W02.TSHSTAT[TS09WIXM];
        TS09M001.TSEDEST[TS09WIXM] = TS09W02.TSEDEST[TS09WIXM];
        TS09M001.XWHCD[TS09WIXM] = TS09W02.XWHCD[TS09WIXM];

        if (TS09W01.TS09MCNT != " ") /* Container was entered*/

          TS09W01.TSACARCD = TS09W02.TSACARCD[TS09WIXM];
          TS09W01.TS09WCC1 = "/";
          TS09W01.TS5CRAFT = TS09W02.TS5CRAFT[TS09WIXM];
          TS09W01.TS09WCC2 = "/";
          TS09W01.TSFSHPNB = TS09W02.TSFSHPNB[TS09WIXM];

          TS09M001.TS09WCCS[TS09WIXM] = TS09W01.TS09WCCS;

        end

      end

      TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* increment index*/

    end

  end


end // end TS09210

// Read M001 temporary storage
Function TS09211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/
   /* ------------------------------------------------------------*/

  TS09W02.TS09WLEN = 468; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS19"; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS09W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TSWREC.XXXMODID = "211"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M001"; /* Map name*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09211

// Check attention identifier
Function TS09300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If PF12 pressed submit job to print container numbers.*/
   /* 7) If any AI pressed other than ENTER, PF7, or PF8*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (TS09W01.TS09WSWR == "Y") /* Request for data pending*/

      set TS09W01 empty; /* Application working storage*/
      set TS09W02 empty; /* M001 display storage*/

    end

    TS09W01.TS09WMAP = "1"; /* Map to be displayed*/
    TS09W01.TS09WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to redisplay map*/

  end

  if (TS09M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS09M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS09M001.CAITEM; /* Application data*/
      COMMAREA.CAUSERA = " "; /* clear user area*/
      TS09110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
      if (TS09W01.TS09MCAR != " " /* If keys exist*/
       && TS09W01.TS09MCFT != " " 
       && TS09W01.TS09MSHP != " ")
        TS09W01.TS09WSWR = "Y"; /* set request for data to yes*/
      else
        if (TS09W01.TS09MCNT != " ") /* If keys exist*/
          TS09W01.TS09WSWR = "Y"; /* set request for data to yes*/
        end
      end
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set TS09M001.CATOAP cursor, modified, bold; /* Highlight*/
    TSWREC.XXXMODID = "300"; /* Module identification*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS09110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TSWREC.XXXMODID = "300"; /* Module identification*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS09M001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS09110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TSWREC.XXXMODID = "300"; /* Module identification*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not BACK request*/
   && converseVar.eventKey not pf8   /* and not FRWD request*/
   && converseVar.eventKey not pf12  /* and not PRINT request*/
   && converseVar.eventKey not pf20) /* and not DISPLAY request*/

    TSWREC.XXXMODID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS09300

// Reset highlighted fields
Function TS09400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS09M001.TS09MCAR initialAttributes; /* Reset all fields*/
  set TS09M001.TS09MCFT initialAttributes;
  set TS09M001.TS09MSHP initialAttributes;
  set TS09M001.TS09MCNT initialAttributes;
  set TS09M001.YSSCD initialAttributes;
  set TS09M001.TS09MDST initialAttributes;
  set TS09M001.TS09MWHS initialAttributes;

  set TS09M001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS09M001.CAITEM initialAttributes; /* Commarea application data*/

  TS09W01.TS09WIXM = 1; /* Initialize line index*/

  while (TS09W01.TS09WIXM <= 12) /* Until end of lines*/

    if (TS09M001.TSHCNTNR[TS09WIXM] != " ") /* if container number exists*/
      set TS09M001.TS09MSEL[TS09WIXM] normal; /* Reset select flag*/
    end

    TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.YSSCD == "?" /* Shipment status list requested*/
   || TS09M001.TS09MWHS == "?") /* or warehouse list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      TSWREC.XXXMODID = "400"; /* Module identification*/
      converseLib.validationFailed(190); /* PA/PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of shipment status codes.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.YSSCD == "?") /* List was requested*/

    XPXX001(); /* Pop-up window initialization*/

    XX0XW02.XX0XWHDR = "         CONTAINER STATUS"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYSS01(); /* perform shipment status window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/

      TS09M001.YSSCD = YSSTBL.YSSCD[XX0XWPIX]; /* move code*/
      TS09M001.YSSABRV = YSSTBL.YSSABRV[XX0XWPIX]; /* move name*/
    else
      TS09M001.YSSCD = " "; /* clear fields*/
      TS09M001.YSSABRV = " ";

    end

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.TS09MWHS == "?") /* List was requested*/

    XPXX001(); /* Pop-up window initialization*/

    XX0XW02.XX0XWHDR = "         WAREHOUSE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPXWH01(); /* perform warehouse window*/
    end

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/

      TS09M001.TS09MWHS = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      TS09M001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* move name*/
    else
      TS09M001.TS09MWHS = " "; /* clear fields*/
      TS09M001.XWHABRV = " ";

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  TSWREC.XXXMODID = "400"; /* Module identification*/
  converseLib.validationFailed(176); /* Requested list(s) displayed*/

  exit stack; /* Exit to display map*/


end // end TS09400

// Verify the entered data
Function TS09500()
   /* ------------------------------------------------------------*/
   /* If application data entered, indicate only with FAST PATH.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.CAITEM > " ") /* Application data was entered*/

    set TS09M001.CAITEM cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "500"; /* Module identification*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll request then verify that pages exist to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    TS09510(); /* Verify scroll request*/

    TS09520(); /* Verify any selected lines*/

    TS09530(); /* Verify key fields not changed*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, verify the data that was entered on the screen.*/
    /* ------------------------------------------------------------*/

    if (TS09M001.TS09MCAR == " " /* Key fields not entered*/
     && TS09M001.TS09MCFT == " " 
     && TS09M001.TS09MSHP == " " 
     && TS09M001.TS09MDST == " " 
     && TS09M001.TS09MWHS == " " 
     && TS09M001.TS09MCNT == " " 
     && TS09M001.YSSCD == " "    
     && TS09W01.TA5TSQIX == 0)   /* and no pages formatted*/

      TSWREC.XXXMODID = "500"; /* Module identification*/
      converseLib.validationFailed(34); /* Data must be entered*/

    else

      if (TS09M001.TS09MCAR == TS09W01.TS09MCAR /* Key fields not changed*/
       && TS09M001.TS09MCFT == TS09W01.TS09MCFT 
       && TS09M001.TS09MSHP == TS09W01.TS09MSHP 
       && TS09M001.TS09MDST == TS09W01.TS09MDST 
       && TS09M001.TS09MWHS == TS09W01.TS09MWHS 
       && TS09M001.TS09MCNT == " "              
       && TS09M001.YSSCD == TS09W01.YSSCD)     

        TS09520(); /* Verify any selected lines*/

      else

        if (converseVar.eventKey is pf12 /* Print request*/
         || converseVar.eventKey is pf20) /* or display request*/

          TS09530(); /* Verify key fields not changed*/

        else

          TS09540(); /* Verify changed key fields*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end TS09500

// Verify scroll request
Function TS09510()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS09W01.TS09WTSP <= 1)      /* and no previous pages*/

    TSWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS09W01.TS09WTSP >= TS09W01.TA5TSQIX) /* and no more pages*/

    TSWREC.XXXMODID = "510"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


end // end TS09510

// Verify any selected lines
Function TS09520()
   /* ------------------------------------------------------------*/
   /* Determine whether any lines were selected and verify.*/
   /* ------------------------------------------------------------*/

  TS09W01.TS09WIXM = 12; /* Line index*/
  TS09W01.TS09WUSW = "N"; /* Update switch*/

  while (TS09W01.TS09WIXM >= 1) /* Until end of lines*/

    if (TS09M001.TS09MSEL[TS09WIXM] != TS09W02.TS09MSEL[TS09WIXM])

      if (TS09M001.TS09MSEL[TS09WIXM] != "S" /* Selection not 'S'*/
       && TS09M001.TS09MSEL[TS09WIXM] != " ") /* and not blank*/

        set TS09M001.TS09MSEL[TS09WIXM] cursor, bold; /* Highlight*/
        TSWREC.XXXMODID = "520"; /* Module identification*/
        converseLib.validationFailed(13); /* Only "S" may be entered*/

      else

        TS09W01.TS09WUSW = "Y"; /* Update switch*/

      end

    end

    TS09W01.TS09WIXM = TS09W01.TS09WIXM - 1; /* Line index*/

  end


end // end TS09520

// Verify key fields not changed
Function TS09530()
   /* ------------------------------------------------------------*/
   /* If any key field changed, indicate change is not allowed.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.YSSCD != TS09W01.YSSCD) /* Status changed*/

    set TS09M001.YSSCD cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (TS09M001.TS09MCNT != " ") /* Container changed*/

    set TS09M001.TS09MCNT cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (TS09M001.TS09MWHS != TS09W01.TS09MWHS) /* Warehouse changed*/

    set TS09M001.TS09MWHS cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (TS09M001.TS09MDST != TS09W01.TS09MDST) /* Destination changed*/

    set TS09M001.TS09MDST cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (TS09M001.TS09MSHP != TS09W01.TS09MSHP) /* Shipment changed*/

    set TS09M001.TS09MSHP cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (TS09M001.TS09MCFT != TS09W01.TS09MCFT) /* Craft changed*/

    set TS09M001.TS09MCFT cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(14); /* Field may not change*/

  end

  if (TS09M001.TS09MCAR != TS09W01.TS09MCAR) /* Carrier changed*/

    set TS09M001.TS09MCAR cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "530"; /* Module identification*/
    converseLib.validationFailed(14); /* Field may not change*/

  end


end // end TS09530

// Verify changed key fields
Function TS09540()
   /* ------------------------------------------------------------*/
   /* If status changed, verify the entered status code.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.YSSCD != TS09W01.YSSCD) /* Status changed*/

    if (TS09M001.YSSCD == " ") /* Status not entered*/

      TS09M001.YSSABRV = " "; /* Abbreviation*/

    else

      if (TS09M001.YSSCD in YSSTBL.YSSCD /* Code in table*/
       && YSSTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        TS09M001.YSSABRV = YSSTBL.YSSABRV[sysVar.arrayIndex]; /* Abbreviation*/

      else

        TS09M001.YSSABRV = " "; /* Abbreviation*/

        set TS09M001.YSSCD cursor, bold; /* Highlight*/
        TSWREC.XXXMODID = "540"; /* Module identification*/
        converseLib.validationFailed(36); /* Status missing or invalid*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If container changed, verify the entered containter number.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.TS09MCNT != " ") /* Container changed*/

    if (TS09M001.TS09MWHS != TS09W01.TS09MWHS /* Warehouse changed*/
     || TS09M001.TS09MDST != TS09W01.TS09MDST /* or destination changed*/
     || TS09M001.TS09MSHP != TS09W01.TS09MSHP /* or shipment changed*/
     || TS09M001.TS09MCFT != TS09W01.TS09MCFT /* or craft changed*/
     || TS09M001.TS09MCAR != TS09W01.TS09MCAR) /* or carrier changed*/

      if (TS09M001.TS09MWHS != " " /* Warehouse entered*/
       || TS09M001.TS09MDST != " " /* or destination entered*/
       || TS09M001.TS09MSHP != " " /* or shipment entered*/
       || TS09M001.TS09MCFT != " " /* or craft entered*/
       || TS09M001.TS09MCAR != " ") /* or carrier entered*/

        set TS09M001.TS09MCNT cursor, bold; /* Highlight*/
        TSWREC.XXXMODID = "540"; /* Module identification*/
        converseLib.validationFailed(299); /* Field is mutually exclusive*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If warehouse changed, verify the entered warehouse code.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.TS09MWHS != TS09W01.TS09MWHS) /* Warehouse changed*/

    if (TS09M001.TS09MWHS == " ") /* Warehouse not entered*/

      TS09M001.XWHABRV = " "; /* Abbreviation*/

    else

      if (TS09M001.TS09MWHS in XWHTBL.XWHCD /* Code in table*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

        TS09M001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Abbreviation*/

      else

        TS09M001.XWHABRV = " "; /* Abbreviation*/

        set TS09M001.TS09MWHS cursor, bold; /* Highlight*/
        TSWREC.XXXMODID = "540"; /* Module identification*/
        converseLib.validationFailed(82); /* Warehouse code invalid*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If destination changed, verify entered destination code.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.TS09MDST != TS09W01.TS09MDST) /* Destination changed*/

    if (TS09M001.TS09MDST == " ") /* Destination not entered*/

      TS09M001.XXXCITY = " "; /* City*/

    else

      TS09541(); /* select the location*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/

        TS09M001.XXXCITY = TSCREC.XXXCITY; /* move city descr*/

      else

        TS09M001.XXXCITY = " "; /* clear city descr*/

        set TS09M001.TS09MDST cursor, bold; /* Highlight*/
        TSWREC.XXXMODID = "540"; /* Module identification*/
        converseLib.validationFailed(40); /* Destination missing or invalid*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If container not entered, verify carrier, craft, shipment.*/
   /* ------------------------------------------------------------*/

  if (TS09M001.TS09MCNT == " " /* Container not entered*/
   || TS09M001.TS09MSHP != " " /* or shipment entered*/
   || TS09M001.TS09MCFT != " " /* or craft entered*/
   || TS09M001.TS09MCAR != " ") /* or carrier entered*/

    if (TS09M001.TS09MSHP == " ") /* Shipment not entered*/

      set TS09M001.TS09MSHP cursor, bold; /* Highlight*/
      TSWREC.XXXMODID = "540"; /* Module identification*/
      converseLib.validationFailed(59); /* Shipment missing or invalid*/

    end

    if (TS09M001.TS09MCFT == " ") /* Craft not entered*/

      set TS09M001.TS09MCFT cursor, bold; /* Highlight*/
      TSWREC.XXXMODID = "540"; /* Module identification*/
      converseLib.validationFailed(48); /* Craft missing or invalid*/

    end

    if (TS09M001.TS09MCAR == " ") /* Carrier not entered*/

      set TS09M001.TS09MCAR cursor, bold; /* Highlight*/
      TSWREC.XXXMODID = "540"; /* Module identification*/
      converseLib.validationFailed(39); /* Carrier missing or invalid*/

    end

  end


end // end TS09540

// Verify the location code
Function TS09541()
   /* ------------------------------------------------------------*/
                /* SELECT LOCATION DATA*/

   /* 1) Select location.*/
   /* 2) If an  unexpected return code is recieved:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Row storage area*/

  TSCREC.TSCLOCCD = TS09M001.TS09MDST; /* Location code*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

    return; /* Return to previous process*/

  end

  TSWREC.XXXMODID = "541"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS09541"; /* Process name*/
  TA1REC.TA1LOC = "VERIFY THE LOCATION CODE";
  TA1REC.TA1MAP = "TS09M001"; /* Map name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS09541

// Process valid input request
Function TS09600()
   /* ------------------------------------------------------------*/
                /* PROCESS VALID INPUT REQUESTS*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WUSW == "Y") /* Page was updated*/

    move TS09M001.TS09MSEL to TS09W02.TS09MSEL[1] for all; /* Selection flags*/

    TA5REC.TA5TSQIX = TS09W01.TS09WTSP; /* Page number*/

    TS09S02(); /* Update temporary storage page*/

  end

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS09W01.TS09WTSP = TS09W01.TS09WTSP - 1; /* Decrement page number*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    TS09W01.TS09WTSP = TS09W01.TS09WTSP + 1; /* Increment page number*/
  end

  if (converseVar.eventKey is pf12) /* PRINT requested*/
    TS09610(); /* Format/submit a background job*/
  end

  if (converseVar.eventKey is pf20) /* DISPLAY requested*/

    TS09620(); /* Find next container to display*/

    if (TS09W01.TS09WSSW == "N") /* No selection was found*/

      TSWREC.XXXMODID = "600"; /* Module identification*/
      converseLib.validationFailed(153); /* Selection must be entered*/

      exit stack; /* Exit to display map*/

    end

  end

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    if (TS09M001.TS09MCAR != TS09W01.TS09MCAR /* Carrier changed*/
     || TS09M001.TS09MCFT != TS09W01.TS09MCFT /* or craft changed*/
     || TS09M001.TS09MSHP != TS09W01.TS09MSHP /* or ship nbr changed*/
     || TS09M001.TS09MDST != TS09W01.TS09MDST /* or dest changed*/
     || TS09M001.TS09MWHS != TS09W01.TS09MWHS /* or whse changed*/
     || TS09M001.YSSCD != TS09W01.YSSCD       /* or status changed*/
     || TS09M001.TS09MCNT != " ")             /* or container entered*/

      if (TS09M001.TS09MCNT == " ") /* Container not entered*/

        TS09W01.TS09MCAR = TS09M001.TS09MCAR;
        TS09W01.TS09MCFT = TS09M001.TS09MCFT;
        TS09W01.TS09MSHP = TS09M001.TS09MSHP;
        TS09W01.TS09MDST = TS09M001.TS09MDST;
        TS09W01.XXXCITY = TS09M001.XXXCITY;
        TS09W01.TS09MWHS = TS09M001.TS09MWHS;
        TS09W01.XWHABRV = TS09M001.XWHABRV;

        TS09W01.TS09MCNT = " ";

      else

        TS09W01.TS09MCNT = TS09M001.TS09MCNT;

        TS09W01.TS09MCAR = " ";
        TS09W01.TS09MCFT = " ";
        TS09W01.TS09MSHP = " ";
        TS09W01.TS09MDST = " ";
        TS09W01.XXXCITY = " ";
        TS09W01.TS09MWHS = " ";
        TS09W01.XWHABRV = " ";

      end

      TS09W01.YSSCD = TS09M001.YSSCD;
      TS09W01.YSSABRV = TS09M001.YSSABRV;

      TS09W01.TS09WSWR = "Y"; /* Request for data switch*/

    end

  end

  if (converseVar.eventKey is enter /* ENTER was pressed*/
   || converseVar.eventKey is pf7   /* or scroll back requested*/
   || converseVar.eventKey is pf8)  /* or scroll forward requested*/

    if (TS09W01.TS09WSWR == "N") /* Request for data switch*/
      TS09630(); /* Search for selected container*/
    end

  end


end // end TS09600

// Format/submit a background job
Function TS09610()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and indexes to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TS09W01.TS09WIX2 = 1; /* Initialize JCL table index*/
  TA6REC.TA6INDEX = 1; /* Initialize parameters index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TS09W01.TS09WIX2 > 0) /* Until end of table*/

    if (TS09T01.TARTYPE[TS09WIX2] == "P") /* Parameters statement*/
      TS09611(); /* write container numbers to jcl 'accept' lines*/
      TS09W01.TS09WIX2 = TS09W01.TS09WIX2 + 1; /* Increment table index*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS09T01.TARJCL[TS09WIX2]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS09T01.TARTYPE[TS09WIX2]; /* Type*/
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment parms index*/

      if (TS09T01.TARJCL[TS09WIX2] == "/*EOF") /* End of table*/
        TS09W01.TS09WIX2 = 0; /* Indicate end of table*/
      else
        TS09W01.TS09WIX2 = TS09W01.TS09WIX2 + 1; /* Increment table index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for batch execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    TS09612(); /* Update the selection flags*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS09610

// Format the parameters to pass
Function TS09611()
   /* ------------------------------------------------------------*/
   /* Format a parameter card for each line that was selected.*/
   /* ------------------------------------------------------------*/

  set TS09W03 empty; /* Reset parameters work area*/

  TA5REC.TA5TSQIX = 1; /* Initialize temp page index*/
  TS09W01.TS09WSSW = "N"; /* Selection switch*/

  while (TA5REC.TA5TSQIX <= TS09W01.TA5TSQIX) /* Until end of temp pages*/

    TS09211(); /* Read temporary storage page*/

    TS09W01.TS09WIXM = 1; /* Initialize screen line index*/

    while (TS09W01.TS09WIXM <= 12) /* until end of this page*/

      if (TS09W02.TS09MSEL[TS09WIXM] == "S") /* if contnr selected*/

        TS09W01.TS09WSSW = "Y"; /* Selection switch*/

        TS09W03.TSHCNTNR = TS09W02.TSHCNTNR[TS09WIXM];
        TS09W03.TSHSTAT = TS09W02.TSHSTAT[TS09WIXM];
        TS09W03.TSEDEST = TS09W02.TSEDEST[TS09WIXM];
        TS09W03.XWHCD = TS09W02.XWHCD[TS09WIXM];
        TS09W03.TSACARCD = TS09W02.TSACARCD[TS09WIXM];
        TS09W03.TS5CRAFT = TS09W02.TS5CRAFT[TS09WIXM];
        TS09W03.TSFSHPNB = TS09W02.TSFSHPNB[TS09WIXM];
        TS09W03.TS09WETA = TS09W02.TSFDESTE[TS09WIXM];

        TA6REC.TARJCL[TA6INDEX] = TS09W03.TARJCL;

        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* bump jcl output index*/

      end

      TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* bump screen line index*/

    end

    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* bump temp page index*/

  end

  if (TS09W01.TS09WSSW == "N") /* No selection was found*/

    TSWREC.XXXMODID = "611"; /* Module identification*/
    converseLib.validationFailed(153); /* Selection must be entered*/

    exit stack; /* Exit to display map*/

  end


end // end TS09611

// Update the selection flags
Function TS09612()
   /* ------------------------------------------------------------*/
   /* Change the lines selected to print to indicate printed.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 1; /* Initialize temp page index*/

  while (TA5REC.TA5TSQIX <= TS09W01.TA5TSQIX) /* Until end of temp pages*/

    TS09211(); /* Read temporary storage page*/

    TS09W01.TS09WIXM = 1; /* Initialize screen line index*/
    TS09W01.TS09WUSW = "N"; /* Update switch*/

    while (TS09W01.TS09WIXM <= 12) /* until end of this page*/

      if (TS09W02.TS09MSEL[TS09WIXM] == "S") /* if contnr selected*/

        TS09W01.TS09WUSW = "Y"; /* Update switch*/

        TS09W02.TS09MSEL[TS09WIXM] = "P"; /* Line selection indicator*/

      end

      TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* bump screen line index*/

    end

    if (TS09W01.TS09WUSW == "Y") /* Page was updated*/
      TS09S02(); /* Update temporary storage page*/
    end

    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* bump temp page index*/

  end


end // end TS09612

// Find next container to display
Function TS09620()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage to display selected containers.*/
   /* ------------------------------------------------------------*/

  TS09621(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Find the next container that was selected for display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 1; /* Initialize temp page index*/
  TS09W01.TS09WSSW = "N"; /* Selection switch*/

  while (TA5REC.TA5TSQIX <= TS09W01.TA5TSQIX /* Until end of temp pages*/
   && TS09W01.TS09WSSW == "N") /* or selection found*/

    TS09211(); /* Read temporary storage page*/

    TS09W01.TS09WIXM = 1; /* Initialize screen line index*/

    while (TS09W01.TS09WIXM <= 12 /* until end of this page*/
     && TS09W01.TS09WSSW == "N") /* or selection found*/

      if (TS09W02.TS09MSEL[TS09WIXM] == "S") /* if contnr selected*/

        TS09W01.TS09WSSW = "Y"; /* Selection switch*/
      else
        TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* bump screen line index*/

      end

    end

    if (TS09W01.TS09WSSW == "N") /* No selection was found*/
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* bump temp page index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If no container selected, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WSSW == "N") /* No selection was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If container was selected, format the map heading fields.*/
   /* ------------------------------------------------------------*/

  set TS09W04 empty; /* Map 002 heading area*/

  TS09W04.TSACARCD = TS09W02.TSACARCD[TS09WIXM];
  TS09W04.TS5CRAFT = TS09W02.TS5CRAFT[TS09WIXM];
  TS09W04.TSFSHPNB = TS09W02.TSFSHPNB[TS09WIXM];
  TS09W04.TSEDEST = TS09W02.TSEDEST[TS09WIXM];
  TS09W04.XWHCD = TS09W02.XWHCD[TS09WIXM];
  if (TS09W04.XWHCD in XWHTBL.XWHCD)
    TS09W04.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  TS09W04.TSHCNTNR = TS09W02.TSHCNTNR[TS09WIXM];
  TS09W04.YSSCD = TS09W02.TSHSTAT[TS09WIXM];
  if (TS09W04.YSSCD in YSSTBL.YSSCD)
    TS09W04.YSSABRV = YSSTBL.YSSABRV[sysVar.arrayIndex];
  end
  TS09W04.TSFDESTE = TS09W02.TSFDESTE[TS09WIXM];

  if (TS09W04.TSEDEST != " ") /* Destination not blank*/

    TS09622(); /* Obtain the destination city*/

    TS09W04.XXXCITY = TSCREC.XXXCITY; /* City*/

  end

   /* ------------------------------------------------------------*/
   /* Update the page to indicate the container was processed.*/
   /* ------------------------------------------------------------*/

  TS09W02.TS09MSEL[TS09WIXM] = "V"; /* Line selection indicator*/

  TS09S02(); /* Update temporary storage page*/

   /* ------------------------------------------------------------*/
   /* Indicate the map to be displayed and a request for data.*/
   /* ------------------------------------------------------------*/

  set TS09M002 initial; /* Map 002 input/output area*/

  TS09W01.TS09WMAP = "2"; /* Map to be displayed*/
  TS09W04.TS09WSWR = "Y"; /* Request for data switch*/


end // end TS09620

// Purge M002 temporary storage
Function TS09621()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage to display selected containers.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS29"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS09W05, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09621"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  set TS09W05 empty; /* Map 002 display storage*/


end // end TS09621

// Obtain the destination city
Function TS09622()
   /* ------------------------------------------------------------*/
                /* SELECT LOCATION DATA*/

   /* 1) Select location.*/
   /* 2) If an  unexpected return code is recieved:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSCREC empty; /* Row storage area*/

  TSCREC.TSCLOCCD = TS09W04.TSEDEST; /* Location code*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
    return; /* Return to previous process*/
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* If row not found, display*/
    converseLib.validationFailed(419); /* an error message to user*/
    exit stack;
  end

  TSWREC.XXXMODID = "622"; /* Module identification*/

  if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS09622"; /* Process name*/
  TA1REC.TA1LOC = "OBTAIN THE DESTINATION CITY";
  TA1REC.TA1MAP = "TS09M001"; /* Map name*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS09622

// Search for selected container
Function TS09630()
   /* ------------------------------------------------------------*/
   /* Find the first container that was selected for display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 1; /* Initialize temp page index*/
  TS09W01.TS09WSSW = "N"; /* Selection switch*/

  while (TA5REC.TA5TSQIX <= TS09W01.TA5TSQIX /* Until end of temp pages*/
   && TS09W01.TS09WSSW == "N") /* or selection found*/

    TS09211(); /* Read temporary storage page*/

    TS09W01.TS09WIXM = 1; /* Initialize screen line index*/

    while (TS09W01.TS09WIXM <= 12 /* until end of this page*/
     && TS09W01.TS09WSSW == "N") /* or selection found*/

      if (TS09W02.TS09MSEL[TS09WIXM] == "S") /* if contnr selected*/

        TS09W01.TS09WSSW = "Y"; /* Selection switch*/
      else
        TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* bump screen line index*/

      end

    end

    if (TS09W01.TS09WSSW == "N") /* No selection was found*/
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* bump temp page index*/
    end

  end

  if (TS09W01.TS09WSSW == "Y") /* Selection was found*/

    TSWREC.XXXMODID = "630"; /* Module identification*/
    TSWREC.XXXMSGNO = 271; /* Press PF key to process*/

  end


end // end TS09630

// Obtain the data to display
Function TS09710()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS09W04.TS09WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Select and format the products packed in the container.*/
   /* ------------------------------------------------------------*/

  TS09W01.TS09WSW1 = "N"; /* End of cursor switch*/
  TS09W01.TS09WFSW = "Y"; /* First time switch*/
  TS09W01.TS09WIXM = 1; /* Map line index*/

  TS09711(); /* Open set of product numbers*/

  while (TS09W01.TS09WSW1 == "N") /* Until end of cursor*/

    TS09712(); /* Fetch the next product number*/

    TS09713(); /* Format the data on the page*/

    TS09W01.TS09WFSW = "N"; /* First time switch*/

  end

  TS09714(); /* Close set of product numbers*/

  if (TS09W01.TS09WIXM > 1) /* Line was formatted*/
    TS09S03(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (TS09W04.TA5TSQIX == 0) /* No pages formatted*/

    /* OVE '710' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 710"; /* Module id*/
    TSWREC.XXXMSGNO = 21; /* No data to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS09W04.TS09WSWR = "N"; /* Request for data switch*/
  TS09W04.TS09WTSP = 1; /* Temporary storage page number*/


end // end TS09710

// Open set of product numbers
Function TS09711()
   /* ------------------------------------------------------------*/
   /* Format the key fields and open the set of product numbers.*/
   /* ------------------------------------------------------------*/

  set PC3REC empty; /* Row storage area*/
  set TS7REC empty; /* Row storage area*/

  TS7REC.TSACARCD = TS09W04.TSACARCD; /* Carr cd*/
  TS7REC.TS5CRAFT = TS09W04.TS5CRAFT; /* Craft nbr*/
  TS7REC.TSFSHPNB = TS09W04.TSFSHPNB; /* Shp nbr*/
  TS7REC.TSEDEST = TS09W04.TSEDEST; /* Dest loc cd*/
  TS7REC.XWHCD = TS09W04.XWHCD; /* Whse cd*/
  TS7REC.TSHCNTNR = TS09W04.TSHCNTNR; /* Cntnr nbr*/
  TS7REC.TSHSTAT = TS09W04.YSSCD; /* Cntnr stat ind*/
  TS7REC.TSFDESTE = TS09W04.TSFDESTE; /* Est dest dt*/

  try
    call "TS1650" ("S2", SQLCA, PC3REC, TS7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

   /* OVE '711' TO TSWREC.XXXMODID;    /* Module identification*/
  TS09W01.TS09WERL = "TS09 711"; /* Module id*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN SET OF PRODUCT NUMBERS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TS7REC.TS7GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS09711

// Fetch the next product number
Function TS09712()
   /* ------------------------------------------------------------*/
   /* Fetch the next selected row in the shipment header cursor.*/
   /* ------------------------------------------------------------*/

  try
    call "TS1650" ("N2", SQLCA, PC3REC, TS7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS09W01.TS09WSW1 = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

   /* OVE '712' TO TSWREC.XXXMODID;    /* Module identification*/
  TS09W01.TS09WERL = "TS09 712"; /* Module id*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH THE NEXT PRODUCT NUMBER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TS7REC.TS7GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS09712

// Format the data on the page
Function TS09713()
   /* ------------------------------------------------------------*/
   /* Format the selected row into the temporary storage page.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WSW1 == "N") /* Not end of cursor*/

    TS09W04.TS09WMOR = PC3REC.PC3POIDT; /* PO id mo rng*/

    if (TS7REC.XGPCD == "03") /* Apparel product*/

      TS09W04.TS09WPOY = PC3REC.PCFSECD; /* PO id sesn cd*/
    else
      TS09W04.TS09WPOY = TS09W04.TS09WPYY; /* PO id year*/

    end

    TS09W04.TS09WPO1 = "-"; /* Dash*/
    TS09W04.TS09WPOP = TS09W04.TS09WPMM; /* Production MM*/
    TS09W04.TS09WPO2 = "-"; /* Dash*/
    TS09W04.TS09WPOD = TS09W04.TS09WDMM; /* Delivery MM*/
    TS09W04.TS09WPO3 = "-"; /* Dash*/
    TS09W04.TS09WPOF = PC3REC.FY1FCTYC; /* Factory code*/

  end

   /* ------------------------------------------------------------*/
   /* If the first time through, initialize the total quantities.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WFSW == "Y") /* First time through*/

    TS09W04.TS09WPPO = TS09W04.TS09WPOI; /* Previous PO id*/

    TS09W04.TS09WPCQ = 0; /* PO id carton quantity*/
    TS09W04.TS09WPSQ = 0; /* PO id shipped quantity*/
    TS09W04.TS09WTCQ = 0; /* Total carton quantity*/
    TS09W04.TS09WTSQ = 0; /* Total shipped quantity*/

  else

    /* ------------------------------------------------------------*/
     /* If PO id changed, format total quantities for previous id.*/
    /* ------------------------------------------------------------*/

    if (TS09W01.TS09WSW1 == "Y" /* End of cursor*/
     || TS09W04.TS09WPOI != TS09W04.TS09WPPO) /* or PO id changed*/

      TS09W05.TS09WPOI[TS09WIXM] = "PO ID TOTAL";
      TS09W05.TSICRTQT[TS09WIXM] = TS09W04.TS09WPCQ;
      TS09W05.TSISHPQT[TS09WIXM] = TS09W04.TS09WPSQ;

      TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* Line index*/

      TS09W04.TS09WTCQ = TS09W04.TS09WTCQ + TS09W04.TS09WPCQ;
      TS09W04.TS09WTSQ = TS09W04.TS09WTSQ + TS09W04.TS09WPSQ;

      TS09W04.TS09WPPO = TS09W04.TS09WPOI; /* Previous PO id*/

      TS09W04.TS09WPCQ = 0; /* PO id carton quantity*/
      TS09W04.TS09WPSQ = 0; /* PO id shipped quantity*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If the page is full, add the page to temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WIXM > 12) /* Page is full*/
    TS09S03(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* Format the selected row into the temporary storage page.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WSW1 == "N") /* Not end of cursor*/

    TS09W05.TS09WPOI[TS09WIXM] = TS09W04.TS09WPOI;
    TS09W05.PC4ORTYP[TS09WIXM] = PC3REC.PC4ORTYP;
    TS09W05.PC2CUXID[TS09WIXM] = TS7REC.PC2CUXID;
    TS09W05.PC3PONBR[TS09WIXM] = TS7REC.PC3PONBR;
    TS09W05.XGPCD[TS09WIXM] = TS7REC.XGPCD;
    TS09W05.SY1STNBR[TS09WIXM] = TS7REC.SY1STNBR;
    TS09W05.SY2CLRID[TS09WIXM] = TS7REC.SY2CLRID;
    TS09W05.XDMCD[TS09WIXM] = TS7REC.XDMCD;
    TS09W05.TSISTAT[TS09WIXM] = TS7REC.TSISTAT;
    TS09W05.TSFDESTE[TS09WIXM] = TS7REC.TSFDESTE;
    TS09W05.TSFSHPID[TS09WIXM] = TS7REC.TSFSHPID;
    TS09W05.TSIPLNBR[TS09WIXM] = TS7REC.TSIPLNBR;
    TS09W05.TSHNKCN[TS09WIXM] = TS7REC.TSHNKCN;
    TS09W05.TSFBOL[TS09WIXM] = TS7REC.TSFBOL;
    TS09W05.XQACD[TS09WIXM] = TS7REC.XQACD;
    TS09W05.PC2INSEG[TS09WIXM] = TS7REC.PC2INSEG;
    TS09W05.TS09W-COI[TS09WIXM] = TS7REC.OP1CUOID;
    TS09W05.TS09W-NOI[TS09WIXM] = TS7REC.OP1NORID;

    /* --------------------------------------------------------*/
    /* Retrieve cust po from DREADO.VORHDRR1*/
    /* --------------------------------------------------------*/

    TS09-71300(); /* Select (S ) Unique VORHDRR1*/


    if (TS7REC.TSHNKCN in TS7REC.TSHNKCNX) /* Container number in array*/

      TS09W05.TSICRTQT[TS09WIXM] = TS7REC.TSICRTQX[sysVar.arrayIndex];
      TS09W05.TSISHPQT[TS09WIXM] = TS7REC.TSISHPQX[sysVar.arrayIndex];

    end

    TS09W04.TS09WPCQ = TS09W04.TS09WPCQ + TS09W05.TSICRTQT[TS09WIXM];
    TS09W04.TS09WPSQ = TS09W04.TS09WPSQ + TS09W05.TSISHPQT[TS09WIXM];

    TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* increment counter*/

  end

   /* ------------------------------------------------------------*/
   /* If the page is full, add the page to temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WIXM > 12) /* Page is full*/
    TS09S03(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If end of cursor, format total quantities for container.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WFSW == "N" /* Not first time through*/
   && TS09W01.TS09WSW1 == "Y") /* and end of cursor*/

    TS09W05.TS09WPOI[TS09WIXM] = "CNTNR TOTAL";
    TS09W05.TSICRTQT[TS09WIXM] = TS09W04.TS09WTCQ;
    TS09W05.TSISHPQT[TS09WIXM] = TS09W04.TS09WTSQ;

    TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* Line index*/

  end


end // end TS09713

// Close set of product numbers
Function TS09714()
   /* ------------------------------------------------------------*/
   /* Close the set of selected product numbers.*/
   /* ------------------------------------------------------------*/

  try
    call "TS1650" ("C2", SQLCA, PC3REC, TS7REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

   /* OVE '714' TO TSWREC.XXXMODID;    /* Module identification*/
  TS09W01.TS09WERL = "TS09 714"; /* Module id*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SET OF PRODUCT NUMBERS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/
  TA1REC.TA1TBLKE = TS7REC.TS7GROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS09714

// Format and display the map
Function TS09720()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data on the page.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    TS09721(); /* Format data on the page*/

  else

    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS09M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS09M004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS09M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS09M002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  TS09M004.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS09M004.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/

      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      if (TS09W01.TS09WMAP == "2 ") /* Map 2 was requested left*/
        TS09M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      else
        if (TS09W01.TS09WMAP == "4 ") /* Map 4 was requested right*/
          TS09M004.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
        end
      end

    end

    if (TS09W01.TS09WMAP == "2 ") /* Map 2 was requested left*/
      TS09M002.XXXPRCNM = TS09W01.TS09WERL; /* Module id*/
      set TS09M002 alarm; /* Indicate sound alarm*/
    else
      if (TS09W01.TS09WMAP == "4 ") /* Map 4 was requested right*/
        TS09M004.XXXPRCNM = TS09W01.TS09WERL; /* Module id*/
        set TS09M004 alarm; /* Indicate sound alarm*/
      end
    end

  end



  if (TS09W01.TS09WMAP == "2 ") /* Map 2 was requested left*/
    TS09-72000(); /* ===> left  map M002 format*/

  else
    if (TS09W01.TS09WMAP == "4 ") /* Map 4 was requested right*/
      TS09-72005(); /* ===> right map M004 format*/
    end

  end

  TS09W01.TS09WERL = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end TS09720

// Format the selected data
Function TS09721()
   /* ------------------------------------------------------------*/
   /* Clear the map and format the heading information.*/
   /* ------------------------------------------------------------*/

  set TS09M002 initial; /* M002 input/output area*/
  set TS09M004 initial; /* M004 input/output area*/

   /* ------------------------------------------------------------*/
   /* Format the map header portion of the Left/Right Screens*/
   /* ------------------------------------------------------------*/

   /* ===> Left map*/
   /* ===> --------*/

  TS09M002.TSACARCD = TS09W04.TSACARCD;
  TS09M002.TS5CRAFT = TS09W04.TS5CRAFT;
  TS09M002.TSFSHPNB = TS09W04.TSFSHPNB;
  TS09M002.TSEDEST = TS09W04.TSEDEST;
  TS09M002.XXXCITY = TS09W04.XXXCITY;
  TS09M002.XWHCD = TS09W04.XWHCD;
  TS09M002.XWHABRV = TS09W04.XWHABRV;
  TS09M002.TSHCNTNR = TS09W04.TSHCNTNR;
  TS09M002.YSSCD = TS09W04.YSSCD;
  TS09M002.YSSABRV = TS09W04.YSSABRV;

   /* ===> Right map*/
   /* ===> ---------*/

  TS09M004.TSACARCD = TS09W04.TSACARCD;
  TS09M004.TS5CRAFT = TS09W04.TS5CRAFT;
  TS09M004.TSFSHPNB = TS09W04.TSFSHPNB;
  TS09M004.TSEDEST = TS09W04.TSEDEST;
  TS09M004.XXXCITY = TS09W04.XXXCITY;
  TS09M004.XWHCD = TS09W04.XWHCD;
  TS09M004.XWHABRV = TS09W04.XWHABRV;
  TS09M004.TSHCNTNR = TS09W04.TSHCNTNR;
  TS09M004.YSSCD = TS09W04.YSSCD;
  TS09M004.YSSABRV = TS09W04.YSSABRV;


   /* ------------------------------------------------------------*/
   /* If pages were formatted, obtain current page to display.*/
   /* ------------------------------------------------------------*/

  if (TS09W04.TA5TSQIX > 0) /* Pages were formatted*/

    TA5REC.TA5TSQIX = TS09W04.TS09WTSP; /* Page number*/

    TS09S04(); /* Obtain temporary storage page*/

    set TS09M002.TS09MPGL skip; /* Display "PAGE" literal*/
    set TS09M002.TS09MOFL skip; /* Display "OF" literal*/
    set TS09M004.TS09MPGL skip; /* Display "PAGE" literal*/
    set TS09M004.TS09MOFL skip; /* Display "OF" literal*/

    TS09M002.TS09WTSP = TS09W04.TS09WTSP; /* Current page number*/
    TS09M002.TA5TSQIX = TS09W04.TA5TSQIX; /* Highest page number*/
    TS09M004.TS09WTSP = TS09W04.TS09WTSP; /* Current page number*/
    TS09M004.TA5TSQIX = TS09W04.TA5TSQIX; /* Highest page number*/

    set TS09M002.TS09MSEL[1] cursor; /* Establish cursor position*/
    set TS09M004.TS09MSEL[1] cursor; /* Establish cursor position*/

    TS09W01.TS09WIXM = 1; /* Initialize line indexes*/

    while (TS09W01.TS09WIXM <= 12) /* Until end of lines*/

      if (TS09W05.SY1STNBR[TS09WIXM] > " ") /* Line was formatted*/

        set TS09M002.TS09MSEL[TS09WIXM] normal; /* Unprotect*/
        set TS09M004.TS09MSEL[TS09WIXM] normal; /* Unprotect*/

        /* move data to the Left Screen*/

        TS09M002.TS09MSEL[TS09WIXM] = TS09W05.TS09MSEL[TS09WIXM];
        TS09M002.TS09WPOI[TS09WIXM] = TS09W05.TS09WPOI[TS09WIXM];
        TS09M002.PC4ORTYP[TS09WIXM] = TS09W05.PC4ORTYP[TS09WIXM];
        TS09M002.PC3PONBR[TS09WIXM] = TS09W05.PC3PONBR[TS09WIXM];
        TS09M002.PC2CUXID[TS09WIXM] = TS09W05.PC2CUXID[TS09WIXM];
        TS09M002.XGPCD[TS09WIXM] = TS09W05.XGPCD[TS09WIXM];
        TS09M002.SY1STNBR[TS09WIXM] = TS09W05.SY1STNBR[TS09WIXM];
        TS09M002.SY2CLRID[TS09WIXM] = TS09W05.SY2CLRID[TS09WIXM];
        TS09M002.TSICRTQT[TS09WIXM] = TS09W05.TSICRTQT[TS09WIXM];
        TS09M002.TSISHPQT[TS09WIXM] = TS09W05.TSISHPQT[TS09WIXM];
        TS09M002.TSISTAT[TS09WIXM] = TS09W05.TSISTAT[TS09WIXM];


        /* move data to the Right Screen*/

        TS09M004.TS09MSEL[TS09WIXM] = TS09W05.TS09MSEL[TS09WIXM];
        TS09M004.TS09WPOI[TS09WIXM] = TS09W05.TS09WPOI[TS09WIXM];
        TS09M004.PC3PONBR[TS09WIXM] = TS09W05.PC3PONBR[TS09WIXM];
        TS09M004.PC2CUXID[TS09WIXM] = TS09W05.PC2CUXID[TS09WIXM];
        TS09M004.OP1CUPO[TS09WIXM] = TS09W05.OP1CUPO[TS09WIXM];
        TS09M004.SY1STNBR[TS09WIXM] = TS09W05.SY1STNBR[TS09WIXM];
        TS09M004.SY2CLRID[TS09WIXM] = TS09W05.SY2CLRID[TS09WIXM];
        TS09M004.XDMCD[TS09WIXM] = TS09W05.XDMCD[TS09WIXM];
        TS09M004.TSISHPQT[TS09WIXM] = TS09W05.TSISHPQT[TS09WIXM];

      else

        if (TS09W05.TS09WPOI[TS09WIXM] > " ") /* Total line*/

          /* move data to the Left Screen*/

          TS09M002.TS09WPOI[TS09WIXM] = TS09W05.TS09WPOI[TS09WIXM];
          TS09M002.TSICRTQT[TS09WIXM] = TS09W05.TSICRTQT[TS09WIXM];
          TS09M002.TSISHPQT[TS09WIXM] = TS09W05.TSISHPQT[TS09WIXM];

          /* move data to the Right Screen*/

          TS09M004.TS09WPOI[TS09WIXM] = TS09W05.TS09WPOI[TS09WIXM];
          TS09M004.TSISHPQT[TS09WIXM] = TS09W05.TSISHPQT[TS09WIXM];

        end

      end

      TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* increment index*/

    end

  end


end // end TS09721

// Check attention identifier
Function TS09730()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If PF3 pressed, exit to previous map.*/
   /* 3) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 4) If PF12 pressed submit job to print container numbers.*/
   /* 5) If any AI pressed other than ENTER, PF7, PF8, PF10,*/
   /* PF11, or PF20 indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
   /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    exit stack; /* Exit to display map*/
  end


  if (TS09M002.CATOAP > " " /* FAST PATH was requested*/
   || TS09M004.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (TS09W01.TS09WMAP == "2")
        COMMAREA.CATOAP = TS09M002.CATOAP; /* TO application*/
        COMMAREA.CAITEM = TS09M002.CAITEM; /* Application data*/
      else
        if (TS09W01.TS09WMAP == "4")
          COMMAREA.CATOAP = TS09M004.CATOAP; /* TO application*/
          COMMAREA.CAITEM = TS09M004.CAITEM; /* Application data*/
        end
      end
      TS09110(); /* Purge M001 temporary storage*/
      TS09621(); /* Purge M002/M004 temp storage*/
      XSTSS01(); /* Exit to another application*/
      set TS09W01 empty; /* M001 working storage*/
      set TS09M001 initial; /* M001 input/output area*/
      TS09W01.TS09WMAP = "1"; /* Map to be displayed*/
      set TS09M001.CATOAP cursor, bold; /* Highlight*/
    else
      /* OVE '730' TO TSWREC.XXXMODID;       /* Module identification*/
      TS09W01.TS09WERL = "TS09 730"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
    end
    exit stack; /* Exit to display map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      if (TS09W01.TS09WMAP == "2")
        COMMAREA.CAITEM = "TS09M002"; /* Application find code*/
      else
        if (TS09W01.TS09WMAP == "4")
          COMMAREA.CAITEM = "TS09M004"; /* Application find code*/
        end
      end
    end
    TS09110(); /* Purge M001 temporary storage*/
    TS09621(); /* Purge M002/M004 temp storage*/
    XSTSS01(); /* Exit to another application*/
    set TS09W01 empty; /* M001 working storage*/
    set TS09M001 initial; /* M001 input/output area*/
    TS09W01.TS09WMAP = "1"; /* Map to be displayed*/
    exit stack; /* Exit to display map*/
  end


  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS09621(); /* Purge M002/M004 temp storage*/
    TS09W01.TS09WMAP = "1"; /* Map to be displayed*/
    exit stack; /* Exit to display map*/
  end


  if (converseVar.eventKey is pf10 /* PF10 was pressed*/
   && TS09W01.TS09WMAP == "2 ")    /* Left map currently displayed*/
    /* OVE '730' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 730"; /* Module identification*/
    converseLib.validationFailed(4); /* Invalid attention key*/
    exit stack; /* Exit to display map*/
  end


  if (converseVar.eventKey is pf11 /* PF11 was pressed*/
   && TS09W01.TS09WMAP == "4 ")    /* Right map currently displayed*/
    /* OVE '730' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 730"; /* Module identification*/
    converseLib.validationFailed(4); /* Invalid attention key*/
    exit stack; /* Exit to display map*/
  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not BACK request*/
   && converseVar.eventKey not pf8   /* and not FRWD request*/
   && converseVar.eventKey not pf10  /* and not RIGHT request*/
   && converseVar.eventKey not pf11  /* and not LEFT request*/
   && converseVar.eventKey not pf20) /* and not NEXT CONTAINER request*/

    /* OVE '730' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 730"; /* Module identification*/
    converseLib.validationFailed(4); /* Invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS09730

// Reset highlighted fields
Function TS09740()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  TS09W01.TS09WIXM = 1; /* Initialize line index*/

  while (TS09W01.TS09WIXM <= 12) /* Until end of lines*/

    if (TS09M002.SY1STNBR[TS09WIXM] != " ") /* Line was formatted*/
      set TS09M002.TS09MSEL[TS09WIXM] normal; /* Reset select flag*/
      set TS09M004.TS09MSEL[TS09WIXM] normal; /* Reset select flag*/
    end

    TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* Increment line index*/

  end

  set TS09M002.CATOAP initialAttributes; /* FAST PATH to application*/
  set TS09M002.CAITEM initialAttributes; /* FAST PATH application data*/
  set TS09M004.CATOAP initialAttributes; /* FAST PATH to application*/
  set TS09M004.CAITEM initialAttributes; /* FAST PATH application data*/


end // end TS09740

// Verify the entered data
Function TS09750()
   /* ------------------------------------------------------------*/
   /* If application data entered, indicate only with FAST PATH.*/
   /* ------------------------------------------------------------*/

  if (TS09M002.CAITEM > " ") /* Application data was entered*/

    set TS09M002.CAITEM cursor, bold; /* Highlight*/
    /* OVE '750' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 750"; /* Module id*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

  if (TS09M004.CAITEM > " ") /* Application data was entered*/

    set TS09M004.CAITEM cursor, bold; /* Highlight*/
    /* OVE '750' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 750"; /* Module id*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll request then verify that pages exist to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    TS09751(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* Verify any lines that were selected on the screen.*/
   /* ------------------------------------------------------------*/

  TS09752(); /* Verify any selected lines*/

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end TS09750

// Verify scroll request
Function TS09751()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS09W04.TS09WTSP <= 1)      /* and no previous pages*/

    /* OVE '751' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 751"; /* Module id*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS09W04.TS09WTSP >= TS09W04.TA5TSQIX) /* and no more pages*/

    /* OVE '751' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 751"; /* Module id*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


end // end TS09751

// Verify any selected lines
Function TS09752()
   /* ------------------------------------------------------------*/
   /* Determine whether any lines were selected and verify.*/
   /* ------------------------------------------------------------*/

  TS09W01.TS09WIXM = 12; /* Line index*/
  TS09W01.TS09WUSW = "N"; /* Update switch*/

  while (TS09W01.TS09WIXM >= 1) /* Until end of lines*/

    if (TS09M002.TS09MSEL[TS09WIXM] != TS09W05.TS09MSEL[TS09WIXM])

      if (TS09M002.TS09MSEL[TS09WIXM] != "S" /* Selection not 'S'*/
       && TS09M002.TS09MSEL[TS09WIXM] != " ") /* and not blank*/

        set TS09M002.TS09MSEL[TS09WIXM] cursor, bold; /* Highlight*/
        /* OVE '752' TO TSWREC.XXXMODID;     /* Module identification*/
        TS09W01.TS09WERL = "TS09 752"; /* Module identification*/
        converseLib.validationFailed(13); /* Only "S" may be entered*/

      else

        TS09W01.TS09WUSW = "Y"; /* Update switch*/

      end

    else

      if (TS09M004.TS09MSEL[TS09WIXM] != TS09W05.TS09MSEL[TS09WIXM])

        if (TS09M004.TS09MSEL[TS09WIXM] != "S" /* Selection not 'S'*/
         && TS09M004.TS09MSEL[TS09WIXM] != " ") /* and not blank*/

          set TS09M004.TS09MSEL[TS09WIXM] cursor, bold; /* Highlight*/
          /* OVE '752' TO TSWREC.XXXMODID;     /* Module identification*/
          TS09W01.TS09WERL = "TS09 752"; /* Module identification*/
          converseLib.validationFailed(13); /* Only "S" may be entered*/

        else

          TS09W01.TS09WUSW = "Y"; /* Update switch*/

        end

      end

    end

    TS09W01.TS09WIXM = TS09W01.TS09WIXM - 1; /* Line index*/

  end


end // end TS09752

// Process valid input request
Function TS09760()
   /* ------------------------------------------------------------*/
   /* If a line was selected, update the temporary storage page.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WUSW == "Y") /* Page was updated*/

    if (TS09W01.TS09WMAP == "2 ") /* Left screen*/
      move TS09M002.TS09MSEL to TS09W05.TS09MSEL[1] for all; /* Selection flags*/
    else
      if (TS09W01.TS09WMAP == "4 ") /* Right screen*/
        move TS09M004.TS09MSEL to TS09W05.TS09MSEL[1] for all; /* Selection flags*/
      end
    end

    TA5REC.TA5TSQIX = TS09W04.TS09WTSP; /* Page number*/

    TS09S05(); /* Update temporary storage page*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll requested, adjust temporary storage page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS09W04.TS09WTSP = TS09W04.TS09WTSP - 1; /* Decrement page number*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    TS09W04.TS09WTSP = TS09W04.TS09WTSP + 1; /* Increment page number*/
  end

   /* ------------------------------------------------------------*/
   /* If request for left or right screen, update map nbr.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Request for Left screen*/
    TS09W01.TS09WMAP = "2 "; /* Update map nbr to '2 '*/
  end

  if (converseVar.eventKey is pf11) /* Request for Right screen*/
    TS09W01.TS09WMAP = "4 "; /* Update map nbr to '4 '*/
  end


   /* ------------------------------------------------------------*/
   /* If NEXT CONTAINER request, find next container to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf20) /* NEXT CONTAINER requested*/

    TS09620(); /* Find next container to display*/

    if (TS09W01.TS09WSSW == "N") /* No selection was found*/

      TS09W01.TS09WMAP = "1"; /* Map to be displayed*/
    else
      /* OVE '760' TO TSWREC.XXXMODID;       /* Module identification*/
      TS09W01.TS09WERL = "TS09 760"; /* Module identification*/
      TSWREC.XXXMSGNO = 272; /* Next selected container shown*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, find the next product to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    TS09761(); /* Find next product to display*/

    if (TS09W01.TS09WSSW == "N") /* No selection was found*/

      TS09620(); /* Find next container to display*/

      if (TS09W01.TS09WSSW == "N") /* No selection was found*/

        TS09W01.TS09WMAP = "1"; /* Map to be displayed*/
      else
        /* OVE '760' TO TSWREC.XXXMODID;     /* Module identification*/
        TS09W01.TS09WERL = "TS09 760"; /* Module identification*/
        TSWREC.XXXMSGNO = 272; /* Next selected container shown*/

      end

    end

  end


end // end TS09760

// Find next product to display
Function TS09761()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage to display selected product.*/
   /* ------------------------------------------------------------*/

  TS09S06(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Find the next product that was selected for display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 1; /* Initialize temp page index*/
  TS09W01.TS09WSSW = "N"; /* Selection switch*/

  while (TA5REC.TA5TSQIX <= TS09W04.TA5TSQIX /* Until end of temp pages*/
   && TS09W01.TS09WSSW == "N") /* or selection found*/

    TS09S04(); /* Read temporary storage page*/

    TS09W01.TS09WIXM = 1; /* Initialize screen line index*/

    while (TS09W01.TS09WIXM <= 12 /* until end of this page*/
     && TS09W01.TS09WSSW == "N") /* or selection found*/

      if (TS09W05.TS09MSEL[TS09WIXM] == "S") /* if contnr selected*/

        TS09W01.TS09WSSW = "Y"; /* Selection switch*/
      else
        TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* bump screen line index*/

      end

    end

    if (TS09W01.TS09WSSW == "N") /* No selection was found*/
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* bump temp page index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If no product selected, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WSSW == "N") /* No selection was found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If product was selected, format the map heading fields.*/
   /* ------------------------------------------------------------*/

  set TS09W06 empty; /* Map 003 heading area*/

  TS09W06.TSACARCD = TS09W04.TSACARCD;
  TS09W06.TS09WCC1 = "/";
  TS09W06.TS5CRAFT = TS09W04.TS5CRAFT;
  TS09W06.TS09WCC2 = "/";
  TS09W06.TSFSHPNB = TS09W04.TSFSHPNB;
  TS09W06.TSHCNTNR = TS09W04.TSHCNTNR;
  TS09W06.TS09WPOI = TS09W05.TS09WPOI[TS09WIXM];
  TS09W06.PC3PONBR = TS09W05.PC3PONBR[TS09WIXM];
  TS09W06.TS09W-SALES-ORDER-NBR = TS09W05.TS09W-SALES-ORDER-NBR[TS09WIXM];
  TS09W06.PC4ORTYP = TS09W05.PC4ORTYP[TS09WIXM];
  TS09W06.SY1STNBR = TS09W05.SY1STNBR[TS09WIXM];
  TS09W06.SY2CLRID = TS09W05.SY2CLRID[TS09WIXM];
  TS09W06.XDMCD = TS09W05.XDMCD[TS09WIXM];
  TS09W06.PC2CUXID = TS09W05.PC2CUXID[TS09WIXM];
  TS09W06.OP1CUPO = TS09W05.OP1CUPO[TS09WIXM];
  TS09W06.TSISTAT = TS09W05.TSISTAT[TS09WIXM];
  TS09W06.TSFDESTE = TS09W05.TSFDESTE[TS09WIXM];
  TS09W06.TSFSHPID = TS09W05.TSFSHPID[TS09WIXM];
  TS09W06.TSIPLNBR = TS09W05.TSIPLNBR[TS09WIXM];
  TS09W06.TSHNKCN = TS09W05.TSHNKCN[TS09WIXM];
  TS09W06.TSFBOL = TS09W05.TSFBOL[TS09WIXM];
  TS09W06.XGPCD = TS09W05.XGPCD[TS09WIXM];
  TS09W06.XQACD = TS09W05.XQACD[TS09WIXM];
  TS09W06.PC2INSEG = TS09W05.PC2INSEG[TS09WIXM];

   /* ------------------------------------------------------------*/
   /* Update the page to indicate the product was processed.*/
   /* ------------------------------------------------------------*/

  TS09W05.TS09MSEL[TS09WIXM] = "V"; /* Line selection indicator*/

  TS09S05(); /* Update temporary storage page*/

   /* ------------------------------------------------------------*/
   /* Indicate the map to be displayed and a request for data.*/
   /* ------------------------------------------------------------*/

  set TS09M003 initial; /* Map 003 input/output area*/

  TS09W01.TS09WMAP = "3"; /* Map to be displayed*/
  TS09W06.TS09WSWR = "Y"; /* Request for data switch*/


end // end TS09761

// Obtain the data to display
Function TS09810()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS09W06.TS09WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Obtain remainder of heading information for the display.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain current data/time*/

  TS09811(); /* Select the VCRAFT01 table row*/

  TS09W06.TS5SHNM = TS5REC.TS5SHNM; /* Craft sh nm*/

  TS09812(); /* Select the VCNTNR01 table row*/

  TS09W06.TSHSEAL = TSHREC.TSHSEAL; /* Cntnr seal id*/

  TS09813(); /* Obtain the style information*/

  TS09W06.SY1SSTNM = PG2REC.SY1SSTNM; /* Short sty nm*/

  if (PG2REC.SY2CEDT1 <= XX0XW01.XX0XWDAT) /* Eff date LE current*/
    TS09W06.XLCCD = PG2REC.XLCCD1; /* Life cyc cd*/
  else

    if (PG2REC.SY2CEDT2 <= XX0XW01.XX0XWDAT) /* Eff date LE current*/
      TS09W06.XLCCD = PG2REC.XLCCD2; /* Life cyc cd*/
    else

      if (PG2REC.SY2CEDT3 <= XX0XW01.XX0XWDAT) /* Eff date LE current*/
        TS09W06.XLCCD = PG2REC.XLCCD3; /* Life cyc cd*/
      else

        if (PG2REC.SY2CEDT4 <= XX0XW01.XX0XWDAT) /* Eff date LE current*/
          TS09W06.XLCCD = PG2REC.XLCCD4; /* Life cyc cd*/

        end
      end
    end
  end

  TS09814(); /* Select the VCPLHD01 table row*/

  TS09W06.XOWCD = TSIREC.XOWCD; /* Own grp cd*/
  TS09W06.XPGCD = TSIREC.XPGCD; /* Pkg typ cd*/
  TS09W06.XUMCD = TSIREC.XUMCD; /* Unit meas*/
  TS09W06.TSRTEXT = TSIREC.TSRTEXT; /* Txt*/

  TS09815(); /* Obtain the size descriptions*/

   /* ------------------------------------------------------------*/
   /* Select and format the products packed in the container.*/
   /* ------------------------------------------------------------*/

  TS09W01.TS09WSW1 = "N"; /* End of cursor switch*/
  TS09W01.TS09WFSW = "Y"; /* First time switch*/
  TS09W01.TS09WIXM = 1; /* Map line index*/
  TS09W06.TS09WWK1 = 0; /* Saved highest carton nbr*/

  TS09816(); /* Open the VCPLIT01 cursor*/

  while (TS09W01.TS09WSW1 == "N") /* Until end of cursor*/

    TS09817(); /* Fetch the next VCPLIT01 row*/

    TS09818(); /* Format the data on the page*/

    TS09W01.TS09WFSW = "N"; /* First time switch*/

  end

  TS09819(); /* Close the VCPLIT01 cursor*/

  if (TS09W01.TS09WIXM > 1) /* Line was formatted*/
    TS09S07(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages formatted, indicate no packing list detail.*/
   /* ------------------------------------------------------------*/

  if (TS09W06.TA5TSQIX == 0) /* No pages formatted*/

    TSWREC.XXXMODID = "810"; /* Module identification*/
    TSWREC.XXXMSGNO = 302; /* No packing list detail*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS09W06.TS09WSWR = "N"; /* Request for data switch*/
  TS09W06.TS09WTSP = 1; /* Temporary storage page number*/


end // end TS09810

// Select the VCRAFT01 table row
Function TS09811()
   /* ------------------------------------------------------------*/
   /* Format the key fields and select carrier/craft table row.*/
   /* ------------------------------------------------------------*/

  set TS5REC empty; /* Row storage area*/

  TS5REC.TSACARCD = TS09W06.TSACARCD; /* Carr cd*/
  TS5REC.TS5CRAFT = TS09W06.TS5CRAFT; /* Craft nbr*/

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* NO ROWS FOUND*/
    converseLib.validationFailed(414); /* INDICATE NO ROWS*/
  end
  if (SQLCA.VAGen_SQLCODE != 0 && SQLCA.VAGen_SQLCODE != 100)
                                  /* Unexpected return code*/

    TSWREC.XXXMODID = "811"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09811"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE VCRAFT01 TABLE ROW";
    TA1REC.TA1MAP = "TS09M003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TS5REC.TS5KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09811

// Select the VCNTNR01 table row
Function TS09812()
   /* ------------------------------------------------------------*/
   /* Format the key fields and select the container table row.*/
   /* ------------------------------------------------------------*/

  set TSHREC empty; /* Row storage area*/

  TSHREC.TSFSHPID = TS09W06.TSFSHPID; /* Nike shp id*/
  TSHREC.TSHCNTNR = TS09W06.TSHCNTNR; /* Cntnr nbr*/

  call "IO2590" ("S ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TSWREC.XXXMODID = "812"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09812"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE VCNTNR01 TABLE ROW";
    TA1REC.TA1MAP = "TS09M003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09812

// Obtain the style information
Function TS09813()
   /* ------------------------------------------------------------*/
   /* Format the key fields and select the style/color table row.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* Row storage area*/

  PG2REC.XGPCD = TS09W06.XGPCD; /* Gpc cd*/
  PG2REC.SY1STNBR = TS09W06.SY1STNBR; /* Sty nbr*/
  PG2REC.SY2CLRID = TS09W06.SY2CLRID; /* Colr cd id*/
  PG2REC.XDMCD = TS09W06.XDMCD; /* Dim cd*/

  TA1REC.TA1PGMNM = "TS09813"; /* Calling process*/

  XSPG202(); /* Select row in DPRODG.VSYCLR01*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      PG2REC.SY1SSTNM = "* UNKNOWN *"; /* Short sty nm*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate the appropriate message to display to the user.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "813"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and data in use*/

    converseLib.validationFailed(11); /* Data in use by another*/
  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS09813

// Select the VCPLHD01 table row
Function TS09814()
   /* ------------------------------------------------------------*/
   /* Format key fields and select packing list header table row.*/
   /* ------------------------------------------------------------*/

  set TSIREC empty; /* Row storage area*/

  TSIREC.TSFSHPID = TS09W06.TSFSHPID; /* Nike shp id*/
  TSIREC.TSIPLNBR = TS09W06.TSIPLNBR; /* Nike pl nbr*/

  call "IO2570" ("SA", SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TSWREC.XXXMODID = "814"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09814"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE VCPLHD01 TABLE ROW";
    TA1REC.TA1MAP = "TS09M003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09814

// Obtain the size descriptions
Function TS09815()
   /* ------------------------------------------------------------*/
   /* Format the parameters for size description translation.*/
   /* ------------------------------------------------------------*/

  set PG3REC empty; /* Subroutine parameters*/

  PG3REC.PG3FUNCD = "PC"; /* Function code*/
  PG3REC.PG3DATFM = "N"; /* Data format*/

  PG3REC.XGPCD = TS09W06.XGPCD; /* Gpc cd*/
  PG3REC.SY1STNBR = TS09W06.SY1STNBR; /* Sty nbr*/
  PG3REC.SY2CLRID = TS09W06.SY2CLRID; /* Colr cd id*/
  PG3REC.XDMCD = TS09W06.XDMCD; /* Dim cd*/
  PG3REC.XQACD = "**"; /* Qual cd*/

  TA1REC.TA1PGMNM = "TS09815"; /* Calling process*/

  XSTSS50(); /* Size description translation*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (PG3REC.PG3RETCD == "00" /* Normal return*/
     || PG3REC.PG3RETCD == "10") /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Indicate the appropriate message to display to the user.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = "815"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and data in use*/

    converseLib.validationFailed(11); /* Data in use by another*/
  else
    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS09815

// Open  (S3) Set       VCPLIT01
Function TS09816()
   /* ------------------------------------------------------------*/
   /* Format the key fields and open packing list item cursor.*/
   /* ------------------------------------------------------------*/

  set TSOREC empty; /* Row storage area*/

  TSOREC.TSFSHPID = TS09W06.TSFSHPID; /* Nike shp id*/
  TSOREC.TSIPLNBR = TS09W06.TSIPLNBR; /* Nike pl nbr*/
  TSOREC.TSHNKCN = TS09W06.TSHNKCN; /* Nike cntnr nbr*/

  call "IO2580" ("S3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TSWREC.XXXMODID = "816"; /* Module identification*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09816"; /* Process name*/
    TA1REC.TA1LOC = "OPEN THE VCPLIT01 CURSOR";
    TA1REC.TA1MAP = "TS09M003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09816

// Fetch (N3) Next      VCPLIT01
Function TS09817()
   /* ------------------------------------------------------------*/
   /* Fetch the next selected row in packing list item cursor.*/
   /* ------------------------------------------------------------*/

  call "IO2580" ("N3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

    TS09W01.TS09WSW1 = "Y"; /* Set end switch*/

  else

    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/

      TSWREC.XXXMODID = "817"; /* Module identification*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS09817"; /* Process name*/
      TA1REC.TA1LOC = "FETCH THE NEXT VCPLIT01 ROW";
      TA1REC.TA1MAP = "TS09M003"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
      TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      exit stack; /* Exit to display map*/

    end

  end


end // end TS09817

// Format the data on the page
Function TS09818()
   /* ------------------------------------------------------------*/
   /* Format the previous line into the temporary storage page.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WFSW == "Y") /* First time through*/

    TS09W06.TS09WTCQ = 0; /* Total carton quantity*/
    TS09W06.TS09WTSQ = 0; /* Total shipped quantity*/

  else

    TS09W06.TS09WTCQ = TS09W06.TS09WTCQ + TS09W07.TSICRTQT[TS09WIXM];
    TS09W06.TS09WTSQ = TS09W06.TS09WTSQ + TS09W06.TSOSHPQT;

    TS09W07.TS09WFCN[TS09WIXM] = TS09W06.TS09WFCN;
    TS09W07.TS09WTCN[TS09WIXM] = TS09W06.TS09WTCN;
    TS09W07.SY4IDDSC[TS09WIXM] = TS09W06.SY4IDDSC;
    TS09W07.SY1UNPCS[TS09WIXM] = TS09W06.SY1UNPCS;
    TS09W07.TSOSHPQT[TS09WIXM] = TS09W06.TSOSHPQT;

    if (TS09W06.TSICRTQT > 1) /* More than one carton*/
      TS09W07.TS09WUCS[TS09WIXM] = mathLib.round(TS09W06.TSOSHPQT / TS09W06.TSICRTQT, -mathLib.decimals(TS09W07.TS09WUCS[TS09WIXM]));

    else

      if (TS09W06.TSICRTQT == 0) /* suppressed carton count*/
        TS09W06.TS09WWK1 = TS09W06.TS09WTCN - TS09W06.TS09WFCN + 1;
        TS09W07.TS09WUCS[TS09WIXM] = mathLib.round(TS09W06.TSOSHPQT / TS09W06.TS09WWK1, -mathLib.decimals(TS09W07.TS09WUCS[TS09WIXM]));
      else

        TS09W07.TS09WUCS[TS09WIXM] = TS09W06.TSOSHPQT;

      end

    end

    TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* Line index*/

  end

   /* ------------------------------------------------------------*/
   /* If the page is full, add the page to temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WIXM > 10) /* Page is full*/
    TS09S07(); /* Add page to temp storage*/
  end

   /* ------------------------------------------------------------*/
   /* If not end of cursor, save the next line information.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WSW1 == "N") /* Not end of cursor*/

    TS09W06.TS09WFCN = TSOREC.TSOFRCRT; /* From carton*/
    TS09W06.TS09WTCN = TSOREC.TSOTOCRT; /* To carton*/
    TS09W06.SY1UNPCS = PG2REC.SY1UNPCS; /* Units per case*/
    TS09W06.TSOSHPQT = TSOREC.TSOSHPQT; /* Total units*/


    if (TS09W06.TS09WFCN > TS09W06.TS09WWK2)
      TS09W07.TSICRTQT[TS09WIXM] = TS09W06.TS09WTCN - TS09W06.TS09WFCN + 1;

      TS09W06.TSICRTQT = TS09W06.TS09WTCN - TS09W06.TS09WFCN + 1;

    else

      if (TS09W06.TS09WTCN <= TS09W06.TS09WWK2) /* ===> highest to carton*/
        TS09W06.TSICRTQT = 0; /* ===> (cartons counted)*/

      else

        TS09W07.TSICRTQT[TS09WIXM] = TS09W06.TS09WTCN - TS09W06.TS09WWK2;
        TS09W06.TSICRTQT = TS09W06.TS09WTCN - TS09W06.TS09WFCN + 1;

      end

    end

    if (TS09W06.TS09WTCN > TS09W06.TS09WWK2) /* save high carton*/
      TS09W06.TS09WWK2 = TS09W06.TS09WTCN;
    end

    TS09W06.SY5SZID = TSOREC.SY5SZID; /* Size id*/

    if (TSOREC.SY5SZID in PG3REC.SY5SZID) /* Size id in array*/

      TS09W06.SY4IDDSC = PG3REC.SY4IDDSC[sysVar.arrayIndex]; /* Description*/
    else
      TS09W06.SY4IDDSC = "*****"; /* Default description*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If end of cursor, format total quantities for the style.*/
   /* ------------------------------------------------------------*/

  if (TS09W01.TS09WFSW == "N" /* Not first time through*/
   && TS09W01.TS09WSW1 == "Y") /* and end of cursor*/

    TS09W07.SY4IDDSC[TS09WIXM] = "TOTAL";
    TS09W07.TSICRTQT[TS09WIXM] = TS09W06.TS09WTCQ;
    TS09W07.TSOSHPQT[TS09WIXM] = TS09W06.TS09WTSQ;

    TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* Line index*/

  end

end // end TS09818

// Close (C3) Set       VCPLIT01
Function TS09819()
   /* ------------------------------------------------------------*/
   /* Close the packing list item cursor.*/
   /* ------------------------------------------------------------*/

  call "IO2580" ("C3", SQLCA, TSOREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TSWREC.XXXMODID = "819"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09819"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE THE VCPLIT01 CURSOR";
    TA1REC.TA1MAP = "TS09M003"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLIT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSOREC.TSOKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end


end // end TS09819

// Format and display the map
Function TS09820()
   /* ------------------------------------------------------------*/
   /* If no error was found, format the data on the page.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/

    TS09821(); /* Format data on the page*/
  else
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS09M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS09M003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS09M003.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (TSWREC.XXXMSGNO != 0) /* Message to display*/

      if (TSWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(TSWREC.XXXMSGNO);
      end /* Message number*/
    else
      TS09M003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    TS09M003.XXXMODID = TSWREC.XXXMODID; /* Module identification*/

  /* SET TS09M003 ALARM;             /* Indicate sound alarm*/

  end

  converse TS09M003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = TS09M003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS09M003.CAITEM; /* Application data*/


end // end TS09820

// Format the selected data
Function TS09821()
   /* ------------------------------------------------------------*/
   /* Clear the map and format the heading information.*/
   /* ------------------------------------------------------------*/

  set TS09M003 initial; /* M003 input/output area*/

  TS09M003.TS09WCCS = TS09W06.TS09WCCS;
  TS09M003.TS5SHNM = TS09W06.TS5SHNM;
  TS09M003.TSFDESTE = TS09W06.TSFDESTE;
  TS09M003.TSFSHPID = TS09W06.TSFSHPID;
  TS09M003.TSHCNTNR = TS09W06.TSHCNTNR;
  TS09M003.TSHSEAL = TS09W06.TSHSEAL;
  TS09M003.TSFBOL = TS09W06.TSFBOL;
  TS09M003.XGPCD = TS09W06.XGPCD;
  TS09M003.TS09WPOI = TS09W06.TS09WPOI;
  TS09M003.PC4ORTYP = TS09W06.PC4ORTYP;
  TS09M003.PC3PONBR = TS09W06.PC3PONBR;
  TS09M003.TS09M-SALES-ORDER-NBR = TS09W06.TS09W-SALES-ORDER-NBR;
  TS09M003.SY1STNBR = TS09W06.SY1STNBR;
  TS09M003.SY1SSTNM = TS09W06.SY1SSTNM;
  TS09M003.SY2CLRID = TS09W06.SY2CLRID;
  TS09M003.XDMCD = TS09W06.XDMCD;
  TS09M003.PC2CUXID = TS09W06.PC2CUXID;
  TS09M003.OP1CUPO = TS09W06.OP1CUPO;
  TS09M003.XQACD = TS09W06.XQACD;
  TS09M003.XLCCD = TS09W06.XLCCD;
  TS09M003.PC2INSEG = TS09W06.PC2INSEG;
  TS09M003.XPGCD = TS09W06.XPGCD;
  TS09M003.XUMCD = TS09W06.XUMCD;
  TS09M003.XOWCD = TS09W06.XOWCD;
  TS09M003.TSISTAT = TS09W06.TSISTAT;
  TS09M003.TSRTEXT = TS09W06.TSRTEXT;

   /* ------------------------------------------------------------*/
   /* If pages were formatted, obtain current page to display.*/
   /* ------------------------------------------------------------*/

  if (TS09W06.TA5TSQIX > 0) /* Pages were formatted*/

    TA5REC.TA5TSQIX = TS09W06.TS09WTSP; /* Page number*/

    TS09S08(); /* Obtain temporary storage page*/

    set TS09M003.TS09MPGL skip; /* Display "PAGE" literal*/
    set TS09M003.TS09MOFL skip; /* Display "OF" literal*/

    TS09M003.TS09WTSP = TS09W06.TS09WTSP; /* Current page number*/
    TS09M003.TA5TSQIX = TS09W06.TA5TSQIX; /* Highest page number*/

    TS09W01.TS09WIXM = 1; /* Initialize line indexes*/

    while (TS09W01.TS09WIXM <= 10) /* Until end of lines*/

      TS09M003.TS09WFCN[TS09WIXM] = TS09W07.TS09WFCN[TS09WIXM];
      TS09M003.TS09WTCN[TS09WIXM] = TS09W07.TS09WTCN[TS09WIXM];
      TS09M003.SY4IDDSC[TS09WIXM] = TS09W07.SY4IDDSC[TS09WIXM];
      TS09M003.SY1UNPCS[TS09WIXM] = TS09W07.SY1UNPCS[TS09WIXM];
      TS09M003.TS09WUCS[TS09WIXM] = TS09W07.TS09WUCS[TS09WIXM];
      TS09M003.TSICRTQT[TS09WIXM] = TS09W07.TSICRTQT[TS09WIXM];
      TS09M003.TSOSHPQT[TS09WIXM] = TS09W07.TSOSHPQT[TS09WIXM];

      TS09W01.TS09WIXM = TS09W01.TS09WIXM + 1; /* increment index*/

    end

  end


end // end TS09821

// Check attention identifier
Function TS09830()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If PF3 pressed, exit to previous map.*/
   /* 3) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If any AI pressed other than ENTER, PF7, or PF8,*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

  if (TS09M003.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = TS09M003.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS09M003.CAITEM; /* Application data*/

      TS09110(); /* Purge M001 temporary storage*/

      TS09621(); /* Purge M002 temporary storage*/

      TS09S06(); /* Purge M003 temporary storage*/

      XSTSS01(); /* Exit to another application*/

      set TS09W01 empty; /* M001 working storage*/
      set TS09M001 initial; /* M001 input/output area*/

      TS09W01.TS09WMAP = "1"; /* Map to be displayed*/

      set TS09M001.CATOAP cursor, bold; /* Highlight*/

    else

      TSWREC.XXXMODID = "830"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS09M003"; /* Application find code*/
    end

    TS09110(); /* Purge M001 temporary storage*/

    TS09621(); /* Purge M002 temporary storage*/

    TS09S06(); /* Purge M003 temporary storage*/

    XSTSS01(); /* Exit to another application*/

    set TS09W01 empty; /* M001 working storage*/
    set TS09M001 initial; /* M001 input/output area*/

    TS09W01.TS09WMAP = "1"; /* Map to be displayed*/

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    TS09S06(); /* Purge M003 temporary storage*/

    TS09W01.TS09WMAP = "2"; /* Map to be displayed*/

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not BACK request*/
   && converseVar.eventKey not pf8)  /* and not FRWD request*/

    TSWREC.XXXMODID = "830"; /* Module identification*/
    converseLib.validationFailed(4); /* Invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end TS09830

// Reset highlighted fields
Function TS09840()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS09M003.CATOAP initialAttributes; /* FAST PATH to application*/
  set TS09M003.CAITEM initialAttributes; /* FAST PATH application data*/


end // end TS09840

// Verify the entered data
Function TS09850()
   /* ------------------------------------------------------------*/
   /* If application data entered, indicate only with FAST PATH.*/
   /* ------------------------------------------------------------*/

  if (TS09M003.CAITEM > " ") /* Application data was entered*/

    set TS09M003.CAITEM cursor, bold; /* Highlight*/
    TSWREC.XXXMODID = "850"; /* Module identification*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll request then verify that pages exist to scroll.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    TS09851(); /* Verify scroll request*/

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end TS09850

// Verify scroll request
Function TS09851()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS09W06.TS09WTSP <= 1)      /* and no previous pages*/

    TSWREC.XXXMODID = "751"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS09W06.TS09WTSP >= TS09W06.TA5TSQIX) /* and no more pages*/

    TSWREC.XXXMODID = "751"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end


end // end TS09851

// Process valid input request
Function TS09860()
   /* ------------------------------------------------------------*/
   /* If scroll requested, adjust temporary storage page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS09W06.TS09WTSP = TS09W06.TS09WTSP - 1; /* Decrement page number*/
  end

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    TS09W06.TS09WTSP = TS09W06.TS09WTSP + 1; /* Increment page number*/
  end

   /* ------------------------------------------------------------*/
   /* If ENTER was pressed, find next product to display.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/

    TS09761(); /* Find next product to display*/

    if (TS09W01.TS09WSSW == "N") /* No selection was found*/
      TS09W01.TS09WMAP = "2"; /* Map to be displayed*/
    end

  end


end // end TS09860

// Add page to temporary storage
Function TS09S01()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TS09W02.TS09WLEN = 468; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS19"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS09W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA5REC.TA5RTNCD != 0)          /* or not normal return*/

    TSWREC.XXXMODID = "S01"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09S03"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M001"; /* Map name*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the highest page number and clear the display storage.*/
   /* ------------------------------------------------------------*/

  TS09W01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TS09W01.TS09WIXM = 1; /* Reset display line number*/

  set TS09W02 empty; /* M001 display storage*/


end // end TS09S01

// Update M001 temporary storage
Function TS09S02()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS09W02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    TS09W01.TS09WUSW = "N"; /* Update switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS09S02

// Add page to temporary storage
Function TS09S03()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TS09W05.TS09WLEN = 1416; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS29"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS09W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA5REC.TA5RTNCD != 0)          /* or not normal return*/

    /* OVE 'S03' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 S03"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09S03"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M002"; /* Map name*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the highest page number and clear the display storage.*/
   /* ------------------------------------------------------------*/

  TS09W04.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TS09W01.TS09WIXM = 1; /* Reset display line number*/

  set TS09W05 empty; /* M002 display storage*/


end // end TS09S03

// Read M002 temporary storage
Function TS09S04()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/
   /* ------------------------------------------------------------*/

  TS09W05.TS09WLEN = 1416; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS29"; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS09W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA5REC.TA5RTNCD != 0)          /* or not normal return*/

    /* OVE 'S04' TO TSWREC.XXXMODID;  /* Module identification*/
    TS09W01.TS09WERL = "TS09 S04"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09S04"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M002"; /* Map name*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end


end // end TS09S04

// Update M002 temporary storage
Function TS09S05()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS09W05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    TS09W01.TS09WUSW = "N"; /* Update switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S05"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS09S05

// Purge M003 temporary storage
Function TS09S06()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage to display selected products.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS39"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS09W07, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS09S06"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M003"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  set TS09W07 empty; /* Map 003 display storage*/


end // end TS09S06

// Add page to temporary storage
Function TS09S07()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TS09W07.TS09WLEN = 270; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS39"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS09W07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA5REC.TA5RTNCD != 0)          /* or not normal return*/

    TSWREC.XXXMODID = "S07"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09S07"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M003"; /* Map name*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Save the highest page number and clear the display storage.*/
   /* ------------------------------------------------------------*/

  TS09W06.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TS09W01.TS09WIXM = 1; /* Reset display line number*/

  set TS09W07 empty; /* M003 display storage*/


end // end TS09S07

// Read M003 temporary storage
Function TS09S08()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/
   /* ------------------------------------------------------------*/

  TS09W07.TS09WLEN = 270; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS39"; /* Application identification*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS09W07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If an unexpected error occurred, report to error diagnosis.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA5REC.TA5RTNCD != 0)          /* or not normal return*/

    TSWREC.XXXMODID = "S08"; /* Module identification*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS09S08"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS09M003"; /* Map name*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis*/

    exit stack; /* Exit to display map*/

  end


end // end TS09S08

// Size description translation
Function XSTSS50()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine accesses the Production Style/Color and the*/
   /* Product Scale Tables and returns the Size Identification,*/
   /* Size Description and Division Code for all valid sizes of a*/
   /* GPC/Style/Color/Dimension.*/

   /* *** Code the following before this is executed:         ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3FUNCD: PC = all valid sizes             ****/
   /* ***                    IE = int. sz id to desc.         ****/
   /* ***                    EI = desc. to int. sz id         ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3DATFM: C = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3XDVCD: Highest division code to return. ****/
   /* ***                    Valid codes are '01','02','03'.  ****/
   /* ***                    Blank defaults to all divisions. ****/
   /* ***                                                     ****/
   /* ***   TA1REC.TA1PGMNM: The name of the calling process, ****/
   /* ***                    for Error Diagnosis Reporting.   ****/

   /* This subroutine will return the CSP return code in EZERT8,*/
   /* the Size Translation Subroutine return code in PG3RETCD*/
   /* and, if a normal return, the size information in PG3SIZES.*/

   /* *** Both return codes must indicate normal return.      ****/
   /* ***                                                     ****/
   /* ***   EZERT8                                            ****/
   /* ***   ------                                            ****/
   /* ***   '00000000' = Normal return                        ****/
   /* ***   OTHER      = Unexpected error has occurred        ****/
   /* ***                                                     ****/
   /* ***   PG3REC.PG3RETCD                                   ****/
   /* ***   ---------------                                   ****/
   /* ***   '00'  = Normal return                             ****/
   /* ***   '09'  = Data in use by another application        ****/
   /* ***   '10'  = Style/color row not found                 ****/
   /* ***   OTHER = Unexpected error has occurred             ****/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* Obtain size descriptions from Size Translation Subroutine.*/
   /* ------------------------------------------------------------*/

  try
    call "PG1050" (SQLCA, PG3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Size translation*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (PG3REC.PG3RETCD == "00" /* Normal return*/
     || PG3REC.PG3RETCD == "10") /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && PG3REC.PG3RETCD == "09")       /* and resource not available*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
    TA1REC.TA1LOC = "XSTSS50 DESCRIPTION TRANSLATION";
    TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && PG3REC.PG3RETCD == "99")       /* and negative SQL error*/

      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
      TA1REC.TA1TBLKE = PG3REC.PG3KEY; /* Table key*/
      TA1REC.TA1LOC = "XSTSS50 DESCRIPTION TRANSLATION";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    else

      TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
      TAEREC.TAEDESC2 = PG3REC.PG3GROUP; /* Subroutine parameters*/

      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "APPL"; /* Type of error*/
      TA1REC.TA1LOC = "XSTSS50 DESCRIPTION TRANSLATION";

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end XSTSS50

//*** RECORD=TS09W01 ****
// ----------------------------------------
// Application working storage for map 001.
// ----------------------------------------
// ***********************
Record TS09W01 type basicRecord
  10 TS09WIXM TS09WIXM ; 
  10 TS09WIX2 TS09WIX2 ; 
  10 TS09WMAP TS09WMAP ; 
  10 TS09WFSW TS09WFSW ; 
  10 TS09WSWR TS09WSWR ; 
  10 TS09WSW1 TS09WSW1 ; 
  10 TS09WSW2 TS09WSW2 ; 
  10 TS09WSSW TS09WSSW ; 
  10 TS09WUSW TS09WUSW ; 
  10 TS09WTSP TS09WTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TS09MCAR TS09MCAR ; 
  10 TS09MCFT TS09MCFT ; 
  10 TS09MSHP TS09MSHP ; 
  10 TS09MCNT TS09MCNT ; 
  10 YSSCD YSSCD ; 
  10 YSSABRV YSSABRV ; 
  10 TS09MDST TS09MDST ; 
  10 XXXCITY XXXCITY ; 
  10 TS09MWHS TS09MWHS ; 
  10 XWHABRV XWHABRV ; 
  10 TS09WCCS TS09WCCS ; 
    15 TSACARCD TSACARCD ; 
    15 TS09WCC1 TS09WCC1 ; 
    15 TS5CRAFT TS5CRAFT ; 
    15 TS09WCC2 TS09WCC2 ; 
    15 TSFSHPNB TSFSHPNB ; 
  10 TS09WERL TS09WERL ; 
    15 TS09WAPP TS09WAPP ; 
    15 TS09WPRC TS09WPRC ; 
end // end TS09W01

//*** RECORD=TS09W02 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record TS09W02 type basicRecord
  5 TS09WLEN TS09WLEN ; 
  5 * char(468) ; 
    10 TS09MSEL TS09MSEL [12] ; 
    10 TSHCNTNR TSHCNTNR [12] ; 
    10 TSHSTAT TSHSTAT [12] ; 
    10 TSEDEST TSEDEST [12] ; 
    10 XWHCD XWHCD [12] ; 
    10 TSACARCD TSACARCD [12] ; 
    10 TS5CRAFT TS5CRAFT [12] ; 
    10 TSFSHPNB TSFSHPNB [12] ; 
    10 TSFDESTE TSFDESTE [12] ; 
end // end TS09W02

//*** RECORD=TS09W03 ****
// --------------------------------------------------------
// Parameters passed to TS1641 - Print Packing List Report.
// --------------------------------------------------------
// ***********************
Record TS09W03 type basicRecord
  5 TARJCL TARJCL ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 * char(1) ; 
    10 TSHSTAT TSHSTAT ; 
    10 * char(1) ; 
    10 TSEDEST TSEDEST ; 
    10 * char(1) ; 
    10 XWHCD XWHCD ; 
    10 * char(1) ; 
    10 TSACARCD TSACARCD ; 
    10 * char(1) ; 
    10 TS5CRAFT TS5CRAFT ; 
    10 * char(1) ; 
    10 TSFSHPNB TSFSHPNB ; 
    10 * char(1) ; 
    10 TS09WETA TS09WETA ; 
    10 * char(30) ; 
end // end TS09W03

//*** RECORD=TS09W04 ****
// ----------------------------------------
// Application working storage for map 002.
// ----------------------------------------
// ***********************
Record TS09W04 type basicRecord
  10 TS09WSWR TS09WSWR ; 
  10 TS09WTSP TS09WTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TSACARCD TSACARCD ; 
  10 TS5CRAFT TS5CRAFT ; 
  10 TSFSHPNB TSFSHPNB ; 
  10 TSEDEST TSEDEST ; 
  10 XXXCITY XXXCITY ; 
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 YSSCD YSSCD ; 
  10 YSSABRV YSSABRV ; 
  10 TSFDESTE TSFDESTE ; 
  10 TS09WMOR TS09WMOR ; 
    15 * char(3) ; 
    15 TS09WPYY TS09WPYY ; 
    15 TS09WPMM TS09WPMM ; 
    15 TS09WDMM TS09WDMM ; 
  10 TS09WPOI TS09WPOI ; 
    15 TS09WPOY TS09WPOY ; 
    15 TS09WPO1 TS09WPO1 ; 
    15 TS09WPOP TS09WPOP ; 
    15 TS09WPO2 TS09WPO2 ; 
    15 TS09WPOD TS09WPOD ; 
    15 TS09WPO3 TS09WPO3 ; 
    15 TS09WPOF TS09WPOF ; 
  10 TS09WPPO TS09WPPO ; 
  10 TS09WPCQ TS09WPCQ ; 
  10 TS09WPSQ TS09WPSQ ; 
  10 TS09WTCQ TS09WTCQ ; 
  10 TS09WTSQ TS09WTSQ ; 
end // end TS09W04

//*** RECORD=TS09W05 ****
// ---------------------------------
// Maps 002 and 004 display storage.
// ---------------------------------
// ***********************
Record TS09W05 type basicRecord
  5 TS09WLEN TS09WLEN ; 
  5 * char(1416) ; 
    10 TS09MSEL TS09MSEL [12] ; 
    10 TS09WPOI TS09WPOI [12] ; 
    10 PC4ORTYP PC4ORTYP [12] ; 
    10 PC3PONBR PC3PONBR [12] ; 
    10 PC2CUXID PC2CUXID [12] ; 
    10 OP1CUPO OP1CUPO [12] ; 
    10 TS09W-SALES-ORDER-NBR TS09W-SALES-ORDER-NBR [12] ; 
      15 TS09W-COI TS09W-COI ; 
      15 TS09W-NOI TS09W-NOI ; 
    10 XGPCD XGPCD [12] ; 
    10 SY1STNBR SY1STNBR [12] ; 
    10 SY2CLRID SY2CLRID [12] ; 
    10 XDMCD XDMCD [12] ; 
    10 TSICRTQT TSICRTQT [12] ; 
    10 TSISHPQT TSISHPQT [12] ; 
    10 TSISTAT TSISTAT [12] ; 
    10 TSFDESTE TSFDESTE [12] ; 
    10 TSFSHPID TSFSHPID [12] ; 
    10 TSIPLNBR TSIPLNBR [12] ; 
    10 TSHNKCN TSHNKCN [12] ; 
    10 TSFBOL TSFBOL [12] ; 
    10 XQACD XQACD [12] ; 
    10 PC2INSEG PC2INSEG [12] ; 
end // end TS09W05

//*** RECORD=TS09W06 ****
// ----------------------------------------
// Application working storage for map 003.
// ----------------------------------------
// ***********************
Record TS09W06 type basicRecord
  10 TS09WSWR TS09WSWR ; 
  10 TS09WTSP TS09WTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TS09WCCS TS09WCCS ; 
    15 TSACARCD TSACARCD ; 
    15 TS09WCC1 TS09WCC1 ; 
    15 TS5CRAFT TS5CRAFT ; 
    15 TS09WCC2 TS09WCC2 ; 
    15 TSFSHPNB TSFSHPNB ; 
  10 TS5SHNM TS5SHNM ; 
  10 TSFDESTE TSFDESTE ; 
  10 TSFSHPID TSFSHPID ; 
  10 TSIPLNBR TSIPLNBR ; 
  10 TSHNKCN TSHNKCN ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 TSHSEAL TSHSEAL ; 
  10 TSFBOL TSFBOL ; 
  10 XGPCD XGPCD ; 
  10 TS09WPOI TS09WPOI ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC3PONBR PC3PONBR ; 
  10 TS09W-SALES-ORDER-NBR TS09W-SALES-ORDER-NBR ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 PC2CUXID PC2CUXID ; 
  10 OP1CUPO OP1CUPO ; 
  10 XQACD XQACD ; 
  10 XLCCD XLCCD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 TSISTAT TSISTAT ; 
  10 TSRTEXT TSRTEXT ; 
  10 SY5SZID SY5SZID ; 
  10 TS09WNCN TS09WNCN ; 
  10 TS09WFCN TS09WFCN ; 
  10 TS09WTCN TS09WTCN ; 
  10 SY4IDDSC SY4IDDSC ; 
  10 SY1UNPCS SY1UNPCS ; 
  10 TSICRTQT TSICRTQT ; 
  10 TSOSHPQT TSOSHPQT ; 
  10 TS09WCRT TS09WCRT ; 
  10 TS09WTCQ TS09WTCQ ; 
  10 TS09WTSQ TS09WTSQ ; 
  10 TS09WWK1 TS09WWK1 ; 
  10 TS09WWK2 TS09WWK2 ; 
end // end TS09W06

//*** RECORD=TS09W07 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record TS09W07 type basicRecord
  5 TS09WLEN TS09WLEN ; 
  5 * char(270) ; 
    10 TS09WFCN TS09WFCN [10] ; 
    10 TS09WTCN TS09WTCN [10] ; 
    10 SY4IDDSC SY4IDDSC [10] ; 
    10 SY1UNPCS SY1UNPCS [10] ; 
    10 TS09WUCS TS09WUCS [10] ; 
    10 TSICRTQT TSICRTQT [10] ; 
    10 TSOSHPQT TSOSHPQT [10] ; 
end // end TS09W07

// TS_CARR_CD key field
DataItem TS09MCAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CRAFT_NBR key field
DataItem TS09MCFT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CNTNR_NBR key field
DataItem TS09MCNT char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_DEST_LOC_CD key field
DataItem TS09MDST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem TS09MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_SHP_NBR key field
DataItem TS09MSHP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD key field
DataItem TS09MWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer order id
DataItem TS09W-COI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Nike order id
DataItem TS09W-NOI num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Sales order number
DataItem TS09W-SALES-ORDER-NBR num(12,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Application ID
DataItem TS09WAPP char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carrier/craft/shipment slash 1
DataItem TS09WCC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carrier/craft/shipment slash 2
DataItem TS09WCC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carrier/craft/shipment
DataItem TS09WCCS char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Carton units shipped
DataItem TS09WCRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Purchase order delivery MM
DataItem TS09WDMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Process Location field
DataItem TS09WERL char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_EST_DEST_DT
DataItem TS09WETA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// From carton number
DataItem TS09WFCN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// First time through switch
DataItem TS09WFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields 2
DataItem TS09WIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS09WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS09WLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed
DataItem TS09WMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_MO_RNG
DataItem TS09WMOR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next carton number
DataItem TS09WNCN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO id carton quantity
DataItem TS09WPCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Purchase order production MM
DataItem TS09WPMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Purchase order dash 1
DataItem TS09WPO1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Purchase order dash 2
DataItem TS09WPO2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Purchase order dash 3
DataItem TS09WPO3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Purchase order delivery MM
DataItem TS09WPOD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Purchase order factory code
DataItem TS09WPOF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Purchase order identification
DataItem TS09WPOI char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Purchase order production MM
DataItem TS09WPOP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Purchase order season or YY
DataItem TS09WPOY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous purchase order id
DataItem TS09WPPO char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Process ID
DataItem TS09WPRC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO id shipped quantity
DataItem TS09WPSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Purchase order YY
DataItem TS09WPYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection switch
DataItem TS09WSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch1
DataItem TS09WSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem TS09WSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS09WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// To carton number
DataItem TS09WTCN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total carton quantity
DataItem TS09WTCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page number
DataItem TS09WTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Total shipped quantity
DataItem TS09WTSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Units per case (calculated)
DataItem TS09WUCS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Update switch
DataItem TS09WUSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage num 1
DataItem TS09WWK1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage num 2
DataItem TS09WWK2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

