package ts0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0G ****
// This program allows users to inquire and browse those
// schedules that will take a shipment from an origin to a
// destination in a specified time frame.
// 
// A user will enter location and date screen parameters on
// the browse screen and can then see all those one-leg and
// two-leg schedule combinations with travel days and ratings
// that match the user input parameters.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 02/02/88   CEPPLE   New application.
// 11/07/96   JCARL1   Remove alarm from msg display.
// *********************
Program TS0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TS0GW01 TS0GW01; // record
  TS0GW02 TS0GW02; // record
  TSCREC TSCREC; // record
  TSKREC TSKREC; // record
  TSMREC TSMREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use TS0GM.TS0GM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Schedule Inquiry.*/
     /* ------------------------------------------------------------*/

    set TSNREC empty; /* Initialize records*/
    set TSMREC empty;
    set TSKREC empty;
    set TSCREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set ERRSQLCA empty;
    set SQLCA empty;
    set TS0GW01 empty; /* Initialize working storage*/
    set TS0GW02 empty; /* Initialize temporary storage*/
    set TS0GM001 initial; /* Initialize map output area*/

    TS0GW01.TS0GWSWR = "N"; /* Indicate request for data*/

    goto TS0G001; /* Converse Trans. Schedule Inquiry*/


    TS0G001: TS0G001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto TS0G001; /* Converse Transportation Prototype*/


  end // end main
end // end TS0G

// Schedule Inquiry
Function TS0G001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display the schedule map.*/
   /* Processing always return to the top of this group.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0GW01.TS0GWSWR == "Y") /* If request for data is yes*/
    TS0G100(); /* Obtain the data to display*/
  end

  TS0G200(); /* Format and display the map*/

  TS0G300(); /* Check attention identifier*/

  TS0G400(); /* Reset fields to normal intensity*/

  TS0G500(); /* Verify the entered data*/

  TS0G600(); /* Process valid input request*/


end // end TS0G001

// Obtain the data to display
Function TS0G100()
   /* ------------------------------------------------------------*/
               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move valid screen parameters to TSNREC fields.*/
    /* . Move valid screen parameters to TSKREC fields.*/
    /* . Move valid screen parameters to TSMREC fields.*/
   /* 2) Select sets and open cursors for DTRANS.VASCHD01 and*/
      /* DTRANS.VASCHD02.*/
   /* 3) Fetch rows from both table views.*/
      /* - Calculate the transit time totals.*/
      /* - If no rows exist indicate error.*/
      /* - When pages are full move them to temporary storage.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Initialize records*/
  set TSKREC empty;
  set TSMREC empty;

  TSNREC.TSEORIG = TS0GM001.TSEORIG; /* move fields to records*/
  TSKREC.TSEORIG = TS0GM001.TSEORIG;
  TSMREC.TSEORIG = TS0GM001.TSEORIG;
  TSNREC.TSEDEST = TS0GM001.TSEDEST;
  TSKREC.TSEDEST = TS0GM001.TSEDEST;
  TSMREC.TSEDEST = TS0GM001.TSEDEST;
  TSNREC.TSNBARVL = TS0GW01.TS0GWBAR;
  TSNREC.TSNEARVL = TS0GW01.TS0GWEAR;
  TSNREC.TSNBDPRT = TS0GW01.TS0GWBDP;
  TSNREC.TSNEDPRT = TS0GW01.TS0GWEDP;

  TS0G110(); /* Purge any temporary storage*/

  TS0G120(); /* Select set, open the cursor VASCHD01*/
  TS0G130(); /* Select set, open the cursor VASCHD02*/

  if (TS0GW01.TS0GWPSW == "N") /* No errors were found*/
    TS0GW01.TS0GWSWC = "N"; /* Initialize end of file switch*/
    TS0GW01.TS0GWIXM = 1; /* Initialize display line number*/
    set TS0GW02 empty; /* Clear temporary storage record*/

    while (TS0GW01.TS0GWSWC == "N") /* Until cursor end of file*/
      TS0G140(); /* Fetch and format data from VASCHD01*/
      if (TS0GW01.TS0GWIXM > 13) /* Page is full*/
        TS0G150(); /* Add page to temporary storage*/
      end
      if (TS0GW01.TS0GWPSW == "Y") /* errors were found*/
        TS0GW01.TS0GWSWC = "Y"; /* Force end of file*/
      end
      if (SQLCA.VAGen_SQLCODE == 100) /* If VASCHD01 row not found*/
        TS0G160(); /* Fetch and format data from VASCHD02*/
        if (TS0GW01.TS0GWPSW == "Y") /* errors were found*/
          TS0GW01.TS0GWSWC = "Y"; /* Force end of file*/
        end
        if (SQLCA.VAGen_SQLCODE == 100 /* If VASCHD02 row not found*/
         && TS0GW01.TS0GWIXM == 1)     /* and index equals 1*/
          TS0GW01.TS0GWSWC = "Y"; /* force end of file*/
          converseLib.validationFailed(21); /* no data found to display*/
          TS0GM001.XXXPRCNM = "TS0G100"; /* process name*/
        end
      end
    end
  end

  if (TS0GW01.TS0GWPSW == "N" /* No errors were found*/
   && TS0GW01.TS0GWIXM > 1)   /* and page was formatted*/
    TS0G150(); /* Add page to temporary storage*/
  end

  TS0G170(); /* Close selected set cursor VASCHD01*/
  TS0G180(); /* Close selected set cursorVASCHD02*/

  if (TS0GW01.TS0GWPSW == "N") /* No errors were found*/
    TS0GW01.TS0GWTSP = 1; /* Initialize page number*/
    TS0GW01.TS0GWSWR = "N"; /* Request for data completed*/
  end


end // end TS0G100

// Purge any temporary storage
Function TS0G110()
   /* ------------------------------------------------------------*/
              /* PURGE ANY TEMPORARY STORAGE*/
   /* 1) Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0G"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0G110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0GW01.TS0GWTSP = 0; /* Reset current page number*/
  TS0GW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0G110

// Select set,open curs VASCHD01
Function TS0G120()
   /* ------------------------------------------------------------*/
              /* SELECT SET AND OPEN CURSOR VASCHD01*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S2";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0G120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0GM001.XXXPRCNM = "TS0G120"; /* Process name*/
    TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0G120

// Select set,open curs VASCHD02
Function TS0G130()
   /* ------------------------------------------------------------*/
             /* SELECT SET AND OPEN CURSOR VASCHD02*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S1";
  call "IO2400" (TSNREC, SQLCA, TSMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0G130"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0GM001.XXXPRCNM = "TS0G130"; /* Process name*/
    TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0G130

// Fetch data from VASCHD01
Function TS0G140()
   /* ------------------------------------------------------------*/
              /* FETCH ROW AND FORMAT DATA VASCHD01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "N2";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

     /* continue*/

  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0G140"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0GM001.XXXPRCNM = "TS0G140"; /* Process name*/

    else
      TS0GW02.TSM1DPRT[TS0GWIXM] = TSKREC.TSKDPRT; /* Save data*/
      TS0GW02.TSM1CARC[TS0GWIXM] = TSKREC.TSACARCD;
      TS0GW02.TSM1CRAF[TS0GWIXM] = TSKREC.TS5CRAFT;
      TS0GW02.TSM1SHPN[TS0GWIXM] = TSKREC.TSFSHPNB;
      TS0GW02.TSM1ARVL[TS0GWIXM] = TSKREC.TSKARVL;
      TS0GW02.TSMCOST[TS0GWIXM] = TSKREC.TSKCOST;

      TS0G141(); /* Calculate travel time days one-leg*/

      TS0GW01.TS0GWIXM = TS0GW01.TS0GWIXM + 1; /* Increment line index*/
    end
  end


end // end TS0G140

// Calculate transit tm one-leg
Function TS0G141()
   /* ------------------------------------------------------------*/
            /* CALCULATE TRANSIT TIME ONE-LEG*/

   /* 1) Clear working record ta2rec.*/
   /* 2) Move departure date and arrival date to record fields.*/
   /* 3) Call ta0040 date routine to get days difference.*/

   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear record*/

  TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
  TA2REC.TA2DBDFN = TS0GW02.TSM1DPRT[TS0GWIXM]; /* begn date*/
  TA2REC.TA2DBDTN = TS0GW02.TSM1ARVL[TS0GWIXM]; /* to date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes}; /* call date routine*/

  if (TA2REC.TA2RTNCD == 000) /* if no errors from call*/
    TS0GW02.TS0GMTT[TS0GWIXM] = TA2REC.TA2DBDD; /* save time total*/
  end


end // end TS0G141

// Add page to temporary storage
Function TS0G150()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TS0GW02.TS0GWLEN = 611; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0G"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0G150"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0GM001.XXXPRCNM = "TS0G150"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  TS0GW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TS0GW01.TS0GWIXM = 1; /* Reset display line number*/

  set TS0GW02 empty; /* Clear temporary storage record*/


end // end TS0G150

// Fetch data from VASCHD02
Function TS0G160()
   /* ------------------------------------------------------------*/
              /* FETCH ROW AND FORMAT DATA VASCHD02*/

   /* 1) If no row found then set "end of set" flag yes.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "N1";
  call "IO2400" (TSNREC, SQLCA, TSMREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0GW01.TS0GWSWC = "Y"; /* set end of set flag*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0G160"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VASCHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0GM001.XXXPRCNM = "TS0G160"; /* Process name*/

    else
      TS0GW02.TSM1DPRT[TS0GWIXM] = TSMREC.TSM1DPRT; /* Save data*/
      TS0GW02.TSM1CARC[TS0GWIXM] = TSMREC.TSM1CARC;
      TS0GW02.TSM1CRAF[TS0GWIXM] = TSMREC.TSM1CRAF;
      TS0GW02.TSM1SHPN[TS0GWIXM] = TSMREC.TSM1SHPN;
      TS0GW02.TSM1ARVL[TS0GWIXM] = TSMREC.TSM1ARVL;
      TS0GW02.TSFDSCHG[TS0GWIXM] = TSMREC.TSFDSCHG;
      TS0GW02.TSM2CARC[TS0GWIXM] = TSMREC.TSM2CARC;
      TS0GW02.TSM2CRAF[TS0GWIXM] = TSMREC.TSM2CRAF;
      TS0GW02.TSM2SHPN[TS0GWIXM] = TSMREC.TSM2SHPN;
      TS0GW02.TSM2ARVL[TS0GWIXM] = TSMREC.TSM2ARVL;
      TS0GW02.TSMCOST[TS0GWIXM] = TSMREC.TSMCOST;

      TS0G161(); /* Calculate travel time days two-leg*/

      TS0GW01.TS0GWIXM = TS0GW01.TS0GWIXM + 1; /* Increment line index*/
    end
  end


end // end TS0G160

// Calculate transit tm two-leg
Function TS0G161()
   /* ------------------------------------------------------------*/
            /* CALCULATE TRANSIT TIME TWO-LEG*/

   /* 1) Clear working record ta2rec.*/
   /* 2) Move depart dt L1 and arrival dt L2 to record fields.*/
   /* 3) Call ta0040 date routine to get days difference.*/

   /* ------------------------------------------------------------*/

  set TA2REC empty; /* clear record*/

  TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
  TA2REC.TA2DBDFN = TS0GW02.TSM1DPRT[TS0GWIXM]; /* begn date*/
  TA2REC.TA2DBDTN = TS0GW02.TSM2ARVL[TS0GWIXM]; /* to date*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

  if (TA2REC.TA2RTNCD == 000) /* if no errors from call*/
    TS0GW02.TS0GMTT[TS0GWIXM] = TA2REC.TA2DBDDN; /* save time total*/
  end


end // end TS0G161

// Close selected cursor VASCHD01
Function TS0G170()
   /* ------------------------------------------------------------*/
              /* CLOSE SELECTED SET CURSOR VASCHD01*/

   /* 1) Set TSNREC record empty and close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "C2";
  call "IO2390" (TSNREC, SQLCA, TSKREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0G170"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0GM001.XXXPRCNM = "TS0G170"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0G170

// Close selected cursor VASCHD02
Function TS0G180()
   /* ------------------------------------------------------------*/
              /* CLOSE SELECTED SET CURSOR VASCHD02*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "C1";
  call "IO2400" (TSNREC, SQLCA, TSMREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0G180"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VASCHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0GM001.XXXPRCNM = "TS0G180"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0G180

// Format and display the map
Function TS0G200()
   /* ------------------------------------------------------------*/
               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0GW01.TS0GWPSW == "N") /* No errors found*/

    set TS0GM001 initial; /* Clear map output area*/
    TS0GM001.TSEORIG = TS0GW01.TSEORIG; /* move in map fields*/
    TS0GM001.TSEDEST = TS0GW01.TSEDEST;
    if (TS0GW01.TS0GWBDM != 0)
      TS0GM001.TSNBDPRT = TS0GW01.TS0GWBDM;
    end
    if (TS0GW01.TS0GWEDM != 0)
      TS0GM001.TSNEDPRT = TS0GW01.TS0GWEDM;
    end
    if (TS0GW01.TS0GWBAM != 0)
      TS0GM001.TSNBARVL = TS0GW01.TS0GWBAM;
    end
    if (TS0GW01.TS0GWEAM != 0)
      TS0GM001.TSNEARVL = TS0GW01.TS0GWEAM;
    end

  end

  TS0GM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (TS0GW01.TS0GWPSW == "N") /* No errors*/
    TS0G210(); /* Format the data on the page*/
  end

  /* IF EZEMNO NE 0;                   /* Error message to display*/
  /* SET TS0GM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  converse TS0GM001 ;

  TS0GW01.TS0GWPSW = "N"; /* reset problem switch*/


end // end TS0G200

// Format the selected data
Function TS0G210()
   /* ------------------------------------------------------------*/
               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating first leg fields on map.*/
      /* - supress all generic carrier code fields.*/

   /* ------------------------------------------------------------*/

  if (TS0GW01.TA5TSQIX == 0) /* No data to display*/
    TS0GM001.XXXPRCNM = "TS0G210"; /* Process name*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
  else

    TS0G211(); /* Obtain temporary storage page*/

    set TS0GM001.TS0GMPGL skip; /* Display "PAGE" literal*/
    set TS0GM001.TS0GMOFL skip; /* Display "OF" literal*/

    TS0GM001.TS0GWTSP = TS0GW01.TS0GWTSP; /* Current page number*/
    TS0GM001.TA5TSQIX = TS0GW01.TA5TSQIX; /* Highest page number*/

    TS0GW01.TS0GWIXM = 1; /* Initialize line indexes*/
    TS0GW01.TS0GWIX2 = 0;

      /* move in first line of screen data*/

    TS0GM001.TSM1DPRT[TS0GWIXM] = TS0GW02.TSM1DPRT[TS0GWIXM];
    TS0GM001.TSM1CARC[TS0GWIXM] = TS0GW02.TSM1CARC[TS0GWIXM];
    TS0GM001.TSM1CRAF[TS0GWIXM] = TS0GW02.TSM1CRAF[TS0GWIXM];
    TS0GM001.TSM1SHPN[TS0GWIXM] = TS0GW02.TSM1SHPN[TS0GWIXM];
    TS0GM001.TSM1ARVL[TS0GWIXM] = TS0GW02.TSM1ARVL[TS0GWIXM];
    TS0GM001.TSFDSCHG[TS0GWIXM] = TS0GW02.TSFDSCHG[TS0GWIXM];
    TS0GM001.TSM2CARC[TS0GWIXM] = TS0GW02.TSM2CARC[TS0GWIXM];
    TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
    TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
    TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
    TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
    TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];

    if (TS0GM001.TSM1CARC[TS0GWIXM] == "GENE") /* if carrier1 is generic*/
      TS0GM001.TSM1CARC[TS0GWIXM] = " "; /* move ' ' to carc*/
    end

    if (TS0GM001.TSM2CARC[TS0GWIXM] == "GENE") /* if carrier2 is generic*/
      TS0GM001.TSM2CARC[TS0GWIXM] = " "; /* move ' ' to carc*/
    end

    TS0GW01.TS0GWIXM = TS0GW01.TS0GWIXM + 1; /* Increment line indexes*/
    TS0GW01.TS0GWIX2 = TS0GW01.TS0GWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating first leg fields.*/
     /* Supress all generic carrier codes.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0G212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0G210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0GW01.TS0GWIXM <= 13) /* Until end of lines*/

      if (TS0GW02.TSM1DPRT[TS0GWIXM] == TS0GW02.TSM1DPRT[TS0GWIX2])
        TS0GM001.TSM1DPRT[TS0GWIXM] = 0; /* move ' ' to dprt*/
        if (TS0GW02.TSM1CARC[TS0GWIXM] == TS0GW02.TSM1CARC[TS0GWIX2])
          TS0GM001.TSM1CARC[TS0GWIXM] = " "; /* move ' ' to carc*/
          TS0G212(); /* continue repeating supression*/
        else
          TS0GM001.TSM1CARC[TS0GWIXM] = TS0GW02.TSM1CARC[TS0GWIXM];
          TS0GM001.TSM1CRAF[TS0GWIXM] = TS0GW02.TSM1CRAF[TS0GWIXM];
          TS0GM001.TSM1SHPN[TS0GWIXM] = TS0GW02.TSM1SHPN[TS0GWIXM];
          TS0GM001.TSM1ARVL[TS0GWIXM] = TS0GW02.TSM1ARVL[TS0GWIXM];
          TS0GM001.TSFDSCHG[TS0GWIXM] = TS0GW02.TSFDSCHG[TS0GWIXM];
          TS0GM001.TSM2CARC[TS0GWIXM] = TS0GW02.TSM2CARC[TS0GWIXM];
          TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
          TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
          TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
          TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
          TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
        end
      else
        TS0GM001.TSM1DPRT[TS0GWIXM] = TS0GW02.TSM1DPRT[TS0GWIXM];
        TS0GM001.TSM1CARC[TS0GWIXM] = TS0GW02.TSM1CARC[TS0GWIXM];
        TS0GM001.TSM1CRAF[TS0GWIXM] = TS0GW02.TSM1CRAF[TS0GWIXM];
        TS0GM001.TSM1SHPN[TS0GWIXM] = TS0GW02.TSM1SHPN[TS0GWIXM];
        TS0GM001.TSM1ARVL[TS0GWIXM] = TS0GW02.TSM1ARVL[TS0GWIXM];
        TS0GM001.TSFDSCHG[TS0GWIXM] = TS0GW02.TSFDSCHG[TS0GWIXM];
        TS0GM001.TSM2CARC[TS0GWIXM] = TS0GW02.TSM2CARC[TS0GWIXM];
        TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
        TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
        TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
        TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
        TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
      end

      if (TS0GM001.TSM1CARC[TS0GWIXM] == "GENE") /* if carrier1 is generic*/
        TS0GM001.TSM1CARC[TS0GWIXM] = " "; /* move ' ' to carc*/
      end

      if (TS0GM001.TSM2CARC[TS0GWIXM] == "GENE") /* if carrier2 is generic*/
        TS0GM001.TSM2CARC[TS0GWIXM] = " "; /* move ' ' to carc*/
      end

      TS0GW01.TS0GWIXM = TS0GW01.TS0GWIXM + 1; /* Increment line index*/
      TS0GW01.TS0GWIX2 = TS0GW01.TS0GWIX2 + 1;
    end
  end


end // end TS0G210

// Read temporary storage page
Function TS0G211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/

   /* ------------------------------------------------------------*/

  TS0GW02.TS0GWLEN = 611; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0G"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0GW01.TS0GWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0G211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0GM001.XXXPRCNM = "TS0G211"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0G211

// Continue supression nested IF
Function TS0G212()
   /* ------------------------------------------------------------*/
               /* CONTINUE SUPRESSION OF NESTED IF*/

   /* 1) This process is used in order to help maintain better*/
      /* readability in TS0G210.  The nested IF for the necessary*/
      /* screen suppression is very large, therefore causing poor*/
      /* indentation of lines.  The indentation is still poor*/
      /* within this process but the size is of TS0G210 is kept*/
      /* at a much more reasonable level.*/

   /* ------------------------------------------------------------*/

  if (TS0GW02.TSM1CRAF[TS0GWIXM] == TS0GW02.TSM1CRAF[TS0GWIX2])
    TS0GM001.TSM1CRAF[TS0GWIXM] = " "; /* move ' ' to craf*/
    if (TS0GW02.TSM1SHPN[TS0GWIXM] == TS0GW02.TSM1SHPN[TS0GWIX2])
      TS0GM001.TSM1SHPN[TS0GWIXM] = " "; /* move ' ' to shpn*/
      if (TS0GW02.TSM1ARVL[TS0GWIXM] == TS0GW02.TSM1ARVL[TS0GWIX2])
        TS0GM001.TSM1DPRT[TS0GWIXM] = 0; /* move ' ' to arvl*/
        if (TS0GW02.TSFDSCHG[TS0GWIXM] == TS0GW02.TSFDSCHG[TS0GWIX2])
          TS0GM001.TSFDSCHG[TS0GWIXM] = " "; /* move ' ' to dschg*/
          if (TS0GW02.TSM2CARC[TS0GWIXM] == TS0GW02.TSM2CARC[TS0GWIX2])
            TS0GM001.TSM2CARC[TS0GWIXM] = " "; /* move ' ' to carc2*/
            if (TS0GW02.TSM2CRAF[TS0GWIXM] == TS0GW02.TSM2CRAF[TS0GWIX2])
              TS0GM001.TSM2CRAF[TS0GWIXM] = " "; /* move ' ' to craf2*/
              if (TS0GW02.TSM2SHPN[TS0GWIXM] == TS0GW02.TSM2SHPN[TS0GWIX2])
                TS0GM001.TSM2SHPN[TS0GWIXM] = " "; /* move ' ' to shpn2*/
                if (TS0GW02.TSM2ARVL[TS0GWIXM] == TS0GW02.TSM2ARVL[TS0GWIX2])
                  TS0GM001.TSM2ARVL[TS0GWIXM] = 0; /* move ' ' to shpn2*/
                  if (TS0GW02.TS0GMTT[TS0GWIXM] == TS0GW02.TS0GMTT[TS0GWIX2])
                    TS0GM001.TS0GMTT[TS0GWIXM] = 0;
                                   /* move ' ' to mtt*/
                    if (TS0GW02.TSMCOST[TS0GWIXM] == TS0GW02.TSMCOST[TS0GWIX2])
                      TS0GM001.TSKCOST[TS0GWIXM] = 0; /* move ' ' to cost*/
                    else
                      TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
                    end
                  else
                    TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
                    TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
                  end
                else
                  TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
                  TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
                  TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
                end
              else
                TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
                TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
                TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
                TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
              end
            else
              TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
              TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
              TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
              TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
              TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
            end
          else
            TS0GM001.TSM2CARC[TS0GWIXM] = TS0GW02.TSM2CARC[TS0GWIXM];
            TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
            TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
            TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
            TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
            TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
          end
        else
          TS0GM001.TSFDSCHG[TS0GWIXM] = TS0GW02.TSFDSCHG[TS0GWIXM];
          TS0GM001.TSM2CARC[TS0GWIXM] = TS0GW02.TSM2CARC[TS0GWIXM];
          TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
          TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
          TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
          TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
          TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
        end
      else
        TS0GM001.TSM1ARVL[TS0GWIXM] = TS0GW02.TSM1ARVL[TS0GWIXM];
        TS0GM001.TSFDSCHG[TS0GWIXM] = TS0GW02.TSFDSCHG[TS0GWIXM];
        TS0GM001.TSM2CARC[TS0GWIXM] = TS0GW02.TSM2CARC[TS0GWIXM];
        TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
        TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
        TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
        TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
        TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
      end
    else
      TS0GM001.TSM1SHPN[TS0GWIXM] = TS0GW02.TSM1SHPN[TS0GWIXM];
      TS0GM001.TSM1ARVL[TS0GWIXM] = TS0GW02.TSM1ARVL[TS0GWIXM];
      TS0GM001.TSFDSCHG[TS0GWIXM] = TS0GW02.TSFDSCHG[TS0GWIXM];
      TS0GM001.TSM2CARC[TS0GWIXM] = TS0GW02.TSM2CARC[TS0GWIXM];
      TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
      TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
      TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
      TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
      TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
    end
  else
    TS0GM001.TSM1CRAF[TS0GWIXM] = TS0GW02.TSM1CRAF[TS0GWIXM];
    TS0GM001.TSM1SHPN[TS0GWIXM] = TS0GW02.TSM1SHPN[TS0GWIXM];
    TS0GM001.TSM1ARVL[TS0GWIXM] = TS0GW02.TSM1ARVL[TS0GWIXM];
    TS0GM001.TSFDSCHG[TS0GWIXM] = TS0GW02.TSFDSCHG[TS0GWIXM];
    TS0GM001.TSM2CARC[TS0GWIXM] = TS0GW02.TSM2CARC[TS0GWIXM];
    TS0GM001.TSM2CRAF[TS0GWIXM] = TS0GW02.TSM2CRAF[TS0GWIXM];
    TS0GM001.TSM2SHPN[TS0GWIXM] = TS0GW02.TSM2SHPN[TS0GWIXM];
    TS0GM001.TSM2ARVL[TS0GWIXM] = TS0GW02.TSM2ARVL[TS0GWIXM];
    TS0GM001.TS0GMTT[TS0GWIXM] = TS0GW02.TS0GMTT[TS0GWIXM];
    TS0GM001.TSKCOST[TS0GWIXM] = TS0GW02.TSMCOST[TS0GWIXM];
  end


end // end TS0G212

// Check attention identifier
Function TS0G300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If PF16 pressed, exit to published schedule application.*/
   /* 6) If PF17 pressed, exit to projected schedule application.*/
   /* 7) If any AI pressed other than ENTER, PF7, or PF8*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "TS0G"; /* restart this application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    TS0G110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0GM001.XXXPRCNM = "TS0G300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0GM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0GM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0GM001.CAITEM; /* Application data*/
      TS0G110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
      if (TS0GW01.TSEORIG != " " /* If keys were preset before fast path*/
       && TS0GW01.TSEDEST != " " 
       && TS0GW01.TS0GWBAM != 0  
       && TS0GW01.TS0GWEAM != 0  
       && TS0GW01.TS0GWBDM != 0  
       && TS0GW01.TS0GWEDM != 0)
        TS0GW01.TS0GWSWR = "Y"; /* set request for data to yes*/
      else
        TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/
      end
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/
    end
    set TS0GM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0GM001.XXXPRCNM = "TS0G200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    TS0G110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0GM001.XXXPRCNM = "TS0G300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0GM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0G110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0GM001.XXXPRCNM = "TS0G300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0F";
                                   /* set to Published schedule appl*/
    TS0G110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0GM001.XXXPRCNM = "TS0G300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CATOAP = "TS0R";
                                   /* set to Projected schedule appl*/
    TS0G110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0GM001.XXXPRCNM = "TS0G300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not scroll request*/
   && converseVar.eventKey not pf8) 
    TS0GM001.XXXPRCNM = "TS0G200"; /* Process name*/
    TS0GW01.TS0GWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0G300

// Reset highlighted fields
Function TS0G400()
   /* ------------------------------------------------------------*/
                /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0GM001.TSEORIG normal; /* Reset all fields*/
  set TS0GM001.TSEDEST normal;
  set TS0GM001.TSNBARVL normal;
  set TS0GM001.TSNEARVL normal;
  set TS0GM001.TSNBDPRT normal;
  set TS0GM001.TSNEDPRT normal;

  set TS0GM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0GM001.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0G400

// Verify the entered data
Function TS0G500()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0GM001.CAITEM > " ") /* Application data was entered*/
    set TS0GM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate error message*/
    TS0GM001.XXXPRCNM = "TS0G500"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/

      TS0G510(); /* Verify scroll request*/

    else
      if (TS0GM001.TSEORIG == " " /* If no data entered*/
       && TS0GM001.TSEDEST == " " 
       && TS0GM001.TSNBDPRT == 0  
       && TS0GM001.TSNEDPRT == 0  
       && TS0GM001.TSNBARVL == 0  
       && TS0GM001.TSNEARVL == 0)

        TS0G110(); /* purge temporary storage*/
        TS0GW01.TSEORIG = " "; /* Save the keys*/
        TS0GW01.TSEDEST = " ";
        TS0GW01.TS0GWBDM = 0;
        TS0GW01.TS0GWEDM = 0;
        TS0GW01.TS0GWBAM = 0;
        TS0GW01.TS0GWEAM = 0;
        TS0GW01.TS0GWPSW = "Y"; /* indicate error message*/
        set TS0GM001.TSEORIG cursor; /* set cursor*/
        converseLib.validationFailed(34); /* data must be entered*/
        TS0GM001.XXXPRCNM = "TS0G500"; /* process name*/

      else
        if (TS0GM001.TSEORIG != TS0GW01.TSEORIG /* If any new data entered*/
         || TS0GM001.TSEDEST != TS0GW01.TSEDEST 
         || TS0GM001.TSNBDPRT != TS0GW01.TS0GWBDM
         || TS0GM001.TSNEDPRT != TS0GW01.TS0GWEDM
         || TS0GM001.TSNBARVL != TS0GW01.TS0GWBAM
         || TS0GM001.TSNEARVL != TS0GW01.TS0GWEAM
         || TS0GM001.TSEORIG == " "             /* If or if any data missing*/
         || TS0GM001.TSEDEST == " "             
         || TS0GM001.TSNBDPRT == 0              
         || TS0GM001.TSNEDPRT == 0              
         || TS0GM001.TSNBARVL == 0              
         || TS0GM001.TSNEARVL == 0)            

          TS0G110(); /* purge temporary storage*/
          TS0GW01.TSEORIG = TS0GM001.TSEORIG; /* Save the keys*/
          TS0GW01.TSEDEST = TS0GM001.TSEDEST;
          TS0GW01.TS0GWBDM = TS0GM001.TSNBDPRT;
          TS0GW01.TS0GWEDM = TS0GM001.TSNEDPRT;
          TS0GW01.TS0GWBAM = TS0GM001.TSNBARVL;
          TS0GW01.TS0GWEAM = TS0GM001.TSNEARVL;
          set TS0GM001 initial; /* clear map*/
          TS0GM001.TSEORIG = TS0GW01.TSEORIG;
                                   /* move keys back to map*/
          TS0GM001.TSEDEST = TS0GW01.TSEDEST;
          if (TS0GW01.TS0GWBDM != 0)
            TS0GM001.TSNBDPRT = TS0GW01.TS0GWBDM;
          end
          if (TS0GW01.TS0GWEDM != 0)
            TS0GM001.TSNEDPRT = TS0GW01.TS0GWEDM;
          end
          if (TS0GW01.TS0GWBAM != 0)
            TS0GM001.TSNBARVL = TS0GW01.TS0GWBAM;
          end
          if (TS0GW01.TS0GWEAM != 0)
            TS0GM001.TSNEARVL = TS0GW01.TS0GWEAM;
          end
          TS0G520(); /* Verify any changed data*/

        else /* If no data was changed*/
          TS0GW01.TS0GWPSW = "Y"; /* indicate error message*/
          set TS0GM001.TSEORIG cursor; /* set cursor*/
          converseLib.validationFailed(34); /* data must be entered*/
          TS0GM001.XXXPRCNM = "TS0G500"; /* process name*/
        end
      end
    end
  end


end // end TS0G500

// Verify scroll request
Function TS0G510()
   /* ------------------------------------------------------------*/
               /* VERIFY SCROLL REQUEST*/

   /* 1) Ensure that pages exist to scroll forward or back.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0GW01.TS0GWTSP < 2)       /* and no previous pages*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
    TS0GM001.XXXPRCNM = "TS0G510"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0GW01.TS0GWTSP >= TS0GW01.TA5TSQIX) /* and no more pages*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
    TS0GM001.XXXPRCNM = "TS0G510"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end


end // end TS0G510

// Verify any changed data
Function TS0G520()
   /* ------------------------------------------------------------*/
                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify that all dates entered are valid.*/
   /* 2) Verify that all locations entered are valid.*/
   /* 3) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

  if (TS0GM001.TSNEARVL != 0) /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0GM001.TSNEARVL; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0GW01.TS0GWEAR = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
      TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
      set TS0GM001.TSNEARVL cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
    TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
    set TS0GM001.TSNEARVL cursor, modified, bold;
  end

  if (TS0GM001.TSNBARVL != 0) /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0GM001.TSNBARVL; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0GW01.TS0GWBAR = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
      TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
      set TS0GM001.TSNBARVL cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
    TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
    set TS0GM001.TSNBARVL cursor, modified, bold;
  end

  if (TS0GM001.TSNEDPRT != 0) /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0GM001.TSNEDPRT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0GW01.TS0GWEDP = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
      TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
      set TS0GM001.TSNEDPRT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
    TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
    set TS0GM001.TSNEDPRT cursor, modified, bold;
  end

  if (TS0GM001.TSNBDPRT != 0) /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0GM001.TSNBDPRT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0GW01.TS0GWBDP = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
      TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
      set TS0GM001.TSNBDPRT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
    TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
    set TS0GM001.TSNBDPRT cursor, modified, bold;
  end

  if (TS0GM001.TSEDEST == " ") /* if code is there*/
    converseLib.validationFailed(41); /* Error message*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
    TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
    set TS0GM001.TSEDEST cursor, modified, bold;
  else
    set TSCREC empty; /* empty record*/
    TSCREC.TSCLOCCD = TS0GM001.TSEDEST; /* move in key*/
    TS0G521(); /* Select the row*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If location code not found*/
      converseLib.validationFailed(27); /* Error message*/
      TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
      TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
      set TS0GM001.TSEDEST cursor, modified, bold;
    end
  end

  if (TS0GM001.TSEORIG == " ") /* if code is there*/
    converseLib.validationFailed(41); /* Error message*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
    TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
    set TS0GM001.TSEORIG cursor, modified, bold;
  else
    set TSCREC empty; /* empty record*/
    TSCREC.TSCLOCCD = TS0GM001.TSEORIG; /* move in key*/
    TS0G521(); /* Select the row*/
    if (SQLCA.VAGen_SQLCODE == 100) /* If location code not found*/
      converseLib.validationFailed(27); /* Error message*/
      TS0GW01.TS0GWPSW = "Y"; /* indicate problem*/
      TS0GM001.XXXPRCNM = "TS0G520"; /* Process name*/
      set TS0GM001.TSEORIG cursor, modified, bold;
    end
  end

  if (TS0GW01.TS0GWPSW == "N") /* if all locations and dates valid*/
    TS0G522(); /* check for span and date overlap*/
                                   /* errors*/
  end


end // end TS0G520

// Select locations
Function TS0G521()
   /* ------------------------------------------------------------*/
                /* SELECT LOCATION DATA*/

   /* 1) Select location.*/
   /* 2) If an  unexpected return code is recieved:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0G521"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0GM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0GW01.TS0GWPSW = "Y"; /* Indicate Problem*/
    TS0GM001.XXXPRCNM = "TS0G521"; /* Process name*/
  end


end // end TS0G521

// Check date span and overlap
Function TS0G522()
   /* ------------------------------------------------------------*/
            /* CHECK DATE SPAN AND OVERLAP*/

   /* 1) Check that ending dates are >= beginning dates.*/
   /* 2) Check that not > 30 days between begin and end dates.*/
   /* 3) Check that at least 60 days difference between leaving*/
      /* beginning date and arrival end date.*/

   /* Each of these checks will only be performed if the previous*/
      /* check has been successfully completed with no errors.*/

   /* ------------------------------------------------------------*/

  if (TS0GW01.TS0GWEAR < TS0GW01.TS0GWBAR) /* if end date LT beg date*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(58); /* error 'must be >=' message*/
    TS0GM001.XXXPRCNM = "TS0G522"; /* process name*/
    set TS0GM001.TSNEARVL cursor, modified, bold;
  end

  if (TS0GW01.TS0GWEDP < TS0GW01.TS0GWBDP) /* if end date LT beg date*/
    TS0GW01.TS0GWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(58); /* error 'must be >=' message*/
    TS0GM001.XXXPRCNM = "TS0G522"; /* process name*/
    set TS0GM001.TSNEDPRT cursor, modified, bold;
  end

  if (TS0GW01.TS0GWPSW == "N") /* if no errors*/

     /* check date span < 32 for departure dates*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0GW01.TS0GWBDP; /* begn date*/
    TA2REC.TA2DBDTN = TS0GW01.TS0GWEDP; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN >= 32) /* if diff between dates > 30*/
        TS0GW01.TS0GWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0GM001.XXXPRCNM = "TS0G522"; /* process name*/
        set TS0GM001.TSNEDPRT cursor, modified, bold;
        set TS0GM001.TSNBDPRT modified, bold;
      end
    end

  end

  if (TS0GW01.TS0GWPSW == "N") /* if no errors*/

     /* check date span < 32 for arrival dates*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0GW01.TS0GWBAR; /* begn date*/
    TA2REC.TA2DBDTN = TS0GW01.TS0GWEAR; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN >= 32) /* if diff between dates > 30*/
        TS0GW01.TS0GWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0GM001.XXXPRCNM = "TS0G522"; /* process name*/
        set TS0GM001.TSNEARVL cursor, modified, bold;
        set TS0GM001.TSNBARVL modified, bold;
      end
    end
  end

  if (TS0GW01.TS0GWPSW == "N") /* if no errors*/

     /* check date span <= 62 between leaving beginning date*/
       /* and arriving ending date.*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0GW01.TS0GWBDP; /* begn date*/
    TA2REC.TA2DBDTN = TS0GW01.TS0GWEAR; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN > 62) /* if diff between dates > 30*/
        TS0GW01.TS0GWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0GM001.XXXPRCNM = "TS0G522"; /* process name*/
        set TS0GM001.TSNEARVL cursor, modified, bold;
        set TS0GM001.TSNBDPRT modified, bold;
      end
    end
  end


end // end TS0G522

// Process valid input request
Function TS0G600()
   /* ------------------------------------------------------------*/
                /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If a scroll request, adjust temp storage page number.*/
   /* 2) If enter is pressed and no errors set request for data*/
      /* to yes.*/

   /* ------------------------------------------------------------*/

  if (TS0GW01.TS0GWPSW == "N") /* no errors*/
    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      TS0GW01.TS0GWTSP = TS0GW01.TS0GWTSP - 1; /* Decrement page number*/
    else
      if (converseVar.eventKey is pf8) /* Scroll forward requested*/
        TS0GW01.TS0GWTSP = TS0GW01.TS0GWTSP + 1; /* Increment page number*/
      else
        if (converseVar.eventKey is enter /* if enter is pressed*/
         && TS0GW01.TS0GWPSW == "N")      /* and no errors*/
          TS0GW01.TS0GWSWR = "Y"; /* set request for data to yes*/
        end
      end
    end
  end


end // end TS0G600

//*** RECORD=TS0GW01 ****
// Working storage for TS0G - Schedule Inquiry
// ***********************
Record TS0GW01 type basicRecord
  10 TS0GWIXM TS0GWIXM ; 
  10 TS0GWIX2 TS0GWIX2 ; 
  10 TS0GWSWC TS0GWSWC ; 
  10 TS0GWSWR TS0GWSWR ; 
  10 TS0GWPSW TS0GWPSW ; 
  10 TSEORIG TSEORIG ; 
  10 TSEDEST TSEDEST ; 
  10 TS0GWBAM TS0GWBAM ; 
  10 TS0GWBAR TS0GWBAR ; 
  10 TS0GWBDM TS0GWBDM ; 
  10 TS0GWBDP TS0GWBDP ; 
  10 TS0GWEAM TS0GWEAM ; 
  10 TS0GWEAR TS0GWEAR ; 
  10 TS0GWEDM TS0GWEDM ; 
  10 TS0GWEDP TS0GWEDP ; 
  10 TS0GWTSP TS0GWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end TS0GW01

//*** RECORD=TS0GW02 ****
// Temporary storage record for TS0G - Schedule Inquiry
// ***********************
Record TS0GW02 type basicRecord
  10 TS0GWLEN TS0GWLEN ; 
  10 TS0GWLIN TS0GWLIN [13] ; 
    15 TSM1DPRT TSM1DPRT ; 
    15 TSM1CARC TSM1CARC ; 
    15 TSM1CRAF TSM1CRAF ; 
    15 TSM1SHPN TSM1SHPN ; 
    15 TSM1ARVL TSM1ARVL ; 
    15 TSFDSCHG TSFDSCHG ; 
    15 TSM2CARC TSM2CARC ; 
    15 TSM2CRAF TSM2CRAF ; 
    15 TSM2SHPN TSM2SHPN ; 
    15 TSM2ARVL TSM2ARVL ; 
    15 TS0GMTT TS0GMTT ; 
    15 TSMCOST TSMCOST ; 
end // end TS0GW02

//*** RECORD=TSMREC ****
// *******TRANSPORTATION SCHEDULE 2 LEG INQUIRY VIEW***********
// 
// DB2 TABLE VIEW:      DTRANS.VASCHED02
// 
// COPYLIB MEMBER:      DCL00433
// 
// I/O MODULE:          IO2400
// 
// KEY TO DB2 TABLE:    All fields are keys
// 
// PARAMETERS TO PASS:    Entered Origin         ==> TSNORIG
//                        Entered Destination    ==> TSNDEST
//                        Entered Begin Dprt.Dt. ==> TSNBDPRT
//                        Entered End   Dprt.Dt. ==> TSNEDPRT
//                        Entered Begin Arr. Dt. ==> TSNBARR
//                        Entered End   Arr. Dt. ==> TSNEARR
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 01/09/88   MCHRIS   New record.
// **********************
Record TSMREC type basicRecord
  5 TSMGROUP TSMGROUP ; 
    10 TSEORIG TSEORIG ; 
    10 TSFDSCHG TSFDSCHG ; 
    10 TSEDEST TSEDEST ; 
    10 TSM1CARC TSM1CARC ; 
    10 TSM1CRAF TSM1CRAF ; 
    10 TSM1SHPN TSM1SHPN ; 
    10 TSM1SCHE TSM1SCHE ; 
    10 TSM1DPRT TSM1DPRT ; 
    10 TSM1ARVL TSM1ARVL ; 
    10 TSM2CARC TSM2CARC ; 
    10 TSM2CRAF TSM2CRAF ; 
    10 TSM2SHPN TSM2SHPN ; 
    10 TSM2SCHE TSM2SCHE ; 
    10 TSM2DPRT TSM2DPRT ; 
    10 TSM2ARVL TSM2ARVL ; 
    10 TSMCOST TSMCOST ; 
end // end TSMREC

// transit time total
DataItem TS0GMTT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// beginning arrival dt map
DataItem TS0GWBAM num(6)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning arrival dt ccyymmdd
DataItem TS0GWBAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// beginning departure dt map
DataItem TS0GWBDM num(6)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning depart dt ccyymmdd
DataItem TS0GWBDP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// ending arrival dt map
DataItem TS0GWEAM num(6)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ending arrival dt ccyymmdd
DataItem TS0GWEAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// ending departure dt map
DataItem TS0GWEDM num(6)  {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ending depart dt ccyymmdd
DataItem TS0GWEDP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", dateFormat = "MM-dd-yy", inputRequired = no
}
end

// Index for map fields 2
DataItem TS0GWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0GWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS0GWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0GWLIN char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Problem switch
DataItem TS0GWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0GWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0GWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS0GWTSP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TS_L1_ARVL_DT
DataItem TSM1ARVL int {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L1_CARR_CD
DataItem TSM1CARC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L1_CRAFT_NBR
DataItem TSM1CRAF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L1_DPRT_DT
DataItem TSM1DPRT int {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L1_SCHED_IND
DataItem TSM1SCHE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L1_SHP_NBR
DataItem TSM1SHPN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L2_ARVL_DT
DataItem TSM2ARVL int {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L2_CARR_CD
DataItem TSM2CARC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L2_CRAFT_NBR
DataItem TSM2CRAF char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L2_DPRT_DT
DataItem TSM2DPRT int {
  currency = no, numericSeparator = no, sign = none, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L2_SCHED_IND
DataItem TSM2SCHE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_L2_SHP_NBR
DataItem TSM2SHPN char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_SCHED_CST_EST total
DataItem TSMCOST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// record group level
DataItem TSMGROUP char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

