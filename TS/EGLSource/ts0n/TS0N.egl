package ts0n;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0N ****
// This program allows users to pull up shipment information
// sorted in Container/Style sequence for a specific Purchase
// Order number within an ETA Date Range.  Shipment status
// can also be entered to further specify the number of
// shipment rows in this inquiry.
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          05/12/88 CEPPLE  New application.
//          05/29/90 CEPPLE  Fix cursor to autoskip
//                           to next field
//                           Stop suppression past map
//                           detail status.
// TS#000   07/13/90 CEPPLE  Do not select header po or po id
//                           until all other edits correct.
// TS#000   07/16/90 CEPPLE  Allow user to enter any po id.
//                           Error message displayed if mult-
//                           iple po #s found.
// Fix      08/16/90 CEPPLE  Clear TSWREC from application and
//                           inquiry flag in initialization.
// TS#5     10/02/90 SPOPA   Use TSHNKCNX array in TS7REC.
// TS#015   11/13/90 KSTOKK  Increase allowable ETA date range
//                           from 31 to 95 days.
// TS#015   11/21/90 KSTOKK  Add new header field CUST XREF.
// TS#135   12/04/90 KSTOKK  Increase current temporary storage
//                           page number from two to four
//                           bytes.
// TS#146   12/14/90 DHUFFM  Fix to carry information to ts0j.
// TS#15A   01/30/90 DHUFFM  Make factory code optional.
// TS#000   02/13/91 KSTOKK  Increase TS0NWLIN length from 81
//                           to 85.
// TS#000   03/05/91 DHUFFM  Increase TS0NWLEN for BOL increase
// TS#000   05/24/91 DHUFFM  Fix loop problem for negative SQL
//                           return codes.
// TS#212   10/21/91 DHUFFM  Add S.O./P.O. information (right/
//                           left screens).
// TS#242   03/16/92 KSTOKK  Fix to carry map header info from
//                           left to right map and back again
//                           and give msg if no data available
//                           or invalid data fnd and fix cursor
//                           position on map 2 if invalid date
//                           and allow fast path from map 2.
// TS#256   08/21/92 RCHINI  Fix transfer to TS0J after PF7 and
//                           PF8 are entered and no more pages
//                           are available to display.
// TS#256   10/05/92 SFORD   Fix "S"s  & pop-up window problems
// TS#297   10/21/92 TGIEBE  Modularize edit checks, fix pass
//                           data problem to TS0J when PF12
//                           is pressed.
// TS#274   10/21/92 TGIEBE  Expand ETA date range to 6 months.
// TS#260   12/08/92 TGIEBE  Disabled access to application
//                           TS0J when PF12 pressed and no
//                           shipment detail info selected.
// TS#000   09/07/93 NMASTE  CSP 4.1 Conversion
// TS#000   04/19/95 SLEWIS  CHG SO NUMBER LENGTH
// TS#000   11/07/96 JCARL1  Remove beeps from msg display
// Y2KFIX   11/17/97 VRAMAC  Y2K MODIFICATIONS MADE TO:
//                           TS0N200 & TS0N250 TO REMOVE CHECK
//                           FOR YY = '00' FOR YEAR 2000.
// TS1512   28/09/98 smann2  Populate TS-SHP-LEG-NBR onto
//                           Ts0NM001 map ( Refer TS0N132
//                           process )
// *********************
Program TS0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCYREC PCYREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS0NW01 TS0NW01; // record
  TS0NW02 TS0NW02; // record
  TS0NW03 TS0NW03; // record
  TS7REC TS7REC; // record
  TSCREC TSCREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  VCPLHD04 VCPLHD04; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSSTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use TS0NM.TS0NM001,  // forms
      TS0NM.TS0NM002, 
      TS0NM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Schedule Inquiry.*/
     /* ------------------------------------------------------------*/

    set PCFREC empty; /* Initialize records*/
    set PCYREC empty;
    set PC2REC empty;
    set PC3REC empty;
    set PC4REC empty;
    set TSNREC empty;
    set TS7REC empty;
    set TSCREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set ERRSQLCA empty;
    set SQLCA empty;
    set TS0NW01 empty; /* Initialize working storage*/
    set TS0NW02 empty; /* Initialize temporary storage*/
    set TS0NM001 initial; /* Initialize map output area*/

    TS0NW01.TS0NWSWR = "N"; /* Indicate request for data*/
    TS0NW01.TS0NWSWM = "1"; /* Indicate map 1*/
    TS0NW01.TS0NWMXP = 10; /* set max number of passed shipment #s*/

    TSWREC.TSWFRAPP = " "; /* Clear from application*/
    TSWREC.TSWINQFL = " "; /* Clear inquiry flag*/
    TS0NW01.TS0NWIXM = 1; /* set index*/
    while (TS0NW01.TS0NWIXM <= TS0NW01.TS0NWMXP) /* while le max pass lines*/
      TSWREC.TSWSHPID[TS0NWIXM] = 0; /* clear all pass fields*/
      TSWREC.TSWBOL[TS0NWIXM] = " ";
      TSWREC.TSWCARCD[TS0NWIXM] = " ";
      TSWREC.TSWCRAFT[TS0NWIXM] = " ";
      TSWREC.TSWSHPNB[TS0NWIXM] = " ";
      TSWREC.TSWORIG[TS0NWIXM] = " ";
      TSWREC.TSWDEST[TS0NWIXM] = " ";
      TSWREC.TSWXWHCD[TS0NWIXM] = " ";
      TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* incr index*/
    end

    goto TS0N001; /* Converse po inquiry*/


    TS0N001: TS0N001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Purchase Order Inquiry.*/
     /* ------------------------------------------------------------*/

    goto TS0N001; /* Converse po inquiry*/


  end // end main
end // end TS0N

// Verify the entered data
Function TS0N-50000()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0NM001.CAITEM > " ") /* Application data was entered*/
    set TS0NM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate error message*/
    TS0NM001.XXXPRCNM = "N-50000"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0N-51000(); /* Verify scroll request*/
      TS0N-52000(); /* Do edits*/
    else
      if (TS0NM001.PC3PONBR == 0 /* If no data entered*/
       && TS0NM001.TS0NMPYR == " "
       && TS0NM001.TS0NMPMO == 0 
       && TS0NM001.TS0NMDMO == 0 
       && TS0NM001.FY1FCTYC == " "
       && TS0NM001.TS0NMYSS == " "
       && TS0NM001.XGPCD == " "  
       && TS0NM001.TSNBEGDT == " "
       && TS0NM001.TSNENDDT == " "
       && TS0NM001.PC2CUXID == " ")


        TS0N-53000(); /* init maps & w.s. fields*/

      else
        if (TS0NM001.PC3PONBR != TS0NW01.PC3PONBR /* if new data entered*/
         || TS0NM001.TS0NMPYR != TS0NW01.TS0NW-PO-ID-YY-X
         || TS0NM001.TS0NMPMO != TS0NW01.TS0NW-PO-ID-PM
         || TS0NM001.TS0NMDMO != TS0NW01.TS0NW-PO-ID-DM
         || TS0NM001.FY1FCTYC != TS0NW01.FY1FCTYC 
         || TS0NM001.TS0NMYSS != TS0NW01.TS0NMYSS 
         || TS0NM001.XGPCD != TS0NW01.XGPCD       
         || TS0NM001.TSNBEGDT != TS0NW01.TS0NWBDT 
         || TS0NM001.TSNENDDT != TS0NW01.TS0NWEDT 
         || TS0NM001.PC2CUXID != TS0NW01.PC2CUXID 
         || TS0NW01.TS0NW-NO-DATA-MAP-1 == "Y"    
         || TS0NW01.TS0NW-NO-DATA-MAP-2 == "Y"    
         || TS0NW01.TS0NW-MAP1-INVALID-DATA == "Y"
         || TS0NW01.TS0NW-MAP2-INVALID-DATA == "Y")

          TS0N-54000(); /* init ws array and clear maps*/

          TS0N-52000(); /* Verify any changed data*/

        else /* If no data was changed*/

          TS0N-52000(); /* Verify all data*/

        end
      end
    end
  end
end // end TS0N-50000

// Verify scroll request
Function TS0N-51000()
   /* ------------------------------------------------------------*/

               /* VERIFY SCROLL REQUEST*/

   /* 1) Ensure that pages exist to scroll forward or back.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0NW01.TS0NWTSP < 2)       /* and no previous pages*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM001.XXXPRCNM = "N-51000"; /* Process name*/
    TS0NM002.XXXPRCNM = "N-51000"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0NW01.TS0NWTSP >= TS0NW01.TA5TSQIX) /* and no more pages*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM001.XXXPRCNM = "N-51000"; /* Process name*/
    TS0NM002.XXXPRCNM = "N-51000"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end


end // end TS0N-51000

// Verify any changed data
Function TS0N-52000()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify valid selections.*/
   /* 2) Verify that all dates entered are valid.*/
   /* 3) Verify each P.O. id field seperately.*/
   /* 4) Check for status validity.*/
   /* 5) Check for gpc validity*/
   /* 6) If no errors, check for po or po id entered.*/
   /* 7) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* check valid selections*/
   /* ------------------------------------------------------------*/

  TS0N-52100(); /* Check valid selections entered*/

  TS0N-52200(); /* Check valid ETA end date entered*/

  TS0N-52300(); /* Check valid ETA start date entered*/

   /* ------------------------------------------------------------*/
     /* Check each field in the P.O. id seperately*/
     /* if po nbr not entered.*/
   /* ------------------------------------------------------------*/

  if (TS0NM001.PC3PONBR == 0) /* If po number not entered*/
    TS0N-52400(); /* Edit the P.O. id fields*/
  end

  TS0N-52500(); /* Check valid status entered*/

  TS0N-52600(); /* Check GPC entered*/

  TS0N-52700(); /* Check the customer xref*/

   /* ------------------------------------------------------------*/
   /* Verify that the P.O. # or P.O. id are entered*/
   /* ------------------------------------------------------------*/

  if (TS0NW01.TS0NWPSW == "N") /* If all locations and dates valid*/
    if (TS0NM001.PC3PONBR != TS0NW01.PC3PONBR /* If PO number changed*/
     || TS0NM001.PC3PONBR == 0)               /* or not entered*/
      TS0N-52800(); /* Verify PO or PO id entered*/
    end
  end

   /* ------------------------------------------------------------*/
     /* If no other errors, check date span overlap errors.*/
   /* ------------------------------------------------------------*/

  if (TS0NW01.TS0NWPSW == "N") /* If all locations and dates valid*/
    TS0N-52900(); /* Check span and date overlap errors*/
  end

  if (TS0NW01.TS0NWPSW == "N") /* if all locations and dates valid*/
    TS0NW01.TS0NW-MAP1-INVALID-DATA = "N"; /* Invalid data map 1*/
  else
    if (TS0NW01.TS0NWPSW == "Y") /* Problem switch set to 'Y'*/
      TS0NW01.TS0NW-MAP1-INVALID-DATA = "Y"; /* Invalid data map 1*/
    end
  end

end // end TS0N-52000

// Verify valid selections
Function TS0N-52100()
   /* ------------------------------------------------------------*/

                /* VERIFY VALID SELECTIONS*/

   /* 1) Cycle through all selections to determine in anything*/
      /* other than 'S' was entered.*/

   /* ------------------------------------------------------------*/

  TS0NW01.TS0NWIXM = 12; /* set index to 12*/
  while (TS0NW01.TS0NWIXM > 0) /* until end of selection lines*/
    if (TS0NM001.TS0NMSEL[TS0NWIXM] != "S" /* if selection is not 's'*/
     && TS0NM001.TS0NMSEL[TS0NWIXM] != " ") /* selection is not blank*/
      converseLib.validationFailed(13); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NM001.XXXPRCNM = "N-52100"; /* Process name*/
      set TS0NM001.TS0NMSEL[TS0NWIXM] cursor, modified, bold;
    end
    if (TS0NM002.TS0NMSEL[TS0NWIXM] != "S" /* if selection is not 's'*/
     && TS0NM002.TS0NMSEL[TS0NWIXM] != " ") /* selection is not blank*/
      converseLib.validationFailed(13); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NM002.XXXPRCNM = "N-52100"; /* Process name*/
      set TS0NM002.TS0NMSEL[TS0NWIXM] cursor, modified, bold;
    end
    TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM - 1; /* decrement*/
  end


end // end TS0N-52100

// Verify valid ETA end date
Function TS0N-52200()
   /* ------------------------------------------------------------*/
   /* check valid ETA end date entered*/
   /* ------------------------------------------------------------*/

  TS0NW01.TS0NWEDT = TS0NM001.TSNENDDT; /* save date*/
  if (TS0NM001.TSNENDDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0NM001.TSNENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0NW01.TSNENDDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
      TS0NW01.TS0NWEDT = TS0NM001.TSNENDDT;
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NW01.TS0NWEDT = " ";
      TS0NM001.XXXPRCNM = "N-52200"; /* Process name*/
      set TS0NM001.TSNENDDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM001.XXXPRCNM = "N-52200"; /* Process name*/
    set TS0NM001.TSNENDDT cursor, modified, bold;
  end

end // end TS0N-52200

// Verify valid ETA start date
Function TS0N-52300()
   /* ------------------------------------------------------------*/
     /* check valid ETA start date entered*/
   /* ------------------------------------------------------------*/

  TS0NW01.TS0NWBDT = TS0NM001.TSNBEGDT;
  if (TS0NM001.TSNBEGDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0NM001.TSNBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0NW01.TSNBEGDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
      TS0NW01.TS0NWBDT = TS0NM001.TSNBEGDT;
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NW01.TS0NWBDT = " ";
      TS0NM001.XXXPRCNM = "N-52300"; /* Process name*/
      set TS0NM001.TSNBEGDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM001.XXXPRCNM = "N-52300"; /* Process name*/
    set TS0NM001.TSNBEGDT cursor, modified, bold;
  end

end // end TS0N-52300

// Verify the PO ID fields
Function TS0N-52400()
   /* ------------------------------------------------------------*/

      /* VERIFY THE ENTRY OF EACH P.O. ID FIELD SEPERATELY*/

     /* If any part of the p.o. id entered*/

     /* Verify:  1) Factory code entered and correct (optional).*/
              /* 2) Delivery month entered and correct.*/
              /* 3) Month entered and correct.*/
              /* 4) Year entered and correct.*/

   /* ------------------------------------------------------------*/

  TS0NW01.TS0NWIDS = "N"; /* Initialize the valid po id indicator*/

  if (TS0NM001.TS0NMPYR != " " /* If any of the fields entered.*/
   || TS0NM001.TS0NMPMO != 0   
   || TS0NM001.TS0NMDMO != 0   
   || TS0NM001.FY1FCTYC != " " 
   || TS0NM001.PC4ORTYP != " ")

    TS0N-52410(); /* Check PO type*/

    TS0N-52420(); /* Factory code check--optional*/

    TS0N-52430(); /* Delivery month check--required*/

    TS0N-52440(); /* Month check required*/

    TS0N-52450(); /* Year check--required*/

  end


end // end TS0N-52400

// Verify PO type
Function TS0N-52410()
    /* ------------------------------------------------------------*/
    /* CHECK PO TYPE*/
    /* ------------------------------------------------------------*/

  if (TS0NM001.PC4ORTYP == "  ") /* Nothing there*/
    converseLib.validationFailed(220); /* Invalid order type entered*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate error*/
    TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
    TS0NM001.XXXPRCNM = "N-52410"; /* Process name*/
    set TS0NM001.PC4ORTYP cursor, bold; /* Highlight error*/
  else
    TS0NW01.PC4ORTYP = TS0NM001.PC4ORTYP;
    set PC4REC empty;
    PC4REC.XGPCD = TS0NM001.XGPCD;
    PC4REC.PC4ORTYP = TS0NM001.PC4ORTYP;
    TS0NS07(); /* Select order type*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      TS0NW01.PC4ORTYP = TS0NM001.PC4ORTYP;
     /* MOVE TS0NM001.PC4ORTYP TO TS0NM001.PC4ORTYP;*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
        converseLib.validationFailed(220); /* Invalid order type entered*/
        TS0NW01.TS0NWPSW = "Y"; /* Indicate error*/
        TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
        TS0NM001.XXXPRCNM = "N-52410"; /* Process name*/
        set TS0NM001.PC4ORTYP cursor, bold; /* Highlight error*/
      end
    end
  end

end // end TS0N-52410

// Verify factory code
Function TS0N-52420()
    /* ------------------------------------------------------------*/
    /* FACTORY CODE CHECK--OPTIONAL*/
    /* ------------------------------------------------------------*/

  if (TS0NM001.FY1FCTYC > "   ") /* factory code value entered*/
    FY1REC.FY1FCTYC = TS0NM001.FY1FCTYC; /* Search key*/
    FY1REC.XGPCD = TS0NM001.XGPCD; /* gpc*/

    TS0NS05(); /* select the factory row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      TS0NW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
        converseLib.validationFailed(166); /* Invalid factory*/
        TS0NW01.TS0NWPSW = "Y"; /* Indicate error*/
        TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
        TS0NM001.XXXPRCNM = "N-52420"; /* Process name*/
        set TS0NM001.FY1FCTYC cursor, bold; /* Highlight error*/
      else
        TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
      end
    end
  end

end // end TS0N-52420

// Verify delivery month
Function TS0N-52430()
    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

  if (TS0NM001.TS0NMDMO >= 01 /* If valid month entered*/
   && TS0NM001.TS0NMDMO <= 12)
    TS0NW01.TS0NW-PO-ID-DM = TS0NM001.TS0NMDMO;
  else
    TS0NW01.TS0NW-PO-ID-DM = TS0NM001.TS0NMDMO;
    converseLib.validationFailed(165); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
    TS0NM001.XXXPRCNM = "N-52430"; /* Process name*/
    set TS0NM001.TS0NMDMO cursor, bold; /* Highlight*/
  end

end // end TS0N-52430

// Verify month entered
Function TS0N-52440()
    /* ------------------------------------------------------------*/
    /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

  if (TS0NM001.TS0NMPMO >= 01 /* Something there*/
   && TS0NM001.TS0NMPMO <= 12)
    TS0NW01.TS0NW-PO-ID-PM = TS0NM001.TS0NMPMO;
  else
    TS0NW01.TS0NW-PO-ID-PM = TS0NM001.TS0NMPMO;
    converseLib.validationFailed(165); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
    TS0NM001.XXXPRCNM = "N-52440"; /* Process name*/
    set TS0NM001.TS0NMPMO cursor, bold; /* Highlight*/
  end

end // end TS0N-52440

// Verify year entered
Function TS0N-52450()
    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

  TS0NW01.TS0NW-PO-ID-YY-X = TS0NM001.TS0NMPYR;
  if (TS0NW01.TS0NW-PO-ID-YY-X >= "00"
   && TS0NW01.TS0NW-PO-ID-YY-X <= "99")
    if (TS0NW01.TS0NW-PO-ID-YY-X > "85")
      TS0NW01.TS0NW-PO-ID-CC = 19;
    else
      TS0NW01.TS0NW-PO-ID-CC = 20;
    end
  else
    if (TS0NW01.TS0NW-PO-ID-YY1-X >= "A"
     && TS0NW01.TS0NW-PO-ID-YY1-X <= "Z"
     && TS0NW01.TS0NW-PO-ID-YY2-X >= "0"
     && TS0NW01.TS0NW-PO-ID-YY2-X <= "9")
      TS0NS08(); /* Select the set of season years*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TS0NS09(); /* Fetch the first row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
          TS0NW01.TS0NWCYR = PCFREC.PCFBUYYR;
          TS0NW01.TS0NW-PO-ID-YY = TS0NW01.TS0NWCYY;
          TS0NW01.TS0NW-PO-ID-YY-X = TS0NW01.TS0NWCYY;
          TS0NW01.TS0NW-PO-ID-CC = TS0NW01.TS0NWCCC;
          PCFREC.PCFSECD = TS0NM001.TS0NMPYR;
        else
          converseLib.validationFailed(164); /* Error message*/
          TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
          TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
          TS0NM001.XXXPRCNM = "N-52450"; /* Process name*/
          set TS0NM001.TS0NMPYR cursor, bold; /* Highlight*/
        end
        TS0NS10(); /* Close the set*/
      end
    else
      converseLib.validationFailed(164); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
      TS0NM001.XXXPRCNM = "N-52450"; /* Process name*/
      set TS0NM001.TS0NMPYR cursor, bold; /* Highlight*/
    end
  end

end // end TS0N-52450

// Check valid status entered
Function TS0N-52500()
   /* ------------------------------------------------------------*/
     /* check valid status entered*/
   /* ------------------------------------------------------------*/

  if (TS0NM001.TS0NMYSS == " ") /* if status type is space*/
    TS0NM001.YSSDESC = " "; /* clear description*/
    TS0NW01.TS0NMYSS = " "; /* default code*/
    TS0NW01.YSSDESC = " ";
  else
    TS0NW01.TS0NMYSS = TS0NM001.TS0NMYSS; /* save code*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0NM001.TS0NMYSS in YSSTBL.YSSCD) /* Check valid status*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YSSTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(36); /* Display error message*/
      TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
      TS0NW01.TS0NMYSS = " "; /* save code*/
      TS0NM001.XXXPRCNM = "N-52500"; /* Process name*/
      TS0NM001.YSSDESC = " "; /* Clear description*/
      set TS0NM001.TS0NMYSS cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0NW01.YSSDESC = YSSTBL.YSSDESC[sysVar.arrayIndex];
      TS0NM001.YSSDESC = YSSTBL.YSSDESC[sysVar.arrayIndex];
      TS0NW01.TS0NMYSS = YSSTBL.YSSCD[sysVar.arrayIndex]; /* save code*/
    end
  end

end // end TS0N-52500

// Verify GPC
Function TS0N-52600()
   /* ------------------------------------------------------------*/
   /* Check the GPC*/
   /* ------------------------------------------------------------*/

  if (TS0NM001.XGPCD == " ") /* If gpc code missing*/
    TS0NW01.XGPCD = "  ";
    converseLib.validationFailed(101); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM001.XXXPRCNM = "N-52600"; /* Process name*/
    set TS0NM001.XGPCD cursor, modified, bold;
  else
    TS0NW01.XGPCD = TS0NM001.XGPCD;
    if (TS0NM001.XGPCD in XGPTBL.XGPCD) /* If gpc code ok*/
      TS0NW01.XGPCD = TS0NM001.XGPCD;
    else
      converseLib.validationFailed(101); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NM001.XXXPRCNM = "N-52600"; /* Process name*/
      set TS0NM001.XGPCD cursor, modified, bold;
    end
  end

end // end TS0N-52600

// Verify customer XREF
Function TS0N-52700()
   /* ------------------------------------------------------------*/
   /* Check the customer xref*/
   /* ------------------------------------------------------------*/

  if (TS0NM001.PC2CUXID != " ") /* Cust xref not space*/
    TS0NW01.TS0NWCU5 = TS0NM001.PC2CUXID; /* Seperate cust xref*/
    if (TS0NW01.TS0NWCU1[1] == " " /* Check position 1 for space*/
     || TS0NW01.TS0NWCU1[2] == " " /* Check position 2 for space*/
     || TS0NW01.TS0NWCU1[3] == " ") /* Check position 3 for space*/
      TS0NM001.PC2NAME = " "; /* Move space to map cust name*/
      TS0NW01.PC2NAME = " "; /* Move space to ws cust name*/
      converseLib.validationFailed(296); /* Specify the error message*/
      TS0NW01.TS0NWCU5 = " ";
      TS0NW01.TS0NWPSW = "Y"; /* Indicate a problem with 'Y'*/
      TS0NM001.XXXPRCNM = "N-52700"; /* Move the name of the process*/
      set TS0NM001.PC2CUXID cursor, modified, bold;
    else
      TS0NM001.PC2NAME = " "; /* Move space to map cust name*/
      TS0NW01.PC2NAME = " "; /* Move space to ws cust name*/
      PC2REC.PC2CUXID = TS0NM001.PC2CUXID; /* Move in cust xref key*/

      /* ----------------------------------------------*/
       /* Process all GPC's to check the customer xref*/
      /* ----------------------------------------------*/

      TS0NW01.TS0NWIXM = 1; /* Set index to 1*/
      while (TS0NW01.TS0NWIXM != 9999 /* While not end of loop*/
       && XGPTBL.XGPCD[TS0NWIXM] != "99") /* and not end of GPC table*/

        PC2REC.XGPCD = XGPTBL.XGPCD[TS0NWIXM]; /* Move GPC*/

        TS0N-52710(); /* Select customer*/

        if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
          TS0NW01.TS0NWIXM = 9999; /* End loop*/
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
            TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* Increment index*/
          else
            TS0NW01.TS0NWIXM = 9999; /* End loop*/
          end
        end

      end

      if (SQLCA.VAGen_SQLCODE == 0) /* If customer found*/
        TS0NM001.PC2NAME = PC2REC.PC2NAME; /* Move cust name to map*/
        TS0NW01.PC2NAME = PC2REC.PC2NAME; /* Move cust name to ws*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If customer not found*/
          TS0NW01.TS0NWCU5 = " ";
          TS0NM001.PC2NAME = " "; /* Move space to map cust name*/
          TS0NW01.PC2NAME = " "; /* Move space to ws cust name*/
        end
      end
    end
  else
    TS0NW01.PC2NAME = " "; /* Move space to map cust name*/
    TS0NM001.PC2NAME = " "; /* Move space to ws cust name*/
  end

end // end TS0N-52700

// Select (S )    DPRODC.VPRDCU01
Function TS0N-52710()
   /* ------------------------------------------------------------*/

        /* SELECT THE CUSTOMER NAME*/

   /* ------------------------------------------------------------*/

  call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* select row*/


  if (SQLCA.VAGen_SQLCODE != 0 /* Have an expected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* and handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Set msg number*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "N-52710"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    if (TS0NW01.TS0NWSWM == "1")
      TA1REC.TA1MAP = "TS0NM001"; /* Set map name*/
    else
      TA1REC.TA1MAP = "TS0NM002"; /* Set map name*/
    end
    TA1REC.TA1DBASE = "DPRODC  "; /* Set data base name*/
    TA1REC.TA1TBLVU = "VPRDCU01"; /* Set table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0NW01.TS0NWPSW = "Y"; /* Indicate Problem*/
    TS0NM001.XXXPRCNM = "N-52710"; /* Process name*/
    TS0NM002.XXXPRCNM = "N-52710"; /* Process name*/
  end


end // end TS0N-52710

// Verify entry p.o. or p.o. id
Function TS0N-52800()
   /* ------------------------------------------------------------*/

         /* VERIFY ENTRY OF P.O. NUMBER OR P.O. ID*/

   /* 1) If p.o. number or p.o. id not entered then indicate*/
      /* an error.*/
   /* 2) If the p.o. number was entered then continue on without*/
      /* checking the p.o. id.*/
   /* 3) If only p.o. id fields have been entered and they are*/
      /* correct, then select the p.o. id and obtain a valid*/
      /* p.o. number for the id.*/

   /* ------------------------------------------------------------*/


  if (TS0NM001.PC3PONBR == 0 /* if po # or po id not entered*/
   && TS0NM001.TS0NMPYR == " "
   && TS0NM001.TS0NMPMO == 0 
   && TS0NM001.TS0NMDMO == 0 
   && TS0NM001.FY1FCTYC == " "
   && TS0NM001.PC4ORTYP == " ")
    TS0N-52810(); /* Indicate error and clear WS*/

  else
    if (TS0NM001.PC3PONBR > 0) /* If PO # entered*/
      TS0N-52820(); /* Process without checking PO ID*/

    else
      if (TS0NW01.TS0NWIDS == "N") /* If the po id passed previous edits*/
        TS0N-52830(); /* Obtain a valid PO number*/
      end
    end
  end


end // end TS0N-52800

// Indicate error and clear WS
Function TS0N-52810()
   /* ----------------------------------------------------------------*/
   /* IF PO NUMBER OR PO ID NOT ENTERED, THEN INDICATE AN ERROR*/
   /* ----------------------------------------------------------------*/

  converseLib.validationFailed(168); /* Indicate must enter one or other*/
  TS0NW01.PC3PONBR = 0; /* clear ws fields*/
  TS0NW01.TS0NW-PO-ID-YY = 0;
  TS0NW01.TS0NW-PO-ID-PM = 0;
  TS0NW01.TS0NW-PO-ID-DM = 0;
  TS0NW01.FY1FCTYC = " ";
  TS0NW01.PC4ORTYP = " ";
  TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
  TS0NM001.XXXPRCNM = "N-52810"; /* Process name*/
  set TS0NM001.PC3PONBR cursor, bold;
  set TS0NM001.TS0NMPYR bold;
  set TS0NM001.TS0NMPMO bold;
  set TS0NM001.TS0NMDMO bold;
  set TS0NM001.FY1FCTYC bold;
  set TS0NM001.PC4ORTYP bold;

end // end TS0N-52810

// Process data w/o checking POID
Function TS0N-52820()
   /* -----------------------------------------------------------------*/
   /* IF PO ENTERED, THEN PROCESS DATA WITHOUT CHECKING PO ID*/
   /* -----------------------------------------------------------------*/

  set TS0NW03 empty; /* Clear PO/factory WS*/
  TSWREC.XGPCD = TS0NW01.XGPCD;
  TS0NW01.PC3PONBR = TS0NM001.PC3PONBR; /* save the field*/
  TS0NW03.TS0NWPON[1] = TS0NM001.PC3PONBR; /* save the field*/
  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = TS0NM001.PC3PONBR;
  PCYREC.PCYFUNC = "S "; /* Select alternate*/

  TS0NS06(); /* select the po*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
    TS0NW01.TS0NWDAT = PC3REC.PC3POIDT;
    TS0NW01.TS0NW-PO-ID-CC = TS0NW01.TS0NWPCN;
    TS0NW01.TS0NW-PO-ID-PM = TS0NW01.TS0NWPM1;
    TS0NM001.TS0NMPMO = TS0NW01.TS0NWPM1;
    TS0NW01.TS0NW-PO-ID-DM = TS0NW01.TS0NWPM2;
    TS0NM001.TS0NMDMO = TS0NW01.TS0NWPM2;
    TS0NW01.FY1FCTYC = PC3REC.FY1FCTYC;
    TS0NW03.TS0NMFAC[1] = PC3REC.FY1FCTYC;
    if (TSWREC.XGPCD == "03")
      TS0NW01.TS0NW-PO-ID-YY-X = PC3REC.PCFSECD;
      TS0NM001.TS0NMPYR = PC3REC.PCFSECD;
    else
      TS0NW01.TS0NW-PO-ID-YY-X = TS0NW01.TS0NWPYY;
      TS0NM001.TS0NMPYR = TS0NW01.TS0NWPYY;
    end
    TS0NW01.PC4ORTYP = PC3REC.PC4ORTYP;
    TS0NM001.PC4ORTYP = PC3REC.PC4ORTYP;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
      TS0NM001.TS0NMPYR = " ";
      TS0NM001.TS0NMPMO = 0;
      TS0NM001.TS0NMDMO = 0;
      TS0NM001.FY1FCTYC = " ";
      TS0NM001.PC4ORTYP = " ";
      converseLib.validationFailed(116); /* No data to display*/
      set TS0NM001.PC3PONBR bold;
      TS0NM001.XXXPRCNM = "N-52820"; /* Process name*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    end
  end

end // end TS0N-52820

// Obtain valid PO numbers
Function TS0N-52830()
   /* ------------------------------------------------------------*/
   /* SELECT THE PO ID AND OBTAIN VALID PO NUMBERS*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  set TS0NW03 empty; /* clear po/factory ws*/

  TS0NW01.TS0NW-TEMP-YY-X = TS0NW01.TS0NW-PO-ID-YY-X;
   /* IF TS0NW01.TS0NW-TEMP-YY NUMERIC;*/
  TS0NW01.TS0NW-PO-ID-YY = TS0NW01.TS0NW-TEMP-YY;
   /* END-IF;*/

  PCYREC.PCYFRDT = TS0NW01.TS0NW-PO-ID-DT; /* P.O. id*/
  PCYREC.PCYTODT = TS0NW01.TS0NW-PO-ID-DT; /* P.O. id*/
  PC3REC.PC4ORTYP = TS0NM001.PC4ORTYP; /* P.O. order type*/
  TSWREC.XGPCD = TS0NM001.XGPCD;
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  if (TSWREC.XGPCD == "03")
    PC3REC.PCFSECD = PCFREC.PCFSECD; /* season code*/
    TS0NW01.TS0NW-PO-ID-YY-X = PCFREC.PCFSECD;
    TS0NM001.TS0NMPYR = PCFREC.PCFSECD;
  else
    PC3REC.PCFSECD = " "; /* season code*/
    TS0NM001.TS0NMPYR = TS0NW01.TS0NW-PO-ID-YY-X;
  end
  if (TS0NM001.FY1FCTYC == "   ")
    PC3REC.FY1FCTYC = "*"; /* factory code*/
  else
    PC3REC.FY1FCTYC = TS0NW01.FY1FCTYC;
  end
  PCYREC.PCYFUNC = "S2"; /* Select scan 2*/

  TS0NS06(); /* open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Select set success*/
    TS0NW01.TS0NWIXM = 1; /* set counter for screen ws*/
    TS0NW01.TS0NWSW1 = "N"; /* set end of set switch*/

    while (TS0NW01.TS0NWSW1 == "N") /* while data exists*/
      PCYREC.PCYFUNC = "N2"; /* fetch the next row*/

      TS0NS06();
      if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
        TS0NW01.TS0NWSW1 = "Y";
        if (PC3REC.PC3PONBR == 0)
          converseLib.validationFailed(167); /* No data to display*/
          set TS0NM001.TS0NMPYR cursor, bold;
          set TS0NM001.TS0NMPMO bold;
          set TS0NM001.TS0NMDMO bold;
          set TS0NM001.FY1FCTYC bold;
          set TS0NM001.PC4ORTYP bold;
          TS0NM001.XXXPRCNM = "N-52830"; /* Process name*/
          TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 0) /* return ok*/
          TS0NW03.TS0NMFAC[TS0NWIXM] = PC3REC.FY1FCTYC;
          TS0NW03.TS0NWPON[TS0NWIXM] = PC3REC.PC3PONBR;
          TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1;
                                   /* increment counter*/
          if (TS0NW01.TS0NWIXM >= 1000)
            TS0NW01.TS0NWSW1 = "Y";
            converseLib.validationFailed(145); /* Too many po's*/
            TS0NM001.XXXPRCNM = "N-52830"; /* Process name*/
            TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
          end
        end
      end
    end
    if (TS0NW01.TS0NWSW1 == "Y") /* if last fetch done*/
      PCYREC.PCYFUNC = "C2"; /* close cursor*/

      TS0NS06();
    end
  end

end // end TS0N-52830

// Check date span and overlap
Function TS0N-52900()
   /* ------------------------------------------------------------*/

            /* CHECK DATE SPAN AND OVERLAP*/

   /* 1) Check that ETA end date is >= ETA begin date.*/
   /* 2) Check that not > 185 days (6 mo.) between begin and end dates.*/

   /* Each of these checks will only be performed if the previous*/
      /* check has been successfully completed with no errors.*/

   /* ------------------------------------------------------------*/

  if (TS0NW01.TSNENDDT < TS0NW01.TSNBEGDT) /* if end date LT beg date*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(58); /* error 'must be >=' message*/
    TS0NM001.XXXPRCNM = "N-52900"; /* process name*/
    TS0NM002.XXXPRCNM = "N-52900"; /* process name*/
    set TS0NM001.TSNENDDT cursor, modified, bold;
    set TS0NM002.TSNENDDT cursor, modified, bold;
  end

  if (TS0NW01.TS0NWPSW == "N") /* if no errors*/

     /* check date span < 186 for ETA dates*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0NW01.TSNBEGDT; /* begn date*/
    TA2REC.TA2DBDTN = TS0NW01.TSNENDDT; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN >= 186) /* if diff between dates > 185*/
        TS0NW01.TS0NWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0NM001.XXXPRCNM = "N-52900"; /* process name*/
        TS0NM002.XXXPRCNM = "N-52900"; /* process name*/
        set TS0NM001.TSNBEGDT cursor, modified, bold;
        set TS0NM001.TSNENDDT modified, bold;
        set TS0NM002.TSNBEGDT cursor, modified, bold;
        set TS0NM002.TSNENDDT modified, bold;
      end
    end

  end


end // end TS0N-52900

// Init Maps & W.S. Fields
Function TS0N-53000()
   /* ------------------------------------------------------*/
   /* Init Maps and Working Storage Records*/
   /* ------------------------------------------------------*/

  TS0N110(); /* purge temporary storage*/
  set TS0NW02 empty; /* empty screen ws*/

  TS0NW01.TS0NWIXM = 1; /* set index to 1*/
  while (TS0NW01.TS0NWIXM <= TS0NW01.TS0NWMXP) /* until end array*/
    TS0NW01.TSWSHPID[TS0NWIXM] = 0; /* clear fields*/
    TS0NW01.TSWBOL[TS0NWIXM] = " ";
    TS0NW01.TSWCARCD[TS0NWIXM] = " ";
    TS0NW01.TSWCRAFT[TS0NWIXM] = " ";
    TS0NW01.TSWSHPNB[TS0NWIXM] = " ";
    TS0NW01.TSWORIG[TS0NWIXM] = " ";
    TS0NW01.TSWDEST[TS0NWIXM] = " ";
    TS0NW01.TSWXWHCD[TS0NWIXM] = " ";
    TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* increment index*/
  end

  TS0NW01.PC3PONBR = 0; /* Save the keys*/
  TS0NW01.TS0NW-PO-ID-YY = 0;
  TS0NW01.TS0NW-PO-ID-PM = 0;
  TS0NW01.TS0NW-PO-ID-DM = 0;
  TS0NW01.FY1FCTYC = " ";
  TS0NW01.PC4ORTYP = " ";
  TS0NW01.TS0NMYSS = " ";
  TS0NW01.XGPCD = " ";
  TS0NW01.TS0NWBDT = " ";
  TS0NW01.TS0NWEDT = " ";
  TS0NW01.PC2CUXID = " ";
  set TS0NM001 initial; /* clear map*/
  set TS0NM002 initial; /* clear map*/
  set TS0NM001.PC3PONBR cursor; /* set cursor*/
  set TS0NM002.PC3PONBR cursor; /* set cursor*/
  TS0NM001.XXXPRCNM = "N-53000"; /* process name*/
  TS0NM002.XXXPRCNM = "N-53000"; /* process name*/
  TS0NW01.TS0NWPSW = "Y"; /* indicate error message*/
  converseLib.validationFailed(34); /* data must be entered*/
end // end TS0N-53000

// Init WS array and maps
Function TS0N-54000()
          /* -----------------------------------------------*/
          /* INITIALIZE WORKING STORAGE ARRAY AND CLEAR MAPS*/
          /* -----------------------------------------------*/


  TS0N110(); /* purge temporary storage*/
  set TS0NW02 empty; /* empty screen ws*/

  TS0NW01.TS0NWIXM = 1; /* set index to 1*/
  while (TS0NW01.TS0NWIXM <= TS0NW01.TS0NWMXP) /* until end array*/
    TS0NW01.TSWSHPID[TS0NWIXM] = 0; /* clear shpid field*/
    TS0NW01.TSWBOL[TS0NWIXM] = " "; /* init ws array*/
    TS0NW01.TSWCARCD[TS0NWIXM] = " ";
    TS0NW01.TSWCRAFT[TS0NWIXM] = " ";
    TS0NW01.TSWSHPNB[TS0NWIXM] = " ";
    TS0NW01.TSWORIG[TS0NWIXM] = " ";
    TS0NW01.TSWDEST[TS0NWIXM] = " ";
    TS0NW01.TSWXWHCD[TS0NWIXM] = " ";
    TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* increment index*/
  end

  TS0NW01.PC3PONBR = TS0NM001.PC3PONBR; /* move map1 to ws*/
  TS0NW01.TS0NW-PO-ID-YY-X = TS0NM001.TS0NMPYR;
  TS0NW01.TS0NW-PO-ID-PM = TS0NM001.TS0NMPMO;
  TS0NW01.TS0NW-PO-ID-DM = TS0NM001.TS0NMDMO;
  TS0NW01.FY1FCTYC = TS0NM001.FY1FCTYC;
  TS0NW01.PC4ORTYP = TS0NM001.PC4ORTYP;
  TS0NW01.TS0NMYSS = TS0NM001.TS0NMYSS;
  TS0NW01.XGPCD = TS0NM001.XGPCD;
  TS0NW01.TS0NWBDT = TS0NM001.TSNBEGDT;
  TS0NW01.TS0NWEDT = TS0NM001.TSNENDDT;
  TS0NW01.PC2CUXID = TS0NM001.PC2CUXID;

  set TS0NM001 initial; /* clear map*/
  set TS0NM002 initial; /* clear map*/

  TS0NM001.PC3PONBR = TS0NW01.PC3PONBR; /* move ws to map1*/
  TS0NM001.TS0NMPYR = TS0NW01.TS0NW-PO-ID-YY-X;
  TS0NM001.TS0NMPMO = TS0NW01.TS0NW-PO-ID-PM;
  TS0NM001.TS0NMDMO = TS0NW01.TS0NW-PO-ID-DM;
  TS0NM001.FY1FCTYC = TS0NW01.FY1FCTYC;
  TS0NM001.PC4ORTYP = TS0NW01.PC4ORTYP;
  TS0NM001.TS0NMYSS = TS0NW01.TS0NMYSS;
  TS0NM001.XGPCD = TS0NW01.XGPCD;
  TS0NM001.YSSDESC = TS0NW01.YSSDESC;
  TS0NM001.TSNBEGDT = TS0NW01.TS0NWBDT;
  TS0NM001.TSNENDDT = TS0NW01.TS0NWEDT;
  TS0NM001.PC2CUXID = TS0NW01.PC2CUXID;

  TS0NW01.PC3PONBR = 0; /* Save the keys*/
  TS0NW01.TS0NW-PO-ID-YY = 0;
  TS0NW01.TS0NW-PO-ID-YY-X = " ";
  TS0NW01.TS0NW-PO-ID-PM = 0;
  TS0NW01.TS0NW-PO-ID-DM = 0;
  TS0NW01.FY1FCTYC = " ";
  TS0NW01.PC4ORTYP = " ";
  TS0NW01.TS0NMYSS = " ";
  TS0NW01.XGPCD = " ";
  TS0NW01.TS0NWBDT = " ";
  TS0NW01.TS0NWEDT = " ";

  TS0NW01.TS0NWSWR = "Y"; /* set request for data to yes*/

end // end TS0N-54000

// Verify the entered data
Function TS0N-55000()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0NM002.CAITEM > " ") /* Application data was entered*/
    set TS0NM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate error message*/
    TS0NM002.XXXPRCNM = "N-55000"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0N-56000(); /* Verify scroll request*/
      TS0N-57000(); /* Do edits*/
    else
      if (TS0NM002.PC3PONBR == 0 /* If no data entered*/
       && TS0NM002.TS0NMPYR == " "
       && TS0NM002.TS0NMPMO == 0 
       && TS0NM002.TS0NMDMO == 0 
       && TS0NM002.FY1FCTYC == " "
       && TS0NM002.TS0NMYSS == " "
       && TS0NM002.XGPCD == " "  
       && TS0NM002.TSNBEGDT == " "
       && TS0NM002.TSNENDDT == " "
       && TS0NM002.PC2CUXID == " ")


        TS0N-53000(); /* Init maps and WS fields*/

      else
        if (TS0NM002.PC3PONBR != TS0NW01.PC3PONBR /* If new data entered*/
         || TS0NM002.TS0NMPYR != TS0NW01.TS0NW-PO-ID-YY-X
         || TS0NM002.TS0NMPMO != TS0NW01.TS0NW-PO-ID-PM
         || TS0NM002.TS0NMDMO != TS0NW01.TS0NW-PO-ID-DM
         || TS0NM002.FY1FCTYC != TS0NW01.FY1FCTYC 
         || TS0NM002.TS0NMYSS != TS0NW01.TS0NMYSS 
         || TS0NM002.XGPCD != TS0NW01.XGPCD       
         || TS0NM002.TSNBEGDT != TS0NW01.TS0NWBDT 
         || TS0NM002.TSNENDDT != TS0NW01.TS0NWEDT 
         || TS0NM002.PC2CUXID != TS0NW01.PC2CUXID 
         || TS0NW01.TS0NW-NO-DATA-MAP-1 == "Y"    
         || TS0NW01.TS0NW-NO-DATA-MAP-2 == "Y"    
         || TS0NW01.TS0NW-MAP1-INVALID-DATA == "Y"
         || TS0NW01.TS0NW-MAP2-INVALID-DATA == "Y")

          TS0N-58000(); /* init ws array and clear maps*/

          TS0N-57000(); /* Verify any changed data*/

        else /* If no data was changed*/

          TS0N-57000(); /* Verify all data*/

        end
      end
    end
  end


end // end TS0N-55000

// Verify scroll request
Function TS0N-56000()
   /* ------------------------------------------------------------*/

               /* VERIFY SCROLL REQUEST*/

   /* 1) Ensure that pages exist to scroll forward or back.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0NW01.TS0NWTSP < 2)       /* and no previous pages*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM001.XXXPRCNM = "N-56000"; /* Process name*/
    TS0NM002.XXXPRCNM = "N-56000"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0NW01.TS0NWTSP >= TS0NW01.TA5TSQIX) /* and no more pages*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM001.XXXPRCNM = "N-56000"; /* Process name*/
    TS0NM002.XXXPRCNM = "N-56000"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end

end // end TS0N-56000

// Verify any changed data
Function TS0N-57000()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify valid selections.*/
   /* 2) Verify that all dates entered are valid.*/
   /* 3) Verify each P.O. id field seperately.*/
   /* 4) Check for status validity.*/
   /* 5) Check for gpc validity*/
   /* 6) If no errors, check for po or po id entered.*/
   /* 7) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* check valid selections*/
   /* ------------------------------------------------------------*/

  TS0N-52100(); /* Check valid selections entered*/

  TS0N-57100(); /* Check valid ETA end date entered*/

  TS0N-57200(); /* Check valid ETA start date entered*/

   /* ------------------------------------------------------------*/
   /* Check each field in the P.O. id seperately*/
   /* if po nbr not entered.*/
   /* ------------------------------------------------------------*/

  if (TS0NM002.PC3PONBR == 0) /* If po number not entered*/
    TS0N-57300(); /* Edit the P.O. id fields*/
  end

  TS0N-57400(); /* Check valid status entered*/

  TS0N-57500(); /* Check GPC*/

  TS0N-57600(); /* Check the customer XREF*/

   /* ------------------------------------------------------------*/
     /* Verify that the P.O. # or P.O. id are entered*/
   /* ------------------------------------------------------------*/

  if (TS0NW01.TS0NWPSW == "N") /* If all locations and dates valid*/
    if (TS0NM002.PC3PONBR != TS0NW01.PC3PONBR /* If PO number changed*/
     || TS0NM002.PC3PONBR == 0)               /* or not entered*/
      TS0N-57700(); /* Verify PO or PO id entered*/
    end
  end

   /* ------------------------------------------------------------*/
     /* If no other errors, check date span overlap errors.*/
   /* ------------------------------------------------------------*/

  if (TS0NW01.TS0NWPSW == "N") /* If all locations and dates valid*/
    TS0N-57800(); /* Check span and date overlap errors*/
  end

  if (TS0NW01.TS0NWPSW == "N") /* if all locations and dates valid*/
    TS0NW01.TS0NW-MAP2-INVALID-DATA = "N"; /* Invalid data map 2*/
  else
    if (TS0NW01.TS0NWPSW == "Y") /* Problem switch set*/
      TS0NW01.TS0NW-MAP2-INVALID-DATA = "Y"; /* Invalid data map 2*/
    end
  end

end // end TS0N-57000

// Verify ETA end date
Function TS0N-57100()
   /* ------------------------------------------------------------*/
   /* check valid ETA end date entered*/
   /* ------------------------------------------------------------*/

  TS0NW01.TS0NWEDT = TS0NM002.TSNENDDT; /* save date*/
  if (TS0NM002.TSNENDDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0NM002.TSNENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0NW01.TSNENDDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
      TS0NW01.TS0NWEDT = TS0NM002.TSNENDDT;
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NW01.TS0NWEDT = " ";
      TS0NM002.XXXPRCNM = "N-57100"; /* Process name*/
      set TS0NM002.TSNENDDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM002.XXXPRCNM = "N-57100"; /* Process name*/
    set TS0NM002.TSNENDDT cursor, modified, bold;
  end

end // end TS0N-57100

// Verify ETA start date
Function TS0N-57200()
   /* ------------------------------------------------------------*/
   /* check valid ETA start date entered*/
   /* ------------------------------------------------------------*/

  TS0NW01.TS0NWBDT = TS0NM002.TSNBEGDT;
  if (TS0NM002.TSNBEGDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0NM002.TSNBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0NW01.TSNBEGDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
      TS0NW01.TS0NWBDT = TS0NM002.TSNBEGDT;
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
   /* MOVE TS0NM002.TSNBEGDT TO TS0NW01.TS0NWBDT;*/
      TS0NW01.TS0NWBDT = " ";
      TS0NM002.XXXPRCNM = "N-57200"; /* Process name*/
      set TS0NM002.TSNBEGDT cursor, modified, bold;
    end
  else
    converseLib.validationFailed(57); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM002.XXXPRCNM = "N-57200"; /* Process name*/
    set TS0NM002.TSNBEGDT cursor, modified, bold;
  end

end // end TS0N-57200

// Verify the p.o. id fields
Function TS0N-57300()
   /* ------------------------------------------------------------*/

      /* VERIFY THE ENTRY OF EACH P.O. ID FIELD SEPERATELY*/

     /* If any part of the p.o. id entered*/

     /* Verify:  1) Factory code entered and correct (optional).*/
              /* 2) Delivery month entered and correct.*/
              /* 3) Month entered and correct.*/
              /* 4) Year entered and correct.*/

   /* ------------------------------------------------------------*/

  TS0NW01.TS0NWIDS = "N"; /* Initialize the valid po id indicator*/

  if (TS0NM002.TS0NMPYR != " " /* If any of the fields entered.*/
   || TS0NM002.TS0NMPMO != 0   
   || TS0NM002.TS0NMDMO != 0   
   || TS0NM002.FY1FCTYC != " " 
   || TS0NM002.PC4ORTYP != " ")

    TS0N-57310(); /* Check PO type*/

    TS0N-57320(); /* Factory code check--optional*/

    TS0N-57330(); /* Delivery month check--required*/

    TS0N-57340(); /* Month check--required*/

    TS0N-57350(); /* Year check--required*/

  end


end // end TS0N-57300

// Check PO type
Function TS0N-57310()
    /* ------------------------------------------------------------*/
     /* CHECK PO TYPE*/
    /* ------------------------------------------------------------*/

  if (TS0NM002.PC4ORTYP == "  ") /* Nothing there*/
    converseLib.validationFailed(220); /* Invalid order type entered*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate error*/
    TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
    TS0NM002.XXXPRCNM = "N-57310"; /* Process name*/
    set TS0NM002.PC4ORTYP cursor, bold; /* Highlight error*/
  else
    TS0NW01.PC4ORTYP = TS0NM002.PC4ORTYP;
    set PC4REC empty;
    PC4REC.XGPCD = TS0NM002.XGPCD;
    PC4REC.PC4ORTYP = TS0NM002.PC4ORTYP;
    TS0NS07(); /* Select order type*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      TS0NW01.PC4ORTYP = TS0NM002.PC4ORTYP;
     /* MOVE TS0NM002.PC4ORTYP TO TS0NM002.PC4ORTYP;*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
        converseLib.validationFailed(220); /* Invalid order type entered*/
        TS0NW01.TS0NWPSW = "Y"; /* Indicate error*/
        TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
        TS0NM002.XXXPRCNM = "N-57310"; /* Process name*/
        set TS0NM002.PC4ORTYP cursor, bold; /* Highlight error*/
      end
    end
  end

end // end TS0N-57310

// Verify factory code
Function TS0N-57320()
    /* ------------------------------------------------------------*/
    /* FACTORY CODE CHECK--OPTIONAL*/
    /* ------------------------------------------------------------*/

  if (TS0NM002.FY1FCTYC > "   ") /* factory code entered*/
    FY1REC.FY1FCTYC = TS0NM002.FY1FCTYC; /* Search key*/
    FY1REC.XGPCD = TS0NM002.XGPCD; /* gpc*/

    TS0NS05(); /* select the factory row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
      TS0NW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
        converseLib.validationFailed(166); /* Invalid factory*/
        TS0NW01.TS0NWPSW = "Y"; /* Indicate error*/
        TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
        TS0NM002.XXXPRCNM = "N-57320"; /* Process name*/
        set TS0NM002.FY1FCTYC cursor, bold; /* Highlight error*/
      else
        TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
      end
    end
  end

end // end TS0N-57320

// Verify delivery month
Function TS0N-57330()
    /* ------------------------------------------------------------*/
    /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

  if (TS0NM002.TS0NMDMO >= 01 /* If valid month entered*/
   && TS0NM002.TS0NMDMO <= 12)
    TS0NW01.TS0NW-PO-ID-DM = TS0NM002.TS0NMDMO;
  else
    TS0NW01.TS0NW-PO-ID-DM = TS0NM002.TS0NMDMO;
    converseLib.validationFailed(165); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
    TS0NM002.XXXPRCNM = "N-57330"; /* Process name*/
    set TS0NM002.TS0NMDMO cursor, bold; /* Highlight*/
  end

end // end TS0N-57330

// Verify month entered
Function TS0N-57340()
    /* ------------------------------------------------------------*/
    /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

  if (TS0NM002.TS0NMPMO >= 01 /* Something there*/
   && TS0NM002.TS0NMPMO <= 12)
    TS0NW01.TS0NW-PO-ID-PM = TS0NM002.TS0NMPMO;
  else
    TS0NW01.TS0NW-PO-ID-PM = TS0NM002.TS0NMPMO;
    converseLib.validationFailed(165); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
    TS0NM002.XXXPRCNM = "N-57340"; /* Process name*/
    set TS0NM002.TS0NMPMO cursor, bold; /* Highlight*/
  end

end // end TS0N-57340

// Verify year
Function TS0N-57350()
    /* ------------------------------------------------------------*/
    /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

  TS0NW01.TS0NW-PO-ID-YY-X = TS0NM002.TS0NMPYR;
  if (TS0NW01.TS0NW-PO-ID-YY-X >= "00"
   && TS0NW01.TS0NW-PO-ID-YY-X <= "99")
    if (TS0NW01.TS0NW-PO-ID-YY-X > "85")
      TS0NW01.TS0NW-PO-ID-CC = 19;
    else
      TS0NW01.TS0NW-PO-ID-CC = 20;
    end
  else
    if (TS0NW01.TS0NW-PO-ID-YY1-X >= "A"
     && TS0NW01.TS0NW-PO-ID-YY1-X <= "Z"
     && TS0NW01.TS0NW-PO-ID-YY2-X >= "0"
     && TS0NW01.TS0NW-PO-ID-YY2-X <= "9")
      TS0NS08(); /* Select the set of season years*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TS0NS09(); /* Fetch the first row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
          TS0NW01.TS0NWCYR = PCFREC.PCFBUYYR;
          TS0NW01.TS0NW-PO-ID-YY = TS0NW01.TS0NWCYY;
          TS0NW01.TS0NW-PO-ID-YY-X = TS0NW01.TS0NWCYY;
          TS0NW01.TS0NW-PO-ID-CC = TS0NW01.TS0NWCCC;
          PCFREC.PCFSECD = TS0NM002.TS0NMPYR;
        else
          converseLib.validationFailed(164); /* Error message*/
          TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
          TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
          TS0NM002.XXXPRCNM = "N-57350"; /* Process name*/
          set TS0NM002.TS0NMPYR cursor, bold; /* Highlight*/
        end
        TS0NS10(); /* Close the set*/
      end
    else
      converseLib.validationFailed(164); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NW01.TS0NWIDS = "Y"; /* Indicate invalid po id*/
      TS0NM002.XXXPRCNM = "N-57350"; /* Process name*/
      set TS0NM002.TS0NMPYR cursor, bold; /* Highlight*/
    end
  end

end // end TS0N-57350

// Check valid status entered
Function TS0N-57400()
   /* ------------------------------------------------------------*/
     /* check valid status entered*/
   /* ------------------------------------------------------------*/

  if (TS0NM002.TS0NMYSS == " ") /* if status type is space*/
    TS0NM002.YSSDESC = " "; /* clear description*/
    TS0NW01.TS0NMYSS = " "; /* default code*/
    TS0NW01.YSSDESC = " ";
  else
    TS0NW01.TS0NMYSS = TS0NM002.TS0NMYSS; /* save code*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0NM002.TS0NMYSS in YSSTBL.YSSCD) /* Check valid status*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YSSTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(36); /* Display error message*/
      TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
      TS0NM002.XXXPRCNM = "N-57400"; /* Process name*/
      TS0NM002.YSSDESC = " "; /* Clear description*/
      TS0NW01.TS0NMYSS = " ";
      set TS0NM002.TS0NMYSS cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0NW01.YSSDESC = YSSTBL.YSSDESC[sysVar.arrayIndex];
      TS0NM002.YSSDESC = YSSTBL.YSSDESC[sysVar.arrayIndex];
      TS0NW01.TS0NMYSS = YSSTBL.YSSCD[sysVar.arrayIndex]; /* save code*/
    end
  end

end // end TS0N-57400

// Check GPC
Function TS0N-57500()
   /* ------------------------------------------------------------*/
   /* Check the GPC*/
   /* ------------------------------------------------------------*/

  if (TS0NM002.XGPCD == " ") /* If gpc code missing*/
    TS0NW01.XGPCD = "  ";
    converseLib.validationFailed(101); /* Error message*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    TS0NM002.XXXPRCNM = "N-57500"; /* Process name*/
    set TS0NM002.XGPCD cursor, modified, bold;
  else
    TS0NW01.XGPCD = TS0NM002.XGPCD;
    if (TS0NM002.XGPCD in XGPTBL.XGPCD) /* If gpc code ok*/
      TS0NW01.XGPCD = TS0NM002.XGPCD;
    else
      converseLib.validationFailed(101); /* Error message*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
      TS0NM002.XXXPRCNM = "N-57500"; /* Process name*/
      set TS0NM002.XGPCD cursor, modified, bold;
    end
  end

end // end TS0N-57500

// Check customer XREF
Function TS0N-57600()
   /* ------------------------------------------------------------*/
   /* Check the customer xref*/
   /* ------------------------------------------------------------*/

  if (TS0NM002.PC2CUXID != " ") /* Cust xref not space*/
    TS0NW01.TS0NWCU5 = TS0NM002.PC2CUXID; /* Seperate cust xref*/
    if (TS0NW01.TS0NWCU1[1] == " " /* Check position 1 for space*/
     || TS0NW01.TS0NWCU1[2] == " " /* Check position 2 for space*/
     || TS0NW01.TS0NWCU1[3] == " ") /* Check position 3 for space*/
      TS0NM002.PC2NAME = " "; /* Move space to map cust name*/
      TS0NW01.PC2NAME = " "; /* Move space to ws cust name*/
      converseLib.validationFailed(296); /* Specify the error message*/
      TS0NW01.TS0NWCU5 = " ";
      TS0NW01.TS0NWPSW = "Y"; /* Indicate a problem with 'Y'*/
      TS0NM002.XXXPRCNM = "N-57600"; /* Move the name of the process*/
      set TS0NM002.PC2CUXID cursor, modified, bold;
    else
      TS0NM002.PC2NAME = " "; /* Move space to map cust name*/
      TS0NW01.PC2NAME = " "; /* Move space to ws cust name*/
      PC2REC.PC2CUXID = TS0NM002.PC2CUXID; /* Move in cust xref key*/

      /* ----------------------------------------------*/
       /* Process all GPC's to check the customer xref*/
      /* ----------------------------------------------*/

      TS0NW01.TS0NWIXM = 1; /* Set index to 1*/
      while (TS0NW01.TS0NWIXM != 9999 /* While not end of loop*/
       && XGPTBL.XGPCD[TS0NWIXM] != "99") /* and not end of GPC table*/

        PC2REC.XGPCD = XGPTBL.XGPCD[TS0NWIXM]; /* Move GPC*/

        TS0N-52710(); /* Select customer*/

        if (SQLCA.VAGen_SQLCODE == 0) /* If row found*/
          TS0NW01.TS0NWIXM = 9999; /* End loop*/
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
            TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* Increment index*/
          else
            TS0NW01.TS0NWIXM = 9999; /* End loop*/
          end
        end

      end

      if (SQLCA.VAGen_SQLCODE == 0) /* If customer found*/
        TS0NM002.PC2NAME = PC2REC.PC2NAME; /* Move cust name to map*/
        TS0NW01.PC2NAME = PC2REC.PC2NAME; /* Move cust name to ws*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If customer not found*/
          TS0NM002.PC2NAME = " "; /* Move space to map cust name*/
          TS0NW01.PC2NAME = " "; /* Move space to ws cust name*/
        end
      end
    end
  else
    TS0NW01.PC2NAME = " "; /* Move space to map cust name*/
    TS0NM002.PC2NAME = " "; /* Move space to ws cust name*/
  end

end // end TS0N-57600

// Verify entry p.o. or p.o. id
Function TS0N-57700()
   /* ------------------------------------------------------------*/

         /* VERIFY ENTRY OF P.O. NUMBER OR P.O. ID*/

   /* 1) If p.o. number or p.o. id not entered then indicate*/
      /* an error.*/
   /* 2) If the p.o. number was entered then continue on without*/
      /* checking the p.o. id.*/
   /* 3) If only p.o. id fields have been entered and they are*/
      /* correct, then select the p.o. id and obtain a valid*/
      /* p.o. number for the id.*/

   /* ------------------------------------------------------------*/


  if (TS0NM002.PC3PONBR == 0 /* if po # or po id not entered*/
   && TS0NM002.TS0NMPYR == " "
   && TS0NM002.TS0NMPMO == 0 
   && TS0NM002.TS0NMDMO == 0 
   && TS0NM002.FY1FCTYC == " "
   && TS0NM002.PC4ORTYP == " ")
    TS0N-57710(); /* Indicate error and clear WS*/

  else
    if (TS0NM002.PC3PONBR > 0) /* If po # entered*/
      TS0N-57720(); /* Process without checking PO ID*/

    else
      if (TS0NW01.TS0NWIDS == "N") /* If the po id passed previous edits*/
        TS0N-57730(); /* Obtain a valid PO number*/
      end
    end
  end

end // end TS0N-57700

// Indicate error message
Function TS0N-57710()
   /* ----------------------------------------------------------------*/
   /* IF PO NUMBER OR PO ID NOT ENTERED, THEN INDICATE AN ERROR*/
   /* ----------------------------------------------------------------*/

  converseLib.validationFailed(168); /* Indicate must enter one or other*/
  TS0NW01.PC3PONBR = 0; /* clear ws fields*/
  TS0NW01.TS0NW-PO-ID-YY = 0;
  TS0NW01.TS0NW-PO-ID-PM = 0;
  TS0NW01.TS0NW-PO-ID-DM = 0;
  TS0NW01.FY1FCTYC = " ";
  TS0NW01.PC4ORTYP = " ";
  TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
  TS0NM002.XXXPRCNM = "N-57710"; /* Process name*/
  set TS0NM002.PC3PONBR cursor, bold;
  set TS0NM002.TS0NMPYR bold;
  set TS0NM002.TS0NMPMO bold;
  set TS0NM002.TS0NMDMO bold;
  set TS0NM002.FY1FCTYC bold;
  set TS0NM002.PC4ORTYP bold;

end // end TS0N-57710

// Process data w/o checking POID
Function TS0N-57720()
   /* ------------------------------------------------------------*/
   /* IF PO NUMBER OR PO ID NOT ENTERED, THEN INDICATE AN ERROR*/
   /* ------------------------------------------------------------*/

  set TS0NW03 empty; /* Clear po/factory ws*/
  TSWREC.XGPCD = TS0NW01.XGPCD;
  TS0NW01.PC3PONBR = TS0NM002.PC3PONBR; /* save the field*/
  TS0NW03.TS0NWPON[1] = TS0NM002.PC3PONBR; /* save the field*/
  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = TS0NM002.PC3PONBR;
  PCYREC.PCYFUNC = "S "; /* Select alternate*/

  TS0NS06(); /* select the po*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
    TS0NW01.TS0NWDAT = PC3REC.PC3POIDT;
    TS0NW01.TS0NW-PO-ID-CC = TS0NW01.TS0NWPCN;
    TS0NW01.TS0NW-PO-ID-PM = TS0NW01.TS0NWPM1;
    TS0NM002.TS0NMPMO = TS0NW01.TS0NWPM1;
    TS0NW01.TS0NW-PO-ID-DM = TS0NW01.TS0NWPM2;
    TS0NM002.TS0NMDMO = TS0NW01.TS0NWPM2;
    TS0NW01.FY1FCTYC = PC3REC.FY1FCTYC;
    TS0NW03.TS0NMFAC[1] = PC3REC.FY1FCTYC;
    if (TSWREC.XGPCD == "03")
      TS0NW01.TS0NW-PO-ID-YY-X = PC3REC.PCFSECD;
      TS0NM002.TS0NMPYR = PC3REC.PCFSECD;
    else
      TS0NW01.TS0NW-PO-ID-YY-X = TS0NW01.TS0NWPYY;
      TS0NM002.TS0NMPYR = TS0NW01.TS0NWPYY;
    end
    TS0NW01.PC4ORTYP = PC3REC.PC4ORTYP;
    TS0NM002.PC4ORTYP = PC3REC.PC4ORTYP;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
      TS0NM002.TS0NMPYR = 0;
      TS0NM002.TS0NMPMO = 0;
      TS0NM002.TS0NMDMO = 0;
      TS0NM002.FY1FCTYC = " ";
      TS0NM002.PC4ORTYP = " ";
      converseLib.validationFailed(116); /* No data to display*/
      set TS0NM002.PC3PONBR bold;
      TS0NM002.XXXPRCNM = "N-57720"; /* Process name*/
      TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    end
  end

end // end TS0N-57720

// Obtain a valid PO number
Function TS0N-57730()
   /* ------------------------------------------------------------*/
   /* SELECT THE PO ID AND OBTAIN A VALID PO NUMBER*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  set TS0NW03 empty; /* clear po/factory ws*/

  TS0NW01.TS0NW-TEMP-YY-X = TS0NW01.TS0NW-PO-ID-YY-X;
   /* IF TS0NW01.TS0NW-TEMP-YY NUMERIC;*/
  TS0NW01.TS0NW-PO-ID-YY = TS0NW01.TS0NW-TEMP-YY;
   /* end-if;*/

  PCYREC.PCYFRDT = TS0NW01.TS0NW-PO-ID-DT; /* P.O. id*/
  PCYREC.PCYTODT = TS0NW01.TS0NW-PO-ID-DT; /* P.O. id*/
  PC3REC.PC4ORTYP = TS0NM002.PC4ORTYP; /* P.O. order type*/
  TSWREC.XGPCD = TS0NM002.XGPCD;
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  if (TSWREC.XGPCD == "03")
    PC3REC.PCFSECD = PCFREC.PCFSECD; /* season code*/
    TS0NW01.TS0NW-PO-ID-YY-X = PCFREC.PCFSECD;
    TS0NM002.TS0NMPYR = PCFREC.PCFSECD;
  else
    PC3REC.PCFSECD = " "; /* season code*/
    TS0NM002.TS0NMPYR = TS0NW01.TS0NW-PO-ID-YY-X;
  end
  if (TS0NM002.FY1FCTYC == "   ")
    PC3REC.FY1FCTYC = "*"; /* factory code*/
  else
    PC3REC.FY1FCTYC = TS0NW01.FY1FCTYC;
  end
  PCYREC.PCYFUNC = "S2"; /* Select scan 2*/

  TS0NS06(); /* open the cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Select set success*/
    TS0NW01.TS0NWIXM = 1; /* set counter for screen ws*/
    TS0NW01.TS0NWSW1 = "N"; /* set end of set switch*/

    while (TS0NW01.TS0NWSW1 == "N") /* while data exists*/
      PCYREC.PCYFUNC = "N2"; /* fetch the next row*/

      TS0NS06();
      if (SQLCA.VAGen_SQLCODE == 100) /* end of set*/
        TS0NW01.TS0NWSW1 = "Y";
        if (PC3REC.PC3PONBR == 0)
          converseLib.validationFailed(167); /* No data to display*/
          set TS0NM002.TS0NMPYR cursor, bold;
          set TS0NM002.TS0NMPMO bold;
          set TS0NM002.TS0NMDMO bold;
          set TS0NM002.FY1FCTYC bold;
          set TS0NM002.PC4ORTYP bold;
          TS0NM002.XXXPRCNM = "N-57730"; /* Process name*/
          TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 0) /* return ok*/
          TS0NW03.TS0NMFAC[TS0NWIXM] = PC3REC.FY1FCTYC;
          TS0NW03.TS0NWPON[TS0NWIXM] = PC3REC.PC3PONBR;
          TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1;
                                   /* increment counter*/
          if (TS0NW01.TS0NWIXM >= 1000)
            TS0NW01.TS0NWSW1 = "Y";
            converseLib.validationFailed(145); /* Too many po's*/
            TS0NM002.XXXPRCNM = "N-57730"; /* Process name*/
            TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
          end
        end
      end
    end
    if (TS0NW01.TS0NWSW1 == "Y") /* if last fetch done*/
      PCYREC.PCYFUNC = "C2"; /* close cursor*/

      TS0NS06();
    end
  end

end // end TS0N-57730

// Check date span and overlap
Function TS0N-57800()
   /* ------------------------------------------------------------*/

            /* CHECK DATE SPAN AND OVERLAP*/

   /* 1) Check that ETA end date is >= ETA begin date.*/
   /* 2) Check that not > 185 days between begin and end dates.*/

   /* Each of these checks will only be performed if the previous*/
      /* check has been successfully completed with no errors.*/

   /* ------------------------------------------------------------*/

  if (TS0NW01.TSNENDDT < TS0NW01.TSNBEGDT) /* if end date LT beg date*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate error*/
    converseLib.validationFailed(58); /* error 'must be >=' message*/
    TS0NM001.XXXPRCNM = "N-57800"; /* process name*/
    TS0NM002.XXXPRCNM = "N-57800"; /* process name*/
    set TS0NM001.TSNENDDT cursor, modified, bold;
    set TS0NM002.TSNENDDT cursor, modified, bold;
  end

  if (TS0NW01.TS0NWPSW == "N") /* if no errors*/

     /* check date span < 186 for ETA dates*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
    TA2REC.TA2DBDFN = TS0NW01.TSNBEGDT; /* begn date*/
    TA2REC.TA2DBDTN = TS0NW01.TSNENDDT; /* to date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      if (TA2REC.TA2DBDDN >= 186) /* if diff between dates > 185*/
        TS0NW01.TS0NWPSW = "Y"; /* indicate error*/
        converseLib.validationFailed(68); /* error 'range too large'*/
        TS0NM001.XXXPRCNM = "N-57800"; /* process name*/
        TS0NM002.XXXPRCNM = "N-57800"; /* process name*/
        set TS0NM001.TSNBEGDT cursor, modified, bold;
        set TS0NM001.TSNENDDT modified, bold;
        set TS0NM002.TSNBEGDT cursor, modified, bold;
        set TS0NM002.TSNENDDT modified, bold;
      end
    end

  end


end // end TS0N-57800

// Init WS array and clear maps
Function TS0N-58000()
          /* -----------------------------------------------*/
          /* INITIALIZE WORKING STORAGE ARRAY AND CLEAR MAPS*/
          /* -----------------------------------------------*/

  TS0N110(); /* purge temporary storage*/
  set TS0NW02 empty; /* empty screen ws*/

  TS0NW01.TS0NWIXM = 1; /* set index to 1*/
  while (TS0NW01.TS0NWIXM <= TS0NW01.TS0NWMXP) /* until end array*/
    TS0NW01.TSWSHPID[TS0NWIXM] = 0; /* clear shpid field*/
    TS0NW01.TSWBOL[TS0NWIXM] = " ";
    TS0NW01.TSWCARCD[TS0NWIXM] = " ";
    TS0NW01.TSWCRAFT[TS0NWIXM] = " ";
    TS0NW01.TSWSHPNB[TS0NWIXM] = " ";
    TS0NW01.TSWORIG[TS0NWIXM] = " ";
    TS0NW01.TSWDEST[TS0NWIXM] = " ";
    TS0NW01.TSWXWHCD[TS0NWIXM] = " ";
    TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* increment index*/
  end

  TS0NW01.PC3PONBR = TS0NM002.PC3PONBR;
  TS0NW01.TS0NW-PO-ID-YY-X = TS0NM002.TS0NMPYR;
  TS0NW01.TS0NW-PO-ID-PM = TS0NM002.TS0NMPMO;
  TS0NW01.TS0NW-PO-ID-DM = TS0NM002.TS0NMDMO;
  TS0NW01.FY1FCTYC = TS0NM002.FY1FCTYC;
  TS0NW01.PC4ORTYP = TS0NM002.PC4ORTYP;
  TS0NW01.TS0NMYSS = TS0NM002.TS0NMYSS;
  TS0NW01.XGPCD = TS0NM002.XGPCD;
  TS0NW01.TS0NWBDT = TS0NM002.TSNBEGDT;
  TS0NW01.TS0NWEDT = TS0NM002.TSNENDDT;
  TS0NW01.PC2CUXID = TS0NM002.PC2CUXID;

  set TS0NM002 initial; /* clear map*/
  set TS0NM001 initial; /* clear map*/

  TS0NM002.PC3PONBR = TS0NW01.PC3PONBR;
  TS0NM002.TS0NMPYR = TS0NW01.TS0NW-PO-ID-YY-X;
  TS0NM002.TS0NMPMO = TS0NW01.TS0NW-PO-ID-PM;
  TS0NM002.TS0NMDMO = TS0NW01.TS0NW-PO-ID-DM;
  TS0NM002.FY1FCTYC = TS0NW01.FY1FCTYC;
  TS0NM002.PC4ORTYP = TS0NW01.PC4ORTYP;
  TS0NM002.TS0NMYSS = TS0NW01.TS0NMYSS;
  TS0NM002.XGPCD = TS0NW01.XGPCD;
  TS0NM002.YSSDESC = TS0NW01.YSSDESC;
  TS0NM002.TSNBEGDT = TS0NW01.TS0NWBDT;
  TS0NM002.TSNENDDT = TS0NW01.TS0NWEDT;
  TS0NM002.PC2CUXID = TS0NW01.PC2CUXID;

  TS0NW01.PC3PONBR = 0; /* Save the keys*/
  TS0NW01.TS0NW-PO-ID-YY = 0;
  TS0NW01.TS0NW-PO-ID-YY-X = " ";
  TS0NW01.TS0NW-PO-ID-PM = 0;
  TS0NW01.TS0NW-PO-ID-DM = 0;
  TS0NW01.FY1FCTYC = " ";
  TS0NW01.PC4ORTYP = " ";
  TS0NW01.TS0NMYSS = " ";
  TS0NW01.XGPCD = " ";
  TS0NW01.TS0NWBDT = " ";
  TS0NW01.TS0NWEDT = " ";

  TS0NW01.TS0NWSWR = "Y"; /* set request for data to yes*/

end // end TS0N-58000

// Purchase order inquiry
Function TS0N001()
   /* ------------------------------------------------------------*/

                  /* PURCHASE ORDER INQUIRY*/

   /* This is the main process used to display the schedule map.*/
   /* Processing always return to the top of this group.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0NW01.TS0NWSWR == "Y" /* If request for data is yes*/
   && TS0NW01.TS0NWPSW == "N") /* and no errors*/
    TS0N100(); /* Obtain the data to display*/
  end

  if (TS0NW01.TS0NWSWM != "2") /* If map 1 requested*/
    TS0N200(); /* Format and display map 1*/
  else
    TS0N250(); /* Format and display map 2*/
  end

  TS0N300(); /* Check attention identifier*/

  TS0N400(); /* Reset fields to normal intensity*/

  if (TS0NW01.TS0NWSWM != "2") /* If map 1 requested*/
    TS0N-50000(); /* Verify map 1 entered data*/
  else
    TS0N-55000(); /* Verify map 2 entered data*/
  end

  TS0N600(); /* Process valid input request*/


end // end TS0N001

// Obtain the data to display
Function TS0N100()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move valid screen parameters to TSNREC fields.*/
   /* 2) Select sets and open cursors for DTRANS.VSHPHD02.*/
   /* 3) Fetch rows from SHIPMENT HEADER table.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Initialize records*/
  set TS7REC empty; /* Initialize records*/
  TS0NW01.TS0NWIXM = 1; /* Initialize index*/
  TS0NW01.TS0NWIX3 = 1; /* Initialize index*/


  TS0N110(); /* Purge any temporary storage*/

  set TS0NW02 empty; /* Clear screen WS*/

  while (TS0NW03.TS0NWPON[TS0NWIX3] > 0
   && TS0NW01.TS0NWPSW != "Y") /* And no errors have been detected*/
    TSNREC.TSNBEGDT = TS0NW01.TSNBEGDT;
    TSNREC.TSNENDDT = TS0NW01.TSNENDDT;

    TS7REC.PC3PONBR = TS0NW03.TS0NWPON[TS0NWIX3];
    if (TS0NW01.TS0NWSWM != "2") /* If map 1 selected*/
      TS7REC.XGPCD = TS0NM001.XGPCD;
      if (TS0NM001.PC2CUXID == " ") /* No cust xref entered*/
        TS7REC.PC2CUXID = "*"; /* Wildcard*/
      else
        TS0NW01.TS0NWCU5 = "     "; /* Clear cust xref ws*/
        TS0NW01.TS0NWCU5 = TS0NM001.PC2CUXID; /* Move cust xref value*/
        TSNREC.TSNLOCXR = TS0NW01.TS0NWCU5; /* Move LO cust xref val*/
        if (TS0NW01.TS0NWCU1[4] == " ") /* If char in pos 4 blank*/
          TS0NW01.TS0NWCU1[4] = "9"; /* Move 9 to position 4*/
          TS0NW01.TS0NWCU1[5] = "9"; /* Move 9 to position 5*/
        else
          if (TS0NW01.TS0NWCU1[5] == " ") /* If char in pos 5 blank*/
            TS0NW01.TS0NWCU1[5] = "9"; /* Move 9 to position 5*/
          end
        end
        TSNREC.TSNHICXR = TS0NW01.TS0NWCU5; /* HI Customer number*/
      end

    else
      TS7REC.XGPCD = TS0NM002.XGPCD;
      if (TS0NM002.PC2CUXID == " ") /* No cust xref entered*/
        TS7REC.PC2CUXID = "*"; /* Wildcard*/
      else
        TS0NW01.TS0NWCU5 = "     "; /* Clear cust xref ws*/
        TS0NW01.TS0NWCU5 = TS0NM002.PC2CUXID; /* Move cust xref value*/
        TSNREC.TSNLOCXR = TS0NW01.TS0NWCU5; /* Move LO cust xref val*/
        if (TS0NW01.TS0NWCU1[4] == " ") /* If char in pos 4 blank*/
          TS0NW01.TS0NWCU1[4] = "9"; /* Move 9 to position 4*/
          TS0NW01.TS0NWCU1[5] = "9"; /* Move 9 to position 5*/
        else
          if (TS0NW01.TS0NWCU1[5] == " ") /* If char in pos 5 blank*/
            TS0NW01.TS0NWCU1[5] = "9"; /* Move 9 to position 5*/
          end
        end
        TSNREC.TSNHICXR = TS0NW01.TS0NWCU5; /* HI Customer number*/
      end
    end

    if (TS0NW01.TS0NWSWM != "2") /* If map 1 selected*/
      if (TS0NM001.TS0NMYSS == "  ")
        TS7REC.TSISTAT = "*";
      else
        TS7REC.TSISTAT = TS0NM001.TS0NMYSS;
      end
    else
      if (TS0NM002.TS0NMYSS == "  ")
        TS7REC.TSISTAT = "*";
      else
        TS7REC.TSISTAT = TS0NM002.TS0NMYSS;
      end
    end

    TS0N120(); /* Select set, open the cursor Vshphd02*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
      TS0NW01.TS0NWSW1 = "N";
                                   /* Set end of selected set switch*/

      while (TS0NW01.TS0NWSW1 == "N") /* While data exists to fetch*/
        TS0N130(); /* Fetch the next shphd row*/
        if (TS0NW01.TS0NWIXM > 12) /* and a partial page exists*/
          TS0N140(); /* add that page to temp storage*/
        end
      end
      if (TS0NW01.TS0NWSW1 == "Y") /* If last fetch of detail done*/
        TS0N150(); /* Close the shphd selected set*/
      end
    end
  end

  if (TS0NW01.TS0NWSW1 == "Y") /* If last fetch of detail done*/
    if (TS0NW01.TS0NWIXM > 1) /* and a partial page exists*/
      TS0N140(); /* Add that page to temp storage*/
    end
    TS0NW01.TS0NWTSP = 1; /* Initialize page number*/
    TS0NW01.TS0NWSWR = "N"; /* Reset request for data switch*/

  end

  if (TS0NW01.TA5TSQIX == 0) /* No data to display*/
   /* ND TS0NW01.TS0NWPSW NE 'Y';   /* Error hasn't already been set*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    TS0NW01.TS0NWPSW = "Y"; /* Set problem switch to 'Y'*/
    if (TS0NW01.TS0NWSWM == "1") /* On map 1*/
      TS0NW01.TS0NW-NO-DATA-MAP-1 = "Y"; /* Set no data map 1 to 'Y'*/
      TS0NM001.XXXPRCNM = "TS0N100"; /* Process name*/
    else
      if (TS0NW01.TS0NWSWM == "2") /* On map 2*/
        TS0NW01.TS0NW-NO-DATA-MAP-2 = "Y"; /* Set no data map 2 to 'Y'*/
        TS0NM002.XXXPRCNM = "TS0N100"; /* Process name*/
      end
    end
  else
    if (TS0NW01.TS0NWSWM == "1") /* On map 1*/
      TS0NW01.TS0NW-NO-DATA-MAP-1 = "N"; /* Set no data map 1 to 'N'*/
    else
      if (TS0NW01.TS0NWSWM == "2") /* On map 2*/
        TS0NW01.TS0NW-NO-DATA-MAP-2 = "N"; /* Set no data map 2 to 'N'*/
      end
    end
  end


end // end TS0N100

// Purge any temporary storage
Function TS0N110()
   /* ------------------------------------------------------------*/

              /* PURGE ANY TEMPORARY STORAGE*/

   /* 1) Purge any temporary storage for this application.*/

   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0N110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0NW01.TS0NWTSP = 0; /* Reset current page number*/
  TS0NW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0N110

// Select (S5)    DTRANS.VSHPHD01
Function TS0N120()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VSHPHD02*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S5";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0N120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0NM001.XXXPRCNM = "TS0N120"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0N120"; /* Process name*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0N120

// Fetch  (N5)    DTRANS.VSHPHD01
Function TS0N130()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VSHPHD02*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "N5";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0N135(); /* Determine if more PO's exist*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
      TS0NW01.TS0NWSW1 = "Y"; /* Set end switch*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0N130"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0NM001.XXXPRCNM = "TS0N130"; /* Process name*/
      TS0NM002.XXXPRCNM = "TS0N130"; /* Process name*/

    else

      TS0NW02.TSFSHPID[TS0NWIXM] = TS7REC.TSFSHPID;
      TS0NW02.TSFDESTE[TS0NWIXM] = TS7REC.TSFDESTE;
      TS0NW02.TSEORIG[TS0NWIXM] = TS7REC.TSEORIG;
      TS0NW02.TSEDEST[TS0NWIXM] = TS7REC.TSEDEST;
      TS0NW02.XWHCD[TS0NWIXM] = TS7REC.XWHCD;
      TS0NW02.TSACARCD[TS0NWIXM] = TS7REC.TSACARCD;
      TS0NW02.TS5CRAFT[TS0NWIXM] = TS7REC.TS5CRAFT;
      TS0NW02.TSFSHPNB[TS0NWIXM] = TS7REC.TSFSHPNB;
      TS0NW02.TSFBOL[TS0NWIXM] = TS7REC.TSFBOL;
      TS0NW02.TSHCNTNR[TS0NWIXM] = TS7REC.TSHCNTNR;
      if (TS7REC.TSHSTAT == "RC") /* If container received*/
        TS0NW02.YSSCD[TS0NWIXM] = TS7REC.TSHSTAT;
      else
        TS0NW02.YSSCD[TS0NWIXM] = TS7REC.TSISTAT;
      end
      TS0NW02.PC2CUXID[TS0NWIXM] = TS7REC.PC2CUXID;
      TS0NW02.PC3PONBR[TS0NWIXM] = TS7REC.PC3PONBR;
      TS0NW02.OP1CUOID[TS0NWIXM] = TS7REC.OP1CUOID;
      TS0NW02.OP1NORID[TS0NWIXM] = TS7REC.OP1NORID;
      TS0NW02.SY1STNBR[TS0NWIXM] = TS7REC.SY1STNBR;
      TS0NW02.SY2CLRID[TS0NWIXM] = TS7REC.SY2CLRID;
      TS0NW02.XDMCD[TS0NWIXM] = TS7REC.XDMCD;

      TS0N132(); /* fetch the TS-SHP-LEG-NBR*/


      /* ***************************************************/
       /* Determine the quanitity for the container*/
      /* ***************************************************/

      if (TS7REC.TSHNKCN in TS7REC.TSHNKCNX) /* Container number in array*/
        TS0NW02.TSISHPQT[TS0NWIXM] = TS7REC.TSISHPQX[sysVar.arrayIndex];
      end

      TS0NW02.TSIDETFL[TS0NWIXM] = TS7REC.TSIDETFL;

      TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* increment counter*/

    end
  end

end // end TS0N130

// Fetch  (N5)    DTRANS.VSHPHD01
Function TS0N132()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VCPLHD04*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set VCPLHD04 empty;

  VCPLHD04.TS-NIKE-SHP-ID = TS7REC.TSFSHPID;
  VCPLHD04.TS-NIKE-PL-NBR = TS7REC.TSIPLNBR;

  TSNREC.TSNFNC = "SA";
  call "VCPLHD04" (TSNREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0NW02.TS-SHP-LEG-NBR[TS0NWIXM] = 0;
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
      TS0NW01.TS0NWSW1 = "Y"; /* Set end switch*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0N132"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0NM001.XXXPRCNM = "TS0N132"; /* Process name*/
      TS0NM002.XXXPRCNM = "TS0N132"; /* Process name*/

    else

      TS0NW02.TS-SHP-LEG-NBR[TS0NWIXM] = VCPLHD04.TS-SHP-LEG-NBR;

    end
  end

end // end TS0N132

// Determine if multiple PO's
Function TS0N135()
   /* ------------------------------------------------------------*/

              /* DETERMINE IF MORE PO'S EXIST*/

   /* 1) If multiple PO's:*/
      /* a. continue fetching next shphd row.*/
      /* b. drop out of loop when finished.*/

   /* ------------------------------------------------------------*/

  TS0NW01.TS0NWIX3 = TS0NW01.TS0NWIX3 + 1; /* increment index*/
  if (TS0NW03.TS0NWPON[TS0NWIX3] > 0) /* more po's exist*/
    TS7REC.PC3PONBR = TS0NW03.TS0NWPON[TS0NWIX3];
    TS0NW01.TS0NWSW1 = "Y"; /* Set end switch*/
  else
    TS0NW01.TS0NWSW1 = "Y"; /* Set end switch*/
  end


end // end TS0N135

// Process the container rows
Function TS0N140()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TS0NW02.TS0NWLEN = 1391; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0N"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0N140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0NM001.XXXPRCNM = "TS0N140"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  TS0NW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TS0NW01.TS0NWIXM = 1; /* Reset display line number*/

  set TS0NW02 empty; /* Clear temporary storage record*/


end // end TS0N140

// Close  (C5)    DTRANS.VSHPHD01
Function TS0N150()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VSHPHD02*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "C5";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0N150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0NM001.XXXPRCNM = "TS0N150"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0N150

// Format and display    TS0NM001
Function TS0N200()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0NW01.TS0NWPSW == "N") /* No errors found*/

    set TS0NM001 initial; /* clear the map*/
    set TS0NM002 initial; /* clear the map*/

    /* Move in left screen heading data*/

    TS0NM001.PC3PONBR = TS0NW01.PC3PONBR;

    /* ---------------------- Y2K OUT BEGIN ---------------------*/
    /* IF TS0NW01.TS0NW-PO-ID-YY-X EQ '00'*/
     /* OR TS0NW01.TS0NW-PO-ID-YY-X EQ ' 0'*/
     /* OR TS0NW01.TS0NW-PO-ID-YY-X EQ '  ';*/
    /* ---------------------- Y2K OUT END -----------------------*/

    /* ---------------------- Y2K IN  BEGIN ---------------------*/
    if (TS0NW01.TS0NW-PO-ID-YY-X == " 0"
     || TS0NW01.TS0NW-PO-ID-YY-X == "  ")
      /* -------------------- Y2K IN  END -----------------------*/

      TS0NM001.TS0NMPYR = " ";
    else
      TS0NM001.TS0NMPYR = TS0NW01.TS0NW-PO-ID-YY-X;
    end
    TS0NM001.TS0NMPMO = TS0NW01.TS0NW-PO-ID-PM;
    TS0NM001.TS0NMDMO = TS0NW01.TS0NW-PO-ID-DM;
    TS0NM001.FY1FCTYC = TS0NW01.FY1FCTYC;
    TS0NM001.PC4ORTYP = TS0NW01.PC4ORTYP;
    TS0NM001.TS0NMYSS = TS0NW01.TS0NMYSS;
    TS0NM001.XGPCD = TS0NW01.XGPCD;
    TS0NM001.YSSDESC = TS0NW01.YSSDESC;
    TS0NM001.TSNBEGDT = TS0NW01.TS0NWBDT;
    TS0NM001.TSNENDDT = TS0NW01.TS0NWEDT;
    TS0NM001.PC2CUXID = TS0NW01.PC2CUXID;
    TS0NM001.PC2NAME = TS0NW01.PC2NAME;

  end

  if (TS0NW01.TS0NWPSW == " ") /* first time thru and sw not set*/

    TS0NM001.PC4ORTYP = TS0NW01.PC4ORTYP; /* move in po type*/

    if (TS0NW01.TS0NWBDT == " ") /* if beginning date is blank*/
      XX0XS01(); /* call date routine*/
      TS0NW01.TS0NWMYY = XX0XW01.XX0XWYY; /* set date to mmddyy*/
      TS0NW01.TS0NWMMM = XX0XW01.XX0XWMM;
      TS0NW01.TS0NWMDD = XX0XW01.XX0XWDD;
    end

    if (TS0NW01.TS0NWBDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0NM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = -9; /* add -9 days from todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0NM001.TSNBEGDT = TA2REC.TA2GRGA; /* move beg date*/
        TS0NM002.TSNBEGDT = TA2REC.TA2GRGA; /* move beg date*/
        TS0NW01.TS0NWBDT = TA2REC.TA2GRGA;
      end
    end

    if (TS0NW01.TS0NWEDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0NM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = 22; /* add 22 days to todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0NM001.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0NM002.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0NW01.TS0NWEDT = TA2REC.TA2GRGA;
      end
    end

  end

  if (TS0NW01.TS0NWPSW == "N") /* No errors found*/

    TS0N210(); /* Format the data on the page*/

    if (TS0NM001.TSFDESTE[1] != " ") /* if detail does exist*/
      set TS0NM001.TS0NMSEL[1] cursor; /* set cursor*/
    end

  end

  TS0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0NM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* IF EZEMNO NE 0;                  /* Error message to display*/
  /* SET TS0NM001 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  converse TS0NM001 ;

  TS0NW01.TS0NWPSW = "N"; /* reset problem switch*/
  TS0NW01.TS0NW-MAP1-INVALID-DATA = "N"; /* reset problem switch*/
  TS0NW01.TS0NW-MAP2-INVALID-DATA = "N"; /* reset problem switch*/

  TS0N220(); /* Check for ? inquiry by the user*/

   /* Move left screen heading data into right screen heading*/

  TS0NM002.PC3PONBR = TS0NM001.PC3PONBR;
  TS0NM002.TS0NMPYR = TS0NM001.TS0NMPYR;
  TS0NM002.TS0NMPMO = TS0NM001.TS0NMPMO;
  TS0NM002.TS0NMDMO = TS0NM001.TS0NMDMO;
  TS0NM002.FY1FCTYC = TS0NM001.FY1FCTYC;
  TS0NM002.PC4ORTYP = TS0NM001.PC4ORTYP;
  TS0NM002.TS0NMYSS = TS0NM001.TS0NMYSS;
  TS0NM002.XGPCD = TS0NM001.XGPCD;
  TS0NM002.YSSDESC = TS0NM001.YSSDESC;
  TS0NM002.TSNBEGDT = TS0NM001.TSNBEGDT;
  TS0NM002.TSNENDDT = TS0NM001.TSNENDDT;
  TS0NM002.PC2CUXID = TS0NM001.PC2CUXID;
  TS0NM002.PC2NAME = TS0NM001.PC2NAME;

end // end TS0N200

// Format selected data  TS0NM001
Function TS0N210()
   /* ------------------------------------------------------------*/

               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating fields on map.*/

   /* ------------------------------------------------------------*/

  if (TS0NW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TS0N211(); /* Obtain temporary storage page*/

    set TS0NM001.TS0NMPGL skip; /* Display "PAGE" literal*/
    set TS0NM001.TS0NMOFL skip; /* Display "OF" literal*/

    TS0NM001.TS0NWTSP = TS0NW01.TS0NWTSP; /* Current page number*/
    TS0NM001.TA5TSQIX = TS0NW01.TA5TSQIX; /* Highest page number*/

    TS0NW01.TS0NWIXM = 1; /* Initialize line indexes*/
    TS0NW01.TS0NWIX2 = 0;

      /* move in first line of screen data*/

    TS0NW01.TS0NWWDT = TS0NW02.TSFDESTE[TS0NWIXM];
                                   /* make date mmddyy*/
    TS0NW01.TS0NWMMM = TS0NW01.TS0NWWMM; /* month*/
    TS0NW01.TS0NWMDD = TS0NW01.TS0NWWDD; /* day*/
    TS0NW01.TS0NWMYY = TS0NW01.TS0NWWYY; /* year*/
    TS0NM001.TSFDESTE[TS0NWIXM] = TS0NW01.TS0NWMDT;

    TS0NM001.TSACARCD[TS0NWIXM] = TS0NW02.TSACARCD[TS0NWIXM];
    TS0NM001.TS5CRAFT[TS0NWIXM] = TS0NW02.TS5CRAFT[TS0NWIXM];
    TS0NM001.TSEDEST[TS0NWIXM] = TS0NW02.TSEDEST[TS0NWIXM];
    TS0NM001.TSFBOL[TS0NWIXM] = TS0NW02.TSFBOL[TS0NWIXM];
    TS0NM001.TSHCNTNR[TS0NWIXM] = TS0NW02.TSHCNTNR[TS0NWIXM];
    TS0NM001.SY1STNBR[TS0NWIXM] = TS0NW02.SY1STNBR[TS0NWIXM];
    TS0NM001.SY2CLRID[TS0NWIXM] = TS0NW02.SY2CLRID[TS0NWIXM];

  /* MOVE TS0NW02.XDMCD(TS0NWIXM) TO TS0NM001.XDMCD(TS0NWIXM);*/
    TS0NM001.TS-SHP-LEG-NBR[TS0NWIXM] = TS0NW02.TS-SHP-LEG-NBR[TS0NWIXM];

    TS0NM001.YSSCD[TS0NWIXM] = TS0NW02.YSSCD[TS0NWIXM];
    TS0NM001.TSISHPQT[TS0NWIXM] = TS0NW02.TSISHPQT[TS0NWIXM];

    set TS0NM001.TS0NMSEL[TS0NWIXM] normal; /* display the selection*/

    TS0NW01.TS0NWIXW = 1; /* set index*/
    while (TS0NW01.TS0NWIXW <= TS0NW01.TS0NWMXP) /* until end of array*/
      if (TS0NW02.TSFSHPID[TS0NWIXM] == TS0NW01.TSWSHPID[TS0NWIXW])
        TS0NM001.TS0NMSEL[TS0NWIXM] = "S"; /* move s to field*/
        TS0NW01.TS0NWIXW = TS0NW01.TS0NWMXP + 1; /* end loop*/
      else
        TS0NW01.TS0NWIXW = TS0NW01.TS0NWIXW + 1; /* increment index*/
      end
    end

    TS0NW01.TS0NWIXW = 1; /* set index*/
    TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* Increment line indexes*/
    TS0NW01.TS0NWIX2 = TS0NW01.TS0NWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0N212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0N210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0NW01.TS0NWIXM <= 12 /* Until end of lines*/
     && TS0NW02.TSACARCD[TS0NWIXM] != " ") /* and lines exist*/

      TS0NW01.TS0NWWDT = TS0NW02.TSFDESTE[TS0NWIXM];
      TS0NW01.TS0NWMMM = TS0NW01.TS0NWWMM;
      TS0NW01.TS0NWMDD = TS0NW01.TS0NWWDD;
      TS0NW01.TS0NWMYY = TS0NW01.TS0NWWYY;
      TS0NM001.TSFDESTE[TS0NWIXM] = TS0NW01.TS0NWMDT;

      TS0NM001.TSACARCD[TS0NWIXM] = TS0NW02.TSACARCD[TS0NWIXM];
      TS0NM001.TS5CRAFT[TS0NWIXM] = TS0NW02.TS5CRAFT[TS0NWIXM];
      TS0NM001.TSEDEST[TS0NWIXM] = TS0NW02.TSEDEST[TS0NWIXM];
      TS0NM001.TSFBOL[TS0NWIXM] = TS0NW02.TSFBOL[TS0NWIXM];
      TS0NM001.TSHCNTNR[TS0NWIXM] = TS0NW02.TSHCNTNR[TS0NWIXM];
      TS0NM001.SY1STNBR[TS0NWIXM] = TS0NW02.SY1STNBR[TS0NWIXM];
      TS0NM001.SY2CLRID[TS0NWIXM] = TS0NW02.SY2CLRID[TS0NWIXM];

  /* MOVE TS0NW02.XDMCD(TS0NWIXM) TO TS0NM001.XDMCD(TS0NWIXM);*/
      TS0NM001.TS-SHP-LEG-NBR[TS0NWIXM] = TS0NW02.TS-SHP-LEG-NBR[TS0NWIXM];

      TS0NM001.YSSCD[TS0NWIXM] = TS0NW02.YSSCD[TS0NWIXM];
      TS0NM001.TSISHPQT[TS0NWIXM] = TS0NW02.TSISHPQT[TS0NWIXM];

      if (TS0NW02.TSFSHPID[TS0NWIXM] == TS0NW02.TSFSHPID[TS0NWIX2])
         /* continue on*/
        if (TS0NW02.TSFDESTE[TS0NWIXM] == TS0NW02.TSFDESTE[TS0NWIX2])
          TS0NM001.TSFDESTE[TS0NWIXM] = " "; /* move ' ' to dprt*/
          TS0N212(); /* continue repeating supression*/
        end
      end

      if (TS0NM001.TSACARCD[TS0NWIXM] != " ") /* if carrier exists on map*/
        set TS0NM001.TS0NMSEL[TS0NWIXM] normal; /* display the selection*/

        TS0NW01.TS0NWIXW = 1; /* set index*/
        while (TS0NW01.TS0NWIXW <= TS0NW01.TS0NWMXP) /* until end of array*/
          if (TS0NW02.TSFSHPID[TS0NWIXM] == TS0NW01.TSWSHPID[TS0NWIXW])
            TS0NM001.TS0NMSEL[TS0NWIXM] = "S"; /* move s to field*/
            TS0NW01.TS0NWIXW = TS0NW01.TS0NWMXP + 1; /* end loop*/
          else
            TS0NW01.TS0NWIXW = TS0NW01.TS0NWIXW + 1; /* increment index*/
          end
        end

      end

      TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* Increment line index*/
      TS0NW01.TS0NWIX2 = TS0NW01.TS0NWIX2 + 1;
    end
  end


end // end TS0N210

// Read temporary storage page
Function TS0N211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/

   /* ------------------------------------------------------------*/

  TS0NW02.TS0NWLEN = 1391; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0N"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0NW01.TS0NWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0NW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0N211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0NM001.XXXPRCNM = "TS0N211"; /* Process name*/
    TS0NW01.TS0NWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0N211

// Continue supression nested IF
Function TS0N212()
   /* ------------------------------------------------------------*/
               /* CONTINUE SUPRESSION OF NESTED IF*/

   /* 1) This process is used in order to help maintain better*/
      /* readability in TS0k210.  The nested IF for the necessary*/
      /* screen suppression is very large, therefore causing poor*/
      /* indentation of lines.  The indentation is still poor*/
      /* within this process but the size is of TS0G210 is kept*/
      /* at a much more reasonable level.*/

   /* ------------------------------------------------------------*/

  if (TS0NW02.TSACARCD[TS0NWIXM] == TS0NW02.TSACARCD[TS0NWIX2])
    TS0NM001.TSACARCD[TS0NWIXM] = " "; /* move ' ' to carrier*/
    if (TS0NW02.TS5CRAFT[TS0NWIXM] == TS0NW02.TS5CRAFT[TS0NWIX2])
      TS0NM001.TS5CRAFT[TS0NWIXM] = " "; /* move ' ' to craft*/
      TS0NM002.TS5CRAFT[TS0NWIXM] = " "; /* move ' ' to craft*/
      if (TS0NW02.TSFSHPNB[TS0NWIXM] == TS0NW02.TSFSHPNB[TS0NWIX2])
        TS0NM002.TSFSHPNB[TS0NWIXM] = " "; /* move ' ' to shp nbr*/
        if (TS0NW02.TSEDEST[TS0NWIXM] == TS0NW02.TSEDEST[TS0NWIX2])
          TS0NM001.TSEDEST[TS0NWIXM] = " "; /* move ' ' to dest code*/
          if (TS0NW02.XWHCD[TS0NWIXM] == TS0NW02.XWHCD[TS0NWIX2])
            TS0NM002.XWHCD[TS0NWIXM] = " "; /* move ' ' to whse*/
            if (TS0NW02.TSFBOL[TS0NWIXM] == TS0NW02.TSFBOL[TS0NWIX2])
              TS0NM001.TSFBOL[TS0NWIXM] = " "; /* move ' ' to bol*/
              if (TS0NW02.TSHCNTNR[TS0NWIXM] == TS0NW02.TSHCNTNR[TS0NWIX2])
                TS0NM001.TSHCNTNR[TS0NWIXM] = " "; /* move ' ' to cntnr*/
              end
            end
          end
        end
      end
    end
  end
end // end TS0N212

// Check for ? inquiry by user
Function TS0N220()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0NM001.XGPCD == "?" /* if any ? entered*/
   || TS0NM001.TS0NMYSS == "?"
   || TS0NM002.XGPCD == "?" /* if any ? entered*/
   || TS0NM002.TS0NMYSS == "?")



    if (TS0NM001.XGPCD == "?" /* if ? in gpc field*/
     || TS0NM002.XGPCD == "?") /* if ? in gpc field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0NM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        TS0NM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      else
        TS0NM001.XGPCD = " "; /* clear fields*/
        TS0NM002.XGPCD = " "; /* clear fields*/
      end
    end


    if (TS0NM001.TS0NMYSS == "?" /* if ? in ship stat field*/
     || TS0NM002.TS0NMYSS == "?") /* if ? in ship stat field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              SHIPMENT STATUS  ";
                                   /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSS01(); /* perform ship stat window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the ship status**/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0NM001.TS0NMYSS = YSSTBL.YSSCD[XX0XWPIX]; /* move code*/
        TS0NM001.YSSDESC = YSSTBL.YSSDESC[XX0XWPIX]; /* move name*/
        TS0NM002.TS0NMYSS = YSSTBL.YSSCD[XX0XWPIX]; /* move code*/
        TS0NM002.YSSDESC = YSSTBL.YSSDESC[XX0XWPIX]; /* move name*/
      else
        TS0NM001.TS0NMYSS = " "; /* clear fields*/
        TS0NM001.YSSDESC = " ";
        TS0NM002.TS0NMYSS = " "; /* clear fields*/
        TS0NM002.YSSDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/
    converseLib.clearScreen();
     /* restore the original map*/

    TS0NW01.TS0NWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0N220

// Format and display    TS0NM002
Function TS0N250()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0NW01.TS0NWPSW == "N") /* No errors found*/

    set TS0NM002 initial; /* clear the map*/
    set TS0NM001 initial; /* clear the map*/

    /* Move in right screen heading data*/

    TS0NM002.PC3PONBR = TS0NW01.PC3PONBR;

    /* --------------------- Y2K OUT BEGIN -------------------*/
    /* IF TS0NW01.TS0NW-PO-ID-YY-X EQ '00'*/
     /* OR TS0NW01.TS0NW-PO-ID-YY-X EQ ' 0'*/
     /* OR TS0NW01.TS0NW-PO-ID-YY-X EQ '  ';*/
    /* --------------------- Y2K OUT END ---------------------*/

    /* --------------------- Y2K IN  BEGIN -------------------*/
    if (TS0NW01.TS0NW-PO-ID-YY-X == " 0"
     || TS0NW01.TS0NW-PO-ID-YY-X == "  ")
      /* ------------------- Y2K IN  END ---------------------*/

      TS0NM002.TS0NMPYR = " ";
    else
      TS0NM002.TS0NMPYR = TS0NW01.TS0NW-PO-ID-YY-X;
    end
    TS0NM002.TS0NMPMO = TS0NW01.TS0NW-PO-ID-PM;
    TS0NM002.TS0NMDMO = TS0NW01.TS0NW-PO-ID-DM;
    TS0NM002.FY1FCTYC = TS0NW01.FY1FCTYC;
    TS0NM002.PC4ORTYP = TS0NW01.PC4ORTYP;
    TS0NM002.TS0NMYSS = TS0NW01.TS0NMYSS;
    TS0NM002.XGPCD = TS0NW01.XGPCD;
    TS0NM002.YSSDESC = TS0NW01.YSSDESC;
    TS0NM002.TSNBEGDT = TS0NW01.TS0NWBDT;
    TS0NM002.TSNENDDT = TS0NW01.TS0NWEDT;
    TS0NM002.PC2CUXID = TS0NW01.PC2CUXID;
    TS0NM002.PC2NAME = TS0NW01.PC2NAME;

  end

  if (TS0NW01.TS0NWPSW == " ") /* first time thru and sw not set*/

    TS0NM002.PC4ORTYP = TS0NW01.PC4ORTYP; /* move in po type*/

    if (TS0NW01.TS0NWBDT == " ") /* if beginning date is blank*/
      XX0XS01(); /* call date routine*/
      TS0NW01.TS0NWMYY = XX0XW01.XX0XWYY; /* set date to mmddyy*/
      TS0NW01.TS0NWMMM = XX0XW01.XX0XWMM;
      TS0NW01.TS0NWMDD = XX0XW01.XX0XWDD;
    end

    if (TS0NW01.TS0NWBDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0NM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = -9; /* add -9 days from todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0NM002.TSNBEGDT = TA2REC.TA2GRGA; /* move beg date*/
        TS0NM001.TSNBEGDT = TA2REC.TA2GRGA; /* move beg date*/
        TS0NW01.TS0NWBDT = TA2REC.TA2GRGA;
      end
    end

    if (TS0NW01.TS0NWEDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0NM002.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = 22; /* add 22 days to todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0NM002.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0NM001.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0NW01.TS0NWEDT = TA2REC.TA2GRGA;
      end
    end

  end

  if (TS0NW01.TS0NWPSW == "N") /* No errors found*/

    TS0N260(); /* Format the data on the page*/

    if (TS0NM002.TSFDESTE[1] != " ") /* if detail does exist*/
      set TS0NM002.TS0NMSEL[1] cursor; /* set cursor*/
    end

  end

  TS0NM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set TS0NM002 alarm; /* Indicate sound alarm*/
  end

  converse TS0NM002 ;

  TS0NW01.TS0NWPSW = "N"; /* reset problem switch*/
  TS0NW01.TS0NW-MAP1-INVALID-DATA = "N"; /* reset problem switch*/
  TS0NW01.TS0NW-MAP2-INVALID-DATA = "N"; /* reset problem switch*/

  TS0N220(); /* Check for ? inquiry by the user*/

   /* Move right screen heading data into left screen heading*/

  TS0NM001.PC3PONBR = TS0NM002.PC3PONBR;
  TS0NM001.TS0NMPYR = TS0NM002.TS0NMPYR;
  TS0NM001.TS0NMPMO = TS0NM002.TS0NMPMO;
  TS0NM001.TS0NMDMO = TS0NM002.TS0NMDMO;
  TS0NM001.FY1FCTYC = TS0NM002.FY1FCTYC;
  TS0NM001.PC4ORTYP = TS0NM002.PC4ORTYP;
  TS0NM001.TS0NMYSS = TS0NM002.TS0NMYSS;
  TS0NM001.XGPCD = TS0NM002.XGPCD;
  TS0NM001.YSSDESC = TS0NM002.YSSDESC;
  TS0NM001.TSNBEGDT = TS0NM002.TSNBEGDT;
  TS0NM001.TSNENDDT = TS0NM002.TSNENDDT;
  TS0NM001.PC2CUXID = TS0NM002.PC2CUXID;
  TS0NM001.PC2NAME = TS0NM002.PC2NAME;

end // end TS0N250

// Format selected data  TS0NM002
Function TS0N260()
   /* ------------------------------------------------------------*/

               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating fields on map.*/

   /* ------------------------------------------------------------*/

  if (TS0NW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TS0N211(); /* Obtain temporary storage page*/

    set TS0NM002.TS0NMPGL skip; /* Display "PAGE" literal*/
    set TS0NM002.TS0NMOFL skip; /* Display "OF" literal*/

    TS0NM002.TS0NWTSP = TS0NW01.TS0NWTSP; /* Current page number*/
    TS0NM002.TA5TSQIX = TS0NW01.TA5TSQIX; /* Highest page number*/

    TS0NW01.TS0NWIXM = 1; /* Initialize line indexes*/
    TS0NW01.TS0NWIX2 = 0;

      /* move in first line of screen data*/

    TS0NW01.TS0NWWDT = TS0NW02.TSFDESTE[TS0NWIXM];
                                   /* make date mmddyy*/
    TS0NW01.TS0NWMMM = TS0NW01.TS0NWWMM; /* month*/
    TS0NW01.TS0NWMDD = TS0NW01.TS0NWWDD; /* day*/
    TS0NW01.TS0NWMYY = TS0NW01.TS0NWWYY; /* year*/
    TS0NM002.TSFDESTE[TS0NWIXM] = TS0NW01.TS0NWMDT;

    TS0NM002.TS5CRAFT[TS0NWIXM] = TS0NW02.TS5CRAFT[TS0NWIXM];
    TS0NM002.TSFSHPNB[TS0NWIXM] = TS0NW02.TSFSHPNB[TS0NWIXM];
    TS0NM002.XWHCD[TS0NWIXM] = TS0NW02.XWHCD[TS0NWIXM];
    TS0NM002.TS0NMCXR[TS0NWIXM] = TS0NW02.PC2CUXID[TS0NWIXM];
    TS0NM002.TS0NMPON[TS0NWIXM] = TS0NW02.PC3PONBR[TS0NWIXM];
    if (TS0NW02.OP1NORID[TS0NWIXM] > 0)
      TS0NW01.TS0NWSOI = TS0NW02.OP1NORID[TS0NWIXM] / 1000;
      TS0NW01.TS0NWSOI = TS0NW01.TS0NWSOI + TS0NW02.OP1CUOID[TS0NWIXM];
      TS0NM002.TS0NMSOI[TS0NWIXM] = TS0NW01.TS0NWSOI;
    else
      TS0NM002.TS0NMSOI[TS0NWIXM] = 0;
    end
    TS0NM002.TS0NMORT[TS0NWIXM] = TS0NW01.PC4ORTYP;
    TS0NM002.SY1STNBR[TS0NWIXM] = TS0NW02.SY1STNBR[TS0NWIXM];
    TS0NM002.SY2CLRID[TS0NWIXM] = TS0NW02.SY2CLRID[TS0NWIXM];
    TS0NM002.TSISHPQT[TS0NWIXM] = TS0NW02.TSISHPQT[TS0NWIXM];
    TS0NW01.TS0NWIYR = TS0NW01.TS0NW-PO-ID-YY-X;
    TS0NW01.TS0NWIPM = TS0NW01.TS0NW-PO-ID-PM;
    TS0NW01.TS0NWIDM = TS0NW01.TS0NW-PO-ID-DM;
    TS0NW01.TS0NWFAC = TS0NW01.FY1FCTYC;
    TS0NM002.TS0NMPOI[TS0NWIXM] = TS0NW01.TS0NWPDT;
    if (TS0NW02.TSIDETFL[TS0NWIXM] == "Y")
      TS0NM002.TSIDETFL[TS0NWIXM] = "*";
    else
      TS0NM002.TSIDETFL[TS0NWIXM] = " ";
    end

    set TS0NM002.TS0NMSEL[TS0NWIXM] normal; /* display the selection*/

    TS0NW01.TS0NWIXW = 1; /* set index*/
    while (TS0NW01.TS0NWIXW <= TS0NW01.TS0NWMXP) /* until end of array*/
      if (TS0NW02.TSFSHPID[TS0NWIXM] == TS0NW01.TSWSHPID[TS0NWIXW])
        TS0NM002.TS0NMSEL[TS0NWIXM] = "S"; /* move s to field*/
        TS0NW01.TS0NWIXW = TS0NW01.TS0NWMXP + 1; /* end loop*/
      else
        TS0NW01.TS0NWIXW = TS0NW01.TS0NWIXW + 1; /* increment index*/
      end
    end

    TS0NW01.TS0NWIXW = 1; /* set index*/
    TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* Increment line indexes*/
    TS0NW01.TS0NWIX2 = TS0NW01.TS0NWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0N212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0N210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0NW01.TS0NWIXM <= 12 /* Until end of lines*/
     && TS0NW02.TSACARCD[TS0NWIXM] != " ") /* and lines exist*/

      TS0NW01.TS0NWWDT = TS0NW02.TSFDESTE[TS0NWIXM];
      TS0NW01.TS0NWMMM = TS0NW01.TS0NWWMM;
      TS0NW01.TS0NWMDD = TS0NW01.TS0NWWDD;
      TS0NW01.TS0NWMYY = TS0NW01.TS0NWWYY;
      TS0NM002.TSFDESTE[TS0NWIXM] = TS0NW01.TS0NWMDT;

      TS0NM002.TS5CRAFT[TS0NWIXM] = TS0NW02.TS5CRAFT[TS0NWIXM];
      TS0NM002.TSFSHPNB[TS0NWIXM] = TS0NW02.TSFSHPNB[TS0NWIXM];
      TS0NM002.XWHCD[TS0NWIXM] = TS0NW02.XWHCD[TS0NWIXM];
      TS0NM002.TS0NMCXR[TS0NWIXM] = TS0NW02.PC2CUXID[TS0NWIXM];
      TS0NM002.SY1STNBR[TS0NWIXM] = TS0NW02.SY1STNBR[TS0NWIXM];
      TS0NM002.SY2CLRID[TS0NWIXM] = TS0NW02.SY2CLRID[TS0NWIXM];
      TS0NM002.TS0NMPON[TS0NWIXM] = TS0NW02.PC3PONBR[TS0NWIXM];
      if (TS0NW02.OP1NORID[TS0NWIXM] > 0)
        TS0NW01.TS0NWSOI = TS0NW02.OP1NORID[TS0NWIXM] / 1000;
        TS0NW01.TS0NWSOI = TS0NW01.TS0NWSOI + TS0NW02.OP1CUOID[TS0NWIXM];
        TS0NM002.TS0NMSOI[TS0NWIXM] = TS0NW01.TS0NWSOI;
      else
        TS0NM002.TS0NMSOI[TS0NWIXM] = 0;
      end
      TS0NM002.TS0NMORT[TS0NWIXM] = TS0NW01.PC4ORTYP;
      TS0NM002.TSISHPQT[TS0NWIXM] = TS0NW02.TSISHPQT[TS0NWIXM];
      TS0NW01.TS0NWIYR = TS0NW01.TS0NW-PO-ID-YY-X;
      TS0NW01.TS0NWIPM = TS0NW01.TS0NW-PO-ID-PM;
      TS0NW01.TS0NWIDM = TS0NW01.TS0NW-PO-ID-DM;
      TS0NW01.TS0NWFAC = TS0NW01.FY1FCTYC;
      TS0NM002.TS0NMPOI[TS0NWIXM] = TS0NW01.TS0NWPDT;
      if (TS0NW02.TSIDETFL[TS0NWIXM] == "Y")
        TS0NM002.TSIDETFL[TS0NWIXM] = "*";
      else
        TS0NM002.TSIDETFL[TS0NWIXM] = " ";
      end

      if (TS0NW02.TSFSHPID[TS0NWIXM] == TS0NW02.TSFSHPID[TS0NWIX2])
         /* continue on*/
        if (TS0NW02.TSFDESTE[TS0NWIXM] == TS0NW02.TSFDESTE[TS0NWIX2])
          TS0NM002.TSFDESTE[TS0NWIXM] = " "; /* move ' ' to dprt*/
          TS0N212(); /* continue repeating supression*/
        end
      end

      if (TS0NM002.TSFDESTE[TS0NWIXM] != " ") /* if eta exists*/
        set TS0NM002.TS0NMSEL[TS0NWIXM] normal; /* display the selection*/

        TS0NW01.TS0NWIXW = 1; /* set index*/
        while (TS0NW01.TS0NWIXW <= TS0NW01.TS0NWMXP) /* until end of array*/
          if (TS0NW02.TSFSHPID[TS0NWIXM] == TS0NW01.TSWSHPID[TS0NWIXW])
            TS0NM002.TS0NMSEL[TS0NWIXM] = "S"; /* move s to field*/
            TS0NW01.TS0NWIXW = TS0NW01.TS0NWMXP + 1; /* end loop*/
          else
            TS0NW01.TS0NWIXW = TS0NW01.TS0NWIXW + 1; /* increment index*/
          end
        end

      end

      TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* Increment line index*/
      TS0NW01.TS0NWIX2 = TS0NW01.TS0NWIX2 + 1;
    end
  end


end // end TS0N260

// Check attention identifier
Function TS0N300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 5) If PF16 pressed, exit to published schedule application.*/
   /* 6) If PF17 pressed, exit to projected schedule application.*/
   /* 7) If any AI pressed other than ENTER, PF7, or PF8*/
      /* indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    TS0NW01.TS0NWPSW = "N"; /* Reset problem switch*/
    TS0NW01.TS0NWSWR = "N"; /* set request for data to no*/
    TS0NM001.XXXPRCNM = "TS0N300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0NM001.CATOAP > " " /* FAST PATH was requested from map 1*/
   || TS0NM002.CATOAP > " ") /* FAST PATH was requested from map 2*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      if (TS0NW01.TS0NWSWM == "1") /* If already map 1*/
        COMMAREA.CATOAP = TS0NM001.CATOAP; /* TO application*/
        COMMAREA.CAITEM = TS0NM001.CAITEM; /* Application data*/
      else
        if (TS0NW01.TS0NWSWM == "2") /* If already map 2*/
          COMMAREA.CATOAP = TS0NM002.CATOAP; /* TO application*/
          COMMAREA.CAITEM = TS0NM002.CAITEM; /* Application data*/
        end
      end
      COMMAREA.CAUSERA = " "; /* clear user area*/
      TS0N110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
      if (TS0NW01.PC3PONBR != 0 /* If keys exist*/
       && TS0NW01.TS0NWBDT != " "
       && TS0NW01.TS0NWEDT != " ")
        TS0NW01.TS0NWSWR = "Y"; /* set request for data to yes*/
      end
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
    end
    if (TS0NW01.TS0NWSWM == "1") /* If already map 1*/
      set TS0NM001.CATOAP cursor, modified, bold; /* Highlight*/
      TS0NM001.XXXPRCNM = "TS0N300"; /* Process name*/
    else
      if (TS0NW01.TS0NWSWM == "2") /* If already map 2*/
        set TS0NM002.CATOAP cursor, modified, bold; /* Highlight*/
        TS0NM002.XXXPRCNM = "TS0N300"; /* Process name*/
      end
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS0N110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0NM001.XXXPRCNM = "TS0N300"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0N300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0NM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS0N110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0NM001.XXXPRCNM = "TS0N300"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0N300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf10) /* Right screen requested*/
    if (TS0NW01.TS0NWSWM == "1") /* If already map 1*/
      TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
      TS0NM001.XXXPRCNM = "TS0N300";
      converseLib.validationFailed(4);
      exit stack;
    else
      TS0NW01.TS0NWSWM = "1"; /* Indicate map 1*/
    end
  end

  if (converseVar.eventKey is pf11) /* Left screen requested*/
    if (TS0NW01.TS0NWSWM == "2") /* If already map 2*/
      TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
      TS0NM002.XXXPRCNM = "TS0N300";
      converseLib.validationFailed(4);
      exit stack;
    else
      TS0NW01.TS0NWSWM = "2"; /* Indicate map 2*/
    end
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not scroll request*/
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf10  
   && converseVar.eventKey not pf11  
   && converseVar.eventKey not pf12)
    TS0NM001.XXXPRCNM = "TS0N300"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0N300"; /* Process name*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0N300

// Reset highlighted fields
Function TS0N400()
   /* ------------------------------------------------------------*/
                /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0NM001.PC3PONBR initialAttributes; /* Reset all fields*/
  set TS0NM001.TS0NMPYR initialAttributes;
  set TS0NM001.TS0NMPMO initialAttributes;
  set TS0NM001.TS0NMDMO initialAttributes;
  set TS0NM001.FY1FCTYC initialAttributes;
  set TS0NM001.PC4ORTYP initialAttributes;
  set TS0NM001.PC2CUXID initialAttributes;
  set TS0NM001.TS0NMYSS initialAttributes;
  set TS0NM001.XGPCD initialAttributes;
  set TS0NM001.TSNBEGDT initialAttributes;
  set TS0NM001.TSNENDDT initialAttributes;

  set TS0NM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0NM001.CAITEM initialAttributes; /* Commarea application data*/

  set TS0NM002.PC3PONBR initialAttributes; /* Reset all fields*/
  set TS0NM002.TS0NMPYR initialAttributes;
  set TS0NM002.TS0NMPMO initialAttributes;
  set TS0NM002.TS0NMDMO initialAttributes;
  set TS0NM002.FY1FCTYC initialAttributes;
  set TS0NM002.PC4ORTYP initialAttributes;
  set TS0NM002.PC2CUXID initialAttributes;
  set TS0NM002.TS0NMYSS initialAttributes;
  set TS0NM002.XGPCD initialAttributes;
  set TS0NM002.TSNBEGDT initialAttributes;
  set TS0NM002.TSNENDDT initialAttributes;

  set TS0NM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0NM002.CAITEM initialAttributes; /* Commarea application data*/

  TS0NW01.TS0NWIXM = 1; /* Initialize line index*/
  while (TS0NW01.TS0NWIXM <= 12) /* Until end of lines*/
    if (TS0NM001.TSFDESTE[TS0NWIXM] != " ") /* if line exists*/
      set TS0NM001.TS0NMSEL[TS0NWIXM] normal; /* Reset select flag*/
    end
    if (TS0NM002.TSFDESTE[TS0NWIXM] != " ") /* if line exists*/
      set TS0NM002.TS0NMSEL[TS0NWIXM] normal; /* Reset select flag*/
    end
    TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* Increment line index*/
  end


end // end TS0N400

// Process valid input request
Function TS0N600()
   /* ------------------------------------------------------------*/
                /* PROCESS VALID INPUT REQUESTS*/

   /* 1) Record map shipment number selections.*/
   /* 2) If a scroll request, adjust temp storage page number.*/
   /* 3) If enter is pressed and no errors set request for data*/
      /* to yes.*/

   /* ------------------------------------------------------------*/

  if (TS0NW01.TS0NWPSW == "N") /* no errors*/

    /* ------------------------------------------------------------*/
                  /* Process Screen Selections*/

       /* 1) check to see if any selections have been made*/
       /* 2) if a selection has been made, then check to see*/
          /* if this shipment id has already been recorded in*/
          /* the shipment id array.*/
       /* 3) if the selction has not been recorded yet or has*/
          /* been deleted from the screen, then update the*/
          /* shipment id array with current values.*/

    /* ------------------------------------------------------------*/

    TS0NW01.TS0NWIXM = 1; /* initialize index*/
    while (TS0NW01.TS0NWIXM <= 12) /* until end of detail*/
      if (TS0NM001.TSFDESTE[TS0NWIXM] != " " /* for each sel field*/
       || TS0NM002.TSFDESTE[TS0NWIXM] != " ") /* for each sel field*/
        if (TS0NM001.TS0NMSEL[TS0NWIXM] == "S" /* if selection made*/
         || TS0NM002.TS0NMSEL[TS0NWIXM] == "S") /* if selection made*/
          TS0NW01.TS0NWSFL = "N"; /* set selection flag*/
          TS0NW01.TS0NWIX2 = 1; /* set index*/
          while (TS0NW01.TS0NWIX2 <= TS0NW01.TS0NWMXP) /* until end of array*/
            if (TS0NW02.TSFSHPID[TS0NWIXM] == TS0NW01.TSWSHPID[TS0NWIX2])
              TS0NW01.TS0NWSFL = "Y"; /* set selection flag*/
              TS0NW01.TS0NWIX2 = TS0NW01.TS0NWMXP + 1; /* end loop*/
            else
              TS0NW01.TS0NWIX2 = TS0NW01.TS0NWIX2 + 1; /* increment index*/
            end
          end
          if (TS0NW01.TS0NWSFL == "N") /* if shpid does not exist*/
            TS0NW01.TS0NWIX2 = 1; /* set index*/
            while (TS0NW01.TS0NWIX2 <= TS0NW01.TS0NWMXP) /* until end array*/
              if (TS0NW01.TSWSHPID[TS0NWIX2] == 0) /* if field is open*/
                TS0NW01.TSWSHPID[TS0NWIX2] = TS0NW02.TSFSHPID[TS0NWIXM];
                TS0NW01.TSWBOL[TS0NWIX2] = TS0NW02.TSFBOL[TS0NWIXM];
                TS0NW01.TSWCARCD[TS0NWIX2] = TS0NW02.TSACARCD[TS0NWIXM];
                TS0NW01.TSWCRAFT[TS0NWIX2] = TS0NW02.TS5CRAFT[TS0NWIXM];
                TS0NW01.TSWSHPNB[TS0NWIX2] = TS0NW02.TSFSHPNB[TS0NWIXM];
                TS0NW01.TSWORIG[TS0NWIX2] = TS0NW02.TSEORIG[TS0NWIXM];
                TS0NW01.TSWDEST[TS0NWIX2] = TS0NW02.TSEDEST[TS0NWIXM];
                TS0NW01.TSWXWHCD[TS0NWIX2] = TS0NW02.XWHCD[TS0NWIXM];
                TS0NW01.TS0NWIX2 = TS0NW01.TS0NWMXP + 1; /* end loop*/
              else
                TS0NW01.TS0NWIX2 = TS0NW01.TS0NWIX2 + 1; /* increment index*/
              end
            end
          end
        else
          TS0NW01.TS0NWIX2 = 1; /* set index*/
          while (TS0NW01.TS0NWIX2 <= TS0NW01.TS0NWMXP) /* until end of array*/
            if (TS0NW01.TSWSHPID[TS0NWIX2] == TS0NW02.TSFSHPID[TS0NWIXM]
             && TS0NW02.SY2CLRID[TS0NWIX2] == TS0NW02.SY2CLRID[TS0NWIXM]
             && TS0NW02.TSISHPQT[TS0NWIX2] == TS0NW02.TSISHPQT[TS0NWIXM])
              TS0NW01.TSWSHPID[TS0NWIX2] = 0;
              TS0NW01.TSWBOL[TS0NWIX2] = " ";
              TS0NW01.TSWCARCD[TS0NWIX2] = " ";
              TS0NW01.TSWCRAFT[TS0NWIX2] = " ";
              TS0NW01.TSWSHPNB[TS0NWIX2] = " ";
              TS0NW01.TSWORIG[TS0NWIX2] = " ";
              TS0NW01.TSWDEST[TS0NWIX2] = " ";
              TS0NW01.TSWXWHCD[TS0NWIX2] = " ";
            end
            TS0NW01.TS0NWIX2 = TS0NW01.TS0NWIX2 + 1; /* increment index*/
          end
        end
      end
      TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* increment index*/
    end

    if (converseVar.eventKey is pf7) /* Scroll back requested*/
      TS0NW01.TS0NWTSP = TS0NW01.TS0NWTSP - 1; /* Decrement page number*/
    else
      if (converseVar.eventKey is pf8) /* Scroll forward requested*/
        TS0NW01.TS0NWTSP = TS0NW01.TS0NWTSP + 1; /* Increment page number*/
      else
        if (converseVar.eventKey is pf12) /* Scroll forward requested*/

          /* ------------------------------------------------------------*/
             /* transfer to ts0j, shipment maintenance*/
          /* ------------------------------------------------------------*/

          TS0NW01.TS0NWIXM = 1; /* set index*/
          TS0NW01.TS0NWIXW = 1;
          while (TS0NW01.TS0NWIXM <= TS0NW01.TS0NWMXP) /* while le max*/
            if (TS0NW01.TSWSHPID[TS0NWIXM] > 0) /* if data exists*/
              TSWREC.TSWARR1[TS0NWIXW] = TS0NW01.TSWARR1[TS0NWIXM];
              TSWREC.TSWINQFL = "Y"; /* indicate inquiry exist*/
              TS0NW01.TS0NWIXW = TS0NW01.TS0NWIXW + 1; /* incr index*/
            end
            TS0NW01.TS0NWIXM = TS0NW01.TS0NWIXM + 1; /* incr index*/
          end

          if (TSWREC.TSWINQFL == " ") /* no ship id's found in array*/
            TS0NW01.TS0NWPSW = "Y"; /* indicate error*/
            converseLib.validationFailed(153); /* error message*/
            TS0NM001.XXXPRCNM = "TS0N600"; /* process name*/
          else
            TSWREC.TSWSHPOS = 1; /* set ship id index position*/
            COMMAREA.CATOAP = "TS0J"; /* to application*/
            COMMAREA.CAFROMAP = "TS0N"; /* from application*/
            TSWREC.TSWFRAPP = "TS0N"; /* from application*/
            COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/
            COMMAREA.CAITEM = " "; /* application data*/
            TS0N110(); /* purge any temp storage*/
            XSTSS01(); /* exit to another application*/
            TS0NW01.TS0NWSWR = "Y"; /* set request for data to yes*/
          end

        else
          if (converseVar.eventKey is enter /* if enter is pressed*/
           && TS0NW01.TS0NWPSW == "N")      /* and no errors*/
             /* continue*/
          end
        end
      end
    end
  end


end // end TS0N600

// Select (S )     DFCTY.DFCTY001
Function TS0NS05()
   /* ------------------------------------------------------------*/

         /* SELECT THE FACTORY ROW FROM DFCTY.DFCTY001*/

   /* ------------------------------------------------------------*/


  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0NS05"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
    TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0NM001.XXXPRCNM = "TS0NS05"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0NS05"; /* Process name*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/

  end
end // end TS0NS05

// Select (S/S2)  DPRODC.VPOHDR01
Function TS0NS06()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/

      if (TS0NM001.PC3PONBR > 0 /* If po number entered*/
       && SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/
         /* continue on*/
      else
        return; /* Return to previous process*/
      end

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0NS06"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0NM001.XXXPRCNM = "TS0NS06"; /* Process name*/
  TS0NM002.XXXPRCNM = "TS0NS06"; /* Process name*/
  TS0NW01.TS0NWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0NS06

// Select (S )    DPRODC.VPOTYP01
Function TS0NS07()
   /* ------------------------------------------------------------*/

         /* SELECT THE PO TYPE ROW FROM DPRODC.VPOTYP01*/

   /* ------------------------------------------------------------*/

  call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0NS07"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE PO TYPE TABLE ROW";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0NM001.XXXPRCNM = "TS0NS07"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0NS07"; /* Process name*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0NS07

// Select (S1)    DPRODC.VPOVFY01
Function TS0NS08()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VPOVFY01*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set PCFREC empty;
  PCFREC.PCFSECD = TS0NW01.TS0NW-PO-ID-YY-X;
  if (TS0NM001.XGPCD == "03")
    PCFREC.PCFBUYMO = TS0NW01.TS0NW-PO-ID-PM;
  else
    PCFREC.PCFBUYMO = TS0NW01.TS0NW-PO-ID-DM;
  end
  PCFREC.XXXSTAT = "*";

  call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0NS08"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0NM001.XXXPRCNM = "TS0NS08"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0NS08"; /* Process name*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0NS08

// Fetch  (N1)    DPRODC.VPOVFY01
Function TS0NS09()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOVFY01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok or*/
   || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0NS09"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0NM001.XXXPRCNM = "TS0NS09"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0NS09"; /* Process name*/

  end


end // end TS0NS09

// Close  (C1)    DPRODC.VPOVFY01
Function TS0NS10()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VPOVFY01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0NS10"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0NM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0NM001.XXXPRCNM = "TS0NS10"; /* Process name*/
    TS0NM002.XXXPRCNM = "TS0NS10"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0NW01.TS0NWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0NS10

//*** RECORD=TS0NW01 ****
// Working storage for TS0G - Schedule Inquiry
// ***********************
Record TS0NW01 type basicRecord
  10 TS0NWIXM TS0NWIXM ; 
  10 TS0NWIXW TS0NWIXW ; 
  10 TS0NWIX2 TS0NWIX2 ; 
  10 TS0NWIX3 TS0NWIX3 ; 
  10 TS0NWMXP TS0NWMXP ; 
  10 TS0NWSW1 TS0NWSW1 ; 
  10 TS0NWSW2 TS0NWSW2 ; 
  10 TS0NWSW3 TS0NWSW3 ; 
  10 TS0NWSWM TS0NWSWM ; 
  10 TS0NWSWR TS0NWSWR ; 
  10 TS0NWPSW TS0NWPSW ; 
  10 TS0NW-NO-DATA-MAP-1 TS0NW-NO-DATA-MAP-1 ; 
  10 TS0NW-NO-DATA-MAP-2 TS0NW-NO-DATA-MAP-2 ; 
  10 TS0NW-MAP1-INVALID-DATA TS0NW-MAP1-INVALID-DATA ; 
  10 TS0NW-MAP2-INVALID-DATA TS0NW-MAP2-INVALID-DATA ; 
  10 TS0NWIDS TS0NWIDS ; 
  10 TS0NWSFL TS0NWSFL ; 
  10 PC3PONBR PC3PONBR ; 
  10 TS0NMYSS TS0NMYSS ; 
  10 XGPCD XGPCD ; 
  10 YSSDESC YSSDESC ; 
  10 TS0NWCYR TS0NWCYR ; 
    15 TS0NWCCC TS0NWCCC ; 
    15 TS0NWCYY TS0NWCYY ; 
  10 TS0NW-PO-ID-YY-X TS0NW-PO-ID-YY-X ; 
    15 TS0NW-PO-ID-YY1-X TS0NW-PO-ID-YY1-X ; 
    15 TS0NW-PO-ID-YY2-X TS0NW-PO-ID-YY2-X ; 
  10 TS0NW-TEMP-YY-X TS0NW-TEMP-YY-X ; 
    15 TS0NW-TEMP-YY TS0NW-TEMP-YY ; 
  10 TS0NW-PO-ID-DT TS0NW-PO-ID-DT ; 
    15 TS0NW-PO-ID-CC TS0NW-PO-ID-CC ; 
    15 TS0NW-PO-ID-YY TS0NW-PO-ID-YY ; 
      20 TS0NW-PO-ID-YY1 TS0NW-PO-ID-YY1 ; 
      20 TS0NW-PO-ID-YY2 TS0NW-PO-ID-YY2 ; 
    15 TS0NW-PO-ID-PM TS0NW-PO-ID-PM ; 
      20 TS0NW-PO-ID-PM1 TS0NW-PO-ID-PM1 ; 
      20 TS0NW-PO-ID-PM2 TS0NW-PO-ID-PM2 ; 
    15 TS0NW-PO-ID-DM TS0NW-PO-ID-DM ; 
      20 TS0NW-PO-ID-DM1 TS0NW-PO-ID-DM1 ; 
      20 TS0NW-PO-ID-DM2 TS0NW-PO-ID-DM2 ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 TSNBEGDT TSNBEGDT ; 
  10 TS0NWBDT TS0NWBDT ; 
  10 TSNENDDT TSNENDDT ; 
  10 TS0NWEDT TS0NWEDT ; 
  10 TSWARR1 TSWARR1 [10] ; 
    15 TSWSHPID TSWSHPID ; 
    15 TSWBOL TSWBOL ; 
    15 TSWCARCD TSWCARCD ; 
    15 TSWCRAFT TSWCRAFT ; 
    15 TSWSHPNB TSWSHPNB ; 
    15 TSWORIG TSWORIG ; 
    15 TSWDEST TSWDEST ; 
    15 TSWXWHCD TSWXWHCD ; 
  10 TS0NWDAT TS0NWDAT ; 
    15 TS0NWPCN TS0NWPCN ; 
    15 TS0NWPYY TS0NWPYY ; 
    15 TS0NWPM1 TS0NWPM1 ; 
    15 TS0NWPM2 TS0NWPM2 ; 
  10 TS0NWWDT TS0NWWDT ; 
    15 TS0NWWCC TS0NWWCC ; 
    15 TS0NWWYY TS0NWWYY ; 
    15 TS0NWWMM TS0NWWMM ; 
    15 TS0NWWDD TS0NWWDD ; 
  10 TS0NWMDT TS0NWMDT ; 
    15 TS0NWMMM TS0NWMMM ; 
    15 TS0NWMDD TS0NWMDD ; 
    15 TS0NWMYY TS0NWMYY ; 
  10 TS0NWTSP TS0NWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TS0NWCU5 TS0NWCU5 ; 
    15 TS0NWCU1 TS0NWCU1 [5] ; 
  10 PC2CUXID PC2CUXID ; 
  10 PC2NAME PC2NAME ; 
  10 TS0NWPDT TS0NWPDT ; 
    15 TS0NWIYR TS0NWIYR ; 
    15 TS0NWIPM TS0NWIPM ; 
    15 TS0NWIDM TS0NWIDM ; 
    15 TS0NWFAC TS0NWFAC ; 
  10 TS0NWORI TS0NWORI ; 
    15 TS0NWOR1 TS0NWOR1 ; 
    15 TS0NWOR2 TS0NWOR2 ; 
      20 TS0NWOR3 TS0NWOR3 ; 
      20 TS0NWOR4 TS0NWOR4 ; 
  10 TS0NWSOI TS0NWSOI ; 
end // end TS0NW01

//*** RECORD=TS0NW02 ****
// Temporary storage record for TS0G - Schedule Inquiry
// ***********************
Record TS0NW02 type basicRecord
  10 TS0NWLEN TS0NWLEN ; 
  10 TS0NWLIN TS0NWLIN [13] ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSFDESTE TSFDESTE ; 
    15 TSEORIG TSEORIG ; 
    15 TSEDEST TSEDEST ; 
    15 XWHCD XWHCD ; 
    15 TSACARCD TSACARCD ; 
    15 TS5CRAFT TS5CRAFT ; 
    15 TSFSHPNB TSFSHPNB ; 
    15 YSSCD YSSCD ; 
    15 TSFBOL TSFBOL ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 PC2CUXID PC2CUXID ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 TSISHPQT TSISHPQT ; 
    15 TSIDETFL TSIDETFL ; 
    15 TS0NWPOI TS0NWPOI ; 
    15 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
end // end TS0NW02

//*** RECORD=TS0NW03 ****
// Temporary storage record for TS0N - Purchase Order Inquiry
// ***********************
Record TS0NW03 type basicRecord
  10 TS0NWLE3 TS0NWLE3 ; 
  10 TS0NWLI3 TS0NWLI3 [1000] ; 
    15 TS0NMFAC TS0NMFAC ; 
    15 TS0NWPON TS0NWPON ; 
end // end TS0NW03

// fy1fctyc
DataItem TS0NMFAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Status code
DataItem TS0NMYSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 1
DataItem TS0NW-MAP1-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 2
DataItem TS0NW-MAP2-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 1 to display
DataItem TS0NW-NO-DATA-MAP-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 2 to display
DataItem TS0NW-NO-DATA-MAP-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem TS0NW-PO-ID-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0NW-PO-ID-DM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NW-PO-ID-DM1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0NW-PO-ID-DM2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_ID_DT for map
DataItem TS0NW-PO-ID-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// buy month
DataItem TS0NW-PO-ID-PM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NW-PO-ID-PM1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0NW-PO-ID-PM2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem TS0NW-PO-ID-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0NW-PO-ID-YY-X char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year char 1
DataItem TS0NW-PO-ID-YY1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year char 1
DataItem TS0NW-PO-ID-YY1-X char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year char 2
DataItem TS0NW-PO-ID-YY2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year char 2
DataItem TS0NW-PO-ID-YY2-X char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NW-TEMP-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0NW-TEMP-YY-X char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map begin parm date
DataItem TS0NWBDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem TS0NWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// single customer xref chara
DataItem TS0NWCU1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PRDCU_ID split
DataItem TS0NWCU5 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century/year
DataItem TS0NWCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0NWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem TS0NWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map end parm date
DataItem TS0NWEDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWFAC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWIDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. id correct switch
DataItem TS0NWIDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWIPM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields 2
DataItem TS0NWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields 3
DataItem TS0NWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0NWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0NWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWIYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary Storage Length
DataItem TS0NWLE3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage length
DataItem TS0NWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0NWLI3 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Display Line
DataItem TS0NWLIN char(107)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map day
DataItem TS0NWMDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map date mmddyy
DataItem TS0NWMDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map month
DataItem TS0NWMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max pass shipment array lines
DataItem TS0NWMXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working map year
DataItem TS0NWMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWOR1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWOR2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWOR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWOR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWORI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem TS0NWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWPDT char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0NWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0NWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0NWPOI char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem TS0NWPON int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0NWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0NWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem TS0NWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SO number
DataItem TS0NWSOI bin(18,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch1
DataItem TS0NWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem TS0NWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch3
DataItem TS0NWSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage map switch
DataItem TS0NWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0NWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS0NWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working century
DataItem TS0NWWCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working day
DataItem TS0NWWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date ccyymmdd
DataItem TS0NWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working month
DataItem TS0NWWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working year
DataItem TS0NWWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

