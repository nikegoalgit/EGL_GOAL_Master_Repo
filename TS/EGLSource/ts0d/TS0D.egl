package ts0d;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0D ****
// This program allows users to inquire/maintain existing rows
// in the Agent table.  The user will specify what carrier they
// currently want to work on.  The database will return 0 to N
// rows based upon the carrier selected by the user.  This
// program will format the screen with the Agent information
// returned from the data base.
// 
// This program allows adding, changing, and deleting of Agent
// table rows:
// 
//    The user may add new Agents rows by pressing PF13 from
//    the inquiry screen (blank or filled with rows).  This
//    will position them in an add screen.  Agent rows can
//    then be added (if entries pass edit criteria) by pressing
//    ENTER.  The user may continue adding or exit to the
//    inquiry screen.  (If an Agent already exists on an add,
//    a message will appear to that effect: 'this row already
//    exists').
// 
//    A user can select one or more rows for change and hit
//    PF14.  The user will then be positioned in a change
//    screen where they can make their changes to non-key
//    fields and hit ENTER to cycle to the next row selected
//    for change or PF3 to return to the browse screen.
// 
//    A user can select one or more rows for delete and hit
//    PF15.  The user will then be positioned in a delete
//    screen where they will hit enter to confirm delete and
//    cycle to the next row selected for change or PF3 to
//    return to the browse screen.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 01/04/88   cepple   New application.
// 11/07/96   JCARL1   Remove alarm from msg display.
// y2kfix     oricha   Y2K modifications:  xx0xs01 now replaces
//                     ezedte and ezetim for ts0b252, ts0b360
//                     and xpts001 flow.
// *********************
Program TS0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TS0DW01 TS0DW01; // record
  TS0DW02 TS0DW02; // record
  TSAREC TSAREC; // record
  TSBREC TSBREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use TS0DM.TS0DM001,  // forms
      TS0DM.TS0DM002, 
      TS0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0DW01 empty; /* Initialize working storage*/
    set TS0DW02 empty; /* Initialize temporary storage*/
    set TSAREC empty; /* Initialize records used*/
    set TSBREC empty;
    set TSWREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0DM001 initial; /* Initialize map1 output area*/
    set TS0DM002 initial; /* Initialize map2 output area*/

     /* ------------------ y2k out begin -------------------*/
     /* MOVE 19 TO TS0DW01.TS0DWCEN;      /* Initialize working century*/
     /* ------------------ y2k out begin -------------------*/

    TS0DW01.TS0DWMAP = "1"; /* Indicate map to be displayed*/
    TS0DW01.TS0DWMFL = "N"; /* Iitialize message flag*/
    TS0DW01.TS0DWPSW = "N"; /* Iitialize problem switch*/

    if (COMMAREA.CAITEM == " ") /* If commarea item not requested*/
      TS0DW01.TS0DWSWR = "N"; /* Set request for data to no*/
    else
      TS0DW01.TS0DWSWR = "Y"; /* Set request for data to yes*/
      TS0DM001.TSACARCD = COMMAREA.CAITEM; /* Set change save key*/
      TSAREC.TSACARCD = COMMAREA.CAITEM; /* Set record key*/
    end

    goto TS0D001; /* Converse Location Inquiry/Main.*/


    TS0D001: TS0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto TS0D001; /* Converse Location Inquiry/Main.*/


  end // end main
end // end TS0D

// Agent Inquiry/Maintenance
Function TS0D001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWMAP == "1") /* Map 1 was requested*/
    TS0D100(); /* Display map 1*/
  else
    if (TS0DW01.TS0DWMAP == "2" /* Map 2 was requested*/
     && TS0DW01.TS0DWFSW == "A") /* and ADD function*/
      TS0D200(); /* Display Agent Add Map*/
    else
      if (TS0DW01.TS0DWMAP == "2" /* Map 2 was selected*/
       && TS0DW01.TS0DWFSW == "C") /* and CHANGE function*/

        TS0DW01.TS0DWIXM = 1; /* Initialize index*/

        while (TS0DW01.TS0DWIXM <= 14 /* Until end of page*/
         && TS0DW01.TS0DWMAP != "1") /* and not map 1*/
          if (TS0DM001.TS0DMSEL[TS0DWIXM] == "S") /* If line selected*/
            TS0D300(); /* Display Agent Change Map*/
          end
          TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM + 1; /* Increment index*/
        end
        TS0DW01.TS0DWMAP = "1"; /* set map to location inquiry*/
      else
        if (TS0DW01.TS0DWMAP == "2" /* Map 2 was selected*/
         && TS0DW01.TS0DWFSW == "D") /* and DELETE function*/

          TS0DW01.TS0DWCSK = " "; /* Clear delete save key*/
          TS0DW01.TS0DWIXM = 1; /* Initialize index*/

          while (TS0DW01.TS0DWIXM <= 14 /* Until end of page*/
           && TS0DW01.TS0DWMAP != "1") /* and not map 1*/
            if (TS0DM001.TS0DMSEL[TS0DWIXM] == "S") /* If line selected*/
              TS0D400(); /* Display Agent Delete Map*/
            end
            TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM + 1; /* Increment index*/
          end
          TS0DW01.TS0DWMAP = "1"; /* set map to location inquiry*/
        else
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1PGMNM = "TS0D001 "; /* Process name*/
          TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
          TA1REC.TA1MAP = TS0DW01.TS0DWMAP; /* Map name*/
          SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
          XSPF4(); /* Exit to Master Menu*/
        end
      end
    end
  end


end // end TS0D001

// Agent inquiry/main. map
Function TS0D100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWSWR == "Y") /* The request for data is yes*/
    TS0D110(); /* Obtain the data to display*/
  end

  TS0D120(); /* Format and display the map*/

  TS0D130(); /* Check attention identifier*/

  TS0D140(); /* Reset fields to normal intensity*/

  TS0D150(); /* Verify the entered data*/

  TS0D160(); /* Process valid input request*/


end // end TS0D100

// Obtain the data to display
Function TS0D110()
   /* ------------------------------------------------------------*/
   /* If data was requested, select carrier table row.*/
   /* If carrier does not exist, set error message.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* If no data found, display error message and return to*/
      /* previous process.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  TS0D111(); /* Select carrier table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Carrier was not found*/
    converseLib.validationFailed(21); /* No data found to display*/
    TS0DW01.TSACARNM = " "; /* Clear carrier name field*/
    set TS0DM001 initial; /* Clear map output area*/
    TS0DW01.TS0DWPSW = "N"; /* Override problem switch*/
    TS0DW01.TSACARCD = TSAREC.TSACARCD; /* Save code*/
    TS0DM001.TSACARCD = TS0DW01.TSACARCD; /* Move in carr code*/
    TS0DM001.XXXPRCNM = "TS0D110"; /* Process name*/
    TS0D112(); /* Purge any temporary storage*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Carrier was  found*/
      TS0DW01.TSACARCD = TSAREC.TSACARCD; /* Save code*/
      TS0DW01.TSACARNM = TSAREC.TSACARNM; /* Save description*/
      TS0D112(); /* Purge any temporary storage*/

      set TSBREC empty; /* Clear agent record*/
      TSBREC.TSACARCD = TS0DW01.TSACARCD; /* Set agent record search*/

      TS0D113(); /* Select set and open the cursor*/
      if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
        set TS0DW02 empty; /* Clear temporary storage record*/
        set TSBREC empty; /* Clear agent record*/
        TSBREC.TSACARCD = TS0DM001.TSACARCD; /* Set agent*/
        TS0DW01.TS0DWIXM = 1;
                                   /* Initialize display line number*/
        TS0DW01.TS0DWSWC = "N"; /* Initialize end of file switch*/
        TS0DW01.TS0DWPSW = "N"; /* Init problem found switch*/
        while (TS0DW01.TS0DWSWC == "N" /* Until end of set or problem found*/
         && TS0DW01.TS0DWPSW == "N") /* or until a problem was found*/
          TS0D114(); /* Obtain data and format page*/
          if (TS0DW01.TS0DWIXM > 14) /* Page is full*/
            TS0D115(); /* Add page to temporary storage*/
          end
        end
        if (TS0DW01.TS0DWSWC == "Y") /* end of set was found*/
          if (TS0DW01.TS0DWIXM > 1) /* and some of the page was formatted*/
            TS0D115(); /* Add page to temporary storage*/
          end
          TS0DW01.TS0DWTSP = 1; /* Initialize page number*/
          TS0DW01.TS0DWSWR = "N"; /* Request for data completed*/
          TS0D116(); /* Close the selected set cursor*/
        end
      end
    end

    if (TS0DW01.TA5TSQIX == 0) /* No data to display*/
      TS0DM001.XXXPRCNM = "TS0D110"; /* Process name*/
      converseLib.validationFailed(21); /* Indicate no data to display*/
      TS0DW01.TS0DWPSW = "N"; /* Indicate problem*/
    end
  end


end // end TS0D110

// Select agent table row
Function TS0D111()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the Carrier table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0D111"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAGENT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0DW01.TS0DWPSW = "Y"; /* Indicate Problem*/
    TS0DM001.XXXPRCNM = "TS0D111"; /* Process name*/
  end


end // end TS0D111

// Purge any temporary storage
Function TS0D112()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0D"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0D112"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0DW01.TS0DWTSP = 0; /* Reset current page number*/
  TS0DW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0D112

// Select set
Function TS0D113()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  call "IO1460" ("S1", SQLCA, TSBREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0D113"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAGENT01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSBREC.TSBKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0DM001.XXXPRCNM = "TS0D113"; /* Process name*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0D113

// Fetch next row and format
Function TS0D114()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO1460" ("N1", SQLCA, TSBREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0DW01.TS0DWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0D114"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0DM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAGENT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0DM001.XXXPRCNM = "TS0D114"; /* Process name*/

    else
      TS0DW02.TSBAGENT[TS0DWIXM] = TSBREC.TSBAGENT; /* Save data*/
      TS0DW02.TSBTITLE[TS0DWIXM] = TSBREC.TSBTITLE;
      TS0DW02.TSBPHONE[TS0DWIXM] = TSBREC.TSBPHONE;

      TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM + 1; /* Increment line index*/
    end
  end



end // end TS0D114

// Add page to temporary storage
Function TS0D115()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS0DW02.TS0DWLEN = 1064; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0D"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    TS0DW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS0DW01.TS0DWIXM = 1; /* Reset display line number*/
    set TS0DW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0D114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0DM001.XXXPRCNM = "TS0D115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TS0DW01.TS0DWPSW = "Y"; /* indicate problem has been found*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0D115

// Close selected set cursor
Function TS0D116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO1460" ("C1", SQLCA, TSBREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0D116"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAGENT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0DM001.XXXPRCNM = "TS0D115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0D116

// Format and display the map
Function TS0D120()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWPSW == "N") /* No error message to display*/
    set TS0DM001 initial; /* Clear map output area*/
    TS0DM001.TSACARCD = TS0DW01.TSACARCD;
    TS0DM001.TSACARNM = TS0DW01.TSACARNM;
    TS0D121(); /* Format the selected data*/
  end

  /* IF EZEMNO NE 0;                   /* No error message to display*/
  /* SET TS0DM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  if (TS0DM001.TSBAGENT[1] == " ") /* If no data on page*/
    set TS0DM001.TSACARCD cursor; /* set cursor to top field*/
  end

  if (TS0DW01.TS0DWMFL == "Y") /* If message flag is yes*/
    converseLib.validationFailed(44); /* Indicate update was successful*/
    TS0DM001.XXXPRCNM = "TS0D120"; /* Process name*/
    TS0DW01.TS0DWMFL = "N"; /* Reset message flag*/
  end

  TS0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0DM001 ;

  TS0DW01.TS0DWPSW = "N"; /* Reset problem switch*/

end // end TS0D120

// Format the selected data
Function TS0D121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan location data in the map.*/
   /* ------------------------------------------------------------*/

  TS0DW01.TS0DWDFL = "N"; /* Initialize delete flag*/

  if (TS0DW01.TS0DWCSK != " ") /* If change save key set*/
    TS0DW01.TS0DWTSP = 1; /* Initialize search page*/
  end

  if (COMMAREA.CAADDFL == "Y") /* If user can perform add*/
    set TS0DM001.TS0DMADD skip; /* Display add PF Key*/
  end

  if (COMMAREA.CACHGFL == "Y") /* If user can perform delete*/
    set TS0DM001.TS0DMCHG skip; /* Display change PF Key*/
  end

  if (COMMAREA.CADELFL == "Y") /* If user can perform delete*/
    set TS0DM001.TS0DMDEL skip; /* Display change PF Key*/
  end

  if (TS0DW01.TA5TSQIX == 0) /* if no data to display*/

    /* Do not format page*/

  else

    while (TS0DW01.TS0DWDFL == "N") /* While delete save key not found*/
      TS0D122(); /* Obtain temporary storage page*/
      TS0D123(); /* locate page with key*/
    end

    if (TS0DW01.TS0DWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      TS0D122(); /* Obtain temporary storage page*/
    end

    set TS0DM001.TS0DMPGL skip; /* Display "PAGE" literal*/
    set TS0DM001.TS0DMOFL skip; /* Display "OF" literal*/

    TS0DM001.TS0DWTSP = TS0DW01.TS0DWTSP; /* Current page number*/
    set TS0DM001.TS0DWTSP skip; /* Display number*/
    TS0DM001.TA5TSQIX = TS0DW01.TA5TSQIX; /* Highest page number*/
    set TS0DM001.TA5TSQIX skip; /* Display number*/

    TS0DW01.TS0DWIXM = 1; /* Initialize line index*/
    while (TS0DW01.TS0DWIXM <= 14 /* Until end of lines*/
     && TS0DW02.TSBAGENT[TS0DWIXM] != " ") /* or last line of data*/

      set TS0DM001.TS0DMSEL[TS0DWIXM] normal; /* Display select flag*/

      TS0DM001.TSBAGENT[TS0DWIXM] = TS0DW02.TSBAGENT[TS0DWIXM];
      TS0DM001.TSBTITLE[TS0DWIXM] = TS0DW02.TSBTITLE[TS0DWIXM];
      TS0DM001.TSBPHONE[TS0DWIXM] = TS0DW02.TSBPHONE[TS0DWIXM];

      TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM + 1; /* Increment line index*/

    end
  end


end // end TS0D121

// Read temporary storage page
Function TS0D122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS0DW02.TS0DWLEN = 1064; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0D"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0DW01.TS0DWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0D122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0DM001.XXXPRCNM = "TS0D122"; /* Process name*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate Problem*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TS0D122

// Locate change save key
Function TS0D123()
   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is less than or*/
   /* equal to the Change Save Key.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWCSK == " ") /* No location code entered*/
    TS0DW01.TS0DWDFL = "Y"; /* Indicate key found*/
  else

    TS0DW01.TS0DWIXM = 1; /* Initialize index*/

    while (TS0DW01.TS0DWIXM <= 14) /* Until key is found*/
      if (TS0DW02.TSBAGENT[TS0DWIXM] == " " /* no more crafts*/
       || TS0DW02.TSBAGENT[TS0DWIXM] > TS0DW01.TS0DWCSK)
        if (TS0DW01.TS0DWIXM <= 0) /* Key not on page*/
          if (TS0DW01.TS0DWTSP == 1) /* first page*/
            TS0DW01.TS0DWIXM = 1; /* Reset index*/
          else
            TS0DW01.TS0DWIXM = 14; /* Index to last entry*/
            TS0DW01.TS0DWTSP = TS0DW01.TS0DWTSP - 1; /* decrement page*/
          end
        end
        if (TS0DW01.TS0DWIXM > 1) /* If not first key*/
          TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM - 1; /* decrement index*/
        end
        set TS0DM001.TS0DMSEL[TS0DWIXM] cursor; /* Initial cursor*/
        TS0DW01.TS0DWDFL = "Y"; /* Indicate page was found*/
        TS0DW01.TS0DWCSK = " "; /* Reset starting carrier*/
        return; /* Return to previous process*/
      end
      TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM + 1; /* Increment index*/
    end

    if (TS0DW01.TS0DWTSP == TS0DW01.TA5TSQIX) /* Last page*/
      TS0DW01.TS0DWIXM = 14; /* Set index to last entry*/
      set TS0DM001.TS0DMSEL[TS0DWIXM] cursor; /* Initial cursor*/
      TS0DW01.TS0DWDFL = "Y"; /* Indicate page was found*/
      TS0DW01.TS0DWCSK = " "; /* Reset starting carrier*/
    else
      TS0DW01.TS0DWTSP = TS0DW01.TS0DWTSP + 1; /* Increment page*/
    end
  end


end // end TS0D123

// Check attention identifier
Function TS0D130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0DM001 initial; /* Clear the map fields*/
    TS0DW01.TS0DWSWR = "N"; /* Set request for data = n*/
    set TS0DW02 empty; /* Clear temporary storage*/

    TS0DW01.TSACARCD = " "; /* Reset screen keys*/
    TS0DW01.TSACARNM = " ";
    TS0DW01.TA5TSQIX = 0; /* Reset page numbers*/
    TS0DW01.TS0DWTSP = 0;

    exit stack; /* Exit to redisplay map*/
  end

  if (TS0DM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      TS0D112(); /* Purge any temporary storage*/
      set TSBREC empty; /* Clear record*/
      COMMAREA.CATOAP = TS0DM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0DM001.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/

      TSBREC.TSACARCD = TS0DW01.TSACARCD; /* Reset load keys*/

      TS0DW01.TS0DWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      TS0DM001.XXXPRCNM = "TS0B130"; /* PROCESS NAME*/
    end
    set TS0DM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0DM001.XXXPRCNM = "TS0D130"; /* Process name*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0C"; /* set to Carrier application*/
    COMMAREA.CAITEM = TS0DM001.TSACARCD; /* move in item*/
    TS0D112(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0DM001.XXXPRCNM = "TS0D130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0DM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0D112(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0DM001.XXXPRCNM = "TS0D130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14  /* and PF14 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/

    TS0DM001.XXXPRCNM = "TS0D130"; /* Process name*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && COMMAREA.CAADDFL == "N")     /* and user add not authorized*/
    TS0DM001.XXXPRCNM = "TS0D130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* and user chg not authorized*/
    TS0DM001.XXXPRCNM = "TS0D130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf15 /* PF15 was pressed*/
   && COMMAREA.CADELFL == "N")     /* and user chg not authorized*/
    TS0DM001.XXXPRCNM = "TS0D130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

end // end TS0D130

// Reset highlighted fields
Function TS0D140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0DM001.TSACARCD initialAttributes; /* Carrier code*/

  TS0DW01.TS0DWIXM = 1; /* Initialize line index*/

  while (TS0DW01.TS0DWIXM <= 14 /* Until end of lines*/
   && TS0DM001.TSBAGENT[TS0DWIXM] != " ") /* and location exists*/
    set TS0DM001.TS0DMSEL[TS0DWIXM] normal; /* Reset select flag*/
    TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM + 1; /* Increment line index*/
  end

  set TS0DM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0DM001.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0D140

// Verify the entered data
Function TS0D150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0DM001.CAITEM > " ") /* Application data was entered*/
    set TS0DM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM001.XXXPRCNM = "TS0D150"; /* Process name*/
  end

  if (converseVar.eventKey is pf13) /* If add screen requested*/

      /* Return to previous process*/

  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0D151(); /* Verify scroll request*/
    else
      TS0D152(); /* Verify any changed data*/
    end

    if (TS0DW01.TS0DWPSW == "Y") /* Errors were found*/
      exit stack; /* Exit to redisplay map*/
    end
  end


end // end TS0D150

// Verify scroll request
Function TS0D151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0DW01.TS0DWTSP < 2)       /* and no previous pages*/
    TS0DM001.XXXPRCNM = "TS0D151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0DW01.TS0DWTSP >= TS0DW01.TA5TSQIX) /* and no more pages*/
    TS0DM001.XXXPRCNM = "TS0D151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
  end

  TS0DW01.TS0DWIXM = 14; /* Initialize line index*/

  while (TS0DW01.TS0DWIXM > 0) /* Until end of lines*/
    if (TS0DM001.TS0DMSEL[TS0DWIXM] != TS0DW02.TS0DMSEL[TS0DWIXM])
      set TS0DM001.TS0DMSEL[TS0DWIXM] cursor, modified, bold; /* Highlight*/
      TS0DM001.XXXPRCNM = "TS0D151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
      TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    end
    TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM - 1; /* Decrement line number*/
  end


end // end TS0D151

// Verify any changed data
Function TS0D152()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  TS0DW01.TS0DWSFL = "N"; /* Initialize selection flag*/
  TS0DW01.TS0DWIXM = 14; /* Initialize index*/

  while (TS0DW01.TS0DWIXM > 0) /* Until end of lines*/
    if (TS0DM001.TS0DMSEL[TS0DWIXM] != " ") /* If selection is not blank*/
      TS0DW01.TS0DWSFL = "Y"; /* Initialize selection flag*/
      if (TS0DM001.TS0DMSEL[TS0DWIXM] == "S") /* Save the key*/
         /* Next sentence*/
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
        TS0DM001.XXXPRCNM = "TS0D152"; /* Process name*/
        set TS0DM001.TS0DMSEL[TS0DWIXM] cursor, modified, bold;
        TS0DW01.TS0DWSWR = "N"; /* Set request for data*/
      end
    end
    TS0DW01.TS0DWIXM = TS0DW01.TS0DWIXM - 1; /* Increment line index*/
  end

  if (TS0DM001.TSACARCD == " " /* If select line is blank*/
   && TS0DM001.TSBAGENT[1] != " ")
    TS0D112(); /* Purge temporary storage*/
    TS0DW01.TS0DWSWR = "N"; /* Set request for data to no*/
    TS0DW01.TSACARCD = " "; /* Reset working storage values*/
    TS0DW01.TSACARNM = " ";
  else
    if (TS0DM001.TSACARCD == " " /* If no data exists*/
     && TS0DM001.TSBAGENT[1] == " ")
      converseLib.validationFailed(34); /* Set error message 'enter data'*/
      TS0DW01.TS0DWSWR = "N"; /* Set request for data to no*/
      TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
      TS0DM001.XXXPRCNM = "TS0D152"; /* Process name*/
    else
      if (TS0DM001.TSACARCD == TS0DW01.TSACARCD /* If no new data entered*/
       && TS0DW01.TS0DWSFL == "N")             

         /* Continue on*/

      else
        if (TS0DM001.TSACARCD == TS0DW01.TSACARCD /* Selection entered*/
         && TS0DM001.TSBAGENT[1] != " "           
         && TS0DW01.TS0DWSFL == "Y")             

           /* keep going*/

        else
          TSAREC.TSACARCD = TS0DM001.TSACARCD; /* move flds to rec*/
          TS0DW01.TS0DWSWR = "Y";
        end
      end
    end
  end


end // end TS0D152

// Process valid input request
Function TS0D160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  TS0DW01.TS0DWCSK = " "; /* Initialize change save key*/
  TS0DW01.TS0DWIFL = "N"; /* Set inquiry flag*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS0DW01.TS0DWTSP = TS0DW01.TS0DWTSP - 1; /* Decrement page number*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      TS0DW01.TS0DWTSP = TS0DW01.TS0DWTSP + 1; /* Increment page number*/
    else
      if (converseVar.eventKey is pf13 /* PF13 was pressed*/
       && TS0DM001.TSACARCD != " ")    /* Carrier code is entered*/
        set TSAREC empty; /* Empty select record*/
        TSAREC.TSACARCD = TS0DM001.TSACARCD; /* Move carrier code*/
        TS0D111(); /* Select code to see if exists*/
        if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
          converseLib.validationFailed(39); /* No data found to display*/
          TS0DW01.TSACARNM = " "; /* Clear carrier name field*/
          TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
          TS0DM001.XXXPRCNM = "TS0D160"; /* Process name*/
        else
          if (SQLCA.VAGen_SQLCODE == 0) /* Carrier was not found*/
            TS0DM001.TSACARNM = TSAREC.TSACARNM; /* Save name*/
            TS0DW01.TS0DWMAP = "2"; /* Select Map #2*/
            TS0DW01.TS0DWFSW = "A"; /* Select add function*/
            converseLib.validationFailed(0); /* Clear error message field*/
          end
        end
      else
        if (converseVar.eventKey is pf13 /* PF13 was pressed*/
         && TS0DM001.TSACARCD == " ")    /* Carrier code not is entered*/
          converseLib.validationFailed(34); /* Data must be entered*/
          TS0DM001.XXXPRCNM = "TS0D160"; /* Process name*/
        else
          if (converseVar.eventKey is pf14 /* PF14 was pressed*/
           && TS0DW01.TS0DWSFL == "Y")     /* and selection was made*/
            TS0DW01.TS0DWMAP = "2"; /* Select Map #2*/
            TS0DW01.TS0DWFSW = "C"; /* Select change function*/
            converseLib.validationFailed(0); /* Clear error message field*/
          else
            if (converseVar.eventKey is pf14 /* PF14 was pressed*/
             && TS0DW01.TS0DWSFL == "N")     /* and selection was not made*/
              converseLib.validationFailed(53); /* error message*/
              TS0DM001.XXXPRCNM = "TS0D160"; /* Process name*/
              TS0DW01.TS0DWPSW = "Y"; /* error message*/
            else
              if (converseVar.eventKey is pf15 /* PF15 was pressed*/
               && TS0DW01.TS0DWSFL == "Y")     /* and selection was made*/
                TS0DW01.TS0DWMAP = "2"; /* Select Map #2*/
                TS0DW01.TS0DWFSW = "D"; /* Select change function*/
                converseLib.validationFailed(0); /* Clear error message field*/
              else
                if (converseVar.eventKey is pf15 /* PF15 was pressed*/
                 && TS0DW01.TS0DWSFL == "N")    
                                   /* and selection was not made*/
                  converseLib.validationFailed(53); /* error message*/
                  TS0DM001.XXXPRCNM = "TS0D160"; /* Process name*/
                  TS0DW01.TS0DWPSW = "Y"; /* error message*/
                else
                  if (converseVar.eventKey is enter /* enter was pressed*/
                   && TS0DW01.TS0DWSFL == "Y"       /* and selection was made*/
                   && TS0DM001.TSACARCD == TS0DW01.TSACARCD
                   && TS0DM001.TSACARCD != " ")     /* Carrier code not ' '*/
                    TS0DW01.TS0DWMAP = "2"; /* Select Map #2*/
                    TS0DW01.TS0DWFSW = "C"; /* Select change function*/
                    TS0DW01.TS0DWIFL = "Y"; /* Set inquiry flag*/
                    converseLib.validationFailed(0); /* Clear error message field*/
                  else
                    if (converseVar.eventKey is enter /* enter was pressed*/
                     && TS0DW01.TS0DWSFL == "N"       
                     /* and selection was made*/
                     && TS0DM001.TSACARCD == TS0DW01.TSACARCD
                     && TS0DM001.TSACARCD != " ")     /* Carrier code not ' '*/
                      converseLib.validationFailed(34); /* Clear error message field*/
                      TS0DW01.TS0DWPSW = "Y"; /* error message*/
                      set TS0DM001.TS0DMSEL[1] cursor;
                    else
                      TS0DW01.TSACARCD = TS0DM001.TSACARCD; /* save*/
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end TS0D160

// Location maintenance add map
Function TS0D200()
   /* ------------------------------------------------------------*/
   /* This is the process used to display add map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0D210(); /* Format and display the map*/

  TS0D220(); /* Check attention identifier*/

  TS0D230(); /* Reset fields to normal intensity*/

  TS0D240(); /* Verify the entered data*/

  TS0D250(); /* Process valid input request*/


end // end TS0D200

// Format and display the map
Function TS0D210()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWPSW == "N") /* No errors*/
    set TS0DM002 initial; /* Clear map output area*/
    TS0DM002.TS0DMMSG = "PLEASE ENTER NEW AGENT";
    TS0DM002.TS0DMFUN = " ADD  "; /* Set ADD title to map*/
  end

  TS0DM002.TSACARCD = TS0DM001.TSACARCD; /* Move values to map*/
  TS0DM002.TSACARNM = TS0DM001.TSACARNM;

  TS0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0DM002.ZZZSDT = VGVar.currentShortGregorianDate; /* Creation date*/
  TS0DM002.ZZZCHGDT = VGVar.currentShortGregorianDate; /* Modification date (Init.)*/

  if (TS0DW01.TS0DWPSW == "Y") /* error message to display*/
    TS0DM002.TS0DMMSG = " "; /* clear message*/
  /* SET TS0DM002 ALARM;             /* Indicate sound alarm*/
  end

  if (TS0DW01.TS0DWMFL == "Y") /* If add was successful*/
    converseLib.validationFailed(44); /* display a message*/
    TS0DM002.TS0DMMSG = " "; /* clear message*/
    TS0DM002.XXXPRCNM = "TS0D210"; /* Process name*/
    TS0DW01.TS0DWMFL = "N"; /* Reset message flag*/
  end

  converse TS0DM002 ;

  TS0DW01.TS0DWPSW = "N"; /* Reset problem switch*/

  TS0D211(); /* Check for ? inquiry by user*/


end // end TS0D210

// Check for ? inquiry by user
Function TS0D211()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0DM002.XSTCD == "?" /* if any ? entered*/
   || TS0DM002.XCTCD == "?")

    if (TS0DM002.XSTCD == "?") /* if ? in state code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                  STATE   "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXST01(); /* perform state code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the state      **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0DM002.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
        TS0DM002.XSTDESC = XSTTBL.XSTDESC[XX0XWPIX]; /* move name*/
      else
        TS0DM002.XSTCD = " "; /* clear fields*/
        TS0DM002.XSTDESC = " ";
      end
    end

    if (TS0DM002.XCTCD == "?") /* if ? in country code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 COUNTRY  "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the country    **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0DM002.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
        TS0DM002.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX]; /* move name*/
      else
        TS0DM002.XCTCD = " "; /* clear fields*/
        TS0DM002.XCTDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0DW01.TS0DWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0D211

// Check attention identifier
Function TS0D220()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0DM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0DM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0DM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0DM002.CAITEM; /* Application data*/
      TS0D112(); /* Purge temporary storage*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0DM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0DM002.XXXPRCNM = "TS0D220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0DW01.TS0DWMAP = "1"; /* Move to map 1*/
    TS0DW01.TS0DWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0DM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0D112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0DM002.XXXPRCNM = "TS0D220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0C"; /* Fast path to carrier*/
    COMMAREA.CAITEM = TS0DM002.TSACARCD;
    TS0D112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0DM002.XXXPRCNM = "TS0D220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0DM002.XXXPRCNM = "TS0D220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0D220

// Reset highlighted fields
Function TS0D230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0DM002.CAITEM initialAttributes; /* Commarea application data*/
  set TS0DM002.TSBAGENT initialAttributes; /* Map fields*/
  set TS0DM002.TSBTITLE initialAttributes;
  set TS0DM002.TSBPHONE initialAttributes;
  set TS0DM002.XXX-ADDR1 initialAttributes;
  set TS0DM002.XXX-ADDR2 initialAttributes;
  set TS0DM002.XXX-ADDR3 initialAttributes;
  set TS0DM002.XXXCITY initialAttributes;
  set TS0DM002.XSTCD initialAttributes;
  set TS0DM002.XXXZIP initialAttributes;
  set TS0DM002.XCTCD initialAttributes;


end // end TS0D230

// Verify the entered data
Function TS0D240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0DW01.TS0DWDEF = "N"; /* Initialize data entered flag*/

  if (TS0DM002.CAITEM > " ") /* Application data was entered*/
    set TS0DM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D240"; /* Process name*/
  end

  if (converseVar.eventKey is enter) /* If ENTER was pressed*/
    TS0D241(); /* Validate input data*/
  end


end // end TS0D240

// Validate any input data
Function TS0D241()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0DW01.TS0DWDEF = "Y"; /* Data has been entered*/

  TS0DM002.ZZZSDT = VGVar.currentShortGregorianDate; /* Creation date*/
  TS0DM002.ZZZCHGDT = VGVar.currentShortGregorianDate; /* Modification date (Init.)*/

  if (TS0DM002.XCTCD != " ") /* If country entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0DM002.XCTCD in XCTTBL.XCTCD) /* Check valid country*/
    end

    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(29); /* Display error message*/
      TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
      TS0DM002.XXXPRCNM = "TS0D241"; /* Process name*/
      TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0DM002.XCTDESC = " "; /* Clear description*/
      set TS0DM002.XCTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0DM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
  end

  TS0DM002.XSTDESC = " "; /* Blank out field*/
  if (TS0DM002.XCTCD == "USA") /* If country is USA*/
    if (TS0DM002.XSTCD != " ") /* State code entered*/
      sysVar.arrayIndex = 0; /* Initialize ezetst*/
      if (TS0DM002.XSTCD in XSTTBL.XSTCD) /* Check valid state*/
      end
    end

    if (sysVar.arrayIndex == 0 /* Not in table*/
     || TS0DM002.XSTCD == " ") /* or state missing*/
      converseLib.validationFailed(30); /* Display error message*/
      TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
      TS0DM002.XSTDESC = " "; /* Blank out field*/
      TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0DM002.XXXPRCNM = "TS0D241"; /* Process name*/
      set TS0DM002.XSTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0DM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
  end

  if (TS0DM002.TSBPHONE == " ") /* If phone number is missing*/
    set TS0DM002.TSBPHONE cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(51); /* error message*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D241"; /* Process name*/
    TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  end

  if (TS0DM002.TSBTITLE == " ") /* If title is missing*/
    set TS0DM002.TSBTITLE cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(50); /* error message*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D241"; /* Process name*/
    TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  end

  if (TS0DM002.TSBAGENT == " ") /* If agent name is missing*/
    set TS0DM002.TSBAGENT cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(49); /* error message*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D241"; /* Process name*/
    TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  end


end // end TS0D241

// Process valid input request
Function TS0D250()
   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the agent.*/
   /* If found then display message that this row exists in*/
     /* either active or inactive status.*/
   /* If not found then add the row.*/
   /* ------------------------------------------------------------*/

  set TSBREC empty; /* clear record*/

  TSBREC.TSACARCD = TS0DM002.TSACARCD; /* carrier code*/
  TSBREC.TSBAGENT = TS0DM002.TSBAGENT; /* Agent name*/

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && TS0DW01.TS0DWDEF == "Y"       /* and data was entered*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    TS0DW01.TS0DWCSK = TS0DM002.TSBAGENT; /* Save csk key*/
    TS0D251(); /* Select  table row*/
    if (SQLCA.VAGen_SQLCODE != 100) /* If row exists*/
      converseLib.validationFailed(25);
      TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
      TS0DM002.XXXPRCNM = "TS0D250"; /* Process name*/
      TS0DW01.TS0DWSWR = "Y"; /* Set request for data switch*/
      set TS0DM002.TSBAGENT cursor, modified, bold; /* Set cursor*/
    end
    if (TS0DW01.TS0DWPSW == "N") /* No errors exist*/
      TS0D252(); /* Add the new table row*/
      TS0DW01.TS0DWMFL = "Y"; /* Set message flag to yes*/
    end
  end

  if (TS0DW01.TS0DWPSW == "N") /* No errors exist*/
    set TSBREC empty; /* Clear record*/
    TS0DW01.TSACARCD = " "; /* Reset screen keys*/
    TSAREC.TSACARCD = TS0DM002.TSACARCD; /* Set screen load keys*/
    TS0DW01.TS0DWSWR = "Y"; /* Set request for data switch*/
    set TS0DM002 initial; /* Clear map*/
  end


end // end TS0D250

// Select agent table row
Function TS0D251()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the agent table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO1460" ("S ", SQLCA, TSBREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0D251"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAGENT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0DW01.TS0DWPSW = "Y"; /* Indicate Problem*/
    TS0DM001.XXXPRCNM = "TS0D251"; /* Process name*/
  end


end // end TS0D251

// Add agent table row
Function TS0D252()

   /* ------------------------------------------------------------*/
   /* This module adds an agent table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  TSBREC.TSACARCD = TS0DM002.TSACARCD; /* Carrier code*/
  TSBREC.TSBAGENT = TS0DM002.TSBAGENT; /* Agent name*/
  TSBREC.TSBTITLE = TS0DM002.TSBTITLE; /* Agent title*/
  TSBREC.TSBPHONE = TS0DM002.TSBPHONE; /* Agent phone*/
  TSBREC.XXX-ADDR1 = TS0DM002.XXX-ADDR1; /* Address 1*/
  TSBREC.XXX-ADDR2 = TS0DM002.XXX-ADDR2; /* Address 2*/
  TSBREC.XXX-ADDR3 = TS0DM002.XXX-ADDR3; /* Address 3*/
  TSBREC.XXXCITY = TS0DM002.XXXCITY; /* City*/
  TSBREC.XSTCD = TS0DM002.XSTCD; /* State code*/
  TSBREC.XXXZIP = TS0DM002.XXXZIP; /* zip code*/
  TSBREC.XCTCD = TS0DM002.XCTCD; /* Country code*/

   /* -------------- y2k out begin ---------------*/
   /* MOVE EZEDTE TO TS0DW01.TS0DWYMD;  /* Working change date*/
   /* MOVE TS0DW01.TS0DWDTE TO TSBREC.ZZZCHGDT;*/
   /* MOVE TS0DW01.TS0DWDTE TO TSBREC.ZZZSDT; /* Set up date*/
   /* MOVE EZETIM TO TS0DW01.TS0DWTM1; /* Working time 1*/
   /* MOVE TS0DW01.TS0DWHR1 TO TS0DW01.TS0DWHR3;*/
   /* MOVE TS0DW01.TS0DWMN1 TO TS0DW01.TS0DWMN3;*/
   /* MOVE TS0DW01.TS0DWTM3 TO TSBREC.ZZZCHGTM;/* Change time*/
   /* -------------- y2k out end -----------------*/

   /* -------------- y2k in  begin ---------------*/
  XX0XS01(); /* call date routine*/
  TSBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  TSBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  TSBREC.ZZZSDT = XX0XW01.XX0XWDAT;
   /* -------------- y2k in end ------------------*/

  TSBREC.ZZZCHGCT = 1; /* Change count*/

  call "IO1460" ("A ", SQLCA, TSBREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0D252"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAGENT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0DM001.XXXPRCNM = "TS0D252"; /* Process name*/
  end


end // end TS0D252

// Agent Main. chg/inq map
Function TS0D300()
   /* ------------------------------------------------------------*/
   /* This is the process to display a change map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0D310(); /* Obtain the data to display*/

  TS0D320(); /* Format and display the map*/

  TS0D330(); /* Check attention identifier*/

  TS0D340(); /* Reset Highlighted fields*/

  TS0D350(); /* Verify the entered data*/

  TS0D360(); /* Process valid input request*/


end // end TS0D300

// Obtain the data to display
Function TS0D310()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on location inquiry map.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWPSW == "N" /* No errors*/
   || TS0DW01.TS0DWURF == "Y") /* or update reload flag is yes*/
    TSBREC.TSACARCD = TS0DM001.TSACARCD; /* Carrier code*/
    TSBREC.TSBAGENT = TS0DM001.TSBAGENT[TS0DWIXM]; /* Agent name*/
    TS0DW01.TS0DWCSK = TS0DM001.TSBAGENT[TS0DWIXM]; /* Save key*/
    TS0D251(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If selection was successful*/

      /* continue*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* selection was unsuccesful*/
        TS0DW01.TS0DWMAP = "1"; /* set to map 1*/
        TS0DW01.TS0DWSWR = "Y"; /* reload data*/
        converseLib.validationFailed(69); /* set error*/
        exit stack; /* exit to redisplay map*/
      end
    end
  end


end // end TS0D310

// Format and display the map
Function TS0D320()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWPSW == "N") /* No error*/
    set TS0DM002 initial; /* Clear map output area*/
    set TS0DM002.TSBTITLE cursor; /* set cursor*/
    TS0DM002.TS0DMFUN = "CHANGE"; /* Move change literal to map*/
    TS0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TS0DM002.TSACARCD = TSBREC.TSACARCD; /* Move selected fields*/
    TS0DM002.TSACARNM = TS0DM001.TSACARNM; /* to map*/
    TS0DM002.TSBAGENT = TSBREC.TSBAGENT;
    TS0DM002.TSBTITLE = TSBREC.TSBTITLE;
    TS0DM002.TSBPHONE = TSBREC.TSBPHONE;
    TS0DM002.XXX-ADDR1 = TSBREC.XXX-ADDR1;
    TS0DM002.XXX-ADDR2 = TSBREC.XXX-ADDR2;
    TS0DM002.XXX-ADDR3 = TSBREC.XXX-ADDR3;
    TS0DM002.XXXCITY = TSBREC.XXXCITY;
    TS0DM002.XSTCD = TSBREC.XSTCD;
    if (TSBREC.XSTCD in XSTTBL.XSTCD)
      TS0DM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
    TS0DM002.XXXZIP = TSBREC.XXXZIP;
    TS0DM002.XCTCD = TSBREC.XCTCD;
    if (TSBREC.XCTCD in XCTTBL.XCTCD)
      TS0DM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    TS0DM002.ZZZSDT = TSBREC.ZZZSDT;
    TS0DM002.ZZZCHGDT = TSBREC.ZZZCHGDT;

    TS0DM002.TS0DMMSG = "PLEASE ENTER YOUR CHANGES";

  end

  if (COMMAREA.CACHGFL == "N" /* if only inquire capabilities*/
   || TS0DW01.TS0DWIFL == "Y") /* or inquiry flag is set*/
    TS0DM002.TS0DMFUN = "INQUIRE"; /* Move inquire literal to map*/
    TS0DM002.TS0DMMSG = " ";
    set TS0DM002.TSBAGENT protect; /* set all fields non-modifiable*/
    set TS0DM002.TSBTITLE protect;
    set TS0DM002.TSBPHONE protect;
    set TS0DM002.XXX-ADDR1 protect;
    set TS0DM002.XXX-ADDR2 protect;
    set TS0DM002.XXX-ADDR3 protect;
    set TS0DM002.XXXCITY protect;
    set TS0DM002.XSTCD protect;
    set TS0DM002.XXXZIP protect;
    set TS0DM002.XCTCD protect;
    set TS0DM002.CATOAP cursor;
  end

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    TS0DM002.TS0DMMSG = " ";
  /* SET TS0DM002 ALARM;*/
  end

  set TS0DM002.TSBAGENT protect; /* set craft field protected*/

  converse TS0DM002 ;

  TS0DW01.TS0DWPSW = "N"; /* Initialize problem switch*/

  TS0D211(); /* Check for ? inquiry by user*/


end // end TS0D320

// Check attention identifier
Function TS0D330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0DM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0DM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0DM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0DM002.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0DM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0DM002.XXXPRCNM = "TS0D330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0DW01.TS0DWMAP = "1"; /* Move to map 1*/
    TS0DW01.TS0DWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0DM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0D112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0DM002.XXXPRCNM = "TS0D330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0C"; /* Fast path to carrier*/
    COMMAREA.CAITEM = TS0DM002.TSACARCD;
    TS0D112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0DM002.XXXPRCNM = "TS0D330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0DM002.XXXPRCNM = "TS0D330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0D330

// Reset highlighted fields
Function TS0D340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0DM002.CAITEM initialAttributes; /* Commarea application data*/
  set TS0DM002.TSBAGENT initialAttributes; /* Map fields*/
  set TS0DM002.TSBTITLE initialAttributes;
  set TS0DM002.TSBPHONE initialAttributes;
  set TS0DM002.XXX-ADDR1 initialAttributes;
  set TS0DM002.XXX-ADDR2 initialAttributes;
  set TS0DM002.XXX-ADDR3 initialAttributes;
  set TS0DM002.XXXCITY initialAttributes;
  set TS0DM002.XSTCD initialAttributes;
  set TS0DM002.XXXZIP initialAttributes;
  set TS0DM002.XCTCD initialAttributes;


end // end TS0D340

// Verify the entered data
Function TS0D350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0DW01.TS0DWDEF = "N"; /* Initialize data entered flag*/

  if (TS0DM002.CAITEM > " ") /* Application data was entered*/
    set TS0DM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D350"; /* Process name*/
  end

  if (converseVar.eventKey is enter        /* If ENTER was pressed*/
   && TS0DM002.TSBAGENT == TSBREC.TSBAGENT /* and no data entered*/
   && TS0DM002.TSBTITLE == TSBREC.TSBTITLE 
   && TS0DM002.TSBPHONE == TSBREC.TSBPHONE 
   && TS0DM002.XXX-ADDR1 == TSBREC.XXX-ADDR1
   && TS0DM002.XXX-ADDR2 == TSBREC.XXX-ADDR2
   && TS0DM002.XXX-ADDR3 == TSBREC.XXX-ADDR3
   && TS0DM002.XXXCITY == TSBREC.XXXCITY   
   && TS0DM002.XSTCD == TSBREC.XSTCD       
   && TS0DM002.XXXZIP == TSBREC.XXXZIP     
   && TS0DM002.XCTCD == TSBREC.XCTCD)     
    TS0DM001.TS0DMSEL[TS0DWIXM] = " "; /* set select field blank*/
    exit stack; /* Exit to redisplay map*/
  else
    TS0D351(); /* Validate input data*/
  end


end // end TS0D350

// Validate any input data
Function TS0D351()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0DW01.TS0DWDEF = "Y"; /* Data has been entered*/

  if (TS0DM002.XCTCD != " ") /* If country entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0DM002.XCTCD in XCTTBL.XCTCD) /* Check valid country*/
    end

    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(29); /* Display error message*/
      TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
      TS0DM002.XXXPRCNM = "TS0D351"; /* Process name*/
      TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0DM002.XCTDESC = " "; /* Clear description*/
      set TS0DM002.XCTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0DM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
  end

  TS0DM002.XSTDESC = " "; /* Blank out field*/
  if (TS0DM002.XCTCD == "USA") /* If country is USA*/
    if (TS0DM002.XSTCD != " ") /* State code entered*/
      sysVar.arrayIndex = 0; /* Initialize ezetst*/
      if (TS0DM002.XSTCD in XSTTBL.XSTCD) /* Check valid state*/
      end
    end

    if (sysVar.arrayIndex == 0 /* Not in table*/
     || TS0DM002.XSTCD == " ") /* or state missing*/
      converseLib.validationFailed(30); /* Display error message*/
      TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
      TS0DM002.XSTDESC = " "; /* Blank out field*/
      TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0DM002.XXXPRCNM = "TS0D351"; /* Process name*/
      set TS0DM002.XSTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0DM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
  end

  if (TS0DM002.TSBPHONE == " ") /* If phone number is missing*/
    set TS0DM002.TSBPHONE cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(51); /* error message*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D351"; /* Process name*/
    TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  end

  if (TS0DM002.TSBTITLE == " ") /* If title is missing*/
    set TS0DM002.TSBTITLE cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(50); /* error message*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D351"; /* Process name*/
    TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  end

  if (TS0DM002.TSBAGENT == " ") /* If agent name is missing*/
    set TS0DM002.TSBAGENT cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(49); /* error message*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D351"; /* Process name*/
    TS0DM002.TS0DMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  end


end // end TS0D351

// Process valid input request
Function TS0D360()
   /* ------------------------------------------------------------*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWPSW == "Y") /* errors occurred*/
    exit stack;
  else
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && TS0DW01.TS0DWPSW == "N"       /* and no errors*/
     && TS0DW01.TS0DWIFL == "N"       /* and not inquiry*/
     && TS0DW01.TS0DWDEF == "Y")      /* and data was entered*/

      TSBREC.TSACARCD = TS0DM002.TSACARCD; /* Carrier code*/
      TSBREC.TSBAGENT = TS0DM002.TSBAGENT; /* Agent name*/
      TSBREC.TSBTITLE = TS0DM002.TSBTITLE; /* Agent title*/
      TSBREC.TSBPHONE = TS0DM002.TSBPHONE; /* Agent phone*/
      TSBREC.XXX-ADDR1 = TS0DM002.XXX-ADDR1; /* Address 1*/
      TSBREC.XXX-ADDR2 = TS0DM002.XXX-ADDR2; /* Address 2*/
      TSBREC.XXX-ADDR3 = TS0DM002.XXX-ADDR3; /* Address 3*/
      TSBREC.XXXCITY = TS0DM002.XXXCITY; /* City*/
      TSBREC.XSTCD = TS0DM002.XSTCD; /* State code*/
      TSBREC.XXXZIP = TS0DM002.XXXZIP; /* zip code*/
      TSBREC.XCTCD = TS0DM002.XCTCD; /* Country code*/

   /* ----------------- y2k out begin ------------------*/
     /* MOVE EZEDTE TO TS0DW01.TS0DWYMD;     /* Working change date*/
     /* MOVE TS0DW01.TS0DWDTE TO TSBREC.ZZZCHGDT;*/
     /* MOVE EZETIM TO TS0DW01.TS0DWTM1;    /* Working time 1*/
     /* MOVE TS0DW01.TS0DWHR1 TO TS0DW01.TS0DWHR3;*/
     /* MOVE TS0DW01.TS0DWMN1 TO TS0DW01.TS0DWMN3;*/
     /* MOVE TS0DW01.TS0DWTM3 TO TSBREC.ZZZCHGTM;/* Change time*/
   /* ----------------- y2k out end --------------------*/

   /* ----------------- y2k in  begin ------------------*/
      XX0XS01(); /* call date routine*/
      TSBREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      TSBREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
   /* ----------------- y2k in end -- ------------------*/

      TS0D361(); /* Update table*/

      TS0DW01.TS0DWURF = "N"; /* Initialize upd reload flag*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the update*/
        TS0DW01.TS0DWCSK = TS0DM002.TSBAGENT; /* Set change save key*/
        TS0DW01.TS0DWMFL = "Y"; /* Set message flag to yes*/
        TS0DW01.TS0DWSWR = "Y"; /* Set request for data switch*/
        set TS0DM002 initial; /* Clear map area*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row was not found*/
          converseLib.validationFailed(12); /* update error occured*/
          TS0DM002.XXXPRCNM = "TS0D360"; /* Process name*/
          TS0DW01.TS0DWURF = "Y"; /* Set update reload flag*/
          TS0DW01.TS0DWSWR = "Y"; /* Set request for data switch*/
          exit stack; /* exit to redisplay map*/
        end
      end

      if (TS0DW01.TS0DWPSW == "N") /* IF no errors occured*/
        TSBREC.TSACARCD = TS0DW01.TSACARCD; /* Move map fields to*/
        TS0DM001.TS0DMSEL[TS0DWIXM] = " "; /* Set blank to select*/
      else
        exit stack; /* Exit to redisplay map*/
      end
    end
  end


end // end TS0D360

// Updated selected row
Function TS0D361()
   /* ------------------------------------------------------------*/
   /* Update the agent row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO1460" ("U ", SQLCA, TSBREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0DW01.TS0DWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0DW01.TS0DWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0DW01.TS0DWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0D361"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0DM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAGENT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0DM001.XXXPRCNM = "TS0D361"; /* Process name*/

    end
  end


end // end TS0D361

// Agent Main. Delete Map
Function TS0D400()
   /* ------------------------------------------------------------*/
   /* This is the process to display a delete map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0D410(); /* Obtain the data to display*/

  TS0D420(); /* Format and display the map*/

  TS0D430(); /* Check attention identifier*/

  TS0D440(); /* Reset Highlighted fields*/

  TS0D450(); /* Verify the entered data*/

  TS0D460(); /* Process valid input request*/


end // end TS0D400

// Obtain the data to display
Function TS0D410()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on Agent inquiry map.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWPSW == "N" /* No errors*/
   || TS0DW01.TS0DWURF == "Y") /* or update reload flag is yes*/
    TSBREC.TSACARCD = TS0DM001.TSACARCD; /* Carrier code*/
    TSBREC.TSBAGENT = TS0DM001.TSBAGENT[TS0DWIXM]; /* Agent name*/
    TS0DW01.TS0DWCSK = TS0DM001.TSBAGENT[TS0DWIXM]; /* Save key*/
    TS0D251(); /* Select data for map*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If selection was successful*/

      /* continue*/

    else
      if (SQLCA.VAGen_SQLCODE == 100) /* selection was unsuccesful*/
        TS0DW01.TS0DWMAP = "1"; /* set to map 1*/
        TS0DW01.TS0DWSWR = "Y"; /* reload data*/
        converseLib.validationFailed(69); /* set error*/
        exit stack; /* exit to redisplay map*/
      end
    end
  end


end // end TS0D410

// Format and display the map
Function TS0D420()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWPSW == "N") /* No error*/
    set TS0DM002 initial; /* Clear map output area*/
    TS0DM002.TS0DMMSG = "PRESS ENTER TO DELETE OR PF3 TO ABORT";
    TS0DM002.TSACARCD = TSBREC.TSACARCD; /* Move selected fields*/
    TS0DM002.TSACARNM = TS0DM001.TSACARNM; /* to map*/
    TS0DM002.TSBAGENT = TSBREC.TSBAGENT;
    TS0DM002.TSBTITLE = TSBREC.TSBTITLE;
    TS0DM002.TSBPHONE = TSBREC.TSBPHONE;
    TS0DM002.XXX-ADDR1 = TSBREC.XXX-ADDR1;
    TS0DM002.XXX-ADDR2 = TSBREC.XXX-ADDR2;
    TS0DM002.XXX-ADDR3 = TSBREC.XXX-ADDR3;
    TS0DM002.XXXCITY = TSBREC.XXXCITY;
    TS0DM002.XSTCD = TSBREC.XSTCD;
    if (TSBREC.XSTCD in XSTTBL.XSTCD)
      TS0DM002.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
    TS0DM002.XXXZIP = TSBREC.XXXZIP;
    TS0DM002.XCTCD = TSBREC.XCTCD;
    if (TSBREC.XCTCD in XCTTBL.XCTCD)
      TS0DM002.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    TS0DM002.ZZZSDT = TSBREC.ZZZSDT;
    TS0DM002.ZZZCHGDT = TSBREC.ZZZCHGDT;
  end

  TS0DM002.TS0DMFUN = "DELETE"; /* Move change literal to map*/
  TS0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  set TS0DM002.TSBAGENT protect; /* set all fields non-modifiable*/
  set TS0DM002.TSBTITLE protect;
  set TS0DM002.TSBPHONE protect;
  set TS0DM002.XXX-ADDR1 protect;
  set TS0DM002.XXX-ADDR2 protect;
  set TS0DM002.XXX-ADDR3 protect;
  set TS0DM002.XSTCD protect;
  set TS0DM002.XXXZIP protect;
  set TS0DM002.XCTCD protect;
  set TS0DM002.CATOAP cursor;

  if (converseVar.validationMsgNum != 0) /* Errors exist*/
    set TS0DM002 alarm;
  end

  converse TS0DM002 ;

  TS0DW01.TS0DWPSW = "N"; /* Initialize problem switch*/

end // end TS0D420

// Check attention identifier
Function TS0D430()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0DM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0DM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0DM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0DM002.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0DM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0DM002.XXXPRCNM = "TS0D430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0DW01.TS0DWMAP = "1"; /* Move to map 1*/
    TS0DW01.TS0DWMFL = "N"; /* Reset message flag*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0DM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0D112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0DM002.XXXPRCNM = "TS0D430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0C"; /* Fast path to carrier*/
    COMMAREA.CAITEM = TS0DM002.TSACARCD;
    TS0D112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0DM002.XXXPRCNM = "TS0D430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0DM002.XXXPRCNM = "TS0D430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0D430

// Reset highlighted fields
Function TS0D440()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0DM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0DM002.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0D440

// Verify the entered data
Function TS0D450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0DM002.CAITEM > " ") /* Application data was entered*/
    set TS0DM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0DW01.TS0DWPSW = "Y"; /* Indicate problem*/
    TS0DM002.XXXPRCNM = "TS0D350"; /* Process name*/
  end


end // end TS0D450

// Process valid input request
Function TS0D460()
   /* ------------------------------------------------------------*/
   /* If no errors then delete.*/
   /* ------------------------------------------------------------*/

  if (TS0DW01.TS0DWPSW == "Y") /* errors occurred*/
    exit stack;
  else
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && TS0DW01.TS0DWPSW == "N")      /* and no errors*/

      TSBREC.TSACARCD = TS0DM002.TSACARCD; /* Carrier code*/
      TSBREC.TSBAGENT = TS0DM002.TSBAGENT; /* Agent name*/

      TS0D461(); /* Delete table row*/

      TS0DW01.TS0DWURF = "N"; /* Initialize upd reload flag*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the update*/
        TS0DW01.TS0DWMFL = "Y"; /* Set message flag to yes*/
        TS0DW01.TS0DWSWR = "Y"; /* Set request for data switch*/
        TS0DM001.TS0DMSEL[TS0DWIXM] = " "; /* Set blank to select*/
        set TS0DM002 initial; /* Clear map area*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row was not found*/
          converseLib.validationFailed(69); /* update error occured*/
          TS0DM002.XXXPRCNM = "TS0D460"; /* Process name*/
          TS0DW01.TS0DWURF = "Y"; /* Set update reload flag*/
          TS0DW01.TS0DWSWR = "Y"; /* Set request for data switch*/
          exit stack; /* exit to redisplay map*/
        end
      end

      if (TS0DW01.TS0DWPSW == "N") /* IF no errors occured*/
        TSBREC.TSACARCD = TS0DW01.TSACARCD; /* Move map fields to*/
      else
        exit stack; /* Exit to redisplay map*/
      end
    end
  end


end // end TS0D460

// delete selected row
Function TS0D461()
   /* ------------------------------------------------------------*/
   /* Delete the agent table row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO1460" ("D ", SQLCA, TSBREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0DW01.TS0DWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0DW01.TS0DWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0DW01.TS0DWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0D461"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0DM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VAGENT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0DM001.XXXPRCNM = "TS0D461"; /* Process name*/

    end
  end


end // end TS0D461

//*** RECORD=TS0DW01 ****
// Working storage for TS0d - Agent Inquiry/Maintenance
// ***********************
Record TS0DW01 type basicRecord
  10 TS0DWIXM TS0DWIXM ; 
  10 TS0DWSWC TS0DWSWC ; 
  10 TS0DWPSW TS0DWPSW ; 
  10 TS0DWSWR TS0DWSWR ; 
  10 TS0DWTSP TS0DWTSP ; 
  10 TS0DWMAP TS0DWMAP ; 
  10 TS0DWFSW TS0DWFSW ; 
  10 TS0DWCSK TS0DWCSK ; 
  10 TSACARCD TSACARCD ; 
  10 TSACARNM TSACARNM ; 
  10 TS0DWDFL TS0DWDFL ; 
  10 TS0DWSFL TS0DWSFL ; 
  10 TS0DWMFL TS0DWMFL ; 
  10 TS0DWURF TS0DWURF ; 
  10 TS0DWDEF TS0DWDEF ; 
  10 TS0DWIFL TS0DWIFL ; 
  10 TS0DWDTE TS0DWDTE ; 
    15 TS0DWCEN TS0DWCEN ; 
    15 TS0DWYMD TS0DWYMD ; 
  10 TS0DWTM1 TS0DWTM1 ; 
    15 TS0DWHR1 TS0DWHR1 ; 
    15 TS0DWC1 TS0DWC1 ; 
    15 TS0DWMN1 TS0DWMN1 ; 
    15 TS0DWC2 TS0DWC2 ; 
    15 TS0DWSEC TS0DWSEC ; 
  10 TS0DWTM3 TS0DWTM3 ; 
    15 TS0DWHR3 TS0DWHR3 ; 
    15 TS0DWMN3 TS0DWMN3 ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end TS0DW01

//*** RECORD=TS0DW02 ****
// Temporary storage record for TS0d - Agent Inquiry/Maint.
// ***********************
Record TS0DW02 type basicRecord
  10 TS0DWLEN TS0DWLEN ; 
  10 TS0DWLIN TS0DWLIN [14] ; 
    15 TS0DMSEL TS0DMSEL ; 
    15 TSBAGENT TSBAGENT ; 
    15 TSBTITLE TSBTITLE ; 
    15 TSBPHONE TSBPHONE ; 
end // end TS0DW02

//*** RECORD=TSBREC ****
// ************ TRANSPORTATION CARRIER AGENT TABLE ************
// 
// DB2 TABLE VIEW:      DTRANS.VAGENT01
// 
// COPYLIB MEMBER:      DCL00418
// 
// I/O MODULE:          IO1460
// 
// KEY TO DB2 TABLE:    TSACARCD
//                      TSBAGENT
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/20/87   SPOPA    New record.
// 02/23/94   SFORD    03/94 Table change resize xxx-addr1-3
// **********************
Record TSBREC type basicRecord
  5 TSBGROUP TSBGROUP ; 
    10 TSBKEY TSBKEY ; 
      15 TSACARCD TSACARCD ; 
      15 TSBAGENT TSBAGENT ; 
    10 TSBTITLE TSBTITLE ; 
    10 TSBPHONE TSBPHONE ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TSBREC

// selection field
DataItem TS0DMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Colon 1
DataItem TS0DWC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Colon 2
DataItem TS0DWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working century
DataItem TS0DWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change Save Key
DataItem TS0DWCSK char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Entered Flag
DataItem TS0DWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete flag
DataItem TS0DWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working date
DataItem TS0DWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Add/delete function switch
DataItem TS0DWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hour1
DataItem TS0DWHR1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hour3
DataItem TS0DWHR3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry flag
DataItem TS0DWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS0DWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0DWLIN char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0DWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Message flag
DataItem TS0DWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minute1
DataItem TS0DWMN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minute3
DataItem TS0DWMN3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0DWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second1
DataItem TS0DWSEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Selection flag
DataItem TS0DWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0DWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0DWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Time1
DataItem TS0DWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Time3
DataItem TS0DWTM3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current temporary storage page
DataItem TS0DWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Update reload flag
DataItem TS0DWURF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working year month day
DataItem TS0DWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_AGNT_NM
DataItem TSBAGENT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem TSBGROUP char(246)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem TSBKEY char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_AGNT_PH_NBR
DataItem TSBPHONE char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_AGNT_TITL
DataItem TSBTITLE char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

