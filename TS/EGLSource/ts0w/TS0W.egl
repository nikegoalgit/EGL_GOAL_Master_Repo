package ts0w;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0W ****
// This application allows the user to add a transportation
// tentative shipment.  The user will enter this application
// after selecting option 3 from the shipment add menu.
// 
// Only one screen will appear in this application.  The user
// will be able to enter shipment header information and pack-
// ing list information all on this one screen.
// 
// Shipment header information will be obtained by user infor-
// mation entered in the heading of the screen.
// 
// All packing list information will default to one generic
// container which this application will create.
// 
// Packing list information will be entered in the detail
// lines.  If more than one page of packing list information
// needs to be added, then the screen will scroll forward to
// provide a new page for packing list entry.  A new page will
// only be necessary when the last line of the current page is
// filled with information.  Pressing PF8 or ENTER will cause
// fresh packing list entry lines to appear.  If the last
// packing list detail line is left blank, then it will be
// assumed that the user has etered all information and will
// be transferred back to the accept of reject shipment
// application screen. (At least one packing list must be
// entered for the tentative shipment.)
// 
// The user will also be able to PF7 back through previously
// entered packing list information.
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          11/29/89 CEPPLE  New application.
// ts#000   06/16/90 CEPPLE  Add shipment type and hold code
//                           to the screen.  Give user ability
//                           to enter any po id regardless of
//                           whether multiple po #'s are
//                           returned.  If multiple the error
//                           message is displayed.
// TS#000   04/09/91 SFORD   Table Changes(set up time CPLHD01)
// TS#254   04/03/92 SFORD   Add S.O. fields to map.
// TS#999   08/13/93 SFORD   Table Changes(user id     CPLHD01)
// TS#999   11/08/93 NMASTE  Table Changes(OP1PARTN)
// TS#000   04/18/95 SLEWIS  CHG S.O. FIELD LENGTH
// TS#000   11/07/96 JCARL1  Remove alarm from msg display.
// TS#000   04/05/01 MLATHA  Prompt users and not allow them to
//                           add/maintain US&CANADA destination
//                           shipments  after dec3-2001.
// *********************
Program TS0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC4REC PC4REC; // record
  PC6REC PC6REC; // record
  PCFREC PCFREC; // record
  PCMREC PCMREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS0WW01 TS0WW01; // record
  TS0WW02 TS0WW02; // record
  TS0WW03 TS0WW03; // record
  TS0WW04 TS0WW04; // record
  TS5REC TS5REC; // record
  TSAREC TSAREC; // record
  TSCREC TSCREC; // record
  TSEREC TSEREC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSRREC TSRREC; // record
  TSSREC TSSREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use YSHTBL {deleteAfterUse = yes}; // table
  use YSSTBL {deleteAfterUse = yes}; // table
  use YSTTBL {deleteAfterUse = yes}; // table
  use TS0WM.TS0WM001,  // forms
      TS0WM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0WW01 empty; /* Initialize working storage*/
    set TS0WW02 empty;
    set TS0WW03 empty;
    set TS0WW04 empty;
    set FY1REC empty; /* Initialize records used*/
    set PC2REC empty;
    set PC3REC empty;
    set PC4REC empty;
    set PCFREC empty;
    set PCYREC empty;
    set PG2REC empty;
    set TAEREC empty;
    set TSAREC empty;
    set TSAREC empty;
    set TSCREC empty;
    set TSEREC empty;
    set TSFREC empty;
    set TSGREC empty;
    set TSHREC empty;
    set TSIREC empty;
    set TSRREC empty;
    set TSSREC empty;
    set TSTREC empty;
    set TS5REC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0WM001 initial; /* Initialize map1 output area*/

    TS0WW01.TS0WWPSW = "N"; /* Initialize problem switch*/
    TS0WW01.TS0WWPWF = "N"; /* Initialize po quantity warning flag*/
    TS0WW01.TS0WWNSF = "N"; /* Initialize negative SQL error flag*/
    TS0WW01.TS0WWSAF = "N"; /* Initialize shipment added flag*/
    TS0WW01.TS0WWCAF = "N"; /* Initialize container added flag*/
    TS0WW01.TS0WWFFL = "Y"; /* Initialize first time thru flag*/
    TS0WW01.TS0WWMIX = 1; /* Initialize ws-map-index*/
    TS0WW01.TS0WWMPX = 1; /* Initialize ws-map-position-index*/
    TS0WW01.TS0WWTIX = 1; /* Initialize ws-tbl-index*/
    TS0WW01.TS0WWPGE = 1; /* Initialize ws-page-counter*/
    TS0WW01.TS0WWCTR = 1; /* Initialize ws-container-counter*/
    TS0WW01.TS0WWPCK = 1; /* Initialize ws-packing-list-counter*/
    TS0WW01.TS0WWMCN = 8; /* Initialize max cntnr span number*/
    TS0WW01.TS0WWMAX = 200; /* Initialize max-table-lines*/

    goto TS0W000; /* Check valid from application*/


    TS0W000: TS0W000();
     /* ------------------------------------------------------------*/
     /* Special Initialization*/
     /* ------------------------------------------------------------*/

    goto TS0W001; /* Perform special initialization*/


    TS0W001: TS0W001();
     /* ------------------------------------------------------------*/
     /* Converse main processing*/
     /* ------------------------------------------------------------*/

    goto TS0W002; /* Converse Main Processing*/


    TS0W002: TS0W002();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Published Schedule Inquiry/Mainten.*/
     /* ------------------------------------------------------------*/

    goto TS0W002; /* Published Schedule inq/mnt*/


  end // end main
end // end TS0W

// Verify (S )    DREADO.VORHDRR1
Function TS0W-43110()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/


  if (TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0
   && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0)

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1CUOID = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM];
  OP1REC.OP1NORID = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM];
  OP1REC.OP1PARTN = TS0WW03.TS0WM-ORD-PART-CHAR[TS0WWIXM];


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (TS0WW03.PC2CUXID[TS0WWIXM] == " ") /* if no cust info*/

        TS0W-43111();

      end
      return; /* ===> return to previous process*/

    end


    /* ------------------------------------------------------------*/
     /* If row not found, indicate that invalid. "old way"*/
     /* Now: By-pass edit error of this type.*/
     /* Invalid S.O. NBRs will be handled*/
     /* as a warning in TS0W-49900.*/
     /* ie.) Do not stop the user with this type of edit.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* SET ts0wM001.ts0wM-CUST-ORD-ID(ts0wWIXM) CURSOR,BRIGHT;*/
      /* SET ts0wM001.ts0wM-NIKE-ORD-ID(ts0wWIXM) BRIGHT;*/
      /* MOVE 'Y' TO ts0wW01.ts0wWPSW;*/
      /* MOVE 'U-43110' TO ts0wM002.XXXPRCNM;*/
      /* MOVE 173 TO EZEMNO;          /* ===> invalid sales order nbr*/

      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TS0WW01.TS0WWPSW = "Y";
  TS0WM001.XXXPRCNM = "W-43110";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "W-43110"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] cursor, bold;
  set TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


   /* **                                                        ***/
   /* ********************** End of TS0W-43110 ********************/
end // end TS0W-43110

// Select (SA)    DPRODC.VPRDCU01
Function TS0W-43111()
   /* ------------------------------------------------------------*/
   /* Select Customer XREF & ISEG using store info from OP1REC*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = TSWREC.XGPCD;
  PC2REC.KUCCOID = OP1REC.KUCCOID;
  PC2REC.KUMSTRID = OP1REC.KUMSTRID;
  PC2REC.XNXCD = OP1REC.XNXCD;

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        TS0WW03.PC2CUXID[TS0WWIXM] = PC2REC.PC2CUXID;
        TS0WM001.PC2CUXID[TS0WWIXM] = PC2REC.PC2CUXID;
        TS0WW03.PC2INSEG[TS0WWIXM] = PC2REC.PC2INSEG;
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TS0WM001.XXXPRCNM = "W-43111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "W-43111"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


   /* **                                                        ***/
   /* ********************** End of TS0W-43111 ********************/
end // end TS0W-43111

// Verify P.O. NBR Entered
Function TS0W-43410()
   /* ------------------------------------------------------------*/
         /* VERIFY P.O. NUMBER*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = TS0WW03.PC3PONBR[TS0WWIXM]; /* P.O. type*/
  PCYREC.PCYFUNC = "S "; /* Select alternate*/

  TS0WS10(); /* select the po*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
    if (PC3REC.YPUCD == "OP" /* po open*/
     || PC3REC.YPUCD == "FC") /* or only factory closed*/
      TS0WW01.TS0WWDAT = PC3REC.PC3POIDT;
      TS0WW01.TS0WWPCC = TS0WW01.TS0WWPCN;
      TS0WW01.TS0WWPYR = TS0WW01.TS0WWPYY;
      TS0WW01.TS0WWPMQ = TS0WW01.TS0WWPM1;
      TS0WW01.TS0WWDMO = TS0WW01.TS0WWPM2;
      TS0WW01.TS0WWFCT = PC3REC.FY1FCTYC;
      if (TSWREC.XGPCD == "03")
        TS0WW01.TS0WWPYR = PC3REC.PCFSECD;
      end
      TS0WW03.TS0WMPOI[TS0WWIXM] = TS0WW01.TS0WWPOI;
      TS0WW03.PC4ORTYP[TS0WWIXM] = PC3REC.PC4ORTYP;
      if (TS0WM001.PC3PONBR[TS0WWIXM] != 0) /* If po # on screen*/
        TS0WM001.TS0WMPOI[TS0WWIXM] = TS0WW01.TS0WWPOI;
        TS0WM001.PC4ORTYP[TS0WWIXM] = PC3REC.PC4ORTYP;
      end
    else
      converseLib.validationFailed(267); /* po is closed or canceled*/
      TS0WM001.XXXPRCNM = "W-43410"; /* Process name*/
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      set TS0WM001.PC3PONBR[TS0WWIXM] cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
      converseLib.validationFailed(118); /* error message*/
      TS0WM001.XXXPRCNM = "W-43410"; /* Process name*/
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      set TS0WM001.PC3PONBR[TS0WWIXM] cursor, modified, bold;
    end
  end


   /* **                                                        ***/
   /* ********************** End of TS0W-43410 ********************/
end // end TS0W-43410

// Verify P.O. id entered
Function TS0W-43420()
   /* ------------------------------------------------------------*/
         /* VERIFY P.O. ID ENTERED*/
   /* ------------------------------------------------------------*/


  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.FY1FCTYC = TS0WW01.TS0WWFCT; /* Factory code*/
  TS0WW01.TS0WWPCN = TS0WW01.TS0WWPCC; /* redefine*/
  TS0WW01.TS0WWPYY = TS0WW01.TS0WWPYR;
  TS0WW01.TS0WWPM1 = TS0WW01.TS0WWPMQ;
  TS0WW01.TS0WWPM2 = TS0WW01.TS0WWDMO;
  PC3REC.PC3POIDT = TS0WW01.TS0WWDAT; /* P.O. id*/
  PC3REC.PC4ORTYP = TS0WW03.PC4ORTYP[TS0WWIXM]; /* P.O. type*/
  PCYREC.PCYFUNC = "SA"; /* Select alternate*/

  TS0WS10(); /* Select the p.o. id to obtain p.o. #*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
    if (PC3REC.YPUCD == "OP" /* po open*/
     || PC3REC.YPUCD == "FC") /* or only factory closed*/
      TS0WW03.PC3PONBR[TS0WWIXM] = PC3REC.PC3PONBR;
      if (TS0WM001.TS0WMPOI[TS0WWIXM] != " ") /* If po id on screen*/
        TS0WM001.PC3PONBR[TS0WWIXM] = PC3REC.PC3PONBR;
      end
    else
      converseLib.validationFailed(267); /* po is closed or canceled*/
      TS0WM001.XXXPRCNM = "W-43420"; /* Process name*/
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      set TS0WM001.PC3PONBR[TS0WWIXM] cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* Row does not exist*/
      converseLib.validationFailed(167); /* No data to display*/
      set TS0WM001.TS0WMPOI[TS0WWIXM] cursor, bold;
      set TS0WM001.PC4ORTYP[TS0WWIXM] bold;
      TS0WM001.XXXPRCNM = "W-43420"; /* Process name*/
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/
        converseLib.validationFailed(298); /* Multiple row error message*/
        set TS0WM001.PC3PONBR[TS0WWIXM] cursor;
        set TS0WM001.TS0WMPOI[TS0WWIXM] bold;
        set TS0WM001.PC4ORTYP[TS0WWIXM] bold;
        TS0WM001.XXXPRCNM = "W-43420"; /* Process name*/
        TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      end
    end
  end

   /* **                                                        ***/
   /* ********************** End of TS0W-43420 ********************/
end // end TS0W-43420

// Select (S )   DREADO.VORHDDR01
Function TS0W-47050()
   /* ------------------------------------------------------------*/
   /* data entered is OK.*/
   /* ------------------------------------------------------------*/


  if (TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0
   && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0)

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1CUOID = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM];
  OP1REC.OP1NORID = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM];
  OP1REC.OP1PARTN = TS0WW03.TS0WM-ORD-PART-CHAR[TS0WWIXM];


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* ===> return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TS0WW01.TS0WWPSW = "Y"; /* ===> problem switch*/

      TS0WW01.TS0WWPWF = "Y";
      TS0WW01.TS0WWWF7 = "Y";
      TS0WW01.TS0WWSH7[TS0WWIXM] = "Y";


      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
  end

  TS0WW01.TS0WWPSW = "Y";
  TS0WM001.XXXPRCNM = "W-47050";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "W-47050"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] cursor, bold;
  set TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


   /* **                                                        ***/
   /* ********************** End of TS0W-47050 ********************/
end // end TS0W-47050

// Verify item in S.O. database
Function TS0W-47100()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE S.O.*/

   /* ------------------------------------------------------------*/

  TS0W-47110(); /* ===> Select the set of SO items*/

  if (SQLCA.VAGen_SQLCODE == 0)

    TS0W-47120(); /* ===> Fetch 1st item*/

    if (SQLCA.VAGen_SQLCODE == 0)

      TS0WW03.TSISTAT[TS0WWIXM] = "99"; /* Reset status*/
      TS0WW03.XRECD[TS0WWIXM] = "99"; /* Reset exception code*/

    else

      if (SQLCA.VAGen_SQLCODE == 100)

   /* ------------------------------------------------------------*/

       /* Set appropriate switches for no S.O. item found*/

   /* ------------------------------------------------------------*/


        TS0WW01.TS0WWPSW = "Y"; /* Set problem switch*/
        TS0WW01.TS0WWPWF = "Y"; /* Set warning switch*/
        TS0WW01.TS0WWWF1 = "Y"; /* Set warning switch*/
        TS0WW03.XRECD[TS0WWIXM] = "PS"; /* Not on po excep code*/

        if (TS0WM001.SY1STNBR[TS0WWIXM] != "  "
         || TS0WM001.SY2CLRID[TS0WWIXM] != "  ")
          TS0WW01.TS0WWSH1[TS0WWIXM] = "Y"; /* set for highlights*/
        end

      end /* ===> SQL = 100 for fetch*/

    end /* ===> SQL = 0 for fetch*/

    TS0W-47130(); /* ===> Close the selected set*/

  end /* ===> SQL = 0 for select set*/

   /* **                                                        ***/
   /* ********************** End of TS0W-47100 ********************/
end // end TS0W-47100

// Select (S2) Set       VITEM0R1
Function TS0W-47110()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF SO ITEMS*/

   /* ------------------------------------------------------------*/

  set OP2REC empty;

  OP2REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  OP2REC.OP1CUOID = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM];
  OP2REC.OP1NORID = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM];
  OP2REC.OP1PARTN = TS0WW03.TS0WM-ORD-PART-CHAR[TS0WWIXM];
  OP2REC.SY1STNBR = TS0WW03.SY1STNBR[TS0WWIXM];
  OP2REC.SY2CLRID = TS0WW03.SY2CLRID[TS0WWIXM];
  OP2REC.XDMCD = TS0WW03.XDMCD[TS0WWIXM];

  call "IO4150" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "W-47110"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "W-47110"; /* Process name*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0W-47110 ********************/
end // end TS0W-47110

// Fetch  (N2) Next row  VITEM0R1
Function TS0W-47120()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DREADO.VITEMOR1*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/


  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

    if (OP2REC.OP2LNIST == "SH") /* accum qty*/
      TS0WW01.TS0WWPOQ = TS0WW01.TS0WWPOQ + OP2REC.OP2TSHPQ; /* accum qty*/
    else /* ===> use on-order qty bucket*/
      TS0WW01.TS0WWPOQ = TS0WW01.TS0WWPOQ + OP2REC.OP2TONOQ; /* accum qty*/
    end
  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      TS0WW01.TS0WWEFL = "Y"; /* end the loop*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0WW01.TS0WWEFL = "Y"; /* end the loop*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "W-47120"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "W-47120"; /* Map name*/
      TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0WM001.XXXPRCNM = "W-47120"; /* Process name*/

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0W-47120 ********************/
end // end TS0W-47120

// Close  (C2) Set       VITEM0R1
Function TS0W-47130()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DREADO.VITEM0R1*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "W-47130"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "W-47130"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0W-47130 ********************/
end // end TS0W-47130

// Verify item in P.O. database
Function TS0W-47200()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE P.O.*/

   /* ------------------------------------------------------------*/

  TS0W-47205(); /* Select the set of po items*/

  TS0WW01.TS0WWEFL = "N"; /* ===> end of data flag*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If Select OK*/
    TS0W472(); /* Fetch and accumulate on order qty*/
  end


  if (SQLCA.VAGen_SQLCODE == 0)

    TS0WW03.TSISTAT[TS0WWIXM] = "99"; /* Reset status*/
    TS0WW03.XRECD[TS0WWIXM] = "99"; /* Reset exception code*/
    TS0WW01.TS0WW-PREV-OP1CUOID = PC6REC.OP1CUOID;
    TS0WW01.TS0WW-PREV-OP1NORID = PC6REC.OP1NORID;

    TS0W-47210(); /* ===> Check for multiple sales orders*/

  else

    if (SQLCA.VAGen_SQLCODE == 100)

      TS0W-47220(); /* ===> set item not found switches*/

    end

  end

  if (SQLCA.VAGen_SQLCODE == 0 /* If fetch OK*/
   || SQLCA.VAGen_SQLCODE == 100)

    TS0W473(); /* Close the selected set*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0W-47200 ********************/
end // end TS0W-47200

// Select (SI)    DPRODC.VPOITM01
Function TS0W-47205()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TSWREC.XWHCD;
  PC6REC.PC3PONBR = TS0WW03.PC3PONBR[TS0WWIXM];
  PC6REC.SY1STNBR = TS0WW03.SY1STNBR[TS0WWIXM];
  PC6REC.SY2CLRID = TS0WW03.SY2CLRID[TS0WWIXM];
  PC6REC.XDMCD = TS0WW03.XDMCD[TS0WWIXM];
   /* MOVE TS0WW03.XQACD(TS0WWIXM) TO PC6REC.XQACD;*/
  PC6REC.XQACD = "*"; /* wildcard quality code*/
  PC6REC.XOWCD = TS0WW03.XOWCD[TS0WWIXM];
  PC6REC.PC2INSEG = TS0WW03.PC2INSEG[TS0WWIXM];
  PC6REC.XPGCD = TS0WW03.XPGCD[TS0WWIXM];
  PC6REC.XUMCD = TS0WW03.XUMCD[TS0WWIXM];
  PC6REC.PC2CUXID = TS0WW03.PC2CUXID[TS0WWIXM];

  if (TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] != 0
   && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] != 0)
    PC6REC.OP1CUOID = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM];
    PC6REC.OP1NORID = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM];
    PC6REC.OP1PARTN = TS0WW03.TS0WM-ORD-PART-CHAR[TS0WWIXM];
  else
    PC6REC.OP1CUOID = -1;
    PC6REC.OP1NORID = -1;
    PC6REC.OP1PARTN = "*";
  end

  PC6REC.PC6ETSDT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";

  PCYREC.PCYFUNC = "SI";
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "W-47205"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "W-47205"; /* Process name*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0W-47205 ********************/
end // end TS0W-47205

// Check for multiple S.O. Nbrs
Function TS0W-47210()
   /* ------------------------------------------------------------*/
   /* Check multiple sales orders existing in the*/
   /* P.O. System for a particular style.*/
   /* ------------------------------------------------------------*/

  while (TS0WW01.TS0WWEFL == "N") /* ===> end of data flag*/

    if (PC6REC.OP1CUOID == TS0WW01.TS0WW-PREV-OP1CUOID
     && PC6REC.OP1NORID == TS0WW01.TS0WW-PREV-OP1NORID)

      TS0W472(); /* Fetch P.O. Item*/

    else


      TS0WW01.TS0WWEFL = "Y"; /* ===> end of data flag*/
      TS0WW01.TS0WWPSW = "Y"; /* ===> problem switch*/

      TS0WW01.TS0WWPWF = "Y";
      TS0WW01.TS0WWWF6 = "Y";
      TS0WW01.TS0WWSH6[TS0WWIXM] = "Y";


    end

  end /* ===> while statement*/

   /* IF EZEMNO ^= 320;/* ===> no multiple sales orders exist*/
  if (TS0WW01.TS0WWSH6[TS0WWIXM] != "Y"
  )
    TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] = TS0WW01.TS0WW-PREV-OP1CUOID;

    TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] = TS0WW01.TS0WW-PREV-OP1NORID;

    TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] = TS0WW01.TS0WW-PREV-OP1CUOID;

    TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] = TS0WW01.TS0WW-PREV-OP1NORID;

  end

   /* **                                                        ***/
   /* ********************** End of TS0W-47210 ********************/
end // end TS0W-47210

// Set item not found switches
Function TS0W-47220()
   /* ------------------------------------------------------------*/

      /* Set appropriate switches for no P.O. item found*/

   /* ------------------------------------------------------------*/


  TS0WW01.TS0WWPSW = "Y"; /* Set problem switch*/
  TS0WW01.TS0WWPWF = "Y"; /* Set warning switch*/
  TS0WW01.TS0WWWF1 = "Y"; /* Set warning switch*/
  TS0WW03.TSISTAT[TS0WWIXM] = "99"; /* Not on po excep code*/
  TS0WW03.XRECD[TS0WWIXM] = "PS"; /* Not on po excep code*/
  if (TS0WM001.SY1STNBR[TS0WWIXM] != "  "
   || TS0WM001.SY2CLRID[TS0WWIXM] != "  ")
    TS0WW01.TS0WWSH1[TS0WWIXM] = "Y"; /* set for highlights*/
  end


   /* **                                                        ***/
   /* ********************** End of TS0W-47220 ********************/
end // end TS0W-47220

// Accumulate SO Item qtys
Function TS0W-48100()
   /* ------------------------------------------------------------*/

             /* Accumulate qtys from S.O. system*/

   /* ------------------------------------------------------------*/

  TS0W-47110(); /* ===> Select the set of SO items*/

   /* ===> Init accum ws*/
  TS0WW01.TS0WWPOQ = 0;
  if (SQLCA.VAGen_SQLCODE == 0)

    TS0WW01.TS0WWEFL = "N";

    while (TS0WW01.TS0WWEFL == "N")

      TS0W-47120(); /* ===> Fetch and accum shipped qty*/

    end /* ===> SQL = 0 for fetch*/

    if (TS0WW01.TS0WWEFL == "Y")
      TS0W-47130(); /* ===> Close the selected set*/
    end

  end /* ==== SQL = 0 for select set*/

   /* **                                                        ***/
   /* ********************** End of TS0W-48100 ********************/
end // end TS0W-48100

// Accumulate PO Item qtys
Function TS0W-48200()
   /* **********************************************************/
   /* Select set and accumulate po quantity for an item*/
   /* **********************************************************/

  TS0W471(); /* Select the set of po items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    TS0WW01.TS0WWPOQ = 0; /* Initialze po accum quantity*/
    TS0WW01.TS0WWEFL = "N"; /* Initialze end flag*/

    while (TS0WW01.TS0WWEFL == "N") /* While rows are found*/

      TS0W472(); /* Fetch and accumulate on order qty*/

      if (TS0WW01.TS0WWEFL == "Y") /* If end indicated*/
        TS0W473(); /* Close the selected set*/
      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0W-48200 ********************/
end // end TS0W-48200

// Accumulate Shipped Item qtys
Function TS0W-48300()
   /* **********************************************************/
   /* Select set and accumulate ship quantities for an item*/
   /* **********************************************************/


  TS0W481(); /* Select the set of po shipmnt items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    TS0WW01.TS0WWPLQ = 0; /* Initialze po accum quantity*/
    TS0WW01.TS0WWEFL = "N"; /* Initialze end flag*/

    while (TS0WW01.TS0WWEFL == "N") /* While rows are found*/

      TS0W482(); /* Fetch and accumulate on ship qty ttl*/

      if (TS0WW01.TS0WWEFL == "Y") /* If end indicated*/
        TS0W483(); /* Close the selected set*/
      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0W-48300 ********************/
end // end TS0W-48300

// Accumulate Receipt Item qtys
Function TS0W-48400()
        /* **********************************************************/
         /* Select set and accumulate receipt quantities for an item*/
        /* **********************************************************/


  TS0W484(); /* Select the set of receipts items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

    TS0WW01.TS0WWRCQ = 0; /* Initialze rcpt acc quantity*/
    TS0WW01.TS0WWEFL = "N"; /* Initialze end flag*/

    while (TS0WW01.TS0WWEFL == "N") /* While rows are found*/

      TS0W485(); /* Fetch and accumulate on rcpt qty ttl*/

      if (TS0WW01.TS0WWEFL == "Y") /* If end indicated*/
        TS0W486(); /* Close the selected set*/
      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0W-48400 ********************/
end // end TS0W-48400

// Check the FROM application
Function TS0W000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0I") /* From allowed application*/

     /* Obtain the current date for this application*/

    XX0XS01(); /* Obtain current date*/
    TS0WW01.TS0WWCDT = XX0XW01.XX0XWDAT; /* Move CCCYYMMDD*/
    TS0WW01.TS0WWMYY = TS0WW01.TS0WWYY; /* set up map date*/
    TS0WW01.TS0WWMMM = TS0WW01.TS0WWMM;
    TS0WW01.TS0WWMDD = TS0WW01.TS0WWDD;

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end TS0W000

// Obtain tolerance for gpc style
Function TS0W001()
   /* ------------------------------------------------------------*/

           /* Obtain tolerances for GPC Styles*/

   /* ------------------------------------------------------------*/

   /* ********************************************************/
   /* Obtain the tolerance for style hard error qty and pct*/
   /* and style soft error qty and pct*/
   /* ********************************************************/

  TS0WW01.TS0WWHEQ = 20;
  TS0WW01.TS0WWHEP = 10.00;
  TS0WW01.TS0WWSEQ = 10;
  TS0WW01.TS0WWSEP = 5.00;



end // end TS0W001

// Build Container map
Function TS0W002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0W100(); /* Format and display the map*/

  TS0W200(); /* Check attention identifier*/

  TS0W300(); /* Reset fields to normal intensity*/

  if (TS0WW01.TS0WWNSF == "N") /* If no negative sql codes encountered*/

    TS0W400(); /* Verify the entered data*/

  end

  TS0W500(); /* Process valid input request*/


end // end TS0W002

// Format and display the map
Function TS0W100()
   /* ------------------------------------------------------------*/
                /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no errors and not first time thru - clear detail*/
      /* lines, move working storage to screen.*/
   /* 2) Position cursor.*/
   /* 3) If the negative sql return code flag is set to yes -*/
      /* protect all map fields.*/
   /* 4) Converse the map.*/
   /* 5) Check for user ? pop up window inquiry.*/
   /* ------------------------------------------------------------*/

  if (TS0WW01.TS0WWPSW == "N" /* No error message to display*/
   && TS0WW01.TS0WWFFL == "N" /* and not first time thru*/
   && TS0WW01.TS0WWNSF == "N") /* and no neg sql codes encountered*/

    TS0WW01.TS0WWIXM = 1; /* initialize count index*/
    while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
      TS0WM001.PC3PONBR[TS0WWIXM] = 0; /* clear detail lines*/
      TS0WM001.TS0WMPOI[TS0WWIXM] = " ";
      TS0WM001.PC4ORTYP[TS0WWIXM] = " ";
      TS0WM001.PC2CUXID[TS0WWIXM] = " ";
      TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] = 0;
      TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] = 0;
      TS0WM001.SY1STNBR[TS0WWIXM] = " ";
      TS0WM001.SY2CLRID[TS0WWIXM] = " ";
      TS0WM001.TS0WMSHP[TS0WWIXM] = 0;
      TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
    end

    if (TS0WW02.PC3PONBR[1] > 0) /* If data exists in working storage*/
      TS0W110(); /* move ws to screen*/
    end

  end

  TS0WM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  if (TS0WW01.TS0WWPSW == "N") /* No error message to display*/

    if (TS0WM001.TSACARCD == " ") /* If container heading is missing*/
      set TS0WM001.TSACARCD cursor; /* set container cursor*/
    else
      set TS0WM001.PC3PONBR[1] cursor; /* set first detail cursor*/
    end

    TS0WM001.TSFNTRDT = TS0WW01.TS0WWCMD; /* move in notify rcvd dt*/
    TS0WM001.TSFSHPID = TSWREC.TSFSHPID; /* move in shipment id*/
    TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shipment id*/
    TSFREC.YSSCD = "IP"; /* save shipment status*/
    TS0WM001.YSSCD = "IP"; /* move in status code*/
    if ("IP" in YSSTBL.YSSCD)
      TS0WM001.YSSSDESC = YSSTBL.YSSSDESC[sysVar.arrayIndex];
    end /* status descr.*/

  end


   /* *************************************************************/
   /* If a negative SQL code encountered - protect all map fields*/
   /* *************************************************************/

  if (TS0WW01.TS0WWNSF == "Y") /* If negative SQL flag eq 'y'*/

    set TS0WM001.TSACARCD protect; /* protect header fields*/
    set TS0WM001.TS5CRAFT protect;
    set TS0WM001.TSFSHPNB protect;
    set TS0WM001.TSFRWRDR protect;
    set TS0WM001.TSEORIG protect;
    set TS0WM001.TSFDPRTE protect;
    set TS0WM001.TSFDSCHG protect;
    set TS0WM001.TSFDSCHE protect;
    set TS0WM001.TSEDEST protect;
    set TS0WM001.TSFDESTE protect;
    set TS0WM001.XWHCD protect;
    set TS0WM001.TSFNTRDT protect;
    set TS0WM001.YSTCD protect;
    set TS0WM001.YSHCD protect;
    set TS0WM001.TSFTCBM protect;
    set TS0WM001.TSFCMNT1 protect;
    set TS0WM001.TSFCMNT2 protect;

    TS0WW01.TS0WWIXM = 1; /* initialize count index*/
    while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
      set TS0WM001.PC3PONBR[TS0WWIXM] protect; /* protect detail*/
      set TS0WM001.TS0WMPOI[TS0WWIXM] protect;
      set TS0WM001.PC4ORTYP[TS0WWIXM] protect;
      set TS0WM001.PC2CUXID[TS0WWIXM] protect;
      set TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] protect;
      set TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] protect;
      set TS0WM001.SY1STNBR[TS0WWIXM] protect;
      set TS0WM001.SY2CLRID[TS0WWIXM] protect;
      set TS0WM001.TS0WMSHP[TS0WWIXM] protect;
      TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
    end

  end

  /* IF EZEMNO NE 0;                  /* No error message to display*/
  /* SET TS0WM001 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  converse TS0WM001 ;

  TS0WW01.TS0WWPSW = "N"; /* Reset problem switch*/

  TS0W120();
                                   /* check for user ? inquiry on csp codes*/


end // end TS0W100

// Move ws to screen
Function TS0W110()
   /* ------------------------------------------------------------*/

              /* MOVE WORKING STORAGE TO SCREEN*/

   /* 1) If ezeaid is pf8, scroll forward to display*/
      /* working storage or a new blank detail page.*/
   /* 2) If ezeaid is pf7, scroll back to show previously*/
      /* entered detail.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* PF8 pressed*/
   || converseVar.eventKey is enter) /* or ENTER is pressed*/
    TS0W111(); /* set the map ws position*/
    TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX + 6;
    if (TS0WW01.TS0WWTIX > TS0WW01.TS0WWMAX) /* if table index GT max*/
      converseLib.validationFailed(104); /* packing list exceeded msg*/
      TS0WM001.XXXPRCNM = "TS0W110"; /* process name*/
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    else
      TS0WW01.TS0WWPGE = TS0WW01.TS0WWPGE + 1; /* add 1 to page counter*/
      TS0WW01.TS0WWWK1 = TS0WW01.TS0WWMPX; /* save map pos index*/
      TS0WW01.TS0WWWK1 = TS0WW01.TS0WWWK1 + 6; /* add 6 to map pos index*/
      TS0WW01.TS0WWTIX = TS0WW01.TS0WWWK1; /* set map pos index*/
      TS0WW01.TS0WWMIX = 1; /* set map index to 1*/
      while (TS0WW01.TS0WWMIX <= 6 /* until end of page*/
       && TS0WW01.TS0WWTIX < TS0WW01.TS0WWMAX) /* and not over max*/
        if (TS0WW02.PC3PONBR[TS0WWTIX] > 0) /* if po exists move data*/
          TS0WM001.PC3PONBR[TS0WWMIX] = TS0WW02.PC3PONBR[TS0WWTIX];
          TS0WM001.TS0WMPOI[TS0WWMIX] = TS0WW02.TS0WMPOI[TS0WWTIX];
          TS0WM001.PC4ORTYP[TS0WWMIX] = TS0WW02.PC4ORTYP[TS0WWTIX];
          TS0WM001.PC2CUXID[TS0WWMIX] = TS0WW02.PC2CUXID[TS0WWTIX];
          TS0WM001.SY1STNBR[TS0WWMIX] = TS0WW02.SY1STNBR[TS0WWTIX];
          TS0WM001.SY2CLRID[TS0WWMIX] = TS0WW02.SY2CLRID[TS0WWTIX];
          TS0WM001.TS0WM-CUST-ORD-ID[TS0WWMIX] = TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX];
          TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWMIX] = TS0WW02.TS0WM-NIKE-ORD-ID[TS0WWTIX];
          TS0WM001.TS0WMSHP[TS0WWMIX] = TS0WW02.TS0WMSHP[TS0WWTIX];
          TS0WW02.TS0WWLIN[TS0WWTIX] = " "; /* delete the ws line*/
        else
          TS0WW01.TS0WWMIX = 7; /* get out of loop*/
        end
        TS0WW01.TS0WWMIX = TS0WW01.TS0WWMIX + 1; /* incr map indes*/
        TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX + 1; /* incr map indes*/
      end
    end
    TS0WW01.TS0WWTIX = TS0WW01.TS0WWIXM; /* restore table index*/
  else
    if (converseVar.eventKey is pf7) /* if PF7 was pressed*/
      if (TS0WW01.TS0WWMPX == 1) /* if map position index is 1*/
        converseLib.validationFailed(2); /* no more page to scroll back to*/
        TS0WM001.XXXPRCNM = "TS0W110"; /* process name*/
        TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
        TS0W112(); /* move in working storage*/
      else
        if (TS0WW01.TS0WWMPX < 7) /* if map position index is LT 7*/
          TS0WW01.TS0WWMPX = 1; /* initialize map pos index*/
          TS0W112(); /* move in working storage*/
        else
          TS0WW01.TS0WWMPX = TS0WW01.TS0WWMPX - 6; /* back whole page*/
          TS0W112(); /* move in working storage*/
        end
      end
    end
  end

end // end TS0W110

// Set map ws position
Function TS0W111()
   /* ------------------------------------------------------------*/

              /* SET MAP WORKING STORAGE POSITION*/

   /* Set the working storage position to the map position index*/
   /* plus one full page.*/

   /* ------------------------------------------------------------*/

  TS0WW01.TS0WWIXM = TS0WW01.TS0WWTIX; /* save the table index*/
  TS0WW01.TS0WWTIX = TS0WW01.TS0WWMPX; /* set table index*/
  TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX + 6; /* set index page ahead*/


end // end TS0W111

// move ws to page
Function TS0W112()
   /* ------------------------------------------------------------*/

                  /* MOVE WORKING STORAGE*/

      /* Move working storage detail to map.*/

   /* ------------------------------------------------------------*/

   /* ******************************************/
      /* Calculate the page*/
   /* ******************************************/

  TS0WW01.TS0WWWK1 = TS0WW01.TS0WWMPX; /* move to work index*/
  TS0WW01.TS0WWWK1 = TS0WW01.TS0WWWK1 + 10; /* add 10 to work index*/
  TS0WW01.TS0WWPGE = TS0WW01.TS0WWWK1 / 6; /* calculate page*/

   /* ******************************************/
      /* Move WS*/
   /* ******************************************/

  TS0WW01.TS0WWTIX = TS0WW01.TS0WWMPX; /* set table index*/
  TS0WW01.TS0WWMIX = 1; /* set map index*/
  while (TS0WW01.TS0WWMIX <= 6 /* while more detail lines*/
   && TS0WW01.TS0WWTIX < TS0WW01.TS0WWMAX) /* and LT max*/
    if (TS0WW02.PC3PONBR[TS0WWTIX] > 0) /* if po exists*/
      TS0WM001.PC3PONBR[TS0WWMIX] = TS0WW02.PC3PONBR[TS0WWTIX];
      TS0WM001.TS0WMPOI[TS0WWMIX] = TS0WW02.TS0WMPOI[TS0WWTIX];
      TS0WM001.PC4ORTYP[TS0WWMIX] = TS0WW02.PC4ORTYP[TS0WWTIX];
      TS0WM001.PC2CUXID[TS0WWMIX] = TS0WW02.PC2CUXID[TS0WWTIX];
      TS0WM001.SY1STNBR[TS0WWMIX] = TS0WW02.SY1STNBR[TS0WWTIX];
      TS0WM001.SY2CLRID[TS0WWMIX] = TS0WW02.SY2CLRID[TS0WWTIX];
      TS0WM001.TS0WM-CUST-ORD-ID[TS0WWMIX] = TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX];
      TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWMIX] = TS0WW02.TS0WM-NIKE-ORD-ID[TS0WWTIX];
      TS0WM001.TS0WMSHP[TS0WWMIX] = TS0WW02.TS0WMSHP[TS0WWTIX];
      TS0WW02.TS0WWLIN[TS0WWTIX] = " "; /* clear the ws line*/
    else
      TS0WW01.TS0WWMIX = 7; /* get out of loop*/
    end
    TS0WW01.TS0WWMIX = TS0WW01.TS0WWMIX + 1; /* incr map indes*/
    TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX + 1; /* incr map indes*/
  end

  TS0WW01.TS0WWTIX = TS0WW01.TS0WWMPX; /* set table index*/


end // end TS0W112

// Check for user ? code inquiry
Function TS0W120()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  TS0WW01.TS0WWDEF = "N"; /* set data entered flag to no*/

  if (TS0WM001.XWHCD == "?" /* if any ? entered*/
   || TS0WM001.YSTCD == "?" 
   || TS0WM001.YSHCD == "?")

    if (TS0WM001.XWHCD == "?") /* if ? in container type field*/
      TS0WW01.TS0WWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                WAREHOUSE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* perform warehouse window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the container  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0WM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
      else
        TS0WM001.XWHCD = " "; /* clear fields*/
      end
    end

    if (TS0WM001.YSTCD == "?") /* if ? in shipment type field*/
      TS0WW01.TS0WWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              SHIPMENT TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYST01(); /* perform shipment type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the shipment   **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0WM001.YSTCD = YSTTBL.YSTCD[XX0XWPIX]; /* move code*/
        TS0WM001.YSTSDESC = YSTTBL.YSTSDESC[XX0XWPIX]; /* move name*/
      else
        TS0WM001.YSTCD = " "; /* clear fields*/
        TS0WM001.YSTSDESC = " ";
      end
    end

    if (TS0WM001.YSHCD == "?") /* if ? in shipment hold field*/
      TS0WW01.TS0WWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                HOLD CODE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSH01(); /* perform shipment hold window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the shipment   **/
       /* *  hold table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0WM001.YSHCD = YSHTBL.YSHCD[XX0XWPIX]; /* move code*/
        TS0WM001.YSHSDESC = YSHTBL.YSHSDESC[XX0XWPIX]; /* move name*/
      else
        TS0WM001.YSHCD = " "; /* clear fields*/
        TS0WM001.YSHSDESC = " ";
      end
    end

  end

  if (TS0WW01.TS0WWDEF == "Y") /* if a pop up window was displayed*/
    converseLib.clearScreen();
     /* restore the original map*/
  end


end // end TS0W120

// Check attention identifier
Function TS0W200()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2 /* PA2 was pressed*/
   || converseVar.eventKey is pf3) /* or PF3 was pressed*/
    COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/
    TSWREC.TSWREJFL = "Y"; /* set shipment rejection flag*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data in*/
    XSTSS01(); /* transfer to application*/
    TS0WW01.TS0WWPSW = "Y"; /* if fails, then indicate error*/
    TS0WM001.XXXPRCNM = "TS0W200"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    TS0WM001.XXXPRCNM = "TS0W200"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0W200

// Reset highlighted fields
Function TS0W300()
   /* ------------------------------------------------------------*/

             /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset header fields normal intensity.*/
   /* 2) Reset all detail fields normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0WM001.TSACARCD initialAttributes; /* defined header fields*/
  set TS0WM001.TS5CRAFT initialAttributes;
  set TS0WM001.TSFSHPNB initialAttributes;
  set TS0WM001.TSFRWRDR initialAttributes;
  set TS0WM001.TSEORIG initialAttributes;
  set TS0WM001.TSFDPRTE initialAttributes;
  set TS0WM001.TSFDSCHG initialAttributes;
  set TS0WM001.TSFDSCHE initialAttributes;
  set TS0WM001.TSEDEST initialAttributes;
  set TS0WM001.TSFDESTE initialAttributes;
  set TS0WM001.XWHCD initialAttributes;
  set TS0WM001.TSFNTRDT initialAttributes;
  set TS0WM001.YSTCD initialAttributes;
  set TS0WM001.YSHCD initialAttributes;
  set TS0WM001.TSFTCBM initialAttributes;
  set TS0WM001.TSFCMNT1 initialAttributes;
  set TS0WM001.TSFCMNT2 initialAttributes;

  TS0WW01.TS0WWIXM = 1; /* Initialize line index*/

  while (TS0WW01.TS0WWIXM <= 6) /* Until end of lines*/
    set TS0WM001.PC3PONBR[TS0WWIXM] initialAttributes;
    set TS0WM001.TS0WMPOI[TS0WWIXM] initialAttributes;
    set TS0WM001.PC4ORTYP[TS0WWIXM] initialAttributes;
    set TS0WM001.PC2CUXID[TS0WWIXM] initialAttributes;
    set TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] initialAttributes;
    set TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] initialAttributes;
    set TS0WM001.SY1STNBR[TS0WWIXM] initialAttributes;
    set TS0WM001.SY2CLRID[TS0WWIXM] initialAttributes;
    set TS0WM001.TS0WMSHP[TS0WWIXM] initialAttributes;
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* Increment line index*/
  end


end // end TS0W300

// Verify the entered data
Function TS0W400()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ENTERED DATA*/

   /* 1) If the map is not empty*/
      /* and pf7, pf8, or enter was pressed;*/
      /* a) Verify an initial P.O. entry.*/
      /* b) If no errors and a style has been entered*/
         /* - verify all detail edits from bottom to top.*/
           /* by calling edits in group1 and group2 until*/
           /* all entered detail has been edited.*/
      /* c) Perform header edits.*/

   /* ------------------------------------------------------------*/

   /* **************************************************/
      /* Check to see if any data exists on the screen*/
   /* **************************************************/

  TS0WW01.TS0WWDEF = "N"; /* initialize data entered flag*/
  if (TS0WM001.TSACARCD == " " /* if header fields empty*/
   && TS0WM001.TS5CRAFT == " " 
   && TS0WM001.TSFSHPNB == " " 
   && TS0WM001.TSFRWRDR == " " 
   && TS0WM001.TSEORIG == " "  
   && TS0WM001.TSFDPRTE == " " 
   && TS0WM001.TSFDSCHG == " " 
   && TS0WM001.TSFDSCHE == " " 
   && TS0WM001.TSEDEST == " "  
   && TS0WM001.TSFDESTE == " " 
   && TS0WM001.XWHCD == " "    
   && TS0WM001.TSFNTRDT == " " 
   && TS0WM001.TSFTCBM == 0    
   && TS0WM001.TSFCMNT1 == " " 
   && TS0WM001.TSFCMNT2 == " ")

     /* next sentence*/

  else
    TS0WW01.TS0WWDEF = "Y"; /* set data entered flag*/
  end

  TS0WW01.TS0WWIXM = 1; /* set index to 1*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WM001.TS0WMSHP[TS0WWIXM] == 0 /* if detail line blank*/
     && TS0WM001.PC3PONBR[TS0WWIXM] == 0 
     && TS0WM001.TS0WMPOI[TS0WWIXM] == " "
     && TS0WM001.PC4ORTYP[TS0WWIXM] == " "
     && TS0WM001.PC2CUXID[TS0WWIXM] == " "
     && TS0WM001.SY1STNBR[TS0WWIXM] == " "
     && TS0WM001.SY2CLRID[TS0WWIXM] == " "
     && TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0
     && TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0)

       /* next sentence*/

    else
      TS0WW01.TS0WWDEF = "Y"; /* set data entered flag*/
      TS0WW01.TS0WWIXM = 7; /* end loop*/
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end

   /* *********************************************************/
      /* If data did exist on the screen, perform the edits*/
   /* *********************************************************/

  if (TS0WW01.TS0WWDEF == "Y") /* if data exists on the screen*/

    TS0W410(); /* cascade map data into ws*/

    if (converseVar.eventKey is enter /* if ENTER is pressed*/
     || converseVar.eventKey is pf7   /* or pf7 is pressed*/
     || converseVar.eventKey is pf8)  /* or pf8 is pressed*/

      TS0WW01.TS0WWIXM = 6; /* initialize index*/
      while (TS0WW01.TS0WWIXM > 0) /* until end of detail*/
        if (TS0WW03.TS0WMSHP[TS0WWIXM] == 0 /* if detail line blank*/
         && TS0WW03.PC3PONBR[TS0WWIXM] == 0 
         && TS0WW03.TS0WMPOI[TS0WWIXM] == " "
         && TS0WW03.PC4ORTYP[TS0WWIXM] == " "
         && TS0WW03.PC2CUXID[TS0WWIXM] == " "
         && TS0WW03.SY1STNBR[TS0WWIXM] == " "
         && TS0WW03.SY2CLRID[TS0WWIXM] == " "
         && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0
         && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0)

           /* next sentence*/

        else
          TS0W420(); /* group 1 detail edits*/
          TS0W430(); /* group 2 detail edits*/
        end
        TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM - 1; /* decrement index*/
      end

      TS0W440(); /* header edits*/

      if (TS0WWPSW == "N") /* if no other errors have occurred*/
        TS0W450(); /* check for duplicate packing lists*/
      end

      if (TS0WWPSW == "N") /* if no other errors have occurred*/

        /* **************************************************/
            /* Check to see if PO quantity warning flags*/
            /* needs to be reset, because of data changes.*/
        /* **************************************************/

        if (TS0WW01.TS0WWPWF == "Y") /* If the warning flag is set*/
          TS0W460(); /* Check any data changed to reset warn*/
                                   /* flag*/
        end

        TS0WW04.TS0WWGR4 = TS0WW03.TS0WWGR3; /* Save screen data*/

        if (TS0WW01.TS0WWPWF == "N") /* If no warning flag set*/
          TS0W470(); /* Verify the item on po*/
          TS0W480(); /* Verify quantities against po*/
        end

        if (TS0WW01.TS0WWWF1 == "Y" /* If any array warnings set*/
         || TS0WW01.TS0WWWF2 == "Y" 
         || TS0WW01.TS0WWWF3 == "Y" 
         || TS0WW01.TS0WWWF4 == "Y")
          TS0WW01.TS0WWPSW = "Y"; /* Set problem switch*/
          TS0W490(); /* Process warnings*/
        else
          TS0WW01.TS0WWPWF = "N"; /* Reset warning flag*/
        end

      end

    end
  end


end // end TS0W400

// Cascade data into ws
Function TS0W410()
   /* ------------------------------------------------------------*/

             /* CASCADE DATA INTO WORKING STORAGE*/

      /* This process will cascade the screen data entered by*/
      /* the user into a working storage record in order to*/
      /* fill in all blanks left by the user in the map.*/

   /* ------------------------------------------------------------*/
   /* ** Clear most of w03 working storage ***/
  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail*/
    TS0WW03.TS0WMSHP[TS0WWIXM] = 0;
    TS0WW03.PC3PONBR[TS0WWIXM] = 0;
    TS0WW03.TS0WMPOI[TS0WWIXM] = " ";
    TS0WW03.PC4ORTYP[TS0WWIXM] = " ";
    TS0WW03.PC2CUXID[TS0WWIXM] = " ";
    TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] = 0;
    TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] = 0;
    TS0WW03.SY1STNBR[TS0WWIXM] = " ";
    TS0WW03.SY2CLRID[TS0WWIXM] = " ";
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end


   /* ***********************************/
       /* cascade p.o. number*/
   /* ***********************************/

  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  TS0WW01.PC3PONBR = TS0WM001.PC3PONBR[TS0WWIXM];
  TS0WW03.PC3PONBR[TS0WWIXM] = TS0WM001.PC3PONBR[TS0WWIXM];

  TS0WW01.TS0WWIXM = 2; /* increment index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WM001.PC3PONBR[TS0WWIXM] == 0   /* if blank on screen*/
     && TS0WM001.TS0WMPOI[TS0WWIXM] == " " /* and no overriding po id*/
     && TS0WM001.PC4ORTYP[TS0WWIXM] == " ")
      TS0WW03.PC3PONBR[TS0WWIXM] = TS0WW01.PC3PONBR;
    else
      TS0WW01.PC3PONBR = TS0WM001.PC3PONBR[TS0WWIXM];
      TS0WW03.PC3PONBR[TS0WWIXM] = TS0WM001.PC3PONBR[TS0WWIXM];
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade p.o. id*/
   /* ***********************************/

  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  TS0WW01.TS0WMPOI = TS0WM001.TS0WMPOI[TS0WWIXM];
  TS0WW03.TS0WMPOI[TS0WWIXM] = TS0WM001.TS0WMPOI[TS0WWIXM];

  TS0WW01.TS0WWIXM = 2; /* increment index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WM001.TS0WMPOI[TS0WWIXM] == " ") /* if blank on screen*/
      TS0WW03.TS0WMPOI[TS0WWIXM] = TS0WW01.TS0WMPOI;
    else
      TS0WW01.TS0WMPOI = TS0WM001.TS0WMPOI[TS0WWIXM];
      TS0WW03.TS0WMPOI[TS0WWIXM] = TS0WM001.TS0WMPOI[TS0WWIXM];
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade order type*/
   /* ***********************************/

  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  TS0WW01.PC4ORTYP = TS0WM001.PC4ORTYP[TS0WWIXM];
  TS0WW03.PC4ORTYP[TS0WWIXM] = TS0WM001.PC4ORTYP[TS0WWIXM];

  TS0WW01.TS0WWIXM = 2; /* increment index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WM001.PC4ORTYP[TS0WWIXM] == " ") /* if blank on screen*/
      TS0WW03.PC4ORTYP[TS0WWIXM] = TS0WW01.PC4ORTYP;
    else
      TS0WW01.PC4ORTYP = TS0WM001.PC4ORTYP[TS0WWIXM];
      TS0WW03.PC4ORTYP[TS0WWIXM] = TS0WM001.PC4ORTYP[TS0WWIXM];
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade customer xref*/
   /* ***********************************/

  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  TS0WW01.PC2CUXID = TS0WM001.PC2CUXID[TS0WWIXM];
  TS0WW03.PC2CUXID[TS0WWIXM] = TS0WM001.PC2CUXID[TS0WWIXM];

  TS0WW01.TS0WWIXM = 2; /* increment index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WM001.PC2CUXID[TS0WWIXM] == " " /* if blank on screen*/
     && TS0WM001.SY1STNBR[TS0WWIXM] == " ") /* and style is blank*/
      TS0WW03.PC2CUXID[TS0WWIXM] = TS0WW01.PC2CUXID;
    else
      TS0WW01.PC2CUXID = TS0WM001.PC2CUXID[TS0WWIXM];
      TS0WW03.PC2CUXID[TS0WWIXM] = TS0WM001.PC2CUXID[TS0WWIXM];
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade style*/
   /* ***********************************/

  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  TS0WW01.SY1STNBR = TS0WM001.SY1STNBR[TS0WWIXM];
  TS0WW03.SY1STNBR[TS0WWIXM] = TS0WM001.SY1STNBR[TS0WWIXM];

  TS0WW01.TS0WWIXM = 2; /* increment index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WM001.SY1STNBR[TS0WWIXM] == " ") /* if blank on screen*/
      TS0WW03.SY1STNBR[TS0WWIXM] = TS0WW01.SY1STNBR;
    else
      TS0WW01.SY1STNBR = TS0WM001.SY1STNBR[TS0WWIXM];
      TS0WW03.SY1STNBR[TS0WWIXM] = TS0WM001.SY1STNBR[TS0WWIXM];
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade color*/
   /* ***********************************/

  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  TS0WW01.SY2CLRID = TS0WM001.SY2CLRID[TS0WWIXM];
  if (TS0WW01.SY2CLRID == " ") /* if color is blank*/
    TS0WW01.SY2CLRID = "00 "; /* default to '00 '*/
  end
  TS0WW03.SY2CLRID[TS0WWIXM] = TS0WW01.SY2CLRID;

  TS0WW01.TS0WWIXM = 2; /* increment index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WM001.SY2CLRID[TS0WWIXM] == " ") /* if blank on screen*/
      TS0WW03.SY2CLRID[TS0WWIXM] = TS0WW01.SY2CLRID;
    else
      TS0WW01.SY2CLRID = TS0WM001.SY2CLRID[TS0WWIXM];
      TS0WW03.SY2CLRID[TS0WWIXM] = TS0WM001.SY2CLRID[TS0WWIXM];
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* move all other fields*/
   /* ***********************************/

  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    TS0WW03.TS0WMSHP[TS0WWIXM] = TS0WM001.TS0WMSHP[TS0WWIXM];
    TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] = TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM];
    TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] = TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM];
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end

   /* ********************************************/
     /* clear fields that have no values in them*/
   /* ********************************************/

  TS0WW01.TS0WWIXM = 1; /* initialize index*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WM001.TS0WMSHP[TS0WWIXM] == 0 /* if detail line blank*/
     && TS0WM001.PC3PONBR[TS0WWIXM] == 0 
     && TS0WM001.TS0WMPOI[TS0WWIXM] == " "
     && TS0WM001.PC4ORTYP[TS0WWIXM] == " "
     && TS0WM001.PC2CUXID[TS0WWIXM] == " "
     && TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0
     && TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0
     && TS0WM001.SY1STNBR[TS0WWIXM] == " "
     && TS0WM001.SY2CLRID[TS0WWIXM] == " ")

      TS0WW03.PC3PONBR[TS0WWIXM] = 0; /* clear cascaded keys*/
      TS0WW03.TS0WMPOI[TS0WWIXM] = " ";
      TS0WW03.PC4ORTYP[TS0WWIXM] = " ";
      TS0WW03.PC2CUXID[TS0WWIXM] = " ";
      TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] = 0;
      TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] = 0;
      TS0WW03.SY1STNBR[TS0WWIXM] = " ";
      TS0WW03.SY2CLRID[TS0WWIXM] = " ";

    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end


end // end TS0W410

// group 1 edits
Function TS0W420()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 1*/

       /* Edits;*/
         /* 1) move in default values for;*/
            /* . owner group*/
            /* . unit of measure*/
            /* . package type*/
            /* . quality code*/
            /* . spec code*/
            /* . dimension*/
         /* 2) ship quanity*/

   /* ------------------------------------------------------------*/

   /* **************************************/
           /* owner group*/
   /* **************************************/
  TS0WW03.XOWCD[TS0WWIXM] = "00"; /* default to '00'*/

   /* **************************************/
           /* unit of measure*/
   /* **************************************/
  TS0WW03.XUMCD[TS0WWIXM] = "01"; /* default to '01'*/

   /* **************************************/
           /* package type*/
   /* **************************************/
  TS0WW03.XPGCD[TS0WWIXM] = "00"; /* default to '00'*/

   /* **************************************/
           /* quality code*/
   /* **************************************/
  if (TSWREC.XGPCD == "02" /* ===> B-Grade whse*/
   && TS0WW03.PC3PONBR[TS0WWIXM] == 0
   && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] > 0)
    TS0WW03.XQACD[TS0WWIXM] = "02"; /* default to '02'*/
  else
    TS0WW03.XQACD[TS0WWIXM] = "01"; /* default to '01'*/
  end

   /* **************************************/
           /* spec code*/
   /* **************************************/
  TS0WW03.PC2INSEG[TS0WWIXM] = "000"; /* default to '000'*/

   /* **************************************/
           /* dimension*/
   /* **************************************/
  TS0WW03.XDMCD[TS0WWIXM] = "00"; /* default to '00'*/


   /* **************************************/
           /* ship quantity*/
   /* **************************************/

  if (TS0WW03.TS0WMSHP[TS0WWIXM] <= 0) /* if ship quantity less than 0*/
    converseLib.validationFailed(112); /* Display error message*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
    TS0WM001.XXXPRCNM = "TS0W420"; /* Process name*/
    set TS0WM001.TS0WMSHP[TS0WWIXM] cursor, modified, bold;
  end


end // end TS0W420

// group 2 edits
Function TS0W430()
   /* ------------------------------------------------------------*/

                 /* EDIT GROUPING 2*/

   /* 1) check style/color in database*/
   /* 2) check customer xref in database*/
   /* 3) verify correct p.o. id fields*/
   /* 4) verify that p.o. number or p.o. id is entered*/
   /* 5) if no errors found so far*/
      /* - verify that po exists for keys and check quantities*/

   /* ------------------------------------------------------------*/

   /* ***********************************/
   /* Verify style/color*/
   /* ***********************************/

  if (TS0WW03.SY1STNBR[TS0WWIXM] == " ") /* if style is missing*/
    converseLib.validationFailed(114); /* error message*/
    TS0WM001.XXXPRCNM = "TS0W430"; /* Process name*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    set TS0WM001.SY1STNBR[TS0WWIXM] cursor, modified, bold;
  else
    PG2REC.SY1STNBR = TS0WW03.SY1STNBR[TS0WWIXM]; /* move keys*/
    PG2REC.SY2CLRID = TS0WW03.SY2CLRID[TS0WWIXM];

    TS0W431(); /* select style/color combination*/

    if (SQLCA.VAGen_SQLCODE == 100) /* style color not found*/
      converseLib.validationFailed(113); /* error message*/
      TS0WM001.XXXPRCNM = "TS0W430"; /* Process name*/
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      set TS0WM001.SY1STNBR[TS0WWIXM] cursor, modified, bold;
      set TS0WM001.SY2CLRID[TS0WWIXM] modified, bold;
    end
  end

   /* ***********************************/
   /* Verify S.O. Number*/
   /* ***********************************/

  TS0W-43110(); /* verify sales order entered*/


   /* ***********************************/
   /* Verify customer x-ref*/
   /* ***********************************/

  if (TS0WW03.PC2CUXID[TS0WWIXM] != " ") /* if cust exists*/

    TS0W432(); /* select the cust xref*/

    if (SQLCA.VAGen_SQLCODE == 100) /* if cust not found*/
      converseLib.validationFailed(161); /* error message*/
      TS0WM001.XXXPRCNM = "TS0W430"; /* Process name*/
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      if (TS0WM001.PC2CUXID[TS0WWIXM] != " ") /* if cust exists*/
        set TS0WM001.PC2CUXID[TS0WWIXM] cursor, bold;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* if cust found*/
        TS0WW03.PC2INSEG[TS0WWIXM] = PC2REC.PC2INSEG;
      end
    end
  end

   /* ***********************************/
   /* Verify p.o. id fields seperately*/
   /* ***********************************/

  if (TS0WW03.PC3PONBR[TS0WWIXM] == 0) /* if no po number was entered*/
    TS0W433(); /* Edit po id fields seperately*/
  end


   /* ***********************************/
   /* Verify p.o. or p.o. id are*/
      /* entered and valid*/
   /* ***********************************/

  TS0W434(); /* Edit po # or po id*/


end // end TS0W430

// Select style/color
Function TS0W431()
   /* ------------------------------------------------------------*/

                 /* SELECT STYLE/COLOR*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* clear record*/

  PG2REC.XGPCD = TSWREC.XGPCD; /* move keys*/
  PG2REC.SY1STNBR = TS0WW03.SY1STNBR[TS0WWIXM];
  PG2REC.SY2CLRID = TS0WW03.SY2CLRID[TS0WWIXM];
  PG2REC.XDMCD = TS0WW03.XDMCD[TS0WWIXM];

  TA1REC.TA1PGMNM = "TS0W431"; /* Process name*/
  TA1REC.TA1MAP = "TS0WM001"; /* Map name*/

  XSPG202(); /* Select the style/color*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0WW01.TS0WWPSW = "Y"; /* Indicate Problem*/
    TS0WM001.XXXPRCNM = "TS0W431"; /* Process name*/
  end


end // end TS0W431

// Select row in DPRODC.VPRDCU01
Function TS0W432()
   /* ------------------------------------------------------------*/
   /* select Customer Xref*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = TSWREC.XGPCD;
  PC2REC.PC2CUXID = TS0WW03.PC2CUXID[TS0WWIXM];

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TS0WM001.XXXPRCNM = "TS0W432"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "TS0W432"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS0W432

// Verify the P.O. id fields
Function TS0W433()
   /* ------------------------------------------------------------*/

      /* VERIFY THE ENTRY OF EACH P.O. ID FIELD SEPERATELY*/

     /* If any part of the p.o. id entered*/

     /* Verify:  1) PO order type entered and equal to 'FT'*/
              /* 2) Factory code entered and correct.*/
              /* 3) Delivery month entered and correct.*/
              /* 4) Month entered and correct.*/
              /* 5) Year entered and correct.*/

   /* ------------------------------------------------------------*/

  TS0WW01.TS0WWIDS = "N"; /* Initialize po id and type*/
  TS0WW01.TS0WWIPI = "N"; /* Initialize po id indicator*/
  TS0WW01.TS0WWIOT = "N"; /* Initialize invalid order type id*/

  if (TS0WW03.TS0WMPOI[TS0WWIXM] != " " /* If any fields entered.*/
   || TS0WW03.PC4ORTYP[TS0WWIXM] != " ")

    TS0WW01.TS0WWPOI = TS0WW03.TS0WMPOI[TS0WWIXM]; /* reform field*/

    /* ------------------------------------------------------------*/
     /* Verify po id order type*/
    /* ------------------------------------------------------------*/

    if (TS0WW03.PC4ORTYP[TS0WWIXM] == "  ") /* Nothing there*/
      converseLib.validationFailed(220); /* Invalid order type entered*/
      TS0WW01.TS0WWIDS = "Y"; /* Invalid po id / type*/
      TS0WW01.TS0WWIOT = "Y"; /* Indicate invalid order type*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W435";
      if (TS0WW01.TS0WWIXM == 1
       || TS0WM001.PC4ORTYP[TS0WWIXM] != " ")
        set TS0WM001.PC4ORTYP[TS0WWIXM] cursor, bold;
      end
    else
      set PC4REC empty;
      PC4REC.XGPCD = TSWREC.XGPCD;
      PC4REC.PC4ORTYP = TS0WW03.PC4ORTYP[TS0WWIXM];
      TS0WS06(); /* Select order type*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
         /* continue on*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
          TS0WW01.TS0WWIDS = "Y"; /* Invalid po id / type*/
          TS0WW01.TS0WWIOT = "Y"; /* Indicate invalid order type*/
          TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
          TS0WM001.XXXPRCNM = "TS0W435";
          converseLib.validationFailed(220);
          if (TS0WW01.TS0WWIXM == 1
           || TS0WM001.PC4ORTYP[TS0WWIXM] != " ")
            set TS0WM001.PC4ORTYP[TS0WWIXM] cursor, bold;
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* FACTORY CODE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0WW01.TS0WWFCT == " ") /* Nothing there*/
      TS0WW01.TS0WWIPI = "Y"; /* Indicate invalid po id*/
      TS0WW01.TS0WWIDS = "Y"; /* Invalid po id / type*/
    else
      FY1REC.FY1FCTYC = TS0WW01.TS0WWFCT; /* Search key*/
      FY1REC.XGPCD = TSWREC.XGPCD; /* gpc*/

      TS0WS05(); /* select the factory row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
         /* continue on*/
      else
        TS0WW01.TS0WWIPI = "Y"; /* Indicate invalid po id*/
        TS0WW01.TS0WWIDS = "Y"; /* Invalid po id / type*/
      end
    end

    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0WW01.TS0WWDMO >= "01" /* If valid month entered*/
     && TS0WW01.TS0WWDMO <= "12")
       /* continue on*/
    else
      TS0WW01.TS0WWIPI = "Y"; /* Indicate invalid po id*/
      TS0WW01.TS0WWIDS = "Y"; /* Invalid po id / type*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0WW01.TS0WWPMQ >= "01" /* Something there*/
     && TS0WW01.TS0WWPMQ <= "12")
       /* continue on*/
    else
      TS0WW01.TS0WWIPI = "Y"; /* Indicate invalid po id*/
      TS0WW01.TS0WWIDS = "Y"; /* Invalid po id / type*/
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0WW01.TS0WWPYR >= "00"
     && TS0WW01.TS0WWPYR <= "99")
      if (TS0WW01.TS0WWPYR > "85")
        TS0WW01.TS0WWPCC = "19";
      else
        TS0WW01.TS0WWPCC = "20";
      end
    else
      if (TS0WW01.TS0WWPY1 >= "A"
       && TS0WW01.TS0WWPY1 <= "Z"
       && TS0WW01.TS0WWPY2 >= "0"
       && TS0WW01.TS0WWPY2 <= "9")
        TS0WS07(); /* Select the set of season years*/
        if (SQLCA.VAGen_SQLCODE == 0)
          TS0WS08(); /* Fetch the first row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
            TS0WW01.TS0WWCYR = PCFREC.PCFSEYR;
            TS0WW01.TS0WWPYR = TS0WW01.TS0WWCYY;
            TS0WW01.TS0WWPCC = TS0WW01.TS0WWCCC;
          else
            TS0WW01.TS0WWIPI = "Y"; /* Indicate invalid po id*/
            TS0WW01.TS0WWIDS = "Y"; /* Invalid po id / type*/
          end
          TS0WS09(); /* Close the set*/
        end
      else
        TS0WW01.TS0WWIPI = "Y"; /* Indicate invalid po id*/
        TS0WW01.TS0WWIDS = "Y"; /* Invalid po id / type*/
      end
    end

    if (TS0WW01.TS0WWIPI == "Y") /* Indicate invalid po id*/
      TS0WW01.TS0WWPSW = "Y";
      TS0WM001.XXXPRCNM = "TS0W433";
      converseLib.validationFailed(167);
      if (TS0WW01.TS0WWIXM == 1
       || TS0WM001.TS0WMPOI[TS0WWIXM] != " ")
        set TS0WM001.TS0WMPOI[TS0WWIXM] cursor, bold;
      end
    end

    if (TS0WW01.TS0WWIDS == "Y") /* Indicate invalid po id and type*/
      TS0WW01.TS0WWPSW = "Y";
    end

  end


end // end TS0W433

// Verify po # or po id entered
Function TS0W434()
   /* ------------------------------------------------------------*/

         /* VERIFY P.O. NUMBER OR P.O. ID ENTERED*/

   /* 1) If p.o. number or p.o. id not entered then indicate err*/
   /* 2) If the p.o. number was entered then continue on without*/
      /* checking the p.o. id.*/
   /* 3) If only p.o. id fields have been entered and they are*/
      /* correct, then select the p.o. id and obtain a valid*/
      /* p.o. number for the id.*/

   /* ------------------------------------------------------------*/

  if (TS0WW03.TS0WMPOI[TS0WWIXM] == " "        /* if po # or po id not entered*/
   && TS0WW03.PC3PONBR[TS0WWIXM] == 0          
   && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0 /* not B-Grade rqst*/
   && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0)

    converseLib.validationFailed(168); /* error message*/
    TS0WM001.XXXPRCNM = "TS0W434"; /* Process name*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    set TS0WM001.PC3PONBR[TS0WWIXM] cursor, modified, bold;
    set TS0WM001.TS0WMPOI[TS0WWIXM] modified, bold;
    set TS0WM001.PC4ORTYP[TS0WWIXM] modified, bold;

  else

    if (TS0WW03.PC3PONBR[TS0WWIXM] > 0) /* if po # entered*/

      TS0W-43410(); /* ===> Verify P.O. NBR entered*/

    else

      if (TSWREC.XGPCD == "02"                    
       && TS0WW03.TS0WMPOI[TS0WWIXM] == " "       /* if po id not entered*/
       && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] > 0 /* B-Grade rqst*/
       && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] > 0)

       /* ======= Next Sentence =============>*/

      else

        if (TS0WW01.TS0WWIDS == "N") /* If the po id passed previous edits*/

          TS0W-43420(); /* ===> Verify P.O. ID entered*/

        end

      end

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0W434 ***********************/
end // end TS0W434

// Header edits
Function TS0W440()
   /* ------------------------------------------------------------*/

                  /* VERIFY THE ENTERED DATA*/

   /* The edits for this screen will be performed by screen*/
   /* groupings due to the screen edits size:*/

      /* 1) Edit Grouping 1 - edits comments, cbms, notify rcvd*/
         /* dt, amd warehouse.*/
      /* 2) Edit Grouping 2 - edits dest dt, dest loc, dschg dt,*/
         /* and dschg loc.*/
      /* 3) Edit Grouping 3 - edits orig dt and orig loc.*/
      /* 4) Edit Grouping 4 - edits forwarder, shipment nbr,*/
         /* craft, and carrier.*/

   /* If no error encounter, then perform the overlap edits for*/
   /* forwarder, and all entered dates.*/

   /* ------------------------------------------------------------*/

  TS0W441(); /* perform edit grouping 1*/

  TS0W442(); /* perform edit grouping 5*/

  TS0W443(); /* perform edit grouping 6*/

  TS0W444(); /* perform edit grouping 7*/

  if (TS0WW01.TS0WWPSW == "N") /* If no errors found*/
    TS0W445(); /* overlap edits*/
  end



end // end TS0W440

// Edit grouping 1
Function TS0W441()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 1*/

         /* Edit;*/
           /* 1) comments*/
           /* 2) cubic meters*/
           /* 3) hold code*/
           /* 4) shipment type*/
           /* 5) notification received date*/
           /* 6) warehouse code*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) comments*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFCMNT1 == " " /* if comment line 1 blank*/
   && TS0WM001.TSFCMNT2 != " ") /* and comment line 2 not blank*/
    TS0WM001.TSFCMNT1 = TS0WM001.TSFCMNT2; /* move to line 1*/
    TS0WM001.TSFCMNT2 = " "; /* clear comment line 2*/
  end

   /* ------------------------------------------------------------*/
           /* 2) cubic meters*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFTCBM != 0) /* if total cubic meters entered*/
    if (TS0WM001.TSFTCBM > 0) /* if number entered is gt 0*/
      TSFREC.TSFTCBM = TS0WM001.TSFTCBM; /* save kilograms*/
    else /* else an error has occurred*/
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W441"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0WM001.TSFTCBM cursor, bold; /* highlight*/
    end
  else
    TSFREC.TSFTCBM = 0; /* set to zero*/
  end

   /* ------------------------------------------------------------*/
           /* 3) hold code*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.YSHCD == " ") /* if hold is blank*/
    TS0WM001.YSHSDESC = " "; /* clear description*/
    TSFREC.YSHCD = " "; /* default code*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0WM001.YSHCD in YSHTBL.YSHCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YSHTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(78); /* Display error message*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W441"; /* Process name*/
      TS0WM001.YSHSDESC = " "; /* Clear description*/
      set TS0WM001.YSHCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0WM001.YSHSDESC = YSHTBL.YSHSDESC[sysVar.arrayIndex];
      TSFREC.YSHCD = YSHTBL.YSHCD[sysVar.arrayIndex]; /* save code*/
    end
  end


   /* ------------------------------------------------------------*/
            /* 4) shipment type code*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.YSTCD == " ") /* if shipment type is blank*/
    TS0WM001.YSTSDESC = " "; /* clear description*/
    TSFREC.YSTCD = " "; /* default the code*/
    converseLib.validationFailed(59); /* Display error message*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
    TS0WM001.XXXPRCNM = "TS0W441"; /* Process name*/
    set TS0WM001.YSTCD cursor, modified, bold; /* highlight field*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0WM001.YSTCD in YSTTBL.YSTCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YSTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(59); /* Display error message*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W441"; /* Process name*/
      TS0WM001.YSTSDESC = " "; /* Clear description*/
      set TS0WM001.YSTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0WM001.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
      TSFREC.YSTCD = YSTTBL.YSTCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
            /* 5) notification received date*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFNTRDT != " ") /* if notification date entered*/
    TS0WW01.TS0WWDTE = TS0WM001.TSFNTRDT; /* move to working date*/
    TS0WS15(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/

         /* ******** get current date **********/
      XX0XS01();
      TS0WW01.TS0WWCDT = XX0XW01.XX0XWDAT; /* save current date*/
      /* ------------------------------------------------------------*/
       /* Verify that date is ge current date*/
      /* ------------------------------------------------------------*/
      if (TA2REC.TA2GRGGN > TS0WW01.TS0WWCDT) /* If date lt current date*/
        converseLib.validationFailed(276); /* must be ge curr date nation*/
        TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
        TS0WM001.XXXPRCNM = "TS0W441"; /* Process name*/
        set TS0WM001.TSFNTRDT cursor, bold; /* highlight field*/
      else
        TSFREC.TSFNTRDT = TA2REC.TA2GRGGN; /* save date*/
        TS0WW01.TS0WWCMD = TA2REC.TA2GRGA; /* save date*/
      end

    else
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      set TS0WM001.TSFNTRDT cursor, bold; /* highlight field*/
      TS0WM001.XXXPRCNM = "TS0W441"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    set TS0WM001.TSFNTRDT cursor, bold; /* highlight field*/
    TS0WM001.XXXPRCNM = "TS0W143"; /* process name*/
    converseLib.validationFailed(77); /* invalid date entered*/
  end

   /* ------------------------------------------------------------*/
            /* 6) warehouse code*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.XWHCD == " ") /* if warehouse code is blank*/
    TS0WM001.XWHABRV = " "; /* clear description*/
    TSFREC.XWHCD = " "; /* default code*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0WM001.XWHCD in XWHTBL.XWHCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XWHTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(82); /* Display error message*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W441"; /* Process name*/
      TS0WM001.XWHABRV = " "; /* Clear description*/
      set TS0WM001.XWHCD cursor, bold; /* highlight field*/
    else /* Move description to table*/
      TS0WM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      TSFREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex]; /* save code*/
    end
  end


end // end TS0W441

// Edit grouping 2
Function TS0W442()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 2*/

         /* Edit;*/
           /* 1) destination estimated date*/
           /* 2) destination location*/
           /* 3) discharge estimated date*/
           /* 4) discharge location*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) destination estimated date*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFDESTE != " ") /* if est destination date entered*/
    TS0WW01.TS0WWDTE = TS0WM001.TSFDESTE; /* move to working date*/
    TS0WS15(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFDESTE = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      set TS0WM001.TSFDESTE cursor, bold; /* highlight field*/
      TS0WM001.XXXPRCNM = "TS0W442"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFDESTE = 0; /* default date*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    set TS0WM001.TSFDESTE cursor, bold; /* highlight field*/
    TS0WM001.XXXPRCNM = "TS0W442"; /* process name*/
    converseLib.validationFailed(57); /* invalid date entered*/
  end

   /* ------------------------------------------------------------*/
           /* 2) destination location*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSEDEST == " ") /* if destination not entered*/
    TSFREC.TSEDEST = " "; /* default dest*/
    converseLib.validationFailed(40); /* Display error message*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
    TS0WM001.XXXPRCNM = "TS0W442"; /* Process name*/
    TS0WM001.TS0WMDED = " "; /* Clear description*/
    set TS0WM001.TSEDEST cursor, bold; /* highlight field*/
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TS0WM001.TSEDEST; /* move in code*/
    TS0WS20(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
     || TSCREC.XXXSTAT == "I")    
      converseLib.validationFailed(40); /* Display error message*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W442"; /* Process name*/
      TS0WM001.TS0WMDED = " "; /* Clear description*/
      set TS0WM001.TSEDEST cursor, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        /* MLATHA*/
        XX0XS01(); /* Obtain current date*/
        if ((TSCREC.XCTCD == "USA" || TSCREC.XCTCD == "CANA")
         && XX0XW01.XX0XWDAT >= 20011203)
          converseLib.validationFailed(0452); /* Display error message*/
          TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
          TS0WM001.XXXPRCNM = "TS0W442"; /* Process name*/
          TS0WM001.TS0WMDED = " "; /* Clear description*/
          set TS0WM001.TSEDEST cursor, bold; /* highlight field*/
        else
          TS0WM001.TS0WMDED = TSCREC.XXXCITY;
          TSFREC.TSEDEST = TSCREC.TSCLOCCD; /* save code*/
        end
        /* MLATHA*/
      end
    end
  end

   /* ------------------------------------------------------------*/
           /* 3) discharge estimated date*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFDSCHG != " " /* if discharge location is entered*/
   && TS0WM001.TSFDSCHE == " ") /* and estimated date is not entered*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    set TS0WM001.TSFDSCHE cursor, bold; /* highlight field*/
    TS0WM001.XXXPRCNM = "TS0W442"; /* process name*/
    converseLib.validationFailed(57); /* date is missing or invalid*/
  else
    if (TS0WM001.TSFDSCHE != " ") /* and estimated date is  entered*/
      TS0WW01.TS0WWDTE = TS0WM001.TSFDSCHE; /* move to working date*/
      TS0WS15(); /* verify entered date*/
      if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
        TSFREC.TSFDSCHE = TA2REC.TA2GRGGN; /* save date*/
      else
        TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
        set TS0WM001.TSFDSCHE cursor, bold; /* highlight field*/
        TS0WM001.XXXPRCNM = "TS0W442"; /* process name*/
        converseLib.validationFailed(77); /* invalid date entered*/
      end
    end
  end

   /* ------------------------------------------------------------*/
           /* 4) discharge location*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFDSCHG == " " /* if discharge not entered*/
   && TS0WM001.TSFDSCHE != " ") /* and estimated date is not entered*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    set TS0WM001.TSFDSCHG cursor, bold; /* highlight field*/
    TS0WM001.XXXPRCNM = "TS0W442"; /* process name*/
    converseLib.validationFailed(83); /* date is missing or invalid*/
  else
    if (TS0WM001.TSFDSCHG != " ") /* if discharge entered*/
      set TSCREC empty;
      TSCREC.TSCLOCCD = TS0WM001.TSFDSCHG; /* move in code*/
      TS0WS20(); /* select location*/
      if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
       || TSCREC.XXXSTAT == "I")    
        converseLib.validationFailed(83); /* Display error message*/
        TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
        TS0WM001.XXXPRCNM = "TS0W442"; /* Process name*/
        TS0WM001.TS0WMDID = " "; /* Clear description*/
        set TS0WM001.TSFDSCHG cursor, bold; /* highlight field*/
      else
        if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
          TS0WM001.TS0WMDID = TSCREC.XXXCITY;
          TSFREC.TSFDSCHG = TSCREC.TSCLOCCD; /* save code*/
        end
      end
    end
  end


end // end TS0W442

// Edit grouping 3
Function TS0W443()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 3*/

         /* Edit;*/
           /* 1) origin estimated date*/
           /* 2) origin location*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) origin estimated date*/
   /* ------------------------------------------------------------*/

  if (TSWREC.TSWADDMO == "3" /* if tentative shipment*/
   && TS0WM001.TSFDPRTE == " ") /* and estimated date is not entered*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    set TS0WM001.TSFDPRTE cursor, bold; /* highlight field*/
    TS0WM001.XXXPRCNM = "TS0W443"; /* process name*/
    converseLib.validationFailed(57); /* date is missing or invalid*/
  end

  if (TS0WM001.TSFDPRTE != " ") /* if est departure date entered*/
    TS0WW01.TS0WWDTE = TS0WM001.TSFDPRTE; /* move to working date*/
    TS0WS15(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFDPRTE = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
      set TS0WM001.TSFDPRTE cursor, bold; /* highlight field*/
      TS0WM001.XXXPRCNM = "TS0W443"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFDPRTE = 0; /* default date*/
  end

   /* ------------------------------------------------------------*/
           /* 2) origin location*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSEORIG == " ") /* if origin not entered*/
    TSFREC.TSEORIG = " "; /* default*/
    converseLib.validationFailed(41); /* Display error message*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
    TS0WM001.XXXPRCNM = "TS0W443"; /* Process name*/
    TS0WM001.TS0WMORD = " "; /* Clear description*/
    set TS0WM001.TSEORIG cursor, bold; /* highlight field*/
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TS0WM001.TSEORIG; /* move in code*/
    TS0WS20(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
     || TSCREC.XXXSTAT == "I")    
      converseLib.validationFailed(41); /* Display error message*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W443"; /* Process name*/
      TS0WM001.TS0WMORD = " "; /* Clear description*/
      set TS0WM001.TSEORIG cursor, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        TS0WM001.TS0WMORD = TSCREC.XXXCITY;
        TSFREC.TSEORIG = TSCREC.TSCLOCCD; /* save code*/
      end
    end
  end


end // end TS0W443

// Edit grouping 4
Function TS0W444()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 4*/

         /* Edit;*/
           /* 1) forwarder*/
           /* 2) shipment*/
           /* 3) craft*/
           /* 4) carrier*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) forwarder*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFRWRDR != " ") /* If forwarder code is entered*/
    TSAREC.TSACARCD = TS0WM001.TSFRWRDR; /* move in key*/
    TS0WS25(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TSFREC.TSFRWRDR = TSAREC.TSACARCD; /* save code*/
    else
      if (SQLCA.VAGen_SQLCODE == 100 /* if carrier does not exist*/
       || TSAREC.XXXSTAT == "I")    
        converseLib.validationFailed(142); /* error message*/
        TS0WM001.XXXPRCNM = "TS0W444"; /* Process name*/
        TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
        set TS0WM001.TSFRWRDR cursor, bold; /* highlight field*/
      end
    end
  else
    TSFREC.TSFRWRDR = " "; /* default*/
  end

   /* ------------------------------------------------------------*/
           /* 2) shipment*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFSHPNB == " ") /* If shipment number blank*/
    converseLib.validationFailed(59); /* error message*/
    TSFREC.TSFSHPNB = " "; /* default*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    TS0WM001.XXXPRCNM = "TS0W444"; /* Process name*/
    set TS0WM001.TSFSHPNB cursor, bold; /* highlight field*/
  else
    TSFREC.TSFSHPNB = TS0WM001.TSFSHPNB; /* save number*/
  end

   /* ------------------------------------------------------------*/
           /* 3) craft*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TS5CRAFT == " ") /* If craft is missing*/
    converseLib.validationFailed(48); /* error message*/
    TSFREC.TS5CRAFT = " "; /* default*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    TS0WM001.XXXPRCNM = "TS0W444"; /* Process name*/
    set TS0WM001.TS5CRAFT cursor, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
           /* 4) carrier*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSACARCD == " ") /* If carrier code is missing*/
    converseLib.validationFailed(39); /* error message*/
    TSFREC.TSACARCD = " "; /* default*/
    TS0WM001.XXXPRCNM = "TS0W444"; /* Process name*/
    TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
    set TS0WM001.TSACARCD cursor, bold; /* highlight field*/
  else
    TSAREC.TSACARCD = TS0WM001.TSACARCD; /* move in key*/
    TS0WS25(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TSFREC.TSACARCD = TSAREC.TSACARCD; /* save code*/
      if (TS0WM001.TS5CRAFT != " ") /* if craft has been entered*/
        TS5REC.TSACARCD = TS0WM001.TSACARCD; /* move in keys*/
        TS5REC.TS5CRAFT = TS0WM001.TS5CRAFT;
        TS0WS30(); /* select craft*/
        if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
         && TS5REC.XXXSTAT == "A")   /* in active status*/
          TSFREC.TS5CRAFT = TS5REC.TS5CRAFT; /* save craft code*/
        else
          if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
           && TS5REC.XXXSTAT == "I")   /* in inactive status*/
            converseLib.validationFailed(73); /* error message*/
            TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
            TS0WM001.XXXPRCNM = "TS0W444"; /* Process name*/
            set TS0WM001.TS5CRAFT cursor, bold; /* highlight field*/
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* if craft does not exist*/
              converseLib.validationFailed(48); /* error message*/
              TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
              TS0WM001.XXXPRCNM = "TS0W444"; /* Process name*/
              set TS0WM001.TS5CRAFT cursor, bold;
            end
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
       && TSAREC.XXXSTAT == "I")   /* in inactive status*/
        converseLib.validationFailed(72); /* error message*/
        TS0WM001.XXXPRCNM = "TS0W444"; /* Process name*/
        TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
        set TS0WM001.TSACARCD cursor, bold; /* highlight field*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
          converseLib.validationFailed(39); /* error message*/
          TS0WM001.XXXPRCNM = "TS0W444"; /* Process name*/
          TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
          set TS0WM001.TSACARCD cursor, bold; /* highlight field*/
        end
      end
    end
  end


end // end TS0W444

// Overlap and calculation edits
Function TS0W445()
   /* ------------------------------------------------------------*/

               /* OVERLAP AND CALCUALTION EDITS*/

         /* Edit;*/
           /* 1) check forwarder entered in case of craft*/
              /* mode equal to 'AF'.*/
           /* 2) check that warehouse location equals dest loc.*/
           /* 3) check for duplicate locations entered*/
           /* 4) check for all other date overlaps*/

   /* ------------------------------------------------------------*/

     /* ******** get current date **********/

  XX0XS01();
  TS0WW01.TS0WWCDT = XX0XW01.XX0XWDAT; /* save current date*/

  if (TS5REC.YMTCD == "AF" /* If airfreight is the craft mode*/
   && TS0WM001.TSFRWRDR == " ") /* and forwarder not entered*/
    converseLib.validationFailed(266); /* frwrdr must be entered*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
    TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
    set TS0WM001.TSFRWRDR cursor, bold; /* highlight field*/
  end

  if (TS0WW01.TS0WWPSW == "N") /* if no errors have occurred*/

    if (TS0WM001.XWHCD != "  ") /* If warehouse exists*/
      if (TS0WM001.XWHCD in XWHTBL.XWHCD)
        if (TS0WM001.TSEDEST != XWHTBL.TSCLOCCD[sysVar.arrayIndex])
          converseLib.validationFailed(274);
          TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
          TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
          set TS0WM001.TSEDEST bold; /* highlight field*/
          set TS0WM001.XWHCD cursor, bold; /* highlight field*/
        end
      end
    end

    if (TS0WM001.TSEORIG == TS0WM001.TSEDEST)
      converseLib.validationFailed(67); /* origin cannot = destination*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
      set TS0WM001.TSEORIG bold; /* highlight field*/
      set TS0WM001.TSEDEST cursor, bold; /* highlight field*/
    end

    if (TS0WM001.TSFDSCHG == TS0WM001.TSEORIG)
      converseLib.validationFailed(86); /* Discharge cannot = origin*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
      set TS0WM001.TSEORIG bold; /* highlight field*/
      set TS0WM001.TSFDSCHG cursor, bold; /* highlight field*/
    end

  end

  if (TS0WW01.TS0WWPSW == "N") /* if no errors have occurred*/

    if (TSFREC.TSFDESTE < TSFREC.TSFDPRTE /* if est dest < est dprt*/
     && TSFREC.TSFDPRTE != 0)             /* and est dprt date exists*/
      converseLib.validationFailed(87); /* Display error message*/
      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
      set TS0WM001.TSFDESTE cursor, bold; /* highlight field*/
    else
      if (TSFREC.TSFDESTE < TSFREC.TSFDSCHE /* if est dest < est dschg*/
       && TSFREC.TSFDSCHG != 0)             /* and est dschg date exists*/
        converseLib.validationFailed(88); /* Display error message*/
        TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
        TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
        set TS0WM001.TSFDESTE cursor, bold; /* highlight field*/
      end
    end

    if (TS0WM001.TSFDSCHE != " ") /* if dschg est date is entered*/
      if (TSFREC.TSFDSCHE < TSFREC.TSFDPRTE /* if est dschg < est dprt*/
       && TSFREC.TSFDPRTE != 0)             /* and est dprt date exists*/
        converseLib.validationFailed(92); /* Display error message*/
        TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
        TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
        set TS0WM001.TSFDSCHE cursor, bold; /* highlight field*/
      else
        if (TSFREC.TSFDSCHE > TSFREC.TSFDESTE /* if est dschg > est dest*/
         && TSFREC.TSFDESTE != 0)             /* and est dest date exists*/
          converseLib.validationFailed(93); /* Display error message*/
          TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
          TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
          set TS0WM001.TSFDSCHE cursor, bold; /* highlight field*/
        end
      end
    end

    if (TS0WM001.TSFDPRTE != " ") /* if dprt est date is entered*/
      if (TSFREC.TSFDPRTE > TSFREC.TSFDESTE /* if est dprt > est dest*/
       && TSFREC.TSFDESTE != 0)             /* and est dest date exists*/
        converseLib.validationFailed(96); /* Display error message*/
        TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
        TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
        set TS0WM001.TSFDPRTE cursor, bold; /* highlight field*/
      else
        if (TSFREC.TSFDPRTE > TSFREC.TSFDSCHE /* if est dprt > est dschg*/
         && TSFREC.TSFDSCHE != 0)             /* and est dschg date exists*/
          converseLib.validationFailed(97); /* Display error message*/
          TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
          TS0WM001.XXXPRCNM = "TS0W445"; /* Process name*/
          set TS0WM001.TSFDPRTE cursor, bold; /* highlight field*/
        end
      end

    end
  end


end // end TS0W445

// Check for duplicate pack lists
Function TS0W450()
   /* ------------------------------------------------------------*/

               /* CHECK FOR DUPLICATE PACKING LISTS*/

   /* 1) Check the map working storage to see if duplicate*/
      /* packing lists have been entered.*/

   /* 2) Compare the map working storage entries to see if*/
      /* duplicate packing lists already exist in the table*/
      /* working storage.*/

   /* ------------------------------------------------------------*/

  TS0WW01.TS0WWIXM = 6; /* initialize index*/
  while (TS0WW01.TS0WWIXM > 0) /* until end of detail*/
    TS0WW01.TS0WWIXW = TS0WW01.TS0WWIXM - 1; /* initialize index*/
    while (TS0WW01.TS0WWIXW > 0) /* until end of detail*/
      if (TS0WW03.PC3PONBR[TS0WWIXM] > 0 /* and po exists*/
       && TS0WW03.PC3PONBR[TS0WWIXM] == TS0WW03.PC3PONBR[TS0WWIXW]
       && TS0WW03.TS0WMPOI[TS0WWIXM] == TS0WW03.TS0WMPOI[TS0WWIXW]
       && TS0WW03.PC4ORTYP[TS0WWIXM] == TS0WW03.PC4ORTYP[TS0WWIXW]
       && TS0WW03.PC2CUXID[TS0WWIXM] == TS0WW03.PC2CUXID[TS0WWIXW]
       && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM]
       == TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXW]
       && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM]
       == TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXW]
       && TS0WW03.SY1STNBR[TS0WWIXM] == TS0WW03.SY1STNBR[TS0WWIXW]
       && TS0WW03.SY2CLRID[TS0WWIXM] == TS0WW03.SY2CLRID[TS0WWIXW])

        set TS0WM001.PC3PONBR[TS0WWIXM] cursor, modified, bold;
        set TS0WM001.TS0WMPOI[TS0WWIXM] modified, bold;
        set TS0WM001.PC4ORTYP[TS0WWIXM] modified, bold;
        set TS0WM001.PC2CUXID[TS0WWIXM] modified, bold;
        set TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] modified, bold;
        set TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] modified, bold;
        set TS0WM001.SY1STNBR[TS0WWIXM] modified, bold;
        set TS0WM001.SY2CLRID[TS0WWIXM] modified, bold;
        set TS0WM001.TS0WMSHP[TS0WWIXM] modified, bold;

        TS0WM001.XXXPRCNM = "TS0W450"; /* process name*/
        TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
        converseLib.validationFailed(117); /* duplicate packing list*/
      end
      TS0WW01.TS0WWIXW = TS0WW01.TS0WWIXW - 1; /* decrement index*/
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM - 1; /* decrement index*/
  end

  TS0WW01.TS0WWIXM = 6; /* initialize index*/
  while (TS0WW01.TS0WWIXM > 0) /* until end of detail*/
    TS0WW01.TS0WWIXW = 1; /* initialize index*/
    while (TS0WW01.TS0WWIXW < TS0WW01.TS0WWMAX /* until end of table ws*/
     && TS0WW02.PC3PONBR[TS0WWIXW] > 0) /* and lines exist*/
      if (TS0WW03.PC3PONBR[TS0WWIXM] > 0
       && TS0WW03.PC3PONBR[TS0WWIXM] == TS0WW02.PC3PONBR[TS0WWIXW]
       && TS0WW03.TS0WMPOI[TS0WWIXM] == TS0WW02.TS0WMPOI[TS0WWIXW]
       && TS0WW03.PC4ORTYP[TS0WWIXM] == TS0WW02.PC4ORTYP[TS0WWIXW]
       && TS0WW03.PC2CUXID[TS0WWIXM] == TS0WW02.PC2CUXID[TS0WWIXW]
       && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM]
       == TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXW]
       && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM]
       == TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXW]
       && TS0WW03.SY1STNBR[TS0WWIXM] == TS0WW02.SY1STNBR[TS0WWIXW]
       && TS0WW03.SY2CLRID[TS0WWIXM] == TS0WW02.SY2CLRID[TS0WWIXW])

        set TS0WM001.PC3PONBR[TS0WWIXM] cursor, modified, bold;
        set TS0WM001.TS0WMPOI[TS0WWIXM] modified, bold;
        set TS0WM001.PC4ORTYP[TS0WWIXM] modified, bold;
        set TS0WM001.PC2CUXID[TS0WWIXM] modified, bold;
        set TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] modified, bold;
        set TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] modified, bold;
        set TS0WM001.SY1STNBR[TS0WWIXM] modified, bold;
        set TS0WM001.SY2CLRID[TS0WWIXM] modified, bold;
        set TS0WM001.TS0WMSHP[TS0WWIXM] modified, bold;

        TS0WM001.XXXPRCNM = "TS0W450"; /* process name*/
        TS0WW01.TS0WWPSW = "Y"; /* indicate problem*/
        converseLib.validationFailed(117); /* duplicate packing list*/

      end
      TS0WW01.TS0WWIXW = TS0WW01.TS0WWIXW + 1; /* decrement index*/
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM - 1; /* decrement index*/
  end


end // end TS0W450

// Check for po warning fl reset
Function TS0W460()
   /* ------------------------------------------------------------*/

             /* CHECK FOR PO QUANTITY WARNING FLAG RESET*/

      /* If any of the map information has changed from the*/
      /* previous map information saved in TS0UW03, then*/
      /* reset the po quantity warning flag*/

   /* ------------------------------------------------------------*/

   /* **************************************************/
      /* Check to see if PO quantity warning flag*/
      /* needs to be reset*/
   /* **************************************************/

  TS0WW01.TS0WWIXM = 1; /* set index to 1*/
  while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
    if (TS0WW03.TS0WMSHP[TS0WWIXM] == TS0WW04.TS0WMSHP[TS0WWIXM]
     && TS0WW03.PC3PONBR[TS0WWIXM] == TS0WW04.PC3PONBR[TS0WWIXM]
     && TS0WW03.TS0WMPOI[TS0WWIXM] == TS0WW04.TS0WMPOI[TS0WWIXM]
     && TS0WW03.PC4ORTYP[TS0WWIXM] == TS0WW04.PC4ORTYP[TS0WWIXM]
     && TS0WW03.PC2CUXID[TS0WWIXM] == TS0WW04.PC2CUXID[TS0WWIXM]
     && TS0WW03.SY1STNBR[TS0WWIXM] == TS0WW04.SY1STNBR[TS0WWIXM]
     && TS0WW03.SY2CLRID[TS0WWIXM] == TS0WW04.SY2CLRID[TS0WWIXM])

       /* next sentence*/

    else
      TS0WW01.TS0WWPWF = "N"; /* reset po warning flag*/
      TS0WW01.TS0WWWA1 = "              "; /* reset po warn arrays*/
      TS0WW01.TS0WWWA2 = "              ";
      TS0WW01.TS0WWWA3 = "              ";
      TS0WW01.TS0WWWA4 = "              ";
      TS0WW01.TS0WWIXM = 7; /* end loop*/
    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
  end


end // end TS0W460

// Verify item exist in database
Function TS0W470()
   /* ------------------------------------------------------------*/

                 /* SELECT PO,STYLE,COLOR*/

   /* 1) Set record empty, move key field, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TS0WW01.TS0WWIXM = 6; /* initialize index*/
  while (TS0WW01.TS0WWIXM > 0) /* until end of detail*/

    if (TS0WW03.TS0WMSHP[TS0WWIXM] == 0 /* if detail line blank*/
     && TS0WW03.PC3PONBR[TS0WWIXM] == 0 
     && TS0WW03.TS0WMPOI[TS0WWIXM] == " "
     && TS0WW03.PC4ORTYP[TS0WWIXM] == " "
     && TS0WW03.PC2CUXID[TS0WWIXM] == " "
     && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0
     && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0
     && TS0WW03.SY1STNBR[TS0WWIXM] == " "
     && TS0WW03.SY2CLRID[TS0WWIXM] == " ")

       /* ========== Next Sentence ==========>*/

    else

      TS0W-47050(); /* ===> Verify S.O. in D.B. warning*/

      if (TSWREC.XGPCD == "02"
       && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] > 0
       && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] > 0
       && TS0WW03.PC3PONBR[TS0WWIXM] == 0
       && TS0WW03.XQACD[TS0WWIXM] == "02")

        TS0W-47100(); /* Verify item in S.O. D.B.*/

      else

        TS0W-47200(); /* Verify item in P.O. D.B.*/

      end

    end

    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM - 1; /* decrement index*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0W470 ***********************/
end // end TS0W470

// Select (SI)    DPRODC.VPOITM01
Function TS0W471()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TS0WM001.XWHCD;
  PC6REC.PC3PONBR = TS0WW03.PC3PONBR[TS0WWIXM];
  PC6REC.SY1STNBR = TS0WW03.SY1STNBR[TS0WWIXM];
  PC6REC.SY2CLRID = TS0WW03.SY2CLRID[TS0WWIXM];
  PC6REC.XDMCD = TS0WW03.XDMCD[TS0WWIXM];
   /* MOVE TS0WW03.XQACD(TS0WWIXM) TO PC6REC.XQACD;*/
  PC6REC.XQACD = "*";
  PC6REC.XOWCD = TS0WW03.XOWCD[TS0WWIXM];
  PC6REC.PC2INSEG = TS0WW03.PC2INSEG[TS0WWIXM];
  PC6REC.XPGCD = TS0WW03.XPGCD[TS0WWIXM];
  PC6REC.XUMCD = TS0WW03.XUMCD[TS0WWIXM];
  PC6REC.PC2CUXID = TS0WW03.PC2CUXID[TS0WWIXM];


  if (TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] > 0
   && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] > 0)
    PC6REC.OP1CUOID = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM];
    PC6REC.OP1NORID = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM];
    PC6REC.OP1PARTN = TS0WW03.TS0WM-ORD-PART-CHAR[TS0WWIXM];
  else
    PC6REC.OP1CUOID = 0;
    PC6REC.OP1NORID = 0;
    PC6REC.OP1PARTN = " ";
  end

  PC6REC.PC6ETSDT = -1;
  PC6REC.YMTCD = "*";
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";

  PCYREC.PCYFUNC = "SI";
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0W471"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0W471"; /* Process name*/

  end

end // end TS0W471

// Fetch  (NI)    DPRODC.VPOITM01
Function TS0W472()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NI"; /* move in function code*/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0WW01.TS0WWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WW01.TS0WWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0W472"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0WM001.XXXPRCNM = "TS0W472"; /* Process name*/

    else

      TS0WW01.TS0WWPOQ = TS0WW01.TS0WWPOQ + PC6REC.PC6TORDE;

    end
  end


end // end TS0W472

// Close  (CI)    DPRODC.VPOITM01
Function TS0W473()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CI"; /* move in function code*/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0W473"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0W473"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0W473

// Check quantity against po
Function TS0W480()
   /* ------------------------------------------------------------*/

           /* CHECK QUANTITY AGAINST PO ITEM QTY,*/
             /* IN-TRANSIT OR IN-PROCESS SHIPMENTS,*/
             /* AND PO RECEIPTS FOR ITEM.*/

   /* ------------------------------------------------------------*/

  TS0WW01.TS0WWIXM = 6; /* initialize index*/
  while (TS0WW01.TS0WWIXM > 0) /* until end of detail*/
    if (TS0WW03.TS0WMSHP[TS0WWIXM] == 0 /* if detail line blank*/
     && TS0WW03.PC3PONBR[TS0WWIXM] == 0 
     && TS0WW03.TS0WMPOI[TS0WWIXM] == " "
     && TS0WW03.PC4ORTYP[TS0WWIXM] == " "
     && TS0WW03.PC2CUXID[TS0WWIXM] == " "
     && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0
     && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0
     && TS0WW03.SY1STNBR[TS0WWIXM] == " "
     && TS0WW03.SY2CLRID[TS0WWIXM] == " ")

       /* ============ Next Sentence =============>*/

    else

      /* **********************************************************/
       /* If this Item  was not found, then bypass*/
       /* these quantity warning checks*/
      /* **********************************************************/
      if (TS0WW03.XRECD[TS0WWIXM] == "PS") /* If item not on po*/
         /* continue on*/
      else

        if (TS0WW03.PC3PONBR[TS0WWIXM] == 0
         && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] > 0
         && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] > 0)

         /* **********************************************************/
          /* Select set and accumulate SO quantity for an item*/
         /* **********************************************************/

          TS0W-48100(); /* ===> Get SO qtys*/

        else

         /* **********************************************************/
          /* Select set and accumulate PO quantity for an item*/
         /* **********************************************************/

          TS0W-48200(); /* ===> Get PO qtys*/

        end


        /* **********************************************************/
         /* Select set and accumulate ship quantities for an item*/
        /* **********************************************************/

        TS0W-48300(); /* ===> Get Shipped Qtys*/


        /* **********************************************************/
         /* Select set and accumulate receipt quantities for an item*/
        /* **********************************************************/

        TS0W-48400(); /* ===> Get Receipt qtys*/


        /* **********************************************************/
         /* check accumulated quantities against user entered shp qty*/
        /* **********************************************************/

        TS0WW01.TS0WWTTQ = 0; /* Init fields*/
        TS0WW01.TS0WWTTD = 0;
        TS0WW01.TS0WWTTP = 0;

        TS0WW01.TS0WWTTQ = TS0WW01.TS0WWPLQ + TS0WW01.TS0WWRCQ;
        TS0WW01.TS0WWTTQ = TS0WW01.TS0WWTTQ + TS0WW03.TS0WMSHP[TS0WWIXM];

        TS0WW01.TS0WWTTD = TS0WW01.TS0WWPOQ - TS0WW01.TS0WWTTQ;
        if (TS0WW01.TS0WWTTD < 0) /* If negative*/
          TS0WW01.TS0WWTTD = TS0WW01.TS0WWTTD * -1; /* Make positive*/
        end

        if (TS0WW01.TS0WWPOQ != 0) /* If po quantity not zero*/
          TS0WW01.TS0WWTTP = TS0WW01.TS0WWTTD / TS0WW01.TS0WWPOQ * 100;
        end

        TS0WW01.TS0WWPLQ = TS0WW01.TS0WWPLQ + TS0WW01.TS0WWRCQ;
        TS0WW01.TS0WWPOQ = TS0WW01.TS0WWPOQ - TS0WW01.TS0WWPLQ;


        if (TS0WW01.TS0WWTTD <= TS0WW01.TS0WWSEQ /* If below soft error*/
         && TS0WW01.TS0WWTTP <= TS0WW01.TS0WWSEP) /* tolerances*/
          TS0WW03.TSISTAT[TS0WWIXM] = "99"; /* reset status*/
          TS0WW03.XRECD[TS0WWIXM] = "99"; /* reset excep code*/
        else
          /* ** any under shipment ***/
          if (TS0WW03.TS0WMSHP[TS0WWIXM] < TS0WW01.TS0WWPOQ)
            TS0WW01.TS0WWPWF = "Y"; /* Set warning flag*/
            TS0WW01.TS0WWPSW = "Y"; /* Set problem switch*/
            TS0WW01.TS0WWWF2 = "Y"; /* Set array warning*/
            TS0WW01.TS0WWSH2[TS0WWIXM] = "Y"; /* ind highlight row*/
            TS0WW03.TSISTAT[TS0WWIXM] = "99"; /* reset status*/
            TS0WW03.XRECD[TS0WWIXM] = "99"; /* reset excep code*/
          else
            /* ** overship ***/
            if (TS0WW03.TS0WMSHP[TS0WWIXM] > TS0WW01.TS0WWPOQ)
              /* ** overship under tolerance ***/
              if (TS0WW01.TS0WWTTD <= TS0WW01.TS0WWHEQ
               || TS0WW01.TS0WWTTP <= TS0WW01.TS0WWHEP)
                TS0WW01.TS0WWPWF = "Y"; /* Set warning flag*/
                TS0WW01.TS0WWPSW = "Y"; /* Set problem switch*/
                TS0WW01.TS0WWWF3 = "Y"; /* Set array warning*/
                TS0WW01.TS0WWSH3[TS0WWIXM] = "Y"; /* ind highlight*/
                TS0WW03.TSISTAT[TS0WWIXM] = "99"; /* reset stat*/
                TS0WW03.XRECD[TS0WWIXM] = "OS"; /* overship soft*/
              else
                /* ** overship over tolerance ***/
                TS0WW01.TS0WWPWF = "Y"; /* Set warning flag*/
                TS0WW01.TS0WWPSW = "Y"; /* Set problem switch*/
                TS0WW01.TS0WWWF4 = "Y"; /* Set array warning*/
                TS0WW01.TS0WWSH4[TS0WWIXM] = "Y"; /* ind highlight*/
                TS0WW03.TSISTAT[TS0WWIXM] = "99"; /* set error stat*/
                TS0WW03.XRECD[TS0WWIXM] = "OH"; /* overship hard*/
              end
            end
          end
        end
      end

    end
    TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM - 1; /* decrement index*/
  end


end // end TS0W480

// Select (S3)    DTRANS.VCPLHD02
Function TS0W481()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROW*/

    /* 1) Select the unique packing list row.*/

   /* ------------------------------------------------------------*/

  set TSTREC empty;

  TSTREC.XWHCD = TS0WM001.XWHCD; /* warehouse*/
  TSTREC.XGPCD = TSWREC.XGPCD; /* product code*/
  TSTREC.PC3PONBR = TS0WW03.PC3PONBR[TS0WWIXM]; /* po number*/
  TSTREC.PC2CUXID = TS0WW03.PC2CUXID[TS0WWIXM]; /* customer xref*/
  TSTREC.SY1STNBR = TS0WW03.SY1STNBR[TS0WWIXM]; /* style number*/
  TSTREC.SY2CLRID = TS0WW03.SY2CLRID[TS0WWIXM]; /* color number*/
  TSTREC.XDMCD = TS0WW03.XDMCD[TS0WWIXM]; /* dimension code*/
   /* MOVE TS0WW03.XQACD(TS0WWIXM) TO TSTREC.XQACD;/* quality code*/
  TSTREC.XQACD = "*"; /* quality code*/
  TSTREC.XOWCD = TS0WW03.XOWCD[TS0WWIXM]; /* owner group*/
  TSTREC.PC2INSEG = TS0WW03.PC2INSEG[TS0WWIXM]; /* spec difference*/
  TSTREC.XPGCD = TS0WW03.XPGCD[TS0WWIXM]; /* spec difference*/
  TSTREC.XUMCD = TS0WW03.XUMCD[TS0WWIXM]; /* unit of measure*/


  if (TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] > 0
   && TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM] > 0)
    TSTREC.OP1CUOID = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM];
    TSTREC.OP1NORID = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM];
    TSTREC.OP1PARTN = TS0WW03.TS0WM-ORD-PART-CHAR[TS0WWIXM];
  else
    TSTREC.OP1CUOID = 0;
    TSTREC.OP1NORID = 0;
    TSTREC.OP1PARTN = " ";
  end


  call "IO4230" ("S3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0W481"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
    TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0W481"; /* Process name*/

  end
end // end TS0W481

// Fetch  (N3)    DTRANS.VCPLHD02
Function TS0W482()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("N3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0WW01.TS0WWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WW01.TS0WWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0W482"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0WM001.XXXPRCNM = "TS0W482"; /* Process name*/

    else

      if (TSTREC.TSISTAT == "IT" /* Only count in-transit quantities*/
       || TSTREC.TSISTAT == "IP" /* Or currently in-process*/
       || TSTREC.TSISTAT == "CC" /* Or currently custom cleared*/
       || TSTREC.TSISTAT == "ER" /* Or currently in-error*/
       || TSTREC.TSISTAT == "CR") /* Or currently in-error*/

        TS0WW01.TS0WWPLQ = TS0WW01.TS0WWPLQ + TSTREC.TSISHPQT;

      end

    end
  end


end // end TS0W482

// Close  (C3)    DTRANS.VCPLHD02
Function TS0W483()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("C3", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0W483"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0W483"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0W483

// Select (S8)    DPRODC.VFYPO001
Function TS0W484()
   /* ------------------------------------------------------------*/

                 /* SELECT SET OF RECEIPT ROWS*/

    /* 1) Select the set of receipt rows.*/

   /* ------------------------------------------------------------*/

  set PCMREC empty;

  PCMREC.XWHCD = TS0WM001.XWHCD; /* warehouse*/
  PCMREC.XGPCD = TSWREC.XGPCD; /* product code*/
  PCMREC.PC3PONBR = TS0WW03.PC3PONBR[TS0WWIXM]; /* po number*/
  PCMREC.PC2CUXID = TS0WW03.PC2CUXID[TS0WWIXM]; /* cxref*/
  PCMREC.SY1STNBR = TS0WW03.SY1STNBR[TS0WWIXM]; /* style number*/
  PCMREC.SY2CLRID = TS0WW03.SY2CLRID[TS0WWIXM]; /* color number*/
  PCMREC.XDMCD = TS0WW03.XDMCD[TS0WWIXM]; /* dimension code*/
   /* MOVE TS0WW03.XQACD(TS0WWIXM) TO PCMREC.XQACD;/* quality code*/
  PCMREC.XQACD = "*"; /* quality code*/
  PCMREC.XOWCD = TS0WW03.XOWCD[TS0WWIXM]; /* owner group*/
  PCMREC.PC2INSEG = TS0WW03.PC2INSEG[TS0WWIXM]; /* spec difference*/
  PCMREC.XPGCD = TS0WW03.XPGCD[TS0WWIXM]; /* spec difference*/
  PCMREC.XUMCD = TS0WW03.XUMCD[TS0WWIXM]; /* unit of measure*/


  if (TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM] > 0)
    PCMREC.OP1CUOID = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWIXM];
    PCMREC.OP1NORID = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWIXM];
    PCMREC.OP1PARTN = TS0WW03.TS0WM-ORD-PART-CHAR[TS0WWIXM];
  else
    PCMREC.OP1CUOID = 0;
    PCMREC.OP1NORID = 0;
    PCMREC.OP1PARTN = " ";
  end


  call "IO3680" ("S8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0W484"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/
    TA1REC.TA1TBLKE = PCMREC.PCMKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0W484"; /* Process name*/

  end

end // end TS0W484

// Fetch  (N8)    DPRODC.VFYPO001
Function TS0W485()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VFYPO001*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("N8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0WW01.TS0WWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/
      TS0WW01.TS0WWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0W485"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0WM001.XXXPRCNM = "TS0W485"; /* Process name*/

    else

      TS0WW01.TS0WWWK2 = 1; /* initialize index*/
      while (TS0WW01.TS0WWWK2 <= 40) /* until end of array*/
        TS0WW01.TS0WWRCQ = TS0WW01.TS0WWRCQ + PCMREC.PCMRCPTQ[TS0WWWK2];
        TS0WW01.TS0WWWK2 = TS0WW01.TS0WWWK2 + 1;
      end

    end
  end


end // end TS0W485

// Close  (C8)    DPRODC.VFYPO001
Function TS0W486()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("C8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0W486"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0W486"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0W486

// Process array warning flags
Function TS0W490()
   /* ------------------------------------------------------------*/
           /* Process Array Warning Flags*/
   /* ------------------------------------------------------------*/

   /* *********************************************/
   /* Process invalid  S.O. warning.*/
   /* flag first.*/
   /* *********************************************/

  if (TS0WW01.TS0WWWF7 == "Y")

    TS0WW01.TS0WWWK2 = 6;

    while (TS0WW01.TS0WWWK2 >= 1)

      if (TS0WW01.TS0WWSH7[TS0WWWK2] == "Y")
        set TS0WM001.TS0WM-CUST-ORD-ID[TS0WWWK2] cursor, bold;
        set TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWWK2] bold;
      end

      converseLib.validationFailed(335); /* ===> invalid S.O. warning*/

      TS0WW01.TS0WWWK2 = TS0WW01.TS0WWWK2 - 1;

    end

    TS0WM001.XXXPRCNM = "TS0W490"; /* process name*/
    TS0WW01.TS0WWWA7 = "              "; /* Reset warning array*/

    return;

  end

   /* *********************************************/
   /* Process Multiple S.O. warning.*/
   /* flag second*/
   /* *********************************************/

  if (TS0WW01.TS0WWWF6 == "Y")

    TS0WW01.TS0WWWK2 = 6;

    while (TS0WW01.TS0WWWK2 >= 1)

      if (TS0WW01.TS0WWSH6[TS0WWWK2] == "Y")
        set TS0WM001.TS0WM-CUST-ORD-ID[TS0WWWK2] cursor, bold;
        set TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWWK2] bold;
      end

      converseLib.validationFailed(320); /* ===> Multiple S.O. exists*/

      TS0WW01.TS0WWWK2 = TS0WW01.TS0WWWK2 - 1;

    end

    TS0WM001.XXXPRCNM = "TS0W490"; /* process name*/
    TS0WW01.TS0WWWA6 = "              "; /* Reset warning array*/

    return;

  end


   /* *********************************************/
   /* Process item not found on po warning*/
   /* flag third.*/
   /* *********************************************/

  if (TS0WW01.TS0WWWF1 == "Y")

    TS0WW01.TS0WWWK2 = 6;

    while (TS0WW01.TS0WWWK2 >= 1)

      if (TS0WW01.TS0WWSH1[TS0WWWK2] == "Y")
        set TS0WM001.PC2CUXID[TS0WWWK2] cursor, bold;
        set TS0WM001.SY1STNBR[TS0WWWK2] bold;
        set TS0WM001.SY2CLRID[TS0WWWK2] bold;
      end

      if (TS0WW03.PC3PONBR[TS0WWWK2] == 0 /* * ===> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0WW03.XQACD[TS0WWWK2] == "02" 
       && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWWK2] > 0)

        converseLib.validationFailed(319);
      else
        converseLib.validationFailed(115);
      end

      TS0WW01.TS0WWWK2 = TS0WW01.TS0WWWK2 - 1;

    end

    TS0WM001.XXXPRCNM = "TS0W490"; /* process name*/
    TS0WW01.TS0WWWA1 = "              "; /* Reset warning array*/

    return;

  end


   /* *********************************************/
   /* Process item quantity undershipmemt warning*/
   /* flag forth.*/
   /* *********************************************/

  if (TS0WW01.TS0WWWF2 == "Y")

    TS0WW01.TS0WWWK2 = 6;

    while (TS0WW01.TS0WWWK2 >= 1)

      if (TS0WW01.TS0WWSH2[TS0WWWK2] == "Y")
        set TS0WM001.TS0WMSHP[TS0WWWK2] cursor, bold;
      end

      if (TS0WW03.PC3PONBR[TS0WWWK2] == 0 /* * ===> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0WW03.XQACD[TS0WWWK2] == "02" 
       && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWWK2] > 0)

        converseLib.validationFailed(321);
      else
        converseLib.validationFailed(251);
      end

      TS0WW01.TS0WWWK2 = TS0WW01.TS0WWWK2 - 1;

    end

    TS0WM001.XXXPRCNM = "TS0W490"; /* process name*/
    TS0WW01.TS0WWWA2 = "              "; /* Reset warning array*/

    return;

  end


   /* *********************************************/
   /* Process item quantity overshipmemt warning*/
   /* flag fifth*/
   /* *********************************************/
  if (TS0WW01.TS0WWWF3 == "Y")

    TS0WW01.TS0WWWK2 = 6;

    while (TS0WW01.TS0WWWK2 >= 1)

      if (TS0WW01.TS0WWSH3[TS0WWWK2] == "Y")
        set TS0WM001.TS0WMSHP[TS0WWWK2] cursor, bold;
      end

      if (TS0WW03.PC3PONBR[TS0WWWK2] == 0 /* * ===> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0WW03.XQACD[TS0WWWK2] == "02" 
       && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWWK2] > 0)

        converseLib.validationFailed(322);
      else
        converseLib.validationFailed(260);
      end

      TS0WW01.TS0WWWK2 = TS0WW01.TS0WWWK2 - 1;

    end

    TS0WM001.XXXPRCNM = "TS0W490"; /* process name*/
    TS0WW01.TS0WWWA3 = "              "; /* Reset warning array*/

    return;

  end


   /* *********************************************/
   /* Process item quantity overshipmemt over*/
   /* tolerance warning flag last*/
   /* *********************************************/

  if (TS0WW01.TS0WWWF4 == "Y")

    TS0WW01.TS0WWWK2 = 6;

    while (TS0WW01.TS0WWWK2 >= 1)

      if (TS0WW01.TS0WWSH4[TS0WWWK2] == "Y")
        set TS0WM001.TS0WMSHP[TS0WWWK2] cursor, bold;
      end

      if (TS0WW03.PC3PONBR[TS0WWWK2] == 0 /* * ===> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0WW03.XQACD[TS0WWWK2] == "02" 
       && TS0WW03.TS0WM-CUST-ORD-ID[TS0WWWK2] > 0)

        converseLib.validationFailed(323);
      else
        converseLib.validationFailed(261);
      end

      TS0WW01.TS0WWWK2 = TS0WW01.TS0WWWK2 - 1;

    end

    TS0WM001.XXXPRCNM = "TS0W490"; /* process name*/
    TS0WW01.TS0WWWA4 = "              "; /* Reset warning array*/

    return;

  end


   /* **                                                        ***/
   /* ********************** End of TS0W490 ***********************/
end // end TS0W490

// Process valid input request
Function TS0W500()
   /* ------------------------------------------------------------*/

            /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If no errors were found.*/
      /* a) If PF8 of ENTER is pressed.*/
         /* - if screen is full - move screen data to working*/
           /* storage.*/
         /* - if screen is partially full - move screen data*/
           /* to working storage and perform updates*/
         /* - if no detail entered - perform updates and*/
           /* transfer to TS0I.*/
      /* a) If PF7 is pressed.*/
         /* - move screen data to working storage.*/

   /* ------------------------------------------------------------*/

  if (TS0WW01.TS0WWPSW == "N") /* if no errors have occurred*/

    TSWREC.TSACARCD = TS0WM001.TSACARCD; /* Move pass tsw fields*/
    TSWREC.TS5CRAFT = TS0WM001.TS5CRAFT;
    TSWREC.TSFSHPNB = TS0WM001.TSFSHPNB;
    TSWREC.TSEORIG = TS0WM001.TSEORIG;
    TSWREC.TSEDEST = TS0WM001.TSEDEST;
    TSWREC.XWHCD = TS0WM001.XWHCD;

    TS0WW01.TS0WWPWF = "N"; /* Reset po quantity warning flag*/

    if (TS0WW01.TS0WWNSF == "Y") /* if negative SQL flag is yes*/

      TS0WW01.TS0WWNSF = "N"; /* reset neg sql flag*/
      TS0W510(); /* perform the updates again*/

      if (TS0WW01.TS0WWNSF == "N" /* if no problems with updates*/
       && TS0WW01.TS0WWPSW == "N") /* and no other problems*/
        COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/
        COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
        XSTSS01(); /* transfer to application*/
        TS0WW01.TS0WWPSW = "Y"; /* indicate error*/
        TS0WM001.XXXPRCNM = "TS0W500"; /* Process name*/
        exit stack; /* Exit to redisplay map*/
      end

    else

      if (converseVar.eventKey is enter /* enter was pressed*/
       || converseVar.eventKey is pf8)  /* or pf8 was pressed*/

        if (TS0WW03.PC3PONBR[6] > 0 /* if last detail line contains data*/
         || TS0WW03.TS0WM-CUST-ORD-ID[6] > 0) /**/
          TS0W520(); /* move screen data to working storage*/
        else

          /* **************************************************/
              /* Check to see if all detail lines are empty*/
          /* **************************************************/

          TS0WW01.TS0WWDEF = "N"; /* initialize data entered flag*/
          TS0WW01.TS0WWIXM = 1; /* set index to 1*/
          while (TS0WW01.TS0WWIXM <= 6) /* until end of detail lines*/
            if (TS0WM001.TS0WMSHP[TS0WWIXM] == 0 /* If detail line blank*/
             && TS0WM001.PC3PONBR[TS0WWIXM] == 0 
             && TS0WM001.TS0WMPOI[TS0WWIXM] == " "
             && TS0WM001.PC4ORTYP[TS0WWIXM] == " "
             && TS0WM001.PC2CUXID[TS0WWIXM] == " "
             && TS0WM001.TS0WM-CUST-ORD-ID[TS0WWIXM] == 0
             && TS0WM001.TS0WM-NIKE-ORD-ID[TS0WWIXM] == 0
             && TS0WM001.SY1STNBR[TS0WWIXM] == " "
             && TS0WM001.SY2CLRID[TS0WWIXM] == " ")

               /* next sentence*/

            else
              TS0WW01.TS0WWDEF = "Y"; /* set data entered flag*/
              TS0WW01.TS0WWIXM = 7; /* end loop*/
            end
            TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment index*/
          end

          if (TS0WW01.TS0WWDEF == "Y") /* if detail is partly full*/

            TS0W520(); /* move screen detail to ws*/
            TS0W510(); /* perform updates*/

            if (TS0WW01.TS0WWNSF == "N" /* if no problems with updates*/
             && TS0WW01.TS0WWPSW == "N") /* and no other problems*/
              COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/
              COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
              XSTSS01(); /* transfer to application*/
              TS0WW01.TS0WWPSW = "Y"; /* indicate error*/
              TS0WM001.XXXPRCNM = "TS0W500"; /* Process name*/
              exit stack; /* Exit to redisplay map*/
            end

          else

            TS0W510(); /* perform updates*/

            if (TS0WW01.TS0WWNSF == "N" /* if no problems with updates*/
             && TS0WW01.TS0WWPSW == "N") /* and no other problems*/

              if (TSWREC.TSWCPLFL == "Y") /* if a cpl has been added*/
                COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/
                COMMAREA.CAUSERA = TSWREC.CAUSERA; /* pass data*/
                XSTSS01(); /* transfer to application*/
                TS0WW01.TS0WWPSW = "Y"; /* indicate error*/
                TS0WM001.XXXPRCNM = "TS0W500"; /* Process name*/
                exit stack; /* Exit to redisplay map*/
              else
                TS0WW01.TS0WWFFL = "N"; /* reset first time thru flag*/
                TS0WW01.TS0WWPSW = "Y"; /* indicate error*/
                TS0WM001.XXXPRCNM = "TS0W500"; /* process name*/
                if (TS0WM001.TSACARCD != " ") /* if carrier entered*/
                  set TS0WM001.PC3PONBR[1] cursor; /* set cursor on po*/
                else
                  set TS0WM001.TSACARCD cursor; /* set cursor on po*/
                end
                converseLib.validationFailed(135); /* must enter at least one cpl*/
              end

            end
          end
        end
      else
        if (converseVar.eventKey is pf7) /* if pf7 was pressed*/
          TS0W520(); /* move screen data to ws*/
        end
      end
    end
  end


end // end TS0W500

// Perform updates
Function TS0W510()
   /* ------------------------------------------------------------*/

                  /* PERFORM UPDATES*/

    /* A. If the shipment header has not already been added*/
       /* 1) Add the shipment header.*/
       /* 2) If the container has not already been added*/
          /* a. add the container*/
          /* b. if the add is successful*/
             /* - commit*/
             /* - select the maximum Nike packing list number*/
               /* for this shipment id.*/
             /* - if the select in successful, add 1 to the*/
               /* packing list number and add the packing lists.*/
       /* 3) Else add the packing lists.*/
    /* B. Else*/
       /* 1) If the container has not already been added*/
          /* a. add the container*/
          /* b. if the add is successful*/
             /* - commit*/
             /* - select the maximum Nike packing list number*/
               /* for this shipment id.*/
             /* - if the select in successful, add 1 to the*/
               /* packing list number and add the packing lists.*/
       /* 2) Else add the packing lists.*/

   /* ------------------------------------------------------------*/

  if (TS0WW02.PC3PONBR[1] > 0 /* if some packing lists exist*/
   || TS0WW02.TS0WM-CUST-ORD-ID[1] > 0) /* if some packing lists exist*/

    if (TS0WW01.TS0WWSAF == "N") /* if shphdr not added*/

      TS0W511(); /* add ship header*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if shphdr add sucessful*/

        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit the container add*/
        TS0WW01.TS0WWSAF = "Y"; /* set container added flag 'y'*/
        TSWREC.TSWHDRFL = "Y"; /* set passed cntnr add flag 'y'*/

        if (TS0WW01.TS0WWCAF == "N") /* if container not  added*/
          TS0W512(); /* add the container*/
          if (SQLCA.VAGen_SQLCODE == 0) /* if cntnr add sucessful*/
            VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
            VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
            sysLib.commit();
            VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
             /* commit container add*/
            TS0WW01.TS0WWCAF = "Y"; /* set cntnr added flag 'y'*/
            TSWREC.TSWCNTFL = "Y"; /* set passed cntnr addflag 'y'*/
            TS0WW01.TS0WWPCK = 1; /* move 1 to p/l count*/
            TS0W513(); /* add packing lists*/
            if (TS0WW01.TS0WWNSF == "N") /* if no neg sql return codes*/
              TS0WW01.TS0WWCTR = TS0WW01.TS0WWCTR + 1; /* incr cntnr count*/
            end
          end
        else
          TS0W513(); /* add packing lists*/
        end

      end
    else

      if (TS0WW01.TS0WWCAF == "N") /* if container not  added*/

        TS0W512(); /* add the container*/

        if (SQLCA.VAGen_SQLCODE == 0) /* if cntnr add sucessful*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* commit container add*/
          TS0WW01.TS0WWCAF = "Y"; /* set cntnr added flag 'y'*/
          TSWREC.TSWCNTFL = "Y"; /* set passed cntnr addflag 'y'*/
          TS0WW01.TS0WWPCK = 1; /* move 1 to p/l count*/
          TS0W513(); /* add packing lists*/
          if (TS0WW01.TS0WWNSF == "N") /* if no neg sql return codes*/
            TS0WW01.TS0WWCTR = TS0WW01.TS0WWCTR + 1; /* incr cntnr count*/
          end
        end

      else
        TS0W513(); /* add packing lists*/
      end

    end

  else
    TS0WW01.TS0WWPGE = 1; /* reset the map page*/
  end


end // end TS0W510

// Add shipment header row
Function TS0W511()
   /* ------------------------------------------------------------*/

             /* ADD SHIPMENT HEADER ROW*/

     /* 1) Add the shipment text if it exists on the map.*/

     /* 2) Add the shipment header row.*/


   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* 1) Add the shipment text rows if necessary.*/
   /* ------------------------------------------------------------*/

  if (TS0WM001.TSFCMNT1 == " ") /* if no text in comment line 1*/
     /* continue on*/
  else
    TSRREC.TSRSEQNB = 1; /* set sequence number to 1*/
    TSRREC.TSRTEXT = TS0WM001.TSFCMNT1; /* move in text*/
    TS0WS35(); /* add the text to the text table*/
    TSFREC.TSFTXTID = "Y"; /* indicate text exists*/
  end

  if (TS0WM001.TSFCMNT2 == " ") /* if no text in comment line 2*/
     /* continue on*/
  else
    TSRREC.TSRSEQNB = 2; /* set sequence number to 2*/
    TSRREC.TSRTEXT = TS0WM001.TSFCMNT2; /* move in text*/
    TS0WS35(); /* add the text to the text table*/
    TSFREC.TSFTXTID = "Y"; /* indicate text exists*/
  end

   /* ------------------------------------------------------------*/
   /* 2) Add the shipment header.*/
   /* ------------------------------------------------------------*/

  TS0WS40(); /* add the shipment header*/


end // end TS0W511

// Add container row
Function TS0W512()
   /* ------------------------------------------------------------*/

                    /* ADD CONTAINER ROW*/

    /* 1) Move in appropriate fields to TSHREC*/
    /* 2) Add the container row*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* initialize tshrec*/

  TSHREC.TSHNKCN = TS0WW01.TS0WWCTR; /* Nike container number*/
  TSHREC.TSFSHPID = TS0WM001.TSFSHPID; /* Nike shipment number*/
  TSHREC.TSHCNTNR = "      "; /* container number*/
  TSHREC.YCNCD = "  "; /* container type*/
  TSHREC.TSHSTAT = "TN"; /* container status*/
  TSHREC.TSHTCBM = 0; /* total cubic meters*/
  TSHREC.TSHTKG = 0; /* total kilograms*/
  TSHREC.TSHSEAL = "  "; /* seal*/
  TSHREC.TSHRCTDT = 0; /* container receipt date*/
  TSHREC.SL1RCRNO = 0; /* RCV report number*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSHREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move in set up date*/
  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
  TSHREC.ZZZCHGCT = 0; /* initialize change count*/


  call "IO2590" ("A ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0WW01.TS0WWNSF = "Y"; /* Set negative SQL flag 'y'*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0W512"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0W512"; /* Process name*/
  end


end // end TS0W512

// Add packing lists
Function TS0W513()
   /* ------------------------------------------------------------*/

                   /* ADD PACKING LISTS*/

      /* 1) Initialize fields*/
      /* 2) If the packing list has already been added - skip*/
      /* 3) If the packing list has not been added*/
         /* a. If packing lists have not reached the maximum -*/
            /* perform the packing list updates process*/
         /* b. If all goes well then commit the updates*/

   /* ------------------------------------------------------------*/

  TS0WW01.TS0WWTIX = 1; /* initialize table index*/
  TS0WW01.TS0WWMPX = 1; /* initialize map position index*/

  while (TS0WW01.TS0WWTIX <= TS0WW01.TS0WWMAX) /* while less than max*/

    if (TS0WW02.PC3PONBR[TS0WWTIX] > 0 /* and po exists*/
     || TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX] > 0) /* and po exists*/

      if (TS0WW02.TS0WWPAF[TS0WWTIX] == "Y") /* if pl added is yes*/
        /* next sentence*/
      else

        if (TS0WW01.TS0WWTIX <= TS0WW01.TS0WWMAX /* less than max*/
         && TS0WW01.TS0WWNSF == "N")             /* and no neg sql flag*/
          TS0WS45(); /* packing list updates*/
        end

        if (TS0WW01.TS0WWTIX <= TS0WW01.TS0WWMAX /* less than max*/
         && TS0WW01.TS0WWNSF == "N")             /* and no neg sql flag*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* commit all updates*/
          TSWREC.TSWCPLFL = "Y"; /* move y to packing list exists*/
          TS0WW02.TS0WWPAF[TS0WWTIX] = "Y"; /* pl added flag*/
        else
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* reset all updates*/
        end

      end

    end

    TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX + 1; /* increment table index*/

  end

  TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX - 1; /* reset table index*/

  if (TS0WW01.TS0WWTIX <= TS0WW01.TS0WWMAX /* if less than max lines*/
   && TS0WW01.TS0WWNSF == "N")             /* and all updates successful*/
    TS0WW01.TS0WWNSF = "N"; /* reset neg SQL flag*/
    TS0WW01.TS0WWSAF = "N"; /* reset shiphdr added flag*/
    TS0WW01.TS0WWCAF = "N"; /* reset container added flag*/
    set TS0WW02 empty; /* clear table record*/
    TS0WW01.TS0WWTIX = 1; /* reset table index*/
    TS0WW01.TS0WWMPX = 1; /* reset map position index*/
    TS0WW01.TS0WWPGE = 0; /* reset map page*/
  end


end // end TS0W513

// Move to working storage
Function TS0W520()
   /* ------------------------------------------------------------*/

                  /* MOVE TO WORKING STORAGE*/

       /* This process will move the screen data that was*/
       /* cascaded into working storage into the data base*/
       /* update working storage record in compressed form.*/
       /* It will also take care of any detail line deletions*/
       /* which the user may do when scrolling backwards to*/
       /* maintain the compressed status of the data base update*/
       /* working storage record.*/

   /* ------------------------------------------------------------*/

  TS0WW01.TS0WWFFL = "N"; /* move 'n' to first time thru flag*/
  TS0WW01.TS0WWMPX = TS0WW01.TS0WWTIX; /* set map position index*/
  TS0WW01.TS0WWMIX = 1; /* initialize map index*/

  while (TS0WW01.TS0WWMIX <= 6 /* until end of detail lines*/
   && TS0WW01.TS0WWTIX <= TS0WW01.TS0WWMAX) /* and not over max index*/

    if (TS0WW03.PC3PONBR[TS0WWMIX] > 0 /* if P.O. exists*/
     || TS0WW03.TS0WM-CUST-ORD-ID[TS0WWMIX] > 0) /* if S.O. exists*/

      TS0WW02.PC3PONBR[TS0WWTIX] = TS0WW03.PC3PONBR[TS0WWMIX];
      TS0WW02.TS0WMPOI[TS0WWTIX] = TS0WW03.TS0WMPOI[TS0WWMIX];
      TS0WW02.PC4ORTYP[TS0WWTIX] = TS0WW03.PC4ORTYP[TS0WWMIX];
      TS0WW02.PC2CUXID[TS0WWTIX] = TS0WW03.PC2CUXID[TS0WWMIX];
      TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX] = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWMIX];
      TS0WW02.TS0WM-NIKE-ORD-ID[TS0WWTIX] = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWMIX];
      TS0WW02.SY1STNBR[TS0WWTIX] = TS0WW03.SY1STNBR[TS0WWMIX];
      TS0WW02.SY2CLRID[TS0WWTIX] = TS0WW03.SY2CLRID[TS0WWMIX];
      TS0WW02.TS0WMSHP[TS0WWTIX] = TS0WW03.TS0WMSHP[TS0WWMIX];
      TS0WW02.XDMCD[TS0WWTIX] = TS0WW03.XDMCD[TS0WWMIX];
      TS0WW02.PC2INSEG[TS0WWTIX] = TS0WW03.PC2INSEG[TS0WWMIX];
      TS0WW02.XQACD[TS0WWTIX] = TS0WW03.XQACD[TS0WWMIX];
      TS0WW02.XPGCD[TS0WWTIX] = TS0WW03.XPGCD[TS0WWMIX];
      TS0WW02.XUMCD[TS0WWTIX] = TS0WW03.XUMCD[TS0WWMIX];
      TS0WW02.XOWCD[TS0WWTIX] = TS0WW03.XOWCD[TS0WWMIX];
      TS0WW02.TSISTAT[TS0WWTIX] = TS0WW03.TSISTAT[TS0WWMIX];
      TS0WW02.XRECD[TS0WWTIX] = TS0WW03.XRECD[TS0WWMIX];
      TS0WW02.TS0WWPAF[TS0WWTIX] = "N";
      TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX + 1; /* increment index*/
    end
    TS0WW01.TS0WWMIX = TS0WW01.TS0WWMIX + 1; /* increment index*/
  end

  TS0WW01.TS0WWCOM = TS0WW01.TS0WWMPX + 6; /* set one page forward*/

  if (TS0WW01.TS0WWTIX < TS0WW01.TS0WWCOM  /* if table ind LT compress ind*/
   && TS0WW01.TS0WWTIX <= TS0WW01.TS0WWMAX /* and not over max index*/
   && TS0WW01.TS0WWCOM <= TS0WW01.TS0WWMAX)

    TS0WW01.TS0WWIXM = TS0WW01.TS0WWTIX; /* save table index*/

    /* *************************************************************/
      /* Compress working storage if blank lines in screen working*/
      /* storage.*/
    /* *************************************************************/

    TS0WW01.TS0WWEFL = "N"; /* exit loop flag*/

    while (TS0WW01.TS0WWTIX <= TS0WW01.TS0WWMAX /* while table ind LE max*/
     && TS0WW01.TS0WWEFL == "N") /* exit loop flag*/

      if (TS0WW02.PC3PONBR[TS0WWCOM] > 0 /* and po exists*/
       || TS0WW02.TS0WM-CUST-ORD-ID[TS0WWCOM] > 0) /* or so exists*/

        TS0WW02.PC3PONBR[TS0WWTIX] = TS0WW02.PC3PONBR[TS0WWCOM];
        TS0WW02.TS0WMPOI[TS0WWTIX] = TS0WW02.TS0WMPOI[TS0WWCOM];
        TS0WW02.PC4ORTYP[TS0WWTIX] = TS0WW02.PC4ORTYP[TS0WWCOM];
        TS0WW02.PC2CUXID[TS0WWTIX] = TS0WW02.PC2CUXID[TS0WWCOM];
        TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX] = TS0WW03.TS0WM-CUST-ORD-ID[TS0WWCOM];
        TS0WW02.TS0WM-NIKE-ORD-ID[TS0WWTIX] = TS0WW03.TS0WM-NIKE-ORD-ID[TS0WWCOM];
        TS0WW02.SY1STNBR[TS0WWTIX] = TS0WW02.SY1STNBR[TS0WWCOM];
        TS0WW02.SY2CLRID[TS0WWTIX] = TS0WW02.SY2CLRID[TS0WWCOM];
        TS0WW02.TS0WMSHP[TS0WWTIX] = TS0WW02.TS0WMSHP[TS0WWCOM];
        TS0WW02.XDMCD[TS0WWTIX] = TS0WW02.XDMCD[TS0WWCOM];
        TS0WW02.PC2INSEG[TS0WWTIX] = TS0WW02.PC2INSEG[TS0WWCOM];
        TS0WW02.XQACD[TS0WWTIX] = TS0WW02.XQACD[TS0WWCOM];
        TS0WW02.XPGCD[TS0WWTIX] = TS0WW02.XPGCD[TS0WWCOM];
        TS0WW02.XUMCD[TS0WWTIX] = TS0WW02.XUMCD[TS0WWCOM];
        TS0WW02.XOWCD[TS0WWTIX] = TS0WW02.XOWCD[TS0WWCOM];
        TS0WW02.TSISTAT[TS0WWTIX] = TS0WW02.TSISTAT[TS0WWCOM];
        TS0WW02.XRECD[TS0WWTIX] = TS0WW02.XRECD[TS0WWCOM];
      else
        TS0WW01.TS0WWEFL = "Y"; /* exit loop flag*/
      end

      TS0WW01.TS0WWCOM = TS0WW01.TS0WWCOM + 1; /* increment compress index*/
      TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX + 1; /* increment table index*/

    end

    /* *************************************************************/
      /* Initialize lines at end of working storage table that have*/
      /* already been moved up.*/
    /* *************************************************************/

    TS0WW01.TS0WWEFL = "N"; /* exit loop flag*/

    while (TS0WW01.TS0WWTIX < TS0WW01.TS0WWCOM /* while tbl ind LT compr*/
     && TS0WW01.TS0WWEFL == "N") /* exit loop flag*/

      if (TS0WW02.PC3PONBR[TS0WWTIX] > 0 /* or po exists*/
       || TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX] > 0) /* or so exists*/

        TS0WW02.PC3PONBR[TS0WWTIX] = 0;
        TS0WW02.TS0WMPOI[TS0WWTIX] = " ";
        TS0WW02.PC4ORTYP[TS0WWTIX] = " ";
        TS0WW02.PC2CUXID[TS0WWTIX] = " ";
        TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX] = 0;
        TS0WW02.TS0WM-NIKE-ORD-ID[TS0WWTIX] = 0;
        TS0WW02.SY1STNBR[TS0WWTIX] = " ";
        TS0WW02.SY2CLRID[TS0WWTIX] = " ";
        TS0WW02.TS0WMSHP[TS0WWTIX] = 0;
        TS0WW02.XDMCD[TS0WWTIX] = " ";
        TS0WW02.PC2INSEG[TS0WWTIX] = " ";
        TS0WW02.XQACD[TS0WWTIX] = " ";
        TS0WW02.XPGCD[TS0WWTIX] = " ";
        TS0WW02.XUMCD[TS0WWTIX] = " ";
        TS0WW02.XOWCD[TS0WWTIX] = " ";
        TS0WW02.TSISTAT[TS0WWTIX] = "  ";
        TS0WW02.XRECD[TS0WWTIX] = "  ";
      else
        TS0WW01.TS0WWEFL = "Y"; /* exit loop flag*/
      end

      TS0WW01.TS0WWTIX = TS0WW01.TS0WWTIX + 1; /* increment table index*/
      TS0WW01.TS0WWIXM = TS0WW01.TS0WWIXM + 1; /* increment save index*/

    end

    TS0WW01.TS0WWTIX = TS0WW01.TS0WWIXM; /* restore table index*/

  end


end // end TS0W520

// Select the factory row
Function TS0WS05()
   /* ------------------------------------------------------------*/

         /* SELECT THE FACTORY ROW FROM DFCTY.DFCTY001*/

   /* ------------------------------------------------------------*/


  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS05"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
    TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0WM001.XXXPRCNM = "TS0WS05"; /* Process name*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0WS05

// Select from DPRODC.VPOTYP01
Function TS0WS06()
   /* ------------------------------------------------------------*/

         /* SELECT THE PO TYPE ROW FROM DPRODC.VPOTYP01*/

   /* ------------------------------------------------------------*/

  call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS06"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE PO TYPE TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0WM001.XXXPRCNM = "TS0WS06"; /* Process name*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0WS06

// Select set DPRODC.VPOVFY01
Function TS0WS07()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VPOVFY01*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set PCFREC empty;
  PCFREC.PCFSECD = TS0WW01.TS0WWPYR;
  PCFREC.PCFBUYMO = -1;
  PCFREC.XXXSTAT = "*";

  call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS07"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0WS07"; /* Process name*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0WS07

// Fetch row  DPRODC.VPOVFY01
Function TS0WS08()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOVFY01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok or*/
   || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS08"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0WS08"; /* Process name*/

  end


end // end TS0WS08

// Close set  DPRODC.VPOVFY01
Function TS0WS09()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VPOVFY01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0WS09"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0WS09"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0WW01.TS0WWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0WS09

// Select from DPRODC.VPOHDR01
Function TS0WS10()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/

      if (TS0WW03.PC3PONBR[TS0WWIXM] > 0 /* If po number entered*/
       && SQLCA.VAGen_SQLCODE == -811)   /* Multiple rows returned*/
         /* continue on*/
      else
        return; /* Return to previous process*/
      end

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0WS10"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0WM001.XXXPRCNM = "TS0WS10"; /* Process name*/
  TS0WW01.TS0WWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0WS10

// Verify dates entered
Function TS0WS15()
   /* ------------------------------------------------------------*/
                /* VERIFY THE DATES ENTERED*/

   /* Validate the dates entered on the screen.*/

   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGA = TS0WW01.TS0WWDTE; /* move date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/


end // end TS0WS15

// Select from DTRANS.VTSLOC01
Function TS0WS20()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTSLOC01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0TS20"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0TS20"; /* Process name*/
  end


end // end TS0WS20

// Select from DTRANS.VTSCAR01
Function TS0WS25()
   /* ------------------------------------------------------------*/
                 /* SELECT CARRIER TABLE ROW*/

   /* 1) Set record empty, move key field, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0TS25"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WW01.TS0WWPSW = "Y"; /* Indicate Problem*/
    TS0WM001.XXXPRCNM = "TS0TS25"; /* Process name*/
  end


end // end TS0WS25

// Select from DTRANS.VCRAFT01
Function TS0WS30()
   /* ------------------------------------------------------------*/
                 /* SELECT CRAFT TABLE ROW*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0TS30"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WW01.TS0WWPSW = "Y"; /* Indicate Problem*/
    TS0WM001.XXXPRCNM = "TS0TS30"; /* Process name*/
  end


end // end TS0WS30

// Add row DTRANS.VTSTXT01
Function TS0WS35()
   /* ------------------------------------------------------------*/

                    /* ADD THE ROW TO VTSTXT01*/

        /* Move in the fields and add the row to the database*/

   /* ------------------------------------------------------------*/

  TSRREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shpid*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TS0WW01.TS0WWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/

  TSRREC.ZZZCHGDT = TS0WW01.TS0WWCDT; /* change date*/
  TSRREC.ZZZSDT = TS0WW01.TS0WWCDT; /* Set up date*/
  TSRREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  TSRREC.ZZZCHGCT = 0; /* Change count*/

  call "IO2690" ("A ", SQLCA, TSRREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS35"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTXT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0WM001.XXXPRCNM = "TS0WS35"; /* Process name*/
    exit stack;

  end


end // end TS0WS35

// Add row DTRANS.VSHPHD01
Function TS0WS40()
   /* ------------------------------------------------------------*/

                    /* ADD TO DTRANS.VSHPHD01*/

   /* This module adds a table row to the shipment header*/
   /* table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  TSFREC.XGPCD = TSWREC.XGPCD; /* move in gpc code*/

  if (TSFREC.TSFCHGFL == " ") /* if charges entered flag blank*/
    TSFREC.TSFCHGFL = "N"; /* default to no*/
  end

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TS0WW01.TS0WWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/

  TSFREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSFREC.ZZZCHGDT = TS0WW01.TS0WWCDT; /* change date*/
  TSFREC.ZZZSDT = TS0WW01.TS0WWCDT; /* Set up date*/
  TSFREC.TS-ADVN-SHP-DT = TS0WW01.TS0WWCDT;
  TSFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  TSFREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Set up time*/
  TSFREC.ZZZCHGCT = 0; /* Change count*/

  call "IO2540" ("A ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS40"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    TS0WW01.TS0WWNSF = "Y"; /* set neg sql flag error*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0WM001.XXXPRCNM = "TS0WS40"; /* Process name*/
    exit stack;

  end


end // end TS0WS40

// Packing list updates
Function TS0WS45()
   /* ------------------------------------------------------------*/

                   /* PACKING LIST UPDATES*/

      /* 1) Move in all key fields to tsirec*/
      /* 2) Select the packing list row to see if it exists*/
         /* - if contention problems - exit the loop*/
         /* - if row was not found then perform add pl row*/
         /* - if row was found then perform update pl row*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TS0WM001.TSFSHPID; /* shipment number*/
  TSIREC.PC3PONBR = TS0WW02.PC3PONBR[TS0WWTIX]; /* po number*/
  TSIREC.XGPCD = TSWREC.XGPCD; /* product code*/
  TSIREC.PC2CUXID = TS0WW02.PC2CUXID[TS0WWTIX]; /* customer xref*/
  TSIREC.SY1STNBR = TS0WW02.SY1STNBR[TS0WWTIX]; /* style number*/
  TSIREC.SY2CLRID = TS0WW02.SY2CLRID[TS0WWTIX]; /* color number*/
  TSIREC.XDMCD = TS0WW02.XDMCD[TS0WWTIX]; /* dimension code*/
   /* MOVE TS0WW02.XQACD(TS0WWTIX) TO TSIREC.XQACD;/* quality code*/
  TSIREC.XQACD = "*"; /* quality code*/
  TSIREC.XOWCD = TS0WW02.XOWCD[TS0WWTIX]; /* owner group*/
  TSIREC.PC2INSEG = TS0WW02.PC2INSEG[TS0WWTIX]; /* spec difference*/
  TSIREC.XPGCD = TS0WW02.XPGCD[TS0WWTIX]; /* spec difference*/
  TSIREC.XUMCD = TS0WW02.XUMCD[TS0WWTIX]; /* unit of measure*/
  TSIREC.OP1CUOID = TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX];
  TSIREC.OP1NORID = TS0WW02.TS0WM-NIKE-ORD-ID[TS0WWTIX];
  if (TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX] > 0)
    TSIREC.OP1PARTN = TS0WW02.TS0WM-ORD-PART-CHAR[TS0WWTIX];
  else
    TSIREC.OP1PARTN = " ";
  end

   /* **********************************************/
     /* select the table rows from dtrans.vcplhd01*/
   /* **********************************************/

  TS0WS50(); /* select the table rows*/
  TS0WS55(); /* fetch the first table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/
    TS0WS60(); /* add packing list row*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* if row was found*/
      TS0WS65(); /* select unique table row*/
      if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/
        TS0WS60(); /* add packing list row*/
      else
        if (SQLCA.VAGen_SQLCODE == 0) /* if row was found*/
          TS0WS70(); /* update packing list row*/
        end
      end
    end
  end

  TS0WS75(); /* close the selected set*/


end // end TS0WS45

// Select pl rows VCPLHD01
Function TS0WS50()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "SB"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0WW01.TS0WWTIX = TS0WW01.TS0WWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0WW01.TS0WWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS50"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0WS50"; /* Process name*/
  end


end // end TS0WS50

// Fetch table rows VCPLHD01
Function TS0WS55()
   /* ------------------------------------------------------------*/

                 /* FETCH PACKING LIST ROW*/

    /* 1) Fetch the packing list row.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "NB"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      TS0WW01.TS0WWSWC = "Y"; /* set oen of set switch*/
    else
      if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
       || SQLCA.VAGen_SQLCODE == -904)
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0WW01.TS0WWTIX = TS0WW01.TS0WWMAX + 1; /* get out of loop*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0WW01.TS0WWNSF = "Y"; /* set neg SQL flag to yes*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0WS55"; /* Process name*/
      TA1REC.TA1LOC = "FETCH THE TABLE ROW";
      TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0WM001.XXXPRCNM = "TS0WS55"; /* Process name*/
    end
  end


end // end TS0WS55

// Add packing list row VCPLHD01
Function TS0WS60()
   /* ------------------------------------------------------------*/

                   /* ADD PACKING LIST ROW*/

    /* 1) Move in all fields to TSIREC.*/
    /* 2) Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

  set TSIREC empty; /* initialize record*/

  TSIREC.TSFSHPID = TS0WM001.TSFSHPID; /* shipment number*/
  TSIREC.TSIPLNBR = TS0WW01.TS0WWPCK; /* Nike pl number*/
  TSIREC.PC3PONBR = TS0WW02.PC3PONBR[TS0WWTIX]; /* po number*/
  TSIREC.FY1FCTYC = TS0WW02.TS0WWFCT[TS0WWTIX]; /* factory code*/
  TSIREC.XGPCD = TSWREC.XGPCD; /* product code*/
  TSIREC.PC2CUXID = TS0WW02.PC2CUXID[TS0WWTIX]; /* style number*/
  TSIREC.SY1STNBR = TS0WW02.SY1STNBR[TS0WWTIX]; /* style number*/
  TSIREC.SY2CLRID = TS0WW02.SY2CLRID[TS0WWTIX]; /* color*/
  TSIREC.XDMCD = TS0WW02.XDMCD[TS0WWTIX]; /* dimension code*/
  TSIREC.XQACD = TS0WW02.XQACD[TS0WWTIX]; /* quality code*/
  TSIREC.XOWCD = TS0WW02.XOWCD[TS0WWTIX]; /* owner group*/
  TSIREC.PC2INSEG = TS0WW02.PC2INSEG[TS0WWTIX]; /* spec difference*/
  TSIREC.XPGCD = TS0WW02.XPGCD[TS0WWTIX]; /* spec difference*/
  TSIREC.XUMCD = TS0WW02.XUMCD[TS0WWTIX]; /* unit of measure*/
  TSIREC.OP1CUOID = TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX];
  TSIREC.OP1NORID = TS0WW02.TS0WM-NIKE-ORD-ID[TS0WWTIX];
  if (TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX] > 0)
    TSIREC.OP1PARTN = TS0WW02.TS0WM-ORD-PART-CHAR[TS0WWTIX];
  else
    TSIREC.OP1PARTN = " ";
  end

  TSIREC.TSIMSCFL = "N"; /* musical style flag*/
  TSIREC.TSIMSCGR = " "; /* musical style group*/

  if (TS0WW02.TSISTAT[TS0WWTIX] == "  " /* If no other status set*/
   || TS0WW02.TSISTAT[TS0WWTIX] == "99") /* OR OK*/
    TSIREC.TSISTAT = "IP";
                                   /* cpl status flag indicating in-process*/
  else
    TSIREC.TSISTAT = TS0WW02.TSISTAT[TS0WWTIX]; /* move status*/
  end

  if (TS0WW02.XRECD[TS0WWTIX] == "  " /* If no other exception*/
   || TS0WW02.XRECD[TS0WWTIX] == "99") /* OR OK*/
    TSIREC.XRECD = "  "; /* Set exception cd*/
  else
    TSIREC.XRECD = TS0WW02.XRECD[TS0WWTIX]; /* move exception cd*/
  end

  TSIREC.TSISHPQT = TS0WW02.TS0WMSHP[TS0WWTIX]; /* quantity shipped*/
  TSIREC.TSIRSVQT = 0; /* quantity reserved*/
  TSIREC.TSIRCVQT = 0; /* quantity received*/
  TSIREC.TSICRTQT = 0; /* quantity cartons*/
  TSIREC.TSIPLCBM = 0; /* cubic meters*/
  TSIREC.TSIPLTKG = 0; /* kilograms*/
  TSIREC.TSHNKCN1 = TS0WW01.TS0WWCTR; /* container #1*/
  TSIREC.TSISHPQ1 = TS0WW02.TS0WMSHP[TS0WWTIX]; /* quantity shipped#1*/
  TSIREC.TSIRSVQ1 = 0; /* quantity reserved #1*/
  TSIREC.TSIRCVQ1 = 0; /* quantity received #1*/
  TSIREC.TSICRTQ1 = 0; /* quantity cartons #1*/
  TSIREC.TSICBM1 = 0; /* cubic meters #1*/
  TSIREC.TSITKG1 = 0; /* kilograms #1*/
  TSIREC.TSILOCR = " "; /* letter of credit*/
  TSIREC.TSPFILE = 0; /* factory file number*/
  TSIREC.TSIDETFL = "N"; /* detail flag*/
  TSIREC.TSRTEXT = " "; /* comment line*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSIREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move in set up date*/
  TSIREC.ZZZSTM = XX0XW01.XX0XWTIM; /* move in set up time*/
  TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
  TSIREC.ZZZCHGCT = 0; /* initialize change count*/

  TSGREC.TSNFNC = "A "; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0WW02.TS0WWPAF[TS0WWTIX] = "Y"; /* packing list added flag*/
    TS0WW01.TS0WWPCK = TS0WW01.TS0WWPCK + 1; /* increment pl counter*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0WW01.TS0WWTIX = TS0WW01.TS0WWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0WW01.TS0WWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS60"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0WS60"; /* Process name*/
  end


end // end TS0WS60

// Select (SO)    DTRANS.VCPLHD01
Function TS0WS65()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TS0WM001.TSFSHPID; /* shipment number*/
  TSIREC.PC3PONBR = TS0WW02.PC3PONBR[TS0WWTIX]; /* po number*/
  TSIREC.XGPCD = TSWREC.XGPCD; /* product code*/
  TSIREC.PC2CUXID = TS0WW02.PC2CUXID[TS0WWTIX]; /* customer xref*/
  TSIREC.SY1STNBR = TS0WW02.SY1STNBR[TS0WWTIX]; /* style number*/
  TSIREC.SY2CLRID = TS0WW02.SY2CLRID[TS0WWTIX]; /* color number*/
  TSIREC.XDMCD = TS0WW02.XDMCD[TS0WWTIX]; /* dimension code*/
  TSIREC.XQACD = TS0WW02.XQACD[TS0WWTIX]; /* quality code*/
  TSIREC.XOWCD = TS0WW02.XOWCD[TS0WWTIX]; /* owner group*/
  TSIREC.PC2INSEG = TS0WW02.PC2INSEG[TS0WWTIX]; /* spec difference*/
  TSIREC.XPGCD = TS0WW02.XPGCD[TS0WWTIX]; /* spec difference*/
  TSIREC.XUMCD = TS0WW02.XUMCD[TS0WWTIX]; /* unit of measure*/
  TSIREC.OP1CUOID = TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX];
  TSIREC.OP1NORID = TS0WW02.TS0WM-NIKE-ORD-ID[TS0WWTIX];
  if (TS0WW02.TS0WM-CUST-ORD-ID[TS0WWTIX] > 0)
    TSIREC.OP1PARTN = TS0WW02.TS0WM-ORD-PART-CHAR[TS0WWTIX];
  else
    TSIREC.OP1PARTN = " ";
  end
  TSGREC.TSNFNC = "SO"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0WW01.TS0WWTIX = TS0WW01.TS0WWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0WW01.TS0WWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS65"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0WS65"; /* Process name*/
  end

end // end TS0WS65

// Update pl row VCPLHD01
Function TS0WS70()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

       /* - Find next available container field in tsirec which*/
         /* has not been filled.*/
       /* - Move in all fields to TSIREC.*/
       /* - Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

   /* ****************************************************/
   /* move fields to next available container*/
   /* ****************************************************/

  if (TSIREC.TSHNKCN2 <= 0) /* if second cntnr is available*/
    TSIREC.TSHNKCN2 = TS0WW01.TS0WWCTR; /* container#2*/
    TSIREC.TSISHPQ2 = TS0WW02.TS0WMSHP[TS0WWTIX]; /* shipped#2*/
    TSIREC.TSIRSVQ2 = 0; /* reserved #2*/
    TSIREC.TSIRCVQ2 = 0; /* received #2*/
    TSIREC.TSICRTQ2 = 0; /* cartons #2*/
    TSIREC.TSICBM2 = 0; /* cbms #2*/
    TSIREC.TSITKG2 = 0; /* kilos #2*/
  else
    if (TSIREC.TSHNKCN3 <= 0) /* if third cntnr is available*/
      TSIREC.TSHNKCN3 = TS0WW01.TS0WWCTR; /* container#3*/
      TSIREC.TSISHPQ3 = TS0WW02.TS0WMSHP[TS0WWTIX]; /* shipped#3*/
      TSIREC.TSIRSVQ3 = 0; /* reserved #3*/
      TSIREC.TSIRCVQ3 = 0; /* received #3*/
      TSIREC.TSICRTQ3 = 0; /* cartons #3*/
      TSIREC.TSICBM3 = 0; /* cbms #3*/
      TSIREC.TSITKG3 = 0; /* kilos #3*/
    else
      if (TSIREC.TSHNKCN4 <= 0) /* if fourth cntnr is available*/
        TSIREC.TSHNKCN4 = TS0WW01.TS0WWCTR; /* container#4*/
        TSIREC.TSISHPQ4 = TS0WW02.TS0WMSHP[TS0WWTIX]; /* shipped#4*/
        TSIREC.TSIRSVQ4 = 0; /* reserved #4*/
        TSIREC.TSIRCVQ4 = 0; /* received #4*/
        TSIREC.TSICRTQ4 = 0; /* cartons #4*/
        TSIREC.TSICBM4 = 0; /* cbms #4*/
        TSIREC.TSITKG4 = 0; /* kilos #4*/
      else
        if (TSIREC.TSHNKCN5 <= 0) /* if fifth cntnr is available*/
          TSIREC.TSHNKCN5 = TS0WW01.TS0WWCTR; /* container#5*/
          TSIREC.TSISHPQ5 = TS0WW02.TS0WMSHP[TS0WWTIX];
          TSIREC.TSIRSVQ5 = 0;
          TSIREC.TSIRCVQ5 = 0;
          TSIREC.TSICRTQ5 = 0;
          TSIREC.TSICBM5 = 0;
          TSIREC.TSITKG5 = 0;
        else
          if (TSIREC.TSHNKCN6 <= 0) /* if sixth cntnr is available*/
            TSIREC.TSHNKCN6 = TS0WW01.TS0WWCTR; /* container#6*/
            TSIREC.TSISHPQ6 = TS0WW02.TS0WMSHP[TS0WWTIX];
            TSIREC.TSIRSVQ6 = 0;
            TSIREC.TSIRCVQ6 = 0;
            TSIREC.TSICRTQ6 = 0;
            TSIREC.TSICBM6 = 0;
            TSIREC.TSITKG6 = 0;
          else
            if (TSIREC.TSHNKCN7 <= 0) /* if seventh cntnr is available*/
              TSIREC.TSHNKCN7 = TS0WW01.TS0WWCTR; /* container#7*/
              TSIREC.TSISHPQ7 = TS0WW02.TS0WMSHP[TS0WWTIX];
              TSIREC.TSIRSVQ7 = 0;
              TSIREC.TSIRCVQ7 = 0;
              TSIREC.TSICRTQ7 = 0;
              TSIREC.TSICBM7 = 0;
              TSIREC.TSITKG7 = 0;
            else
              if (TSIREC.TSHNKCN8 <= 0) /* if eighth cntnr is available*/
                TSIREC.TSHNKCN8 = TS0WW01.TS0WWCTR; /* container#8*/
                TSIREC.TSISHPQ8 = TS0WW02.TS0WMSHP[TS0WWTIX];
                TSIREC.TSIRSVQ8 = 0;
                TSIREC.TSIRCVQ8 = 0;
                TSIREC.TSICRTQ8 = 0;
                TSIREC.TSICBM8 = 0;
                TSIREC.TSITKG8 = 0;
              end
            end
          end
        end
      end
    end
  end

   /* ****************************************************/
   /* move in all other fields to tsirec*/
   /* ****************************************************/

  if (TS0WW02.TSISTAT[TS0WWTIX] == "  ") /* If status not set*/
     /* continue on*/
  else
    if (TS0WW02.TSISTAT[TS0WWTIX] == "99") /* If status ok*/
      TSIREC.TSISTAT = "IP"; /* Set back to in-process*/
    else
      TSIREC.TSISTAT = TS0WW02.TSISTAT[TS0WWTIX]; /* move status*/
    end
  end

  if (TS0WW02.XRECD[TS0WWTIX] == "  ") /* If exception set*/
     /* continue on*/
  else
    if (TS0WW02.XRECD[TS0WWTIX] == "99") /* If except ok*/
      TSIREC.XRECD = "  "; /* move except*/
    else
      TSIREC.XRECD = TS0WW02.XRECD[TS0WWTIX]; /* move exception cd*/
    end
  end

  TSIREC.TSISHPQT = TS0WW02.TS0WMSHP[TS0WWTIX] + TSIREC.TSISHPQT;

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0WW02.TS0WWPAF[TS0WWTIX] = "Y"; /* packing list added flag*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0WW01.TS0WWTIX = TS0WW01.TS0WWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0WW01.TS0WWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS70"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0WS70"; /* Process name*/
  end


end // end TS0WS70

// Close selected set VCPLHD01
Function TS0WS75()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET OF PACKING LIST ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "CB"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0WW01.TS0WWTIX = TS0WW01.TS0WWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0WW01.TS0WWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0WS75"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0WM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0WM001.XXXPRCNM = "TS0WS75"; /* Process name*/
  end


end // end TS0WS75

//*** RECORD=TS0WW01 ****
// Working storage for TS0u - Container Build
// ***********************
Record TS0WW01 type basicRecord
  10 TSNFNC TSNFNC ; 
  10 TS0WWIXM TS0WWIXM ; 
  10 TS0WWIXW TS0WWIXW ; 
  10 TS0WWCOM TS0WWCOM ; 
  10 TS0WWMIX TS0WWMIX ; 
  10 TS0WWMPX TS0WWMPX ; 
  10 TS0WWTIX TS0WWTIX ; 
  10 TS0WWPGE TS0WWPGE ; 
  10 TS0WWCTR TS0WWCTR ; 
  10 TS0WWPCK TS0WWPCK ; 
  10 TS0WWMAX TS0WWMAX ; 
  10 TS0WWMCN TS0WWMCN ; 
  10 TS0WWWK1 TS0WWWK1 ; 
  10 TS0WWWK2 TS0WWWK2 ; 
  10 TS0WWPSW TS0WWPSW ; 
  10 TS0WWPWF TS0WWPWF ; 
  10 TS0WWDTE TS0WWDTE ; 
  10 TS0WWCDT TS0WWCDT ; 
    15 TS0WWCEN TS0WWCEN ; 
    15 TS0WWYMD TS0WWYMD ; 
      20 TS0WWYY TS0WWYY ; 
      20 TS0WWMM TS0WWMM ; 
      20 TS0WWDD TS0WWDD ; 
  10 TS0WWCMD TS0WWCMD ; 
    15 TS0WWMMM TS0WWMMM ; 
    15 TS0WWMDD TS0WWMDD ; 
    15 TS0WWMYY TS0WWMYY ; 
  10 TS0WWWA1 TS0WWWA1 ; 
    15 TS0WWWF1 TS0WWWF1 ; 
    15 TS0WWSH1 TS0WWSH1 [13] ; 
  10 TS0WWWA2 TS0WWWA2 ; 
    15 TS0WWWF2 TS0WWWF2 ; 
    15 TS0WWSH2 TS0WWSH2 [13] ; 
  10 TS0WWWA3 TS0WWWA3 ; 
    15 TS0WWWF3 TS0WWWF3 ; 
    15 TS0WWSH3 TS0WWSH3 [13] ; 
  10 TS0WWWA4 TS0WWWA4 ; 
    15 TS0WWWF4 TS0WWWF4 ; 
    15 TS0WWSH4 TS0WWSH4 [13] ; 
  10 TS0WWWA6 TS0WWWA6 ; 
    15 TS0WWWF6 TS0WWWF6 ; 
    15 TS0WWSH6 TS0WWSH6 [13] ; 
  10 TS0WWWA7 TS0WWWA7 ; 
    15 TS0WWWF7 TS0WWWF7 ; 
    15 TS0WWSH7 TS0WWSH7 [13] ; 
  10 TS0WWHEQ TS0WWHEQ ; 
  10 TS0WWHEP TS0WWHEP ; 
  10 TS0WWSEQ TS0WWSEQ ; 
  10 TS0WWSEP TS0WWSEP ; 
  10 TS0WWTTQ TS0WWTTQ ; 
  10 TS0WWTTD TS0WWTTD ; 
  10 TS0WWTTP TS0WWTTP ; 
  10 TS0WWPOQ TS0WWPOQ ; 
  10 TS0WWPLQ TS0WWPLQ ; 
  10 TS0WWRCQ TS0WWRCQ ; 
  10 TS0WWIDS TS0WWIDS ; 
  10 TS0WWIPI TS0WWIPI ; 
  10 TS0WWIOT TS0WWIOT ; 
  10 TS0WWFFL TS0WWFFL ; 
  10 TS0WWSPF TS0WWSPF ; 
  10 TS0WWNSF TS0WWNSF ; 
  10 TS0WWSAF TS0WWSAF ; 
  10 TS0WWCAF TS0WWCAF ; 
  10 TS0WWEFL TS0WWEFL ; 
  10 TS0WWSWC TS0WWSWC ; 
  10 TS0WWDEF TS0WWDEF ; 
  10 TS0WWFSW TS0WWFSW ; 
  10 TS0WWCYR TS0WWCYR ; 
    15 TS0WWCCC TS0WWCCC ; 
    15 TS0WWCYY TS0WWCYY ; 
  10 TS0WWPID TS0WWPID ; 
    15 TS0WWPCC TS0WWPCC ; 
    15 TS0WWPOI TS0WWPOI ; 
      20 TS0WWPYR TS0WWPYR ; 
        25 TS0WWPY1 TS0WWPY1 ; 
        25 TS0WWPY2 TS0WWPY2 ; 
      20 TS0WWPMQ TS0WWPMQ ; 
      20 TS0WWDMO TS0WWDMO ; 
      20 TS0WWFCT TS0WWFCT ; 
  10 TS0WWDAT TS0WWDAT ; 
    15 TS0WWPCN TS0WWPCN ; 
    15 TS0WWPYY TS0WWPYY ; 
    15 TS0WWPM1 TS0WWPM1 ; 
    15 TS0WWPM2 TS0WWPM2 ; 
  10 PC3PONBR PC3PONBR ; 
  10 TS0WMPOI TS0WMPOI ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC2CUXID PC2CUXID ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 TSHNKCN TSHNKCN [8] ; 
  10 TS0WWNCN TS0WWNCN [8] ; 
  10 TS0WW-PREV-OP1CUOID TS0WW-PREV-OP1CUOID ; 
  10 TS0WW-PREV-OP1NORID TS0WW-PREV-OP1NORID ; 
end // end TS0WW01

//*** RECORD=TS0WW02 ****
// Working map detail record for TS0U - Container Build
// ***********************
Record TS0WW02 type basicRecord
  10 TS0WWLIN TS0WWLIN [200] ; 
    15 PC3PONBR PC3PONBR ; 
    15 TS0WMPOI TS0WMPOI ; 
      20 TS0WWPYR TS0WWPYR ; 
      20 TS0WWPMQ TS0WWPMQ ; 
      20 TS0WWDMO TS0WWDMO ; 
      20 TS0WWFCT TS0WWFCT ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC2CUXID PC2CUXID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 TS0WMSHP TS0WMSHP ; 
    15 XDMCD XDMCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XQACD XQACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 TSISTAT TSISTAT ; 
    15 XRECD XRECD ; 
    15 TS0WWPAF TS0WWPAF ; 
    15 TS0WWAPS TS0WWAPS ; 
    15 TS0WM-CUST-ORD-ID TS0WM-CUST-ORD-ID ; 
      20 * num(8) ; 
      20 TS0WM-ORD-PART-CHAR TS0WM-ORD-PART-CHAR ; 
    15 TS0WM-NIKE-ORD-ID TS0WM-NIKE-ORD-ID ; 
end // end TS0WW02

//*** RECORD=TS0WW03 ****
// Working map detail record for TS0U - Container Build
// ***********************
Record TS0WW03 type basicRecord
  10 TS0WWGR3 TS0WWGR3 ; 
    15 TS0WWLN3 TS0WWLN3 [13] ; 
      20 PC3PONBR PC3PONBR ; 
      20 TS0WMPOI TS0WMPOI ; 
      20 PC4ORTYP PC4ORTYP ; 
      20 PC2CUXID PC2CUXID ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 TS0WMSHP TS0WMSHP ; 
      20 XDMCD XDMCD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XQACD XQACD ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 XOWCD XOWCD ; 
      20 TSISTAT TSISTAT ; 
      20 XRECD XRECD ; 
      20 TS0WM-CUST-ORD-ID TS0WM-CUST-ORD-ID ; 
        25 * num(8) ; 
        25 TS0WM-ORD-PART-CHAR TS0WM-ORD-PART-CHAR ; 
      20 TS0WM-NIKE-ORD-ID TS0WM-NIKE-ORD-ID ; 
end // end TS0WW03

//*** RECORD=TS0WW04 ****
// Working map detail record for TS0U - Container Build
// ***********************
Record TS0WW04 type basicRecord
  10 TS0WWGR4 TS0WWGR4 ; 
    15 TS0WWLN4 TS0WWLN4 [13] ; 
      20 PC3PONBR PC3PONBR ; 
      20 TS0WMPOI TS0WMPOI ; 
      20 PC4ORTYP PC4ORTYP ; 
      20 PC2CUXID PC2CUXID ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 TS0WMSHP TS0WMSHP ; 
      20 XDMCD XDMCD ; 
      20 PC2INSEG PC2INSEG ; 
      20 XQACD XQACD ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 XOWCD XOWCD ; 
      20 TSISTAT TSISTAT ; 
      20 XRECD XRECD ; 
      20 TS0WM-CUST-ORD-ID TS0WM-CUST-ORD-ID ; 
        25 * char(8) ; 
        25 OP1PARTN OP1PARTN ; 
      20 TS0WM-NIKE-ORD-ID TS0WM-NIKE-ORD-ID ; 
end // end TS0WW04

// op-cust-ord-id map display
DataItem TS0WM-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id map display
DataItem TS0WM-NIKE-ORD-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-part-char
DataItem TS0WM-ORD-PART-CHAR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id
DataItem TS0WMPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shipment
DataItem TS0WMSHP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous op-cust-ord-id
DataItem TS0WW-PREV-OP1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous op-nike-ord-id
DataItem TS0WW-PREV-OP1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-add-po-style-fl
DataItem TS0WWAPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// container added flag
DataItem TS0WWCAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem TS0WWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current date ccyymmdd
DataItem TS0WWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working storage century
DataItem TS0WWCEN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current map date mmddyy
DataItem TS0WWCMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-compress-index
DataItem TS0WWCOM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-container-counter
DataItem TS0WWCTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century/year
DataItem TS0WWCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0WWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem TS0WWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// day
DataItem TS0WWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data entered flag
DataItem TS0WWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0WWDMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage date
DataItem TS0WWDTE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end flag for loops
DataItem TS0WWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory
DataItem TS0WWFCT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time through flag
DataItem TS0WWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add/delete function switch
DataItem TS0WWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage 3 group
DataItem TS0WWGR3 char(806)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage 3 group
DataItem TS0WWGR4 char(806)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hard error percent
DataItem TS0WWHEP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hard error quantity
DataItem TS0WWHEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id/type correct switch
DataItem TS0WWIDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. type correct switch
DataItem TS0WWIOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. id correct switch
DataItem TS0WWIPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working index 1
DataItem TS0WWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 2
DataItem TS0WWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line
DataItem TS0WWLIN char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage 3 line
DataItem TS0WWLN3 char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage 4 line
DataItem TS0WWLN4 char(62)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-table-lines
DataItem TS0WWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max container span number
DataItem TS0WWMCN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map day
DataItem TS0WWMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-map-index
DataItem TS0WWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0WWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map month
DataItem TS0WWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-map-position-index
DataItem TS0WWMPX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map year
DataItem TS0WWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIKE_CNTNR_NBR array
DataItem TS0WWNCN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Negative SQL return flag
DataItem TS0WWNSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-tbl-pl-added-fl
DataItem TS0WWPAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id century
DataItem TS0WWPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-packing-list-counter
DataItem TS0WWPCK smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem TS0WWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-page-counter
DataItem TS0WWPGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id redefinition
DataItem TS0WWPID char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Packing list accumulated qty
DataItem TS0WWPLQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem TS0WWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0WWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0WWPMQ char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id yr, mo1, mo1, factory
DataItem TS0WWPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO accumulated quantity
DataItem TS0WWPOQ decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0WWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO quantity warning flag
DataItem TS0WWPWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year char 1
DataItem TS0WWPY1 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year char 2
DataItem TS0WWPY2 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0WWPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0WWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Reciepts accumulated quantity
DataItem TS0WWRCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shipment added flag
DataItem TS0WWSAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Soft error percent
DataItem TS0WWSEP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Soft error quantity
DataItem TS0WWSEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Set highlights flag 1
DataItem TS0WWSH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 2
DataItem TS0WWSH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 3
DataItem TS0WWSH3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 4
DataItem TS0WWSH4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 6
DataItem TS0WWSH6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 7
DataItem TS0WWSH7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Span error flag indicator
DataItem TS0WWSPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0WWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-table-index
DataItem TS0WWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total shipping/received diff
DataItem TS0WWTTD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received pct
DataItem TS0WWTTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received qty
DataItem TS0WWTTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warning array 1
DataItem TS0WWWA1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 2
DataItem TS0WWWA2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 3
DataItem TS0WWWA3 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 4
DataItem TS0WWWA4 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 6
DataItem TS0WWWA6 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 7
DataItem TS0WWWA7 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  1
DataItem TS0WWWF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  2
DataItem TS0WWWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  3
DataItem TS0WWWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  4
DataItem TS0WWWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  6
DataItem TS0WWWF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  7
DataItem TS0WWWF7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage index 1
DataItem TS0WWWK1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index 2
DataItem TS0WWWK2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working storage yr,mo,day
DataItem TS0WWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0WWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

