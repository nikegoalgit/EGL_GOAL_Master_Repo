package ts0z;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import dg.common.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import ob.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import pw.common.*;
import sl.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=TS0Z ****
// Entry into this application is from the Container Browse
// Maint./Inquiry Application.  This application will allow the
// user to add additional packing lists to an existing
// container or to create a new container with new packing
// lists.  The container information is entered in the heading
// of the screen and packing lists (ie. po#/product) are
// entered by the user in the detail portion of the screen.
// 
// If the screen has been completely filled up with packing
// lists then pressing enter will take the user to a new screen
// with blank detail and with the same header cntnr information
// (assuming that the user has more packing lists to enter for
// this container).  If enter is pressed and the screen is not
// filled up, then a new screen with blank header and detail
// fields will appear allowing the user to add a new container
// for the shipment.  If enter is pressed and no data has been
// entered on a blank detail screen, the application will
// continue to the container browse inquiry/maintenance appli-
// cation.  The user may also review previously entered
// screens by pressing PF7 to scroll back.  The user will also
// be allowed to change previously entered screens(i.e. add,
// change,delete).  If enter is pressed on a previously entered
// screen, it will in effect act as a PF8 and scroll 1 page
// forward (PF8 will do the same thing).
// 
// This program is a clone of the container build program
// TS0U with the following major changes.
// 
//    1. This program will add to an existing container.  The
//       user could select the container from the container
//       browse in which case the screen header would already
//       be formatted.  Or the user can enter an existing
//       container in the screen header.
// 
//    2. This program will not allow the user to change
//       existing packing list detail.  The existing packing
//       list detail will be protected and non-modifiable.
//       This detail can only be maintained in the container
//       browse program TS0Y.
// 
//    3. This program will not cancel a shipment with the PA2
//       key.
// 
//    4. This program will return to container browse when
//       PF3 is pressed (no key positioning is necessary unless
//       it is simple in the container browse).
// 
//    5. If enter is pressed from a blank screen, nothing will
//       happen (TS0U would continue to the next application
//       in the shipment add).
// 
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          07/05/88 CEPPLE  New application.
// TS#000   07/13/90 CEPPLE  Allow user to enter any po id
//                           regardless of whether or not it
//                           returns more than one po number.
// TS#012   08/02/90 CEPPLE  Add gpc to screen heading.
// TS#      11/30/90 DHUFFM  Change quality code default.
// TS#009   12/06/90 KSTOKK  Change carton field from required
//                           to optional.
// TS#179   03/11/91 DHUFFM  Change to not match on quality
//                           code for P.O.
// TS#000   04/09/91 SFORD   Table Changes(set-up time CPLHD01)
// TS#000   01/09/92 KSTOKK  BGRADE and SO/PO changes.
// TS#245   04/06/92 SFORD   Allow user to enter invalid S.O.
// TS#999   08/13/91 SFORD   Table Changes(USER-ID  IN CPLHD01)
// TS#999   09/02/91 NMASTE  CSP 4.1 -- TS0ZW-ORD-PART-CHAR
// TS#999   07/19/94 SLEWIS  BUG FIX FOR SO NUMBER
// TS#999   04/19/95 SLEWIS  CHG SO NUMBER LENGTH
// TS#000   11/08/96 JCARL1  Remove alarm from msg display.
// TS1512   10/28/98 JCARL1  Fix container number population
//                           bug.
// TS0000   01/13/99 VKUMAR  Fix container number population
//                           bug.(Changed in TS0ZS55)
// TS0000   05/26/99 VKUMAR  Handled -811 in case of same
//                           sty/clr in diff packing lists but
//                           with same seq,under single PO.
//          06/16/99 lrao    to fix validate seq-nbr only
//                           when user presses enter ur0z500
// TS0000   02/25/00 npulug  Modified not to allow entry of
//                           duplicate packlist to a
//                           container
// TS0000   04/19/00 kgevar  modified to create another
//                           pack list for the same product
//                           in the same container. This change
//                           is made to allow for a different
//                           invoice number
// TS0000   04/02/01 MLATHA  correct index is assigned in proc
//                           ts0z551 and owner group code in
//                           proc ts0z581.
// TS0000   11/02/01 NPULUG  Increased the length of seq# field
//                           in the map from 3 to 4.
// *********************
Program TS0Z type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC4REC PC4REC; // record
  PC6REC PC6REC; // record
  PCFREC PCFREC; // record
  PCMREC PCMREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS0ZW01 TS0ZW01; // record
  TS0ZW02 TS0ZW02; // record
  TS0ZW03 TS0ZW03; // record
  TS0ZW04 TS0ZW04; // record
  TS5REC TS5REC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  TSXREC TSXREC; // record
  VCPLHD04 VCPLHD04; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VPOITM03 VPOITM03; // record
  VPRDCU03 VPRDCU03; // record
  VTSLOC02 VTSLOC02; // record
  WTS4001 WTS4001; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOWTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XRETBL {deleteAfterUse = yes}; // table
  use YCNTBL {deleteAfterUse = yes}; // table
  use TS0ZM.TS0ZM001,  // forms
      TS0ZM.TS0ZM002, 
      TS0ZM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0ZW01 empty; /* Initialize working storage*/
    set TS0ZW02 empty;
    set TS0ZW03 empty;
    set TS0ZW04 empty;
    set FY1REC empty; /* Initialize records used*/
    set OP1REC empty;
    set OP2REC empty;
    set PC2REC empty;
    set PC3REC empty;
    set PC4REC empty;
    set PC6REC empty;
    set PCFREC empty;
    set PCMREC empty;
    set PCYREC empty;
    set PG2REC empty;
    set TAEREC empty;
    set TSHREC empty;
    set TSIREC empty;
    set TSTREC empty;
    set TSGREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set XX0XW02 empty;
    set TS0ZM001 initial; /* Initialize map1 output area*/
    set TS0ZM002 initial; /* Initialize map2 output area*/

    TS0ZW01.TS0ZWSWR = "N"; /* Init. - request for data switch*/
    TS0ZW01.TS0ZWPSW = "N"; /* - problem switch*/
    TS0ZW01.TS0ZWPWF = "N"; /* - po quantity warning flag*/
    TS0ZW01.TS0ZWNSF = "N"; /* - negative SQL error flag*/
    TS0ZW01.TS0ZWCAF = "N"; /* - container added flag*/
    TS0ZW01.TS0ZWFFL = "Y"; /* - first time thru flag*/
    TSWREC.TSWPLPOS = 1; /* - p/l array position*/
    TS0ZW01.TS0ZWMIX = 1; /* - ws-map-index*/
    TS0ZW01.TS0ZWMPX = 1; /* - ws-map-position-index*/
    TS0ZW01.TS0ZWTIX = 1; /* - ws-tbl-index*/
    TS0ZW01.TS0ZWPGE = 1; /* - ws-page-counter*/
    TS0ZW01.TS0ZWCTR = 1; /* - ws-container-counter*/
    TS0ZW01.TS0ZWMAP = "1"; /* - map to be displayed*/
    TS0ZW01.TS0ZWPCK = 1; /* - ws-packing-list-counter*/
    TS0ZW01.TS0ZWMCN = 8; /* - max cntnr span number*/
    TS0ZW01.TS0ZWMAX = 400; /* - max-table-lines*/


     /* ==> Assign Left Map Header Field Values*/

    TS0ZM001.TSFSHPID = TSWREC.TSFSHPID; /* Nike id*/
    TS0ZM001.TSFBOL = TSWREC.TSFBOL; /* bill of lading*/
    if (TSWREC.TSWDOMFL == "Y") /* if domestic shpmnt indicated*/
      TS0ZM001.TSHCNTNR = TSWREC.TSFBOL; /* default cntnr to bol*/
    end
    TS0ZM001.TSACARCD = TSWREC.TSACARCD; /* carrier code*/
    TS0ZM001.TS5CRAFT = TSWREC.TS5CRAFT; /* craft code*/
    TS0ZM001.TSFSHPNB = TSWREC.TSFSHPNB; /* shipment number*/
    TS0ZM001.TSEDEST = TSWREC.TSEDEST; /* destination*/
    TS0ZM001.XWHCD = TSWREC.XWHCD; /* warehouse*/
    TS0ZM001.XGPCD = TSWREC.XGPCD; /* gpc*/


     /* ==> Assign Right Map Header Field Values*/

    TS0ZM002.TSFSHPID = TSWREC.TSFSHPID; /* Nike id*/
    TS0ZM002.TSFBOL = TSWREC.TSFBOL; /* bill of lading*/
    if (TSWREC.TSWDOMFL == "Y") /* if domestic shpmnt indicated*/
      TS0ZM002.TSHCNTNR = TSWREC.TSFBOL; /* default cntnr to bol*/
    end
    TS0ZM002.TSACARCD = TSWREC.TSACARCD; /* carrier code*/
    TS0ZM002.TS5CRAFT = TSWREC.TS5CRAFT; /* craft code*/
    TS0ZM002.TSFSHPNB = TSWREC.TSFSHPNB; /* shipment number*/
    TS0ZM002.TSEDEST = TSWREC.TSEDEST; /* destination*/
    TS0ZM002.XWHCD = TSWREC.XWHCD; /* warehouse*/
    TS0ZM002.XGPCD = TSWREC.XGPCD; /* gpc*/

    goto TS0Z000; /* Check valid from application*/


    TS0Z000: TS0Z000();
     /* ------------------------------------------------------------*/
     /* Converse special TS0Z special initialization*/
     /* ------------------------------------------------------------*/

    goto TS0Z001; /* Converse special initialization*/


    TS0Z001: TS0Z001();
     /* ------------------------------------------------------------*/
      /* Flow to converse container maintenance build application*/
     /* ------------------------------------------------------------*/

    goto TS0Z002; /* Container Maintenance Build*/


    TS0Z002: TS0Z002();
     /* ------------------------------------------------------------*/
     /* Flow to converse container maintenance build application*/
     /* ------------------------------------------------------------*/

    goto TS0Z002; /* Container Maintenance Build*/


  end // end main
end // end TS0Z

// Left  Map "M001"
Function TS0Z-213()
   /* ------------------------------------------------------------*/
   /* Converse Left screen*/
   /* ------------------------------------------------------------*/

  converse TS0ZM001 ;

  TS0ZM002.TSHCNTNR = TS0ZM001.TSHCNTNR;
  TS0ZM002.YCNCD = TS0ZM001.YCNCD;
  TS0ZM002.TSHTCBM = TS0ZM001.TSHTCBM;
  TS0ZM002.TSHTKG = TS0ZM001.TSHTKG;
  TS0ZM002.TSHSEAL = TS0ZM001.TSHSEAL;


  TS0ZW01.TS0ZWMIX = 1; /* set map index to 1*/

  while (TS0ZW01.TS0ZWMIX <= 13) /* until end of page*/

    TS0ZM002.PC3PONBR[TS0ZWMIX] = TS0ZM001.PC3PONBR[TS0ZWMIX];
    TS0ZM002.PC2CUXID[TS0ZWMIX] = TS0ZM001.PC2CUXID[TS0ZWMIX];
    TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWMIX] = TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWMIX];
    TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWMIX] = TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWMIX];
    TS0ZM002.TS0ZMSHP[TS0ZWMIX] = TS0ZM001.TS0ZMSHP[TS0ZWMIX];
    TS0ZM002.TS0ZMCRT[TS0ZWMIX] = TS0ZM001.TS0ZMCRT[TS0ZWMIX];
    TS0ZM002.TS0ZMCBM[TS0ZWMIX] = TS0ZM001.TS0ZMCBM[TS0ZWMIX];
    TS0ZM002.TS0ZMKG[TS0ZWMIX] = TS0ZM001.TS0ZMKG[TS0ZWMIX];
    TS0ZM002.SY1STNBR[TS0ZWMIX] = TS0ZM001.SY1STNBR[TS0ZWMIX];
    TS0ZM002.SY2CLRID[TS0ZWMIX] = TS0ZM001.SY2CLRID[TS0ZWMIX];
   /* TCS BEG*/
   /* MOVE TS0ZM001.XDMCD(TS0ZWMIX) TO TS0ZM002.XDMCD(TS0ZWMIX);*/
   /* TCS END*/

    if (TS0ZM001.XDMCD[TS0ZWMIX] == " " /* if detail line blank*/
     && TS0ZM001.TS0ZMKG[TS0ZWMIX] == 0 
     && TS0ZM001.TS0ZMCBM[TS0ZWMIX] == 0
     && TS0ZM001.TS0ZMCRT[TS0ZWMIX] == 0
     && TS0ZM001.TS0ZMSHP[TS0ZWMIX] == 0
     && TS0ZM001.PC3PONBR[TS0ZWMIX] == 0
     && TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWMIX] == 0
     && TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWMIX] == 0
     && TS0ZM001.TS0ZMPOI[TS0ZWMIX] == " "
     && TS0ZM001.PC4ORTYP[TS0ZWMIX] == " "
     && TS0ZM001.PC2CUXID[TS0ZWMIX] == " "
     && TS0ZM001.SY1STNBR[TS0ZWMIX] == " "
     && TS0ZM001.SY2CLRID[TS0ZWMIX] == " ")

      TS0ZM002.XOWCD[TS0ZWMIX] = " ";
      TS0ZM002.XUMCD[TS0ZWMIX] = " ";
      TS0ZM002.XPGCD[TS0ZWMIX] = " ";
      TS0ZM002.XQACD[TS0ZWMIX] = " ";
   /* TCS BEG*/
   /* MOVE ' ' TO TS0ZM002.PC2INSEG(TS0ZWMIX);*/
      TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWMIX] = 0;
      TS0ZM002.TS-SHP-LEG-NBR[TS0ZWMIX] = 0;
   /* TCS END*/

    end


    TS0ZW01.TS0ZWMIX = TS0ZW01.TS0ZWMIX + 1; /* incr map index*/

  end
end // end TS0Z-213

// Right Map "M002"
Function TS0Z-214()
   /* ------------------------------------------------------------*/
   /* Converse  Right screen*/
   /* ------------------------------------------------------------*/

  converse TS0ZM002 ;

   /* ------------------------------------------------------------*/
     /* Move like fields to the other map*/
   /* ------------------------------------------------------------*/

  TS0ZM001.TSHCNTNR = TS0ZM002.TSHCNTNR;
  TS0ZM001.YCNCD = TS0ZM002.YCNCD;
  TS0ZM001.TSHTCBM = TS0ZM002.TSHTCBM;
  TS0ZM001.TSHTKG = TS0ZM002.TSHTKG;
  TS0ZM001.TSHSEAL = TS0ZM002.TSHSEAL;


  TS0ZW01.TS0ZWMIX = 1; /* set map index to 1*/

  while (TS0ZW01.TS0ZWMIX <= 13) /* until end of page*/

    TS0ZM001.PC3PONBR[TS0ZWMIX] = TS0ZM002.PC3PONBR[TS0ZWMIX];
    TS0ZM001.PC2CUXID[TS0ZWMIX] = TS0ZM002.PC2CUXID[TS0ZWMIX];
    TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWMIX] = TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWMIX];
    TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWMIX] = TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWMIX];
    TS0ZM001.TS0ZMSHP[TS0ZWMIX] = TS0ZM002.TS0ZMSHP[TS0ZWMIX];
    TS0ZM001.TS0ZMCRT[TS0ZWMIX] = TS0ZM002.TS0ZMCRT[TS0ZWMIX];
    TS0ZM001.TS0ZMCBM[TS0ZWMIX] = TS0ZM002.TS0ZMCBM[TS0ZWMIX];
    TS0ZM001.TS0ZMKG[TS0ZWMIX] = TS0ZM002.TS0ZMKG[TS0ZWMIX];
    TS0ZM001.SY1STNBR[TS0ZWMIX] = TS0ZM002.SY1STNBR[TS0ZWMIX];
    TS0ZM001.SY2CLRID[TS0ZWMIX] = TS0ZM002.SY2CLRID[TS0ZWMIX];
   /* TCS BEG*/
   /* MOVE TS0ZM002.XDMCD(TS0ZWMIX) TO TS0ZM001.XDMCD(TS0ZWMIX);*/
   /* TCS END*/

    if (TS0ZM002.XOWCD[TS0ZWMIX] == " "
     && TS0ZM002.XUMCD[TS0ZWMIX] == " "
     && TS0ZM002.XPGCD[TS0ZWMIX] == " "
     && TS0ZM002.XQACD[TS0ZWMIX] == " "
     && TS0ZM002.TS-SHP-LEG-NBR[TS0ZWMIX] == 0
     && TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWMIX] == 0
     && TS0ZM002.TS0ZMKG[TS0ZWMIX] == 0
     && TS0ZM002.TS0ZMCBM[TS0ZWMIX] == 0
     && TS0ZM002.TS0ZMCRT[TS0ZWMIX] == 0
     && TS0ZM002.TS0ZMSHP[TS0ZWMIX] == 0
     && TS0ZM002.PC3PONBR[TS0ZWMIX] == 0
     && TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWMIX] == 0
     && TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWMIX] == 0
     && TS0ZM002.PC2CUXID[TS0ZWMIX] == " "
     && TS0ZM002.SY1STNBR[TS0ZWMIX] == " "
     && TS0ZM002.SY2CLRID[TS0ZWMIX] == " ")

      TS0ZM001.TS0ZMPOI[TS0ZWMIX] = " ";
      TS0ZM001.PC4ORTYP[TS0ZWMIX] = " ";
   /* TCS BEG*/
      TS0ZM001.XDMCD[TS0ZWMIX] = " ";
   /* TCS END*/

    end

    TS0ZW01.TS0ZWMIX = TS0ZW01.TS0ZWMIX + 1; /* incr map indes*/

  end


end // end TS0Z-214

// Cascade data into ws
Function TS0Z-51000()
   /* ------------------------------------------------------------*/

             /* CASCADE LEFT MAP DATA INTO WORKING STORAGE*/

      /* This process will cascade the screen data entered by*/
      /* the user into a working storage record in order to*/
      /* fill in all blanks left by the user in the map.*/

   /* ------------------------------------------------------------*/
   /* ** Clear most of w03 working storage ***/
  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail*/
    TS0ZW03.XOWCD[TS0ZWIXM] = " ";
    TS0ZW03.XUMCD[TS0ZWIXM] = " ";
    TS0ZW03.XPGCD[TS0ZWIXM] = " ";
    TS0ZW03.XQACD[TS0ZWIXM] = " ";
   /* TCS BEG*/
   /* MOVE ' ' TO TS0ZW03.PC2INSEG(TS0ZWIXM);*/
    TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM] = 0;
    TS0ZW03.TS-SHP-LEG-NBR[TS0ZWIXM] = 0;
   /* TCS END*/
    TS0ZW03.XDMCD[TS0ZWIXM] = " ";
    TS0ZW03.TS0ZMKG[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZMCBM[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZMCRT[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZMSHP[TS0ZWIXM] = 0;
    TS0ZW03.PC3PONBR[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZMPOI[TS0ZWIXM] = " ";
    TS0ZW03.PC4ORTYP[TS0ZWIXM] = " ";
    TS0ZW03.PC2CUXID[TS0ZWIXM] = " ";
    TS0ZW03.SY1STNBR[TS0ZWIXM] = " ";
    TS0ZW03.SY2CLRID[TS0ZWIXM] = " ";
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end


   /* ***********************************/
       /* cascade p.o. number*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.PC3PONBR = TS0ZM001.PC3PONBR[TS0ZWIXM];
  TS0ZW03.PC3PONBR[TS0ZWIXM] = TS0ZM001.PC3PONBR[TS0ZWIXM];

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM001.PC3PONBR[TS0ZWIXM] == 0) /* if blank on screen*/
      TS0ZW03.PC3PONBR[TS0ZWIXM] = TS0ZW01.PC3PONBR;
    else
      TS0ZW01.PC3PONBR = TS0ZM001.PC3PONBR[TS0ZWIXM];
      TS0ZW03.PC3PONBR[TS0ZWIXM] = TS0ZM001.PC3PONBR[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end


   /* ***********************************/
       /* cascade p.o. id*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.TS0ZMPOI = TS0ZM001.TS0ZMPOI[TS0ZWIXM];
  TS0ZW03.TS0ZMPOI[TS0ZWIXM] = TS0ZM001.TS0ZMPOI[TS0ZWIXM];

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM001.TS0ZMPOI[TS0ZWIXM] == " ") /* if blank on screen*/
      TS0ZW03.TS0ZMPOI[TS0ZWIXM] = TS0ZW01.TS0ZMPOI;
    else
      TS0ZW01.TS0ZMPOI = TS0ZM001.TS0ZMPOI[TS0ZWIXM];
      TS0ZW03.TS0ZMPOI[TS0ZWIXM] = TS0ZM001.TS0ZMPOI[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade order type*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.PC4ORTYP = TS0ZM001.PC4ORTYP[TS0ZWIXM];
  TS0ZW03.PC4ORTYP[TS0ZWIXM] = TS0ZM001.PC4ORTYP[TS0ZWIXM];

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM001.PC4ORTYP[TS0ZWIXM] == " ") /* if blank on screen*/
      TS0ZW03.PC4ORTYP[TS0ZWIXM] = TS0ZW01.PC4ORTYP;
    else
      TS0ZW01.PC4ORTYP = TS0ZM001.PC4ORTYP[TS0ZWIXM];
      TS0ZW03.PC4ORTYP[TS0ZWIXM] = TS0ZM001.PC4ORTYP[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade customer xref*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.PC2CUXID = TS0ZM001.PC2CUXID[TS0ZWIXM];
  TS0ZW03.PC2CUXID[TS0ZWIXM] = TS0ZM001.PC2CUXID[TS0ZWIXM];

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM001.PC2CUXID[TS0ZWIXM] == " ") /* if blank on screen*/
      TS0ZW03.PC2CUXID[TS0ZWIXM] = TS0ZW01.PC2CUXID;
    else
      TS0ZW01.PC2CUXID = TS0ZM001.PC2CUXID[TS0ZWIXM];
      TS0ZW03.PC2CUXID[TS0ZWIXM] = TS0ZM001.PC2CUXID[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade style*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.SY1STNBR = TS0ZM001.SY1STNBR[TS0ZWIXM];
  TS0ZW03.SY1STNBR[TS0ZWIXM] = TS0ZM001.SY1STNBR[TS0ZWIXM];

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM001.SY1STNBR[TS0ZWIXM] == " ") /* if blank on screen*/
      TS0ZW03.SY1STNBR[TS0ZWIXM] = TS0ZW01.SY1STNBR;
    else
      TS0ZW01.SY1STNBR = TS0ZM001.SY1STNBR[TS0ZWIXM];
      TS0ZW03.SY1STNBR[TS0ZWIXM] = TS0ZM001.SY1STNBR[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade color*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.SY2CLRID = TS0ZM001.SY2CLRID[TS0ZWIXM];
  if (TS0ZW01.SY2CLRID == " ") /* if color is blank*/
    TS0ZW01.SY2CLRID = "00 "; /* default to '00 '*/
  end
  TS0ZW03.SY2CLRID[TS0ZWIXM] = TS0ZW01.SY2CLRID;

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM001.SY2CLRID[TS0ZWIXM] == " ") /* if blank on screen*/
      TS0ZW03.SY2CLRID[TS0ZWIXM] = TS0ZW01.SY2CLRID;
    else
      TS0ZW01.SY2CLRID = TS0ZM001.SY2CLRID[TS0ZWIXM];
      TS0ZW03.SY2CLRID[TS0ZWIXM] = TS0ZM001.SY2CLRID[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* move all other fields*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/

    TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
    TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
    TS0ZW03.TS0ZMSHP[TS0ZWIXM] = TS0ZM001.TS0ZMSHP[TS0ZWIXM];
    TS0ZW03.TS0ZMCRT[TS0ZWIXM] = TS0ZM001.TS0ZMCRT[TS0ZWIXM];
    TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM] = TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM];

    TS0ZW03.TS0ZMCBM[TS0ZWIXM] = TS0ZM001.TS0ZMCBM[TS0ZWIXM];
    TS0ZW03.TS0ZMKG[TS0ZWIXM] = TS0ZM001.TS0ZMKG[TS0ZWIXM];
    TS0ZW03.XDMCD[TS0ZWIXM] = TS0ZM001.XDMCD[TS0ZWIXM];
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ********************************************/
     /* clear fields that have no values in them*/
   /* ********************************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    if (TS0ZM002.XOWCD[TS0ZWIXM] == " " /* if detail line blank*/
     && TS0ZM002.XUMCD[TS0ZWIXM] == " " 
     && TS0ZM002.XPGCD[TS0ZWIXM] == " " 
     && TS0ZM002.XQACD[TS0ZWIXM] == " " 
     && TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] == 0
     && TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] == 0
     && TS0ZM001.XDMCD[TS0ZWIXM] == " " 
     && TS0ZM001.TS0ZMKG[TS0ZWIXM] == 0 
     && TS0ZM001.TS0ZMCBM[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZMCRT[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZMSHP[TS0ZWIXM] == 0
     && TS0ZM001.PC3PONBR[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0
     && TS0ZM001.SY1STNBR[TS0ZWIXM] == " "
     && TS0ZM001.TS0ZMPOI[TS0ZWIXM] == " "
     && TS0ZM001.PC4ORTYP[TS0ZWIXM] == " "
     && TS0ZM001.PC2CUXID[TS0ZWIXM] == " "
     && TS0ZM001.SY2CLRID[TS0ZWIXM] == " ")

      TS0ZW03.PC3PONBR[TS0ZWIXM] = 0; /* clear cascaded keys*/
      TS0ZW03.TS0ZMPOI[TS0ZWIXM] = " ";
      TS0ZW03.PC4ORTYP[TS0ZWIXM] = " ";
      TS0ZW03.PC2CUXID[TS0ZWIXM] = " ";
      TS0ZW03.SY1STNBR[TS0ZWIXM] = " ";
      TS0ZW03.SY2CLRID[TS0ZWIXM] = " ";
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end


end // end TS0Z-51000

// Set Cascade switch
Function TS0Z-51100()
   /* ------------------------------------------------------------*/
      /* Set the cascade switch if the map detail line has data*/
      /* present.*/
   /* ------------------------------------------------------------*/


  if (TS0ZM001.PC3PONBR[TS0ZWIXM] > 0
   || TS0ZM001.TS0ZMPOI[TS0ZWIXM] > " "
   || TS0ZM001.PC4ORTYP[TS0ZWIXM] > " "
   || TS0ZM001.PC2CUXID[TS0ZWIXM] > " "
   || TS0ZM001.SY1STNBR[TS0ZWIXM] > " "
   || TS0ZM001.SY2CLRID[TS0ZWIXM] > " "
   || TS0ZM001.XDMCD[TS0ZWIXM] > " " 
   || TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] > 0
   || TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] > 0
   || TS0ZM001.TS0ZMKG[TS0ZWIXM] > 0 
   || TS0ZM001.TS0ZMCBM[TS0ZWIXM] > 0
   || TS0ZM001.TS0ZMCRT[TS0ZWIXM] > 0
   || TS0ZM001.TS0ZMSHP[TS0ZWIXM] > 0
   || TS0ZM002.XOWCD[TS0ZWIXM] > " " /* if detail line blank*/
   || TS0ZM002.XUMCD[TS0ZWIXM] > " " 
   || TS0ZM002.XPGCD[TS0ZWIXM] > " " 
   || TS0ZM002.XQACD[TS0ZWIXM] > " " 
   || TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] > 0
   || TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] > 0)

    TS0ZW01.TS0ZW-CASCADE-SWITCH-ON = "Y";

  else

    TS0ZW01.TS0ZW-CASCADE-SWITCH-ON = "N";

  end

end // end TS0Z-51100

// Cascade data into ws
Function TS0Z-52000()
   /* ------------------------------------------------------------*/

          /* CASCADE RIGHT MAP DATA INTO WORKING STORAGE*/

      /* This process will cascade the screen data entered by*/
      /* the user into a working storage record in order to*/
      /* fill in all blanks left by the user in the map.*/

   /* ------------------------------------------------------------*/
   /* ** Clear most of w03 working storage ***/
  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail*/
    TS0ZW03.XOWCD[TS0ZWIXM] = " ";
    TS0ZW03.XUMCD[TS0ZWIXM] = " ";
    TS0ZW03.XPGCD[TS0ZWIXM] = " ";
    TS0ZW03.XQACD[TS0ZWIXM] = " ";
   /* TCS BEG*/
   /* MOVE ' ' TO TS0ZW03.PC2INSEG(TS0ZWIXM);*/
    TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM] = 0;
    TS0ZW03.TS-SHP-LEG-NBR[TS0ZWIXM] = 0;
   /* TCS END*/
    TS0ZW03.XDMCD[TS0ZWIXM] = " ";
    TS0ZW03.TS0ZMKG[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZMCBM[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZMCRT[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZMSHP[TS0ZWIXM] = 0;
    TS0ZW03.PC3PONBR[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = 0;
    TS0ZW03.TS0ZMPOI[TS0ZWIXM] = " ";
    TS0ZW03.PC4ORTYP[TS0ZWIXM] = " ";
    TS0ZW03.PC2CUXID[TS0ZWIXM] = " ";
    TS0ZW03.SY1STNBR[TS0ZWIXM] = " ";
    TS0ZW03.SY2CLRID[TS0ZWIXM] = " ";
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end


   /* ***********************************/
       /* cascade p.o. number*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.PC3PONBR = TS0ZM002.PC3PONBR[TS0ZWIXM];
  TS0ZW03.PC3PONBR[TS0ZWIXM] = TS0ZM002.PC3PONBR[TS0ZWIXM];

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM002.PC3PONBR[TS0ZWIXM] == 0) /* if blank on screen*/
      TS0ZW03.PC3PONBR[TS0ZWIXM] = TS0ZW01.PC3PONBR;
    else
      TS0ZW01.PC3PONBR = TS0ZM002.PC3PONBR[TS0ZWIXM];
      TS0ZW03.PC3PONBR[TS0ZWIXM] = TS0ZM002.PC3PONBR[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end


   /* ***********************************/
       /* cascade customer xref*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.PC2CUXID = TS0ZM002.PC2CUXID[TS0ZWIXM];
  TS0ZW03.PC2CUXID[TS0ZWIXM] = TS0ZM002.PC2CUXID[TS0ZWIXM];

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM002.PC2CUXID[TS0ZWIXM] == " ") /* if blank on screen*/
      TS0ZW03.PC2CUXID[TS0ZWIXM] = TS0ZW01.PC2CUXID;
    else
      TS0ZW01.PC2CUXID = TS0ZM002.PC2CUXID[TS0ZWIXM];
      TS0ZW03.PC2CUXID[TS0ZWIXM] = TS0ZM002.PC2CUXID[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade style*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.SY1STNBR = TS0ZM002.SY1STNBR[TS0ZWIXM];
  TS0ZW03.SY1STNBR[TS0ZWIXM] = TS0ZM002.SY1STNBR[TS0ZWIXM];

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM002.SY1STNBR[TS0ZWIXM] == " ") /* if blank on screen*/
      TS0ZW03.SY1STNBR[TS0ZWIXM] = TS0ZW01.SY1STNBR;
    else
      TS0ZW01.SY1STNBR = TS0ZM002.SY1STNBR[TS0ZWIXM];
      TS0ZW03.SY1STNBR[TS0ZWIXM] = TS0ZM002.SY1STNBR[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* cascade color*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  TS0ZW01.SY2CLRID = TS0ZM002.SY2CLRID[TS0ZWIXM];
  if (TS0ZW01.SY2CLRID == " ") /* if color is blank*/
    TS0ZW01.SY2CLRID = "00 "; /* default to '00 '*/
  end
  TS0ZW03.SY2CLRID[TS0ZWIXM] = TS0ZW01.SY2CLRID;

  TS0ZW01.TS0ZWIXM = 2; /* increment index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    TS0Z-51100(); /* ==> set cascade switch*/
    if (TS0ZM002.SY2CLRID[TS0ZWIXM] == " ") /* if blank on screen*/
      TS0ZW03.SY2CLRID[TS0ZWIXM] = TS0ZW01.SY2CLRID;
    else
      TS0ZW01.SY2CLRID = TS0ZM002.SY2CLRID[TS0ZWIXM];
      TS0ZW03.SY2CLRID[TS0ZWIXM] = TS0ZM002.SY2CLRID[TS0ZWIXM];
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ***********************************/
       /* move all other fields*/
   /* ***********************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/

    TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
    TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
   /* TCS BEG*/
   /* MOVE TS0ZM002.XDMCD(TS0ZWIXM) TO TS0ZW03.XDMCD(TS0ZWIXM);*/
   /* MOVE TS0ZM002.PC2INSEG(TS0ZWIXM) TO TS0ZW03.PC2INSEG(TS0ZWIXM);*/
    TS0ZW03.TS-SHP-LEG-NBR[TS0ZWIXM] = TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM];
    TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM] = TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM];
   /* TCS END*/
    TS0ZW03.TS0ZMSHP[TS0ZWIXM] = TS0ZM002.TS0ZMSHP[TS0ZWIXM];
    TS0ZW03.TS0ZMCRT[TS0ZWIXM] = TS0ZM002.TS0ZMCRT[TS0ZWIXM];
    TS0ZW03.TS0ZMCBM[TS0ZWIXM] = TS0ZM002.TS0ZMCBM[TS0ZWIXM];
    TS0ZW03.TS0ZMKG[TS0ZWIXM] = TS0ZM002.TS0ZMKG[TS0ZWIXM];
    TS0ZW03.XQACD[TS0ZWIXM] = TS0ZM002.XQACD[TS0ZWIXM];
    TS0ZW03.XPGCD[TS0ZWIXM] = TS0ZM002.XPGCD[TS0ZWIXM];
    TS0ZW03.XUMCD[TS0ZWIXM] = TS0ZM002.XUMCD[TS0ZWIXM];
    TS0ZW03.XOWCD[TS0ZWIXM] = TS0ZM002.XOWCD[TS0ZWIXM];
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

   /* ********************************************/
     /* clear fields that have no values in them*/
   /* ********************************************/

  TS0ZW01.TS0ZWIXM = 1; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    if (TS0ZM002.XOWCD[TS0ZWIXM] == " " /* if detail line blank*/
     && TS0ZM002.XUMCD[TS0ZWIXM] == " " 
     && TS0ZM002.XPGCD[TS0ZWIXM] == " " 
     && TS0ZM002.XQACD[TS0ZWIXM] == " " 
     && TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] == 0
     && TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZMKG[TS0ZWIXM] == 0 
     && TS0ZM002.TS0ZMCBM[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZMCRT[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZMSHP[TS0ZWIXM] == 0
     && TS0ZM002.PC3PONBR[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0
     && TS0ZM002.SY1STNBR[TS0ZWIXM] == " "
     && TS0ZM001.TS0ZMPOI[TS0ZWIXM] == " "
     && TS0ZM001.PC4ORTYP[TS0ZWIXM] == " "
     && TS0ZM002.PC2CUXID[TS0ZWIXM] == " "
     && TS0ZM002.SY2CLRID[TS0ZWIXM] == " ")

      TS0ZW03.PC3PONBR[TS0ZWIXM] = 0; /* clear cascaded keys*/
      TS0ZW03.TS0ZMPOI[TS0ZWIXM] = " ";
      TS0ZW03.PC4ORTYP[TS0ZWIXM] = " ";
      TS0ZW03.PC2CUXID[TS0ZWIXM] = " ";
      TS0ZW03.SY1STNBR[TS0ZWIXM] = " ";
      TS0ZW03.SY2CLRID[TS0ZWIXM] = " ";
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end


end // end TS0Z-52000

// Select (S )    DREADO.VORHDDR1
Function TS0Z-53110()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/


  if (TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
   && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0)

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1CUOID = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
  OP1REC.OP1NORID = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
  OP1REC.OP1PARTN = TS0ZW03.TS0ZW-ORD-PART-CHAR[TS0ZWIXM];


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      if (TS0ZW03.PC2CUXID[TS0ZWIXM] == " ") /* if no cust info*/

        TS0Z-53111(); /* get cxref and iseg*/

      end
      return; /* ===> return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
     /* Invalid S.O. NBRs will be handled as a warning in TS0Z590*/
     /* ie.) Not a stop the user type of edit.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      /* SET TS0ZM001.TS0ZM-CUST-ORD-ID(TS0ZWIXM) CURSOR,BRIGHT;*/
      /* SET TS0ZM001.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) BRIGHT;*/
      /* SET TS0ZM002.TS0ZM-CUST-ORD-ID(TS0ZWIXM) CURSOR,BRIGHT;*/
      /* SET TS0ZM002.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) BRIGHT;*/
      /* MOVE 'Y' TO TS0ZW01.TS0ZWPSW;*/
      /* MOVE 'Z-53110' TO TS0ZM002.XXXPRCNM;*/
      /* MOVE 173 TO EZEMNO;          /* ===> invalid sales order nbr*/

      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end

  TS0ZW01.TS0ZWPSW = "Y";
  TS0ZM001.XXXPRCNM = "Z-53110";
  TS0ZM002.XXXPRCNM = "Z-53110";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "Z-53110"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] cursor, bold;
  set TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] bold;
  set TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] cursor, bold;
  set TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end TS0Z-53110

// Select (SA)    DPRODC.VPRDCU01
Function TS0Z-53111()
   /* ------------------------------------------------------------*/
   /* Select Customer XREF & ISEG using store info from OP1REC*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = TSWREC.XGPCD;
  PC2REC.KUCCOID = OP1REC.KUCCOID;
  PC2REC.KUMSTRID = OP1REC.KUMSTRID;
  PC2REC.XNXCD = OP1REC.XNXCD;

  try
    call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        TS0ZW03.PC2CUXID[TS0ZWIXM] = PC2REC.PC2CUXID;
        TS0ZM001.PC2CUXID[TS0ZWIXM] = PC2REC.PC2CUXID;
        TS0ZM002.PC2CUXID[TS0ZWIXM] = PC2REC.PC2CUXID;
   /* TCS BEG*/
   /* MOVE PC2REC.PC2INSEG TO TS0ZW03.PC2INSEG(TS0ZWIXM);*/
   /* MOVE PC2REC.PC2INSEG TO TS0ZM002.PC2INSEG(TS0ZWIXM);*/
   /* TCS END*/
      end

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TS0ZM001.XXXPRCNM = "Z-53111"; /* Module identification*/
  TS0ZM002.XXXPRCNM = "Z-53111"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "Z-53111"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS0Z-53111

// Verify Sales Order Number
Function TS0Z-57050()
   /* ------------------------------------------------------------*/
   /* Verify that no data entered is valid.*/
   /* ------------------------------------------------------------*/


  if (TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
   && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0)

    return; /* ===> return to last process*/

  end


   /* ------------------------------------------------------------*/
   /* Initialize the order header record and format key*/
   /* ------------------------------------------------------------*/

  set OP1REC empty; /* Intialize record*/

  OP1REC.OP1CUOID = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
  OP1REC.OP1NORID = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
  OP1REC.OP1PARTN = TS0ZW03.TS0ZW-ORD-PART-CHAR[TS0ZWIXM];


   /* ------------------------------------------------------------*/
   /* Select a unique row.*/
   /* If row not found return a message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/


  try
    call "IO4140" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Successful call*/

    /* ------------------------------------------------------------*/
     /* If successful, return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/

      return; /* ===> return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the invalid.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TS0ZW01.TS0ZWPSW = "Y"; /* ===> problem switch*/

      TS0ZW01.TS0ZWPWF = "Y";
      TS0ZW01.TS0ZWWF7 = "Y";
      TS0ZW01.TS0ZWSH7[TS0ZWIXM] = "Y";


      return; /* ===> return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
    
    converseLib.clearScreen();
    
  end

  TS0ZW01.TS0ZWPSW = "Y";
  TS0ZM001.XXXPRCNM = "Z-57050";
  TS0ZM002.XXXPRCNM = "Z-57050";

  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql comm. area*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "Z-57050"; /* PROCESS NAME*/
  TA1REC.TA1LOC = "SELECT UNIQUE ROW       ";
  TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDRR1"; /* Table view name*/
  TA1REC.TA1TBLKE = OP1REC.OP1KEY; /* Table key*/

  set TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] cursor, bold;
  set TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] bold;
  set TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] cursor, bold;
  set TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] bold;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

end // end TS0Z-57050

// Verify item in S.O. Database
Function TS0Z-57100()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE S.O.*/

   /* ------------------------------------------------------------*/

   /* Select the set of SO items*/
  TS0Z-57110();
  if (SQLCA.VAGen_SQLCODE == 0)

   /* Fetch and accumulate on order qty*/
    TS0Z-57120();
    if (SQLCA.VAGen_SQLCODE == 0)

      TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* Reset status*/
      TS0ZW03.XRECD[TS0ZWIXM] = "99"; /* Reset exception code*/

    else

      if (SQLCA.VAGen_SQLCODE == 100)

   /* ------------------------------------------------------------*/

       /* Set appropriate switches for no S.O. item found*/

   /* ------------------------------------------------------------*/


        TS0ZW01.TS0ZWPSW = "Y"; /* Set problem switch*/
        TS0ZW01.TS0ZWPWF = "Y"; /* Set warning switch*/
        TS0ZW01.TS0ZWWF1 = "Y"; /* Set warning switch*/
        TS0ZW03.XRECD[TS0ZWIXM] = "PS"; /* Not on po excep code*/
        if ("PS" in XRETBL.XRECD)
          if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If this is hard error*/
            TS0ZW03.TSISTAT[TS0ZWIXM] = "ER"; /* Set error status*/
          else
            TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* Reset status*/
          end
        else
          TS0ZW03.TSISTAT[TS0ZWIXM] = "ER"; /* Set error status*/
        end
        if (TS0ZM001.SY1STNBR[TS0ZWIXM] != "  "
         || TS0ZM001.SY2CLRID[TS0ZWIXM] != "  ")
          TS0ZW01.TS0ZWSH1[TS0ZWIXM] = "Y"; /* set for highlights*/
        end

      end /* ===> SQL = 100 for fetch*/

    end /* ===> SQL = 0 for fetch*/

   /* Close the selected set*/
    TS0Z-57130();
  end /* ==== SQL = 0 for select set*/

end // end TS0Z-57100

// Select (S2) Set       VITEM0R1
Function TS0Z-57110()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF SO ITEMS*/

   /* ------------------------------------------------------------*/

  set OP2REC empty;

  OP2REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  OP2REC.OP1CUOID = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
  OP2REC.OP1NORID = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
  OP2REC.OP1PARTN = TS0ZW03.TS0ZW-ORD-PART-CHAR[TS0ZWIXM];
  OP2REC.SY1STNBR = TS0ZW03.SY1STNBR[TS0ZWIXM];
  OP2REC.SY2CLRID = TS0ZW03.SY2CLRID[TS0ZWIXM];
  OP2REC.XDMCD = TS0ZW03.XDMCD[TS0ZWIXM];

  call "IO4150" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "Z-57110"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/
    TA1REC.TA1TBLKE = OP2REC.OP2KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "Z-57110"; /* Process name*/
    TS0ZM002.XXXPRCNM = "Z-57110"; /* Process name*/

  end


end // end TS0Z-57110

// Fetch  (N2) Row       VITEM0R1
Function TS0Z-57120()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DREADO.VITEMOR1*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

    if (OP2REC.OP2LNIST == "SH") /* accum qty*/
      TS0ZW01.TS0ZWPOQ = TS0ZW01.TS0ZWPOQ + OP2REC.OP2TSHPQ; /* accum qty*/
    else
      TS0ZW01.TS0ZWPOQ = TS0ZW01.TS0ZWPOQ + OP2REC.OP2TONOQ; /* accum qty*/
    end

  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      TS0ZW01.TS0ZWEFL = "Y"; /* end the loop*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0ZW01.TS0ZWEFL = "Y"; /* end the loop*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "Z-57120"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "Z-57120"; /* Map name*/
      TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VITEMOR1"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0ZM001.XXXPRCNM = "Z-57120"; /* Process name*/
      TS0ZM002.XXXPRCNM = "Z-57120"; /* Process name*/

    end

  end


end // end TS0Z-57120

// Close  (C2) Set       VITEM0R1
Function TS0Z-57130()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DREADO.VITEM0R1*/

   /* ------------------------------------------------------------*/

  call "IO4150" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "Z-57130"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DREADO  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VITEM0R1"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "Z-57130"; /* Process name*/
    TS0ZM002.XXXPRCNM = "Z-57130"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0Z-57130

// Verify item in P.O. Database
Function TS0Z-57200()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ITEM ON THE P.O.*/

   /* ------------------------------------------------------------*/

  TS0Z-57205(); /* Select the set of po items*/

  TS0ZW01.TS0ZWEFL = "N"; /* ===> end of data flag*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If Select OK*/
    TS0Z572(); /* Fetch and accumulate on order qty*/
  end


  if (SQLCA.VAGen_SQLCODE == 0)

    TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* Reset status*/
    TS0ZW03.XRECD[TS0ZWIXM] = "99"; /* Reset exception code*/
    /* TCS BEG*/
    TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM] = PC6REC.PC6ITMNB;
    /* TCS END*/
    TS0ZW01.TS0ZW-PREV-OP1CUOID = PC6REC.OP1CUOID;
    TS0ZW01.TS0ZW-PREV-OP1NORID = PC6REC.OP1NORID;

    TS0Z-57210(); /* ===> Check for multiple sales orders*/

  else

    if (SQLCA.VAGen_SQLCODE == 100)

      TS0Z-57220(); /* ===> set item not found switches*/

    end

  end

   /* TCS BEG*/
   /* IF SQLCA.SQLCODE EQ 0            /* If fetch OK*/
   /* OR SQLCA.SQLCODE EQ 100;*/
  if ((SQLCA.VAGen_SQLCODE == 0 /* If fetch OK*/
   || SQLCA.VAGen_SQLCODE == 100))
   /* TCS END*/

    TS0Z573(); /* Close the selected set*/

  end



end // end TS0Z-57200

// Select (SI) DPRODC.VPOITM01
Function TS0Z-57205()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TSWREC.XWHCD;
  PC6REC.PC3PONBR = TS0ZW03.PC3PONBR[TS0ZWIXM];
  PC6REC.SY1STNBR = TS0ZW03.SY1STNBR[TS0ZWIXM];
  PC6REC.SY2CLRID = TS0ZW03.SY2CLRID[TS0ZWIXM];
  PC6REC.XDMCD = TS0ZW03.XDMCD[TS0ZWIXM];
   /* MOVE TS0ZW03.XQACD(TS0ZWIXM) TO PC6REC.XQACD;*/
  PC6REC.XQACD = "*"; /* wildcard quality code*/
  PC6REC.XOWCD = TS0ZW03.XOWCD[TS0ZWIXM];
   /* TCS BEG*/
   /* MOVE TS0ZW03.PC2INSEG(TS0ZWIXM) TO PC6REC.PC2INSEG;*/
  PC6REC.PC2INSEG = "*";
   /* TCS END*/
  PC6REC.XPGCD = TS0ZW03.XPGCD[TS0ZWIXM];
  PC6REC.XUMCD = TS0ZW03.XUMCD[TS0ZWIXM];
  PC6REC.PC2CUXID = TS0ZW03.PC2CUXID[TS0ZWIXM];

  if (TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] != 0
   && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] != 0)
    PC6REC.OP1CUOID = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
    PC6REC.OP1NORID = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
    PC6REC.OP1PARTN = TS0ZW03.TS0ZW-ORD-PART-CHAR[TS0ZWIXM];
  else
    PC6REC.OP1CUOID = -1;
    PC6REC.OP1NORID = -1;
    PC6REC.OP1PARTN = "*";
  end

  PC6REC.PC6ETSDT = -1;
   /* TCS BEG*/
   /* MOVE TS0ZW01.YMTCD TO PC6REC.YMTCD;*/
  PC6REC.YMTCD = "*";
   /* TCS END*/
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";

  PCYREC.PCYFUNC = "SI";
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Z571"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z571"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z571"; /* Process name*/

  end


end // end TS0Z-57205

// Check for multiple S.O. Nbrs
Function TS0Z-57210()
   /* ------------------------------------------------------------*/

   /* Check multiple sales orders existing in the*/
   /* P.O. System for a particular style.*/
   /* ------------------------------------------------------------*/

  while (TS0ZW01.TS0ZWEFL == "N") /* ===> end of data flag*/

    if (PC6REC.OP1CUOID == TS0ZW01.TS0ZW-PREV-OP1CUOID
     && PC6REC.OP1NORID == TS0ZW01.TS0ZW-PREV-OP1NORID)

      TS0Z572(); /* Fetch P.O. Item*/

    else

      TS0ZW01.TS0ZWEFL = "Y"; /* ===> end of data flag*/
      TS0ZW01.TS0ZWPSW = "Y"; /* ===> problem switch*/

      TS0ZW01.TS0ZWPWF = "Y";
      TS0ZW01.TS0ZWWF6 = "Y";
      TS0ZW01.TS0ZWSH6[TS0ZWIXM] = "Y";

    end

  end /* ===> while statement*/

   /* IF EZEMNO ^= 320;/* ===> no multiple sales orders exist*/
  if (TS0ZW01.TS0ZWSH6[TS0ZWIXM] != "Y"
  )
    TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = TS0ZW01.TS0ZW-PREV-OP1CUOID;

    TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = TS0ZW01.TS0ZW-PREV-OP1NORID;

    TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = TS0ZW01.TS0ZW-PREV-OP1CUOID;

    TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = TS0ZW01.TS0ZW-PREV-OP1NORID;

    TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = TS0ZW01.TS0ZW-PREV-OP1CUOID;

    TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = TS0ZW01.TS0ZW-PREV-OP1NORID;

  end

   /* **                                                        ***/
   /* ********************** End of TS0Z-57210 ********************/
end // end TS0Z-57210

// Set item not found switches
Function TS0Z-57220()
   /* ------------------------------------------------------------*/

      /* Set appropriate switches for no P.O. item found*/

   /* ------------------------------------------------------------*/


  TS0ZW01.TS0ZWPSW = "Y"; /* Set problem switch*/
  TS0ZW01.TS0ZWPWF = "Y"; /* Set warning switch*/
  TS0ZW01.TS0ZWWF1 = "Y"; /* Set warning switch*/
  TS0ZW03.XRECD[TS0ZWIXM] = "PS"; /* Not on po excep code*/
  if ("PS" in XRETBL.XRECD)
    if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If this is hard error*/
      TS0ZW03.TSISTAT[TS0ZWIXM] = "ER"; /* Set error status*/
    else
      TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* Reset status*/
    end
  else
    TS0ZW03.TSISTAT[TS0ZWIXM] = "ER"; /* Set error status*/
  end
  if (TS0ZM001.SY1STNBR[TS0ZWIXM] != "  "
   || TS0ZM001.SY2CLRID[TS0ZWIXM] != "  ")
    TS0ZW01.TS0ZWSH1[TS0ZWIXM] = "Y"; /* set for highlights*/
  end


end // end TS0Z-57220

// Check the FROM application
Function TS0Z000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0J" /* From allowed application*/
   || COMMAREA.CAFROMAP == "TS0Y")

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end TS0Z000

// Special initialization TS0Z
Function TS0Z001()
   /* ------------------------------------------------------------*/

             /* SPECIAL INITIALIZATION FOR TS0Z*/

       /* - Select the max nike container number.*/

       /* - Obtain the tolerance values from tolerance table.*/

       /* - Select the mode code for this shipment.*/

   /* ------------------------------------------------------------*/

   /* *****************************************************************/
   /* The following two fields are inialised to be used in proc/stgrp**/
   /* TS0Z550/TS0ZS25                                               **/
   /* *****************************************************************/
  TS0ZW01.TS0ZWWF30 = "N";
  TS0ZW01.TS0ZW-DIFF-CONTNR = "N";

  TSHREC.TSFSHPID = TSWREC.TSFSHPID; /* move in key*/

  TSGREC.TSNFNC = "SM"; /* Move selection to pass record*/
  call "IO2590" (TSGREC, SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If good return code*/
    TS0ZW01.TS0ZWCTR = TSGREC.TSGMAXNB; /* Save the cntnr number*/
    TS0ZW01.TS0ZWCTR = TS0ZW01.TS0ZWCTR + 1; /* Incr the cntnr number*/
  else
    if (SQLCA.VAGen_SQLCODE == -305) /* If null value returned*/
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
       || SQLCA.VAGen_SQLCODE == -904)
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0ZW01.TS0ZWNSF = "Y"; /* Set negative SQL flag to yes*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Z001"; /* Process name*/
      TA1REC.TA1LOC = "SELECT MAX TABLE PL ROW";
      TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0ZM001.XXXPRCNM = "TS0Z001"; /* Process name*/
    end
  end

  if (TS0ZW01.TS0ZWNSF == "N") /* If negative SQL flag is no*/
    if (TSWREC.TSWNKCTN[TSWPLPOS] > 0 /* If cntnr was passed*/
     && COMMAREA.CAFROMAP == "TS0Y")  /* from TS0Y*/
      TS0ZW01.TS0ZWSWR = "Y"; /* Set request for data to yes*/
    else
      if (TSWREC.YSSCD == "TN") /* If this is tentative shpmnt*/
        TSWREC.TSWNKCTN[1] = 1; /* Set up container pass record*/
        TS0ZW01.TS0ZWSWR = "Y"; /* Set request for data to yes*/
      else
        TS0ZW01.TS0ZWPLC = TS0ZW01.TS0ZWCTR; /* packing list cntnr*/
      end
    end
  end


   /* ********************************************************/
   /* Obtain the tolerance for style hard error qty and pct*/
   /* and style soft error qty and pct*/
   /* ********************************************************/

  set TSXREC empty; /* clear pass record*/
  TSXREC.XGPCD = TSWREC.XGPCD;

  TS0ZS02(); /* Obtain the tolerances*/

  TS0ZW01.TS0ZWHEQ = TSXREC.TSXSTHQT;
  TS0ZW01.TS0ZWHEP = TSXREC.TSXSTHPT;
  TS0ZW01.TS0ZWSEQ = TSXREC.TSXSTSQT;
  TS0ZW01.TS0ZWSEP = TSXREC.TSXSTSPT;

   /* ** If any of the values are zeroes, then move high-values ***/
   /* ** to them.                                               ***/

  if (TS0ZW01.TS0ZWHEQ == 0
   && TS0ZW01.TS0ZWHEP == 0)
    TS0ZW01.TS0ZWHEQ = 999999999;
    TS0ZW01.TS0ZWHEP = 999.99;
  end

   /* TCS BEG*/
  TS0ZS12();
   /* TCS END*/

   /* ********************************************************/
   /* Obtain the mode code for this shipment and ave in*/
   /* working storage.*/
   /* ********************************************************/

   /* TCS BEG*/
   /* SET TS5REC EMPTY;*/

   /* MOVE TSWREC.TSACARCD TO TS5REC.TSACARCD; /* move in keys*/
   /* MOVE TSWREC.TS5CRAFT TO TS5REC.TS5CRAFT;*/

   /* TS0ZS03;                 /* Select the carrier/craft for mode code*/

   /* MOVE TS5REC.YMTCD TO TS0ZW01.YMTCD;      /* save the code*/
  TS0ZW01.YMTCD = "*"; /* save the code*/
   /* TCS END*/


end // end TS0Z001

// Build Container map
Function TS0Z002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map the Build*/
   /* Container map.  Processing always returns to the top of*/
   /* this process until the application exit is requested.*/
   /* Processing sequence is as follows:*/

   /* 1) If request for data is yes;*/
      /* - Obtain the data for display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) If no errors have been encountered;*/
      /* - Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0ZW01.TS0ZWSWR == "Y") /* If request for data is yes*/
    TS0Z100(); /* Obtain the data to display*/
  end

  TS0Z200(); /* Format and display the map*/

  TS0Z300(); /* Check attention identifier*/

  TS0Z400(); /* Reset fields to normal intensity*/

  TS0Z500(); /* Verify the entered data*/

  if (TS0ZW01.TS0ZWPSW == "N") /* If no error was encountered*/
    TS0Z600(); /* Process valid input request*/
  end


end // end TS0Z002

// Obtain the data for display
Function TS0Z100()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA FOR DISPLAY*/

     /* 1) Select the container header information.*/
     /* 2) Set request for data to no if header was found.*/

   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = TSWREC.TSFSHPID; /* move key*/
  TSHREC.TSHNKCN = TSWREC.TSWNKCTN[TSWPLPOS];

  TSGREC.TSNFNC = "SA"; /* move in function code*/
  call "IO2590" (TSGREC, SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If return code is ok*/

    TS0ZM001.TSHCNTNR = TSHREC.TSHCNTNR; /* move in map fields*/
    TS0ZM001.YCNCD = TSHREC.YCNCD;
    TS0ZM001.TSHTCBM = TSHREC.TSHTCBM;
    TS0ZM001.TSHTKG = TSHREC.TSHTKG;
    TS0ZM001.TSHSEAL = TSHREC.TSHSEAL;
    TS0ZW01.TS0ZWPLC = TSHREC.TSHNKCN; /* save p/l cntnr*/

    TS0ZW01.TS0ZWPFL = "Y"; /* set field protect flag to yes*/
    TS0ZW01.TS0ZWSWR = "N"; /* set request for data fl to no*/

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If cntnr was not found*/
      converseLib.validationFailed(69); /* Data was deleted by another appl*/
      TS0ZM001.XXXPRCNM = "TS0Z100"; /* process name*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Z100"; /* Process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS. "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate Problem*/
      TS0ZM001.XXXPRCNM = "TS0Z100"; /* Process name*/
    end
  end


end // end TS0Z100

// Format and display the map
Function TS0Z200()
   /* ------------------------------------------------------------*/
                /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no errors and not first time thru - clear detail*/
      /* lines, move working storage to screen.*/
   /* 2) Position cursor.*/
   /* 3) If the negative sql return code flag is set to yes -*/
      /* protect all map fields.*/
   /* 4) Converse the map.*/
   /* 5) Check for user ? pop up window inquiry.*/
   /* ------------------------------------------------------------*/

  if (TS0ZW01.TS0ZWPSW == "N"       /* No error message to display*/
   && TS0ZW01.TS0ZWNSF == "N"       /* and no neg sql codes encountered*/
   && TS0ZW01.TS0ZWFFL == "N"       /* and not first time thru*/
   && converseVar.eventKey not pf10 /* and not left screen request*/
   && converseVar.eventKey not pf11) /* and not right screen request*/
    TS0ZW01.TS0ZWIXM = 1; /* initialize count index*/
    while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
      /*  */
      /* Clear Left screen detail lines*/
      /*  */
      TS0ZM001.PC3PONBR[TS0ZWIXM] = 0;
      TS0ZM001.TS0ZMPOI[TS0ZWIXM] = " ";
      TS0ZM001.PC4ORTYP[TS0ZWIXM] = " ";
      TS0ZM001.PC2CUXID[TS0ZWIXM] = " ";
      TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = 0;
      TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = 0;
      TS0ZM001.SY1STNBR[TS0ZWIXM] = " ";
      TS0ZM001.SY2CLRID[TS0ZWIXM] = " ";
      TS0ZM001.XDMCD[TS0ZWIXM] = " ";
      TS0ZM001.TS0ZMSHP[TS0ZWIXM] = 0;
      TS0ZM001.TS0ZMCRT[TS0ZWIXM] = 0;
      TS0ZM001.TS0ZMCBM[TS0ZWIXM] = 0;
      TS0ZM001.TS0ZMKG[TS0ZWIXM] = 0;
      /*  */
      /* Clear Right screen detail lines*/
      /*  */
      TS0ZM002.PC3PONBR[TS0ZWIXM] = 0;
      TS0ZM002.PC2CUXID[TS0ZWIXM] = " ";
      TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = 0;
      TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = 0;
      TS0ZM002.SY1STNBR[TS0ZWIXM] = " ";
      TS0ZM002.SY2CLRID[TS0ZWIXM] = " ";
      TS0ZM002.TS0ZMSHP[TS0ZWIXM] = 0;
      TS0ZM002.TS0ZMCRT[TS0ZWIXM] = 0;
      TS0ZM002.TS0ZMCBM[TS0ZWIXM] = 0;
      TS0ZM002.TS0ZMKG[TS0ZWIXM] = 0;
   /* TCS BEGIN*/
   /* MOVE ' ' TO TS0ZM002.XDMCD(TS0ZWIXM);*/
   /* MOVE ' ' TO TS0ZM002.PC2INSEG(TS0ZWIXM);*/
      TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] = 0;
      TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] = 0;
   /* TCS END*/
      TS0ZM002.XQACD[TS0ZWIXM] = " ";
      TS0ZM002.XPGCD[TS0ZWIXM] = " ";
      TS0ZM002.XUMCD[TS0ZWIXM] = " ";
      TS0ZM002.XOWCD[TS0ZWIXM] = " ";
      TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
    end
    if (TS0ZW02.PC3PONBR[1] > 0 /* if data exists in ws*/
     || TS0ZW02.TS0ZM-CUST-ORD-ID[1] > 0)
      TS0Z210(); /* move ws to screen*/
    end
  end


  TS0ZM001.TS0ZMPG = TS0ZW01.TS0ZWPGE; /* move page number to map 1*/
  TS0ZM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date to map 1*/

  TS0ZM002.TS0ZMPG = TS0ZW01.TS0ZWPGE; /* move page number to map 2*/
  TS0ZM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date to map 2*/

  if (TS0ZW01.TS0ZWPSW == "N") /* No error message to display*/
    if (TS0ZM001.TSHCNTNR == " " /* If container heading is missing*/
     && TSWREC.YSSCD != "TN")    /* and not tentative shipment*/
      set TS0ZM001.TSHCNTNR cursor; /* set container cursor*/
      set TS0ZM002.TSHCNTNR cursor; /* set container cursor*/
    else
      set TS0ZM001.PC3PONBR[1] cursor; /* set first detail cursor*/
      set TS0ZM002.PC3PONBR[1] cursor; /* set first detail cursor*/
    end
  end

  if (TS0ZW01.TS0ZWPFL == "Y" /* If protection flag eq 'y'*/
   || TSWREC.YSSCD == "TN")   /* or tentative shipment*/
    set TS0ZM001.TSHCNTNR protect; /* protect header fields on map 1*/
    set TS0ZM001.YCNCD protect;
    set TS0ZM001.TSHTCBM protect;
    set TS0ZM001.TSHTKG protect;
    set TS0ZM001.TSHSEAL protect;
    set TS0ZM002.TSHCNTNR protect; /* protect header fields on map 2*/
    set TS0ZM002.YCNCD protect;
    set TS0ZM002.TSHTCBM protect;
    set TS0ZM002.TSHTKG protect;
    set TS0ZM002.TSHSEAL protect;
  end

   /* *************************************************************/
   /* If a negative SQL code encountered - protect all map fields*/
   /* *************************************************************/

  if (TS0ZW01.TS0ZWNSF == "Y") /* If negative SQL flag eq 'y'*/

    set TS0ZM001.TSHCNTNR protect; /* protect header fields map 1*/
    set TS0ZM001.YCNCD protect;
    set TS0ZM001.TSHTCBM protect;
    set TS0ZM001.TSHTKG protect;
    set TS0ZM001.TSHSEAL protect;
    set TS0ZM002.TSHCNTNR protect; /* protect header fields map 2*/
    set TS0ZM002.YCNCD protect;
    set TS0ZM002.TSHTCBM protect;
    set TS0ZM002.TSHTKG protect;
    set TS0ZM002.TSHSEAL protect;

    TS0ZW01.TS0ZWIXM = 1; /* initialize count index*/
    while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
      /*  */
      /* Protect Detail on Left Screen*/
      /*  */
      set TS0ZM001.PC3PONBR[TS0ZWIXM] protect;
      set TS0ZM001.TS0ZMPOI[TS0ZWIXM] protect;
      set TS0ZM001.PC4ORTYP[TS0ZWIXM] protect;
      set TS0ZM001.PC2CUXID[TS0ZWIXM] protect;
      set TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] protect;
      set TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] protect;
      set TS0ZM001.SY1STNBR[TS0ZWIXM] protect;
      set TS0ZM001.SY2CLRID[TS0ZWIXM] protect;
      set TS0ZM001.XDMCD[TS0ZWIXM] protect;
      set TS0ZM001.TS0ZMSHP[TS0ZWIXM] protect;
      set TS0ZM001.TS0ZMCRT[TS0ZWIXM] protect;
      set TS0ZM001.TS0ZMCBM[TS0ZWIXM] protect;
      set TS0ZM001.TS0ZMKG[TS0ZWIXM] protect;
      /*  */
      /* Protect Detail on Right Screen*/
      /*  */
      set TS0ZM002.PC3PONBR[TS0ZWIXM] protect;
      set TS0ZM002.PC2CUXID[TS0ZWIXM] protect;
      set TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] protect;
      set TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] protect;
      set TS0ZM002.SY1STNBR[TS0ZWIXM] protect;
      set TS0ZM002.SY2CLRID[TS0ZWIXM] protect;
      set TS0ZM002.TS0ZMSHP[TS0ZWIXM] protect;
      set TS0ZM002.TS0ZMCRT[TS0ZWIXM] protect;
      set TS0ZM002.TS0ZMCBM[TS0ZWIXM] protect;
      set TS0ZM002.TS0ZMKG[TS0ZWIXM] protect;
   /* TCS BEGIN*/
   /* SET TS0ZM002.XDMCD(TS0ZWIXM) PROTECT;*/
   /* SET TS0ZM002.PC2INSEG(TS0ZWIXM) PROTECT;*/
      set TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] protect;
      set TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] protect;
   /* TCS END*/
      set TS0ZM002.XQACD[TS0ZWIXM] protect;
      set TS0ZM002.XPGCD[TS0ZWIXM] protect;
      set TS0ZM002.XUMCD[TS0ZWIXM] protect;
      set TS0ZM002.XOWCD[TS0ZWIXM] protect;
      TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
    end

  end

  /* IF EZEMNO NE 0;                   /* Error message to display*/
  /* SET TS0ZM001 ALARM;            /* Indicate sound alarm for map 1*/
  /* SET TS0ZM002 ALARM;            /* Indicate sound alarm for map 2*/
  /* END;*/


  if (TS0ZW01.TS0ZWMAP == "1") /* Left screen indicated*/
    TS0Z-213(); /* Converse TS0ZM001*/
  else
    if (TS0ZW01.TS0ZWMAP == "2") /* Right screen indicated*/
      TS0Z-214(); /* Converse TS0ZM002*/
    end
  end

  TS0ZW01.TS0ZWPSW = "N"; /* Reset problem switch*/

  TS0Z220();
                                   /* check for user ? inquiry on csp codes*/


end // end TS0Z200

// Move ws to screen
Function TS0Z210()
   /* ------------------------------------------------------------*/

              /* MOVE WORKING STORAGE TO SCREEN*/

   /* 1) If ezeaid is pf8, scroll forward to display*/
      /* working storage or a new blank detail page.*/
   /* 2) If ezeaid is pf7, scroll back to show previously*/
      /* entered detail.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* PF8 pressed*/
   || converseVar.eventKey is enter) /* or ENTER is pressed*/
    TS0Z211(); /* set the map ws position*/
    TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX + 13;
    if (TS0ZW01.TS0ZWTIX > TS0ZW01.TS0ZWMAX) /* if table index GT max*/
      converseLib.validationFailed(104); /* packing list exceeded msg*/
      TS0ZM001.XXXPRCNM = "TS0Z210"; /* process name*/
      TS0ZM002.XXXPRCNM = "TS0Z210"; /* process name*/
      TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
    else
      TS0ZW01.TS0ZWPGE = TS0ZW01.TS0ZWPGE + 1; /* add 1 to page counter*/
      TS0ZW01.TS0ZWWK1 = TS0ZW01.TS0ZWMPX; /* save map pos index*/
      TS0ZW01.TS0ZWWK1 = TS0ZW01.TS0ZWWK1 + 13; /* add 13 to map pos index*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWWK1; /* set map pos index*/
      TS0ZW01.TS0ZWMIX = 1; /* set map index to 1*/

      while (TS0ZW01.TS0ZWMIX <= 13 /* until end of page*/
       && TS0ZW01.TS0ZWTIX < TS0ZW01.TS0ZWMAX) /* and not over max*/

        if (TS0ZW02.PC3PONBR[TS0ZWTIX] > 0 /* if po exists move data*/
         || TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] > 0)
        /*  */
        /* Move Data to Left Screen*/
        /*  */
          TS0ZM001.PC3PONBR[TS0ZWMIX] = TS0ZW02.PC3PONBR[TS0ZWTIX];
          TS0ZM001.TS0ZMPOI[TS0ZWMIX] = TS0ZW02.TS0ZMPOI[TS0ZWTIX];
          TS0ZM001.PC4ORTYP[TS0ZWMIX] = TS0ZW02.PC4ORTYP[TS0ZWTIX];
          TS0ZM001.PC2CUXID[TS0ZWMIX] = TS0ZW02.PC2CUXID[TS0ZWTIX];
          TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWMIX] = TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX];
          TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWMIX] = TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX];
          TS0ZM001.SY1STNBR[TS0ZWMIX] = TS0ZW02.SY1STNBR[TS0ZWTIX];
          TS0ZM001.SY2CLRID[TS0ZWMIX] = TS0ZW02.SY2CLRID[TS0ZWTIX];
          TS0ZM001.XDMCD[TS0ZWMIX] = TS0ZW02.XDMCD[TS0ZWTIX];
          TS0ZM001.TS0ZMSHP[TS0ZWMIX] = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
          TS0ZM001.TS0ZMCRT[TS0ZWMIX] = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
          TS0ZM001.TS0ZMCBM[TS0ZWMIX] = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
          TS0ZM001.TS0ZMKG[TS0ZWMIX] = TS0ZW02.TS0ZMKG[TS0ZWTIX];
        /*  */
        /* Move Data to Right Screen*/
        /*  */
          TS0ZM002.PC3PONBR[TS0ZWMIX] = TS0ZW02.PC3PONBR[TS0ZWTIX];
          TS0ZM002.PC2CUXID[TS0ZWMIX] = TS0ZW02.PC2CUXID[TS0ZWTIX];
          TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWMIX] = TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX];
          TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWMIX] = TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX];
          TS0ZM002.SY1STNBR[TS0ZWMIX] = TS0ZW02.SY1STNBR[TS0ZWTIX];
          TS0ZM002.SY2CLRID[TS0ZWMIX] = TS0ZW02.SY2CLRID[TS0ZWTIX];
          TS0ZM002.TS0ZMSHP[TS0ZWMIX] = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
          TS0ZM002.TS0ZMCRT[TS0ZWMIX] = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
          TS0ZM002.TS0ZMCBM[TS0ZWMIX] = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
          TS0ZM002.TS0ZMKG[TS0ZWMIX] = TS0ZW02.TS0ZMKG[TS0ZWTIX];
    /* tcs begin*/
    /* MOVE TS0ZW02.XDMCD(TS0ZWTIX) TO TS0ZM002.XDMCD(TS0ZWMIX);*/
    /* MOVE TS0ZW02.PC2INSEG(TS0ZWTIX) TO TS0ZM002.PC2INSEG(TS0ZWMIX);*/
          TS0ZM002.TS-SHP-LEG-NBR[TS0ZWMIX] = TS0ZW02.TS-SHP-LEG-NBR[TS0ZWTIX];
          TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWMIX] = TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWTIX];
    /* tcs end*/
          TS0ZM002.XQACD[TS0ZWMIX] = TS0ZW02.XQACD[TS0ZWTIX];
          TS0ZM002.XPGCD[TS0ZWMIX] = TS0ZW02.XPGCD[TS0ZWTIX];
          TS0ZM002.XUMCD[TS0ZWMIX] = TS0ZW02.XUMCD[TS0ZWTIX];
          TS0ZM002.XOWCD[TS0ZWMIX] = TS0ZW02.XOWCD[TS0ZWTIX];
          TS0ZW02.TS0ZWLIN[TS0ZWTIX] = " "; /* delete the ws line*/
        else
          TS0ZW01.TS0ZWMIX = 14; /* get out of loop*/
        end
        TS0ZW01.TS0ZWMIX = TS0ZW01.TS0ZWMIX + 1; /* incr map indes*/
        TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX + 1; /* incr map indes*/
      end
    end
    TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWIXM; /* restore table index*/
  else
    if (converseVar.eventKey is pf7) /* if PF7 was pressed*/
      if (TS0ZW01.TS0ZWMPX == 1) /* if map position index is 1*/
        converseLib.validationFailed(2); /* no more page to scroll back to*/
        TS0ZM001.XXXPRCNM = "TS0Z210"; /* process name on map 1*/
        TS0ZM002.XXXPRCNM = "TS0Z210"; /* process name on map 2*/
        TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
        TS0Z212(); /* move in working storage*/
      else
        if (TS0ZW01.TS0ZWMPX < 14) /* if map position index is LT 14*/
          TS0ZW01.TS0ZWMPX = 1; /* initialize map pos index*/
          TS0Z212(); /* move in working storage*/
        else
          TS0ZW01.TS0ZWMPX = TS0ZW01.TS0ZWMPX - 13; /* back whole page*/
          TS0Z212(); /* move in working storage*/
        end
      end
    end
  end


end // end TS0Z210

// Set map ws position
Function TS0Z211()
   /* ------------------------------------------------------------*/

              /* SET MAP WORKING STORAGE POSITION*/

   /* Set the working storage position to the map position index*/
   /* plus one full page.*/

   /* ------------------------------------------------------------*/

  TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWTIX; /* save the table index*/
  TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMPX; /* set table index*/
  TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX + 13; /* set index page ahead*/


end // end TS0Z211

// move ws to page
Function TS0Z212()
   /* ------------------------------------------------------------*/

                  /* MOVE WORKING STORAGE*/

      /* Move working storage detail to map.*/

   /* ------------------------------------------------------------*/

   /* ******************************************/
      /* Calculate the page*/
   /* ******************************************/

  TS0ZW01.TS0ZWWK1 = TS0ZW01.TS0ZWMPX; /* move to work index*/
  TS0ZW01.TS0ZWWK1 = TS0ZW01.TS0ZWWK1 + 24; /* add 24 to work index*/
  TS0ZW01.TS0ZWPGE = TS0ZW01.TS0ZWWK1 / 13; /* calculate page*/

   /* ******************************************/
      /* Move WS*/
   /* ******************************************/

  TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMPX; /* set table index*/
  TS0ZW01.TS0ZWMIX = 1; /* set map index*/

  while (TS0ZW01.TS0ZWMIX <= 13 /* while more detail lines*/
   && TS0ZW01.TS0ZWTIX < TS0ZW01.TS0ZWMAX) /* and LT max*/

    if (TS0ZW02.PC3PONBR[TS0ZWTIX] > 0 /* if po exists*/
     || TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] > 1)
      /*  */
      /* Move WS Detail to Left Screen*/
      /*  */
      TS0ZM001.PC3PONBR[TS0ZWMIX] = TS0ZW02.PC3PONBR[TS0ZWTIX];
      TS0ZM001.TS0ZMPOI[TS0ZWMIX] = TS0ZW02.TS0ZMPOI[TS0ZWTIX];
      TS0ZM001.PC4ORTYP[TS0ZWMIX] = TS0ZW02.PC4ORTYP[TS0ZWTIX];
      TS0ZM001.PC2CUXID[TS0ZWMIX] = TS0ZW02.PC2CUXID[TS0ZWTIX];
      TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWMIX] = TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX];
      TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWMIX] = TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX];
      TS0ZM001.SY1STNBR[TS0ZWMIX] = TS0ZW02.SY1STNBR[TS0ZWTIX];
      TS0ZM001.SY2CLRID[TS0ZWMIX] = TS0ZW02.SY2CLRID[TS0ZWTIX];
      TS0ZM001.XDMCD[TS0ZWMIX] = TS0ZW02.XDMCD[TS0ZWTIX];
      TS0ZM001.TS0ZMSHP[TS0ZWMIX] = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
      TS0ZM001.TS0ZMCRT[TS0ZWMIX] = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
      TS0ZM001.TS0ZMCBM[TS0ZWMIX] = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
      TS0ZM001.TS0ZMKG[TS0ZWMIX] = TS0ZW02.TS0ZMKG[TS0ZWTIX];
      /*  */
      /* Move WS Detail to Right Screen*/
      /*  */
      TS0ZM002.PC3PONBR[TS0ZWMIX] = TS0ZW02.PC3PONBR[TS0ZWTIX];
      TS0ZM002.PC2CUXID[TS0ZWMIX] = TS0ZW02.PC2CUXID[TS0ZWTIX];
      TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWMIX] = TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX];
      TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWMIX] = TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX];
      TS0ZM002.SY1STNBR[TS0ZWMIX] = TS0ZW02.SY1STNBR[TS0ZWTIX];
      TS0ZM002.SY2CLRID[TS0ZWMIX] = TS0ZW02.SY2CLRID[TS0ZWTIX];
      TS0ZM002.TS0ZMSHP[TS0ZWMIX] = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
      TS0ZM002.TS0ZMCRT[TS0ZWMIX] = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
      TS0ZM002.TS0ZMCBM[TS0ZWMIX] = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
      TS0ZM002.TS0ZMKG[TS0ZWMIX] = TS0ZW02.TS0ZMKG[TS0ZWTIX];
   /* TCS BEG*/
   /* MOVE TS0ZW02.XDMCD(TS0ZWTIX) TO TS0ZM002.XDMCD(TS0ZWMIX);*/
   /* MOVE TS0ZW02.PC2INSEG(TS0ZWTIX) TO TS0ZM002.PC2INSEG(TS0ZWMIX);*/
      TS0ZM002.TS-SHP-LEG-NBR[TS0ZWMIX] = TS0ZW02.TS-SHP-LEG-NBR[TS0ZWTIX];
      TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWMIX] = TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWTIX];
   /* TCS END*/
      TS0ZM002.XQACD[TS0ZWMIX] = TS0ZW02.XQACD[TS0ZWTIX];
      TS0ZM002.XPGCD[TS0ZWMIX] = TS0ZW02.XPGCD[TS0ZWTIX];
      TS0ZM002.XUMCD[TS0ZWMIX] = TS0ZW02.XUMCD[TS0ZWTIX];
      TS0ZM002.XOWCD[TS0ZWMIX] = TS0ZW02.XOWCD[TS0ZWTIX];
      TS0ZW02.TS0ZWLIN[TS0ZWTIX] = " "; /* clear the ws line*/
    else
      TS0ZW01.TS0ZWMIX = 14; /* get out of loop*/
    end
    TS0ZW01.TS0ZWMIX = TS0ZW01.TS0ZWMIX + 1; /* incr map indes*/
    TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX + 1; /* incr map indes*/
  end

  TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMPX; /* set table index*/


end // end TS0Z212

// Check for user ? code inquiry
Function TS0Z220()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  TS0ZW01.TS0ZWDEF = "N"; /* set data entered flag to no*/

  if (TS0ZM001.YCNCD == "?" /* if ? in container type field*/
   || TS0ZM002.YCNCD == "?") /* if ? in container type field*/
    TS0ZW01.TS0ZWDEF = "Y"; /* set data entered flag to yes*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "              CONTAINER TYPE"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYCN01(); /* perform container type window*/
    end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the container  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      TS0ZM001.YCNCD = YCNTBL.YCNCD[XX0XWPIX]; /* move code*/
    else
      TS0ZM001.YCNCD = " "; /* clear fields*/
      TS0ZM002.YCNCD = " "; /* clear fields*/
    end
  end

  TS0ZW01.TS0ZWIXM = 1; /* set index*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/

    if (TS0ZM001.XDMCD[TS0ZWIXM] == "?") /* if ? in dimension field*/
   /* TCS BEG*/
   /* OR TS0ZM002.XDMCD(TS0ZWIXM) EQ '?';    /* if ? in dimension field*/
   /* TCS END*/
      TS0ZW01.TS0ZWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                DIMENSION"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXDM01(); /* perform dimension window*/
      end

         /* **********************************************************/
         /* *  If the pass index is greater than zero, use the      **/
         /* *  passed table index 'XX0XWPIX' to move the            **/
         /* *  table code and description to the map.               **/
         /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0ZM001.XDMCD[TS0ZWIXM] = XDMTBL.XDMCD[XX0XWPIX];
   /* TCS BEG*/
   /* MOVE XDMTBL.XDMCD(XX0XWPIX) TO TS0ZM002.XDMCD(TS0ZWIXM);*/
   /* TCS END*/
      else
        TS0ZM001.XDMCD[TS0ZWIXM] = " "; /* clear fields*/
   /* TCS BEG*/
   /* MOVE ' ' TO TS0ZM002.XDMCD(TS0ZWIXM); /* clear fields*/
   /* TCS END*/
      end
    end

    if (TS0ZM002.XQACD[TS0ZWIXM] == "?") /* if ? in quality field*/
      TS0ZW01.TS0ZWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 QUALITY"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* perform quality window*/
      end

         /* **********************************************************/
         /* *  If the pass index is greater than zero, use the      **/
         /* *  passed table index 'XX0XWPIX' to move the            **/
         /* *  table code and description to the map.               **/
         /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0ZM002.XQACD[TS0ZWIXM] = XQATBL.XQACD[XX0XWPIX];
      else
        TS0ZM002.XQACD[TS0ZWIXM] = " "; /* clear fields*/
      end
    end

    if (TS0ZM002.XPGCD[TS0ZWIXM] == "?") /* if ? in package field*/
      TS0ZW01.TS0ZWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              PACKAGING TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXPG01(); /* perform package window*/
      end

         /* **********************************************************/
         /* *  If the pass index is greater than zero, use the      **/
         /* *  passed table index 'XX0XWPIX' to move the            **/
         /* *  table code and description to the map.               **/
         /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0ZM002.XPGCD[TS0ZWIXM] = XPGTBL.XPGCD[XX0XWPIX];
      else
        TS0ZM002.XPGCD[TS0ZWIXM] = " "; /* clear fields*/
      end
    end

    if (TS0ZM002.XUMCD[TS0ZWIXM] == "?") /* if ? in unit of measure field*/
      TS0ZW01.TS0ZWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "             UNIT OF MEASURE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXUM01(); /* perform package window*/
      end

         /* **********************************************************/
         /* *  If the pass index is greater than zero, use the      **/
         /* *  passed table index 'XX0XWPIX' to move the            **/
         /* *  table code and description to the map.               **/
         /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0ZM002.XUMCD[TS0ZWIXM] = XUMTBL.XUMCD[XX0XWPIX];
      else
        TS0ZM002.XUMCD[TS0ZWIXM] = " "; /* clear fields*/
      end
    end

    if (TS0ZM002.XOWCD[TS0ZWIXM] == "?") /* if ? in owner group field*/
      TS0ZW01.TS0ZWDEF = "Y"; /* set data entered flag to yes*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "               OWNER GROUP"; /* heading*/
      if (TS0ZM001.XWHCD in XOWTBL.XWHCD) /* If warehouse in table*/
        XX0XW02.XWHCD = TS0ZM001.XWHCD; /* Warehouse*/
      else
        XX0XW02.XWHCD = "00"; /* default*/
      end

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXOW01(); /* perform owner group window*/
      end

         /* **********************************************************/
         /* *  If the pass index is greater than zero, use the      **/
         /* *  passed table index 'XX0XWPIX' to move the            **/
         /* *  table code and description to the map.               **/
         /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0ZM002.XOWCD[TS0ZWIXM] = XOWTBL.XOWCD[XX0XWPIX];
      else
        TS0ZM002.XOWCD[TS0ZWIXM] = " "; /* clear fields*/
      end
    end

    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/

  end

  if (TS0ZW01.TS0ZWDEF == "Y") /* if a pop up window was displayed*/
    converseLib.clearScreen();
     /* restore original map 1*/
    converseLib.clearScreen();
     /* restore original map 2*/
  end


end // end TS0Z220

// Check attention identifier
Function TS0Z300()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    TS0ZW01.TS0ZWMIX = 1; /* reset the indexes*/
    TS0ZW01.TS0ZWMPX = 1;
    TS0ZW01.TS0ZWTIX = 1;
    TS0ZW01.TS0ZWPGE = 1;
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* Move in pass data*/
    COMMAREA.CATOAP = "TS0Y"; /* Set TS0Y to 'to'*/
    COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/
    XSTSS01(); /* transfer to application*/
    TS0ZW01.TS0ZWPSW = "Y"; /* if fails, indicate error*/
    TS0ZM001.XXXPRCNM = "TS0Z300"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf10 /* PF10 was pressed*/
   && TS0ZW01.TS0ZWMAP == "1 ")    /* Left map currently displayed*/
    TS0ZM001.XXXPRCNM = "TS0Z300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf11 /* PF11 was pressed*/
   && TS0ZW01.TS0ZWMAP == "2 ")    /* right map currently displayed*/
    TS0ZM002.XXXPRCNM = "TS0Z300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10  /* and PF10 was not pressed*/
   && converseVar.eventKey not pf11) /* and PF11 was not pressed*/
    TS0ZM001.XXXPRCNM = "TS0Z300"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z300"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

end // end TS0Z300

// Reset highlighted fields
Function TS0Z400()
   /* ------------------------------------------------------------*/

             /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset header fields normal intensity.*/
   /* 2) Reset all detail fields normal intensity.*/

   /* ------------------------------------------------------------*/
   /* left screen*/
  set TS0ZM001.TSHCNTNR initialAttributes; /* Container*/
  set TS0ZM001.YCNCD initialAttributes; /* Container type*/
  set TS0ZM001.TSHTCBM initialAttributes; /* Total cubic meters*/
  set TS0ZM001.TSHTKG initialAttributes; /* Total kilograms*/
  set TS0ZM001.TSHSEAL initialAttributes; /* Seal*/
   /* right screen*/
  set TS0ZM002.TSHCNTNR initialAttributes; /* Container*/
  set TS0ZM002.YCNCD initialAttributes; /* Container type*/
  set TS0ZM002.TSHTCBM initialAttributes; /* Total cubic meters*/
  set TS0ZM002.TSHTKG initialAttributes; /* Total kilograms*/
  set TS0ZM002.TSHSEAL initialAttributes; /* Seal*/

  TS0ZW01.TS0ZWIXM = 1; /* Initialize line index*/

  while (TS0ZW01.TS0ZWIXM <= 13) /* Until end of lines*/
   /* left screen*/
    set TS0ZM001.PC3PONBR[TS0ZWIXM] initialAttributes;
    set TS0ZM001.TS0ZMPOI[TS0ZWIXM] initialAttributes;
    set TS0ZM001.PC4ORTYP[TS0ZWIXM] initialAttributes;
    set TS0ZM001.PC2CUXID[TS0ZWIXM] initialAttributes;
    set TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] initialAttributes;
    set TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] initialAttributes;
    set TS0ZM001.SY1STNBR[TS0ZWIXM] initialAttributes;
    set TS0ZM001.SY2CLRID[TS0ZWIXM] initialAttributes;
    set TS0ZM001.XDMCD[TS0ZWIXM] initialAttributes;
    set TS0ZM001.TS0ZMSHP[TS0ZWIXM] initialAttributes;
    set TS0ZM001.TS0ZMCRT[TS0ZWIXM] initialAttributes;
    set TS0ZM001.TS0ZMCBM[TS0ZWIXM] initialAttributes;
    set TS0ZM001.TS0ZMKG[TS0ZWIXM] initialAttributes;
   /* right screen*/
    set TS0ZM002.PC3PONBR[TS0ZWIXM] initialAttributes;
    set TS0ZM002.PC2CUXID[TS0ZWIXM] initialAttributes;
    set TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] initialAttributes;
    set TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] initialAttributes;
    set TS0ZM002.SY1STNBR[TS0ZWIXM] initialAttributes;
    set TS0ZM002.SY2CLRID[TS0ZWIXM] initialAttributes;
    set TS0ZM002.TS0ZMSHP[TS0ZWIXM] initialAttributes;
    set TS0ZM002.TS0ZMCRT[TS0ZWIXM] initialAttributes;
    set TS0ZM002.TS0ZMCBM[TS0ZWIXM] initialAttributes;
    set TS0ZM002.TS0ZMKG[TS0ZWIXM] initialAttributes;
   /* TCS BEG*/
   /* SET TS0ZM002.XDMCD(TS0ZWIXM) DEFINED;*/
   /* SET TS0ZM002.PC2INSEG(TS0ZWIXM) DEFINED;*/
    set TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] initialAttributes;
    set TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] initialAttributes;
   /* TCS END*/
    set TS0ZM002.XQACD[TS0ZWIXM] initialAttributes;
    set TS0ZM002.XPGCD[TS0ZWIXM] initialAttributes;
    set TS0ZM002.XUMCD[TS0ZWIXM] initialAttributes;
    set TS0ZM002.XOWCD[TS0ZWIXM] initialAttributes;
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* Increment line index*/
  end


end // end TS0Z400

// Verify the entered data
Function TS0Z500()
   /* ------------------------------------------------------------*/

             /* VERIFY THE ENTERED DATA*/

   /* 1) If the map is not empty*/
      /* and pf7, pf8, or enter was pressed;*/
      /* a) Verify an initial P.O. entry.*/
      /* b) If no errors and a style has been entered*/
         /* - verify all detail edits from bottom to top.*/
           /* by calling edits in group1 and group2 until*/
           /* all entered detail has been edited.*/
      /* c) Perform header edits.*/

   /* ------------------------------------------------------------*/

   /* **************************************************/
      /* Check to see if any data exists on the screen*/
   /* **************************************************/

  TS0ZW01.TS0ZWDEF = "N"; /* initialize detail entered flag*/
  TS0ZW01.TS0ZWHEF = "N"; /* initialize header entered flag*/

  if (TS0ZM001.TSHCNTNR == " " /* if header fields empty (Left)*/
   && TS0ZM001.YCNCD == " "    
   && TS0ZM001.TSHTCBM == 0    
   && TS0ZM001.TSHTKG == 0     
   && TS0ZM001.TSHSEAL == " ")
     /* next sentence*/
  else
    TS0ZW01.TS0ZWHEF = "Y"; /* set header entered flag*/
  end

  TS0ZW01.TS0ZWIXM = 1; /* set index to 1*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    if (TS0ZM001.XDMCD[TS0ZWIXM] == " " /* if detail line blank*/
     && TS0ZM001.TS0ZMKG[TS0ZWIXM] == 0 
     && TS0ZM001.TS0ZMCBM[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZMCRT[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZMSHP[TS0ZWIXM] == 0
     && TS0ZM001.PC3PONBR[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0
     && TS0ZM001.TS0ZMPOI[TS0ZWIXM] == " "
     && TS0ZM001.PC4ORTYP[TS0ZWIXM] == " "
     && TS0ZM001.PC2CUXID[TS0ZWIXM] == " "
     && TS0ZM001.SY1STNBR[TS0ZWIXM] == " "
     && TS0ZM001.SY2CLRID[TS0ZWIXM] == " "
                                        
     && TS0ZM002.XOWCD[TS0ZWIXM] == " " 
     && TS0ZM002.XUMCD[TS0ZWIXM] == " " 
     && TS0ZM002.XPGCD[TS0ZWIXM] == " " 
     && TS0ZM002.XQACD[TS0ZWIXM] == " " 
     && TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] == 0
     && TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZMKG[TS0ZWIXM] == 0 
     && TS0ZM002.TS0ZMCBM[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZMCRT[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZMSHP[TS0ZWIXM] == 0
     && TS0ZM002.PC3PONBR[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
     && TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0
     && TS0ZM002.PC2CUXID[TS0ZWIXM] == " "
     && TS0ZM002.SY1STNBR[TS0ZWIXM] == " "
     && TS0ZM002.SY2CLRID[TS0ZWIXM] == " ")

       /* next sentence*/

    else
      /* TCS BEG*/
      if (TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] > 0)
        TS0Z501(); /* populate long key from itm seq*/
      else
        if (TS0ZM001.PC3PONBR[TS0ZWIXM] == 0
         || TS0ZM001.SY1STNBR[TS0ZWIXM] == " "
         || TS0ZM001.SY2CLRID[TS0ZWIXM] == " ")
          /* next sentence*/
        else
          if (converseVar.eventKey is enter)
            TS0Z502(); /* populate itm seq from long key*/
          end
        end
      end
      if (TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] == 0)
        TS0Z503(); /* populate leg number*/
      end
      /* MOVE 14 TO TS0ZW01.TS0ZWIXM; /* end loop*/
      /* TCS END*/
      TS0ZW01.TS0ZWDEF = "Y"; /* set detail entered flag*/
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end

  if (TS0ZW01.TS0ZWMAP == "1") /* ===> Left map current*/
    if (TS0ZW01.TS0ZWHEF == "Y" /* if header exists on the screen*/
     && TS0ZW01.TS0ZWDEF == "N" /* and detail does not*/
     && converseVar.eventKey not pf11) /* and pf11 is not pressed*/
      converseLib.validationFailed(135); /* must enter one cpl*/
      TS0ZM001.XXXPRCNM = "TS0Z500"; /* process name map 1*/
      TS0ZM002.XXXPRCNM = "TS0Z500"; /* process name map 2*/
      set TS0ZM001.PC3PONBR[1] cursor; /* set cursor map 1*/
      set TS0ZM002.PC3PONBR[1] cursor; /* set cursor map 2*/
      TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
    end
  else
    if (TS0ZW01.TS0ZWMAP == "2") /* ===> Left map current*/
      if (TS0ZW01.TS0ZWHEF == "Y" /* if header exists on the screen*/
       && TS0ZW01.TS0ZWDEF == "N" /* and detail does not*/
       && converseVar.eventKey not pf10) /* and pf11 is not pressed*/
        converseLib.validationFailed(135); /* must enter one cpl*/
        TS0ZM001.XXXPRCNM = "TS0Z500"; /* process name map 1*/
        TS0ZM002.XXXPRCNM = "TS0Z500"; /* process name map 2*/
        set TS0ZM001.PC3PONBR[1] cursor; /* set cursor map 1*/
        set TS0ZM002.PC3PONBR[1] cursor; /* set cursor map 2*/
        TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
      end
    end
  end

   /* *********************************************************/
      /* If data did exist on the screen, perform the edits*/
   /* *********************************************************/

  if (TS0ZW01.TS0ZWDEF == "Y" /* if detail exists on the screen*/
   || TS0ZW01.TS0ZWHEF == "Y") /* if header exists on the screen*/

    if (TS0ZW01.TS0ZWMAP == "1") /* ===> Left map current*/
      TS0Z-51000(); /* cascade left map data into ws*/
    else
      if (TS0ZW01.TS0ZWMAP == "2") /* ===> Right map current*/
        TS0Z-52000(); /* cascade right map data into ws*/
      end
    end

    if (converseVar.eventKey is enter /* if ENTER is pressed*/
     || converseVar.eventKey is pf7   /* or pf7 is pressed*/
     || converseVar.eventKey is pf8)  /* or pf8 is pressed*/

      if (TS0ZW01.TS0ZWDEF == "Y") /* if detail exists on the screen*/
        TS0ZW01.TS0ZWIXM = 13; /* initialize index*/
        while (TS0ZW01.TS0ZWIXM > 0) /* until end of detail*/
          if (TS0ZW03.XOWCD[TS0ZWIXM] == " " /* if detail line blank*/
           && TS0ZW03.XUMCD[TS0ZWIXM] == " " 
           && TS0ZW03.XPGCD[TS0ZWIXM] == " " 
           && TS0ZW03.XQACD[TS0ZWIXM] == " " 
           && TS0ZW03.TS-SHP-LEG-NBR[TS0ZWIXM] == 0
           && TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM] == 0
           && TS0ZW03.TS0ZMKG[TS0ZWIXM] == 0 
           && TS0ZW03.TS0ZMCBM[TS0ZWIXM] == 0
           && TS0ZW03.TS0ZMCRT[TS0ZWIXM] == 0
           && TS0ZW03.TS0ZMSHP[TS0ZWIXM] == 0
           && TS0ZW03.PC3PONBR[TS0ZWIXM] == 0
           && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
           && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0
           && TS0ZW03.TS0ZMPOI[TS0ZWIXM] == " "
           && TS0ZW03.PC4ORTYP[TS0ZWIXM] == " "
           && TS0ZW03.PC2CUXID[TS0ZWIXM] == " "
           && TS0ZW03.SY1STNBR[TS0ZWIXM] == " "
           && TS0ZW03.SY2CLRID[TS0ZWIXM] == " ")

             /* next sentence*/

          else
            TS0Z520(); /* group 1 detail edits*/
            TS0Z530(); /* group 2 detail edits*/
          end
          TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM - 1; /* decrement index*/
        end
      end

      if (TSWREC.YSSCD == "TN") /* If tentative shipment*/
         /* continue on*/
      else
        TS0Z540(); /* header edits*/
      end

      if (TS0ZW01.TS0ZWPSW == "N") /* if no other errors have occurred*/
        TS0Z550(); /* check for duplicate packing lists*/
      end

      if (TS0ZW01.TS0ZWPSW == "N") /* if no other errors have occurred*/

        /* **************************************************/
            /* Check to see if PO quantity warning flag*/
            /* needs to be reset, because of data changes.*/
        /* **************************************************/

        if (TS0ZW01.TS0ZWPWF == "Y") /* If the warning flag is set*/
          TS0Z560(); /* Check any data changed to reset warn*/
                                   /* flag*/
        end

        TS0ZW04.TS0ZWGR4 = TS0ZW03.TS0ZWGR3; /* Save screen data*/

        if (TS0ZW01.TS0ZWPWF == "N") /* If the warning flag not set*/
          TS0Z570(); /* Verify the item on po*/
          if (TS0ZW01.TS0ZWPSW == "N") /* If no error has occurred*/
            TS0Z580(); /* Verify quantities against po*/
          end
        end

        if (TS0ZW01.TS0ZWWF1 == "Y" /* If any array warnings set*/
         || TS0ZW01.TS0ZWWF2 == "Y" 
         || TS0ZW01.TS0ZWWF3 == "Y" 
         || TS0ZW01.TS0ZWWF4 == "Y" 
         || TS0ZW01.TS0ZWWF6 == "Y" 
         || TS0ZW01.TS0ZWWF7 == "Y")
          TS0ZW01.TS0ZWPSW = "Y"; /* Set problem switch*/

          TS0Z590(); /* Process warnings*/

        else
          TS0ZW01.TS0ZWPWF = "N"; /* Reset warning flag*/
        end

      end

    end
  end


end // end TS0Z500

// Verify po item seq nbr entered
Function TS0Z501()
   /* ------------------------------------------------------------*/

         /* VERIFY P.O. ITEM SEQUENCE NUMBER ENTERED*/

   /* 1) Check to see if gpc, po number, and item sequence number exist*/
      /* on the vpoitm03 view.*/

   /* ------------------------------------------------------------*/


  set VPOITM03 empty;
  set PCYREC empty;
  VPOITM03.XGPCD = TS0ZM002.XGPCD;
  VPOITM03.PC3PONBR = TS0ZM002.PC3PONBR[TS0ZWIXM];
  VPOITM03.PC6ITMNB = TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM];
  PCYREC.PCYFUNC = "SA";

  TS0ZS11(); /* select PO item*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VPOITM03.PC6STAT == "CX")
      converseLib.validationFailed(438);
      TS0ZM001.XXXPRCNM = "TS0Z501";
      TS0ZW01.TS0ZWPWF = "Y";
      set TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] cursor, modified, bold;
    else
      TS0Z504();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(439);
      TS0ZM001.XXXPRCNM = "TS0Z501";
      TS0ZW01.TS0ZWPWF = "Y";
      set TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] cursor, modified, bold;
    end
  end


end // end TS0Z501

// Populate seq nbr from long key
Function TS0Z502()
   /* ------------------------------------------------------------*/

         /* Populate item sequence number from long key*/

   /* Find the corresponding PO item sequence number from the long*/
   /* key entered.*/

   /* ------------------------------------------------------------*/

  WTS4001.IO-TASK = "L1";
  if (TS0ZM001.XGPCD == " ")
    WTS4001.XGP-GPC-CD = TS0ZM002.XGPCD;
  else
    WTS4001.XGP-GPC-CD = TS0ZM001.XGPCD;
  end
  if (TS0ZM001.PC3PONBR[TS0ZWIXM] == 0)
    WTS4001.PC-PO-NBR = TS0ZM002.PC3PONBR[TS0ZWIXM];
  else
    WTS4001.PC-PO-NBR = TS0ZM001.PC3PONBR[TS0ZWIXM];
  end
  WTS4001.PC-ITM-SEQ-NBR = 0;
  if (TS0ZM001.SY1STNBR[TS0ZWIXM] == " ")
    WTS4001.SY-STY-NBR = TS0ZM002.SY1STNBR[TS0ZWIXM];
  else
    WTS4001.SY-STY-NBR = TS0ZM001.SY1STNBR[TS0ZWIXM];
  end
  if (TS0ZM001.SY2CLRID[TS0ZWIXM] == " ")
    WTS4001.SY-COLR-CD-ID = TS0ZM002.SY2CLRID[TS0ZWIXM];
  else
    WTS4001.SY-COLR-CD-ID = TS0ZM001.SY2CLRID[TS0ZWIXM];
  end
  if (TS0ZM001.XDMCD[TS0ZWIXM] == " ")
    WTS4001.XDM-DIM-CD = "*";
  else
    WTS4001.XDM-DIM-CD = TS0ZM001.XDMCD[TS0ZWIXM];
  end
  WTS4001.XWH-WHSE-CD = TS0ZM001.XWHCD;
  if (TS0ZM002.XQACD[TS0ZWIXM] == " ")
    WTS4001.XQA-QUAL-CD = "*";
  else
    WTS4001.XQA-QUAL-CD = TS0ZM002.XQACD[TS0ZWIXM];
  end
  if (TS0ZM002.XUMCD[TS0ZWIXM] == " ")
    WTS4001.XUM-UOM-CD = "*";
  else
    WTS4001.XUM-UOM-CD = TS0ZM002.XUMCD[TS0ZWIXM];
  end
  if (TS0ZM002.XOWCD[TS0ZWIXM] == " ")
    WTS4001.XOW-OWN-GRP-CD = "*";
  else
    WTS4001.XOW-OWN-GRP-CD = TS0ZM002.XOWCD[TS0ZWIXM];
  end
  WTS4001.PC-PRDCU-ID = TS0ZM001.PC2CUXID[TS0ZWIXM];
  WTS4001.OP-CUST-ORD-ID = TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
  WTS4001.OP-NIKE-ORD-ID = TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
  if (TS0ZM002.XPGCD[TS0ZWIXM] == " ")
    WTS4001.XPG-PKG-TYP-CD = "*";
  else
    WTS4001.XPG-PKG-TYP-CD = TS0ZM002.XPGCD[TS0ZWIXM];
  end
  if (TSFREC.TSFDESTE == 0)
    WTS4001.TS-EST-DEST-DT = -1;
  else
    WTS4001.TS-EST-DEST-DT = TSFREC.TSFDESTE;
  end
  if (TS0ZM002.TS0ZMSHP[TS0ZWIXM] == 0)
    if (TS0ZM001.TS0ZMSHP[TS0ZWIXM] == 0)
      WTS4001.TS-CPL-QTOT-SHP = -1;
    else
      WTS4001.TS-CPL-QTOT-SHP = TS0ZM001.TS0ZMSHP[TS0ZWIXM];
    end
  else
    WTS4001.TS-CPL-QTOT-SHP = TS0ZM002.TS0ZMSHP[TS0ZWIXM];
  end
  WTS4001.IO-RETURN-CODE = "00";
  TS0ZS51();
  if (WTS4001.IO-RETURN-CODE == "00")
    TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] = WTS4001.PC-ITM-SEQ-NBR;
  else
    TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] = 0;
  end

end // end TS0Z502

// Populate leg nbr
Function TS0Z503()
   /* ------------------------------------------------------------*/

         /* Populate leg number*/

   /* Find the leg number by checking:*/

   /* If the origin location is a consolidation point*/
   /* find the previous shipment with the same product and*/
   /* discharge location code = origin location code*/
   /* set the leg number to found leg number + 1*/
   /* Else if the discharge port is a consolidation point*/
   /* set the leg number to 1*/
   /* Else*/
   /* set the leg number to 0*/
   /* ------------------------------------------------------------*/

  if (TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] == 0)
    TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] = 0;
  else
    if (TS0ZW01.TS-ORIG-LOC-CNSLD-FL == "Y")
      TS0Z505(); /* scan for previous leg*/
      TS0Z506(); /* get 1st previous leg*/
      if (SQLCA.VAGen_SQLCODE == 0)
        TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] = VCPLHDJ4.TS-SHP-LEG-NBR + 1;
      else
        TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] = 0;
      end
      TS0Z506(); /* close cursor*/
    else
      if (TS0ZW01.TS-DSCHG-LOC-CNSLD-FL == "Y")
        TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] = 1;
      else
        TS0ZM002.TS-SHP-LEG-NBR[TS0ZWIXM] = 0;
      end
    end
  end

end // end TS0Z503

// Populate long key from seq nbr
Function TS0Z504()
   /* ------------------------------------------------------------*/

         /* Populate long key from PO item sequence number*/

   /* If the PO line item sequence number was entered, move the*/
   /* associated line item to the screen.*/

   /* ------------------------------------------------------------*/

  TS0ZM001.PC2CUXID[TS0ZWIXM] = VPOITM03.PC2CUXID;
  TS0ZM002.PC2CUXID[TS0ZWIXM] = VPOITM03.PC2CUXID;
  TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = VPOITM03.OP1CUOID;
  TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWIXM] = VPOITM03.OP1CUOID;
  TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = VPOITM03.OP1NORID;
  TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] = VPOITM03.OP1NORID;
  TS0ZM001.SY1STNBR[TS0ZWIXM] = VPOITM03.SY1STNBR;
  TS0ZM002.SY1STNBR[TS0ZWIXM] = VPOITM03.SY1STNBR;
  TS0ZM001.SY2CLRID[TS0ZWIXM] = VPOITM03.SY2CLRID;
  TS0ZM002.SY2CLRID[TS0ZWIXM] = VPOITM03.SY2CLRID;
  TS0ZM001.XDMCD[TS0ZWIXM] = VPOITM03.XDMCD;
  TS0ZM002.XQACD[TS0ZWIXM] = VPOITM03.XQACD;
  TS0ZM002.XPGCD[TS0ZWIXM] = VPOITM03.XPGCD;
  TS0ZM002.XUMCD[TS0ZWIXM] = VPOITM03.XUMCD;
  TS0ZM002.XOWCD[TS0ZWIXM] = VPOITM03.XOWCD;

end // end TS0Z504

// select cplhdj4 s7
Function TS0Z505()
   /* ------------------------------------------------------------*/

         /* Find the previous leg*/

   /* ------------------------------------------------------------*/

  set VCPLHDJ4 empty;
  VCPLHDJ4.XGP-GPC-CD = TS0ZM001.XGPCD;
  VCPLHDJ4.PC-PO-NBR = TS0ZM002.PC3PONBR[TS0ZWIXM];
  VCPLHDJ4.PC-ITM-SEQ-NBR = TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM];
  VCPLHDJ4.TS-DSCHG-LOC-CD = TS0ZW01.TS-ORIG-LOC-CD;
  VCPLHDJ4.TS-ORIG-LOC-CD = "*";
  VCPLHDJ4.TS-DEST-LOC-CD = "*";

   /* ------------------------------------------------------------*/
   /* Select the row from Packing List/Shipment join view.*/
   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("S7", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

    return; /* Return to previous process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PREVIOUS CPLHD ROW     ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end TS0Z505

// get next cplhdj4 s7
Function TS0Z506()
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select the row from Packing List/Shipment join view.*/
   /* ------------------------------------------------------------*/

  call "VCPLHDJ4" ("N7", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

    return; /* Return to previous process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH PREVIOUS CPLHD ROW      ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end TS0Z506

// group 1 edits
Function TS0Z520()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 1*/

       /* Edits;*/
         /* 1) owner group*/
         /* 2) unit of measure*/
         /* 3) package type*/
         /* 4) quality code*/
         /* 5) seg code*/
         /* 6) dimension*/
         /* 7) kilos*/
         /* 8) cubic meters*/
         /* 9) cartons*/
        /* 10) ship quanity*/

   /* ------------------------------------------------------------*/

   /* **************************************/
           /* owner group*/
   /* **************************************/

  if (TS0ZW03.XOWCD[TS0ZWIXM] != " ") /* if owner group entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0ZW03.XOWCD[TS0ZWIXM] in XOWTBL.XOWCD) /* Check valid owner group*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XOWTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(105); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
      set TS0ZM002.XOWCD[TS0ZWIXM] cursor, modified, bold;
    end
  else
    TS0ZW03.XOWCD[TS0ZWIXM] = "00"; /* default to '00'*/
  end

   /* **************************************/
           /* unit of measure*/
   /* **************************************/

  if (TS0ZW03.XUMCD[TS0ZWIXM] != " ") /* if unit of measure entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0ZW03.XUMCD[TS0ZWIXM] in XUMTBL.XUMCD) /* valid unit of measure*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XUMTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(106); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
      set TS0ZM002.XUMCD[TS0ZWIXM] cursor, modified, bold;
    end
  else
    TS0ZW03.XUMCD[TS0ZWIXM] = "01"; /* default to '01'*/
  end

   /* **************************************/
           /* package type*/
   /* **************************************/

  if (TS0ZW03.XPGCD[TS0ZWIXM] != " ") /* if package type entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0ZW03.XPGCD[TS0ZWIXM] in XPGTBL.XPGCD) /* Check valid package type*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XPGTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(107); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
      set TS0ZM002.XPGCD[TS0ZWIXM] cursor, modified, bold;
    end
  else
    TS0ZW03.XPGCD[TS0ZWIXM] = "00"; /* default to '00'*/
  end

   /* **************************************/
           /* quality code*/
   /* **************************************/

  if (TS0ZW03.XQACD[TS0ZWIXM] != " ") /* if quality code entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0ZW03.XQACD[TS0ZWIXM] in XQATBL.XQACD) /* Check valid quality code*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XQATBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(108); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
      set TS0ZM002.XQACD[TS0ZWIXM] cursor, modified, bold;
    end
  end

   /* **************************************/
           /* in seg code*/
   /* **************************************/

   /* TCS BEG*/
   /* IF TS0ZW03.PC2INSEG(TS0ZWIXM) EQ ' ';    /* if code not entered*/
   /* MOVE '000' TO TS0ZW03.PC2INSEG(TS0ZWIXM); /* default to '000'*/
   /* ELSE;*/
   /* IF TS0ZW03.PC2CUXID(TS0ZWIXM) EQ '     '; /* if cust not entered*/
   /* PERFORM TS0Z521;              /* select seg code*/
   /* IF SQLCA.SQLCODE EQ 0;*/
   /* MOVE PC2REC.PC2CUXID TO TS0ZW03.PC2CUXID(TS0ZWIXM);*/
   /* MOVE PC2REC.PC2CUXID TO TS0ZM001.PC2CUXID(TS0ZWIXM);*/
   /* MOVE PC2REC.PC2CUXID TO TS0ZM002.PC2CUXID(TS0ZWIXM);*/
   /* ELSE;*/
   /* IF SQLCA.SQLCODE EQ 100;*/
   /* MOVE 109 TO EZEMNO;       /* Display error message*/
   /* MOVE 'Y' TO TS0ZW01.TS0ZWPSW;    /* Indicate problem*/
   /* MOVE 'TS0Z520' TO TS0ZM001.XXXPRCNM; /* Process name*/
   /* MOVE 'TS0Z520' TO TS0ZM002.XXXPRCNM; /* Process name*/
   /* SET TS0ZM001.PC2CUXID(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC2CUXID(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* END;*/
   /* END;*/
   /* END;*/
   /* END;*/
   /* TCS END*/

   /* **************************************/
           /* dimension*/
   /* **************************************/

  if (TS0ZW03.XDMCD[TS0ZWIXM] != " ") /* if dimension entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0ZW03.XDMCD[TS0ZWIXM] in XDMTBL.XDMCD) /* Check valid dimension*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XDMTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(110); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
      set TS0ZM001.XDMCD[TS0ZWIXM] cursor, modified, bold;
   /* TCS BEG*/
   /* SET TS0ZM002.XDMCD(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* TCS END*/
    end
  else
    TS0ZW03.XDMCD[TS0ZWIXM] = "00"; /* default to '00'*/
  end

   /* **************************************/
           /* kilos*/
   /* **************************************/

  if (TS0ZW03.TS0ZMKG[TS0ZWIXM] < 0) /* if kilos less than 0*/
    converseLib.validationFailed(76); /* Display error message*/
    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
    TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
    set TS0ZM001.TS0ZMKG[TS0ZWIXM] cursor, modified, bold;
    set TS0ZM002.TS0ZMKG[TS0ZWIXM] cursor, modified, bold;
  end

   /* **************************************/
           /* cubic meters*/
   /* **************************************/

  if (TS0ZW03.TS0ZMCBM[TS0ZWIXM] < 0) /* if cubic meters less than 0*/
    converseLib.validationFailed(76); /* Display error message*/
    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
    TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
    set TS0ZM001.TS0ZMCBM[TS0ZWIXM] cursor, modified, bold;
    set TS0ZM002.TS0ZMCBM[TS0ZWIXM] cursor, modified, bold;
  end

   /* **************************************/
           /* cartons*/
   /* **************************************/

  if (TS0ZW03.TS0ZMCRT[TS0ZWIXM] < 0) /* if cartons lt 0*/
    converseLib.validationFailed(76); /* Display error message*/
    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
    TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
    set TS0ZM001.TS0ZMCRT[TS0ZWIXM] cursor, modified, bold;
    set TS0ZM002.TS0ZMCRT[TS0ZWIXM] cursor, modified, bold;
  end

   /* **************************************/
           /* ship quantity*/
   /* **************************************/

  if (TSWREC.TSWDOMFL == "Y") /* If domestic to domestic*/
     /* continue on - not required*/
  else
    if (TS0ZW03.TS0ZMSHP[TS0ZWIXM] <= 0) /* if ship quantity less than 0*/
      converseLib.validationFailed(112); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z520"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z520"; /* Process name*/
      set TS0ZM001.TS0ZMSHP[TS0ZWIXM] cursor, modified, bold;
      set TS0ZM002.TS0ZMSHP[TS0ZWIXM] cursor, modified, bold;
    end
  end

   /* TCS BEG*/
   /* **************************************/
           /* ship quantity*/
   /* **************************************/
  if (TS0ZW03.TS-SHP-LEG-NBR[TS0ZWIXM] <= 0) /* if leg indicator less than 0*/
    TS0ZW03.TS-SHP-LEG-NBR[TS0ZWIXM] = 0;
  end
   /* TCS END*/

end // end TS0Z520

// group 2 edits
Function TS0Z530()
   /* ------------------------------------------------------------*/

                 /* EDIT GROUPING 2*/

   /* 1) check style/color in database*/
   /* 2) verify s.o. number*/
   /* 3) check customer xref in database*/
   /* 4) verify correct p.o. id fields*/
   /* 5) verify that p.o. number or p.o. id is entered*/
   /* 6) if no errors found so far*/
      /* - verify that po exists for keys and check quantities*/

   /* ------------------------------------------------------------*/

   /* ***********************************/
   /* Verify style/color*/
   /* ***********************************/

  if (TS0ZW03.SY1STNBR[TS0ZWIXM] == " ") /* if style is missing*/
    converseLib.validationFailed(114); /* error message*/
    TS0ZM001.XXXPRCNM = "TS0Z530"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z530"; /* Process name*/
    TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
    set TS0ZM001.SY1STNBR[TS0ZWIXM] cursor, modified, bold;
    set TS0ZM002.SY1STNBR[TS0ZWIXM] cursor, modified, bold;
  else
    PG2REC.SY1STNBR = TS0ZW03.SY1STNBR[TS0ZWIXM]; /* move keys*/
    PG2REC.SY2CLRID = TS0ZW03.SY2CLRID[TS0ZWIXM];

    TS0Z531(); /* select style/color combination*/

    if (SQLCA.VAGen_SQLCODE == 100) /* style color not found*/
      converseLib.validationFailed(113); /* error message*/
      TS0ZM001.XXXPRCNM = "TS0Z530"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z530"; /* Process name*/
      TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
      set TS0ZM001.SY1STNBR[TS0ZWIXM] cursor, modified, bold;
      set TS0ZM001.SY2CLRID[TS0ZWIXM] modified, bold;
      set TS0ZM002.SY1STNBR[TS0ZWIXM] cursor, modified, bold;
      set TS0ZM002.SY2CLRID[TS0ZWIXM] modified, bold;
    end
  end

   /* ***********************************/
   /* Verify S.O. Number*/
   /* ***********************************/

  TS0Z-53110(); /* verify sales order entered*/

   /* ***********************************/
   /* Verify customer x-ref*/
   /* ***********************************/

  if (TS0ZW03.PC2CUXID[TS0ZWIXM] != " ") /* if cust exists*/

    TS0Z532(); /* select the cust xref*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
    /* TCS BEG*/
   /* MOVE PC2REC.PC2INSEG TO TS0ZW03.PC2INSEG(TS0ZWIXM);*/
   /* MOVE PC2REC.PC2INSEG TO TS0ZM002.PC2INSEG(TS0ZWIXM);*/
     /* next sentence*/
    /* TCS END*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
        converseLib.validationFailed(161); /* error message*/
        TS0ZM001.XXXPRCNM = "TS0Z530"; /* Process name*/
        TS0ZM002.XXXPRCNM = "TS0Z530"; /* Process name*/
        TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
        if (TS0ZM001.PC2CUXID[TS0ZWIXM] != " ") /* if cust exists*/
          set TS0ZM001.PC2CUXID[TS0ZWIXM] cursor, bold;
          set TS0ZM002.PC2CUXID[TS0ZWIXM] cursor, bold;
        end
      end
    end
  end

   /* ***********************************/
   /* Verify p.o. id fields seperately*/
   /* ***********************************/

  if (TS0ZW03.PC3PONBR[TS0ZWIXM] == 0) /* if no po number was entered*/
    TS0Z533(); /* Edit po id fields seperately*/
  end


   /* ***********************************/
   /* Verify p.o. or p.o. id are*/
      /* entered and valid*/
   /* ***********************************/

  TS0Z534(); /* Edit po # or po id*/



end // end TS0Z530

// Select style/color
Function TS0Z531()
   /* ------------------------------------------------------------*/

                 /* SELECT STYLE/COLOR*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* clear record*/

  PG2REC.XGPCD = TSWREC.XGPCD; /* move keys*/
  PG2REC.SY1STNBR = TS0ZW03.SY1STNBR[TS0ZWIXM];
  PG2REC.SY2CLRID = TS0ZW03.SY2CLRID[TS0ZWIXM];
  PG2REC.XDMCD = TS0ZW03.XDMCD[TS0ZWIXM];

  TA1REC.TA1PGMNM = "TS0Z531"; /* Process name*/
  TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/

  XSPG202(); /* Select the style/color*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate Problem*/
    TS0ZM001.XXXPRCNM = "TS0Z531"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z531"; /* Process name*/
  end


end // end TS0Z531

// Select row in DPRODC.VPRDCU01
Function TS0Z532()
   /* ------------------------------------------------------------*/
   /* select Customer Xref*/
   /* ------------------------------------------------------------*/

  PC2REC.XGPCD = TSWREC.XGPCD;
  PC2REC.PC2CUXID = TS0ZW03.PC2CUXID[TS0ZWIXM];

  try
    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TS0ZM001.XXXPRCNM = "TS0Z532"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "TS0Z532"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS0Z532

// Verify PO id fields
Function TS0Z533()
   /* ------------------------------------------------------------*/

      /* VERIFY THE ENTRY OF EACH P.O. ID FIELD SEPERATELY*/

     /* If any part of the p.o. id entered*/

     /* Verify:  1) PO order type entered and equal to 'FT'*/
              /* 2) Factory code entered and correct.*/
              /* 3) Delivery month entered and correct.*/
              /* 4) Month entered and correct.*/
              /* 5) Year entered and correct.*/

   /* ------------------------------------------------------------*/

  TS0ZW01.TS0ZWIDS = "N"; /* Initialize po id and type*/
  TS0ZW01.TS0ZWIPI = "N"; /* Initialize po id indicator*/
  TS0ZW01.TS0ZWIOT = "N"; /* Initialize invalid order type id*/

  if (TS0ZW03.TS0ZMPOI[TS0ZWIXM] != " " /* If any fields entered.*/
   || TS0ZW03.PC4ORTYP[TS0ZWIXM] != " ")

    TS0ZW01.TS0ZWPOI = TS0ZW03.TS0ZMPOI[TS0ZWIXM]; /* reform field*/

    /* ------------------------------------------------------------*/
     /* Verify po id order type*/
    /* ------------------------------------------------------------*/

    if (TS0ZW03.PC4ORTYP[TS0ZWIXM] == "  ") /* Nothing there*/
      TS0ZW01.TS0ZWIDS = "Y"; /* Invalid po id / type*/
      TS0ZW01.TS0ZWIOT = "Y"; /* Indicate invalid order type*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z533";
      converseLib.validationFailed(220);
      if (TS0ZW01.TS0ZWIXM == 1
       || TS0ZM001.PC4ORTYP[TS0ZWIXM] != " ")
        set TS0ZM001.PC4ORTYP[TS0ZWIXM] cursor, bold;
      end
    else
      set PC4REC empty;
      PC4REC.XGPCD = TSWREC.XGPCD;
      PC4REC.PC4ORTYP = TS0ZW03.PC4ORTYP[TS0ZWIXM];
      TS0ZS06(); /* Select order type*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
         /* continue on*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
          TS0ZW01.TS0ZWIDS = "Y"; /* Invalid po id / type*/
          TS0ZW01.TS0ZWIOT = "Y"; /* Indicate invalid order type*/
          TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
          TS0ZM001.XXXPRCNM = "TS0Z533";
          converseLib.validationFailed(220);
          if (TS0ZW01.TS0ZWIXM == 1
           || TS0ZM001.PC4ORTYP[TS0ZWIXM] != " ")
            set TS0ZM001.PC4ORTYP[TS0ZWIXM] cursor, bold;
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* FACTORY CODE CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0ZW01.TS0ZWFCT == " ") /* Nothing there*/
      TS0ZW01.TS0ZWIPI = "Y"; /* Indicate invalid po id*/
      TS0ZW01.TS0ZWIDS = "Y"; /* Invalid po id / type*/
    else
      FY1REC.FY1FCTYC = TS0ZW01.TS0ZWFCT; /* Search key*/
      FY1REC.XGPCD = TSWREC.XGPCD; /* gpc*/

      TS0ZS05(); /* select the factory row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
         /* continue on*/
      else
        TS0ZW01.TS0ZWIPI = "Y"; /* Indicate invalid po id*/
        TS0ZW01.TS0ZWIDS = "Y"; /* Invalid po id / type*/
      end
    end

    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0ZW01.TS0ZWDMO >= "01" /* If valid month entered*/
     && TS0ZW01.TS0ZWDMO <= "12")
       /* continue on*/
    else
      TS0ZW01.TS0ZWIPI = "Y"; /* Indicate invalid po id*/
      TS0ZW01.TS0ZWIDS = "Y"; /* Invalid po id / type*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0ZW01.TS0ZWPMO >= "01" /* Something there*/
     && TS0ZW01.TS0ZWPMO <= "12")
       /* continue on*/
    else
      TS0ZW01.TS0ZWIPI = "Y"; /* Indicate invalid po id*/
      TS0ZW01.TS0ZWIDS = "Y"; /* Invalid po id / type*/
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0ZW01.TS0ZWPYR >= "00"
     && TS0ZW01.TS0ZWPYR <= "99")
      if (TS0ZW01.TS0ZWPYR > "85")
        TS0ZW01.TS0ZWPCC = "19";
      else
        TS0ZW01.TS0ZWPCC = "20";
      end
    else
      if (TS0ZW01.TS0ZWPY1 >= "A"
       && TS0ZW01.TS0ZWPY1 <= "Z"
       && TS0ZW01.TS0ZWPY2 >= "0"
       && TS0ZW01.TS0ZWPY2 <= "9")
        TS0ZS07(); /* Select the set of season years*/
        if (SQLCA.VAGen_SQLCODE == 0)
          TS0ZS08(); /* Fetch the first row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
            TS0ZW01.TS0ZWCYR = PCFREC.PCFSEYR;
            TS0ZW01.TS0ZWPYR = TS0ZW01.TS0ZWCYY;
            TS0ZW01.TS0ZWPCC = TS0ZW01.TS0ZWCCC;
          else
            TS0ZW01.TS0ZWIPI = "Y"; /* Indicate invalid po id*/
            TS0ZW01.TS0ZWIDS = "Y"; /* Invalid po id / type*/
          end
          TS0ZS09(); /* Close the set*/
        end
      else
        TS0ZW01.TS0ZWIPI = "Y"; /* Indicate invalid po id*/
        TS0ZW01.TS0ZWIDS = "Y"; /* Invalid po id / type*/
      end
    end


    if (TS0ZW01.TS0ZWIPI == "Y") /* Indicate invalid po id*/
      TS0ZW01.TS0ZWPSW = "Y";
      TS0ZM001.XXXPRCNM = "TS0Z533";
      converseLib.validationFailed(167);
      if (TS0ZW01.TS0ZWIXM == 1
       || TS0ZM001.TS0ZMPOI[TS0ZWIXM] != " ")
        set TS0ZM001.TS0ZMPOI[TS0ZWIXM] cursor, bold;
      end
    end

    if (TS0ZW01.TS0ZWIDS == "Y") /* Indicate invalid po id and type*/
      TS0ZW01.TS0ZWPSW = "Y";
    end

  end


end // end TS0Z533

// Verify PO # or PO id entered
Function TS0Z534()
   /* ------------------------------------------------------------*/

         /* VERIFY P.O. NUMBER OR P.O. ID ENTERED*/

   /* 1) If p.o. number or p.o. id not entered then indicate err*/
   /* 2) If the p.o. number was entered then continue on without*/
      /* checking the p.o. id.*/
   /* 3) If only p.o. id fields have been entered and they are*/
      /* correct, then select the p.o. id and obtain a valid*/
      /* p.o. number for the id.*/

   /* ------------------------------------------------------------*/

  if (TS0ZW03.TS0ZMPOI[TS0ZWIXM] == " "        /* if po # or po id not entered*/
   && TS0ZW03.PC3PONBR[TS0ZWIXM] == 0          
   && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0 /* not B-Grade rqst*/
   && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0)
    converseLib.validationFailed(168); /* error message*/
    TS0ZM001.XXXPRCNM = "TS0Z534"; /* Process name*/
    TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
    set TS0ZM001.PC3PONBR[TS0ZWIXM] cursor, modified, bold;
    set TS0ZM002.PC3PONBR[TS0ZWIXM] cursor, modified, bold;
    set TS0ZM001.TS0ZMPOI[TS0ZWIXM] modified, bold;
    set TS0ZM001.PC4ORTYP[TS0ZWIXM] modified, bold;
  else
    if (TS0ZW03.PC3PONBR[TS0ZWIXM] > 0) /* if po # entered*/
      set PCYREC empty; /* Clear the passing record*/
      set PC3REC empty; /* Clear the P.O. header record*/
      PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
      PC3REC.PC3PONBR = TS0ZW03.PC3PONBR[TS0ZWIXM]; /* P.O. type*/
      PCYREC.PCYFUNC = "S "; /* Select alternate*/

      TS0ZS10(); /* select the po*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
        TS0ZW01.TS0ZWDAT = PC3REC.PC3POIDT;
        TS0ZW01.TS0ZWPCC = TS0ZW01.TS0ZWPCN;
        TS0ZW01.TS0ZWPYR = TS0ZW01.TS0ZWPYY;
        TS0ZW01.TS0ZWPMO = TS0ZW01.TS0ZWPM1;
        TS0ZW01.TS0ZWDMO = TS0ZW01.TS0ZWPM2;
        TS0ZW01.TS0ZWFCT = PC3REC.FY1FCTYC;
        if (TSWREC.XGPCD == "03")
          TS0ZW01.TS0ZWPYR = PC3REC.PCFSECD;
        end
        TS0ZW03.TS0ZMPOI[TS0ZWIXM] = TS0ZW01.TS0ZWPOI;
        TS0ZW03.PC4ORTYP[TS0ZWIXM] = PC3REC.PC4ORTYP;
        if (TS0ZM001.PC3PONBR[TS0ZWIXM] != 0 /* If po # on screen*/
         || TS0ZM002.PC3PONBR[TS0ZWIXM] != 0) /* If po # on screen*/
          TS0ZM001.TS0ZMPOI[TS0ZWIXM] = TS0ZW01.TS0ZWPOI;
          TS0ZM001.PC4ORTYP[TS0ZWIXM] = PC3REC.PC4ORTYP;
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
          converseLib.validationFailed(118); /* error message*/
          TS0ZM001.XXXPRCNM = "TS0Z534"; /* Process name*/
          TS0ZM002.XXXPRCNM = "TS0Z534"; /* Process name*/
          TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
          set TS0ZM001.PC3PONBR[TS0ZWIXM] cursor, modified, bold;
          set TS0ZM002.PC3PONBR[TS0ZWIXM] cursor, modified, bold;
        end
      end
    else
      if (TS0ZM001.XGPCD == "02"                  
       && TS0ZW03.TS0ZMPOI[TS0ZWIXM] == " "       /* if po id not entered*/
       && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] > 0 /* B-grade rqst*/
       && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] > 0) /**/
          /* ======= Next Sentence =======>*/
      else
        if (TS0ZW01.TS0ZWIDS == "N") /* If the po id passed previous edits*/
          set PCYREC empty; /* Clear the passing record*/
          set PC3REC empty; /* Clear the P.O. header record*/
          PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
          PC3REC.FY1FCTYC = TS0ZW01.TS0ZWFCT; /* Factory code*/
          TS0ZW01.TS0ZWPCN = TS0ZW01.TS0ZWPCC; /* redefine*/
          TS0ZW01.TS0ZWPYY = TS0ZW01.TS0ZWPYR;
          TS0ZW01.TS0ZWPM1 = TS0ZW01.TS0ZWPMO;
          TS0ZW01.TS0ZWPM2 = TS0ZW01.TS0ZWDMO;
          PC3REC.PC3POIDT = TS0ZW01.TS0ZWDAT; /* P.O. id*/
          PC3REC.PC4ORTYP = TS0ZW03.PC4ORTYP[TS0ZWIXM]; /* P.O. type*/
          PCYREC.PCYFUNC = "SA"; /* Select alternate*/

          TS0ZS10(); /* Select the p.o. id to obtain p.o. #*/

          if (SQLCA.VAGen_SQLCODE == 0) /* Row exists*/
            TS0ZW03.PC3PONBR[TS0ZWIXM] = PC3REC.PC3PONBR;
            if (TS0ZM001.TS0ZMPOI[TS0ZWIXM] != " ") /* If po id on screen*/
              TS0ZM001.PC3PONBR[TS0ZWIXM] = PC3REC.PC3PONBR;
            end
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* Row does not exist*/
              converseLib.validationFailed(167); /* No data to display*/
              set TS0ZM001.TS0ZMPOI[TS0ZWIXM] cursor, modified, bold;
              set TS0ZM001.PC4ORTYP[TS0ZWIXM] modified, bold;
              TS0ZM001.XXXPRCNM = "TS0Z534"; /* Process name*/
              TS0ZM002.XXXPRCNM = "TS0Z534"; /* Process name*/
              TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
            else
              if (SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/
                converseLib.validationFailed(298); /* Multiple row error message*/
                set TS0ZM001.PC3PONBR[TS0ZWIXM] cursor;
                set TS0ZM002.PC3PONBR[TS0ZWIXM] cursor;
                set TS0ZM001.TS0ZMPOI[TS0ZWIXM] bold;
                set TS0ZM001.PC4ORTYP[TS0ZWIXM] bold;
                TS0ZM001.XXXPRCNM = "TS0Z534"; /* Process name*/
                TS0ZM002.XXXPRCNM = "TS0Z534"; /* Process name*/
                TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
              end /* Mult rows returned*/
            end /* Row does not exist*/
          end /* Row exists*/
        end /* If po id passed previous edits*/
      end /* Gpc = '02'*/
    end /* PO # entered*/
  end /* PO # or PO ID not entered*/


   /* **************************************/
         /* edit quality code*/
   /* **************************************/

  if (TS0ZW03.XQACD[TS0ZWIXM] != " ") /* if quality code entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0ZW03.XQACD[TS0ZWIXM] in XQATBL.XQACD) /* Check valid quality code*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XQATBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(108); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z420"; /* Process name*/
      set TS0ZM002.XQACD[TS0ZWIXM] cursor, modified, bold;
    end
  else
    if (TS0ZW03.XQACD[TS0ZWIXM] == " ") /* if quality code not entered*/
      if (TS0ZM001.XGPCD == "02"
       && TS0ZW03.PC4ORTYP[TS0ZWIXM] == "QQ")
        TS0ZW03.XQACD[TS0ZWIXM] = "02"; /* default to '02'*/
      else
        if (TS0ZM001.XGPCD == "02"
         && TS0ZW03.PC4ORTYP[TS0ZWIXM] == "OS")
          TS0ZW03.XQACD[TS0ZWIXM] = "02"; /* default to '02'*/
        else
          if (TS0ZM001.XGPCD == "02"                  
           && TS0ZW03.TS0ZMPOI[TS0ZWIXM] == " "       /* if po id not entered*/
           && TS0ZW03.PC3PONBR[TS0ZWIXM] == 0         /* if po # not entered*/
           && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] > 0 /* B-grade rqst*/
           && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] > 0) /**/
            TS0ZW03.XQACD[TS0ZWIXM] = "02"; /* default to '02'*/
          else
            if (TS0ZM001.XGPCD == "03"
             && TS0ZW03.PC4ORTYP[TS0ZWIXM] == "IR")
              TS0ZW03.XQACD[TS0ZWIXM] = "02"; /* default to '02'*/
            else
              TS0ZW03.XQACD[TS0ZWIXM] = "01"; /* default to '01'*/
            end
          end
        end
      end
    end
  end

end // end TS0Z534

// Header edits
Function TS0Z540()
   /* ------------------------------------------------------------*/

                     /* HEADER EDITS*/

     /* Edits;*/
        /* 1) kilos*/
        /* 2) cubic meters*/
        /* 3) container type*/
        /* 4) container id*/

   /* ------------------------------------------------------------*/

  if (TS0ZM001.YCNCD != " ") /* if container type is entered*/

    if (TS0ZM001.TSHTCBM == 0) /* if cubic meters not entered*/
      converseLib.validationFailed(119); /* must enter at least one*/
      TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z540"; /* process name*/
      set TS0ZM001.TSHTCBM cursor, modified, bold;
      TS0ZM002.XXXPRCNM = "TS0Z540"; /* process name*/
      set TS0ZM002.TSHTCBM cursor, modified, bold;
    end

    if (TS0ZM001.TSHTKG < 0) /* if kilos lt 0*/
      converseLib.validationFailed(76); /* must be greater than zero*/
      TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z540"; /* process name*/
      set TS0ZM001.TSHTKG modified, bold;
      TS0ZM002.XXXPRCNM = "TS0Z540"; /* process name*/
      set TS0ZM002.TSHTKG modified, bold;
    end

    if (TS0ZM001.TSHTCBM < 0) /* if cubic meters lt 0*/
      converseLib.validationFailed(76); /* must be greater than zero*/
      TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z540"; /* process name*/
      set TS0ZM001.TSHTCBM modified, bold;
      TS0ZM002.XXXPRCNM = "TS0Z540"; /* process name*/
      set TS0ZM002.TSHTCBM modified, bold;
    end

    /* **************************************/
             /* container type*/
    /* **************************************/

    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0ZM001.YCNCD in YCNTBL.YCNCD) /* Check valid container*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YCNTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(120); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z540"; /* Process name*/
      set TS0ZM001.YCNCD cursor, modified, bold;
      TS0ZM002.XXXPRCNM = "TS0Z540"; /* Process name*/
      set TS0ZM002.YCNCD cursor, modified, bold;
    end

  else
    if (TS0ZW01.YMTCD == "VL") /* If mode is vessel*/
      converseLib.validationFailed(120); /* Display error message*/
      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZM001.XXXPRCNM = "TS0Z540"; /* Process name*/
      set TS0ZM001.YCNCD cursor, modified, bold;
      TS0ZM002.XXXPRCNM = "TS0Z540"; /* Process name*/
      set TS0ZM002.YCNCD cursor, modified, bold;
    end
  end

   /* ************************************/
        /* container id*/
   /* ************************************/

  if (TS0ZM001.TSHCNTNR == " ") /* if container not entered*/
    converseLib.validationFailed(121); /* Display error message*/
    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
    TS0ZM001.XXXPRCNM = "TS0Z540"; /* Process name*/
    set TS0ZM001.TSHCNTNR cursor, modified, bold;
    TS0ZM002.XXXPRCNM = "TS0Z540"; /* Process name*/
    set TS0ZM002.TSHCNTNR cursor, modified, bold;
  else
    TS0Z541(); /* select the container*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if container found*/
      TS0ZM001.TSHCNTNR = TSHREC.TSHCNTNR; /* move in fields*/
      TS0ZM002.TSHCNTNR = TSHREC.TSHCNTNR;
      TS0ZW01.TS0ZWPLC = TSHREC.TSHNKCN;
      TS0ZM001.YCNCD = TSHREC.YCNCD;
      TS0ZM002.YCNCD = TSHREC.YCNCD;
      TS0ZM001.TSHTCBM = TSHREC.TSHTCBM;
      TS0ZM002.TSHTCBM = TSHREC.TSHTCBM;
      TS0ZM001.TSHTKG = TSHREC.TSHTKG;
      TS0ZM002.TSHTKG = TSHREC.TSHTKG;
      TS0ZM001.TSHSEAL = TSHREC.TSHSEAL;
      TS0ZM002.TSHSEAL = TSHREC.TSHSEAL;
    end
  end


end // end TS0Z540

// Select container id
Function TS0Z541()
   /* ------------------------------------------------------------*/

                 /* SELECT CONTAINER ID*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* clear record*/

  TSHREC.TSFSHPID = TS0ZM001.TSFSHPID; /* move key*/
  TSHREC.TSHCNTNR = TS0ZM001.TSHCNTNR;

  call "IO2590" ("S ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Z541"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate Problem*/
    TS0ZM001.XXXPRCNM = "TS0Z541"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z541"; /* Process name*/
  end


end // end TS0Z541

// Check for duplicate pack lists
Function TS0Z550()
   /* ------------------------------------------------------------*/

               /* CHECK FOR DUPLICATE PACKING LISTS*/

   /* 1) Check the map working storage to see if duplicate*/
      /* packing lists have been entered.*/

   /* 2) Compare the map working storage entries to see if*/
      /* duplicate packing lists already exist in the table*/
      /* working storage.*/

   /* 3) Check the map working storage against the packing*/
      /* lists that already exist in the data base.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* 1) Check the map working storage to see if duplicate*/
      /* packing lists have been entered.*/
   /* ------------------------------------------------------------*/
  TS0ZW01.TS0ZWIXM = 13; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM > 0) /* until end of detail*/
    TS0ZW01.TS0ZWIXW = TS0ZW01.TS0ZWIXM - 1; /* initialize index*/
    while (TS0ZW01.TS0ZWIXW > 0) /* until end of detail*/

      if (TS0ZW03.PC3PONBR[TS0ZWIXM] > 0 /* and po exists*/
       || TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] > 0)

        if (TS0ZW03.PC3PONBR[TS0ZWIXM] == TS0ZW03.PC3PONBR[TS0ZWIXW]
         && TS0ZW03.TS0ZMPOI[TS0ZWIXM] == TS0ZW03.TS0ZMPOI[TS0ZWIXW]
         && TS0ZW03.PC4ORTYP[TS0ZWIXM] == TS0ZW03.PC4ORTYP[TS0ZWIXW]
         && TS0ZW03.PC2CUXID[TS0ZWIXM] == TS0ZW03.PC2CUXID[TS0ZWIXW]
         && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM]
         == TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXW]
         && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM]
         == TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXW]
         && TS0ZW03.SY1STNBR[TS0ZWIXM] == TS0ZW03.SY1STNBR[TS0ZWIXW]
         && TS0ZW03.SY2CLRID[TS0ZWIXM] == TS0ZW03.SY2CLRID[TS0ZWIXW]
         && TS0ZW03.XDMCD[TS0ZWIXM] == TS0ZW03.XDMCD[TS0ZWIXW]
         && TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM]
         == TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXW]
         && TS0ZW03.XQACD[TS0ZWIXM] == TS0ZW03.XQACD[TS0ZWIXW]
         && TS0ZW03.XPGCD[TS0ZWIXM] == TS0ZW03.XPGCD[TS0ZWIXW]
         && TS0ZW03.XUMCD[TS0ZWIXM] == TS0ZW03.XUMCD[TS0ZWIXW]
         && TS0ZW03.XOWCD[TS0ZWIXM] == TS0ZW03.XOWCD[TS0ZWIXW])

   /* SET TS0ZM001.PC3PONBR(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMPOI(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.PC4ORTYP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.PC2CUXID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZM-CUST-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.SY1STNBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.SY2CLRID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.XDMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMSHP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMCRT(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMCBM(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMKG(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* ;*/
   /* SET TS0ZM002.PC3PONBR(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC2CUXID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZM-CUST-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.SY1STNBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.SY2CLRID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMSHP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMCRT(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMCBM(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMKG(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* ;/* TCS BEG*/
   /* SET TS0ZM002.XDMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC2INSEG(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS-SHP-LEG-NBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC-ITM-SEQ-NBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* ;/* TCS END*/
   /* SET TS0ZM002.XQACD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XPGCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XUMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XOWCD(TS0ZWIXM) MODIFIED,BRIGHT;*/

          TS0ZM001.XXXPRCNM = "TS0Z550"; /* process name*/
          TS0ZM002.XXXPRCNM = "TS0Z550"; /* process name*/
          TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
          converseLib.validationFailed(117); /* duplicate packing list*/
        end
      end
      TS0ZW01.TS0ZWIXW = TS0ZW01.TS0ZWIXW - 1; /* decrement index*/
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM - 1; /* decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* 2) Compare the map working storage entries to see if*/
      /* duplicate packing lists already exist in the table*/
      /* working storage.*/
   /* ------------------------------------------------------------*/
  TS0ZW01.TS0ZWIXM = 13; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM > 0) /* until end of detail*/

    TS0ZW01.TS0ZWIXW = 1; /* initialize index*/

    while (TS0ZW01.TS0ZWIXW < TS0ZW01.TS0ZWMAX) /* until end of table ws*/

      if (TS0ZW02.PC3PONBR[TS0ZWIXW] > 0 /* and lines exist*/
       || TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWIXW] > 0)

        if (TS0ZW03.PC3PONBR[TS0ZWIXM] > 0
         || TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] > 0)

          if (TS0ZW03.PC3PONBR[TS0ZWIXM] == TS0ZW02.PC3PONBR[TS0ZWIXW]
           && TS0ZW03.TS0ZMPOI[TS0ZWIXM] == TS0ZW02.TS0ZMPOI[TS0ZWIXW]
           && TS0ZW03.PC4ORTYP[TS0ZWIXM] == TS0ZW02.PC4ORTYP[TS0ZWIXW]
           && TS0ZW03.PC2CUXID[TS0ZWIXM] == TS0ZW02.PC2CUXID[TS0ZWIXW]
           && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM]
           == TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWIXW]
           && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM]
           == TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWIXW]
           && TS0ZW03.SY1STNBR[TS0ZWIXM] == TS0ZW02.SY1STNBR[TS0ZWIXW]
           && TS0ZW03.SY2CLRID[TS0ZWIXM] == TS0ZW02.SY2CLRID[TS0ZWIXW]
           && TS0ZW03.XDMCD[TS0ZWIXM] == TS0ZW02.XDMCD[TS0ZWIXW]
           && TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM]
           == TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWIXW]
           && TS0ZW03.XQACD[TS0ZWIXM] == TS0ZW02.XQACD[TS0ZWIXW]
           && TS0ZW03.XPGCD[TS0ZWIXM] == TS0ZW02.XPGCD[TS0ZWIXW]
           && TS0ZW03.XUMCD[TS0ZWIXM] == TS0ZW02.XUMCD[TS0ZWIXW]
           && TS0ZW03.XOWCD[TS0ZWIXM] == TS0ZW02.XOWCD[TS0ZWIXW])

   /* SET TS0ZM001.PC3PONBR(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMPOI(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.PC4ORTYP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.PC2CUXID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZM-CUST-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.SY1STNBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.SY2CLRID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.XDMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMSHP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMCRT(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMCBM(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMKG(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* ;*/
   /* SET TS0ZM002.PC3PONBR(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC2CUXID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZM-CUST-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.SY1STNBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.SY2CLRID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMSHP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMCRT(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMCBM(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMKG(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* ;/* TCS BEG*/
   /* SET TS0ZM002.XDMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC2INSEG(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS-SHP-LEG-NBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC-ITM-SEQ-NBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* ;/* TCS END*/
   /* SET TS0ZM002.XQACD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XPGCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XUMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XOWCD(TS0ZWIXM) MODIFIED,BRIGHT;*/

            TS0ZM001.XXXPRCNM = "TS0Z550"; /* process name*/
            TS0ZM002.XXXPRCNM = "TS0Z550"; /* process name*/
            TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
            converseLib.validationFailed(117); /* duplicate packing list*/
          end
        end
      end
      TS0ZW01.TS0ZWIXW = TS0ZW01.TS0ZWIXW + 1; /* increment index*/
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM - 1; /* decrement index*/
  end

   /* ------------------------------------------------------------*/
   /* 3) Check the map working storage against the packing*/
      /* lists that already exist in the data base.*/
   /* ------------------------------------------------------------*/
  TS0ZW01.TS0ZWIXM = 13; /* initialize index*/

  while (TS0ZW01.TS0ZWIXM > 0) /* until end of detail*/

    if (TS0ZW03.PC3PONBR[TS0ZWIXM] > 0 /* if data exists*/
     || TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] > 0)

      TS0Z551(); /* select the packing list*/
      TS0ZS81(); /* Open cursor on vcplhd04*/
      TS0ZS82(); /* Fetch cursor on vcplhd04*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if the packing list was found*/

   /* IF TS0ZW01.TS0ZWPLC EQ VCPLHD04.TS-NIKE-CNTNR-NBR1  /* if pl is*/
   /* OR TS0ZW01.TS0ZWPLC EQ VCPLHD04.TS-NIKE-CNTNR-NBR2 /*assigned to*/
   /* OR TS0ZW01.TS0ZWPLC EQ VCPLHD04.TS-NIKE-CNTNR-NBR3 /*container*/
   /* OR TS0ZW01.TS0ZWPLC EQ VCPLHD04.TS-NIKE-CNTNR-NBR4*/
   /* OR TS0ZW01.TS0ZWPLC EQ VCPLHD04.TS-NIKE-CNTNR-NBR5*/
   /* OR TS0ZW01.TS0ZWPLC EQ VCPLHD04.TS-NIKE-CNTNR-NBR6*/
   /* OR TS0ZW01.TS0ZWPLC EQ VCPLHD04.TS-NIKE-CNTNR-NBR7*/
   /* OR TS0ZW01.TS0ZWPLC EQ VCPLHD04.TS-NIKE-CNTNR-NBR8;*/

   /* SET TS0ZM001.PC3PONBR(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMPOI(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.PC4ORTYP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.PC2CUXID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZM-CUST-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.SY1STNBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.SY2CLRID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.XDMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMSHP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMCRT(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMCBM(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM001.TS0ZMKG(TS0ZWIXM) MODIFIED,BRIGHT;*/

   /* SET TS0ZM002.PC3PONBR(TS0ZWIXM) CURSOR,MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC2CUXID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZM-CUST-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.SY1STNBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.SY2CLRID(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMSHP(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMCRT(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMCBM(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS0ZMKG(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XDMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC2INSEG(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.TS-SHP-LEG-NBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.PC-ITM-SEQ-NBR(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XQACD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XPGCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XUMCD(TS0ZWIXM) MODIFIED,BRIGHT;*/
   /* SET TS0ZM002.XOWCD(TS0ZWIXM) MODIFIED,BRIGHT;*/

        if (TS0ZW01.TS0ZWWF30 == "N")
          TS0ZM001.XXXPRCNM = "TS0Z550"; /* process name*/
          TS0ZM002.XXXPRCNM = "TS0Z550"; /* process name*/
          TS0ZW01.TS0ZWPSW = "Y"; /* indicate problem*/
          TS0ZW01.TS0ZWWF30 = "Y";
          converseLib.validationFailed(117); /* duplicate packing list*/
        end
   /* END;*/
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          TS0ZW01.TS0ZW-DIFF-CONTNR = "Y";
        end
      end
      TS0ZS83(); /* Close the cursor on vcplhd04*/
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM - 1; /* decrement index*/
  end


end // end TS0Z550

// Select pl from DTRANS.VCPLHD04
Function TS0Z551()
   /* -----------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TS0ZM001.TSFSHPID; /* shipment number*/
   /* mlatha change begin*/
  VCPLHD04.PC-PO-NBR = TS0ZW03.PC3PONBR[TS0ZWIXM]; /* po number*/
  VCPLHD04.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VCPLHD04.PC-PRDCU-ID = TS0ZW03.PC2CUXID[TS0ZWIXM]; /* customer xre*/
  VCPLHD04.SY-STY-NBR = TS0ZW03.SY1STNBR[TS0ZWIXM]; /* style number*/
  VCPLHD04.SY-COLR-CD-ID = TS0ZW03.SY2CLRID[TS0ZWIXM]; /* color numb*/
   /* mlatha change end*/
  VCPLHD04.TS-NIKE-CNTNR-NBR1 = TS0ZW01.TS0ZWPLC;
  VCPLHD04.TS-NIKE-CNTNR-NBR2 = TS0ZW01.TS0ZWPLC;
  VCPLHD04.TS-NIKE-CNTNR-NBR3 = TS0ZW01.TS0ZWPLC;
  VCPLHD04.TS-NIKE-CNTNR-NBR4 = TS0ZW01.TS0ZWPLC;
  VCPLHD04.TS-NIKE-CNTNR-NBR5 = TS0ZW01.TS0ZWPLC;
  VCPLHD04.TS-NIKE-CNTNR-NBR6 = TS0ZW01.TS0ZWPLC;
  VCPLHD04.TS-NIKE-CNTNR-NBR7 = TS0ZW01.TS0ZWPLC;
  VCPLHD04.TS-NIKE-CNTNR-NBR8 = TS0ZW01.TS0ZWPLC;

   /* mlatha change begin*/
  VCPLHD04.PC-ITM-SEQ-NBR = TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM]; /* /seq nbr*/
  VPRDCU03.PC2CUXID = TS0ZW03.PC2CUXID[TS0ZWIXM]; /* Get iseg using*/
   /* mlatha change end*/
  VPRDCU03.XGPCD = TSWREC.XGPCD; /* product code*/

  TS0ZS65(); /* get iseg                                /*xref*/
  if (SQLCA.VAGen_SQLCODE == 0)
    VCPLHD04.PC-CU-IN-SEG-CD = VPRDCU03.PC2INSEG; /* iseg*/
  else
    VCPLHD04.PC-CU-IN-SEG-CD = "000";
  end
   /* mlatha change begin*/
  VCPLHD04.XDM-DIM-CD = TS0ZW03.XDMCD[TS0ZWIXM]; /* dimension code*/
  VCPLHD04.XQA-QUAL-CD = TS0ZW03.XQACD[TS0ZWIXM]; /* quality code*/
  VCPLHD04.XOW-OWN-GRP-CD = TS0ZW03.XOWCD[TS0ZWIXM]; /* owner group*/
  VCPLHD04.XPG-PKG-TYP-CD = TS0ZW03.XPGCD[TS0ZWIXM];
  VCPLHD04.XUM-UOM-CD = TS0ZW03.XUMCD[TS0ZWIXM]; /* unit of measure*/
  VCPLHD04.OP-CUST-ORD-ID = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
  VCPLHD04.OP-NIKE-ORD-ID = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
   /* mlatha change end*/
  if (TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0)
    VCPLHD04.OP-ORD-PART-CHAR = " ";
  else
   /* mlatha change begin*/
    VCPLHD04.OP-ORD-PART-CHAR = TS0ZW03.TS0ZW-ORD-PART-CHAR[TS0ZWIXM];
   /* mlatha change end*/
  end

   /* MOVE 'SO' TO TSGREC.TSNFNC;      /* move selection to pass record*/
   /* CALL VCPLHD04 TSGREC,SQLCA,VCPLHD04 (NOMAPS,NONCSP;/* Select table row*/

   /* IF SQLCA.SQLCODE EQ 0            /* if good return code*/
   /* OR SQLCA.SQLCODE EQ 100*/
   /* OR SQLCA.SQLCODE EQ -811;*/
     /* next sentence*/
   /* ELSE;*/
   /* IF SQLCA.SQLCODE EQ -911       /* Resource not available*/
   /* OR SQLCA.SQLCODE EQ -904;*/
   /* MOVE 11 TO EZEMNO;           /* Indicate system error*/
   /* MOVE 'POST' TO TA1REC.TA1FUNC;/* Termination function*/
   /* ELSE;*/
   /* MOVE 10 TO EZEMNO;           /* Indicate system error*/
   /* MOVE 'RETN' TO TA1REC.TA1FUNC;/* Termination function*/
   /* SET TS0ZM001 PAGE;           /* Clear screen before redisplay*/
   /* SET TS0ZM002 PAGE;           /* Clear screen before redisplay*/
   /* END;*/

   /* MOVE 'Y' TO TS0ZW01.TS0ZWNSF;  /* set neg SQL flag to yes*/

   /* MOVE 'DB2 ' TO TA1REC.TA1TYPE; /* Type of error*/
   /* MOVE 'TS0Z551' TO TA1REC.TA1PGMNM;/* Process name*/
   /* MOVE 'SELECT THE TABLE ROW' TO TA1REC.TA1LOC;*/
   /* MOVE 'TS0ZM001' TO TA1REC.TA1MAP;/* Map name*/
   /* MOVE 'DTRANS  ' TO TA1REC.TA1DBASE;/* Data base name*/
   /* MOVE 'VCPLHD04' TO TA1REC.TA1TBLVU;/* Table view name*/

   /* CALL TA0020 TA1REC,SQLCA (NOMAPS,NONCSP;/* Error diagnosis routine*/

   /* MOVE 'TS0Z551' TO TS0ZM001.XXXPRCNM;/* Process name*/
   /* MOVE 'TS0Z551' TO TS0ZM002.XXXPRCNM;/* Process name*/
   /* END;*/


end // end TS0Z551

// Check for po warning fl reset
Function TS0Z560()
   /* ------------------------------------------------------------*/

             /* CHECK FOR PO QUANTITY WARNING FLAG RESET*/

      /* If any of the map information has changed from the*/
      /* previous map information saved in ts0zW03, then*/
      /* reset the po quantity warning flag*/

   /* ------------------------------------------------------------*/

   /* **************************************************/
      /* Check to see if PO quantity warning flag*/
      /* needs to be reset*/
   /* **************************************************/

  TS0ZW01.TS0ZWIXM = 1; /* set index to 1*/
  while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
    if (TS0ZW03.XOWCD[TS0ZWIXM] == TS0ZW04.XOWCD[TS0ZWIXM]
     && TS0ZW03.XUMCD[TS0ZWIXM] == TS0ZW04.XUMCD[TS0ZWIXM]
     && TS0ZW03.XPGCD[TS0ZWIXM] == TS0ZW04.XPGCD[TS0ZWIXM]
     && TS0ZW03.XQACD[TS0ZWIXM] == TS0ZW04.XQACD[TS0ZWIXM]
     && TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM]
     == TS0ZW04.PC-ITM-SEQ-NBR[TS0ZWIXM]
     && TS0ZW03.TS-SHP-LEG-NBR[TS0ZWIXM]
     == TS0ZW04.TS-SHP-LEG-NBR[TS0ZWIXM]
     && TS0ZW03.XDMCD[TS0ZWIXM] == TS0ZW04.XDMCD[TS0ZWIXM]
     && TS0ZW03.TS0ZMKG[TS0ZWIXM] == TS0ZW04.TS0ZMKG[TS0ZWIXM]
     && TS0ZW03.TS0ZMCBM[TS0ZWIXM] == TS0ZW04.TS0ZMCBM[TS0ZWIXM]
     && TS0ZW03.TS0ZMCRT[TS0ZWIXM] == TS0ZW04.TS0ZMCRT[TS0ZWIXM]
     && TS0ZW03.TS0ZMSHP[TS0ZWIXM] == TS0ZW04.TS0ZMSHP[TS0ZWIXM]
     && TS0ZW03.PC3PONBR[TS0ZWIXM] == TS0ZW04.PC3PONBR[TS0ZWIXM]
     && TS0ZW03.TS0ZMPOI[TS0ZWIXM] == TS0ZW04.TS0ZMPOI[TS0ZWIXM]
     && TS0ZW03.PC4ORTYP[TS0ZWIXM] == TS0ZW04.PC4ORTYP[TS0ZWIXM]
     && TS0ZW03.PC2CUXID[TS0ZWIXM] == TS0ZW04.PC2CUXID[TS0ZWIXM]
     && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM]
     == TS0ZW04.TS0ZM-CUST-ORD-ID[TS0ZWIXM]
     && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM]
     == TS0ZW04.TS0ZM-NIKE-ORD-ID[TS0ZWIXM]
     && TS0ZW03.SY1STNBR[TS0ZWIXM] == TS0ZW04.SY1STNBR[TS0ZWIXM]
     && TS0ZW03.SY2CLRID[TS0ZWIXM] == TS0ZW04.SY2CLRID[TS0ZWIXM])

       /* next sentence*/

    else
      TS0ZW01.TS0ZWPWF = "N"; /* reset po warning flag*/
      TS0ZW01.TS0ZWWA1 = "              "; /* reset po warn arrays*/
      TS0ZW01.TS0ZWWA2 = "              ";
      TS0ZW01.TS0ZWWA3 = "              ";
      TS0ZW01.TS0ZWWA4 = "              ";
      TS0ZW01.TS0ZWWA6 = "              ";
      TS0ZW01.TS0ZWWA7 = "              ";
      TS0ZW01.TS0ZWIXM = 14; /* end loop*/
    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
  end


end // end TS0Z560

// Verify item exists in SO or PO
Function TS0Z570()
   /* ------------------------------------------------------------*/

                 /* Verify item exists in SO or PO*/

   /* ------------------------------------------------------------*/

  TS0ZW01.TS0ZWIXM = 13; /* initialize index*/
  TS0ZW01.TS0ZWWF5 = "N"; /* initialize switch*/
  while (TS0ZW01.TS0ZWIXM > 0) /* until end of detail*/
    if (TS0ZW03.XOWCD[TS0ZWIXM] == " " /* if detail line blank*/
     && TS0ZW03.XUMCD[TS0ZWIXM] == " " 
     && TS0ZW03.XPGCD[TS0ZWIXM] == " " 
     && TS0ZW03.XQACD[TS0ZWIXM] == " " 
     && TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM] == 0
     && TS0ZW03.XDMCD[TS0ZWIXM] == " " 
     && TS0ZW03.TS0ZMKG[TS0ZWIXM] == 0 
     && TS0ZW03.TS0ZMCBM[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZMCRT[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZMSHP[TS0ZWIXM] == 0
     && TS0ZW03.PC3PONBR[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZMPOI[TS0ZWIXM] == " "
     && TS0ZW03.PC4ORTYP[TS0ZWIXM] == " "
     && TS0ZW03.PC2CUXID[TS0ZWIXM] == " "
     && TS0ZW03.SY1STNBR[TS0ZWIXM] == " "
     && TS0ZW03.SY2CLRID[TS0ZWIXM] == " ")

       /* next sentence*/

    else

      if (TS0ZW03.PC4ORTYP[TS0ZWIXM] == "QQ"
       || TS0ZW03.PC4ORTYP[TS0ZWIXM] == "OS")

        TS0ZW01.TS0ZWWF5 = "Y";
         /* If b-grade - bypass item on PO*/
      else


        TS0Z-57050(); /* ===> Verify S.O. in D.B. warning*/

        if (TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] > 0
         && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] > 0
         && TS0ZW03.PC3PONBR[TS0ZWIXM] == 0
         && TS0ZW03.XQACD[TS0ZWIXM] == "02")

          TS0Z-57100(); /* Verify item in S.O. D.B.*/

        else

          TS0Z-57200(); /* Verify item in P.O. D.B.*/

        end

      end

    end

    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM - 1; /* decrement index*/

  end


end // end TS0Z570

// Select (SI) DPRODC.VPOITM01
Function TS0Z571()
   /* ------------------------------------------------------------*/

           /* SELECT THE SET OF PO ITEMS*/

   /* ------------------------------------------------------------*/

  set PC6REC empty;
  set PCYREC empty;

  PC6REC.XGPCD = TSWREC.XGPCD; /* move in all selection fields*/
  PC6REC.XWHCD = TSWREC.XWHCD;
  PC6REC.PC3PONBR = TS0ZW03.PC3PONBR[TS0ZWIXM];
  PC6REC.SY1STNBR = TS0ZW03.SY1STNBR[TS0ZWIXM];
  PC6REC.SY2CLRID = TS0ZW03.SY2CLRID[TS0ZWIXM];
  PC6REC.XDMCD = TS0ZW03.XDMCD[TS0ZWIXM];
   /* MOVE TS0ZW03.XQACD(TS0ZWIXM) TO PC6REC.XQACD;*/
  PC6REC.XQACD = "*"; /* wildcard quality code*/
  PC6REC.XOWCD = TS0ZW03.XOWCD[TS0ZWIXM];
   /* TCS BEG*/
   /* MOVE TS0ZW03.PC2INSEG(TS0ZWIXM) TO PC6REC.PC2INSEG;*/
  PC6REC.PC6ITMNB = TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM];
   /* TCS END*/
  PC6REC.XPGCD = TS0ZW03.XPGCD[TS0ZWIXM];
  PC6REC.XUMCD = TS0ZW03.XUMCD[TS0ZWIXM];
  PC6REC.PC2CUXID = TS0ZW03.PC2CUXID[TS0ZWIXM];

  if (TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] != 0
   && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] != 0)
    PC6REC.OP1CUOID = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
    PC6REC.OP1NORID = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
    PC6REC.OP1PARTN = TS0ZW03.TS0ZW-ORD-PART-CHAR[TS0ZWIXM];
  else
    PC6REC.OP1CUOID = 0;
    PC6REC.OP1NORID = 0;
    PC6REC.OP1PARTN = " ";
  end

  PC6REC.PC6ETSDT = -1;
   /* TCS BEG*/
   /* MOVE TS0ZW01.YMTCD TO PC6REC.YMTCD;*/
  PC6REC.YMTCD = "*";
   /* TCS END*/
  PC6REC.PC6PLAN = -1;
  PC6REC.XDSCD = "*";
  PC6REC.YSMXDV = "*";

  PCYREC.PCYFUNC = "SI";
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Z571"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z571"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z571"; /* Process name*/

  end


end // end TS0Z571

// Fetch  (NI) DPRODC.VPOITM01
Function TS0Z572()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "NI"; /* move in function code*/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0ZW01.TS0ZWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZW01.TS0ZWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Z572"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0ZM001.XXXPRCNM = "TS0Z572"; /* Process name*/

    else

      TS0ZW01.TS0ZWPOQ = TS0ZW01.TS0ZWPOQ + PC6REC.PC6TORDE; /* ACCUM QTY*/

    end
  end


end // end TS0Z572

// Close  (CI) DPRODC.VPOITM01
Function TS0Z573()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DPRODC.VPOITM01*/

   /* ------------------------------------------------------------*/

  PCYREC.PCYFUNC = "CI"; /* move in function code*/
  call "IO3310" (PCYREC, SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0Z573"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z573"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0Z573

// Check quantity against po
Function TS0Z580()
   /* ------------------------------------------------------------*/

    /* CHECK MAP SHP QTY AGAINST PO ON ORD OR SO SHIPPED QTY (POITM*/
    /* OR VITEM0R1), IN-TRANSIT OR IN-PROCESS (CPLHD02) SHIPMENTS*/
    /* AND PO RECEIPT QTY (FYPO).*/

   /* ------------------------------------------------------------*/

  TS0ZW01.TS0ZWIXM = 13; /* initialize index*/
  while (TS0ZW01.TS0ZWIXM > 0) /* until end of detail*/
    if (TS0ZW03.XOWCD[TS0ZWIXM] == " " /* if detail line blank*/
     && TS0ZW03.XUMCD[TS0ZWIXM] == " " 
     && TS0ZW03.XPGCD[TS0ZWIXM] == " " 
     && TS0ZW03.XQACD[TS0ZWIXM] == " " 
     && TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWIXM] == 0
     && TS0ZW03.XDMCD[TS0ZWIXM] == " " 
     && TS0ZW03.TS0ZMKG[TS0ZWIXM] == 0 
     && TS0ZW03.TS0ZMCBM[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZMCRT[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZMSHP[TS0ZWIXM] == 0
     && TS0ZW03.PC3PONBR[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0
     && TS0ZW03.TS0ZMPOI[TS0ZWIXM] == " "
     && TS0ZW03.PC4ORTYP[TS0ZWIXM] == " "
     && TS0ZW03.PC2CUXID[TS0ZWIXM] == " "
     && TS0ZW03.SY1STNBR[TS0ZWIXM] == " "
     && TS0ZW03.SY2CLRID[TS0ZWIXM] == " ")

       /* next sentence*/

    else

      /* **********************************************************/
       /* Set a switch to indicate whether this is a default*/
       /* domestic shipment and there was no quantity entered.*/
       /* This switch is set because of CSP's inability to handle*/
       /* complex logic and is used in the following IF statement.*/
      /* **********************************************************/
      TS0ZW01.TS0ZWDSW = "N"; /* Reset switch*/
      if (TSWREC.TSWDOMFL == "Y" /* If this is domestic shpmnt*/
       && TS0ZW03.TS0ZMSHP[TS0ZWIXM] == 0) /* and no quantity*/
        TS0ZW01.TS0ZWDSW = "Y"; /* Set switch*/
      end

      /* **********************************************************/
       /* If this entry was not found on the po, then bypass*/
       /* these quantity warning checks*/
      /* **********************************************************/
      if (TS0ZW03.XRECD[TS0ZWIXM] == "PS" /* If item not on po*/
       || TS0ZW01.TS0ZWDSW == "Y"         /* or domestic and no quantity*/
       || TS0ZW01.TS0ZWWF5 == "Y")        /* or b-grade shoes*/
         /* continue on*/
      else
        if (TS0ZM001.XGPCD == "02"
         && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] > 0
         && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] > 0
         && TS0ZW03.PC3PONBR[TS0ZWIXM] == 0)



            /* **********************************************************/
             /* Select set and accumulate so quantity for an item*/
            /* **********************************************************/

          TS0Z-57110(); /* Select the set of so items*/

          if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

            TS0ZW01.TS0ZWPOQ = 0; /* Initialze so accum quantity*/
            TS0ZW01.TS0ZWEFL = "N"; /* Initialze end flag*/
            while (TS0ZW01.TS0ZWEFL == "N") /* While rows are found*/
              TS0Z-57120(); /* Fetch and accum SO on ord qty*/
              if (TS0ZW01.TS0ZWEFL == "Y") /* If end indicated*/
                TS0Z-57130(); /* Close the selected set*/
              end
            end
          end
        else
            /* **********************************************************/
             /* Select set and accumulate po quantity for an item*/
            /* **********************************************************/

          TS0Z571(); /* Select the set of po items*/

          if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

            TS0ZW01.TS0ZWPOQ = 0; /* Initialze po accum quantity*/
            TS0ZW01.TS0ZWEFL = "N"; /* Initialze end flag*/
            while (TS0ZW01.TS0ZWEFL == "N") /* While rows are found*/
              TS0Z572(); /* Fetch and accum PO on order qty*/
              if (TS0ZW01.TS0ZWEFL == "Y") /* If end indicated*/
                TS0Z573(); /* Close the selected set*/
              end
            end
          end
        end

        /* **********************************************************/
         /* Select set and accumulate ship quantities for an item*/
        /* **********************************************************/

        TS0Z581(); /* Select the set of po shipmnt items*/

        if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

          TS0ZW01.TS0ZWPLQ = 0; /* Initialze po accum quantity*/
          TS0ZW01.TS0ZWEFL = "N"; /* Initialze end flag*/
          while (TS0ZW01.TS0ZWEFL == "N") /* While rows are found*/
            TS0Z582(); /* Fetch and accumulate on ship qty ttl*/
            if (TS0ZW01.TS0ZWEFL == "Y") /* If end indicated*/
              TS0Z583(); /* Close the selected set*/
            end
          end

        end


        /* **********************************************************/
         /* Select set and accumulate receipt quantities for an item*/
        /* **********************************************************/

        TS0Z584(); /* Select the set of receipts items*/

        if (SQLCA.VAGen_SQLCODE == 0) /* If select successful*/

          TS0ZW01.TS0ZWRCQ = 0; /* Initialze rcpt acc quantity*/
          TS0ZW01.TS0ZWEFL = "N"; /* Initialze end flag*/
          while (TS0ZW01.TS0ZWEFL == "N") /* While rows are found*/
            TS0Z585(); /* Fetch and accumulate rcpt qty ttl*/
            if (TS0ZW01.TS0ZWEFL == "Y") /* If end indicated*/
              TS0Z586(); /* Close the selected set*/
            end
          end

        end


        /* **********************************************************/
         /* Check accum qtys against user entered shp qty*/
        /* **********************************************************/

        /* **********************************************************/
         /* INITIALIZE*/
        /* **********************************************************/

        /* INITIALIZE TOTAL FIELDS*/
        TS0ZW01.TS0ZWTTQ = 0; /* total shipping/recvd qty*/
        TS0ZW01.TS0ZWTTD = 0; /* total shipping/recvd diff*/
        TS0ZW01.TS0ZWTTP = 0; /* total shipping/rcvd pct*/



        /* **********************************************************/
         /* CALCULATE*/
        /* **********************************************************/

        /* CALCULATE TOTAL SHIPPING/RCVD QTY*/
        /* add accum pl qty (cplhd02) + accum rcvd qty(fypo)*/
        TS0ZW01.TS0ZWTTQ = TS0ZW01.TS0ZWPLQ + TS0ZW01.TS0ZWRCQ;
        /* add map detail ship qty*/
        TS0ZW01.TS0ZWTTQ = TS0ZW01.TS0ZWTTQ + TS0ZW03.TS0ZMSHP[TS0ZWIXM];



        /* CALCULATE TOTAL SHIPPING/RCVD DIFF*/
        /* subtract total shipping/rcvd qty from accum po on ord or so*/
        /* shipped qty*/
        TS0ZW01.TS0ZWTTD = TS0ZW01.TS0ZWPOQ - TS0ZW01.TS0ZWTTQ;

        if (TS0ZW01.TS0ZWTTD < 0) /* If total shipping/rcvd diff negative*/
          TS0ZW01.TS0ZWTTD = TS0ZW01.TS0ZWTTD * -1; /* Make it positive*/
        end



        /* CALCULATE TOTAL SHIPPING/RCVD PCT %*/
        /* divide total shipping/rcvd diff by accum po on ord or so*/
        /* shipped qty and multiply by 100*/
        if (TS0ZW01.TS0ZWPOQ != 0) /* If po or so quantity not zero*/
          TS0ZW01.TS0ZWTTP = TS0ZW01.TS0ZWTTD / TS0ZW01.TS0ZWPOQ * 100;
        end



        /* add accum pl qty to accum rcvd qty*/
        TS0ZW01.TS0ZWPLQ = TS0ZW01.TS0ZWPLQ + TS0ZW01.TS0ZWRCQ;
        /* subtract accum pl qty from accum po on ord or so shipped qty*/
        TS0ZW01.TS0ZWPOQ = TS0ZW01.TS0ZWPOQ - TS0ZW01.TS0ZWPLQ;



        /* **********************************************************/
         /* COMPARE CALCULATED TOTALS TO TOLERANCE TABLE (TRANS.*/
         /* VTSTOL01) VALUES RETRIEVED DURING APPLICATION*/
         /* INITIALIZATION*/
        /* **********************************************************/

        if (TS0ZW01.TS0ZWTTD <= TS0ZW01.TS0ZWSEQ /* If below soft error*/
         && TS0ZW01.TS0ZWTTP <= TS0ZW01.TS0ZWSEP) /* tolerances*/

          TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* reset status*/
          TS0ZW03.XRECD[TS0ZWIXM] = "99"; /* reset excep code*/

        else
          /* ** any under shipment ***/

          if (TS0ZW03.TS0ZMSHP[TS0ZWIXM] < TS0ZW01.TS0ZWPOQ)

            TS0ZW01.TS0ZWPWF = "Y"; /* Set warning flag*/
            TS0ZW01.TS0ZWPSW = "Y"; /* Set problem switch*/
            TS0ZW01.TS0ZWWF2 = "Y"; /* Set array warning*/
            TS0ZW01.TS0ZWSH2[TS0ZWIXM] = "Y"; /* ind highlight row*/
            TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* reset status*/
            TS0ZW03.XRECD[TS0ZWIXM] = "99"; /* reset excep code*/

          else
            /* ** If overshipment ***/

            if (TS0ZW03.TS0ZMSHP[TS0ZWIXM] > TS0ZW01.TS0ZWPOQ)

              /* ** overship over tolerance ***/

              if (TS0ZW01.TS0ZWTTD > TS0ZW01.TS0ZWHEQ
               && TS0ZW01.TS0ZWTTP > TS0ZW01.TS0ZWHEP)
                TS0ZW01.TS0ZWPWF = "Y"; /* Set warning flag*/
                TS0ZW01.TS0ZWPSW = "Y"; /* Set problem switch*/
                TS0ZW01.TS0ZWWF4 = "Y"; /* Set array warning*/
                TS0ZW01.TS0ZWSH4[TS0ZWIXM] = "Y";
                                   /* ind highlight row*/
                TS0ZW03.XRECD[TS0ZWIXM] = "OH";
                                   /* overship soft error*/

                if (TSWREC.YSSCD == "TN") /* if tentative shipement*/
                  TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* Reset status*/
                else

                  if ("OH" in XRETBL.XRECD)
                    if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If hard error*/
                      TS0ZW03.TSISTAT[TS0ZWIXM] = "ER"; /* Set status*/
                    else
                      TS0ZW03.TSISTAT[TS0ZWIXM] = "99";
                    end
                  else
                    TS0ZW03.TSISTAT[TS0ZWIXM] = "ER"; /* Set status*/
                  end
                end

              else
                /* ** overship under tolerance ***/

                TS0ZW01.TS0ZWPWF = "Y"; /* Set warning flag*/
                TS0ZW01.TS0ZWPSW = "Y"; /* Set problem switch*/
                TS0ZW01.TS0ZWWF3 = "Y"; /* Set array warning*/
                TS0ZW01.TS0ZWSH3[TS0ZWIXM] = "Y";
                                   /* ind highlight row*/
                TS0ZW03.XRECD[TS0ZWIXM] = "OS";
                                   /* overship hard error*/
                if (TSWREC.YSSCD == "TN") /* if tentative shipement*/
                  TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* Reset status*/
                else
                  if ("OS" in XRETBL.XRECD)
                    if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* If hard error*/
                      TS0ZW03.TSISTAT[TS0ZWIXM] = "ER"; /* Set status*/
                    else
                      TS0ZW03.TSISTAT[TS0ZWIXM] = "99"; /* Reset status*/
                    end
                  else
                    TS0ZW03.TSISTAT[TS0ZWIXM] = "ER"; /* Set status*/
                  end
                end
              end
            end
          end
        end
      end

    end
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM - 1; /* decrement index*/
  end


end // end TS0Z580

// Select (S3) DTRANS.VCPLHDJ4
Function TS0Z581()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROW*/

    /* 1) Select the unique packing list row.*/

   /* ------------------------------------------------------------*/

   /* TCS BEG*/
   /* SET TSTREC EMPTY;*/
  set VCPLHDJ4 empty;

   /* MOVE TSWREC.XWHCD TO TSTREC.XWHCD;/* warehouse*/
   /* MOVE TSWREC.XGPCD TO TSTREC.XGPCD;/* product code*/
   /* MOVE TS0ZW03.PC3PONBR(TS0ZWIXM) TO TSTREC.PC3PONBR;/* po number*/
   /* MOVE TS0ZW03.PC2CUXID(TS0ZWIXM) TO TSTREC.PC2CUXID;/* customer xref*/
   /* MOVE TS0ZW03.SY1STNBR(TS0ZWIXM) TO TSTREC.SY1STNBR;/* style number*/
   /* MOVE TS0ZW03.SY2CLRID(TS0ZWIXM) TO TSTREC.SY2CLRID;/* color number*/
   /* MOVE TS0ZW03.XDMCD(TS0ZWIXM) TO TSTREC.XDMCD;/* dimension code*/
   /* ;/* MOVE TS0ZW03.XQACD(TS0ZWIXM) TO TSTREC.XQACD;*/
   /* MOVE '*' TO TSTREC.XQACD;        /* wildcard quality code*/
   /* MOVE TS0ZW03.XOWCD(TS0ZWIXM) TO TSTREC.XOWCD;/* owner group*/
   /* MOVE TS0ZW03.PC2INSEG(TS0ZWIXM) TO TSTREC.PC2INSEG;/* spec difference*/
   /* MOVE TS0ZW03.XPGCD(TS0ZWIXM) TO TSTREC.XPGCD;/* spec difference*/
   /* MOVE TS0ZW03.XUMCD(TS0ZWIXM) TO TSTREC.XUMCD;/* unit of measure*/
  VCPLHDJ4.XWH-WHSE-CD = TSWREC.XWHCD; /* warehouse*/
  VCPLHDJ4.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VCPLHDJ4.PC-PO-NBR = TS0ZW03.PC3PONBR[TS0ZWIXM];
  VCPLHDJ4.PC-PRDCU-ID = TS0ZW03.PC2CUXID[TS0ZWIXM]; /* customer xre*/
  VCPLHDJ4.SY-STY-NBR = TS0ZW03.SY1STNBR[TS0ZWIXM]; /* style number*/
  VCPLHDJ4.SY-COLR-CD-ID = TS0ZW03.SY2CLRID[TS0ZWIXM]; /* color numb*/
  VCPLHDJ4.XDM-DIM-CD = TS0ZW03.XDMCD[TS0ZWIXM]; /* dimension code*/
  VCPLHDJ4.XQA-QUAL-CD = "*"; /* wildcard quality code*/
  VCPLHDJ4.PC-CU-IN-SEG-CD = "*"; /* wildcard iseg*/
   /* mlatha change begin*/
  VCPLHDJ4.XOWCD = TS0ZW03.XOWCD[TS0ZWIXM]; /* owner group*/
   /* mlatha change end*/
  VCPLHDJ4.XPG-PKG-TYP-CD = TS0ZW03.XPGCD[TS0ZWIXM];
  VCPLHDJ4.XUM-UOM-CD = TS0ZW03.XUMCD[TS0ZWIXM]; /* unit of measure*/
   /* TCS END*/

  if (TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] != 0
   && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] != 0)
   /* TCS BEG*/
   /* MOVE TS0ZW03.TS0ZM-CUST-ORD-ID(TS0ZWIXM) TO TSTREC.OP1CUOID;*/
   /* MOVE TS0ZW03.TS0ZM-NIKE-ORD-ID(TS0ZWIXM) TO TSTREC.OP1NORID;*/
   /* MOVE TS0ZW03.TS0ZW-ORD-PART-CHAR(TS0ZWIXM) TO TSTREC.OP1PARTN;*/
    VCPLHDJ4.OP-CUST-ORD-ID = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
    VCPLHDJ4.OP-NIKE-ORD-ID = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
    VCPLHDJ4.OP-ORD-PART-CHAR = TS0ZW03.TS0ZW-ORD-PART-CHAR[TS0ZWIXM];
  else
   /* MOVE 0 TO TSTREC.OP1CUOID;*/
   /* MOVE 0 TO TSTREC.OP1NORID;*/
   /* MOVE ' ' TO TSTREC.OP1PARTN;*/
    VCPLHDJ4.OP-CUST-ORD-ID = 0;
    VCPLHDJ4.OP-NIKE-ORD-ID = 0;
    VCPLHDJ4.OP-ORD-PART-CHAR = " ";
   /* TCS END*/
  end


   /* TCS BEG*/
   /* CALL IO4230 'S3',SQLCA,TSTREC (NOMAPS,NONCSP;/* Select table row*/
  call "VCPLHDJ4" ("S3", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Z581"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
   /* TCS BEG*/
   /* MOVE 'VCPLHD02' TO TA1REC.TA1TBLVU;/* Table view name*/
   /* MOVE TSTREC.TSTKEY TO TA1REC.TA1TBLKE;/* Table key*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
   /* TCS END*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z581"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z581"; /* Process name*/

  end

end // end TS0Z581

// Fetch (N3) DTRANS.VCPLHDJ4
Function TS0Z582()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

   /* TCS BEG*/
   /* CALL IO4230 'N3',SQLCA,TSTREC (NOMAPS,NONCSP; /* Fetch the next row*/
  call "VCPLHDJ4" ("N3", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0ZW01.TS0ZWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZW01.TS0ZWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Z582"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
   /* TCS BEG*/
   /* MOVE 'VCPLHD02' TO TA1REC.TA1TBLVU;  /* Table view name*/
      TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
   /* TCS END*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0ZM001.XXXPRCNM = "TS0Z582"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z582"; /* Process name*/

    else

   /* TCS BEG*/
   /* IF TSTREC.TSISTAT EQ 'IT'     /* Only count in-transit quantities*/
   /* OR TSTREC.TSISTAT EQ 'ER'   /* Or currently in-error*/
   /* OR TSTREC.TSISTAT EQ 'CC';  /* Or currently custom-clear*/
   /* OR TSTREC.TSISTAT EQ 'CR'   /* Or currently custom-clear-error*/
      if (VCPLHDJ4.TS-CPL-STAT-CD == "IT" /* Only count in-transit quantities*/
       || VCPLHDJ4.TS-CPL-STAT-CD == "CC") /* Or currently custom-clear*/

   /* SET TS5REC EMPTY;           /* clear work record*/
   /* MOVE TSTREC.TSACARCD TO TS5REC.TSACARCD; /* move in keys*/
   /* MOVE TSTREC.TS5CRAFT TO TS5REC.TS5CRAFT;*/
   /* ;*/
   /* TS0ZS03;                    /* Select the mode code*/
   /* ;*/
   /* IF TS5REC.YMTCD EQ TS0ZW01.YMTCD;  /* If modes are equal*/
   /* TS0ZW01.TS0ZWPLQ = TS0ZW01.TS0ZWPLQ + TSTREC.TSISHPQT;*/
   /* END;*/
        TS0ZW01.TS0ZWPLQ = TS0ZW01.TS0ZWPLQ + VCPLHDJ4.TS-PL-QTOT-SHP;
   /* TCS END*/

      end

    end
  end


end // end TS0Z582

// Close (C3) DTRANS.VCPLHDJ4
Function TS0Z583()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHDJ4*/

   /* ------------------------------------------------------------*/

   /* TCS BEG*/
   /* CALL IO4230 'C3',SQLCA,TSTREC (NOMAPS,NONCSP; /* Close table set*/
  call "VCPLHDJ4" ("C3", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0Z583"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
   /* TCS BEG*/
   /* MOVE 'VCPLHD02' TO TA1REC.TA1TBLVU;    /* Table view name*/
    TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
   /* TCS END*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z583"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z583"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0Z583

// Select (S8) DPRODC.VFYPO001
Function TS0Z584()
   /* ------------------------------------------------------------*/

                 /* SELECT SET OF RECEIPT ROWS*/

    /* 1) Select the set of receipt rows.*/

   /* ------------------------------------------------------------*/

  set PCMREC empty;

  PCMREC.XWHCD = TSWREC.XWHCD; /* warehouse*/
  PCMREC.XGPCD = TSWREC.XGPCD; /* product code*/
   /* TCS BEG*/
   /* MOVE TS0ZW01.YMTCD TO PCMREC.YMTCD;/* mode code*/
  PCMREC.YMTCD = "*"; /* mode code*/
   /* TCS END*/
  PCMREC.PC3PONBR = TS0ZW03.PC3PONBR[TS0ZWIXM]; /* po number*/
  PCMREC.PC2CUXID = TS0ZW03.PC2CUXID[TS0ZWIXM]; /* cust xref*/
  PCMREC.SY1STNBR = TS0ZW03.SY1STNBR[TS0ZWIXM]; /* style number*/
  PCMREC.SY2CLRID = TS0ZW03.SY2CLRID[TS0ZWIXM]; /* color number*/
  PCMREC.XDMCD = TS0ZW03.XDMCD[TS0ZWIXM]; /* dimension code*/
   /* MOVE TS0ZW03.XQACD(TS0ZWIXM) TO PCMREC.XQACD;*/
  PCMREC.XQACD = "*"; /* wildcard quality code*/
  PCMREC.XOWCD = TS0ZW03.XOWCD[TS0ZWIXM]; /* owner group*/
   /* TCS BEG*/
   /* MOVE TS0ZW03.PC2INSEG(TS0ZWIXM) TO PCMREC.PC2INSEG;/* spec difference*/
  PCMREC.PC2INSEG = "*"; /* wildcard iseg*/
   /* TCS END*/
  PCMREC.XPGCD = TS0ZW03.XPGCD[TS0ZWIXM]; /* spec difference*/
  PCMREC.XUMCD = TS0ZW03.XUMCD[TS0ZWIXM]; /* unit of measure*/

  if (TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM] != 0
   && TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] != 0)
    PCMREC.OP1CUOID = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWIXM];
    PCMREC.OP1NORID = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWIXM];
    PCMREC.OP1PARTN = TS0ZW03.TS0ZW-ORD-PART-CHAR[TS0ZWIXM];
  else
    PCMREC.OP1CUOID = 0;
    PCMREC.OP1NORID = 0;
    PCMREC.OP1PARTN = " ";
  end


  call "IO3680" ("S8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Z584"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/
    TA1REC.TA1TBLKE = PCMREC.PCMKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z584"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z584"; /* Process name*/

  end

end // end TS0Z584

// Fetch (N8) DPRODC.VFYPO001
Function TS0Z585()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DPRODC.VFYPO001*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("N8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0ZW01.TS0ZWEFL = "Y"; /* end loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/
      TS0ZW01.TS0ZWEFL = "Y"; /* end loop*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0Z585"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
      TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0ZM001.XXXPRCNM = "TS0Z585"; /* Process name*/
      TS0ZM002.XXXPRCNM = "TS0Z585"; /* Process name*/

    else

      TS0ZW01.TS0ZWWK2 = 1; /* initialize index*/
      while (TS0ZW01.TS0ZWWK2 <= 40) /* until end of array*/
        TS0ZW01.TS0ZWRCQ = TS0ZW01.TS0ZWRCQ + PCMREC.PCMRCPTQ[TS0ZWWK2];
        TS0ZW01.TS0ZWWK2 = TS0ZW01.TS0ZWWK2 + 1;
      end

    end
  end


end // end TS0Z585

// Close (C8) DPRODC.VFYPO001
Function TS0Z586()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO3680" ("C8", SQLCA, PCMREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0Z586"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFYPO001"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z586"; /* Process name*/
    TS0ZM002.XXXPRCNM = "TS0Z586"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0Z586

// Process warnings
Function TS0Z590()
   /* ------------------------------------------------------------*/
           /* Process Array Warning Flags*/
   /* ------------------------------------------------------------*/

   /* *********************************************/
   /* Process invalid  S.O. warning.*/
   /* flag first.*/
   /* *********************************************/

  if (TS0ZW01.TS0ZWWF7 == "Y")
    TS0ZW01.TS0ZWWK2 = 13;

    while (TS0ZW01.TS0ZWWK2 >= 1)

      if (TS0ZW01.TS0ZWSH7[TS0ZWWK2] == "Y")
        set TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWWK2] cursor, bold;
        set TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWWK2] bold;
        set TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWWK2] cursor, bold;
        set TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWWK2] bold;
      end

      TS0ZM001.XXXPRCNM = "TS0Z590"; /* process name*/
      TS0ZM002.XXXPRCNM = "TS0Z590"; /* process name*/

      converseLib.validationFailed(335); /* ===> invalid S.O. warning*/

      TS0ZW01.TS0ZWWK2 = TS0ZW01.TS0ZWWK2 - 1;
    end

    TS0ZW01.TS0ZWWA7 = "              "; /* Reset warning array*/
    return;

  end

   /* *********************************************/
   /* Process Multiple S.O. warning.*/
   /* flag second.*/
   /* *********************************************/

  if (TS0ZW01.TS0ZWWF6 == "Y")
    TS0ZW01.TS0ZWWK2 = 13;

    while (TS0ZW01.TS0ZWWK2 >= 1)

      if (TS0ZW01.TS0ZWSH6[TS0ZWWK2] == "Y")
        set TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWWK2] cursor, bold;
        set TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWWK2] bold;
        set TS0ZM002.TS0ZM-CUST-ORD-ID[TS0ZWWK2] cursor, bold;
        set TS0ZM002.TS0ZM-NIKE-ORD-ID[TS0ZWWK2] bold;
      end

      TS0ZM001.XXXPRCNM = "TS0Z590"; /* process name*/
      TS0ZM002.XXXPRCNM = "TS0Z590"; /* process name*/

      converseLib.validationFailed(320); /* ===> Multiple S.O. exists*/

      TS0ZW01.TS0ZWWK2 = TS0ZW01.TS0ZWWK2 - 1;
    end

    TS0ZW01.TS0ZWWA6 = "              "; /* Reset warning array*/
    return;

  end


   /* *********************************************/
   /* Process item not found on po or so warning*/
   /* flag third.*/
   /* *********************************************/
  if (TS0ZW01.TS0ZWWF1 == "Y")
    TS0ZW01.TS0ZWWK2 = 13;
    while (TS0ZW01.TS0ZWWK2 >= 1)
      if (TS0ZW01.TS0ZWSH1[TS0ZWWK2] == "Y")
        set TS0ZM001.PC2CUXID[TS0ZWWK2] cursor, bold;
        set TS0ZM001.SY1STNBR[TS0ZWWK2] bold;
        set TS0ZM001.SY2CLRID[TS0ZWWK2] bold;
        set TS0ZM002.PC2CUXID[TS0ZWWK2] cursor, bold;
        set TS0ZM002.SY1STNBR[TS0ZWWK2] bold;
        set TS0ZM002.SY2CLRID[TS0ZWWK2] bold;
      end

      if (TS0ZW03.PC3PONBR[TS0ZWWK2] == 0 /* *==> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0ZW03.XQACD[TS0ZWWK2] == "02" 
       && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWWK2] > 0)
        converseLib.validationFailed(319);
      else
        converseLib.validationFailed(115);
      end

      TS0ZW01.TS0ZWWK2 = TS0ZW01.TS0ZWWK2 - 1;
    end
    TS0ZM001.XXXPRCNM = "TS0Z590"; /* process name*/
    TS0ZM002.XXXPRCNM = "TS0Z590"; /* process name*/
    TS0ZW01.TS0ZWWA1 = "              "; /* Reset warning array*/
    return;
  end


   /* *********************************************/
   /* Process item quantity undershipmemt warning*/
   /* flag forth.*/
   /* *********************************************/
  if (TS0ZW01.TS0ZWWF2 == "Y")
    TS0ZW01.TS0ZWWK2 = 13;
    while (TS0ZW01.TS0ZWWK2 >= 1)
      if (TS0ZW01.TS0ZWSH2[TS0ZWWK2] == "Y")
        set TS0ZM001.TS0ZMSHP[TS0ZWWK2] cursor, bold;
        set TS0ZM002.TS0ZMSHP[TS0ZWWK2] cursor, bold;
      end

      if (TS0ZW03.PC3PONBR[TS0ZWWK2] == 0 /* *==> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0ZW03.XQACD[TS0ZWWK2] == "02" 
       && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWWK2] > 0)
        converseLib.validationFailed(321);
      else
        converseLib.validationFailed(251);
      end

      TS0ZW01.TS0ZWWK2 = TS0ZW01.TS0ZWWK2 - 1;
    end
    TS0ZM001.XXXPRCNM = "TS0Z590"; /* process name*/
    TS0ZM002.XXXPRCNM = "TS0Z590"; /* process name*/
    TS0ZW01.TS0ZWWA2 = "              "; /* Reset warning array*/
    return;
  end


   /* *********************************************/
   /* Process item quantity overshipmemt warning*/
   /* flag fifth.*/
   /* *********************************************/
  if (TS0ZW01.TS0ZWWF3 == "Y")
    TS0ZW01.TS0ZWWK2 = 13;
    while (TS0ZW01.TS0ZWWK2 >= 1)
      if (TS0ZW01.TS0ZWSH3[TS0ZWWK2] == "Y")
        set TS0ZM001.TS0ZMSHP[TS0ZWWK2] cursor, bold;
        set TS0ZM002.TS0ZMSHP[TS0ZWWK2] cursor, bold;
      end

      if (TS0ZW03.PC3PONBR[TS0ZWWK2] == 0 /* *==> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0ZW03.XQACD[TS0ZWWK2] == "02" 
       && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWWK2] > 0)
        converseLib.validationFailed(322);
      else
        converseLib.validationFailed(260);
      end

      TS0ZW01.TS0ZWWK2 = TS0ZW01.TS0ZWWK2 - 1;
    end
    TS0ZM001.XXXPRCNM = "TS0Z590"; /* process name*/
    TS0ZM002.XXXPRCNM = "TS0Z590"; /* process name*/
    TS0ZW01.TS0ZWWA3 = "              "; /* Reset warning array*/
    return;
  end


   /* *********************************************/
   /* Process item quantity overshipmemt over*/
   /* tolerance warning flag last*/
   /* *********************************************/
  if (TS0ZW01.TS0ZWWF4 == "Y")
    TS0ZW01.TS0ZWWK2 = 13;
    while (TS0ZW01.TS0ZWWK2 >= 1)
      if (TS0ZW01.TS0ZWSH4[TS0ZWWK2] == "Y")
        set TS0ZM001.TS0ZMSHP[TS0ZWWK2] cursor, bold;
        set TS0ZM002.TS0ZMSHP[TS0ZWWK2] cursor, bold;
      end

      if (TS0ZW03.PC3PONBR[TS0ZWWK2] == 0 /* *==> B-Grade shipment criteria*/
       && TSWREC.XGPCD == "02"            
       && TS0ZW03.XQACD[TS0ZWWK2] == "02" 
       && TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWWK2] > 0)
        converseLib.validationFailed(323);
      else
        converseLib.validationFailed(261);
      end

      TS0ZW01.TS0ZWWK2 = TS0ZW01.TS0ZWWK2 - 1;
    end
    TS0ZM001.XXXPRCNM = "TS0Z590"; /* process name*/
    TS0ZM002.XXXPRCNM = "TS0Z590"; /* process name*/
    TS0ZW01.TS0ZWWA4 = "              "; /* Reset warning array*/
    return;
  end


   /* **                                                     ***/
   /* ********************** End of TS0Z590 ********************/
end // end TS0Z590

// Process valid input request
Function TS0Z600()
   /* ------------------------------------------------------------*/

            /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If no errors were found.*/
      /* a) If PF8 of ENTER is pressed.*/
         /* - if screen is full - move screen data to working*/
           /* storage.*/
         /* - if screen is partially full - move screen data*/
           /* to working storage and perform updates*/
         /* - if no detail entered - perform updates and*/
           /* redisplay the map.*/
      /* a) If PF7 is pressed.*/
         /* - move screen data to working storage.*/

   /* ------------------------------------------------------------*/

  if (TS0ZW01.TS0ZWPSW == "N") /* if no errors have occurred*/

    if (converseVar.eventKey is pf10) /* if pf10 left screen was pressed*/
      TS0ZW01.TS0ZWMAP = "1";
      return;
    end

    if (converseVar.eventKey is pf11) /* if pf11 right screen was pressed*/
      TS0ZW01.TS0ZWMAP = "2";
      return;
    end

    if (TS0ZW01.TS0ZWNSF == "Y") /* if negative SQL flag is yes*/
      TS0ZW01.TS0ZWNSF = "N"; /* reset neg sql flag*/
      TS0Z610(); /* perform the updates again*/
      if (TS0ZW01.TS0ZWNSF == "N" /* if no problems with updates*/
       && TS0ZW01.TS0ZWPSW == "N") /* and no other problems*/
        TS0ZM001.TSHCNTNR = " "; /* clear header fields*/
        TS0ZM001.YCNCD = " ";
        TS0ZM001.TSHTCBM = 0;
        TS0ZM001.TSHTKG = 0;
        TS0ZM001.TSHSEAL = " ";
      end
    else
      if (converseVar.eventKey is enter /* enter was pressed*/
       || converseVar.eventKey is pf8)  /* or pf8 was pressed*/
        if (TS0ZW03.PC3PONBR[13] > 0 /* if last detail line contains data*/
         || TS0ZW03.TS0ZM-CUST-ORD-ID[13] > 0)
          TS0Z620(); /* move screen data to working storage*/
        else

          /* **************************************************/
              /* Check to see if all detail lines are empty*/
          /* **************************************************/

          TS0ZW01.TS0ZWDEF = "N"; /* initialize data entered flag*/
          TS0ZW01.TS0ZWIXM = 1; /* set index to 1*/
          while (TS0ZW01.TS0ZWIXM <= 13) /* until end of detail lines*/
            if (TS0ZM002.XOWCD[TS0ZWIXM] == " " /* if detail line blank*/
             && TS0ZM002.XUMCD[TS0ZWIXM] == " " 
             && TS0ZM002.XPGCD[TS0ZWIXM] == " " 
             && TS0ZM002.XQACD[TS0ZWIXM] == " " 
             && TS0ZM002.PC-ITM-SEQ-NBR[TS0ZWIXM] == 0
             && TS0ZM001.XDMCD[TS0ZWIXM] == " " 
             && TS0ZM001.TS0ZMKG[TS0ZWIXM] == 0 
             && TS0ZM001.TS0ZMCBM[TS0ZWIXM] == 0
             && TS0ZM001.TS0ZMCRT[TS0ZWIXM] == 0
             && TS0ZM001.TS0ZMSHP[TS0ZWIXM] == 0
             && TS0ZM001.PC3PONBR[TS0ZWIXM] == 0
             && TS0ZM001.TS0ZM-CUST-ORD-ID[TS0ZWIXM] == 0
             && TS0ZM001.TS0ZM-NIKE-ORD-ID[TS0ZWIXM] == 0
             && TS0ZM001.TS0ZMPOI[TS0ZWIXM] == " "
             && TS0ZM001.PC4ORTYP[TS0ZWIXM] == " "
             && TS0ZM001.PC2CUXID[TS0ZWIXM] == " "
             && TS0ZM001.SY1STNBR[TS0ZWIXM] == " "
             && TS0ZM001.SY2CLRID[TS0ZWIXM] == " ")

               /* next sentence*/

            else
              TS0ZW01.TS0ZWDEF = "Y"; /* set data entered flag*/
              TS0ZW01.TS0ZWIXM = 14; /* end loop*/
            end
            TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment index*/
          end
          if (TS0ZW01.TS0ZWDEF == "Y") /* if detail is partly full*/
            TS0Z620(); /* move screen detail to ws*/
            TS0Z610(); /* perform updates*/
            if (TS0ZW01.TS0ZWNSF == "N" /* if no problems with updates*/
             && TS0ZW01.TS0ZWPSW == "N") /* and no other problems*/
              TS0ZM001.TSHCNTNR = " "; /* clear header fields*/
              TS0ZM001.YCNCD = " ";
              TS0ZM001.TSHTCBM = 0;
              TS0ZM001.TSHTKG = 0;
              TS0ZM001.TSHSEAL = " ";
            end
          else
            TS0Z610(); /* perform updates*/
            if (TS0ZW01.TS0ZWNSF == "N" /* if no problems with updates*/
             && TS0ZW01.TS0ZWPSW == "N") /* and no other problems*/
              if (TSWREC.TSWCPLFL == "Y") /* if a cpl has been added*/
                if (TS0ZM001.TSHCNTNR == " " /* if header fields empty*/
                 && TS0ZM001.YCNCD == " "    
                 && TS0ZM001.TSHTCBM == 0    
                 && TS0ZM001.TSHTKG == 0     
                 && TS0ZM001.TSHSEAL == " ")
                  exit stack; /* Exit to redisplay map*/
                else
                  TS0ZM001.TSHCNTNR = " "; /* clear header fields*/
                  TS0ZM001.YCNCD = " ";
                  TS0ZM001.TSHTCBM = 0;
                  TS0ZM001.TSHTKG = 0;
                  TS0ZM001.TSHSEAL = " ";
                end
              else
                TS0ZW01.TS0ZWFFL = "N"; /* reset first time thru flag*/
                TS0ZW01.TS0ZWPSW = "Y"; /* indicate error*/
                TS0ZM001.XXXPRCNM = "TS0Z600"; /* process name*/
                if (TS0ZM001.TSHCNTNR != " " /* if container not entered*/
                 || TSWREC.YSSCD == "TN")    /* or shipment tentative*/
                  set TS0ZM001.PC3PONBR[1] cursor; /* set cursor on po*/
                else
                  set TS0ZM001.TSHCNTNR cursor; /* set cursor on po*/
                end
                converseLib.validationFailed(135); /* must enter at least one cpl*/
              end
            end
          end
        end
      else
        if (converseVar.eventKey is pf7) /* if pf7 was pressed*/
          TS0Z620(); /* move screen data to ws*/
        end
      end
    end
  end


end // end TS0Z600

// Perform updates
Function TS0Z610()
   /* ------------------------------------------------------------*/

                  /* PERFORM UPDATES*/

       /* 1) If the container has not already been added*/
          /* a. add the container*/
          /* b. if the add is successful*/
             /* - commit*/
             /* - select the maximum Nike packing list number*/
               /* for this shipment id.*/
             /* - if the select in successful, add 1 to the*/
               /* packing list number and add the packing lists.*/
       /* 2) If the container has already been added, then add*/
          /* the packing lists.*/

   /* ------------------------------------------------------------*/

  if (TS0ZW02.PC3PONBR[1] > 0 /* if some packing lists exist*/
   || TS0ZW02.TS0ZM-CUST-ORD-ID[1] > 0)

    TS0Z611(); /* select the container*/
    TSWREC.TSHCNTNR = TS0ZM001.TSHCNTNR; /* save the cntnr name*/
    TSWREC.PC3PONBR = TS0ZW02.PC3PONBR[1]; /* and po #*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if container was found*/
      TS0ZW01.TS0ZWPLC = TSHREC.TSHNKCN; /* assign cntnr #*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if container was not found*/
        TS0Z612(); /* add the container*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if container add was sucessful*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* commit the container add*/
          TSWREC.TSWCNTFL = "Y"; /* set passed container addflag 'y'*/
          TS0ZW01.TS0ZWCTR = TS0ZW01.TS0ZWCTR + 1; /* incr cntnr cnter*/
        end
      end
    end
    if (TS0ZW01.TS0ZWNSF == "N") /* if no neg sql return codes*/
      TS0Z613(); /* select the max Nike packing list #*/
      if (SQLCA.VAGen_SQLCODE == -305) /* if null value returned*/
        TS0ZW01.TS0ZWPCK = 1;
                                   /* move 0 to packing list counter*/
        TS0Z614(); /* add packing lists*/
      else
        if (SQLCA.VAGen_SQLCODE == 0) /* if select of pl number successful*/
          TS0ZW01.TS0ZWPCK = TSGREC.TSGMAXNB + 1; /* incrmnt max pl number*/
          TS0Z614(); /* add packing lists*/
        end
      end
      if (TS0ZW01.TS0ZWNSF == "N") /* if no neg sql return codes*/
        TS0ZW01.TS0ZWPLC = TS0ZW01.TS0ZWCTR; /* p/l cntnr assign*/
        TS0ZW01.TS0ZWPFL = "N"; /* set protect fl to no*/
      end
    end
  else
    TS0ZW01.TS0ZWPGE = 1; /* reset the map page*/
  end


end // end TS0Z610

// Select unique DTRANS.VCNTNR01
Function TS0Z611()
   /* ------------------------------------------------------------*/

                 /* SELECT CONTAINER ID*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* clear record*/

  TSHREC.TSFSHPID = TS0ZM001.TSFSHPID; /* move key*/
  TSHREC.TSHCNTNR = TS0ZM001.TSHCNTNR;

  call "IO2590" ("S ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Z611"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS. "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate Problem*/
    TS0ZM001.XXXPRCNM = "TS0Z611"; /* Process name*/
  end


end // end TS0Z611

// Add container row
Function TS0Z612()
   /* ------------------------------------------------------------*/

                    /* ADD CONTAINER ROW*/

    /* 1) Move in appropriate fields to TSHREC*/
    /* 2) Add the container row*/

   /* ------------------------------------------------------------*/

  set TSHREC empty; /* initialize tshrec*/

  TSHREC.TSHNKCN = TS0ZW01.TS0ZWPLC; /* Nike container number*/
  TSHREC.TSFSHPID = TS0ZM001.TSFSHPID; /* Nike shipment number*/
  TSHREC.TSHCNTNR = TS0ZM001.TSHCNTNR; /* container number*/
  TSHREC.YCNCD = TS0ZM001.YCNCD; /* container type*/

  if (TSWREC.YSSCD == "RC")
    TSHREC.TSHSTAT = "RC"; /* container status*/
  else
    TSHREC.TSHSTAT = "IT"; /* container status*/
  end

  TSHREC.TSHTCBM = TS0ZM001.TSHTCBM; /* total cubic meters*/
  TSHREC.TSHTKG = TS0ZM001.TSHTKG; /* total kilograms*/
  TSHREC.TSHSEAL = TS0ZM001.TSHSEAL; /* seal*/
  TSHREC.TSHRCTDT = 0; /* container receipt date*/
  TSHREC.SL1RCRNO = 0; /* RCV report number*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSHREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move in set up date*/
  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/
  TSHREC.ZZZCHGCT = 0; /* initialize change count*/


  call "IO2590" ("A ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* Set negative SQL flag 'y'*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Z612"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z612"; /* Process name*/
  end


end // end TS0Z612

// Select max Nike pl number
Function TS0Z613()
   /* ------------------------------------------------------------*/

             /* SELECT MAX NIKE PACKING LIST NUMBER*/

   /* 1) Select the maximum Nike packing list number from CPLHD04*/

   /* ------------------------------------------------------------*/

   /* TCS BEG*/
   /* MOVE TSWREC.TSFSHPID TO TSIREC.TSFSHPID; /* move in key*/
  VCPLHD04.TS-NIKE-SHP-ID = TSWREC.TSFSHPID; /* move in key*/
   /* TCS END*/

  TSGREC.TSNFNC = "SM"; /* move selection to pass record*/
   /* TCS BEG*/
   /* CALL IO2570 TSGREC,SQLCA,TSIREC (NOMAPS,NONCSP; /* Select table row*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == -305) /* of null value returned*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set negative SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0Z613"; /* Process name*/
    TA1REC.TA1LOC = "SELECT MAX TABLE PL ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
   /* TCS BEG*/
   /* MOVE 'VCPLHD01' TO TA1REC.TA1TBLVU;    /* Table view name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
   /* TCS END*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0Z613"; /* Process name*/
  end


end // end TS0Z613

// Add packing lists
Function TS0Z614()
   /* ------------------------------------------------------------*/

                   /* ADD PACKING LISTS*/

      /* 1) Initialize fields*/
      /* 2) If the packing list has already been added - skip*/
      /* 3) If the packing list has not been added*/
         /* a. If the add po style flag has been set then add*/
            /* the style   ***** to production database ******/
         /* b. If the po not updated in add po style then update*/
            /* the po      ***** to production database ******/
         /* c. If packing lists have not reached the maximum -*/
            /* perform the packing list updates process*/
         /* d. If all goes well then commit the updates*/

   /* ------------------------------------------------------------*/

  TS0ZW01.TS0ZWTIX = 1; /* initialize table index*/
  TS0ZW01.TS0ZWMPX = 1; /* initialize map position index*/

  while (TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX) /* while less than max*/

    if (TS0ZW02.PC3PONBR[TS0ZWTIX] > 0 /* and po exists*/
     || TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] > 0)

      if (TS0ZW02.TS0ZWPAF[TS0ZWTIX] == "Y") /* if pl added is yes*/
         /* next sentence*/
      else

        if (TS0ZW02.TS0ZWAPS[TS0ZWTIX] == "Y" /* if add po sty fl is y*/
         && TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX) /* and less than max*/
          TS0ZS15(); /* add po style*/
        end

        if (TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX /* less than max*/
         && TS0ZW01.TS0ZWNSF == "N")             /* and no neg sql flag*/
           /* ******* and not updated in add po style ********/
          TS0ZS20(); /* update po*/
        end

        if (TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX /* less than max*/
         && TS0ZW01.TS0ZWNSF == "N")             /* and no neg sql flag*/
          TS0ZS25(); /* packing list updates*/
        end

        if (TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX /* less than max*/
         && TS0ZW01.TS0ZWNSF == "N")             /* and no neg sql flag*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* commit all updates*/
          TSWREC.TSWCPLFL = "Y"; /* move y to packing list exists*/
          TS0ZW02.TS0ZWPAF[TS0ZWTIX] = "Y"; /* pl added flag*/
        else
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* reset all updates*/
        end

      end
    end
    TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX + 1; /* increment table index*/
  end
  TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX - 1; /* reset table index*/

  if (TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX /* if less than max lines*/
   && TS0ZW01.TS0ZWNSF == "N")             /* and all updates successful*/
    TS0ZW01.TS0ZWNSF = "N"; /* reset neg SQL flag*/
    TS0ZW01.TS0ZWCAF = "N"; /* reset container added flag*/
    set TS0ZW02 empty; /* clear table record*/
    TS0ZW01.TS0ZWTIX = 1; /* reset table index*/
    TS0ZW01.TS0ZWMPX = 1; /* reset map position index*/
    TS0ZW01.TS0ZWPGE = 0; /* reset map page#*/
    TS0ZW01.TS0ZWMAP = "1"; /* reset map #*/
  end


end // end TS0Z614

// Move to working storage
Function TS0Z620()
   /* ------------------------------------------------------------*/

                  /* MOVE TO WORKING STORAGE*/

       /* This process will move the screen data that was*/
       /* cascaded into working storage into the data base*/
       /* update working storage record in compressed form.*/
       /* It will also take care of any detail line deletions*/
       /* which the user may do when scrolling backwards to*/
       /* maintain the compressed status of the data base update*/
       /* working storage record.*/

   /* ------------------------------------------------------------*/

  TS0ZW01.TS0ZWFFL = "N"; /* move 'n' to first time thru flag*/
  TS0ZW01.TS0ZWMPX = TS0ZW01.TS0ZWTIX; /* set map position index*/
  TS0ZW01.TS0ZWMIX = 1; /* initialize map index*/

  while (TS0ZW01.TS0ZWMIX <= 13 /* until end of detail lines*/
   && TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX) /* and not over max index*/

    if (TS0ZW03.PC3PONBR[TS0ZWMIX] > 0 /* if P.O. exists*/
     || TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWMIX] > 0) /* or S.O. exists*/

      TS0ZW02.PC3PONBR[TS0ZWTIX] = TS0ZW03.PC3PONBR[TS0ZWMIX];
      TS0ZW02.TS0ZMPOI[TS0ZWTIX] = TS0ZW03.TS0ZMPOI[TS0ZWMIX];
      TS0ZW02.PC4ORTYP[TS0ZWTIX] = TS0ZW03.PC4ORTYP[TS0ZWMIX];
      TS0ZW02.PC2CUXID[TS0ZWTIX] = TS0ZW03.PC2CUXID[TS0ZWMIX];
      TS0ZW02.SY1STNBR[TS0ZWTIX] = TS0ZW03.SY1STNBR[TS0ZWMIX];
      TS0ZW02.SY2CLRID[TS0ZWTIX] = TS0ZW03.SY2CLRID[TS0ZWMIX];
      TS0ZW02.TS0ZMSHP[TS0ZWTIX] = TS0ZW03.TS0ZMSHP[TS0ZWMIX];
      TS0ZW02.TS0ZMCRT[TS0ZWTIX] = TS0ZW03.TS0ZMCRT[TS0ZWMIX];
      TS0ZW02.TS0ZMCBM[TS0ZWTIX] = TS0ZW03.TS0ZMCBM[TS0ZWMIX];
      TS0ZW02.TS0ZMKG[TS0ZWTIX] = TS0ZW03.TS0ZMKG[TS0ZWMIX];
      TS0ZW02.XDMCD[TS0ZWTIX] = TS0ZW03.XDMCD[TS0ZWMIX];
   /* TCS BEG*/
   /* MOVE TS0ZW03.PC2INSEG(TS0ZWMIX) TO TS0ZW02.PC2INSEG(TS0ZWTIX);*/
      TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWTIX] = TS0ZW03.PC-ITM-SEQ-NBR[TS0ZWMIX];
      TS0ZW02.TS-SHP-LEG-NBR[TS0ZWTIX] = TS0ZW03.TS-SHP-LEG-NBR[TS0ZWMIX];
   /* TCS END*/
      TS0ZW02.XQACD[TS0ZWTIX] = TS0ZW03.XQACD[TS0ZWMIX];
      TS0ZW02.XPGCD[TS0ZWTIX] = TS0ZW03.XPGCD[TS0ZWMIX];
      TS0ZW02.XUMCD[TS0ZWTIX] = TS0ZW03.XUMCD[TS0ZWMIX];
      TS0ZW02.XOWCD[TS0ZWTIX] = TS0ZW03.XOWCD[TS0ZWMIX];
      TS0ZW02.TSISTAT[TS0ZWTIX] = TS0ZW03.TSISTAT[TS0ZWMIX];
      TS0ZW02.XRECD[TS0ZWTIX] = TS0ZW03.XRECD[TS0ZWMIX];
      TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] = TS0ZW03.TS0ZM-CUST-ORD-ID[TS0ZWMIX];
      TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX] = TS0ZW03.TS0ZM-NIKE-ORD-ID[TS0ZWMIX];
      TS0ZW02.TS0ZWPAF[TS0ZWTIX] = "N";
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX + 1; /* increment index*/
    end
    TS0ZW01.TS0ZWMIX = TS0ZW01.TS0ZWMIX + 1; /* increment index*/
  end

  TS0ZW01.TS0ZWCOM = TS0ZW01.TS0ZWMPX + 13; /* set one page forward*/
  if (TS0ZW01.TS0ZWTIX < TS0ZW01.TS0ZWCOM  /* if table ind LT compress ind*/
   && TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX /* and not over max index*/
   && TS0ZW01.TS0ZWCOM <= TS0ZW01.TS0ZWMAX)

    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWTIX; /* save table index*/

    /* *************************************************************/
      /* Compress working storage if blank lines in screen working*/
      /* storage.*/
    /* *************************************************************/

    TS0ZW01.TS0ZWEFL = "N"; /* ===> exit loop*/
    while (TS0ZW01.TS0ZWTIX <= TS0ZW01.TS0ZWMAX /* while table ind LE max*/
     && TS0ZW01.TS0ZWEFL == "N") /* ===> exit loop*/

      if (TS0ZW02.PC3PONBR[TS0ZWCOM] > 0 /* P.O. exists*/
       || TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWCOM] > 0) /* or S.O. exists*/

        TS0ZW02.PC3PONBR[TS0ZWTIX] = TS0ZW02.PC3PONBR[TS0ZWCOM];
        TS0ZW02.TS0ZMPOI[TS0ZWTIX] = TS0ZW02.TS0ZMPOI[TS0ZWCOM];
        TS0ZW02.PC4ORTYP[TS0ZWTIX] = TS0ZW02.PC4ORTYP[TS0ZWCOM];
        TS0ZW02.PC2CUXID[TS0ZWTIX] = TS0ZW02.PC2CUXID[TS0ZWCOM];
        TS0ZW02.SY1STNBR[TS0ZWTIX] = TS0ZW02.SY1STNBR[TS0ZWCOM];
        TS0ZW02.SY2CLRID[TS0ZWTIX] = TS0ZW02.SY2CLRID[TS0ZWCOM];
        TS0ZW02.TS0ZMSHP[TS0ZWTIX] = TS0ZW02.TS0ZMSHP[TS0ZWCOM];
        TS0ZW02.TS0ZMCRT[TS0ZWTIX] = TS0ZW02.TS0ZMCRT[TS0ZWCOM];
        TS0ZW02.TS0ZMCBM[TS0ZWTIX] = TS0ZW02.TS0ZMCBM[TS0ZWCOM];
        TS0ZW02.TS0ZMKG[TS0ZWTIX] = TS0ZW02.TS0ZMKG[TS0ZWCOM];
        TS0ZW02.XDMCD[TS0ZWTIX] = TS0ZW02.XDMCD[TS0ZWCOM];
   /* TCS BEG*/
   /* MOVE TS0ZW02.PC2INSEG(TS0ZWCOM) TO TS0ZW02.PC2INSEG(TS0ZWTIX);*/
        TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWTIX] = TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWCOM];
        TS0ZW02.TS-SHP-LEG-NBR[TS0ZWTIX] = TS0ZW02.TS-SHP-LEG-NBR[TS0ZWCOM];
   /* TCS END*/
        TS0ZW02.XQACD[TS0ZWTIX] = TS0ZW02.XQACD[TS0ZWCOM];
        TS0ZW02.XPGCD[TS0ZWTIX] = TS0ZW02.XPGCD[TS0ZWCOM];
        TS0ZW02.XUMCD[TS0ZWTIX] = TS0ZW02.XUMCD[TS0ZWCOM];
        TS0ZW02.XOWCD[TS0ZWTIX] = TS0ZW02.XOWCD[TS0ZWCOM];
        TS0ZW02.TSISTAT[TS0ZWTIX] = TS0ZW02.TSISTAT[TS0ZWCOM];
        TS0ZW02.XRECD[TS0ZWTIX] = TS0ZW02.XRECD[TS0ZWCOM];
        TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] = TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWCOM];
        TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX] = TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWCOM];
      else
        TS0ZW01.TS0ZWEFL = "Y"; /* ===> exit loop*/
      end

      TS0ZW01.TS0ZWCOM = TS0ZW01.TS0ZWCOM + 1; /* increment compress index*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX + 1; /* increment table index*/
    end

    /* *************************************************************/
      /* Initialize lines at end of working storage table that have*/
      /* already been moved up.*/
    /* *************************************************************/

    TS0ZW01.TS0ZWEFL = "N"; /* ===> exit loop*/
    while (TS0ZW01.TS0ZWTIX < TS0ZW01.TS0ZWCOM /* while tbl ind LT compr*/
     && TS0ZW01.TS0ZWEFL == "N") /* ===> exit loop*/

      if (TS0ZW02.PC3PONBR[TS0ZWTIX] > 0 /* and P.O. exists*/
       || TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] > 0) /* or S.O. exists*/

        TS0ZW02.PC3PONBR[TS0ZWTIX] = 0;
        TS0ZW02.TS0ZMPOI[TS0ZWTIX] = " ";
        TS0ZW02.PC4ORTYP[TS0ZWTIX] = " ";
        TS0ZW02.PC2CUXID[TS0ZWTIX] = " ";
        TS0ZW02.SY1STNBR[TS0ZWTIX] = " ";
        TS0ZW02.SY2CLRID[TS0ZWTIX] = " ";
        TS0ZW02.TS0ZMSHP[TS0ZWTIX] = 0;
        TS0ZW02.TS0ZMCRT[TS0ZWTIX] = 0;
        TS0ZW02.TS0ZMCBM[TS0ZWTIX] = 0;
        TS0ZW02.TS0ZMKG[TS0ZWTIX] = 0;
        TS0ZW02.XDMCD[TS0ZWTIX] = " ";
   /* TCS BEG*/
   /* MOVE ' ' TO TS0ZW02.PC2INSEG(TS0ZWTIX);*/
        TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWTIX] = 0;
        TS0ZW02.TS-SHP-LEG-NBR[TS0ZWTIX] = 0;
   /* TCS END*/
        TS0ZW02.XQACD[TS0ZWTIX] = " ";
        TS0ZW02.XPGCD[TS0ZWTIX] = " ";
        TS0ZW02.XUMCD[TS0ZWTIX] = " ";
        TS0ZW02.XOWCD[TS0ZWTIX] = " ";
        TS0ZW02.TSISTAT[TS0ZWTIX] = " ";
        TS0ZW02.XRECD[TS0ZWTIX] = " ";
        TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] = 0;
        TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX] = 0;
      else
        TS0ZW01.TS0ZWEFL = "Y"; /* ===> exit loop*/
      end

      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWTIX + 1; /* increment table index*/
      TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment save index*/
    end

    TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWIXM; /* restore table index*/

  end


end // end TS0Z620

// Select row DTRANS.VTSTOL01
Function TS0ZS02()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the tstol table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO5020" ("S ", SQLCA, TSXREC) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS02"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTOL01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0ZM001.XXXPRCNM = "TS0ZS02"; /* Process name*/

  end


end // end TS0ZS02

// Select row in DFCTY.VFCTY001
Function TS0ZS05()
   /* ------------------------------------------------------------*/

         /* SELECT THE FACTORY ROW FROM DFCTY.DFCTY001*/

   /* ------------------------------------------------------------*/


  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS05"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
    TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS05"; /* Process name*/
    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0ZS05

// Select from DPRODC.VPOTYP01
Function TS0ZS06()
   /* ------------------------------------------------------------*/

         /* SELECT THE PO TYPE ROW FROM DPRODC.VPOTYP01*/

   /* ------------------------------------------------------------*/

  call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS06"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE PO TYPE TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS06"; /* Process name*/
    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0ZS06

// Select set DPRODC.VPOVFY01
Function TS0ZS07()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VPOVFY01*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set PCFREC empty;
  PCFREC.PCFSECD = TS0ZW01.TS0ZWPYR;
  PCFREC.PCFBUYMO = -1;
  PCFREC.XXXSTAT = "*";

  call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS07"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS07"; /* Process name*/
    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0ZS07

// Fetch row  DPRODC.VPOVFY01
Function TS0ZS08()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOVFY01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok or*/
   || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS08"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS08"; /* Process name*/

  end


end // end TS0ZS08

// Close set  DPRODC.VPOVFY01
Function TS0ZS09()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VPOVFY01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0ZS09"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS09"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0ZW01.TS0ZWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0ZS09

// Select row in DPRODC.VPOHDR01
Function TS0ZS10()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/

      if (TS0ZW03.PC3PONBR[TS0ZWIXM] > 0 /* If po number entered*/
       && SQLCA.VAGen_SQLCODE == -811)   /* Multiple rows returned*/
         /* continue on*/
      else
        return; /* Return to previous process*/
      end

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0ZS10"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0ZM001.XXXPRCNM = "TS0ZS10"; /* Process name*/
  TS0ZW01.TS0ZWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0ZS10

// Select from DPRODC.VPOITM03
Function TS0ZS11()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the VPOITM03*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "VPOITM03" (PCYREC, SQLCA, VPOITM03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    else
       /* continue on*/
    end

  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0ZS11"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. ITEM ROW    ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM03"; /* Table view name*/
  TA1REC.TA1TBLKE = VPOITM03.VPOITM03-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0ZM001.XXXPRCNM = "TS0ZS11"; /* Process name*/
  TS0ZM002.XXXPRCNM = "TS0ZS11"; /* Process name*/
  TS0ZW01.TS0ZWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0ZS11

// Get consolidation flags
Function TS0ZS12()
   /* ------------------------------------------------------------*/
   /* This module gets the consolidation flags for the origin and*/
   /* discharge location codes.*/
   /* ------------------------------------------------------------*/

  set TSFREC empty;
  TSFREC.TSFSHPID = TSWREC.TSFSHPID;
  TS0ZS70();

  if (SQLCA.VAGen_SQLCODE == 0)
    set VTSLOC02 empty;
    VTSLOC02.TS-LOC-CD = TSFREC.TSEORIG;
    TS0ZS75();
    if (SQLCA.VAGen_SQLCODE == 0)
      TS0ZW01.TS-ORIG-LOC-CNSLD-FL = VTSLOC02.TS-LOC-CNSLD-FL;
      TS0ZW01.TS-ORIG-LOC-CD = VTSLOC02.TS-LOC-CD;
    else
      TS0ZW01.TS-ORIG-LOC-CNSLD-FL = "N";
      TS0ZW01.TS-ORIG-LOC-CD = " ";
    end
    set VTSLOC02 empty;
    VTSLOC02.TS-LOC-CD = TSFREC.TSFDSCHG;
    TS0ZS75();
    if (SQLCA.VAGen_SQLCODE == 0)
      TS0ZW01.TS-DSCHG-LOC-CNSLD-FL = VTSLOC02.TS-LOC-CNSLD-FL;
      TS0ZW01.TS-DSCHG-LOC-CD = VTSLOC02.TS-LOC-CD;
    else
      TS0ZW01.TS-DSCHG-LOC-CNSLD-FL = "N";
      TS0ZW01.TS-DSCHG-LOC-CD = " ";
    end
  end


end // end TS0ZS12

// Add po style
Function TS0ZS15()
   /* ------------------------------------------------------------*/
   /* ---*****************************************************----*/
   /* ---***********  added later when production ************----*/
   /* ---***********  data base exists            ************----*/
   /* ---*****************************************************----*/
   /* ------------------------------------------------------------*/
end // end TS0ZS15

// Update po style
Function TS0ZS20()
   /* ------------------------------------------------------------*/
   /* ---*****************************************************----*/
   /* ---***********  added later when production ************----*/
   /* ---***********  data base exists            ************----*/
   /* ---*****************************************************----*/
   /* ------------------------------------------------------------*/
end // end TS0ZS20

// Packing list updates
Function TS0ZS25()
   /* ------------------------------------------------------------*/

                   /* PACKING LIST UPDATES*/

      /* 1) Move in all key fields to tsirec*/
      /* 2) Select the packing list row to see if it exists*/
         /* - if contention problems - exit the loop*/
         /* - if row was not found then perform add pl row*/
         /* - if row was found then perform update pl row*/

   /* ------------------------------------------------------------*/

   /* TCS BEG*/
   /* MOVE TS0ZM001.TSFSHPID TO TSIREC.TSFSHPID; /* shipment number*/
   /* MOVE TS0ZW02.PC3PONBR(TS0ZWTIX) TO TSIREC.PC3PONBR; /* po number*/
   /* MOVE TSWREC.XGPCD TO TSIREC.XGPCD;       /* product code*/
   /* MOVE TS0ZW02.PC2CUXID(TS0ZWTIX) TO TSIREC.PC2CUXID; /* cust xref*/
   /* MOVE TS0ZW02.SY1STNBR(TS0ZWTIX) TO TSIREC.SY1STNBR; /* style number*/
   /* MOVE TS0ZW02.SY2CLRID(TS0ZWTIX) TO TSIREC.SY2CLRID; /* color number*/
   /* MOVE TS0ZW02.XDMCD(TS0ZWTIX) TO TSIREC.XDMCD; /* dimension code*/
   /* MOVE TS0ZW02.XQACD(TS0ZWTIX) TO TSIREC.XQACD; /* quality code*/
   /* MOVE TS0ZW02.XOWCD(TS0ZWTIX) TO TSIREC.XOWCD; /* owner group*/
   /* MOVE TS0ZW02.PC2INSEG(TS0ZWTIX) TO TSIREC.PC2INSEG; /* spec difference*/
   /* MOVE TS0ZW02.XPGCD(TS0ZWTIX) TO TSIREC.XPGCD; /* spec difference*/
   /* MOVE TS0ZW02.XUMCD(TS0ZWTIX) TO TSIREC.XUMCD; /* unit of measure*/
   /* MOVE TS0ZW02.TS0ZM-CUST-ORD-ID(TS0ZWTIX) TO TSIREC.OP1CUOID;*/
   /* MOVE TS0ZW02.TS0ZM-NIKE-ORD-ID(TS0ZWTIX) TO TSIREC.OP1NORID;*/
  VCPLHD04.TS-NIKE-SHP-ID = TS0ZM001.TSFSHPID; /* shipment number*/
  VCPLHD04.PC-PO-NBR = TS0ZW02.PC3PONBR[TS0ZWTIX]; /* po number*/
  VCPLHD04.PC-ITM-SEQ-NBR = TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWTIX]; /* po item sequence number*/
  VCPLHD04.TS-SHP-LEG-NBR = TS0ZW02.TS-SHP-LEG-NBR[TS0ZWTIX]; /* leg number*/
  VCPLHD04.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VPRDCU03.XGPCD = TSWREC.XGPCD; /* product code*/
  VCPLHD04.PC-PRDCU-ID = TS0ZW02.PC2CUXID[TS0ZWTIX]; /* customer xre*/
  VPRDCU03.PC2CUXID = TS0ZW02.PC2CUXID[TS0ZWTIX]; /* customer xref*/
  TS0ZS63(); /* get iseg*/
  VCPLHD04.PC-CU-IN-SEG-CD = VPRDCU03.PC2INSEG; /* iseg*/
  VCPLHD04.SY-STY-NBR = TS0ZW02.SY1STNBR[TS0ZWTIX]; /* style number*/
  VCPLHD04.SY-COLR-CD-ID = TS0ZW02.SY2CLRID[TS0ZWTIX]; /* color numb*/
  VCPLHD04.XDM-DIM-CD = TS0ZW02.XDMCD[TS0ZWTIX]; /* dimension cod*/
  VCPLHD04.XQA-QUAL-CD = TS0ZW02.XQACD[TS0ZWTIX];
  VCPLHD04.XOW-OWN-GRP-CD = TS0ZW02.XOWCD[TS0ZWTIX]; /* owner gro*/
  VCPLHD04.XPG-PKG-TYP-CD = TS0ZW02.XPGCD[TS0ZWTIX];
  VCPLHD04.XUM-UOM-CD = TS0ZW02.XUMCD[TS0ZWTIX]; /* unit of measu*/
   /* TCS END*/
  if (TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] == 0)
   /* TCS BEG*/
   /* MOVE ' ' TO TSIREC.OP1PARTN;*/
    VCPLHD04.OP-ORD-PART-CHAR = " ";
  else
   /* MOVE TS0ZW02.TS0ZW-ORD-PART-CHAR(TS0ZWTIX) TO TSIREC.OP1PARTN;*/
    VCPLHD04.OP-ORD-PART-CHAR = TS0ZW02.TS0ZW-ORD-PART-CHAR[TS0ZWTIX];
   /* TCS END*/
  end

   /* **********************************************/
     /* select the table rows from dtrans.vcplhd01*/
   /* **********************************************/

  TS0ZS30(); /* select the table rows*/
  TS0ZS35(); /* fetch the first table row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/
    TS0ZS40(); /* add packing list row*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* if row was found*/
   /* ******Changes made on 04/18/00 for the following reason*********/
   /* 1. If same PO/style/color/container,then add new pack list   **/
   /* to accomodate more than one invoice no for the same product  **/
   /* 2. If same PO/sty/color but different container,update the   **/
   /* existing packing list depending on the container buckets     **/
   /* ****************************************************************/
      if (TS0ZW01.TS0ZW-DIFF-CONTNR == "N")
        TS0ZS40(); /* add packing list row*/
      else

        TS0ZS45(); /* Check 8 cntnr span error*/
        if (TS0ZW01.TS0ZWSPF == "N") /* if no span errors encountered*/
          TS0ZS50(); /* select unique table row*/
          if (SQLCA.VAGen_SQLCODE == 100) /* if row was not found*/
            TS0ZS40(); /* add packing list row*/
          else
            if (SQLCA.VAGen_SQLCODE == 0 /* if row was found*/
             || SQLCA.VAGen_SQLCODE == -811)
              TS0ZS55(); /* update packing list row*/
            end
          end
        end
      end
    end
  end

  TS0ZS60(); /* close the selected set*/


end // end TS0ZS25

// Select pl rows VCPLHD04
Function TS0ZS30()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "S6"; /* move selection to pass record*/
   /* TCS BEG*/
   /* CALL IO2570 TSGREC,SQLCA,TSIREC (NOMAPS,NONCSP; /* Select table row*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS30"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    /* TCS BEG*/
   /* MOVE 'VCPLHD01' TO TA1REC.TA1TBLVU;    /* Table view name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
    /* TCS END*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS30"; /* Process name*/
  end


end // end TS0ZS30

// Fetch table rows VCPLHD04
Function TS0ZS35()
   /* ------------------------------------------------------------*/

                 /* FETCH PACKING LIST ROW*/

    /* 1) Fetch the packing list row.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N6"; /* move selection to pass record*/
   /* TCS BEG*/
   /* CALL IO2570 TSGREC,SQLCA,TSIREC (NOMAPS,NONCSP; /* Select table row*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      TS0ZW01.TS0ZWSWC = "Y"; /* set oen of set switch*/
    else
      if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
       || SQLCA.VAGen_SQLCODE == -904)
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMAX + 1; /* get out of loop*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0ZS35"; /* Process name*/
      TA1REC.TA1LOC = "FETCH THE TABLE ROW";
      TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
   /* TCS BEG*/
   /* MOVE 'VCPLHD01' TO TA1REC.TA1TBLVU;  /* Table view name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
   /* TCS END*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0ZM001.XXXPRCNM = "TS0ZS35"; /* Process name*/
    end
  end


end // end TS0ZS35

// Add packing list row VCPLHD04
Function TS0ZS40()
   /* ------------------------------------------------------------*/

                   /* ADD PACKING LIST ROW*/

    /* 1) Move in all fields to VCPLHD04.*/
    /* 2) Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

   /* TCS BEG*/
   /* SET TSIREC EMPTY;                /* initialize record*/
  set VCPLHD04 empty; /* initialize record*/

   /* MOVE TS0ZM001.TSFSHPID TO TSIREC.TSFSHPID;/* shipment number*/
   /* MOVE TS0ZW01.TS0ZWPCK TO TSIREC.TSIPLNBR;/* Nike pl number*/
   /* MOVE TS0ZW02.PC3PONBR(TS0ZWTIX) TO TSIREC.PC3PONBR;/* po number*/
   /* MOVE TSWREC.XGPCD TO TSIREC.XGPCD;/* product code*/
   /* MOVE TS0ZW02.PC2CUXID(TS0ZWTIX) TO TSIREC.PC2CUXID;/* cust xref*/
   /* MOVE TS0ZW02.SY1STNBR(TS0ZWTIX) TO TSIREC.SY1STNBR;/* style number*/
   /* MOVE TS0ZW02.SY2CLRID(TS0ZWTIX) TO TSIREC.SY2CLRID;/* color*/
   /* MOVE TS0ZW02.XDMCD(TS0ZWTIX) TO TSIREC.XDMCD;/* dimension code*/
   /* MOVE TS0ZW02.XQACD(TS0ZWTIX) TO TSIREC.XQACD;/* quality code*/
   /* MOVE TS0ZW02.XOWCD(TS0ZWTIX) TO TSIREC.XOWCD;/* owner group*/
   /* MOVE TS0ZW02.PC2INSEG(TS0ZWTIX) TO TSIREC.PC2INSEG;/* spec difference*/
   /* MOVE TS0ZW02.XPGCD(TS0ZWTIX) TO TSIREC.XPGCD;/* spec difference*/
   /* MOVE TS0ZW02.XUMCD(TS0ZWTIX) TO TSIREC.XUMCD;/* unit of measure*/
   /* MOVE TS0ZW02.TS0ZM-CUST-ORD-ID(TS0ZWTIX) TO TSIREC.OP1CUOID;*/
   /* MOVE TS0ZW02.TS0ZM-NIKE-ORD-ID(TS0ZWTIX) TO TSIREC.OP1NORID;*/
  VCPLHD04.TS-NIKE-SHP-ID = TS0ZM001.TSFSHPID; /* shipment number*/
  VCPLHD04.TS-NIKE-PL-NBR = TS0ZW01.TS0ZWPCK; /* Nike pl number*/
  VCPLHD04.PC-PO-NBR = TS0ZW02.PC3PONBR[TS0ZWTIX]; /* po number*/
  VCPLHD04.PC-ITM-SEQ-NBR = TS0ZW02.PC-ITM-SEQ-NBR[TS0ZWTIX]; /* po item sequence number*/
  VCPLHD04.FY-FCTY-CD = TS0ZW02.TS0ZWFCT[TS0ZWTIX]; /* factory co*/
  VCPLHD04.XGP-GPC-CD = TSWREC.XGPCD; /* product co*/
  VPRDCU03.XGPCD = TSWREC.XGPCD; /* product co*/
  VCPLHD04.PC-PRDCU-ID = TS0ZW02.PC2CUXID[TS0ZWTIX];
  VPRDCU03.PC2CUXID = TS0ZW02.PC2CUXID[TS0ZWTIX];
  VCPLHD04.SY-STY-NBR = TS0ZW02.SY1STNBR[TS0ZWTIX]; /* style numb*/
  VCPLHD04.SY-COLR-CD-ID = TS0ZW02.SY2CLRID[TS0ZWTIX]; /* color*/
  VCPLHD04.XDM-DIM-CD = TS0ZW02.XDMCD[TS0ZWTIX]; /* dimension cod*/
  VCPLHD04.XQA-QUAL-CD = TS0ZW02.XQACD[TS0ZWTIX]; /* quality code*/
  VCPLHD04.XOW-OWN-GRP-CD = TS0ZW02.XOWCD[TS0ZWTIX]; /* owner gro*/
  TS0ZS63();
  VCPLHD04.PC-CU-IN-SEG-CD = VPRDCU03.PC2INSEG;
  VCPLHD04.XPG-PKG-TYP-CD = TS0ZW02.XPGCD[TS0ZWTIX];
  VCPLHD04.XUM-UOM-CD = TS0ZW02.XUMCD[TS0ZWTIX]; /* unit of measu*/
  VCPLHD04.OP-CUST-ORD-ID = TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX];
  VCPLHD04.OP-NIKE-ORD-ID = TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX];
   /* TCS END*/
  if (TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] == 0)
   /* TCS BEG*/
   /* MOVE ' ' TO TSIREC.OP1PARTN;*/
    VCPLHD04.OP-ORD-PART-CHAR = " ";
   /* TCS END*/
  else
   /* TCS BEG*/
   /* MOVE TS0ZW02.TS0ZW-ORD-PART-CHAR(TS0ZWTIX) TO TSIREC.OP1PARTN;*/
    VCPLHD04.OP-ORD-PART-CHAR = TS0ZW02.TS0ZW-ORD-PART-CHAR[TS0ZWTIX];
   /* TCS END*/
  end
   /* TCS BEG*/
   /* MOVE 'N' TO TSIREC.TSIMSCFL;     /* musical style flag*/
   /* MOVE ' ' TO TSIREC.TSIMSCGR;     /* musical style group*/
  VCPLHD04.TS-SHP-LEG-NBR = TS0ZW02.TS-SHP-LEG-NBR[TS0ZWTIX];
  VCPLHD04.TS-MUSICAL-STY-FL = "N"; /* musical style flag*/
  VCPLHD04.TS-MUSICAL-STY-GRP = " "; /* musical style group*/
   /* TCS END*/

  if (TS0ZW02.TSISTAT[TS0ZWTIX] == "  " /* If no other status set*/
   || TS0ZW02.TSISTAT[TS0ZWTIX] == "99") /* OR OK*/
    if (TSWREC.YSSCD == "TN") /* If tentative shipment*/
   /* TCS BEG ( Change TSIREC.TSISTAT to VCPLHD04.TS-CPL-STAT-CD)*/
   /* MOVE 'TN' TO TSIREC.TSISTAT; /* cpl status flag ind tentative*/
      VCPLHD04.TS-CPL-STAT-CD = "TN"; /* cpl status flag ind tentative*/
    else
      if (TSWREC.YSSCD == "RC") /* If received shipment*/
   /* MOVE 'RC' TO TSIREC.TSISTAT;/* cpl status flag ind received*/
        VCPLHD04.TS-CPL-STAT-CD = "RC"; /* cpl status flag ind received*/
      else
        if (TSWREC.YSSCD == "CC" /* If custom-clear*/
         || TSWREC.YSSCD == "CR") /* If custom-clear in-error*/
   /* MOVE 'CC' TO TSIREC.TSISTAT;/* cpl status flag ind custom-clear*/
          VCPLHD04.TS-CPL-STAT-CD = "CC"; /* Custom-clear*/
        else
   /* MOVE 'IT' TO TSIREC.TSISTAT;/* cpl stat fl ind in-tran*/
          VCPLHD04.TS-CPL-STAT-CD = "IT"; /* ind in-tran*/
        end
      end
    end
  else
    if (TSWREC.YSSCD == "TN") /* If tentative shipment*/
   /* MOVE 'TN' TO TSIREC.TSISTAT; /* cpl status flag ind tentative*/
      VCPLHD04.TS-CPL-STAT-CD = "TN"; /* tentative*/
    else
      if (TSWREC.YSSCD == "RC") /* If received shipment*/
   /* MOVE 'RC' TO TSIREC.TSISTAT;/* cpl status flag ind received*/
        VCPLHD04.TS-CPL-STAT-CD = "RC"; /* * received*/
      else
        if (TSWREC.YSSCD == "CC" /* If custom-clear*/
         || TSWREC.YSSCD == "CR") /* If custom-clear in-error*/
   /* MOVE 'CR' TO TSIREC.TSISTAT;*/
          VCPLHD04.TS-CPL-STAT-CD = "CR";
                                   /* stat fl ind custom-clear error*/
        else
   /* MOVE TS0ZW02.TSISTAT(TS0ZWTIX) TO TSIREC.TSISTAT;/* move status*/
          VCPLHD04.TS-CPL-STAT-CD = TS0ZW02.TSISTAT[TS0ZWTIX];
   /* TCS END*/
        end
      end
    end
  end

  if (TS0ZW02.XRECD[TS0ZWTIX] == "  " /* If no other exception*/
   || TS0ZW02.XRECD[TS0ZWTIX] == "99") /* OR OK*/
   /* TCS beg*/
   /* MOVE '  ' TO TSIREC.XRECD;     /* Set exception cd*/
    VCPLHD04.XRE-RCPT-XCEP-CD = "  "; /* Set exception cd*/
  else
   /* MOVE TS0ZW02.XRECD(TS0ZWTIX) TO TSIREC.XRECD;/* move exception cd*/
    VCPLHD04.XRE-RCPT-XCEP-CD = TS0ZW02.XRECD[TS0ZWTIX];
   /* TCS END*/
  end

   /* TCS beg*/
                                  /* MOVE TS0ZW02.TS0ZMSHP(TS0ZWTIX) TO*/
                                   /* TSIREC.TSISHPQT;/* quantity shipped*/
   /* MOVE 0 TO TSIREC.TSIRSVQT;       /* quantity reserved*/
   /* MOVE 0 TO TSIREC.TSIRCVQT;       /* quantity received*/
                                  /* MOVE TS0ZW02.TS0ZMCRT(TS0ZWTIX) TO*/
                                   /* TSIREC.TSICRTQT;/* quantity cartons*/
   /* MOVE TS0ZW02.TS0ZMCBM(TS0ZWTIX) TO TSIREC.TSIPLCBM;/* cubic meters*/
   /* MOVE TS0ZW02.TS0ZMKG(TS0ZWTIX) TO TSIREC.TSIPLTKG;/* kilograms*/
   /* MOVE TS0ZW01.TS0ZWPLC TO TSIREC.TSHNKCN1;/* container #1*/
                                  /* MOVE TS0ZW02.TS0ZMSHP(TS0ZWTIX) TO*/
                                   /* TSIREC.TSISHPQ1;/* quantity shipped#1*/
   /* MOVE 0 TO TSIREC.TSIRSVQ1;       /* quantity reserved #1*/
   /* MOVE 0 TO TSIREC.TSIRCVQ1;       /* quantity received #1*/
   /* MOVE TS0ZW02.TS0ZMCRT(TS0ZWTIX) TO TSIREC.TSICRTQ1;*/
                                   /* quantity cartons #1*/
   /* MOVE TS0ZW02.TS0ZMCBM(TS0ZWTIX) TO TSIREC.TSICBM1;/* cubic meters #1*/
   /* MOVE TS0ZW02.TS0ZMKG(TS0ZWTIX) TO TSIREC.TSITKG1;/* kilograms #1*/
   /* MOVE ' ' TO TSIREC.TSILOCR;      /* letter of credit*/
   /* MOVE TS0ZW02.TS0ZWFCT(TS0ZWTIX) TO TSIREC.FY1FCTYC;/* factory*/
   /* MOVE 0 TO TSIREC.TSPFILE;        /* factory file number*/
   /* MOVE 'N' TO TSIREC.TSIDETFL;     /* detail flag*/
   /* MOVE ' ' TO TSIREC.TSRTEXT;      /* comment line*/
  VCPLHD04.TS-PL-QTOT-SHP = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
  VCPLHD04.TS-PL-QTOT-RSRV = 0;
  VCPLHD04.TS-PL-QTOT-RCV = 0; /* quantity received*/
  VCPLHD04.TS-PL-TOT-CRTN = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
  VCPLHD04.TS-PL-TOT-CBM = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
  VCPLHD04.TS-PL-TOT-KG = TS0ZW02.TS0ZMKG[TS0ZWTIX];
  VCPLHD04.TS-NIKE-CNTNR-NBR1 = TS0ZW01.TS0ZWPLC;
  VCPLHD04.TS-CPL-QTOT-SHP1 = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
  VCPLHD04.TS-CPL-QTOT-RSRV1 = 0;
  VCPLHD04.TS-CPL-QTOT-RCV1 = 0;
  VCPLHD04.TS-CPL-TOT-CRTN1 = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
  VCPLHD04.TS-CPL-TOT-CBM1 = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
  VCPLHD04.TS-CPL-TOT-KG1 = TS0ZW02.TS0ZMKG[TS0ZWTIX];
  VCPLHD04.TS-LOCR = " "; /* letter of credit*/
  VCPLHD04.TS-FCTY-FILE-NBR = 0; /* factory file number*/
  VCPLHD04.TS-DET-FL = "N"; /* detail flag*/
  VCPLHD04.TS-TEXT1 = " "; /* comment line*/
   /* TCS END*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

   /* TCS BEG*/
   /* MOVE COMMAREA.CAUSERID TO TSIREC.XXX-USER-ID;*/
   /* MOVE XX0XW01.XX0XWDAT TO TSIREC.ZZZSDT;/* move in set up date*/
   /* MOVE XX0XW01.XX0XWTIM TO TSIREC.ZZZSTM;/* move in set up time*/
   /* MOVE XX0XW01.XX0XWDAT TO TSIREC.ZZZCHGDT;/* move in change date*/
   /* MOVE XX0XW01.XX0XWTIM TO TSIREC.ZZZCHGTM;/* move in change time*/
   /* MOVE 0 TO TSIREC.ZZZCHGCT;       /* initialize change count*/
  VCPLHD04.ZZ-SDT = XX0XW01.XX0XWDAT; /* move in set up date*/
  VCPLHD04.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM; /* move in set up time*/
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/
  VCPLHD04.ZZ-CHNG-CNT = 0; /* initialize change count*/
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;
   /* TCS END*/

  TSGREC.TSNFNC = "A "; /* move selection to pass record*/
   /* TCS BEG*/
   /* CALL IO2570 TSGREC,SQLCA,TSIREC (NOMAPS,NONCSP;/* Select table row*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0ZW02.TS0ZWPAF[TS0ZWTIX] = "Y"; /* packing list added flag*/
    TS0ZW01.TS0ZWPCK = TS0ZW01.TS0ZWPCK + 1; /* increment pl counter*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS40"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
   /* TCS BEG*/
   /* MOVE 'VCPLHD01' TO TA1REC.TA1TBLVU;/* Table view name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
   /* TCS END*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS40"; /* Process name*/
  end


end // end TS0ZS40

// Check 8 cntnr span error
Function TS0ZS45()
   /* ------------------------------------------------------------*/

             /* CHECK FOR 8 CONTAINER SPAN ERRORS*/

       /* 1) Clear the save container arrays.*/
       /* 2) Save all the cpl container assignments into an*/
          /* array.*/
       /* 3) Record container numbers and check for any*/
          /* excessive container ouverlaps.*/
       /* 4) Fetch the next cpl record.*/

       /* ** If the number of unique containers is gt 8, then*/
          /* do not add this cpl and cycle to the next cpl.*/

   /* ------------------------------------------------------------*/

  TS0ZW01.TS0ZWIXM = 1; /* set index*/
  while (TS0ZW01.TS0ZWIXM <= TS0ZW01.TS0ZWMCN) /* le max cntnrs*/
    TS0ZW01.TSHNKCN[TS0ZWIXM] = 0; /* clear the arrays*/
    TS0ZW01.TS0ZWNCN[TS0ZWIXM] = 0;
    TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment counter*/
  end

  TS0ZW01.TS0ZWSWC = "N"; /* set end set switch to no*/
  TS0ZW01.TS0ZWSPF = "N"; /* set span error flag to no*/
  while (TS0ZW01.TS0ZWSWC == "N" /* while rows exist to fetch*/
   && TS0ZW01.TS0ZWSPF == "N") /* and no span errors encountered*/
    /* --------------------------------------------------------*/
     /* Save all the cpl cntnr numbers into an array*/
    /* --------------------------------------------------------*/
    /* TCS BEG*/
   /* MOVE TSIREC.TSHNKCN1 TO TS0ZW01.TSHNKCN(1);*/
   /* MOVE TSIREC.TSHNKCN2 TO TS0ZW01.TSHNKCN(2);*/
   /* MOVE TSIREC.TSHNKCN3 TO TS0ZW01.TSHNKCN(3);*/
   /* MOVE TSIREC.TSHNKCN4 TO TS0ZW01.TSHNKCN(4);*/
   /* MOVE TSIREC.TSHNKCN5 TO TS0ZW01.TSHNKCN(5);*/
   /* MOVE TSIREC.TSHNKCN6 TO TS0ZW01.TSHNKCN(6);*/
   /* MOVE TSIREC.TSHNKCN7 TO TS0ZW01.TSHNKCN(7);*/
   /* MOVE TSIREC.TSHNKCN8 TO TS0ZW01.TSHNKCN(8);*/
    TS0ZW01.TSHNKCN[1] = VCPLHD04.TS-NIKE-CNTNR-NBR1;
    TS0ZW01.TSHNKCN[2] = VCPLHD04.TS-NIKE-CNTNR-NBR2;
    TS0ZW01.TSHNKCN[3] = VCPLHD04.TS-NIKE-CNTNR-NBR3;
    TS0ZW01.TSHNKCN[4] = VCPLHD04.TS-NIKE-CNTNR-NBR4;
    TS0ZW01.TSHNKCN[5] = VCPLHD04.TS-NIKE-CNTNR-NBR5;
    TS0ZW01.TSHNKCN[6] = VCPLHD04.TS-NIKE-CNTNR-NBR6;
    TS0ZW01.TSHNKCN[7] = VCPLHD04.TS-NIKE-CNTNR-NBR7;
    TS0ZW01.TSHNKCN[8] = VCPLHD04.TS-NIKE-CNTNR-NBR8;
    /* TCS END*/

    /* -----------------------------------------------------------*/
     /* Record cntnr numbers and check for excessive cntnr overlap*/
    /* -----------------------------------------------------------*/
    TS0ZW01.TS0ZWIXM = 1; /* set index*/
    while (TS0ZW01.TS0ZWSPF == "N" /* while no span errors encountered*/
     && TS0ZW01.TSHNKCN[TS0ZWIXM] > 0) /* and cntnrs exist*/
      TS0ZW01.TS0ZWIXW = 1; /* set index*/
      TS0ZW01.TS0ZWEFL = "N"; /* set endflag*/
      while (TS0ZW01.TS0ZWIXW <= TS0ZW01.TS0ZWMCN /* le max cntnrs*/
       && TS0ZW01.TS0ZWEFL == "N") /* and end flag not set*/
        if (TS0ZW01.TS0ZWNCN[TS0ZWIXW] == TS0ZW01.TSHNKCN[TS0ZWIXM])
          TS0ZW01.TS0ZWEFL = "Y"; /* set endflag*/
        else
          if (TS0ZW01.TS0ZWNCN[TS0ZWIXW] == 0) /* if empty*/
            TS0ZW01.TS0ZWNCN[TS0ZWIXW] = TS0ZW01.TSHNKCN[TS0ZWIXM];
            TS0ZW01.TS0ZWEFL = "Y"; /* set endflag*/
          end
        end
        TS0ZW01.TS0ZWWK1 = TS0ZW01.TS0ZWMCN + 1; /* set work value*/
        if (TS0ZW01.TS0ZWIXW == TS0ZW01.TS0ZWWK1) /* if over max*/
          TS0ZW01.TS0ZWSPF = "Y"; /* set span error flag*/
          converseLib.validationFailed(123); /* set span error message*/
          TS0ZM001.XXXPRCNM = "TS0ZS45"; /* process name*/
          TS0ZM002.XXXPRCNM = "TS0ZS45"; /* process name*/
        end
        TS0ZW01.TS0ZWIXW = TS0ZW01.TS0ZWIXW + 1; /* increment counter*/
      end
      TS0ZW01.TS0ZWIXM = TS0ZW01.TS0ZWIXM + 1; /* increment counter*/
      TS0ZW01.TS0ZWWK1 = TS0ZW01.TS0ZWMCN + 1; /* set work value*/
      if (TS0ZW01.TS0ZWIXM == TS0ZW01.TS0ZWWK1) /* if over max*/
        TS0ZW01.TS0ZWSPF = "Y"; /* set span error flag*/
        converseLib.validationFailed(123); /* set span error message*/
        TS0ZM001.XXXPRCNM = "TS0ZS45"; /* process name*/
        TS0ZM002.XXXPRCNM = "TS0ZS45"; /* process name*/
      end
    end
    TS0ZS35(); /* fetch the next cpl row*/
  end

end // end TS0ZS45

// Select unique from VCPLHD04
Function TS0ZS50()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  VCPLHD04.TS-NIKE-SHP-ID = TS0ZM001.TSFSHPID; /* shipment number*/
  VCPLHD04.PC-PO-NBR = TS0ZW02.PC3PONBR[TS0ZWTIX]; /* po number*/
  VCPLHD04.XGP-GPC-CD = TSWREC.XGPCD; /* product code*/
  VCPLHD04.PC-PRDCU-ID = TS0ZW02.PC2CUXID[TS0ZWTIX]; /* customer xr*/
  VCPLHD04.SY-STY-NBR = TS0ZW02.SY1STNBR[TS0ZWTIX]; /* style number*/
  VCPLHD04.SY-COLR-CD-ID = TS0ZW02.SY2CLRID[TS0ZWTIX]; /* color num*/
  VCPLHD04.XDM-DIM-CD = TS0ZW02.XDMCD[TS0ZWTIX]; /* dimension code*/
  VCPLHD04.XQA-QUAL-CD = TS0ZW02.XQACD[TS0ZWTIX]; /* quality code*/
  VCPLHD04.XOW-OWN-GRP-CD = TS0ZW02.XOWCD[TS0ZWTIX]; /* owner group*/
  VCPLHD04.XPG-PKG-TYP-CD = TS0ZW02.XPGCD[TS0ZWTIX];
  VCPLHD04.XUM-UOM-CD = TS0ZW02.XUMCD[TS0ZWTIX]; /* unit of measure*/
  VCPLHD04.OP-CUST-ORD-ID = TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX];
  VCPLHD04.OP-NIKE-ORD-ID = TS0ZW02.TS0ZM-NIKE-ORD-ID[TS0ZWTIX];
  if (TS0ZW02.TS0ZM-CUST-ORD-ID[TS0ZWTIX] == 0)
    VCPLHD04.OP-ORD-PART-CHAR = " ";
  else
    VCPLHD04.OP-ORD-PART-CHAR = TS0ZW02.TS0ZW-ORD-PART-CHAR[TS0ZWTIX];
  end

  TSGREC.TSNFNC = "SO"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100
   || SQLCA.VAGen_SQLCODE == -811)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS50"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    /* TCS BEG*/
   /* MOVE 'VCPLHD01' TO TA1REC.TA1TBLVU;    /* Table view name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
    /* TCS END*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS50"; /* Process name*/
  end


end // end TS0ZS50

// Call TS4000 - Itm Seq Populate
Function TS0ZS51()

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* This subroutine accesses calls the TS4000 subroutine.  This*/
   /* subroutine takes the "long PO key" and returns the best fit*/
   /* PO item sequence number.*/
   /* XGP-GPC-CD, SY-STY-NBR, SY-CLR-CD-ID, XWH-WHSE-CD, and PC-PRDCU-ID*/
   /* must be populated in calling process in WTS4001.  The name of the*/
   /* process must be moved to TA1PGMNM in TA1REC, for Error*/
   /* Diagnosis Reporting.*/

   /* This subroutine will return the i/o return code in*/
   /* WTS4001.IO-RETURN-CODE and, if a normal*/
   /* return, the PC-ITM-SEQ-NBR in WTS4001.*/

   /* This subroutine will do any required Error Diagnosis*/
   /* Reporting to TA0020.  The calling process must check the*/
   /* return codes and take the appropriate action relating to*/
   /* its terminal output.  The calling process does not need to*/
   /* do any Error Diagnosis Reporting.*/

   /* - -   S U B R O U T I N E   D E S C R I P T I O N   - -*/

   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  call "TS4000" (WTS4001) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (WTS4001.IO-RETURN-CODE == "00") /* Normal return code*/

    return; /* Return to previous process*/

  end

  TA1REC.TA1MAP = WTS4001.IO-RETURN-CODE; /* i/o return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "TS0Z       CALL TS4000        ";

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  sysVar.errorCode = TA1REC.TA1MAP; /* i/o return code*/


end // end TS0ZS51

// Update pl row VCPLHD04
Function TS0ZS55()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

       /* - Find next available container field in CPLHD04 which*/
         /* has not been filled.*/
       /* - Move in all fields to CPLHD04*/
       /* - Add the packing list row to dtrans.vcplhd04*/

   /* ------------------------------------------------------------*/

   /* ****************************************************/
   /* move fields to next available container*/
   /* ****************************************************/

  if (VCPLHD04.TS-NIKE-CNTNR-NBR2 <= 0)
    VCPLHD04.TS-NIKE-CNTNR-NBR2 = TS0ZW01.TS0ZWPLC;
    VCPLHD04.TS-CPL-QTOT-SHP2 = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
    VCPLHD04.TS-CPL-QTOT-RSRV2 = 0; /* reserved #2*/
    VCPLHD04.TS-CPL-QTOT-RCV2 = 0; /* received #2*/
    VCPLHD04.TS-CPL-TOT-CRTN2 = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
    VCPLHD04.TS-CPL-TOT-CBM2 = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
    VCPLHD04.TS-CPL-TOT-KG2 = TS0ZW02.TS0ZMKG[TS0ZWTIX];
  else
    if (VCPLHD04.TS-NIKE-CNTNR-NBR3 <= 0)
      VCPLHD04.TS-NIKE-CNTNR-NBR3 = TS0ZW01.TS0ZWPLC;
      VCPLHD04.TS-CPL-QTOT-SHP3 = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
      VCPLHD04.TS-CPL-QTOT-RSRV3 = 0; /* reserved #3*/
      VCPLHD04.TS-CPL-QTOT-RCV3 = 0; /* received #3*/
      VCPLHD04.TS-CPL-TOT-CRTN3 = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
      VCPLHD04.TS-CPL-TOT-CBM3 = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
      VCPLHD04.TS-CPL-TOT-KG3 = TS0ZW02.TS0ZMKG[TS0ZWTIX];
    else
      if (VCPLHD04.TS-NIKE-CNTNR-NBR4 <= 0)
        VCPLHD04.TS-NIKE-CNTNR-NBR4 = TS0ZW01.TS0ZWPLC; /* container#4*/
        VCPLHD04.TS-CPL-QTOT-SHP4 = TS0ZW02.TS0ZMSHP[TS0ZWTIX]; /* shipped#4*/
        VCPLHD04.TS-CPL-QTOT-RSRV4 = 0; /* reserved #4*/
        VCPLHD04.TS-CPL-QTOT-RCV4 = 0; /* received #4*/
        VCPLHD04.TS-CPL-TOT-CRTN4 = TS0ZW02.TS0ZMCRT[TS0ZWTIX]; /* cartons #4*/
        VCPLHD04.TS-CPL-TOT-CBM4 = TS0ZW02.TS0ZMCBM[TS0ZWTIX]; /* cbms #4*/
        VCPLHD04.TS-CPL-TOT-KG4 = TS0ZW02.TS0ZMKG[TS0ZWTIX]; /* kilos #4*/
      else
        if (VCPLHD04.TS-NIKE-CNTNR-NBR5 <= 0)
          VCPLHD04.TS-NIKE-CNTNR-NBR5 = TS0ZW01.TS0ZWPLC;
          VCPLHD04.TS-CPL-QTOT-SHP5 = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
          VCPLHD04.TS-CPL-QTOT-RSRV5 = 0;
          VCPLHD04.TS-CPL-QTOT-RCV5 = 0;
          VCPLHD04.TS-CPL-TOT-CRTN5 = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
          VCPLHD04.TS-CPL-TOT-CBM5 = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
          VCPLHD04.TS-CPL-TOT-KG5 = TS0ZW02.TS0ZMKG[TS0ZWTIX];
        else
          if (VCPLHD04.TS-NIKE-CNTNR-NBR6 <= 0)
            VCPLHD04.TS-NIKE-CNTNR-NBR6 = TS0ZW01.TS0ZWPLC;
            VCPLHD04.TS-CPL-QTOT-SHP6 = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
            VCPLHD04.TS-CPL-QTOT-RSRV6 = 0;
            VCPLHD04.TS-CPL-QTOT-RCV6 = 0;
            VCPLHD04.TS-CPL-TOT-CRTN6 = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
            VCPLHD04.TS-CPL-TOT-CBM6 = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
            VCPLHD04.TS-CPL-TOT-KG6 = TS0ZW02.TS0ZMKG[TS0ZWTIX];
          else
            if (VCPLHD04.TS-NIKE-CNTNR-NBR7 <= 0)
              VCPLHD04.TS-NIKE-CNTNR-NBR7 = TS0ZW01.TS0ZWPLC;
              VCPLHD04.TS-CPL-QTOT-SHP7 = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
              VCPLHD04.TS-CPL-QTOT-RSRV7 = 0;
              VCPLHD04.TS-CPL-QTOT-RCV7 = 0;
              VCPLHD04.TS-CPL-TOT-CRTN7 = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
              VCPLHD04.TS-CPL-TOT-CBM7 = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
              VCPLHD04.TS-CPL-TOT-KG7 = TS0ZW02.TS0ZMKG[TS0ZWTIX];
            else
              if (VCPLHD04.TS-NIKE-CNTNR-NBR8 <= 0)
                VCPLHD04.TS-NIKE-CNTNR-NBR8 = TS0ZW01.TS0ZWPLC;
                VCPLHD04.TS-CPL-QTOT-SHP8 = TS0ZW02.TS0ZMSHP[TS0ZWTIX];
                VCPLHD04.TS-CPL-QTOT-RSRV8 = 0;
                VCPLHD04.TS-CPL-QTOT-RCV8 = 0;
                VCPLHD04.TS-CPL-TOT-CRTN8 = TS0ZW02.TS0ZMCRT[TS0ZWTIX];
                VCPLHD04.TS-CPL-TOT-CBM8 = TS0ZW02.TS0ZMCBM[TS0ZWTIX];
                VCPLHD04.TS-CPL-TOT-KG8 = TS0ZW02.TS0ZMKG[TS0ZWTIX];
              end
            end
          end
        end
      end
    end
  end

   /* ****************************************************/
   /* move in all other fields to tsirec*/
   /* ****************************************************/

  if (TS0ZW02.TSISTAT[TS0ZWTIX] == "  ") /* If status not set*/
     /* continue on*/
  else
    if (TS0ZW02.TSISTAT[TS0ZWTIX] == "99") /* If status ok*/
      if (TSWREC.YSSCD == "CC" /* If custom clear shipment*/
       || TSWREC.YSSCD == "CR")
   /* TCS BEG*/
   /* MOVE 'CC' TO TSIREC.TSISTAT;/* Set back to cc*/
        VCPLHD04.TS-CPL-STAT-CD = "CC"; /* Set back to cc*/
      else
        if (TSWREC.YSSCD == "TN") /* If tentative shipment*/
   /* MOVE 'TN' TO TSIREC.TSISTAT;/* Set back to tentative*/
          VCPLHD04.TS-CPL-STAT-CD = "TN"; /* Set back to tentative*/
        else
          if (TSWREC.YSSCD == "RC") /* If received shipment*/
   /* MOVE 'RC' TO TSIREC.TSISTAT;/* Set back to received*/
            VCPLHD04.TS-CPL-STAT-CD = "RC"; /* Set back to received*/
          else
   /* MOVE 'IT' TO TSIREC.TSISTAT;/* Set back to in-transit*/
            VCPLHD04.TS-CPL-STAT-CD = "IT"; /* Set back to in-transit*/
          end
        end
      end
    else
      if (TSWREC.YSSCD == "CC" /* If custom clear shipment*/
       || TSWREC.YSSCD == "CR")
   /* MOVE 'CR' TO TSIREC.TSISTAT;/* Set back to cr*/
        VCPLHD04.TS-CPL-STAT-CD = "CR"; /* Set back to cr*/
      else
        if (TSWREC.YSSCD == "TN") /* If tentative shipment*/
   /* MOVE 'TN' TO TSIREC.TSISTAT;/* Set back to tentative*/
          VCPLHD04.TS-CPL-STAT-CD = "TN"; /* Set back to tentative*/
        else
          if (TSWREC.YSSCD == "RC") /* If received shipment*/
   /* MOVE 'RC' TO TSIREC.TSISTAT;/* Set back to received*/
            VCPLHD04.TS-CPL-STAT-CD = "RC"; /* Set back to received*/
          else
   /* MOVE TS0ZW02.TSISTAT(TS0ZWTIX) TO TSIREC.TSISTAT;*/
            VCPLHD04.TS-CPL-STAT-CD = TS0ZW02.TSISTAT[TS0ZWTIX];
   /* TCS END*/
          end
        end
      end
    end
  end

  if (TS0ZW02.XRECD[TS0ZWTIX] == "  ") /* If exception set*/
     /* continue on*/
  else
    if (TS0ZW02.XRECD[TS0ZWTIX] == "99") /* If except ok*/
   /* TCS BEG*/
   /* MOVE '  ' TO TSIREC.XRECD;   /* move except*/
      VCPLHD04.XRE-RCPT-XCEP-CD = "  "; /* move except*/
    else
   /* MOVE TS0ZW02.XRECD(TS0ZWTIX) TO TSIREC.XRECD;/* move exception cd*/
      VCPLHD04.XRE-RCPT-XCEP-CD = TS0ZW02.XRECD[TS0ZWTIX];
   /* TCS END*/
    end
  end

   /* TCS BEG*/
   /* TSIREC.TSISHPQT = TS0ZW02.TS0ZMSHP(TS0ZWTIX) + TSIREC.TSISHPQT;*/
   /* TSIREC.TSICRTQT = TS0ZW02.TS0ZMCRT(TS0ZWTIX) + TSIREC.TSICRTQT;*/
   /* TSIREC.TSIPLCBM = TS0ZW02.TS0ZMCBM(TS0ZWTIX) + TSIREC.TSIPLCBM;*/
   /* TSIREC.TSIPLTKG = TS0ZW02.TS0ZMKG(TS0ZWTIX) + TSIREC.TSIPLTKG;*/
  VCPLHD04.TS-PL-QTOT-SHP = TS0ZW02.TS0ZMSHP[TS0ZWTIX] + VCPLHD04.TS-PL-QTOT-SHP;
  VCPLHD04.TS-PL-TOT-CRTN = TS0ZW02.TS0ZMCRT[TS0ZWTIX] + VCPLHD04.TS-PL-TOT-CRTN;
  VCPLHD04.TS-PL-TOT-CBM = TS0ZW02.TS0ZMCBM[TS0ZWTIX] + VCPLHD04.TS-PL-TOT-CBM;
  VCPLHD04.TS-PL-TOT-KG = TS0ZW02.TS0ZMKG[TS0ZWTIX] + VCPLHD04.TS-PL-TOT-KG;
   /* TCS END*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

   /* TCS BEG*/
   /* MOVE COMMAREA.CAUSERID TO TSIREC.XXX-USER-ID;*/
   /* MOVE XX0XW01.XX0XWDAT TO TSIREC.ZZZCHGDT;/* move in change date*/
   /* MOVE XX0XW01.XX0XWTIM TO TSIREC.ZZZCHGTM;/* move in change time*/
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;
   /* TCS END*/

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
   /* TCS BEG*/
   /* CALL IO2570 TSGREC,SQLCA,TSIREC (NOMAPS,NONCSP;/* Select table row*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    TS0ZW02.TS0ZWPAF[TS0ZWTIX] = "Y"; /* packing list added flag*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS55"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
   /* TCS BEG*/
   /* MOVE 'VCPLHD01' TO TA1REC.TA1TBLVU;/* Table view name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
   /* TCS END*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS55"; /* Process name*/
  end


end // end TS0ZS55

// Close selected set VCPLHD04
Function TS0ZS60()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET OF PACKING LIST ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C6"; /* move selection to pass record*/
   /* TCS BEG*/
   /* CALL IO2570 TSGREC,SQLCA,TSIREC (NOMAPS,NONCSP; /* Select table row*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table*/
   /* TCS END*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS60"; /* Process name*/
   /* TCS BEG*/
   /* MOVE 'SELECT THE TABLE ROW' TO TA1REC.TA1LOC;*/
    TA1REC.TA1LOC = "CLOSE THE TABLE ROW";
   /* TCS END*/
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
   /* TCS BEG*/
   /* MOVE 'VCPLHD01' TO TA1REC.TA1TBLVU;    /* Table view name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
   /* TCS END*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS60"; /* Process name*/
  end


end // end TS0ZS60

// Select (S ) Unique    VPRDCU03
Function TS0ZS63()
   /* ------------------------------------------------------------*/

                 /* SELECT UNIQUE CUST XREF ROW*/

    /* 1) Select the customer xref row.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "S "; /* move selection to pass record*/
  call "VPRDCU03" (TSGREC, SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS63"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS63"; /* Process name*/
  end


end // end TS0ZS63

// Select (S ) Unique    VPRDCU03
Function TS0ZS65()
   /* ------------------------------------------------------------*/

                 /* SELECT UNIQUE CUST XREF ROW*/

    /* 1) Select the customer xref row.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "S "; /* move selection to pass record*/
  call "VPRDCU03" (TSGREC, SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TS0ZW01.TS0ZWTIX = TS0ZW01.TS0ZWMAX + 1; /* get out of loop*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS63"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRDCU03"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS63"; /* Process name*/
  end


end // end TS0ZS65

// Select row DTRANS.VSHPHD01
Function TS0ZS70()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the shphd table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS70"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0ZM001.XXXPRCNM = "TS0ZS70"; /* Process name*/

  end


end // end TS0ZS70

// Select row DTRANS.VTSLOC02
Function TS0ZS75()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the tsloc table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("S ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS75"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0ZM001.XXXPRCNM = "TS0ZS75"; /* Process name*/

  end


end // end TS0ZS75

// Select pl rows VCPLHD04
Function TS0ZS81()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWS*/

    /* 1) Select the packing list rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "S5"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS81"; /* Process name*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS81"; /* Process name*/
  end


end // end TS0ZS81

// Fetch table rows VCPLHD04
Function TS0ZS82()
   /* ------------------------------------------------------------*/

                 /* FETCH PACKING LIST ROW*/

    /* 1) Fetch the packing list row.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N5"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* or not found*/
      TS0ZW01.TS0ZWSWC = "Y"; /* set oen of set switch*/
    else
      if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
       || SQLCA.VAGen_SQLCODE == -904)
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0ZS82"; /* Process name*/
      TA1REC.TA1LOC = "FETCH THE TABLE ROW";
      TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0ZM001.XXXPRCNM = "TS0ZS82"; /* Process name*/
    end
  end


end // end TS0ZS82

// Close selected set VCPLHD04
Function TS0ZS83()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET OF PACKING LIST ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C5"; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0ZW01.TS0ZWNSF = "Y"; /* set neg SQL flag to yes*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0ZS83"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE THE TABLE ROW";
    TA1REC.TA1MAP = "TS0ZM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0ZM001.XXXPRCNM = "TS0ZS83"; /* Process name*/
  end


end // end TS0ZS83

//*** RECORD=TS0ZW01 ****
// Working storage for TS0Z - Container Build
// ***********************
Record TS0ZW01 type basicRecord
  10 TSNFNC TSNFNC ; 
  10 YMTCD YMTCD ; 
  10 TS0ZWIXM TS0ZWIXM ; 
  10 TS0ZWIXW TS0ZWIXW ; 
  10 TS0ZWCOM TS0ZWCOM ; 
  10 TS0ZWMIX TS0ZWMIX ; 
  10 TS0ZWMPX TS0ZWMPX ; 
  10 TS0ZWTIX TS0ZWTIX ; 
  10 TS0ZWPGE TS0ZWPGE ; 
  10 TS0ZWCTR TS0ZWCTR ; 
  10 TS0ZWPCK TS0ZWPCK ; 
  10 TS0ZWMAX TS0ZWMAX ; 
  10 TS0ZWMCN TS0ZWMCN ; 
  10 TS0ZWPLC TS0ZWPLC ; 
  10 TS0ZWWK1 TS0ZWWK1 ; 
  10 TS0ZWWK2 TS0ZWWK2 ; 
  10 TS0ZWWK3 TS0ZWWK3 ; 
  10 TS0ZWDSW TS0ZWDSW ; 
  10 TS0ZWPSW TS0ZWPSW ; 
  10 TS0ZWIDS TS0ZWIDS ; 
  10 TS0ZWIPI TS0ZWIPI ; 
  10 TS0ZWIOT TS0ZWIOT ; 
  10 TS0ZWFFL TS0ZWFFL ; 
  10 TS0ZWSPF TS0ZWSPF ; 
  10 TS0ZWNSF TS0ZWNSF ; 
  10 TS0ZWCAF TS0ZWCAF ; 
  10 TS0ZWEFL TS0ZWEFL ; 
  10 TS0ZWPFL TS0ZWPFL ; 
  10 TS0ZWSWR TS0ZWSWR ; 
  10 TS0ZWSWC TS0ZWSWC ; 
  10 TS0ZWDEF TS0ZWDEF ; 
  10 TS0ZWHEF TS0ZWHEF ; 
  10 TS0ZWFSW TS0ZWFSW ; 
  10 TS0ZWCYR TS0ZWCYR ; 
    15 TS0ZWCCC TS0ZWCCC ; 
    15 TS0ZWCYY TS0ZWCYY ; 
  10 TS0ZWPID TS0ZWPID ; 
    15 TS0ZWPCC TS0ZWPCC ; 
    15 TS0ZWPOI TS0ZWPOI ; 
      20 TS0ZWPYR TS0ZWPYR ; 
        25 TS0ZWPY1 TS0ZWPY1 ; 
        25 TS0ZWPY2 TS0ZWPY2 ; 
      20 TS0ZWPMO TS0ZWPMO ; 
      20 TS0ZWDMO TS0ZWDMO ; 
      20 TS0ZWFCT TS0ZWFCT ; 
  10 TS0ZWDAT TS0ZWDAT ; 
    15 TS0ZWPCN TS0ZWPCN ; 
    15 TS0ZWPYY TS0ZWPYY ; 
    15 TS0ZWPM1 TS0ZWPM1 ; 
    15 TS0ZWPM2 TS0ZWPM2 ; 
  10 TS0ZWPWF TS0ZWPWF ; 
  10 TS0ZWWA1 TS0ZWWA1 ; 
    15 TS0ZWWF1 TS0ZWWF1 ; 
    15 TS0ZWSH1 TS0ZWSH1 [13] ; 
  10 TS0ZWWA2 TS0ZWWA2 ; 
    15 TS0ZWWF2 TS0ZWWF2 ; 
    15 TS0ZWSH2 TS0ZWSH2 [13] ; 
  10 TS0ZWWA3 TS0ZWWA3 ; 
    15 TS0ZWWF3 TS0ZWWF3 ; 
    15 TS0ZWSH3 TS0ZWSH3 [13] ; 
  10 TS0ZWWA4 TS0ZWWA4 ; 
    15 TS0ZWWF4 TS0ZWWF4 ; 
    15 TS0ZWSH4 TS0ZWSH4 [13] ; 
  10 TS0ZWWA6 TS0ZWWA6 ; 
    15 TS0ZWWF6 TS0ZWWF6 ; 
    15 TS0ZWSH6 TS0ZWSH6 [13] ; 
  10 TS0ZWWA7 TS0ZWWA7 ; 
    15 TS0ZWWF7 TS0ZWWF7 ; 
    15 TS0ZWSH7 TS0ZWSH7 [13] ; 
  10 TS0ZWHEQ TS0ZWHEQ ; 
  10 TS0ZWHEP TS0ZWHEP ; 
  10 TS0ZWSEQ TS0ZWSEQ ; 
  10 TS0ZWSEP TS0ZWSEP ; 
  10 TS0ZWTTQ TS0ZWTTQ ; 
  10 TS0ZWTTD TS0ZWTTD ; 
  10 TS0ZWTTP TS0ZWTTP ; 
  10 TS0ZWPOQ TS0ZWPOQ ; 
  10 TS0ZWPLQ TS0ZWPLQ ; 
  10 TS0ZWRCQ TS0ZWRCQ ; 
  10 PC3PONBR PC3PONBR ; 
  10 TS0ZMPOI TS0ZMPOI ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 PC2CUXID PC2CUXID ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 TSHNKCN TSHNKCN [8] ; 
  10 TS0ZWNCN TS0ZWNCN [8] ; 
  10 TS0ZWWF5 TS0ZWWF5 ; 
  10 TS0ZWMAP TS0ZWMAP ; 
  10 TS0ZW-PREV-OP1CUOID TS0ZW-PREV-OP1CUOID ; 
  10 TS0ZW-PREV-OP1NORID TS0ZW-PREV-OP1NORID ; 
  10 TS0ZW-CASCADE-SWITCH-ON TS0ZW-CASCADE-SWITCH-ON ; 
  10 TS-ORIG-LOC-CNSLD-FL TS-ORIG-LOC-CNSLD-FL ; 
  10 TS-DSCHG-LOC-CNSLD-FL TS-DSCHG-LOC-CNSLD-FL ; 
  10 TS-ORIG-LOC-CD TS-ORIG-LOC-CD ; 
  10 TS-DSCHG-LOC-CD TS-DSCHG-LOC-CD ; 
  10 XGP-GPC-CD XGP-GPC-CD ; 
  10 TS0ZWWF30 TS0ZWWF30 ; 
  10 TS0ZW-DIFF-CONTNR TS0ZW-DIFF-CONTNR ; 
end // end TS0ZW01

//*** RECORD=TS0ZW02 ****
// Working map detail record for TS0Z - Container Build
// ***********************
Record TS0ZW02 type basicRecord
  10 TS0ZWLIN TS0ZWLIN [400] ; 
    15 PC3PONBR PC3PONBR ; 
    15 TS0ZMPOI TS0ZMPOI ; 
      20 TS0ZWPYR TS0ZWPYR ; 
      20 TS0ZWPMO TS0ZWPMO ; 
      20 TS0ZWDMO TS0ZWDMO ; 
      20 TS0ZWFCT TS0ZWFCT ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC2CUXID PC2CUXID ; 
    15 TS0ZM-CUST-ORD-ID TS0ZM-CUST-ORD-ID ; 
      20 * num(8) ; // first 7 chars of cust ord id
      20 TS0ZW-ORD-PART-CHAR TS0ZW-ORD-PART-CHAR ; 
    15 TS0ZM-NIKE-ORD-ID TS0ZM-NIKE-ORD-ID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 TS0ZMSHP TS0ZMSHP ; 
    15 TS0ZMCRT TS0ZMCRT ; 
    15 TS0ZMCBM TS0ZMCBM ; 
    15 TS0ZMKG TS0ZMKG ; 
    15 XDMCD XDMCD ; 
    15 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
    15 XQACD XQACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 TSISTAT TSISTAT ; 
    15 XRECD XRECD ; 
    15 TS0ZWPAF TS0ZWPAF ; 
    15 TS0ZWAPS TS0ZWAPS ; 
    15 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
end // end TS0ZW02

//*** RECORD=TS0ZW03 ****
// Working storage for all map detail saved for the purpose
//   of scrolling and modifying for TS0Z - Container Build.
// ***********************
Record TS0ZW03 type basicRecord
  10 TS0ZWGR3 TS0ZWGR3 ; 
    15 TS0ZWLN3 TS0ZWLN3 [13] ; 
      20 PC3PONBR PC3PONBR ; 
      20 TS0ZMPOI TS0ZMPOI ; 
      20 PC4ORTYP PC4ORTYP ; 
      20 PC2CUXID PC2CUXID ; 
      20 TS0ZM-CUST-ORD-ID TS0ZM-CUST-ORD-ID ; 
        25 * num(8) ; // first 7 chars of cust ord id
        25 TS0ZW-ORD-PART-CHAR TS0ZW-ORD-PART-CHAR ; 
      20 TS0ZM-NIKE-ORD-ID TS0ZM-NIKE-ORD-ID ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 TS0ZMSHP TS0ZMSHP ; 
      20 TS0ZMCRT TS0ZMCRT ; 
      20 TS0ZMCBM TS0ZMCBM ; 
      20 TS0ZMKG TS0ZMKG ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 XOWCD XOWCD ; 
      20 TSISTAT TSISTAT ; 
      20 XRECD XRECD ; 
      20 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
      20 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
end // end TS0ZW03

//*** RECORD=TS0ZW04 ****
// Working storage for all map detail saved for the purpose
//   of scrolling and modifying for TS0Z - Container Build.
// ***********************
Record TS0ZW04 type basicRecord
  10 TS0ZWGR4 TS0ZWGR4 ; 
    15 TS0ZWLN4 TS0ZWLN4 [13] ; 
      20 PC3PONBR PC3PONBR ; 
      20 TS0ZMPOI TS0ZMPOI ; 
      20 PC4ORTYP PC4ORTYP ; 
      20 PC2CUXID PC2CUXID ; 
      20 TS0ZM-CUST-ORD-ID TS0ZM-CUST-ORD-ID ; 
      20 TS0ZM-NIKE-ORD-ID TS0ZM-NIKE-ORD-ID ; 
      20 SY1STNBR SY1STNBR ; 
      20 SY2CLRID SY2CLRID ; 
      20 TS0ZMSHP TS0ZMSHP ; 
      20 TS0ZMCRT TS0ZMCRT ; 
      20 TS0ZMCBM TS0ZMCBM ; 
      20 TS0ZMKG TS0ZMKG ; 
      20 XDMCD XDMCD ; 
      20 XQACD XQACD ; 
      20 XPGCD XPGCD ; 
      20 XUMCD XUMCD ; 
      20 XOWCD XOWCD ; 
      20 TSISTAT TSISTAT ; 
      20 XRECD XRECD ; 
      20 TS-SHP-LEG-NBR TS-SHP-LEG-NBR ; 
      20 PC-ITM-SEQ-NBR PC-ITM-SEQ-NBR ; 
end // end TS0ZW04

// Cust order id of sales order
DataItem TS0ZM-CUST-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Nike order id of sales order
DataItem TS0ZM-NIKE-ORD-ID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// cubic meters
DataItem TS0ZMCBM decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cartons
DataItem TS0ZMCRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// kilograms
DataItem TS0ZMKG decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map po id
DataItem TS0ZMPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shipment
DataItem TS0ZMSHP int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cascade entered data switch
DataItem TS0ZW-CASCADE-SWITCH-ON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0ZW-DIFF-CONTNR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-ord-part-char
DataItem TS0ZW-ORD-PART-CHAR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous op-cust-ord-id
DataItem TS0ZW-PREV-OP1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous op-nike-ord-id
DataItem TS0ZW-PREV-OP1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-add-po-style-fl
DataItem TS0ZWAPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// container added flag
DataItem TS0ZWCAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem TS0ZWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-compress-index
DataItem TS0ZWCOM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-container-counter
DataItem TS0ZWCTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century/year
DataItem TS0ZWCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0ZWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem TS0ZWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Detail entered flag
DataItem TS0ZWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0ZWDMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Domestic no quantity switch
DataItem TS0ZWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end flag for loops
DataItem TS0ZWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory
DataItem TS0ZWFCT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First time through flag
DataItem TS0ZWFFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Add/delete function switch
DataItem TS0ZWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage 3 group
DataItem TS0ZWGR3 char(975)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage 4 group
DataItem TS0ZWGR4 char(975)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Header entered flag
DataItem TS0ZWHEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hard error percent
DataItem TS0ZWHEP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hard error quantity
DataItem TS0ZWHEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// P.O. id/type correct switch
DataItem TS0ZWIDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. type correct switch
DataItem TS0ZWIOT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. id correct switch
DataItem TS0ZWIPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working index 1
DataItem TS0ZWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working index 2
DataItem TS0ZWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Data Detail Line
DataItem TS0ZWLIN char(77)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage 3 line
DataItem TS0ZWLN3 char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage 4 line
DataItem TS0ZWLN4 char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0ZWMAP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max-table-lines
DataItem TS0ZWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max container span number
DataItem TS0ZWMCN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-map-index
DataItem TS0ZWMIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws-map-position-index
DataItem TS0ZWMPX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// NIKE_CNTNR_NBR array
DataItem TS0ZWNCN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Negative SQL return flag
DataItem TS0ZWNSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-tbl-pl-added-fl
DataItem TS0ZWPAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id century
DataItem TS0ZWPCC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-packing-list-counter
DataItem TS0ZWPCK smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id century
DataItem TS0ZWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Field protection flag
DataItem TS0ZWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-page-counter
DataItem TS0ZWPGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id redefinition
DataItem TS0ZWPID char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// packing list cntnr assignmnt
DataItem TS0ZWPLC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Packing list quantity
DataItem TS0ZWPLQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// month
DataItem TS0ZWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0ZWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0ZWPMO char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id yr, mo1, mo1, factory
DataItem TS0ZWPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO accumulated quantity
DataItem TS0ZWPOQ decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0ZWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO quantity warning flag
DataItem TS0ZWPWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// year char 1
DataItem TS0ZWPY1 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year char 2
DataItem TS0ZWPY2 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0ZWPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0ZWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Reciepts accumulated quantity
DataItem TS0ZWRCQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Soft error percent
DataItem TS0ZWSEP decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Soft error quantity
DataItem TS0ZWSEQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Set highlights flag 1
DataItem TS0ZWSH1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 2
DataItem TS0ZWSH2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 3
DataItem TS0ZWSH3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 4
DataItem TS0ZWSH4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 6
DataItem TS0ZWSH6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Set highlights flag 7
DataItem TS0ZWSH7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Span error flag indicator
DataItem TS0ZWSPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0ZWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0ZWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-table-index
DataItem TS0ZWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total shipping/received diff
DataItem TS0ZWTTD decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received pct
DataItem TS0ZWTTP decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total shipping/received qty
DataItem TS0ZWTTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Warning array 1
DataItem TS0ZWWA1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 2
DataItem TS0ZWWA2 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 3
DataItem TS0ZWWA3 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 4
DataItem TS0ZWWA4 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 6
DataItem TS0ZWWA6 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning array 7
DataItem TS0ZWWA7 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  1
DataItem TS0ZWWF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  2
DataItem TS0ZWWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  3
DataItem TS0ZWWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0ZWWF30 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  4
DataItem TS0ZWWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  5
DataItem TS0ZWWF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  6
DataItem TS0ZWWF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Warning flag  7
DataItem TS0ZWWF7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage index 1
DataItem TS0ZWWK1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index 2
DataItem TS0ZWWK2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index 3
DataItem TS0ZWWK3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

