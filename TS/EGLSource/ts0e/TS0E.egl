package ts0e;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0E ****
// This program allows users to inquire/maintain existing rows
// in the Contract table.  The user will specify what carrier
// they currently want to work on.  The data base will return 0
// to N rows based upon the carrier selected by the user.  This
// program will format the screen with the Contract information
// returned from the data base.
// 
// This program allows adding, changing, and inquiry of
// Contract table rows:
// 
//    The user may add new Contract rows by pressing PF13 from
//    the inquiry screen (blank or filled with rows).  This
//    will position them in an add screen.  Contract rows can
//    then be added (if entries pass edit criteria) by pressing
//    ENTER.  The user may continue adding or exit to the
//    inquiry screen.  (If a Contract already exists on an add,
//    a message will appear to that effect: 'this row already
//    exists').
// 
//    A user can select one or more rows for change and hit
//    PF14.  The user will then be positioned in a change
//    screen where they can make their changes to non-key
//    fields and hit ENTER to cycle to the next row selected
//    for change or PF3 to return to the browse screen.
// 
//    There is no Contract delete capability.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 01/06/88   cepple   New application.
// 11/07/96   JCARL1   Remove alarm from msg display.
// Y2KFIX   11/24/97  ksumme  Y2K MODIFICATIONS MADE TO:
//                            XPTS001 APPL FLOW, TS0E252,
//                            TS0E360
// *********************
Program TS0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TS0EW01 TS0EW01; // record
  TS0EW02 TS0EW02; // record
  TSAREC TSAREC; // record
  TSDREC TSDREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSTTBL {deleteAfterUse = yes}; // table
  use YCOTBL {deleteAfterUse = yes}; // table
  use TS0EM.TS0EM001,  // forms
      TS0EM.TS0EM002, 
      TS0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TS0EW01 empty; /* Initialize working storage*/
    set TS0EW02 empty; /* Initialize temporary storage*/
    set TSAREC empty; /* Initialize records used*/
    set TSDREC empty;
    set TSWREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0EM001 initial; /* Initialize map1 output area*/
    set TS0EM002 initial; /* Initialize map2 output area*/

    /* -----------------------  Y2K OUT BEGIN  ---------------------*/
    /*  */
    /* MOVE 19 TO TS0EW01.TS0EWCEN;      /* Initialize working century*/
    /*  */
    /* ------------------------  Y2K OUT END  ---------------------*/
    TS0EW01.TS0EWMAP = "1"; /* Indicate map to be displayed*/
    TS0EW01.TS0EWMFL = "N"; /* Iitialize message flag*/
    TS0EW01.TS0EWPSW = "N"; /* Iitialize problem switch*/

    if (COMMAREA.CAITEM == " ") /* If commarea item not requested*/
      TS0EW01.TS0EWSWR = "N"; /* Set request for data to no*/
    else
      TS0EW01.TS0EWSWR = "Y"; /* Set request for data to yes*/
      TS0EM001.TSACARCD = COMMAREA.CAITEM; /* Set change save key*/
      TSAREC.TSACARCD = COMMAREA.CAITEM; /* Set record key*/
    end

    goto TS0E001; /* Converse Location Inquiry/Main.*/


    TS0E001: TS0E001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    goto TS0E001; /* Converse Location Inquiry/Main.*/


  end // end main
end // end TS0E

// Contract Inquiry/Maintenance
Function TS0E001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
      /* Otherwise, if specified, display the second map.*/
      /* Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWMAP == "1") /* Map 1 was requested*/
    TS0E100(); /* Display map 1*/
  else
    if (TS0EW01.TS0EWMAP == "2" /* Map 2 was requested*/
     && TS0EW01.TS0EWFSW == "A") /* and ADD function*/
      TS0E200(); /* Display Agent Add Map*/
    else
      if (TS0EW01.TS0EWMAP == "2" /* Map 2 was selected*/
       && TS0EW01.TS0EWFSW == "C") /* and CHANGE function*/

        TS0EW01.TS0EWIXM = 1; /* Initialize index*/

        while (TS0EW01.TS0EWIXM <= 13 /* Until end of page*/
         && TS0EW01.TS0EWMAP != "1") /* and not map 1*/
          if (TS0EM001.TS0EMSEL[TS0EWIXM] == "S") /* If line selected*/
            TS0E300(); /* Display Agent Change Map*/
          end
          TS0EW01.TS0EWIXM = TS0EW01.TS0EWIXM + 1; /* Increment index*/
        end
        TS0EW01.TS0EWMAP = "1"; /* set map to contract browse*/
      else
        if (TS0EW01.TS0EWMAP == "2" /* Map 2 was selected*/
         && TS0EW01.TS0EWFSW == "I") /* and INQUIRY function*/

          TS0EW01.TS0EWIXM = 1; /* Initialize index*/

          while (TS0EW01.TS0EWIXM <= 13 /* Until end of page*/
           && TS0EW01.TS0EWMAP != "1") /* and not map 1*/
            if (TS0EM001.TS0EMSEL[TS0EWIXM] == "S") /* If line selected*/
              TS0E400(); /* Display contract inquiry*/
            end
            TS0EW01.TS0EWIXM = TS0EW01.TS0EWIXM + 1; /* Increment index*/
          end
          TS0EW01.TS0EWMAP = "1"; /* set map to contract inquiry*/
        else
          TA1REC.TA1TYPE = "APPL"; /* Type of error*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          TA1REC.TA1PGMNM = "TS0E001 "; /* Process name*/
          TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
          TA1REC.TA1MAP = TS0EW01.TS0EWMAP; /* Map name*/
          SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

          call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
          XSPF4(); /* Exit to Master Menu*/
        end
      end
    end
  end


end // end TS0E001

// Contract inquiry/main. map
Function TS0E100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display map #1. Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWSWR == "Y") /* The request for data is yes*/
    TS0E110(); /* Obtain the data to display*/
  end

  TS0E120(); /* Format and display the map*/

  TS0E130(); /* Check attention identifier*/

  TS0E140(); /* Reset fields to normal intensity*/

  TS0E150(); /* Verify the entered data*/

  TS0E160(); /* Process valid input request*/


end // end TS0E100

// Obtain the data to display
Function TS0E110()
   /* ------------------------------------------------------------*/
   /* If data was requested, select carrier table row.*/
   /* If carrier does not exist, set error message.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue.*/
   /* At end of rows, close the selected set cursor.*/
   /* If no data found, display error message and return to*/
      /* previous process.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  TS0E111(); /* Select carrier table row*/
  TS0EW01.TS0EWCFL = TSAREC.TSACONFL; /* Save contract flag*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Carrier was not found*/
    converseLib.validationFailed(21); /* No data found to display*/
    TS0EW01.TSACARNM = " "; /* Clear carrier name field*/
    set TS0EM001 initial; /* Clear map output area*/
    TS0EW01.TS0EWPSW = "N"; /* Override problem switch*/
    TS0EW01.TSACARCD = TSAREC.TSACARCD; /* Save code*/
    TS0EM001.TSACARCD = TS0EW01.TSACARCD; /* Move in carr code*/
    TS0EM001.XXXPRCNM = "TS0E110"; /* Process name*/
    TS0E112(); /* Purge any temporary storage*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Carrier was  found*/
      TS0EW01.TSACARCD = TSAREC.TSACARCD; /* Save code*/
      TS0EW01.TSACARNM = TSAREC.TSACARNM; /* Save description*/
      TS0E112(); /* Purge any temporary storage*/

      set TSDREC empty; /* Clear contract record*/
      TSDREC.TSACARCD = TS0EW01.TSACARCD; /* Set contract rec search*/

      TS0E113(); /* Select set and open the cursor*/
      if (SQLCA.VAGen_SQLCODE == 0) /* No errors were found*/
        set TS0EW02 empty; /* Clear temporary storage record*/
        set TSDREC empty; /* Clear agent record*/
        TSDREC.TSACARCD = TS0EM001.TSACARCD; /* Set contract*/
        TS0EW01.TS0EWIXM = 1;
                                   /* Initialize display line number*/
        TS0EW01.TS0EWSWC = "N"; /* Initialize end of file switch*/
        TS0EW01.TS0EWPSW = "N"; /* Init problem found switch*/
        while (TS0EW01.TS0EWSWC == "N" /* Until end of set or problem found*/
         && TS0EW01.TS0EWPSW == "N") /* or until a problem was found*/
          TS0E114(); /* Obtain data and format page*/
          if (TS0EW01.TS0EWIXM > 13) /* Page is full*/
            TS0E115(); /* Add page to temporary storage*/
          end
        end
        if (TS0EW01.TS0EWSWC == "Y") /* end of set was found*/
          if (TS0EW01.TS0EWIXM > 1) /* and some of the page was formatted*/
            TS0E115(); /* Add page to temporary storage*/
          end
          TS0EW01.TS0EWTSP = 1; /* Initialize page number*/
          TS0EW01.TS0EWSWR = "N"; /* Request for data completed*/
          TS0E116(); /* Close the selected set cursor*/
        end
      end
    end

    if (TS0EW01.TA5TSQIX == 0) /* No data to display*/
      TS0EM001.XXXPRCNM = "TS0E110"; /* Process name*/
      converseLib.validationFailed(21); /* Indicate no data to display*/
      TS0EW01.TS0EWPSW = "N"; /* Override problem switch*/
    end
  end


end // end TS0E110

// Select Carrier table row
Function TS0E111()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the Carrier table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0E111"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0EM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EW01.TS0EWPSW = "Y"; /* Indicate Problem*/
    TS0EM001.XXXPRCNM = "TS0E111"; /* Process name*/
  end


end // end TS0E111

// Purge any temporary storage
Function TS0E112()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0E111"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0EM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0EW01.TS0EWTSP = 0; /* Reset current page number*/
  TS0EW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0E112

// Select set
Function TS0E113()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  call "IO1560" ("SS", SQLCA, TSDREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0E113"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0EM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCONTR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EM001.XXXPRCNM = "TS0E113"; /* Process name*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0E113

// Fetch next row and format
Function TS0E114()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  call "IO1560" ("SN", SQLCA, TSDREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0EW01.TS0EWSWC = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0E114"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0EM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCONTR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0EM001.XXXPRCNM = "TS0E114"; /* Process name*/

    else
      TS0EW02.TSDCONTR[TS0EWIXM] = TSDREC.TSDCONTR; /* Save data*/
      TS0EW02.TSDBEGDT[TS0EWIXM] = TSDREC.TSDBEGDT;
      TS0EW02.TSDENDDT[TS0EWIXM] = TSDREC.TSDENDDT;
      TS0EW02.YSTCD[TS0EWIXM] = TSDREC.YSTCD;
      if (TSDREC.YSTCD in YSTTBL.YSTCD)
        TS0EW02.YSTABRV[TS0EWIXM] = YSTTBL.YSTABRV[sysVar.arrayIndex];
      end
      TS0EW02.YCOCD[TS0EWIXM] = TSDREC.YCOCD;
      if (TSDREC.YCOCD in YCOTBL.YCOCD)
        TS0EW02.YCOABRV[TS0EWIXM] = YCOTBL.YCOABRV[sysVar.arrayIndex];
      end
      TS0EW02.TSDMETFL[TS0EWIXM] = TSDREC.TSDMETFL;

      TS0EW01.TS0EWIXM = TS0EW01.TS0EWIXM + 1; /* Increment line index*/
    end
  end


end // end TS0E114

// Add page to temporary storage
Function TS0E115()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS0EW02.TS0EWLEN = 574; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0E"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    TS0EW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TS0EW01.TS0EWIXM = 1; /* Reset display line number*/
    set TS0EW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0E114"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0EM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EM001.XXXPRCNM = "TS0E115"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    TS0EW01.TS0EWPSW = "Y"; /* indicate problem has been found*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0E115

// Close selected set cursor
Function TS0E116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO1560" ("CS", SQLCA, TSDREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0E116"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0EM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCONTR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EM001.XXXPRCNM = "TS0E116"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0E116

// Format and display the map
Function TS0E120()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWPSW == "N") /* No error message to display*/
    set TS0EM001 initial; /* Clear map output area*/
    TS0EM001.TSACARCD = TS0EW01.TSACARCD;
    TS0EM001.TSACARNM = TS0EW01.TSACARNM;
    TS0E121(); /* Format the selected data*/
  end

  /* IF EZEMNO NE 0;                   /* No error message to display*/
  /* SET TS0EM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  if (TS0EM001.TSDCONTR[1] == " ") /* If no data on page*/
    set TS0EM001.TSACARCD cursor; /* set cursor to top field*/
  end

  if (TS0EW01.TS0EWMFL == "Y") /* If message flag is yes*/
    converseLib.validationFailed(44); /* Indicate update was successful*/
    TS0EM001.XXXPRCNM = "TS0E120"; /* Process name*/
    TS0EW01.TS0EWMFL = "N"; /* Reset message flag*/
  end

  TS0EM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0EM001 ;

  TS0EW01.TS0EWPSW = "N"; /* Reset problem switch*/

end // end TS0E120

// Format the selected data
Function TS0E121()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the plan location data in the map.*/
   /* ------------------------------------------------------------*/

  TS0EW01.TS0EWDFL = "N"; /* Initialize delete flag*/

  if (TS0EW01.TS0EWCSK != " ") /* If change save key set*/
    TS0EW01.TS0EWTSP = 1; /* Initialize search page*/
  end

  if (COMMAREA.CAADDFL == "Y") /* If user can perform add*/
    set TS0EM001.TS0EMADD skip; /* Display add PF Key*/
  end

  if (COMMAREA.CACHGFL == "Y") /* If user can perform delete*/
    set TS0EM001.TS0EMCHG skip; /* Display change PF Key*/
  end

  if (TS0EW01.TA5TSQIX == 0) /* if no data to display*/

    /* Do not format page*/

  else

    while (TS0EW01.TS0EWDFL == "N") /* While delete save key not found*/
      TS0E122(); /* Obtain temporary storage page*/
      TS0E123(); /* locate page with key*/
    end

    if (TS0EW01.TS0EWTSP != TA5REC.TA5TSQIX) /* Desired page not current*/
      TS0E122(); /* Obtain temporary storage page*/
    end

    set TS0EM001.TS0EMPGL skip; /* Display "PAGE" literal*/
    set TS0EM001.TS0EMOFL skip; /* Display "OF" literal*/

    TS0EM001.TS0EWTSP = TS0EW01.TS0EWTSP; /* Current page number*/
    set TS0EM001.TS0EWTSP skip; /* Display number*/
    TS0EM001.TA5TSQIX = TS0EW01.TA5TSQIX; /* Highest page number*/
    set TS0EM001.TA5TSQIX skip; /* Display number*/

    TS0EW01.TS0EWIXM = 1; /* Initialize line index*/
    while (TS0EW01.TS0EWIXM <= 13 /* Until end of lines*/
     && TS0EW02.TSDCONTR[TS0EWIXM] != " ") /* or last line of data*/

      set TS0EM001.TS0EMSEL[TS0EWIXM] normal; /* Display select flag*/

      TS0EM001.TSDCONTR[TS0EWIXM] = TS0EW02.TSDCONTR[TS0EWIXM];
      TS0EM001.TSDBEGDT[TS0EWIXM] = TS0EW02.TSDBEGDT[TS0EWIXM];
      TS0EM001.TSDENDDT[TS0EWIXM] = TS0EW02.TSDENDDT[TS0EWIXM];
      TS0EM001.YSTCD[TS0EWIXM] = TS0EW02.YSTCD[TS0EWIXM];
      TS0EM001.YSTABRV[TS0EWIXM] = TS0EW02.YSTABRV[TS0EWIXM];
      TS0EM001.YCOCD[TS0EWIXM] = TS0EW02.YCOCD[TS0EWIXM];
      TS0EM001.YCOABRV[TS0EWIXM] = TS0EW02.YCOABRV[TS0EWIXM];
      TS0EM001.TSDMETFL[TS0EWIXM] = TS0EW02.TSDMETFL[TS0EWIXM];

      TS0EW01.TS0EWIXM = TS0EW01.TS0EWIXM + 1; /* Increment line index*/

    end
  end


end // end TS0E121

// Read temporary storage page
Function TS0E122()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS0EW02.TS0EWLEN = 574; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0E"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0EW01.TS0EWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0E122"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0EM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EM001.XXXPRCNM = "TS0E122"; /* Process name*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate Problem*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end TS0E122

// Locate change save key
Function TS0E123()
   /* ------------------------------------------------------------*/
   /* Locate the page in which the key is less than or*/
   /* equal to the Change Save Key.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWCSK == " ") /* No contract code entered*/
    TS0EW01.TS0EWDFL = "Y"; /* Indicate key found*/
  else

    TS0EW01.TS0EWIXM = 1; /* Initialize index*/

    while (TS0EW01.TS0EWIXM <= 13) /* Until key is found*/
      if (TS0EW02.TSDCONTR[TS0EWIXM] == " " /* no more contracts*/
       || TS0EW02.TSDCONTR[TS0EWIXM] == TS0EW01.TS0EWCSK)
        if (TS0EW01.TS0EWIXM <= 0) /* Key not on page*/
          if (TS0EW01.TS0EWTSP == 1) /* first page*/
            TS0EW01.TS0EWIXM = 1; /* Reset index*/
          else
            TS0EW01.TS0EWIXM = 13; /* Index to last entry*/
            TS0EW01.TS0EWTSP = TS0EW01.TS0EWTSP - 1; /* decrement page*/
          end
        end
        set TS0EM001.TS0EMSEL[TS0EWIXM] cursor; /* Initial cursor*/
        TS0EW01.TS0EWDFL = "Y"; /* Indicate page was found*/
        TS0EW01.TS0EWCSK = " "; /* Reset starting carrier*/
        return; /* Return to previous process*/
      end
      TS0EW01.TS0EWIXM = TS0EW01.TS0EWIXM + 1; /* Increment index*/
    end

    if (TS0EW01.TS0EWTSP == TS0EW01.TA5TSQIX) /* Last page*/
      TS0EW01.TS0EWIXM = 14; /* Set index to last entry*/
      set TS0EM001.TS0EMSEL[TS0EWIXM] cursor; /* Initial cursor*/
      TS0EW01.TS0EWDFL = "Y"; /* Indicate page was found*/
      TS0EW01.TS0EWCSK = " "; /* Reset starting carrier*/
    else
      TS0EW01.TS0EWTSP = TS0EW01.TS0EWTSP + 1; /* Increment page*/
    end
  end


end // end TS0E123

// Check attention identifier
Function TS0E130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0EM001 initial; /* Clear the map fields*/
    TS0EW01.TS0EWSWR = "N"; /* Set request for data = n*/
    set TS0EW02 empty; /* Clear temporary storage*/

    TS0EW01.TSACARCD = " "; /* Reset screen keys*/
    TS0EW01.TSACARNM = " ";
    TS0EW01.TA5TSQIX = 0; /* Reset page numbers*/
    TS0EW01.TS0EWTSP = 0;

    exit stack; /* Exit to redisplay map*/
  end

  if (TS0EM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      TS0E112(); /* Purge any temporary storage*/
      set TSDREC empty; /* Clear record*/
      COMMAREA.CATOAP = TS0EM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0EM001.CAITEM; /* Application data*/
      XSTSS01(); /* Exit to another application*/

      TSDREC.TSACARCD = TS0EW01.TSACARCD; /* Reset load keys*/

      TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    set TS0EM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0EM001.XXXPRCNM = "TS0E130"; /* Process name*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0C"; /* set to Carrier application*/
    COMMAREA.CAITEM = TS0EM001.TSACARCD; /* move in item*/
    TS0E112(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0EM001.XXXPRCNM = "TS0E130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0EM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0E112(); /* Purge any temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0EM001.XXXPRCNM = "TS0E130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf14) /* and PF14 was not pressed*/

    TS0EM001.XXXPRCNM = "TS0E130"; /* Process name*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf13 /* PF13 was pressed*/
   && COMMAREA.CAADDFL == "N")     /* and user add not authorized*/
    TS0EM001.XXXPRCNM = "TS0E130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf14 /* PF14 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* and user chg not authorized*/
    TS0EM001.XXXPRCNM = "TS0E130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0E130

// Reset highlighted fields
Function TS0E140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0EM001.TSACARCD initialAttributes; /* Carrier code*/

  TS0EW01.TS0EWIXM = 1; /* Initialize line index*/

  while (TS0EW01.TS0EWIXM <= 13 /* Until end of lines*/
   && TS0EM001.TSDCONTR[TS0EWIXM] != " ") /* and location exists*/
    set TS0EM001.TS0EMSEL[TS0EWIXM] normal; /* Reset select flag*/
    TS0EW01.TS0EWIXM = TS0EW01.TS0EWIXM + 1; /* Increment line index*/
  end

  set TS0EM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0EM001.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0E140

// Verify the entered data
Function TS0E150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0EM001.CAITEM > " ") /* Application data was entered*/
    set TS0EM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM001.XXXPRCNM = "TS0E150"; /* Process name*/
  end

  if (converseVar.eventKey is pf13) /* If add screen requested*/

      /* Return to previous process*/

  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0E151(); /* Verify scroll request*/
    else
      TS0E152(); /* Verify any changed data*/
    end

    if (TS0EW01.TS0EWPSW == "Y") /* Errors were found*/
      exit stack; /* Exit to redisplay map*/
    end
  end


end // end TS0E150

// Verify scroll request
Function TS0E151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0EW01.TS0EWTSP < 2)       /* and no previous pages*/
    TS0EM001.XXXPRCNM = "TS0E151"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0EW01.TS0EWTSP >= TS0EW01.TA5TSQIX) /* and no more pages*/
    TS0EM001.XXXPRCNM = "TS0E151"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
  end

  TS0EW01.TS0EWIXM = 13; /* Initialize line index*/

  while (TS0EW01.TS0EWIXM > 0) /* Until end of lines*/
    if (TS0EM001.TS0EMSEL[TS0EWIXM] != TS0EW02.TS0EMSEL[TS0EWIXM])
      set TS0EM001.TS0EMSEL[TS0EWIXM] cursor, modified, bold; /* Highlight*/
      TS0EM001.XXXPRCNM = "TS0E151"; /* Process name*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    end
    TS0EW01.TS0EWIXM = TS0EW01.TS0EWIXM - 1; /* Decrement line number*/
  end


end // end TS0E151

// Verify any changed data
Function TS0E152()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  TS0EW01.TS0EWSFL = "N"; /* Initialize selection flag*/
  TS0EW01.TS0EWIXM = 13; /* Initialize index*/

  while (TS0EW01.TS0EWIXM > 0) /* Until end of lines*/
    if (TS0EM001.TS0EMSEL[TS0EWIXM] != " ") /* If selection is not blank*/
      TS0EW01.TS0EWSFL = "Y"; /* Initialize selection flag*/
      if (TS0EM001.TS0EMSEL[TS0EWIXM] == "S") /* Save the key*/
         /* Next sentence*/
      else
        converseLib.validationFailed(13); /* Error message and highlight*/
        TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
        TS0EM001.XXXPRCNM = "TS0E152"; /* Process name*/
        set TS0EM001.TS0EMSEL[TS0EWIXM] cursor, modified, bold;
        TS0EW01.TS0EWSWR = "N"; /* Set request for data*/
      end
    end
    TS0EW01.TS0EWIXM = TS0EW01.TS0EWIXM - 1; /* Increment line index*/
  end

  if (TS0EM001.TSACARCD == " " /* If select line is blank*/
   && TS0EM001.TSDCONTR[1] != " ")
    TS0E112(); /* Purge temporary storage*/
    TS0EW01.TS0EWSWR = "N"; /* Set request for data to no*/
    TS0EW01.TSACARCD = " "; /* Reset working storage values*/
    TS0EW01.TSACARNM = " ";
  else
    if (TS0EM001.TSACARCD == " " /* If no data exists*/
     && TS0EM001.TSDCONTR[1] == " ")
      converseLib.validationFailed(169); /* Set error message 'enter data'*/
      TS0EW01.TS0EWSWR = "N"; /* Set request for data to no*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM001.XXXPRCNM = "TS0E152"; /* Process name*/
    else
      if (TS0EM001.TSACARCD == TS0EW01.TSACARCD /* If no new data entered*/
       && TS0EW01.TS0EWSFL == "N")             

         /* Continue on*/

      else
        if (TS0EM001.TSACARCD == TS0EW01.TSACARCD /* Selection entered*/
         && TS0EM001.TSDCONTR[1] != " "           
         && TS0EW01.TS0EWSFL == "Y")             

           /* keep going*/

        else
          TSAREC.TSACARCD = TS0EM001.TSACARCD; /* move flds to rec*/
          TS0EW01.TS0EWSWR = "Y";
        end
      end
    end
  end


end // end TS0E152

// Process valid input request
Function TS0E160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  TS0EW01.TS0EWCSK = " "; /* Initialize change save key*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    TS0EW01.TS0EWTSP = TS0EW01.TS0EWTSP - 1; /* Decrement page number*/
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      TS0EW01.TS0EWTSP = TS0EW01.TS0EWTSP + 1; /* Increment page number*/
    else
      if (converseVar.eventKey is pf13 /* PF13 was pressed*/
       && TS0EM001.TSACARCD != " ")    /* Carrier code is entered*/
        set TSAREC empty; /* Empty select record*/
        TSAREC.TSACARCD = TS0EM001.TSACARCD; /* Move carrier code*/
        TS0E111(); /* Select code to see if exists*/
        if (SQLCA.VAGen_SQLCODE == 100) /* If row not found*/
          converseLib.validationFailed(39); /* No data found to display*/
          TS0EW01.TSACARNM = " "; /* Clear carrier name field*/
          TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
          TS0EM001.XXXPRCNM = "TS0E160"; /* Process name*/
        else
          if (SQLCA.VAGen_SQLCODE == 0) /* Carrier was not found*/
            TS0EM001.TSACARNM = TSAREC.TSACARNM; /* Save name*/
            TS0EW01.TS0EWMAP = "2"; /* Select Map #2*/
            TS0EW01.TS0EWFSW = "A"; /* Select add function*/
            converseLib.validationFailed(0); /* Clear error message field*/
          end
        end
      else
        if (converseVar.eventKey is pf13 /* PF13 was pressed*/
         && TS0EM001.TSACARCD == " ")    /* Carrier code not is entered*/
          converseLib.validationFailed(169); /* Data must be entered*/
          TS0EW01.TS0EWPSW = "Y"; /* error message*/
          TS0EM001.XXXPRCNM = "TS0E160"; /* Process name*/
        else
          if (converseVar.eventKey is pf14 /* PF14 was pressed*/
           && TS0EW01.TS0EWSFL == "Y")     /* and selection was made*/
            TS0EW01.TS0EWMAP = "2"; /* Select Map #2*/
            TS0EW01.TS0EWFSW = "C"; /* Select change function*/
            converseLib.validationFailed(0); /* Clear error message field*/
          else
            if (converseVar.eventKey is pf14 /* PF14 was pressed*/
             && TS0EW01.TS0EWSFL == "N")     /* and selection was not made*/
              converseLib.validationFailed(53); /* error message*/
              TS0EM001.XXXPRCNM = "TS0E160"; /* Process name*/
              TS0EW01.TS0EWPSW = "Y"; /* error message*/
            else
              if (converseVar.eventKey is enter /* enter was pressed*/
               && TS0EW01.TS0EWSFL == "Y"       /* and selection was made*/
               && TS0EM001.TSACARCD == TS0EW01.TSACARCD
               && TS0EM001.TSACARCD != " ")     /* Carrier code not ' '*/
                TS0EW01.TS0EWMAP = "2"; /* Select Map #2*/
                TS0EW01.TS0EWFSW = "I"; /* Select change function*/
                converseLib.validationFailed(0); /* Clear error message field*/
              else
                if (converseVar.eventKey is enter /* enter was pressed*/
                 && TS0EW01.TS0EWSFL == "N"       /* and selection was made*/
                 && TS0EM001.TSACARCD == TS0EW01.TSACARCD
                 && TS0EM001.TSACARCD != " ")     /* Carrier code not ' '*/
                  converseLib.validationFailed(34); /* Data must be entered*/
                  TS0EW01.TS0EWPSW = "Y"; /* error message*/
                  set TS0EM001.TS0EMSEL[1] cursor;
                else
                  TS0EW01.TSACARCD = TS0EM001.TSACARCD; /* save code*/
                end
              end
            end
          end
        end
      end
    end
  end


end // end TS0E160

// Contract maintenance add map
Function TS0E200()
   /* ------------------------------------------------------------*/
   /* This is the process used to display add map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0E210(); /* Format and display the map*/

  TS0E220(); /* Check attention identifier*/

  TS0E230(); /* Reset fields to normal intensity*/

  TS0E240(); /* Verify the entered data*/

  TS0E250(); /* Process valid input request*/


end // end TS0E200

// Format and display add map
Function TS0E210()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWPSW == "N") /* No errors*/
    set TS0EM002 initial; /* Clear map output area*/
    TS0EM002.TS0EMFUN = " ADD  "; /* Set ADD title to map*/
  end

  if (converseVar.validationMsgNum == 0) /* if no other messages to display*/
    TS0EM002.TS0EMMSG = "PLEASE ENTER NEW CONTRACT";
  end

  TS0EM002.TSACARCD = TS0EM001.TSACARCD; /* Move values to map*/
  TS0EM002.TSACARNM = TS0EM001.TSACARNM;
  TS0EM002.TSDMETFL = "N"; /* Set contract met to no*/

  TS0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0EM002.ZZZSDT = VGVar.currentShortGregorianDate; /* Creation date*/
  TS0EM002.ZZZCHGDT = VGVar.currentShortGregorianDate; /* Modification date (Init.)*/

  /* IF EZEMNO NE 0;                   /* ERROR MESSAGE TO DISPLAY*/
  /* SET TS0EM002 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  if (TS0EW01.TS0EWMFL == "Y") /* If add was successful*/
    converseLib.validationFailed(44); /* display a message*/
    TS0EM002.XXXPRCNM = "TS0E210"; /* Process name*/
    TS0EW01.TS0EWMFL = "N"; /* Reset message flag*/
  end

  converse TS0EM002 ;

  TS0EW01.TS0EWPSW = "N"; /* Reset problem switch*/

  TS0E211(); /* Check for ? inquiry by user*/


end // end TS0E210

// Check for ? inquiry by user
Function TS0E211()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0EM002.YSTCD == "?" /* if any ? entered*/
   || TS0EM002.YCOCD == "?")

    if (TS0EM002.YSTCD == "?") /* if ? in ship type code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "            SHIPMENT TYPE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYST01(); /* perform ship type code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the ship type  **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0EM002.YSTCD = YSTTBL.YSTCD[XX0XWPIX]; /* move code*/
        TS0EM002.YSTSDESC = YSTTBL.YSTSDESC[XX0XWPIX]; /* move name*/
      else
        TS0EM002.YSTCD = " "; /* clear fields*/
        TS0EM002.YSTSDESC = " ";
      end
    end

    if (TS0EM002.YCOCD == "?") /* if ? in contract code field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 CONTRACT "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYCO01(); /* perform contract code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the contract   **/
       /* *  table code and description to the map.               **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0EM002.YCOCD = YCOTBL.YCOCD[XX0XWPIX]; /* move code*/
        TS0EM002.YCOSDESC = YCOTBL.YCOSDESC[XX0XWPIX]; /* move name*/
      else
        TS0EM002.YCOCD = " "; /* clear fields*/
        TS0EM002.YCOSDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0EW01.TS0EWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0E211

// Check attention identifier
Function TS0E220()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0EM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0EM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0EM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0EM002.CAITEM; /* Application data*/
      TS0E112(); /* Purge temporary storage*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0EM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0EM002.XXXPRCNM = "TS0E220"; /* Process name*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0EW01.TS0EWMAP = "1"; /* Move to map 1*/
    TS0EW01.TS0EWMFL = "N"; /* Reset message flag*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0EM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0E112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0EM002.XXXPRCNM = "TS0E220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0C"; /* Fast path to carrier*/
    COMMAREA.CAITEM = TS0EM002.TSACARCD;
    TS0E112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0EM002.XXXPRCNM = "TS0E220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0EM002.XXXPRCNM = "TS0E220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0E220

// Reset highlighted fields
Function TS0E230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0EM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0EM002.CAITEM initialAttributes; /* Commarea application data*/
  set TS0EM002.TSDCONTR initialAttributes; /* Map fields*/
  set TS0EM002.TSDMETFL initialAttributes;
  set TS0EM002.TSDBEGDT initialAttributes;
  set TS0EM002.TSDENDDT initialAttributes;
  set TS0EM002.YSTCD initialAttributes;
  set TS0EM002.YCOCD initialAttributes;
  set TS0EM002.TSDCMTCN initialAttributes;
  set TS0EM002.TSDCMTCM initialAttributes;
  set TS0EM002.TSDCMTKG initialAttributes;
  set TS0EM002.TSDCMTDL initialAttributes;
  set TS0EM002.TSDTDTCN initialAttributes;
  set TS0EM002.TSDTDTCM initialAttributes;
  set TS0EM002.TSDTDTKG initialAttributes;
  set TS0EM002.TSDTDTDL initialAttributes;
  set TS0EM002.TS0EM1PC initialAttributes;
  set TS0EM002.TS0EM2PC initialAttributes;
  set TS0EM002.TS0EM3PC initialAttributes;
  set TS0EM002.TS0EM4PC initialAttributes;
  set TS0EM002.TSDSHCN initialAttributes;
  set TS0EM002.TSDSHCM initialAttributes;
  set TS0EM002.TSDSHKG initialAttributes;
  set TS0EM002.TSDSHDL initialAttributes;


end // end TS0E230

// Verify the entered data
Function TS0E240()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0EW01.TS0EWDEF = "N"; /* Initialize data entered flag*/

  if (TS0EM002.CAITEM > " ") /* Application data was entered*/
    set TS0EM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E240"; /* Process name*/
  end

  if (converseVar.eventKey is enter /* If ENTER was pressed*/
   && TS0EW01.TS0EWPSW == "N")      /* and no errors*/
    TS0E241(); /* Validate input data*/
  end


end // end TS0E240

// Validate any input data
Function TS0E241()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0EW01.TS0EWDEF = "Y"; /* Data has been entered*/

  TS0EM002.ZZZSDT = VGVar.currentShortGregorianDate; /* Creation date*/
  TS0EM002.ZZZCHGDT = VGVar.currentShortGregorianDate; /* Modification date (Init.)*/

  if (TS0EM002.YCOCD == " ") /* If contract not type entered*/
    converseLib.validationFailed(55); /* Display error message*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
    TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0EM002.YCOSDESC = " "; /* Clear description*/
    set TS0EM002.YCOCD cursor, modified, bold; /* highlight field*/
  else /* Onctract type ebtered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0EM002.YCOCD in YCOTBL.YCOCD) /* Check valid contract type*/
    end

    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(55); /* Display error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0EM002.YCOSDESC = " "; /* Clear description*/
      set TS0EM002.YCOCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      if ("A" in YCOTBL.XXXSTAT from sysVar.arrayIndex)
        TS0EM002.YCOSDESC = YCOTBL.YCOSDESC[sysVar.arrayIndex];
      else /* Move description to table*/
        converseLib.validationFailed(55); /* Display error message*/
        TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
        TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
        TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
        TS0EM002.YCOSDESC = " "; /* Clear description*/
        set TS0EM002.YCOCD cursor, modified, bold; /* highlight field*/
      end
    end
  end

  if (TS0EM002.YSTCD == " ") /* If shipment not type entered*/
    converseLib.validationFailed(56); /* Display error message*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
    TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0EM002.YSTSDESC = " "; /* Clear description*/
    set TS0EM002.YSTCD cursor, modified, bold; /* highlight field*/
  else /* If shipment type entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0EM002.YSTCD in YSTTBL.YSTCD) /* Check valid shipment type*/
    end

    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(56); /* Display error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0EM002.YSTSDESC = " "; /* Clear description*/
      set TS0EM002.YSTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      if ("A" in YSTTBL.XXXSTAT from sysVar.arrayIndex)
        TS0EM002.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
      else /* Move description to table*/
        converseLib.validationFailed(55); /* Display error message*/
        TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
        TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
        TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
        TS0EM002.YSTSDESC = " "; /* Clear description*/
        set TS0EM002.YSTCD cursor, modified, bold; /* highlight field*/
      end
    end
  end

  if (TS0EM002.TSDENDDT == 0) /* If date not entered*/
    set TS0EM002.TSDENDDT cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(57); /* error message*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
    TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  else
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0EM002.TSDENDDT; /* move date to record*/
    TS0E242(); /* Check valid date*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0EW01.TS0EWEDT = TA2REC.TA2GRGGN; /* Save date*/
    else /* Invalid date entered*/
      set TS0EM002.TSDENDDT cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(57); /* error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    end
  end

  if (TS0EM002.TSDBEGDT == 0) /* If date not entered*/
    set TS0EM002.TSDBEGDT cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(57); /* error message*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
    TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  else
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRGA = TS0EM002.TSDBEGDT; /* move date to record*/
    TS0E242(); /* Check valid date*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0EW01.TS0EWBDT = TA2REC.TA2GRGGN; /* Save date*/
    else /* Invalid date entered*/
      set TS0EM002.TSDBEGDT cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(57); /* error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    end
  end

  if (TS0EW01.TS0EWPSW == "N") /* No errors have occured*/
    if (TS0EW01.TS0EWEDT < TS0EW01.TS0EWBDT) /* date span error*/
      set TS0EM002.TSDENDDT cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(58); /* error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    end
  end

  if (TS0EW01.TS0EWPSW == "N") /* No errors have occured*/
    set TSDREC empty; /* empty record*/
    TSDREC.TSACARCD = TS0EM002.TSACARCD;
    TSDREC.TSDBEGDT = TS0EW01.TS0EWBDT;
    TSDREC.TSDENDDT = TS0EW01.TS0EWEDT;
    TSDREC.YSTCD = TS0EM002.YSTCD;
    TS0E243(); /* Select row to see if unique*/
    if (SQLCA.VAGen_SQLCODE != 100) /* If row exists*/
      converseLib.validationFailed(26);
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
      TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
      set TS0EM002.TSDBEGDT cursor, modified, bold; /* Set cursor*/
      set TS0EM002.TSDENDDT modified, bold;
    end
  end

  if (TS0EM002.TSDCONTR == " ") /* If contract not entered*/
    converseLib.validationFailed(54);
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E241"; /* Process name*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
    set TS0EM002.TSDCONTR cursor, modified, bold; /* Set cursor*/
  end

  if (TS0EM002.TSDCMTCN == 0 /* If all commitment amounts are 0*/
   && TS0EM002.TSDCMTCM == 0 
   && TS0EM002.TSDCMTKG == 0 
   && TS0EM002.TSDCMTDL == 0)
    TS0EM002.TSDMETFL = "N"; /* Set contr met flag to no*/
  else
    if (TS0EM002.TSDCMTCN != 0) /* If commitment NE 0*/
      if (TS0EM002.TSDCMTCN <= TS0EM002.TSDTDTCN) /* LT ship to date amt*/
        TS0EM002.TSDMETFL = "Y"; /* Set contr met flag to yes*/
      end
    end
    if (TS0EM002.TSDCMTCM != 0) /* If commitment NE 0*/
      if (TS0EM002.TSDCMTCM <= TS0EM002.TSDTDTCM) /* LT ship to date amt*/
        TS0EM002.TSDMETFL = "Y"; /* Set contr met flag to yes*/
      end
    end
    if (TS0EM002.TSDCMTKG != 0) /* If commitment NE 0*/
      if (TS0EM002.TSDCMTKG <= TS0EM002.TSDTDTKG) /* LT ship to date amt*/
        TS0EM002.TSDMETFL = "Y"; /* Set contr met flag to yes*/
      end
    end
    if (TS0EM002.TSDCMTDL != 0) /* If commitment NE 0*/
      if (TS0EM002.TSDCMTDL <= TS0EM002.TSDTDTDL) /* LT ship to date amt*/
        TS0EM002.TSDMETFL = "Y"; /* Set contr met flag to yes*/
      end
    end
  end

    /* Calculate percentage met fields*/

  if (TS0EM002.TSDCMTCN != 0) /* If  commitment NE 0*/
    TS0EW01.TS0EWPMT = TS0EM002.TSDTDTCN / TS0EM002.TSDCMTCN;
    TS0EM002.TS0EM1PC = TS0EW01.TS0EWPMT * 100;
  else
    TS0EM002.TS0EM1PC = 0; /* Set percentage to 0*/
  end

  if (TS0EM002.TSDCMTCM != 0) /* If  commitment NE 0*/
    TS0EW01.TS0EWPMT = TS0EM002.TSDTDTCM / TS0EM002.TSDCMTCM;
    TS0EM002.TS0EM2PC = TS0EW01.TS0EWPMT * 100;
  else
    TS0EM002.TS0EM2PC = 0; /* Set percentage to 0*/
  end

  if (TS0EM002.TSDCMTKG != 0) /* If  commitment NE 0*/
    TS0EW01.TS0EWPMT = TS0EM002.TSDTDTKG / TS0EM002.TSDCMTKG;
    TS0EM002.TS0EM3PC = TS0EW01.TS0EWPMT * 100;
  else
    TS0EM002.TS0EM3PC = 0; /* Set percentage to 0*/
  end

  if (TS0EM002.TSDCMTDL != 0) /* If  commitment NE 0*/
    TS0EW01.TS0EWPMT = TS0EM002.TSDTDTDL / TS0EM002.TSDCMTDL;
    TS0EM002.TS0EM4PC = TS0EW01.TS0EWPMT * 100;
  else
    TS0EM002.TS0EM4PC = 0; /* Set percentage to 0*/
  end


end // end TS0E241

// Perform date routine
Function TS0E242()
   /* ------------------------------------------------------------*/
   /* Check for valid date.*/
   /* ------------------------------------------------------------*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Date routine*/


end // end TS0E242

// Select contract table row
Function TS0E243()
   /* ------------------------------------------------------------*/
   /* This module selects a table row.*/
   /* ***********************************************************/
   /* * This alternate select module is designed to return a   **/
   /* * valid error code whenever an input date overlaps in    **/
   /* * the data base.  Therefore, if any number of rows are   **/
   /* * returned from the database a valid error has occurred. **/
   /* * If one row or many rows are returned the error 100 or  **/
   /* * -811 are valid.                                        **/
   /* ***********************************************************/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO1560" ("SA", SQLCA, TSDREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0   /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100 /* handled in previous process*/
   && SQLCA.VAGen_SQLCODE != -811) /* and no more than one row returned*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0E243"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0EM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCONTR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EW01.TS0EWPSW = "Y"; /* Indicate Problem*/
    TS0EM001.XXXPRCNM = "TS0E243"; /* Process name*/
  end


end // end TS0E243

// Process valid input request
Function TS0E250()
   /* ------------------------------------------------------------*/
   /* Verify that no table row exists for the agent.*/
   /* If found then display message that this row exists in*/
     /* either active or inactive status.*/
   /* If not found then add the row.*/
   /* ------------------------------------------------------------*/

  set TSDREC empty; /* clear record*/

  TSDREC.TSACARCD = TS0EM002.TSACARCD; /* carrier code*/
  TSDREC.TSDBEGDT = TS0EM002.TSDBEGDT;
  TSDREC.TSDENDDT = TS0EM002.TSDENDDT;
  TSDREC.YSTCD = TS0EM002.YSTCD;

  if (converseVar.eventKey is enter /* Enter was pressed*/
   && TS0EW01.TS0EWDEF == "Y"       /* and data was entered*/
   && converseVar.validationMsgNum == 0) /* and no errors*/
    TS0EW01.TS0EWCSK = TS0EM002.TSDCONTR; /* Save csk key*/
    TS0E243(); /* Select  table row*/
    if (SQLCA.VAGen_SQLCODE != 100) /* If row exists*/
      converseLib.validationFailed(25);
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0D250"; /* Process name*/
      TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
      set TS0EM002.TSDCONTR cursor, modified, bold; /* Set cursor*/
    end
    if (TS0EW01.TS0EWPSW == "N") /* No errors exist*/
      TS0E252(); /* Add the new table row*/
      if (SQLCA.VAGen_SQLCODE == 0 /* If add successful*/
       && TS0EWCFL == "N")         /* and carrier contract flag no*/
        TSAREC.TSACONFL = "Y"; /* set carrier contract to yes*/
        TS0E251(); /* Update carrier table*/
      end
      if (SQLCA.VAGen_SQLCODE == 0) /* If update successful*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* commit add and update*/
        TS0EW01.TS0EWMFL = "Y"; /* Set message flag to yes*/
      else
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
         /* Do not commit update and add*/
      end
    end
  end

  if (TS0EW01.TS0EWPSW == "N") /* No errors exist*/
    set TSDREC empty; /* Clear record*/
    TS0EW01.TSACARCD = " "; /* Reset screen keys*/
    TSAREC.TSACARCD = TS0EM002.TSACARCD; /* Set screen load keys*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
    set TS0EM002 initial; /* Clear map*/
  end


end // end TS0E250

// Updated selected row
Function TS0E251()
   /* ------------------------------------------------------------*/
   /* Update the carrier row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO2340" ("U ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0E251"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = "TS0EM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EM001.XXXPRCNM = "TS0E251"; /* Process name*/

  end


end // end TS0E251

// Add Contract table row
Function TS0E252()
   /* ------------------------------------------------------------*/
   /* This module adds a contract table row.*/
   /* It will return and document system errors if unexpected*/
     /* return codes are found.*/
   /* ------------------------------------------------------------*/

  TSDREC.TSACARCD = TS0EM002.TSACARCD; /* MOVE FIELDS TO RECORD*/
  TSDREC.TSDCONTR = TS0EM002.TSDCONTR;
  TSDREC.TSDMETFL = TS0EM002.TSDMETFL;
  TSDREC.TSDBEGDT = TS0EW01.TS0EWBDT;
  TSDREC.TSDENDDT = TS0EW01.TS0EWEDT;
  TSDREC.YSTCD = TS0EM002.YSTCD;
  TSDREC.YCOCD = TS0EM002.YCOCD;
  TSDREC.TSDCMTCN = TS0EM002.TSDCMTCN;
  TSDREC.TSDCMTCM = TS0EM002.TSDCMTCM;
  TSDREC.TSDCMTKG = TS0EM002.TSDCMTKG;
  TSDREC.TSDCMTDL = TS0EM002.TSDCMTDL;
  TSDREC.TSDTDTCN = TS0EM002.TSDTDTCN;
  TSDREC.TSDTDTCM = TS0EM002.TSDTDTCM;
  TSDREC.TSDTDTKG = TS0EM002.TSDTDTKG;
  TSDREC.TSDTDTDL = TS0EM002.TSDTDTDL;
  TSDREC.TSDSHCN = TS0EM002.TSDSHCN;
  TSDREC.TSDSHCM = TS0EM002.TSDSHCM;
  TSDREC.TSDSHKG = TS0EM002.TSDSHKG;
  TSDREC.TSDSHDL = TS0EM002.TSDSHDL;
  TSDREC.XXXSTAT = "A";
  /* -----------------------  Y2K OUT BEGIN  ------------------*/
  /*  */
  /* MOVE EZEDTE TO TS0EW01.TS0EWYMD;  /* Working change date*/
  /*  */
  /* ------------------------  Y2K OUT END  ------------------*/
  /* -----------------------  Y2K IN BEGIN  ------------*/
  /*  */
  TS0EW01.TS0EWDTE = VGVar.currentGregorianDate;
  /*  */
  /* ------------------------  Y2K IN END  -------------*/
  TSDREC.ZZZCHGDT = TS0EW01.TS0EWDTE;
  TSDREC.ZZZSDT = TS0EW01.TS0EWDTE; /* Set up date*/
  TS0EW01.TS0EWTM1 = VGVar.currentFormattedTime; /* Working time 1*/
  TS0EW01.TS0EWHR3 = TS0EW01.TS0EWHR1;
  TS0EW01.TS0EWMN3 = TS0EW01.TS0EWMN1;
  TSDREC.ZZZCHGTM = TS0EW01.TS0EWTM3; /* Change time*/
  TSDREC.ZZZCHGCT = 0;

  call "IO1560" ("A ", SQLCA, TSDREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0D243"; /* Process name*/
    TA1REC.TA1LOC = "ADD A UNIQUE TABLE ROW";
    TA1REC.TA1MAP = "TS0EM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCONTR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EM001.XXXPRCNM = "TS0E243"; /* Process name*/
  end


end // end TS0E252

// Contract Main. chg map
Function TS0E300()
   /* ------------------------------------------------------------*/
   /* This is the process to display a change map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0E310(); /* Obtain the data to display*/

  TS0E320(); /* Format and display the map*/

  TS0E330(); /* Check attention identifier*/

  TS0E340(); /* Reset Highlighted fields*/

  TS0E350(); /* Verify the entered data*/

  TS0E360(); /* Process valid input request*/


end // end TS0E300

// Obtain the data to display
Function TS0E310()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on location inquiry map.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWPSW == "N" /* No errors*/
   || TS0EW01.TS0EWURF == "Y") /* or update reload flag is yes*/
    TSDREC.TSACARCD = TS0EM001.TSACARCD; /* Carrier code*/
    TSDREC.TSDBEGDT = TS0EW02.TSDBEGDT[TS0EWIXM]; /* move dates*/
    TSDREC.TSDENDDT = TS0EW02.TSDENDDT[TS0EWIXM]; /* move dates*/
    TSDREC.YSTCD = TS0EM001.YSTCD[TS0EWIXM]; /* Ship type*/
    TS0E311(); /* Select data for map*/
    TS0EW01.TS0EWBDT = TSDREC.TSDBEGDT; /* Save dates*/
    TS0EW01.TS0EWEDT = TSDREC.TSDENDDT;
    TS0EW01.TS0EWSED = TSDREC.TSDENDDT; /* Save the original end dt*/
    TS0EW01.TS0EWSST = TSDREC.XXXSTAT; /* Save status*/
    TS0EW01.TS0EWSDT = TSDREC.ZZZSDT; /* Save set up date*/
    TS0EW01.TS0EWCCT = TSDREC.ZZZCHGCT; /* Save change count*/
  end


end // end TS0E310

// Select contract table row
Function TS0E311()
   /* ------------------------------------------------------------*/
   /* This module selects a table row.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO1560" ("S ", SQLCA, TSDREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0D311"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCONTR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0EW01.TS0EWPSW = "Y"; /* Indicate Problem*/
    TS0EM001.XXXPRCNM = "TS0D311"; /* Process name*/
  end


end // end TS0E311

// Format and display chg map
Function TS0E320()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWPSW == "N") /* No error*/
    set TS0EM002 initial; /* Clear map output area*/
    TS0EM002.TS0EMMSG = "PLEASE ENTER YOUR CHANGES";
    set TS0EM002.TSDCONTR cursor; /* set cursor*/
    TS0EM002.TS0EMFUN = "CHANGE"; /* Move change literal to map*/
    TS0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TS0EM002.TSACARCD = TSDREC.TSACARCD; /* Move selected fields*/
    TS0EM002.TSACARNM = TS0EM001.TSACARNM; /* to map*/
    TS0EM002.TSDCONTR = TS0EM001.TSDCONTR[TS0EWIXM];
    TS0EW01.TS0EWCSK = TS0EM001.TSDCONTR[TS0EWIXM]; /* Save key*/
    TS0EM002.TSDMETFL = TSDREC.TSDMETFL;

       /* transform date to fit map (mmddyy)*/

    set TA2REC empty; /* Beginning date*/
    TA2REC.TA2GRGGN = TSDREC.TSDBEGDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TS0E242(); /* get dates*/
    TS0EM002.TSDBEGDT = TA2REC.TA2GRGAN;

    set TA2REC empty; /* Ending date*/
    TA2REC.TA2GRGGN = TSDREC.TSDENDDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TS0E242(); /* get dates*/
    TS0EM002.TSDENDDT = TA2REC.TA2GRGAN;
    TS0EW01.TS0EWMED = TS0EM002.TSDENDDT; /* save end date*/



    TS0EM002.YSTCD = TSDREC.YSTCD;
    if (TSDREC.YSTCD in YSTTBL.YSTCD)
      TS0EM002.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
    end
    TS0EM002.YCOCD = TSDREC.YCOCD;
    if (TSDREC.YCOCD in YCOTBL.YCOCD)
      TS0EM002.YCOSDESC = YCOTBL.YCOSDESC[sysVar.arrayIndex];
    end
    TS0EM002.TSDCMTCN = TSDREC.TSDCMTCN;
    TS0EM002.TSDCMTCM = TSDREC.TSDCMTCM;
    TS0EM002.TSDCMTKG = TSDREC.TSDCMTKG;
    TS0EM002.TSDCMTDL = TSDREC.TSDCMTDL;
    TS0EM002.TSDTDTCN = TSDREC.TSDTDTCN;
    TS0EM002.TSDTDTCM = TSDREC.TSDTDTCM;
    TS0EM002.TSDTDTKG = TSDREC.TSDTDTKG;
    TS0EM002.TSDTDTDL = TSDREC.TSDTDTDL;

      /* Calculate percentage met fields*/

    if (TS0EM002.TSDCMTCN != 0) /* If  commitment NE 0*/
      TS0EW01.TS0EWPMT = TS0EM002.TSDTDTCN / TS0EM002.TSDCMTCN;
      TS0EM002.TS0EM1PC = TS0EW01.TS0EWPMT * 100;
    else
      TS0EM002.TS0EM1PC = 0; /* Set percentage to 0*/
    end

    if (TS0EM002.TSDCMTCM != 0) /* If  commitment NE 0*/
      TS0EW01.TS0EWPMT = TS0EM002.TSDTDTCM / TS0EM002.TSDCMTCM;
      TS0EM002.TS0EM2PC = TS0EW01.TS0EWPMT * 100;
    else
      TS0EM002.TS0EM2PC = 0; /* Set percentage to 0*/
    end

    if (TS0EM002.TSDCMTKG != 0) /* If  commitment NE 0*/
      TS0EW01.TS0EWPMT = TS0EM002.TSDTDTKG / TS0EM002.TSDCMTKG;
      TS0EM002.TS0EM3PC = TS0EW01.TS0EWPMT * 100;
    else
      TS0EM002.TS0EM3PC = 0; /* Set percentage to 0*/
    end

    if (TS0EM002.TSDCMTDL != 0) /* If  commitment NE 0*/
      TS0EW01.TS0EWPMT = TS0EM002.TSDTDTDL / TS0EM002.TSDCMTDL;
      TS0EM002.TS0EM4PC = TS0EW01.TS0EWPMT * 100;
    else
      TS0EM002.TS0EM4PC = 0; /* Set percentage to 0*/
    end

    TS0EM002.TSDSHCN = TSDREC.TSDSHCN;
    TS0EM002.TSDSHCM = TSDREC.TSDSHCM;
    TS0EM002.TSDSHKG = TSDREC.TSDSHKG;
    TS0EM002.TSDSHDL = TSDREC.TSDSHDL;
    TS0EM002.ZZZSDT = TSDREC.ZZZSDT;
    TS0EM002.ZZZCHGDT = TSDREC.ZZZCHGDT;
  end

  /* IF EZEMNO NE 0;                   /* Errors exist*/
  /* SET TS0EM002 ALARM;*/
  /* END;*/

  set TS0EM002.TSDBEGDT protect; /* Protect the date*/
  set TS0EM002.YSTCD protect; /* Protect the ship code*/

  converse TS0EM002 ;

  TS0EW01.TS0EWPSW = "N"; /* Initialize problem switch*/

  TS0E211(); /* Check for ? inquiry by user*/


end // end TS0E320

// Check attention identifier
Function TS0E330()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0EM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0EM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0EM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0EM002.CAITEM; /* Application data*/
      TS0E112(); /* Purge temporary storage*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0EM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0EM002.XXXPRCNM = "TS0E330"; /* Process name*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0EW01.TS0EWMAP = "1"; /* Move to map 1*/
    TS0EW01.TS0EWMFL = "N"; /* Reset message flag*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0EM002"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0E112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0EM002.XXXPRCNM = "TS0E330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0C"; /* Fast path to carrier*/
    COMMAREA.CAITEM = TS0EM002.TSACARCD;
    TS0E112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0EM002.XXXPRCNM = "TS0E330"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0EM002.XXXPRCNM = "TS0E330"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0E330

// Reset highlighted fields
Function TS0E340()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0EM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0EM002.CAITEM initialAttributes; /* Commarea application data*/
  set TS0EM002.TSDCONTR initialAttributes; /* Map fields*/
  set TS0EM002.TSDMETFL initialAttributes;
  set TS0EM002.TSDBEGDT initialAttributes;
  set TS0EM002.TSDENDDT initialAttributes;
  set TS0EM002.YSTCD initialAttributes;
  set TS0EM002.YCOCD initialAttributes;
  set TS0EM002.TSDCMTCN initialAttributes;
  set TS0EM002.TSDCMTCM initialAttributes;
  set TS0EM002.TSDCMTKG initialAttributes;
  set TS0EM002.TSDCMTDL initialAttributes;
  set TS0EM002.TSDTDTCN initialAttributes;
  set TS0EM002.TSDTDTCM initialAttributes;
  set TS0EM002.TSDTDTKG initialAttributes;
  set TS0EM002.TSDTDTDL initialAttributes;
  set TS0EM002.TS0EM1PC initialAttributes;
  set TS0EM002.TS0EM2PC initialAttributes;
  set TS0EM002.TS0EM3PC initialAttributes;
  set TS0EM002.TS0EM4PC initialAttributes;
  set TS0EM002.TSDSHCN initialAttributes;
  set TS0EM002.TSDSHCM initialAttributes;
  set TS0EM002.TSDSHKG initialAttributes;
  set TS0EM002.TSDSHDL initialAttributes;


end // end TS0E340

// Verify the entered data
Function TS0E350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0EW01.TS0EWDEF = "N"; /* Initialize data entered flag*/

  if (TS0EM002.CAITEM > " ") /* Application data was entered*/
    set TS0EM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E240"; /* Process name*/
  end

  if (converseVar.eventKey is enter         /* If ENTER was pressed*/
   && TS0EW01.TS0EWPSW == "N"               /* and no errors*/
   && TS0EM002.TSDCONTR == TSDREC.TSDCONTR  /* and no changes*/
   && TS0EM002.TSDENDDT == TS0EW01.TS0EWMED /* Working map date*/
   && TS0EM002.YCOCD == TSDREC.YCOCD        
   && TS0EM002.TSDCMTCN == TSDREC.TSDCMTCN  
   && TS0EM002.TSDCMTCM == TSDREC.TSDCMTCM  
   && TS0EM002.TSDCMTKG == TSDREC.TSDCMTKG  
   && TS0EM002.TSDCMTDL == TSDREC.TSDCMTDL  
   && TS0EM002.TSDSHCN == TSDREC.TSDSHCN    
   && TS0EM002.TSDSHCM == TSDREC.TSDSHCM    
   && TS0EM002.TSDSHKG == TSDREC.TSDSHKG    
   && TS0EM002.TSDSHDL == TSDREC.TSDSHDL)  
    TS0EM001.TS0EMSEL[TS0EWIXM] = " "; /* Clear select field*/
    exit stack; /* Exit to redisplay map*/
  else
    TS0E351(); /* Validate input data*/
  end



end // end TS0E350

// Validate any input data
Function TS0E351()
   /* ------------------------------------------------------------*/
   /* Validate any input data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  TS0EW01.TS0EWDEF = "Y"; /* Data has been entered*/

  TS0EM002.ZZZSDT = VGVar.currentShortGregorianDate; /* Creation date*/
  TS0EM002.ZZZCHGDT = VGVar.currentShortGregorianDate; /* Modification date (Init.)*/
  TS0EM002.TSDMETFL = "N"; /* Set contr met to no*/

  if (TS0EM002.YCOCD == " ") /* If contract not type entered*/
    converseLib.validationFailed(55); /* Display error message*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
    TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0EM002.YCOSDESC = " "; /* Clear description*/
    set TS0EM002.YCOCD cursor, modified, bold; /* highlight field*/
  else /* Onctract type ebtered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0EM002.YCOCD in YCOTBL.YCOCD) /* Check valid contract type*/
    end

    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(55); /* Display error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0EM002.YCOSDESC = " "; /* Clear description*/
      set TS0EM002.YCOCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      if ("A" in YCOTBL.XXXSTAT from sysVar.arrayIndex)
        TS0EM002.YCOSDESC = YCOTBL.YCOSDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(55); /* Display error message*/
        TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
        TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
        TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
        TS0EM002.YCOSDESC = " "; /* Clear description*/
        set TS0EM002.YCOCD cursor, modified, bold; /* highlight field*/
      end
    end
  end

  if (TS0EM002.YSTCD == " ") /* If shipment not type entered*/
    converseLib.validationFailed(56); /* Display error message*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
    TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    TS0EM002.YSTSDESC = " "; /* Clear description*/
    set TS0EM002.YSTCD cursor, modified, bold; /* highlight field*/
  else /* If shipment type entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0EM002.YSTCD in YSTTBL.YSTCD) /* Check valid shipment type*/
    end

    if (sysVar.arrayIndex == 0) /* Not in table*/
      converseLib.validationFailed(56); /* Display error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
      TS0EM002.YSTSDESC = " "; /* Clear description*/
      set TS0EM002.YSTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      if ("A" in YSTTBL.XXXSTAT from sysVar.arrayIndex)
        TS0EM002.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
      else
        converseLib.validationFailed(55); /* Display error message*/
        TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
        TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
        TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
        TS0EM002.YSTSDESC = " "; /* Clear description*/
        set TS0EM002.YSTCD cursor, modified, bold; /* highlight field*/
      end
    end
  end

  if (TS0EM002.TSDENDDT == 0) /* If date not entered*/
    set TS0EM002.TSDENDDT cursor, modified, bold; /* highlight field*/
    converseLib.validationFailed(57); /* error message*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
    TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
  else
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGAN = TS0EM002.TSDENDDT; /* move date to record*/
    TS0E242(); /* Check valid date*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0EW01.TS0EWEDT = TA2REC.TA2GRGGN; /* Save date*/
    else /* Invalid date entered*/
      set TS0EM002.TSDENDDT cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(57); /* error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    end
  end

  if (TS0EW01.TS0EWPSW == "N") /* No errors have occured*/
    if (TS0EW01.TS0EWEDT < TS0EW01.TS0EWBDT) /* date span error*/
      set TS0EM002.TSDENDDT cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(58); /* error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    end
  end

  if (TS0EW01.TS0EWPSW == "N" /* No errors check date overlap*/
   && TS0EW01.TS0EWEDT > TS0EW01.TS0EWSED) /* changed date is larger*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "G"; /* move date type to record*/
    TA2REC.TA2GRGGN = TS0EW01.TS0EWSED; /* move date to record*/
    TA2REC.TA2DYAOD = 1; /* add 1 to from date*/
    TS0E242();
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      set TSDREC empty; /* Empty record*/
      TSDREC.TSACARCD = TS0EM002.TSACARCD;
      TSDREC.TSDBEGDT = TA2REC.TA2GRGGN;
      TSDREC.TSDENDDT = TS0EW01.TS0EWEDT;
      TSDREC.YSTCD = TS0EM002.YSTCD;
      TS0E243(); /* Select row to see if unique*/
      if (SQLCA.VAGen_SQLCODE != 100) /* If row exists*/
        converseLib.validationFailed(26);
        TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
        TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
        TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
        set TS0EM002.TSDENDDT cursor, modified, bold; /* Set cursor*/
      end
    else /* Invalid date entered*/
      set TS0EM002.TSDENDDT cursor, modified, bold; /* highlight field*/
      converseLib.validationFailed(57); /* error message*/
      TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
      TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
      TS0EM002.TS0EMMSG = "PLEASE CORRECT FIELDS IN ERROR";
    end
  end

  if (TS0EM002.TSDCONTR == " ") /* If contract not entered*/
    converseLib.validationFailed(54);
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0E351"; /* Process name*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
    set TS0EM002.TSDCONTR cursor, modified, bold; /* Set cursor*/
  end

  if (TS0EM002.TSDCMTCN == 0 /* If all commitment amounts are 0*/
   && TS0EM002.TSDCMTCM == 0 
   && TS0EM002.TSDCMTKG == 0 
   && TS0EM002.TSDCMTDL == 0)
    TS0EM002.TSDMETFL = "N"; /* Set contr met flag to no*/
  else
    if (TS0EM002.TSDCMTCN != 0) /* If commitment NE 0*/
      if (TS0EM002.TSDCMTCN <= TS0EM002.TSDTDTCN) /* LT ship to date amt*/
        TS0EM002.TSDMETFL = "Y"; /* Set contr met flag to yes*/
      end
    end
    if (TS0EM002.TSDCMTCM != 0) /* If commitment NE 0*/
      if (TS0EM002.TSDCMTCM <= TS0EM002.TSDTDTCM) /* LT ship to date amt*/
        TS0EM002.TSDMETFL = "Y"; /* Set contr met flag to yes*/
      end
    end
    if (TS0EM002.TSDCMTKG != 0) /* If commitment NE 0*/
      if (TS0EM002.TSDCMTKG <= TS0EM002.TSDTDTKG) /* LT ship to date amt*/
        TS0EM002.TSDMETFL = "Y"; /* Set contr met flag to yes*/
      end
    end
    if (TS0EM002.TSDCMTDL != 0) /* If commitment NE 0*/
      if (TS0EM002.TSDCMTDL <= TS0EM002.TSDTDTDL) /* LT ship to date amt*/
        TS0EM002.TSDMETFL = "Y"; /* Set contr met flag to yes*/
      end
    end
  end

    /* Calculate percentage met fields*/

  if (TS0EM002.TSDCMTCN != 0) /* If  commitment NE 0*/
    TS0EW01.TS0EWPMT = TS0EM002.TSDTDTCN / TS0EM002.TSDCMTCN;
    TS0EM002.TS0EM1PC = TS0EW01.TS0EWPMT * 100;
  else
    TS0EM002.TS0EM1PC = 0; /* Set percentage to 0*/
  end

  if (TS0EM002.TSDCMTCM != 0) /* If  commitment NE 0*/
    TS0EW01.TS0EWPMT = TS0EM002.TSDTDTCM / TS0EM002.TSDCMTCM;
    TS0EM002.TS0EM2PC = TS0EW01.TS0EWPMT * 100;
  else
    TS0EM002.TS0EM2PC = 0; /* Set percentage to 0*/
  end

  if (TS0EM002.TSDCMTKG != 0) /* If  commitment NE 0*/
    TS0EW01.TS0EWPMT = TS0EM002.TSDTDTKG / TS0EM002.TSDCMTKG;
    TS0EM002.TS0EM3PC = TS0EW01.TS0EWPMT * 100;
  else
    TS0EM002.TS0EM3PC = 0; /* Set percentage to 0*/
  end

  if (TS0EM002.TSDCMTDL != 0) /* If  commitment NE 0*/
    TS0EW01.TS0EWPMT = TS0EM002.TSDTDTDL / TS0EM002.TSDCMTDL;
    TS0EM002.TS0EM4PC = TS0EW01.TS0EWPMT * 100;
  else
    TS0EM002.TS0EM4PC = 0; /* Set percentage to 0*/
  end


end // end TS0E351

// Process valid input request
Function TS0E360()
   /* ------------------------------------------------------------*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWPSW == "Y") /* errors occurred*/
    exit stack;
  else
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && TS0EW01.TS0EWPSW == "N"       /* and no errors*/
     && TS0EW01.TS0EWDEF == "Y")      /* and data was entered*/

      TSDREC.TSACARCD = TS0EM002.TSACARCD; /* MOVE FIELDS TO RECORD*/
      TSDREC.TSDCONTR = TS0EM002.TSDCONTR;
      TSDREC.TSDMETFL = TS0EM002.TSDMETFL;
      TSDREC.TSDBEGDT = TS0EW01.TS0EWBDT;
      TSDREC.TSDENDDT = TS0EW01.TS0EWEDT;
      TSDREC.YSTCD = TS0EM002.YSTCD;
      TSDREC.YCOCD = TS0EM002.YCOCD;
      TSDREC.TSDCMTCN = TS0EM002.TSDCMTCN;
      TSDREC.TSDCMTCM = TS0EM002.TSDCMTCM;
      TSDREC.TSDCMTKG = TS0EM002.TSDCMTKG;
      TSDREC.TSDCMTDL = TS0EM002.TSDCMTDL;
      TSDREC.TSDTDTCN = TS0EM002.TSDTDTCN;
      TSDREC.TSDTDTCM = TS0EM002.TSDTDTCM;
      TSDREC.TSDTDTKG = TS0EM002.TSDTDTKG;
      TSDREC.TSDTDTDL = TS0EM002.TSDTDTDL;
      TSDREC.TSDSHCN = TS0EM002.TSDSHCN;
      TSDREC.TSDSHCM = TS0EM002.TSDSHCM;
      TSDREC.TSDSHKG = TS0EM002.TSDSHKG;
      TSDREC.TSDSHDL = TS0EM002.TSDSHDL;
  /* -----------------------  Y2K OUT BEGIN  -----------*/
  /*  */
  /* MOVE EZEDTE TO TS0EW01.TS0EWYMD;     /* Working change date*/
  /*  */
  /* ------------------------  Y2K OUT END  -----------------*/
  /* -----------------------  Y2K IN BEGIN  --------------*/
  /*  */
      TS0EW01.TS0EWDTE = VGVar.currentGregorianDate;
  /*  */
  /* ------------------------  Y2K IN END  ---------------*/
      TSDREC.XXXSTAT = TS0EW01.TS0EWSST;
      TSDREC.ZZZCHGDT = TS0EW01.TS0EWDTE;
      TSDREC.ZZZSDT = TS0EW01.TS0EWSDT;
      TS0EW01.TS0EWTM1 = VGVar.currentFormattedTime; /* Working time 1*/
      TS0EW01.TS0EWHR3 = TS0EW01.TS0EWHR1;
      TS0EW01.TS0EWMN3 = TS0EW01.TS0EWMN1;
      TSDREC.ZZZCHGTM = TS0EW01.TS0EWTM3; /* Change time*/
      TSDREC.ZZZCHGCT = TS0EW01.TS0EWCCT; /* Change count*/

      TS0E361(); /* Update table*/

      TS0EW01.TS0EWURF = "N"; /* Initialize upd reload flag*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row was found*/
        TS0EW01.TS0EWCSK = TS0EM002.TSDCONTR; /* Set change save key*/
        if (TS0EWCFL == "N") /* carrier contract flag no*/
          TSAREC.TSACONFL = "Y"; /* set carrier contract to yes*/
          TS0E251(); /* Update carrier table*/
        end
        if (SQLCA.VAGen_SQLCODE == 0) /* If update successful*/
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.commit();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* commit change and update*/
          TS0EW01.TS0EWMFL = "Y"; /* Set message flag to yes*/
          TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
          TS0EM001.TS0EMSEL[TS0EWIXM] = " "; /* Set blank to select*/
          set TS0EM002 initial; /* Clear map area*/
        else
          VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
          VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
          sysLib.rollback();
          VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
           /* Do not commit updates*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* row was not found*/
          converseLib.validationFailed(12); /* update error occured*/
          TS0EM002.XXXPRCNM = "TS0E360"; /* Process name*/
          TS0EW01.TS0EWURF = "Y"; /* Set update reload flag*/
          TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
          exit stack; /* exit to redisplay map*/
        end
      end

      if (TS0EW01.TS0EWPSW == "N") /* IF no errors occured*/
        TSDREC.TSACARCD = TS0EW01.TSACARCD; /* Move map fields to*/
      else
        exit stack; /* Exit to redisplay map*/
      end
    end
  end


end // end TS0E360

// Updated Contract row
Function TS0E361()
   /* ------------------------------------------------------------*/
   /* Update the contract row.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  call "IO1560" ("U ", SQLCA, TSDREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0EW01.TS0EWSWC = "Y"; /* Indicate end of file*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0EW01.TS0EWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0EW01.TS0EWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0E361"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0EM002"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCONTR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0EM001.XXXPRCNM = "TS0E361"; /* Process name*/

    end
  end


end // end TS0E361

// Contract Main. Inquiry Map
Function TS0E400()
   /* ------------------------------------------------------------*/
   /* This is the process to display a delete map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0E410(); /* Obtain the data to display*/

  TS0E420(); /* Format and display the map*/

  TS0E430(); /* Check attention identifier*/

  TS0E440(); /* Reset Highlighted fields*/

  TS0E450(); /* Verify the entered data*/

  TS0E460(); /* Process valid input request*/


end // end TS0E400

// Obtain the data to display
Function TS0E410()
   /* ------------------------------------------------------------*/
   /* Obtain data to be displayed on delete map from selected*/
     /* row on location inquiry map.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWPSW == "N") /* No errors*/
    TSDREC.TSACARCD = TS0EM001.TSACARCD; /* Carrier code*/
    TSDREC.TSDBEGDT = TS0EW02.TSDBEGDT[TS0EWIXM]; /* move dates*/
    TSDREC.TSDENDDT = TS0EW02.TSDENDDT[TS0EWIXM]; /* move dates*/
    TSDREC.YSTCD = TS0EM001.YSTCD[TS0EWIXM]; /* Ship type*/
    TS0E311(); /* Select data for map*/
  end


end // end TS0E410

// Format and display Inq map
Function TS0E420()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWPSW == "N") /* No error*/
    set TS0EM002 initial; /* Clear map output area*/
    set TS0EM002.CATOAP cursor;
    TS0EM002.TS0EMFUN = "INQUIRY"; /* Move inquiry literal to map*/
    TS0EM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    TS0EM002.TSACARCD = TSDREC.TSACARCD; /* Move selected fields*/
    TS0EM002.TSACARNM = TS0EM001.TSACARNM; /* to map*/
    TS0EM002.TSDCONTR = TS0EM001.TSDCONTR[TS0EWIXM];
    TS0EW01.TS0EWCSK = TS0EM001.TSDCONTR[TS0EWIXM]; /* Save key*/
    TS0EM002.TSDMETFL = TSDREC.TSDMETFL;

       /* transform date to fit map (mmddyy)*/

    set TA2REC empty; /* Beginning date*/
    TA2REC.TA2GRGGN = TSDREC.TSDBEGDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TS0E242(); /* get dates*/
    TS0EM002.TSDBEGDT = TA2REC.TA2GRGAN;

    set TA2REC empty; /* Ending date*/
    TA2REC.TA2GRGGN = TSDREC.TSDENDDT;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TS0E242(); /* get dates*/
    TS0EM002.TSDENDDT = TA2REC.TA2GRGAN;


    TS0EM002.YSTCD = TSDREC.YSTCD;
    if (TSDREC.YSTCD in YSTTBL.YSTCD)
      TS0EM002.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
    end
    TS0EM002.YCOCD = TSDREC.YCOCD;
    if (TSDREC.YCOCD in YCOTBL.YCOCD)
      TS0EM002.YCOSDESC = YCOTBL.YCOSDESC[sysVar.arrayIndex];
    end
    TS0EM002.TSDCMTCN = TSDREC.TSDCMTCN;
    TS0EM002.TSDCMTCM = TSDREC.TSDCMTCM;
    TS0EM002.TSDCMTKG = TSDREC.TSDCMTKG;
    TS0EM002.TSDCMTDL = TSDREC.TSDCMTDL;
    TS0EM002.TSDTDTCN = TSDREC.TSDTDTCN;
    TS0EM002.TSDTDTCM = TSDREC.TSDTDTCM;
    TS0EM002.TSDTDTKG = TSDREC.TSDTDTKG;
    TS0EM002.TSDTDTDL = TSDREC.TSDTDTDL;

      /* Calculate percentage met fields*/

    if (TS0EM002.TSDCMTCN != 0) /* If  commitment NE 0*/
      TS0EW01.TS0EWPMT = TS0EM002.TSDTDTCN / TS0EM002.TSDCMTCN;
      TS0EM002.TS0EM1PC = TS0EW01.TS0EWPMT * 100;
    else
      TS0EM002.TS0EM1PC = 0; /* Set percentage to 0*/
    end

    if (TS0EM002.TSDCMTCM != 0) /* If  commitment NE 0*/
      TS0EW01.TS0EWPMT = TS0EM002.TSDTDTCM / TS0EM002.TSDCMTCM;
      TS0EM002.TS0EM2PC = TS0EW01.TS0EWPMT * 100;
    else
      TS0EM002.TS0EM2PC = 0; /* Set percentage to 0*/
    end

    if (TS0EM002.TSDCMTKG != 0) /* If  commitment NE 0*/
      TS0EW01.TS0EWPMT = TS0EM002.TSDTDTKG / TS0EM002.TSDCMTKG;
      TS0EM002.TS0EM3PC = TS0EW01.TS0EWPMT * 100;
    else
      TS0EM002.TS0EM3PC = 0; /* Set percentage to 0*/
    end

    if (TS0EM002.TSDCMTDL != 0) /* If  commitment NE 0*/
      TS0EW01.TS0EWPMT = TS0EM002.TSDTDTDL / TS0EM002.TSDCMTDL;
      TS0EM002.TS0EM4PC = TS0EW01.TS0EWPMT * 100;
    else
      TS0EM002.TS0EM4PC = 0; /* Set percentage to 0*/
    end

    TS0EM002.TSDSHCN = TSDREC.TSDSHCN;
    TS0EM002.TSDSHCM = TSDREC.TSDSHCM;
    TS0EM002.TSDSHKG = TSDREC.TSDSHKG;
    TS0EM002.TSDSHDL = TSDREC.TSDSHDL;
    TS0EM002.ZZZSDT = TSDREC.ZZZSDT;
    TS0EM002.ZZZCHGDT = TSDREC.ZZZCHGDT;
  end

  set TS0EM002.TSDCONTR protect;
  set TS0EM002.TSDBEGDT protect;
  set TS0EM002.TSDENDDT protect;
  set TS0EM002.YSTCD protect;
  set TS0EM002.YCOCD protect;
  set TS0EM002.TSDCMTCN protect;
  set TS0EM002.TSDCMTCM protect;
  set TS0EM002.TSDCMTKG protect;
  set TS0EM002.TSDCMTDL protect;
  set TS0EM002.TSDSHCN protect;
  set TS0EM002.TSDSHCM protect;
  set TS0EM002.TSDSHKG protect;
  set TS0EM002.TSDSHDL protect;

  /* IF EZEMNO NE 0;                   /* Errors exist*/
  /* SET TS0EM002 ALARM;*/
  /* END;*/

  converse TS0EM002 ;

  TS0EW01.TS0EWPSW = "N"; /* Initialize problem switch*/

end // end TS0E420

// Check attention identifier
Function TS0E430()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0EM002 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0EM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS0EM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0EM002.CAITEM; /* Application data*/
      TS0E112(); /* Purge temporary storage*/
      XSTSS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end

    set TS0EM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0EM002.XXXPRCNM = "TS0E430"; /* Process name*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    TS0EW01.TS0EWMAP = "1"; /* Move to map 1*/
    TS0EW01.TS0EWMFL = "N"; /* Reset message flag*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0EM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    TS0E112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0EM002.XXXPRCNM = "TS0E430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "TS0C"; /* Fast path to carrier*/
    COMMAREA.CAITEM = TS0EM002.TSACARCD;
    TS0E112(); /* Purge temporary storage*/
    XSTSS01(); /* Exit to another application*/
    TS0EM002.XXXPRCNM = "TS0E430"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TS0EM002.XXXPRCNM = "TS0E430"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0E430

// Reset highlighted fields
Function TS0E440()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS0EM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0EM002.CAITEM initialAttributes; /* Commarea application data*/


end // end TS0E440

// Verify the entered data
Function TS0E450()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (TS0EM002.CAITEM > " ") /* Application data was entered*/
    set TS0EM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0EW01.TS0EWPSW = "Y"; /* Indicate problem*/
    TS0EM002.XXXPRCNM = "TS0D450"; /* Process name*/
  end


end // end TS0E450

// Process valid input request
Function TS0E460()
   /* ------------------------------------------------------------*/
   /* if no errors then set request for data to yes*/
   /* ------------------------------------------------------------*/

  if (TS0EW01.TS0EWPSW == "N") /* no errors occurred*/
    TS0EW01.TS0EWSWR = "Y"; /* Set request for data switch*/
    TS0EM001.TS0EMSEL[TS0EWIXM] = " "; /* Set blank to select*/
    set TS0EM002 initial; /* Clear map area*/
  else
    exit stack; /* Exit to redisplay*/
  end


end // end TS0E460

// converse pop up window
Function XPYCO01()
   /* ------------------------------------------------------------*/

              /* CONVERSE POP UP WINDOW*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && YCOTBL.YCOCD[XX0XWCT1] != "99") /* Or end of data*/
        if (YCOTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCOTBL.YCOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCOTBL.YCODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (YCOTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = YCOTBL.YCOCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = YCOTBL.YCODESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && YCOTBL.YCOCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPYCO01

//*** RECORD=TS0EW01 ****
// Working storage for TS0E - Contract Inquiry/Maintenance
// ***********************
Record TS0EW01 type basicRecord
  10 TS0EWIXM TS0EWIXM ; 
  10 TS0EWSWC TS0EWSWC ; 
  10 TS0EWPSW TS0EWPSW ; 
  10 TS0EWSWR TS0EWSWR ; 
  10 TS0EWTSP TS0EWTSP ; 
  10 TS0EWMAP TS0EWMAP ; 
  10 TS0EWFSW TS0EWFSW ; 
  10 TS0EWCSK TS0EWCSK ; 
  10 TSACARCD TSACARCD ; 
  10 TSACARNM TSACARNM ; 
  10 TS0EWSST TS0EWSST ; 
  10 TS0EWDFL TS0EWDFL ; 
  10 TS0EWCFL TS0EWCFL ; 
  10 TS0EWSFL TS0EWSFL ; 
  10 TS0EWMFL TS0EWMFL ; 
  10 TS0EWURF TS0EWURF ; 
  10 TS0EWDEF TS0EWDEF ; 
  10 TS0EWBDT TS0EWBDT ; 
  10 TS0EWEDT TS0EWEDT ; 
  10 TS0EWMED TS0EWMED ; 
  10 TS0EWSED TS0EWSED ; 
  10 TS0EWSDT TS0EWSDT ; 
  10 TS0EWCCT TS0EWCCT ; 
  10 TS0EWPMT TS0EWPMT ; 
  10 TS0EWDTE TS0EWDTE ; 
    15 TS0EWCEN TS0EWCEN ; 
    15 TS0EWYMD TS0EWYMD ; 
  10 TS0EWTM1 TS0EWTM1 ; 
    15 TS0EWHR1 TS0EWHR1 ; 
    15 TS0EWC1 TS0EWC1 ; 
    15 TS0EWMN1 TS0EWMN1 ; 
    15 TS0EWC2 TS0EWC2 ; 
    15 TS0EWSEC TS0EWSEC ; 
  10 TS0EWTM3 TS0EWTM3 ; 
    15 TS0EWHR3 TS0EWHR3 ; 
    15 TS0EWMN3 TS0EWMN3 ; 
  10 TA5TSQIX TA5TSQIX ; 
end // end TS0EW01

//*** RECORD=TS0EW02 ****
// Temporary storage record for TS0E - Contract Inquiry/Maint.
// ***********************
Record TS0EW02 type basicRecord
  10 TS0EWLEN TS0EWLEN ; 
  10 TS0EWLIN TS0EWLIN [13] ; 
    15 TS0EMSEL TS0EMSEL ; 
    15 TSDCONTR TSDCONTR ; 
    15 TSDBEGDT TSDBEGDT ; 
    15 TSDENDDT TSDENDDT ; 
    15 YSTCD YSTCD ; 
    15 YSTABRV YSTABRV ; 
    15 YCOCD YCOCD ; 
    15 YCOABRV YCOABRV ; 
    15 TSDMETFL TSDMETFL ; 
end // end TS0EW02

//*** RECORD=TSDREC ****
// ********** TRANSPORTATION CARRIER CONTRACT TABLE ***********
// 
// DB2 TABLE VIEW:      DTRANS.VCONTR01
// 
// COPYLIB MEMBER:      DCL00419
// 
// I/O MODULE:          IO1560
// 
// KEY TO DB2 TABLE:    TSACARCD
//                      YSTCD
//                      TSDBEGDT
//                      TSDENDDT
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 11/20/87   SPOPA    New record.
// **********************
Record TSDREC type basicRecord
  5 TSDGROUP TSDGROUP ; 
    10 TSACARCD TSACARCD ; 
    10 TSDCONTR TSDCONTR ; 
    10 YSTCD YSTCD ; 
    10 TSDBEGDT TSDBEGDT ; 
    10 TSDENDDT TSDENDDT ; 
    10 YCOCD YCOCD ; 
    10 TSDMETFL TSDMETFL ; 
    10 TSDCMTCN TSDCMTCN ; 
    10 TSDCMTCM TSDCMTCM ; 
    10 TSDCMTKG TSDCMTKG ; 
    10 TSDCMTDL TSDCMTDL ; 
    10 TSDSHCN TSDSHCN ; 
    10 TSDSHCM TSDSHCM ; 
    10 TSDSHKG TSDSHKG ; 
    10 TSDSHDL TSDSHDL ; 
    10 TSDTDTCN TSDTDTCN ; 
    10 TSDTDTCM TSDTDTCM ; 
    10 TSDTDTKG TSDTDTKG ; 
    10 TSDTDTDL TSDTDTDL ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TSDREC

// Line selection
DataItem TS0EMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working begin date
DataItem TS0EWBDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Colon 1
DataItem TS0EWC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Colon 2
DataItem TS0EWC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working change count
DataItem TS0EWCCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working century
DataItem TS0EWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Contract save flag
DataItem TS0EWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change Save Key
DataItem TS0EWCSK char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Entered Flag
DataItem TS0EWDEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete flag
DataItem TS0EWDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working date
DataItem TS0EWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working end date
DataItem TS0EWEDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Add/delete function switch
DataItem TS0EWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Hour1
DataItem TS0EWHR1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hour3
DataItem TS0EWHR3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem TS0EWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS0EWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0EWLIN char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0EWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// modified end date
DataItem TS0EWMED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Message flag
DataItem TS0EWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Minute1
DataItem TS0EWMN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Minute3
DataItem TS0EWMN3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Percentage met working field
DataItem TS0EWPMT num(9,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0EWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working set up date
DataItem TS0EWSDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Second1
DataItem TS0EWSEC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// original save end date
DataItem TS0EWSED num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Selection flag
DataItem TS0EWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Save status
DataItem TS0EWSST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0EWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0EWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Time1
DataItem TS0EWTM1 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Time3
DataItem TS0EWTM3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current temporary storage page
DataItem TS0EWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Update reload flag
DataItem TS0EWURF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working year month day
DataItem TS0EWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CMIT_CBM
DataItem TSDCMTCM decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CMIT_CNTNR
DataItem TSDCMTCN decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CMIT_DLR
DataItem TSDCMTDL decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CMIT_KG
DataItem TSDCMTKG decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Record group level
DataItem TSDGROUP char(105)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CONT_MET_FL
DataItem TSDMETFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_SH_CBM_DLR
DataItem TSDSHCM decimal(9,2)  {
  currency = yes, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_SH_CNTNR_DLR
DataItem TSDSHCN decimal(9,2)  {
  currency = yes, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_SH_DLR_DLR
DataItem TSDSHDL decimal(9,2)  {
  currency = yes, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_SH_KG_DLR
DataItem TSDSHKG decimal(9,2)  {
  currency = yes, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_TODT_CBM
DataItem TSDTDTCM decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_TODT_CNTNR
DataItem TSDTDTCN decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_TODT_DLR
DataItem TSDTDTDL decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_TODT_KG
DataItem TSDTDTKG decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

