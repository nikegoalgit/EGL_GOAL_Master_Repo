package ts06;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import pv.common.*;
import sr.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS06 ****
// This displays a list of carton information for the NIL pack-
// ing list system.
// 
// The screen displayed allows the user to list by customer
// number or order number the rows in the NIL carton table.
// The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the application will
// pass the for that table row to the carton detail screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PK101    09/20/89  MMOREH  New application.
// sr112    01/31/90  jbaker  select tsvrec with niaivcdt equal
//                            to zero in selected stmtgrps.
//          02/21/90  jjohns  Replace pd1rec with fy1rec.
// TS#0     06/11/91  rvakel  Regenned for table changes.
// TS23     06/05/92  dchian  If any style in carton is missing
//                            country of origin, flag it on map
// TS#0     07/22/92  dchian  Correct temp storage length.
// TS1022   09/01/92  dchian  Add ability to obtain cartons by
//                            P/L or order number.
// TS11     09/15/92  dchian  Add ability to select multiple
//                            cartons sequencing thru TS07.
// TS39     09/29/92  dchian  Add selection by status code and
//                            update P/L to completed status.
// TS#0     10/14/92  dchian  Regenned for table changes.
// TS3      11/10/92  dchian  Allow selections on multiple
//                            pages before PF9 (p/l split).
// TS707    11/19/92  dchian  Correct P/L split problem.
// TS44     12.11/92  dchian  Correct carton units, weight and
//                            volume when split to new P/L.
// TS00     08/27/93  dchian  Correct pc-po-id-mo-rng length in
//                            Ts06m001 for global update.
// TS#0     01/18/94  hkempe  Changed to allow for a nine digit
//                            order nbr - TS06M001.
// TS8901   03/04/94  hkempe  Generate/Compile to pick up revsd
//                            COMMAREA, TSWREC, TSYREC, TSZREC,
//                            TS4REC, TS6REC, XCTTBL.
//                            Resized TS06W00 and TS06W01.
//                            Renamed TSOCRTNB to TS-PL-CRTN-
//                            NBR in TS06M001.
// TS8901   03/14/94  hkempe  Change tsq length from 700 to 728
//                            in TS06110 & TS06210 re: TS06W01
//                            change length.
// TS8901   03/31/94  hkempe  Rename TSOCRTNB to TSPCRTNB in
//                            TSYREC and TSZREC.
// y2kfix   11/12/97  oricha  Y2K modifications:  regen only
//                            for xx0xs01 century adjustment.
// *********************
Program TS06 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FY1REC FY1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS06W00 TS06W00; // record
  TS06W01 TS06W01; // record
  TS4REC TS4REC; // record
  TS6REC TS6REC; // record
  TSQREC TSQREC; // record
  TSUREC TSUREC; // record
  TSVREC TSVREC; // record
  TSWREC TSWREC; // record
  TSYREC TSYREC; // record
  TSZREC TSZREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use TS06M.TS06M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set TS06M001 initial; /* M001 input/output*/
    set TS06W00 empty; /* Working storage*/
    set TS06W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    TS06W00.TS06W-CRTN-CNT = 0; /* init selected carton count*/
    TS06W00.TS06W-NDX = 1; /* init index*/
    while (TS06W00.TS06W-NDX <= 50) /* do while le 50*/
      TSWREC.TSW-TSOCRTNB[TS06W-NDX] = 0; /* init crtn nbr tbl*/
      TS06W00.TS06W-NDX = TS06W00.TS06W-NDX + 1;
    end

    TS06W00.TS06WSWD = "1"; /* Map to be displayed switch*/
    TS06W00.TS06WSWF = "Y"; /* Format the map switch*/
    TS06W00.TS06WSWR = "N"; /* Request for data switch*/

    if (TSWREC.XXXTSPAG == 0) /* if no page was passed*/
      TSWREC.XXXTSPAG = 1; /* set to first page*/
    end

     /* ------------------------------------------------------------*/
     /* If data passed in the work area, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFROMAP == "TS03" /* from nil p/l appl*/
     || COMMAREA.CAFROMAP == "TS04" /* from nil p/l appl*/
     || COMMAREA.CAFROMAP == "TS05" /* from nil p/l appl*/
     || COMMAREA.CAFROMAP == "TS06" /* from nil p/l appl*/
     || COMMAREA.CAFROMAP == "TS07" /* from nil p/l appl*/
     || COMMAREA.CAFROMAP == "TS08") /* from nil p/l appl*/
      if (TSWREC.OP1CUOID > 0 /* ; data was passed*/
       && TSWREC.OP1NORID > 0)

        TS06M001.TSVPLNBR = TSWREC.TSVPLNBR; /* p/l number*/
        TS06M001.OP1CUOID = TSWREC.OP1CUOID; /* order number*/
        TS06M001.OP1NORID = TSWREC.OP1NORID; /* order id*/

        TS06W00.TS06WSWR = "Y"; /* Request for data switch*/

      else

        set TSWREC empty; /* clear system work record*/

      end

    end

    if (TSWREC.TSWPLFLG == " ") /* search key has not been set*/
      TSWREC.TSWPLFLG = "O"; /* search key is by order*/
    end


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS06001; /* Converse the main process*/


    TS06001: TS06001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto TS06001; /* Converse the main process*/


  end // end main
end // end TS06

// Main process to display a map
Function TS06001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display screen for carton detail*/
   /* 2) else display screen for split packing list function*/
   /* 3) else display screen for status code change function.*/
   /* 4) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WSWD == "1") /* Map 1 was requested*/

    TS06100(); /* Display carton detail screen*/

  else

    if (TS06W00.TS06WSWD == "2") /* Map 2 was requested*/

      TS06200(); /* Display split p/l screen*/

    else

      if (TS06W00.TS06WSWD == "3") /* Map 3 (chg flg=y and inactive stat)*/

        TS06300();

      else

        /* ------------------------------------------------------------*/
         /* Write the error to the Error Diagnosis Reporting Facility.*/
        /* ------------------------------------------------------------*/

        TSWREC.XXXMODID = "001"; /* Module identification*/
        TSWREC.XXXMSGNO = 10; /* Indicate system error*/

        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
        TA1REC.TA1MAPNO = TS06W00.TS06WSWD; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

        /* ------------------------------------------------------------*/
         /* Exit to display the application system menu.*/
        /* ------------------------------------------------------------*/

        COMMAREA.CATOAP = "TS03"; /* TO application*/

        XSTSS02(); /* Exit to another application*/

        /* ------------------------------------------------------------*/
         /* Abnormally terminate the transaction if the exit failed.*/
        /* ------------------------------------------------------------*/

        TA1REC.TA1FUNC = "ABND"; /* Termination function*/

        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

      end

    end

  end


end // end TS06001

// List the rows in the table
Function TS06100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS06105(); /* check for order in multiple p/l*/

  TS06110(); /* Obtain the data to display*/

  TS06120(); /* Format and display the map*/

  TS06130(); /* Check attention identifier*/

  TS06140(); /* Reset fields to normal intensity*/

  TS06150(); /* Verify the entered data*/

  TS06160(); /* Process valid input request*/


end // end TS06100

// check for multiple p/l
Function TS06105()
   /* ------------------------------------------------------------*/
   /* This process is used to check for an order which belongs to*/
   /* more than one packing list. if the order does belong to*/
   /* more than one packing list, then transfer to the packing*/
   /* list summary screen.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Obtain data to display by P/L number, find order number for p/l.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.TSVPLNBR == TS06W01.TSVPLNBR
   && TS06M001.OP1CUOID == TS06W01.OP1CUOID
   && TS06M001.OP1NORID == TS06W01.OP1NORID)
    return;
  end

  if (TS06M001.TSVPLNBR != 0)
    TS06M001.OP1CUOID = 0;
    TS06M001.OP1NORID = 0;
    TS06M001.KUCCOID = 0;
    TS06W00.TS06WSWR = "Y"; /* request for data sw*/
    TS06123(); /* select open cursor*/
    TS06W00.TS06WPLO = 0;
    TS06W00.TS06WSWB = "N"; /* end cursor switch*/
    while (TS06W00.TS06WSWB == "N") /* while not end-of-file*/
      TS06124(); /* fetch selected plo*/
    end
    TS06125(); /* close cursor*/
    if (TS06W00.TS06WPLO < 2)
      if (TSVREC.TS-NIL-STAT == "I")
        set TS06W00 empty; /* init working storage*/
        TS06W00.TS06WSWD = "3"; /* request inactive stat screen*/
        exit stack;
      else
        return;
      end
    else
      TSWREC.TSVPLNBR = TS06M001.TSVPLNBR;
      TSWREC.XXXTSPAG = 1;
      COMMAREA.CATOAP = "TS05";
      TSWREC.TSWPLFLG = "P";
      TS06111();
      XSTSS02();
    end
  else
    if (TS06M001.OP1CUOID != 0)
      TS06M001.TSVPLNBR = 0;
      TS06M001.KUCCOID = 0;
      TSWREC.TSFSHPID = 0; /* initalize nike ship id*/
      TS06W00.TS06WSWR = "Y"; /* Request for data switch*/
      TS06106(); /* see if only one p/l exists for order*/
      if (TSVREC.TS-NIL-STAT == "I")
        TS06W00.TS06WSWD = "3"; /* request for inactive stat screen*/
        exit stack;
      else
        return;
      end
    else
      converseLib.validationFailed(363); /* please enter p/l or order number*/
    end
  end

end // end TS06105

// scan packing list by order nbr
Function TS06106()
   /* ------------------------------------------------------------------*/
   /* if request for data or no errors or informational messages*/
   /* for status code update, continue else return to previous process.*/
   /* ------------------------------------------------------------------*/

  if (TS06W00.TS06WSWR == "Y"             /* request for data*/
   || converseVar.validationMsgNum == 0   /* no errors*/
   || converseVar.validationMsgNum == 369 /* status code updated to 'completed'*/
   || converseVar.validationMsgNum == 370 /* status code updated to 'active'*/
   || converseVar.validationMsgNum == 371) /* status code updated to 'inactive'*/
     /* next sentence*/
  else
    return; /* return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the p/l table.*/
   /* ------------------------------------------------------------*/

  TS06107(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch a packing list*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WPLO = 0; /* initalize NLPLO row count*/

  while (TS06W00.TS06WSWB == "N") /* while not end-of-file*/
    TS06108(); /* Fetch selected NLPLO rows*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the product table.*/
   /* ------------------------------------------------------------*/

  TS06109(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* if more than 1 packing list exists then go to p/l summary*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WPLO < 2) /* if less than 2 packing lists*/

    TS06M001.TSVPLNBR = TSVREC.TSVPLNBR; /* save p/l nbr*/

    return; /* return to previous process*/

  else

    TSWREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
    TSWREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
    TSWREC.OP1NORID = TS06M001.OP1NORID; /* order number*/
    TSWREC.KUCCOID = TS06M001.KUCCOID; /* customer*/
    TSWREC.XXXTSPAG = 1; /* set page number to 1*/
    COMMAREA.CATOAP = "TS05"; /* TO application*/
    /* ------------------------------------------------------------*/
     /* change the packing list search flag to 'o'*/
    /* ------------------------------------------------------------*/

    TSWREC.TSWPLFLG = "O"; /* search key is by order*/

    TS06111(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

  end

   /* ------------------------------------------------------------*/
   /* abnormally terminate the transaction if the exit failed*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* terminate function*/
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/


end // end TS06106

// Select set and open cursor
Function TS06107()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
  if (TS06M001.OP1NORID == 0) /* if sub id not entered*/
    TSVREC.OP1NORID = 1; /* use default of one*/
    TS06M001.OP1NORID = 1;
  else
    TSVREC.OP1NORID = TS06M001.OP1NORID; /* order id*/
  end

  try
    call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS06W00.TS06WSWB = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "107"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06107

// Fetch next row in the cursor
Function TS06108()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      TS06W00.TS06WPLO = TS06W00.TS06WPLO + 1; /* add 1 to count*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS06W00.TS06WSWB = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "108"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06108

// Close selected set cursor
Function TS06109()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "109"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06109

// Obtain the data to display
Function TS06110()
   /* ------------------------------------------------------------------*/
   /* If data was requested or no errors or informational messages*/
   /* for status code update, continue else return to previous process.*/
   /* ------------------------------------------------------------------*/

  if (TS06W00.TS06WSWR != "Y") /* data not requested*/
    return; /* return to previous process*/
  end

  if (converseVar.validationMsgNum != 0) /* is there an error?*/
    if (converseVar.validationMsgNum == 369 /* informative msgs, p/l 'completed'*/
     || converseVar.validationMsgNum == 370 /* p/l 'active'*/
     || converseVar.validationMsgNum == 371) /* p/l 'inactive'*/
       /* next sentence   /* no errors, continue to obtain data*/
    else
      return; /* return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* IF TS06W01 LENGTH CHANGE, YOU MUST CHANGE THIS LENGTH ALSO*/
   /* ------------------------------------------------------------*/

  TS06W00.XXXTSLEN = 700; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TS06111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the carton table.*/
   /* ------------------------------------------------------------*/

  TS06112(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of carton.*/
   /* ------------------------------------------------------------*/

  while (TS06W00.TS06WSWC == "N") /* Until end of cursor*/

    TS06113(); /* Fetch selected rows*/

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (TS06W00.TS06WIXM > 14) /* Page is full*/
      TS06114(); /* Add page to temporary storage*/
    end

    /* ------------------------------------------------------------*/
     /* Select and open the cursor for the product table.*/
    /* ------------------------------------------------------------*/

    if (TS06W00.TS06WSWC == "N") /* if not end of carton*/

      TS06115(); /* Select set and open product cursor*/

      /* ------------------------------------------------------------*/
       /* Fetch and format the data into pages until end of product.*/
      /* ------------------------------------------------------------*/

      while (TS06W00.TS06WSWP == "N") /* Until end of cursor*/

        TS06116(); /* Fetch selected rows*/

        /* ------------------------------------------------------------*/
         /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (TS06W00.TS06WIXM > 14) /* Page is full*/
          TS06114(); /* Add page to temporary storage*/
        end

      end
      /* ------------------------------------------------------------*/
       /* Close the cursor for the product table.*/
      /* ------------------------------------------------------------*/

      TS06117(); /* Close the selected set cursor*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WIXM > 1) /* Page was formatted*/
    TS06114(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the carton table.*/
   /* ------------------------------------------------------------*/

  TS06118(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TA5TSQIX == 0) /* No pages formatted*/

    TS06W00.XXXTSPAG = 0; /* reset page number to zero*/
    TS06M001.OP1CUOID = TS06W01.OP1CUOID; /* move p/l number*/
    TS06M001.OP1NORID = TS06W01.OP1NORID; /* move p/l number*/
    TSWREC.XXXMODID = "110"; /* Module identification*/
    TSWREC.XXXMSGNO = 21; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO == 0) /* No message to display*/
    TS06W00.XXXTSPAG = TSWREC.XXXTSPAG; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WSWR = "N"; /* Request for data switch*/


end // end TS06110

// Purge any temporary storage
Function TS06111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TS06W01 empty; /* M001 display storage*/

  TS06W00.TS06WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  TS06W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TS06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "111"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06111

// Select set and open cursor
Function TS06112()
   /* ------------------------------------------------------------*/
   /* Select the information needed for the map heading.*/
   /* ------------------------------------------------------------*/

  TS06S01(); /* Select heading information*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear i/o storage area*/

  TSYREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS06M001.OP1NORID; /* order id*/

  TS4REC.TS4TASK = "S1"; /* select scan for carton*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS06W00.TS06WIXM = 1; /* Display line index*/
    TS06W00.TS06WSWC = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06112

// Fetch next row in the cursor
Function TS06113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  TS4REC.TS4TASK = "N1"; /* fetch next carton*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    TS06S02(); /* Save in display storage*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS06W00.TS06WSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06113

// Add page to temporary storage
Function TS06114()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS06W01.XXXTSLEN = TS06W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS06W01 empty; /* M001 display storage*/

    TS06W00.TS06WIXM = 1; /* Display line index*/

    TS06W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "114"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06114

// Select set and open cursor
Function TS06115()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TSYREC.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TSYREC.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TSYREC.OP1NORID; /* order id*/
  TSZREC.TSPCRTNB = TSYREC.TSPCRTNB; /* carton number*/

  TS6REC.TS6TASK = "S2"; /* select set sum by product*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS06W00.TS06WSWP = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "115"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06115

// Fetch next row in the cursor
Function TS06116()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "N2"; /* fetch next row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    TS06S03(); /* Save in display storage*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS06W00.TS06WSWP = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "116"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06116

// Close selected set cursor
Function TS06117()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "C2"; /* close cursor*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "117"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06117

// Close selected set cursor
Function TS06118()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  TS4REC.TS4TASK = "C1"; /* close carton cursor*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "118"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06118

// Format and converse the map
Function TS06120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* error was found*/

    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WSWR == "Y"             /* data was requested*/
   || converseVar.validationMsgNum == 0   /* or no error found*/
   || converseVar.validationMsgNum == 369 /* status code updated to 'completed'*/
   || converseVar.validationMsgNum == 370 /* status code updated to 'active'*/
   || converseVar.validationMsgNum == 371) /* status code updated to 'inactive'*/

    if (TS06W00.TS06WSWF == "Y") /* map must be formatted*/
      TS06121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* if not authorized to change, then protect all modifiable*/
   /* ------------------------------------------------------------*/

  TS06122(); /* protect all modifiable fields*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS06M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS06M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0) /* Message to display*/

    TS06M001.XXXMODID = TSWREC.XXXMODID; /* Module identification*/
    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end /* Message number*/

    set TS06M001 alarm; /* Indicate sound alarm*/

  end

  converse TS06M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = TS06M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS06M001.CAITEM; /* Application data*/


end // end TS06120

// Format the display data
Function TS06121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS06M001 initial; /* M001 input/output area*/

  TS06W00.TS06WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS06W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (TS06W00.TS06WSWU == "Y") /* Current page was changed*/

        TS06S04(); /* Update temporary storage page*/

        TS06W00.TS06WSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS06W00.XXXTSPAG > TS06W00.TA5TSQIX) /* Desired greater highest*/
        TS06W00.XXXTSPAG = TS06W00.TA5TSQIX; /* Default to highest*/
      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is less than the lowest page*/
       /* in storage, default to the lowest page number.*/
      /* ------------------------------------------------------------*/

      if (TS06W00.XXXTSPAG < 1) /* Desired less than lowest*/
        TS06W00.XXXTSPAG = 1; /* Default to lowest*/
      end

      TS06S05(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TS06M001.XXXTSPAG = TS06W00.XXXTSPAG; /* Current page*/
    TS06M001.TA5TSQIX = TS06W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS06M001.TSVPLNBR = TS06W01.TSVPLNBR; /* p/l number*/
  TS06M001.XWHCD = TS06W01.XWHCD; /* warehouse code*/
  TS06M001.OP1CUOID = TS06W01.OP1CUOID; /* order number*/
  TS06M001.OP1NORID = TS06W01.OP1NORID; /* order id*/
  TS06M001.KUCCOID = TS06W01.KUCCOID; /* customer*/

  if (TS06W00.TS-NIL-STAT == "C")
    TS06M001.TS06M-CMP-FLG = "Y";
    TS06W00.TS06W-CMP-FLG = "Y";
  else
    TS06M001.TS06M-CMP-FLG = "N";
    TS06W00.TS06W-CMP-FLG = "N";
  end

  if (TS06W01.SR1PKDT == 0) /* if no sched dt*/
     /* next sentence*/
  else
    TS06M001.SR1PKDT = TS06W01.SR1PKDT; /* pick sched date*/
  end

  if (TS06W01.NIAIVCDT == 0) /* if no invoice dt*/
     /* next sentence*/
  else
    TS06M001.NIAIVCDT = TS06W01.NIAIVCDT; /* invoice date*/
  end

  if (TS06W00.PC3POIDT != 0) /* if po id was entered*/
    TS06M001.PC3POIDT = TS06W00.PC3POIDT; /* move to screen*/
  end

  if (TS06W00.FY1FCTYC != " ") /* if po id was entered*/
    TS06M001.FY1FCTYC = TS06W00.FY1FCTYC; /* move to screen*/
  end

  if (TS06W00.XCTCD != " ") /* if po id was entered*/
    TS06M001.XCTCD = TS06W00.XCTCD; /* move to screen*/
  end

  TS06W00.TS06WIXM = 1; /* Initialize line index*/

  while (TS06W00.TS06WIXM <= 14) /* Until screen is full*/

    if (TS06W01.TS-PL-CRTN-NBR[TS06WIXM] > 0 /* if line exists to move*/
     || TS06W01.XGPCD[TS06WIXM] > " ")      

      if (TS06W00.TS06WIXM == 1) /* First select field*/
        set TS06M001.TS06MACT[TS06WIXM] cursor, normal; /* Position cursor*/
      else
        set TS06M001.TS06MACT[TS06WIXM] normal; /* Unprotected*/
      end

      set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] normal; /* unprotected*/
      set TS06M001.PC3POIDT normal; /* unprotected*/
      set TS06M001.FY1FCTYC normal; /* unprotected*/
      set TS06M001.XCTCD normal; /* unprotected*/

      TS06M001.TS06MACT[TS06WIXM] = TS06W01.TS06MACT[TS06WIXM];

      /* if any carton missing country of origin (ts06w-asterisk = '*')*/
      /* issue warning message 350.*/

      if (TS06W01.TS06W-ASTERISK[TS06WIXM] == "*")
        converseLib.validationFailed(350);
      end

      TS06M001.TS06M-ASTERISK[TS06WIXM] = TS06W01.TS06W-ASTERISK[TS06WIXM];
      TS06M001.TS-PL-CRTN-NBR[TS06WIXM] = TS06W01.TS-PL-CRTN-NBR[TS06WIXM];
      TS06M001.TSOSHPQT[TS06WIXM] = TS06W01.TSOSHPQT[TS06WIXM];

      if (TS06W01.XDSCD == " ") /* if ship from warehouse*/
        TS06M001.TSYNCTLB[TS06WIXM] = TS06W01.TSYNCTLB[TS06WIXM];
        TS06M001.TSYNCTFT[TS06WIXM] = TS06W01.TSYNCTFT[TS06WIXM];
        TS06M001.TS06MLT3 = " ";
      else /* direct ship*/
        TS06M001.TSYNCTLB[TS06WIXM] = TS06W01.TSYNCTLB[TS06WIXM];
        TS06M001.TSYNCTFT[TS06WIXM] = TS06W01.TSYNCTFT[TS06WIXM];
        TS06M001.TS06MLT3 = "DIRECT SHIP";
      end

      TS06M001.XGPCD[TS06WIXM] = TS06W01.XGPCD[TS06WIXM];
      TS06M001.SY1STNBR[TS06WIXM] = TS06W01.SY1STNBR[TS06WIXM];
      TS06M001.SY2CLRID[TS06WIXM] = TS06W01.SY2CLRID[TS06WIXM];
      TS06M001.XDMCD[TS06WIXM] = TS06W01.XDMCD[TS06WIXM];
      TS06M001.XQACD[TS06WIXM] = TS06W01.XQACD[TS06WIXM];
      TS06M001.XOWCD[TS06WIXM] = TS06W01.XOWCD[TS06WIXM];
      TS06M001.PC2INSEG[TS06WIXM] = TS06W01.PC2INSEG[TS06WIXM];
      TS06M001.XPGCD[TS06WIXM] = TS06W01.XPGCD[TS06WIXM];
      TS06M001.XUMCD[TS06WIXM] = TS06W01.XUMCD[TS06WIXM];
      TS06M001.TS06MUNT[TS06WIXM] = TS06W01.TS06MUNT[TS06WIXM];
      TS06M001.TS06MXCP[TS06WIXM] = TS06W01.TS06MXCP[TS06WIXM];

    end

    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* Increment line index*/

  end

  set TS06M001.TS06MLT1 protect; /* pf key literal one*/
  set TS06M001.TS06MLT2 protect; /* pf key literal two*/

end // end TS06121

// Check change authorization
Function TS06122()
   /* ------------------------------------------------------------------*/
    /* Authorization to bring up p/l that is inactive and change status*/
   /* ------------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y"
   && COMMAREA.CACLVL[3] == "Y")
    set TS06M001.TS06M-LIT4 initialAttributes;
    set TS06M001.TS-NIL-STAT initialAttributes;
  else
    set TS06M001.TS06M-LIT4 protect, invisible;
    set TS06M001.TS-NIL-STAT protect, invisible;
  end
   /* ------------------------------------------------------------*/
   /* If the user is authorized to change and there is modifiable*/
   /* data to change, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* Authorized to change*/
   && TS06W01.NIAIVCDT == 0)  /* and p/l not invoiced*/

    if (TS06W01.XDSCD != "1" /* export order*/
     && COMMAREA.CACLVL[1] == "Y") /* export updates allowed*/

      TS06W00.CACHGFL = "Y"; /* set update flag to yes*/
      return; /* Return to previous process*/

    end

    if (TS06W01.XDSCD == "1" /* direct ship order*/
     && COMMAREA.CACLVL[2] == "Y") /* direct ship updts allowed*/

      TS06W00.CACHGFL = "Y"; /* set update flag to yes*/
      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Set all modifiable fields to protected mode.*/
   /* ------------------------------------------------------------*/

  TS06W00.CACHGFL = "N"; /* set update flag to no*/

  set TS06M001.PC3POIDT initialAttributes; /* p.o. month range*/
  set TS06M001.FY1FCTYC initialAttributes; /* factory code*/
  set TS06M001.XCTCD initialAttributes; /* country code*/

  TS06W00.TS06WIXM = 1; /* initialize line counter*/

  while (TS06W00.TS06WIXM <= 14) /* until end of lines*/

    if (TS06W01.TS-PL-CRTN-NBR[TS06WIXM] != 0
     || TS06W01.XGPCD[TS06WIXM] != "  ")

      set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] skip; /* protect crtn fld*/

    end

    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* increment line counter*/

  end

  set TS06M001.TS06MLT1 protect; /* protect pf key literal one*/
  set TS06M001.TS06MLT2 protect; /* protect pf key literal one*/
end // end TS06122

// SELECT SET AND OPEN CORSOR
Function TS06123()
   /* ---------------------------------------------------------------*/
   /* Select rows from table by Pack List number.*/
   /* ---------------------------------------------------------------*/

  set TSVREC empty;

  TSVREC.TSVPLNBR = TS06M001.TSVPLNBR;

  if (COMMAREA.CACHGFL == "Y"
   && COMMAREA.CACLVL[3] == "Y")
    try
      call "IO4700" ("S7", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "IO4700" ("S5", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  TSWREC.XXXMODID = "123";

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(10);
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLPLO01";
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end TS06123

// FETCH NEXT ROW FROM TABLE
Function TS06124()
   /* ---------------------------------------------------------------------*/
   /* Fetch next row in the cursor*/
   /* ---------------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y"
   && COMMAREA.CACLVL[3] == "Y")
    try
      call "IO4700" ("N7", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "IO4700" ("N5", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      TS06M001.OP1CUOID = TSVREC.OP1CUOID;
      TS06M001.OP1NORID = TSVREC.OP1NORID;
      TS06W00.TS06WPLO = TS06W00.TS06WPLO + 1; /* add 1 to count*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        TS06W00.TS06WSWB = "Y";
        return;
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  TSWREC.XXXMODID = "124";

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(10);
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLPLO01";
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end TS06124

// CLOSE SELECTED SET CURSOR
Function TS06125()
   /* ---------------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ---------------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y"
   && COMMAREA.CACLVL[3] == "Y")
    try
      call "IO4700" ("C7", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    try
      call "IO4700" ("C5", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end
  end

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  TSWREC.XXXMODID = "125";
  converseLib.validationFailed(10);
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS ";
  TA1REC.TA1TBLVU = "VNLPLO01";

  call "TS0020" (TA1REC, TAEREC) {isExternal = yes};

  exit stack;

end // end TS06125

// Check attention identifier
Function TS06130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (TS06W00.TS06WSWR == "Y") /* Request for data*/
      set TS06W01 empty; /* M001 display storage*/
    end

    TS06W00.TS06WSWF = "Y"; /* Format the map switch*/
    TS06W00.TS06WSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TS06111(); /* Purge temporary storage*/

      XSTSS02(); /* Exit to another application*/

      set TS06M001.CATOAP cursor, bold; /* Highlight*/

    else

      TSWREC.XXXMODID = "130"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS06M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      TSWREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
      TSWREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
      TSWREC.OP1NORID = TS06M001.OP1NORID; /* order number*/
      TSWREC.KUCCOID = TS06M001.KUCCOID; /* customer*/
      if (TSWREC.TSWPLFLG == "S")
                                   /* If this started as a shipment inquiry*/
        TSWREC.TSOCRTNB = 0; /* set the carton number to zero to*/
                                   /* clean*/
      end /* up tswrec.*/
      TSWREC.XXXTSPAG = 1; /* reset page number to 1*/
      COMMAREA.CATOAP = "TS05"; /* TO application*/
    end

    TS06111(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* update carton by po,fcty,cnty*/
   && converseVar.eventKey not pf6   /* renumber cartons*/
   && converseVar.eventKey not pf7   /* page forward*/
   && converseVar.eventKey not pf8   /* page backward*/
   && converseVar.eventKey not pf9   /* split packing list*/
   && converseVar.eventKey not pf13) /* consolidate cartons*/

    TSWREC.XXXMODID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* if the packing list has been invoiced, or updt not allowed,*/
   /* any special function key other than select (enter) is not*/
   /* allowed to be used.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.CACHGFL == "N") /* if update is not allowed*/
    if (converseVar.eventKey is pf5 /* update carton by po,fcty,cnty*/
     || converseVar.eventKey is pf6 /* renumber cartons*/
     || converseVar.eventKey is pf9 /* split packing list*/
     || converseVar.eventKey is pf13) /* consolidate cartons*/

      TSWREC.XXXMODID = "130"; /* Module identification*/
      if (TS06W01.NIAIVCDT > 0) /* if p/l is invoiced*/
        converseLib.validationFailed(188); /* Indicate invalid attention key*/
      else
        converseLib.validationFailed(208); /* Indicate lack authority*/
      end

      exit stack; /* Exit to display map*/

    end

  end


end // end TS06130

// Reset highlighted fields
Function TS06140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS06M001.TSVPLNBR normal; /* p/l number*/
  set TS06M001.OP1CUOID normal; /* order number*/
  set TS06M001.OP1NORID normal; /* order id*/
  set TS06M001.TS06M-CMP-FLG normal; /* pl complete flag*/
  set TS06M001.PC3POIDT normal; /* po month range*/
  set TS06M001.FY1FCTYC normal; /* factory code*/
  set TS06M001.XCTCD normal; /* country code*/
  set TS06M001.TS06MLIT normal; /* split mode literal*/
  set TS06M001.TS06MLT1 protect; /* pf keys literal one*/
  set TS06M001.TS06MLT2 protect; /* pf keys literal two*/

  if (COMMAREA.CACHGFL == "Y" /* change authorization*/
   && COMMAREA.CACLVL[3] == "Y") /* change p/l status flag*/
    set TS06M001.TS06M-LIT4 normal;
    set TS06M001.TS-NIL-STAT normal;
  else
    set TS06M001.TS06M-LIT4 protect, invisible;
    set TS06M001.TS-NIL-STAT protect, invisible;
  end

  TS06W00.TS06WIXM = 1; /* Initialize line index*/

  while (TS06W00.TS06WIXM <= 14) /* Until end of lines*/
    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] > 0 /* if line exists*/
     || TS06M001.XGPCD[TS06WIXM] > " ")      

      set TS06M001.TS06MACT[TS06WIXM] normal; /* Reset action field*/
      set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] normal; /* reset carton number*/

    end

    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* Increment line index*/

  end

  set TS06M001.CATOAP initialAttributes; /* TO application*/
  set TS06M001.CAITEM initialAttributes; /* Application data*/


end // end TS06140

// Verify the entered data
Function TS06150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.CAITEM > " ") /* Application data was entered*/

    TSWREC.XXXMODID = "150"; /* Module identification*/
    set TS06M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || TS06M001.XXXTSPAG != TS06W00.XXXTSPAG) /* or page nbr chgd*/

    TS06151(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Otherwise, if page was formatted, verify data in the line.*/
    /* ------------------------------------------------------------*/

    if (TS06W00.TA5TSQIX > 0) /* Page was formatted*/

      TS06W00.TS06WIXM = 14; /* Initialize line index*/

      while (TS06W00.TS06WIXM > 0) /* Until end of lines*/

        TS06152(); /* Verify data in the line*/

        TS06W00.TS06WIXM = TS06W00.TS06WIXM - 1; /* Decrement line number*/

      end

      if (converseVar.eventKey is pf5
       || converseVar.eventKey is pf6
       || converseVar.eventKey is pf13)
        if ("S" in TS06M001.TS06MACT) /* if line was selected*/
           /* next sentence*/
        else
          TSWREC.XXXMODID = "150"; /* module identification*/
          set TS06M001.TS06MACT[1] cursor, bold; /* highlight*/
          converseLib.validationFailed(153); /* a selection is required*/
        end

      end

      if (converseVar.eventKey is pf9)
        if ("S" in TS06M001.TS06MACT /* if line was selected*/
         || TS06W00.TS06W-CRTN-CNT > 0) /* or select from prev page*/
             /* next sentence*/
        else
          TSWREC.XXXMODID = "150"; /* module identification*/
          set TS06M001.TS06MACT[1] cursor, bold; /* highlight*/
          converseLib.validationFailed(153); /* a selection is required*/
        end
      end

    end

    /* ------------------------------------------------------------*/
     /* update by carton fields can not be entered unless pf5 key*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf5)

      if (TS06M001.XCTCD != TS06W01.XCTCD) /* country code was entered*/
        if (TS06M001.XCTCD in XCTTBL.XCTCD /* code in table*/
         && XCTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
           /* next sentence*/
        else
          TSWREC.XXXMODID = "150"; /* module identification*/
          set TS06M001.XCTCD cursor, bold; /* highlight*/
          converseLib.validationFailed(29); /* indicate missing or invalid*/
        end
      end

      if (TS06M001.FY1FCTYC != TS06W01.FY1FCTYC)

        TS06S11(); /* edit for valid factory code*/

      end

      if (TS06M001.XCTCD == TS06W01.XCTCD
       && TS06M001.FY1FCTYC == TS06W01.FY1FCTYC
       && TS06M001.PC3POIDT == TS06W01.PC3POIDT)

        TSWREC.XXXMODID = "150"; /* module identification*/
        set TS06M001.PC3POIDT cursor, bold; /* highlight*/
        set TS06M001.FY1FCTYC bold; /* highlight*/
        set TS06M001.XCTCD bold; /* highlight*/
        converseLib.validationFailed(189); /* one of these fields is needed*/

      end

    else

      if (TS06M001.XCTCD != TS06W01.XCTCD) /* country code was entered*/

        TSWREC.XXXMODID = "150"; /* module identification*/
        set TS06M001.XCTCD cursor, bold; /* highlight*/
        converseLib.validationFailed(175); /* modification not allowed*/

      end

      if (TS06M001.FY1FCTYC != TS06W01.FY1FCTYC) /* factory code entered*/

        TSWREC.XXXMODID = "150"; /* Module identification*/
        set TS06M001.FY1FCTYC cursor, bold; /* Highlight*/
        converseLib.validationFailed(175); /* modification not allowed*/

      end

      if (TS06M001.PC3POIDT != TS06W01.PC3POIDT) /* po month range entered*/

        TSWREC.XXXMODID = "150"; /* Module identification*/
        set TS06M001.PC3POIDT cursor, bold; /* Highlight*/
        converseLib.validationFailed(175); /* modification not allowed*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Verify update status code using 'STATUS' code.*/
   /* This is for CACHGFL and CACLVL(3) = Y  only.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y" /* only authorized can change stat cd*/
   && COMMAREA.CACLVL[3] == "Y")
    if (TS06M001.TS-NIL-STAT == "C" /* verify if valid status entered*/
     || TS06M001.TS-NIL-STAT == "A" 
     || TS06M001.TS-NIL-STAT == "I")
      if (converseVar.eventKey is pf5 /* can't change status and perform*/
       || converseVar.eventKey is pf6 /* the following functions at the*/
       || converseVar.eventKey is pf7 /* same time.*/
       || converseVar.eventKey is pf8 
       || converseVar.eventKey is pf9 
       || converseVar.eventKey is pf13)
        converseLib.validationFailed(368); /* invalid function with pfkeys*/
        set TS06M001.TS-NIL-STAT cursor, bold;
      end
    end
  end


  if (converseVar.eventKey is enter) /* enter key hit*/
    if (COMMAREA.CACHGFL == "Y" /* authorized person*/
     && COMMAREA.CACLVL[3] == "Y")
      if (TS06M001.TS-NIL-STAT == " " /* blank and valid status code*/
       || TS06M001.TS-NIL-STAT == "C" 
       || TS06M001.TS-NIL-STAT == "A" 
       || TS06M001.TS-NIL-STAT == "I")
        if (TS06M001.TS-NIL-STAT == "C" /* trying to change status code*/
         || TS06M001.TS-NIL-STAT == "A" 
         || TS06M001.TS-NIL-STAT == "I")
          if ("S" in TS06M001.TS06MACT) /* also selecting something*/
            converseLib.validationFailed(366); /* can't select with status change*/
            set TS06M001.TS-NIL-STAT cursor, bold;
          else
            if (TS06M001.TSVPLNBR != TS06W01.TSVPLNBR /* trying to change*/
             || TS06M001.OP1CUOID != TS06W01.OP1CUOID /* selection field*/
             || TS06M001.OP1NORID != TS06W01.OP1NORID)
              converseLib.validationFailed(14); /* can't change key with status*/
              set TS06M001.TS-NIL-STAT cursor, bold;
            else
              TS06W00.TS06W-UPDT-STAT = "Y"; /* update status code flg*/
            end
          end
        end
      else
        converseLib.validationFailed(365); /* invalid value entered*/
        set TS06M001.TS-NIL-STAT cursor, bold;
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Verify update status code using 'P/L COMPLETED?' flag.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.TS06M-CMP-FLG != TS06W00.TS06W-CMP-FLG) /* changed?*/
    if (converseVar.eventKey is pf5 /* yes, can't use the following*/
     || converseVar.eventKey is pf6 /* pfkeys with cmp flg*/
     || converseVar.eventKey is pf7 
     || converseVar.eventKey is pf8 
     || converseVar.eventKey is pf9 
     || converseVar.eventKey is pf13)
      converseLib.validationFailed(368); /* invalid function with pfkeys*/
      set TS06M001.TS06M-CMP-FLG cursor, bold;
    end
  end


  if (converseVar.eventKey is enter) /* enter key hit?*/
    if (TS06M001.TS06M-CMP-FLG != TS06W00.TS06W-CMP-FLG) /* cmp flg changed?*/
      if (TS06M001.TS06M-CMP-FLG == "Y" /* only y/n can be entered*/
       || TS06M001.TS06M-CMP-FLG == "N")
        if ("S" in TS06M001.TS06MACT) /* something selected?*/
          converseLib.validationFailed(366); /* can't select and change status*/
          set TS06M001.TS06M-CMP-FLG cursor, bold;
        else
          if (TS06M001.TSVPLNBR != TS06W01.TSVPLNBR /* can't change*/
           || TS06M001.OP1CUOID != TS06W01.OP1CUOID /* selection field*/
           || TS06M001.OP1NORID != TS06W01.OP1NORID) /* with cmp flg*/
            converseLib.validationFailed(14); /* can't change key with status*/
            set TS06M001.TS06M-CMP-FLG cursor, bold;
          else
            TS06W00.TS06W-UPDT-STAT = "Y"; /* update stat cd*/
          end
        end
      else
        converseLib.validationFailed(365); /* invalid value entered in cmp flg*/
        set TS06M001.TS06M-CMP-FLG cursor, bold;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end TS06150

// Verify scroll request
Function TS06151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS06W00.XXXTSPAG < 2)       /* and no previous pages*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS06W00.XXXTSPAG >= TS06W00.TA5TSQIX) /* and no more pages*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WIXM = 14; /* Initialize line index*/

  while (TS06W00.TS06WIXM > 0) /* Until end of lines*/

    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] == 0)
      if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM])
        TSWREC.XXXMODID = "151"; /* Module identification*/
        set TS06M001.TS06MACT[TS06WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(14); /* Modifications not allowed*/
      end
    end

    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] != 
    TS06W01.TS-PL-CRTN-NBR[TS06WIXM])
      TSWREC.XXXMODID = "151"; /* Module identification*/
      set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/
    end

    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] != 0) /* carton line*/
      if (TS06M001.TS06MACT[TS06WIXM] != "S" /* not select*/
       && TS06M001.TS06MACT[TS06WIXM] != " ") /* not blank*/
        TSWREC.XXXMODID = "151"; /* module id*/
        set TS06M001.TS06MACT[TS06WIXM] cursor, bold; /* hightlight*/
        converseLib.validationFailed(13); /* only 's' valid*/
      end
    end

    TS06W00.TS06WIXM = TS06W00.TS06WIXM - 1; /* Decrement line number*/

  end

  if (TS06M001.XCTCD != TS06W01.XCTCD) /* country code*/
     /* ;*/
     /* MOVE '151' TO TSWREC.XXXMODID ; Module identification*/
     /* SET TS06M001.XCTCD CURSOR,BRIGHT     ; Highlight*/
     /* MOVE 14 TO EZEMNO             ; Modifications not allowed*/
     /* ;*/
  end

  if (TS06M001.FY1FCTYC != TS06W01.FY1FCTYC) /* factory code*/
     /* ;*/
     /* MOVE '151' TO TSWREC.XXXMODID ; Module identification*/
     /* SET TS06M001.FY1FCTYC CURSOR,BRIGHT  ; Highlight*/
     /* MOVE 14 TO EZEMNO             ; Modifications not allowed*/
     /* ;*/
  end

  if (TS06M001.PC3POIDT != TS06W01.PC3POIDT) /* po month range changed*/
     /* ;*/
     /* MOVE '151' TO TSWREC.XXXMODID ; Module identification*/
     /* SET TS06M001.PC3POIDT CURSOR,BRIGHT  ; Highlight*/
     /* MOVE 14 TO EZEMNO             ; Modifications not allowed*/
     /* ;*/
  end

  if (TS06M001.OP1NORID != TS06W01.OP1NORID) /* ord id changed*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS06M001.OP1NORID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS06M001.OP1CUOID != TS06W01.OP1CUOID) /* ord number changed*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS06M001.OP1CUOID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS06M001.TSVPLNBR != TS06W01.TSVPLNBR) /* p/l number changed*/

    TSWREC.XXXMODID = "151"; /* Module identification*/
    set TS06M001.TSVPLNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end


end // end TS06151

// Verify data in the line
Function TS06152()
   /* ------------------------------------------------------------*/
   /* if a request to view, update, or split has been made then*/
   /* the carton number can not be changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed*/
   || converseVar.eventKey is pf5   /* or update by po/fcty/ctry*/
   || converseVar.eventKey is pf9)  /* or split packing list*/

    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] != 
    TS06W01.TS-PL-CRTN-NBR[TS06WIXM])

      TSWREC.XXXMODID = "152"; /* Module identification*/
      set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(177); /* carton number cannot be changed*/

    end

  end

   /* ------------------------------------------------------------*/
   /* if a request to consolidate cartons has been made then*/
   /* only carton numbers on a product line can be changed.*/
   /* if carton is changed then it must be within range of*/
   /* existing carton numbers for the packing list*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* if consolidate cartons*/

    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] != 
    TS06W01.TS-PL-CRTN-NBR[TS06WIXM])

      if (TS06W01.TS-PL-CRTN-NBR[TS06WIXM] == 0) /* can only change prod line*/
        /* ***********************************************************/
        /* TS06S06                   ; edit for crtn nbr in range*/

        /* IF TS06M001.TS-PL-CRTN-NBR(TS06WIXM) GT TS4REC.TS4FUNCT*/
          /* OR TS06M001.TS-PL-CRTN-NBR(TS06WIXM) LT 1; outside range*/
          /* ;*/
          /* MOVE '152' TO TSWREC.XXXMODID  ; Module identification*/
          /* SET TS06M001.TS-PL-CRTN-NBR(TS06WIXM) CURSOR,BRIGHT;Highlight*/
          /* MOVE 178 TO EZEMNO      ; outside carton range for p/l*/
          /* ;*/
        /* ELSE ;*/
        /* ***********************************************************/
        TS06S07(); /* verify carton number exists*/

        if (TS06W00.TS06WSWI == "N") /* carton number does not exist*/

          TSWREC.XXXMODID = "152"; /* Module identification*/
          set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(197); /* must be existing carton number*/

        end

        if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] == TS06W01.TS06WCTN[TS06WIXM])

          TSWREC.XXXMODID = "152"; /* Module identification*/
          set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(228); /* cant consolidate into same carton*/

        end

        /* END ;*/

      else

        TSWREC.XXXMODID = "152"; /* Module identification*/
        set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(179); /* can only chg carton num on product*/
                                   /* line*/

      end

    else

      if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM])

        if (TS06W01.TS-PL-CRTN-NBR[TS06WIXM] == 0) /* can only change prod ln*/
          TSWREC.XXXMODID = "152"; /* Module identification*/
          set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(182); /* carton number must be changed*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* if a request to renumber cartons has been made then*/
   /* only carton numbers on a carton line can be changed.*/
   /* if carton is changed then it must be within range of*/
   /* existing carton numbers for the packing list*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* if renumber cartons*/

    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] != 
    TS06W01.TS-PL-CRTN-NBR[TS06WIXM])

      if (TS06W01.TS-PL-CRTN-NBR[TS06WIXM] != 0) /* can only change crtn ln*/
        /* **********************************************************/
        /* TS06S06                   ; edit for crtn nbr in range*/

        /* IF TS06M001.TS-PL-CRTN-NBR(TS06WIXM) GT TS4REC.TS4FUNCT*/
          /* OR TS06M001.TS-PL-CRTN-NBR(TS06WIXM) LT 1; outside range*/
          /* ;*/
          /* MOVE '152' TO TSWREC.XXXMODID  ; Module identification*/
          /* SET TS06M001.TS-PL-CRTN-NBR(TS06WIXM) CURSOR,BRIGHT;Highlight*/
          /* MOVE 178 TO EZEMNO      ; must be within range of cartons*/
          /* ;*/
        /* ELSE ;*/
        /* *********************************************************/
        TS06S07(); /* verify carton number doesnt exist*/

        if (TS06W00.TS06WSWI == "Y") /* carton number already exists*/

          TS06S08(); /* check if existing ctn is being*/
                                   /* renumbered*/

          if (TS06W00.TS06WSWI == "Y") /* ctn not rnbrd*/

            TSWREC.XXXMODID = "152"; /* Module identification*/
            set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(193); /* must be non-existent carton number*/

          end

        else

          TS06S09(); /* check if chgd numbers are duplicates*/

          if (TS06W00.TS06WSWI == "Y") /* duplicate numbers*/

            TSWREC.XXXMODID = "152"; /* Module identification*/
            set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
            converseLib.validationFailed(238); /* duplicate carton number entered*/

          end

        end

        /* END ;*/

      else

        TSWREC.XXXMODID = "152"; /* Module identification*/
        set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(186); /* can only chg carton line*/

      end
    else

      if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM])

        if (TS06W01.TS-PL-CRTN-NBR[TS06WIXM] != 0) /* can only change crtn ln*/
          TSWREC.XXXMODID = "152"; /* Module identification*/
          set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(192); /* carton number must be changed*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If action field was entered and request is for*/
   /* consolidation, then selected line must be a product line*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* if carton consolidation*/
    if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM]
     && TS06W01.TS-PL-CRTN-NBR[TS06WIXM] != 0) /* must be product line*/

      TSWREC.XXXMODID = "152"; /* Module identification*/
      set TS06M001.TS06MACT[TS06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(181); /* must be a carton line*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If action field was entered and request is for cnsld prod,*/
   /* p/l split, then pack list must not be associated to shipmnt*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* if split packing list*/
   || converseVar.eventKey is pf13) /* or consolidate products*/
    if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM])
      TS06S10(); /* determine if packing list exists*/
      if (TS06W00.TS06WSWA == "Y" /* p/l exists*/
       && TSVREC.TSFSHPID != 0)   /* p/l is assigned to shipment*/
        TSWREC.XXXMODID = "152"; /* Module identification*/
        set TS06M001.TS06MACT[TS06WIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(230); /* p/l must be unassigned*/
      end
    end
  end

  if (converseVar.eventKey is pf9) /* if packing list split*/
    if (TS06W00.TS06W-CRTN-CNT > 0) /* crtn selected from prev screen*/
      TS06S10(); /* determine if p/l exists*/
      if (TS06W00.TS06WSWA == "Y" /* p/l exists*/
       && TSVREC.TSFSHPID != 0)   /* p/l is assigned to shipment*/
        TSWREC.XXXMODID = "152"; /* module id*/
        converseLib.validationFailed(230); /* p/l must be unassigned*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If action field was entered and request is for select,*/
   /* update, or split then selected line must be a carton line*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed*/
   || converseVar.eventKey is pf5   /* or update by po/fcty/ctry*/
   || converseVar.eventKey is pf6   /* or renumber cartons*/
   || converseVar.eventKey is pf9)  /* or split packing list*/
    if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM]
     && TS06W01.TS-PL-CRTN-NBR[TS06WIXM] == 0) /* must be carton line*/

      TSWREC.XXXMODID = "152"; /* Module identification*/
      set TS06M001.TS06MACT[TS06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(180); /* must be a carton line*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be used to select a line.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM]) /* act chg*/
    if (TS06M001.TS06MACT[TS06WIXM] != "S" /* action not 's'*/
     && TS06M001.TS06MACT[TS06WIXM] != " ") /* action not blank*/

      TSWREC.XXXMODID = "152"; /* Module identification*/
      set TS06M001.TS06MACT[TS06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(13); /* Indicate only "S" may be used*/

    end

  end


end // end TS06152

// PROCESS VALID INPUT REQUEST
Function TS06160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.TSVPLNBR != TS06W01.TSVPLNBR /* p/l changed*/
   || TS06M001.OP1CUOID != TS06W01.OP1CUOID /* order num changed*/
   || TS06M001.OP1NORID != TS06W01.OP1NORID) /* order id  changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/

    TS06W00.PC3POIDT = 0; /* clear po month range*/
    TS06W00.FY1FCTYC = " "; /* clear factory code*/
    TS06W00.XCTCD = " "; /* clear country code*/

    TSWREC.XXXTSPAG = 1; /* reset page number to 1*/

    TS06W00.TS06WSWR = "Y"; /* Request for data switch*/

    return;

  end

   /* ----------------------------------------------------------------*/
   /* if ezeaid is enter and completed flag is (y/n) update status cd*/
   /* ----------------------------------------------------------------*/
  if (converseVar.eventKey is enter)
    if (TS06W00.TS06W-UPDT-STAT == "Y")
      TS06161(); /* select unique row*/
      TS06162(); /* update status code*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward or back was requested and selection was*/
   /* made, save selection and update temp storage.*/
   /* *** At this point, only carton line was selected. ****/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* scroll back*/
   || converseVar.eventKey is pf8 /* scroll forward*/
   || TS06M001.XXXTSPAG != TS06W00.XXXTSPAG) /* if page nbr changed*/

    TS06S14(); /* if selection made or changed, update*/
                                   /* crtn nbr in tswrec*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TS06W00.XXXTSPAG = TS06W00.XXXTSPAG - 1; /* Decrement page number*/
    TS06163(); /* was selection made*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    TS06W00.XXXTSPAG = TS06W00.XXXTSPAG + 1; /* Increment page number*/
    TS06163(); /* was selection made*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a request for a new page was entered, save page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.XXXTSPAG != TS06W00.XXXTSPAG) /* if page nbr changed*/

    TS06W00.XXXTSPAG = TS06M001.XXXTSPAG; /* save page nbr*/
    TS06163(); /* was selection made*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If update carton by po, factory, or country was requested,*/
   /* perform global update and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf5) /* global update by po/fcty/ctry*/

    TS06W00.TS06WIXM = 1; /* initialize line index*/

    while (TS06W00.TS06WIXM <= 14) /* until end of lines*/

      if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM])

        TS06170(); /* update carton globally*/

      end

      TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* increment line index*/

    end

    TS06W00.PC3POIDT = TS06M001.PC3POIDT; /* save po month range*/
    TS06W00.FY1FCTYC = TS06M001.FY1FCTYC; /* save factory code*/
    TS06W00.XCTCD = TS06M001.XCTCD; /* save country code*/

    TSWREC.XXXMSGNO = 200; /* carton was successfully updated*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit all changes*/

    return; /* Return to previous process*/

  else

    TS06W00.PC3POIDT = 0; /* clear po month range*/
    TS06W00.FY1FCTYC = " "; /* clear factory code*/
    TS06W00.XCTCD = " "; /* clear country code*/

  end

   /* ------------------------------------------------------------*/
   /* If renumber a carton was requested,*/
   /* perform carton renumbering and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* renumber a carton*/

    TS06W00.TS06WIXM = 1; /* initialize line index*/

    while (TS06W00.TS06WIXM <= 14) /* until end of lines*/

      if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM])

        TS06180();

      end

      TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* increment line index*/

    end

    TSWREC.XXXMSGNO = 201; /* carton was successfully renumbered*/

    TS06W00.TS06WSWR = "Y"; /* Request for data switch*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* commit all changes*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If split packing list was requested,*/
   /* perform packing list split and return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* split packing list*/

    TS06S14(); /* if selection made or changed, update*/
                                   /* crtn nbr tbl*/
    TS06163(); /* update display storage*/

    if (TS06W00.TS06W-CRTN-CNT > 0)
      TS06W00.TSVPLNBR = TS06W01.TSVPLNBR; /* p/l number*/
      TS06W00.OP1CUOID = TS06W01.OP1CUOID; /* ord number*/
      TS06W00.OP1NORID = TS06W01.OP1NORID; /* ord id*/
      TS06W00.TS-PL-CRTN-NBR = TS06M001.TS-PL-CRTN-NBR[1]; /* carton*/
      TS06W00.TS06WSWD = "2"; /* map to be displayed switch*/
      TS06W00.TS06WSWR = "Y"; /* request for data switch*/
    else
      converseLib.validationFailed(153); /* can't perform split, nothing selected*/
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If consolidate cartons was requested,*/
   /* perform carton consolidation return to previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf13) /* carton consolidation*/

    /* ----------------------------------------------------*/
     /* move all products from old carton to new carton*/
    /* ----------------------------------------------------*/

    TS06W00.TS06WIXM = 1; /* initialize line index*/

    while (TS06W00.TS06WIXM <= 14) /* until end of lines*/

      if (TS06M001.TS06MACT[TS06WIXM] == "S") /* if product line selected*/

        TS06190(); /* consolidate products into new crtn*/

      end

      TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* increment line index*/

    end

    /* ----------------------------------------------------*/
     /* update new carton for each product moved*/
    /* ----------------------------------------------------*/

    TS06W00.TS06WIXM = 1; /* initialize line index*/

    while (TS06W00.TS06WIXM <= 14) /* until end of lines*/

      if (TS06M001.TS06MACT[TS06WIXM] == "S") /* if product line selected*/

        TS06W00.TS-PL-CRTN-NBR = TS06M001.TS-PL-CRTN-NBR[TS06WIXM]; /* new ctn*/

        TS06191(); /* scan new carton and update info*/

      end

      TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* increment line index*/

    end

    /* ----------------------------------------------------*/
     /* update old carton only once for each product moved*/
    /* ----------------------------------------------------*/

    TS06W00.TS-PL-CRTN-NBR = 0; /* reset save carton to zero*/

    TS06W00.TS06WIXM = 1; /* initialize line index*/

    while (TS06W00.TS06WIXM <= 14) /* until end of lines*/

      if (TS06M001.TS06MACT[TS06WIXM] == "S" /* if product line selected*/
       && TS06W01.TS06WCTN[TS06WIXM] != TS06W00.TS-PL-CRTN-NBR)

        TS06W00.TS-PL-CRTN-NBR = TS06W01.TS06WCTN[TS06WIXM]; /* old ctn*/

        TS06191(); /* scan old crtn and update info*/

      end

      TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* increment line index*/

    end

    /* ----------------------------------------------------*/
     /* if any product was consolidated, send message out*/
    /* ----------------------------------------------------*/

    if ("S" in TS06M001.TS06MACT) /* Line was selected*/

      TSWREC.XXXMSGNO = 203; /* carton was successfully updated*/

      TS06W00.TS06WSWR = "Y"; /* Request for data switch*/

      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* commit all changes*/

    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, move the selected line to tswrec*/
   /* and transfer to the carton detail screen.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter key*/
    TS06S14(); /* if selection made or change, update*/
                                   /* crtn nbr tbl*/
    if (TS06W00.TS06W-CRTN-CNT > 0) /* and crtn(s) was selected*/
      TSWREC.TSVPLNBR = TS06W01.TSVPLNBR; /* p/l number*/
      TSWREC.OP1CUOID = TS06W01.OP1CUOID; /* order number*/
      TSWREC.OP1NORID = TS06W01.OP1NORID; /* order id*/
      TSWREC.TSOCRTNB = TS06M001.TS-PL-CRTN-NBR[1]; /* carton number*/
      TSWREC.XXXTSPAG = TS06W00.XXXTSPAG; /* save current page*/

      COMMAREA.CATOAP = "TS07"; /* carton detail screen*/
      TS06111(); /* Purge any temporary storage*/
      XSTSS02(); /* exit to application*/

      /* ------------------------------------------------------------*/
       /* abnormally terminate the transaction if the exit failed*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* terminate function*/
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* error diagnosis routine*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  TS06163();

end // end TS06160

// SELECT UNIQUE ROW
Function TS06161()
   /* -------------------------------------------------------------------*/
   /* Select unique P/L using map keys*/
   /* -------------------------------------------------------------------*/

  set TSVREC empty;

  TSVREC.TSVPLNBR = TS06M001.TSVPLNBR;
  TSVREC.OP1CUOID = TS06M001.OP1CUOID;
  TSVREC.OP1NORID = TS06M001.OP1NORID;

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      TS06W00.TS06WSWR = "Y";
      TSWREC.XXXMODID = "161";
      TSWREC.XXXMSGNO = 12;
      exit stack;
    end
  end


  TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  TA1REC.TA1MAP = sysVar.errorCode;

  TSWREC.XXXMODID = "161";

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10);
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLPLO01";
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
  exit stack;

end // end TS06161

// UPDATE P/L STATUS
Function TS06162()
   /* -------------------------------------------------------------------*/
   /* Update status code for packing list*/
   /* There are two ways to get here:*/
   /* 1) update status by 'P/L completed' flag on map.*/
   /* 2) update status by 'status' field on map.*/
   /* -------------------------------------------------------------------*/

  if (TS06M001.TS06M-CMP-FLG != TS06W00.TS06W-CMP-FLG) /* update by cmp flg?*/
    if (TS06M001.TS06M-CMP-FLG == "Y") /* 'y'= completed, 'n'= active*/
      TSVREC.TS-NIL-STAT = "C"; /* set to 'C'ompleted*/
    else
      TSVREC.TS-NIL-STAT = "A"; /* set to 'A'ctive*/
    end
  else /* update by 'status' field (only authorized, chgfl=y and clvl3=y)*/
    TSVREC.TS-NIL-STAT = TS06M001.TS-NIL-STAT;
  end

  TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* successful update*/
    if (SQLCA.VAGen_SQLCODE == 0)
      TS06W00.TS06W-UPDT-STAT = "N"; /* do not update status again*/
      TS06W00.TS06WSWR = "Y"; /* refresh data, get new status*/
      if (TSVREC.TS-NIL-STAT == "C")
        converseLib.validationFailed(369); /* status code set 'completed'*/
      else
        if (TSVREC.TS-NIL-STAT == "A")
          converseLib.validationFailed(370); /* status code set to 'active*/
        else
          converseLib.validationFailed(371); /* ststus code set to 'inactive'*/
          TS06W00.TS06WSWD = "3"; /* request for inactive screen*/
        end
      end
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      TS06W00.TS06WSWR = "Y";
      TSWREC.XXXMODID = "162";
      TSWREC.XXXMSGNO = 12;
      exit stack;
    end
  end


  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  TSWREC.XXXMODID = "162";

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10);
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "UPDATE PACKING LIST ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLPLO01";
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end TS06162

Function TS06163()
   /* ------------------------------------------------------------*/
   /* Save the select fields and clear the map input/output area.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WIXM = 1; /* Initialize line index*/

  while (TS06W00.TS06WIXM <= 14) /* Until end of lines*/
    if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM])
      TS06W01.TS06MACT[TS06WIXM] = TS06M001.TS06MACT[TS06WIXM];
      TS06W00.TS06WSWU = "Y"; /* Storage update switch*/
    end
    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* Increment line index*/
  end

end // end TS06163

// global update by fcty/po/ctry
Function TS06170()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the product table.*/
   /* ------------------------------------------------------------*/

  TS06171(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch a product to establish existing po,fcty,ctry.*/
   /* ------------------------------------------------------------*/

  TS06172(); /* Fetch selected rows*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the product table.*/
   /* ------------------------------------------------------------*/

  TS06173(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* globally update all products in carton to new po/fcty/ctry*/
   /* ------------------------------------------------------------*/

  TS06174(); /* update products in carton*/

end // end TS06170

// scan product file for carton
Function TS06171()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS06M001.OP1NORID; /* order id*/
  TSZREC.TSPCRTNB = TS06M001.TS-PL-CRTN-NBR[TS06WIXM]; /* crtn nbr*/
  TSZREC.XGPCD = "**"; /* all gpc codes*/
  TSZREC.SY1STNBR = "******"; /* all styles*/
  TSZREC.SY2CLRID = "***"; /* all colors*/
  TSZREC.XDMCD = "**"; /* all dimensions*/
  TSZREC.XQACD = "**"; /* all quality codes*/
  TSZREC.XOWCD = "**"; /* all owner groups*/
  TSZREC.PC2INSEG = "***"; /* all spec codes*/
  TSZREC.XPGCD = "**"; /* all package types*/
  TSZREC.XUMCD = "**"; /* all units of measure*/
  TSZREC.XCTCD = "****"; /* all country codes*/
  TSZREC.SY5SZID = -1; /* all sizes*/

  TS6REC.TS6TASK = "S1"; /* scan all products by carton*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS06W00.TS06WSWP = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "171"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06171

// Fetch next row in product tbl
Function TS06172()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "N1"; /* fetch next row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      TS06W00.PC3POIDT = TSZREC.PC3POIDT; /* save orig p.o.*/
      TS06W00.FY1FCTYC = TSZREC.FY1FCTYC; /* save orig fcty*/
      TS06W00.XCTCD = TSZREC.XCTCD; /* save orig ctry*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "172"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "172"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06172

// Close product table cursor
Function TS06173()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "C1"; /* close cursor*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back changes*/

  TSWREC.XXXMODID = "173"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06173

// global updt crtn by fcty/po/ct
Function TS06174()
   /* ------------------------------------------------------------*/
   /* global update of products by p.o./fcty/ctry*/
   /* ------------------------------------------------------------*/

  set TSZREC empty;
  set TS6REC empty;

  TSZREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS06M001.OP1CUOID; /* ord nbr*/
  TSZREC.OP1NORID = TS06M001.OP1NORID; /* ord id*/
  TSZREC.TSPCRTNB = TS06M001.TS-PL-CRTN-NBR[TS06WIXM]; /* crtn number*/

  XX0XS01(); /* get system time, date*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  if (TS06M001.PC3POIDT > 0) /* if p.o. month range was entered*/
    TSZREC.PC3POIDT = TS06M001.PC3POIDT; /* move in new p.o.*/
  else
    TSZREC.PC3POIDT = TS06W00.PC3POIDT; /* move in orig p.o.*/
  end

  if (TS06M001.FY1FCTYC > " ") /* if factory  was entered*/
    TSZREC.FY1FCTYC = TS06M001.FY1FCTYC; /* move in new fcty*/
    TSZREC.XCTCD = TS06M001.XCTCD; /* move in new ctry*/
  else
    TSZREC.FY1FCTYC = TS06W00.FY1FCTYC; /* move in orig fcty*/
    TSZREC.XCTCD = TS06W00.XCTCD; /* move in orig ctry*/
  end

  if (TS06M001.XCTCD > " ") /* if ctry was entered*/
    TSZREC.XCTCD = TS06M001.XCTCD; /* move in new ctry*/
  else
    TSZREC.XCTCD = TS06W00.XCTCD; /* move in orig ctry*/
  end

  TS6REC.TS6TASK = "U2"; /* Function code*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* update products*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "174"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "174"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

    converseLib.validationFailed(11); /* Indicate system error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PRODUCTS BY PO/FCTY/CTRY ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06174

// renumber a carton
Function TS06180()
   /* ------------------------------------------------------------*/
   /* renumber all products in carton to new carton number*/
   /* ------------------------------------------------------------*/

  TS06181(); /* renumber products in carton*/

   /* ------------------------------------------------------------*/
   /* Select carton to renumber using old number*/
   /* ------------------------------------------------------------*/

  TS06182(); /* Select carton to renumber*/

   /* ------------------------------------------------------------*/
   /* renumber carton to new carton number*/
   /* ------------------------------------------------------------*/

  TS06183(); /* renumber carton*/

end // end TS06180

// chg carton nbr on product tbl
Function TS06181()
   /* ------------------------------------------------------------*/
   /* change carton number to new carton on products table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty;
  set TS6REC empty;

  TSZREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS06M001.OP1CUOID; /* ord nbr*/
  TSZREC.OP1NORID = TS06M001.OP1NORID; /* ord id*/
  TSZREC.TSPCRTNB = TS06W01.TS-PL-CRTN-NBR[TS06WIXM]; /* old crtn nbr*/

  TS6REC.TS-PL-CRTN-NBR = TS06M001.TS-PL-CRTN-NBR[TS06WIXM]; /* new crtn nbr*/

  XX0XS01(); /* get system time, date*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TSZREC.XGPCD = "**"; /* all gpc*/
  TSZREC.SY1STNBR = "******"; /* all styles*/
  TSZREC.SY2CLRID = "***"; /* all colors*/
  TSZREC.XDMCD = "**"; /* all dimensions*/
  TSZREC.XQACD = "**"; /* all quality codes*/
  TSZREC.XOWCD = "**"; /* all owner groups*/
  TSZREC.PC2INSEG = "***"; /* all spec codes*/
  TSZREC.XPGCD = "**"; /* all package types*/
  TSZREC.XUMCD = "**"; /* all units of measure*/

  TS6REC.TS6TASK = "U1"; /* Function code*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* update products*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "181"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "181"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

    converseLib.validationFailed(11); /* Indicate system error*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "CHANGE CARTON NBR ON PRODUCT TBL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end TS06181

// select carton row
Function TS06182()
   /* ------------------------------------------------------------*/
   /* Select carton row using old carton number.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear i/o storage area*/

  TSYREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS06M001.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TS06W01.TS-PL-CRTN-NBR[TS06WIXM]; /* old crtn nbr*/

  TS4REC.TS4TASK = "S "; /* select unique carton using old nbr*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "182"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "182"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE CARTON ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06182

// renumber carton to new number
Function TS06183()
   /* ------------------------------------------------------------*/
   /* Update the carton row with the new carton number*/
   /* ------------------------------------------------------------*/

  set TS4REC empty;

  TSYREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS06M001.OP1CUOID; /* ord number*/
  TSYREC.TSVPLNBR = TS06M001.TSVPLNBR; /* ord id*/
  TSYREC.TSPCRTNB = TS06W01.TS-PL-CRTN-NBR[TS06WIXM]; /* old crtn nbr*/

  TS4REC.TS-PL-CRTN-NBR = TS06M001.TS-PL-CRTN-NBR[TS06WIXM]; /* new crtn nbr*/

  XX0XS01(); /* get system time, date*/

  TSYREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSYREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TS4REC.TS4TASK = "U "; /* Function code*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* update carton*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "183"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "183"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource unavailable*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE CARTON TO NEW NUMBER     ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06183

// chg carton nbr on product tbl
Function TS06190()
   /* ------------------------------------------------------------*/
   /* change carton number to new carton on products table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty;
  set TS6REC empty;

  TSZREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS06M001.OP1CUOID; /* ord nbr*/
  TSZREC.OP1NORID = TS06M001.OP1NORID; /* ord nbr*/

  TSZREC.TSPCRTNB = TS06W01.TS06WCTN[TS06WIXM]; /* old crtn number*/

  TS6REC.TS-PL-CRTN-NBR = TS06M001.TS-PL-CRTN-NBR[TS06WIXM]; /* new crtn nbr*/

  XX0XS01(); /* get system time, date*/

  TSZREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSZREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TSZREC.XGPCD = TS06W01.XGPCD[TS06WIXM];
  TSZREC.SY1STNBR = TS06W01.SY1STNBR[TS06WIXM];
  TSZREC.SY2CLRID = TS06W01.SY2CLRID[TS06WIXM];
  TSZREC.XDMCD = TS06W01.XDMCD[TS06WIXM];
  TSZREC.XQACD = TS06W01.XQACD[TS06WIXM];
  TSZREC.XOWCD = TS06W01.XOWCD[TS06WIXM];
  TSZREC.PC2INSEG = TS06W01.PC2INSEG[TS06WIXM];
  TSZREC.XPGCD = TS06W01.XPGCD[TS06WIXM];
  TSZREC.XUMCD = TS06W01.XUMCD[TS06WIXM];

  TS6REC.TS6TASK = "U1"; /* Function code*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* update products*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "190"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "190"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

    converseLib.validationFailed(11); /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "CHANGE CARTON NBR ON PRODUCT TBL";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06190

// scan crtns and updt info
Function TS06191()
   /* ------------------------------------------------------------*/
   /* count number of products remaining in carton*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WUNT = 0; /* set units/ctn to zero*/

  TS06192(); /* select count units/product*/

  while (TS06W00.TS06WSWP == "N") /* until end of cursor*/

    TS06193(); /* fetch next product count*/

  end

  TS06194(); /* close cursor on product count*/

   /* ------------------------------------------------------------*/
   /* select carton to obtain the weight and vol for packing list*/
   /* ------------------------------------------------------------*/

  TS06195(); /* Select carton to update*/

  if (TS06W00.TS06WUNT > 0) /* if there are units for this carton*/

    /* ------------------------------------------------------------*/
     /* update carton with new info*/
    /* ------------------------------------------------------------*/

    TS06196(); /* update carton*/

  else

    /* ------------------------------------------------------------*/
     /* delete carton with no products remaining*/
    /* ------------------------------------------------------------*/

    TS06197(); /* delete carton*/

  end

   /* ------------------------------------------------------------*/
   /* update the packing list with the new weight and volume*/
   /* ------------------------------------------------------------*/

  TS06198(); /* select packing list for update*/

  TS06199(); /* udpt packlist for consolidated crtn*/
                                   /* wght or vol*/

end // end TS06191

// count units per product
Function TS06192()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS06M001.OP1NORID; /* order id*/

  TSZREC.TSPCRTNB = TS06W00.TS-PL-CRTN-NBR; /* crtn nbr(old/new)*/

  TS6REC.TS6TASK = "S2"; /* select set sum by product*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS06W00.TS06WSWP = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "192"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "COUNT UNITS PER PRODUCT ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06192

// Fetch next carton row
Function TS06193()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "N2"; /* fetch next row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      TS06W00.TS06WUNT = TS06W00.TS06WUNT + TS6REC.TS6FUNCT; /* sum units*/

      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS06W00.TS06WSWP = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "193"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06193

// Close carton cursor
Function TS06194()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "C2"; /* close cursor*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back all changes*/

  TSWREC.XXXMODID = "194"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06194

// select unique carton
Function TS06195()
   /* ------------------------------------------------------------*/
   /* Select carton row using old/new carton number.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear i/o storage area*/

  TSYREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS06M001.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TS06W00.TS-PL-CRTN-NBR; /* carton nbr(old/new)*/

  TS4REC.TS4TASK = "S "; /* select unique carton using ctn nbr*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, save the weight and volume of carton*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      TS06W00.TSYNCTLB = TSYREC.TSYNCTLB; /* save weight*/
      TS06W00.TSYNCTFT = TSYREC.TSYNCTFT; /* save volume*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "195"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "195"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE CARTON ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06195

// update carton info
Function TS06196()
   /* ------------------------------------------------------------*/
   /* Update the carton row with the new info*/
   /* ------------------------------------------------------------*/

  set TS4REC empty;

  TSYREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS06M001.OP1CUOID; /* ord number*/
  TSYREC.OP1NORID = TS06M001.OP1NORID; /* ord id*/
  TSYREC.TSPCRTNB = TS06W00.TS-PL-CRTN-NBR; /* carton number(old/new)*/

  XX0XS01(); /* get system time, date*/

  TSYREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in current date*/
  TSYREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in current date*/

  TSYREC.TSYNCTLB = 0; /* set weight to zero*/
  TSYREC.TSOSHPQT = TS06W00.TS06WUNT; /* set qty shp to new units*/

  TS4REC.TS4TASK = "U "; /* Function code*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* update carton*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "196"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "196"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

    converseLib.validationFailed(11); /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE CARTON TO NEW TOTAL UNITS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06196

// delete carton
Function TS06197()
   /* ------------------------------------------------------------*/
   /* delete the carton row with no products remaining*/
   /* ------------------------------------------------------------*/

  set TSYREC empty;
  set TS4REC empty;

  TSYREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS06M001.OP1CUOID; /* ord number*/
  TSYREC.OP1NORID = TS06M001.OP1NORID; /* ord id*/
  TSYREC.TSPCRTNB = TS06W00.TS-PL-CRTN-NBR; /* carton nbr(old/new)*/

  TS4REC.TS4TASK = "D "; /* Function code*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete carton*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, carton has already been deleted*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "197"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql commarea*/

  TSWREC.XXXMODID = "197"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

    converseLib.validationFailed(11); /* resource not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2"; /* Type of error*/
  TA1REC.TA1LOC = "DELETE CARTON WITH NO PRODUCTS  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS"; /* data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06197

// select p/l to update weight
Function TS06198()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS06W01.TSVPLNBR; /* p/l number*/
  TSVREC.OP1CUOID = TS06W01.OP1CUOID; /* order number*/
  TSVREC.OP1NORID = TS06W01.OP1NORID; /* order id*/

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "198"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "198"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06198

// update p/l to subtract weight
Function TS06199()
   /* ------------------------------------------------------------*/
   /* update the packing list for cartons which have been con-*/
   /* solidated.  if products remain in the carton then subtract*/
   /* the original carton weight from the packing list.  if no*/
   /* products remain in the orig carton then subtact the volume*/
   /* from the packing list due to the orig carton being deleted.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WUNT > 0) /* if carton contains products*/

    TSVREC.TSVNPLLB = TSVREC.TSVNPLLB - TS06W00.TSYNCTLB; /* saved wgt*/

  else

    TSVREC.TSVNPLLB = TSVREC.TSVNPLLB - TS06W00.TSYNCTLB; /* saved wgt*/
    TSVREC.TSVNPLFT = TSVREC.TSVNPLFT - TS06W00.TSYNCTFT; /* saved vol*/

  end


  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "199"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "199"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UDPATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06199

// display the selected carton
Function TS06200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS06210(); /* Obtain the data to display*/

  TS06220(); /* Format and display the map*/

  TS06230(); /* Check attention identifier*/

  TS06240(); /* Reset fields to normal intensity*/

  TS06250(); /* Verify the entered data*/

  TS06260(); /* Process valid input request*/


end // end TS06200

// Obtain the data to display
Function TS06210()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  TS06W00.XXXTSLEN = 700; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TS06211(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* obtain the next available packing list number*/
   /* ------------------------------------------------------------*/

  TS06S12(); /* obtain next p/l number*/

   /* ------------------------------------------------------------*/
   /* for each line selected, load temp storage pages*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WIXC = 1; /* set line counter to one*/
  TS06W00.TS06WIXM = 1; /* set temp stor line index*/

  while (TS06W00.TS06WIXC <= 50) /* until end of lines*/

    if (TSWREC.TSW-TSOCRTNB[TS06WIXC] != 0) /* if crtn selected*/

      /* ------------------------------------------------------------*/
       /* Select the carton row to display*/
      /* ------------------------------------------------------------*/

      TS06212(); /* Select carton*/

      /* ------------------------------------------------------------*/
       /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/

      if (TS06W00.TS06WIXM > 14) /* Page is full*/
        TS06215(); /* Add page to temporary storage*/
      end

      /* ------------------------------------------------------------*/
       /* Select and open the cursor for the product table.*/
      /* ------------------------------------------------------------*/

      TS06213(); /* Select set and open product cursor*/

      /* ------------------------------------------------------------*/
       /* Fetch and format the data into pages until end of product.*/
      /* ------------------------------------------------------------*/

      while (TS06W00.TS06WSWP == "N") /* Until end of cursor*/

        TS06214(); /* Fetch selected rows*/

        /* ------------------------------------------------------------*/
         /* If the page is full, add the page to the storage queue.*/
        /* ------------------------------------------------------------*/

        if (TS06W00.TS06WIXM > 14) /* Page is full*/
          TS06215(); /* Add page to temporary storage*/
        end

      end
      /* ------------------------------------------------------------*/
       /* Close the cursor for the product table.*/
      /* ------------------------------------------------------------*/

      TS06216(); /* Close the selected set cursor*/

    end

    TS06W00.TS06WIXC = TS06W00.TS06WIXC + 1; /* increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WIXM > 1) /* Page was formatted*/
    TS06215(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TA5TSQIX == 0) /* No pages formatted*/

    TS06M001.TSVPLNBR = TS06W01.TSVPLNBR; /* move p/l number*/
    TS06M001.OP1CUOID = TS06W01.OP1CUOID; /* move p/l number*/
    TS06M001.OP1NORID = TS06W01.OP1NORID; /* move p/l number*/
    TSWREC.XXXMODID = "210"; /* Module identification*/
    TSWREC.XXXMSGNO = 21; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the desired page number.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO == 0) /* No message to display*/
    TS06W00.XXXTSPAG = TSWREC.XXXTSPAG; /* Desired page number*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WSWR = "N"; /* Request for data switch*/


end // end TS06210

// Purge any temporary storage
Function TS06211()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set TS06W01 empty; /* M001 display storage*/

  TS06W00.TS06WSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  TS06W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (TS06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back all changes*/

  TSWREC.XXXMODID = "211"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06211

// Select carton row
Function TS06212()
   /* ------------------------------------------------------------*/
   /* Select the information needed for the map heading.*/
   /* ------------------------------------------------------------*/

  TS06S01(); /* Select heading information*/

   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear i/o storage area*/

  TSYREC.TSVPLNBR = TS06W00.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS06W00.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS06W00.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TSWREC.TSW-TSOCRTNB[TS06WIXC]; /* carton*/

  TS4REC.TS4TASK = "S "; /* select carton*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      TS06S02(); /* save in storage*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "212"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "212"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE CARTON    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06212

// Select set and open cursor
Function TS06213()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS06W00.TSVPLNBR; /* p/l number*/
  TSZREC.OP1CUOID = TS06W00.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS06W00.OP1NORID; /* order id*/
  TSZREC.TSPCRTNB = TSWREC.TSW-TSOCRTNB[TS06WIXC]; /* carton number*/

  TS6REC.TS6TASK = "S2"; /* select set sum by product*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS06W00.TS06WSWP = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "213"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF PRODUCTS  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06213

// Fetch next row in the cursor
Function TS06214()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "N2"; /* fetch next row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    TS06S03(); /* Save in display storage*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS06W00.TS06WSWP = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "214"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06214

// Add page to temporary storage
Function TS06215()
   /* ------------------------------------------------------------*/
   /* move the new packing list number for split to temp storage*/
   /* ------------------------------------------------------------*/

  TS06W01.TSVPLNBR = TSQREC.TSQNILNX; /* new p/l nbr for split*/

   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  TS06W01.XXXTSLEN = TS06W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (TS06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set TS06W01 empty; /* M001 display storage*/

    TS06W00.TS06WIXM = 1; /* Display line index*/

    TS06W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back all changes*/
  TSWREC.XXXMODID = "215"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06215

// Close selected set cursor
Function TS06216()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "C2"; /* close cursor*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back all changes*/

  TSWREC.XXXMODID = "116"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06216

// Format and converse the map
Function TS06220()
   /* ------------------------------------------------------------*/
   /* If error was found, save the error message number*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* error was found*/
    TSWREC.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/

  end

   /* ------------------------------------------------------------*/
   /* If data requested or no error, format the data to display*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WSWR == "Y" /* data was requested*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (TS06W00.TS06WSWF == "Y") /* Map must be formatted*/
      TS06221(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TS06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  TS06M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  TS06M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (TSWREC.XXXMSGNO != 0) /* Message to display*/

    TS06M001.XXXMODID = TSWREC.XXXMODID; /* Module identification*/
    if (TSWREC.XXXMSGNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(TSWREC.XXXMSGNO);
    end /* Message number*/

    set TS06M001 alarm; /* Indicate sound alarm*/

  end

  converse TS06M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMODID = " "; /* Module identification*/
  TSWREC.XXXMSGNO = 0; /* Message number*/

  COMMAREA.CATOAP = TS06M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = TS06M001.CAITEM; /* Application data*/


end // end TS06220

// Format the display data
Function TS06221()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set TS06M001 initial; /* M001 input/output area*/

  TS06W00.TS06WSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (TS06W00.XXXTSPAG != TA5REC.TA5TSQIX) /* desired page not current*/

      /* ------------------------------------------------------------*/
       /* if the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (TS06W00.TS06WSWU == "Y") /* current page was changed*/

        TS06S04(); /* update temporary storage page*/

        TS06W00.TS06WSWU = "N"; /* storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* if the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (TS06W00.XXXTSPAG > TS06W00.TA5TSQIX) /* desired greater highest*/
        TS06W00.XXXTSPAG = TS06W00.TA5TSQIX; /* default to highest*/
      end

      TS06S05(); /* obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    TS06M001.XXXTSPAG = TS06W00.XXXTSPAG; /* Current page*/
    TS06M001.TA5TSQIX = TS06W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  TS06M001.TS06MLIT = "SPLIT P/L MODE"; /* split mode*/
  set TS06M001.TS06M-LIT4 protect, invisible;
  set TS06M001.TS-NIL-STAT protect, invisible;

  TS06M001.TSVPLNBR = TS06W01.TSVPLNBR; /* new p/l number*/
  TS06M001.XWHCD = TS06W01.XWHCD; /* warehouse code*/
  TS06M001.OP1CUOID = TS06W01.OP1CUOID; /* order number*/
  TS06M001.OP1NORID = TS06W01.OP1NORID; /* order id*/
  TS06M001.KUCCOID = TS06W01.KUCCOID; /* customer*/

  if (TS06W01.SR1PKDT == 0) /* if no sched dt*/
     /* next sentence*/
  else
    TS06M001.SR1PKDT = TS06W01.SR1PKDT; /* pick sched date*/
  end

  if (TS06W01.NIAIVCDT == 0) /* if no invoice dt*/
     /* next sentence*/
  else
    TS06M001.NIAIVCDT = TS06W01.NIAIVCDT; /* invoice date*/
  end

  TS06W00.TS06WIXM = 1; /* Initialize line index*/

  while (TS06W00.TS06WIXM <= 14) /* Until screen is full*/

    if (TS06W01.TS-PL-CRTN-NBR[TS06WIXM] > 0 /* if line exists to move*/
     || TS06W01.XGPCD[TS06WIXM] > " ")      

      set TS06M001.TS06MACT[TS06WIXM] initialAttributes; /* protected*/
      set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] protect; /* protected*/

      TS06M001.TS06MACT[TS06WIXM] = TS06W01.TS06MACT[TS06WIXM];
      TS06M001.TS-PL-CRTN-NBR[TS06WIXM] = TS06W01.TS-PL-CRTN-NBR[TS06WIXM];
      TS06M001.TSOSHPQT[TS06WIXM] = TS06W01.TSOSHPQT[TS06WIXM];

      TS06M001.TSYNCTLB[TS06WIXM] = TS06W01.TSYNCTLB[TS06WIXM];
      TS06M001.TSYNCTFT[TS06WIXM] = TS06W01.TSYNCTFT[TS06WIXM];

      TS06M001.XGPCD[TS06WIXM] = TS06W01.XGPCD[TS06WIXM];
      TS06M001.SY1STNBR[TS06WIXM] = TS06W01.SY1STNBR[TS06WIXM];
      TS06M001.SY2CLRID[TS06WIXM] = TS06W01.SY2CLRID[TS06WIXM];
      TS06M001.XDMCD[TS06WIXM] = TS06W01.XDMCD[TS06WIXM];
      TS06M001.XQACD[TS06WIXM] = TS06W01.XQACD[TS06WIXM];
      TS06M001.XOWCD[TS06WIXM] = TS06W01.XOWCD[TS06WIXM];
      TS06M001.PC2INSEG[TS06WIXM] = TS06W01.PC2INSEG[TS06WIXM];
      TS06M001.XPGCD[TS06WIXM] = TS06W01.XPGCD[TS06WIXM];
      TS06M001.XUMCD[TS06WIXM] = TS06W01.XUMCD[TS06WIXM];
      TS06M001.TS06MUNT[TS06WIXM] = TS06W01.TS06MUNT[TS06WIXM];
      TS06M001.TS06MXCP[TS06WIXM] = TS06W01.TS06MXCP[TS06WIXM];

    end

    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* Increment line index*/

  end

  TSWREC.XXXMSGNO = 229; /* indicate hit enter or pf3*/

  set TS06M001.TSVPLNBR cursor, bold; /* highlight*/
  set TS06M001.TS06MLT1 initialAttributes; /* dark*/
  set TS06M001.TS06MLT2 initialAttributes; /* dark*/

  set TS06M001.OP1CUOID protect; /* protected*/
  set TS06M001.OP1NORID protect; /* protected*/
  set TS06M001.PC3POIDT initialAttributes; /* protected*/
  set TS06M001.FY1FCTYC initialAttributes; /* protected*/
  set TS06M001.XCTCD initialAttributes; /* protected*/

end // end TS06221

// Check attention identifier
Function TS06230()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      TS06211(); /* Purge temporary storage*/

      XSTSS02(); /* Exit to another application*/

      set TS06M001.CATOAP cursor, bold; /* Highlight*/

    else

      TSWREC.XXXMODID = "230"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pa2) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS06M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3 /* PF3 was pressed*/
     || converseVar.eventKey is pa2) /* pa2 was pressed*/
      TSWREC.TSVPLNBR = TS06W00.TSVPLNBR; /* p/l number*/
      TSWREC.OP1CUOID = TS06W00.OP1CUOID; /* order number*/
      TSWREC.OP1NORID = TS06W00.OP1NORID; /* order number*/
      COMMAREA.CATOAP = "TS06"; /* TO application*/
    end

    TS06211(); /* Purge temporary storage*/

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* page forward*/
   && converseVar.eventKey not pf8)  /* page backward*/

    TSWREC.XXXMODID = "230"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end TS06230

// Reset highlighted fields
Function TS06240()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS06M001.TSVPLNBR initialAttributes; /* p/l number*/
  set TS06M001.OP1CUOID protect; /* order number*/
  set TS06M001.OP1NORID protect; /* order id*/
  set TS06M001.PC3POIDT initialAttributes; /* po month range*/
  set TS06M001.FY1FCTYC initialAttributes; /* factory code*/
  set TS06M001.XCTCD initialAttributes; /* country code*/
  set TS06M001.TS06MLIT initialAttributes; /* split mode literal*/
  set TS06M001.TS06MLT1 initialAttributes; /* pf keys literal one*/
  set TS06M001.TS06MLT2 initialAttributes; /* pf keys literal two*/

  TS06W00.TS06WIXM = 1; /* Initialize line index*/

  while (TS06W00.TS06WIXM <= 14) /* Until end of lines*/
    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] > 0 /* if line exists*/
     || TS06M001.XGPCD[TS06WIXM] > " ")      

      set TS06M001.TS06MACT[TS06WIXM] initialAttributes; /* Reset select flag*/
      set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] protect; /* Reset carton number*/

    end

    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* Increment line index*/

  end

  set TS06M001.CATOAP initialAttributes; /* TO application*/
  set TS06M001.CAITEM initialAttributes; /* Application data*/


end // end TS06240

// Verify the entered data
Function TS06250()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.CAITEM > " ") /* Application data was entered*/

    TSWREC.XXXMODID = "150"; /* Module identification*/
    set TS06M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    TS06251(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* check that all cartons do not exist on new packing list.*/
    /* ------------------------------------------------------------*/

    TS06W00.TS06WIXM = 14; /* set index to carton line*/

    while (TS06W00.TS06WIXM > 0) /* until end of lines*/

      if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] != 0) /* if carton line*/

        TS06S07(); /* validate carton number*/

        if (TS06W00.TS06WSWI == "Y") /* carton number exists*/

          TSWREC.XXXMODID = "250"; /* module identification*/
          set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] protect, bold; /* highlight*/
          set TS06M001.TSVPLNBR cursor, bold; /* highlight*/
          converseLib.validationFailed(193); /* carton number cannot exist*/

        else

           /* next sentence*/

        end

      end

      TS06W00.TS06WIXM = TS06W00.TS06WIXM - 1; /* decrement line index*/

    end

    /* ------------------------------------------------------------*/
     /* If the packing list number was changed, check if it exists*/
    /* ------------------------------------------------------------*/

    TS06W00.TS06WSWA = "N"; /* set p/l valid switch off*/

    if (TS06M001.TSVPLNBR != TS06W01.TSVPLNBR) /* p/l changed*/

      TS06S10(); /* validate packing list number*/

      if (TS06W00.TS06WSWA == "Y") /* p/l was valid*/

        TS06W01.TSVPLNBR = TS06M001.TSVPLNBR; /* save p/l number*/

      else

        TSWREC.XXXMODID = "250"; /* module identification*/
        set TS06M001.TSVPLNBR cursor, bold; /* highlight*/
        converseLib.validationFailed(172); /* packing list number invalid*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end TS06250

// Verify scroll request
Function TS06251()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS06W00.XXXTSPAG < 2)       /* and no previous pages*/

    TSWREC.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS06W00.XXXTSPAG >= TS06W00.TA5TSQIX) /* and no more pages*/

    TSWREC.XXXMODID = "251"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WIXM = 14; /* Initialize line index*/

  while (TS06W00.TS06WIXM > 0) /* Until end of lines*/

    if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM])

      TSWREC.XXXMODID = "251"; /* Module identification*/
      set TS06M001.TS06MACT[TS06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] != 
    TS06W01.TS-PL-CRTN-NBR[TS06WIXM])

      TSWREC.XXXMODID = "251"; /* Module identification*/
      set TS06M001.TS-PL-CRTN-NBR[TS06WIXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(14); /* Modifications not allowed*/

    end

    TS06W00.TS06WIXM = TS06W00.TS06WIXM - 1; /* Decrement line number*/

  end

  if (TS06M001.XCTCD != TS06W01.XCTCD) /* country code*/

    TSWREC.XXXMODID = "251"; /* Module identification*/
    set TS06M001.XCTCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS06M001.FY1FCTYC != TS06W01.FY1FCTYC) /* factory code*/

    TSWREC.XXXMODID = "251"; /* Module identification*/
    set TS06M001.FY1FCTYC cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS06M001.PC3POIDT != TS06W01.PC3POIDT) /* po month range changed*/

    TSWREC.XXXMODID = "251"; /* Module identification*/
    set TS06M001.PC3POIDT cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS06M001.OP1NORID != TS06W01.OP1NORID) /* ord id changed*/

    TSWREC.XXXMODID = "251"; /* Module identification*/
    set TS06M001.OP1NORID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS06M001.OP1CUOID != TS06W01.OP1CUOID) /* ord number changed*/

    TSWREC.XXXMODID = "251"; /* Module identification*/
    set TS06M001.OP1CUOID cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end

  if (TS06M001.TSVPLNBR != TS06W01.TSVPLNBR) /* p/l number changed*/

    TSWREC.XXXMODID = "251"; /* Module identification*/
    set TS06M001.TSVPLNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(14); /* Modifications not allowed*/

  end


end // end TS06251

// Process valid input request
Function TS06260()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    TS06W00.XXXTSPAG = TS06W00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    TS06W00.XXXTSPAG = TS06W00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* set up the data for a return to the original packing list*/
   /* after a successful request to split the packing list.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WSWD = "1"; /* screen to be displayed switch*/
  TS06W00.TS06WSWR = "Y"; /* request for data switch*/

  TS06M001.TSVPLNBR = TS06W00.TSVPLNBR; /* old p/l number*/
  TS06M001.OP1CUOID = TS06W00.OP1CUOID; /* ord number*/
  TS06M001.OP1NORID = TS06W00.OP1NORID; /* ord number*/

   /* ------------------------------------------------------------*/
   /* split cartons from old packing list to new packing list*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WIXM = 1; /* set line index to one*/
  TS06W00.TS06W-FIRST-CRTN = "Y"; /* first carton, used in ts06290*/

  while (TS06W00.TS06WIXM <= 50) /* until end of lines*/

    if (TSWREC.TSW-TSOCRTNB[TS06WIXM] != 0) /* if carton line*/

      /* ------------------------------------------------------------*/
       /* update all products with new packing list number.*/
      /* ------------------------------------------------------------*/

      TS06270(); /* update product rows*/

      /* ------------------------------------------------------------*/
       /* update the carton row with the new p/l number*/
      /* ------------------------------------------------------------*/

      TS06280(); /* update carton row*/

      /* ------------------------------------------------------------*/
       /* update the packing list row with the new units,wght,vol.*/
      /* ------------------------------------------------------------*/

      TS06290(); /* update the packing list*/

    end

    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* commit all table changes before leaving split p\l mode*/
   /* ------------------------------------------------------------*/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit all changes*/

   /* ------------------------------------------------------------*/
   /* indicate function successfully completed*/
   /* ------------------------------------------------------------*/

  TSWREC.XXXMSGNO = 202; /* indicate successful split*/

   /* ------------------------------------------------------------*/
   /* Initialize carton number table in TSWREC*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06W-CRTN-CNT = 0;
  TS06W00.TS06WIXM = 1; /* set line index to one*/
  while (TS06W00.TS06WIXM <= 50)
    TSWREC.TSW-TSOCRTNB[TS06WIXM] = 0; /* init crtn nbr tbl*/
    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* increment index*/
  end

end // end TS06260

// update products with new p/l
Function TS06270()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the product table.*/
   /* ------------------------------------------------------------*/

  TS06271(); /* Select set and open product cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch each product row and insert product with new p/l nbr*/
   /* ------------------------------------------------------------*/

  while (TS06W00.TS06WSWP == "N") /* Until end of cursor*/

    TS06272(); /* Fetch selected rows*/

    if (TS06W00.TS06WSWP == "N") /* if not end of cursor*/

      /* ------------------------------------------------------------*/
       /* insert each product row with new p/l number*/
      /* ------------------------------------------------------------*/

      TS06273(); /* insert new product*/

    end

  end

   /* ------------------------------------------------------------*/
   /* delete old products from carton with old p/l number*/
   /* ------------------------------------------------------------*/

  TS06274(); /* delete old product*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the product table.*/
   /* ------------------------------------------------------------*/

  TS06275(); /* Close the selected set cursor*/

end // end TS06270

// scan product file for carton
Function TS06271()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set TSZREC empty; /* Clear row storage area*/
  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS06W00.TSVPLNBR; /* old p/l number*/
  TSZREC.OP1CUOID = TS06W00.OP1CUOID; /* order number*/
  TSZREC.OP1NORID = TS06W00.OP1NORID; /* order id*/
  TSZREC.TSPCRTNB = TSWREC.TSW-TSOCRTNB[TS06WIXM]; /* carton number*/
  TSZREC.XGPCD = "**"; /* all gpc codes*/
  TSZREC.SY1STNBR = "******"; /* all styles*/
  TSZREC.SY2CLRID = "***"; /* all colors*/
  TSZREC.XDMCD = "**"; /* all dimensions*/
  TSZREC.XQACD = "**"; /* all quality codes*/
  TSZREC.XOWCD = "**"; /* all owner groups*/
  TSZREC.PC2INSEG = "***"; /* all spec codes*/
  TSZREC.XPGCD = "**"; /* all package types*/
  TSZREC.XUMCD = "**"; /* all units of measure*/
  TSZREC.XCTCD = "****"; /* all countries*/
  TSZREC.SY5SZID = -1; /* all sizes*/

  TS6REC.TS6TASK = "S1"; /* scan all products by carton*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    TS06W00.TS06WSWP = "N"; /* End of cursor switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "271"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06271

// Fetch next row in product tbl
Function TS06272()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "N1"; /* fetch next row*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If end of cursor, indicate end of product select set.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      TS06W00.TS06WSWP = "Y"; /* end of products*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "272"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06272

// insert new product
Function TS06273()
   /* ------------------------------------------------------------*/
   /* insert the product row with the new p/l number.*/
   /* ------------------------------------------------------------*/

  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS06W01.TSVPLNBR; /* new p/l number*/

  TS6REC.TS6TASK = "A "; /* insert*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "273"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "273"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT PRODUCT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06273

// delete old product
Function TS06274()
   /* ------------------------------------------------------------*/
   /* delete all the old products in the carton using old p/l nbr*/
   /* ------------------------------------------------------------*/

  set TS6REC empty; /* Clear i/o storage area*/

  TSZREC.TSVPLNBR = TS06W00.TSVPLNBR; /* old p/l number*/
  TSZREC.OP1CUOID = TS06W00.OP1CUOID; /* ord nbr*/
  TSZREC.OP1NORID = TS06W00.OP1NORID; /* ord id*/
  TSZREC.TSPCRTNB = TSWREC.TSW-TSOCRTNB[TS06WIXM]; /* carton number*/
  TSZREC.XGPCD = "**"; /* all gpc codes*/
  TSZREC.SY1STNBR = "******"; /* all styles*/
  TSZREC.SY2CLRID = "***"; /* all colors*/
  TSZREC.XDMCD = "**"; /* all dimensions*/
  TSZREC.XQACD = "**"; /* all quality codes*/
  TSZREC.XOWCD = "**"; /* all owner groups*/
  TSZREC.PC2INSEG = "***"; /* all spec codes*/
  TSZREC.XPGCD = "**"; /* all package types*/
  TSZREC.XUMCD = "**"; /* all units of measure*/
  TSZREC.XCTCD = "****"; /* all country codes*/
  TSZREC.FY1FCTYC = "****"; /* all factory codes*/
  TSZREC.PC3POIDT = -1; /* all factory codes*/
  TSZREC.SY5SZID = -1; /* all sizes*/

  TS6REC.TS6TASK = "D "; /* delete*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y";

      TSWREC.XXXMODID = "274";
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "274"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE PRODUCT ROW      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06274

// Close product table cursor
Function TS06275()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  TS6REC.TS6TASK = "C1"; /* close cursor*/

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back all changes*/

  TSWREC.XXXMODID = "275"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06275

// update carton with new p/l
Function TS06280()
   /* ------------------------------------------------------------*/
   /* select the carton row to update with new p/l number*/
   /* ------------------------------------------------------------*/

  TS06281(); /* select unique carton*/

   /* ------------------------------------------------------------*/
   /* delete the carton row with old p/l number*/
   /* ------------------------------------------------------------*/

  TS06282(); /* delete old carton*/

   /* ------------------------------------------------------------*/
   /* insert the carton row with new p/l number*/
   /* ------------------------------------------------------------*/

  TS06283(); /* insert new carton*/

end // end TS06280

// select carton row
Function TS06281()
   /* ------------------------------------------------------------*/
   /* Select carton row using old p/l number.*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear i/o storage area*/

  TSYREC.TSVPLNBR = TS06W00.TSVPLNBR; /* old p/l number*/
  TSYREC.OP1CUOID = TS06W00.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS06W00.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TSWREC.TSW-TSOCRTNB[TS06WIXM]; /* carton nbr*/

  TS4REC.TS4TASK = "S "; /* select unique carton with old p/l*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "281"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "281"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE CARTON ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06281

// delete carton row
Function TS06282()
   /* ------------------------------------------------------------*/
   /* delete carton row using old p/l number.*/
   /* ------------------------------------------------------------*/

  set TS4REC empty; /* Clear i/o storage area*/

  TS4REC.TS4TASK = "D "; /* delete carton with old p/l*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* delete*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "282"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "282"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE UNIQUE CARTON ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06282

// insert carton row
Function TS06283()
   /* ------------------------------------------------------------*/
   /* insert carton row using new p/l number.*/
   /* ------------------------------------------------------------*/

  set TS4REC empty; /* Clear i/o storage area*/

  TSYREC.TSVPLNBR = TS06W01.TSVPLNBR; /* new p/l number*/

  TS4REC.TS4TASK = "A "; /* insert carton with new p/l*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert*/

   /* ------------------------------------------------------------*/
   /* If successful, return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* and normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "283"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "283"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT UNIQUE CARTON ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06283

// update packing list info
Function TS06290()
   /* ------------------------------------------------------------*/
   /* select the old packing list to update carton info*/
   /* ------------------------------------------------------------*/

  TS06291(); /* select unique old packing list*/

   /* ------------------------------------------------------------*/
   /* update the old packing list subtracting carton info*/
   /* ------------------------------------------------------------*/

  TS06292(); /* update old packing list*/

  if (TS06W00.TS06WSWA == "Y") /* if using existing p/l number*/

    /* ------------------------------------------------------------*/
     /* create new packing list using existing packing list number*/
    /* ------------------------------------------------------------*/

    TS06293(); /* select unique new packing list*/

    /* ------------------------------------------------------------*/
     /* update the existing new packing list with carton info*/
    /* ------------------------------------------------------------*/

    TS06294(); /* update existing packing list*/

  else

    /* ------------------------------------------------------------*/
     /* CREATE NEW PACKING LIST USING NEW PACKING LIST NUMBER.*/
     /* If this is first carton in tswrec.tsw-tsocrtn, create*/
     /* new packing list.  The first carton (non zero crtn nbr)*/
     /* does not have to be in the first occurrance in tswrec.*/
     /* tsw-tsocrtnb, because selected cartons for split may be*/
     /* changed (unselected) causing that carton number to be*/
     /* zeroed out (will be bypassed).*/
    /* ------------------------------------------------------------*/

    if (TS06W00.TS06W-FIRST-CRTN == "Y") /* first carton*/
      TS06W00.TS06W-FIRST-CRTN = "N"; /**/

      /* ------------------------------------------------------------*/
       /* insert the new packing list with carton info*/
      /* ------------------------------------------------------------*/

      TS06295(); /* insert new packing list*/

    else

      /* ------------------------------------------------------------*/
       /* select the existing packing list to update*/
      /* ------------------------------------------------------------*/

      TS06293(); /* select unique new packing list*/

      /* ------------------------------------------------------------*/
       /* update the existing packing list with carton info*/
      /* ------------------------------------------------------------*/

      TS06294(); /* update existing new packing list*/

    end

  end

end // end TS06290

// select old packing list
Function TS06291()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS06W00.TSVPLNBR; /* old p/l number*/
  TSVREC.OP1CUOID = TS06W00.OP1CUOID; /* order number*/
  TSVREC.OP1NORID = TS06W00.OP1NORID; /* order id*/

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "291"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "291"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06291

// update old packing list
Function TS06292()
   /* ------------------------------------------------------------*/
   /* udpate the requested row from the table.*/
   /* ------------------------------------------------------------*/

   /* TSVREC.TSISHPQT = TSVREC.TSISHPQT - TS06W01.TSOSHPQT(TS06WIXM);*/
   /* TSVREC.TSVNPLLB = TSVREC.TSVNPLLB - TS06W01.TSYNCTLB(TS06WIXM);*/
   /* TSVREC.TSVNPLFT = TSVREC.TSVNPLFT - TS06W01.TSYNCTFT(TS06WIXM);*/
  TSVREC.TSISHPQT = TSVREC.TSISHPQT - TSYREC.TSOSHPQT;
  TSVREC.TSVNPLLB = TSVREC.TSVNPLLB - TSYREC.TSYNCTLB;
  TSVREC.TSVNPLFT = TSVREC.TSVNPLFT - TSYREC.TSYNCTFT;

  if (TSVREC.TSISHPQT == 0) /* if no cartons remain on packing list*/

    /* ------------------------------------------------------------*/
     /* if no cartons remain then delete old packing list*/
    /* ------------------------------------------------------------*/
    try
      call "IO4700" ("D ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* delete table row*/

  else

    /* ------------------------------------------------------------*/
     /* if cartons remain then update old packing list*/
    /* ------------------------------------------------------------*/
    try
      call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
    end /* update table row*/

  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "292"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "292"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UDPATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06292

// select new packing list
Function TS06293()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS06W01.TSVPLNBR; /* new p/l number*/
  TSVREC.OP1CUOID = TS06W00.OP1CUOID; /* order number*/
  TSVREC.OP1NORID = TS06W00.OP1NORID; /* order id*/

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "293"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "293"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06293

// update existing p/l
Function TS06294()
   /* ------------------------------------------------------------*/
   /* update the new packing list row*/
   /* ------------------------------------------------------------*/

   /* TSVREC.TSISHPQT = TSVREC.TSISHPQT + TS06W01.TSOSHPQT(TS06WIXM);*/
   /* TSVREC.TSVNPLLB = TSVREC.TSVNPLLB + TS06W01.TSYNCTLB(TS06WIXM);*/
   /* TSVREC.TSVNPLFT = TSVREC.TSVNPLFT + TS06W01.TSYNCTFT(TS06WIXM);*/
  TSVREC.TSISHPQT = TSVREC.TSISHPQT + TSYREC.TSOSHPQT;
  TSVREC.TSVNPLLB = TSVREC.TSVNPLLB + TSYREC.TSYNCTLB;
  TSVREC.TSVNPLFT = TSVREC.TSVNPLFT + TSYREC.TSYNCTFT;

  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* update table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "294"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "294"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06294

// insert new packing list
Function TS06295()
   /* ------------------------------------------------------------*/
   /* insert the new packing list row*/
   /* ------------------------------------------------------------*/

  TSVREC.TSVPLNBR = TS06W01.TSVPLNBR; /* new p/l number*/

  TSVREC.TSFSHPID = 0; /* p/l is not attached to shpment*/

   /* MOVE TS06W01.TSOSHPQT(TS06WIXM) TO TSVREC.TSISHPQT;*/
   /* MOVE TS06W01.TSYNCTLB(TS06WIXM) TO TSVREC.TSVNPLLB;*/
   /* MOVE TS06W01.TSYNCTFT(TS06WIXM) TO TSVREC.TSVNPLFT;*/
  TSVREC.TSISHPQT = TSYREC.TSOSHPQT;
  TSVREC.TSVNPLLB = TSYREC.TSYNCTLB;
  TSVREC.TSVNPLFT = TSYREC.TSYNCTFT;

  try
    call "IO4700" ("A ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* insert table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "295"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/

      exit stack;

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "295"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT PACKING LIST ROW    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06295

// INACTIVE PACKING LIST PROCESS
Function TS06300()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS06310(); /* Obtain the data to display*/

  TS06320(); /* Format and display the map*/

  TS06330(); /* Check attention identifier*/

  TS06340(); /* Reset fields to normal intensity*/

  TS06350(); /* Verify the entered data*/

  TS06360(); /* Process valid input request*/


end // end TS06300

// OBTAIN THE DATA TO DISPLAY
Function TS06310()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS06M001.TSVPLNBR; /* pl nbr*/

  try
    call "IO4700" ("SI", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/
      TS06W00.TS06WSWR = "Y"; /* request for data switch*/
      TSWREC.XXXMODID = "310"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* indicate updated by another*/
      exit stack;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "310"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back all changes*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT UNIQUE PACKING LIST ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06310

// FORMAT AND CONVERSE THE MAP
Function TS06320()
  set TS06M001 initial;
  TS06M001.TSVPLNBR = TSVREC.TSVPLNBR;
  TS06M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS06M001.TS06MLIT = "INACTIVE P/L";

  set TS06M001.TSVPLNBR bold, protect;
  set TS06M001.TS-NIL-STAT cursor;
  set TS06M001.XXXTSPAG protect, invisible;
  set TS06M001.OP1CUOID protect, invisible;
  set TS06M001.OP1NORID protect, invisible;
  set TS06M001.TS06M-CMP-FLG protect, invisible;

  if (converseVar.validationMsgNum != 0)
    set TS06M001 alarm;
  end

  converse TS06M001 ;
end // end TS06320

// CHECK ATTENTION IDENTIFIER
Function TS06330()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = TS06M001.CATOAP;
      COMMAREA.CAITEM = TS06M001.CAITEM;
      XSTSS02(); /* Exit to another application*/
      set TS06M001.CATOAP cursor, bold; /* Highlight*/
    else
      TSWREC.XXXMODID = "330"; /* Module identification*/
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "TS06M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      TSWREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
      TSWREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
      TSWREC.OP1NORID = TS06M001.OP1NORID; /* order number*/
      TSWREC.KUCCOID = TS06M001.KUCCOID; /* customer*/
      TSWREC.XXXTSPAG = 1; /* reset page number to 1*/
      COMMAREA.CATOAP = "TS05"; /* TO application*/
    end

    XSTSS02(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    TSWREC.XXXMODID = "330"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* if the packing list has been invoiced, or updt not allowed,*/
   /* any special function key other than select (enter) is not*/
   /* allowed to be used.*/
   /* ------------------------------------------------------------*/
end // end TS06330

// RESET HIGHLIGHTED FIELDS
Function TS06340()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set TS06M001.CATOAP initialAttributes; /* TO application*/
  set TS06M001.CAITEM initialAttributes; /* Application data*/

end // end TS06340

// VERIFY DATA ENTERED
Function TS06350()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (TS06M001.CAITEM > " ") /* Application data was entered*/
    TSWREC.XXXMODID = "350"; /* Module identification*/
    set TS06M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
  end

   /* ------------------------------------------------------------*/
   /* Verify update P/L to completed status*/
   /* ------------------------------------------------------------*/

  if (TS06M001.TS-NIL-STAT == "C" /* completed*/
   || TS06M001.TS-NIL-STAT == "A" /* active*/
   || TS06M001.TS-NIL-STAT == "I") /* inactive*/
    TS06W00.TS06W-UPDT-STAT = "Y"; /* update status flag*/
  else
    set TS06M001.TS-NIL-STAT cursor, bold;
    converseLib.validationFailed(365); /* invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end TS06350

// PROCESS VALID INPUT REQUEST
Function TS06360()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/


  if (TS06W00.TS06W-UPDT-STAT == "Y") /* update status switch*/
    TS06362(); /* update status code on vnlplo*/

    if (VAGen_SQLCODE == 0)
      TS06W00.TS06WSWF = "Y"; /* Format the map switch*/
      TS06W00.TS06WSWR = "Y"; /* request for data switch*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* commit status code change*/
    end
  end
end // end TS06360

// UPDATE P/L STATUS
Function TS06362()
   /* -------------------------------------------------------------------*/
   /* Update status code for packing list*/
   /* There is only one way to get here:*/
   /* 1) update status by 'status' field on map.*/
   /* -------------------------------------------------------------------*/

  TSVREC.TS-NIL-STAT = TS06M001.TS-NIL-STAT;

  TSVREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  TSVREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO4700" ("U ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* successful update*/
    if (SQLCA.VAGen_SQLCODE == 0)
      TS06W00.TS06W-UPDT-STAT = "N"; /* do not update status again*/
      TS06W00.TS06WSWR = "Y"; /* refresh data, get new status*/
      if (TSVREC.TS-NIL-STAT == "C")
        converseLib.validationFailed(369); /* status code set 'completed'*/
        TS06W00.TS06WSWD = "1"; /* request map 1 screen*/
      else
        if (TSVREC.TS-NIL-STAT == "A")
          converseLib.validationFailed(370); /* status code set to 'active'*/
          TS06W00.TS06WSWD = "1"; /* request map 1 screen*/
        else
          converseLib.validationFailed(371); /* status code set to 'inactive'*/
          TS06W00.TS06WSWD = "3"; /* request map 3 screen*/
        end
      end
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100)
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      TS06W00.TS06WSWR = "Y";
      TSWREC.XXXMODID = "362";
      TSWREC.XXXMSGNO = 12;
      exit stack;
    end
  end


  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  TSWREC.XXXMODID = "362";

  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(11);
    TA1REC.TA1FUNC = "POST";
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    converseLib.validationFailed(10);
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1LOC = "UPDATE PACKING LIST ROW ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = TSWREC.XXXMODID;
  TA1REC.TA1DBASE = "DTRANS  ";
  TA1REC.TA1TBLVU = "VNLPLO01";
  TA1REC.TA1TBLKE = TSVREC.TSVKEY;

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end TS06362

// Select the heading information
Function TS06S01()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSVREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
  if (TS06M001.OP1CUOID != 0)
    if (TS06M001.OP1NORID == 0) /* if sub id not entered*/
      TSVREC.OP1NORID = 1; /* use default of one*/
      TS06M001.OP1NORID = 1;
    else
      TSVREC.OP1NORID = TS06M001.OP1NORID; /* order id*/
    end
  end

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TSVREC.XWHCD = "  "; /* warehouse*/
      TSVREC.SR1PKDT = 0; /* pick sched dt*/
      TSVREC.NIAIVCDT = 0; /* invoice date*/
       /* the following stmt was changed so the original customer*/
       /* is not lost on when the order/packing list is not found*/
      TSVREC.KUCCOID = TS06M001.KUCCOID; /* customer*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PACKLIST FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06S01

// Save data in display storage
Function TS06S02()
   /* ------------------------------------------------------------*/
   /* If the first line on a page, save the heading information.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WIXM == 1) /* First line on page*/

    TS06W01.TSVPLNBR = TSVREC.TSVPLNBR; /* p/l number*/
    TS06W01.XWHCD = TSVREC.XWHCD; /* warehouse code*/
    TS06W01.OP1PARTN = TSVREC.OP1PARTN;
    TS06W01.OP1CUOID = TSVREC.OP1CUOID; /* order number*/
    TS06W01.OP1NORID = TSVREC.OP1NORID; /* order id*/
    TS06W01.KUCCOID = TSVREC.KUCCOID; /* customer*/
    TS06W01.SR1PKDT = TSVREC.SR1PKDT; /* pick sched date*/
    TS06W01.NIAIVCDT = TSVREC.NIAIVCDT; /* nil invoice date*/
    TS06W01.XDSCD = TSVREC.XDSCD; /* direct ship code*/
    TS06W00.TS-NIL-STAT = TSVREC.TS-NIL-STAT; /* status code*/

  end

   /* ------------------------------------------------------------*/
   /* If no table row was found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Table row not found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  TS06S13(); /* Select count style missing ctry code*/

  if (TS6REC.TS6-CNT > 0) /* if cnt gt 0, missing ctry code*/
    TS06W01.TS06W-ASTERISK[TS06WIXM] = "*"; /* flag carton*/
  end


  TS06W01.TS-PL-CRTN-NBR[TS06WIXM] = TSYREC.TSPCRTNB; /* carton nbr*/
  TS06W01.TSOSHPQT[TS06WIXM] = TSYREC.TSOSHPQT; /* carton units*/
  TS06W01.TSYNCTLB[TS06WIXM] = TSYREC.TSYNCTLB; /* carton weight*/
  TS06W01.TSYNCTFT[TS06WIXM] = TSYREC.TSYNCTFT; /* carton volume*/
  TS06W01.TS06MXCP[TS06WIXM] = TSYREC.TSZXCPFL; /* pick except flag*/
  TS06W01.XGPCD[TS06WIXM] = " "; /* gpc code*/
  TS06W01.SY1STNBR[TS06WIXM] = " "; /* style*/
  TS06W01.SY2CLRID[TS06WIXM] = " "; /* color*/
  TS06W01.XDMCD[TS06WIXM] = " "; /* dim code*/
  TS06W01.XQACD[TS06WIXM] = " "; /* quality code*/
  TS06W01.XOWCD[TS06WIXM] = " "; /* owner group code*/
  TS06W01.PC2INSEG[TS06WIXM] = " "; /* shade code*/
  TS06W01.XPGCD[TS06WIXM] = " "; /* package type*/
  TS06W01.XUMCD[TS06WIXM] = " "; /* uom code*/
  TS06W01.TS06MUNT[TS06WIXM] = 0; /* units per product*/

  TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* Increment line index*/


end // end TS06S02

// Save data in display storage
Function TS06S03()
   /* ------------------------------------------------------------*/
   /* If the first line on a page, save the heading information.*/
   /* ------------------------------------------------------------*/

  if (TS06W00.TS06WIXM == 1) /* First line on page*/

    TS06W01.TSVPLNBR = TSVREC.TSVPLNBR; /* p/l number*/
    TS06W01.XWHCD = TSVREC.XWHCD; /* warehouse code*/
    TS06W01.OP1PARTN = TSVREC.OP1PARTN; /* part char*/
    TS06W01.OP1CUOID = TSVREC.OP1CUOID; /* order number*/
    TS06W01.OP1NORID = TSVREC.OP1NORID; /* order id*/
    TS06W01.KUCCOID = TSVREC.KUCCOID; /* customer*/
    TS06W01.SR1PKDT = TSVREC.SR1PKDT; /* pick sched date*/
    TS06W01.NIAIVCDT = TSVREC.NIAIVCDT; /* nil invoice date*/
    TS06W01.XDSCD = TSVREC.XDSCD; /* direct ship code*/

  end

   /* ------------------------------------------------------------*/
   /* If no table row was found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Table row not found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  TS06W01.TS-PL-CRTN-NBR[TS06WIXM] = 0; /* carton number*/
  TS06W01.TSOSHPQT[TS06WIXM] = 0; /* carton units*/
  TS06W01.TSYNCTLB[TS06WIXM] = 0; /* carton weight*/
  TS06W01.TSYNCTFT[TS06WIXM] = 0; /* carton volume*/
  TS06W01.TS06MXCP[TS06WIXM] = " "; /* pick except flag*/
  TS06W01.XGPCD[TS06WIXM] = TSZREC.XGPCD; /* gpc code*/
  TS06W01.SY1STNBR[TS06WIXM] = TSZREC.SY1STNBR; /* style*/
  TS06W01.SY2CLRID[TS06WIXM] = TSZREC.SY2CLRID; /* color*/
  TS06W01.XDMCD[TS06WIXM] = TSZREC.XDMCD; /* dim code*/
  TS06W01.XQACD[TS06WIXM] = TSZREC.XQACD; /* quality code*/
  TS06W01.XOWCD[TS06WIXM] = TSZREC.XOWCD; /* owner group code*/
  TS06W01.PC2INSEG[TS06WIXM] = TSZREC.PC2INSEG; /* shade code*/
  TS06W01.XPGCD[TS06WIXM] = TSZREC.XPGCD; /* package type*/
  TS06W01.XUMCD[TS06WIXM] = TSZREC.XUMCD; /* uom code*/
  TS06W01.TS06MUNT[TS06WIXM] = TS6REC.TS6FUNCT; /* units per product*/
  TS06W01.TS06WCTN[TS06WIXM] = TSYREC.TSPCRTNB; /* carton number*/

  TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1; /* Increment line index*/


end // end TS06S03

// Update temporary storage page
Function TS06S04()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (TS06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S04"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06S04

// Read temporary storage page
Function TS06S05()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TS06W01.XXXTSLEN = TS06W00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = TS06W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (TS06W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  TSWREC.XXXMODID = "S05"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06S05

// determine if carton exists
Function TS06S07()
   /* ------------------------------------------------------------*/
   /* determine if carton exists on carton file*/
   /* ------------------------------------------------------------*/

  set TSYREC empty; /* Clear row storage area*/
  set TS4REC empty; /* Clear row storage area*/

  TSYREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSYREC.OP1CUOID = TS06M001.OP1CUOID; /* order number*/
  TSYREC.OP1NORID = TS06M001.OP1NORID; /* order id*/
  TSYREC.TSPCRTNB = TS06M001.TS-PL-CRTN-NBR[TS06WIXM]; /* carton number*/

  TS4REC.TS4TASK = "S "; /* select max*/

  try
    call "IO4710" (TS4REC, SQLCA, TSYREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* carton number exists*/

      TS06W00.TS06WSWI = "Y"; /* set switch to found*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* carton number not found*/

      TS06W00.TS06WSWI = "N"; /* set switch to not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S07"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY CARTON NUMBER EXISTS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSYREC.TSYKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06S07

// find existing ctn nbr for pf6
Function TS06S08()
   /* ------------------------------------------------------------*/
   /* search the previous lines for the carton number which*/
   /* belongs to the carton being renumbered.  if this line is*/
   /* also being renumbered then it is okay*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WIXC = 1; /* Initialize line index*/

  while (TS06W00.TS06WIXC <= 14) /* Until end of lines*/

    if (TS06W01.TS-PL-CRTN-NBR[TS06WIXC] != 0) /* if previous crtn line*/

      if (TS06W01.TS-PL-CRTN-NBR[TS06WIXC] == 
      TS06M001.TS-PL-CRTN-NBR[TS06WIXM]
       && TS06W01.TS-PL-CRTN-NBR[TS06WIXC] == 
      TS06M001.TS-PL-CRTN-NBR[TS06WIXC])

        TS06W00.TS06WSWI = "Y"; /* indicate exists*/

        return;

      end

    end

    TS06W00.TS06WIXC = TS06W00.TS06WIXC + 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* if carton is not being renumbered,*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WSWI = "N"; /* indicate carton not found*/

end // end TS06S08

// check for duplicate crtn nbr
Function TS06S09()
   /* ------------------------------------------------------------*/
   /* search the previous lines for a carton number which is a*/
   /* duplicate of any other carton number.*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WIXC = 1; /* Initialize line index*/

  while (TS06W00.TS06WIXC <= 14) /* Until end of lines*/

    if (TS06W01.TS-PL-CRTN-NBR[TS06WIXC] != 0) /* if previous crtn line*/

      if (TS06M001.TS-PL-CRTN-NBR[TS06WIXC] == 
      TS06M001.TS-PL-CRTN-NBR[TS06WIXM]
       && TS06W00.TS06WIXC != TS06W00.TS06WIXM)

        TS06W00.TS06WSWI = "Y"; /* indicate duplicate*/

        return;

      end

    end

    TS06W00.TS06WIXC = TS06W00.TS06WIXC + 1; /* Decrement line number*/

  end

   /* ------------------------------------------------------------*/
   /* if no duplicates, then set switch to no*/
   /* ------------------------------------------------------------*/

  TS06W00.TS06WSWI = "N"; /* no duplicates*/

end // end TS06S09

// determine if p/l exists
Function TS06S10()
   /* ------------------------------------------------------------*/
   /* determine if packing list exists on packing list table*/
   /* ------------------------------------------------------------*/

  set TSVREC empty; /* Clear row storage area*/

  TSVREC.TSVPLNBR = TS06M001.TSVPLNBR; /* p/l number*/
  TSVREC.OP1CUOID = TS06W01.OP1CUOID; /* order number*/
  TSVREC.OP1NORID = TS06W01.OP1NORID; /* order id*/

  try
    call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* p/l number exists*/

      TS06W00.TS06WSWA = "Y"; /* set switch to found*/

      return; /* Return to previous process*/

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* p/l number not found*/

      TS06W00.TS06WSWA = "N"; /* set switch to not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S10"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY PACKING LIST EXISTS ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06S10

// validate factory code
Function TS06S11()
   /* ------------------------------------------------------------*/
   /* check for GPC code to use in factory lookup*/
   /* ------------------------------------------------------------*/

  if ("S" in TS06M001.TS06MACT /* if line was selected*/
   && TS06W01.TS-PL-CRTN-NBR[sysVar.arrayIndex] != 0) /* and it is a carton line*/

    TS06W00.TS06WDX1 = sysVar.arrayIndex; /* set idx to carton line*/
    TS06W00.TS06WDX1 = TS06W00.TS06WDX1 + 1;
                                   /* set idx to next product line*/

    if (TS06W00.TS06WDX1 > 14) /* if last line of page exceeded*/

      TS06W00.TS06WDX1 = TS06W00.TS06WDX1 - 2; /* set to prev product line*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set FY1REC empty; /* Clear row storage area*/

  FY1REC.XGPCD = TS06M001.XGPCD[TS06WDX1]; /* GPC code*/

  FY1REC.FY1FCTYC = TS06M001.FY1FCTYC; /* factory code*/

  try
    call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      TS06M001.XCTCD = FY1REC.XCTCD; /* move country code for fcty*/
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      TSWREC.XXXMODID = "S11"; /* module identification*/
      set TS06M001.FY1FCTYC cursor, bold; /* highlight*/
      converseLib.validationFailed(166);

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S11"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VALIDATE FACTORY CODE      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06S11

// get next packing list number
Function TS06S12()
   /* ------------------------------------------------------------*/
   /* obtain the next packing list number to use in ts06215*/
   /* ------------------------------------------------------------*/

  set TSQREC empty; /* Clear row storage area*/

  try
    call "IO2530" ("G2", SQLCA, TSQREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return;

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* roll back all changes*/

      TS06W00.TS06WSWR = "Y"; /* request for data switch*/

      TSWREC.XXXMODID = "S12"; /* module identification*/
      TSWREC.XXXMSGNO = 12; /* row not found*/

      exit stack; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TSWREC.XXXMODID = "S12"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "GET NEXT PACKING LIST NBR  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* Program number*/
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view name*/
  TA1REC.TA1TBLKE = TSVREC.TSVKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end TS06S12

// SELECT COUNT STYLE
Function TS06S13()
   /* ---------------------------------------------------------------*/
   /* DETERMINE IF ANY STYLE WITHIN PL, ORD NBR, ORD ID AND CRTN NBR*/
   /* IS MISSING COUNTRY OF ORIGIN CODE.*/
   /* ---------------------------------------------------------------*/

  set TSZREC empty;
  set TS6REC empty;
  TSZREC.TSVPLNBR = TSYREC.TSVPLNBR;
  TSZREC.OP1CUOID = TSYREC.OP1CUOID;
  TSZREC.OP1PARTN = TSYREC.OP1PARTN;
  TSZREC.OP1NORID = TSYREC.OP1NORID;
  TSZREC.TSPCRTNB = TSYREC.TSPCRTNB;

  TS6REC.TS6TASK = "SC";

  try
    call "IO4720" (TS6REC, SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
   && SQLCA.VAGen_SQLCODE == 0)      /* AND NORMAL RETURN*/
    return; /* RETURN TO PREVIOUS PROCESS*/
  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP RETURN CODE*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL COMMAREA*/

  TSWREC.XXXMODID = "S13"; /* MODULE IDENTIFICATION*/

  if (sysVar.errorCode == "00000000" /* CALL SUCCESSFUL*/
   && SQLCA.VAGen_SQLCODE == -911)   /* AND RESOURCE NOT AVAILABLE*/
    converseLib.validationFailed(11); /* INDICATE NOT AVAILABLE*/
    TA1REC.TA1FUNC = "POST"; /* TERMINATION FUNCTION*/
  else
    converseLib.validationFailed(10); /* INDICATE SYSTEM ERROR*/
    TA1REC.TA1FUNC = "RETN"; /* TERMINATION FUNCTION*/
    converseLib.clearScreen();
     /* CLEAR SCREEN BEFORE DISPLAY*/
  end


  TA1REC.TA1TYPE = "DB2 "; /* TYPE OF ERROR*/
  TA1REC.TA1LOC = "SELECT COUNT TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* PROGRAM APPLICATION*/
  TA1REC.TA1PGMNO = TSWREC.XXXMODID; /* PROGRAM NUMBER*/
  TA1REC.TA1DBASE = "DTRANS  "; /* DATA BASE NAME*/
  TA1REC.TA1TBLVU = "VNLPLS01"; /* TABLE VIEW NAME*/
  TA1REC.TA1TBLKE = TSZREC.TSZKEY; /* TABLE KEY*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* ERROR DIAGNOSIS RTN*/

  exit stack; /* EXIT TO DISPLAY MAP*/
end // end TS06S13

// STORE CARTON NUMBER INTO ARRAY
Function TS06S14()
   /* ------------------------------------------------------------------*/
   /* Store selected carton(s) from map into carton number table.*/
   /* The carton number table will be used for P/L split (PF9 key)*/
   /* and transfer to TS07 (Enter key).*/
   /* 1. Carton number table 50 max.*/
   /* 2. Verify there are no duplicates.*/
   /* 3. Selections made on the screen, the following PF keys will*/
   /* cause the routine to be called:*/
   /* a. PF7 - scroll back*/
   /* b. PF8 - scroll forward*/
   /* c. PF9 - P/L split*/
   /* d. enter - transfer to TS07*/
   /* ------------------------------------------------------------------*/

  TS06W00.TS06WIXM = 1; /* init line index*/

  while (TS06W00.TS06WIXM <= 14) /* while line items exist*/
    if (TS06M001.TS06MACT[TS06WIXM] != TS06W01.TS06MACT[TS06WIXM]) /* s chg*/
      if (TS06M001.TS06MACT[TS06WIXM] == "S")
        if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] in TSWREC.TSW-TSOCRTNB)
           /* next sentence*/
        else
          if (0 in TSWREC.TSW-TSOCRTNB)
            TSWREC.TSW-TSOCRTNB[sysVar.arrayIndex] = TS06M001.TS-PL-CRTN-NBR[TS06WIXM];
            TS06W00.TS06W-CRTN-CNT = TS06W00.TS06W-CRTN-CNT + 1;
          else
            converseLib.validationFailed(372);
            exit stack;
          end
        end
      else
        if (TS06M001.TS06MACT[TS06WIXM] == " ")
          if (TS06M001.TS-PL-CRTN-NBR[TS06WIXM] in TSWREC.TSW-TSOCRTNB)
            TSWREC.TSW-TSOCRTNB[sysVar.arrayIndex] = 0;
            TS06W00.TS06W-CRTN-CNT = TS06W00.TS06W-CRTN-CNT - 1;
          end
        end
      end
    end
    TS06W00.TS06WIXM = TS06W00.TS06WIXM + 1;
  end
end // end TS06S14

//*** RECORD=TS06W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record TS06W00 type basicRecord
  10 TS06WIXM TS06WIXM ; 
  10 TS06WIXC TS06WIXC ; 
  10 TS06WDX1 TS06WDX1 ; 
  10 TS06W-NDX TS06W-NDX ; 
  10 TS06W-CRTN-DUP TS06W-CRTN-DUP ; 
  10 TS06W-CRTN-CNT TS06W-CRTN-CNT ; 
  10 TS06W-FIRST-CRTN TS06W-FIRST-CRTN ; 
  10 * char(12) ; 
    15 TS06WSWA TS06WSWA ; 
    15 TS06WSWB TS06WSWB ; 
    15 TS06WPLO TS06WPLO ; 
    15 TS06WSWC TS06WSWC ; 
    15 TS06WSWD TS06WSWD ; 
    15 TS06WSWF TS06WSWF ; 
    15 TS06WSWI TS06WSWI ; 
    15 TS06WSWP TS06WSWP ; 
    15 TS06WSWR TS06WSWR ; 
    15 TS06WSWU TS06WSWU ; 
    15 CACHGFL CACHGFL ; 
  10 * char(12) ; 
    15 PC3POIDT PC3POIDT ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 XCTCD XCTCD ; 
  10 * char(12) ; 
    15 TSVPLNBR TSVPLNBR ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 TS-PL-CRTN-NBR TS-PL-CRTN-NBR ; 
  10 * char(10) ; 
    15 TS06WLBS TS06WLBS ; 
    15 TS06WCFT TS06WCFT ; 
  10 TS06WUNT TS06WUNT ; 
  10 TSYNCTLB TSYNCTLB ; 
  10 TSYNCTFT TSYNCTFT ; 
  10 * char(12) ; 
    15 XXXTSLEN XXXTSLEN ; 
    15 XXXTSPAG XXXTSPAG ; 
    15 TA5TSQIX TA5TSQIX ; 
  10 TS06W-UPDT-STAT TS06W-UPDT-STAT ; 
  10 TS-NIL-STAT TS-NIL-STAT ; 
  10 TS06W-CMP-FLG TS06W-CMP-FLG ; 
end // end TS06W00

//*** RECORD=TS06W01 ****
// ------------------------------------------------------------
// Map 001 display storage.
// 
// NOTE:  Change hardcoded TSQ length in TS06110 and TS06210
//        whenever the record length changes.
// ------------------------------------------------------------
// ***********************
Record TS06W01 type basicRecord
  3 * char(700) ; 
    5 XXXTSLEN XXXTSLEN ; 
    5 TSVPLNBR TSVPLNBR ; 
    5 XWHCD XWHCD ; 
    5 OP1PARTN OP1PARTN ; 
    5 OP1CUOID OP1CUOID ; 
    5 OP1NORID OP1NORID ; 
    5 KUCCOID KUCCOID ; 
    5 SR1PKDT SR1PKDT ; 
    5 NIAIVCDT NIAIVCDT ; 
    5 PC3POIDT PC3POIDT ; 
    5 FY1FCTYC FY1FCTYC ; 
    5 XCTCD XCTCD ; 
    5 XDSCD XDSCD ; 
    5 TS06WGRP TS06WGRP [14] ; 
      10 TS06MACT TS06MACT ; 
      10 TS06W-ASTERISK TS06W-ASTERISK ; 
      10 TS-PL-CRTN-NBR TS-PL-CRTN-NBR ; 
      10 TSOSHPQT TSOSHPQT ; 
      10 TSYNCTLB TSYNCTLB ; 
      10 TSYNCTFT TSYNCTFT ; 
      10 XGPCD XGPCD ; 
      10 SY1STNBR SY1STNBR ; 
      10 SY2CLRID SY2CLRID ; 
      10 XDMCD XDMCD ; 
      10 XQACD XQACD ; 
      10 XOWCD XOWCD ; 
      10 PC2INSEG PC2INSEG ; 
      10 XPGCD XPGCD ; 
      10 XUMCD XUMCD ; 
      10 TS06MUNT TS06MUNT ; 
      10 TS06MXCP TS06MXCP ; 
      10 TS06WCTN TS06WCTN ; 
end // end TS06W01

// line action indicator
DataItem TS06MACT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS06MUNT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS06MXCP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS06W-ASTERISK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p/l completed flag (y/n)
DataItem TS06W-CMP-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS06W-CRTN-CNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS06W-CRTN-DUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS06W-FIRST-CRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index for crtn tbl in tswrec
DataItem TS06W-NDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update plo status switch
DataItem TS06W-UPDT-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// metric to u.s. conv. cu.ft
DataItem TS06WCFT decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS06WCTN smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws array index
DataItem TS06WDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS06WGRP char(47)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for carton lookup
DataItem TS06WIXC smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS06WIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// metric to u.s. conv. lbs
DataItem TS06WLBS decimal(9,6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// count of NLPLO table rows
DataItem TS06WPLO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// p/l number found switch
DataItem TS06WSWA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// p/l end of file switch
DataItem TS06WSWB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton end of file switch
DataItem TS06WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map to be displayed switch
DataItem TS06WSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format the map switch
DataItem TS06WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// carton number found switch
DataItem TS06WSWI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Product end of file switch
DataItem TS06WSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem TS06WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// storage page update switch
DataItem TS06WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of units per ctn
DataItem TS06WUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

