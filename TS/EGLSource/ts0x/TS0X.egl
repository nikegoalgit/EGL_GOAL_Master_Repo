package ts0x;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0X ****
// ************************************************************
// **                                                        **
// **      T R A N S P O R T A T I O N    S Y S T E M        **
// **                                                        **
// **          TS0X - Shipment Header Maintenance            **
// **                                                        **
// ************************************************************
// **                                                        **
// This application allows the user to update transportation
// shipment header information in the transportation shipment
// table.  The user will enter this application after selecting
// any of the option 1 from the shipment inq/maint menu.
// 
// (See System Flow Chart Section to see how this application
// fits into the shipment inq/maint flow).  Three screens
// can be accessed in this application:
// 
//   1) First the main shipment header inq/maint screen
//      appears.  The user can either look only at this screen
//      or press PF12 to enter change mode.  Change mode will
//      allow modification of most fields othe than shipment
//      id an shipment status.  The user can edit the screen in
//      change mode by hitting enter, PF17, or PF18.  The
//      shipment header is only updated when the enter key is
//      pressed and no edit errors exist.  PF17 and PF18 are
//      two other routes a user can take other than enter.
// 
//   2) PF17 will edit the main header screen and then show a
//      charges add screen.  The user can either look only at
//      this screen or press PF12 to enter change mode.  Change
//      mode will allow modification of any of the charge
//      fields.  The user can edit the screen in change mode
//      by hitting enter or PF18.  The shipment header is only
//      updated when the enter key is pressed on the main
//      shipment header screen and no edit errors exist.  PF3
//      will take one back to the main shipment header screen
//      and ignore entered fields.
// 
//   3) PF18 from the main header screen will edit the main
//      header screen and then show a shipment address screen.
//      The user can either look only at this screen or press
//      PF12 to enter change mode.  Change mode will allow
//      modification of any of the address fields.  The user
//      can edit the screen in change mode by hitting enter or
//      PF17.  The shipment header is only updated when the
//      enter key is pressed on the main shipment header screen
//      and no edit errors exist.  PF3 will take one back to
//      the main shipment header screen and ignore entered
//      fields.
// 
// If a user presses PA2 on any ot the 3 screens, the screen
// will be refreshed.  This means that the screen fields get
// set to the data values that were in the shipment header
// record before any changes were made.
// **                                                        **
// ************************************************************
// **            M A I N T E N A N C E    L O G              **
// ************************************************************
// **                                                        **
// control    date    name    description of change
// -------  -------- ------  ----------------------------------
//          07/07/88 CEPPLE  New application.
// TS#012   08/01/90 CEPPLE  Add gpc to all map headings.
//    FIX   03/28/91 CEPPLE  Fix TS0X110 to check ezemno after
//                           selecting ship hdr rather than sql
//                           code.
// TS#000   04/09/91 SFORD   Expanded length of "BOL" To 16 cha
// TS#000   06/10/91 CEPPLE  Remove Sales order and increase
//                           size of charges fields for 6/10/91
//                           table changes.
// TS#000   10/09/91 KSTOKK  Increase TSFTKG from 7 to 9 in sz.
// T262     05/08/92 KSTOKK  Update to allow change of GPC code
//                           for entire shipment.
// TS#283   10/12/92 SFORD   Add FCTY DOC RDT  handling logic
// TS#288   10/12/92 SFORD   Add DLVY CNFM RDT handling logic
// TS#310   02/12/93 TGIEBE  Allow user to enter actual
//                           departure date up to 10 days in
//                           the future.
// TS#999   08/13/93 SFORD   Increase CBMs   from 7 to 9 in sz.
//                           TABLE CHANGE USERID
// TS#999   11/08/93 NMASTE  Table Changes
// TS#290   11/16/93 RCHINI  Added logic to approve shipments
//                           to have an EDI ASN transmitted.
// *** TS#290 not yet        Only customers set up with an EDI
// *** implemented.          trading partner table entry (DCUST
//                           .VEDITP01) will be able to access
//                           the ASN approval information.
// TS#335   01/07/94 RCHINI  Added logic to prevent update for
//                           canceled shipments.
// TS#321   01/25/94 RCHINI  Modified TS0X to allow updat to
//                           YSS code on map 1.
// TS#999   03/09/93 SFORD   TABLE CHANGES 03/11/94
// **                                                        **
// TS#373   04/29/96 BKEPFO  ADDED A "Last updated by" FIELD TO
//                           TS0XM001 and a move statement in
//                           TS0XS0C to fill the new field.
// TS#000   11/07/96 JCARL1  Removed alarm from msg display.
// TS#724   04/02/97 skeobo  Add ADVN flag and processing.
// TS#783   04/10/97 JGUIDO  Kickoff TS2461 when shp-typ
//                           is changed to 'BA'.
//                           Remove VEDITPO01 - DCL00737.
// TS1527   02/02/98 BCHELL  auto submit Ts2451 job, when
//                           PF13 key is pressed
// Ts1527   02/16/98 smann2  Added FPT step also in TS0XTP3
//                           table
// TS1568   02/18/98 VKUMAR  Modify error message when billing
//                           indicator is changed (Ref:TS0X155)
// TS1701   05/08/98 RKALLA  If shipment type is 'BA' then chec
//                          whether the quality code is all 01
// TS00     06/15/98 MHUYNH  Changed JCL to trigger BL6031 afte
//                           TS2461 runs successfully.
// TS00     01/28/99 VKUMAR  Fixed ,comment line updating
//                           problem.
// TS0000   03/23/99 VKUMAR  Modified to update the leg-nbr
//                           when the discharge-loc is changed
//                           to a consolidation point.
//                           Refer(TS0XS0C,TS0X160,TS0X-161,
//                           TS0XS88--->TS0XS92)
// TS000   01/12/00 SVADDI   Adding Broker code to TS0XM001
//                           and populating from Shipment Hdr
// TS000   02/03/00 vkumar   destination location validation
//                           against warehouse( if entered )
// TS#00   03/21/00 VKUMAR   In TS0X163 commented the code
//                           for deleting from SHPHD01 and then
//                           adding.
// TS#00   09/13/01 MREDDY   In TS0XS-43, status updation
//                           on container while GPC changed
//                           is removed.
// TS#00   12/07/01 MREDDY   Incorporated changes to avoid
//                           processing of US & CANADA
//                           Shipments.
//                           Change Proc:  TS0X130,TS0X220
//                           TS0X320
//                           Added Proc:  TS0X370
// TS#00   12/17/01 MLATHA   CHANGED PROC  TS0X160
// ************************************************************
// *********************
Program TS0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TS0XW01 TS0XW01; // record
  TS0XW02 TS0XW02; // record
  TS0XW03 TS0XW03; // record
  TS5REC TS5REC; // record
  TSAREC TSAREC; // record
  TSCREC TSCREC; // record
  TSEREC TSEREC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSNREC TSNREC; // record
  TSRREC TSRREC; // record
  TSSREC TSSREC; // record
  TSWREC TSWREC; // record
  VCPLHD04 VCPLHD04; // record
  VTSLOC02 VTSLOC02; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSHTBL {deleteAfterUse = yes}; // table
  use YPYTBL {deleteAfterUse = yes}; // table
  use YDTTBL {deleteAfterUse = yes}; // table
  use YSTTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YSSTBL {deleteAfterUse = yes}; // table
  use YBRTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use TS0XTP2 {deleteAfterUse = yes}; // table
  use TS0XTP3 {deleteAfterUse = yes}; // table
  use TS0XT02 {deleteAfterUse = yes}; // table
  use TS0XT03 {deleteAfterUse = yes}; // table
  use TS0XM.TA0PM001,  // forms
      TS0XM.TS0XM001, 
      TS0XM.TS0XM002, 
      TS0XM.TS0XM003, 
      TS0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TSAREC empty; /* Initialize record storage*/
    set TSCREC empty;
    set TS5REC empty;
    set TSEREC empty;
    set TSNREC empty;
    set TSFREC empty;
    set TSGREC empty;
    set TSHREC empty;
    set TSIREC empty;
    set TSRREC empty;
    set TSSREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set TAEREC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set TS0XW01 empty;
    set TS0XW02 empty;
    set TS0XW03 empty;
    set XX0XW01 empty;
    set TS0XM001 initial; /* Initialize map1 output area*/
    set TS0XM002 initial; /* Initialize map2 output area*/
    set TS0XM003 initial; /* Initialize map3 output area*/

    TS0XW01.TS0XWMXT = 2; /* max text lines*/
    TS0XW01.TS0XW-ADT-DATE-WINDOW = 10; /* no. days over current date*/
    TS0XW01.TS0XWCEN = 019; /* current century*/
    TS0XW01.TS0XWYMD = VGVar.currentShortGregorianDate; /* date yymmdd*/
    TS0XW01.TS0XWMYY = TS0XW01.TS0XWYY; /* set up map current date*/
    TS0XW01.TS0XWMMM = TS0XW01.TS0XWMM;
    TS0XW01.TS0XWMDD = TS0XW01.TS0XWDD;
    TS0XW01.TS0XWMAP = "1A"; /* Indicate map to be displayed*/
    TS0XW01.TS0XWSWR = "Y"; /* Set request for data to yes*/
    TS0XW01.TS0XWPSW = "N"; /* Initialize problem switch*/
    TS0XW01.TS0XWFEX = "Y"; /* Initialize final exit flag*/
    TS0XW01.TS0XWSHF = "N"; /* Initialize shipment update flag*/
    TS0XW01.TS0XWTXF = "N"; /* Initialize text update flag*/
    TS0XW01.TS0XWADF = "N"; /* Initialize address update flag*/

    goto TS0X000; /* Check valid from application*/


    TS0X000: TS0X000();
     /* ------------------------------------------------------------*/
     /* Converse main processing*/
     /* ------------------------------------------------------------*/

    goto TS0X001; /* Converse main processing*/


    TS0X001: TS0X001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment Header Add process.*/
     /* ------------------------------------------------------------*/

    goto TS0X001; /* Converse Shipment Header Add.*/


  end // end main
end // end TS0X

// Format/submit a background job
Function TS0X-085()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0XTP2.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0XWPRM = " "; /* INITIALIZE*/
      TS0XWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TS0XWNID = TS0XM001.TSFSHPID; /* NIKE ID*/
      TA6REC.TARJCL[TA6INDEX] = TS0XWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0XTP2.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0XTP2.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0XTP2.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0X-085

// Format/submit a background job
Function TS0X-086()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0XT02.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0XWPRM = " "; /* INITIALIZE*/
      TS0XWPID = "OLINE"; /* MAKE PARM 'OLINE'*/
      TS0XWNID = TS0XM001.TSFSHPID; /* NIKE ID*/
      TA6REC.TARJCL[TA6INDEX] = TS0XWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0XT02.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0XT02.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0XT02.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0X-086

// Assign leg nbr
Function TS0X-161()
   /* ------------------------------------------------------------*/
      /* This module gets the consolidation flags for discharge*/
      /* location and assigns leg nbr.*/
   /* ------------------------------------------------------------*/

  set VTSLOC02 empty;
  set VCPLHD04 empty;
  TS0XW01.TS0XELFL = "N";
  VTSLOC02.TS-LOC-CD = TS0XM001.TSFDSCHG;
  TS0XS88();
  if (SQLCA.VAGen_SQLCODE == 0)
    TS0XW01.TS-DIS-LOC-CNSLD-FL = VTSLOC02.TS-LOC-CNSLD-FL;
  else
    TS0XW01.TS-DIS-LOC-CNSLD-FL = "N";
  end
  if (TS0XW01.TS-DIS-LOC-CNSLD-FL == "Y")
    TS0XS89();
    TS0XS90();
    while (TS0XW01.TS0XELFL == "N")
      if (VCPLHD04.TS-SHP-LEG-NBR < 1)
        TS0XS91();
      end
      TS0XS90();
    end
    TS0XS92();
  end


end // end TS0X-161

// Check the FROM application
Function TS0X000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0J") /* From allowed application*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end TS0X000

// Shipment Header Add
Function TS0X001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map for header add.*/
   /* 2) Otherwise, if specified, display the second map for*/
          /* charges add.*/
   /* 3) Otherwise, if specified, display the third map for*/
          /* address add.*/
   /* 4) Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0XW01.TS0XWMAP == "1A" /* Map 1 was requested*/
   || TS0XW01.TS0XWMAP == "1B")
    TS0X100(); /* Display Shipment Header Add map*/
  else
    if (TS0XW01.TS0XWMAP == "2A" /* Map 2 was requested*/
     || TS0XW01.TS0XWMAP == "2B")
      if (TS0XW01.TS0XWFSW == "C") /* and charges function*/
        TS0X200(); /* Display Shipment Charges Add map*/
      end
    else
      if (TS0XW01.TS0XWMAP == "3A" /* Map 3 was selected*/
       || TS0XW01.TS0XWMAP == "3B")
        if (TS0XW01.TS0XWFSW == "A") /* and address function*/
          TS0X300(); /* Display Shipment Address Add map*/
        end
      else
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1PGMNM = "TS0T001 "; /* Process name*/
        TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
        TA1REC.TA1MAP = TS0XW01.TS0XWMAP; /* Map name*/
        SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        XSPF4(); /* Exit to Master Menu*/

      end
    end
  end

end // end TS0X001

// Shipment Header Add Main Map
Function TS0X100()
   /* ------------------------------------------------------------*/

               /* SHIPMENT HEADER ADD MAIN MAP*/

   /* This is the process used to display the shipment*/
   /* header add main map.*/
   /* Processing always returns to the top of this process and*/
   /* falls through to subordinate processes until an error is*/
   /* found or a valid request is processed. Sequence is as*/
   /* follows:*/

   /* 1) If request for data is yes;*/
      /* - Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) If maintenace map is indicated;*/
      /* - Reset highlighted fields to normal intensity.*/
   /* 5) If maintenace map is indicated;*/
      /* - Verify the data that was entered.*/
   /* 6) If no errors indicated;*/
      /* - Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0XW01.TS0XWSWR == "Y") /* If request for data is yes*/
    TS0X110(); /* Obtain the data to display*/
  end

  TS0X120(); /* Format and display the map*/

  TS0X130(); /* Check attention identifier*/

  TS0X140(); /* Reset fields to normal intensity*/

  if (TS0XW01.TS0XWMAP == "1B") /* If maintenance map indicated*/
    TS0X150(); /* Verify the entered data*/
  end

  if (TS0XW01.TS0XWPSW == "N") /* If no errors found*/
    TS0X160(); /* Process valid input request*/
  end


end // end TS0X100

// Obtain the data for display
Function TS0X110()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA FOR DISPLAY*/

       /* 1) Select the ship header information from*/
          /* DTRANS.VSHPHD01 where the nike ship id is equal*/
          /* to the passed nike ship id.*/
          /* a) If not found then indicate an error ( data*/
             /* deleted by another user ).*/
          /* b) If found:*/
             /* - If text flag is yes, then select the text*/
               /* lines from DTRANS.VTSTXT01*/
             /* - If address flag is yes, then select the address*/
               /* lines from DTRANS.VTSADR01*/

   /* ------------------------------------------------------------*/

  TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* move in key*/

  TS0X111();
                                   /* select the shphd from DTRANS.VSHPHD01*/

  if (converseVar.validationMsgNum == 0) /* if no problems encountered*/
    if (TSFREC.TSFADRID == "Y") /* if address exists*/
      TSSREC.TSFSHPID = TSWREC.TSFSHPID; /* move in key*/
      TS0X112(); /* select address from DTRANS.VTSADR01*/
    end
    if (TSFREC.TSFTXTID == "Y") /* if text exists*/
      TS0XW01.TS0XWIXM = 1; /* set index*/
      while (TS0XW01.TS0XWIXM <= TS0XW01.TS0XWMXT) /* le max text lines*/
        TSRREC.TSFSHPID = TSWREC.TSFSHPID; /* move in keys*/
        TSRREC.TSRSEQNB = TS0XW01.TS0XWIXM;
        TS0X113(); /* select text from DTRANS.VTSTXT01*/
        TS0XW01.TS0XWIXM = TS0XW01.TS0XWIXM + 1; /* increment index*/
      end
      TS0XM001.TSFCMNT1 = TS0XW01.TSRTEXT[1]; /* move fields to map*/
      TS0XM001.TSFCMNT2 = TS0XW01.TSRTEXT[2];
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if header was not found*/
      converseLib.validationFailed(140);
                                   /* header deleted by another application*/
      TS0XM001.XXXPRCNM = "TS0X110";
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    end
  end

  TS0XW01.TS0XWSWR = "N"; /* set request for data to no*/


end // end TS0X110

// Select from DTRANS.VSHPHD01
Function TS0X111()
   /* ------------------------------------------------------------*/

                /* SELECT THE SHIPMENT HEADER*/

         /* 1) Select the shipment header.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S "; /* move selection to pass record*/
  call "IO2540" (TSNREC, SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If valid return code*/
    TS0XW02.TSFGROUP = TSFREC.TSFGROUP; /* save record*/
    TS0XS0C(); /* Move all tsfrec fields to maps*/
    TS0XS0I(); /* Select all descriptions for maps*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      /* continue*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0X111"; /* Process name*/
      TA1REC.TA1LOC = "SELECT THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
      TS0XM001.XXXPRCNM = "TS0X111"; /* Process name*/

    end
  end


end // end TS0X111

// Select from DTRANS.VTSADR01
Function TS0X112()
   /* ------------------------------------------------------------*/

              /* SELECT THE SHIPMENT ADDRESS*/

         /* 1) Select the shipment address.*/

   /* ------------------------------------------------------------*/

  call "IO2700" ("S ", SQLCA, TSSREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If valid return code*/
    TS0XW03.TSSGROUP = TSSREC.TSSGROUP; /* save the record*/
    TS0XS0R(); /* Move all tssrec fields to maps*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* continue*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0X112"; /* Process name*/
      TA1REC.TA1LOC = "SELECT THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSADR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
      TS0XM001.XXXPRCNM = "TS0X112"; /* Process name*/

    end
  end


end // end TS0X112

// Select text set from VTSTXT01
Function TS0X113()
   /* ------------------------------------------------------------*/

              /* SELECT THE SHIPMENT TEXT*/

         /* 1) Select the shipment text*/

   /* ------------------------------------------------------------*/

  call "IO2690" ("S ", SQLCA, TSRREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If valid return code*/
    TS0XW01.TSRTEXT[TS0XWIXM] = TSRREC.TSRTEXT; /* save text*/
    TS0XW01.TS0XWEXF[TS0XWIXM] = "Y"; /* move 'y' to exists in db fl*/
    TS0XW01.ZZZCHGCT[TS0XWIXM] = TSRREC.ZZZCHGCT; /* save text chg ct*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* continue*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0X113"; /* Process name*/
      TA1REC.TA1LOC = "SELECT THE TABLE ROW ";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSTXT01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
      TS0XM001.XXXPRCNM = "TS0X113"; /* Process name*/

    end
  end


end // end TS0X113

// Format and display the map
Function TS0X120()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

     /* 1) If no error to display:*/
        /* - Format the map for inquiry or maintenance according*/
          /* to the map number.*/
     /* 2) If the user change flag is set to no, then darken the*/
        /* change PFkey.*/
     /* 3) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0XW01.TS0XWPSW == "N") /* No error message to display*/

    if (TS0XW01.TS0XWMAP == "1A") /* inquiry only*/
      TS0XM001.TS0XMHDG = "INQUIRY  ";
      TS0X121(); /* set all fields on map 1 protect*/
    else
      if (TS0XW01.TS0XWMAP == "1B") /* maintenance*/
        TS0XM001.TS0XMHDG = "MAINTENANCE";
      end
    end

  end

  if (COMMAREA.CACHGFL == "N" /* if user has no change ability*/
   || TSFREC.YSSCD == "CX")   /* or canceled shipment*/
    set TS0XM001.TS0XMPFC skip, invisible; /* hide change PF key*/
  end

  if (COMMAREA.CACLVL[1] == "N") /* if user has charges ability*/
    set TS0XM001.TS-TOT-COLL-SCHG skip, invisible;
    set TS0XM001.TS-TOT-PPD-SCHG skip, invisible;
    set TS0XM001.TS0XMCHF skip, invisible; /* Hide total charges id*/
    set TS0XM001.TS0XMP17 skip, invisible; /* get rid of charges key*/
  end

  if (COMMAREA.CACLVL[2] == "N") /* if user cannot enter B/L date*/
    set TS0XM001.TSFBOLDT skip; /* Protect b/l date*/
  end

  if (TSWREC.YSSCD == "TN") /* If this shipment tentative*/
    set TS0XM001.TS0XMP17 skip, invisible; /* Can only look at screen one*/
  end

  /* IF EZEMNO NE 0;                  /* Error message to display*/
  /* SET TS0XM001 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  TS0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0XM001 ;

  TS0XW01.TS0XWPSW = "N"; /* Reset error switch*/

  TS0X122(); /* check for ? inquiry by user*/


end // end TS0X120

// Protect map 1 fields
Function TS0X121()
   /* ------------------------------------------------------------*/

               /* SET ALL MAP 1 FIELDS PROTECT*/

   /* ------------------------------------------------------------*/

   /* *****************************************/
          /* map 1 fields*/
   /* *****************************************/

  set TS0XM001.XGPCD protect;
  set TS0XM001.TSFBOL protect;
  set TS0XM001.TSACARCD protect;
  set TS0XM001.TS5CRAFT protect;
  set TS0XM001.TSFSHPNB protect;
  set TS0XM001.TSFRWRDR protect;
  set TS0XM001.TSEORIG protect;
  set TS0XM001.TSFDSCHG protect;
  set TS0XM001.TSFDWBK protect;
  set TS0XM001.XWHCD protect;
  set TS0XM001.XNDCD protect;
  set TS0XM001.YSTCD protect;
  set TS0XM001.YDTCD protect;
  set TS0XM001.YPYCD protect;
  set TS0XM001.YSSCD protect;
  set TS0XM001.YSHCD protect;
  set TS0XM001.TS-TOT-COLL-SCHG protect;
  set TS0XM001.TS-TOT-PPD-SCHG protect;
  set TS0XM001.TSFTKG protect;
  set TS0XM001.TSFTCBM protect;
  set TS0XM001.TSFNILRF protect;
  set TS0XM001.TSFDPRTA protect;
  set TS0XM001.TSFDPRTE protect;
  set TS0XM001.TSFDSCHA protect;
  set TS0XM001.TSFDSCHE protect;
  set TS0XM001.TSFDESTA protect;
  set TS0XM001.TSFDESTE protect;
  if (TS0XM001.TS-ADVN-SHP-IND == "T")
    set TS0XM001.TS-ADVN-SHP-IND protect, noHighLight;
  else
    set TS0XM001.TS-ADVN-SHP-IND protect;
  end
  set TS0XM001.TSFRECPT protect;
  set TS0XM001.TSFBOLDT protect;
  set TS0XM001.TSFNTRDT protect;
  set TS0XM001.TSFCCLDT protect;
  set TS0XM001.TSFRELDT protect;
  set TS0XM001.TS-FCTY-DOC-RDT protect;
  set TS0XM001.TS-DLVR-CNFM-RDT protect;
  set TS0XM001.TSFCMNT1 protect;
  set TS0XM001.TSFCMNT2 protect;
  set TS0XM001.YBRCD protect;


end // end TS0X121

// Check for ? inquiry by user
Function TS0X122()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0XM001.YSSCD == "?" /* if any ? entered*/
   || TS0XM001.XGPCD == "?" 
   || TS0XM001.XWHCD == "?" 
   || TS0XM001.XNDCD == "?" 
   || TS0XM001.YSTCD == "?" 
   || TS0XM001.YDTCD == "?" 
   || TS0XM001.YPYCD == "?" 
   || TS0XM001.YSHCD == "?")


    if (TS0XM001.YSSCD == "?")

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   YSS    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSS01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code to the map.                                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM001.YSSCD = YSSTBL.YSSCD[XX0XWPIX]; /* move code*/
        TS0XM001.YSSSDESC = YSSTBL.YSSSDESC[XX0XWPIX]; /* move desc*/
      else
        TS0XM001.YSSCD = " "; /* clear fields*/
        TS0XM001.YSSSDESC = " "; /* move desc*/
      end

    end

    if (TS0XM001.XGPCD == "?")

      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC    "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc code window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  code to the map.                                     **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      else
        TS0XM001.XGPCD = " "; /* clear fields*/
      end

    end

    if (TS0XM001.XWHCD == "?") /* if ? in warehouse type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                WAREHOUSE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* perform warehouse type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
        TS0XM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* move name*/
      else
        TS0XM001.XWHCD = " "; /* clear fields*/
        TS0XM001.XWHABRV = " ";
      end
    end

    if (TS0XM001.XNDCD == "?") /* if ? in Nike department field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                NIKE DEPT"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXND01(); /* perform Nike department window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the department **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM001.XNDCD = XNDTBL.XNDCD[XX0XWPIX]; /* move code*/
        TS0XM001.XNDDESC = XNDTBL.XNDDESC[XX0XWPIX]; /* move name*/
      else
        TS0XM001.XNDCD = " "; /* clear fields*/
        TS0XM001.XNDDESC = " ";
      end
    end

    if (TS0XM001.YSTCD == "?") /* if ? in shipment type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              SHIPMENT TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYST01(); /* perform shipment type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the shipment   **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM001.YSTCD = YSTTBL.YSTCD[XX0XWPIX]; /* move code*/
        TS0XM001.YSTSDESC = YSTTBL.YSTSDESC[XX0XWPIX]; /* move name*/
      else
        TS0XM001.YSTCD = " "; /* clear fields*/
        TS0XM001.YSTSDESC = " ";
      end
    end

    if (TS0XM001.YDTCD == "?") /* if ? in delivery type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              DELIVERY TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYDT01(); /* perform delivery type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the delivery   **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM001.YDTCD = YDTTBL.YDTCD[XX0XWPIX]; /* move code*/
        TS0XM001.YDTSDESC = YDTTBL.YDTSDESC[XX0XWPIX]; /* move name*/
      else
        TS0XM001.YDTCD = " "; /* clear fields*/
        TS0XM001.YDTSDESC = " ";
      end
    end

    if (TS0XM001.YPYCD == "?") /* if ? in payment type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                PAYMENT ID"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPY01(); /* perform payment type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the payment    **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM001.YPYCD = YPYTBL.YPYCD[XX0XWPIX]; /* move code*/
        TS0XM001.YPYSDESC = YPYTBL.YPYSDESC[XX0XWPIX]; /* move name*/
      else
        TS0XM001.YPYCD = " "; /* clear fields*/
        TS0XM001.YPYSDESC = " ";
      end
    end

    if (TS0XM001.YSHCD == "?") /* if ? in shipment hold field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                HOLD CODE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSH01(); /* perform shipment hold window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the shipment   **/
       /* *  hold table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM001.YSHCD = YSHTBL.YSHCD[XX0XWPIX]; /* move code*/
        TS0XM001.YSHSDESC = YSHTBL.YSHSDESC[XX0XWPIX]; /* move name*/
      else
        TS0XM001.YSHCD = " "; /* clear fields*/
        TS0XM001.YSHSDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0XW01.TS0XWPSW = "Y"; /* bypass exit by indicating fake error*/

  end

end // end TS0X122

// Check attention identifier
Function TS0X130()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

   /* MREDDY CHANGES BEGIN 12/08/01*/
  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    TS0X370();
    if ((TSCREC.XCTCD == "USA" || 
    TSCREC.XCTCD == "CANA" || 
    TSCREC.XCTCD == "USVI" || 
    TSCREC.XCTCD == "GUAM" || 
    TSCREC.XCTCD == "PUER" || 
    TSCREC.XCTCD == "JAMA" || 
    TSCREC.XCTCD == "BAHA" || 
    TSCREC.XCTCD == "SAIP"))
      converseLib.validationFailed(452); /* no access to USA/Canada shp*/
      TS0XM001.XXXPRCNM = "TS0X130"; /* process name*/
      TS0X121(); /* set all fields on map 1 protect*/
         /* MOVE 'Y' TO TS0XW01.TS0XWPSW;  /* set error switch*/
      exit stack;
    end
  end
   /* MREDDY CHANGES END   12/08/01*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0XM001 initial; /* clear the map*/
    TS0XS0U(); /* restore the map fields*/
    TS0XS0X(); /* restore the map descriptions*/
    TS0XW01.TS0XWPSW = "N"; /* reset the error indicator*/
    exit stack; /* exit to redisplay the map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0J"; /* Set to TS0J menu*/
    XSTSS01(); /* transfer to application*/
    TS0XW01.TS0XWPSW = "Y"; /* if fails, then indicate error*/
    TS0XM001.XXXPRCNM = "TS0X130"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf12 /* PF12 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* and user has no change ability*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate error*/
    TS0XM001.XXXPRCNM = "TS0X130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf12 /* PF12 was pressed*/
   && TS0XW01.YSSUPDFL == "N")     /* and ship stat says no change*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate error*/
    TS0XM001.XXXPRCNM = "TS0X130"; /* Process name*/
    converseLib.validationFailed(139); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    if (TSWREC.YSSCD == "TN" /* If ship stat is tentative*/
     || COMMAREA.CACLVL[1] == "N") /* or no charges capabilities*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate error*/
      TS0XM001.XXXPRCNM = "TS0X130"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate error*/
    TS0XM001.XXXPRCNM = "TS0X130"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

end // end TS0X130

// Reset highlighted fields
Function TS0X140()
   /* ------------------------------------------------------------*/

              /* RESET HIGHLIGHTED FIELDS*/

   /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0XM001.YSSCD initialAttributes; /* Reset all map fields*/
  set TS0XM001.XGPCD initialAttributes;
  set TS0XM001.TSFBOL cursor, initialAttributes;
  set TS0XM001.TSFRWRDR initialAttributes;
  set TS0XM001.TSACARCD initialAttributes;
  set TS0XM001.TS5CRAFT initialAttributes;
  set TS0XM001.TSFSHPNB initialAttributes;
  set TS0XM001.TSEORIG initialAttributes;
  set TS0XM001.TSFDPRTA initialAttributes;
  set TS0XM001.TSFDPRTE initialAttributes;
  set TS0XM001.TSFDSCHG initialAttributes;
  set TS0XM001.TSFDSCHA initialAttributes;
  set TS0XM001.TSFDSCHE initialAttributes;
  if (TS0XM001.TS-ADVN-SHP-IND == "T")
    set TS0XM001.TS-ADVN-SHP-IND skip, noHighLight;
  else
    set TS0XM001.TS-ADVN-SHP-IND initialAttributes;
  end
  set TS0XM001.TSEDEST initialAttributes;
  set TS0XM001.TSFDESTA initialAttributes;
  set TS0XM001.TSFDESTE initialAttributes;
  set TS0XM001.XWHCD initialAttributes;
  set TS0XM001.TSFRECPT initialAttributes;
  set TS0XM001.XNDCD initialAttributes;
  set TS0XM001.YSTCD initialAttributes;
  set TS0XM001.TSFNTRDT initialAttributes;
  set TS0XM001.YDTCD initialAttributes;
  set TS0XM001.TSFBOLDT initialAttributes;
  set TS0XM001.YPYCD initialAttributes;
  set TS0XM001.TSFCCLDT initialAttributes;
  set TS0XM001.YSHCD initialAttributes;
  set TS0XM001.TSFRELDT initialAttributes;
  set TS0XM001.TS-FCTY-DOC-RDT initialAttributes;
  set TS0XM001.TS-DLVR-CNFM-RDT initialAttributes;
  set TS0XM001.TS-TOT-COLL-SCHG initialAttributes;
  set TS0XM001.TS-TOT-PPD-SCHG initialAttributes;
  set TS0XM001.TSFDWBK initialAttributes;
  set TS0XM001.TSFTKG initialAttributes;
  set TS0XM001.TSFNILRF initialAttributes;
  set TS0XM001.TSFTCBM initialAttributes;
  set TS0XM001.TSFCMNT1 initialAttributes;
  set TS0XM001.TSFCMNT2 initialAttributes;
  set TS0XM001.TS0XMPFC initialAttributes;
  set TS0XM001.YBRCD initialAttributes;


end // end TS0X140

// Verify the entered data
Function TS0X150()
   /* ------------------------------------------------------------*/

                  /* VERIFY THE ENTERED DATA*/

   /* If the map number indicates maintenance;*/
     /* PERFORM ALL THE EDITS:*/
       /* The edits for this screen will be performed by screen*/
       /* groupings due to the screen edits size:*/

       /* 1) Edit Grouping 1 - edits lower portion of screen*/
          /* beginning with total charges and drawback.*/
       /* 2) Edit Grouping 2 - edits portion of screen*/
          /* beginning with total cleared customs date and*/
          /* payment id code.*/
       /* 3) Edit Grouping 3 - edits portion of screen*/
          /* beginning with notification received date.*/
       /* 4) Edit Grouping 4 - edits portion of screen*/
          /* beginning with warehouse code.*/
       /* 5) Edit Grouping 5 - edits portion of screen*/
          /* beginning with discharge location*/
       /* 6) Edit Grouping 6 - edits portion of screen*/
          /* beginning with origin location.*/
       /* 7) Edit Grouping 7 - edits top portion of screen*/
          /* including the BOL, FWDR, CARR, CRAFT, and SHP.*/
       /* 8) Perform overlap and calcualtion edits.*/
       /* 9) If no errors perform behind the scene updates to*/
          /* TSFREC.*/

   /* ------------------------------------------------------------*/

  if (TS0XW01.TS0XWMAP == "1B") /* If on the maintenance map*/
    TS0XW01.TS0XWFEX = "N"; /* set final exit to no*/

    TS0X151(); /* perform edit grouping 1*/

    TS0X152(); /* perform edit grouping 2*/

    TS0X153(); /* perform edit grouping 3*/

    TS0X154(); /* perform edit grouping 4*/

    TS0X155(); /* perform edit grouping 5*/

    TS0X156(); /* perform edit grouping 6*/

    TS0X157(); /* perform edit grouping 7*/

    if (TS0XW01.TS0XWPSW == "N") /* If no errors found*/
      TS0X158();
                                   /* perform overlap and calculation edits*/
    end

    if (TS0XW01.TS0XWPSW == "N") /* If no errors found*/
      TS0X159(); /* perform behind the scenes updates*/
    end

  else
    TS0XW01.TS0XWFEX = "Y"; /* set final exit to yes*/
  end


end // end TS0X150

// Edit grouping 1
Function TS0X151()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 1*/

         /* Edit;*/
           /* 1) comments*/
           /* 2) cubic meters*/
           /* 3) nil reference number - no editing required*/
           /* 4) kilograms*/
           /* 5) drawback*/
           /* 6) total charges*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) comments*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFCMNT1 == " " /* if comment line 1 blank*/
   && TS0XM001.TSFCMNT2 != " ") /* and comment line 2 not blank*/
    TS0XM001.TSFCMNT1 = TS0XM001.TSFCMNT2; /* move to line 1*/
    TS0XM001.TSFCMNT2 = " "; /* clear comment line 2*/
  end
  if (TS0XM001.TSFCMNT1 == TS0XW01.TSRTEXT[1]) /* if no change made*/
     /* continue on*/
  else
    TS0XW01.TSRTEXT[1] = TS0XM001.TSFCMNT1; /* save comments*/
    TS0XW01.TS0XWTXF = "Y"; /* text updated flag*/
  end
  if (TS0XM001.TSFCMNT2 == TS0XW01.TSRTEXT[2]) /* if no change made*/
     /* continue on*/
  else
    TS0XW01.TSRTEXT[2] = TS0XM001.TSFCMNT2; /* save comments*/
    TS0XW01.TS0XWTXF = "Y"; /* text updated flag*/
  end

   /* ------------------------------------------------------------*/
           /* 2) Delivery Confirmation Recieved Date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TS-DLVR-CNFM-RDT != " ") /* if date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TS-DLVR-CNFM-RDT; /* working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TS-DLVR-CNFM-RDT) /* if changed*/
        TS0XW02.TS-DLVR-CNFM-RDT = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TS-DLVR-CNFM-RDT cursor, modified, bold;
      TS0XM001.XXXPRCNM = "TS0X151"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TS-DLVR-CNFM-RDT != 0) /* if date was changed*/
      TS0XW02.TS-DLVR-CNFM-RDT = 0; /* default the date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 2) cubic meters*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFTCBM != TS0XW02.TSFTCBM) /* if total cubic meters changed*/
    if (TS0XM001.TSFTCBM >= 0) /* if number entered is ge 0*/
      TS0XW02.TSFTCBM = TS0XM001.TSFTCBM; /* save kilograms*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    else /* else an error has occurred*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X151"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0XM001.TSFTCBM cursor, modified, bold; /* highlight*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 3) nil reference number - no editing required*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFNILRF != TS0XW02.TSFNILRF) /* in nil ref changed*/
    TS0XW02.TSFNILRF = TS0XM001.TSFNILRF; /* save nil reference #*/
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
  end

   /* ------------------------------------------------------------*/
           /* 4) kilograms*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFTKG != TS0XW02.TSFTKG) /* if total kilograms changed*/
    if (TS0XM001.TSFTKG >= 0) /* if number entered is ge 0*/
      TS0XW02.TSFTKG = TS0XM001.TSFTKG; /* save kilograms*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    else /* else an error has occurred*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X151"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0XM001.TSFTKG cursor, modified, bold; /* highlight*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 5) drawback*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFDWBK != TS0XW02.TSFDWBK) /* if drawback changed*/
    if (TS0XM001.TSFDWBK == "Y" /* if valid drawback entered*/
     || TS0XM001.TSFDWBK == "N" 
     || TS0XM001.TSFDWBK == " ")
      if (TS0XM001.TSFDWBK == " ") /* if drawback blank*/
        TS0XW02.TSFDWBK = "N"; /* default to no*/
      else
        TS0XW02.TSFDWBK = TS0XM001.TSFDWBK; /* save drawback*/
      end
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    else /* else an error has occurred*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X151"; /* process name*/
      converseLib.validationFailed(46); /* must equal 'y' or 'n'*/
      set TS0XM001.TSFDWBK cursor, modified, bold; /* highlight*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 6) total charges collect*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TS-TOT-PPD-SCHG != TS0XW02.TS-TOT-PPD-SCHG)
    if (TS0XM001.TS-TOT-PPD-SCHG >= 0) /* if number entered is ge 0*/
      TS0XW02.TS-TOT-PPD-SCHG = TS0XM001.TS-TOT-PPD-SCHG;
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    else /* else an error has occurred*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X151"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0XM001.TS-TOT-PPD-SCHG cursor, modified, bold; /* highlight*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 7) total charges collect*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TS-TOT-COLL-SCHG != TS0XW02.TS-TOT-COLL-SCHG)
    if (TS0XM001.TS-TOT-COLL-SCHG >= 0) /* if number entered is ge 0*/
      TS0XW02.TS-TOT-COLL-SCHG = TS0XM001.TS-TOT-COLL-SCHG;
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    else /* else an error has occurred*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X151"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0XM001.TS-TOT-COLL-SCHG cursor, modified, bold; /* highlight*/
    end
  end

end // end TS0X151

// Edit grouping 2
Function TS0X152()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 2*/

         /* Edit;*/
           /* 1) warehouse release date*/
           /* 2) hold code*/
           /* 3) cleared customs date*/
           /* 4) payment id code*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) warehouse release date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFRELDT != " ") /* if warehouse release date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFRELDT; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFRELDT) /* if date was changed*/
        TS0XW02.TSFRELDT = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFRELDT cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X152"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFRELDT != 0) /* if date was changed*/
      TS0XW02.TSFRELDT = 0; /* default the date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 2) hold code*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.YSHCD == " ") /* if hold is blank*/
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    TS0XM001.YSHSDESC = " "; /* clear description*/
    TS0XW02.YSHCD = " "; /* default code*/
  else
    if (TS0XM001.YSHCD in YSHTBL.YSHCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YSHTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(78); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X152"; /* Process name*/
      TS0XM001.YSHSDESC = " "; /* Clear description*/
      set TS0XM001.YSHCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XM001.YSHSDESC = YSHTBL.YSHSDESC[sysVar.arrayIndex];
      TS0XW02.YSHCD = YSHTBL.YSHCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 3) cleared customs date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFCCLDT != " ") /* if customs cleared date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFCCLDT; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFCCLDT) /* if date was changed*/
        TS0XW02.TSFCCLDT = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFCCLDT cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X152"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFCCLDT != 0) /* if date was changed*/
      TS0XW02.TSFCCLDT = 0; /* default the date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 4) payment id code*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.YPYCD == " ") /* if payment id is blank*/
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    TS0XM001.YPYSDESC = " "; /* clear description*/
    TS0XW02.YPYCD = " "; /* default the code*/
  else
    if (TS0XM001.YPYCD in YPYTBL.YPYCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YPYTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(79); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X152"; /* Process name*/
      TS0XM001.YPYSDESC = " "; /* Clear description*/
      set TS0XM001.YPYCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XM001.YPYSDESC = YPYTBL.YPYSDESC[sysVar.arrayIndex];
      TS0XW02.YPYCD = YPYTBL.YPYCD[sysVar.arrayIndex]; /* save code*/
    end
  end


end // end TS0X152

// Edit grouping 3
Function TS0X153()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 3*/

          /* Edit;*/
            /* 1) bill of lading date*/
            /* 2) delivery type code*/
            /* 3) notification received date*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
            /* 1) bill of lading date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFBOLDT != " ") /* if bill of lading date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFBOLDT; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFBOLDT) /* if bol newly entered*/
        TS0XW01.TS0XWFEX = "N"; /* not final exit*/
        TS0XW02.TSFBOLDT = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      else
        TS0XW01.TS0XWFEX = "Y"; /* indicate ok for final exit*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFBOLDT cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X153"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFBOLDT != 0) /* if the date was changed*/
      TS0XW02.TSFBOLDT = 0; /* default the date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    else
      TS0XW01.TS0XWFEX = "Y"; /* indicate ok for final exit*/
    end
  end

   /* ------------------------------------------------------------*/
            /* 2) delivery type code*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.YDTCD == " ") /* if delivery type is blank*/
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    TS0XM001.YDTSDESC = " "; /* clear description*/
    TS0XW02.YDTCD = " "; /* default codeption*/
  else
    if (TS0XM001.YDTCD in YDTTBL.YDTCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YDTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(80); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X153"; /* Process name*/
      TS0XM001.YDTSDESC = " "; /* Clear description*/
      set TS0XM001.YDTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XM001.YDTSDESC = YDTTBL.YDTSDESC[sysVar.arrayIndex];
      TS0XW02.YDTCD = YDTTBL.YDTCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
            /* 3) notification received date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFNTRDT != " ") /* if notification date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFNTRDT; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFNTRDT) /* if date was changed*/

           /* ******** get current date **********/
        XX0XS01();
        TS0XW01.TS0XWCDT = XX0XW01.XX0XWDAT; /* save current date*/

        /* ------------------------------------------------------------*/
               /* Check for notify date gt current date*/
        /* ------------------------------------------------------------*/

        if (TA2REC.TA2GRGGN > TS0XW01.TS0XWCDT) /* If date lt curr date*/
          converseLib.validationFailed(276);
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X153"; /* Process name*/
          set TS0XM001.TSFNTRDT cursor, modified, bold; /* highlight field*/
        else
          TS0XW02.TSFNTRDT = TA2REC.TA2GRGGN; /* save date*/
          TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
        end

      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFNTRDT cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0T153"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    set TS0XM001.TSFNTRDT cursor, modified, bold; /* highlight field*/
    TS0XM001.XXXPRCNM = "TS0T153"; /* process name*/
    converseLib.validationFailed(77); /* invalid date entered*/
  end


end // end TS0X153

// Edit grouping 4
Function TS0X154()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 4*/

          /* Edit;*/
            /* 1) last receipt date*/
            /* 2) shipment type code*/
            /* 3) nike department code*/
            /* 5) warehouse code*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) last receipt date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFRECPT != " ") /* if act notif. rcvd date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFRECPT; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFRECPT) /* if date is changed*/
        TS0XW02.TSFRECPT = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFRECPT cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFRECPT != 0) /* if the date is changed*/
      TS0XW02.TSFRECPT = 0; /* default date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end


   /* ------------------------------------------------------------*/
            /* 2) shipment type code*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.YSTCD == " " /* if shipment type is blank*/
   && TSWREC.YSSCD != "TN") /* and not a tentative shipment*/
    TS0XM001.YSTSDESC = " "; /* clear description*/
    TS0XW02.YSTCD = " "; /* default the code*/
    converseLib.validationFailed(59); /* Display error message*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
    TS0XM001.XXXPRCNM = "TS0X154"; /* Process name*/
    set TS0XM001.YSTCD cursor, modified, bold; /* highlight field*/
  else
    if (TS0XM001.YSTCD in YSTTBL.YSTCD) /* Check valid ship type*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YSTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      if (TSWREC.YSSCD != "TN") /* if not a tentative shipment*/
        converseLib.validationFailed(59); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM001.XXXPRCNM = "TS0X154"; /* Process name*/
        TS0XM001.YSTSDESC = " "; /* Clear description*/
        set TS0XM001.YSTCD cursor, modified, bold; /* highlight field*/
      end
    else /* Move description to table*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XM001.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
      TS0XW02.YSTCD = YSTTBL.YSTCD[sysVar.arrayIndex]; /* save code*/
    end
  end
  if (TS0XM001.YSTCD == "BA") /* if shipment type is 'BA'*/
    TS0XS-154S();
    TS0XW01.TS0XWEFL = "N"; /* Set end flag*/
    while (TS0XW01.TS0XWEFL == "N") /* Until end flag set*/
      TS0XS-154F();
      if (SQLCA.VAGen_SQLCODE == 0)
        if (TSIREC.XQACD != "01")
          converseLib.validationFailed(424);
          exit stack;
        end
      end
    end
    TS0XS-154C();
  end

   /* ------------------------------------------------------------*/
           /* 3) Factory Document Recieved Date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TS-FCTY-DOC-RDT != " ") /* if date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TS-FCTY-DOC-RDT; /* working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TS-FCTY-DOC-RDT) /* if changed*/
        TS0XW02.TS-FCTY-DOC-RDT = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TS-FCTY-DOC-RDT cursor, modified, bold;
      TS0XM001.XXXPRCNM = "TS0X154"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TS-FCTY-DOC-RDT != 0) /* if date was changed*/
      TS0XW02.TS-FCTY-DOC-RDT = 0; /* default the date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
            /* 4) nike department code*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.XNDCD == " ") /* if Nike department is blank*/
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    TS0XM001.XNDDESC = " "; /* clear description*/
    TS0XW02.XNDCD = " "; /* default code*/
  else
    if (TS0XM001.XNDCD in XNDTBL.XNDCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XNDTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(81); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X154"; /* Process name*/
      TS0XM001.XNDDESC = " "; /* Clear description*/
      set TS0XM001.XNDCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XM001.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
      TS0XW02.XNDCD = XNDTBL.XNDCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
            /* 5) warehouse code*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.XWHCD == " ") /* if warehouse code is blank*/
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    TS0XM001.XWHABRV = " "; /* clear description*/
    TS0XW02.XWHCD = " "; /* default code*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0XM001.XWHCD in XWHTBL.XWHCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XWHTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(82); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X154"; /* Process name*/
      TS0XM001.XWHABRV = " "; /* Clear description*/
      set TS0XM001.XWHCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      TS0XW02.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex]; /* save code*/
    end
  end

end // end TS0X154

// Edit grouping 5
Function TS0X155()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 5*/

         /* Edit;*/
           /* 1) destination estimated date*/
           /* 2) destination actual date*/
           /* 3) discharge estimated date*/
           /* 4) discharge actual date*/
           /* 5) discharge location*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) destination estimated date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TS-ADVN-SHP-IND == "A"
   || TS0XM001.TS-ADVN-SHP-IND == " ")
    TS0XW02.TS-ADVN-SHP-IND = TS0XM001.TS-ADVN-SHP-IND;
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
  else
    if (TS0XM001.TS-ADVN-SHP-IND != TS0XW02.TS-ADVN-SHP-IND)
      if ((TS0XM001.TS-ADVN-SHP-IND != "A"
       || TS0XM001.TS-ADVN-SHP-IND != " ")
       && TS0XM001.TS-ADVN-SHP-IND != "T")
        TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
        set TS0XM001.TS-ADVN-SHP-IND cursor, modified, bold;
        TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
        converseLib.validationFailed(407); /* invalid ADVN indicator*/
      end
      if ((TS0XM001.TS-ADVN-SHP-IND == "T"
       && TS0XM001.YSSCD != "RC"))
        TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
        set TS0XM001.TS-ADVN-SHP-IND cursor, modified, bold;
        TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
        converseLib.validationFailed(407); /* invalid ADVN indicator*/
      end
    end
  end

  if (TS0XM001.TSFDESTE != " ") /* if est destination date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFDESTE; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFDESTE) /* if date is changed*/
        TS0XW02.TSFDESTE = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFDESTE cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TS0XW02.TSFDESTE = 0; /* default date*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    set TS0XM001.TSFDESTE cursor, modified, bold; /* highlight field*/
    TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
    converseLib.validationFailed(57); /* invalid date entered*/
  end

   /* ------------------------------------------------------------*/
           /* 2) destination actual date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFDESTA != " ") /* if act destination date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFDESTA; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFDESTA) /* if date is changed*/
        TS0XW02.TSFDESTA = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFDESTA cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFDESTA != 0) /* if the date is changed*/
      TS0XW02.TSFDESTA = 0; /* default date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 3) discharge estimated date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFDSCHG != " " /* if discharge location is entered*/
   && TS0XM001.TSFDSCHE == " ") /* and estimated date is not entered*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    set TS0XM001.TSFDSCHE cursor, modified, bold; /* highlight field*/
    TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
    converseLib.validationFailed(57); /* date is missing or invalid*/
  end

  if (TS0XM001.TSFDSCHE != " ") /* if est discharge date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFDSCHE; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFDSCHE) /* if date changed*/
        TS0XW02.TSFDSCHE = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFDSCHE cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFDSCHE != 0) /* if date actually changed*/
      TS0XW02.TSFDSCHE = 0; /* default date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 4) discharge actual date*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFDSCHA != " ") /* if act discharge date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFDSCHA; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFDSCHA) /* if date changed*/
        TS0XW02.TSFDSCHA = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFDSCHA cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X155"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFDSCHA != 0) /* if date actually changed*/
      TS0XW02.TSFDSCHA = 0; /* default date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 5) discharge location*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFDSCHG == " ") /* if discharge not entered*/
    TS0XW01.TS0XWICT = " ";
    TS0XM001.TS0XMDID = " "; /* Clear description*/
    TS0XW02.TSFDSCHG = " "; /* default*/
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TS0XM001.TSFDSCHG; /* move in code*/
    TS0XS0L(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
     || TSCREC.XXXSTAT == "I")    
      converseLib.validationFailed(83); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X155"; /* Process name*/
      TS0XM001.TS0XMDID = " "; /* Clear description*/
      TS0XW01.TS0XWICT = " ";
      set TS0XM001.TSFDSCHG cursor, modified, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
        TS0XM001.TS0XMDID = TSCREC.XXXCITY;
        TS0XW01.TS0XWICT = TSCREC.XXXCITY;
        TS0XW01.TS0XWIST = TSCREC.XSTCD;
        TS0XW01.TS0XWICO = TSCREC.XCTCD;
        TS0XW02.TSFDSCHG = TSCREC.TSCLOCCD; /* save code*/
      end
    end
  end


end // end TS0X155

// Edit grouping 6
Function TS0X156()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 6*/

         /* Edit;*/
           /* 1) origin estimated date*/
           /* 2) origin actual date*/
           /* 3) origin location*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) origin estimated date*/
   /* ------------------------------------------------------------*/

  if (TSWREC.YSSCD == "TN" /* if tentative shipment*/
   && TS0XM001.TSFDPRTE == " ") /* and estimated date is not entered*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    set TS0XM001.TSFDPRTE cursor, modified, bold; /* highlight field*/
    TS0XM001.XXXPRCNM = "TS0X156"; /* process name*/
    converseLib.validationFailed(57); /* date is missing or invalid*/
  end

  if (TS0XM001.TSFDPRTE != " ") /* if est departure date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFDPRTE; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFDPRTE) /* date was changed*/
        TS0XW02.TSFDPRTE = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFDPRTE cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X156"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFDPRTE != 0) /* if date was changed*/
      TS0XW02.TSFDPRTE = 0; /* default date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 2) origin actual date*/
   /* ------------------------------------------------------------*/

  if (TSWREC.YSSCD != "TN" /* if tentative shipment*/
   && TS0XM001.TSFDPRTA == " ") /* and actual date is not entered*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    set TS0XM001.TSFDPRTA cursor, modified, bold; /* highlight field*/
    TS0XM001.XXXPRCNM = "TS0X156"; /* process name*/
    converseLib.validationFailed(57); /* date is missing or invalid*/
  end

  if (TS0XM001.TSFDPRTA != " ") /* if act departure date entered*/
    TS0XW01.TS0XWDTE = TS0XM001.TSFDPRTA; /* move to working date*/
    TS0XS06(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TA2REC.TA2GRGGN != TS0XW02.TSFDPRTA) /* date was changed*/
        TS0XW02.TSFDPRTA = TA2REC.TA2GRGGN; /* save date*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      end
    else
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFDPRTA cursor, modified, bold; /* highlight field*/
      TS0XM001.XXXPRCNM = "TS0X156"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    if (TS0XW02.TSFDPRTA != 0) /* if date was changed*/
      TS0XW02.TSFDPRTA = 0; /* default date*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 3) origin location*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSEORIG == " ") /* if origin not entered*/
    TS0XW02.TSEORIG = " "; /* default*/
    converseLib.validationFailed(41); /* Display error message*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
    TS0XM001.XXXPRCNM = "TS0X156"; /* Process name*/
    TS0XM001.TS0XMORD = " "; /* Clear description*/
    TS0XW01.TS0XWOCT = " ";
    set TS0XM001.TSEORIG cursor, modified, bold; /* highlight field*/
  else
    set TSCREC empty;
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    TSCREC.TSCLOCCD = TS0XM001.TSEORIG; /* move in code*/
    TS0XS0L(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
     || TSCREC.XXXSTAT == "I")    
      converseLib.validationFailed(41); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X156"; /* Process name*/
      TS0XM001.TS0XMORD = " "; /* Clear description*/
      TS0XW01.TS0XWOCT = " ";
      set TS0XM001.TSEORIG cursor, modified, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        TS0XM001.TS0XMORD = TSCREC.XXXCITY;
        TS0XW01.TS0XWOCT = TSCREC.XXXCITY;
        TS0XW01.TS0XWOST = TSCREC.XSTCD;
        TS0XW01.TS0XWOCO = TSCREC.XCTCD;
        TS0XW02.TSEORIG = TSCREC.TSCLOCCD; /* save code*/
      end
    end
  end


end // end TS0X156

// Edit grouping 7
Function TS0X157()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 7*/

         /* Edit;*/
           /* 1) shipment*/
           /* 2) craft*/
           /* 3) carrier*/
           /* 4) forwarder*/
           /* 5) bill of lading*/
           /* 6) GPC code*/
           /* 7) YSS shipment status code*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) shipment*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFSHPNB == " ") /* If shipment number blank*/
    converseLib.validationFailed(59); /* error message*/
    TS0XW02.TSFSHPNB = " "; /* default*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
    set TS0XM001.TSFSHPNB cursor, modified, bold; /* highlight field*/
  else
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    TS0XW02.TSFSHPNB = TS0XM001.TSFSHPNB; /* save number*/
    TSWREC.TSFSHPNB = TS0XM001.TSFSHPNB; /* save number*/
  end

   /* ------------------------------------------------------------*/
           /* 2) craft*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TS5CRAFT == " ") /* If craft is missing*/
    converseLib.validationFailed(48); /* error message*/
    TS0XW02.TS5CRAFT = " "; /* default*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
    set TS0XM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
           /* 3) carrier*/
   /* ------------------------------------------------------------*/

  TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
  if (TS0XM001.TSACARCD == " ") /* If carrier code is missing*/
    converseLib.validationFailed(39); /* error message*/
    TS0XW02.TSACARCD = " "; /* default*/
    TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    set TS0XM001.TSACARCD cursor, modified, bold; /* highlight field*/
  else
    TSAREC.TSACARCD = TS0XM001.TSACARCD; /* move in key*/
    TS0XS0O(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TS0XW02.TSACARCD = TSAREC.TSACARCD; /* save code*/
      TSWREC.TSACARCD = TSAREC.TSACARCD; /* save code*/
      if (TS0XM001.TS5CRAFT != " ") /* if craft has been entered*/
        TS5REC.TSACARCD = TS0XM001.TSACARCD; /* move in keys*/
        TS5REC.TS5CRAFT = TS0XM001.TS5CRAFT;
        TS0XS09(); /* select craft*/
        if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
         && TS5REC.XXXSTAT == "A")   /* in active status*/
          TS0XW02.TS5CRAFT = TS5REC.TS5CRAFT; /* save craft code*/
          TSWREC.TS5CRAFT = TS5REC.TS5CRAFT; /* save craft code*/
          TS0XW01.YMTCD = TS5REC.YMTCD; /* save mode code*/
        else
          if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
           && TS5REC.XXXSTAT == "I")   /* in inactive status*/
            converseLib.validationFailed(73); /* error message*/
            TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
            TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
            set TS0XM001.TS5CRAFT cursor, modified, bold;
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* if craft does not exist*/
              converseLib.validationFailed(48); /* error message*/
              TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
              TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
              set TS0XM001.TS5CRAFT cursor, modified, bold;
            end
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
       && TSAREC.XXXSTAT == "I")   /* in inactive status*/
        converseLib.validationFailed(72); /* error message*/
        TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
        TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
        set TS0XM001.TSACARCD cursor, modified, bold; /* highlight field*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
          converseLib.validationFailed(39); /* error message*/
          TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
          TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
          set TS0XM001.TSACARCD cursor, modified, bold;
                                 /* highlight field*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
           /* 4) forwarder*/
   /* ------------------------------------------------------------*/

  TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
  if (TS0XM001.TSFRWRDR == " ") /* If forwarder code is blank*/
    TS0XW02.TSFRWRDR = " "; /* default*/
  else
    TSAREC.TSACARCD = TS0XM001.TSFRWRDR; /* move in key*/
    TS0XS0O(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TS0XW02.TSFRWRDR = TSAREC.TSACARCD; /* save code*/
    else
      if (SQLCA.VAGen_SQLCODE == 100 /* if carrier does not exist*/
       || TSAREC.XXXSTAT == "I")    
        converseLib.validationFailed(142); /* error message*/
        TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
        TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
        set TS0XM001.TSFRWRDR cursor, modified, bold; /* highlight field*/
      end
    end
  end

   /* ------------------------------------------------------------*/
           /* 5) bill of lading*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.TSFBOL == " " /* If BOL is blank*/
   && TSWREC.YSSCD != "TN")  /* and not a tentative shipment*/
    converseLib.validationFailed(84); /* error message*/
    TS0XW02.TSFBOL = " "; /* default*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
    set TS0XM001.TSFBOL cursor, modified, bold; /* highlight field*/
  else
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    TS0XW02.TSFBOL = TS0XM001.TSFBOL; /* save BOL*/
    TSWREC.TSFBOL = TS0XM001.TSFBOL; /* save BOL*/
  end


   /* ------------------------------------------------------------*/
           /* 6) gpc*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.XGPCD == " ") /* If gpc is blank*/
    converseLib.validationFailed(101); /* error message*/
    TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
    TS0XW01.XGPCD = " "; /* default*/
    TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
    set TS0XM001.XGPCD cursor, modified, bold; /* highlight field*/
  else
    if (TS0XM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
     && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW01.XGPCD = TS0XM001.XGPCD; /* save gpc*/
      TSWREC.XGPCD = TS0XM001.XGPCD; /* save gpc*/
    else
      converseLib.validationFailed(101); /* error message*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      TS0XW01.XGPCD = " "; /* default*/
      TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
      set TS0XM001.XGPCD cursor, modified, bold; /* highlight field*/
    end
  end


   /* ------------------------------------------------------------*/
           /* 7) yss*/
   /* ------------------------------------------------------------*/

  if (TS0XM001.YSSCD == TS0XW01.YSSCD /* if yss is not changed*/
   && TS0XM001.YSSCD != " ")         
      /* continue on*/
  else
    if (TS0XM001.YSSCD == " ") /* If yss is blank*/
      converseLib.validationFailed(403); /* error message*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      TS0XW01.YSSCD = " "; /* default*/
      TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
      set TS0XM001.YSSCD cursor, modified, bold; /* highlight field*/
    else
      if (TS0XM001.YSSCD == "IT" /* Code is either intransit*/
       || TS0XM001.YSSCD == "RC") /* or received*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
        TS0XW01.YSSCD = TS0XM001.YSSCD; /* save yss*/
        TSWREC.YSSCD = TS0XM001.YSSCD; /* save yss*/
      else
        converseLib.validationFailed(403); /* error message*/
        TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
        TS0XW01.YSSCD = " "; /* default*/
        TS0XM001.XXXPRCNM = "TS0X157"; /* Process name*/
        set TS0XM001.YSSCD cursor, modified, bold; /* highlight field*/
      end
    end
  end


end // end TS0X157

// Overlap and calculation edits
Function TS0X158()
   /* ------------------------------------------------------------*/

               /* OVERLAP AND CALCUALTION EDITS*/

         /* Edit;*/
           /* 1) check forwarder entered in case of craft*/
              /* mode equal to 'AF'.*/
           /* 2) check that warehouse location equals dest loc.*/
           /* 3) check for duplicate locations entered*/
           /* 4) check to see if transit time calculation for*/
              /* destimation estimated date is required.*/
           /* 5) check for all other date overlaps*/

   /* ------------------------------------------------------------*/

     /* ******** get current date **********/

  XX0XS01();
  TS0XW01.TS0XWCDT = XX0XW01.XX0XWDAT; /* save current date*/

  if (TS5REC.YMTCD == "AF" /* If airfreight is the craft mode*/
   && TS0XM001.TSFTKG == 0) /* and kilograms not entered*/
    converseLib.validationFailed(275); /* frwrdr must be entered*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
    TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
    set TS0XM001.TSFTKG cursor, bold; /* highlight field*/
  end

  if (TS5REC.YMTCD == "AF" /* If airfreight is the craft mode*/
   && TS0XM001.TSFRWRDR == " ") /* and forwarder not entered*/
    converseLib.validationFailed(266); /* frwrdr must be entered*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
    TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
    set TS0XM001.TSFRWRDR cursor, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* Check for duplicate locations entered*/
   /* ------------------------------------------------------------*/

  if (TS0XW01.TS0XWPSW == "N") /* if no errors have occurred*/

    if (TS0XM001.XWHCD != "  ") /* If warehouse exists*/
      if (TS0XM001.XWHCD in XWHTBL.XWHCD)
        if (TS0XM001.TSEDEST != XWHTBL.TSCLOCCD[sysVar.arrayIndex])
          converseLib.validationFailed(274);
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
          set TS0XM001.TSEDEST bold; /* highlight field*/
          set TS0XM001.XWHCD cursor, bold; /* highlight field*/
        end
      end
    end

    if (TS0XM001.TSEORIG == TS0XM001.TSEDEST)
      converseLib.validationFailed(67); /* origin cannot = destination*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
      set TS0XM001.TSEORIG modified, bold; /* highlight field*/
      set TS0XM001.TSEDEST cursor, modified, bold; /* highlight field*/
    end

    if (TS0XM001.TSFDSCHG == TS0XM001.TSEORIG)
      converseLib.validationFailed(86); /* Discharge cannot = origin*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM001.XXXPRCNM = "TS0S158"; /* Process name*/
      set TS0XM001.TSEORIG modified, bold; /* highlight field*/
      set TS0XM001.TSFDSCHG cursor, modified, bold; /* highlight field*/
    end

  end

  if (TS0XW01.TS0XWPSW == "N") /* if no errors have occurred*/

    if (TS0XM001.TSFDESTE == " ") /* if destination est date is missing*/

      /* ------------------------------------------------------------*/
         /* Calculate the estimated dest date with transit times.*/
      /* ------------------------------------------------------------*/

      if (TS0XM001.TSFDSCHG != " " /* if discharge loc is entered*/
       && TS0XM001.TSFDSCHE != " ") /* and est dschg dt is entered*/
        TSEREC.TSEORIG = TS0XM001.TSFDSCHG; /* move in ttime keys*/
        TSEREC.TSEDEST = TS0XM001.TSEDEST;
        TSEREC.YMTCD = TS0XW01.YMTCD;
        TS0XS12(); /* select the transit time*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if transit time is found*/
          set TA2REC empty; /* clear date record*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* move in option*/
          TA2REC.TA2GRTYP = "G"; /* move date type to record*/
          TA2REC.TA2GRGGN = TSFREC.TSFDSCHE; /* move in dis date*/
          TA2REC.TA2DYAOD = TSEREC.TSETRNTM; /* move tran time to add*/
          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/
          if (TA2REC.TA2RTNCD == 0) /* if return code is OK*/
            TS0XW02.TSFDESTE = TA2REC.TA2GRGGN; /* save the date*/
            TS0XM001.TSFDESTE = TA2REC.TA2GRGA; /* move date to map*/
          end
        end
      else
        if (TS0XM001.TSFDSCHG == " " /* if dschg loc is not entered*/
         && TS0XM001.TSFDPRTA != " ") /* and act dprt dt is entered*/
          TSEREC.TSEORIG = TS0XM001.TSEORIG; /* move in ttime keys*/
          TSEREC.TSEDEST = TS0XM001.TSEDEST;
          TS0XS12(); /* select the transit time*/
          if (SQLCA.VAGen_SQLCODE == 0) /* if transit time is found*/
            set TA2REC empty; /* clear date record*/
            TA2REC.TA2DTOPT = "GREGGREG"; /* move in option*/
            TA2REC.TA2GRTYP = "G"; /* move date type to record*/
            TA2REC.TA2GRGGN = TSFREC.TSFDSCHE; /* move in dis date*/
            TA2REC.TA2DYAOD = TSEREC.TSETRNTM; /* move trn tm to add*/
            call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/
            if (TA2REC.TA2RTNCD == 0) /* if return code is OK*/
              TS0XW02.TSFDESTE = TA2REC.TA2GRGGN; /* save the date*/
              TS0XM001.TSFDESTE = TA2REC.TA2GRGA; /* move date to map*/
            end
          end
        end
      end
    else

      /* ------------------------------------------------------------*/
             /* Check for date overlap errors.*/
      /* ------------------------------------------------------------*/

      if (TS0XW02.TSFDESTE < TS0XW02.TSFDPRTA /* if est dest < act dprt*/
       && TS0XW02.TSFDPRTA != 0)              /* and act dprt date exists*/
        converseLib.validationFailed(147); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
        set TS0XM001.TSFDESTE cursor, modified, bold; /* highlight field*/
      else
        if (TS0XW02.TSFDESTE < TS0XW02.TSFDPRTE /* if est dest < est dprt*/
         && TS0XW02.TSFDPRTE != 0)              /* and est dprt date exists*/
          converseLib.validationFailed(87); /* Display error message*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
          set TS0XM001.TSFDESTE cursor, modified, bold; /* highlight field*/
        else
          if (TS0XW02.TSFDESTE < TS0XW02.TSFDSCHE /* est dest < est dschg*/
           && TS0XW02.TSFDSCHG != 0)              /* and est dschg date exists*/
            converseLib.validationFailed(88); /* Display error message*/
            TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
            TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
            set TS0XM001.TSFDESTE cursor, modified, bold;
                                   /* highlight field*/
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
           /* Check for date overlap errors.*/
    /* ------------------------------------------------------------*/

    if (TS0XM001.TSFDESTA != " ") /* if dest actual date is entered*/
      if (TS0XW02.TSFDESTA < TS0XW02.TSFDPRTA /* if act dest < act dprt*/
       && TS0XW02.TSFDPRTA != 0)              /* and act dprt date exists*/
        converseLib.validationFailed(90); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
        set TS0XM001.TSFDESTA cursor, modified, bold; /* highlight field*/
      else
        if (TS0XW02.TSFDESTA < TS0XW02.TSFDSCHA /* if act dest < act dschg*/
         && TS0XW02.TSFDSCHA != 0)              /* and act dshcg date exists*/
          converseLib.validationFailed(91); /* Display error message*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
          set TS0XM001.TSFDESTA cursor, modified, bold; /* highlight field*/
        end
      end
    end

    /* ------------------------------------------------------------*/
           /* Check for date overlap errors.*/
    /* ------------------------------------------------------------*/

    if (TS0XM001.TSFDSCHE != " ") /* if dschg est date is entered*/
      if (TS0XW02.TSFDSCHE < TS0XW02.TSFDPRTE /* if est dschg < est dprt*/
       && TS0XW02.TSFDPRTE != 0)              /* and est dprt date exists*/
        converseLib.validationFailed(92); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
        set TS0XM001.TSFDSCHE cursor, modified, bold; /* highlight field*/
      else
        if (TS0XW02.TSFDSCHE > TS0XW02.TSFDESTE /* if est dschg > est dest*/
         && TS0XW02.TSFDESTE != 0)              /* and est dest date exists*/
          converseLib.validationFailed(93); /* Display error message*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
          set TS0XM001.TSFDSCHE cursor, modified, bold; /* highlight field*/
        end
      end
    end

    /* ------------------------------------------------------------*/
           /* Check for date overlap errors.*/
    /* ------------------------------------------------------------*/

    if (TS0XM001.TSFDSCHA != " ") /* if dschg act date is entered*/
      if (TS0XW02.TSFDSCHA < TS0XW02.TSFDPRTA /* if act dschg < act dprt*/
       && TS0XW02.TSFDPRTA != 0)              /* and act dprt date exists*/
        converseLib.validationFailed(94); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
        set TS0XM001.TSFDSCHA cursor, modified, bold; /* highlight field*/
      else
        if (TS0XW02.TSFDSCHA > TS0XW02.TSFDESTA /* if act dschg > act dest*/
         && TS0XW02.TSFDESTA != 0)              /* and act dest date exists*/
          converseLib.validationFailed(95); /* Display error message*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
          set TS0XM001.TSFDSCHA cursor, modified, bold; /* highlight field*/
        end
      end
    end

    /* ------------------------------------------------------------*/
           /* Check for date overlap errors.*/
    /* ------------------------------------------------------------*/

    if (TS0XM001.TSFDPRTE != " ") /* if dprt est date is entered*/
      if (TS0XW02.TSFDPRTE > TS0XW02.TSFDESTE /* if est dprt > est dest*/
       && TS0XW02.TSFDESTE != 0)              /* and est dest date exists*/
        converseLib.validationFailed(96); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
        set TS0XM001.TSFDPRTE cursor, modified, bold; /* highlight field*/
      else
        if (TS0XW02.TSFDPRTE > TS0XW02.TSFDSCHE /* if est dprt > est dschg*/
         && TS0XW02.TSFDSCHE != 0)              /* and est dschg date exists*/
          converseLib.validationFailed(97); /* Display error message*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
          set TS0XM001.TSFDPRTE cursor, modified, bold; /* highlight field*/
        end
      end
    end

    /* ------------------------------------------------------------*/
           /* Check for date overlap errors.*/
    /* ------------------------------------------------------------*/

    if (TS0XM001.TSFDPRTA != " ") /* if dprt est date is entered*/
      if (TS0XW02.TSFDPRTA > TS0XW02.TSFDESTA /* if act dprt > act dest*/
       && TS0XW02.TSFDESTA != 0)              /* and act dest date exists*/
        converseLib.validationFailed(98); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
        set TS0XM001.TSFDPRTA cursor, modified, bold; /* highlight field*/
      else
        if (TS0XW02.TSFDPRTA > TS0XW02.TSFDSCHA /* if act dprt > act dschg*/
         && TS0XW02.TSFDSCHA != 0)              /* and act dschg date exists*/
          converseLib.validationFailed(99); /* Display error message*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X158"; /* Process name*/
          set TS0XM001.TSFDPRTA cursor, modified, bold; /* highlight field*/
        else

          /* Add 7  days to current date for editing ADT date*/

          set TA2REC empty; /* clear record*/
          TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
          TA2REC.TA2GRGG = TS0XW01.TS0XWCDT; /* current date*/
   /* parm const to add*/
          TA2REC.TA2DYAOD = TS0XW01.TS0XW-ADT-DATE-WINDOW;

          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

          if (TA2REC.TA2RTNCD == 0) /* no errors found*/

            TS0XW01.TS0XW-MAX-ADT-DATE = TA2REC.TA2GRGG; /* curr date + constant*/

          end

          if (TS0XW02.TSFDPRTA > TS0XW01.TS0XW-MAX-ADT-DATE)

            converseLib.validationFailed(374); /* error msg*/
            TS0XW01.TS0XWPSW = "Y"; /* indicate prob*/
            TS0XM001.XXXPRCNM = "TS0X158"; /* process name*/
            set TS0XM001.TSFDPRTA cursor, modified, bold; /* highlight*/

          end
        end
      end
    end
  end


end // end TS0X158

// Behind the scenes updates
Function TS0X159()
   /* ------------------------------------------------------------*/

              /* BEHIND THE SCENES UPDATES*/

         /* Update all the fields in TSFREC that should be*/
       /* updated by this application for the header add.*/

   /* ------------------------------------------------------------*/

  if (TS0XW02.TSFDIVRT == " ") /* if fields is blank*/
    TS0XW02.TSFDIVRT = "N"; /* initialize shipment divert flag*/
  end
  if (TS0XW02.TSFAPLFL == " ") /* if fields is blank*/
    TS0XW02.TSFAPLFL = "N"; /* initialize charges applied flag*/
  end


end // end TS0X159

// Process valid input request
Function TS0X160()
   /* ------------------------------------------------------------*/

             /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If no errors and the final exit flag is yes*/
     /* a) If ENTER is pressed, update the header, text, and*/
        /* address tables with new data.  If shipment type is*/
        /* changed to 'BA' kickoff TS2460.  Then transfer to*/
        /* TS0J - shipment maintenance menu.*/
     /* b) If PF12 is pressed, set map 1 to maintenance.*/
     /* c) If PF17 is pressed, go to map 2 ( charges mnt. map ).*/
     /* d) If PF18 is pressed, go to map 3 ( address mnt. map ).*/
   /* 2) Check the final exit flag and set warning if needed.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N"       
   && TS0XW01.TS0XWFEX == "Y")      /* and final exit flag is yes*/
    TS0XW-BA-FLG = "N"; /* Initialize BA flag*/
    if (TS0XW02.YSTCD == "BA" /* If shipment type has changed*/
     && TSFREC.YSTCD != "BA") /* to 'BA'*/
      TS0XW-BA-FLG = "Y"; /* set BA flag to 'Y'*/
    end
    if (TS0XW01.TS0X-DIS-LOC-CD == 
    TS0XM001.TSFDSCHG) /* If Discharge loc is changed*/
      /* Next Sentence            /* Check for consolidation*/
    else /* and assign leg nbr*/
      TS0X-161();
    end

    TS0X161(); /* upd the shipment text*/
    TS0X162(); /* upd the shipment address*/
    TS0X163(); /* upd the shipment header*/
    if (SQLCA.VAGen_SQLCODE == 0 /* If shipment add is successful*/
     || TSFREC.YSSCD == "CX")    /* or canceled shipment*/
      if (TS0XW-BA-FLG == "Y") /* Kickoff TS2461*/
        TS0X165(); /* BASICS EXTRACT*/
      end
      TSWREC.TSFBOL = TS0XW02.TSFBOL;
      TSWREC.TSACARCD = TS0XW02.TSACARCD;
      TSWREC.TS5CRAFT = TS0XW02.TS5CRAFT;
      TSWREC.TSFSHPNB = TS0XW02.TSFSHPNB;
      TSWREC.TSEORIG = TS0XW02.TSEORIG;
      TSWREC.TSEDEST = TS0XW02.TSEDEST;
      TSWREC.XWHCD = TS0XW02.XWHCD;
      COMMAREA.CAUSERA = TSWREC.CAUSERA;
      COMMAREA.CATOAP = "TS0J"; /* Set to TS0j menu*/
      XSTSS01(); /* transfer to application*/
      TS0XW01.TS0XWPSW = "Y"; /* if fails, indicate error*/
      TS0XM001.XXXPRCNM = "TS0X160"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf12 /* if pf17 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")    
    TS0XW01.TS0XWMAP = "1B"; /* set to map 1b*/
  end

   /* MLATHA CHANGES BEGIN*/
  if (converseVar.eventKey is pf13 /* if pf13 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N"      
   && TS0XW01.TS0XWFEX == "Y")     /* and final exit flag is yes*/
    if ((TS0XM001.XWHCD != "72"
     && TS0XM001.XWHCD != "70"))
      converseLib.validationFailed(421);
    else
      converseLib.validationFailed(459);
      exit stack;
   /* PERFORM TS0X166;/* COMMENTED - NOT TO OBTAIN RECEIPTS*/
    end
  end
   /* MLATHA CHANGES BEGIN*/

  if (converseVar.eventKey is pf17 /* if pf17 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N"      
   && TS0XW01.TS0XWFEX == "Y")     /* and final exit flag is yes*/
    TS0XW01.TS0XWMAP = "2A"; /* set to map 2a*/
    TS0XW01.TS0XWFSW = "C"; /* set function switch to charges*/
  end

  if (converseVar.eventKey is pf18 /* if pf18 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N"      
   && TS0XW01.TS0XWFEX == "Y")     /* and final exit flag is yes*/
    TS0XW01.TS0XWMAP = "3A"; /* set to map 3*/
    TS0XW01.TS0XWFSW = "A"; /* set function switch to address*/
  end

  if (converseVar.eventKey is enter /* if a valid pf key is entered*/
   || converseVar.eventKey is pf17  
   || converseVar.eventKey is pf18)
    if (TS0XW01.TS0XWFEX == "N" /* if the final exit flag is no*/
     && TS0XW01.TS0XWPSW == "N") /* and no errors*/
      set TS0XM001.TSFBOLDT cursor, modified, bold;
      TS0XM001.XXXPRCNM = "TS0X160"; /* process name*/
      converseLib.validationFailed(134); /* warning for b/l date entered*/
      TS0XW01.TS0XWFEX = "Y"; /* set final exit to yes*/
    end
  end


end // end TS0X160

// Process the shpmnt text rows
Function TS0X161()
   /* ------------------------------------------------------------*/

                    /* PROCESS THE TEXT LINES*/

      /* If text update flag indicates a change was made;*/
      /* 1) While text sequence number is le the max text lines.*/
         /* a) If the saved text line is equal to blank and*/
            /* the exist flag indicates that text exists for*/
            /* this sequence number in the data base, then*/
            /* delete the text line in the data base.*/
         /* a) Else, if the line exists, select the line from*/
            /* from the database.  Check the change counts for*/
            /* equality.  If they are equal then update the line*/
            /* in the database.*/
      /* 2) If any errors indicate that the data was updated by*/
         /* another application, then exit to redisplay the map*/
         /* with the new updated data.*/

   /* ------------------------------------------------------------*/

  TS0XW01.TS0XWUEF = "N"; /* update error flag*/
  TS0XW01.TS0XCOMM = "N";

  if (TS0XW01.TS0XWTXF == "Y") /* if text update flag is yes*/

    TS0XW01.TS0XWIXM = 1;
    while (TS0XW01.TS0XWIXM <= TS0XW01.TS0XWMXT) /* le max text line*/
      TSRREC.TSRSEQNB = TS0XW01.TS0XWIXM; /* sequence number*/
      if (TS0XW01.TSRTEXT[TS0XWIXM] == " ") /* if no text in comment line*/
        if (TS0XW01.TS0XWEXF[TS0XWIXM] == "Y") /* and text exists in db*/
          TS0XS15(); /* delete the existing text in db*/
          if (SQLCA.VAGen_SQLCODE == 0) /* if row was there to delete*/
            if (TS0XW01.TS0XCOMM == "N")
              TS0XW02.TSFTXTID = "N";
            else
              TS0XW02.TSFTXTID = "Y";
            end
            TS0XW01.TS0XWSHF = "Y"; /* Update the shipment*/
          else
            TS0XW01.TS0XWUEF = "Y"; /* indicate update error flag*/
          end
        end
      else
        TS0XW01.TS0XCOMM = "Y";
        TS0XS18(); /* select the existing row in the db*/
        if (TS0XW01.ZZZCHGCT[TS0XWIXM] == TSRREC.ZZZCHGCT /* if chng ct ok*/
         && SQLCA.VAGen_SQLCODE == 0)                     /* and row was indeed found*/
          TSRREC.TSRTEXT = TS0XW01.TSRTEXT[TS0XWIXM]; /* move in text*/
          TS0XS21(); /* update the data in the database*/
          if (SQLCA.VAGen_SQLCODE == 100) /* if row was not there to update*/
            TS0XW01.TS0XWUEF = "Y"; /* indicate update error flag*/
          end
          TS0XW01.TS0XWSHF = "Y"; /* Update the shipment*/
          TS0XW02.TSFTXTID = "Y"; /* indicate text exists*/
        else
          if (TS0XW01.ZZZCHGCT[TS0XWIXM] != TSRREC.ZZZCHGCT /* if cnt wrong*/
           && SQLCA.VAGen_SQLCODE == 0)                     /* and row was indeed found*/
            TS0XW01.TS0XWUEF = "Y"; /* indicate update error flag*/
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* If row was not found*/
              TSRREC.TSRSEQNB = TS0XW01.TS0XWIXM;
              TSRREC.TSRTEXT = TS0XW01.TSRTEXT[TS0XWIXM];
              TS0XS24(); /* Add the new txt row*/
              if (SQLCA.VAGen_SQLCODE == 0) /* If add ok*/
                TS0XW01.TS0XWSHF = "Y"; /* Update the shipment*/
                TS0XW02.TSFTXTID = "Y"; /* indicate text exists*/
              else
                TS0XW01.TS0XWUEF = "Y"; /* indicate update error flag*/
              end
            else
              TS0XW01.TS0XWUEF = "Y"; /* indicate update error flag*/
            end
          end
        end
      end
      TS0XW01.TS0XWIXM = TS0XW01.TS0XWIXM + 1; /* increment index*/
    end

    if (TS0XW01.TS0XWUEF == "Y") /* if update error has occurred*/
      converseLib.validationFailed(12); /* data was updated by another application*/
      TS0XM001.XXXPRCNM = "TS0X161"; /* process name*/
      TS0XW01.TS0XWMAP = "1A"; /* start a map 1a*/
      TS0XW01.TS0XWSWR = "Y"; /* set request for data to yes*/
      TS0XW01.TS0XWSHF = "N"; /* reset change switches*/
      TS0XW01.TS0XWTXF = "N";
      TS0XW01.TS0XWADF = "N";
      exit stack; /* exit to redisplay the map*/
    end

  end


end // end TS0X161

// Process the shpmnt address row
Function TS0X162()
   /* ------------------------------------------------------------*/

                    /* ADD TO DTRANS.VTSADR01*/

      /* If address update flag indicates a change;*/
      /* - If any address lines were entered;*/
          /* add the row to the database.*/
      /* - It will return a system error if an unexpected return*/
          /* code is received.*/
   /* ------------------------------------------------------------*/

  TS0XW01.TS0XWUEF = "N"; /* reset update error flag*/

  if (TS0XW01.TS0XWADF == "Y") /* if address update flag is yes*/

    if (TS0XW03.XXX-ADDR1 == " " /* if no data entered*/
     && TS0XW03.XXX-ADDR2 == " " 
     && TS0XW03.XXX-ADDR3 == " " 
     && TS0XW03.XXXCITY == " "   
     && TS0XW03.XSTCD == " "     
     && TS0XW03.XXXZIP == " "    
     && TS0XW03.XCTCD == " "     
     && TS0XW03.TSFSHPID > 0)    /* and data did exist in the database*/
      TS0XS27(); /* delete the row from the data base*/
      TS0XW02.TSFADRID = "N"; /* indicate no address*/
      TS0XW01.TS0XWSHF = "Y"; /* Update ship header*/
      if (SQLCA.VAGen_SQLCODE == 100) /* if the row was not found to delete*/
        TS0XW01.TS0XWUEF = "Y"; /* indicate update error flag*/
      end
    else
      TS0XW01.TS0XWSHF = "Y"; /* Update ship header*/
      TS0XW02.TSFADRID = "Y"; /* indicate address exists*/
      TSSREC.TSSGROUP = TS0XW03.TSSGROUP; /* move in shipment group*/

      TS0XS30(); /* select the row to see if it exists*/

      if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
        TS0XS33(); /* Add the new text row*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if add ok*/
          /* continue on*/
        else
          TS0XW01.TS0XWUEF = "Y"; /* update error flag*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 0 /* if row found and chng cts equal*/
         && TSSREC.ZZZCHGCT == TS0XW03.ZZZCHGCT)

          TS0XS36(); /* update the table row*/

          if (SQLCA.VAGen_SQLCODE == 100)
            TS0XW01.TS0XWUEF = "Y"; /* update error flag*/
          end
        end
      end
    end

    if (TS0XW01.TS0XWUEF == "Y") /* if update error has occurred*/
      converseLib.validationFailed(12); /* data was updated by another application*/
      TS0XM001.XXXPRCNM = "TS0X162"; /* process name*/
      TS0XW01.TS0XWMAP = "1A"; /* start a map 1a*/
      TS0XW01.TS0XWSWR = "Y"; /* set request for data to yes*/
      TS0XW01.TS0XWSHF = "N"; /* reset change switches*/
      TS0XW01.TS0XWTXF = "N";
      TS0XW01.TS0XWADF = "N";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      exit stack; /* exit to redisplay the map*/
    end

  end


end // end TS0X162

// Add the shipment header row
Function TS0X163()
   /* ------------------------------------------------------------*/

                 /* UPDATE IN DTRANS.VSHPHD01*/

       /* If shipment update flag indicates a change;*/
       /* - This module updates a row in the shipment header*/
           /* table.*/
       /* - It will return a system error if an unexpected return*/
           /* code is received.*/
   /* ------------------------------------------------------------*/

  TS0XW01.TS0XWUEF = "N"; /* reset update error flag*/

  if (TS0XW01.TS0XWSHF == "Y") /* if shp update flag eq 'y'*/

    TS0XS39(); /* select the shipment row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
      TS0XW01.TS0XWUEF = "Y"; /* indicate update error*/
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* if row found and chng cts equal*/
       && TSFREC.ZZZCHGCT == TS0XW02.ZZZCHGCT)

        TS0XS42(); /* Check for custom clear update of cntnrs and p/l's*/

        if (TSFREC.XGPCD != TS0XW01.XGPCD) /* if gpc changed*/
          TS0XS-43(); /* update cntnrs and p/l rows for gpc change*/

   /* IF TSFREC.TSFDESTE EQ TS0XW02.TSFDESTE; /* if key index not chgd*/
          TS0XS69(); /* update the shipment row*/
          if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
            TS0XW01.TS0XWUEF = "Y"; /* indicate update error*/
          end
   /* ELSE;*/
   /* TS0XS72;                  /* delete the shipment row*/
   /* IF SQLCA.SQLCODE EQ 100;  /* if row not found*/
   /* MOVE 'Y' TO TS0XW01.TS0XWUEF;  /* indicate update error*/
   /* ELSE;*/
   /* TS0XS75;                /* add the shipment row*/
   /* END;*/
   /* END;*/

        else /* not gpc change*/

   /* IF TSFREC.TSFDESTE EQ TS0XW02.TSFDESTE;/* if key index not chgd*/
          TS0XS69(); /* update the shipment row*/
          if (SQLCA.VAGen_SQLCODE == 100) /* if row not found*/
            TS0XW01.TS0XWUEF = "Y"; /* indicate update error*/
          end
   /* ELSE;*/
   /* TS0XS72;                  /* delete the shipment row*/
   /* IF SQLCA.SQLCODE EQ 100;  /* if row not found*/
   /* MOVE 'Y' TO TS0XW01.TS0XWUEF;  /* indicate update error*/
   /* ELSE;*/
   /* TS0XS75;                /* add the shipment row*/
   /* END;*/
   /* END;*/
        end


      end
    end

    if (TS0XW01.TS0XWUEF == "Y") /* if update error has occurred*/
      converseLib.validationFailed(12); /* data was updated by another application*/
      TS0XM001.XXXPRCNM = "TS0X163"; /* process name*/
      TS0XW01.TS0XWMAP = "1A"; /* start a map 1a*/
      TS0XW01.TS0XWSWR = "Y"; /* set request for data to yes*/
      TS0XW01.TS0XWSHF = "N"; /* reset change switches*/
      TS0XW01.TS0XWTXF = "N";
      TS0XW01.TS0XWADF = "N";
      exit stack; /* exit to redisplay the map*/
    end

  end


end // end TS0X163

// process valid input request
Function TS0X165()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};

  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")

    converseLib.validationFailed(8); /* Error*/
    exit stack;
  end

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* prod environment*/
    TS0X-085(); /* format prod batch sub*/
  else
    TS0X-086(); /* format test batch sub*/
  end

  return;
                                        /* retn to performing process*/
end // end TS0X165

// Shipment Charges Add Map
Function TS0X200()
   /* ------------------------------------------------------------*/

                 /* SHIPMENT CHARGES ADD MAP*/

   /* This is the main process used to display the charges add*/
   /* map.  Processing always returns to the top of this process*/
   /* and falls through to subordinate processes until an error*/
   /* is found or PF3 is requestes.*/
   /* Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) If map '2B' is indicated for maintenance;*/
      /* - Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0X210(); /* Format and display the map*/

  TS0X220(); /* Check attention identifier*/

  TS0X230(); /* Reset fields to normal intensity*/

  if (TS0XW01.TS0XWMAP == "2B") /* If maintemance map specified*/
    TS0X240(); /* Verify the entered data*/
  end

  TS0X250(); /* Process valid input request*/


end // end TS0X200

// Format and display the map
Function TS0X210()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

     /* 1) If no errors indicated.*/
        /* - Move map fields to map and indicate whether the map*/
          /* is inquiry or maintenance.*/
     /* 3) If the user change flag is set to no, then darken the*/
        /* change PFkey.*/
     /* 4) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0XW01.TS0XWPSW == "N") /* No errors*/
    TS0XM002.TSFSHPID = TS0XM001.TSFSHPID; /* move in fields*/
    TS0XM002.XGPCD = TS0XM001.XGPCD;
    TS0XM002.TSACARCD = TS0XM001.TSACARCD;
    TS0XM002.TS5CRAFT = TS0XM001.TS5CRAFT;
    TS0XM002.TSFSHPNB = TS0XM001.TSFSHPNB;
    TS0XM002.TSFBOL = TS0XM001.TSFBOL;
    TS0XM002.TSFRWRDR = TS0XM001.TSFRWRDR;
    TS0XM002.TSEORIG = TS0XM001.TSEORIG;
    TS0XM002.TSEDEST = TS0XM001.TSEDEST;
    TS0XM002.TS-TOT-COLL-SCHG = TS0XM001.TS-TOT-COLL-SCHG;
    TS0XM002.TS-TOT-PPD-SCHG = TS0XM001.TS-TOT-PPD-SCHG;

    if (TS0XW01.TS0XWMAP == "2A") /* If only inquiry map*/
      TS0XM002.TS0XMHDG = "INQUIRY";
      TS0X211(); /* protect all fields*/
    else
      if (TS0XW01.TS0XWMAP == "2B") /* If maintenance map*/
        TS0XM002.TS0XMHDG = "MAINTENANCE";
      end
    end

  end

  if (COMMAREA.CACHGFL == "N" /* if user does not have change ability*/
   || TSFREC.YSSCD == "CX")   /* or canceled shipment*/
    set TS0XM002.TS0XMPFC skip, invisible; /* darken change PF key*/
  end

  /* IF EZEMNO NE 0;                  /* error message to display*/
  /* SET TS0XM002 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  TS0XM002.XXXCURDT = VGVar.currentShortGregorianDate; /* move in date*/

  converse TS0XM002 ;

  TS0XW01.TS0XWPSW = "N"; /* reset error flag*/

  TS0X212(); /* check for user ? inquiry*/


end // end TS0X210

// Protect map 2 fields
Function TS0X211()
   /* ------------------------------------------------------------*/

                /* PROTECT MAP 2 FIELDS*/

      /* Set field attributes to protect.*/

   /* ------------------------------------------------------------*/

  set TS0XM002.TSFCHGFL protect; /* protect all map fields*/
  set TS0XM002.TS-ORIG-PMT-IND protect;
  set TS0XM002.TSFOKG protect;
  set TS0XM002.TSFDHNDL protect;
  set TS0XM002.TSFOFRGT protect;
  set TS0XM002.TSFDINLD protect;
  set TS0XM002.TSFOHNDL protect;
  set TS0XM002.TSFDMISC protect;
  set TS0XM002.TSFOINLD protect;
  set TS0XM002.TSFOCAF protect;
  set TS0XM002.YBRCD protect;
  set TS0XM002.TSFOBAF protect;
  set TS0XM002.TSFBRIVC protect;
  set TS0XM002.TSFOMISC protect;
  set TS0XM002.TSFINFEE protect;
  set TS0XM002.TSFFRFEE protect;


end // end TS0X211

// Check for ? inquiry by user
Function TS0X212()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0XM002.YBRCD == "?") /* if ? in broker code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "               BROKER CODE"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYBR01(); /* perform broker code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the container  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      TS0XM002.YBRCD = YBRTBL.YBRCD[XX0XWPIX]; /* move code*/
      TS0XM002.YBRSDESC = YBRTBL.YBRSDESC[XX0XWPIX]; /* move name*/
    else
      TS0XM002.YBRCD = " "; /* clear fields*/
      TS0XM002.YBRSDESC = " ";
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0XW01.TS0XWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0X212

// Check attention identifier
Function TS0X220()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

   /* MREDDY CHANGES BEGIN 12/08/01*/
  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
     /* PERFORM TS0X370;*/
    if ((TSCREC.XCTCD == "USA" || 
    TSCREC.XCTCD == "CANA" || 
    TSCREC.XCTCD == "USVI" || 
    TSCREC.XCTCD == "GUAM" || 
    TSCREC.XCTCD == "PUER" || 
    TSCREC.XCTCD == "JAMA" || 
    TSCREC.XCTCD == "BAHA" || 
    TSCREC.XCTCD == "SAIP"))
      converseLib.validationFailed(452); /* no access to USA/Canada shp*/
      TS0XM001.XXXPRCNM = "TS0X220"; /* process name*/
      TS0X211(); /* set all fields on map 2 protect*/
         /* MOVE 'Y' TO TS0XW01.TS0XWPSW;  /* set error switch*/
      exit stack;
    end
  end
   /* MREDDY CHANGES END   12/08/01*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0XM002 initial; /* clear the map*/
    TS0XS78(); /* restore the map fields*/
    TS0XS81(); /* select the map descriptions*/
    TS0XW01.TS0XWPSW = "N"; /* reset error switch*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf12 /* PF12 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* and user has no change ability*/
    TS0XW01.TS0XWPSW = "Y"; /* set error switch*/
    TS0XM002.XXXPRCNM = "TS0X220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf12 /* PF12 was pressed*/
   && TS0XW01.YSSUPDFL == "N")     /* and ship stat says no change*/
    TS0XW01.TS0XWPSW = "Y"; /* set error switch*/
    TS0XM002.XXXPRCNM = "TS0X220"; /* Process name*/
    converseLib.validationFailed(139); /* Indicate no change*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf18  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/
    TS0XM002.XXXPRCNM = "TS0X220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0X220

// Reset highlighted fields
Function TS0X230()
   /* ------------------------------------------------------------*/

              /* RESET HIGHLIGHTED FIELDS*/

   /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0XM002.TSFCHGFL cursor, initialAttributes; /* Reset all map fields*/
  set TS0XM002.TS-ORIG-PMT-IND initialAttributes;
  set TS0XM002.TSFOKG initialAttributes;
  set TS0XM002.TSFDHNDL initialAttributes;
  set TS0XM002.TSFOFRGT initialAttributes;
  set TS0XM002.TSFDINLD initialAttributes;
  set TS0XM002.TSFOHNDL initialAttributes;
  set TS0XM002.TSFDMISC initialAttributes;
  set TS0XM002.TSFOINLD initialAttributes;
  set TS0XM002.TSFOCAF initialAttributes;
  set TS0XM002.YBRCD initialAttributes;
  set TS0XM002.TSFOBAF initialAttributes;
  set TS0XM002.TSFBRIVC initialAttributes;
  set TS0XM002.TSFOMISC initialAttributes;
  set TS0XM002.TSFINFEE initialAttributes;
  set TS0XM002.TSFFRFEE initialAttributes;
  set TS0XM002.TS0XMPFC initialAttributes;


end // end TS0X230

// Verify data entered
Function TS0X240()
   /* ------------------------------------------------------------*/

                  /* VERIFY THE ENTERED DATA*/

   /* This will edit all screen fields entered by the user.*/
   /* All fields are numeric, therefore many edits are very*/
   /* simple and repetitive.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
         /* 1) formal fee*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFFRFEE == TS0XW02.TSFFRFEE) /* formal fee is not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFFRFEE >= 0) /* if the formal fee is entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFFRFEE = TS0XM002.TSFFRFEE; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFFRFEE cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 2) informal fee*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFINFEE == TS0XW02.TSFINFEE) /* informal fee is not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFINFEE >= 0) /* if the informal fee is entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFINFEE = TS0XM002.TSFINFEE; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFINFEE cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 3) miscellaneous fee*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFOMISC == TS0XW02.TSFOMISC) /* if the misc fee is entered*/
     /* continue on*/
  else
    if (TS0XM002.TSFOMISC >= 0) /* if the misc fee is entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFOMISC = TS0XM002.TSFOMISC; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFOMISC cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 4) broker invoice charge*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFBRIVC == TS0XW02.TSFBRIVC) /* broker invoice not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFBRIVC >= 0) /* if broker invoice charge entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFBRIVC = TS0XM002.TSFBRIVC; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFBRIVC cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 5) fuel surcharge*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFOBAF == TS0XW02.TSFOBAF) /* fuel surchg chg not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFOBAF >= 0) /* if fuel surcharge charge is entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFOBAF = TS0XM002.TSFOBAF; /* move charge to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFOBAF cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 6) broker code*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.YBRCD == TS0XW02.YBRCD) /* broker code not changed*/
     /* continue on*/
  else
    if (TS0XM002.YBRCD == " ") /* if broker code type is blank*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.YBRCD = " ";
      TS0XM002.YBRSDESC = " "; /* clear description*/
    else
      if (TS0XM002.YBRCD in YBRTBL.YBRCD) /* Check valid hold*/
      end
      if (sysVar.arrayIndex == 0 /* Not in table*/
       || YBRTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
        converseLib.validationFailed(102); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
        TS0XM002.YBRSDESC = " "; /* Clear description*/
        set TS0XM002.YBRCD cursor, modified, bold; /* highlight field*/
      else /* Move description to table*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
        TS0XM002.YBRSDESC = YBRTBL.YBRSDESC[sysVar.arrayIndex];
        TS0XW02.YBRCD = YBRTBL.YBRCD[sysVar.arrayIndex]; /* save code*/
      end
    end
  end

   /* ------------------------------------------------------------*/
         /* 6) currency factor*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFOCAF == TS0XW02.TSFOCAF) /* currency factor not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFOCAF >= 0) /* if currency factor is entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFOCAF = TS0XM002.TSFOCAF; /* move charge to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFOCAF cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 7) origin inland charge*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFOINLD == TS0XW02.TSFOINLD)
                                   /* origin inland chg not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFOINLD >= 0) /* if the origin inland charge entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFOINLD = TS0XM002.TSFOINLD; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFOINLD cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 8) destination misc charges*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFDMISC == TS0XW02.TSFDMISC) /* dest misc charge not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFDMISC >= 0) /* if the dest misc charge entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFDMISC = TS0XM002.TSFDMISC; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFDMISC cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 9) origin handling charges*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFOHNDL == TS0XW02.TSFOHNDL) /* origin handling not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFOHNDL >= 0) /* if the origin handling entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFOHNDL = TS0XM002.TSFOHNDL; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFOHNDL cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
        /* 10) destination inland charge*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFDINLD == TS0XW02.TSFDINLD)
                                   /* dest inland charge not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFDINLD >= 0) /* if the dest inland charge entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFDINLD = TS0XM002.TSFDINLD; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFDINLD cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
        /* 11) origin freight charge*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFOFRGT == TS0XW02.TSFOFRGT)
                                   /* origin freight chg not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFOFRGT >= 0) /* if the origin freight chg entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFOFRGT = TS0XM002.TSFOFRGT; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFOFRGT cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
        /* 12) destination handling charge*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFDHNDL == TS0XW02.TSFDHNDL)
                                   /* dest handling chg not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFDHNDL >= 0) /* if the dest handling chg entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFDHNDL = TS0XM002.TSFDHNDL; /* move fee to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFDHNDL cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
        /* 13) origin kilogram*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFOKG == TS0XW02.TSFOKG) /* origin kilogr chg not changed*/
     /* continue on*/
  else
    if (TS0XM002.TSFOKG >= 0) /* if the origin kilogr chg entered*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFOKG = TS0XM002.TSFOKG; /* move kg to record*/
    else
      converseLib.validationFailed(76); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TSFOKG cursor, modified, bold; /* highlight field*/
    end
  end

   /* ------------------------------------------------------------*/
        /* 14) collect or prepaid flag*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TS-ORIG-PMT-IND == TS0XW02.TS-ORIG-PMT-IND)
     /* continue on*/
  else
    if (TS0XM002.TS-ORIG-PMT-IND != " " /* if not valid*/
     && TS0XM002.TS-ORIG-PMT-IND != "C" 
     && TS0XM002.TS-ORIG-PMT-IND != "P" 
     && TS0XM002.TS-ORIG-PMT-IND != "S")
      converseLib.validationFailed(103); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
      set TS0XM002.TS-ORIG-PMT-IND cursor, modified, bold;
    else
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TS-ORIG-PMT-IND = TS0XM002.TS-ORIG-PMT-IND;
    end
  end

   /* ------------------------------------------------------------*/
        /* 15) charges entered flag*/
   /* ------------------------------------------------------------*/

  if (TS0XM002.TSFCHGFL == TS0XW02.TSFCHGFL) /* charges entered not changed*/
     /* continue on*/
  else
    TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
    if (TS0XM002.TSFCHGFL != " ") /* if charges entered flag not valid*/
      if (TS0XM002.TSFCHGFL == "Y"
       || TS0XM002.TSFCHGFL == "N")
        TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
        TS0XW02.TSFCHGFL = TS0XM002.TSFCHGFL; /* move flag to record*/
      else
        converseLib.validationFailed(46); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM002.XXXPRCNM = "TS0X240"; /* Process name*/
        set TS0XM002.TSFCHGFL cursor, modified, bold; /* highlight field*/
      end
    else
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW02.TSFCHGFL = "N"; /* default to no*/
    end
  end


end // end TS0X240

// Process valid input request
Function TS0X250()
   /* ------------------------------------------------------------*/

             /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If ENTER is pressed, add the header and transfer to next*/
      /* application (TS0U - Build a container).*/
   /* 2) If PF12 is pressed, set map 2 to maintenance mode.*/
   /* 3) If PF18 is pressed, go to map 3 ( address add map ).*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")     
    TS0X161(); /* add the shipment text*/
    TS0X162(); /* add the shipment address*/
    TS0X163(); /* add the shipment header*/
    if (SQLCA.VAGen_SQLCODE == 0 /* If shipment is found*/
     || TSFREC.YSSCD == "CX")    /* or canceled shipment*/
      TSWREC.TSFBOL = TS0XW02.TSFBOL;
      TSWREC.TSACARCD = TS0XW02.TSACARCD;
      TSWREC.TS5CRAFT = TS0XW02.TS5CRAFT;
      TSWREC.TSFSHPNB = TS0XW02.TSFSHPNB;
      TSWREC.TSEORIG = TS0XW02.TSEORIG;
      TSWREC.TSEDEST = TS0XW02.TSEDEST;
      TSWREC.XWHCD = TS0XW02.XWHCD;
      COMMAREA.CAUSERA = TSWREC.CAUSERA;
      COMMAREA.CATOAP = "TS0J"; /* Set to TS0J menu*/
      XSTSS01(); /* transfer to application*/
      TS0XW01.TS0XWPSW = "Y"; /* if fails, indicate error*/
      TS0XM002.XXXPRCNM = "TS0X250"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf3 /* if pf3 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")   
    TS0XW01.TS0XWMAP = "1A"; /* set to map 1a*/
  end

  if (converseVar.eventKey is pf12 /* if pf3 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")    
    TS0XW01.TS0XWMAP = "2B"; /* set to map 2b*/
  end

  if (converseVar.eventKey is pf18 /* if pf18 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")    
    TS0XW01.TS0XWMAP = "3A"; /* set to map 3a*/
    TS0XW01.TS0XWFSW = "A"; /* set function switch to address*/
  end


end // end TS0X250

// Shipment Address Add Map
Function TS0X300()
   /* ------------------------------------------------------------*/

                 /* SHIPMENT ADDRESS ADD MAP*/

   /* This is the main process used to display the address add*/
   /* map.  Processing always returns to the top of this process*/
   /* and falls through to subordinate processes until an error*/
   /* is found or PF3 is requestes.*/
   /* Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0X310(); /* Format and display the map*/

  TS0X320(); /* Check attention identifier*/

  TS0X330(); /* Reset fields to normal intensity*/

  if (TS0XW01.TS0XWMAP == "3B") /* If maintenance map*/
    TS0X340(); /* Verify the entered data*/
  end

  TS0X350(); /* Process valid input request*/


end // end TS0X300

// Format and display the map
Function TS0X310()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

     /* 1) If no errors indicated.*/
        /* - Move map fields to map and indicate whether the map*/
          /* is inquiry or maintenance.*/
     /* 3) If the user change flag is set to no, then darken the*/
        /* change PFkey.*/
     /* 4) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0XW01.TS0XWPSW == "N") /* No errors*/
    TS0XM003.TSFSHPID = TS0XM001.TSFSHPID; /* move in fields*/
    TS0XM003.XGPCD = TS0XM001.XGPCD;
    TS0XM003.TSACARCD = TS0XM001.TSACARCD;
    TS0XM003.TS5CRAFT = TS0XM001.TS5CRAFT;
    TS0XM003.TSFSHPNB = TS0XM001.TSFSHPNB;
    TS0XM003.TSFBOL = TS0XM001.TSFBOL;
    TS0XM003.TSEORIG = TS0XM001.TSEORIG;
    TS0XM003.TS0XMOCT = TS0XW01.TS0XWOCT;
    if (TS0XW01.TS0XWOST in XSTTBL.XSTCD)
      TS0XM003.TS0XMOST = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
    if (TS0XW01.TS0XWOCO in XCTTBL.XCTCD)
      TS0XM003.TS0XMOCO = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    TS0XM003.TSFDSCHG = TS0XM001.TSFDSCHG;
    TS0XM003.TS0XMICT = TS0XW01.TS0XWICT;
    if (TS0XW01.TS0XWIST in XSTTBL.XSTCD)
      TS0XM003.TS0XMIST = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
    if (TS0XW01.TS0XWICO in XCTTBL.XCTCD)
      TS0XM003.TS0XMICO = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    TS0XM003.TSEDEST = TS0XM001.TSEDEST;
    TS0XM003.TS0XMDCT = TS0XW01.TS0XWDCT;
    if (TS0XW01.TS0XWDST in XSTTBL.XSTCD)
      TS0XM003.TS0XMDST = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
    if (TS0XW01.TS0XWDCO in XCTTBL.XCTCD)
      TS0XM003.TS0XMDCO = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end

    if (TS0XW01.TS0XWMAP == "3A") /* If only inquiry map*/
      TS0XM003.TS0XMHDG = "INQUIRY";
      TS0X311(); /* protect all fields*/
    else
      if (TS0XW01.TS0XWMAP == "3B") /* If maintenance map*/
        TS0XM003.TS0XMHDG = "MAINTENANCE";
      end
    end

  end

  if (COMMAREA.CACHGFL == "N" /* if user has no change ability*/
   || TSFREC.YSSCD == "CX")   /* or canceled shipment*/
    set TS0XM003.TS0XMPFC skip, invisible; /* darken change PFkey*/
  end

  if (COMMAREA.CACLVL[1] == "N") /* if user has charges ability*/
    set TS0XM003.TS0XMP17 skip, invisible; /* get rid of charges key*/
  end

  if (TSWREC.YSSCD == "TN") /* If this is a tentative shipment*/
    set TS0XM003.TSFCARR2 skip, invisible; /* Set certain field protect*/
    set TS0XM003.TSACARNM skip, invisible;
    set TS0XM003.XXX-ADDR1 skip, invisible;
    set TS0XM003.XXX-ADDR2 skip, invisible;
    set TS0XM003.XXX-ADDR3 skip, invisible;
    set TS0XM003.XXXCITY skip, invisible;
    set TS0XM003.XSTCD skip, invisible;
    set TS0XM003.XXXZIP skip, invisible;
    set TS0XM003.XCTCD skip, invisible;
    set TS0XM003.TS0XMFD1 skip, invisible;
    set TS0XM003.TS0XMFD2 skip, invisible;
    set TS0XM003.TS0XMFD3 skip, invisible;
    set TS0XM003.TS0XMFD4 skip, invisible;
    set TS0XM003.TS0XMFD5 skip, invisible;
    set TS0XM003.TS0XMFD6 skip, invisible;
    set TS0XM003.TS0XMFD7 skip, invisible;
    set TS0XM003.TS0XMFD8 skip, invisible;
    set TS0XM003.TS0XMP17 skip, invisible;
    if (TS0XW01.TS0XWPSW == "N") /* No errors*/
      set TS0XM003.TSEDEST cursor;
    end
  end

  /* IF EZEMNO NE 0;                  /* error message to display*/
  /* SET TS0XM003 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  TS0XM003.XXXCURDT = VGVar.currentShortGregorianDate; /* move in date*/

  converse TS0XM003 ;

  TS0XW01.TS0XWPSW = "N"; /* reset error flag*/

  TS0X312(); /* check for ? inquiry by user*/


end // end TS0X310

// Protect all map 3 fields
Function TS0X311()
   /* ------------------------------------------------------------*/

                /* PROTECT MAP 3 FIELDS*/

      /* Set field attributes to protect.*/

   /* ------------------------------------------------------------*/

  set TS0XM003.TSFCARR2 protect; /* protect all map fields*/
  set TS0XM003.TSEDEST protect;
  set TS0XM003.XXX-ADDR1 protect;
  set TS0XM003.XXX-ADDR2 protect;
  set TS0XM003.XXX-ADDR3 protect;
  set TS0XM003.XXXCITY protect;
  set TS0XM003.XSTCD protect;
  set TS0XM003.XXXZIP protect;
  set TS0XM003.XCTCD protect;


end // end TS0X311

// Check for ? inquiry by user
Function TS0X312()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0XM003.XSTCD == "?" /* if any ? entered*/
   || TS0XM003.XCTCD == "?")

    if (TS0XM003.XSTCD == "?") /* if ? in state type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              STATE/PROVINCE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXST01(); /* perform state type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the container  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM003.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
      else
        TS0XM003.XSTCD = " "; /* clear fields*/
      end
    end

    if (TS0XM003.XCTCD == "?") /* if ? in country field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 COUNTRY"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the container  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0XM003.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        TS0XM003.XCTCD = " "; /* clear fields*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0XW01.TS0XWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0X312

// Check attention identifier
Function TS0X320()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

   /* MREDDY CHANGES BEGIN 12/08/01*/
  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
     /* PERFORM TS0X370;*/
    if ((TSCREC.XCTCD == "USA" || 
    TSCREC.XCTCD == "CANA" || 
    TSCREC.XCTCD == "USVI" || 
    TSCREC.XCTCD == "GUAM" || 
    TSCREC.XCTCD == "PUER" || 
    TSCREC.XCTCD == "JAMA" || 
    TSCREC.XCTCD == "BAHA" || 
    TSCREC.XCTCD == "SAIP"))
      converseLib.validationFailed(452); /* no access to USA/Canada shp*/
      TS0XM001.XXXPRCNM = "TS0X320"; /* process name*/
      TS0X311(); /* set all fields on map 3 protect*/
         /* MOVE 'Y' TO TS0XW01.TS0XWPSW;  /* set error switch*/
      exit stack;
    end
  end
   /* MREDDY CHANGES END   12/08/01*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set TS0XM003 initial; /* clear the map*/
    TS0XS84(); /* restore the map fields*/
    TS0XS87(); /* restore the map descriptions*/
    TS0XW01.TS0XWPSW = "N"; /* reset error switch*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PA2 was pressed*/
    TS0XW01.TS0XWPSW = "N";
    TS0XW01.TS0XWMAP = "1A";
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf12 /* Pf12 was pressed*/
   && COMMAREA.CACHGFL == "N")     /* clear the map*/
    TS0XW01.TS0XWPSW = "Y"; /* reset error switch*/
    TS0XM003.XXXPRCNM = "TS0X320"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf12 /* Pf12 was pressed*/
   && TS0XW01.YSSUPDFL == "N")     /* ship stat says no change*/
    TS0XW01.TS0XWPSW = "Y"; /* reset error switch*/
    TS0XM003.XXXPRCNM = "TS0X320"; /* Process name*/
    converseLib.validationFailed(139); /* Indicate no change*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    if (TSWREC.YSSCD == "TN" /* If ship stat is tentative*/
     || COMMAREA.CACLVL[1] == "N") /* or no charges capabilities*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate error*/
      TS0XM003.XXXPRCNM = "TS0X320"; /* Process name*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf12  /* and PF12 was not pressed*/
   && converseVar.eventKey not pf17  /* and PF18 was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/
    TS0XM003.XXXPRCNM = "TS0X320"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0X320

// Reset highlighted fields
Function TS0X330()
   /* ------------------------------------------------------------*/

              /* RESET HIGHLIGHTED FIELDS*/

   /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0XM003.TSFCARR2 cursor, initialAttributes; /* Reset all map fields*/
  set TS0XM003.TSEDEST initialAttributes;
  set TS0XM003.XXX-ADDR1 initialAttributes;
  set TS0XM003.XXX-ADDR2 initialAttributes;
  set TS0XM003.XXX-ADDR3 initialAttributes;
  set TS0XM003.XXXCITY initialAttributes;
  set TS0XM003.XSTCD initialAttributes;
  set TS0XM003.XXXZIP initialAttributes;
  set TS0XM003.XCTCD initialAttributes;
  set TS0XM003.TS0XMPFC initialAttributes;


end // end TS0X330

// Verify the entered data
Function TS0X340()
   /* ------------------------------------------------------------*/

                 /* VERIFY THE ENTERED DATA*/

         /* Edit;*/
           /* 1) save map city and zip code - no editing needed*/
           /* 2) country*/
           /* 3) state*/
           /* 4) address - condense lines 1, 2, 3, and save them*/
           /* 5) destination location*/
           /* 6) secondary carrier code*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) save map city and zip code - no editing needed*/
   /* ------------------------------------------------------------*/

  if (TS0XM003.XXXCITY == TS0XW03.XXXCITY) /* if data not changed*/
     /* continue on*/
  else
    TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
    TS0XW03.XXXCITY = TS0XM003.XXXCITY; /* save city*/
  end

  if (TS0XM003.XXXZIP == TS0XW03.XXXZIP) /* if data not changed*/
     /* continue on*/
  else
    TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
    TS0XW03.XXXZIP = TS0XM003.XXXZIP; /* save zip code*/
  end


   /* ------------------------------------------------------------*/
           /* 2) country*/
   /* ------------------------------------------------------------*/

  if (TS0XM003.XCTCD == TS0XW03.XCTCD) /* If country not changed*/
     /* continue on*/
  else
    if (TS0XM003.XCTCD != " ") /* If country entered*/
      if (TS0XM003.XCTCD in XCTTBL.XCTCD) /* Check valid country*/
      end
      if (sysVar.arrayIndex == 0 /* Not in table*/
       || XCTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
        converseLib.validationFailed(29); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM003.XXXPRCNM = "TS0X340"; /* Process name*/
        set TS0XM003.XCTCD cursor, modified, bold; /* highlight field*/
      else
        TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
        TS0XW03.XCTCD = TS0XM003.XCTCD; /* save the code*/
      end
    else
      TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
      TS0XW03.XCTCD = " "; /* default code*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 3) state*/
   /* ------------------------------------------------------------*/

  if (TS0XM003.XCTCD == "USA") /* If country is USA*/
    if (TS0XM003.XSTCD in XSTTBL.XSTCD) /* Check valid state*/
    end
    if (sysVar.arrayIndex == 0                   /* Not in table*/
     || XSTTBL.XXXSTAT[sysVar.arrayIndex] == "I" /* or inactive*/
     || TS0XM003.XSTCD == " ")                   /* or state missing*/
      converseLib.validationFailed(30); /* Display error message*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
      TS0XM003.XXXPRCNM = "TS0X340"; /* Process name*/
      set TS0XM003.XSTCD cursor, modified, bold; /* highlight field*/
    else
      if (TS0XM003.XSTCD == TS0XW03.XSTCD) /* if code not changed*/
         /* continue*/
      else
        TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
        TS0XW03.XSTCD = TS0XM003.XSTCD; /* save the code*/
      end
    end
  else
    if (TS0XM003.XSTCD == TS0XW03.XSTCD) /* if code not changed*/
       /* continue*/
    else
      TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
      TS0XW03.XSTCD = TS0XM003.XSTCD; /* save the code*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 4) address - condense lines 1, 2, 3, and save them*/
   /* ------------------------------------------------------------*/

  if (TS0XM003.XXX-ADDR1 == " " /* if first address line is blank*/
   && TS0XM003.XXX-ADDR2 != " ") /* and 2ND address line is not blank*/
    TS0XM003.XXX-ADDR1 = TS0XM003.XXX-ADDR2; /* move line to 1st*/
    TS0XM003.XXX-ADDR2 = " "; /* blank second address*/
  else
    if (TS0XM003.XXX-ADDR1 == " " /* if 1st address line is blank*/
     && TS0XM003.XXX-ADDR3 != " ") /* and 3rd address line is not blank*/
      TS0XM003.XXX-ADDR1 = TS0XM003.XXX-ADDR3; /* move line to 1st*/
      TS0XM003.XXX-ADDR3 = " "; /* blank third address*/
    end
  end

  if (TS0XM003.XXX-ADDR2 == " " /* if second address line is blank*/
   && TS0XM003.XXX-ADDR3 != " ") /* and third address line is not blank*/
    TS0XM003.XXX-ADDR2 = TS0XM003.XXX-ADDR3; /* move line to 1st*/
    TS0XM003.XXX-ADDR3 = " "; /* blank second address*/
  end

  if (TS0XM003.XXX-ADDR1 == TS0XW03.XXX-ADDR1) /* if data not changed*/
     /* continue on*/
  else
    TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
    TS0XW03.XXX-ADDR1 = TS0XM003.XXX-ADDR1; /* save addresses*/
  end

  if (TS0XM003.XXX-ADDR2 == TS0XW03.XXX-ADDR2) /* if data not changed*/
     /* continue on*/
  else
    TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
    TS0XW03.XXX-ADDR2 = TS0XM003.XXX-ADDR2;
  end

  if (TS0XM003.XXX-ADDR3 == TS0XW03.XXX-ADDR3) /* if data not changed*/
     /* continue on*/
  else
    TS0XW01.TS0XWADF = "Y"; /* address updated flag*/
    TS0XW03.XXX-ADDR3 = TS0XM003.XXX-ADDR3;
  end

   /* ------------------------------------------------------------*/
           /* 5) destination location*/
   /* ------------------------------------------------------------*/

  TS0X341();

   /* ------------------------------------------------------------*/
           /* 6) secondary carrier code*/
   /* ------------------------------------------------------------*/

  if (TS0XM003.TSFCARR2 == TS0XW02.TSFCARR2) /* carrier not changed*/
     /* continue on*/
  else
    if (TS0XM003.TSFCARR2 == " ") /* If carrier code is missing*/
      TS0XM003.TSACARNM = " "; /* clear carrier name*/
      TS0XW02.TSFCARR2 = " "; /* default*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment header updated flag*/
    else
      TSAREC.TSACARCD = TS0XM003.TSFCARR2; /* move in key*/
      TS0XS0O(); /* select carrier*/
      if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
       && TSAREC.XXXSTAT == "A")   /* in active status*/
        TS0XM003.TSACARNM = TSAREC.TSACARSN; /* move in carrier name*/
        TS0XW02.TSFCARR2 = TSAREC.TSACARCD; /* save the code*/
        TS0XW01.TS0XWSHF = "Y"; /* shipment header updated flag*/
      else
        if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
         && TSAREC.XXXSTAT == "I")   /* in inactive status*/
          converseLib.validationFailed(72); /* error message*/
          TS0XM001.XXXPRCNM = "TS0X340"; /* Process name*/
          TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
          set TS0XM003.TSFCARR2 cursor, modified, bold; /* highlight field*/
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
            converseLib.validationFailed(39); /* error message*/
            TS0XM001.XXXPRCNM = "TS0X340"; /* Process name*/
            TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
            set TS0XM003.TSFCARR2 cursor, modified, bold;
                                   /* highlight field*/
          end
        end
      end
    end
  end


end // end TS0X340

// Validate destination code
Function TS0X341()
   /* ------------------------------------------------------------*/
           /* 1) destination location validation*/
   /* ------------------------------------------------------------*/

  if (TS0XM003.TSEDEST == TS0XW02.TSEDEST) /* if dest not changed*/

    if (TS0XW02.XWHCD != "  ") /* If warehouse exists*/
      if (TS0XW02.XWHCD in XWHTBL.XWHCD)
        if (TS0XM003.TSEDEST != XWHTBL.TSCLOCCD[sysVar.arrayIndex])
          converseLib.validationFailed(274);
          TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
          TS0XM001.XXXPRCNM = "TS0X341"; /* Process name*/
          set TS0XM003.TSEDEST cursor, modified, bold; /* highlight field*/
        end
      end
    end
  else
    if (TS0XM003.TSEDEST == " ") /* if destin not entered*/
      if (TS0XW02.XWHCD == " ") /* if warehouse also not entered*/
        TS0XW02.TSEDEST = " "; /* default*/
        converseLib.validationFailed(40); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XW01.TS0XWSHF = "Y"; /* address updated flag*/
        TS0XM003.XXXPRCNM = "TS0X341"; /* Process name*/
        TS0XM003.TS0XMDCT = " "; /* clear descriptions*/
        TS0XM003.TS0XMDST = " ";
        TS0XM003.TS0XMDCO = " ";
        set TS0XM003.TSEDEST cursor, modified, bold; /* highlight field*/
      else
        converseLib.validationFailed(274); /* Display error message*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
        TS0XM003.XXXPRCNM = "TS0X341"; /* Process name*/
        TS0XM003.TS0XMDCT = " "; /* clear descriptions*/
        TS0XM003.TS0XMDST = " ";
        TS0XM003.TS0XMDCO = " ";
        set TS0XM003.TSEDEST cursor, modified, bold; /* highlight field*/
        return;
      end
    else
      if (TS0XW02.XWHCD != "  ") /* If warehouse exists*/
        if (TS0XW02.XWHCD in XWHTBL.XWHCD)
          if (TS0XM003.TSEDEST != XWHTBL.TSCLOCCD[sysVar.arrayIndex])
            converseLib.validationFailed(274);
            TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
            TS0XM001.XXXPRCNM = "TS0X341"; /* Process name*/
            set TS0XM003.TSEDEST cursor, modified, bold; /* highlight field*/
          else
            TS0X342(); /* Validate the loc cd,set update flag*/
          end
        end
      else
        TS0X342(); /* Validate the loc cd,set update flag*/


   /* SET TSCREC EMPTY;*/
   /* MOVE TS0XM003.TSEDEST TO TSCREC.TSCLOCCD; /* move in code*/
   /* TS0XS0L;                      /* select location*/
   /* IF SQLCA.SQLCODE EQ 100       /* location is invalid*/
   /* OR TSCREC.XXXSTAT EQ 'I';*/
   /* MOVE 40 TO EZEMNO;          /* Display error message*/
   /* MOVE 'Y' TO TS0XW01.TS0XWPSW;      /* Indicate problem*/
   /* MOVE 'TS0X341' TO TS0XM003.XXXPRCNM; /* Process name*/
   /* MOVE ' ' TO TS0XM003.TSEDEST;      /* Clear description*/
   /* MOVE ' ' TO TS0XM003.TS0XMDCT;*/
   /* MOVE ' ' TO TS0XM003.TS0XMDST;*/
   /* MOVE ' ' TO TS0XM003.TS0XMDCO;*/
   /* SET TS0XM003.TSEDEST CURSOR,MODIFIED,BRIGHT; /* highlight field*/
   /* ELSE;*/
   /* IF SQLCA.SQLCODE EQ 0;      /* location is valid*/
   /* MOVE 'Y' TO TS0XW01.TS0XWSHF;    /* shipment updated flag*/
   /* MOVE TSCREC.XXXCITY TO TS0XW01.TS0XWDCT;*/
   /* MOVE TSCREC.XXXCITY TO TS0XM003.TS0XMDCT;*/
   /* MOVE TSCREC.XXXCITY TO TS0XM001.TS0XMDED;*/
   /* MOVE TSCREC.XSTCD TO TS0XW01.TS0XWDST;*/
   /* MOVE TSCREC.XSTCD TO TS0XM003.TS0XMDST;*/
   /* MOVE TSCREC.XCTCD TO TS0XW01.TS0XWDCO;*/
   /* MOVE TSCREC.XCTCD TO TS0XM003.TS0XMDCO;*/
   /* MOVE TS0XW02.TSEDEST TO TS0XW02.TSFODEST; /* save original dest*/
   /* MOVE TS0XW02.TSEDEST TO TS0XM003.TSFODEST;*/
   /* XX0XS01;                  /* get the date*/
   /* MOVE XX0XW01.XX0XWDAT TO TS0XW02.TSFDIVDT; /* divert date*/
   /* ;*/
   /* MOVE XX0XW01.XX0XWDAT TO TS0XW01.TS0XWCDT;*/
   /* /* move date work field*/
   /* TS0XS0F;*/
   /* /* move month,day,year to map date field*/
   /* MOVE TS0XW01.TS0XWCMD TO TS0XM003.TSFDIVDT; /* move to map*/
   /* ;*/
   /* MOVE 'Y' TO TS0XW02.TSFDIVRT;    /* indicate diverted*/
   /* MOVE TSCREC.TSCLOCCD TO TS0XW02.TSEDEST; /* save code*/
   /* MOVE TS0XW02.TSEDEST TO TS0XM001.TSEDEST; /* move to maps*/
   /* MOVE TS0XW02.TSEDEST TO TS0XM002.TSEDEST;*/
   /* END;*/
   /* END;*/
      end
    end
  end

end // end TS0X341

// Validate destination code
Function TS0X342()
   /* ------------------------------------------------------------*/
           /* 1) destination location validation*/
   /* ------------------------------------------------------------*/

  set TSCREC empty;
  TSCREC.TSCLOCCD = TS0XM003.TSEDEST; /* move in code*/
  TS0XS0L(); /* select location*/
  if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
   || TSCREC.XXXSTAT == "I")    
    converseLib.validationFailed(40); /* Display error message*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
    TS0XM003.XXXPRCNM = "TS0X342"; /* Process name*/
    TS0XM003.TSEDEST = " "; /* Clear description*/
    TS0XM003.TS0XMDCT = " ";
    TS0XM003.TS0XMDST = " ";
    TS0XM003.TS0XMDCO = " ";
    set TS0XM003.TSEDEST cursor, modified, bold; /* highlight field*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
      TS0XW01.TS0XWSHF = "Y"; /* shipment updated flag*/
      TS0XW01.TS0XWDCT = TSCREC.XXXCITY;
      TS0XM003.TS0XMDCT = TSCREC.XXXCITY;
      TS0XM001.TS0XMDED = TSCREC.XXXCITY;
      TS0XW01.TS0XWDST = TSCREC.XSTCD;
      TS0XM003.TS0XMDST = TSCREC.XSTCD;
      TS0XW01.TS0XWDCO = TSCREC.XCTCD;
      TS0XM003.TS0XMDCO = TSCREC.XCTCD;
      TS0XW02.TSFODEST = TS0XW02.TSEDEST; /* save original dest*/
      TS0XM003.TSFODEST = TS0XW02.TSEDEST;
      XX0XS01(); /* get the date*/
      TS0XW02.TSFDIVDT = XX0XW01.XX0XWDAT; /* divert date*/

      TS0XW01.TS0XWCDT = XX0XW01.XX0XWDAT;
                               /* move date work field*/
      TS0XS0F();
                             /* move month,day,year to map date field*/
      TS0XM003.TSFDIVDT = TS0XW01.TS0XWCMD; /* move to map*/

      TS0XW02.TSFDIVRT = "Y"; /* indicate diverted*/
      TS0XW02.TSEDEST = TSCREC.TSCLOCCD; /* save code*/
      TS0XM001.TSEDEST = TS0XW02.TSEDEST; /* move to maps*/
      TS0XM002.TSEDEST = TS0XW02.TSEDEST;
    end
  end

end // end TS0X342

// Process valid input request
Function TS0X350()
   /* ------------------------------------------------------------*/

             /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If ENTER is pressed, add the header and transfer to next*/
      /* application (TS0U - Build a container).*/
   /* 2) If PF12 is pressed, set map 3 to maintenance mode.*/
   /* 2) If PF17 is pressed, go to map 2 ( charges add map ).*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")     
    TS0X161(); /* add the shipment text*/
    TS0X162(); /* add the shipment address*/
    TS0X163(); /* add the shipment header*/
    if (SQLCA.VAGen_SQLCODE == 0 /* If shipment is found*/
     || TSFREC.YSSCD == "CX")    /* or canceled shipment*/
      TSWREC.TSFBOL = TS0XW02.TSFBOL;
      TSWREC.TSACARCD = TS0XW02.TSACARCD;
      TSWREC.TS5CRAFT = TS0XW02.TS5CRAFT;
      TSWREC.TSFSHPNB = TS0XW02.TSFSHPNB;
      TSWREC.TSEORIG = TS0XW02.TSEORIG;
      TSWREC.TSEDEST = TS0XW02.TSEDEST;
      TSWREC.XWHCD = TS0XW02.XWHCD;
      COMMAREA.CAUSERA = TSWREC.CAUSERA;
      COMMAREA.CATOAP = "TS0J"; /* Set to TS0J menu*/
      XSTSS01(); /* transfer to application*/
      TS0XW01.TS0XWPSW = "Y"; /* if fails, indicate error*/
      TS0XM003.XXXPRCNM = "TS0X350"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf3 /* if pf3 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")   
    TS0XW01.TS0XWMAP = "1A"; /* set to map 1a*/
  end

  if (converseVar.eventKey is pf12 /* if pf3 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")    
    TS0XW01.TS0XWMAP = "3B"; /* set to map 3b*/
  end

  if (converseVar.eventKey is pf17 /* if pf17 was pressed and no errors*/
   && TS0XW01.TS0XWPSW == "N")    
    TS0XW01.TS0XWMAP = "2A"; /* set to map 2a*/
    TS0XW01.TS0XWFSW = "C"; /* set function switch to charges*/
  end


end // end TS0X350

// Format/submit a background job
Function TS0X370()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTSLOC01*/

   /* 1) This module select a table row from the location table.*/
   /* 2) It will return a system error if an unexpected return*/
      /* code is received.*/
   /* ------------------------------------------------------------*/
  set TSCREC empty;
  TSCREC.TSCLOCCD = TSFREC.TSEDEST;
  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0X370"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM001.XXXPRCNM = "TS0X370"; /* Process name*/
  end

end // end TS0X370

// Close set DTRANS.VCPLHD01
Function TS0XS-154C()
   /* ------------------------------------------------------------*/

            /* CLOSE THE SELECTED SET OF CARTONS*/

   /* Close the selected set of table rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "X-154C "; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM001.XXXPRCNM = "X-154C "; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0XS-154C

// Fetch row DTRANS.VCPLHD01
Function TS0XS-154F()
   /* ------------------------------------------------------------*/

            /* FETCH THE CONTAINER PACKING LIST ROW*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0XW01.TS0XWEFL = "Y"; /* End the loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      TS0XW01.TS0XWEFL = "Y"; /* End the loop*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "X-154F "; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XM001.XXXPRCNM = "X-154F "; /* Process name*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

    end
  end


end // end TS0XS-154F

// Select set DTRANS.VCPLHD01
Function TS0XS-154S()
   /* ------------------------------------------------------------*/

            /* SELECT SET OF CONTAINER PACKING LIST ROWS*/

       /* Select the set of table rows.*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TS0XM001.TSFSHPID; /* move in id*/

  TSGREC.TSNFNC = "S1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS57"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "X-154S  "; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM001.XXXPRCNM = "X-154S "; /* Process name*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0XS-154S

// Check for upd of cntnrs, p/l's
Function TS0XS-43()
   /* ------------------------------------------------------------*/

         /* CHECK FOR GPC UPDATE OF  P/L'S*/

     /* If the GPC was changed then update*/
        /* p/ls to 'ER' status if not already 'ER' and update the*/
        /* p/ls' GPC.*/

   /* ------------------------------------------------------------*/


   /* ------------------*/
   /* Process containers*/
   /* ------------------*/

   /* tcs CHANGES BEGIN*/
  /* TS0XS45;                        /* Select the set of containers*/
  /* IF SQLCA.SQLCODE EQ 0;          /* If select ok*/
  /* ;*/
  /* MOVE 'N' TO TS0XW01.TS0XWEFL;        /* Set end flag*/
  /* WHILE TS0XW01.TS0XWEFL EQ 'N';       /* Until end flag set*/
  /* TS0XS48;                    /* Fetch container row*/
  /* IF TS0XW01.TS0XWEFL EQ 'N';        /* If not end*/
  /* TS0XS-52;                 /* Update the container row*/
  /* END;*/
  /* END;*/
  /* ;*/
  /* TS0XS54;                      /* Close the set of containers*/
  /* ;*/
  /* END;*/
   /* tcs CHANGES END*/

   /* -------------*/
   /* Process p/l's*/
   /* -------------*/

  TS0XS57(); /* Select the set of packing lists*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If select ok*/

    TS0XW01.TS0XWEFL = "N"; /* Set end flag*/
    while (TS0XW01.TS0XWEFL == "N") /* Until end flag set*/
      TS0XS60(); /* Fetch packing list row*/
      if (TS0XW01.TS0XWEFL == "N") /* If not end*/
        TS0XS-64(); /* Update the packing list row*/
      end
    end

    TS0XS66(); /* Close the set of packing lists*/

  end



end // end TS0XS-43

// Update row DTRANS.VCPLHD01
Function TS0XS-64()
   /* ------------------------------------------------------------*/

                   /* UPDATE CPL HEADER ROW*/

   /* Update the CPL header row GPC and set the status to 'ER'*/
   /* if not already in 'ER' status.*/

   /* ------------------------------------------------------------*/

  TSIREC.XGPCD = TS0XW01.XGPCD; /* Move in new GPC*/

  if (TSIREC.TSISTAT != "ER") /* If container not in error*/
    TSIREC.TSISTAT = "ER"; /* Set to error*/
  end

  XX0XS01(); /* get current date and time*/

  TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  TSGREC.TSNFNC = "U ";
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    converseLib.validationFailed(09); /* Indicate not available*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0XS-64"; /* Process name*/
      TA1REC.TA1LOC = "UPDATE THE SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XM001.XXXPRCNM = "TS0XS-64"; /* Process name*/

    end
  end


end // end TS0XS-64

// Verify dates entered
Function TS0XS06()
   /* ------------------------------------------------------------*/
                /* VERIFY THE DATES ENTERED*/

   /* Validate the dates entered on the screen.*/

   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGA = TS0XW01.TS0XWDTE; /* move date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/


end // end TS0XS06

// Select from DTRANS.VCRAFT01
Function TS0XS09()
   /* ------------------------------------------------------------*/
                 /* SELECT CRAFT TABLE ROW*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS09"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XW01.TS0XWPSW = "Y"; /* Indicate Problem*/
    TS0XM001.XXXPRCNM = "TS0XS09"; /* Process name*/
  end


end // end TS0XS09

// Move tsfrec fields to maps
Function TS0XS0C()
   /* ------------------------------------------------------------*/

               /* MOVE ALL TSFREC FIELDS TO MAPS*/

   /* ------------------------------------------------------------*/

   /* *****************************************/
          /* map 1 fields*/
   /* *****************************************/

  TS0XM001.TSFSHPID = TSFREC.TSFSHPID; /* move in all fields*/
  TS0XM001.XGPCD = TSFREC.XGPCD;
  TS0XW01.XGPCD = TSFREC.XGPCD;
  TS0XM001.TSFBOL = TSFREC.TSFBOL;
  TS0XM001.TSACARCD = TSFREC.TSACARCD;
  TS0XM001.TS5CRAFT = TSFREC.TS5CRAFT;
  TS0XM001.TSFSHPNB = TSFREC.TSFSHPNB;
  TS0XM001.TSFRWRDR = TSFREC.TSFRWRDR;
  TS0XM001.TSEORIG = TSFREC.TSEORIG;
  TS0XM001.TSEDEST = TSFREC.TSEDEST;
  TS0XM001.TS-ADVN-SHP-IND = TSFREC.TS-ADVN-SHP-IND;
  TS0XM001.TSFDSCHG = TSFREC.TSFDSCHG;
  TS0XW01.TS0X-DIS-LOC-CD = TSFREC.TSFDSCHG;
  TS0XM001.TSFDWBK = TSFREC.TSFDWBK;
  TS0XM001.XWHCD = TSFREC.XWHCD;
  TS0XM001.XNDCD = TSFREC.XNDCD;
  TS0XM001.YSTCD = TSFREC.YSTCD;
  TS0XM001.YDTCD = TSFREC.YDTCD;
  TS0XM001.YPYCD = TSFREC.YPYCD;
  TS0XM001.YSSCD = TSFREC.YSSCD;
  TS0XW01.YSSCD = TSFREC.YSSCD;
  TS0XM001.YSHCD = TSFREC.YSHCD;
  TS0XM001.TS-TOT-COLL-SCHG = TSFREC.TS-TOT-COLL-SCHG;
  TS0XM001.TS-TOT-PPD-SCHG = TSFREC.TS-TOT-PPD-SCHG;
  TS0XM001.TSFTKG = TSFREC.TSFTKG;
  TS0XM001.TSFTCBM = TSFREC.TSFTCBM;
  TS0XM001.TSFNILRF = TSFREC.TSFNILRF;
  TS0XM001.XXX-USER-ID = TSFREC.XXX-USER-ID;
  TS0XM001.YBRCD = TSFREC.YBRCD;

   /* ----------------------------------------*/
    /* All dates require tranformation*/
    /* from ccyymmdd to mmddyy format.*/
   /* ----------------------------------------*/

  if (TSFREC.TSFDPRTA > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFDPRTA; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDPRTA = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFDPRTE > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFDPRTE; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDPRTE = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFDSCHA > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFDSCHA; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDSCHA = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFDSCHE > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFDSCHE; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDSCHE = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFDESTA > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFDESTA; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDESTA = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFDESTE > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFDESTE; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDESTE = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFRECPT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFRECPT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFRECPT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFBOLDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFBOLDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFBOLDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFNTRDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFNTRDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFNTRDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFCCLDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFCCLDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFCCLDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TSFRELDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFRELDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFRELDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TSFREC.TS-FCTY-DOC-RDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TS-FCTY-DOC-RDT; /**/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TS-FCTY-DOC-RDT = TS0XW01.TS0XWCMD;
  end

  if (TSFREC.TS-DLVR-CNFM-RDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TS-DLVR-CNFM-RDT; /**/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TS-DLVR-CNFM-RDT = TS0XW01.TS0XWCMD; /**/
  end


   /* *****************************************/
          /* map 2 fields*/
   /* *****************************************/

  TS0XM002.TSFCHGFL = TSFREC.TSFCHGFL; /* move in all fields*/
  TS0XM002.TS-ORIG-PMT-IND = TSFREC.TS-ORIG-PMT-IND;
  TS0XM002.TSFOKG = TSFREC.TSFOKG;
  TS0XM002.TSFOFRGT = TSFREC.TSFOFRGT;
  TS0XM002.TSFOHNDL = TSFREC.TSFOHNDL;
  TS0XM002.TSFOINLD = TSFREC.TSFOINLD;
  TS0XM002.TSFOCAF = TSFREC.TSFOCAF;
  TS0XM002.TSFOBAF = TSFREC.TSFOBAF;
  TS0XM002.TSFOMISC = TSFREC.TSFOMISC;
  TS0XM002.TSFDHNDL = TSFREC.TSFDHNDL;
  TS0XM002.TSFDINLD = TSFREC.TSFDINLD;
  TS0XM002.TSFDMISC = TSFREC.TSFDMISC;
  TS0XM002.YBRCD = TSFREC.YBRCD;
  TS0XM002.TSFBRIVC = TSFREC.TSFBRIVC;
  TS0XM002.TSFINFEE = TSFREC.TSFINFEE;
  TS0XM002.TSFFRFEE = TSFREC.TSFFRFEE;

   /* *****************************************/
          /* map 3 fields*/
   /* *****************************************/

  TS0XM003.TSFCARR2 = TSFREC.TSFCARR2; /* move in all fields*/
  TS0XM003.TSFODEST = TSFREC.TSFODEST;

  if (TSFREC.TSFDIVDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TSFREC.TSFDIVDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM003.TSFDIVDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end


end // end TS0XS0C

// Move mm,dd,yy to map date
Function TS0XS0F()
   /* ------------------------------------------------------------*/

           /* MOVE MONTH, DAY, AND YEAR TO MAP DATE FIELDS*/

   /* ------------------------------------------------------------*/

  TS0XW01.TS0XWMMM = TS0XW01.TS0XWMM; /* move month*/
  TS0XW01.TS0XWMDD = TS0XW01.TS0XWDD; /* move day*/
  TS0XW01.TS0XWMYY = TS0XW01.TS0XWYY; /* move year*/


end // end TS0XS0F

// Select tsfrec map descriptions
Function TS0XS0I()
   /* ------------------------------------------------------------*/

              /* SELECT TSFREC MAP DESCRIPTIONS*/

      /* 1) This statement group will select all the*/
         /* descriptions required for the maps which are*/
         /* associated with TSFREC fields.*/

   /* ------------------------------------------------------------*/

   /* *****************  MAP 1 DESCRIPTIONS  ******************/

   /* ------------------------------------------------------------*/
    /* *** Select the origin description ****/
   /* ------------------------------------------------------------*/
  if (TSFREC.TSEORIG == " ") /* If origin code is missing*/
     /* continue on*/
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TSFREC.TSEORIG; /* move in code*/
    TS0XS0L(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100) /* location is invalid*/
       /* continue on*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        TS0XM001.TS0XMORD = TSCREC.XXXCITY;
        TS0XW01.TS0XWOCT = TSCREC.XXXCITY;
        TS0XW01.TS0XWOST = TSCREC.XSTCD;
        TS0XW01.TS0XWOCO = TSCREC.XCTCD;
      end
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the discharge description ****/
   /* ------------------------------------------------------------*/
  if (TSFREC.TSFDSCHG == " ") /* If discharge code is missing*/
     /* continue on*/
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TSFREC.TSFDSCHG; /* move in code*/
    TS0XS0L(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100) /* location is invalid*/
       /* continue on*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        TS0XM001.TS0XMDID = TSCREC.XXXCITY;
        TS0XW01.TS0XWICT = TSCREC.XXXCITY;
        TS0XW01.TS0XWIST = TSCREC.XSTCD;
        TS0XW01.TS0XWICO = TSCREC.XCTCD;
      end
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the destination description ****/
   /* ------------------------------------------------------------*/
  if (TSFREC.TSEDEST == " ") /* If destination code is missing*/
     /* continue on*/
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TSFREC.TSEDEST; /* move in code*/
    TS0XS0L(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100) /* location is invalid*/
       /* continue on*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        TS0XM001.TS0XMDED = TSCREC.XXXCITY;
        TS0XW01.TS0XWDCT = TSCREC.XXXCITY;
        TS0XW01.TS0XWDST = TSCREC.XSTCD;
        TS0XW01.TS0XWDCO = TSCREC.XCTCD;
      end
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the shipment status description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.YSSCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSFREC.YSSCD in YSSTBL.YSSCD)
      TS0XM001.YSSSDESC = YSSTBL.YSSSDESC[sysVar.arrayIndex];
    end
    if (TSFREC.YSSCD in YSSTBL.YSSCD)
      TS0XW01.YSSUPDFL = YSSTBL.YSSUPDFL[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the warehouse description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.XWHCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSFREC.XWHCD in XWHTBL.XWHCD)
      TS0XM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the Nike department description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.XNDCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSFREC.XNDCD in XNDTBL.XNDCD)
      TS0XM001.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the shipment type description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.YSTCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSFREC.YSTCD in YSTTBL.YSTCD)
      TS0XM001.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the delivery type description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.YDTCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSFREC.YDTCD in YDTTBL.YDTCD)
      TS0XM001.YDTSDESC = YDTTBL.YDTSDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the payment type description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.YPYCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSFREC.YPYCD in YPYTBL.YPYCD)
      TS0XM001.YPYSDESC = YPYTBL.YPYSDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the hold code description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.YSHCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSFREC.YSHCD in YSHTBL.YSHCD)
      TS0XM001.YSHSDESC = YSHTBL.YSHSDESC[sysVar.arrayIndex];
    end
  end


   /* *****************  MAP 2 DESCRIPTIONS  ******************/

   /* ------------------------------------------------------------*/
    /* *** Select the broker code description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.YBRCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TSFREC.YBRCD in YBRTBL.YBRCD)
      TS0XM002.YBRSDESC = YBRTBL.YBRSDESC[sysVar.arrayIndex];
    end
  end


   /* *****************  MAP 3 DESCRIPTIONS  ******************/

   /* ------------------------------------------------------------*/
    /* *** Select secondary carrier description ****/
   /* ------------------------------------------------------------*/

  if (TSFREC.TSFCARR2 == " ") /* If carrier code is missing*/
     /* continue on*/
  else
    TSAREC.TSACARCD = TSFREC.TSFCARR2; /* move in key*/
    TS0XS0O(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TS0XM003.TSACARNM = TSAREC.TSACARSN; /* move in carrier name*/
    end
  end


end // end TS0XS0I

// Select from DTRANS.VTSLOC01
Function TS0XS0L()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTSLOC01*/

   /* 1) This module select a table row from the location table.*/
   /* 2) It will return a system error if an unexpected return*/
      /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS0L"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM001.XXXPRCNM = "TS0XS0L"; /* Process name*/
  end


end // end TS0XS0L

// Select from DTRANS.VTSCAR01
Function TS0XS0O()
   /* ------------------------------------------------------------*/

                 /* SELECT CARRIER TABLE ROW*/

   /* 1) Select the table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS0O"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XW01.TS0XWPSW = "Y"; /* Indicate Problem*/
    TS0XM001.XXXPRCNM = "TS0XS0O"; /* Process name*/
  end


end // end TS0XS0O

// Move tssrec fields to maps
Function TS0XS0R()
   /* ------------------------------------------------------------*/

               /* MOVE ALL TSSREC FIELDS TO MAPS*/

   /* ------------------------------------------------------------*/

   /* *****************************************/
          /* map 3 fields*/
   /* *****************************************/

  TS0XM003.XXX-ADDR1 = TSSREC.XXX-ADDR1; /* move in all fields*/
  TS0XM003.XXX-ADDR2 = TSSREC.XXX-ADDR2;
  TS0XM003.XXX-ADDR3 = TSSREC.XXX-ADDR3;
  TS0XM003.XXXCITY = TSSREC.XXXCITY;
  TS0XM003.XSTCD = TSSREC.XSTCD;
  TS0XM003.XXXZIP = TSSREC.XXXZIP;
  TS0XM003.XCTCD = TSSREC.XCTCD;


end // end TS0XS0R

// Restore map 1 fields
Function TS0XS0U()
   /* ------------------------------------------------------------*/

               /* RESTORE THE MAP 1 FIELDS*/

   /* ------------------------------------------------------------*/

  TS0XM001.TSFSHPID = TS0XW02.TSFSHPID; /* move in all fields*/
  TS0XM001.TSFBOL = TS0XW02.TSFBOL;
  TS0XM001.TSACARCD = TS0XW02.TSACARCD;
  TS0XM001.TS5CRAFT = TS0XW02.TS5CRAFT;
  TS0XM001.TSFSHPNB = TS0XW02.TSFSHPNB;
  TS0XM001.TSFRWRDR = TS0XW02.TSFRWRDR;
  TS0XM001.TSEORIG = TS0XW02.TSEORIG;
  TS0XM001.TSEDEST = TS0XW02.TSEDEST;
  TS0XM001.TSFDSCHG = TS0XW02.TSFDSCHG;
  TS0XM001.TSFDWBK = TS0XW02.TSFDWBK;
  TS0XM001.XWHCD = TS0XW02.XWHCD;
  TS0XM001.XNDCD = TS0XW02.XNDCD;
  TS0XM001.YSTCD = TS0XW02.YSTCD;
  TS0XM001.YDTCD = TS0XW02.YDTCD;
  TS0XM001.YPYCD = TS0XW02.YPYCD;
  TS0XM001.YSSCD = TS0XW02.YSSCD;
  TS0XM001.YSHCD = TS0XW02.YSHCD;
  TS0XM001.TS-TOT-COLL-SCHG = TS0XW02.TS-TOT-COLL-SCHG;
  TS0XM001.TS-TOT-PPD-SCHG = TS0XW02.TS-TOT-PPD-SCHG;
  TS0XM001.TSFTKG = TS0XW02.TSFTKG;
  TS0XM001.TSFTCBM = TS0XW02.TSFTCBM;
  TS0XM001.TSFNILRF = TS0XW02.TSFNILRF;
  TS0XM001.YBRCD = TS0XW02.YBRCD;
  TS0XM001.TSFCMNT1 = TS0XW01.TSRTEXT[1];
  TS0XM001.TSFCMNT2 = TS0XW01.TSRTEXT[2];

   /* ----------------------------------------*/
    /* All dates require tranformation*/
    /* from ccyymmdd to mmddyy format.*/
   /* ----------------------------------------*/

  if (TS0XW02.TSFDPRTA > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFDPRTA; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDPRTA = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFDPRTE > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFDPRTE; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDPRTE = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFDSCHA > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFDSCHA; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDSCHA = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFDSCHE > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFDSCHE; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDSCHE = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFDESTA > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFDESTA; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDESTA = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFDESTE > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFDESTE; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFDESTE = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFRECPT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFRECPT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFRECPT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFBOLDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFBOLDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFBOLDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFNTRDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFNTRDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFNTRDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFCCLDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFCCLDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFCCLDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TSFRELDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFRELDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TSFRELDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end

  if (TS0XW02.TS-FCTY-DOC-RDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TS-FCTY-DOC-RDT; /**/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TS-FCTY-DOC-RDT = TS0XW01.TS0XWCMD; /**/
  end

  if (TS0XW02.TS-DLVR-CNFM-RDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TS-DLVR-CNFM-RDT; /**/
    TS0XS0F(); /* move month, day and year to map date*/
                                   /* field*/
    TS0XM001.TS-DLVR-CNFM-RDT = TS0XW01.TS0XWCMD; /**/
  end


end // end TS0XS0U

// Restore map 1 descriptions
Function TS0XS0X()
   /* ------------------------------------------------------------*/

              /* RESTORE THE MAP 1 DESCRIPTIONS*/

      /* 1) This statement group will select all the*/
         /* descriptions required for the maps which are*/
         /* associated with saved map 1 fields.*/

   /* ------------------------------------------------------------*/

  TS0XM001.TS0XMORD = TS0XW01.TS0XWOCT;

  TS0XM001.TS0XMDID = TS0XW01.TS0XWICT;

  TS0XM001.TS0XMDED = TS0XW01.TS0XWDCT;

   /* ------------------------------------------------------------*/
    /* *** Select the shipment status description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.YSSCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TS0XW02.YSSCD in YSSTBL.YSSCD)
      TS0XM001.YSSSDESC = YSSTBL.YSSSDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the warehouse description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.XWHCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TS0XW02.XWHCD in XWHTBL.XWHCD)
      TS0XM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the Nike department description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.XNDCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TS0XW02.XNDCD in XNDTBL.XNDCD)
      TS0XM001.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the shipment type description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.YSTCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TS0XW02.YSTCD in YSTTBL.YSTCD)
      TS0XM001.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the delivery type description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.YDTCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TS0XW02.YDTCD in YDTTBL.YDTCD)
      TS0XM001.YDTSDESC = YDTTBL.YDTSDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the payment type description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.YPYCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TS0XW02.YPYCD in YPYTBL.YPYCD)
      TS0XM001.YPYSDESC = YPYTBL.YPYSDESC[sysVar.arrayIndex];
    end
  end

   /* ------------------------------------------------------------*/
    /* *** Select the hold code description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.YSHCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TS0XW02.YSHCD in YSHTBL.YSHCD)
      TS0XM001.YSHSDESC = YSHTBL.YSHSDESC[sysVar.arrayIndex];
    end
  end


end // end TS0XS0X

// Select from DTRANS.VTTIME01
Function TS0XS12()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTTIME01*/

   /* This module select a table row from the transit time table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2360" ("S ", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Unexpected return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(57); /* date is missing or invalid*/
      TS0XM001.XXXPRCNM = "TS0XS12"; /* process name*/
      TS0XW01.TS0XWPSW = "Y"; /* indicate problem*/
      set TS0XM001.TSFDESTE cursor, modified, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0XS12"; /* Process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XM001.XXXPRCNM = "TS0XS12"; /* Process name*/
    end
  end


end // end TS0XS12

// Delete from DTRANS.VTSTXT01
Function TS0XS15()
   /* ------------------------------------------------------------*/

                /* DELETE THE ROW TO VTSTXT01*/

        /* Delete the data base row.*/

   /* ------------------------------------------------------------*/

  TSRREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shpid*/

  call "IO2690" ("D ", SQLCA, TSRREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS15"; /* Process name*/
    TA1REC.TA1LOC = "DELETE A TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTXT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS15"; /* Process name*/
    exit stack;

  end


end // end TS0XS15

// Select from DTRANS.VTSTXT01
Function TS0XS18()
   /* ------------------------------------------------------------*/

                 /* SELECT THE ROW IN VTSTXT01*/

        /* Move in the fields and select the row in the database*/

   /* ------------------------------------------------------------*/

  TSRREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shpid*/

  call "IO2690" ("S ", SQLCA, TSRREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS18"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTXT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS18"; /* Process name*/
    exit stack;

  end


end // end TS0XS18

// Update row in DTRANS.VTSTXT01
Function TS0XS21()
   /* ------------------------------------------------------------*/

                    /* ADD THE ROW TO VTSTXT01*/

        /* Move in the fields and add the row to the database*/

   /* ------------------------------------------------------------*/

  TSRREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shpid*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TS0XW01.TS0XWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/

  TSRREC.ZZZCHGDT = TS0XW01.TS0XWCDT; /* change date*/
  TSRREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  call "IO2690" ("U ", SQLCA, TSRREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS21"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTXT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS21"; /* Process name*/
    exit stack;

  end


end // end TS0XS21

// Add the shipment text row
Function TS0XS24()
   /* ------------------------------------------------------------*/

                    /* ADD THE ROW TO VTSTXT01*/

        /* Move in the fields and add the row to the database*/

   /* ------------------------------------------------------------*/

  TSRREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shpid*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TS0XW01.TS0XWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/

  TSRREC.ZZZSDT = TS0XW01.TS0XWCDT; /* set up date*/
  TSRREC.ZZZCHGDT = TS0XW01.TS0XWCDT; /* change date*/
  TSRREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  TSRREC.ZZZCHGCT = 0; /* Change count*/

  call "IO2690" ("A ", SQLCA, TSRREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS24"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTXT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS24"; /* Process name*/
    exit stack;

  end


end // end TS0XS24

// Delete from DTRANS.VTSADR01
Function TS0XS27()
   /* ------------------------------------------------------------*/

               /* DELETE FROM DTRANS.VTSADR01*/

      /* Delete the table row*/

   /* ------------------------------------------------------------*/

  TSSREC.TSSGROUP = TS0XW03.TSSGROUP; /* move shpmnt group*/

  call "IO2700" ("D ", SQLCA, TSSREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS27"; /* Process name*/
    TA1REC.TA1LOC = "DELETE TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSADR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSSREC.TSSKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS27"; /* Process name*/
    exit stack;

  end


end // end TS0XS27

// Select from DTRANS.VTSADR01
Function TS0XS30()
   /* ------------------------------------------------------------*/

               /* SELECT FROM DTRANS.VTSADR01*/

      /* Select the table row*/

   /* ------------------------------------------------------------*/

  TSSREC.TSSGROUP = TS0XW03.TSSGROUP; /* move shpmnt group*/

  call "IO2700" ("S ", SQLCA, TSSREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS30"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSADR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSSREC.TSSKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS30"; /* Process name*/
    exit stack;

  end


end // end TS0XS30

// Add the shipment address row
Function TS0XS33()
   /* ------------------------------------------------------------*/

                 /* ADD ROW TO DTRANS.VTSADR01*/

       /* Move in the record fields and perform the add.*/

   /* ------------------------------------------------------------*/

  TSSREC.TSSGROUP = TS0XW03.TSSGROUP; /* move shpmnt group*/
  TSSREC.TSFSHPID = TSWREC.TSFSHPID; /* move shpmnt id*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TS0XW01.TS0XWCDT = XX0XW01.XX0XWDAT; /* save ccyymmdd*/

  TSSREC.ZZZSDT = TS0XW01.TS0XWCDT; /* set up date*/
  TSSREC.ZZZCHGDT = TS0XW01.TS0XWCDT; /* change date*/
  TSSREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  TSSREC.ZZZCHGCT = 0; /* Change count*/

  call "IO2700" ("A ", SQLCA, TSSREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS33"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSADR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSSREC.TSSKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS33"; /* Process name*/
    exit stack;

  end


end // end TS0XS33

// Update row in DTRANS.VTSADR01
Function TS0XS36()
   /* ------------------------------------------------------------*/

                 /* UPDATE ROW IN DTRANS.VTSADR01*/

       /* Move in the record fields and perform the update*/

   /* ------------------------------------------------------------*/

  TSSREC.TSSGROUP = TS0XW03.TSSGROUP; /* move shpmnt group*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TS0XW01.TS0XWCDT = XX0XW01.XX0XWDAT; /* save ccyymmdd*/

  TSSREC.ZZZCHGDT = TS0XW01.TS0XWCDT; /* change date*/
  TSSREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  call "IO2700" ("U ", SQLCA, TSSREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS36"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSADR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSSREC.TSSKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS36"; /* Process name*/
    exit stack;

  end


end // end TS0XS36

// Select from DTRANS.VSHPHD01
Function TS0XS39()
   /* ------------------------------------------------------------*/

                /* SELECT ROW FROM DTRANS.VSHPHD01*/

     /* Select row form database.*/

   /* ------------------------------------------------------------*/

  TSFREC.TSFGROUP = TS0XW02.TSFGROUP; /* move in record*/

  call "IO2540" ("S ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS39"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSFREC.TSFKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS39"; /* Process name*/
    exit stack;

  end


end // end TS0XS39

// Check for CC upd cntnrs & p/ls
Function TS0XS42()
   /* ------------------------------------------------------------*/

         /* CHECK FOR CC UPDATE OF CONTAINERS AND P/L'S*/

     /* 1) If the customs clear date was entered on this screen*/
        /* then update the containers and p/l's to CC or CR*/
        /* status'.*/

     /* 2) If the customs clear date was removed on this screen*/
        /* then update the containers and p/l's to IT or ER*/
        /* status'.*/

   /* ------------------------------------------------------------*/

  if (TS0XW02.TSFCCLDT > 0 /* If custom-clear date entered*/
   && TSFREC.TSFCCLDT == 0 /* and previously not entered*/
   && TSWREC.YSSCD != "RC") /* and not received*/
    TS0XW01.YSSCD = "CC"; /* Indicate custom-clear changes*/

    TS0XS45(); /* Select the set of containers*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If select ok*/

      TS0XW01.TS0XWEFL = "N"; /* Set end flag*/
      while (TS0XW01.TS0XWEFL == "N") /* Until end flag set*/
        TS0XS48(); /* Fetch container row*/
        if (TS0XW01.TS0XWEFL == "N") /* If not end*/
          TS0XS51(); /* Update the container row*/
        end
      end

      TS0XS54(); /* Close the set of containers*/

    end

    TS0XS57(); /* Select the set packing lists*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If select ok*/

      TS0XW01.TS0XWEFL = "N"; /* Set end flag*/
      while (TS0XW01.TS0XWEFL == "N") /* Until end flag set*/
        TS0XS60(); /* Fetch packing list row*/
        if (TS0XW01.TS0XWEFL == "N") /* If not end*/
          TS0XS63(); /* Update the packing list row*/
        end
      end

      TS0XS66(); /* Close the set of packing lists*/

    end

  end

  if (TS0XW02.TSFCCLDT == 0 /* If custom-clear date not entered*/
   && TSFREC.TSFCCLDT > 0)  /* and previously entered*/
    TS0XW01.YSSCD = "IT"; /* Indicate in-transit changes*/

    TS0XS45(); /* Select the set of containers*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If select ok*/

      TS0XW01.TS0XWEFL = "N"; /* Set end flag*/
      while (TS0XW01.TS0XWEFL == "N") /* Until end flag set*/
        TS0XS48(); /* Fetch container row*/
        if (TS0XW01.TS0XWEFL == "N") /* If not end*/
          TS0XS51(); /* Update the container row*/
        end
      end

      TS0XS54(); /* Close the set of containers*/

    end

    TS0XS57(); /* Select the set packing lists*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If select ok*/

      TS0XW01.TS0XWEFL = "N"; /* Set end flag*/
      while (TS0XW01.TS0XWEFL == "N") /* Until end flag set*/
        TS0XS60(); /* Fetch packing list row*/
        if (TS0XW01.TS0XWEFL == "N") /* If not end*/
          TS0XS63(); /* Update the packing list row*/
        end
      end

      TS0XS66(); /* Close the set of packing lists*/

    end

  end


end // end TS0XS42

// Select set DTRANS.VCNTNR01
Function TS0XS45()
   /* ------------------------------------------------------------*/

                   /* SELECT SET OF CONTAINERS*/

       /* Select the set of table rows.*/

   /* ------------------------------------------------------------*/

  TSHREC.TSFSHPID = TSFREC.TSFSHPID; /* move in id*/

  call "IO2590" ("S1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS45"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSHREC.TSHKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM002.XXXPRCNM = "TS0XS45"; /* Process name*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0XS45

// Fetch row DTRANS.VCNTNR01
Function TS0XS48()
   /* ------------------------------------------------------------*/

                  /* FETCH THE CONTAINER*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "IO2590" ("N1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0XW01.TS0XWEFL = "Y"; /* end of set found*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      TS0XW01.TS0XWEFL = "Y"; /* end of the loop*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0XS48"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XM001.XXXPRCNM = "TS0XS48"; /* Process name*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/
    end
  end


end // end TS0XS48

// Update row DTRANS.VCNTNR01
Function TS0XS51()
   /* ------------------------------------------------------------*/

               /* UPDATE SHIPMENT HEADER ROW*/

   /* Update the shipment header row to 'in-transit'*/
     /* or 'tentative'.*/
   /* If any error, indicate a system error.*/

   /* ------------------------------------------------------------*/

  TS0XW01.TS0XWCCF = "N"; /* Init custom clear upd flag*/

  if (TS0XW01.YSSCD == "CC") /* If CC update is indicated*/
    if (TSHREC.TSHSTAT == "ER") /* If container in error*/
      TSHREC.TSHSTAT = "CR"; /* Set to custom-clear error*/
      TS0XW01.TS0XWCCF = "Y"; /* Set update flag*/
    end
    if (TSHREC.TSHSTAT == "IT") /* If container in transit*/
      TSHREC.TSHSTAT = "CC"; /* Set to custom-clear error*/
      TS0XW01.TS0XWCCF = "Y"; /* Set update flag*/
    end
  else
    if (TSHREC.TSHSTAT == "CR") /* If container custom clr error*/
      TSHREC.TSHSTAT = "ER"; /* Set to error*/
      TS0XW01.TS0XWCCF = "Y"; /* Set update flag*/
    end
    if (TSHREC.TSHSTAT == "CC") /* If container custom clr*/
      TSHREC.TSHSTAT = "IT"; /* Set to in transit*/
      TS0XW01.TS0XWCCF = "Y"; /* Set update flag*/
    end
  end

  if (TS0XW01.TS0XWCCF == "Y") /* If update for cc is indicated*/

    XX0XS01(); /* get current date and time*/

    TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;
    TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
    TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

    call "IO2590" ("U ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      converseLib.validationFailed(09); /* Indicate not available*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
        if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
          converseLib.validationFailed(11); /* Indicate not available*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "TS0XS51"; /* Process name*/
        TA1REC.TA1LOC = "UPDATE THE SELECTED TABLE ROW";
        TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
        TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        TS0XM001.XXXPRCNM = "TS0XS51"; /* Process name*/

      end
    end
  end


end // end TS0XS51

// Close set DTRANS.VCNTNR01
Function TS0XS54()
   /* ------------------------------------------------------------*/

            /* CLOSE THE SELECTED SET OF CONTAINERS*/

   /* Close the selected set of table rows.*/

   /* ------------------------------------------------------------*/

  call "IO2590" ("C1", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0XS54"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM001.XXXPRCNM = "TS0XS54"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0XS54

// Select set DTRANS.VCPLHD01
Function TS0XS57()
   /* ------------------------------------------------------------*/

            /* SELECT SET OF CONTAINER PACKING LIST ROWS*/

       /* Select the set of table rows.*/

   /* ------------------------------------------------------------*/

  TSIREC.TSFSHPID = TSFREC.TSFSHPID; /* move in id*/

  TSGREC.TSNFNC = "S1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS57"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM001.XXXPRCNM = "TS0XS57"; /* Process name*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0XS57

// Fetch row DTRANS.VCPLHD01
Function TS0XS60()
   /* ------------------------------------------------------------*/

            /* FETCH THE CONTAINER PACKING LIST ROW*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "N1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0XW01.TS0XWEFL = "Y"; /* End the loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      TS0XW01.TS0XWEFL = "Y"; /* End the loop*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0XS60"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XM001.XXXPRCNM = "TS0XS60"; /* Process name*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

    end
  end


end // end TS0XS60

// Update row DTRANS.VCPLHD01
Function TS0XS63()
   /* ------------------------------------------------------------*/

               /* UPDATE CPL HEADER ROW*/

   /* Update the CPL header row to the necessary status*/

   /* ------------------------------------------------------------*/

  TS0XW01.TS0XWCCF = "N"; /* Init custom clear upd flag*/

  if (TS0XW01.YSSCD == "CC") /* If CC update is indicated*/
    if (TSIREC.TSISTAT == "ER") /* If container in error*/
      TSIREC.TSISTAT = "CR"; /* Set to custom-clear error*/
      TS0XW01.TS0XWCCF = "Y"; /* Set update flag*/
    end
    if (TSIREC.TSISTAT == "IT") /* If container in transit*/
      TSIREC.TSISTAT = "CC"; /* Set to custom-clear error*/
      TS0XW01.TS0XWCCF = "Y"; /* Set update flag*/
    end
  else
    if (TSIREC.TSISTAT == "CR") /* If container custom clr error*/
      TSIREC.TSISTAT = "ER"; /* Set to error*/
      TS0XW01.TS0XWCCF = "Y"; /* Set update flag*/
    end
    if (TSIREC.TSISTAT == "CC") /* If container custom clr*/
      TSIREC.TSISTAT = "IT"; /* Set to in transit*/
      TS0XW01.TS0XWCCF = "Y"; /* Set update flag*/
    end
  end

  if (TS0XW01.TS0XWCCF == "Y") /* If update for cc is indicated*/

    XX0XS01(); /* get current date and time*/

    TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;
    TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
    TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

    TSGREC.TSNFNC = "U ";
    call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Update row*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      converseLib.validationFailed(09); /* Indicate not available*/
      TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
        if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
          converseLib.validationFailed(11); /* Indicate not available*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else
          converseLib.validationFailed(10); /* Indicate system error*/
          TS0XW01.TS0XWPSW = "Y"; /* Indicate not available*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/
          converseLib.clearScreen();
           /* Clear screen before redisplay*/
        end
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1PGMNM = "TS0XS63"; /* Process name*/
        TA1REC.TA1LOC = "UPDATE THE SELECTED TABLE ROW";
        TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
        TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        TS0XM001.XXXPRCNM = "TS0XS63"; /* Process name*/

      end
    end
  end


end // end TS0XS63

// Close set DTRANS.VCPLHD01
Function TS0XS66()
   /* ------------------------------------------------------------*/

            /* CLOSE THE SELECTED SET OF CARTONS*/

   /* Close the selected set of table rows.*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C1"; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0XS66"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM001.XXXPRCNM = "TS0XS66"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0XS66

// Update row in DTRANS.VSHPHD01
Function TS0XS69()
   /* ------------------------------------------------------------*/

                /* UPDATE ROW IN DTRANS.VSHPHD01*/

     /* Update row in database.*/

   /* ------------------------------------------------------------*/

  TS0XW02.TSEDEST = TS0XM001.TSEDEST;
  TSFREC.TSFGROUP = TS0XW02.TSFGROUP; /* move in record*/

  TSFREC.TS-ADVN-SHP-IND = TS0XM001.TS-ADVN-SHP-IND;

  if (TS0XM001.YSSCD != TS0XW02.YSSCD) /* if code changed on map*/
    TSFREC.YSSCD = TS0XM001.YSSCD; /* move map yss code to tsfrec*/
  else
    if (TS0XW02.YSSCD == "ER") /* If previously in-error*/
      TSFREC.YSSCD = "IT"; /* Set to in-transit*/
    end

    if (TS0XW02.YSSCD == "CR") /* If previously custom-clear error*/
      TSFREC.YSSCD = "CC"; /* Set to custom-clear*/
    end

    if (TS0XW02.TSFCCLDT > 0 /* If custom-clear date entered*/
     && TSFREC.YSSCD == "IT") /* and previously in-transit*/
      TSFREC.YSSCD = "CC"; /* Set to custom-cleared*/
    end

    if (TS0XW02.TSFCCLDT == 0 /* If custom-clear date not entered*/
     && TSFREC.YSSCD == "CC") /* and previously custom clear*/
      TSFREC.YSSCD = "IT"; /* Set to custom-cleared*/
    end
  end

  TSFREC.XRECD = "  "; /* Set recpt except code to blank*/

  if (TSFREC.XGPCD != TS0XW01.XGPCD) /* if gpc change*/
    TSFREC.XGPCD = TS0XW01.XGPCD; /* move in gpc*/
  end

  if (TSFREC.TSFCHGFL == " ") /* if charges entered flag blank*/
    TSFREC.TSFCHGFL = "N"; /* default to no*/
  end

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TSFREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TS0XW01.TS0XWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/
  TSFREC.ZZZCHGDT = TS0XW01.TS0XWCDT; /* change date*/
  TSFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  call "IO2540" ("U ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS69"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSFREC.TSFKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS69"; /* Process name*/
    exit stack;

  end


end // end TS0XS69

// Restore map 2 fields
Function TS0XS78()
   /* ------------------------------------------------------------*/

                  /* RESTORE MAP 2 FIELDS*/

   /* ------------------------------------------------------------*/

  TS0XM002.TSFCHGFL = TS0XW02.TSFCHGFL; /* move in all fields*/
  TS0XM002.TS-ORIG-PMT-IND = TS0XW02.TS-ORIG-PMT-IND;
  TS0XM002.TSFOKG = TS0XW02.TSFOKG;
  TS0XM002.TSFOFRGT = TS0XW02.TSFOFRGT;
  TS0XM002.TSFOHNDL = TS0XW02.TSFOHNDL;
  TS0XM002.TSFOINLD = TS0XW02.TSFOINLD;
  TS0XM002.TSFOCAF = TS0XW02.TSFOCAF;
  TS0XM002.TSFOBAF = TS0XW02.TSFOBAF;
  TS0XM002.TSFOMISC = TS0XW02.TSFOMISC;
  TS0XM002.TSFDHNDL = TS0XW02.TSFDHNDL;
  TS0XM002.TSFDINLD = TS0XW02.TSFDINLD;
  TS0XM002.TSFDMISC = TS0XW02.TSFDMISC;
  TS0XM002.YBRCD = TS0XW02.YBRCD;
  TS0XM002.TSFBRIVC = TS0XW02.TSFBRIVC;
  TS0XM002.TSFINFEE = TS0XW02.TSFINFEE;
  TS0XM002.TSFFRFEE = TS0XW02.TSFFRFEE;


end // end TS0XS78

// Restore map 2 descriptions
Function TS0XS81()
   /* ------------------------------------------------------------*/

              /* RESTORE THE MAP 2 DESCRIPTIONS*/

      /* 1) This statement group will select all the*/
         /* descriptions required for the maps which are*/
         /* associated with saved map fields.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* *** Select the broker code description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.YBRCD == " ") /* If code is missing*/
     /* continue on*/
  else
    if (TS0XW02.YBRCD in YBRTBL.YBRCD)
      TS0XM002.YBRSDESC = YBRTBL.YBRSDESC[sysVar.arrayIndex];
    end
  end


end // end TS0XS81

// Restore map 3 fields
Function TS0XS84()
   /* ------------------------------------------------------------*/

                  /* RESTORE MAP 3 FIELDS*/

   /* ------------------------------------------------------------*/

  TS0XM003.TSFCARR2 = TS0XW02.TSFCARR2; /* move in all fields*/
  TS0XM003.TSFODEST = TS0XW02.TSFODEST;
  TS0XM003.XXX-ADDR1 = TS0XW03.XXX-ADDR1; /* move in all fields*/
  TS0XM003.XXX-ADDR2 = TS0XW03.XXX-ADDR2;
  TS0XM003.XXX-ADDR3 = TS0XW03.XXX-ADDR3;
  TS0XM003.XXXCITY = TS0XW03.XXXCITY;
  TS0XM003.XSTCD = TS0XW03.XSTCD;
  TS0XM003.XXXZIP = TS0XW03.XXXZIP;
  TS0XM003.XCTCD = TS0XW03.XCTCD;

  if (TS0XW02.TSFDIVDT > 0) /* if date exists*/
    TS0XW01.TS0XWCDT = TS0XW02.TSFDIVDT; /* move date to work field*/
    TS0XS0F(); /* move month, day and year to map date field*/
    TS0XM003.TSFDIVDT = TS0XW01.TS0XWCMD; /* move in map date*/
  end


end // end TS0XS84

// Restore map 3 descriptions
Function TS0XS87()
   /* ------------------------------------------------------------*/

              /* RESTORE THE MAP 3 DESCRIPTIONS*/

      /* 1) This statement group will select all the*/
         /* descriptions required for the maps which are*/
         /* associated with saved map fields.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
    /* *** Select secondary carrier description ****/
   /* ------------------------------------------------------------*/

  if (TS0XW02.TSFCARR2 == " ") /* If carrier code is missing*/
     /* continue on*/
  else
    TSAREC.TSACARCD = TS0XW02.TSFCARR2; /* move in key*/
    TS0XS0O(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TS0XM003.TSACARNM = TSAREC.TSACARSN; /* move in carrier name*/
    end
  end


end // end TS0XS87

// Select row DTRANS.VTSLOC02
Function TS0XS88()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the tsloc table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("S ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS88"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0XM001.XXXPRCNM = "TS0XS88"; /* Process name*/

  end


end // end TS0XS88

// Select row DTRANS.VCPLHD04
Function TS0XS89()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the CPLHD table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/
  VCPLHD04.TS-NIKE-SHP-ID = TS0XM001.TSFSHPID;
  call "VCPLHD04" ("S1", SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS89"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0XM001.XXXPRCNM = "TS0XS89"; /* Process name*/

  end


end // end TS0XS89

// Fetch row DTRANS.VCPLHD04
Function TS0XS90()
   /* ------------------------------------------------------------*/

            /* FETCH THE PACKING LIST ROW*/

   /* Fetch the next row from the selected set of rows.*/

   /* ------------------------------------------------------------*/

  call "VCPLHD04" ("N1", SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0XW01.TS0XELFL = "Y"; /* End the loop*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      TS0XW01.TS0XELFL = "Y"; /* End the loop*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0XS90"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0XM001.XXXPRCNM = "TS0XS90"; /* Process name*/

    end
  end


end // end TS0XS90

// UPDATE DTRANS.VCPLHD04
Function TS0XS91()
   /* ------------------------------------------------------------*/

            /* UPDATE THE LEG NBR*/

   /* ------------------------------------------------------------*/
  XX0XS01();
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;
  VCPLHD04.TS-SHP-LEG-NBR = 1;

  call "VCPLHD04" ("U ", SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0XS91"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0XM001.XXXPRCNM = "TS0XS91"; /* Process name*/
    exit stack;
  end

end // end TS0XS91

// Close set DTRANS.VCPLHD04
Function TS0XS92()
   /* ------------------------------------------------------------*/

            /* CLOSE DTRANS.VCPLHD04*/

   /* ------------------------------------------------------------*/

  call "VCPLHD04" ("C1", SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0XS92"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0XM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0XM001.XXXPRCNM = "TS0XS92"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0XW01.TS0XWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0XS92

//*** RECORD=TS0XW01 ****
// Working storage for TS0O - Location Inquiry/Maintenance
// ***********************
Record TS0XW01 type basicRecord
  10 TS0XWMAP TS0XWMAP ; 
  10 TS0XWIXM TS0XWIXM ; 
  10 YMTCD YMTCD ; 
  10 XGPCD XGPCD ; 
  10 YSSCD YSSCD ; 
  10 YSSUPDFL YSSUPDFL ; 
  10 TS0XWPSW TS0XWPSW ; 
  10 TS0XWSWR TS0XWSWR ; 
  10 TS0XWFEX TS0XWFEX ; 
  10 TS0XWFSW TS0XWFSW ; 
  10 TS0XWSHF TS0XWSHF ; 
  10 TS0XWTXF TS0XWTXF ; 
  10 TS0XWADF TS0XWADF ; 
  10 TS0XWUEF TS0XWUEF ; 
  10 TS0XWCCF TS0XWCCF ; 
  10 TS0XW-UPDATE-FLAG TS0XW-UPDATE-FLAG ; 
  10 TS0XWEFL TS0XWEFL ; 
  10 TS0XWMXT TS0XWMXT ; 
  10 TS0XWTSA TS0XWTSA [2] ; 
    15 TSRTEXT TSRTEXT ; 
    15 TS0XWEXF TS0XWEXF ; 
    15 ZZZCHGCT ZZZCHGCT ; 
  10 TS0XWCID TS0XWCID ; 
    15 TS0XWCI1 TS0XWCI1 ; 
    15 TS0XWCI2 TS0XWCI2 ; 
  10 TS0XWDTE TS0XWDTE ; 
  10 TS0XWCDT TS0XWCDT ; 
    15 TS0XWCEN TS0XWCEN ; 
    15 TS0XWYMD TS0XWYMD ; 
      20 TS0XWYY TS0XWYY ; 
      20 TS0XWMM TS0XWMM ; 
      20 TS0XWDD TS0XWDD ; 
  10 TS0XWOCT TS0XWOCT ; 
  10 TS0XWOST TS0XWOST ; 
  10 TS0XWOCO TS0XWOCO ; 
  10 TS0XWICT TS0XWICT ; 
  10 TS0XWIST TS0XWIST ; 
  10 TS0XWICO TS0XWICO ; 
  10 TS0XWDCT TS0XWDCT ; 
  10 TS0XWDST TS0XWDST ; 
  10 TS0XWDCO TS0XWDCO ; 
  10 TS0XWCMD TS0XWCMD ; 
    15 TS0XWMMM TS0XWMMM ; 
    15 TS0XWMDD TS0XWMDD ; 
    15 TS0XWMYY TS0XWMYY ; 
  10 TS0XW-MAX-ADT-DATE TS0XW-MAX-ADT-DATE ; 
  10 TS0XW-ADT-DATE-WINDOW TS0XW-ADT-DATE-WINDOW ; 
  10 TS0XWPRM TS0XWPRM ; 
    15 TS0XWPID TS0XWPID ; 
    15 TS0XWNID TS0XWNID ; 
    15 TS0XWFIL TS0XWFIL ; 
  10 TS0XW-BA-FLG TS0XW-BA-FLG ; 
  10 TS0XCOMM TS0XCOMM ; 
  10 TS0X-DIS-LOC-CD TS0X-DIS-LOC-CD ; 
  10 TS-DIS-LOC-CNSLD-FL TS-DIS-LOC-CNSLD-FL ; 
  10 TS0XELFL TS0XELFL ; 
end // end TS0XW01

//*** RECORD=TS0XW02 ****
// Working storage for DTRANS.VSHPHD01 - TS0X application
// 
//                   This tabel is a duplicate of the TSFREC
//                   used to access shipment header informa-
//                   tion. It is needed in this application
//                   in order to keep track of shipment
//                   header information to be used for updates.
// 
// ***********************
Record TS0XW02 type basicRecord
  5 TSFGROUP TSFGROUP ; 
    10 TSFKEY TSFKEY ; 
      15 TSFSHPID TSFSHPID ; 
      15 TSFBOL TSFBOL ; 
      15 TSACARCD TSACARCD ; 
      15 TS5CRAFT TS5CRAFT ; 
      15 TSFSHPNB TSFSHPNB ; 
    10 XGPCD XGPCD ; 
    10 TSFRWRDR TSFRWRDR ; 
    10 TSEORIG TSEORIG ; 
    10 TSEDEST TSEDEST ; 
    10 TSFDSCHG TSFDSCHG ; 
    10 TSFDIVRT TSFDIVRT ; 
    10 TSFDIVDT TSFDIVDT ; 
    10 TSFODEST TSFODEST ; 
    10 TSFDPRTA TSFDPRTA ; 
    10 TSFDPRTE TSFDPRTE ; 
    10 TSFDSCHA TSFDSCHA ; 
    10 TSFDSCHE TSFDSCHE ; 
    10 TSFDESTA TSFDESTA ; 
    10 TSFDESTE TSFDESTE ; 
    10 TS-ADVN-SHP-IND TS-ADVN-SHP-IND ; 
    10 TS-ADVN-SHP-DT TS-ADVN-SHP-DT ; 
    10 TSFRECPT TSFRECPT ; 
    10 TSFBLRDT TSFBLRDT ; 
    10 TSFBOLDT TSFBOLDT ; 
    10 TSFNTRDT TSFNTRDT ; 
    10 TSFCCLDT TSFCCLDT ; 
    10 TSFRELDT TSFRELDT ; 
    10 TS-FCTY-DOC-RDT TS-FCTY-DOC-RDT ; 
    10 TS-DLVR-CNFM-RDT TS-DLVR-CNFM-RDT ; 
    10 TSFDWBK TSFDWBK ; 
    10 XWHCD XWHCD ; 
    10 XNDCD XNDCD ; 
    10 YSTCD YSTCD ; 
    10 YDTCD YDTCD ; 
    10 YPYCD YPYCD ; 
    10 YSSCD YSSCD ; 
    10 TSFSTADT TSFSTADT ; 
    10 YSHCD YSHCD ; 
    10 TSFHLDDT TSFHLDDT ; 
    10 TSFHLDRD TSFHLDRD ; 
    10 TS-TOT-COLL-SCHG TS-TOT-COLL-SCHG ; 
    10 TS-TOT-PPD-SCHG TS-TOT-PPD-SCHG ; 
    10 TSFTKG TSFTKG ; 
    10 TSFTCBM TSFTCBM ; 
    10 TSFNILRF TSFNILRF ; 
    10 TSFCHGFL TSFCHGFL ; 
    10 TSFAPLFL TSFAPLFL ; 
    10 TS-ORIG-PMT-IND TS-ORIG-PMT-IND ; 
    10 TSFOKG TSFOKG ; 
    10 TSFOFRGT TSFOFRGT ; 
    10 TS-FRGT-CRCY-CD TS-FRGT-CRCY-CD ; 
    10 TSFOHNDL TSFOHNDL ; 
    10 TS-ORIG-CRCY-CD TS-ORIG-CRCY-CD ; 
    10 TSFOINLD TSFOINLD ; 
    10 TSFOCAF TSFOCAF ; 
    10 TSFOBAF TSFOBAF ; 
    10 TSFOMISC TSFOMISC ; 
    10 TSFDHNDL TSFDHNDL ; 
    10 TS-DEST-CRCY-CD TS-DEST-CRCY-CD ; 
    10 TSFDINLD TSFDINLD ; 
    10 TSFDMISC TSFDMISC ; 
    10 YBRCD YBRCD ; 
    10 TSFBRIVC TSFBRIVC ; 
    10 TSFINFEE TSFINFEE ; 
    10 TSFFRFEE TSFFRFEE ; 
    10 TSFCARR2 TSFCARR2 ; 
    10 TSFADRID TSFADRID ; 
    10 TSFTXTID TSFTXTID ; 
    10 XRECD XRECD ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0XW02

//*** RECORD=TS0XW03 ****
// Working storage for DTRANS.VTSADR01 - TS0X application
// 
//                      This record is a duplicate of the
//                      shipment address record TSsREC. It
//                      is needed in order to keep track
//                      of shipment address information used
//                      in updating.
// 
// ***********************
Record TS0XW03 type basicRecord
  5 TSSGROUP TSSGROUP ; 
    10 TSSKEY TSSKEY ; 
      15 TSFSHPID TSFSHPID ; 
    10 XXX-ADDR1 XXX-ADDR1 ; 
    10 XXX-ADDR2 XXX-ADDR2 ; 
    10 XXX-ADDR3 XXX-ADDR3 ; 
    10 XXXCITY XXXCITY ; 
    10 XSTCD XSTCD ; 
    10 XXXZIP XXXZIP ; 
    10 XCTCD XCTCD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end TS0XW03

// consolidation flag
DataItem TS-DIS-LOC-CNSLD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Discharge location code
DataItem TS0X-DIS-LOC-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no days over curr date allowed
DataItem TS0XCOMM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End loop flag
DataItem TS0XELFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no days over curr date allowed
DataItem TS0XW-ADT-DATE-WINDOW num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no days over curr date allowed
DataItem TS0XW-BA-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date + constant
DataItem TS0XW-MAX-ADT-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update flag
DataItem TS0XW-UPDATE-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// address items updated flag
DataItem TS0XWADF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Custom-cleared update flag
DataItem TS0XWCCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date ccyymmdd
DataItem TS0XWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working storage century
DataItem TS0XWCEN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st part OP1CUOID
DataItem TS0XWCI1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working OP1NORID
DataItem TS0XWCI2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working OP1CUOID
DataItem TS0XWCID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current map date mmddyy
DataItem TS0XWCMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dest foreign country code
DataItem TS0XWDCO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// destination city
DataItem TS0XWDCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem TS0XWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// destination state
DataItem TS0XWDST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage date
DataItem TS0XWDTE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic loop end flag
DataItem TS0XWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exists in data base flag
DataItem TS0XWEXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// final exit flag
DataItem TS0XWFEX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no days over curr date allowed
DataItem TS0XWFIL char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// charge/addr function switch
DataItem TS0XWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dschg foreign country code
DataItem TS0XWICO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discharge city
DataItem TS0XWICT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discharge state
DataItem TS0XWIST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working index 1
DataItem TS0XWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed
DataItem TS0XWMAP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map day
DataItem TS0XWMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0XWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map month
DataItem TS0XWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// max text lines on screen
DataItem TS0XWMXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map year
DataItem TS0XWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// no days over curr date allowed
DataItem TS0XWNID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// origin foreign country code
DataItem TS0XWOCO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// origin city
DataItem TS0XWOCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// origin state
DataItem TS0XWOST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no days over curr date allowed
DataItem TS0XWPID char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no days over curr date allowed
DataItem TS0XWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// problem switch
DataItem TS0XWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shipment items updated flag
DataItem TS0XWSHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0XWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// text array
DataItem TS0XWTSA char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// text items updated flag
DataItem TS0XWTXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update error flag
DataItem TS0XWUEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage yr,mo,day
DataItem TS0XWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0XWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

