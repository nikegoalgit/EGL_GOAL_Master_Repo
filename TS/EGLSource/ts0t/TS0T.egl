package ts0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pv.common.*;
import sl.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0T ****
// This application allows the user to add transportation
// shipment header information to the transportation shipment
// table.  The user will enter this application after selecting
// any of the options from the shipment add menu;
// 
//     1 - Summary Shipment Add
//     2 - Complete Shipment Add
//     3 - Tentative Shipment Add
//     4 - Combine Shipment Add
// 
// (See System Flow Chart Section to see how this application
// fits into the shipment add flow).  Three screens can be
// accessed in this application:
// 
//   1) First the main shipment header add screen appeats.  The
//      user is required to enter most all of the fields on
//      this screen.  The user can then go on to the next
//      application by hitting enter.  This will edit and add
//      the header.  PF17 or PF18 are 2 other routes a user can
//      take other than enter.
// 
//   2) PF17 will edit the main header screen and then shows a
//      charges add screen.  These fields are all optional.
//      Pressing enter at this point will edit entered fields,
//      add the shipment header and go on to the next applic-
//      ation.  Pressing PF18 from the charges add screen will
//      edit entered fields and then show the shipment address
//      screen.  PF3 will take one back to the main shipment
//      header screen after editing entered fields.
// 
//   2) PF18 from the main header screen will edit the main
//      header screen and then show a shipment address screen.
//      These fields are all optional.  Pressing enter at this
//      point will edit entered fields, add the shipment header
//      and go on to the next application.  Pressing PF17 from
//      the address screen will edit entered fields and then
//      show the shipment charges screen.  PF3 will take one
//      back to the main shipment header screen after editing
//      entered fields.
// 
// If a user hits enter on either the main header, charges or
// adress screen, the application edits,adds, and transfers the
// header to the container build application (ts0u).  If a user
// hits PA2 on either of the 3 screens mentioned above, this
// application will transfer control immediately to the control
// application (ts0i) where the reject screen will show that
// this shipment was rejected.
// 
// control    date    name    description of change
// ------- -------- ------  ----------------------------------
//         03/01/88 CEPPLE  New application.
// ts#012  08/02/90 CEPPLE  add gpc to heading of all screens.
// fix     01/03/91 CEPPLE  Change whse default for dom shpmnt
//                          from '32' to '51' for installation
//                          of new Memphis apparel warehouse.
// TS#000  03/01/91 SFORD   extended TS_BOL map field to 16 cha
// TS#000  06/10/91 CEPPLE  Remove sales order and increase
//                          charges fields for 6/10/91 table
//                          changes.
// TS#000  10/09/91 KSTOKK  Increase TSFTKG from 7 to 9 in sz.
// TS#232  12/11/91 SFORD   Combined shipment enhancements.
// TS#310  02/12/93 TGIEBE  Allow user to enter actual
//                          departure date up to 10 days in
//                          the future.
// TS#999  08/13/93 SFORD   Table changes - charges
// TS#999  11/08/93 NMASTE  Table changes
// TS#999  03/09/94 SFORD   Table changes - 03/09/94
// TS#000  11/07/96 JCARL1  Remove alarm from msg display.
// TS1117  07/14/97 RKALLA  CTE shipments marked 'IT' and old
//                          shipments marked 'RC'. Enhancements
//                          done.
// ts000   08/4/97  rkalla  CTE Shpment project done
// TS000   08/25/97 RKALLA  NEW SUBROUTINE ADDED TS2250
// TS1569  04/02/98 PGHOSH  Changed to 7 day window for the err
//                          msge :  if  actl-dprt-dt is
//                          greater than current-date + 7.
// TS3020  05/25/99 AMOHAI  Changed the following to submit
//                          batch job TS4031, when coming thru'
//                          4 th option (COMBINE) of TS0IM001
//                          screen.
// ts000   07/28/99 vkumar  Changed to consider CTE and HK6
//                          destination as multileg.
// ts000   09/21/99 lrao    to create combine shipment with
//                          "IT" status.
// ts000   03/29/01 mlatha  changed - not to allow users to add
//                          IT shipments with US and CANADA
//                          destination.
// *********************
Program TS0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TS0TW01 TS0TW01; // record
  TS0TW02 TS0TW02; // record
  TS0TW03 TS0TW03; // record
  TS0TW04 TS0TW04; // record
  TS0TW05 TS0TW05; // record
  TS5REC TS5REC; // record
  TS7REC TS7REC; // record
  TSAREC TSAREC; // record
  TSCREC TSCREC; // record
  TSEREC TSEREC; // record
  TSFREC TSFREC; // record
  TSGREC TSGREC; // record
  TSHREC TSHREC; // record
  TSIREC TSIREC; // record
  TSJREC TSJREC; // record
  TSOREC TSOREC; // record
  TSRREC TSRREC; // record
  TSSREC TSSREC; // record
  TSTREC TSTREC; // record
  TSWREC TSWREC; // record
  VCPLHD03 VCPLHD03; // record
  VCPLHD04 VCPLHD04; // record
  VCPLHDJ4 VCPLHDJ4; // record
  VTSLOC02 VTSLOC02; // record
  XCTHREC XCTHREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSHTBL {deleteAfterUse = yes}; // table
  use TS0TTP1 {deleteAfterUse = yes}; // table
  use TS0TT01 {deleteAfterUse = yes}; // table
  use YPYTBL {deleteAfterUse = yes}; // table
  use YDTTBL {deleteAfterUse = yes}; // table
  use YSTTBL {deleteAfterUse = yes}; // table
  use XNDTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use YSSTBL {deleteAfterUse = yes}; // table
  use YBRTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use TS0TM.TA0PM001,  // forms
      TS0TM.TS0TM001, 
      TS0TM.TS0TM002, 
      TS0TM.TS0TM003, 
      TS0TM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/

    set TSAREC empty; /* Initialize record storage*/
    set TSCREC empty;
    set TS5REC empty;
    set TSEREC empty;
    set TSFREC empty;
    set TSGREC empty;
    set TSHREC empty;
    set TSIREC empty;
    set TSRREC empty;
    set TSSREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set TAEREC empty;
    set SQLCA empty;
    set ERRSQLCA empty;
    set XX0XW01 empty;
    set TS0TM001 initial; /* Initialize map1 output area*/
    set TS0TM002 initial; /* Initialize map2 output area*/
    set TS0TM003 initial; /* Initialize map3 output area*/

    TS0TW01.TS0TWMAP = "1"; /* Indicate map to be displayed*/
    TS0TW01.TS0TWPSW = "N"; /* Initialize problem switch*/
    TS0TW01.TS0TWFEX = "N"; /* Initialize final exit flag*/

    TS0TW01.TS0TW-ADT-DATE-WINDOW = 7; /* max days over current date*/

    goto TS0T000; /* Check invalid entry.*/


    TS0T000: TS0T000();
     /* ------------------------------------------------------------*/
     /* Flow to converse main processing*/
     /* ------------------------------------------------------------*/

    goto TS0T001; /* Converse main processing*/


    TS0T001: TS0T001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Shipment Header Add process.*/
     /* ------------------------------------------------------------*/

    goto TS0T001; /* Converse Shipment Header Add.*/


  end // end main
end // end TS0T

// Format/submit Ts4031, Ts4041
Function TS0T-001()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0TTP1.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0TWPRM = " "; /* INITIALIZE*/
      TS0TWNID = TS0TM001.TSFSHPID; /* NIKE ID*/
      TA6REC.TARJCL[TA6INDEX] = TS0TWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0TTP1.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0TTP1.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0TTP1.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0T-001

// Format/submit TS4031,Ts4041
Function TS0T-002()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6ROW = " "; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

   /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

    if (TS0TT01.TARTYPE[TA6INDEX] == "P") /* PARM CARD*/
      TS0TWPRM = " "; /* INITIALIZE*/
      TS0TWNID = TS0TM001.TSFSHPID; /* NIKE ID*/
      TA6REC.TARJCL[TA6INDEX] = TS0TWPRM; /* PARM REC*/
    else
      TA6REC.TARJCL[TA6INDEX] = TS0TT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = TS0TT01.TARTYPE[TA6INDEX]; /* Type*/
    end


    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (TS0TT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

   /* MOVE 'XXXXX' TO XXWREC.XXX-MSG-LOC-ID;/* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(86); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end TS0T-002

// Process CPLHD01 "RC" updates
Function TS0T-15310()
   /* ------------------------------------------------------------*/
   /*  */
   /* Update the CPLHD01 row that are in "IP" Status to an*/
   /* "RC" status.  This function is only performed when*/
   /* using the combined option in TS0I.*/
   /*  */
   /* ------------------------------------------------------------*/


  TS0T-15311(); /* ===> Select (S1) set VCPLHD01*/

  TS0TW01.TS0TWSC1 = "N"; /* ===> End of Cursor Switch*/

  TS0T-15312(); /* ===> Fetch  (N1) row VCPLHD01*/

  while (TS0TW01.TS0TWSC1 == "N") /* ===> End of Cursor Switch*/

    TS0T-15313(); /* ===> Update (U ) row VCPLHD01*/

    TS0T-15312(); /* ===> Fetch  (N1) row VCPLHD01*/

  end
  TS0T-15314(); /* ===> Close  (C1) set VCPLHD01*/


   /* **                                                        ***/
   /* ********************** End of TS0T-15310 ********************/
end // end TS0T-15310

// Select (S1) set       VCPLHD01
Function TS0T-15311()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPL TABLE ROWS*/

   /* ------------------------------------------------------------*/

  set TSIREC empty;

  TSIREC.TSFSHPID = TSFREC.TSFSHPID;

  TSGREC.TSNFNC = "S1"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-15311"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/
    TS0TM001.XXXPRCNM = "T-15311"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0T-15311 ********************/
end // end TS0T-15311

// Fetch  (N1) next      VCPLHD01
Function TS0T-15312()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPL TABLE ROW*/

   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "N1"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* End of selected set*/

    /* ========= Next Sentence ============>*/

  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS0TW01.TS0TWSC1 = "Y"; /* End of set found*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "T-15312"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
      TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/

      TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/
      TS0TM001.XXXPRCNM = "T-15312"; /* ===> Process name*/

      exit stack; /* ===>  Exit to redisplay map*/

    end /* ===> sql  = 100*/

  end /* ===> sql  = 0*/



   /* **                                                        ***/
   /* ********************** End of TS0T-15312 ********************/
end // end TS0T-15312

// Update (U ) Row       VCPLHD01
Function TS0T-15313()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

       /* - Move in all fields to TSIREC.*/
       /* - Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

   /* IF TS0TW02.CTEFLAG EQ 'Y';*/
  TSIREC.TSISTAT = "IT"; /* pl status*/
   /* ELSE;*/
   /* MOVE 'RC' TO TSIREC.TSISTAT;   /* pl status*/
   /* END;*/

  TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== Next Sentence ===========>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-15313"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "T-15313"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* Problem switch*/

    exit stack; /* ===> Exit to display message*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0T-15313 ********************/
end // end TS0T-15313

// Close  (C1) set       VCPLHD01
Function TS0T-15314()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPL ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C1"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "T-15314"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "T-15314"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0T-15314 ********************/
end // end TS0T-15314

// Update (U ) Row       VCPLHD01
Function TS0T-15317()
   /* ------------------------------------------------------------*/

                 /* UPDATE PACKING LIST ROW*/

       /* - Move in all fields to TSIREC.*/
       /* - Add the packing list row to dtrans.vcplhd01*/

   /* ------------------------------------------------------------*/

   /* MOVE 'rc' TO TSIREC.TSISTAT;     /* pl status*/
  TSIREC.TSISTAT = "IT"; /* pl status*/

  TSIREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSIREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSIREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== Next Sentence ===========>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-15317"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "T-15317"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* Problem switch*/

    exit stack; /* ===> Exit to display message*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0T-15313 ********************/
end // end TS0T-15317

// Process CNTNR01 "RC" update
Function TS0T-15320()
   /* ------------------------------------------------------------*/
   /*  */
   /* Update the CNTNR01 row that are in "IP" Status to an*/
   /* "RC" status.  This function is only performed when*/
   /* using the combined option in TS0I.*/
   /*  */
   /* ------------------------------------------------------------*/


  TS0T-15321(); /* ===> Select (S ) set VCNTNR01*/

  TS0T-15322(); /* ===> Update (U ) row VCNTNR01*/


   /* **                                                        ***/
   /* ********************** End of TS0T-15310 ********************/
end // end TS0T-15320

// Select (SA) set       VCNTNR01
Function TS0T-15321()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VCNTNR01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  set TSHREC empty;

  TSHREC.TSFSHPID = TSIREC.TSFSHPID;
  TSHREC.TSHNKCN = 1;

  call "IO2590" ("SA", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-15321"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "T-15321"; /* Process name*/

    exit stack; /* ===> Exit to display message*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0T-15321 ********************/
end // end TS0T-15321

// Update (U ) row       VCNTNR01
Function TS0T-15322()
   /* ------------------------------------------------------------*/

                 /* UPDATE CONTAINER  ROW*/

       /* - Move STATUS field  to TSHREC.*/
       /* - Update container row in DTRANS.VCNTNR01*/

   /* ------------------------------------------------------------*/

   /* iF TS0TW02.CTEFLAG EQ 'Y';*/
  TSHREC.TSHSTAT = "IT"; /* Container status*/
   /* eLSE;*/
   /* MOVE 'RC' TO TSHREC.TSHSTAT;   /* Container status*/
   /* END;*/

  TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/

  call "IO2590" ("U ", SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== Next Sentence ===========>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-15322"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "T-15322"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* Problem switch*/

    exit stack; /* ===> Exit to display message*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0T-15322 ********************/
end // end TS0T-15322

// Select (SA) set       VCNTNR01
Function TS0T-15323()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VCNTNR01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  set TSHREC empty;

  TSHREC.TSFSHPID = TSIREC.TSFSHPID;

  TS0TW04.TSCFNC = "S1";
  call "IO2590" (TS0TW04, SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-15323"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "T-15323"; /* Process name*/

    exit stack; /* ===> Exit to display message*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0T-15321 ********************/
end // end TS0T-15323

// Fetch  (N1) next      VCPLHD01
Function TS0T-15324()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPL TABLE ROW*/

   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "N1"; /* Move selection to pass record*/

  call "IO2590" (TSGREC, SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* End of selected set*/

    /* ========= Next Sentence ============>*/

  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS0TW01.TS0TWSC3 = "Y"; /* End of set found*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "T-15324"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
      TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/

      TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/
      TS0TM001.XXXPRCNM = "T-15324"; /* ===> Process name*/

      exit stack; /* ===>  Exit to redisplay map*/

    end /* ===> sql  = 100*/

  end /* ===> sql  = 0*/



   /* **                                                        ***/
   /* ********************** End of TS0T-15312 ********************/
end // end TS0T-15324

// Close  (C1) set       VCPLHD01
Function TS0T-15325()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPL ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C1"; /* Move selection to pass record*/

  call "IO2590" (TSGREC, SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "T-15325"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "T-15325"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0T-15314 ********************/
end // end TS0T-15325

// Select (S1) set       VCPLHD01
Function TS0T-15326()
   /* ------------------------------------------------------------*/

                /* SELECT SET OF CPL TABLE ROWS*/

   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "SC"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-15326"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/
    TS0TM001.XXXPRCNM = "T-15326"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0T-15311 ********************/
end // end TS0T-15326

// Fetch  (N1) next      VCPLHD01
Function TS0T-15327()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPL TABLE ROW*/

   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "NC"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* End of selected set*/

    /* ========= Next Sentence ============>*/

  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS0TW01.TS0TWSC2 = "Y"; /* End of set found*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "T-15327"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
      TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/

      TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/
      TS0TM001.XXXPRCNM = "T-15327"; /* ===> Process name*/

      exit stack; /* ===>  Exit to redisplay map*/

    end /* ===> sql  = 100*/

  end /* ===> sql  = 0*/



   /* **                                                        ***/
   /* ********************** End of TS0T-15312 ********************/
end // end TS0T-15327

// Close  (C1) set       VCPLHD01
Function TS0T-15328()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPL ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "CC"; /* Move selection to pass record*/

  call "IO2570" (TSGREC, SQLCA, TSIREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "T-15328"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "T-15328"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0T-15314 ********************/
end // end TS0T-15328

// Select (S2) Set       VCPLHD02
Function TS0T-16000()
   /* ------------------------------------------------------------*/

                 /* SELECT PACKING LIST ROWs - VCPLHD02*/

   /* ------------------------------------------------------------*/

  set TSTREC empty;
  TSTREC.PC3PONBR = TSIREC.PC3PONBR;
  TSTREC.XGPCD = TSIREC.XGPCD;


  call "IO4230" ("S2", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-16000"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/
    TA1REC.TA1TBLKE = TSTREC.TSTKEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TM001.XXXPRCNM = "T-16000"; /* Process name*/

    exit stack; /* ===> Exit to display error message*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0I-16000 ********************/
end // end TS0T-16000

// Fetch  (N2) Next      VCPLHD02
Function TS0T-16100()
   /* ------------------------------------------------------------*/

              /* FETCH ROW FROM DTRANS.VCPLHD02*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("N2", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Row found*/
    /* ========== Next Sentence ==============>*/
  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      TS0TW01.TS0TWSC2 = "Y"; /* end the loop*/
    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end


      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "I-16100"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
      TA1REC.TA1MAP = "TS0IM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0TM001.XXXPRCNM = "I-16100"; /* Process name*/

      exit stack;

    end

  end


   /* **                                                        ***/
   /* ********************** End of TS0I-16100 ********************/
end // end TS0T-16100

// Close  (C2) Set       VCPLHD02
Function TS0T-16200()
   /* ------------------------------------------------------------*/

          /* CLOSE SELECTED SET FROM DTRANS.VCPLHD01*/

   /* ------------------------------------------------------------*/

  call "IO4230" ("C2", SQLCA, TSTREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "I-16200"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TM001.XXXPRCNM = "I-16200"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* === Exit to display error msg*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0t-16200 ********************/
end // end TS0T-16200

// Process CNTNR01 "RC" updates
Function TS0T-16320()
   /* ------------------------------------------------------------*/
   /*  */
   /* Update the Cntnr01 row that are in "It" Status to an*/
   /* "RC" status.  This function is only performed when*/
   /* using the combined option in TS0I.*/
   /*  */
   /* ------------------------------------------------------------*/


  TS0TW02.TS0TWIXN = 1;
  while (TS0TW02.TS0TWIXN <= 10)
    if (TS0TW02.TS0TW_CNTARY[TS0TWIXN] > 0)
      TS7REC.TSHNKCN = TS0TW02.TS0TW_CNTARY[TS0TWIXN];
      TS7REC.TSFSHPID = TS0TW02.TS0TW_CNTSHPARY[TS0TWIXN];
      TS0T-16341();
      TS0TW02.IOCOUNT = TS0TW03.TSCCNT;
      TS0T-16321(); /* ===> Select (SA) set VCntnr01*/
   /* IF TS0TW02.IOCOUNT > 0*/

      TSHREC.TSHSTAT = "IT";
      TS0T-16322(); /* ===> update  row VCntnr01*/
   /* ELSE;*/
   /* MOVE 'RC' TO TSHREC.TSHSTAT;*/
   /* PERFORM TS0T-16322;*/
   /* END;*/
    end
    TS0TW02.TS0TWIXN = TS0TW02.TS0TWIXN + 1;
  end

   /* *********************** End of TS0T-16320 ********************/
end // end TS0T-16320

// Select (SA) set       VCNTNR01
Function TS0T-16321()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VCNTNR01*/

   /* This module select a table row from the CONTAINER table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  set TSHREC empty;

  TSHREC.TSHNKCN = TS0TW02.TS0TW_CNTARY[TS0TWIXN];
  TSHREC.TSFSHPID = TS0TW02.TS0TW_CNTSHPARY[TS0TWIXN];

  TS0TW04.TSCFNC = "SA";
  call "IO2590" (TS0TW04, SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-16321"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "T-16321"; /* Process name*/

    exit stack; /* ===> Exit to display message*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0T-16321 ********************/
end // end TS0T-16321

// Update (U ) row       VCNTNR01
Function TS0T-16322()
   /* ------------------------------------------------------------*/

                 /* UPDATE CONTAINER  ROW*/

       /* - Move STATUS field  to TSHREC.*/
       /* - Update container row in DTRANS.VCNTNR01*/

   /* ------------------------------------------------------------*/


  TSHREC.XXX-USER-ID = COMMAREA.CAUSERID;
  TSHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move in change date*/
  TSHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move in change time*/

  TS0TW04.TSCFNC = "U ";
  call "IO2590" (TS0TW04, SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* Update table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== Next Sentence ===========>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-16322"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "T-16322"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* Problem switch*/

    exit stack; /* ===> Exit to display message*/

  end


   /* **                                                        ***/
   /* ********************** End of TS0T-16322 ********************/
end // end TS0T-16322

// Process CNTNR01 "RC" updates
Function TS0T-16330()
   /* ------------------------------------------------------------*/
   /*  */
   /* Update the VSHPHD01 row that are in "It" Status to an*/
   /* "RC" status.  This function is only performed when*/
   /* using the combined option in TS0I.*/
   /*  */
   /* ------------------------------------------------------------*/


  TS0TW02.TS0TWIXN = 1;
  while (TS0TW02.TS0TWIXN <= 20)
    if (TS0TW02.TS0TW_SHPARY[TS0TWIXN] > 0)
      TSHREC.TSFSHPID = TS0TW02.TS0TW_SHPARY[TS0TWIXN];
      TS0T-16351();
      TS0TW02.IOCOUNT = TS0TW04.TSCCNT;
      TS0T-16331(); /* ===> Select (S ) set VSHPHD01*/
   /* IF TS0TW02.IOCOUNT > 0*/

      TSFREC.YSSCD = "IT";
      TS0T-16332(); /* ===> update  row VSHPHD01*/
   /* ELSE;*/
   /* MOVE 'RC' TO TSFREC.YSSCD;*/
   /* PERFORM TS0T-16332;*/
   /* END;*/
    end
    TS0TW02.TS0TWIXN = TS0TW02.TS0TWIXN + 1;
  end

   /* ********************** End of TS0T-16320 ********************/
end // end TS0T-16330

// Select (S ) unique    VSHPHD01
Function TS0T-16331()
   /* ------------------------------------------------------------*/

                /* SELECT UNIQUE SHPHD01 TABLE ROW*/

   /* ------------------------------------------------------------*/

  set TSFREC empty;

  TSFREC.TSFSHPID = TS0TW02.TS0TW_SHPARY[TS0TWIXN];
  TSGREC.TSNFNC = "S "; /* Move selection to pass record*/

  call "IO2540" (TSGREC, SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-16331"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/
    TS0TM001.XXXPRCNM = "T-16331"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0T-16331 ********************/
end // end TS0T-16331

// Update (U ) Row       VSHPHD01
Function TS0T-16332()
  TS0TW01.TS0TWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/

  TSFREC.ZZZCHGDT = TS0TW01.TS0TWCDT; /* change date*/
   /* MOVE TS0TW01.TS0TWCDT TO TSFREC.ZZZSDT;/* Set up date*/
  TSFREC.TS-ADVN-SHP-DT = TS0TW01.TS0TWCDT;
  TSFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
   /* MOVE XX0XW01.XX0XWTIM TO TSFREC.ZZZSTM;/* Set up time*/
   /* MOVE 0 TO TSFREC.ZZZCHGCT;       /* Change count*/
  TSFREC.XXX-USER-ID = COMMAREA.CAUSERID;

  call "IO2540" ("U ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-16332"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name**********/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

    TS0TM001.XXXPRCNM = "T-16332"; /* Process name*/

    exit stack;

  end


end // end TS0T-16332

// Select (S ) unique    VSHPHD01
Function TS0T-16334()
   /* ------------------------------------------------------------*/

                /* SELECT UNIQUE SHPHD01 TABLE ROW*/

   /* ------------------------------------------------------------*/

  set TSFREC empty;

  TSFREC.TSFSHPID = TSIREC.TSFSHPID;
  TSGREC.TSNFNC = "S "; /* Move selection to pass record*/

  call "IO2540" (TSGREC, SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(418);
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-16334"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = TSIREC.TSIKEY; /* Table key*/
    TS0TM001.XXXPRCNM = "T-16334"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> Exit to re-display map*/

  end

   /* **                                                        ***/
   /* ********************** End of TS0T-16331 ********************/
end // end TS0T-16334

// Select (SC) set       VSHPHD01
Function TS0T-16341()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VSHPHD01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/


  set TS0TW03 empty;
  TS0TW03.TSCFNC = "SC";
  call "IO5240" (TS0TW03, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-16341"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "T-16341"; /* Process name*/

    exit stack; /* ===> Exit to display message*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0T-15321 ********************/
end // end TS0T-16341

// Select (SC) set       VCNTNR01
Function TS0T-16351()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VCNTNR01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/


  set TS0TW04 empty;
  TS0TW04.TSCFNC = "SC";
  call "TS2250" (TS0TW04, SQLCA, TSHREC) {isNoRefresh = yes, isExternal = yes}; /* COUNT table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-16351"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCNTNR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "T-16351"; /* Process name*/

    exit stack; /* ===> Exit to display message*/

  end



   /* **                                                        ***/
   /* ********************** End of TS0T-15321 ********************/
end // end TS0T-16351

// Check the FROM application
Function TS0T000()
   /* ------------------------------------------------------------*/
   /* Determine whether control came from an allowed application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAFROMAP == "TS0I") /* From allowed application*/

     /* Obtain the current date for this application*/

    XX0XS01(); /* Obtain current date*/
    TS0TW01.TS0TWCDT = XX0XW01.XX0XWDAT; /* Move CCCYYMMDD*/
    TS0TW01.TS0TWMYY = TS0TW01.TS0TWYY; /* set up map date*/
    TS0TW01.TS0TWMMM = TS0TW01.TS0TWMM;
    TS0TW01.TS0TWMDD = TS0TW01.TS0TWDD;

     /* Add 3 days to current date for default domestic ETD*/

    set TA2REC empty; /* clear record*/
    TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
    TA2REC.TA2GRGA = TS0TW01.TS0TWCMD; /* begn date*/
    TA2REC.TA2DYAOD = 3; /* add 3 days to todays date*/

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

    if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
      TS0TW01.TS0TWDDT = TA2REC.TA2GRGA; /* move default dom date*/
    end


  else

    /* ------------------------------------------------------------*/
     /* Indicate invalid transfer and return to FROM application.*/
    /* ------------------------------------------------------------*/

    XSNOWAY(); /* Invalid transfer was attempted*/

  end


end // end TS0T000

// Shipment Header Add
Function TS0T001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map for header add.*/
   /* 2) Otherwise, if specified, display the second map for*/
          /* charges add.*/
   /* 3) Otherwise, if specified, display the third map for*/
          /* address add.*/
   /* 4) Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (TS0TW01.TS0TWMAP == "1") /* Map 1 was requested*/
    TS0T100(); /* Display Shipment Header Add map*/
  else
    if (TS0TW01.TS0TWMAP == "2" /* Map 2 was requested*/
     && TS0TW01.TS0TWFSW == "C") /* and charges function*/
      TS0T200(); /* Display Shipment Charges Add map*/
    else
      if (TS0TW01.TS0TWMAP == "3" /* Map 3 was selected*/
       && TS0TW01.TS0TWFSW == "A") /* and address function*/
        TS0T300(); /* Display Shipment Address Add map*/
      else
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1PGMNM = "TS0T001 "; /* Process name*/
        TA1REC.TA1LOC = "MAIN APPLICATION PROCESS";
        TA1REC.TA1MAP = TS0TW01.TS0TWMAP; /* Map name*/
        SQLCA.SQLCAREC = "MAP NUMBER REQUESTED IS INVALID";

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        XSPF4(); /* Exit to Master Menu*/

      end
    end
  end

end // end TS0T001

// Shipment Header Add Main Map
Function TS0T100()
   /* ------------------------------------------------------------*/

               /* SHIPMENT HEADER ADD MAIN MAP*/

   /* This is the process used to display the shipment*/
   /* header add main map.*/
   /* Processing always returns to the top of this process and*/
   /* falls through to subordinate processes until an error is*/
   /* found or a valid request is processed. Sequence is as*/
   /* follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0T110(); /* Format and display the map*/

  TS0T120(); /* Check attention identifier*/

  TS0T130(); /* Reset fields to normal intensity*/

  TS0T140(); /* Verify the entered data*/

  TS0T150(); /* Process valid input request*/


end // end TS0T100

// Format and display the map
Function TS0T110()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* If no error to display:*/
     /* 1) clear the map.*/
     /* 2) format the selected data.*/
   /* Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0TW01.TS0TWPSW == "N" /* No error message to display*/
   && TS0TW01.TS0TWFSW != "C" 
   /* and not comming back from another add*/
   && TS0TW01.TS0TWFSW != "A")
                                   /* and not comming back from another add*/

    if (TSWREC.TSWDOMFL == "Y") /* If this is a domestic shipment*/

       /* ** Default the appropriate fields ***/

      TS0TM001.TSFSHPNB = TS0TW01.TS0TWSNB; /* shipment nbr MMDD*/
      TS0TM001.TSFDPRTA = TS0TW01.TS0TWCMD; /* current date ATD*/
      TS0TM001.TSFDESTE = TS0TW01.TS0TWDDT; /* curr date +3 ETD*/
      TS0TM001.TSEDEST = "    ";
      TS0TM001.TSEDEST = "MEM ";
      TS0TM001.TS0TMDED = "MEMPHIS";
      TS0TM001.XWHCD = "51";
      if ("51" in XWHTBL.XWHCD)
        TS0TM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      end
      TS0TM001.YSTCD = "DD";
      if ("DD" in YSTTBL.YSTCD)
        TS0TM001.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
      end
      TS0TM001.YDTCD = "LD";
      if ("LD" in YDTTBL.YDTCD)
        TS0TM001.YDTSDESC = YDTTBL.YDTSDESC[sysVar.arrayIndex];
      end


    end

    TS0TM001.TSFNTRDT = TS0TW01.TS0TWCMD; /* move in notify rcvd dt*/
    TS0TM001.XGPCD = TSWREC.XGPCD; /* move in gpc*/
    TS0TM001.TSFSHPID = TSWREC.TSFSHPID; /* move in shipment id*/
    TSFREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shipment id*/
    TSFREC.YSSCD = "IP"; /* save shipment status*/
    TS0TM001.YSSCD = "IP"; /* move in status code*/
    if ("IP" in YSSTBL.YSSCD)
      TS0TM001.YSSSDESC = YSSTBL.YSSSDESC[sysVar.arrayIndex];
    end /* status descr.*/

    if (TSWREC.TSWADDMO == "1") /* summary title*/
      TS0TM001.TS0TMFUN = "SUMMARY  ";
    else
      if (TSWREC.TSWADDMO == "2") /* complete title*/
        TS0TM001.TS0TMFUN = "COMPLETE ";
      else
        if (TSWREC.TSWADDMO == "3") /* tentative title*/
          TS0TM001.TS0TMFUN = "TENTATIVE";
        else
          if (TSWREC.TSWADDMO == "4") /* tentative title*/
            TS0TM001.TS0TMFUN = "COMBINE  ";
          end
        end
      end
    end

  end

  set TS0TM001.TSFRECPT skip, invisible; /* protect last receipt date*/

  /* IF EZEMNO NE 0;                  /* Error message to display*/
  /* SET TS0TM001 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  TS0TM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse TS0TM001 ;

  TS0TW01.TS0TWPSW = "N"; /* Reset error switch*/

  TS0T111(); /* check for ? inquiry by user*/


end // end TS0T110

// Check for ? inquiry by user
Function TS0T111()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0TM001.XWHCD == "?" /* if any ? entered*/
   || TS0TM001.XNDCD == "?" 
   || TS0TM001.YSTCD == "?" 
   || TS0TM001.YDTCD == "?" 
   || TS0TM001.YPYCD == "?" 
   || TS0TM001.YSHCD == "?")

    if (TS0TM001.XWHCD == "?") /* if ? in warehouse type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                WAREHOUSE "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXWH01(); /* perform warehouse type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the warehouse  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0TM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* move code*/
        TS0TM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* move name*/
      else
        TS0TM001.XWHCD = " "; /* clear fields*/
        TS0TM001.XWHABRV = " ";
      end
    end

    if (TS0TM001.XNDCD == "?") /* if ? in Nike department field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                NIKE DEPT"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXND01(); /* perform Nike department window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the department **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0TM001.XNDCD = XNDTBL.XNDCD[XX0XWPIX]; /* move code*/
        TS0TM001.XNDDESC = XNDTBL.XNDDESC[XX0XWPIX]; /* move name*/
      else
        TS0TM001.XNDCD = " "; /* clear fields*/
        TS0TM001.XNDDESC = " ";
      end
    end

    if (TS0TM001.YSTCD == "?") /* if ? in shipment type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              SHIPMENT TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYST01(); /* perform shipment type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the shipment   **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0TM001.YSTCD = YSTTBL.YSTCD[XX0XWPIX]; /* move code*/
        TS0TM001.YSTSDESC = YSTTBL.YSTSDESC[XX0XWPIX]; /* move name*/
      else
        TS0TM001.YSTCD = " "; /* clear fields*/
        TS0TM001.YSTSDESC = " ";
      end
    end

    if (TS0TM001.YDTCD == "?") /* if ? in delivery type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              DELIVERY TYPE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYDT01(); /* perform delivery type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the delivery   **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0TM001.YDTCD = YDTTBL.YDTCD[XX0XWPIX]; /* move code*/
        TS0TM001.YDTSDESC = YDTTBL.YDTSDESC[XX0XWPIX]; /* move name*/
      else
        TS0TM001.YDTCD = " "; /* clear fields*/
        TS0TM001.YDTSDESC = " ";
      end
    end

    if (TS0TM001.YPYCD == "?") /* if ? in payment type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                PAYMENT ID"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYPY01(); /* perform payment type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the payment    **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0TM001.YPYCD = YPYTBL.YPYCD[XX0XWPIX]; /* move code*/
        TS0TM001.YPYSDESC = YPYTBL.YPYSDESC[XX0XWPIX]; /* move name*/
      else
        TS0TM001.YPYCD = " "; /* clear fields*/
        TS0TM001.YPYSDESC = " ";
      end
    end

    if (TS0TM001.YSHCD == "?") /* if ? in shipment hold field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                HOLD CODE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPYSH01(); /* perform shipment hold window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the shipment   **/
       /* *  hold table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0TM001.YSHCD = YSHTBL.YSHCD[XX0XWPIX]; /* move code*/
        TS0TM001.YSHSDESC = YSHTBL.YSHSDESC[XX0XWPIX]; /* move name*/
      else
        TS0TM001.YSHCD = " "; /* clear fields*/
        TS0TM001.YSHSDESC = " ";
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0TW01.TS0TWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0T111

// Check attention identifier
Function TS0T120()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2 /* PA2 was pressed*/
   || converseVar.eventKey is pf3) /* of PF3 was pressed*/
    COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/

    XSTSS01(); /* transfer to application*/

    TS0TW01.TS0TWPSW = "Y"; /* if trans fails indicate error*/
    TS0TM001.XXXPRCNM = "TS0T120"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf17  /* and PF17 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/
    TS0TM001.XXXPRCNM = "TS0T120"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0T120

// Reset highlighted fields
Function TS0T130()
   /* ------------------------------------------------------------*/

              /* RESET HIGHLIGHTED FIELDS*/

   /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0TM001.TSFBOL initialAttributes; /* Reset all map fields*/
  set TS0TM001.TSFRWRDR initialAttributes;
  set TS0TM001.TSACARCD initialAttributes;
  set TS0TM001.TS5CRAFT initialAttributes;
  set TS0TM001.TSFSHPNB initialAttributes;
  set TS0TM001.TSEORIG initialAttributes;
  set TS0TM001.TSFDPRTA initialAttributes;
  set TS0TM001.TSFDPRTE initialAttributes;
  set TS0TM001.TSFDSCHG initialAttributes;
  set TS0TM001.TSFDSCHA initialAttributes;
  set TS0TM001.TSFDSCHE initialAttributes;
  set TS0TM001.TSEDEST initialAttributes;
  set TS0TM001.TSFDESTA initialAttributes;
  set TS0TM001.TSFDESTE initialAttributes;
  set TS0TM001.XWHCD initialAttributes;
  set TS0TM001.TSFRECPT initialAttributes;
  set TS0TM001.XNDCD initialAttributes;
  set TS0TM001.YSTCD initialAttributes;
  set TS0TM001.TSFNTRDT initialAttributes;
  set TS0TM001.YDTCD initialAttributes;
  set TS0TM001.TSFBOLDT initialAttributes;
  set TS0TM001.YPYCD initialAttributes;
  set TS0TM001.TSFCCLDT initialAttributes;
  set TS0TM001.YSHCD initialAttributes;
  set TS0TM001.TSFRELDT initialAttributes;
  set TS0TM001.TS-TOT-COLL-SCHG initialAttributes;
  set TS0TM001.TS-TOT-PPD-SCHG initialAttributes;
  set TS0TM001.TSFDWBK initialAttributes;
  set TS0TM001.TSFTKG initialAttributes;
  set TS0TM001.TSFNILRF initialAttributes;
  set TS0TM001.TSFTCBM initialAttributes;


end // end TS0T130

// Verify the entered data
Function TS0T140()
   /* ------------------------------------------------------------*/

                  /* VERIFY THE ENTERED DATA*/

   /* The edits for this screen will be performed by screen*/
   /* groupings due to the screen edits size:*/

      /* 1) Edit Grouping 1 - edits lower portion of screen*/
         /* beginning with total charges and drawback.*/
      /* 2) Edit Grouping 2 - edits portion of screen*/
         /* beginning with total cleared customs date and*/
         /* payment id code.*/
      /* 3) Edit Grouping 3 - edits portion of screen*/
         /* beginning with notification received date.*/
      /* 4) Edit Grouping 4 - edits portion of screen*/
         /* beginning with warehouse code.*/
      /* 5) Edit Grouping 5 - edits portion of screen*/
         /* beginning with discharge location*/
      /* 6) Edit Grouping 6 - edits portion of screen*/
         /* beginning with origin location.*/
      /* 7) Edit Grouping 7 - edits top portion of screen*/
         /* including the BOL, FWDR, CARR, CRAFT, and SHP.*/
      /* 8) If destination estimated date was not entered*/
         /* perform calculation of destination est data.*/
      /* 9) If no errors perform behind the scene updates to*/
         /* TSFREC.*/

   /* ------------------------------------------------------------*/

  TS0T141(); /* perform edit grouping 1*/

  TS0T142(); /* perform edit grouping 2*/

  TS0T143(); /* perform edit grouping 3*/

  TS0T144(); /* perform edit grouping 4*/

  TS0T145(); /* perform edit grouping 5*/

  TS0T146(); /* perform edit grouping 6*/

  TS0T147(); /* perform edit grouping 7*/

  if (TS0TW01.TS0TWPSW == "N") /* If no errors found*/
    TS0T148();
                                   /* perform overlap and calculation edits*/
  end

  if (TS0TW01.TS0TWPSW == "N") /* If no errors found*/
    TS0T149(); /* perform behind the scenes updates*/
  end


end // end TS0T140

// Edit grouping 1
Function TS0T141()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 1*/

         /* Edit;*/
           /* 1) comments*/
           /* 2) cubic meters*/
           /* 3) nil reference number - no editing required*/
           /* 4) kilograms*/
           /* 5) drawback*/
           /* 6) total charges prepaid*/
           /* 7) total charges collect*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) comments*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFCMNT1 == " " /* if comment line 1 blank*/
   && TS0TM001.TSFCMNT2 != " ") /* and comment line 2 not blank*/
    TS0TM001.TSFCMNT1 = TS0TM001.TSFCMNT2; /* move to line 1*/
    TS0TM001.TSFCMNT2 = " "; /* clear comment line 2*/
  end
  TS0TW01.TS0TWTX1 = TS0TM001.TSFCMNT1; /* save comments*/
  TS0TW01.TS0TWTX2 = TS0TM001.TSFCMNT2;

   /* ------------------------------------------------------------*/
           /* 2) cubic meters*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFTCBM != 0) /* if total cubic meters entered*/
    if (TS0TM001.TSFTCBM > 0) /* if number entered is gt 0*/
      TSFREC.TSFTCBM = TS0TM001.TSFTCBM; /* save kilograms*/
    else /* else an error has occurred*/
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T141"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0TM001.TSFTCBM cursor, modified, bold; /* highlight*/
    end
  else
    TSFREC.TSFTCBM = 0; /* set to zero*/
  end

   /* ------------------------------------------------------------*/
           /* 3) nil reference number - no editing required*/
   /* ------------------------------------------------------------*/

  TSFREC.TSFNILRF = TS0TM001.TSFNILRF; /* save nil reference #*/

   /* ------------------------------------------------------------*/
           /* 4) kilograms*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFTKG != 0) /* if total kilograms entered*/
    if (TS0TM001.TSFTKG > 0) /* if number entered is gt 0*/
      TSFREC.TSFTKG = TS0TM001.TSFTKG; /* save kilograms*/
    else /* else an error has occurred*/
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T141"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0TM001.TSFTKG cursor, modified, bold; /* highlight*/
    end
  else
    TSFREC.TSFTKG = 0; /* set to zero*/
  end

   /* ------------------------------------------------------------*/
           /* 5) drawback*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFDWBK != " ") /* if drawback entered*/
    if (TS0TM001.TSFDWBK == "Y" /* if valid drawback entered*/
     || TS0TM001.TSFDWBK == "N")
      TSFREC.TSFDWBK = TS0TM001.TSFDWBK; /* save drawback*/
    else /* else an error has occurred*/
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T141"; /* process name*/
      converseLib.validationFailed(46); /* must equal 'y' or 'n'*/
      set TS0TM001.TSFDWBK cursor, modified, bold; /* highlight*/
    end
  else
    TSFREC.TSFDWBK = "N"; /* default to no*/
  end

   /* ------------------------------------------------------------*/
           /* 6) total charges pre-paid*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TS-TOT-PPD-SCHG != 0) /* if total charges   entered*/
    if (TS0TM001.TS-TOT-PPD-SCHG > 0) /* if number entered is gt 0*/
      TSFREC.TS-TOT-PPD-SCHG = TS0TM001.TS-TOT-PPD-SCHG;
    else /* else an error has occurred*/
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T141"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0TM001.TS-TOT-PPD-SCHG cursor, modified, bold; /* highlight*/
    end
  else
    TSFREC.TS-TOT-PPD-SCHG = 0; /* default to zero*/
  end


   /* ------------------------------------------------------------*/
           /* 7) total charges collect*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TS-TOT-COLL-SCHG != 0) /* if total charges   entered*/
    if (TS0TM001.TS-TOT-COLL-SCHG > 0) /* if number entered is gt 0*/
      TSFREC.TS-TOT-COLL-SCHG = TS0TM001.TS-TOT-COLL-SCHG;
    else /* else an error has occurred*/
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T141"; /* process name*/
      converseLib.validationFailed(76); /* number must be > 0*/
      set TS0TM001.TS-TOT-COLL-SCHG cursor, modified, bold; /* highlight*/
    end
  else
    TSFREC.TS-TOT-COLL-SCHG = 0; /* default to zero*/
  end


end // end TS0T141

// Edit grouping 2
Function TS0T142()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 2*/

         /* Edit;*/
           /* 1) warehouse release date*/
           /* 2) hold code*/
           /* 3) cleared customs date*/
           /* 4) payment id code*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) warehouse release date*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFRELDT != " ") /* if warehouse release date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFRELDT; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFRELDT = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFRELDT cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T142"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFRELDT = 0; /* default the date*/
  end

   /* ------------------------------------------------------------*/
           /* 2) hold code*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.YSHCD == " ") /* if hold is blank*/
    TS0TM001.YSHSDESC = " "; /* clear description*/
    TSFREC.YSHCD = " "; /* default code*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0TM001.YSHCD in YSHTBL.YSHCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YSHTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(78); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T142"; /* Process name*/
      TS0TM001.YSHSDESC = " "; /* Clear description*/
      set TS0TM001.YSHCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0TM001.YSHSDESC = YSHTBL.YSHSDESC[sysVar.arrayIndex];
      TSFREC.YSHCD = YSHTBL.YSHCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
           /* 3) cleared customs date*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFCCLDT != " ") /* if customs cleared date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFCCLDT; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFCCLDT = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFCCLDT cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T142"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFCCLDT = 0; /* default the date*/
  end

   /* ------------------------------------------------------------*/
           /* 4) payment id code*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.YPYCD == " ") /* if payment id is blank*/
    TS0TM001.YPYSDESC = " "; /* clear description*/
    TSFREC.YPYCD = " "; /* default the code*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0TM001.YPYCD in YPYTBL.YPYCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YPYTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(79); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T142"; /* Process name*/
      TS0TM001.YPYSDESC = " "; /* Clear description*/
      set TS0TM001.YPYCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0TM001.YPYSDESC = YPYTBL.YPYSDESC[sysVar.arrayIndex];
      TSFREC.YPYCD = YPYTBL.YPYCD[sysVar.arrayIndex]; /* save code*/
    end
  end


end // end TS0T142

// Edit grouping 3
Function TS0T143()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 3*/

          /* Edit;*/
            /* 1) bill of lading date*/
            /* 2) delivery type code*/
            /* 3) notification received date*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
            /* 1) bill of lading date*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFBOLDT != " ") /* if bill of lading date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFBOLDT; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      if (TSFREC.TSFBOLDT != TA2REC.TA2GRGGN) /* if bol newly entered*/
        TS0TW01.TS0TWFEX = "N"; /* not final exit*/
      end
      TSFREC.TSFBOLDT = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFBOLDT cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T143"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFBOLDT = 0; /* default the date*/
    TS0TW01.TS0TWFEX = "Y"; /* indicate ok for final exit*/
  end

   /* ------------------------------------------------------------*/
            /* 2) delivery type code*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.YDTCD == " ") /* if delivery type is blank*/
    TS0TM001.YDTSDESC = " "; /* clear description*/
    TSFREC.YDTCD = " "; /* default codeption*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0TM001.YDTCD in YDTTBL.YDTCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YDTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(80); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T143"; /* Process name*/
      TS0TM001.YDTSDESC = " "; /* Clear description*/
      set TS0TM001.YDTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0TM001.YDTSDESC = YDTTBL.YDTSDESC[sysVar.arrayIndex];
      TSFREC.YDTCD = YDTTBL.YDTCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
            /* 3) notification received date*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFNTRDT != " ") /* if notification date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFNTRDT; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/

         /* ******** get current date **********/
      XX0XS01();
      TS0TW01.TS0TWCDT = XX0XW01.XX0XWDAT; /* save current date*/
      /* ------------------------------------------------------------*/
       /* Verify that date is ge current date*/
      /* ------------------------------------------------------------*/
      if (TA2REC.TA2GRGGN > TS0TW01.TS0TWCDT) /* If date lt current date*/
        converseLib.validationFailed(276); /* must be ge curr date nation*/
        TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
        TS0TM001.XXXPRCNM = "TS0T143"; /* Process name*/
        set TS0TM001.TSFNTRDT cursor, modified, bold; /* highlight field*/
      else
        TSFREC.TSFNTRDT = TA2REC.TA2GRGGN; /* save date*/
      end

    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFNTRDT cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T143"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    set TS0TM001.TSFNTRDT cursor, modified, bold; /* highlight field*/
    TS0TM001.XXXPRCNM = "TS0T143"; /* process name*/
    converseLib.validationFailed(77); /* invalid date entered*/
  end


end // end TS0T143

// Edit grouping 4
Function TS0T144()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 4*/

          /* Edit;*/
            /* 1) shipment type code*/
            /* 2) nike department code*/
            /* 3) warehouse code*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
            /* 1) shipment type code*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.YSTCD == " ") /* if shipment type is blank*/
    TS0TM001.YSTSDESC = " "; /* clear description*/
    TSFREC.YSTCD = " "; /* default the code*/
    converseLib.validationFailed(59); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM001.XXXPRCNM = "TS0T144"; /* Process name*/
    set TS0TM001.YSTCD cursor, modified, bold; /* highlight field*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0TM001.YSTCD in YSTTBL.YSTCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YSTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(59); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T144"; /* Process name*/
      TS0TM001.YSTSDESC = " "; /* Clear description*/
      set TS0TM001.YSTCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0TM001.YSTSDESC = YSTTBL.YSTSDESC[sysVar.arrayIndex];
      TSFREC.YSTCD = YSTTBL.YSTCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
            /* 2) nike department code*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.XNDCD == " ") /* if Nike department is blank*/
    TS0TM001.XNDDESC = " "; /* clear description*/
    TSFREC.XNDCD = " "; /* default code*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0TM001.XNDCD in XNDTBL.XNDCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XNDTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(81); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T144"; /* Process name*/
      TS0TM001.XNDDESC = " "; /* Clear description*/
      set TS0TM001.XNDCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0TM001.XNDDESC = XNDTBL.XNDDESC[sysVar.arrayIndex];
      TSFREC.XNDCD = XNDTBL.XNDCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
            /* 3) warehouse code*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.XWHCD == " ") /* if warehouse code is blank*/
    TS0TM001.XWHABRV = " "; /* clear description*/
    TSFREC.XWHCD = " "; /* default code*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0TM001.XWHCD in XWHTBL.XWHCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XWHTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(82); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T144"; /* Process name*/
      TS0TM001.XWHABRV = " "; /* Clear description*/
      set TS0TM001.XWHCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0TM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      TSFREC.XWHCD = XWHTBL.XWHCD[sysVar.arrayIndex]; /* save code*/
    end
  end


end // end TS0T144

// Edit grouping 5
Function TS0T145()
   /* -------------------------------------------------------------*/

                   /* EDIT GROUPING 5*/

         /* Edit;*/
           /* 1) destination estimated date*/
           /* 2) destination actual date*/
           /* 3) destination location*/
           /* 4) discharge estimated date*/
           /* 5) discharge actual date*/
           /* 6) discharge location*/

   /* -------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) destination estimated date*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFDESTE != " ") /* if est destination date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFDESTE; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFDESTE = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFDESTE cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T145"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFDESTE = 0; /* default date*/
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    set TS0TM001.TSFDESTE cursor, modified, bold; /* highlight field*/
    TS0TM001.XXXPRCNM = "TS0T145"; /* process name*/
    converseLib.validationFailed(57); /* invalid date entered*/
  end

   /* ------------------------------------------------------------*/
           /* 2) destination actual date*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFDESTA != " ") /* if act destination date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFDESTA; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFDESTA = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFDESTA cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T145"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFDESTA = 0; /* default date*/
  end

   /* ------------------------------------------------------------*/
           /* 3) destination location*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSEDEST == " ") /* if destination not entered*/
    TSFREC.TSEDEST = " "; /* default dest*/
    converseLib.validationFailed(40); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM001.XXXPRCNM = "TS0T145"; /* Process name*/
    TS0TM001.TS0TMDED = " "; /* Clear description*/
    set TS0TM001.TSEDEST cursor, modified, bold; /* highlight field*/
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TS0TM001.TSEDEST; /* move in code*/
    TS0TS03(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
     || TSCREC.XXXSTAT == "I")    
      converseLib.validationFailed(40); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T145"; /* Process name*/
      TS0TM001.TS0TMDED = " "; /* Clear description*/
      set TS0TM001.TSEDEST cursor, modified, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        /* MLATHA*/
        XX0XS01(); /* Get current date*/
        if ((TSCREC.XCTCD == "USA" || TSCREC.XCTCD == "CANA")
         && XX0XW01.XX0XWDAT >= 20011203) /* Expected US-go-live dt*/
          converseLib.validationFailed(0452); /* Display error message*/
          TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
          TS0TM001.XXXPRCNM = "TS0T145"; /* Process name*/
          TS0TM001.TS0TMDED = " "; /* Clear description*/
          set TS0TM001.TSEDEST cursor, modified, bold; /* highlight field*/
        else
          TS0TM001.TS0TMDED = TSCREC.XXXCITY;
          TS0TW01.TS0TWDCT = TSCREC.XXXCITY;
          TS0TW01.TS0TWDST = TSCREC.XSTCD;
          TS0TW01.TS0TWDCO = TSCREC.XCTCD;
          TSFREC.TSEDEST = TSCREC.TSCLOCCD; /* save code*/
        end
        /* mlatha*/
      end
    end
  end

   /* ------------------------------------------------------------*/
           /* 4) discharge estimated date*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFDSCHG != " " /* if discharge location is entered*/
   && TS0TM001.TSFDSCHE == " ") /* and estimated date is not entered*/
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    set TS0TM001.TSFDSCHE cursor, modified, bold; /* highlight field*/
    TS0TM001.XXXPRCNM = "TS0T145"; /* process name*/
    converseLib.validationFailed(57); /* date is missing or invalid*/
  else
    TSFREC.TSFDSCHE = 0; /* default date*/
  end

  if (TS0TM001.TSFDSCHE != " ") /* if est discharge date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFDSCHE; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFDSCHE = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFDSCHE cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T145"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFDSCHE = 0; /* default date*/
  end

   /* ------------------------------------------------------------*/
           /* 5) discharge actual date*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFDSCHA != " ") /* if act discharge date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFDSCHA; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFDSCHA = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFDSCHA cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T145"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFDSCHA = 0; /* default date*/
  end

   /* ------------------------------------------------------------*/
           /* 6) discharge location*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFDSCHG == " ") /* if discharge not entered*/
    TS0TM001.TS0TMDID = " "; /* Clear description*/
    TSFREC.TSFDSCHG = " "; /* default*/
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TS0TM001.TSFDSCHG; /* move in code*/
    TS0TS03(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
     || TSCREC.XXXSTAT == "I")    
      converseLib.validationFailed(83); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T145"; /* Process name*/
      TS0TM001.TS0TMDID = " "; /* Clear description*/
      set TS0TM001.TSFDSCHG cursor, modified, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        TS0TM001.TS0TMDID = TSCREC.XXXCITY;
        TS0TW01.TS0TWICT = TSCREC.XXXCITY;
        TS0TW01.TS0TWIST = TSCREC.XSTCD;
        TS0TW01.TS0TWICO = TSCREC.XCTCD;
        TSFREC.TSFDSCHG = TSCREC.TSCLOCCD; /* save code*/
      end
    end
  end


end // end TS0T145

// Edit grouping 6
Function TS0T146()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 6*/

         /* Edit;*/
           /* 1) origin estimated date*/
           /* 2) origin actual date*/
           /* 3) origin location*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) origin estimated date*/
   /* ------------------------------------------------------------*/

  if (TSWREC.TSWADDMO == "3" /* if tentative shipment*/
   && TS0TM001.TSFDPRTE == " ") /* and estimated date is not entered*/
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    set TS0TM001.TSFDPRTE cursor, modified, bold; /* highlight field*/
    TS0TM001.XXXPRCNM = "TS0T146"; /* process name*/
    converseLib.validationFailed(57); /* date is missing or invalid*/
  end

  if (TS0TM001.TSFDPRTE != " ") /* if est departure date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFDPRTE; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFDPRTE = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFDPRTE cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T146"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFDPRTE = 0; /* default date*/
  end

   /* ------------------------------------------------------------*/
           /* 2) origin actual date*/
   /* ------------------------------------------------------------*/

  if (TSWREC.TSWADDMO != "3" /* if tentative shipment*/
   && TS0TM001.TSFDPRTA == " ") /* and actual date is not entered*/
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    set TS0TM001.TSFDPRTA cursor, modified, bold; /* highlight field*/
    TS0TM001.XXXPRCNM = "TS0T146"; /* process name*/
    converseLib.validationFailed(57); /* date is missing or invalid*/
  end

  if (TS0TM001.TSFDPRTA != " ") /* if act departure date entered*/
    TS0TW01.TS0TWDTE = TS0TM001.TSFDPRTA; /* move to working date*/
    TS0TS02(); /* verify entered date*/
    if (TA2REC.TA2RTNCD == 0000) /* if return code was OK*/
      TSFREC.TSFDPRTA = TA2REC.TA2GRGGN; /* save date*/
    else
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFDPRTA cursor, modified, bold; /* highlight field*/
      TS0TM001.XXXPRCNM = "TS0T146"; /* process name*/
      converseLib.validationFailed(77); /* invalid date entered*/
    end
  else
    TSFREC.TSFDPRTA = 0; /* default date*/
  end

   /* ------------------------------------------------------------*/
           /* 3) origin location*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSEORIG == " ") /* if origin not entered*/
    TSFREC.TSEORIG = " "; /* default*/
    TS0TM001.TS0TMORD = " "; /* Clear description*/
    if (TSWREC.TSWDOMFL == "Y") /* If this is domestic shipment*/
      TSFREC.TSEORIG = " "; /* save code - orig not required*/
    else
      converseLib.validationFailed(41); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T146"; /* Process name*/
      set TS0TM001.TSEORIG cursor, modified, bold; /* highlight field*/
    end
  else
    set TSCREC empty;
    TSCREC.TSCLOCCD = TS0TM001.TSEORIG; /* move in code*/
    TS0TS03(); /* select location*/
    if (SQLCA.VAGen_SQLCODE == 100 /* location is invalid*/
     || TSCREC.XXXSTAT == "I")    
      converseLib.validationFailed(41); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T146"; /* Process name*/
      TS0TM001.TS0TMORD = " "; /* Clear description*/
      set TS0TM001.TSEORIG cursor, modified, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == 0) /* location is valid*/
        TS0TM001.TS0TMORD = TSCREC.XXXCITY;
        TS0TW01.TS0TWOCT = TSCREC.XXXCITY;
        TS0TW01.TS0TWOST = TSCREC.XSTCD;
        TS0TW01.TS0TWOCO = TSCREC.XCTCD;
        TSFREC.TSEORIG = TSCREC.TSCLOCCD; /* save code*/
      end
    end
  end


end // end TS0T146

// Edit grouping 7
Function TS0T147()
   /* ------------------------------------------------------------*/

                   /* EDIT GROUPING 7*/

         /* Edit;*/
           /* 1) shipment*/
           /* 2) craft*/
           /* 3) carrier*/
           /* 4) forwarder*/
           /* 5) bill of lading*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) shipment*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFSHPNB == " ") /* If shipment number blank*/
    converseLib.validationFailed(59); /* error message*/
    TSFREC.TSFSHPNB = " "; /* default*/
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
    set TS0TM001.TSFSHPNB cursor, modified, bold; /* highlight field*/
  else
    TSFREC.TSFSHPNB = TS0TM001.TSFSHPNB; /* save number*/
    TS0TW02.TS0TW_NSHPNBR = TS0TM001.TSFSHPID; /* save number*/
  end

   /* ------------------------------------------------------------*/
           /* 2) craft*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TS5CRAFT == " ") /* If craft is missing*/
    converseLib.validationFailed(48); /* error message*/
    TSFREC.TS5CRAFT = " "; /* default*/
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
    set TS0TM001.TS5CRAFT cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
           /* 3) carrier*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSACARCD == " ") /* If carrier code is missing*/
    converseLib.validationFailed(39); /* error message*/
    TSFREC.TSACARCD = " "; /* default*/
    TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    set TS0TM001.TSACARCD cursor, modified, bold; /* highlight field*/
  else
    TSAREC.TSACARCD = TS0TM001.TSACARCD; /* move in key*/
    TS0TS04(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TSFREC.TSACARCD = TSAREC.TSACARCD; /* save code*/
      if (TS0TM001.TS5CRAFT != " ") /* if craft has been entered*/
        TS5REC.TSACARCD = TS0TM001.TSACARCD; /* move in keys*/
        TS5REC.TS5CRAFT = TS0TM001.TS5CRAFT;
        TS0TS05(); /* select craft*/
        if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
         && TS5REC.XXXSTAT == "A")   /* in active status*/
          TSFREC.TS5CRAFT = TS5REC.TS5CRAFT; /* save craft code*/
          TS0TW01.YMTCD = TS5REC.YMTCD; /* save mode code*/
        else
          if (SQLCA.VAGen_SQLCODE == 0 /* if craft exists*/
           && TS5REC.XXXSTAT == "I")   /* in inactive status*/
            converseLib.validationFailed(73); /* error message*/
            TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
            TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
            set TS0TM001.TS5CRAFT cursor, modified, bold;
                                   /* highlight field*/
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* if craft does not exist*/
              converseLib.validationFailed(48); /* error message*/
              TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
              TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
              set TS0TM001.TS5CRAFT cursor, modified, bold;
            end
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
       && TSAREC.XXXSTAT == "I")   /* in inactive status*/
        converseLib.validationFailed(72); /* error message*/
        TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
        TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
        set TS0TM001.TSACARCD cursor, modified, bold; /* highlight field*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
          converseLib.validationFailed(39); /* error message*/
          TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
          TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
          set TS0TM001.TSACARCD cursor, modified, bold; /* highlight field*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
           /* 4) forwarder*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFRWRDR != " ") /* If forwarder code is entered*/
    TSAREC.TSACARCD = TS0TM001.TSFRWRDR; /* move in key*/
    TS0TS04(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TSFREC.TSFRWRDR = TSAREC.TSACARCD; /* save code*/
    else
      if (SQLCA.VAGen_SQLCODE == 100 /* if carrier does not exist*/
       || TSAREC.XXXSTAT == "I")    
        converseLib.validationFailed(142); /* error message*/
        TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
        TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
        set TS0TM001.TSFRWRDR cursor, modified, bold; /* highlight field*/
      end
    end
  else
    TSFREC.TSFRWRDR = " "; /* default*/
  end

   /* ------------------------------------------------------------*/
           /* 5) bill of lading*/
   /* ------------------------------------------------------------*/

  if (TS0TM001.TSFBOL == " ") /* If BOL is blank*/
    converseLib.validationFailed(84); /* error message*/
    TSFREC.TSFBOL = " "; /* default*/
    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "TS0T147"; /* Process name*/
    set TS0TM001.TSFBOL cursor, modified, bold; /* highlight field*/
  else
    TSFREC.TSFBOL = TS0TM001.TSFBOL; /* save BOL*/
  end


end // end TS0T147

// Overlap and calculation edits
Function TS0T148()
   /* ------------------------------------------------------------*/

               /* OVERLAP AND CALCUALTION EDITS*/

         /* Edit;*/
           /* 1) check notification recieved date gt current date*/
           /* 2) check forwarder entered in case of craft*/
              /* mode equal to 'AF'.*/
           /* 3) check that warehouse location = dest location*/
           /* 4) check for duplicate locations entered*/
           /* 5) check to see if transit time calculation for*/
              /* destimation estimated date is required.*/
           /* 6) check for all other date overlaps*/

   /* ------------------------------------------------------------*/

     /* ******** get current date **********/

  XX0XS01();
  TS0TW01.TS0TWCDT = XX0XW01.XX0XWDAT; /* save current date*/

  if (TS5REC.YMTCD == "AF" /* If airfreight is the craft mode*/
   && TS0TM001.TSFTKG <= 0) /* and kilograms not entered*/
    converseLib.validationFailed(275); /* frwrdr must be entered*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
    set TS0TM001.TSFTKG cursor, modified, bold; /* highlight field*/
  end

  if (TS5REC.YMTCD == "AF" /* If airfreight is the craft mode*/
   && TS0TM001.TSFRWRDR == " ") /* and forwarder not entered*/
    converseLib.validationFailed(266); /* frwrdr must be entered*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
    set TS0TM001.TSFRWRDR cursor, modified, bold; /* highlight field*/
  end

  if (TS0TW01.TS0TWPSW == "N") /* if no errors have occurred*/

    if (TS0TM001.XWHCD != "  ") /* If warehouse exists*/
      if (TS0TM001.XWHCD in XWHTBL.XWHCD)
        if (TS0TM001.TSEDEST != XWHTBL.TSCLOCCD[sysVar.arrayIndex])
          converseLib.validationFailed(274); /* xwh dest must = destination*/
          TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
          TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
          set TS0TM001.TSEDEST modified, bold; /* highlight field*/
          set TS0TM001.XWHCD cursor, modified, bold; /* highlight field*/
        end
      end
    end

    if (TS0TM001.TSEORIG == TS0TM001.TSEDEST)
      converseLib.validationFailed(67); /* origin cannot = destination*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
      set TS0TM001.TSEORIG modified, bold; /* highlight field*/
      set TS0TM001.TSEDEST cursor, modified, bold; /* highlight field*/
    end

    if (TS0TM001.TSFDSCHG == TS0TM001.TSEORIG
     && TS0TM001.TSEORIG != " ") /* and an orig location exists*/
      converseLib.validationFailed(86); /* Discharge cannot = origin*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
      set TS0TM001.TSEORIG modified, bold; /* highlight field*/
      set TS0TM001.TSFDSCHG cursor, modified, bold; /* highlight field*/
    end

  end

  if (TS0TW01.TS0TWPSW == "N") /* if no errors have occurred*/

    if (TS0TM001.TSFDESTE == " ") /* if destination est date is missing*/
      if (TS0TM001.TSFDSCHG != " " /* if discharge loc is entered*/
       && TS0TM001.TSFDSCHE != " ") /* and est dschg dt is entered*/
        TSEREC.TSEORIG = TS0TM001.TSFDSCHG; /* move in ttime keys*/
        TSEREC.TSEDEST = TS0TM001.TSEDEST;
        TSEREC.YMTCD = TS0TW01.YMTCD;
        TS0TS06(); /* select the transit time*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if transit time is found*/
          set TA2REC empty; /* clear date record*/
          TA2REC.TA2DTOPT = "GREGGREG"; /* move in option*/
          TA2REC.TA2GRTYP = "G"; /* move date type to record*/
          TA2REC.TA2GRGGN = TSFREC.TSFDSCHE; /* move in dis date*/
          TA2REC.TA2DYAOD = TSEREC.TSETRNTM; /* move tran time to add*/
          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/
          if (TA2REC.TA2RTNCD == 0) /* if return code is OK*/
            TSFREC.TSFDESTE = TA2REC.TA2GRGGN; /* save the date*/
            TS0TM001.TSFDESTE = TA2REC.TA2GRGA; /* move date to map*/
          end
        end
      else
        if (TS0TM001.TSFDSCHG == " " /* if dschg loc is not entered*/
         && TS0TM001.TSFDPRTA != " ") /* and act dprt dt is entered*/
          TSEREC.TSEORIG = TS0TM001.TSEORIG; /* move in ttime keys*/
          TSEREC.TSEDEST = TS0TM001.TSEDEST;
          TS0TS06(); /* select the transit time*/
          if (SQLCA.VAGen_SQLCODE == 0) /* if transit time is found*/
            set TA2REC empty; /* clear date record*/
            TA2REC.TA2DTOPT = "GREGGREG"; /* move in option*/
            TA2REC.TA2GRTYP = "G"; /* move date type to record*/
            TA2REC.TA2GRGGN = TSFREC.TSFDSCHE; /* move in dis date*/
            TA2REC.TA2DYAOD = TSEREC.TSETRNTM; /* move trn tm to add*/
            call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/
            if (TA2REC.TA2RTNCD == 0) /* if return code is OK*/
              TSFREC.TSFDESTE = TA2REC.TA2GRGGN; /* save the date*/
              TS0TM001.TSFDESTE = TA2REC.TA2GRGA; /* move date to map*/
            end
          end
        end
      end
    else
      if (TSFREC.TSFDESTE < TSFREC.TSFDPRTA /* if est dest < act dprt*/
       && TSFREC.TSFDPRTA != 0)             /* and act dprt date exists*/
        converseLib.validationFailed(147); /* Display error message*/
        TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
        TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
        set TS0TM001.TSFDESTE cursor, modified, bold; /* highlight field*/
      else
        if (TSFREC.TSFDESTE < TSFREC.TSFDPRTE /* if est dest < est dprt*/
         && TSFREC.TSFDPRTE != 0)             /* and est dprt date exists*/
          converseLib.validationFailed(87); /* Display error message*/
          TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
          TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
          set TS0TM001.TSFDESTE cursor, modified, bold; /* highlight field*/
        else
          if (TSFREC.TSFDESTE < TSFREC.TSFDSCHE /* if est dest < est dschg*/
           && TSFREC.TSFDSCHG != 0)             /* and est dschg date exists*/
            converseLib.validationFailed(88); /* Display error message*/
            TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
            TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
            set TS0TM001.TSFDESTE cursor, modified, bold;
                                   /* highlight field*/
          end
        end
      end
    end

    if (TS0TM001.TSFDESTA != " ") /* if dest actual date is entered*/
      if (TSFREC.TSFDESTA < TSFREC.TSFDPRTA /* if act dest < act dprt*/
       && TSFREC.TSFDPRTA != 0)             /* and act dprt date exists*/
        converseLib.validationFailed(90); /* Display error message*/
        TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
        TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
        set TS0TM001.TSFDESTA cursor, modified, bold; /* highlight field*/
      else
        if (TSFREC.TSFDESTA < TSFREC.TSFDSCHA /* if act dest < act dschg*/
         && TSFREC.TSFDSCHA != 0)             /* and act dshcg date exists*/
          converseLib.validationFailed(91); /* Display error message*/
          TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
          TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
          set TS0TM001.TSFDESTA cursor, modified, bold; /* highlight field*/
        end
      end
    end

    if (TS0TM001.TSFDSCHE != " ") /* if dschg est date is entered*/
      if (TSFREC.TSFDSCHE < TSFREC.TSFDPRTE /* if est dschg < est dprt*/
       && TSFREC.TSFDPRTE != 0)             /* and est dprt date exists*/
        converseLib.validationFailed(92); /* Display error message*/
        TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
        TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
        set TS0TM001.TSFDSCHE cursor, modified, bold; /* highlight field*/
      else
        if (TSFREC.TSFDSCHE > TSFREC.TSFDESTE /* if est dschg > est dest*/
         && TSFREC.TSFDESTE != 0)             /* and est dest date exists*/
          converseLib.validationFailed(93); /* Display error message*/
          TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
          TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
          set TS0TM001.TSFDSCHE cursor, modified, bold; /* highlight field*/
        end
      end
    end

    if (TS0TM001.TSFDSCHA != " ") /* if dschg act date is entered*/
      if (TSFREC.TSFDSCHA < TSFREC.TSFDPRTA /* if act dschg < act dprt*/
       && TSFREC.TSFDPRTA != 0)             /* and act dprt date exists*/
        converseLib.validationFailed(94); /* Display error message*/
        TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
        TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
        set TS0TM001.TSFDSCHA cursor, modified, bold; /* highlight field*/
      else
        if (TSFREC.TSFDSCHA > TSFREC.TSFDESTA /* if act dschg > act dest*/
         && TSFREC.TSFDESTA != 0)             /* and act dest date exists*/
          converseLib.validationFailed(95); /* Display error message*/
          TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
          TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
          set TS0TM001.TSFDSCHA cursor, modified, bold; /* highlight field*/
        end
      end
    end

    if (TS0TM001.TSFDPRTE != " ") /* if dprt est date is entered*/
      if (TSFREC.TSFDPRTE > TSFREC.TSFDESTE /* if est dprt > est dest*/
       && TSFREC.TSFDESTE != 0)             /* and est dest date exists*/
        converseLib.validationFailed(96); /* Display error message*/
        TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
        TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
        set TS0TM001.TSFDPRTE cursor, modified, bold; /* highlight field*/
      else
        if (TSFREC.TSFDPRTE > TSFREC.TSFDSCHE /* if est dprt > est dschg*/
         && TSFREC.TSFDSCHE != 0)             /* and est dschg date exists*/
          converseLib.validationFailed(97); /* Display error message*/
          TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
          TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
          set TS0TM001.TSFDPRTE cursor, modified, bold; /* highlight field*/
        end
      end
    end

    if (TS0TM001.TSFDPRTA != " ") /* if dprt est date is entered*/
      if (TSFREC.TSFDPRTA > TSFREC.TSFDESTA /* if act dprt > act dest*/
       && TSFREC.TSFDESTA != 0)             /* and act dest date exists*/
        converseLib.validationFailed(98); /* Display error message*/
        TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
        TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
        set TS0TM001.TSFDPRTA cursor, modified, bold; /* highlight field*/
      else
        if (TSFREC.TSFDPRTA > TSFREC.TSFDSCHA /* if act dprt > act dschg*/
         && TSFREC.TSFDSCHA != 0)             /* and act dschg date exists*/
          converseLib.validationFailed(99); /* Display error message*/
          TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
          TS0TM001.XXXPRCNM = "TS0T148"; /* Process name*/
          set TS0TM001.TSFDPRTA cursor, modified, bold; /* highlight field*/
        else

          /* Add 7  days to current date for editing ADT date*/

          set TA2REC empty; /* clear record*/
          TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
          TA2REC.TA2GRGG = TS0TW01.TS0TWCDT; /* current date*/
   /* parm const to add*/
          TA2REC.TA2DYAOD = TS0TW01.TS0TW-ADT-DATE-WINDOW;

          call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

          if (TA2REC.TA2RTNCD == 0) /* no errors found*/

            TS0TW01.TS0TW-MAX-ADT-DATE = TA2REC.TA2GRGG; /* curr date + const*/

          end

          if (TSFREC.TSFDPRTA > TS0TW01.TS0TW-MAX-ADT-DATE)

            converseLib.validationFailed(374); /* error msg*/
            TS0TW01.TS0TWPSW = "Y"; /* indicate prob*/
            TS0TM001.XXXPRCNM = "TS0T148"; /* process name*/
            set TS0TM001.TSFDPRTA cursor, modified, bold; /* highlight*/

          end
        end
      end
    end
  end


end // end TS0T148

// Behind the scenes updates
Function TS0T149()
   /* ------------------------------------------------------------*/

              /* BEHIND THE SCENES UPDATES*/

         /* Update all the fields in TSFREC that should be*/
       /* updated by this application for the header add.*/

   /* ------------------------------------------------------------*/

  TSFREC.TSFDIVRT = "N"; /* initialize shipment divert flag*/
  TSFREC.TSFAPLFL = "N"; /* initialize charges applied flag*/


end // end TS0T149

// Process valid input request
Function TS0T150()
   /* ------------------------------------------------------------*/

             /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If no errors and the final exit flag is yes*/
     /* a) If ENTER is pressed, add the header, submit TS4031*/
        /* batch job and transfer to*/
        /* next application (TS0U - Build a container).*/
     /* b) If PF17 is pressed, go to map 2 ( charges add map ).*/
     /* c) If PF18 is pressed, go to map 3 ( address add map ).*/
   /* 2) Check the final exit flag and set warning if needed.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N"       
   && TS0TW01.TS0TWFEX == "Y")      /* and final exit flag is yes*/
    TS0T151(); /* add the shipment text*/
    TS0T152(); /* add the shipment address*/
    TS0TW02.CTEFLAG = "N";

    TS0T-15311(); /* ===> Select (S1) set VCPLHD01*/

    TS0TW01.TS0TWSC1 = "N"; /* ===> End of Cursor Switch*/
    while (TS0TW01.TS0TWSC1 == "N"
    )
      TS0T-15312(); /* ===> Fetch  (N1) row VCPLHD01*/
      /* MOVE TSIREC.PC3PONBR TO TS0TW02.TS0TW_PONBRARY(TS0TWIX1);*/
      TS0T-16000(); /* select (S2) VCPLHD02*/
      TS0TW01.TS0TWSC2 = "N";
      while (TS0TW01.TS0TWSC2 == "N")
        TS0T-16100(); /* FETCH (N2) row VCPLHD02*/
        TS0TW02.TS0TW_CSHPNBR = TSTREC.TSFSHPID; /* Save number*/
        if (TS0TW02.TS0TW_CSHPNBR == TS0TW02.TS0TW_NSHPNBR) /* Compare*/

        else
          if (TSTREC.TSEDEST == "CTE" || TSTREC.YSSCD == "CX")
            TS0TW01.TS0TWSC2 = "Y";
            TS0TW02.CTEFLAG = "Y";
          end
        end
      end
      TS0T-16200();
    end
    TS0T-15314();

    if (TS0TW02.CTEFLAG == "Y")
      TS0T153(); /* add the shipment header*/
    else
      TS0T154();
    end
    if (SQLCA.VAGen_SQLCODE == 0) /* If shipment add is successful*/
      TSWREC.TSWUPDFL = "N"; /* set up all tsxrec pass records*/
      TSWREC.TSWREJFL = "N"; /* Initialize flags*/
      TSWREC.TSWHDRFL = "Y";
      TSWREC.TSWCNTFL = "N";
      TSWREC.TSWCPLFL = "N";
      TSWREC.TSWCRTFL = "N";
      TSWREC.TSFBOL = TSFREC.TSFBOL;
      TSWREC.TSACARCD = TSFREC.TSACARCD;
      TSWREC.TS5CRAFT = TSFREC.TS5CRAFT;
      TSWREC.TSFSHPNB = TSFREC.TSFSHPNB;
      TSWREC.TSEORIG = TSFREC.TSEORIG;
      TSWREC.TSEDEST = TSFREC.TSEDEST;
      TSWREC.XWHCD = TSFREC.XWHCD;
      COMMAREA.CAUSERA = TSWREC.CAUSERA;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TS0TW02.TS0TWIX1 = 1; /* initialize counters*/
      TS0TW02.TS0TWIX2 = 1;
      TS0TW02.TS0TWIX3 = 1;

      move 0 to TS0TW02.TS0TW_PONBRARY[1] for all; /* Initialize Arrays*/
      move 0 to TS0TW02.TS0TW_SHPARY[1] for all;
      move 0 to TS0TW02.TS0TW_TSIPLNBR[1] for all;
      move 0 to TS0TW02.TS0TW_CNTARY[1] for all;
      move 0 to TS0TW02.TS0TW_CNTSHPARY[1] for all;
      if (TS0TW02.CTEFLAG == "Y")
        TS0T-15311(); /* ===> Select (S1) set VCPLHD01*/

        TS0TW01.TS0TWSC1 = "N"; /* ===> End of Cursor Switch*/
        while (TS0TW01.TS0TWSC1 == "N"
        )
          TS0T-15312(); /* ===> Fetch  (N1) row VCPLHD01*/
          TS0TW02.TS0TW_PONBRARY[TS0TWIX1] = TSIREC.PC3PONBR;
          TS0T-15326(); /* select (SC) VCPLHD01*/
          TS0TW01.TS0TWSC2 = "N";
          while (TS0TW01.TS0TWSC2 == "N")
            TS0T-15327(); /* FETCH (NC) row VCPLHD01*/
            TS0TW02.TS0TW_CSHPNBR = TSIREC.TSFSHPID; /* Save number*/
            if (TS0TW02.TS0TW_CSHPNBR == TS0TW02.TS0TW_NSHPNBR) /* Compare*/

            else
              /* MOVE 1 TO TS0TW02.TS0TWIX2;*/
              TS0T-16334(); /* Select UNIQUE VSHPHD01 row*/
              if (TSFREC.YSTCD == "DC") /* Check if YSS_SHP_STAT_CD is 'dc'*/
                                  /* if the status is 'dc' then move the*/
                                   /* corresponding shpiment number*/
                /* and the pl number on to the arrays for further use*/
                TS0TW02.TS0TW_SHPARY[TS0TWIX2] = TSIREC.TSFSHPID;
                TS0TW02.TS0TW_TSIPLNBR[TS0TWIX2] = TSIREC.TSIPLNBR;
                TS0T-15317(); /* UPDATE PACKING LIST ROW*/
                /* Store the candidate Container number and the Ship id*/
                TS0T-15323(); /* SELECT (S1) VCNTNR01 rows*/
                TS0TW01.TS0TWSC3 = "N";
                while (TS0TW01.TS0TWSC3 == "N")
                  TS0T-15324();
                  TS0TW02.TS0TW_CNTARY[TS0TWIX3] = TSHREC.TSHNKCN;
                  TS0TW02.TS0TW_CNTSHPARY[TS0TWIX3] = TSHREC.TSFSHPID;
                  TS0TW02.TS0TWIX3 = TS0TW02.TS0TWIX3 + 1;
                end
                TS0T-15325(); /* close (C1) VCNTNR01*/

              end
            end
            TS0TW02.TS0TWIX2 = TS0TW02.TS0TWIX2 + 1;
          end
          TS0T-15328(); /* CLOSE (CC) VCPLHD01*/

        end
        TS0T-15314(); /* ===> Close  (C1) set VCPLHD01*/
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

        TS0T-16320();
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        TS0T-16330();
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.commit();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

      end

      if (TSWREC.TSWADDMO == "4") /* If shipment is combine*/
        TS0T150-100(); /* Populate leg number and update*/
                                         /* in VCPLHD04*/
        if (TSFREC.YSTCD != "TN") /* if shp-typ is not tentative*/
          TS0T155(); /* submit batch job TS4031*/
        end
        COMMAREA.CATOAP = "TS0J"; /* Set to TS0J menu*/
      else
        if (TSWREC.TSWADDMO == "3") /* If shipment is tentative*/
          COMMAREA.CATOAP = "TS0W"; /* Set to TS0W menu*/
        else
          COMMAREA.CATOAP = "TS0U"; /* Set to TS0U menu*/
        end
      end

      XSTSS01(); /* transfer to application*/

      TS0TW01.TS0TWPSW = "Y"; /* indicate error*/
      TS0TM001.XXXPRCNM = "TS0T150"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf17 /* if pf17 was pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N"      
   && TS0TW01.TS0TWFEX == "Y")     /* and final exit flag is yes*/
    if (TSWREC.TSWADDMO == "4") /* If shipment is COMBINE*/
      TS0T150-100(); /* Populate leg number and update*/
      if (TSFREC.YSTCD != "TN") /* if shp-typ is not tentative*/
        TS0T155(); /* submit batch job TS4031*/
      end
    end
    TS0TW01.TS0TWMAP = "2"; /* set to map 2*/
    TS0TW01.TS0TWFSW = "C"; /* set function switch to charges*/
  end

  if (converseVar.eventKey is pf18 /* if pf18 was pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N"      
   && TS0TW01.TS0TWFEX == "Y")     /* and final exit flag is yes*/
    if (TSWREC.TSWADDMO == "4") /* If shipment is COMBINE*/
      TS0T150-100(); /* Populate leg number and update*/
      if (TSFREC.YSTCD != "TN") /* if shp-typ is not tentative*/
        TS0T155(); /* submit batch job TS4031*/
      end
    end
    TS0TW01.TS0TWMAP = "3"; /* set to map 3*/
    TS0TW01.TS0TWFSW = "A"; /* set function switch to address*/
  end

  if (converseVar.eventKey is enter /* if a valid pf key is entered*/
   || converseVar.eventKey is pf17  
   || converseVar.eventKey is pf18)
    if (TS0TW01.TS0TWFEX == "N" /* if the final exit flag is no*/
     && TS0TW01.TS0TWPSW == "N") /* and no errors*/
      set TS0TM001.TSFBOLDT cursor, modified, bold;
      TS0TM001.XXXPRCNM = "TS0T150"; /* process name*/
      converseLib.validationFailed(134); /* warning for b/l date entered*/
      TS0TW01.TS0TWFEX = "Y"; /* set final exit to yes*/
    end
  end


end // end TS0T150

// Populate leg number
Function TS0T150-100()
   /* ------------------------------------------------------------*/

             /* POPULATE LEG NUMBR*/

   /* 1) Select VCPLHD04 row for nike ID in TS0TM001 screen.*/
   /* 2) calculate leg number.*/
   /* 3) update leg number.*/
   /* 4) repeat the steps 1, 2, 3 for all rows of that Nike ID.*/

   /* ------------------------------------------------------------*/

  TS0T150-110(); /* ===> Select (S1) row VCPLHD04*/

  TS0TW01.TS0TWSC1 = "N"; /* ===> End of Cursor Switch*/
  while (TS0TW01.TS0TWSC1 == "N")

    TS0T150-120(); /* ===> Fetch  (N1) row VCPLHD04*/
    TS0T150-130(); /* ===> Populate leg nbr*/
    TS0T150-140(); /* ===> Update (U ) row VCPLHD04*/
  end

  TS0T150-150(); /* ===> Close (C1) row VCPLHD04*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

end // end TS0T150-100

// SELECT rows in VCPLHD04
Function TS0T150-110()
   /* ------------------------------------------------------------*/

                     /* SELECT CPLHD ROWS*/

   /* ------------------------------------------------------------*/
  set VCPLHD04 empty;

  VCPLHD04.TS-NIKE-SHP-ID = TS0TM001.TSFSHPID;

  TSGREC.TSNFNC = "S1"; /* Move selection to pass record*/

  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "T-150-110"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/
    TA1REC.TA1TBLKE = VCPLHD04.VCPLHD04-KEY; /* Table key*/
    TS0TM001.XXXPRCNM = "T-150-110"; /* Process name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> Exit to re-display map*/

  end

end // end TS0T150-110

// FETCH  rows in VCPLHD04
Function TS0T150-120()
   /* ------------------------------------------------------------*/

              /* FETCH SET SINGLE CPL TABLE ROW*/

   /* ------------------------------------------------------------*/


  TSGREC.TSNFNC = "N1"; /* Move selection to pass record*/

  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* End of selected set*/

    /* ========= Next Sentence ============>*/

  else

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      TS0TW01.TS0TWSC1 = "Y"; /* End of set found*/

    else

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "T-150-120"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
      TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* ===> roll back all D.B Changes*/

      TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/
      TS0TM001.XXXPRCNM = "T-150-120"; /* ===> Process name*/

      exit stack; /* ===>  Exit to redisplay map*/

    end /* ===> sql  = 100*/

  end /* ===> sql  = 0*/

end // end TS0T150-120

// Populate leg nbr
Function TS0T150-130()
   /* ------------------------------------------------------------*/

         /* Populate leg number*/

   /* Find the leg number by checking:*/

   /* If the origin location is a consolidation point*/
   /* find the previous shipment with the same product and*/
   /* discharge location code = origin location code*/
   /* set the leg number to found leg number + 1*/
   /* Else if the discharge port is a consolidation point*/
   /* set the leg number to 1*/
   /* Else*/
   /* set the leg number to 0*/
   /* ------------------------------------------------------------*/

  if (VCPLHD04.PC-ITM-SEQ-NBR == 0)
    VCPLHD04.TS-SHP-LEG-NBR = 0;
  else
    set VTSLOC02 empty;
    VTSLOC02.TS-LOC-CD = TS0TM001.TSEORIG;
    TS0TS08();
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      VTSLOC02.TS-LOC-CNSLD-FL = "N";
    end
    if (VTSLOC02.TS-LOC-CNSLD-FL == "Y")
      TS0T150-131(); /* scan for previous leg*/
      TS0T150-132(); /* get 1st previous leg*/
      if (SQLCA.VAGen_SQLCODE == 0)
        VCPLHD04.TS-SHP-LEG-NBR = VCPLHDJ4.TS-SHP-LEG-NBR + 1;
      else
        VCPLHD04.TS-SHP-LEG-NBR = 0;
      end
      TS0T150-133(); /* close cursor*/

    else

      set VTSLOC02 empty;
      VTSLOC02.TS-LOC-CD = TS0TM001.TSFDSCHG;
      TS0TS08();
      if (SQLCA.VAGen_SQLCODE == 0)
        /* next sentence*/
      else
        VTSLOC02.TS-LOC-CNSLD-FL = "N";
      end

      if (VTSLOC02.TS-LOC-CNSLD-FL == "Y")
        VCPLHD04.TS-SHP-LEG-NBR = 1;
      else
        if (TS0TM001.TSEDEST == "CTE"
         || TS0TM001.TSEDEST == "HK6")
          VCPLHD04.TS-SHP-LEG-NBR = 1;
        else
          VCPLHD04.TS-SHP-LEG-NBR = 0;
        end
      end
    end
  end

end // end TS0T150-130

// select cplhdj4 s7
Function TS0T150-131()
   /* ------------------------------------------------------------*/

         /* Find the previous leg*/

   /* ------------------------------------------------------------*/

  set VCPLHDJ4 empty;
  VCPLHDJ4.XGP-GPC-CD = VCPLHD04.XGP-GPC-CD;
  VCPLHDJ4.PC-PO-NBR = VCPLHD04.PC-PO-NBR;
  VCPLHDJ4.PC-ITM-SEQ-NBR = VCPLHD04.PC-ITM-SEQ-NBR;
  VCPLHDJ4.TS-DSCHG-LOC-CD = TS0TM001.TSEORIG;
  VCPLHDJ4.TS-ORIG-LOC-CD = "*";
  VCPLHDJ4.TS-DEST-LOC-CD = TS0TM001.TSEORIG;

   /* ------------------------------------------------------------*/
   /* Select the row from Packing List/Shipment join view.*/
   /* ------------------------------------------------------------*/

  call "TS4080" ("S1", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

    return; /* Return to previous process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT PREVIOUS CPLHD ROW     ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end TS0T150-131

// get next cplhdj4 s7
Function TS0T150-132()
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Select the row from Packing List/Shipment join view.*/
   /* ------------------------------------------------------------*/

  call "TS4080" ("N1", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/


  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
   || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

    return; /* Return to previous process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH PREVIOUS CPLHD ROW      ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end TS0T150-132

// close cplhdj4 s7
Function TS0T150-133()
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Close the cursor s7*/
   /* ------------------------------------------------------------*/

  call "TS4080" ("C1", SQLCA, VCPLHDJ4) {isNoRefresh = yes, isExternal = yes}; /* Select set*/

   /* ------------------------------------------------------------*/
   /* If successful or row not found, return to calling process.*/
   /* If data not available, post an error message and return.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    return; /* Return to previous process*/

  end

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE PREVIOUS CPLHD ROW      ";
  TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCPLHDJ4"; /* Table view name*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  else

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

  sysVar.errorCode = TA1REC.TA1MAP; /* CSP return code*/
  SQLCA.SQLCAREC = TAEREC.SQLCAREC; /* SQL commarea*/

end // end TS0T150-133

// UPDATE PACKING LIST ROW
Function TS0T150-140()
   /* ------------------------------------------------------------*/

                     /* UPDATE PACKING LIST ROW*/

   /* ------------------------------------------------------------*/
  VCPLHD04.XXX-USER-ID = COMMAREA.CAUSERID;
  VCPLHD04.ZZ-CHNG-DT = XX0XW01.XX0XWDAT; /* move in change date*/
  VCPLHD04.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM; /* move in change time*/

  TSGREC.TSNFNC = "U "; /* move selection to pass record*/
  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if good return code*/
    /* ======== Next Sentence ===========>*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* Resource not available*/
     || SQLCA.VAGen_SQLCODE == -904)
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0T150-140"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "TS0T150-140"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* Problem switch*/

    exit stack; /* ===> Exit to display message*/

  end

end // end TS0T150-140

// close cursor for vcplhd04
Function TS0T150-150()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET OF CPL ROWS*/

   /* ------------------------------------------------------------*/

  TSGREC.TSNFNC = "C1"; /* Move selection to pass record*/

  call "VCPLHD04" (TSGREC, SQLCA, VCPLHD04) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    converseLib.validationFailed(10); /* Indicate system error*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "ABND"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0T150-150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE CURSOR";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCPLHD04"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* ===> roll back all D.B Changes*/

    TS0TM001.XXXPRCNM = "TS0T150-150"; /* Process name*/
    TS0TW01.TS0TWPSW = "Y"; /* ===> Problem Switch*/

    exit stack; /* ===> exit to re-display map*/

  end


   /* **                                                        ***/
end // end TS0T150-150

// Process the shpmnt texts rows
Function TS0T151()
   /* ------------------------------------------------------------*/

                    /* PROCESS THE TEXT LINES*/

        /* If data exists in either comment line 1 or 2,*/
          /* add the text to the text table*/

   /* ------------------------------------------------------------*/

  if (TS0TW01.TS0TWTX1 == " ") /* if no text in comment line 1*/
     /* continue on*/
  else
    TSRREC.TSRSEQNB = 1; /* set sequence number to 1*/
    TSRREC.TSRTEXT = TS0TW01.TS0TWTX1; /* move in text*/
    TS0TS07(); /* add the text to the text table*/
    TSFREC.TSFTXTID = "Y"; /* indicate text exists*/
  end

  if (TS0TW01.TS0TWTX2 == " ") /* if no text in comment line 2*/
     /* continue on*/
  else
    TSRREC.TSRSEQNB = 2; /* set sequence number to 2*/
    TSRREC.TSRTEXT = TS0TW01.TS0TWTX2; /* move in text*/
    TS0TS07(); /* add the text to the text table*/
    TSFREC.TSFTXTID = "Y"; /* indicate text exists*/
  end


end // end TS0T151

// Add the shipment address row
Function TS0T152()
   /* ------------------------------------------------------------*/

                    /* ADD TO DTRANS.VTSADR01*/

      /* If any address lines were entered;*/
        /* add the row to the database.*/
      /* It will return a system error if an unexpected return*/
        /* code is received.*/
   /* ------------------------------------------------------------*/

  if (TSSREC.XXX-ADDR1 == " " /* if no data entered*/
   && TSSREC.XXX-ADDR2 == " " 
   && TSSREC.XXX-ADDR3 == " " 
   && TSSREC.XXXCITY == " "   
   && TSSREC.XSTCD == " "     
   && TSSREC.XXXZIP == " "    
   && TSSREC.XCTCD == " ")   

     /* CONTINUE ON*/

  else

    TSFREC.TSFADRID = "Y"; /* indicate address exists*/
    TSSREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shipment id*/

    /* *******************************************/
    /* *********** get current date **************/
    /* ************ and time *********************/
    /* *******************************************/

    XX0XS01();
    TS0TW01.TS0TWCDT = XX0XW01.XX0XWDAT;
                                   /* save current date ccyymmdd*/

    TSSREC.ZZZCHGDT = TS0TW01.TS0TWCDT; /* change date*/
    TSSREC.ZZZSDT = TS0TW01.TS0TWCDT; /* Set up date*/
    TSSREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
    TSSREC.ZZZCHGCT = 0; /* Change count*/

    call "IO2700" ("A ", SQLCA, TSSREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

    if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
     || SQLCA.VAGen_SQLCODE == 100)
       /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0T152"; /* Process name*/
      TA1REC.TA1LOC = "ADD TABLE ROW";
      TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTSADR01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      TS0TM001.XXXPRCNM = "TS0T152"; /* Process name*/
      exit stack;

    end
  end


end // end TS0T152

// Add the shipment header row
Function TS0T153()
   /* ------------------------------------------------------------*/

                    /* ADD TO DTRANS.VSHPHD01*/

   /* This module adds a table row to the shipment header*/
   /* table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  TSFREC.XGPCD = TSWREC.XGPCD; /* move in gpc code*/

  if (TSFREC.TSFCHGFL == " ") /* if charges entered flag blank*/
    TSFREC.TSFCHGFL = "N"; /* default to no*/
  end

  if (TSWREC.TSWADDMO == "4") /* Add mode is '4' combine*/

    TSFREC.YSSCD = "IT"; /* Set to "it" status*/

    TS0T-15310(); /* ===>  Update the VCPLHD01  P/L from*/
                                   /* "IP" to "IT" status*/

    TS0T-15320(); /* ===>  Update the VCNTNR01  from*/
                                   /* "IP" to "IT" status*/

  end

  TS0TW01.TS0TWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/

  TSFREC.ZZZCHGDT = TS0TW01.TS0TWCDT; /* change date*/
  TSFREC.ZZZSDT = TS0TW01.TS0TWCDT; /* Set up date*/
  TSFREC.TS-ADVN-SHP-DT = TS0TW01.TS0TWCDT;
  TSFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  TSFREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Set up time*/
  TSFREC.ZZZCHGCT = 0; /* Change count*/
  TSFREC.XXX-USER-ID = COMMAREA.CAUSERID;

  call "IO2540" ("A ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0T153"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

    TS0TM001.XXXPRCNM = "TS0T153"; /* Process name*/

    exit stack;

  end


end // end TS0T153

// Add the shipment header row
Function TS0T154()
   /* ------------------------------------------------------------*/

                    /* ADD TO DTRANS.VSHPHD01*/

   /* This module adds a table row to the shipment header*/
   /* table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();

  TSFREC.XGPCD = TSWREC.XGPCD; /* move in gpc code*/

  if (TSFREC.TSFCHGFL == " ") /* if charges entered flag blank*/
    TSFREC.TSFCHGFL = "N"; /* default to no*/
  end

  if (TSWREC.TSWADDMO == "4") /* Add mode is '4' combine*/

    /* /MOVE 'RC' TO TSFREC.YSSCD;     /* Set to "it" status*/
    TSFREC.YSSCD = "IT"; /* Set to "it" status*/

    TS0T-15310(); /* ===>  Update the VCPLHD01  P/L from*/
                                   /* "IP" to "IT" status*/

    TS0T-15320(); /* ===>  Update the VCNTNR01  from*/
                                   /* "IP" to "IT" status*/

  end

  TS0TW01.TS0TWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/

  TSFREC.ZZZCHGDT = TS0TW01.TS0TWCDT; /* change date*/
  TSFREC.ZZZSDT = TS0TW01.TS0TWCDT; /* Set up date*/
  TSFREC.TS-ADVN-SHP-DT = TS0TW01.TS0TWCDT;
  TSFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  TSFREC.ZZZSTM = XX0XW01.XX0XWTIM; /* Set up time*/
  TSFREC.ZZZCHGCT = 0; /* Change count*/
  TSFREC.XXX-USER-ID = COMMAREA.CAUSERID;

  call "IO2540" ("A ", SQLCA, TSFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0T153"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

    TS0TM001.XXXPRCNM = "TS0T153"; /* Process name*/

    exit stack;

  end


end // end TS0T154

// submit TS4031 proc
Function TS0T155()
   /* ------------------------------------------------------------*/
   /* Call sub-routine to find which environment*/
   /* the program is executing in, development*/
   /* or production.*/
   /* ------------------------------------------------------------*/
  set XCTHREC empty;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
   /* MOVE '600' TO FB09M001.XXXMODID;    /* module identification*/
    converseLib.validationFailed(8); /* Error with print request*/
    exit stack;
  end

  if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* prod environment*/
    TS0T-001(); /* format prod batch sub*/
  else
    TS0T-002(); /* format test batch sub*/
  end

  return;
                                        /* retn to performing process*/
end // end TS0T155

// Shipment Charges Add Map
Function TS0T200()
   /* ------------------------------------------------------------*/

                 /* SHIPMENT CHARGES ADD MAP*/

   /* This is the main process used to display the charges add*/
   /* map.  Processing always returns to the top of this process*/
   /* and falls through to subordinate processes until an error*/
   /* is found or PF3 is requestes.*/
   /* Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0T210(); /* Format and display the map*/

  TS0T220(); /* Check attention identifier*/

  TS0T230(); /* Reset fields to normal intensity*/

  TS0T240(); /* Verify the entered data*/

  TS0T250(); /* Process valid input request*/


end // end TS0T200

// Format and display the map
Function TS0T210()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0TW01.TS0TWPSW == "N") /* No errors*/
    TS0TM002.TSFSHPID = TS0TM001.TSFSHPID; /* move in fields*/
    TS0TM002.XGPCD = TS0TM001.XGPCD;
    TS0TM002.TSACARCD = TS0TM001.TSACARCD;
    TS0TM002.TS5CRAFT = TS0TM001.TS5CRAFT;
    TS0TM002.TSFSHPNB = TS0TM001.TSFSHPNB;
    TS0TM002.TSFBOL = TS0TM001.TSFBOL;
    TS0TM002.TSFRWRDR = TS0TM001.TSFRWRDR;
    TS0TM002.TSEORIG = TS0TM001.TSEORIG;
    TS0TM002.TSEDEST = TS0TM001.TSEDEST;
    TS0TM002.TS-TOT-COLL-SCHG = TS0TM001.TS-TOT-COLL-SCHG;
    TS0TM002.TS-TOT-PPD-SCHG = TS0TM001.TS-TOT-PPD-SCHG;
  end

  /* IF EZEMNO NE 0;                   /* error message to display*/
  /* SET TS0TM002 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  TS0TM002.XXXCURDT = VGVar.currentShortGregorianDate; /* move in date*/

  converse TS0TM002 ;

  TS0TW01.TS0TWPSW = "N"; /* reset error flag*/

  TS0T211(); /* check for user ? inquiry*/


end // end TS0T210

// Check for ? inquiry by user
Function TS0T211()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0TM002.YBRCD == "?") /* if ? in broker code field*/
    XPXX001(); /* perform pop-up window initialize*/
    XX0XW02.XX0XWHDR = "               BROKER CODE"; /* heading*/

    while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
      XPYBR01(); /* perform broker code window*/
    end

     /* **********************************************************/
     /* *  If the pass index is greater than zero, use the      **/
     /* *  passed table index 'XX0XWPIX' to move the container  **/
     /* *  type table code and description to the map.          **/
     /* **********************************************************/

    if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
      TS0TM002.YBRCD = YBRTBL.YBRCD[XX0XWPIX]; /* move code*/
      TS0TM002.YBRSDESC = YBRTBL.YBRSDESC[XX0XWPIX]; /* move name*/
    else
      TS0TM002.YBRCD = " "; /* clear fields*/
      TS0TM002.YBRSDESC = " ";
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0TW01.TS0TWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0T211

// Check attention identifier
Function TS0T220()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/
    XSTSS01(); /* transfer to application*/
    TS0TW01.TS0TWPSW = "Y"; /* if trans fails, indicate error*/
    TS0TM002.XXXPRCNM = "TS0T220"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf18) /* and PF18 was not pressed*/
    TS0TM002.XXXPRCNM = "TS0T220"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0T220

// Reset highlighted fields
Function TS0T230()
   /* ------------------------------------------------------------*/

              /* RESET HIGHLIGHTED FIELDS*/

   /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0TM002.TSFCHGFL initialAttributes; /* Reset all map fields*/
  set TS0TM002.TS-ORIG-PMT-IND initialAttributes;
  set TS0TM002.TSFOKG initialAttributes;
  set TS0TM002.TSFDHNDL initialAttributes;
  set TS0TM002.TSFOFRGT initialAttributes;
  set TS0TM002.TSFDINLD initialAttributes;
  set TS0TM002.TSFOHNDL initialAttributes;
  set TS0TM002.TSFDMISC initialAttributes;
  set TS0TM002.TSFOINLD initialAttributes;
  set TS0TM002.TSFOCAF initialAttributes;
  set TS0TM002.YBRCD initialAttributes;
  set TS0TM002.TSFOBAF initialAttributes;
  set TS0TM002.TSFBRIVC initialAttributes;
  set TS0TM002.TSFOMISC initialAttributes;
  set TS0TM002.TSFINFEE initialAttributes;
  set TS0TM002.TSFFRFEE initialAttributes;


end // end TS0T230

// Verify data entered
Function TS0T240()
   /* ------------------------------------------------------------*/

                  /* VERIFY THE ENTERED DATA*/

   /* This will edit all screen fields entered by the user.*/
   /* All fields are numeric, therefore many edits are very*/
   /* simple and repetitive.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
         /* 1) formal fee*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFFRFEE >= 0) /* if the formal fee is entered*/
    TSFREC.TSFFRFEE = TS0TM002.TSFFRFEE; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFFRFEE cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* 2) informal fee*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFINFEE >= 0) /* if the informal fee is entered*/
    TSFREC.TSFINFEE = TS0TM002.TSFINFEE; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFINFEE cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* 3) miscellaneous fee*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFOMISC >= 0) /* if the misc fee is entered*/
    TSFREC.TSFOMISC = TS0TM002.TSFOMISC; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFOMISC cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* 4) broker invoice charge*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFBRIVC >= 0) /* if broker invoice charge entered*/
    TSFREC.TSFBRIVC = TS0TM002.TSFBRIVC; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFBRIVC cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* 5) fuel surcharge*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFOBAF >= 0) /* if fuel surcharge charge is entered*/
    TSFREC.TSFOBAF = TS0TM002.TSFOBAF; /* move charge to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFOBAF cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* 6) broker code*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.YBRCD == " ") /* if broker code type is blank*/
    TS0TM002.YBRSDESC = " "; /* clear description*/
  else
    sysVar.arrayIndex = 0; /* Initialize ezetst*/
    if (TS0TM002.YBRCD in YBRTBL.YBRCD) /* Check valid hold*/
    end
    if (sysVar.arrayIndex == 0 /* Not in table*/
     || YBRTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(102); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
      TS0TM002.YBRSDESC = " "; /* Clear description*/
      set TS0TM002.YBRCD cursor, modified, bold; /* highlight field*/
    else /* Move description to table*/
      TS0TM002.YBRSDESC = YBRTBL.YBRSDESC[sysVar.arrayIndex];
      TSFREC.YBRCD = YBRTBL.YBRCD[sysVar.arrayIndex]; /* save code*/
    end
  end

   /* ------------------------------------------------------------*/
         /* 6) currency factor*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFOCAF >= 0) /* if currency factor is entered*/
    TSFREC.TSFOCAF = TS0TM002.TSFOCAF; /* move charge to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFOCAF cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* 7) origin inland charge*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFOINLD >= 0) /* if the origin inland charge entered*/
    TSFREC.TSFOINLD = TS0TM002.TSFOINLD; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFOINLD cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* 8) destination misc charges*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFDMISC >= 0) /* if the dest misc charge entered*/
    TSFREC.TSFDMISC = TS0TM002.TSFDMISC; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFDMISC cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
         /* 9) origin handling charges*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFOHNDL >= 0) /* if the origin handling entered*/
    TSFREC.TSFOHNDL = TS0TM002.TSFOHNDL; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFOHNDL cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
        /* 10) destination inland charge*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFDINLD >= 0) /* if the dest inland charge entered*/
    TSFREC.TSFDINLD = TS0TM002.TSFDINLD; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFDINLD cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
        /* 11) origin freight charge*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFOFRGT >= 0) /* if the origin freight chg entered*/
    TSFREC.TSFOFRGT = TS0TM002.TSFOFRGT; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFOFRGT cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
        /* 12) destination handling charge*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFDHNDL >= 0) /* if the dest handling chg entered*/
    TSFREC.TSFDHNDL = TS0TM002.TSFDHNDL; /* move fee to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFDHNDL cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
        /* 13) origin kilogram*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFOKG >= 0) /* if the origin kilogr chg entered*/
    TSFREC.TSFOKG = TS0TM002.TSFOKG; /* move kg to record*/
  else
    converseLib.validationFailed(76); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TSFOKG cursor, modified, bold; /* highlight field*/
  end

   /* ------------------------------------------------------------*/
        /* 14) collect or prepaid flag*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TS-ORIG-PMT-IND != " " /* if flag not valid*/
   && TS0TM002.TS-ORIG-PMT-IND != "C" 
   && TS0TM002.TS-ORIG-PMT-IND != "P" 
   && TS0TM002.TS-ORIG-PMT-IND != "S")
    converseLib.validationFailed(103); /* Display error message*/
    TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
    TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
    set TS0TM002.TS-ORIG-PMT-IND cursor, modified, bold; /* highlight field*/
  else
    TSFREC.TS-ORIG-PMT-IND = TS0TM002.TS-ORIG-PMT-IND;
  end

   /* ------------------------------------------------------------*/
        /* 15) charges entered flag*/
   /* ------------------------------------------------------------*/

  if (TS0TM002.TSFCHGFL != " ") /* if charges entered flag not valid*/
    if (TS0TM002.TSFCHGFL == "Y"
     || TS0TM002.TSFCHGFL == "N")
      TSFREC.TSFCHGFL = TS0TM002.TSFCHGFL; /* move flag to record*/
    else
      converseLib.validationFailed(46); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM002.XXXPRCNM = "TS0T240"; /* Process name*/
      set TS0TM002.TSFCHGFL cursor, modified, bold; /* highlight field*/
    end
  else
    TSFREC.TSFCHGFL = "N"; /* default to no*/
  end


end // end TS0T240

// Process valid input request
Function TS0T250()
   /* ------------------------------------------------------------*/

             /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If ENTER is pressed, add the header and transfer to next*/
      /* application (TS0U - Build a container).*/
   /* 2) If PF18 is pressed, go to map 3 ( address add map ).*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N")     
    TS0T151(); /* add the shipment text*/
    TS0T152(); /* add the shipment address*/
    TS0T153(); /* add the shipment header*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If shipment is found*/
      TSWREC.TSWUPDFL = "N"; /* set up all tsxrec pass records*/
      TSWREC.TSWREJFL = "N";
      TSWREC.TSWHDRFL = "Y";
      TSWREC.TSWCNTFL = "N";
      TSWREC.TSWCPLFL = "N";
      TSWREC.TSWCRTFL = "N";
      TSWREC.TSFBOL = TSFREC.TSFBOL;
      TSWREC.TSACARCD = TSFREC.TSACARCD;
      TSWREC.TS5CRAFT = TSFREC.TS5CRAFT;
      TSWREC.TSFSHPNB = TSFREC.TSFSHPNB;
      TSWREC.TSEORIG = TSFREC.TSEORIG;
      TSWREC.TSEDEST = TSFREC.TSEDEST;
      TSWREC.XWHCD = TSFREC.XWHCD;
      COMMAREA.CAUSERA = TSWREC.CAUSERA;
      if (TSWREC.TSWADDMO == "4") /* If shipment is tentative*/
        COMMAREA.CATOAP = "TS0J"; /* Set to TS0w menu*/
      else
        COMMAREA.CATOAP = "TS0U"; /* Set to TS0u menu*/
      end
      XSTSS01(); /* transfer to application*/
      TS0TW01.TS0TWPSW = "Y"; /* if fails, indicate error*/
      TS0TM002.XXXPRCNM = "TS0T250"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf3 /* if pf3 was pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N")   
    TS0TW01.TS0TWMAP = "1"; /* set to map 1*/
  end

  if (converseVar.eventKey is pf18 /* if pf18 was pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N")    
    TS0TW01.TS0TWMAP = "3"; /* set to map 3*/
    TS0TW01.TS0TWFSW = "A"; /* set function switch to address*/
  end


end // end TS0T250

// Shipment Address Add Map
Function TS0T300()
   /* ------------------------------------------------------------*/

                 /* SHIPMENT ADDRESS ADD MAP*/

   /* This is the main process used to display the address add*/
   /* map.  Processing always returns to the top of this process*/
   /* and falls through to subordinate processes until an error*/
   /* is found or PF3 is requestes.*/
   /* Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  TS0T310(); /* Format and display the map*/

  TS0T320(); /* Check attention identifier*/

  TS0T330(); /* Reset fields to normal intensity*/

  TS0T340(); /* Verify the entered data*/

  TS0T350(); /* Process valid input request*/


end // end TS0T300

// Format and display the map
Function TS0T310()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0TW01.TS0TWPSW == "N") /* No errors*/
    TS0TM003.TSFSHPID = TS0TM001.TSFSHPID; /* move in fields*/
    TS0TM003.XGPCD = TS0TM001.XGPCD;
    TS0TM003.TSACARCD = TS0TM001.TSACARCD;
    TS0TM003.TS5CRAFT = TS0TM001.TS5CRAFT;
    TS0TM003.TSFSHPNB = TS0TM001.TSFSHPNB;
    TS0TM003.TSFBOL = TS0TM001.TSFBOL;
    TS0TM003.TSEORIG = TS0TM001.TSEORIG;
    TS0TM003.TS0TMOCT = TS0TW01.TS0TWOCT;
    if (TS0TW01.TS0TWOST in XSTTBL.XSTCD)
      TS0TM003.TS0TMOST = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
    if (TS0TW01.TS0TWOCO in XCTTBL.XCTCD)
      TS0TM003.TS0TMOCO = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    TS0TM003.TSFDSCHG = TS0TM001.TSFDSCHG;
    TS0TM003.TS0TMICT = TS0TW01.TS0TWICT;
    if (TS0TW01.TS0TWIST in XSTTBL.XSTCD)
      TS0TM003.TS0TMIST = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
    if (TS0TW01.TS0TWICO in XCTTBL.XCTCD)
      TS0TM003.TS0TMICO = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    TS0TM003.TSEDEST = TS0TM001.TSEDEST;
    TS0TM003.TS0TMDCT = TS0TW01.TS0TWDCT;
    if (TS0TW01.TS0TWDST in XSTTBL.XSTCD)
      TS0TM003.TS0TMDST = XSTTBL.XSTDESC[sysVar.arrayIndex];
    end
    if (TS0TW01.TS0TWDCO in XCTTBL.XCTCD)
      TS0TM003.TS0TMDCO = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
  end

  set TS0TM003.TS0TMDES skip, invisible;
                                   /* original dest is non-enterable*/
  set TS0TM003.TS0TMDIV skip, invisible;
                                   /* diversion date is non-enterable*/

  /* IF EZEMNO NE 0;                   /* error message to display*/
  /* SET TS0TM003 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  TS0TM003.XXXCURDT = VGVar.currentShortGregorianDate; /* move in date*/

  converse TS0TM003 ;

  TS0TW01.TS0TWPSW = "N"; /* reset error flag*/

  TS0T311(); /* check for ? inquiry by user*/


end // end TS0T310

// Check for ? inquiry by user
Function TS0T311()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0TM003.XSTCD == "?" /* if any ? entered*/
   || TS0TM003.XCTCD == "?")

    if (TS0TM003.XSTCD == "?") /* if ? in state type field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "              STATE/PROVINCE"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXST01(); /* perform state type window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the container  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0TM003.XSTCD = XSTTBL.XSTCD[XX0XWPIX]; /* move code*/
      else
        TS0TM003.XSTCD = " "; /* clear fields*/
      end
    end

    if (TS0TM003.XCTCD == "?") /* if ? in country field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 COUNTRY"; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXCT01(); /* perform country window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the container  **/
       /* *  type table code and description to the map.          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0TM003.XCTCD = XCTTBL.XCTCD[XX0XWPIX]; /* move code*/
      else
        TS0TM003.XCTCD = " "; /* clear fields*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/

    TS0TW01.TS0TWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0T311

// Check attention identifier
Function TS0T320()
   /* ------------------------------------------------------------*/

                /* CHECK THE ATTENTION IDENTIFIER*/

   /* Check attention identifier used to invoke the transaction.*/
   /* If transfer failed, display returned error message.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    COMMAREA.CATOAP = "TS0I"; /* Set to TS0I menu*/
    XSTSS01(); /* transfer to another application*/
    TS0TW01.TS0TWPSW = "Y"; /* if fails, then indicate error*/
    TS0TM003.XXXPRCNM = "TS0T320"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf17) /* and PF18 was not pressed*/
    TS0TM003.XXXPRCNM = "TS0T320"; /* Process name*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0T320

// Reset highlighted fields
Function TS0T330()
   /* ------------------------------------------------------------*/

              /* RESET HIGHLIGHTED FIELDS*/

   /* Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0TM003.TSFCARR2 initialAttributes; /* Reset all map fields*/
  set TS0TM003.XXX-ADDR1 initialAttributes;
  set TS0TM003.XXX-ADDR2 initialAttributes;
  set TS0TM003.XXX-ADDR3 initialAttributes;
  set TS0TM003.XXXCITY initialAttributes;
  set TS0TM003.XSTCD initialAttributes;
  set TS0TM003.XXXZIP initialAttributes;
  set TS0TM003.XCTCD initialAttributes;


end // end TS0T330

// Verify the entered data
Function TS0T340()
   /* ------------------------------------------------------------*/

                 /* VERIFY THE ENTERED DATA*/

         /* Edit;*/
           /* 1) save map city and zip code - no editing needed*/
           /* 2) country*/
           /* 3) state*/
           /* 4) address - condense lines 1, 2, 3, and save them*/
           /* 5) secondary carrier code*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
           /* 1) save map city and zip code - no editing needed*/
   /* ------------------------------------------------------------*/

  TSSREC.XXXCITY = TS0TM003.XXXCITY; /* save city*/
  TSSREC.XXXZIP = TS0TM003.XXXZIP; /* save zip code*/

   /* ------------------------------------------------------------*/
           /* 2) country*/
   /* ------------------------------------------------------------*/

  if (TS0TM003.XCTCD != " ") /* If country entered*/
    sysVar.arrayIndex = 0; /* Initialize ezetst*/

    if (TS0TM003.XCTCD in XCTTBL.XCTCD) /* Check valid country*/
    end

    if (sysVar.arrayIndex == 0 /* Not in table*/
     || XCTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* or inactive*/
      converseLib.validationFailed(29); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM003.XXXPRCNM = "TS0T340"; /* Process name*/
      set TS0TM003.XCTCD cursor, modified, bold; /* highlight field*/
    else
      TSSREC.XCTCD = TS0TM003.XCTCD; /* save the code*/
    end
  else
    TSSREC.XCTCD = " "; /* default code*/
  end

   /* ------------------------------------------------------------*/
           /* 3) state*/
   /* ------------------------------------------------------------*/

  if (TS0TM003.XCTCD == "USA") /* If country is USA*/
    if (TS0TM003.XSTCD != " ") /* State code entered*/
      sysVar.arrayIndex = 0; /* Initialize ezetst*/

      if (TS0TM003.XSTCD in XSTTBL.XSTCD) /* Check valid state*/
      end

    else
      TSSREC.XSTCD = " "; /* default code*/
    end
    if (sysVar.arrayIndex == 0                   /* Not in table*/
     || XSTTBL.XXXSTAT[sysVar.arrayIndex] == "I" /* or inactive*/
     || TS0TM003.XSTCD == " ")                   /* or state missing*/
      converseLib.validationFailed(30); /* Display error message*/
      TS0TW01.TS0TWPSW = "Y"; /* Indicate problem*/
      TS0TM003.XXXPRCNM = "TS0T340"; /* Process name*/
      set TS0TM003.XSTCD cursor, modified, bold; /* highlight field*/
    else
      TSSREC.XSTCD = TS0TM003.XSTCD; /* save the code*/
    end
  else
    TSSREC.XSTCD = TS0TM003.XSTCD; /* save the code*/
  end

   /* ------------------------------------------------------------*/
           /* 4) address - condense lines 1, 2, 3, and save them*/
   /* ------------------------------------------------------------*/

  if (TS0TM003.XXX-ADDR1 == " " /* if 1ST address line is blank*/
   && TS0TM003.XXX-ADDR2 != " ") /* and 2ND address line is not blank*/
    TS0TM003.XXX-ADDR1 = TS0TM003.XXX-ADDR2; /* move line to 1st*/
    TS0TM003.XXX-ADDR2 = " "; /* blank second address*/
  else
    if (TS0TM003.XXX-ADDR1 == " " /* if first address line is blank*/
     && TS0TM003.XXX-ADDR3 != " ") /* and third address line is not blank*/
      TS0TM003.XXX-ADDR1 = TS0TM003.XXX-ADDR3; /* move line to 1st*/
      TS0TM003.XXX-ADDR3 = " "; /* blank third address*/
    end
  end

  if (TS0TM003.XXX-ADDR2 == " " /* if second address line is blank*/
   && TS0TM003.XXX-ADDR3 != " ") /* and third address line is not blank*/
    TS0TM003.XXX-ADDR2 = TS0TM003.XXX-ADDR3; /* move line to 1st*/
    TS0TM003.XXX-ADDR3 = " "; /* blank second address*/
  end

  TSSREC.XXX-ADDR1 = TS0TM003.XXX-ADDR1; /* save addresses*/
  TSSREC.XXX-ADDR2 = TS0TM003.XXX-ADDR2;
  TSSREC.XXX-ADDR3 = TS0TM003.XXX-ADDR3;

   /* ------------------------------------------------------------*/
           /* 5) secondary carrier code*/
   /* ------------------------------------------------------------*/

  if (TS0TM003.TSFCARR2 == " ") /* If carrier code is missing*/
    TS0TM003.TSACARNM = " "; /* clear carrier name*/
    TSFREC.TSFCARR2 = " "; /* default*/
  else
    TSAREC.TSACARCD = TS0TM003.TSFCARR2; /* move in key*/
    TS0TS04(); /* select carrier*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
     && TSAREC.XXXSTAT == "A")   /* in active status*/
      TS0TM003.TSACARNM = TSAREC.TSACARSN; /* move in carrier name*/
      TSFREC.TSFCARR2 = TSAREC.TSACARCD; /* save the code*/
    else
      if (SQLCA.VAGen_SQLCODE == 0 /* if carrier exists*/
       && TSAREC.XXXSTAT == "I")   /* in inactive status*/
        converseLib.validationFailed(72); /* error message*/
        TS0TM001.XXXPRCNM = "TS0T340"; /* Process name*/
        TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
        set TS0TM003.TSFCARR2 cursor, modified, bold; /* highlight field*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if carrier does not exist*/
          converseLib.validationFailed(39); /* error message*/
          TS0TM001.XXXPRCNM = "TS0T340"; /* Process name*/
          TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
          set TS0TM003.TSFCARR2 cursor, modified, bold; /* highlight field*/
        end
      end
    end
  end


end // end TS0T340

// Process valid input request
Function TS0T350()
   /* ------------------------------------------------------------*/

             /* PROCESS VALID INPUT REQUESTS*/

   /* 1) If ENTER is pressed, add the header and transfer to next*/
      /* application (TS0U - Build a container).*/
   /* 2) If PF17 is pressed, go to map 2 ( charges add map ).*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* if enter pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N")     
    TS0T151(); /* add the shipment text*/
    TS0T152(); /* add the shipment address*/
    TS0T153(); /* add the shipment header*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If shipment is found*/
      TSWREC.TSWUPDFL = "N"; /* set up all tsxrec pass records*/
      TSWREC.TSWREJFL = "N";
      TSWREC.TSWHDRFL = "Y";
      TSWREC.TSWCNTFL = "N";
      TSWREC.TSWCPLFL = "N";
      TSWREC.TSWCRTFL = "N";
      TSWREC.TSFBOL = TSFREC.TSFBOL;
      TSWREC.TSACARCD = TSFREC.TSACARCD;
      TSWREC.TS5CRAFT = TSFREC.TS5CRAFT;
      TSWREC.TSFSHPNB = TSFREC.TSFSHPNB;
      TSWREC.TSEORIG = TSFREC.TSEORIG;
      TSWREC.TSEDEST = TSFREC.TSEDEST;
      TSWREC.XWHCD = TSFREC.XWHCD;
      COMMAREA.CAUSERA = TSWREC.CAUSERA;
      if (TSWREC.TSWADDMO == "4")
        COMMAREA.CATOAP = "TS0J"; /* Set to TS0J menu*/
      else
        COMMAREA.CATOAP = "TS0U"; /* Set to TS0U menu*/
      end
      XSTSS01(); /* transfer to another application*/
      TS0TW01.TS0TWPSW = "Y"; /* if fails, indicate error*/
      TS0TM003.XXXPRCNM = "TS0T350"; /* Process name*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.eventKey is pf3 /* if pf3 was pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N")   
    TS0TW01.TS0TWMAP = "1"; /* set to map 1*/
  end

  if (converseVar.eventKey is pf17 /* if pf17 was pressed and no errors*/
   && TS0TW01.TS0TWPSW == "N")    
    TS0TW01.TS0TWMAP = "2"; /* set to map 2*/
    TS0TW01.TS0TWFSW = "C"; /* set function switch to charges*/
  end


end // end TS0T350

// Verify dates entered
Function TS0TS02()
   /* ------------------------------------------------------------*/
                /* VERIFY THE DATES ENTERED*/

   /* Validate the dates entered on the screen.*/

   /* ------------------------------------------------------------*/

  set TA2REC empty; /* Clear working record*/
  TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
  TA2REC.TA2GRTYP = "A"; /* move date type to record*/
  TA2REC.TA2GRGA = TS0TW01.TS0TWDTE; /* move date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/


end // end TS0TS02

// Select from DTRANS.VTSLOC01
Function TS0TS03()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTSLOC01*/

   /* This module select a table row from the location table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100)
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0TS03"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
    TS0TM001.XXXPRCNM = "TS0TS03"; /* Process name*/
  end


end // end TS0TS03

// Select from DTRANS.VTSCAR01
Function TS0TS04()
   /* ------------------------------------------------------------*/
                 /* SELECT CARRIER TABLE ROW*/

   /* 1) Set record empty, move key field, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2340" ("S ", SQLCA, TSAREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0TS04"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSCAR01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TW01.TS0TWPSW = "Y"; /* Indicate Problem*/
    TS0TM001.XXXPRCNM = "TS0TS04"; /* Process name*/
  end


end // end TS0TS04

// Select from DTRANS.VCRAFT01
Function TS0TS05()
   /* ------------------------------------------------------------*/
                 /* SELECT CRAFT TABLE ROW*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2330" ("S ", SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0TS05"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCRAFT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0TW01.TS0TWPSW = "Y"; /* Indicate Problem*/
    TS0TM001.XXXPRCNM = "TS0TS05"; /* Process name*/
  end


end // end TS0TS05

// Select from DTRANS.VTTIME01
Function TS0TS06()
   /* ------------------------------------------------------------*/

                 /* SELECT FROM DTRANS.VTTIME01*/

   /* This module select a table row from the transit time table.*/
   /* It will return a system error if an unexpected return*/
     /* code is received.*/
   /* ------------------------------------------------------------*/

  call "IO2360" ("S ", SQLCA, TSEREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Unexpected return code*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(57); /* date is missing or invalid*/
      TS0TM001.XXXPRCNM = "TS0TS06"; /* process name*/
      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      set TS0TM001.TSFDESTE cursor, modified, bold; /* highlight field*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0TS06"; /* Process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";
      TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VTTIME01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0TW01.TS0TWPSW = "Y"; /* indicate problem*/
      TS0TM001.XXXPRCNM = "TS0TS06"; /* Process name*/
    end
  end


end // end TS0TS06

// Add the shipment text row
Function TS0TS07()
   /* ------------------------------------------------------------*/

                    /* ADD THE ROW TO VTSTXT01*/

        /* Move in the fields and add the row to the database*/

   /* ------------------------------------------------------------*/

  TSRREC.TSFSHPID = TSWREC.TSFSHPID; /* move in shpid*/

   /* *******************************************/
   /* *********** get current date **************/
   /* ************ and time *********************/
   /* *******************************************/

  XX0XS01();
  TS0TW01.TS0TWCDT = XX0XW01.XX0XWDAT; /* save current date ccyymmdd*/

  TSRREC.ZZZCHGDT = TS0TW01.TS0TWCDT; /* change date*/
  TSRREC.ZZZSDT = TS0TW01.TS0TWCDT; /* Set up date*/
  TSRREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  TSRREC.ZZZCHGCT = 0; /* Change count*/

  call "IO2690" ("A ", SQLCA, TSRREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if good return code*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0TS07"; /* Process name*/
    TA1REC.TA1LOC = "ADD TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSTXT01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TS0TM001.XXXPRCNM = "TS0TS07"; /* Process name*/
    exit stack;

  end


end // end TS0TS07

// Select row DTRANS.VTSLOC02
Function TS0TS08()
   /* ------------------------------------------------------------*/
   /* This module select a table row from the tsloc table.*/
   /* It will return a system error if an unexpected return*/
   /* code is received.*/
   /* ------------------------------------------------------------*/

  call "VTSLOC02" ("S ", SQLCA, VTSLOC02) {isNoRefresh = yes, isExternal = yes}; /* Select table*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous stat*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination funct*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination funct*/
      converseLib.clearScreen();
       /* Clear screen before redis*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0TS08"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";
    TA1REC.TA1MAP = "TS0TM001"; /* Map name*/
    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    TS0TM001.XXXPRCNM = "TS0TS08"; /* Process name*/

  end


end // end TS0TS08

//*** RECORD=TS0TW01 ****
// Working storage for TS0O - Location Inquiry/Maintenance
// ***********************
Record TS0TW01 type basicRecord
  10 TS0TWMAP TS0TWMAP ; 
  10 YMTCD YMTCD ; 
  10 TS0TWPSW TS0TWPSW ; 
  10 TS0TWFEX TS0TWFEX ; 
  10 TS0TWUPF TS0TWUPF ; 
  10 TS0TWFSW TS0TWFSW ; 
  10 TS0TWTX1 TS0TWTX1 ; 
  10 TS0TWTX2 TS0TWTX2 ; 
  10 TS0TWCID TS0TWCID ; 
    15 TS0TWCI1 TS0TWCI1 ; 
    15 TS0TWCI2 TS0TWCI2 ; 
  10 TS0TWDTE TS0TWDTE ; 
  10 TS0TWCDT TS0TWCDT ; 
    15 TS0TWCEN TS0TWCEN ; 
    15 TS0TWYMD TS0TWYMD ; 
      20 TS0TWYY TS0TWYY ; 
      20 TS0TWMM TS0TWMM ; 
      20 TS0TWDD TS0TWDD ; 
  10 TS0TWOCT TS0TWOCT ; 
  10 TS0TWOST TS0TWOST ; 
  10 TS0TWOCO TS0TWOCO ; 
  10 TS0TWICT TS0TWICT ; 
  10 TS0TWIST TS0TWIST ; 
  10 TS0TWICO TS0TWICO ; 
  10 TS0TWDCT TS0TWDCT ; 
  10 TS0TWDST TS0TWDST ; 
  10 TS0TWDCO TS0TWDCO ; 
  10 TS0TWDDT TS0TWDDT ; 
  10 TS0TWCMD TS0TWCMD ; 
    15 TS0TWSNB TS0TWSNB ; 
      20 TS0TWMMM TS0TWMMM ; 
      20 TS0TWMDD TS0TWMDD ; 
    15 TS0TWMYY TS0TWMYY ; 
  10 TS0TWSWC TS0TWSWC ; 
  10 TS0TWSC1 TS0TWSC1 ; 
  10 TS0TWSC2 TS0TWSC2 ; 
  10 TS0TWSC3 TS0TWSC3 ; 
  10 TS0TW-MAX-ADT-DATE TS0TW-MAX-ADT-DATE ; 
  10 TS0TW-ADT-DATE-WINDOW TS0TW-ADT-DATE-WINDOW ; 
end // end TS0TW01

//*** RECORD=TS0TW02 ****
// Record for holding temporary ship IDs
// ***********************
Record TS0TW02 type basicRecord
  10 TS0TW_NSHPNBR TS0TW_NSHPNBR ; 
  10 TS0TW_CSHPNBR TS0TW_CSHPNBR ; 
  10 TS0TW_PC3PONBR TS0TW_PC3PONBR ; 
  10 TS0TW_NPC3PONBR TS0TW_NPC3PONBR ; 
  10 TS0TW_PONBRARY TS0TW_PONBRARY [20] ; 
  10 TS0TW_SHPARY TS0TW_SHPARY [20] ; 
  10 TS0TW_TSIPLNBR TS0TW_TSIPLNBR [20] ; 
  10 TS0TW_CNTARY TS0TW_CNTARY [20] ; 
  10 TS0TW_CNTSHPARY TS0TW_CNTSHPARY [20] ; 
  10 SHPFLG SHPFLG ; 
  10 CTEFLAG CTEFLAG ; 
  10 TS0TWIX1 TS0TWIX1 ; 
  10 TS0TWIX2 TS0TWIX2 ; 
  10 TS0TWIX3 TS0TWIX3 ; 
  10 TS0TWIXN TS0TWIXN ; 
  10 TS0TWIXN1 TS0TWIXN1 ; 
  10 TS0TWIXN2 TS0TWIXN2 ; 
  10 TS0TWIXN3 TS0TWIXN3 ; 
  10 TS0TWIXN4 TS0TWIXN4 ; 
  10 IOCOUNT IOCOUNT ; 
  10 UPDCNT UPDCNT ; 
end // end TS0TW02

//*** RECORD=TS0TW03 ****
//    TRANSPORTATION COUNT INQUIRY PARAMETERS
//    PARAMETERS TO PASS:    Entered function ===> TSCFNC
// 
//    DATE      NAME       DESCRIPTION OF CHANGE
//    -----   -------     -----------------------------
//   03/05/97  LWILS2      NEW RECORD USED TO TRANSFER DATA
//   03/24/97  LWILS2      added gpc code  TO TRANSFER DATA
// ***********************
Record TS0TW03 type basicRecord
  5 TSOTGRP TSOTGRP ; 
    10 TSCFNC TSCFNC ; 
    10 TSCCNT TSCCNT ; 
    10 TSCFILL TSCFILL ; 
    10 TSCBEGDT TSCBEGDT ; 
    10 TSCENDDT TSCENDDT ; 
    10 TSCLOCXR TSCLOCXR ; 
    10 TSCHICXR TSCHICXR ; 
end // end TS0TW03

//*** RECORD=TS0TW04 ****
//    TRANSPORTATION COUNT INQUIRY PARAMETERS
//    PARAMETERS TO PASS:    Entered function ===> TSCFNC
// 
//    DATE      NAME       DESCRIPTION OF CHANGE
//    -----   -------     -----------------------------
//   03/05/97  LWILS2      NEW RECORD USED TO TRANSFER DATA
//   03/24/97  LWILS2      added gpc code  TO TRANSFER DATA
// ***********************
Record TS0TW04 type basicRecord
  5 TS0TGRP TS0TGRP ; 
    10 TSCFNC TSCFNC ; 
    10 IO-MAX-CNTNR-NBR IO-MAX-CNTNR-NBR ; 
    10 TSCCNT TSCCNT ; 
    10 IO-IND IO-IND ; 
end // end TS0TW04

//*** RECORD=TS0TW05 ****
// Working storage for TS0T - Shipment add menu
// ***********************
Record TS0TW05 type basicRecord
  10 TS0TWPRM TS0TWPRM ; 
    15 TS0TWNID TS0TWNID ; 
    15 TS0TWFIL TS0TWFIL ; 
end // end TS0TW05

//*** RECORD=TSJREC ****
// *******TRANSPORTATION SCHEDULE INQUIRY PARAMETERS***********
// 
//   PARAMETERS TO PASS:  Entered Origin         ==> TSCORIG
//                        Entered Destination    ==> TSCDEST
//                        Entered Begin Dprt.Dt. ==> TSNBDPRT
//                        Entered End   Dprt.Dt. ==> TSNEDPRT
//                        Entered Begin Arr. Dt. ==> TSNBARR
//                        Entered End   Arr. Dt. ==> TSNEARR
// 
//   PARAMETERS TO PASS FOR SHIPMENT INQUIRIES:
//                        ENTERED BEGIN DATE     ==> TSNBEGDT
//                        ENTERED END DATE       ==> TSNENDDT
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 01/09/88   MCHRIS   New record.
// 04/25/88   MCHRIS   ADDED SHIPMENT INQUIRY PARAMETERES
// **********************
Record TSJREC type basicRecord
  5 TSNGROUP TSNGROUP ; 
    10 TSNFNC TSNFNC ; 
    10 TSCOUNT TSCOUNT ; 
    10 TSIND TSIND ; 
    10 TSNBARVL TSNBARVL ; 
    10 TSNEARVL TSNEARVL ; 
    10 TSNBDPRT TSNBDPRT ; 
    10 TSNEDPRT TSNEDPRT ; 
    10 TSNBEGDT TSNBEGDT ; 
    10 TSNENDDT TSNENDDT ; 
    10 TSNLOCXR TSNLOCXR ; 
    10 TSNHICXR TSNHICXR ; 
end // end TSJREC

DataItem CTEFLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ENDING PARM DATE
DataItem IO-IND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BEGIN PARM DATE
DataItem IO-MAX-CNTNR-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem IOCOUNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SHPFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RECORD GROUP LEVEL
DataItem TS0TGRP char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Days over curr date constant
DataItem TS0TW-ADT-DATE-WINDOW num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Curr date + days over allowed
DataItem TS0TW-MAX-ADT-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date ccyymmdd
DataItem TS0TWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working storage century
DataItem TS0TWCEN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st part OP1CUOID
DataItem TS0TWCI1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working OP1NORID
DataItem TS0TWCI2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working OP1CUOID
DataItem TS0TWCID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current map date mmddyy
DataItem TS0TWCMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dest foreign country code
DataItem TS0TWDCO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// destination city
DataItem TS0TWDCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// day
DataItem TS0TWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// domestic estimated ETD date
DataItem TS0TWDDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// destination state
DataItem TS0TWDST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage date
DataItem TS0TWDTE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// final exit flag
DataItem TS0TWFEX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0TWFIL char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// charge/addr function switch
DataItem TS0TWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dschg foreign country code
DataItem TS0TWICO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discharge city
DataItem TS0TWICT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// discharge state
DataItem TS0TWIST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0TWIX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TWIXN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TWIXN1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TWIXN2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TWIXN3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TWIXN4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed
DataItem TS0TWMAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map day
DataItem TS0TWMDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0TWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map month
DataItem TS0TWMMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map year
DataItem TS0TWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0TWNID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// origin foreign country code
DataItem TS0TWOCO char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// origin city
DataItem TS0TWOCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// origin state
DataItem TS0TWOST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max packing list dtl constant
DataItem TS0TWPRM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// problem switch
DataItem TS0TWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch - 2
DataItem TS0TWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch - 3
DataItem TS0TWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0TWSC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default shipment number
DataItem TS0TWSNB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem TS0TWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment line 1
DataItem TS0TWTX1 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comment line 2
DataItem TS0TWTX2 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update flag
DataItem TS0TWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage yr,mo,day
DataItem TS0TWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0TWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0TW_CNTARY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TW_CNTSHPARY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temp Ship ID
DataItem TS0TW_CSHPNBR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TW_NPC3PONBR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New Nike Ship ID
DataItem TS0TW_NSHPNBR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TW_PC3PONBR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TW_PONBRARY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TW_SHPARY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem TS0TW_TSIPLNBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// COUNT
DataItem TSCOUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_DEST_LOC_CD
DataItem TSIND int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RECORD GROUP LEVEL
DataItem TSOTGRP char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem UPDCNT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

