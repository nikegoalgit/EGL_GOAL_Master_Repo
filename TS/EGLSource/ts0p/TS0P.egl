package ts0p;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import ni.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pv.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=TS0P ****
// This program allows users to pull up shipments on the screen
// that have a common style and/or color, spec, quality,
// destination, and PO and fall within a specified eta date
// range.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          09/27/88  CEPPLE  New application.
//          05/29/90  CEPPLE  Fix map to autoskip cursor to
//                            next field.  Set up processing
//                            to bypass shphd that do not have
//                            gpc to match map gpc.
// Fix      07/04/90  SPOPA   Correct to move key TS0PMXWH to
//                            TS7REC instead of line XWHCD when
//                            obtaining data to display.
// Fix      07/16/90  CEPPLE  Set up so that user may enter any
//                            p.o. id.  Error message displayed
//                            when multiple po # matches found.
// Fix      08/16/90  CEPPLE  Clear TSWREC from application and
//                            inquiry in initialization.
// TS#5     10/02/90  SPOPA   Use TSHNKCNX array in TS7REC.
// TS#015   11/14/90  KSTOKK  Increase allowable ETA date range
//                            from 31 to 95 days.
// TS#135   12/03/90  KSTOKK  Increase current temporary stor-
//                            age page number from two to four
//                            bytes.
// TS#15A   01/30/91  DHUFFM  Make factory code optional.
// TS#000   02/13/91  KSTOKK  Increase TS0PWLIN length from 92
//                            to 96.
// TS#000   03/05/91  DHUFFM  Increase TS0PWLEN for BOL
//                            increase.
// TS#178   05/07/91  DHUFFM  Change PF12 to transfer to TS0J
//                            and PF20 to transfer to TS02.
// TS#000   05/24/91  DHUFFM  Fix loop problem for negative SQL
//                            return codes.
// TS#105   07/17/91  DHUFFM  Chg to pass all PO data for PF16.
// TS#212   10/21/91  DHUFFM  Add S.O./P.O. information (right/
//                            left screens).
// Fix      12/06/91  CEPPLE  Fix TS0P524 to move correct
//                            map 1/2 style number to pg2rec.
// Fix      12/09/91  SFORD   Fix PF20 to transfer to TS0V
//                            instead of TS02.
//                            Also set header literals to ASKIP
//                            for better data entry flow.
// TS#242   03/16/92  KSTOKK  Fix to carry map header info from
//                            left to right map and back again
//                            and give msg if no data available
//                            or invalid data found.
// TS#256   08/21/92  RCHINI  Fix transfer to TS0J when PF7 and
//                            PF8 are pressed and no more pages
//                            are available to display.
// TS#256   10/05/92  SFORD   Fix "S"s & pop-up window problems
// TS#287   11/16/92  TGIEBE  Add Customer XREF to the header
//                            entry selection criteria.
// TS#260   12/08/92  TGIEBE  Disabled access to application
//                            TS0J when PF12 pressed and no
//                            shipment detail info selected.
// TS#000   11/07/96  JCARL1  Remove alarm for msg display.
// Y2KFIX   11/18/97  VRAMAC  Y2K MODIFICATIONS MADE TO :
//                            TS0P200 & TS0P250 - REMOVE THE
//                            CHECK FOR YY = '00' FOR YEAR2000.
// *********************
Program TS0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "TS00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC4REC PC4REC; // record
  PCFREC PCFREC; // record
  PCWREC PCWREC; // record
  PCYREC PCYREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TS0PW01 TS0PW01; // record
  TS0PW02 TS0PW02; // record
  TS0PW03 TS0PW03; // record
  TS7REC TS7REC; // record
  TSCREC TSCREC; // record
  TSNREC TSNREC; // record
  TSWREC TSWREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use TS0PM.TS0PM001,  // forms
      TS0PM.TS0PM002, 
      TS0PM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPTS001: XPTS001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Schedule Inquiry.*/
     /* ------------------------------------------------------------*/

    set FY1REC empty; /* Initialize records*/
    set PCFREC empty;
    set PCYREC empty;
    set PC3REC empty;
    set PC4REC empty;
    set PG2REC empty;
    set TAEREC empty;
    set TSNREC empty;
    set TS7REC empty;
    set TSCREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set ERRSQLCA empty;
    set SQLCA empty;
    set TS0PW01 empty; /* Initialize working storage*/
    set TS0PW02 empty; /* Initialize temporary storage*/
    set TS0PM001 initial; /* Initialize map output area*/

    TS0PW01.TS0PWSWR = "N"; /* Indicate request for data*/
    TS0PW01.TS0PWSWM = "1"; /* Indicate map 1*/
    TS0PW01.TS0PWTOK = "N"; /* Indicate transfer to ts02 not valid*/
    TS0PW01.TS0PWMXP = 10; /* set max number of passed shipment #s*/

     /* ------------------------------------------------------------*/
     /* If control was passed to this transaction from the 'PC'*/
     /* system, then move set up pcwrec from the commarea and move*/
     /* appropriate pcwrec fields to application WS items.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAFRMSYS == "PC") /* Came from within the system*/
      PCWREC.CAUSERA = COMMAREA.CAUSERA; /* Restore work record*/

      TS0PW01.XGPCD = PCWREC.XGPCD;
      TS0PW01.SY1STNBR = PCWREC.SY1STNBR;
      TS0PW01.TS0PMCLR = PCWREC.SY2CLRID;
      TS0PW01.XQACD = PCWREC.XQACD;
      TS0PW01.PC2INSEG = PCWREC.PC2INSEG;
      TS0PW01.TS0PMPO = PCWREC.PC3PONBR;
      TS0PW01.TS0PWIDT = PCWREC.PC3POIDT;
      TS0PW01.FY1FCTYC = PCWREC.FY1FCTYC;
      TS0PW01.PC4ORTYP = PCWREC.PC4ORTYP;

    else
      set PCWREC empty; /* Initialize work record area*/
    end


    TSWREC.TSWINQFL = " "; /* clear inquiry flag*/
    TSWREC.TSWFRAPP = " "; /* clear from application*/
    TS0PW01.TS0PWIXM = 1; /* set index*/
    while (TS0PW01.TS0PWIXM <= TS0PW01.TS0PWMXP) /* while le max pass lines*/
      TSWREC.TSWSHPID[TS0PWIXM] = 0; /* clear all pass fields*/
      TSWREC.TSWBOL[TS0PWIXM] = " ";
      TSWREC.TSWCARCD[TS0PWIXM] = " ";
      TSWREC.TSWCRAFT[TS0PWIXM] = " ";
      TSWREC.TSWSHPNB[TS0PWIXM] = " ";
      TSWREC.TSWORIG[TS0PWIXM] = " ";
      TSWREC.TSWDEST[TS0PWIXM] = " ";
      TSWREC.TSWXWHCD[TS0PWIXM] = " ";
      TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* incr index*/
    end


    TS0P001: TS0P001();
     /* *************************************************************/
     /* Flow to converse application*/
     /* *************************************************************/

    goto TS0P001;


  end // end main
end // end TS0P

// Verify customer xref
Function TS0P-52100()
   /* -------------------------------------------------------*/
   /* VERIFY CUSTOMER XREF ENTERED EXISTS*/
   /* -------------------------------------------------------*/

  if (TS0PM001.PC2CUXID != " " /* map1 cust xref not space*/
   || TS0PM002.PC2CUXID != " ") /* map2 cust xref not space*/

    PC2REC.PC2CUXID = TS0PM001.PC2CUXID; /* move in cust xref key*/
    PC2REC.XGPCD = TS0PM001.XGPCD; /* move in gpc key*/

    call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes}; /* select search row*/

    if (SQLCA.VAGen_SQLCODE != 0 /* have an expected return code*/
     && SQLCA.VAGen_SQLCODE != 100) /* and handled in previous process*/

      if (SQLCA.VAGen_SQLCODE == -911) /* resource not available error*/
        converseLib.validationFailed(11); /* set msg number*/
        TA1REC.TA1FUNC = "POST"; /* termination function*/
      else
        converseLib.validationFailed(10); /* indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* termination function*/
        converseLib.clearScreen();
         /* clear screen before redisplay*/
        converseLib.clearScreen();
        
      end

      TA1REC.TA1TYPE = "DB2 "; /* type of error*/
      TA1REC.TA1PGMNM = "P-52100"; /* process name*/
      TA1REC.TA1LOC = "SELECT TABLE ROW";

      if (TS0PW01.TS0PWSWM == "1") /* map1 requested*/
        TA1REC.TA1MAP = "TS0PM001"; /* set map1 name*/
      else
        TA1REC.TA1MAP = "TS0PM002"; /* set map2 name*/
      end

      TA1REC.TA1DBASE = "DPRODC  "; /* set database name*/
      TA1REC.TA1TBLVU = "VPRDCU01"; /* set table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diagnosis routine*/

      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM001.XXXPRCNM = "P-52100"; /* process name map1*/
      TS0PM002.XXXPRCNM = "P-52100"; /* process name map2*/
    end


    if (SQLCA.VAGen_SQLCODE == 0) /* search row found*/
      TS0PW01.PC2CUXID = TS0PM001.PC2CUXID; /* save xref  to ws*/
      TS0PW01.XGPCD = TS0PM001.XGPCD; /* save gpc   to ws*/

      TS0PW01.PC2INSEG = PC2REC.PC2INSEG; /* save inseg to ws*/
      TS0PM001.PC2INSEG = PC2REC.PC2INSEG; /* move inseg to map1*/
      TS0PM002.PC2INSEG = PC2REC.PC2INSEG; /* move inseg to map2*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* search row not found*/
        converseLib.validationFailed(161); /* error message*/
        TS0PW01.TS0PWPSW = "Y"; /* problem switch set*/
        TS0PM001.XXXPRCNM = "P-52100"; /* process name map1*/
        TS0PM002.XXXPRCNM = "P-52100"; /* process name map2*/
        set TS0PM001.PC2CUXID cursor, modified, bold;
        set TS0PM002.PC2CUXID cursor, modified, bold;
      end
    end
  end


end // end TS0P-52100
// Transportation style inquiry
Function TS0P001()
   /* ------------------------------------------------------------*/

                /* SHIPMENT CARRIER INQUIRY*/

   /* This is the main process used to display the schedule map.*/
   /* Processing always return to the top of this group.*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWSWR == "Y" /* If request for data is yes*/
   && TS0PW01.TS0PWPSW == "N" /* and no errors*/
   && TS0PW01.TS0PWSWM != "2") /* and map 1*/
    TS0P100(); /* Obtain the data to display*/
  else
    if (TS0PW01.TS0PWSWR == "Y" /* If request for data is yes*/
     && TS0PW01.TS0PWPSW == "N") /* and no errors*/
      TS0P101(); /* Obtain data for map2*/
    end
  end

  if (TS0PW01.TS0PWSWM != "2") /* If map 1 selected*/
    TS0P200(); /* Format and display map 1*/
  else
    TS0P250(); /* Format and display map 2*/
  end

  TS0P300(); /* Check attention identifier*/

  TS0P400(); /* Reset fields to normal intensity*/

  if (TS0PW01.TS0PWSWM != "2") /* If map 1 selected*/
    TS0P500(); /* Verify map 1 entered data*/
  else
    TS0P550(); /* Verify map 2 entered data*/
  end

  TS0P600(); /* Process valid input request*/


end // end TS0P001

// Obtain data to display map 1
Function TS0P100()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move valid screen parameters to TSNREC fields.*/
   /* 2) Select sets and open cursors for DTRANS.VSHPHD02.*/
   /* 3) Fetch rows from SHIPMENT HEADER table.*/
      /* - While rows exist to fetch.*/
          /* . Process the containers associated with each*/
            /* shipment header.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Initialize records*/
  set TS7REC empty; /* Initialize records*/
  TS0PW01.TS0PWIXM = 1; /* Set counter for screen ws*/
  TS0PW01.TS0PWIX3 = 1; /* Set counter for PO ws*/

  TS0P110(); /* Purge any temporary storage*/

  set TS0PW02 empty; /* Clear screen WS*/

  while (TS0PW03.TS0PWPON[TS0PWIX3] > 0
   || TS0PW01.TS0PWIX3 == 1)
    if (TS0PW01.TS0PWPSW != "Y") /* No errors have occurred*/
      TSNREC.TSNBEGDT = TS0PW01.TSNBEGDT;
      TSNREC.TSNENDDT = TS0PW01.TSNENDDT;

      TS7REC.XGPCD = TS0PM001.XGPCD;
      TS7REC.SY1STNBR = TS0PM001.TS0PMSTY;

      /* ** Color id*/
      if (TS0PM001.TS0PMCLR == " ") /* If no data entered*/
        TS7REC.SY2CLRID = "*"; /* default value*/
      else
        TS7REC.SY2CLRID = TS0PM001.TS0PMCLR;
      end

      /* ** Cust xref*/
      if (TS0PM001.PC2CUXID == " ") /* If no data entered*/
        TS7REC.PC2CUXID = "*"; /* wildcard value*/
      else
        TS7REC.PC2CUXID = TS0PM001.PC2CUXID;
      end

      /* ** Iseg*/
      if (TS0PM001.PC2INSEG == " ") /* If no data entered*/
        TS7REC.PC2INSEG = "*"; /* default value*/
      else
        TS7REC.PC2INSEG = TS0PM001.PC2INSEG;
      end

      /* ** Quality*/
      if (TS0PM001.XQACD == " ") /* If no data entered*/
        TS7REC.XQACD = "*"; /* default value*/
      else
        TS7REC.XQACD = TS0PM001.XQACD;
      end

      /* ** Destination*/
      if (TS0PM001.TS0PMDST == " ") /* If dest in not entered*/
        TS7REC.TSEDEST = "*";
      else
        TS7REC.TSEDEST = TS0PM001.TS0PMDST;
      end

      /* ** Warehouse*/
      if (TS0PM001.TS0PMXWH == " ") /* If xwh in not entered*/
        TS7REC.XWHCD = "*";
      else
        TS7REC.XWHCD = TS0PM001.TS0PMXWH;
      end

      /* ** PO number*/
      if (TS0PM001.TS0PMPO == 0 /* If no data entered*/
       && TS0PM001.TS0PMPYR == " "
       && TS0PM001.TS0PMDMO == 0
       && TS0PM001.TS0PMPMO == 0)
        TS7REC.PC3PONBR = -1; /* default value*/
        set TS0PW03 empty;
      else
        TS7REC.PC3PONBR = TS0PW03.TS0PWPON[TS0PWIX3];
      end

      TS0P120(); /* Select set, open the cursor Vshphd02*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
        TS0PW01.TS0PWSW1 = "N";
                                   /* Set end of selected set switch*/

        while (TS0PW01.TS0PWSW1 == "N") /* While data exists to fetch*/
          TS0P130(); /* Obtain data and format page*/
          if (TS0PW01.TS0PWIXM > 12) /* If page full*/
            TS0P140(); /* Add page to Tempory storage*/
          end
        end
        if (TS0PW01.TS0PWSW1 == "Y") /* If last fetch of detail done*/
          TS0P150(); /* Close the shphd02 selected set*/
        end
      end
    end
  end

  if (TS0PW01.TS0PWSW1 == "Y") /* If last fetch of detail done*/
    if (TS0PW01.TS0PWIXM > 1) /* and a partial page exists*/
      TS0P140(); /* add that page to temp storage*/
    end
    TS0PW01.TS0PWTSP = 1; /* initialize page number*/
    TS0PW01.TS0PWSWR = "N"; /* reset request for data switch*/

  end

  if (TS0PW01.TA5TSQIX == 0) /* No data to display*/
   /* ND TS0PW01.TS0PWPSW NE 'Y';   /* Error hasn't already been detected*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    TS0PW01.TS0PWPSW = "Y"; /* Set problem switch to 'Y'*/
    TS0PW01.TS0PW-NO-DATA-MAP-1 = "Y"; /* Set no data map 1 to 'Y'*/
    TS0PM001.XXXPRCNM = "TS0P100"; /* Process name*/
  else
    TS0PW01.TS0PW-NO-DATA-MAP-1 = "N"; /* Set no data map 1 to 'N'*/
  end




end // end TS0P100

// Obtain data to display map 2
Function TS0P101()
   /* ------------------------------------------------------------*/

               /* OBTAIN THE DATA TO DISPLAY*/

   /* 1) Move valid screen parameters to TSNREC fields.*/
   /* 2) Select sets and open cursors for DTRANS.VSHPHD02.*/
   /* 3) Fetch rows from SHIPMENT HEADER table.*/
      /* - While rows exist to fetch.*/
          /* . Process the containers associated with each*/
            /* shipment header.*/

   /* ------------------------------------------------------------*/

  set TSNREC empty; /* Initialize records*/
  set TS7REC empty; /* Initialize records*/
  TS0PW01.TS0PWIXM = 1; /* Set counter for screen ws*/
  TS0PW01.TS0PWIX3 = 1; /* Set counter for PO ws*/

  TS0P110(); /* Purge any temporary storage*/

  set TS0PW02 empty; /* Clear screen WS*/

  while (TS0PW03.TS0PWPON[TS0PWIX3] > 0
   || TS0PW01.TS0PWIX3 == 1)
    if (TS0PW01.TS0PWPSW != "Y") /* No errors have occurred*/
      TSNREC.TSNBEGDT = TS0PW01.TSNBEGDT;
      TSNREC.TSNENDDT = TS0PW01.TSNENDDT;

      TS7REC.XGPCD = TS0PM002.XGPCD;
      TS7REC.SY1STNBR = TS0PM002.TS0PMSTY;

      /* ** Color id*/
      if (TS0PM002.TS0PMCLR == " ") /* If no data entered*/
        TS7REC.SY2CLRID = "*"; /* default value*/
      else
        TS7REC.SY2CLRID = TS0PM002.TS0PMCLR;
      end

      /* ** Customer Xref*/
      if (TS0PM002.PC2CUXID == " ") /* If no data entered*/
        TS7REC.PC2CUXID = "*"; /* wildcard value*/
      else
        TS7REC.PC2CUXID = TS0PM002.PC2CUXID;
      end

      /* ** Iseg*/
      if (TS0PM002.PC2INSEG == " ") /* If no data entered*/
        TS7REC.PC2INSEG = "*"; /* default value*/
      else
        TS7REC.PC2INSEG = TS0PM002.PC2INSEG;
      end

      /* ** Quality*/
      if (TS0PM002.XQACD == " ") /* If no data entered*/
        TS7REC.XQACD = "*"; /* default value*/
      else
        TS7REC.XQACD = TS0PM002.XQACD;
      end

      /* ** Destination*/
      if (TS0PM002.TS0PMDST == " ") /* If dest in not entered*/
        TS7REC.TSEDEST = "*";
      else
        TS7REC.TSEDEST = TS0PM002.TS0PMDST;
      end

      /* ** Warehouse*/
      if (TS0PM002.TS0PMXWH == " ") /* If xwh in not entered*/
        TS7REC.XWHCD = "*";
      else
        TS7REC.XWHCD = TS0PM002.TS0PMXWH;
      end

      /* ** PO number*/
      if (TS0PM002.TS0PMPO == 0 /* If no data entered*/
       && TS0PM002.TS0PMPYR == " "
       && TS0PM002.TS0PMDMO == 0
       && TS0PM002.TS0PMPMO == 0)
        TS7REC.PC3PONBR = -1; /* default value*/
        set TS0PW03 empty;
      else
        TS7REC.PC3PONBR = TS0PW03.TS0PWPON[TS0PWIX3];
      end

      TS0P120(); /* Select set, open the cursor Vshphd02*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If no problems with select*/
        TS0PW01.TS0PWSW1 = "N";
                                   /* Set end of selected set switch*/

        while (TS0PW01.TS0PWSW1 == "N") /* While data exists to fetch*/
          TS0P130(); /* Obtain data and format page*/
          if (TS0PW01.TS0PWIXM > 12) /* If page full*/
            TS0P140(); /* Add page to Tempory storage*/
          end
        end
        if (TS0PW01.TS0PWSW1 == "Y") /* If last fetch of detail done*/
          TS0P150(); /* Close the shphd02 selected set*/
        end
      end
    end
  end

  if (TS0PW01.TS0PWSW1 == "Y") /* If last fetch of detail done*/
    if (TS0PW01.TS0PWIXM > 1) /* and a partial page exists*/
      TS0P140(); /* add that page to temp storage*/
    end
    TS0PW01.TS0PWTSP = 1; /* initialize page number*/
    TS0PW01.TS0PWSWR = "N"; /* reset request for data switch*/

  end

  if (TS0PW01.TA5TSQIX == 0) /* No data to display*/
   /* ND TS0PW01.TS0PWPSW NE 'Y';   /* Error hasn't already been detected*/
    converseLib.validationFailed(21); /* Indicate no data to display*/
    TS0PW01.TS0PWPSW = "Y"; /* Set problem switch*/
    TS0PW01.TS0PW-NO-DATA-MAP-2 = "Y"; /* Set no data map 2 to 'Y'*/
    TS0PM002.XXXPRCNM = "TS0P100"; /* Process name*/
  else
    TS0PW01.TS0PW-NO-DATA-MAP-2 = "N"; /* Set no data map 2 to 'N'*/
  end




end // end TS0P101

// Purge any temporary storage
Function TS0P110()
   /* ------------------------------------------------------------*/

              /* PURGE ANY TEMPORARY STORAGE*/

   /* 1) Purge any temporary storage for this application.*/

   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "TS0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (TS0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0P110"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0PM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  TS0PW01.TS0PWTSP = 0; /* Reset current page number*/
  TS0PW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end TS0P110

// Select (S1)    DTRANS.VSHPHD02
Function TS0P120()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VSHPHD01*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "S1";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0P120"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";

    if (TS0PW01.TS0PWSWM == "1") /* map1 requested*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PM001.XXXPRCNM = "TS0P120"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0P120"; /* Process name*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0P120

// Fetch  (N1)    DTRANS.VSHPHD02
Function TS0P130()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VSHPHD02*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "N1";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    TS0P135(); /* Determine if more PO's exist*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
      TS0PW01.TS0PWSW1 = "Y"; /* Set end switch*/

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "TS0P130"; /* Process name*/
      TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";

      if (TS0PW01.TS0PWSWM == "1") /* request map1*/
        TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
      else
        TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
      end

      TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VSHPHD01"; /* Table view name*/

      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

      TS0PM001.XXXPRCNM = "TS0P130"; /* Process name*/
      TS0PM002.XXXPRCNM = "TS0P130"; /* Process name*/

    else

      TSWREC.XGPCD = TS7REC.XGPCD;

      TS0PW02.TSFSHPID[TS0PWIXM] = TS7REC.TSFSHPID;
      TS0PW02.TSFDESTE[TS0PWIXM] = TS7REC.TSFDESTE;
      TS0PW02.TSEORIG[TS0PWIXM] = TS7REC.TSEORIG;
      TS0PW02.TSEDEST[TS0PWIXM] = TS7REC.TSEDEST;
      TS0PW02.XWHCD[TS0PWIXM] = TS7REC.XWHCD;
      TS0PW02.TSACARCD[TS0PWIXM] = TS7REC.TSACARCD;
      TS0PW02.TS5CRAFT[TS0PWIXM] = TS7REC.TS5CRAFT;
      TS0PW02.TSFSHPNB[TS0PWIXM] = TS7REC.TSFSHPNB;
      TS0PW02.TSFBOL[TS0PWIXM] = TS7REC.TSFBOL;

      TS0PW02.TSHCNTNR[TS0PWIXM] = TS7REC.TSHCNTNR;

      if (TS7REC.TSHSTAT == "RC") /* If container received*/
        TS0PW02.YSSCD[TS0PWIXM] = TS7REC.TSHSTAT;
      else
        TS0PW02.YSSCD[TS0PWIXM] = TS7REC.TSISTAT;
      end
      TS0PW02.PC2CUXID[TS0PWIXM] = TS7REC.PC2CUXID;
      TS0PW02.OP1CUOID[TS0PWIXM] = TS7REC.OP1CUOID;
      TS0PW02.OP1NORID[TS0PWIXM] = TS7REC.OP1NORID;
      TS0PW02.SY1STNBR[TS0PWIXM] = TS7REC.SY1STNBR;
      TS0PW02.XDMCD[TS0PWIXM] = TS7REC.XDMCD;
      TS0PW02.TSIPLNBR[TS0PWIXM] = TS7REC.TSIPLNBR;
      TS0PW02.PC3PONBR[TS0PWIXM] = TS7REC.PC3PONBR;

      TS0PS01(); /* get the po id and order type*/

      if (SQLCA.VAGen_SQLCODE == 0) /* If the row was found*/
        TS0PW01.TS0PWDAT = PC3REC.PC3POIDT;
        if (TSWREC.XGPCD == "03") /* If apparel*/
          TS0PW02.TS0PMPYY[TS0PWIXM] = PC3REC.PCFSECD;
        else
          TS0PW02.TS0PMPYY[TS0PWIXM] = TS0PW01.TS0PWPYY;
        end
        TS0PW02.TS0PMPM1[TS0PWIXM] = TS0PW01.TS0PWPM1;
        TS0PW02.TS0PMPM2[TS0PWIXM] = TS0PW01.TS0PWPM2;
        TS0PW02.FY1FCTYC[TS0PWIXM] = PC3REC.FY1FCTYC;
        TS0PW02.PC4ORTYP[TS0PWIXM] = PC3REC.PC4ORTYP;
      end

      if (TS7REC.PC2CUXID == "     ") /* If customer is blank*/
        TS0PW02.PC2CUXID[TS0PWIXM] = "*****";
      else
        TS0PW02.PC2CUXID[TS0PWIXM] = TS7REC.PC2CUXID;
      end

      TS0PW02.SY2CLRID[TS0PWIXM] = TS7REC.SY2CLRID;

      /* ***************************************************/
       /* Determine the quanitity for the container*/
      /* ***************************************************/

      if (TS7REC.TSHNKCN in TS7REC.TSHNKCNX) /* Container number in array*/
        TS0PW02.TSISHPQT[TS0PWIXM] = TS7REC.TSISHPQX[sysVar.arrayIndex];
      end

      TS0PW02.TSIDETFL[TS0PWIXM] = TS7REC.TSIDETFL;

      TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* increment counter*/

    end
  end


end // end TS0P130

// Determine if multiple PO's
Function TS0P135()
   /* ------------------------------------------------------------*/

               /* DETERMINE IF MORE PO'S EXIST*/

     /* 1) If multiple PO's:*/
        /* a.  Continue fetching next shphd row.*/
        /* b.  Drop out of loop when finished.*/

   /* ------------------------------------------------------------*/

  TS0PW01.TS0PWIX3 = TS0PW01.TS0PWIX3 + 1; /* Increment index*/
  if (TS0PW03.TS0PWPON[TS0PWIX3] > 0) /* More PO's exist*/
    TS7REC.PC3PONBR = TS0PW03.TS0PWPON[TS0PWIX3];
    TS0PW01.TS0PWSW1 = "Y"; /* Set end switch*/
  else
    TS0PW01.TS0PWSW1 = "Y"; /* Set end switch*/
  end

end // end TS0P135

// Add page to temporary storage
Function TS0P140()
   /* ------------------------------------------------------------*/
               /* ADD PAGE TO TEMPORARY STORAGE*/
   /* ------------------------------------------------------------*/

  TS0PW02.TS0PWLEN = 1430; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0P"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (TS0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0P140"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PM001.XXXPRCNM = "TS0P140"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/

  end

  TS0PW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/

  TS0PW01.TS0PWIXM = 1; /* Reset display line number*/

  set TS0PW02 empty; /* Clear temporary storage record*/


end // end TS0P140

// Close  (C1)    DTRANS.VSHPHD02
Function TS0P150()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VSHPHD02*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  TSNREC.TSNFNC = "C1";
  call "IO5240" (TSNREC, SQLCA, TS7REC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0P150"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VSHPHD02"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PM001.XXXPRCNM = "TS0P150"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0P150"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0P150

// Format and display the map
Function TS0P200()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWPSW == "N" /* No errors found*/
   || TS0PW01.TS0PWPSW == " ") /* Or first time thru*/

    set TS0PM001 initial; /* clear the map*/
    set TS0PM002 initial; /* clear the map*/

    /* Move in left screen heading data*/

    TS0PM001.XGPCD = TS0PW01.XGPCD;
    TS0PM001.TS0PMSTY = TS0PW01.SY1STNBR;
    TS0PM001.TS0PMCLR = TS0PW01.TS0PMCLR;
    TS0PM001.PC2CUXID = TS0PW01.PC2CUXID;
    TS0PM001.PC2INSEG = TS0PW01.PC2INSEG;
    TS0PM001.XQACD = TS0PW01.XQACD;
    TS0PM001.SY1STYNM = TS0PW01.SY1STYNM;
    TS0PM001.TSNBEGDT = TS0PW01.TS0PWBDT;
    TS0PM001.TS0PMDST = TS0PW01.TS0PMDST;
    TS0PM001.TS0PMXWH = TS0PW01.TS0PMXWH;
    TS0PM001.TSNENDDT = TS0PW01.TS0PWEDT;
    TS0PM001.TS0PMPO = TS0PW01.TS0PMPO;

    /* --------------------- Y2K OUT BEGIN ---------------*/
    /* IF TS0PW01.TS0PWPYR EQ '00';*/
     /* MOVE '  ' TO TS0PM001.TS0PMPYR;*/
    /* ELSE;*/
     /* MOVE TS0PW01.TS0PWPYR TO TS0PM001.TS0PMPYR;*/
    /* END;*/
    /* --------------------- Y2K OUT END -----------------*/

    /* --------------------- Y2K IN BEGIN ---------------*/
    TS0PM001.TS0PMPYR = TS0PW01.TS0PWPYR;
    /* --------------------- Y2K IN END -----------------*/

    if (TS0PW01.TS0PWPMO == 0)
      TS0PM001.TS0PMPMO = " ";
    else
      TS0PM001.TS0PMPMO = TS0PW01.TS0PWPMO;
    end

    if (TS0PW01.TS0PWDMO == 0)
      TS0PM001.TS0PMDMO = " ";
    else
      TS0PM001.TS0PMDMO = TS0PW01.TS0PWDMO;
    end

    TS0PM001.FY1FCTYC = TS0PW01.FY1FCTYC;
    TS0PM001.PC4ORTYP = TS0PW01.PC4ORTYP;

    if (TS0PW01.TS0PWPSW == " ") /* If first time thru*/
       /* Clear one field to force the request for data*/
       /* if coming from PC system*/
      TS0PW01.XGPCD = "  ";
    end

  end

  if (TS0PW01.TS0PWPSW == " ") /* first time thru and sw not set*/

    TS0PM001.PC4ORTYP = TS0PW01.PC4ORTYP;

    if (TS0PW01.TS0PWBDT == " ") /* if beginning date is blank*/
      XX0XS01(); /* call date routine*/
      TS0PW01.TS0PWMYY = XX0XW01.XX0XWYY; /* set date to mmddyy*/
      TS0PW01.TS0PWMMM = XX0XW01.XX0XWMM;
      TS0PW01.TS0PWMDD = XX0XW01.XX0XWDD;
    end

    if (TS0PW01.TS0PWBDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0PM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = -9; /* add -9 days from todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0PM001.TSNBEGDT = TA2REC.TA2GRGA; /* move beg date*/
        TS0PM002.TSNBEGDT = TA2REC.TA2GRGA; /* move beg date*/
        TS0PW01.TS0PWBDT = TA2REC.TA2GRGA;
      end
    end

    if (TS0PW01.TS0PWEDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0PM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = 22; /* add 22 days to todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0PM001.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0PM002.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0PW01.TS0PWEDT = TA2REC.TA2GRGA;
      end
    end

  end

  if (TS0PW01.TS0PWPSW == "N") /* No errors found*/

    TS0P210(); /* Format the data on the page*/

    if (TS0PM001.TSFDESTE[1] != " ") /* if detail does exist*/
      set TS0PM001.TS0PMSEL[1] cursor; /* set cursor to carrier code*/
    end

  end

  TS0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* IF EZEMNO NE 0;                   /* Error message to display*/
  /* SET TS0PM001 ALARM;             /* Indicate sound alarm*/
  /* END;*/

  converse TS0PM001 ;

  TS0PW01.TS0PWPSW = "N"; /* reset problem switch*/
  TS0PW01.TS0PW-MAP1-INVALID-DATA = "N"; /* reset problem switch*/
  TS0PW01.TS0PW-MAP2-INVALID-DATA = "N"; /* reset problem switch*/

  TS0P220(); /* Check for ? inquiry by the user*/

   /* Move left screen heading data into right screen heading*/

  TS0PM002.XGPCD = TS0PM001.XGPCD;
  TS0PM002.TS0PMSTY = TS0PM001.TS0PMSTY;
  TS0PM002.TS0PMCLR = TS0PM001.TS0PMCLR;
  TS0PM002.PC2CUXID = TS0PM001.PC2CUXID;
  TS0PM002.PC2INSEG = TS0PM001.PC2INSEG;
  TS0PM002.XQACD = TS0PM001.XQACD;
  TS0PM002.SY1STYNM = TS0PM001.SY1STYNM;
  TS0PM002.TSNBEGDT = TS0PM001.TSNBEGDT;
  TS0PM002.TS0PMDST = TS0PM001.TS0PMDST;
  TS0PM002.TS0PMXWH = TS0PM001.TS0PMXWH;
  TS0PM002.TSNENDDT = TS0PM001.TSNENDDT;
  TS0PM002.TS0PMPO = TS0PM001.TS0PMPO;
  TS0PM002.TS0PMPYR = TS0PM001.TS0PMPYR;
  TS0PM002.TS0PMPMO = TS0PM001.TS0PMPMO;
  TS0PM002.TS0PMDMO = TS0PM001.TS0PMDMO;
  TS0PM002.FY1FCTYC = TS0PM001.FY1FCTYC;
  TS0PM002.PC4ORTYP = TS0PM001.PC4ORTYP;

end // end TS0P200

// Format the selected data
Function TS0P210()
   /* ------------------------------------------------------------*/

               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating first leg fields on map.*/
      /* - supress all generic carrier code fields.*/

   /* ------------------------------------------------------------*/

  if (TS0PW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TS0P211(); /* Obtain temporary storage page*/

    set TS0PM001.TS0PMPGL skip; /* Display "PAGE" literal*/
    set TS0PM001.TS0PMOFL skip; /* Display "OF" literal*/

    TS0PM001.TS0PWTSP = TS0PW01.TS0PWTSP; /* Current page number*/
    TS0PM001.TA5TSQIX = TS0PW01.TA5TSQIX; /* Highest page number*/

    TS0PW01.TS0PWIXM = 1; /* Initialize line indexes*/
    TS0PW01.TS0PWIX2 = 0;

      /* move in first line of screen data*/

    TS0PM001.TS0PMSEL[TS0PWIXM] = TS0PW02.TS0PMSEL[TS0PWIXM];
    TS0PW01.TS0PWWDT = TS0PW02.TSFDESTE[TS0PWIXM];
                                   /* make date mmddyy*/
    TS0PW01.TS0PWMMM = TS0PW01.TS0PWWMM; /* month*/
    TS0PW01.TS0PWMDD = TS0PW01.TS0PWWDD; /* day*/
    TS0PW01.TS0PWMYY = TS0PW01.TS0PWWYY; /* year*/
    TS0PM001.TSFDESTE[TS0PWIXM] = TS0PW01.TS0PWMDT;

    TS0PM001.TSACARCD[TS0PWIXM] = TS0PW02.TSACARCD[TS0PWIXM];
    TS0PM001.TS5CRAFT[TS0PWIXM] = TS0PW02.TS5CRAFT[TS0PWIXM];
    TS0PM001.TSEDEST[TS0PWIXM] = TS0PW02.TSEDEST[TS0PWIXM];
    TS0PM001.TSFBOL[TS0PWIXM] = TS0PW02.TSFBOL[TS0PWIXM];
    TS0PM001.TSHCNTNR[TS0PWIXM] = TS0PW02.TSHCNTNR[TS0PWIXM];
    TS0PM001.SY1STNBR[TS0PWIXM] = TS0PW02.SY1STNBR[TS0PWIXM];
    TS0PM001.SY2CLRID[TS0PWIXM] = TS0PW02.SY2CLRID[TS0PWIXM];
    TS0PM001.XDMCD[TS0PWIXM] = TS0PW02.XDMCD[TS0PWIXM];
    TS0PM001.YSSCD[TS0PWIXM] = TS0PW02.YSSCD[TS0PWIXM];
    TS0PM001.TSISHPQT[TS0PWIXM] = TS0PW02.TSISHPQT[TS0PWIXM];

    set TS0PM001.TS0PMSEL[TS0PWIXM] normal; /* display the selection*/

    TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* Increment line indexes*/
    TS0PW01.TS0PWIX2 = TS0PW01.TS0PWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0k212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0k210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0PW01.TS0PWIXM <= 12 /* Until end of lines*/
     && TS0PW02.TS5CRAFT[TS0PWIXM] != " ") /* and lines exist*/

      TS0PM001.TS0PMSEL[TS0PWIXM] = TS0PW02.TS0PMSEL[TS0PWIXM];
      TS0PW01.TS0PWWDT = TS0PW02.TSFDESTE[TS0PWIXM]; /* date mmddyy*/
      TS0PW01.TS0PWMMM = TS0PW01.TS0PWWMM; /* month*/
      TS0PW01.TS0PWMDD = TS0PW01.TS0PWWDD; /* day*/
      TS0PW01.TS0PWMYY = TS0PW01.TS0PWWYY; /* year*/
      TS0PM001.TSFDESTE[TS0PWIXM] = TS0PW01.TS0PWMDT;

      TS0PM001.TSACARCD[TS0PWIXM] = TS0PW02.TSACARCD[TS0PWIXM];
      TS0PM001.TS5CRAFT[TS0PWIXM] = TS0PW02.TS5CRAFT[TS0PWIXM];
      TS0PM001.TSEDEST[TS0PWIXM] = TS0PW02.TSEDEST[TS0PWIXM];
      TS0PM001.TSFBOL[TS0PWIXM] = TS0PW02.TSFBOL[TS0PWIXM];
      TS0PM001.TSHCNTNR[TS0PWIXM] = TS0PW02.TSHCNTNR[TS0PWIXM];
      TS0PM001.SY1STNBR[TS0PWIXM] = TS0PW02.SY1STNBR[TS0PWIXM];
      TS0PM001.SY2CLRID[TS0PWIXM] = TS0PW02.SY2CLRID[TS0PWIXM];
      TS0PM001.XDMCD[TS0PWIXM] = TS0PW02.XDMCD[TS0PWIXM];
      TS0PM001.YSSCD[TS0PWIXM] = TS0PW02.YSSCD[TS0PWIXM];
      TS0PM001.TSISHPQT[TS0PWIXM] = TS0PW02.TSISHPQT[TS0PWIXM];

      set TS0PM001.TS0PMSEL[TS0PWIXM] normal; /* display the selection*/

      if (TS0PW02.TSFSHPID[TS0PWIXM] == TS0PW02.TSFSHPID[TS0PWIX2])
        if (TS0PW02.TSFDESTE[TS0PWIXM] == TS0PW02.TSFDESTE[TS0PWIX2])
          TS0PM001.TSFDESTE[TS0PWIXM] = " "; /* move 0 to date*/
          TS0P212(); /* continue repeating supression*/
        end
      end

      TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* Increment line index*/
      TS0PW01.TS0PWIX2 = TS0PW01.TS0PWIX2 + 1;
    end
  end


end // end TS0P210

// Read temporary storage page
Function TS0P211()
   /* ------------------------------------------------------------*/
            /* READ TEMPORARY STORAGE PAGE*/

   /* 1) Obtain the next page of data to display.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/

   /* ------------------------------------------------------------*/

  TS0PW02.TS0PWLEN = 1430; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0P"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0PW01.TS0PWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (TS0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0P211"; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PM001.XXXPRCNM = "TS0P211"; /* Process name*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0P211

// Continue supression nested IF
Function TS0P212()
   /* ------------------------------------------------------------*/
               /* CONTINUE SUPRESSION OF NESTED IF*/

   /* 1) This process is used in order to help maintain better*/
      /* readability in TS0P210.  The nested IF for the necessary*/
      /* screen suppression is very large, therefore causing poor*/
      /* indentation of lines.  The indentation is still poor*/
      /* within this process but the size is of TS0P210 is kept*/
      /* at a much more reasonable level.*/

   /* ------------------------------------------------------------*/

  if (TS0PW02.TSACARCD[TS0PWIXM] == TS0PW02.TSACARCD[TS0PWIX2])
    TS0PM001.TSACARCD[TS0PWIXM] = " "; /* move ' ' to craft*/
    if (TS0PW02.TS5CRAFT[TS0PWIXM] == TS0PW02.TS5CRAFT[TS0PWIX2])
      TS0PM001.TS5CRAFT[TS0PWIXM] = " "; /* move ' ' to craft*/
      TS0PM002.TS5CRAFT[TS0PWIXM] = " "; /* move ' ' to craft*/
      if (TS0PW02.TSFSHPNB[TS0PWIXM] == TS0PW02.TSFSHPNB[TS0PWIX2])
        TS0PM002.TSFSHPNB[TS0PWIXM] = " "; /* move ' ' to ship num*/
        if (TS0PW02.TSEDEST[TS0PWIXM] == TS0PW02.TSEDEST[TS0PWIX2])
          TS0PM001.TSEDEST[TS0PWIXM] = " "; /* move ' ' to dest*/
          if (TS0PW02.TSFBOL[TS0PWIXM] == TS0PW02.TSFBOL[TS0PWIX2])
            TS0PM001.TSFBOL[TS0PWIXM] = " "; /* move ' ' to ship num*/
            if (TS0PW02.TSHCNTNR[TS0PWIXM] == TS0PW02.TSHCNTNR[TS0PWIX2])
              TS0PM001.TSHCNTNR[TS0PWIXM] = " "; /* move ' ' to cntnr*/
              if (TS0PW02.YSSCD[TS0PWIXM] == TS0PW02.YSSCD[TS0PWIX2])
                if (TS0PW02.TS0PWPOI[TS0PWIXM] == TS0PW02.TS0PWPOI[TS0PWIX2])
                  if (TS0PW02.PC4ORTYP[TS0PWIXM] == TS0PW02.PC4ORTYP[TS0PWIX2])
                    if (TS0PW02.PC3PONBR[TS0PWIXM] == TS0PW02.PC3PONBR[TS0PWIX2])
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end

end // end TS0P212

// Check for ? inquiry by user
Function TS0P220()
   /* ------------------------------------------------------------*/

              /* CHECK FOR USER ? CODE INQUIRY*/

     /* 1) If the user has enter a '?' in any of the appropiate*/
        /* fields, display the pop up window for that CSP table*/
        /* and allow for inquiry.*/

     /* 2) Set map page after all windows displayed*/

   /* ------------------------------------------------------------*/

  if (TS0PM001.XGPCD == "?" /* if any ? entered*/
   || TS0PM001.XQACD == "?" 
   || TS0PM002.XGPCD == "?" /* if any ? entered*/
   || TS0PM002.XQACD == "?")

    if (TS0PM001.XGPCD == "?" /* if ? in gpc field*/
     || TS0PM002.XGPCD == "?") /* if ? in gpc field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                   GPC       "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXGP01(); /* perform gpc window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the gpc        **/
       /* *  type table code to the map.                          **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0PM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
        TS0PM002.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* move code*/
      else
        TS0PM001.XGPCD = " "; /* clear fields*/
        TS0PM002.XGPCD = " "; /* clear fields*/
      end
    end

    if (TS0PM001.XQACD == "?" /* if ? in quality field*/
     || TS0PM002.XQACD == "?") /* if ? in quality field*/
      XPXX001(); /* perform pop-up window initialize*/
      XX0XW02.XX0XWHDR = "                 QUALITY     "; /* heading*/

      while (XX0XW02.XX0XWEND == "N") /* until user hits enter*/
        XPXQA01(); /* perform quality window*/
      end

       /* **********************************************************/
       /* *  If the pass index is greater than zero, use the      **/
       /* *  passed table index 'XX0XWPIX' to move the quality    **/
       /* *  type table code and to the map.                      **/
       /* **********************************************************/

      if (XX0XW02.XX0XWPIX > 0) /* if user selected a code*/
        TS0PM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
        TS0PM002.XQACD = XQATBL.XQACD[XX0XWPIX]; /* move code*/
      else
        TS0PM001.XQACD = " "; /* clear fields*/
        TS0PM002.XQACD = " "; /* clear fields*/
      end
    end

    converseLib.clearScreen();
     /* restore the original map*/
    converseLib.clearScreen();
     /* restore the original map*/

    TS0PW01.TS0PWPSW = "Y"; /* bypass exit by indicating fake error*/

  end


end // end TS0P220

// Format and display the map
Function TS0P250()
   /* ------------------------------------------------------------*/

               /* FORMAT AND DISPLAY THE MAP*/

   /* 1) If no error to display, format and display the map.*/
   /* 2) Indicate sound audible alarm for any error.*/

   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWPSW == "N" /* No errors found*/
   || TS0PW01.TS0PWPSW == " ") /* Or first time thru*/

    set TS0PM002 initial; /* clear the map*/
    set TS0PM001 initial; /* clear the map*/

    /* Move in right screen heading data*/

    TS0PM002.XGPCD = TS0PW01.XGPCD;
    TS0PM002.TS0PMSTY = TS0PW01.SY1STNBR;
    TS0PM002.TS0PMCLR = TS0PW01.TS0PMCLR;
    TS0PM002.PC2CUXID = TS0PW01.PC2CUXID;
    TS0PM002.PC2INSEG = TS0PW01.PC2INSEG;
    TS0PM002.XQACD = TS0PW01.XQACD;
    TS0PM002.SY1STYNM = TS0PW01.SY1STYNM;
    TS0PM002.TSNBEGDT = TS0PW01.TS0PWBDT;
    TS0PM002.TS0PMDST = TS0PW01.TS0PMDST;
    TS0PM002.TS0PMXWH = TS0PW01.TS0PMXWH;
    TS0PM002.TSNENDDT = TS0PW01.TS0PWEDT;
    TS0PM002.TS0PMPO = TS0PW01.TS0PMPO;

    /* ------------------- Y2K OUT BEGIN ----------------*/
    /* IF TS0PW01.TS0PWPYR EQ '00';*/
     /* MOVE '  ' TO TS0PM002.TS0PMPYR;*/
    /* ELSE;*/
     /* MOVE TS0PW01.TS0PWPYR TO TS0PM002.TS0PMPYR;*/
    /* END;*/
    /* ------------------- Y2K OUT END ------------------*/

    /* ------------------- Y2K IN BEGIN ----------------*/
    TS0PM002.TS0PMPYR = TS0PW01.TS0PWPYR;
    /* ------------------- Y2K IN END ------------------*/

    if (TS0PW01.TS0PWPMO == 0)
      TS0PM002.TS0PMPMO = " ";
    else
      TS0PM002.TS0PMPMO = TS0PW01.TS0PWPMO;
    end

    if (TS0PW01.TS0PWDMO == 0)
      TS0PM002.TS0PMDMO = " ";
    else
      TS0PM002.TS0PMDMO = TS0PW01.TS0PWDMO;
    end

    TS0PM002.FY1FCTYC = TS0PW01.FY1FCTYC;
    TS0PM002.PC4ORTYP = TS0PW01.PC4ORTYP;

    if (TS0PW01.TS0PWPSW == " ") /* If first time thru*/
       /* Clear one field to force the request for data*/
       /* if coming from PC system*/
      TS0PW01.XGPCD = "  ";
    end

  end

  if (TS0PW01.TS0PWPSW == " ") /* first time thru and sw not set*/

    TS0PM002.PC4ORTYP = TS0PW01.PC4ORTYP;

    if (TS0PW01.TS0PWBDT == " ") /* if beginning date is blank*/
      XX0XS01(); /* call date routine*/
      TS0PW01.TS0PWMYY = XX0XW01.XX0XWYY; /* set date to mmddyy*/
      TS0PW01.TS0PWMMM = XX0XW01.XX0XWMM;
      TS0PW01.TS0PWMDD = XX0XW01.XX0XWDD;
    end

    if (TS0PW01.TS0PWBDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0PM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = -9; /* add -9 days from todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0PM002.TSNBEGDT = TA2REC.TA2GRGA; /* move beg date*/
        TS0PM001.TSNBEGDT = TA2REC.TA2GRGA; /* move beg date*/
        TS0PW01.TS0PWBDT = TA2REC.TA2GRGA;
      end
    end

    if (TS0PW01.TS0PWEDT == " ") /* if beginning date is blank*/
      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "GETDATE"; /* move in option field*/
      TA2REC.TA2GRGA = TS0PM001.TSNBEGDT; /* begn date*/
      TA2REC.TA2DYAOD = 22; /* add 22 days to todays date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        TS0PM002.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0PM001.TSNENDDT = TA2REC.TA2GRGA; /* move end date*/
        TS0PW01.TS0PWEDT = TA2REC.TA2GRGA;
      end
    end

  end

  if (TS0PW01.TS0PWPSW == "N") /* No errors found*/

    TS0P260(); /* Format the data on the page*/

    if (TS0PM002.TSFDESTE[1] != " ") /* if detail does exist*/
      set TS0PM002.TS0PMSEL[1] cursor; /* set cursor to carrier code*/
    end

  end

  TS0PM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  TS0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  /* IF EZEMNO NE 0;                  /* Error message to display*/
  /* SET TS0PM002 ALARM;            /* Indicate sound alarm*/
  /* END;*/

  converse TS0PM002 ;

  TS0PW01.TS0PWPSW = "N"; /* reset problem switch*/
  TS0PW01.TS0PW-MAP1-INVALID-DATA = "N"; /* reset problem switch*/
  TS0PW01.TS0PW-MAP2-INVALID-DATA = "N"; /* reset problem switch*/

  TS0P220(); /* Check for ? inquiry by the user*/

   /* Move right screen heading data to left screen heading*/

  TS0PM001.XGPCD = TS0PM002.XGPCD;
  TS0PM001.TS0PMSTY = TS0PM002.TS0PMSTY;
  TS0PM001.TS0PMCLR = TS0PM002.TS0PMCLR;
  TS0PM001.PC2CUXID = TS0PM002.PC2CUXID;
  TS0PM001.PC2INSEG = TS0PM002.PC2INSEG;
  TS0PM001.XQACD = TS0PM002.XQACD;
  TS0PM001.SY1STYNM = TS0PM002.SY1STYNM;
  TS0PM001.TSNBEGDT = TS0PM002.TSNBEGDT;
  TS0PM001.TS0PMDST = TS0PM002.TS0PMDST;
  TS0PM001.TS0PMXWH = TS0PM002.TS0PMXWH;
  TS0PM001.TSNENDDT = TS0PM002.TSNENDDT;
  TS0PM001.TS0PMPO = TS0PM002.TS0PMPO;
  TS0PM001.TS0PMPYR = TS0PM002.TS0PMPYR;
  TS0PM001.TS0PMPMO = TS0PM002.TS0PMPMO;
  TS0PM001.TS0PMDMO = TS0PM002.TS0PMDMO;
  TS0PM001.FY1FCTYC = TS0PM002.FY1FCTYC;
  TS0PM001.PC4ORTYP = TS0PM002.PC4ORTYP;

end // end TS0P250

// Format the selected data
Function TS0P260()
   /* ------------------------------------------------------------*/

               /* FORMAT THE SELECTED DATA*/

   /* 1) If no pages in temporary storage indicate no data.*/
   /* 2) Obtain the next page from temporary storage.*/
   /* 3) Format the plan sequence data in the map.*/
      /* - always display the entire first line.*/
      /* - suppress all repeating first leg fields on map.*/
      /* - supress all generic carrier code fields.*/

   /* ------------------------------------------------------------*/

  if (TS0PW01.TA5TSQIX == 0) /* No data to display*/
     /* continue on*/
  else

    TS0P211(); /* Obtain temporary storage page*/

    set TS0PM002.TS0PMPGL skip; /* Display "PAGE" literal*/
    set TS0PM002.TS0PMOFL skip; /* Display "OF" literal*/

    TS0PM002.TS0PWTSP = TS0PW01.TS0PWTSP; /* Current page number*/
    TS0PM002.TA5TSQIX = TS0PW01.TA5TSQIX; /* Highest page number*/

    TS0PW01.TS0PWIXM = 1; /* Initialize line indexes*/
    TS0PW01.TS0PWIX2 = 0;

      /* move in first line of screen data*/

    TS0PM002.TS0PMSEL[TS0PWIXM] = TS0PW02.TS0PMSEL[TS0PWIXM];
    TS0PW01.TS0PWWDT = TS0PW02.TSFDESTE[TS0PWIXM];
                                   /* make date mmddyy*/
    TS0PW01.TS0PWMMM = TS0PW01.TS0PWWMM; /* month*/
    TS0PW01.TS0PWMDD = TS0PW01.TS0PWWDD; /* day*/
    TS0PW01.TS0PWMYY = TS0PW01.TS0PWWYY; /* year*/
    TS0PM002.TSFDESTE[TS0PWIXM] = TS0PW01.TS0PWMDT;

    TS0PM002.TS5CRAFT[TS0PWIXM] = TS0PW02.TS5CRAFT[TS0PWIXM];
    TS0PM002.TSFSHPNB[TS0PWIXM] = TS0PW02.TSFSHPNB[TS0PWIXM];
    TS0PM002.XWHCD[TS0PWIXM] = TS0PW02.XWHCD[TS0PWIXM];
    TS0PM002.TS0PMCXR[TS0PWIXM] = TS0PW02.PC2CUXID[TS0PWIXM];
    TS0PM002.TS0PMPOI[TS0PWIXM] = TS0PW02.TS0PWPOI[TS0PWIXM];
    TS0PM002.TS0PMORT[TS0PWIXM] = TS0PW02.PC4ORTYP[TS0PWIXM];
    TS0PM002.TS0PMPON[TS0PWIXM] = TS0PW02.PC3PONBR[TS0PWIXM];
    if (TS0PW02.OP1NORID[TS0PWIXM] > 0)
      TS0PW01.TS0PWSOI = TS0PW02.OP1NORID[TS0PWIXM] / 1000;
      TS0PW01.TS0PWSOI = TS0PW01.TS0PWSOI + TS0PW02.OP1CUOID[TS0PWIXM];
      TS0PM002.TS0PMSOI[TS0PWIXM] = TS0PW01.TS0PWSOI;
    else
      TS0PM002.TS0PMSOI[TS0PWIXM] = 0;
    end

    TS0PM002.TS0PMCXR[TS0PWIXM] = TS0PW02.PC2CUXID[TS0PWIXM];
    if (TS0PM002.TS0PMCXR[TS0PWIXM] == "*****") /* If there was no cust*/
      set TS0PM002.TS0PMCXR[TS0PWIXM] skip, invisible;
    end
    TS0PM002.SY1STNBR[TS0PWIXM] = TS0PW02.SY1STNBR[TS0PWIXM];
    TS0PM002.SY2CLRID[TS0PWIXM] = TS0PW02.SY2CLRID[TS0PWIXM];
    TS0PM002.TSISHPQT[TS0PWIXM] = TS0PW02.TSISHPQT[TS0PWIXM];
    if (TS0PW02.TSIDETFL[TS0PWIXM] == "Y")
      TS0PM002.TSIDETFL[TS0PWIXM] = "*";
    else
      TS0PM002.TSIDETFL[TS0PWIXM] = " ";
    end

    set TS0PM002.TS0PMSEL[TS0PWIXM] normal; /* display the selection*/

    TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* Increment line indexes*/
    TS0PW01.TS0PWIX2 = TS0PW01.TS0PWIX2 + 1;

     /* Move all display lines to the map.*/
     /* Supress all repeating fields.*/

    /* *************************************************************/
    /* * This nested IF statement needed to be very large in order*/
    /* * to accommodate the necessary screen field suppression*/
    /* * required by the application specification.  This accounts*/
    /* * for the 'perform TS0k212' statement which will continue*/
    /* * the nested IF in another process, therefore making TS0k210*/
    /* * (this process) much more readable.*/
    /* *************************************************************/

    while (TS0PW01.TS0PWIXM <= 12 /* Until end of lines*/
     && TS0PW02.TS5CRAFT[TS0PWIXM] != " ") /* and lines exist*/

      TS0PM002.TS0PMSEL[TS0PWIXM] = TS0PW02.TS0PMSEL[TS0PWIXM];
      TS0PW01.TS0PWWDT = TS0PW02.TSFDESTE[TS0PWIXM]; /* date mmddyy*/
      TS0PW01.TS0PWMMM = TS0PW01.TS0PWWMM; /* month*/
      TS0PW01.TS0PWMDD = TS0PW01.TS0PWWDD; /* day*/
      TS0PW01.TS0PWMYY = TS0PW01.TS0PWWYY; /* year*/
      TS0PM002.TSFDESTE[TS0PWIXM] = TS0PW01.TS0PWMDT;

      TS0PM002.TS5CRAFT[TS0PWIXM] = TS0PW02.TS5CRAFT[TS0PWIXM];
      TS0PM002.TSFSHPNB[TS0PWIXM] = TS0PW02.TSFSHPNB[TS0PWIXM];
      TS0PM002.XWHCD[TS0PWIXM] = TS0PW02.XWHCD[TS0PWIXM];
      TS0PM002.TS0PMCXR[TS0PWIXM] = TS0PW02.PC2CUXID[TS0PWIXM];
      TS0PM002.TS0PMPOI[TS0PWIXM] = TS0PW02.TS0PWPOI[TS0PWIXM];
      TS0PM002.TS0PMORT[TS0PWIXM] = TS0PW02.PC4ORTYP[TS0PWIXM];
      TS0PM002.TS0PMPON[TS0PWIXM] = TS0PW02.PC3PONBR[TS0PWIXM];
      if (TS0PW02.OP1NORID[TS0PWIXM] > 0)
        TS0PW01.TS0PWSOI = TS0PW02.OP1NORID[TS0PWIXM] / 1000;
        TS0PW01.TS0PWSOI = TS0PW01.TS0PWSOI + TS0PW02.OP1CUOID[TS0PWIXM];
        TS0PM002.TS0PMSOI[TS0PWIXM] = TS0PW01.TS0PWSOI;
      else
        TS0PM002.TS0PMSOI[TS0PWIXM] = 0;
      end

      TS0PM002.TS0PMCXR[TS0PWIXM] = TS0PW02.PC2CUXID[TS0PWIXM];
      if (TS0PM002.TS0PMCXR[TS0PWIXM] == "*****") /* If there was no cust*/
        set TS0PM002.TS0PMCXR[TS0PWIXM] skip, invisible;
      end
      TS0PM002.SY1STNBR[TS0PWIXM] = TS0PW02.SY1STNBR[TS0PWIXM];
      TS0PM002.SY2CLRID[TS0PWIXM] = TS0PW02.SY2CLRID[TS0PWIXM];
      TS0PM002.TSISHPQT[TS0PWIXM] = TS0PW02.TSISHPQT[TS0PWIXM];
      if (TS0PW02.TSIDETFL[TS0PWIXM] == "Y")
        TS0PM002.TSIDETFL[TS0PWIXM] = "*";
      else
        TS0PM002.TSIDETFL[TS0PWIXM] = " ";
      end

      set TS0PM002.TS0PMSEL[TS0PWIXM] normal; /* display the selection*/

      if (TS0PW02.TSFSHPID[TS0PWIXM] == TS0PW02.TSFSHPID[TS0PWIX2])
        if (TS0PW02.TSFDESTE[TS0PWIXM] == TS0PW02.TSFDESTE[TS0PWIX2])
          TS0PM002.TSFDESTE[TS0PWIXM] = " "; /* move 0 to date*/
          TS0P212(); /* continue repeating supression*/
        end
      end

      TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* Increment line index*/
      TS0PW01.TS0PWIX2 = TS0PW01.TS0PWIX2 + 1;
    end
  end


end // end TS0P260

// Check attention identifier
Function TS0P300()
   /* ------------------------------------------------------------*/
                /* CHECK ATTENTION IDENTIFIER*/

   /* 1) If PA2 pressed, restart the application fresh.*/
   /* 2) If fast path request, exit to requested application.*/
   /* 3) If PF3 pressed, exit to transportation menu.*/
   /* 4) If PF1 or PF4 pressed, transfer to HELP or main menu.*/
   /* 6) If any AI pressed other than ENTER, PF7, PF8, PF12,*/
      /* or PF16 indicate PF/PA key pressed error.*/
   /* If any errors occur in transfers or keys pressed then*/
      /* exit to redisplay the map.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    TS0PW01.TS0PWPSW = "N"; /* Reset problem switch*/
    TS0PW01.TS0PWSWR = "N"; /* Set request for data no*/
    TS0PM001.XXXPRCNM = "TS0P300"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0PM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && TS0PM001.CATOAP != "TS02"     /* Not fast path to ts02*/
     && TS0PM001.CATOAP != "TS0V")    /* Not fast path to TS0V*/
      COMMAREA.CATOAP = TS0PM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0PM001.CAITEM; /* Application data*/
      if (COMMAREA.CATOAP == "PC0Z"
       || COMMAREA.CATOAP == "PC06")
        set PCWREC empty;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
      else
        COMMAREA.CAUSERA = " "; /* clear user area*/
      end
      TS0P110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
      if (TS0PW01.XGPCD != " " /* If valid keys exists*/
       && TS0PW01.SY1STNBR != " "
       && TS0PW01.TS0PMDST != " "
       && TS0PW01.TS0PWBDT != " "
       && TS0PW01.TS0PWEDT != " ")
        TS0PW01.TS0PWSWR = "Y"; /* set request for data to yes*/
      end
    else
      if (TS0PM001.CATOAP == "TS02" /* ts02*/
       || TS0PM001.CATOAP == "TS0V") /* ts0V*/
        converseLib.validationFailed(6); /* Invalid transfer*/
      else
        converseLib.validationFailed(5); /* Indicate PF key not valid*/
      end
      TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
    end
    set TS0PM001.CATOAP cursor, modified, bold; /* Highlight*/
    TS0PM001.XXXPRCNM = "TS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (TS0PM002.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter /* ENTER was pressed*/
     && TS0PM002.CATOAP != "TS02"     /* Not fast path to ts02*/
     && TS0PM002.CATOAP != "TS0V")    /* Not fast path to TS0V*/
      COMMAREA.CATOAP = TS0PM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = TS0PM002.CAITEM; /* Application data*/
      if (COMMAREA.CATOAP == "PC0Z"
       || COMMAREA.CATOAP == "PC06")
        set PCWREC empty;
        COMMAREA.CAUSERA = PCWREC.CAUSERA;
      else
        COMMAREA.CAUSERA = " "; /* clear user area*/
      end
      TS0P110(); /* purge any temp storage*/
      XSTSS01(); /* Exit to another application*/
      if (TS0PW01.XGPCD != " " /* If valid keys exists*/
       && TS0PW01.SY1STNBR != " "
       && TS0PW01.TS0PMDST != " "
       && TS0PW01.TS0PWBDT != " "
       && TS0PW01.TS0PWEDT != " ")
        TS0PW01.TS0PWSWR = "Y"; /* set request for data to yes*/
      end
    else
      if (TS0PM002.CATOAP == "TS02" /* ts02*/
       || TS0PM002.CATOAP == "TS0V") /* ts0V*/
        converseLib.validationFailed(6); /* Invalid transfer*/
      else
        converseLib.validationFailed(5); /* Indicate PF key not valid*/
      end
      TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
    end
    set TS0PM002.CATOAP cursor, modified, bold; /* Highlight*/
    TS0PM002.XXXPRCNM = "TS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "TS0A"; /* set to Carrier application*/
    COMMAREA.CAITEM = " "; /* clear item field*/
    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS0P110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0PM001.XXXPRCNM = "TS0P300"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* pf1 pressed*/
      COMMAREA.CAITEM = "TS0PM001"; /* move in map name for help*/
    else
      COMMAREA.CAITEM = " "; /* clear item field*/
    end

    COMMAREA.CAUSERA = " "; /* clear user area*/
    TS0P110(); /* purge any temp storage*/
    XSTSS01(); /* Exit to another application*/
    TS0PM001.XXXPRCNM = "TS0P300"; /* Process name*/
    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf10) /* Map 1 requested*/
    if (TS0PW01.TS0PWSWM == "1") /* If already map 1*/
      TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
      TS0PM001.XXXPRCNM = "TS0P300";
      converseLib.validationFailed(4);
      exit stack;
    else
      TS0PW01.TS0PWSWM = "1"; /* Indicate map 1*/
    end
  end

  if (converseVar.eventKey is pf11) /* Map 2 requested*/
    if (TS0PW01.TS0PWSWM == "2") /* If already map 2*/
      TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
      TS0PM002.XXXPRCNM = "TS0P300";
      converseLib.validationFailed(4);
      exit stack;
    else
      TS0PW01.TS0PWSWM = "2"; /* Indicate map 2*/
    end
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and not scroll request*/
   && converseVar.eventKey not pf8   
   && converseVar.eventKey not pf10  
   && converseVar.eventKey not pf11  
   && converseVar.eventKey not pf12  
   && converseVar.eventKey not pf16  
   && converseVar.eventKey not pf20)
    TS0PM001.XXXPRCNM = "TS0P300"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0P300"; /* Process name*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0P300

// Reset highlighted fields
Function TS0P400()
   /* ------------------------------------------------------------*/
                /* RESET HIGHLIGHTED FIELDS*/

   /* 1) Reset field attributes to normal intensity.*/

   /* ------------------------------------------------------------*/

  set TS0PM001.XGPCD initialAttributes; /* Reset all fields*/
  set TS0PM001.SY1STNBR initialAttributes;
  set TS0PM001.TS0PMCLR initialAttributes;
  set TS0PM001.PC2CUXID initialAttributes;
  set TS0PM001.PC2INSEG initialAttributes;
  set TS0PM001.XQACD initialAttributes;
  set TS0PM001.TS0PMDST initialAttributes;
  set TS0PM001.TS0PMXWH initialAttributes;
  set TS0PM001.TSNBEGDT initialAttributes;
  set TS0PM001.TS0PMPO initialAttributes;
  set TS0PM001.TS0PMPYR initialAttributes;
  set TS0PM001.TS0PMPMO initialAttributes;
  set TS0PM001.TS0PMDMO initialAttributes;
  set TS0PM001.FY1FCTYC initialAttributes;
  set TS0PM001.PC4ORTYP initialAttributes;
  set TS0PM001.TSNENDDT initialAttributes;

  set TS0PM001.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0PM001.CAITEM initialAttributes; /* Commarea application data*/

  set TS0PM002.XGPCD initialAttributes; /* Reset all fields*/
  set TS0PM002.SY1STNBR initialAttributes;
  set TS0PM002.TS0PMCLR initialAttributes;
  set TS0PM002.PC2CUXID initialAttributes;
  set TS0PM002.PC2INSEG initialAttributes;
  set TS0PM002.XQACD initialAttributes;
  set TS0PM002.TS0PMDST initialAttributes;
  set TS0PM002.TS0PMXWH initialAttributes;
  set TS0PM002.TSNBEGDT initialAttributes;
  set TS0PM002.TS0PMPO initialAttributes;
  set TS0PM002.TS0PMPYR initialAttributes;
  set TS0PM002.TS0PMPMO initialAttributes;
  set TS0PM002.TS0PMDMO initialAttributes;
  set TS0PM002.FY1FCTYC initialAttributes;
  set TS0PM002.PC4ORTYP initialAttributes;
  set TS0PM002.TSNENDDT initialAttributes;

  set TS0PM002.CATOAP initialAttributes; /* Commarea TO application*/
  set TS0PM002.CAITEM initialAttributes; /* Commarea application data*/

  TS0PW01.TS0PWIXM = 1; /* Initialize line index*/
  while (TS0PW01.TS0PWIXM <= 12) /* Until end of lines*/
    if (TS0PM001.SY1STNBR[TS0PWIXM] > "  ") /* If line exists*/
      set TS0PM001.TS0PMSEL[TS0PWIXM] normal; /* Reset select flag*/
    end
    if (TS0PM002.TS0PMCXR[TS0PWIXM] > "  ") /* If line exists*/
      set TS0PM002.TS0PMSEL[TS0PWIXM] normal; /* Reset select flag*/
    end
    TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* Increment line index*/
  end


end // end TS0P400

// Verify the entered data
Function TS0P500()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0PM001.CAITEM > " ") /* Application data was entered*/
    set TS0PM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate error message*/
    TS0PM001.XXXPRCNM = "TS0P500"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0P510(); /* Verify scroll request*/
      TS0P520(); /* Do edits*/
    else
      if (TS0PM001.XGPCD == " " /* If no data entered*/
       && TS0PM001.TS0PMSTY == " "
       && TS0PM001.TS0PMCLR == " "
       && TS0PM001.PC2CUXID == " "
       && TS0PM001.PC2INSEG == " "
       && TS0PM001.XQACD == " " 
       && TS0PM001.TS0PMDST == " "
       && TS0PM001.TS0PMXWH == " "
       && TS0PM001.TSNBEGDT == " "
       && TS0PM001.TS0PMPO == 0 
       && TS0PM001.TSNENDDT == " "
       && TS0PM001.TS0PMPYR == " "
       && TS0PM001.TS0PMPMO == 0
       && TS0PM001.TS0PMDMO == 0
       && TS0PM001.FY1FCTYC == " ")

        TS0P110(); /* purge temporary storage*/
        set TS0PW02 empty; /* empty screen ws*/

        TS0PW01.TS0PWIXM = 1; /* set index to 1*/
        while (TS0PW01.TS0PWIXM <= TS0PW01.TS0PWMXP) /* until end array*/
          TS0PW01.TSWSHPID[TS0PWIXM] = 0; /* clear fields*/
          TS0PW01.TSW2SHP[TS0PWIXM] = 0;
          TS0PW01.TSWBOL[TS0PWIXM] = " ";
          TS0PW01.TSWCARCD[TS0PWIXM] = " ";
          TS0PW01.TSWCRAFT[TS0PWIXM] = " ";
          TS0PW01.TSWSHPNB[TS0PWIXM] = " ";
          TS0PW01.TSWORIG[TS0PWIXM] = " ";
          TS0PW01.TSWDEST[TS0PWIXM] = " ";
          TS0PW01.TSWXWHCD[TS0PWIXM] = " ";
          TS0PW01.TSWPLNBR[TS0PWIXM] = 0;
          TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* increment index*/
        end

        TS0PW01.XGPCD = " "; /* Save the keys*/
        TS0PW01.SY1STNBR = " ";
        TS0PW01.TS0PMCLR = " ";
        TS0PW01.PC2CUXID = " ";
        TS0PW01.PC2INSEG = " ";
        TS0PW01.XQACD = " ";
        TS0PW01.TS0PMDST = " ";
        TS0PW01.TS0PMXWH = " ";
        TS0PW01.TS0PWBDT = " ";
        TS0PW01.TS0PMPO = 0;
        TS0PW01.TS0PWPYR = " ";
        TS0PW01.TS0PWPMO = " ";
        TS0PW01.TS0PWDMO = " ";
        TS0PW01.FY1FCTYC = " ";
        TS0PW01.PC4ORTYP = " ";
        TS0PW01.TS0PWEDT = " ";
        set TS0PM001 initial; /* clear map*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate error message*/
        set TS0PM001.TS0PMSTY cursor; /* set cursor*/
        converseLib.validationFailed(34); /* data must be entered*/
        TS0PM001.XXXPRCNM = "TS0P500"; /* process name*/
      else
        if (TS0PM001.XGPCD != TS0PW01.XGPCD /* If any new data entered*/
         || TS0PM001.TS0PMSTY != TS0PW01.SY1STNBR
         || TS0PM001.TS0PMCLR != TS0PW01.TS0PMCLR
         || TS0PM001.PC2CUXID != TS0PW01.PC2CUXID
         || TS0PM001.PC2INSEG != TS0PW01.PC2INSEG
         || TS0PM001.XQACD != TS0PW01.XQACD 
         || TS0PM001.TS0PMDST != TS0PW01.TS0PMDST
         || TS0PM001.TS0PMXWH != TS0PW01.TS0PMXWH
         || TS0PM001.TSNBEGDT != TS0PW01.TS0PWBDT
         || TS0PM001.TS0PMPO != TS0PW01.TS0PMPO
         || TS0PM001.TS0PMPYR != TS0PW01.TS0PWPYR
         /* OR TS0PM001.TS0PMPMO NE TS0PW01.TS0PWPMO;*/
         /* OR TS0PM001.TS0PMDMO NE TS0PW01.TS0PWDMO;*/
         || TS0PM001.FY1FCTYC != TS0PW01.FY1FCTYC
         || TS0PM001.PC4ORTYP != TS0PW01.PC4ORTYP
         || TS0PM001.TSNENDDT != TS0PW01.TS0PWEDT
         || TS0PW01.TS0PW-NO-DATA-MAP-1 == "Y"
         || TS0PW01.TS0PW-NO-DATA-MAP-2 == "Y"
         || TS0PW01.TS0PW-MAP1-INVALID-DATA == "Y"
         || TS0PW01.TS0PW-MAP2-INVALID-DATA == "Y")

          TS0P110(); /* purge temporary storage*/
          set TS0PW02 empty; /* empty screen ws*/

          TS0PW01.TS0PWIXM = 1; /* set index to 1*/
          while (TS0PW01.TS0PWIXM <= TS0PW01.TS0PWMXP) /* until end array*/
            TS0PW01.TSWSHPID[TS0PWIXM] = 0; /* clear shpid field*/
            TS0PW01.TSW2SHP[TS0PWIXM] = 0;
            TS0PW01.TSWBOL[TS0PWIXM] = " ";
            TS0PW01.TSWCARCD[TS0PWIXM] = " ";
            TS0PW01.TSWCRAFT[TS0PWIXM] = " ";
            TS0PW01.TSWSHPNB[TS0PWIXM] = " ";
            TS0PW01.TSWORIG[TS0PWIXM] = " ";
            TS0PW01.TSWDEST[TS0PWIXM] = " ";
            TS0PW01.TSWXWHCD[TS0PWIXM] = " ";
            TS0PW01.TSWPLNBR[TS0PWIXM] = 0;
            TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* increment index*/
          end

          TS0PW01.XGPCD = TS0PM001.XGPCD;
          TS0PW01.SY1STNBR = TS0PM001.TS0PMSTY;
          TS0PW01.TS0PMCLR = TS0PM001.TS0PMCLR;
          TS0PW01.PC2CUXID = TS0PM001.PC2CUXID;
          TS0PW01.PC2INSEG = TS0PM001.PC2INSEG;
          TS0PW01.PC2CUXID = TS0PM001.PC2CUXID;
          TS0PW01.XQACD = TS0PM001.XQACD;
          TS0PW01.TS0PMDST = TS0PM001.TS0PMDST;
          TS0PW01.TS0PMXWH = TS0PM001.TS0PMXWH;
          TS0PW01.TS0PWBDT = TS0PM001.TSNBEGDT;
          TS0PW01.TS0PMPO = TS0PM001.TS0PMPO;
          TS0PW01.TS0PWPYR = TS0PM001.TS0PMPYR;
          TS0PW01.TS0PWPMO = TS0PM001.TS0PMPMO;
          TS0PW01.TS0PWDMO = TS0PM001.TS0PMDMO;
          TS0PW01.FY1FCTYC = TS0PM001.FY1FCTYC;
          TS0PW01.PC4ORTYP = TS0PM001.PC4ORTYP;
          TS0PW01.TS0PWEDT = TS0PM001.TSNENDDT;

          set TS0PM001 initial; /* clear map*/

          TS0PM001.XGPCD = TS0PW01.XGPCD;
          TS0PM001.TS0PMSTY = TS0PW01.SY1STNBR;
          TS0PM001.TS0PMCLR = TS0PW01.TS0PMCLR;
          TS0PM001.PC2CUXID = TS0PW01.PC2CUXID;
          TS0PM001.PC2INSEG = TS0PW01.PC2INSEG;
          TS0PM001.XQACD = TS0PW01.XQACD;
          TS0PM001.TS0PMDST = TS0PW01.TS0PMDST;
          TS0PM001.TS0PMXWH = TS0PW01.TS0PMXWH;
          TS0PM001.TS0PMPO = TS0PW01.TS0PMPO;
          TS0PM001.TS0PMPYR = TS0PW01.TS0PWPYR;
          if (TS0PW01.TS0PWPMO == 0)
            TS0PM001.TS0PMPMO = " ";
          else
            TS0PM001.TS0PMPMO = TS0PW01.TS0PWPMO;
          end
          if (TS0PW01.TS0PWDMO == 0)
            TS0PM001.TS0PMDMO = " ";
          else
            TS0PM001.TS0PMDMO = TS0PW01.TS0PWDMO;
          end
          TS0PM001.FY1FCTYC = TS0PW01.FY1FCTYC;
          TS0PM001.PC4ORTYP = TS0PW01.PC4ORTYP;
          TS0PM001.TSNBEGDT = TS0PW01.TS0PWBDT;
          TS0PM001.TSNENDDT = TS0PW01.TS0PWEDT;

          TS0PW01.XGPCD = " "; /* reset all fields*/
          TS0PW01.SY1STNBR = " ";
          TS0PW01.TS0PMCLR = " ";
          TS0PW01.PC2CUXID = " ";
          TS0PW01.PC2INSEG = " ";
          TS0PW01.XQACD = " ";
          TS0PW01.TS0PMDST = " ";
          TS0PW01.TS0PMXWH = " ";
          TS0PW01.TS0PWBDT = " ";
          TS0PW01.TS0PMPO = 0;
          TS0PW01.TS0PWPYR = " ";
          TS0PW01.TS0PWPMO = " ";
          TS0PW01.TS0PWDMO = " ";
          TS0PW01.FY1FCTYC = " ";
          TS0PW01.PC4ORTYP = " ";
          TS0PW01.TS0PWEDT = " ";

          TS0PW01.TS0PWSWR = "Y"; /* set request for data to yes*/
          TS0P520(); /* Verify any changed data*/

        else /* If no data was changed*/

          TS0P520(); /* Verify any changed data*/

        end
      end
    end
  end


end // end TS0P500

// Verify scroll request
Function TS0P510()
   /* ------------------------------------------------------------*/

               /* VERIFY SCROLL REQUEST*/

   /* 1) Ensure that pages exist to scroll forward or back.*/

   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && TS0PW01.TS0PWTSP < 2)       /* and no previous pages*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    TS0PM001.XXXPRCNM = "TS0P510"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0P510"; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && TS0PW01.TS0PWTSP >= TS0PW01.TA5TSQIX) /* and no more pages*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    TS0PM001.XXXPRCNM = "TS0P510"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0P510"; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
  end


end // end TS0P510

// Verify any changed data
Function TS0P520()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify valid selections.*/
   /* 2) Verify p.o. id fields.*/
   /* 3) Verify p.o. number or p.o. id entered*/
   /* 4) Verify that all dates entered are valid.*/
   /* 5) Verify that all locations entered are valid.*/
   /* 6) Verify that style data entered is valid.*/
   /* 7) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* Check valid selections*/
   /* ------------------------------------------------------------*/

  TS0PW01.TS0PWIXM = 12; /* set index to 13*/
  while (TS0PW01.TS0PWIXM > 0) /* until end of selection lines*/
    if (TS0PM001.TS0PMSEL[TS0PWIXM] != "S" /* if selection is not 's'*/
     && TS0PM001.TS0PMSEL[TS0PWIXM] != " ") /* selection is not blank*/
      converseLib.validationFailed(13); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
      set TS0PM001.TS0PMSEL[TS0PWIXM] cursor, modified, bold;
    else
      if (TS0PM001.TS0PMSEL[TS0PWIXM] == "S" /* if selection is eq 's'*/
       && TS0PW02.YSSCD[TS0PWIXM] == "TN"    
       /* and this selection tentative*/
       && converseVar.eventKey is pf20)     
        converseLib.validationFailed(268); /* Error message*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
        TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
        set TS0PM001.TS0PMSEL[TS0PWIXM] cursor, modified, bold;
      end
    end
    TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM - 1; /* decrement*/
  end

   /* ------------------------------------------------------------*/
     /* Verify each field in the P.O. id seperately*/
   /* ------------------------------------------------------------*/

  if (TS0PM001.TS0PMPO == 0) /* If po number not entered*/
    TS0P525(); /* Edit the po id fields*/
  end

   /* ------------------------------------------------------------*/
     /* Verify po number or po id entered*/
   /* ------------------------------------------------------------*/

  if (TS0PM001.TS0PMPO != TS0PW01.TS0PMPO /* If number has changed*/
   || TS0PM001.TS0PMPO == 0)              /* or not entered*/
    TS0P526(); /* Edit the po id fields*/
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA end date entered*/
   /* ------------------------------------------------------------*/

  if (TS0PM001.TSNENDDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0PM001.TSNENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0PW01.TSNENDDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
      TS0PW01.TS0PWEDT = TS0PM001.TSNENDDT; /* save map date*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
   /* MOVE TS0PM001.TSNENDDT TO TS0PW01.TS0PWEDT; /* move date*/
      TS0PW01.TS0PWEDT = " "; /* move date*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
      set TS0PM001.TSNENDDT cursor, modified, bold;
    end
  else
    TS0PW01.TS0PWEDT = TS0PM001.TSNENDDT; /* move date*/
    converseLib.validationFailed(57); /* Error message*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
    set TS0PM001.TSNENDDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* if xwhcd entered, then verify*/
   /* ------------------------------------------------------------*/

  if (TS0PM001.TS0PMXWH != " ") /* If warehouse entered*/
    if (TS0PM001.TS0PMXWH in XWHTBL.XWHCD) /* if warehouse ok*/
      TS0PW01.TS0PMXWH = XWHTBL.XWHCD[sysVar.arrayIndex]; /* Save whse*/
    else
      converseLib.validationFailed(82); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
      set TS0PM001.TS0PMXWH cursor, modified, bold;
   /* MOVE TS0PM001.TS0PMXWH TO TS0PW01.TS0PMXWH; /* Save warehouse*/
      TS0PW01.TS0PMXWH = " "; /**/
    end
  end

   /* ------------------------------------------------------------*/
     /* if destination entered, get the description*/
   /* ------------------------------------------------------------*/

  if (TS0PM001.TS0PMDST != " ") /* if destination entered*/
    TSCREC.TSCLOCCD = TS0PM001.TS0PMDST; /* move in key*/
    TS0P521(); /* select the location*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
      TS0PW01.TS0PMDST = TSCREC.TSCLOCCD; /* save dest*/
    else
      converseLib.validationFailed(40); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
      set TS0PM001.TS0PMDST cursor, modified, bold;
   /* MOVE TS0PM001.TS0PMDST TO TS0PW01.TS0PMDST; /* save dest*/
      TS0PW01.TS0PMDST = " "; /**/
    end
  else
    TS0PW01.TS0PMDST = " "; /* clear dest*/
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA start date entered*/
   /* ------------------------------------------------------------*/

  if (TS0PM001.TSNBEGDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0PM001.TSNBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0PW01.TSNBEGDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
      TS0PW01.TS0PWBDT = TS0PM001.TSNBEGDT; /* save map date*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
   /* MOVE TS0PM001.TSNBEGDT TO TS0PW01.TS0PWBDT; /* save map date*/
      TS0PW01.TS0PWBDT = " "; /**/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
      set TS0PM001.TSNBEGDT cursor, modified, bold;
    end
  else
    TS0PW01.TS0PWBDT = TS0PM001.TSNBEGDT; /* save map date*/
    converseLib.validationFailed(57); /* Error message*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
    set TS0PM001.TSNBEGDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* Check valid quality code*/
   /* ------------------------------------------------------------*/
  if (TS0PM001.XQACD == " ") /* If not entered*/
    TS0PW01.XQACD = "  "; /* Save code*/
  else
    if (TS0PM001.XQACD in XQATBL.XQACD) /* If valid*/
      TS0PW01.XQACD = TS0PM001.XQACD; /* Save code*/
    else
      converseLib.validationFailed(108); /* Error message*/
   /* MOVE TS0PM001.XQACD TO TS0PW01.XQACD; /* Save code*/
      TS0PW01.XQACD = "  ";
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
      set TS0PM001.XQACD cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
     /* Check valid iseg code*/
   /* ------------------------------------------------------------*/
  if (TS0PM001.PC2INSEG == " ") /* If not entered*/
    TS0PW01.PC2INSEG = "  "; /* Save code*/
  else
    TS0P527(); /* Select from DPRODC.VPRDCU01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      TS0PW01.PC2INSEG = TS0PM001.PC2INSEG; /* Save code*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
        converseLib.validationFailed(109); /* Error message*/
   /* MOVE TS0PM001.PC2INSEG TO TS0PW01.PC2INSEG; /* Save code*/
        TS0PW01.PC2INSEG = "  ";
        TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
        TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
        set TS0PM001.PC2INSEG cursor, modified, bold;
      end
    end
  end


  TS0P-52100(); /* Verify the customer xref entered exists*/


   /* ------------------------------------------------------------*/
     /* Check valid gpc code*/
     /* - If gpc code is ok then,ed*/
       /* . Check valid style entered*/
     /* - If style exists and color was entered*/
       /* . Check valid style color combination*/
   /* ------------------------------------------------------------*/
  if (TS0PM001.XGPCD == " ") /* If gpc code missing*/
    TS0PW01.XGPCD = "  ";
    converseLib.validationFailed(101); /* Error message*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
    set TS0PM001.XGPCD cursor, modified, bold;
  else
    if (TS0PM001.XGPCD in XGPTBL.XGPCD) /* If gpc code ok*/
      TS0PW01.XGPCD = TS0PM001.XGPCD;
      if (TS0PM001.TS0PMSTY == " ") /* if style missing*/
        TS0PW01.SY1STNBR = " "; /* clear*/
        TS0PW01.SY1STYNM = " ";
        converseLib.validationFailed(114); /* Error message*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
        TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
        set TS0PM001.TS0PMSTY cursor, modified, bold;
      else
        TS0PW01.SY1STNBR = TS0PM001.TS0PMSTY; /* save number*/
        TS0P523(); /* Select style description*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
          TS0PW01.SY1STNBR = PG2REC.SY1STNBR; /* save number*/
          TS0PW01.SY1STYNM = PG2REC.SY1STYNM; /* save name*/
          TS0PM001.SY1STYNM = PG2REC.SY1STYNM; /* move name*/
          if (TS0PM001.TS0PMCLR != " ") /* If color entered*/
            TS0PW01.TS0PMCLR = TS0PM001.TS0PMCLR;
            TS0P524(); /* Select set style/color combination*/
            if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
              TS0PW01.TS0PMCLR = PG2REC.SY2CLRID;
            else
              if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
                TS0PW01.TS0PMCLR = " ";
                converseLib.validationFailed(113); /* Error message*/
                TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
                TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
                set TS0PM001.TS0PMSTY cursor, modified, bold;
                set TS0PM001.TS0PMCLR modified, bold;
              end
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
            TS0PW01.SY1STYNM = " ";
            converseLib.validationFailed(114); /* Error message*/
            TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
            TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
            set TS0PM001.TS0PMSTY cursor, modified, bold;
          end
        end
      end
    else
      converseLib.validationFailed(101); /* Error message*/
      TS0PW01.XGPCD = TS0PM001.XGPCD;
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM001.XXXPRCNM = "TS0P520"; /* Process name*/
      set TS0PM001.XGPCD cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* If no other errors, check date span overlap errors.*/
   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWPSW == "N") /* if all locations and dates valid*/
    TS0P522(); /* check span and date overlap errors*/
  end

  if (TS0PW01.TS0PWPSW == "N") /* if all locations and dates valid*/
    TS0PW01.TS0PW-MAP1-INVALID-DATA = "N"; /* Invalid data map 1*/
  else
    if (TS0PW01.TS0PWPSW == "Y") /* Problem switch set to 'Y'*/
      TS0PW01.TS0PW-MAP1-INVALID-DATA = "Y"; /* Invalid data map 1*/
    end
  end

end // end TS0P520

// Select (S )    DTRANS.VTSLOC01
Function TS0P521()
   /* ------------------------------------------------------------*/
                /* SELECT LOCATION DATA*/

   /* 1) Select location.*/
   /* 2) If an  unexpected return code is recieved:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Select table row*/

  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   && SQLCA.VAGen_SQLCODE != 100) /* handled in previous process*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0P521"; /* Process name*/
    TA1REC.TA1LOC = "SELECT TABLE ROW";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    TA1REC.TA1DBASE = "DTRANS  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PW01.TS0PWPSW = "Y"; /* Indicate Problem*/
    TS0PM001.XXXPRCNM = "TS0P521"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0P521"; /* Process name*/
  end


end // end TS0P521

// Check date span and overlap
Function TS0P522()
   /* ------------------------------------------------------------*/

            /* CHECK DATE SPAN AND OVERLAP*/

   /* 1) Check that ETA end date is >= ETA begin date.*/
   /* 2) Check that not > 95 days between begin and end dates.*/

   /* Each of these checks will only be performed if the previous*/
      /* check has been successfully completed with no errors.*/

   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWSWM != "2") /* If map 1*/
    if (TS0PW01.TSNENDDT < TS0PW01.TSNBEGDT) /* if end date LT beg date*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate error*/
      converseLib.validationFailed(58); /* error 'must be >=' message*/
      TS0PM001.XXXPRCNM = "TS0P522"; /* process name*/
      set TS0PM001.TSNENDDT cursor, modified, bold;
    end

    if (TS0PW01.TS0PWPSW == "N") /* if no errors*/

       /* check date span < 96 for ETA dates*/

      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
      TA2REC.TA2DBDFN = TS0PW01.TSNBEGDT; /* begn date*/
      TA2REC.TA2DBDTN = TS0PW01.TSNENDDT; /* to date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        if (TA2REC.TA2DBDDN >= 96) /* if diff between dates > 95*/
          TS0PW01.TS0PWPSW = "Y"; /* indicate error*/
          converseLib.validationFailed(68); /* error 'range too large'*/
          TS0PM001.XXXPRCNM = "TS0K522"; /* process name*/
          set TS0PM001.TSNBEGDT cursor, modified, bold;
          set TS0PM001.TSNENDDT modified, bold;
        end
      end

    end
  else
    if (TS0PW01.TSNENDDT < TS0PW01.TSNBEGDT) /* if end date LT beg da*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate error*/
      converseLib.validationFailed(58); /* error 'must be >=' message*/
      TS0PM002.XXXPRCNM = "TS0K522"; /* process name*/
      set TS0PM002.TSNENDDT cursor, modified, bold;
    end

    if (TS0PW01.TS0PWPSW == "N") /* if no errors*/

       /* check date span < 96 for ETA dates*/

      set TA2REC empty; /* clear record*/
      TA2REC.TA2DTOPT = "DAYSDIFF"; /* move in option field*/
      TA2REC.TA2DBDFN = TS0PW01.TSNBEGDT; /* begn date*/
      TA2REC.TA2DBDTN = TS0PW01.TSNENDDT; /* to date*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

      if (TA2REC.TA2RTNCD == 0) /* if no errors from call*/
        if (TA2REC.TA2DBDDN >= 96) /* if diff between dates > 95*/
          TS0PW01.TS0PWPSW = "Y"; /* indicate error*/
          converseLib.validationFailed(68); /* error 'range too large'*/
          TS0PM002.XXXPRCNM = "TS0K522"; /* process name*/
          set TS0PM002.TSNBEGDT cursor, modified, bold;
          set TS0PM002.TSNENDDT modified, bold;
        end
      end

    end
  end


end // end TS0P522

// Select the style
Function TS0P523()
   /* ------------------------------------------------------------*/

               /* SELECT THE STYLE SHORT NAME*/

   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWSWM != "2") /* If map 1*/
    PG2REC.SY1STNBR = TS0PM001.TS0PMSTY; /* Move in style #*/
    PG2REC.XGPCD = TS0PM001.XGPCD; /* Move in gpc code*/

    TA1REC.TA1PGMNM = "TS0P523"; /* Process name*/
    TA1REC.TA1MAP = "TS0PM001"; /* Map name*/

    XSPG201(); /* Select the first style color combination*/

    if (TA1REC.TA1FUNC == "POST") /* If contention error occurred*/
      TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
      converseLib.validationFailed(11);
    end

    if (TA1REC.TA1FUNC == "RETN") /* If ta0020 error map was displayed*/
      TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
      converseLib.validationFailed(10);
      converseLib.clearScreen();
      
    end
  else
    PG2REC.SY1STNBR = TS0PM002.TS0PMSTY; /* Move in style #*/
    PG2REC.XGPCD = TS0PM002.XGPCD; /* Move in gpc code*/

    TA1REC.TA1PGMNM = "TS0P523"; /* Process name*/
    TA1REC.TA1MAP = "TS0PM002"; /* Map name*/

    XSPG201(); /* Select the first style color combination*/

    if (TA1REC.TA1FUNC == "POST") /* If contention error occurred*/
      TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
      converseLib.validationFailed(11);
    end

    if (TA1REC.TA1FUNC == "RETN") /* If ta0020 error map was displayed*/
      TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
      converseLib.validationFailed(10);
      converseLib.clearScreen();
      
    end
  end


end // end TS0P523

// Select the set of style/color
Function TS0P524()
   /* ------------------------------------------------------------*/

                 /* SELECT STYLE/COLOR*/

   /* 1) Set record empty, move key fields, and select table row.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/
   /* ------------------------------------------------------------*/

  set PG2REC empty; /* clear record*/

  if (TS0PW01.TS0PWSWM != "2") /* If map 1*/
    PG2REC.XGPCD = TS0PM001.XGPCD; /* move keys*/
    PG2REC.SY1STNBR = TS0PM001.TS0PMSTY;
    PG2REC.SY2CLRID = TS0PM001.TS0PMCLR;
    PG2REC.XDMCD = "00 ";

    TA1REC.TA1PGMNM = "TS0P524"; /* Process name*/
    TA1REC.TA1MAP = "TS0PM001"; /* Map name*/
  else
    PG2REC.XGPCD = TS0PM002.XGPCD; /* move keys*/
    PG2REC.SY1STNBR = TS0PM002.TS0PMSTY;
    PG2REC.SY2CLRID = TS0PM002.TS0PMCLR;
    PG2REC.XDMCD = "00 ";

    TA1REC.TA1PGMNM = "TS0P524"; /* Process name*/
    TA1REC.TA1MAP = "TS0PM002"; /* Map name*/
  end

  XSPG202(); /* Select the style color row*/

  if (TA1REC.TA1FUNC == "POST") /* If contention error occurred*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
    converseLib.validationFailed(11);
  end

  if (TA1REC.TA1FUNC == "RETN" /* If ta0020 error map was displayed*/
   && TS0PW01.TS0PWSWM != "2") /* map 1*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
    converseLib.validationFailed(10);
    converseLib.clearScreen();
    
  end

  if (TA1REC.TA1FUNC == "RETN" /* If ta0020 error map was displayed*/
   && TS0PW01.TS0PWSWM == "2") /* map 2*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
    converseLib.validationFailed(10);
    converseLib.clearScreen();
    
  end


end // end TS0P524

// Verify the P.O. id fields
Function TS0P525()
   /* ------------------------------------------------------------*/

      /* VERIFY THE ENTRY OF EACH P.O. ID FIELD SEPERATELY*/

     /* If any part of the p.o. id entered*/

     /* Verify:  1) Factory code entered and correct.*/
              /* 2) Delivery month entered and correct.*/
              /* 3) Month entered and correct.*/
              /* 4) Year entered and correct.*/

   /* ------------------------------------------------------------*/

  TS0PW01.TS0PWIDS = "N"; /* Initialize the valid po id indicator*/

  if (TS0PM001.TS0PMPYR != " " /* If any of the fields entered.*/
   || TS0PM001.TS0PMPMO != 0   
   || TS0PM001.TS0PMDMO != 0   
   || TS0PM001.FY1FCTYC != " " 
   || TS0PM001.PC4ORTYP != " ")

    /* ------------------------------------------------------------*/
     /* CHECK PO TYPE*/
    /* ------------------------------------------------------------*/

    if (TS0PM001.PC4ORTYP == "  ") /* Nothing there*/
      converseLib.validationFailed(220); /* Invalid order type entered*/
      TS0PW01.PC4ORTYP = " ";
      TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
      TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
      TS0PM001.XXXPRCNM = "TS0P525"; /* Process name*/
      set TS0PM001.PC4ORTYP cursor, bold; /* Highlight error*/
    else
      TS0PW01.PC4ORTYP = TS0PM001.PC4ORTYP;
      set PC4REC empty;
      PC4REC.XGPCD = TS0PM001.XGPCD;
      PC4REC.PC4ORTYP = TS0PM001.PC4ORTYP;
      TS0PS07(); /* Select order type*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
        TS0PW01.PC4ORTYP = TS0PM001.PC4ORTYP;
        TS0PM001.PC4ORTYP = TS0PM001.PC4ORTYP;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
          converseLib.validationFailed(220); /* Invalid order type entered*/
          TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
          TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
          TS0PM001.XXXPRCNM = "TS0P525"; /* Process name*/
          set TS0PM001.PC4ORTYP cursor, bold; /* Highlight error*/
        end
      end
    end


    /* ------------------------------------------------------------*/
     /* FACTORY CODE CHECK--OPTIONAL*/
    /* ------------------------------------------------------------*/

    if (TS0PM001.FY1FCTYC > " ") /* factory code value entered*/
      FY1REC.FY1FCTYC = TS0PM001.FY1FCTYC; /* Search key*/
      FY1REC.XGPCD = TS0PM001.XGPCD; /* gpc*/

      TS0PS05(); /* select the factory row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
        TS0PW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/

      else
        if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
          converseLib.validationFailed(166); /* Invalid factory*/
          TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
          TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
          TS0PM001.XXXPRCNM = "TS0P525"; /* Process name*/
          set TS0PM001.FY1FCTYC cursor, bold; /* Highlight error*/
        else
          TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0PM001.TS0PMDMO >= "01" /* If valid month entered*/
     && TS0PM001.TS0PMDMO <= "12")
      TS0PW01.TS0PWDMO = TS0PM001.TS0PMDMO;
    else
      TS0PW01.TS0PWDMO = TS0PM001.TS0PMDMO;
      converseLib.validationFailed(165); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
      TS0PM001.XXXPRCNM = "TS0P525"; /* Process name*/
      set TS0PM001.TS0PMDMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0PM001.TS0PMPMO >= "01" /* Something there*/
     && TS0PM001.TS0PMPMO <= "12")
      TS0PW01.TS0PWPMO = TS0PM001.TS0PMPMO;
    else
      TS0PW01.TS0PWPMO = TS0PM001.TS0PMPMO;
      converseLib.validationFailed(165); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
      TS0PM001.XXXPRCNM = "TS0P525"; /* Process name*/
      set TS0PM001.TS0PMPMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    TS0PW01.TS0PWPYR = TS0PM001.TS0PMPYR;
    if (TS0PW01.TS0PWPYR >= "00"
     && TS0PW01.TS0PWPYR <= "99")
      if (TS0PW01.TS0PWPYR > "85")
        TS0PW01.TS0PWPCC = 19;
      else
        TS0PW01.TS0PWPCC = 20;
      end
    else
      if (TS0PW01.TS0PWPY1 >= "A"
       && TS0PW01.TS0PWPY1 <= "Z"
       && TS0PW01.TS0PWPY2 >= "0"
       && TS0PW01.TS0PWPY2 <= "9")
        TS0PS08(); /* Select the set of season years*/
        if (SQLCA.VAGen_SQLCODE == 0)
          TS0PS09(); /* Fetch the first row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
            TS0PW01.TS0PWCYR = PCFREC.PCFBUYYR;
            TS0PW01.TS0PWPYR = TS0PW01.TS0PWCYY;
            TS0PW01.TS0PWPCC = TS0PW01.TS0PWCCC;
            PCFREC.PCFSECD = TS0PM001.TS0PMPYR;
          else
            converseLib.validationFailed(164); /* Error message*/
            TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
            TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
            TS0PM001.XXXPRCNM = "TS0P525"; /* Process name*/
            set TS0PM001.TS0PMPYR cursor, bold; /* Highlight*/
          end
          TS0PS10(); /* Close the set*/
        end
      else
        converseLib.validationFailed(164); /* Error message*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
        TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
        TS0PM001.XXXPRCNM = "TS0P525"; /* Process name*/
        set TS0PM001.TS0PMPYR cursor, bold; /* Highlight*/
      end
    end

  end


end // end TS0P525

// Verify po # or po id entered
Function TS0P526()
   /* ------------------------------------------------------------*/

         /* VERIFY P.O. NUMBER OR P.O. ID ENTERED*/

   /* 1) If p.o. number or p.o. id not entered then continue on.*/
   /* 2) If the p.o. number was entered then continue on without*/
      /* checking the p.o. id.*/
   /* 3) If only p.o. id fields have been entered and they are*/
      /* correct, then select the p.o. id and obtain a valid*/
      /* p.o. number for the id.*/

   /* ------------------------------------------------------------*/

  set TS0PW03 empty; /* Clear ws*/

  if (TS0PM001.TS0PMPO == 0 /* if po # or po id not entered*/
   && TS0PM001.TS0PMPYR == " "
   && TS0PM001.TS0PMPMO == 0
   && TS0PM001.TS0PMDMO == 0
   && TS0PM001.FY1FCTYC == " "
   && TS0PM001.PC4ORTYP == " ")
    TS0PW01.TS0PMPO = 0; /* clear ws fields*/
    TS0PW01.TS0PWPYR = " ";
    TS0PW01.TS0PWPMO = " ";
    TS0PW01.TS0PWDMO = " ";
    TS0PW01.FY1FCTYC = " ";
    TS0PW01.PC4ORTYP = " ";
  else
    if (TS0PM001.TS0PMPO > 0) /* if po # entered*/

      TSWREC.XGPCD = TS0PM001.XGPCD;
      TS0PW01.TS0PMPO = TS0PM001.TS0PMPO; /* save the field*/
      set PCYREC empty; /* Clear the passing record*/
      set PC3REC empty; /* Clear the P.O. header record*/
      PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
      PC3REC.PC3PONBR = TS0PM001.TS0PMPO; /* P.O. type*/
      PCYREC.PCYFUNC = "S "; /* Select alternate*/

      TS0PS06(); /* select the po*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
        TS0PW03.TS0PWPON[1] = PC3REC.PC3PONBR;
        TS0PW01.TS0PWDAT = PC3REC.PC3POIDT;
        TS0PW01.TS0PWPCC = TS0PW01.TS0PWPCN;
        TS0PW01.TS0PWPMO = TS0PW01.TS0PWPM1;
             /* MOVE TS0PW01.TS0PWPM1 TO TS0PM001.TS0PMPMO;*/
        TS0PW01.TS0PWDMO = TS0PW01.TS0PWPM2;
             /* MOVE TS0PW01.TS0PWPM2 TO TS0PM001.TS0PMDMO;*/
        TS0PW01.FY1FCTYC = PC3REC.FY1FCTYC;
        TS0PM001.FY1FCTYC = PC3REC.FY1FCTYC;
        if (TSWREC.XGPCD == "03")
          TS0PW01.TS0PWPYR = PC3REC.PCFSECD;
          TS0PM001.TS0PMPYR = PC3REC.PCFSECD;
        else
          TS0PW01.TS0PWPYR = TS0PW01.TS0PWPYY;
          TS0PM001.TS0PMPYR = TS0PW01.TS0PWPYY;
        end
        TS0PW01.PC4ORTYP = PC3REC.PC4ORTYP;
        TS0PM001.PC4ORTYP = PC3REC.PC4ORTYP;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
           /* continue on*/
        end
      end

    else
      TSWREC.XGPCD = TS0PM001.XGPCD;
      if (TS0PW01.TS0PWIDS == "N" /* If the po id passed previous edits*/
       && TS0PW01.TS0PWPYR > 0)  
        set PCYREC empty; /* Clear the passing record*/
        set PC3REC empty; /* Clear the P.O. header record*/
        PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
        PCYREC.PCYTODT = TS0PW01.TS0PWIDT; /* P.O. id*/
        PCYREC.PCYFRDT = TS0PW01.TS0PWIDT; /* P.O. id*/
        PC3REC.PC4ORTYP = TS0PW01.PC4ORTYP; /* P.O. order type*/
        if (TSWREC.XGPCD == "03")
          PC3REC.PCFSECD = PCFREC.PCFSECD; /* Season code*/
          TS0PM001.TS0PMPYR = PCFREC.PCFSECD;
          TS0PW01.TS0PWPYR = PCFREC.PCFSECD;
        else
          PC3REC.PCFSECD = " "; /* Season code*/
          TS0PM001.TS0PMPYR = TS0PW01.TS0PWPYR;
        end
        if (TS0PM001.FY1FCTYC == "   ")
          PC3REC.FY1FCTYC = "*"; /* Factory code*/
        else
          PC3REC.FY1FCTYC = TS0PM001.FY1FCTYC; /* Factory code*/
        end
        PCYREC.PCYFUNC = "S2"; /* Select Scan 2*/

        TS0PS06(); /* Open the cursor*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Select set success*/
          TS0PW01.TS0PWIXM = 1; /* Set counter for screen ws*/
          TS0PW01.TS0PWSW1 = "N"; /* Set end of set switch*/

          while (TS0PW01.TS0PWSW1 == "N") /* While data exists*/
            PCYREC.PCYFUNC = "N2"; /* Fetch next row*/

            TS0PS06();
            if (SQLCA.VAGen_SQLCODE == 100) /* End of set*/
              TS0PW01.TS0PWSW1 = "Y";
              if (PC3REC.PC3PONBR == 0)
                converseLib.validationFailed(167); /* No data to display*/
                set TS0PM001.TS0PMPYR cursor, bold;
                set TS0PM001.TS0PMPMO bold;
                set TS0PM001.TS0PMDMO bold;
                set TS0PM001.FY1FCTYC bold;
                set TS0PM001.PC4ORTYP bold;
                TS0PM001.XXXPRCNM = "TS0P526"; /* Process name*/
                TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
              end
            else

              if (SQLCA.VAGen_SQLCODE == 0) /* Return ok*/
                TS0PW03.TS0PWPON[TS0PWIXM] = PC3REC.PC3PONBR;
                TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* Increment counter*/
                if (TS0PW01.TS0PWIXM >= 1000)
                  TS0PW01.TS0PWSW1 = "Y";
                  converseLib.validationFailed(145); /* Too many po's exist*/
                  TS0PM001.XXXPRCNM = "TS0P526"; /* Process name*/
                  TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
                end
              end
            end
          end
          if (TS0PW01.TS0PWSW1 == "Y") /* If last fetch done*/
            PCYREC.PCYFUNC = "C2"; /* Close cursor*/

            TS0PS06();
          end
        end
      end
    end
  end


end // end TS0P526

// Select (S )    DPRODC.VPRDCU01
Function TS0P527()
   /* ------------------------------------------------------------*/
   /* select Customer ISEG*/
   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWSWM != "2") /* If map 1*/
    PC2REC.XGPCD = TS0PM001.XGPCD;
    PC2REC.PC2INSEG = TS0PM001.PC2INSEG;
  else
    PC2REC.XGPCD = TS0PM002.XGPCD;
    PC2REC.PC2INSEG = TS0PM002.PC2INSEG;
  end

  try
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  TS0PM001.XXXPRCNM = "TS0P527"; /* Module identification*/
  TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT CUST XREF ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = "TS0P527"; /* Module name*/
  TA1REC.TA1DBASE = "DPRODC"; /* Data base name*/
  TA1REC.TA1TBLVU = "VPRDCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC2REC.PC2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/


end // end TS0P527

// Verify the entered data
Function TS0P550()
   /* ------------------------------------------------------------*/
                /* VERIFY THE ENTERED DATA*/

   /* 1) If caitem entered and no fast path then error.*/
   /* 2) If scroll request then verify that pages exist to scroll*/
   /* 3) If any key fields entered then validate them*/

   /* ------------------------------------------------------------*/

  if (TS0PM002.CAITEM > " ") /* Application data was entered*/
    set TS0PM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate error message*/
    TS0PM002.XXXPRCNM = "TS0P550"; /* Process name*/
  else

    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      TS0P510(); /* Verify scroll request*/
      TS0P570(); /* Do edits*/
    else
      if (TS0PM002.XGPCD == " " /* If no data entered*/
       && TS0PM002.TS0PMSTY == " "
       && TS0PM002.TS0PMCLR == " "
       && TS0PM002.PC2CUXID == " "
       && TS0PM002.PC2INSEG == " "
       && TS0PM002.XQACD == " " 
       && TS0PM002.TS0PMDST == " "
       && TS0PM002.TS0PMXWH == " "
       && TS0PM002.TSNBEGDT == " "
       && TS0PM002.TS0PMPO == 0 
       && TS0PM002.TSNENDDT == " "
       && TS0PM002.TS0PMPYR == " "
       && TS0PM002.TS0PMPMO == 0
       && TS0PM002.TS0PMDMO == 0
       && TS0PM002.FY1FCTYC == " ")

        TS0P110(); /* purge temporary storage*/
        set TS0PW02 empty; /* empty screen ws*/

        TS0PW01.TS0PWIXM = 1; /* set index to 1*/
        while (TS0PW01.TS0PWIXM <= TS0PW01.TS0PWMXP) /* until end array*/
          TS0PW01.TSWSHPID[TS0PWIXM] = 0; /* clear fields*/
          TS0PW01.TSW2SHP[TS0PWIXM] = 0;
          TS0PW01.TSWBOL[TS0PWIXM] = " ";
          TS0PW01.TSWCARCD[TS0PWIXM] = " ";
          TS0PW01.TSWCRAFT[TS0PWIXM] = " ";
          TS0PW01.TSWSHPNB[TS0PWIXM] = " ";
          TS0PW01.TSWORIG[TS0PWIXM] = " ";
          TS0PW01.TSWDEST[TS0PWIXM] = " ";
          TS0PW01.TSWXWHCD[TS0PWIXM] = " ";
          TS0PW01.TSWPLNBR[TS0PWIXM] = 0;
          TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* increment index*/
        end

        TS0PW01.XGPCD = " "; /* Save the keys*/
        TS0PW01.SY1STNBR = " ";
        TS0PW01.TS0PMCLR = " ";
        TS0PW01.PC2CUXID = " ";
        TS0PW01.PC2INSEG = " ";
        TS0PW01.XQACD = " ";
        TS0PW01.TS0PMDST = " ";
        TS0PW01.TS0PMXWH = " ";
        TS0PW01.TS0PWBDT = " ";
        TS0PW01.TS0PMPO = 0;
        TS0PW01.TS0PWPYR = " ";
        TS0PW01.TS0PWPMO = " ";
        TS0PW01.TS0PWDMO = " ";
        TS0PW01.FY1FCTYC = " ";
        TS0PW01.PC4ORTYP = " ";
        TS0PW01.TS0PWEDT = " ";
        set TS0PM002 initial; /* clear map*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate error message*/
        set TS0PM002.TS0PMSTY cursor; /* set cursor*/
        converseLib.validationFailed(34); /* data must be entered*/
        TS0PM002.XXXPRCNM = "TS0P550"; /* process name*/
      else
        if (TS0PM002.XGPCD != TS0PW01.XGPCD /* If any new data entered*/
         || TS0PM002.TS0PMSTY != TS0PW01.SY1STNBR
         || TS0PM002.TS0PMCLR != TS0PW01.TS0PMCLR
         || TS0PM002.PC2CUXID != TS0PW01.PC2CUXID
         || TS0PM002.PC2INSEG != TS0PW01.PC2INSEG
         || TS0PM002.XQACD != TS0PW01.XQACD 
         || TS0PM002.TS0PMDST != TS0PW01.TS0PMDST
         || TS0PM002.TS0PMXWH != TS0PW01.TS0PMXWH
         || TS0PM002.TSNBEGDT != TS0PW01.TS0PWBDT
         || TS0PM002.TS0PMPO != TS0PW01.TS0PMPO
         || TS0PM002.TS0PMPYR != TS0PW01.TS0PWPYR
         /* OR TS0PM002.TS0PMPMO NE TS0PW01.TS0PWPMO;*/
         /* OR TS0PM002.TS0PMDMO NE TS0PW01.TS0PWDMO;*/
         || TS0PM002.FY1FCTYC != TS0PW01.FY1FCTYC
         || TS0PM002.PC4ORTYP != TS0PW01.PC4ORTYP
         || TS0PM002.TSNENDDT != TS0PW01.TS0PWEDT
         || TS0PW01.TS0PW-NO-DATA-MAP-1 == "Y"
         || TS0PW01.TS0PW-NO-DATA-MAP-2 == "Y"
         || TS0PW01.TS0PW-MAP1-INVALID-DATA == "Y"
         || TS0PW01.TS0PW-MAP2-INVALID-DATA == "Y")

          TS0P110(); /* purge temporary storage*/
          set TS0PW02 empty; /* empty screen ws*/

          TS0PW01.TS0PWIXM = 1; /* set index to 1*/
          while (TS0PW01.TS0PWIXM <= TS0PW01.TS0PWMXP) /* until end array*/
            TS0PW01.TSWSHPID[TS0PWIXM] = 0; /* clear shpid field*/
            TS0PW01.TSW2SHP[TS0PWIXM] = 0;
            TS0PW01.TSWBOL[TS0PWIXM] = " ";
            TS0PW01.TSWCARCD[TS0PWIXM] = " ";
            TS0PW01.TSWCRAFT[TS0PWIXM] = " ";
            TS0PW01.TSWSHPNB[TS0PWIXM] = " ";
            TS0PW01.TSWORIG[TS0PWIXM] = " ";
            TS0PW01.TSWDEST[TS0PWIXM] = " ";
            TS0PW01.TSWXWHCD[TS0PWIXM] = " ";
            TS0PW01.TSWPLNBR[TS0PWIXM] = 0;
            TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* increment index*/
          end

          TS0PW01.XGPCD = TS0PM002.XGPCD;
          TS0PW01.SY1STNBR = TS0PM002.TS0PMSTY;
          TS0PW01.TS0PMCLR = TS0PM002.TS0PMCLR;
          TS0PW01.PC2CUXID = TS0PM002.PC2CUXID;
          TS0PW01.PC2INSEG = TS0PM002.PC2INSEG;
          TS0PW01.XQACD = TS0PM002.XQACD;
          TS0PW01.TS0PMDST = TS0PM002.TS0PMDST;
          TS0PW01.TS0PMXWH = TS0PM002.TS0PMXWH;
          TS0PW01.TS0PWBDT = TS0PM002.TSNBEGDT;
          TS0PW01.TS0PMPO = TS0PM002.TS0PMPO;
          TS0PW01.TS0PWPYR = TS0PM002.TS0PMPYR;
          TS0PW01.TS0PWPMO = TS0PM002.TS0PMPMO;
          TS0PW01.TS0PWDMO = TS0PM002.TS0PMDMO;
          TS0PW01.FY1FCTYC = TS0PM002.FY1FCTYC;
          TS0PW01.PC4ORTYP = TS0PM002.PC4ORTYP;
          TS0PW01.TS0PWEDT = TS0PM002.TSNENDDT;

          set TS0PM002 initial; /* clear map*/

          TS0PM002.XGPCD = TS0PW01.XGPCD;
          TS0PM002.TS0PMSTY = TS0PW01.SY1STNBR;
          TS0PM002.TS0PMCLR = TS0PW01.TS0PMCLR;
          TS0PM002.PC2CUXID = TS0PW01.PC2CUXID;
          TS0PM002.PC2INSEG = TS0PW01.PC2INSEG;
          TS0PM002.XQACD = TS0PW01.XQACD;
          TS0PM002.TS0PMDST = TS0PW01.TS0PMDST;
          TS0PM002.TS0PMXWH = TS0PW01.TS0PMXWH;
          TS0PM002.TS0PMPO = TS0PW01.TS0PMPO;
          TS0PM002.TS0PMPYR = TS0PW01.TS0PWPYR;
          if (TS0PW01.TS0PWPMO == 0)
            TS0PM002.TS0PMPMO = " ";
          else
            TS0PM002.TS0PMPMO = TS0PW01.TS0PWPMO;
          end
          if (TS0PW01.TS0PWDMO == 0)
            TS0PM002.TS0PMDMO = " ";
          else
            TS0PM002.TS0PMDMO = TS0PW01.TS0PWDMO;
          end
          TS0PM002.FY1FCTYC = TS0PW01.FY1FCTYC;
          TS0PM002.PC4ORTYP = TS0PW01.PC4ORTYP;
          TS0PM002.TSNBEGDT = TS0PW01.TS0PWBDT;
          TS0PM002.TSNENDDT = TS0PW01.TS0PWEDT;

          TS0PW01.XGPCD = " "; /* reset all fields*/
          TS0PW01.SY1STNBR = " ";
          TS0PW01.TS0PMCLR = " ";
          TS0PW01.PC2CUXID = " ";
          TS0PW01.PC2INSEG = " ";
          TS0PW01.XQACD = " ";
          TS0PW01.TS0PMDST = " ";
          TS0PW01.TS0PMXWH = " ";
          TS0PW01.TS0PWBDT = " ";
          TS0PW01.TS0PMPO = 0;
          TS0PW01.TS0PWPYR = " ";
          TS0PW01.TS0PWPMO = " ";
          TS0PW01.TS0PWDMO = " ";
          TS0PW01.FY1FCTYC = " ";
          TS0PW01.PC4ORTYP = " ";
          TS0PW01.TS0PWEDT = " ";

          TS0PW01.TS0PWSWR = "Y"; /* set request for data to yes*/
          TS0P570(); /* Verify any changed data*/

        else /* If no data was changed*/

          TS0P570(); /* Verify any changed data*/

        end
      end
    end
  end


end // end TS0P550

// Verify any changed data
Function TS0P570()
   /* ------------------------------------------------------------*/

                /* VERIFY ANY CHANGED DATA*/

   /* 1) Verify valid selections.*/
   /* 2) Verify p.o. id fields.*/
   /* 3) Verify p.o. number or p.o. id entered*/
   /* 4) Verify that all dates entered are valid.*/
   /* 5) Verify that all locations entered are valid.*/
   /* 6) Verify that style data entered is valid.*/
   /* 7) If no errors, check for date span and overlap errors.*/

   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
     /* Check valid selections*/
   /* ------------------------------------------------------------*/

  TS0PW01.TS0PWIXM = 12; /* set index to 13*/
  while (TS0PW01.TS0PWIXM > 0) /* until end of selection lines*/
    if (TS0PM002.TS0PMSEL[TS0PWIXM] != "S" /* if selection is not 's'*/
     && TS0PM002.TS0PMSEL[TS0PWIXM] != " ") /* selection is not blank*/
      converseLib.validationFailed(13); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
      set TS0PM002.TS0PMSEL[TS0PWIXM] cursor, modified, bold;
    else
      if (TS0PM002.TS0PMSEL[TS0PWIXM] == "S" /* if selection is eq 's'*/
       && TS0PW02.YSSCD[TS0PWIXM] == "TN"    
       /* and this selection tentative*/
       && converseVar.eventKey is pf20)     
        converseLib.validationFailed(268); /* Error message*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
        TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
        set TS0PM002.TS0PMSEL[TS0PWIXM] cursor, modified, bold;
      end
    end
    TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM - 1; /* decrement*/
  end

   /* ------------------------------------------------------------*/
     /* Verify each field in the P.O. id seperately*/
   /* ------------------------------------------------------------*/

  if (TS0PM002.TS0PMPO == 0) /* If po number not entered*/
    TS0P575(); /* Edit the po id fields*/
  end

   /* ------------------------------------------------------------*/
     /* Verify po number or po id entered*/
   /* ------------------------------------------------------------*/

  if (TS0PM002.TS0PMPO != TS0PW01.TS0PMPO /* If number has changed*/
   || TS0PM002.TS0PMPO == 0)              /* or not entered*/
    TS0P576(); /* Edit the po id fields*/
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA end date entered*/
   /* ------------------------------------------------------------*/

  if (TS0PM002.TSNENDDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0PM002.TSNENDDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0PW01.TSNENDDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
      TS0PW01.TS0PWEDT = TS0PM002.TSNENDDT; /* save map date*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
   /* MOVE TS0PM002.TSNENDDT TO TS0PW01.TS0PWEDT; /* move date*/
      TS0PW01.TS0PWEDT = " "; /* move date*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
      set TS0PM002.TSNENDDT cursor, modified, bold;
    end
  else
    TS0PW01.TS0PWEDT = TS0PM002.TSNENDDT; /* move date*/
    converseLib.validationFailed(57); /* Error message*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
    set TS0PM002.TSNENDDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* if xwhcd entered, then verify*/
   /* ------------------------------------------------------------*/

  if (TS0PM002.TS0PMXWH != " ") /* If warehouse entered*/
    if (TS0PM002.TS0PMXWH in XWHTBL.XWHCD) /* if warehouse ok*/
      TS0PW01.TS0PMXWH = XWHTBL.XWHCD[sysVar.arrayIndex]; /* Save whse*/
    else
      converseLib.validationFailed(82); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
      set TS0PM002.TS0PMXWH cursor, modified, bold;
   /* MOVE TS0PM002.TS0PMXWH TO TS0PW01.TS0PMXWH; /* Save warehouse*/
      TS0PW01.TS0PMXWH = " "; /* Save warehouse*/
    end
  end

   /* ------------------------------------------------------------*/
     /* if destination entered, get the description*/
   /* ------------------------------------------------------------*/

  if (TS0PM002.TS0PMDST != " ") /* if destination entered*/
    TSCREC.TSCLOCCD = TS0PM002.TS0PMDST; /* move in key*/
    TS0P521(); /* select the location*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
      TS0PW01.TS0PMDST = TSCREC.TSCLOCCD; /* save dest*/
    else
      converseLib.validationFailed(40); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
      set TS0PM002.TS0PMDST cursor, modified, bold;
   /* MOVE TS0PM002.TS0PMDST TO TS0PW01.TS0PMDST; /* save dest*/
      TS0PW01.TS0PMDST = " ";
    end
  else
    TS0PW01.TS0PMDST = " "; /* clear dest*/
  end

   /* ------------------------------------------------------------*/
     /* check valid ETA start date entered*/
   /* ------------------------------------------------------------*/

  if (TS0PM002.TSNBEGDT != " ") /* if date entered*/
    set TA2REC empty; /* Clear working record*/
    TA2REC.TA2DTOPT = "GREGGREG"; /* move date option to record*/
    TA2REC.TA2GRTYP = "A"; /* move date type to record*/
    TA2REC.TA2GRGA = TS0PM002.TSNBEGDT; /* move date*/
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* Check valid date w/routine*/
    if (TA2REC.TA2RTNCD == 0) /* valid date entered*/
      TS0PW01.TSNBEGDT = TA2REC.TA2GRGGN; /* save date in ccyymmdd*/
      TS0PW01.TS0PWBDT = TS0PM002.TSNBEGDT; /* save map date*/
    else /* Invalid date entered*/
      converseLib.validationFailed(57); /* Error message*/
   /* MOVE TS0PM002.TSNBEGDT TO TS0PW01.TS0PWBDT; /* save map date*/
      TS0PW01.TS0PWBDT = " ";
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
      set TS0PM002.TSNBEGDT cursor, modified, bold;
    end
  else
    TS0PW01.TS0PWBDT = TS0PM002.TSNBEGDT; /* save map date*/
    converseLib.validationFailed(57); /* Error message*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
    set TS0PM002.TSNBEGDT cursor, modified, bold;
  end

   /* ------------------------------------------------------------*/
     /* Check valid quality code*/
   /* ------------------------------------------------------------*/
  if (TS0PM002.XQACD == " ") /* If not entered*/
    TS0PW01.XQACD = "  "; /* Save code*/
  else
    if (TS0PM002.XQACD in XQATBL.XQACD) /* If valid*/
      TS0PW01.XQACD = TS0PM002.XQACD; /* Save code*/
    else
      converseLib.validationFailed(108); /* Error message*/
   /* MOVE TS0PM002.XQACD TO TS0PW01.XQACD; /* Save code*/
      TS0PW01.XQACD = " "; /* Save code*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
      set TS0PM002.XQACD cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
     /* Check valid iseg code*/
   /* ------------------------------------------------------------*/
  if (TS0PM002.PC2INSEG == " ") /* If not entered*/
    TS0PW01.PC2INSEG = "  "; /* Save code*/
  else
    TS0P527(); /* Select from DPRODC.VPRDCU01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
      TS0PW01.PC2INSEG = TS0PM002.PC2INSEG; /* Save code*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
        converseLib.validationFailed(109); /* Error message*/
   /* MOVE TS0PM002.PC2INSEG TO TS0PW01.PC2INSEG; /* Save code*/
        TS0PW01.PC2INSEG = " "; /* Save code*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
        TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
        set TS0PM002.PC2INSEG cursor, modified, bold;
      end
    end
  end


  TS0P-52100(); /* verify customer xref entered exists*/


   /* ------------------------------------------------------------*/
     /* Check valid gpc code*/
     /* - If gpc code is ok then,ed*/
       /* . Check valid style entered*/
     /* - If style exists and color was entered*/
       /* . Check valid style color combination*/
   /* ------------------------------------------------------------*/
  if (TS0PM002.XGPCD == " ") /* If gpc code missing*/
    TS0PW01.XGPCD = "  ";
    converseLib.validationFailed(101); /* Error message*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
    set TS0PM002.XGPCD cursor, modified, bold;
  else
    if (TS0PM002.XGPCD in XGPTBL.XGPCD) /* If gpc code ok*/
      TS0PW01.XGPCD = TS0PM002.XGPCD;
      if (TS0PM002.TS0PMSTY == " ") /* if style missing*/
        TS0PW01.SY1STNBR = " "; /* clear*/
        TS0PW01.SY1STYNM = " ";
        converseLib.validationFailed(114); /* Error message*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
        TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
        set TS0PM002.TS0PMSTY cursor, modified, bold;
      else
        TS0PW01.SY1STNBR = TS0PM002.TS0PMSTY; /* save number*/
        TS0P523(); /* Select style description*/
        if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
          TS0PW01.SY1STNBR = PG2REC.SY1STNBR; /* save number*/
          TS0PW01.SY1STYNM = PG2REC.SY1STYNM; /* save name*/
          TS0PM002.SY1STYNM = PG2REC.SY1STYNM; /* move name*/
          if (TS0PM002.TS0PMCLR != " ") /* If color entered*/
            TS0PW01.TS0PMCLR = TS0PM002.TS0PMCLR;
            TS0P524(); /* Select set style/color combination*/
            if (SQLCA.VAGen_SQLCODE == 0) /* if found*/
              TS0PW01.TS0PMCLR = PG2REC.SY2CLRID;
            else
              if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
                TS0PW01.TS0PMCLR = " ";
                converseLib.validationFailed(113); /* Error message*/
                TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
                TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
                set TS0PM002.TS0PMSTY cursor, modified, bold;
                set TS0PM002.TS0PMCLR modified, bold;
              end
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
            TS0PW01.SY1STYNM = " ";
            converseLib.validationFailed(114); /* Error message*/
            TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
            TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
            set TS0PM002.TS0PMSTY cursor, modified, bold;
          end
        end
      end
    else
      converseLib.validationFailed(101); /* Error message*/
      TS0PW01.XGPCD = TS0PM002.XGPCD;
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PM002.XXXPRCNM = "TS0P570"; /* Process name*/
      set TS0PM002.XGPCD cursor, modified, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* If no other errors, check date span overlap errors.*/
   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWPSW == "N") /* if all locations and dates valid*/
    TS0P522(); /* check span and date overlap errors*/
  end

  if (TS0PW01.TS0PWPSW == "N") /* if all locations and dates valid*/
    TS0PW01.TS0PW-MAP2-INVALID-DATA = "N"; /* Invalid data map 2*/
  else
    if (TS0PW01.TS0PWPSW == "Y") /* Problem switch set*/
      TS0PW01.TS0PW-MAP2-INVALID-DATA = "Y"; /* Invalid data map 2*/
    end
  end


end // end TS0P570

// Verify the P.O. id fields
Function TS0P575()
   /* ------------------------------------------------------------*/

      /* VERIFY THE ENTRY OF EACH P.O. ID FIELD SEPERATELY*/

     /* If any part of the p.o. id entered*/

     /* Verify:  1) Factory code entered and correct.*/
              /* 2) Delivery month entered and correct.*/
              /* 3) Month entered and correct.*/
              /* 4) Year entered and correct.*/

   /* ------------------------------------------------------------*/

  TS0PW01.TS0PWIDS = "N"; /* Initialize the valid po id indicator*/

  if (TS0PM002.TS0PMPYR != " " /* If any of the fields entered.*/
   || TS0PM002.TS0PMPMO != 0   
   || TS0PM002.TS0PMDMO != 0   
   || TS0PM002.FY1FCTYC != " " 
   || TS0PM002.PC4ORTYP != " ")

    /* ------------------------------------------------------------*/
     /* CHECK PO TYPE*/
    /* ------------------------------------------------------------*/

    if (TS0PM002.PC4ORTYP == "  ") /* Nothing there*/
      converseLib.validationFailed(220); /* Invalid order type entered*/
      TS0PW01.PC4ORTYP = " ";
      TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
      TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
      TS0PM002.XXXPRCNM = "TS0P575"; /* Process name*/
      set TS0PM002.PC4ORTYP cursor, bold; /* Highlight error*/
    else
      TS0PW01.PC4ORTYP = TS0PM002.PC4ORTYP;
      set PC4REC empty;
      PC4REC.XGPCD = TS0PM002.XGPCD;
      PC4REC.PC4ORTYP = TS0PM002.PC4ORTYP;
      TS0PS07(); /* Select order type*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
        TS0PW01.PC4ORTYP = TS0PM002.PC4ORTYP;
        TS0PM002.PC4ORTYP = TS0PM002.PC4ORTYP;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
          converseLib.validationFailed(220); /* Invalid order type entered*/
          TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
          TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
          TS0PM002.XXXPRCNM = "TS0P575"; /* Process name*/
          set TS0PM002.PC4ORTYP cursor, bold; /* Highlight error*/
        end
      end
    end


    /* ------------------------------------------------------------*/
     /* FACTORY CODE CHECK--OPTIONAL*/
    /* ------------------------------------------------------------*/

    if (TS0PM002.FY1FCTYC > " ") /* factory code value entered*/
      FY1REC.FY1FCTYC = TS0PM002.FY1FCTYC; /* Search key*/
      FY1REC.XGPCD = TS0PM002.XGPCD; /* gpc*/

      TS0PS05(); /* select the factory row*/

      if (SQLCA.VAGen_SQLCODE == 0) /* Everything OK*/
        TS0PW01.FY1FCTYC = FY1REC.FY1FCTYC; /* Search key*/

      else
        if (SQLCA.VAGen_SQLCODE == 100) /* Does not exists*/
          converseLib.validationFailed(166); /* Invalid factory*/
          TS0PW01.TS0PWPSW = "Y"; /* Indicate error*/
          TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
          TS0PM002.XXXPRCNM = "TS0P575"; /* Process name*/
          set TS0PM002.FY1FCTYC cursor, bold; /* Highlight error*/
        else
          TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* DELIVERY MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0PM002.TS0PMDMO >= "01" /* If valid month entered*/
     && TS0PM002.TS0PMDMO <= "12")
      TS0PW01.TS0PWDMO = TS0PM002.TS0PMDMO;
    else
      TS0PW01.TS0PWDMO = TS0PM002.TS0PMDMO;
      converseLib.validationFailed(165); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
      TS0PM002.XXXPRCNM = "TS0P575"; /* Process name*/
      set TS0PM002.TS0PMDMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* MONTH CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    if (TS0PM002.TS0PMPMO >= "01" /* Something there*/
     && TS0PM002.TS0PMPMO <= "12")
      TS0PW01.TS0PWPMO = TS0PM002.TS0PMPMO;
    else
      TS0PW01.TS0PWPMO = TS0PM002.TS0PMPMO;
      converseLib.validationFailed(165); /* Error message*/
      TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
      TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
      TS0PM002.XXXPRCNM = "TS0P575"; /* Process name*/
      set TS0PM002.TS0PMPMO cursor, bold; /* Highlight*/
    end

    /* ------------------------------------------------------------*/
     /* YEAR CHECK--REQUIRED*/
    /* ------------------------------------------------------------*/

    TS0PW01.TS0PWPYR = TS0PM002.TS0PMPYR;
    if (TS0PW01.TS0PWPYR >= "00"
     && TS0PW01.TS0PWPYR <= "99")
      if (TS0PW01.TS0PWPYR > "85")
        TS0PW01.TS0PWPCC = 19;
      else
        TS0PW01.TS0PWPCC = 20;
      end
    else
      if (TS0PW01.TS0PWPY1 >= "A"
       && TS0PW01.TS0PWPY1 <= "Z"
       && TS0PW01.TS0PWPY2 >= "0"
       && TS0PW01.TS0PWPY2 <= "9")
        TS0PS08(); /* Select the set of season years*/
        if (SQLCA.VAGen_SQLCODE == 0)
          TS0PS09(); /* Fetch the first row*/
          if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
            TS0PW01.TS0PWCYR = PCFREC.PCFBUYYR;
            TS0PW01.TS0PWPYR = TS0PW01.TS0PWCYY;
            TS0PW01.TS0PWPCC = TS0PW01.TS0PWCCC;
            PCFREC.PCFSECD = TS0PM002.TS0PMPYR;
          else
            converseLib.validationFailed(164); /* Error message*/
            TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
            TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
            TS0PM002.XXXPRCNM = "TS0P575"; /* Process name*/
            set TS0PM002.TS0PMPYR cursor, bold; /* Highlight*/
          end
          TS0PS10(); /* Close the set*/
        end
      else
        converseLib.validationFailed(164); /* Error message*/
        TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
        TS0PW01.TS0PWIDS = "Y"; /* Indicate invalid po id*/
        TS0PM002.XXXPRCNM = "TS0P575"; /* Process name*/
        set TS0PM002.TS0PMPYR cursor, bold; /* Highlight*/
      end
    end

  end


end // end TS0P575

// Verify po # or po id entered
Function TS0P576()
   /* ------------------------------------------------------------*/

         /* VERIFY P.O. NUMBER OR P.O. ID ENTERED*/

   /* 1) If p.o. number or p.o. id not entered then continue on.*/
   /* 2) If the p.o. number was entered then continue on without*/
      /* checking the p.o. id.*/
   /* 3) If only p.o. id fields have been entered and they are*/
      /* correct, then select the p.o. id and obtain a valid*/
      /* p.o. number for the id.*/

   /* ------------------------------------------------------------*/

  set TS0PW03 empty; /* Clear ws*/

  if (TS0PM002.TS0PMPO == 0 /* if po # or po id not entered*/
   && TS0PM002.TS0PMPYR == " "
   && TS0PM002.TS0PMPMO == 0
   && TS0PM002.TS0PMDMO == 0
   && TS0PM002.FY1FCTYC == " "
   && TS0PM002.PC4ORTYP == " ")
    TS0PW01.TS0PMPO = 0; /* clear ws fields*/
    TS0PW01.TS0PWPYR = " ";
    TS0PW01.TS0PWPMO = " ";
    TS0PW01.TS0PWDMO = " ";
    TS0PW01.FY1FCTYC = " ";
    TS0PW01.PC4ORTYP = " ";
  else
    if (TS0PM002.TS0PMPO > 0) /* if po # entered*/

      TSWREC.XGPCD = TS0PM002.XGPCD;
      TS0PW01.TS0PMPO = TS0PM002.TS0PMPO; /* save the field*/
      set PCYREC empty; /* Clear the passing record*/
      set PC3REC empty; /* Clear the P.O. header record*/
      PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
      PC3REC.PC3PONBR = TS0PM002.TS0PMPO; /* P.O. type*/
      PCYREC.PCYFUNC = "S "; /* Select alternate*/

      TS0PS06(); /* select the po*/

      if (SQLCA.VAGen_SQLCODE == 0) /* if po found*/
        TS0PW03.TS0PWPON[1] = PC3REC.PC3PONBR;
        TS0PW01.TS0PWDAT = PC3REC.PC3POIDT;
        TS0PW01.TS0PWPCC = TS0PW01.TS0PWPCN;
        TS0PW01.TS0PWPMO = TS0PW01.TS0PWPM1;
             /* MOVE TS0PW01.TS0PWPM1 TO TS0PM002.TS0PMPMO;*/
        TS0PW01.TS0PWDMO = TS0PW01.TS0PWPM2;
             /* MOVE TS0PW01.TS0PWPM2 TO TS0PM002.TS0PMDMO;*/
        TS0PW01.FY1FCTYC = PC3REC.FY1FCTYC;
        TS0PM002.FY1FCTYC = PC3REC.FY1FCTYC;
        if (TSWREC.XGPCD == "03")
          TS0PW01.TS0PWPYR = PC3REC.PCFSECD;
          TS0PM002.TS0PMPYR = PC3REC.PCFSECD;
        else
          TS0PW01.TS0PWPYR = TS0PW01.TS0PWPYY;
          TS0PM002.TS0PMPYR = TS0PW01.TS0PWPYY;
        end
        TS0PW01.PC4ORTYP = PC3REC.PC4ORTYP;
        TS0PM002.PC4ORTYP = PC3REC.PC4ORTYP;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* if po not found*/
           /* continue on*/
        end
      end

    else
      TSWREC.XGPCD = TS0PM002.XGPCD;
      if (TS0PW01.TS0PWIDS == "N" /* If the po id passed previous edits*/
       && TS0PW01.TS0PWPYR > 0)  
        set PCYREC empty; /* Clear the passing record*/
        set PC3REC empty; /* Clear the P.O. header record*/
        PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
        PCYREC.PCYTODT = TS0PW01.TS0PWIDT; /* P.O. id*/
        PCYREC.PCYFRDT = TS0PW01.TS0PWIDT; /* P.O. id*/
        PC3REC.PC4ORTYP = TS0PW01.PC4ORTYP; /* P.O. order type*/
        if (TSWREC.XGPCD == "03")
          PC3REC.PCFSECD = PCFREC.PCFSECD; /* Season code*/
          TS0PM002.TS0PMPYR = PCFREC.PCFSECD;
          TS0PW01.TS0PWPYR = PCFREC.PCFSECD;
        else
          PC3REC.PCFSECD = " "; /* Season code*/
          TS0PM002.TS0PMPYR = TS0PW01.TS0PWPYR;
        end
        if (TS0PM002.FY1FCTYC == "   ")
          PC3REC.FY1FCTYC = "*"; /* Factory code*/
        else
          PC3REC.FY1FCTYC = TS0PM002.FY1FCTYC; /* Factory code*/
        end
        PCYREC.PCYFUNC = "S2"; /* Select Scan 2*/

        TS0PS06(); /* Open the cursor*/

        if (SQLCA.VAGen_SQLCODE == 0) /* Select set success*/
          TS0PW01.TS0PWIXM = 1; /* Set counter for screen ws*/
          TS0PW01.TS0PWSW1 = "N"; /* Set end of set switch*/

          while (TS0PW01.TS0PWSW1 == "N") /* While data exists*/
            PCYREC.PCYFUNC = "N2"; /* Fetch next row*/

            TS0PS06();
            if (SQLCA.VAGen_SQLCODE == 100) /* End of set*/
              TS0PW01.TS0PWSW1 = "Y";
              if (PC3REC.PC3PONBR == 0)
                converseLib.validationFailed(167); /* No data to display*/
                set TS0PM002.TS0PMPYR cursor, bold;
                set TS0PM002.TS0PMPMO bold;
                set TS0PM002.TS0PMDMO bold;
                set TS0PM002.FY1FCTYC bold;
                set TS0PM002.PC4ORTYP bold;
                TS0PM002.XXXPRCNM = "TS0P576"; /* Process name*/
                TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
              end
            else

              if (SQLCA.VAGen_SQLCODE == 0) /* Return ok*/
                TS0PW03.TS0PWPON[TS0PWIXM] = PC3REC.PC3PONBR;
                TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* Increment counter*/
                if (TS0PW01.TS0PWIXM >= 1000)
                  TS0PW01.TS0PWSW1 = "Y";
                  converseLib.validationFailed(145); /* Too many po's exist*/
                  TS0PM002.XXXPRCNM = "TS0P576"; /* Process name*/
                  TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/
                end
              end
            end
          end
          if (TS0PW01.TS0PWSW1 == "Y") /* If last fetch done*/
            PCYREC.PCYFUNC = "C2"; /* Close cursor*/

            TS0PS06();
          end
        end
      end
    end
  end


end // end TS0P576

// Process valid input request
Function TS0P600()
   /* ------------------------------------------------------------*/
                /* PROCESS VALID INPUT REQUESTS*/

   /* 1) Record map shipment number selections.*/
   /* 2) If a scroll request, adjust temp storage page number.*/
   /* 3) If enter is pressed and no errors set request for data*/
      /* to yes.*/

   /* ------------------------------------------------------------*/

  if (TS0PW01.TS0PWPSW == "N") /* no errors*/

    if (converseVar.eventKey is pf16) /* If transfer to PC system requested*/
         /* SET PCWREC EMPTY            ; clear pcwrec*/
      TS0PW01.TS0PWIXM = 1; /* initialize index*/
      while (TS0PW01.TS0PWIXM <= 12) /* until end of detail*/

        if (TS0PM001.TS0PMSEL[TS0PWIXM] == "S" /* If selection*/
         || TS0PM002.TS0PMSEL[TS0PWIXM] == "S") /* If selection*/
          COMMAREA.XGPCD = TS0PW01.XGPCD;
          PCWREC.XGPCD = TS0PW01.XGPCD;
          PCWREC.SY1STNBR = TS0PW01.SY1STNBR;
          PCWREC.SY2CLRID = TS0PW02.SY2CLRID[TS0PWIXM];
          PCWREC.XQACD = TS0PW01.XQACD;
          PCWREC.PC2INSEG = TS0PW01.PC2INSEG;
          PCWREC.PC3PONBR = TS0PW02.PC3PONBR[TS0PWIXM];
          TS0PW01.TS0PWPYR = TS0PW02.TS0PMPYY[TS0PWIXM];
          TS0PW01.TS0PWPMO = TS0PW02.TS0PMPM1[TS0PWIXM];
          TS0PW01.TS0PWDMO = TS0PW02.TS0PMPM2[TS0PWIXM];
          PCWREC.PC3POIDT = TS0PW01.TS0PWIDT;
          PCWREC.FY1FCTYC = TS0PW02.FY1FCTYC[TS0PWIXM];
          PCWREC.PC4ORTYP = TS0PW02.PC4ORTYP[TS0PWIXM];
          PCWREC.XWHCD = TS0PW02.XWHCD[TS0PWIXM];
          if (TS0PM002.TS0PMCXR[TS0PWIXM] == "*****")
            PCWREC.PC2CUXID = "     ";
          else
            PCWREC.PC2CUXID = TS0PM002.TS0PMCXR[TS0PWIXM];
          end
          PCWREC.XDSCD = "*"; /* direct ship cd*/
          TSCREC.TSCLOCCD = TS0PW02.TSEDEST[TS0PWIXM];
          TS0P521();
          if (SQLCA.VAGen_SQLCODE == 0) /* if location found*/
            if (TSCREC.XCTCD == "USA")
              PCWREC.YSMXDV = "  "; /* division cd*/
            else
              PCWREC.YSMXDV = "20"; /* division cd*/
            end
          else
            converseLib.validationFailed(40); /* Error message*/
            TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
            TS0PM001.XXXPRCNM = "TS0P600"; /* Process name*/
            TS0PM002.XXXPRCNM = "TS0P600"; /* Process name*/
            TS0PW01.TS0PMDST = TS0PM001.TS0PMDST; /* save dest*/
          end
          TS0PW01.TS0PWIXM = 13;
        else
          COMMAREA.XGPCD = TS0PW01.XGPCD;
          PCWREC.XGPCD = TS0PW01.XGPCD;
          PCWREC.SY1STNBR = TS0PW01.SY1STNBR;
          PCWREC.SY2CLRID = TS0PW01.TS0PMCLR;
          PCWREC.XQACD = TS0PW01.XQACD;
          PCWREC.PC2INSEG = TS0PW01.PC2INSEG;
          PCWREC.PC3PONBR = TS0PW01.TS0PMPO;
          PCWREC.PC3POIDT = TS0PW01.TS0PWIDT;
          PCWREC.FY1FCTYC = TS0PW01.FY1FCTYC;
          PCWREC.PC4ORTYP = TS0PW01.PC4ORTYP;
        end
        TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1;
      end
      /* ------------------------------------------------------------*/
         /* If gpc equals '03' then transfer to PC06*/
         /* else transfer to PC0Z.*/
      /* ------------------------------------------------------------*/

      if (PCWREC.XGPCD == "03")
        COMMAREA.CATOAP = "PC06"; /* TO application*/
      else
        COMMAREA.CATOAP = "PC0Z"; /* TO application*/
      end

      COMMAREA.CAUSERA = PCWREC.CAUSERA; /* move common pass record*/
      PCWREC.CAFROMAP = "TS0P"; /* FROM application*/
      COMMAREA.CAITEM = " "; /* Application data*/
      TS0P110(); /* purge any temp storage*/
      XSTSS01();
      TS0PM001.XXXPRCNM = "TS0P600";
      TS0PM002.XXXPRCNM = "TS0P600";
      TS0PW01.TS0PWSWR = "Y"; /* set request for data to yes*/

    else

      /* ------------------------------------------------------------*/
                    /* Process Screen Selections*/

         /* 1) check to see if any selections have been made*/
         /* 2) if a selection has been made, then check to see*/
            /* if this shipment id has already been recorded in*/
            /* the shipment id array.*/
         /* 3) if the selction has not been recorded yet or has*/
            /* been deleted from the screen, then update the*/
            /* shipment id array with current values.*/

      /* ------------------------------------------------------------*/

      TS0PW01.TS0PWIXM = 1; /* initialize index*/
      TS0PW01.TS0PWSFL = "N"; /* initialize selection flag*/
      while (TS0PW01.TS0PWIXM <= 12) /* until end of detail*/
        if (TS0PM001.TS0PMSEL[TS0PWIXM] != TS0PW02.TS0PMSEL[TS0PWIXM]
         || TS0PM002.TS0PMSEL[TS0PWIXM] != TS0PW02.TS0PMSEL[TS0PWIXM])
          TS0PW01.TS0PWSFL = "Y"; /* Set selection flag*/

          if (TS0PM001.TS0PMSEL[TS0PWIXM] == "S" /* If new selection*/
           || TS0PM002.TS0PMSEL[TS0PWIXM] == "S") /* If new selection*/
            if (TS0PW02.TS0PMSEL[TS0PWIXM] == " ")
              TS0PW02.TS0PMSEL[TS0PWIXM] = "S"; /* Set selection*/
            /* ** increment selection count*/
              TS0PW02.TS0PWSCT[TS0PWIXM] = TS0PW02.TS0PWSCT[TS0PWIXM] + 1;
            /* ***/
            /* --------------------------------------------*/
             /* Check to see if pl selection already exists*/
            /* --------------------------------------------*/
              TS0PW01.TS0PWEFL = "N"; /* initialize exists flag*/
              TS0PW01.TS0PWIX2 = 1; /* set index*/
              while (TS0PW01.TS0PWIX2 <= TS0PW01.TS0PWMXP) /* until end of array*/
                if (TS0PW01.TSWSHPID[TS0PWIX2] == TS0PW02.TSFSHPID[TS0PWIXM]
                 && TS0PW01.TSWPLNBR[TS0PWIX2] == TS0PW02.TSIPLNBR[TS0PWIXM])
                  TS0PW01.TS0PWEFL = "Y"; /* Set exists flag*/
                  TS0PW01.TS0PWIX2 = TS0PW01.TS0PWMXP + 1; /* end loop*/
                else
                  TS0PW01.TS0PWIX2 = TS0PW01.TS0PWIX2 + 1; /* increment index*/
                end
              end

              if (TS0PW01.TS0PWEFL == "N") /* If pl doesn't already exist*/
                TS0PW01.TS0PWIX2 = 1; /* set index*/
                while (TS0PW01.TS0PWIX2 <= TS0PW01.TS0PWMXP) /* until end of array*/
                  if (TS0PW01.TSWSHPID[TS0PWIX2] == 0) /* if field is open*/
                    TS0PW01.TSWSHPID[TS0PWIX2] = TS0PW02.TSFSHPID[TS0PWIXM];
                    TS0PW01.TSW2SHP[TS0PWIX2] = TS0PW02.TSFSHPID[TS0PWIXM];
                    TS0PW01.TSWBOL[TS0PWIX2] = TS0PW02.TSFBOL[TS0PWIXM];
                    TS0PW01.TSWCARCD[TS0PWIX2] = TS0PW02.TSACARCD[TS0PWIXM];
                    TS0PW01.TSWCRAFT[TS0PWIX2] = TS0PW02.TS5CRAFT[TS0PWIXM];
                    TS0PW01.TSWSHPNB[TS0PWIX2] = TS0PW02.TSFSHPNB[TS0PWIXM];
                    TS0PW01.TSWORIG[TS0PWIX2] = TS0PW02.TSEORIG[TS0PWIXM];
                    TS0PW01.TSWDEST[TS0PWIX2] = TS0PW02.TSEDEST[TS0PWIXM];
                    TS0PW01.TSWXWHCD[TS0PWIX2] = TS0PW02.XWHCD[TS0PWIXM];
                    TS0PW01.TSWPLNBR[TS0PWIX2] = TS0PW02.TSIPLNBR[TS0PWIXM];
                    TS0PW01.TS0PWIX2 = TS0PW01.TS0PWMXP + 1; /* end loop*/
                  else
                    TS0PW01.TS0PWIX2 = TS0PW01.TS0PWIX2 + 1; /* increment index*/
                  end
                end
              end

            end
          end

          if (TS0PM001.TS0PMSEL[TS0PWIXM] == " " /* If selection deleted*/
           && TS0PM002.TS0PMSEL[TS0PWIXM] == " " 
           && TS0PW02.TS0PMSEL[TS0PWIXM] == "S")
            TS0PW02.TS0PMSEL[TS0PWIXM] = " "; /* Clear selection*/
            /* ** decrement selection count*/
            TS0PW02.TS0PWSCT[TS0PWIXM] = TS0PW02.TS0PWSCT[TS0PWIXM] - 1;
            /* ***/
            if (TS0PW02.TS0PWSCT[TS0PWIXM] <= 0) /* If no selections exist*/
              TS0PW01.TS0PWIX2 = 1; /* set index*/
              while (TS0PW01.TS0PWIX2 <= TS0PW01.TS0PWMXP) /* until end*/
                if (TS0PW01.TSWSHPID[TS0PWIX2] == TS0PW02.TSFSHPID[TS0PWIXM]
                 && TS0PW01.TSWPLNBR[TS0PWIX2] == TS0PW02.TSIPLNBR[TS0PWIXM])
                  TS0PW01.TSWSHPID[TS0PWIX2] = 0;
                  TS0PW01.TSW2SHP[TS0PWIX2] = 0;
                  TS0PW01.TSWBOL[TS0PWIX2] = " ";
                  TS0PW01.TSWCARCD[TS0PWIX2] = " ";
                  TS0PW01.TSWCRAFT[TS0PWIX2] = " ";
                  TS0PW01.TSWSHPNB[TS0PWIX2] = " ";
                  TS0PW01.TSWORIG[TS0PWIX2] = " ";
                  TS0PW01.TSWDEST[TS0PWIX2] = " ";
                  TS0PW01.TSWXWHCD[TS0PWIX2] = " ";
                  TS0PW01.TSWPLNBR[TS0PWIX2] = 0;
                end
                TS0PW01.TS0PWIX2 = TS0PW01.TS0PWIX2 + 1; /* increment index*/
              end
            end
          end

        end
        TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* increment index*/
      end
      /* ------------------------------------------------------------*/
                    /* Update the temporary storage page*/

         /* 1) If the selection flag indicates a change is selections*/
            /* then update the temporary storage page with the new*/
            /* selection data.*/

      /* ------------------------------------------------------------*/
      if (TS0PW01.TS0PWSFL == "Y") /* If a selection was made*/
        TS0P610(); /* Update temp storage page*/
      end

      if (converseVar.eventKey is pf7) /* Scroll back requested*/
        TS0PW01.TS0PWTSP = TS0PW01.TS0PWTSP - 1; /* Decrement page number*/
      else
        if (converseVar.eventKey is pf8) /* Scroll forward requested*/
          TS0PW01.TS0PWTSP = TS0PW01.TS0PWTSP + 1; /* Increment page number*/
        else
          if (converseVar.eventKey is pf12) /* transfer to ts0j*/

            /* ------------------------------------------------------------*/
               /* transfer to ts0j, shipment maintenance*/

            /* ------------------------------------------------------------*/
            TS0PW01.TS0PWIXM = 1; /* set index*/
            TS0PW01.TS0PWIXW = 1;
            while (TS0PW01.TS0PWIXM <= TS0PW01.TS0PWMXP) /* while le max*/
              if (TS0PW01.TSWSHPID[TS0PWIXM] > 0) /* if data exists*/
                TSWREC.TSWARR1[TS0PWIXW] = TS0PW01.TSWARR1[TS0PWIXM];
                TSWREC.TSWINQFL = "Y"; /* indicate inquiry exists*/
                TS0PW01.TS0PWIXW = TS0PW01.TS0PWIXW + 1; /* incr index*/
              end
              TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* incr index*/
            end

            if (TSWREC.TSWINQFL == " ") /* no ship id's found in array*/
              TS0PW01.TS0PWPSW = "Y"; /* indicate error*/
              converseLib.validationFailed(153); /* error message*/
              TS0PM001.XXXPRCNM = "TS0P600"; /* process name*/
            else
              TSWREC.TSWSHPOS = 1; /* Set ship id index position*/
              COMMAREA.CATOAP = "TS0J"; /* to application*/
              COMMAREA.CAFROMAP = "TS0P"; /* from application*/
              TSWREC.TSWFRAPP = "TS0P"; /* from application*/
              COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/
              COMMAREA.CAITEM = " "; /* Application data*/
              TS0P110(); /* purge any temp storage*/
              XSTSS01(); /* exit to another application*/
              TS0PW01.TS0PWSWR = "Y"; /* set request for data to yes*/
            end

          else
            if (converseVar.eventKey is pf20) /* transfer to ts02*/
   /* ------------------------------------------------------------*/
                 /* transfer to TS0V, shipment maintenance*/
   /* ------------------------------------------------------------*/
              TS0PW01.TS0PWIXM = 1; /* set index*/
              TS0PW01.TS0PWIXW = 1;
              while (TS0PW01.TS0PWIXM <= TS0PW01.TS0PWMXP) /* while le max*/
                if (TS0PW01.TSWSHPID[TS0PWIXM] > 0) /* if data exists*/
                  TSWREC.TSWARR1[TS0PWIXW] = TS0PW01.TSWARR1[TS0PWIXM];
                  TSWREC.TSWARR2[TS0PWIXW] = TS0PW01.TSWARR2[TS0PWIXM];
                  TSWREC.TSWINQFL = "Y"; /* indicate inquiry exists*/
                  TS0PW01.TS0PWTOK = "Y"; /* transfer ok to TS0V flag*/
                  TS0PW01.TS0PWIXW = TS0PW01.TS0PWIXW + 1; /* incr index*/
                end
                TS0PW01.TS0PWIXM = TS0PW01.TS0PWIXM + 1; /* incr index*/
              end

              if (TS0PW01.TS0PWTOK == "Y") /* if transfer ok to ts02*/
                TS0PW01.TS0PWTOK = "N"; /* transfer ok to ts02 flag*/
                TSWREC.TSWSHPOS = 1; /* set ship id index position*/
                TSWREC.XGPCD = TS0PM001.XGPCD;
                COMMAREA.CATOAP = "TS0V"; /* TO application*/
                TSWREC.TSWFRAPP = "TS0P"; /* FROM application*/
                COMMAREA.CAUSERA = TSWREC.CAUSERA; /* move pass data*/
                TS0P110(); /* purge any temp storage*/
                XSTSS01(); /* transfer to application*/
              else
                converseLib.validationFailed(153); /* Must have a selection to transfer*/
                TS0PM001.XXXPRCNM = "TS0P600";
                TS0PW01.TS0PWSWR = "Y";
                                   /* set request for data to yes*/
              end
            else
              if (converseVar.eventKey is enter /* if enter is pressed*/
               && TS0PW01.TS0PWPSW == "N")      /* and no errors*/
                 /* continue on*/
              end
            end
          end
        end
      end
    end
  end

end // end TS0P600

// Update temporary storage page
Function TS0P610()
   /* ------------------------------------------------------------*/
            /* UPDATE TEMPORARY STORAGE PAGE*/

   /* 1) Update the current page of temporary storage.*/
   /* 2) If error occurs, indicate system error and exit to*/
      /* redisplay the map.*/

   /* ------------------------------------------------------------*/

  TS0PW02.TS0PWLEN = 1430; /* Temporary storage length*/
  TA5REC.TA5APPID = "TS0P"; /* Application identification*/
  TA5REC.TA5TSQIX = TS0PW01.TS0PWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  call "TA0050" (TS0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* Temporary storage subr*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0P610"; /* Process name*/
    TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
    TA1REC.TA1MAP = "TS0PM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PM001.XXXPRCNM = "TS0P610"; /* Process name*/
    TS0PW01.TS0PWPSW = "Y"; /* indicate problem*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    exit stack; /* Exit to redisplay map*/
  end


end // end TS0P610

// Get the po id and po type
Function TS0PS01()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* Clear the passing record*/
  set PC3REC empty; /* Clear the P.O. header record*/
  PC3REC.XGPCD = TSWREC.XGPCD; /* gpc*/
  PC3REC.PC3PONBR = TS7REC.PC3PONBR; /* P.O. type*/
  PCYREC.PCYFUNC = "S "; /* Select alternate*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0 /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0PS07"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0PM001.XXXPRCNM = "TS0PS01"; /* Process name*/
  TS0PM002.XXXPRCNM = "TS0PS01"; /* Process name*/
  TS0PW01.TS0PWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0PS01

// Select (S )     DFCTY.VFCTY001
Function TS0PS05()
   /* ------------------------------------------------------------*/

         /* SELECT THE FACTORY ROW FROM DFCTY.DFCTY001*/

   /* ------------------------------------------------------------*/


  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0PS05"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE FACTORY TABLE ROW";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    TA1REC.TA1DBASE = "DFCTY   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VFCTY001"; /* Table view name*/
    TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0PM001.XXXPRCNM = "TS0PS05"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0PS05"; /* Process name*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0PS05

// Select (S )    DPRODC.VPOHDR01
Function TS0PS06()
   /* ------------------------------------------------------------*/
   /* Select a unique row from the PC3REC*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

  if (sysVar.errorCode == "00000000") /* Good call*/
    if (SQLCA.VAGen_SQLCODE == 0   /* Row found*/
     || SQLCA.VAGen_SQLCODE == 100 /* Row not found*/
     || SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/

      if (TS0PM001.TS0PMPO > 0 /* If po number entered*/
       && SQLCA.VAGen_SQLCODE == -811) /* Multiple rows returned*/
         /* continue on*/
      else
        return; /* Return to previous process*/
      end

    end
  end

  if (sysVar.errorCode == "00000000" /* Good call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Sql commarea*/
  TA1REC.TA1MAP = sysVar.errorCode; /* Csp return code*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = "TS0PS06"; /* Process name*/
  TA1REC.TA1LOC = "SELECT UNIQUE P.O. HEADER ROW  ";
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC3REC.PC3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  TS0PM001.XXXPRCNM = "TS0PS06"; /* Process name*/
  TS0PM002.XXXPRCNM = "TS0PS06"; /* Process name*/
  TS0PW01.TS0PWPSW = "Y"; /* INDICATE PROBLEM*/


end // end TS0PS06

// Select (S )    DPRODC.VPOTYP01
Function TS0PS07()
   /* ------------------------------------------------------------*/

         /* SELECT THE PO TYPE ROW FROM DPRODC.VPOTYP01*/

   /* ------------------------------------------------------------*/

  call "IO3320" ("S ", SQLCA, PC4REC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* Everything OK*/
   || SQLCA.VAGen_SQLCODE == 100)
     /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0PS07"; /* Process name*/
    TA1REC.TA1LOC = "SELECT UNIQUE PO TYPE TABLE ROW";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOTYP01"; /* Table view name*/
    TA1REC.TA1TBLKE = PC4REC.PC4KEY; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

    TS0PM001.XXXPRCNM = "TS0PS07"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0PS07"; /* Process name*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0PS07

// Select (S1)    DPRODC.VPOVFY01
Function TS0PS08()
   /* ------------------------------------------------------------*/

              /* SELECT SET AND OPEN CURSOR VPOVFY01*/

   /* 1) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  set PCFREC empty;
  PCFREC.PCFSECD = TS0PW01.TS0PWPYR;
  if (TS0PM001.XGPCD == "03")
    TS0PW01.TS0PWPMO = TS0PM001.TS0PMPMO;
    PCFREC.PCFBUYMO = TS0PW01.TS0PWPMO;
  else
    TS0PW01.TS0PWDMO = TS0PM001.TS0PMDMO;
    PCFREC.PCFBUYMO = TS0PW01.TS0PWDMO;
  end
  PCFREC.XXXSTAT = "*";

  call "IO4090" ("S1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0PS08"; /* Process name*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PM001.XXXPRCNM = "TS0PS08"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0PS08"; /* Process name*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/

  end


end // end TS0PS08

// Fetch  (N1)    DPRODC.VPOVFY01
Function TS0PS09()
   /* ------------------------------------------------------------*/
                   /* FETCH ROW VPOVFY01*/

   /* 1) If no row found then continue.*/
   /* 2) Format selected row into working storage.*/
   /* 3) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("N1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 0 /* If ok or*/
   || SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    /* continue on*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1PGMNM = "TS0PS09"; /* Process name*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PM001.XXXPRCNM = "TS0PS09"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0PS09"; /* Process name*/

  end


end // end TS0PS09

// Close  (C1)    DPRODC.VPOVFY01
Function TS0PS10()
   /* ------------------------------------------------------------*/

              /* CLOSE SELECTED SET CURSOR VPOVFY01*/

   /* 1) Close set.*/
   /* 2) If unexpected return code:*/
      /* a. call error diagnosis routine.*/
      /* b. indicate system error.*/

   /* ------------------------------------------------------------*/

  call "IO4090" ("C1", SQLCA, PCFREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0PS10"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";

    if (TS0PW01.TS0PWSWM == "1") /* request map1*/
      TA1REC.TA1MAP = "TS0PM001"; /* map1 name*/
    else
      TA1REC.TA1MAP = "TS0PM002"; /* map2 name*/
    end

    TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPOVFY01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    TS0PM001.XXXPRCNM = "TS0PS10"; /* Process name*/
    TS0PM002.XXXPRCNM = "TS0PS10"; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    TS0PW01.TS0PWPSW = "Y"; /* Indicate problem*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

  end


end // end TS0PS10

//*** RECORD=TS0PW01 ****
// Working storage for TS0G - Schedule Inquiry
// ***********************
Record TS0PW01 type basicRecord
  10 TS0PWIXM TS0PWIXM ; 
  10 TS0PWIXW TS0PWIXW ; 
  10 TS0PWIX2 TS0PWIX2 ; 
  10 TS0PWIX3 TS0PWIX3 ; 
  10 TS0PWMXP TS0PWMXP ; 
  10 TS0PWSW1 TS0PWSW1 ; 
  10 TS0PWSW2 TS0PWSW2 ; 
  10 TS0PWSW3 TS0PWSW3 ; 
  10 TS0PWSWM TS0PWSWM ; 
  10 TS0PWSWR TS0PWSWR ; 
  10 TS0PWPSW TS0PWPSW ; 
  10 TS0PW-NO-DATA-MAP-1 TS0PW-NO-DATA-MAP-1 ; 
  10 TS0PW-NO-DATA-MAP-2 TS0PW-NO-DATA-MAP-2 ; 
  10 TS0PW-MAP1-INVALID-DATA TS0PW-MAP1-INVALID-DATA ; 
  10 TS0PW-MAP2-INVALID-DATA TS0PW-MAP2-INVALID-DATA ; 
  10 TS0PWIDS TS0PWIDS ; 
  10 TS0PWSFL TS0PWSFL ; 
  10 TS0PWTOK TS0PWTOK ; 
  10 TS0PWEFL TS0PWEFL ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 TS0PMCLR TS0PMCLR ; 
  10 PC2INSEG PC2INSEG ; 
  10 PC2CUXID PC2CUXID ; 
  10 XQACD XQACD ; 
  10 TS0PMDST TS0PMDST ; 
  10 TS0PMXWH TS0PMXWH ; 
  10 SY1STYNM SY1STYNM ; 
  10 TS0PWCYR TS0PWCYR ; 
    15 TS0PWCCC TS0PWCCC ; 
    15 TS0PWCYY TS0PWCYY ; 
  10 TS0PWIDT TS0PWIDT ; 
    15 TS0PWPCC TS0PWPCC ; 
    15 TS0PWPYR TS0PWPYR ; 
      20 TS0PWPY1 TS0PWPY1 ; 
      20 TS0PWPY2 TS0PWPY2 ; 
    15 TS0PWPMO TS0PWPMO ; 
    15 TS0PWDMO TS0PWDMO ; 
  10 FY1FCTYC FY1FCTYC ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 TSNBEGDT TSNBEGDT ; 
  10 TS0PWBDT TS0PWBDT ; 
  10 TS0PMPO TS0PMPO ; 
  10 TSNENDDT TSNENDDT ; 
  10 TS0PWEDT TS0PWEDT ; 
  10 TSWARR1 TSWARR1 [10] ; 
    15 TSWSHPID TSWSHPID ; 
    15 TSWBOL TSWBOL ; 
    15 TSWCARCD TSWCARCD ; 
    15 TSWCRAFT TSWCRAFT ; 
    15 TSWSHPNB TSWSHPNB ; 
    15 TSWORIG TSWORIG ; 
    15 TSWDEST TSWDEST ; 
    15 TSWXWHCD TSWXWHCD ; 
  10 TSWARR2 TSWARR2 [10] ; 
    15 TSW2SHP TSW2SHP ; 
    15 TSWPLNBR TSWPLNBR ; 
    15 TSWNKCTN TSWNKCTN ; 
  10 TS0PWDAT TS0PWDAT ; 
    15 TS0PWPCN TS0PWPCN ; 
    15 TS0PWPYY TS0PWPYY ; 
    15 TS0PWPM1 TS0PWPM1 ; 
    15 TS0PWPM2 TS0PWPM2 ; 
  10 TS0PWWDT TS0PWWDT ; 
    15 TS0PWWCC TS0PWWCC ; 
    15 TS0PWWYY TS0PWWYY ; 
    15 TS0PWWMM TS0PWWMM ; 
    15 TS0PWWDD TS0PWWDD ; 
  10 TS0PWMDT TS0PWMDT ; 
    15 TS0PWMMM TS0PWMMM ; 
    15 TS0PWMDD TS0PWMDD ; 
    15 TS0PWMYY TS0PWMYY ; 
  10 TS0PWTSP TS0PWTSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 TS0PWORI TS0PWORI ; 
    15 TS0PWOR1 TS0PWOR1 ; 
    15 TS0PWOR2 TS0PWOR2 ; 
      20 TS0PWOR3 TS0PWOR3 ; 
      20 TS0PWOR4 TS0PWOR4 ; 
  10 TS0PWSOI TS0PWSOI ; 
end // end TS0PW01

//*** RECORD=TS0PW02 ****
// Temporary storage record for TS0G - Schedule Inquiry
// ***********************
Record TS0PW02 type basicRecord
  10 TS0PWLEN TS0PWLEN ; 
  10 TS0PWLIN TS0PWLIN [13] ; 
    15 TS0PMSEL TS0PMSEL ; 
    15 TS0PWSCT TS0PWSCT ; 
    15 TSFSHPID TSFSHPID ; 
    15 TSIPLNBR TSIPLNBR ; 
    15 TSFDESTE TSFDESTE ; 
    15 TSEORIG TSEORIG ; 
    15 TSEDEST TSEDEST ; 
    15 XWHCD XWHCD ; 
    15 TSACARCD TSACARCD ; 
    15 TS5CRAFT TS5CRAFT ; 
    15 TSFSHPNB TSFSHPNB ; 
    15 TSFBOL TSFBOL ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 YSSCD YSSCD ; 
    15 TS0PWPOI TS0PWPOI ; 
      20 TS0PMPYY TS0PMPYY ; 
      20 TS0PMPM1 TS0PMPM1 ; 
      20 TS0PMPM2 TS0PMPM2 ; 
      20 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC2CUXID PC2CUXID ; 
    15 OP1CUOID OP1CUOID ; 
    15 OP1NORID OP1NORID ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 TSISHPQT TSISHPQT ; 
    15 TSIDETFL TSIDETFL ; 
end // end TS0PW02

//*** RECORD=TS0PW03 ****
// Temporary storage record for TS0P - Style Inquiry
// ***********************
Record TS0PW03 type basicRecord
  10 TS0PWLE3 TS0PWLE3 ; 
  10 TS0PWLI3 TS0PWLI3 [1000] ; 
    15 TS0PWPON TS0PWPON ; 
end // end TS0PW03

// Color
DataItem TS0PMCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save destination
DataItem TS0PMDST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id production month
DataItem TS0PMPM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id demand month
DataItem TS0PMPM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Map po number
DataItem TS0PMPO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id production year
DataItem TS0PMPYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection field
DataItem TS0PMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map warehouse code
DataItem TS0PMXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 1
DataItem TS0PW-MAP1-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid data on map 2
DataItem TS0PW-MAP2-INVALID-DATA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 1 to display
DataItem TS0PW-NO-DATA-MAP-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No data on map 2 to display
DataItem TS0PW-NO-DATA-MAP-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map begin parm date
DataItem TS0PWBDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// century
DataItem TS0PWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// century/year
DataItem TS0PWCYR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0PWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date
DataItem TS0PWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delivery month
DataItem TS0PWDMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map end parm date
DataItem TS0PWEDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pack list already exists flag
DataItem TS0PWEFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// P.O. id correct switch
DataItem TS0PWIDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_ID_DT for map
DataItem TS0PWIDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields 2
DataItem TS0PWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields 3
DataItem TS0PWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0PWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem TS0PWIXW smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem TS0PWLE3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Temporary storage length
DataItem TS0PWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem TS0PWLI3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data Display Line
DataItem TS0PWLIN char(110)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map day
DataItem TS0PWMDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map date mmddyy
DataItem TS0PWMDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working map month
DataItem TS0PWMMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max pass shipment array lines
DataItem TS0PWMXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working map year
DataItem TS0PWMYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0PWOR1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0PWOR2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0PWOR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0PWOR4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TS0PWORI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem TS0PWPCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id century
DataItem TS0PWPCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0PWPM1 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// delivery month
DataItem TS0PWPM2 char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// month
DataItem TS0PWPMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem TS0PWPOI char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC3PONBR
DataItem TS0PWPON int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Problem switch
DataItem TS0PWPSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// year char 1
DataItem TS0PWPY1 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year char 2
DataItem TS0PWPY2 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0PWPYR char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// year
DataItem TS0PWPYY char(2)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Selection count field
DataItem TS0PWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem TS0PWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SO number
DataItem TS0PWSOI bin(18,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch1
DataItem TS0PWSW1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch2
DataItem TS0PWSW2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch3
DataItem TS0PWSW3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working storage map switch
DataItem TS0PWSWM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem TS0PWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Transfer to ts02 ok flag
DataItem TS0PWTOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current temporary storage page
DataItem TS0PWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// working century
DataItem TS0PWWCC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working day
DataItem TS0PWWDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working date ccyymmdd
DataItem TS0PWWDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working month
DataItem TS0PWWMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working year
DataItem TS0PWWYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

