package sy07;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SY07 ****
// This application will add or change a row in the size-weight
// table. When adding a row, weights may be cloned from an
// existing style-dimension having the save size-scale code.
// a change is determined by comparing SYGREC to SYHREC.
// 
// ************************************************************
// MAINTENANCE:
// 
// REVISION
// NUMBER     WHO      DATE       DESCRIPTION OF CHANGE
// ------    -------  --------    -----------------------------
//  01       MBUHIT   08-17-87    CREATED APPLICATION.
//  02       MBUHIT   11-24-87    add processing for styles
//                                having multiple colors.
//  03       mbuhit   03-03-88    add fast path logic.
// P0104     MHALST   03-28-89    Remove use of XTVCD.
//           VCowan   04-17-89    added XSSEGTR logic.
// -spl-     jwood    04-17-89    added noncsp option logic
// P110      MHALST   05-25-89    add inquiry only code
//           MHALST   11-13-89    DB2 changes and add SYZTBL
//           MHALST   10-08-90    DB2 changes and SYAREC
//           MHALST   02-11-91    DB2 changes
//           MHALST   02-19-91    Correct update of ZZCHNGDT
//           MHALST   10-10-91    DB2 changes to SYGREC.
//                                Change SYHREC to SY07W02.
// PF186     MHALST   07-09-92    Cole Haan Changes.
//           MHALST   10-14-94    Expand screen sizewt field
// ************************************************************
// 
// 
// IO MODULES    TABLE VIEW NAME
// ----------    ---------------
//   IO0040      DPROD.VSCALE01
//   IO0120      DPROD.VSTYLE01
//   IO1810      DPICK.VPKSTY01
//   IO0130      DPROD.VCOLOR01
//   IO1690      DPROD.VSIZWT01
//   IO0140      DPROD.VSIZE001
//   IO0530      DPROD.VSYAUD01
// 
// 
// *********************
Program SY07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PKNREC PKNREC; // record
  SQLCA SQLCA; // record
  SY07W01 SY07W01; // record
  SY07W02 SY07W02; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  SYAREC SYAREC; // record
  SYGREC SYGREC; // record
  SYWREC SYWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SYZTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XBCTBL {deleteAfterUse = yes}; // table
  use SY07M.SY07M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SY07001: SY07001();


    goto SY07005;

    SY07005: SY07005();


    if (converseVar.eventKey is pa2)
      goto SY07001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY07005;
      else
        if (converseVar.eventKey is pf12
         || converseVar.eventKey is pf13
         || converseVar.eventKey is enter)
          goto SY07010;
        else
          converseLib.validationFailed(19); /* invalid pf key*/
          goto SY07005;
        end
      end
    end
    SY07010: SY07010();
    if (converseVar.validationMsgNum > 0
     && SYWREC.SYWMSGFL == "N")
      goto SY07005;
    else
      if (converseVar.eventKey is pf12
       || converseVar.eventKey is pf13
       || converseVar.eventKey is enter)
        goto SY07015;
      end
    end
    SY07015: SY07015();


    if (converseVar.eventKey is pa2)
      goto SY07001;
    else
      if (SY07W01.SY07WKCF == "Y")
        SY07W01.SY07WKCF = "N";
        goto SY07010;
      else
        if (converseVar.validationMsgNum > 0)
          goto SY07015;
        else
          if (converseVar.eventKey is pf12
           || converseVar.eventKey is pf13
           || converseVar.eventKey is enter)
            goto SY07015;
          else
            converseLib.validationFailed(19); /* invalid pf key*/
            goto SY07015;
          end
        end
      end
    end
  end // end main
end // end SY07

// initiate screen
Function SY07001()


       /* *****************************************/
       /* * 1. init. application.                **/
       /* * 2. set all rec & maps to empty       **/
       /* *    and clear.                        **/
       /* * 3. if the commarea.xgpcd is diff.    **/
       /* *    than the sywrec.xgpcd use the     **/
       /* *    sywrec.xgpcd because the user     **/
       /* *    must have transfered into this    **/
       /* *    application with the sywrec.xgpcd **/
       /* * 4. check for inquiry only            **/
       /* * 5. validate the gpc code.            **/
       /* *                                      **/
       /* *****************************************/

  XSENTRY(); /* security check*/

  XSSEGTR(); /* set segemented transaction id*/
  set SYWREC empty; /* sy system work*/
  set SY07W01 empty; /* program work*/
  set SY1REC empty; /* style table*/
  set SY2REC empty; /* color table*/
  set SY3REC empty; /* size table*/
  set SYGREC empty; /* size-weight table*/
  set SY07W02 empty; /* size-weight table save image*/
  set SYAREC empty; /* audit table*/
  set TA1REC empty; /* date work*/
  set TA2REC empty; /* error work*/
  set SY07M001 initial; /* map*/

  SY07W01.SY07WKCF = "N";

  SYWREC.SYWMSGFL = "N";
  SYWREC.SYWTRANF = COMMAREA.CAUSERA;
  SY07M001.XGPCD = COMMAREA.XGPCD;

  SY07M001.SY07MREV = 2;

  if (COMMAREA.CAFROMAP == "SY0I") /* inquiry sub-menu appl.*/
    SY07W01.SY07WINQ = "Y"; /* so we're in inquiry mode*/
    SY07M001.SY07MF13 = " "; /* and no pf13*/
    SY07M001.SY07M-HEAD = "INQUIRY";
  else
    if (COMMAREA.CAADDFL == "Y" /* add flag is yes*/
     || COMMAREA.CACHGFL == "Y") /* change flag is yes*/
      SY07W01.SY07WINQ = "N"; /* user can change*/
      SY07M001.SY07M-HEAD = "MAINTENANCE";
    else
      SY07W01.SY07WINQ = "Y"; /* user is inquiry only*/
      SY07M001.SY07MF13 = " "; /* and no pf13*/
      SY07M001.SY07M-HEAD = "INQUIRY";
    end
  end

  SY07SAA(); /* validate gpc code*/

  SYWREC.SYWMSGFL = "N";
  SY07M001.XDMCD = "00";
  SY07M001.SY07M-R-XDMCD = "00";


end // end SY07001

// accept input key data
Function SY07005()

       /* ***************************************/
       /* *  1. display screen sy07m001 and    **/
       /* *  let user enter xgpcd, style number**/
       /* *  and dimension code.               **/
       /* *                                    **/
       /* *  2. the user may enter an optional **/
       /* *  'duplicate from' style number     **/
       /* *  and dimension code.               **/
       /* *                                    **/
       /* *                                    **/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/


  SY07M001.SY07MPRO = "SY07005";
  SY07M001.SY07MDAT = VGVar.currentShortGregorianDate;

  if (SY07W01.SY07WINQ == "Y") /* inquiry only*/
    SY07100(); /* so protect screen*/
  end

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    /* next sentence*/
  else
    set SY07M001.SY1STNBR cursor;
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY07M001 ;
   /* ***********************************************************/

  SYWREC.SYWMSGFL = "N";


       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY07SBC();


end // end SY07005

// edit input key data
Function SY07010()

       /* ***************************************/
       /* *  1. edit input key fields:         **/
       /* *  xgpcd, style number, dimension,   **/
       /* *  and determine of this is an add   **/
       /* *  or a change.                      **/
       /* *                                    **/
       /* *  2. if this is a change, and       **/
       /* *     duplicate-from style number    **/
       /* *     has been entered, edit         **/
       /* *     dup-from style and dimension.  **/
       /* *                                    **/
       /* *  3. get style name, size scale,    **/
       /* *     sizes, and size descriptions.  **/
       /* *                                    **/
       /* ***************************************/


       /* ***************************************/
       /* *  set fields to normal, initialize  **/
       /* *  size-descriptions and weights     **/
       /* ***************************************/

  SY07SBD();


       /* ***************************************/
       /* *  validate screen fields            **/
       /* ***************************************/

  SY07SBB();

       /* ***************************************/
       /* *  validate  gpc codes               **/
       /* ***************************************/

  SY07SBE();

       /* ***************************************/
       /* *  get existing style & scale rows   **/
       /* ***************************************/

  if (SY07M001.XBCCD == " ") /* No brand, use DPROD*/
    SY07SBF();
  else /* Brand entered, use DPICK*/
    SY07SBV();
  end

       /* ***************************************/
       /* *  get existing size-weight row      **/
       /* ***************************************/

  SY07SBG();

  if (SY07W01.SY07WINQ == "Y" /* in inquiry mode*/
   && converseVar.validationMsgNum != 0) /* and errors*/
    exit stack; /* so exit*/
  end

       /* ***************************************/
       /* *  get existing color and size rows  **/
       /* ***************************************/

  if (SY07M001.XBCCD == " ") /* not Cole Haan*/
    SY07SBP(); /* use dprod data base*/
  else
    SY07SDA(); /* use picking data base*/
  end


end // end SY07010

// update size weight table
Function SY07015()

  SY07M001.SY07MPRO = "SY07015";
  SY07M001.SY07MDAT = VGVar.currentShortGregorianDate;

  if (SY07W01.SY07WINQ == "Y") /* inquiry user*/
    SY07100(); /* protect screen*/
  else
    if (converseVar.validationMsgNum == 0) /* no errors, need to set*/
      SYWREC.SYWINDEX = 1; /* cursor on first size*/
      while (SYWREC.SYWINDEX <= 40)
        if (SY07W01.SY07WSIZ[SYWINDEX] != " ")
          set SY07M001.SYGSZWT[SYWINDEX] cursor;
          SYWREC.SYWINDEX = 41;
        else
          SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
        end
      end
    end
  end

  converseVar.segmentedMode = 1;

  converse SY07M001 ;

       /* ***************************************/
       /* *  check for database key change.    **/
       /* *  edit input size-weight fields.    **/
       /* *  update size-weight table.         **/
       /* ***************************************/


  SYWREC.SYWMSGFL = "N";
  SY07M001.SY07MMSG = " ";

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY07SCB();


       /* ***************************************/
       /* *  check for database key change     **/
       /* *  (gpc/style/dimension)             **/
       /* ***************************************/

  SY07SCJ();


       /* ***************************************/
       /* * if update was requested via pf13   **/
       /* * update size weight table.          **/
       /* ***************************************/

  if (converseVar.eventKey is pf12
   || converseVar.validationMsgNum > 0)
    exit stack;
  else
    if (converseVar.eventKey is pf13
     && SY07W01.SY07WINQ == "N") /* not update user*/
      SY07SCC(); /* update size-weight table*/
    end
  end


end // end SY07015

// Set fields protected for inq.
Function SY07100()

   /* This process will set all non-key fields on the map*/
   /* protected.*/

  set SY07M001.SY07M-R-STNBR skip;
  set SY07M001.SY07M-R-CLRID skip;
  set SY07M001.SY07M-R-XDMCD skip;
  SYWREC.SYWINDEX = 1;
  while (SYWREC.SYWINDEX <= 40)
    set SY07M001.SYGSZWT[SYWINDEX] skip;
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end

end // end SY07100

// validate gpc code
Function SY07SAA()


       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY07M001.XGPCD == "  ")
    converseLib.validationFailed(102); /* please enter gpc*/
    set SY07M001.XGPCD cursor, bold;
    return;
  else
    if (SY07M001.XGPCD == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY07M001.XGPCD cursor, bold;
      SY07M001.XGPABRV = "INVAL";
      return;
    end
  end

  if (SY07M001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY07M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(65); /* status code is inactive*/
      set SY07M001.XGPCD cursor, bold;
      SY07M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  else
    set SY07M001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY07M001.XGPABRV = "INVAL";
    return;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/


  if (SY07W01.SY07WINQ == "Y") /* user is inquiry only*/
    return; /* can look at any gpc*/
  end


  if (SY07M001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY07M001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY07M001.XGPABRV = "INVAL";
    exit stack;
  else
    if (SY07M001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY07M001.XGPCD cursor, bold;
      SY07M001.XGPABRV = "INVAL";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end


end // end SY07SAA

// validate screen entered fields
Function SY07SBB()


  if (converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    return;
  end

  if (SY07M001.XBCCD == " ")
    SY07M001.XBCDESC = " ";
  else
    if (SY07M001.XBCCD == "08") /* Cole Haan*/
      SY07M001.XBCDESC = "COLE HAAN";
    else
      converseLib.validationFailed(3);
      set SY07M001.XBCCD cursor, bold;
      exit stack;
    end
  end

  if (SY07M001.SY1STNBR == "      ")
    converseLib.validationFailed(40);
    set SY07M001.SY1STNBR cursor, bold;
    exit stack;
  else
    SY07W01.SY07WST1 = SY07M001.SY1STNBR;
  end

  SY07W01.SY07WCL1 = SY07M001.SY2CLRID;

  if (SY07M001.XDMCD == "  ")
    converseLib.validationFailed(40);
    set SY07M001.XDMCD cursor, bold;
    exit stack;
  else
    SY07W01.SY07WDM1 = SY07M001.XDMCD;
  end

  if (SY07M001.XGPCD == "  ")
    converseLib.validationFailed(40);
    set SY07M001.XGPCD cursor, bold;
  else
    SY07W01.XGPCD = SY07M001.XGPCD;
  end

  SY07W01.SY07WST2 = SY07M001.SY07M-R-STNBR;
  SY07W01.SY07WCL2 = SY07M001.SY07M-R-CLRID;
  SY07W01.SY07WDM2 = SY07M001.SY07M-R-XDMCD;



end // end SY07SBB

// check pf keys & transfer
Function SY07SBC()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as necessary.     **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY07M001.SY07MMSG = COMMAREA.CAMSG;
      set SY07M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY07SBM(); /* transfer to sy0m application*/
        SY07M001.SY07MMSG = COMMAREA.CAMSG;
        set SY07M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY07M001.SY07MMSG = COMMAREA.CAMSG;
          set SY07M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is enter)
            if (SY07M001.CATOAP != " ")
              move SY07M001 to COMMAREA withV60Compat;
              XSEXIT();
            else
              if (SY07M001.CAITEM != " ")
                move SY07M001 to COMMAREA withV60Compat;
                XSEXIT();
              else
                return;
                if (converseVar.eventKey is pf12
                 || converseVar.eventKey is pf13)
                  return;
                else
                  exit stack;
                end
              end
            end
          end
        end
      end
    end
  end


end // end SY07SBC

// set all entry fields to normal
Function SY07SBD()

       /* ***************************************/
       /* * set all entry fields to normal     **/
       /* ***************************************/

  set SY07M001.SY1STNBR cursor, normal;
   /* SET SY07M001.SY2CLRID NORMAL;*/
  set SY07M001.XDMCD normal;
  set SY07M001.SY07M-R-STNBR normal;
   /* SET SY07M001.SY07M-R-CLRID NORMAL;*/
  set SY07M001.SY07M-R-XDMCD normal;
  set SY07M001.XGPCD normal;
  set SY07M001.XBCCD normal;

  SYWREC.SYWINDEX = 40;

  while (SYWREC.SYWINDEX > 0)
    set SY07M001.SY4IDDSC[SYWINDEX] protect;
    set SY07M001.SYGSZWT[SYWINDEX] normal;
    SY07M001.SY4IDDSC[SYWINDEX] = "     "; /* blank size description*/
    SY07M001.SYGSZWT[SYWINDEX] = 0; /* ZERO SIZE WEIGHTS*/
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end


end // end SY07SBD

// validate gpc code
Function SY07SBE()


       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY07M001.XGPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY07M001.XGPCD cursor, bold;
    SY07M001.XGPABRV = "INVAL";
    return;
  end

  if (SY07M001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY07M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(65); /* status code is inactive*/
      set SY07M001.XGPCD cursor, bold;
      SY07M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.SYWMSGFL = "Y";
    end
  else
    set SY07M001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY07M001.XGPABRV = "INVAL";
    exit stack;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/

  if (SY07W01.SY07WINQ == "Y") /* in inquiry mode*/
    return; /* inquiry ok for any gpc*/
  end


  if (SY07M001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY07M001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY07M001.XGPABRV = "INVAL";
    exit stack;
  else
    if (SY07M001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY07M001.XGPCD cursor, bold;
      SY07M001.XGPABRV = "INVAL";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end




end // end SY07SBE

// retrieve style row data
Function SY07SBF()


       /* ******************************************/
       /* *     GET  STYLE DATA                   **/
       /* *                                       **/
       /* ******************************************/

  set SY1REC empty;
  set SQLCA empty;

  SY1REC.SY1STNBR = SY07M001.SY1STNBR;
  SY1REC.XGPCD = SY07M001.XGPCD;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY07M001.SY1STYNM = SY1REC.SY1STYNM;
    SY07M001.SY4SZSCL = SY1REC.SY4SZSCL;
    SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;
    SYWREC.XGPCD = SY1REC.XGPCD;
    SY07SBI(); /* get size scale descriptions*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(101); /* database in use - try again later*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(5); /* style record does not exists*/
        set SY07M001.SY1STNBR cursor, bold;
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY07   ";
        TA1REC.TA1LOCAT[1] = "S        ";
        TA1REC.TA1LOCAT[2] = "SY07SBF  ";
        TA1REC.TA1LOCAT[3] = "IO0120   ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY07M001";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSTYLE01";
        TA1TBLKE = SY1REC.SY1KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(20); /* style table error....*/
        set SY07M001.SY1STNBR cursor, bold;
        exit stack;
      end
    end
  end


end // end SY07SBF

// determine if add or chg trans
Function SY07SBG()


       /* ******************************************/
       /* *  get  size-weight table record to     **/
       /* *  determine if add or chg transaction. **/
       /* ******************************************/


  set SQLCA empty;
  set SYGREC empty;
  set SY07W02 empty;

  SYGREC.XGPCD = SY07M001.XGPCD;
  SYGREC.SY1STNBR = SY07M001.SY1STNBR;
  SYGREC.SY2CLRID = SY07M001.SY2CLRID;
  SYGREC.XDMCD = SY07M001.XDMCD;

  call "IO1690" ("S ", SQLCA, SYGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SYGREC to SY07M001 withV60Compat;
    SY07W02.SYGDATA = SYGREC.SYGDATA;
    SYWREC.ZZZCHGCT = SYGREC.ZZZCHGCT; /* save change counter*/
    SYAREC.SYAUDTYP = "C"; /* found = size-weight change trans*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (SY07W01.SY07WINQ == "Y") /* inquiry*/
        converseLib.validationFailed(145); /* no size weights for style*/
      else
        SYAREC.SYAUDTYP = "A"; /* not found,  add trans*/
      end
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(101); /* database in use - try again later*/
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY07   ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "SY07SBG ";
        TA1REC.TA1LOCAT[3] = "IO1690  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY07M001";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSIZWT01";
        TA1TBLKE = SYGREC.SYGKEY;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(99); /* size weight table error*/
        exit stack;
      end
    end
  end


end // end SY07SBG

// get corresponding size row
Function SY07SBH()


       /* ********************************************/
       /* *   retrieve size record                  **/
       /* ********************************************/


  set SY3REC empty;
  set SQLCA empty;

  SY3REC.XGPCD = SY07M001.XGPCD;
  SY3REC.SY1STNBR = SY07M001.SY1STNBR;
  SY3REC.SY2CLRID = SY2REC.SY2CLRID;
  SY3REC.XDMCD = SY07M001.XDMCD;

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY07SBW(); /* turn on valid-size flags*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(8); /* size record does not exists*/
      set SY07M001.SY1STNBR cursor, bold;
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        converseLib.validationFailed(101); /* database in use - try again later*/
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY07   ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "SY07SBH ";
        TA1REC.TA1LOCAT[3] = "IO0140  ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY07M001";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSIZE001";
        TA1TBLKE = SY3REC.SY3KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(22); /* size table error....*/
        set SY07M001.SY1STNBR cursor, bold;
        exit stack;
      end
    end
  end


end // end SY07SBH

// get size descriptions
Function SY07SBI()

       /* ******************************************/
       /* * VERIFY SIZE SCALE CODE AND            **/
       /* * GET THE SIZE SCALE DESC.              **/
       /* ******************************************/

  set SQLCA empty;

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SY4REC to SY07M001 withV60Compat;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(101); /* database in use - try again later*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY07   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY07SBI  ";
      TA1REC.TA1LOCAT[3] = "IO0040   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY07M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSCALE01";
      TA1TBLKE = SY4REC.SY4SZSCL;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(53); /* size scale record error*/
      set SY07M001.SY1STNBR cursor, bold;
      exit stack;
    end
  end


end // end SY07SBI

// transfer to to sy0n menu
Function SY07SBM()

       /* ***************************************/
       /* * transfer to product sub menu sy0n. **/
       /* ***************************************/

  if (COMMAREA.CAFROMAP == "SY0I")
    COMMAREA.CATOAP = "SY0I";
  else
    COMMAREA.CATOAP = "SY0N";
  end
  XSEXIT();


end // end SY07SBM

// retrieve dimension desc.
Function SY07SBN()


       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY07M001.XDMCD == " ")
    return;
  else
    /* next sentence*/
  end

  if (SY07M001.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY07M001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    else
      SY07M001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      set SY07M001.XDMCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    set SY07M001.XDMCD cursor, bold;
    SY07M001.XDMDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY07SBN

// select color row set
Function SY07SBP()


       /* ******************************************/
       /* *  select color row set.                **/
       /* ******************************************/


  set SQLCA empty;
  set SY2REC empty;

  SY07M001.XDMDESC = " "; /* initialize map dimension desc.*/
  SY07W01.SY07WSTB = " "; /* initialize valid-sizes table*/

  SY2REC.XGPCD = SY07M001.XGPCD;
  SY2REC.SY1STNBR = SY07M001.SY1STNBR;

  call "IO0130" ("SS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0
     && converseVar.validationMsgNum == 0)
      SY07SBT(); /* select the next size row*/
    end
    SY07SBU(); /* close the selected set*/
    if (SY07M001.XDMDESC == " ") /* dimension not found*/
      converseLib.validationFailed(98); /* style/dim record does not exist*/
      set SY07M001.SY1STNBR cursor, bold;
      set SY07M001.XDMCD bold;
      exit stack;
    else
      SY07SBR(); /* darken and autoskip invalid sizes*/
      SY07SBQ(); /* validate 'dupe-from' style/dim*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(101); /* database in use - try again later*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY07   ";
      TA1REC.TA1LOCAT[1] = "SS      ";
      TA1REC.TA1LOCAT[2] = "SY07SBP ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY07M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error*/
      exit stack;
    end
  end


end // end SY07SBP

// validate dupe-from style/dim
Function SY07SBQ()


       /* ******************************************/
       /* *  get  size-weight table record        **/
       /* *  to verify duplicate-from style/dim.  **/
       /* ******************************************/


  set SQLCA empty;
  set SYGREC empty;

  if (SY07M001.SY07M-R-STNBR == "      ")
    return;
  else
    SYGREC.XGPCD = SY07M001.XGPCD;
    SYGREC.SY1STNBR = SY07M001.SY07M-R-STNBR;
    SYGREC.SY2CLRID = SY07M001.SY07M-R-CLRID;
    SYGREC.XDMCD = SY07M001.SY07M-R-XDMCD;

    call "IO1690" ("S ", SQLCA, SYGREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      move SYGREC to SY07M001 withV60Compat;
      SY07M001.SY1STNBR = SY07W01.SY07WST1;
                                   /* restore overlaid key*/
      SY07M001.SY2CLRID = SY07W01.SY07WCL1;
      SY07M001.XDMCD = SY07W01.SY07WDM1; /* restore overlaid key*/
      SY07SBS(); /* validate duplicate-from size-scale*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(103); /* dup-from style-dim has no weights*/
        set SY07M001.SY07M-R-STNBR cursor, bold;
        set SY07M001.SY07M-R-CLRID bold;
        set SY07M001.SY07M-R-XDMCD bold;
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          converseLib.validationFailed(101); /* database in use - try again later*/
          exit stack;
        else
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SY07   ";
          TA1REC.TA1LOCAT[1] = "S       ";
          TA1REC.TA1LOCAT[2] = "SY07SBQ ";
          TA1REC.TA1LOCAT[3] = "IO1690  ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "SY07M001";
          TA1REC.TA1DBASE = "DPROD.";
          TA1REC.TA1TBLVU = "VSIZWT01";
          TA1TBLKE = SYGREC.SYGKEY;
          move SQLCA to ERRSQLCA withV60Compat;
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          converseLib.validationFailed(99); /* size weight table error*/
          exit stack;
        end
      end
    end
  end


end // end SY07SBQ

// darken n/a size desc & weights
Function SY07SBR()


       /* *************************************/
       /* *  darken and autoskip all         **/
       /* *  size-weights not applicable     **/
       /* *  for the initial style-dimension **/
       /* *************************************/

  SYWREC.SYWINDEX = 40;

  while (SYWINDEX > 0)
    if (SY07W01.SY07WSIZ[SYWINDEX] == " ") /* fringe gut flag*/
      set SY07M001.SY4IDDSC[SYWINDEX] skip, invisible; /* size description*/
      set SY07M001.SYGSZWT[SYWINDEX] skip, invisible; /* size weight*/
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end


end // end SY07SBR

// validate dupe-from size scale
Function SY07SBS()


       /* ******************************************/
       /* * get style data for 'dupe-from' style, **/
       /* * verify size-scale matches initial     **/
       /* * style.                                **/
       /* ******************************************/

  set SQLCA empty;

  if (SY07M001.XBCCD == " ")
    set SY1REC empty;
    SY1REC.XGPCD = SY07M001.XGPCD;
    SY1REC.SY1STNBR = SY07M001.SY07M-R-STNBR;
    call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  else
    set PKNREC empty;
    PKNREC.XGPCD = SY07M001.XGPCD;
    PKNREC.SY1STNBR = SY07M001.SY07M-R-STNBR;
    if (SY07M001.SY07M-R-CLRID == " ")
      PKNREC.SY2CLRID = "00 ";
    else
      PKNREC.SY2CLRID = SY07M001.SY07M-R-CLRID;
    end
    PKNREC.XDMCD = SY07M001.SY07M-R-XDMCD;
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(101); /* database in use - try again later*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(5); /* style record does not exists*/
        set SY07M001.SY07M-R-STNBR cursor, bold;
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY07   ";
        TA1REC.TA1LOCAT[1] = "S        ";
        TA1REC.TA1LOCAT[2] = "SY07SBS  ";
        TA1REC.TA1LOCAT[3] = "IO0120   ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY07M001";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSTYLE01";
        TA1TBLKE = SY1REC.SY1KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(20); /* style table error....*/
        set SY07M001.SY07M-R-STNBR cursor, bold;
        exit stack;
      end
    end
  end


  if (SY07M001.XBCCD == " ")
    if (SY1REC.SY4SZSCL == SY07M001.SY4SZSCL)
      return;
    else
      converseLib.validationFailed(100); /* size scale does not match*/
      set SY07M001.SY07M-R-STNBR cursor, bold;
      return;
    end
  else
    if (PKNREC.SY4SZSCL == SY07M001.SY4SZSCL)
      return;
    else
      converseLib.validationFailed(100); /* size scale does not match*/
      set SY07M001.SY07M-R-STNBR cursor, bold;
      return;
    end
  end



end // end SY07SBS

// select the next color row
Function SY07SBT()


       /* ******************************************/
       /* *  select the next color row.           **/
       /* ******************************************/


  call "IO0130" ("SN", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SY07M001.XDMCD == SY2REC.XDMCD) /* matching dimension code*/
      SY07SBH(); /* get corresponding size row*/
      SY07SBN(); /* get dimension description*/
    end
    return;

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY07   ";
      TA1REC.TA1LOCAT[1] = "SN      ";
      TA1REC.TA1LOCAT[2] = "SY07SBT ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY07M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      SY07SBU(); /* close selected set*/
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error*/
      set SY07M001.SY1STNBR cursor, bold;
      set SY07M001.XDMCD cursor, bold;
      return;
    end
  end


end // end SY07SBT

// close color table set
Function SY07SBU()


       /* ******************************************/
       /* *  close color table set                **/
       /* ******************************************/

  set SQLCA empty;

  call "IO0130" ("CS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY07   ";
    TA1REC.TA1LOCAT[1] = "CS      ";
    TA1REC.TA1LOCAT[2] = "SY07SBU ";
    TA1REC.TA1LOCAT[3] = "IO0130  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY07M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1TBLKE = SY2REC.SY2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* color table error*/
    set SY07M001.SY1STNBR cursor, bold;
    set SY07M001.XDMCD cursor, bold;
    exit stack;
  end


end // end SY07SBU

// retrieve style row data PKSTY
Function SY07SBV()


       /* ******************************************/
       /* *     GET  STYLE DATA                   **/
       /* *          (From PKSTY Table)           **/
       /* ******************************************/

  set PKNREC empty;
  set SQLCA empty;

  PKNREC.SY1STNBR = SY07M001.SY1STNBR;
  PKNREC.XGPCD = SY07M001.XGPCD;

  call "IO1810" ("S1", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO1810" ("N1", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    SY07M001.SY1STYNM = PKNREC.SY1STYNM;
    SY07M001.SY4SZSCL = PKNREC.SY4SZSCL;
    SY4REC.SY4SZSCL = PKNREC.SY4SZSCL;
    SYWREC.XGPCD = PKNREC.XGPCD;
    SY07SBI(); /* get size scale descriptions*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(101); /* database in use - try again later*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(5); /* style record does not exists*/
        set SY07M001.SY1STNBR cursor, bold;
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY07   ";
        TA1REC.TA1LOCAT[1] = "S        ";
        TA1REC.TA1LOCAT[2] = "SY07SBG  ";
        TA1REC.TA1LOCAT[3] = "IO1810   ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY07M001";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VPKSTY01";
        TA1TBLKE = PKNREC.PKNKEY;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(20); /* style table error....*/
        set SY07M001.SY1STNBR cursor, bold;
        exit stack;
      end
    end
  end


end // end SY07SBV

// turn on all valid-size flags
Function SY07SBW()


       /* *************************************/
       /* *  turn on all valid-size flags    **/
       /* *  for the current style/dimension.**/
       /* *************************************/

  SYWREC.SYWINDEX = 40;

  while (SYWINDEX > 0)
    if (SY3REC.SY3FRGUT[SYWINDEX] != " ") /* fringe/gut flag*/
      SY07W01.SY07WSIZ[SYWINDEX] = "Y"; /* valid-size flag*/
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end


end // end SY07SBW

// check pf keys
Function SY07SCB()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as necessary.     **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY07M001.SY07MMSG = COMMAREA.CAMSG;
      set SY07M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY07SBM(); /* transfer to sy0m application*/
        SY07M001.SY07MMSG = COMMAREA.CAMSG;
        set SY07M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY07M001.SY07MMSG = COMMAREA.CAMSG;
          set SY07M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is enter)
            if (SY07M001.CATOAP != " ")
              move SY07M001 to COMMAREA withV60Compat;
              XSEXIT();
            else
              return;
              if (converseVar.eventKey is pf12
               || converseVar.eventKey is pf13)
                return;
              else
                exit stack;
              end
            end
          end
        end
      end
    end
  end


end // end SY07SCB

// check for screen changes
Function SY07SCC()


       /* ***************************************/
       /* *  check if changes made. if no      **/
       /* *  changes and no duplicate-from key,**/
       /* *  return, else update size-weights. **/
       /* ***************************************/

  move SY07M001 to SYGREC withV60Compat;

  if (SYGREC.SYGDATA == SY07W02.SYGDATA)
    converseLib.validationFailed(57); /* no changes were made*/
    exit stack;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  SY07SCE(); /* get todays date*/

       /* ******************************************/
       /* *   set up zzz family record for adds   **/
       /* *   zzzchgct is not updated because     **/
       /* *   the io module will take care of it. **/
       /* ******************************************/

  SYWREC.ZZZSDT = TA2REC.TA2GRGGN;
  SYWREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  SYWREC.ZZZCHGTM = TA2REC.TA2TIMHM;

       /* ******************************************/
       /* *   update record in size weight table  **/
       /* ******************************************/

  if (SYAREC.SYAUDTYP == "A")
    SY07SCF(); /* add transaction*/
  else
    SY07SCH(); /* change transaction*/
  end


       /* ******************************************/
       /* *   commit size weight records to db2   **/
       /* ******************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  converseLib.validationFailed(11);
  SYWREC.SYWMSGFL = "Y";

end // end SY07SCC

// cobol date routine
Function SY07SCE()
   /* GET SY02SAB*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0222)
    return;
  else
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY07SCE";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC) {isExternal = yes};
      converseLib.validationFailed(30); /* invalid date entered*/
      exit stack;
    else
      /* next sentence*/
    end
  end


end // end SY07SCE

// add to size weight table
Function SY07SCF()


       /* ******************************************/
       /* *    add to size weight table.          **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       ALL TABLES ARE  ROLLED BACK.    **/
       /* *                                       **/
       /* ******************************************/



  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;

  call "IO1690" ("S ", SQLCA, SYGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* not found is valid for an add*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* invalid - just added by another user*/
      SY07W01.SY07WKCF = "Y"; /* force branch to weights display rtn*/
      converseLib.validationFailed(104);
                                   /* data changed since displayed, reenter*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* database in use*/
        converseLib.validationFailed(101); /* database in use - try again later*/
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY07   ";
        TA1REC.TA1LOCAT[1] = "ADD      ";
        TA1REC.TA1LOCAT[2] = "SY07SCF  ";
        TA1REC.TA1LOCAT[3] = "IO1690   ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY07M001";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSIZWT01";
        TA1TBLKE = SYGREC.SYGKEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(99);
        exit stack;
      end
    end
  end


  set SQLCA empty;
  move SY07M001 to SYGREC withV60Compat;
  SYGREC.ZZZCHGTM = SYWREC.ZZZCHGTM;
  SYGREC.ZZZCHGDT = SYWREC.ZZZCHGDT;

  call "IO1690" ("A ", SQLCA, SYGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY07SCG(); /* write audit record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(101); /* database in use - try again later*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY07   ";
      TA1REC.TA1LOCAT[1] = "ADD      ";
      TA1REC.TA1LOCAT[2] = "SY07SCF  ";
      TA1REC.TA1LOCAT[3] = "IO1690   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY07M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSIZWT01";
      TA1TBLKE = SYGREC.SYGKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(99);
      set SY07M001.SY1STNBR cursor, bold;
      exit stack;
    end
  end

end // end SY07SCF

// write change size audit
Function SY07SCG()


       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR SIZE CHANGE. **/
       /* *                                       **/
       /* ******************************************/

  SY07W01.SYAUDTYP = SYAREC.SYAUDTYP;
  set SYAREC empty;
  SYAREC.SYAUDTYP = SY07W01.SYAUDTYP;

  set SQLCA empty;
  set ERRSQLCA empty;

  SYAREC.XXXTBLNM = "VSIZWT01";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY07   ";
    TA1REC.TA1LOCAT[1] = "SY07SCG  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSIZWT01 ";
    TA1REC.TA1MAP = "SY07M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SYGREC.XGPCD;
  SYAREC.SY1STNBR = SYGREC.SY1STNBR;
  SYAREC.SY2CLRID = SYGREC.SY2CLRID;
  SYAREC.XDMCD = SYGREC.XDMCD;
  SYAREC.ZZZSDT = SYWREC.ZZZSDT;
  SYAREC.ZZZSTM = SYWREC.ZZZCHGTM;
  SYAREC.SYABFR = SY07W02.SYGDATA;
  SYAREC.SYAAFT = SYGREC.SYGDATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SYWREC.SYWMSGFL = "Y";
                                   /* successful completion message value*/
    SYAREC.SYAUDTYP = "C"; /* to prevent two successive adds*/
    SY07W02.SYGDATA = SYGREC.SYGDATA; /* for checking weight changes*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(101); /* database in use - try again later*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY07   ";
      TA1REC.TA1LOCAT[1] = "ADD      ";
      TA1REC.TA1LOCAT[2] = "SY07SCG  ";
      TA1REC.TA1LOCAT[3] = "IO0530   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0B3001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSYAUD01";
      TA1TBLKE = SYAREC.SYAKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(44); /* audit table error....*/
      set SY07M001.SY1STNBR cursor, bold;
      exit stack;
    end
  end


end // end SY07SCG

// change size weight table
Function SY07SCH()


       /* ******************************************/
       /* *    change size weight table.          **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       ALL TABLES ARE  ROLLED BACK.    **/
       /* *                                       **/
       /* ******************************************/



  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;

  call "IO1690" ("S ", SQLCA, SYGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* must reread to store revision #*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* invalid - deleted during this execution*/
      converseLib.validationFailed(98);
                                   /* style-dimension record does not exist*/
      exit stack;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* database in use*/
        converseLib.validationFailed(101); /* database in use - try again later*/
        exit stack;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY07   ";
        TA1REC.TA1LOCAT[1] = "S        ";
        TA1REC.TA1LOCAT[2] = "SY07SCH  ";
        TA1REC.TA1LOCAT[3] = "IO1690   ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY07M001";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSIZWT01";
        TA1TBLKE = SYGREC.SYGKEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(99);
        exit stack;
      end
    end
  end



  if (SYGREC.ZZZCHGCT == SYWREC.ZZZCHGCT)
                                   /* do not allow intervening updates*/
      /* next sentence*/
  else
    SY07W01.SY07WKCF = "Y"; /* force redisplay of weights*/
    converseLib.validationFailed(104);
                                   /* data changed since displayed, reenter*/
    exit stack;
  end



  set SQLCA empty;
  move SY07M001 to SYGREC withV60Compat;
  SYGREC.ZZZCHGTM = SYWREC.ZZZCHGTM;
  SYGREC.ZZZCHGDT = SYWREC.ZZZCHGDT;

  call "IO1690" ("U ", SQLCA, SYGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY07SCG(); /* write audit record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(101); /* database in use - try again later*/
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY07   ";
      TA1REC.TA1LOCAT[1] = "UPDATE   ";
      TA1REC.TA1LOCAT[2] = "SY07SCH  ";
      TA1REC.TA1LOCAT[3] = "IO1690   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY07M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSIZWT01";
      TA1TBLKE = SYGREC.SYGKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(99);
      exit stack;
    end
  end

end // end SY07SCH

// check for database key changes
Function SY07SCJ()


       /* ***************************************/
       /* *  check both inital gpc-style-dim   **/
       /* *  AND DUPLICATE-FROM GPC-STYLE-DIM  **/
       /* *  for  changes, if changed, exit.   **/
       /* ***************************************/

  if (SY07M001.SY1STNBR == SY07W01.SY07WST1
   && SY07M001.SY2CLRID == SY07W01.SY07WCL1
   && SY07M001.XDMCD == SY07W01.SY07WDM1
   && SY07M001.SY07M-R-STNBR == SY07W01.SY07WST2
   && SY07M001.SY07M-R-CLRID == SY07W01.SY07WCL2
   && SY07M001.SY07M-R-XDMCD == SY07W01.SY07WDM2
   && SY07M001.XGPCD == SY07W01.XGPCD)
    return;
  else
    SY07W01.SY07WKCF = "Y";
    exit stack;
  end


end // end SY07SCJ

// select color row set (PKSTY)
Function SY07SDA()


       /* ******************************************/
       /* *  select color row set                 **/
       /* *   using PKSTY                         **/
       /* ******************************************/


  set SQLCA empty;

  SY07M001.XDMDESC = " "; /* initialize map dimension desc.*/
  SY07W01.SY07WSTB = " "; /* initialize valid-sizes table*/

   /* Note: Cursor opened in SY07SBV*/

  while (SQLCA.VAGen_SQLCODE == 0
   && converseVar.validationMsgNum == 0)
    SY07SDB(); /* select the next size row*/
  end
  SY07SDC(); /* close the selected set*/
  if (SY07M001.XDMDESC == " ") /* dimension not found*/
    converseLib.validationFailed(98); /* style/dim record does not exist*/
    set SY07M001.SY1STNBR cursor, bold;
    set SY07M001.XDMCD bold;
    exit stack;
  else
    SY07SBR(); /* darken and autoskip invalid sizes*/
    SY07SBQ(); /* validate 'dupe-from' style/dim*/
  end

end // end SY07SDA

// select next color (PKSTY)
Function SY07SDB()


       /* ******************************************/
       /* *  select the next color row            **/
       /* *   using PKSTY.                        **/
       /* ******************************************/

  if (SY07M001.XDMCD == PKNREC.XDMCD) /* matching dimension code*/
    move PKNREC to SY3REC withV60Compat; /* move data in vsize record*/
    SY07SBW(); /* load size buckets*/
    SY07SBN(); /* get dimension description*/
  end

  call "IO1810" ("N1", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY07   ";
    TA1REC.TA1LOCAT[1] = "N1      ";
    TA1REC.TA1LOCAT[2] = "SY07SDB ";
    TA1REC.TA1LOCAT[3] = "IO1810  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY07M001";
    TA1REC.TA1DBASE = "DPICK";
    TA1REC.TA1TBLVU = "VPKSTY01";
    TA1TBLKE = PKNREC.PKNKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* color table error*/
    set SY07M001.SY1STNBR cursor, bold;
    set SY07M001.XDMCD cursor, bold;
    return;
  end


end // end SY07SDB

// close color table set
Function SY07SDC()


       /* ******************************************/
       /* *  close color table set (PKSTY)        **/
       /* ******************************************/

  set SQLCA empty;

  call "IO1810" ("C1", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY07   ";
    TA1REC.TA1LOCAT[1] = "C1      ";
    TA1REC.TA1LOCAT[2] = "SY07SDD ";
    TA1REC.TA1LOCAT[3] = "IO1810  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY07M001";
    TA1REC.TA1DBASE = "DPICK";
    TA1REC.TA1TBLVU = "VPKSTY01";
    TA1TBLKE = PKNREC.PKNKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* color table error*/
    set SY07M001.SY1STNBR cursor, bold;
    set SY07M001.XDMCD cursor, bold;
    exit stack;
  end


end // end SY07SDC

//*** RECORD=SY07W01 ****
// ;***********************************************************
// ;
// ;         work record for sy07: size weight maintenance
// ;
// ;***********************************************************
// ***********************
Record SY07W01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 SY07WINQ SY07WINQ ; 
  10 ZZZCHGCT ZZZCHGCT ; 
  10 SY07WST1 SY07WST1 ; 
  10 SY07WCL1 SY07WCL1 ; 
  10 SY07WDM1 SY07WDM1 ; 
  10 SY07WST2 SY07WST2 ; 
  10 SY07WCL2 SY07WCL2 ; 
  10 SY07WDM2 SY07WDM2 ; 
  10 XGPCD XGPCD ; 
  10 SY07WKCF SY07WKCF ; 
  10 SYAUDTYP SYAUDTYP ; 
  10 SY07WSTB SY07WSTB ; 
    15 SY07WSIZ SY07WSIZ [40] ; 
end // end SY07W01

//*** RECORD=SY07W02 ****
// DB2 Table:         DPROD.VSIZWT01
//      NOTE:         This is a working copy of SYGREC.
// 
// 
// ***********************
Record SY07W02 type basicRecord
  5 SYGDATA SYGDATA ; 
    10 SYGKEY SYGKEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XWHCD XWHCD ; 
    10 SYGSZWT SYGSZWT [40] ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end SY07W02

// inital color number
DataItem SY07WCL1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// duplicate-from color number
DataItem SY07WCL2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inital dimension
DataItem SY07WDM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// duplicate-from dimension
DataItem SY07WDM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry only (Y/N)
DataItem SY07WINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen key change flag
DataItem SY07WKCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size validation flag
DataItem SY07WSIZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inital style number
DataItem SY07WST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// duplicate-from style number
DataItem SY07WST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 40 size validation flags
DataItem SY07WSTB char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

