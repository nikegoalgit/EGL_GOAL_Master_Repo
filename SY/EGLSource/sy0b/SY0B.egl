package sy0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import mn.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import rd.common.*;
import sw.common.*;
import sy.common.*;
import sy08.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SY0B ****
// THIS APPLICATION WILL ADD A STYLE, COLOR, AND SIZES TO
// THE PRODUCT FILE. THE ACTUAL UPDATING OF THE TABLES WILL BE
// DONE IN THE LAST PROCESS IF ALL THE DATA ENTERED IS VALID.
// 
// 
// MISC. INFO.
//    1. ALL SCREEN EDITING IS DONE FROM THE BOTTOM TO THE
//       TOP OF THE SCREEN.
//    2. MOST MOVES ARE DONE AT THE GROUP LEVEL.
// 
// ************************************************************
// MAINTENANCE:
// 
// project
// NUMBER  WHO      WHEN     WHY
//  ____   ______  ________  __________________________________
//         JRICHA  05-12-86  CREATED APPLICATION.
//         hdenso  12-11-86  req 0298-add century/sy2sesny
//         mbuhit  05-19-87  sy0bsii-increased sy2rec size.
//         mbuhit  10-07-87  add product-category to color.
//         mbuhit  11-20-87  sy0bsii-increased sy2rec size.
//                           sy0bsid-initialize new fields.
//         mbuhit  11-25-87  add package flag to color.
//         mbuhit  01-30-87  add offering flag and dates.
//                           correct season-year logic.
//         mbuhit  03-18-88  sy0bsii-increased sy2rec size.
//                           Some fields names changed to
//                           correspond with new Sy2rec.
//         mbuhit  03-30-88  add overlay matl content flds.
//  p087   mbuhit  08-16-88  sy0b025-apparel backorder-flag
//                           restriction.
//  p047   mbuhit  09-26-88  apparel size add edits.
//                           sizes must translate to dec.
//  p017   mbuhit  01-13-89  gender/gender-age edit.
//  p018                     silhouet/body-typ edit.
//  p090                     phase iv style & color fields.
//  P091   mhalst  02-22-89  code changes for phase IV
//  P0104  mhalst  03-28-89  Remove use of XTVCD.
//         VCowan  04-14-89  added XSSEGTR logic.
//  -spl-  jwood   04-17-89  added noncsp opt to calls
//  P098   MHALST  04-24-89  Default units per case from XSUTBL
//  P????  MHALST  05-05-89  Add selective autoskip for screen
//                           fields based on GPC being used.
//         MHALST  05-16-89  DB2 Structure changes (SY2REC).
//         MHALST  06-01-89  Reopen Dec size scale for gpc 02
//  P109   MHALST  08-14-89  Add logic for UPC creation
//         MHALST  08-21-89  Correct logic for Verification of
//                           color id and cross check xdvcd.
//         MHALST  09-15-89  Add SY2PDCMO and default SY2FDSMO
//                           from SY2FOFBD if zero.
//         MHALST  10-12-89  Correct SY2FDSMO to be -1 month
//         MHALST  10-30-89  Zero fill XFCCD1 to 6 and open
//                           color codes for footwear GPC.
//         MHALST  11-13-89  Correct code for data base changes
//                           Add SYZTBL for audit info.
//         MHALST  12-18-89  Add edits for package flag
//         MHALST  12-28-89  Correct field defaulting
//         MHALST  02-05-90  Add collection code to M005
//         MHALST  04-02-90  Add brand, remove XTV
// P0135   MHALST  06-04-90  Changes to SYUREC
// P0143   MHALST  06-28-90  Check for Scheduler 99
//         MHALST  07-02-90  Change UPC flag default
//         MHALST  07-27-90  Change Edits for XCL codes
//         MHALST  10-04-90  DB2 Changes, Add new data fields
// P148    MHALST  11-06-90  Correct edits for Season/Year
//                           Also correct UPC assignment
//         MHALST  02-11-91  DB2 Changes, Move XWH codes
//         MHALST  02-18-91  Correct handling of blank color
//         MHALST  02-20-91  Correct date defaulting
//         MHALST  02-28-91  Correct Family code defaulting
// P160    MHALST  03-13-91  Add ability to dup. from style
//                           development data base
// P160    MHALST  04-16-91  Correct logic for size screen dup
//         MHALST  06-11-91  DB2 Changes, add midsole/outsole
//         MHALST  07-22-91  Add color ref to map M005
//         MHALST  08-16-91  Correct logic to dup from both
//                           style dev and product. Expand
//                           discription on size add screen.
//         MHALST  08-22-91  DB2 Changes, add default logic for
//                           old Dec size scale.
//         MHALST  08-30-91  Change dup check logic to all for
//                           them is 4 or 5 digit number used.
//         MHALST  09-09-91  Correct defaulting for prod dates
// PF157   MHALST  09-20-91  Edit sizes against blank sizes
//         MHALST  10-10-91  Remove units per case default from
//                           XSUTBL (DB2 table change).
//         MHALST  10-16-91  Use GPC 02 for UPC assignment for
//                           GPCs other than 02 & 03.
//         MHALST  11-12-91  Add VSYDVX01 table
//         MHALST  11-20-91  Correct bug when using dimension
//                           other than 00.
// PF176   MHALST  12-09-91  Allow Special transfer to SY01
//                           Also add previous key field
//         MHALST  01-17-92  Correct dup. for XML codes
//         MHALST  02-18-92  Add GPC 07 to Create UPCs Logic
//         MHALST  03-09-92  Remove old Product desc field
// PF183   MHALST  04-14-92  Add duty rate and Nbr of Airbags
//         MHALST  05-18-92  Add load of Special Feature based
//                           on type of airbag in style dev.
//         MHALST  06-09-92  DB2 Changes to XMLTBL
//         MHALST  07-13-92  Add cross check of scale to XGA
//         MHALST  07-17-92  Add XML codes from Style Dev.
//         MHALST  08-29-92  Enhanse handling of XFC codes for
//                           Footwear. Open XMC codes for
//                           Apparel.
//         MHALST  10-02-92  Change UPC flag setting for Apprl
//         MHALST  10-07-92  Add XPL to map M005 for Footwear
//         MHALST  10-12-92  DB changes, add Airbags & XDR
//         MHALST  02-11-93  Correct offer date defaults for
//                           Holiday.
//         MHALST  02-19-93  Correct UPC flag defaulting
//         MHALST  03-09-93  Correct Defaults for EAO
//         MHALST  03-22-93  Correct Defaults for EAO
//         MHALST  03-26-93  Correct defaulting of futures
//                           ending offer date for apparel
// SY128   MHALST  05-26-93  Add link to RY0C for Royalties
//         MHALST  08-12-93  Correct XDR validation.
//         MHALST  08-25-93  Correct Scheduler validation.
//         MHALST  10-20-93  Fix royalty and transfer function
//         MHALST  12-10-93  Add Tech Difclt of G
//         MHALST  03-10-94  Use NIL offer dates from XSN
// SY0211  MBUHIT  04-20-94  Add marketing region logic.
//         MHALST  02-20-95  Correct defaulting for size range
//         MHALST  03-15-95  Add Scale 29 defaulting
//         MHALST  05-05-95  Change defaulting in SY0BSED to
//                           use SY0BTST table.
// GP-P1   MHALST  05-11-95  Global Product phase 1; add
//                           VSTYXF01, VPRDXF01, VTRDRV01.
// GP-P1   MHALST  05-25-95  Global Product phase 1; add
//                           VPRDRG01.
// abend   BCOURT  06-08-95  Product Xref may already exist for
//                           a once active but now deleted
//                           color code.  Check first to see if
//                           VPRDXF01 already exists.
//         MHALST  07-25-95  Change futures ending offer date
//                           defaulting logic.
// abend   MHALST  09-06-95  Style Xref may already exist for
//                           a once active but now deleted
//                           style code.  Check first to see if
//                           VSTYXF01 already exists.
//         MHALST  10-02-95  Add call to MN0V for Region
//         MHALST  11-09-95  Add values to tech difclt ind
//         MHALST  11-13-95  Add VSYDPC02 & VSYDVX02
//         MHALST  04-25-96  Remove ref to XNDCD for EAO
//         MHALST  11-05-96  Change futr offer xdt calc
//         MHALST  12-16-96  Change tech difclt edit
//         MHALST  01-09-97  Change color var edit
//         MHALST  02-03-97  Data base changes to VSYDPC02
//         MHALST  03-24-97  Change SY1280 logic.
//         MHALST  06-30-97  Add tooling table support.
//         NGANGO  11-11-97  Y2K MODIFICATIONS.
//         Changed Map SY0B005 and SY0B008 to remove leading
//         zero suppression of some of the fields, W.S SY0BW01
//         to incorporate new variables for date comparison,
//         Stmt. Group/Process like SY0B026, SY0BSAH, SY0BSJB
//         SY0BSGF, SY0BSGG, SY0BSID, SY0BSJD, SY0BSGB, SY0BSGE
//         SY0BSJF.
//         MHALST  01-08-98  CORRECT DUP FUNCTIONS.
//         MHALST  05-06-98  CORRECT YYMM DATE EDITING.
//         MHALST  02-17-99  REMOVE SY08T01 TABLE.
//         MHALST  01-11-00  Spain compliance changes.
//         MHALST  01-25-00  Add XPSY010 for futr offer date
//         MHALST  02-22-00  Add XOG codes to set UPC flag
//         MHALST  03-01-00  Correct scale to XGA checking
//         MHALST  05-04-00  On style add, do not allow the
//                           style to exist in any other GPC.
//         MHALST  08-25-00  Allow gpc 02 to use xpr 99.
//         BPARAN  12-04-00  Protect 40th fringe when size
//                           scale code is '01' or '13'
//         MHALST  07-26-01  Change NIL offer date defaulting
//                           for GPC 03 products.
//         MHALST  09-27-01  GPC 02, at least one size xdv
//                           must equal the color xdv.
//         MHALST  11-20-01  GPC 02, use YSN to default prop &
//                           futr ending offer dates.
// MHALST 04-26-02 Validate style group on dev project to
//  style.
// DROBI2  04-02-03  Bypass UPC setup for XOG 'ZZ' .
// DROBI2  11-04-03  In SY0BS-VAL-XDR-6, replace XDRTBL with
//  SYRGTBL.
// MHALST 08-26-04 Add new force create option for SY1280.
//  Reove checking of brand
//                               and optional group (now done
//  in SY1280).
// MHALST  02-25-05  Correct UPC force assignment.
// MHALST  10-10-05  Relay#115730 Open material content
//  percentages for gpc02
// ************************************************************
// 
//   IO MODULES    TABLE
//   USED          VIEW NAME
//   ----------    --------------
//    IO0120       DPROD.VSTYLE01
//    IO0130       DPROD.VCOLOR01
//    VSYREG02     DPROD.VSYREG02
//    VPRDRG01     DPROD.VPRDRG01
//    IO0140       DPROD.VSIZE001
//    IO0040       DPROD.VSCALE01
//    VSTYXF01     DPROD.VSTYXF01
//    VPRDXF01     DPROD.VPRDXF01
//    VCTLID01     DPROD.VCTLID01
//    VTRDRV01     DPROD.VTRDRV01
//    IO0530       DPROD.VSYAUD01
//    IO0520       DPROD.VSYTAG01
//    IO6320       DPROD.VDTYRT01
//    IO4390       DPRODG.VSYDVL01
//    IO5710       DPRODG.VSYDPC01
//    IO0490       DPRODG.VSYDVX01
//    SY1280       DPROD.VSYUPC01 & DPROD.VNXUPC01
//    IO2640       DCORP.VSUMCD01
// c2cim    SSUNNA  PROTECT AND HIDE STYLE DEV CODE AND COLOR
//  ON SY0BM001 MAP
// 
// *********************
Program SY0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  MNVREC MNVREC; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  SWPREC SWPREC; // record
  SY0BW01 SY0BW01; // record
  SY0BW02 SY0BW02; // record
  SY0BW03 SY0BW03; // record
  SY0BW04 SY0BW04; // record
  SY0BWZZZ SY0BWZZZ; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  SY9REC SY9REC; // record
  SYAREC SYAREC; // record
  SYBREC SYBREC; // record
  SYFREC SYFREC; // record
  SYUREC SYUREC; // record
  SYWREC SYWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VCTLID01 VCTLID01; // record
  VDTYRT01 VDTYRT01; // record
  VPRDRG01 VPRDRG01; // record
  VPRDXF01 VPRDXF01; // record
  VSTYXF01 VSTYXF01; // record
  VSYDPC02 VSYDPC02; // record
  VSYDVL03 VSYDVL03; // record
  VSYDVX02 VSYDVX02; // record
  VSYREG02 VSYREG02; // record
  VTLCMP01 VTLCMP01; // record
  VTLINV01 VTLINV01; // record
  VTRDRV01 VTRDRV01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SYRGTBL {deleteAfterUse = yes}; // table
  use SYZTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XBCTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XGCTBL {deleteAfterUse = yes}; // table
  use XCWTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XFMTBL {deleteAfterUse = yes}; // table
  use XBTTBL {deleteAfterUse = yes}; // table
  use XSPTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use XRYTBL {deleteAfterUse = yes}; // table
  use XCNTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XQTTBL {deleteAfterUse = yes}; // table
  use XFCTBL {deleteAfterUse = yes}; // table
  use XMLTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XCLTBL {deleteAfterUse = yes}; // table
  use XOGTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use YCQTBL {deleteAfterUse = yes}; // table
  use SY0BTST {deleteAfterUse = yes}; // table
  use SY0BM.SY0BM001,  // forms
      SY0BM.SY0BM002, 
      SY0BM.SY0BM003, 
      SY0BM.SY0BM005, 
      SY0BM.SY0BM006, 
      SY0BM.SY0BM007, 
      SY0BM.SY0BM008, 
      SY0BM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SY0B001: SY0B001();

    if (SY0BW03.SYWPFOPT == "PF13B" /* Returning from transfer*/
     || SY0BW03.SYWPFOPT == "PF14B")
      goto SY0B010;
    else
      goto SY0B005;
    end

    SY0B005: SY0B005();

     /* ******************************************/
     /* *  FLOW STAGE FOR SY0B005               **/
     /* ******************************************/

    if (converseVar.eventKey is pa2)
      goto SY0B001;
    else
      if (converseVar.validationMsgNum > 0)
        goto SY0B005;
      else
        if (converseVar.eventKey is pf13
         || converseVar.eventKey is pf14
         || converseVar.eventKey is pf15)
          SY0BW01.SY0BWFLG = "Y"; /* turn on first time flag*/
          goto SY0B010;
        else
          converseLib.validationFailed(19); /* invalid pf key*/
          set SY0BM001.SY1STNBR cursor;
          goto SY0B005;
        end
      end
    end
    SY0B010: SY0B010();

     /* ******************************************/
     /* *  FLOW STAGE FOR SY0B010               **/
     /* ******************************************/

    if (converseVar.validationMsgNum > 0)
      goto SY0B005;
    else
      if (converseVar.eventKey is pf13)
        goto SY0B015;
      else
        if (converseVar.eventKey is pf14
         || SY0BW03.SYWPFOPT == "PF13B"
         || SY0BW03.SYWPFOPT == "PF14B")
          goto SY0B025;
        else
          if (converseVar.eventKey is pf15)
            goto SY0B030;
          else
            if (converseVar.eventKey is pa2)
              goto SY0B001;
            else
              converseLib.validationFailed(19); /* invalid pf key*/
              set SY0BM001.SY1STNBR cursor;
              goto SY0B005;
            end
          end
        end
      end
    end
    SY0B015: SY0B015();

    if (converseVar.eventKey is pa2)
      goto SY0B001;
    else
      if (converseVar.eventKey is pf3)
        goto SY0B005;
      else
        if (converseVar.eventKey is pf12)
          goto SY0B015;
        else
          if (converseVar.validationMsgNum > 0)
            goto SY0B015;
          else
            if (converseVar.eventKey is enter)
              goto SY0B020;
            else
              converseLib.validationFailed(19);
              goto SY0B015;
            end
          end
        end
      end
    end
    SY0B020: SY0B020();

    if (converseVar.eventKey is pf3)
      goto SY0B015;
    else
      if (converseVar.eventKey is pf12)
        goto SY0B020;
      else
        if (converseVar.eventKey is pa2)
          goto SY0B001;
        else
          if (converseVar.validationMsgNum > 0)
            goto SY0B020;
          else
            if (converseVar.eventKey is enter)
              goto SY0B025;
            else
              converseLib.validationFailed(19); /* invalid pf key*/
              goto SY0B020;
            end
          end
        end
      end
    end
    SY0B025: SY0B025();

    if (SY0BW01.SY0BWPOP == "Y")
      goto SY0B025;
    end

    if (converseVar.validationMsgNum > 0)
      goto SY0B025;
    else
      if (converseVar.eventKey is enter)
        SY0BW01.SY0BWFLG = "Y"; /* first time flag*/
        goto SY0B026;
      else
        if (converseVar.eventKey is pf3)
          SY0BW01.SY0BWBCF = "N";
          goto SY0B020;
        else
          if (converseVar.eventKey is pf12)
            goto SY0B025;
          else
            if (converseVar.eventKey is pa2)
              goto SY0B001;
            else
              converseLib.validationFailed(19); /* invalid pf key*/
              goto SY0B025;
            end
          end
        end
      end
    end
    SY0B026: SY0B026();

    if (converseVar.validationMsgNum > 0)
      goto SY0B026;
    else
      if (converseVar.eventKey is enter)
        SY0BW01.SY0BWFLG = "Y"; /* first time flag*/
        goto SY0B030;
      else
        if (converseVar.eventKey is pf3)
          goto SY0B025;
        else
          if (converseVar.eventKey is pf12)
            goto SY0B026;
          else
            if (converseVar.eventKey is pa2)
              goto SY0B001;
            else
              converseLib.validationFailed(19); /* invalid pf key*/
              goto SY0B026;
            end
          end
        end
      end
    end
    SY0B030: SY0B030();

    if (converseVar.validationMsgNum > 0)
      goto SY0B030;
    else
      if (converseVar.eventKey is pf3)
        SY0BW01.SY0BWBCF = "N";
        goto SY0B026;
      else
        if (converseVar.eventKey is pf12)
          goto SY0B030;
        else
          if (converseVar.eventKey is pa2)
            goto SY0B001;
          else
            if (converseVar.eventKey is enter)
              goto SY0B035;
            else
              converseLib.validationFailed(19); /* invalid pf key*/
              goto SY0B030;
            end
          end
        end
      end
    end
    SY0B035: SY0B035();

    if (converseVar.eventKey is pf3)
      goto SY0B030;
    else
      if (converseVar.eventKey is pf12)
        goto SY0B035;
      else
        if (converseVar.eventKey is pa2)
          goto SY0B001;
        else
          if (converseVar.validationMsgNum > 0)
            goto SY0B035;
          else
            if (converseVar.eventKey is pf13)
              SY0BW01.SY0BWOPT = " ";
              goto SY0B005;
            else
              if (converseVar.eventKey is pf14)
                SY0BW01.SY0BWOPT = "PF14B";
                goto SY0B025;
              else
                converseLib.validationFailed(19); /* invalid pf key*/
                goto SY0B035;
              end
            end
          end
        end
      end
    end
  end // end main
end // end SY0B

// security check
Function SY0B001()
       /* *****************************************************/
       /* *     check security module and first time thru    **/
       /* *****************************************************/

  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

  converseLib.clearScreen();
  set SY0BM001 initial;
  converseLib.clearScreen();
  set SY0BM002 initial;
  converseLib.clearScreen();
  set SY0BM003 initial;
  converseLib.clearScreen();
  set SY0BM005 initial;
  converseLib.clearScreen();
  set SY0BM006 initial;
  converseLib.clearScreen();
  set SY0BM007 initial;
  converseLib.clearScreen();
  set SY0BM008 initial;

  SY0BM001.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM002.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM003.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM005.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM006.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM007.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM008.SYMCURDT = VGVar.currentShortGregorianDate;

  set SY1REC empty;
  set SY2REC empty;
  set VSYREG02 empty;
  set SY3REC empty;
  set SY4REC empty;
  set PG1REC empty;
  set VSYDVL03 empty;
  set VSYDPC02 empty;
  set VSYDVX02 empty;
  set SY0BW01 empty;
  set SY0BW02 empty;
  set SY0BW04 empty;
  set SY0BWZZZ empty;
  set SY9REC empty;
  set SYAREC empty;
  set SYBREC empty;
  set SYWREC empty;
  set TA2REC empty;
  set TA1REC empty;
  TA1REC.TA1PGMNM = "SY0B";
  TA1REC.TA1MAP = "SY0BM007";
   /*  */
   /* Now check to see if we have returned from a transfer*/
   /* and reload everything if we have.*/
   /*  */
  if (converseVar.eventKey is pa2) /* User requested restart*/
    /* NEXT SENTENCE (We don't want to reset W03)*/
  else
    if (COMMAREA.CAFROMAP == "SY01")
      SY0BW03.SYWTRANF = COMMAREA.CAUSERA;
      COMMAREA.CAUSERA = " ";
      if (SY0BW03.SYWPFOPT == "PF13B")
        SY0BW01.SY0BWOPT = "PF14T"; /* set option*/
        move SY0BW03 to SY0BM001 withV60Compat;
      else
        set SY0BW03 empty;
        SY0BW03.SY0BM-PREV-PROD = "** None **";
      end
    else
      if (COMMAREA.CAFROMAP == "RY0C")
        SY0BW03.SYWTRANF = COMMAREA.CAUSERA;
        COMMAREA.CAUSERA = " ";
        if (SY0BW03.SYWPFOPT == "PF14B")
          SY0BW01.SY0BWOPT = "PF14B"; /* set option*/
          move SY0BW03 to SY0BM001 withV60Compat;
          SY0BM001.SY2CLRID = " ";
          SY0BM001.XDMCD = "00";
        else
          if (SY0BW03.SYWPFOPT == "PF13B")
            SY0BM001.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;
            SY0BW03.SYWPFOPT = " ";
          else
            set SY0BW03 empty;
            SY0BW03.SY0BM-PREV-PROD = "** None **";
          end
        end
      else
        set SY0BW03 empty;
        SY0BW03.SY0BM-PREV-PROD = "** None **";
      end
    end
  end


      /* *** get todays date - 1 day for life cyle ****/
      /* *** effective date.                       ****/

  SY0BSAH();

  SY0BM001.XGPCD = COMMAREA.XGPCD;

  SY0BSAE(); /* validate gpc code*/

  SY0BM001.XDMCD = "00";
  SY0BM001.SY0BMDDM = "00";
  SY0BM002.XUMCD = "01";
  SY0BM002.SY1FNSHG = "1";
  SY0BM002.SY1DUTYS = "N";
  SY0BM002.XCWCD = "000";
  SY0BM003.XFCCD1 = "00";
  SY0BM003.XFCCD2 = "00";
  SY0BM003.XFCCD3 = "00";
  SY0BM003.XFCCD4 = "00";
  SY0BM003.XFCCD5 = "00";
  SY0BM003.XFCCD6 = "00";
  SY0BM005.YCQCD = "00"; /* default collection code*/

  if (SY0BM001.XGPCD != "02" /* if it's not footwear*/
   && SY0BM001.XGPCD != "03") /* and it's not apparel*/
    SY0BM001.SY2CLRID = "00 ";
  end

   /* Now, find out what region user is*/
  XPSY008(); /* Get users region*/

  if (SYWREC.XDR-PROD-REG-CD[SYWREGX] != "01" /* Not USA*/
   && SY0BM001.XGPCD == "03")                 /* and apparel*/
    SY0BM002.XBCCD = "01";
    SY0BM002.SY1TECHS = "N";
    SY0BM005.XDVCD = "02";
    SY0BM008.XDR-PROD-REG-CD = SYWREC.XDR-PROD-REG-CD[SYWREGX];
  end

  SY0BM001.CAITEM = " ";

end // end SY0B001

// prod. sub. menu add
Function SY0B005()
       /* *************************************************/
       /* *   displays the product add sub menu.         **/
       /* *   the process will check for required fields.**/
       /* *************************************************/

     /* *** PROGRAM REVISION NUMBER*/

  SY0BM001.SY0BMREV = "11"; /* program revision number!!!!!*/

  SY0BM001.SYMTTLNM = "  PRODUCT SUB-MENU - ADD    ";
  SY0BM001.SYMPRONM = "SY0B005";
  SY0BW01.SY0BWOPT = " ";
  SY0BM001.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;

  if (converseVar.validationMsgNum > 0)
    /* next sentence*/
  else
    set SY0BM001.SY1STNBR cursor;
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY0BM001 ;
   /* ***********************************************************/

       /* ******************************************************/
       /* *     CLEAR ANY LEFTOVER MESSAGE FIELDS             **/
       /* *     AND SET THE SCREEN ATTRIBUTES TO NORMAL.      **/
       /* ******************************************************/

  SY0BSAA();

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "SY0N";
      XSEXIT();
    else
      exit stack;
    end
    exit stack;
  end


       /* ******************************************************/
       /* *     CHECK TO SEE IF THE FAST PATH WAS CHOSEN      **/
       /* ******************************************************/

  SY0BSAB();


       /* ******************************************************/
       /* *     CHECK TO SEE IF THE FUNCTION KEYS PF1,PF4     **/
       /* *     WERE PRESSED.                                 **/
       /* ******************************************************/

  SY0BSAC();

       /* ******************************************************/
       /* *     VALIDATE REQUIRED FIELDS FROM THE SCREEN      **/
       /* *     SY0BM001.                                     **/
       /* ******************************************************/

  SY0BSAD();

  if (converseVar.eventKey is pf13)
    SY0BW01.SY0BWOPT = "PF13T";
  else
    if (converseVar.eventKey is pf14)
      SY0BW01.SY0BWOPT = "PF14T";
    else
      if (converseVar.eventKey is pf15)
        SY0BW01.SY0BWOPT = "PF15T";
      else
        /* next sentence*/
      end
    end
  end


end // end SY0B005

// verify style/color/dim/size
Function SY0B010()


  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

   /* If new style for footwear, clear size screen*/
  if (SY0BM001.XGPCD == "02" /* If footwear*/
   && SY0BM001.SY1STNBR != SY0BW03.SY0BW-P-STNBR
   && SY0BW01.SY0BWOPT != "PF15T")
    SY0BSB2(); /* clear size add screen*/
  end

       /* **************************************************/
       /* *                                               **/
       /* *        sy0bsbb = get duplicate style          **/
       /* *                                               **/
       /* **************************************************/

  if (SY0BM001.SY0BMDSY != " ")
    SY0BSBB();
  end

       /* **************************************************/
       /* *                                               **/
       /* *        sy0bsbc = get duplicate color and size **/
       /* *                                               **/
       /* **************************************************/

  if (SY0BM001.SY0BMDCL != " "
   && SY0BM001.SY0BMDDM != " ")
    SY0BSBC();
  end

       /* **************************************************/
       /* *                                               **/
       /* *        sy0bska = get duplicate style dev num  **/
       /* *        sy0bskb = get duplicate style dev clr  **/
       /* *                                               **/
       /* **************************************************/

  if (SY0BM001.PG4STNBR != " ")
    SY0BSKA();
    if (SY0BW01.SY0BWOPT != "PF14B") /* If we're not a transfer*/
      SY0BSKB();
    end
  end

       /* **************************************************/
       /* *        sy0bsbf = get code desc. for screen 2  **/
       /* *        sy0bsbo = get code desc. for screen 3  **/
       /* *        sy0bsdb = set scr. 2 attributes normal **/
       /* *        sy0bsdc = set scr. 3 attributes normal **/
       /* **************************************************/
   /* If style dup, fill in style screens*/
  if (converseVar.eventKey is pf13)
    if (SY0BM001.PG4STNBR != " "
     || SY0BM001.SY0BMDSY != " ")
      SY0BSBF();
      SY0BSBO();
      SY0BSDB();
      SY0BSDC();
    end
  end

       /* **************************************************/
       /* *        sy0bsbg = get code desc. for screen 5  **/
       /* *        sy0bsdd = set scr. 5 attributes normal **/
       /* *        sy0bsb1 = move sizes to screen 6       **/
       /* *        sy0bsde = set scr. 6 attributes normal **/
       /* *        sy0bsbi = get whse desc. for screen 8  **/
       /* *        sy0bsdf = set scr. 8 attributes normal **/
       /* **************************************************/
   /* If color dup, fill in color screens*/
  if (SY0BM001.PG4STNBR != " "
   || SY0BM001.SY0BMDCL != " ")
    SY0BSBG();
    SY0BSDD();
    SY0BSB1();
    SY0BSDE();
    SY0BSBI();
    SY0BSDF();
  end

  converseLib.validationFailed(0);

       /* ******************************************/
       /* *  CHECK TO SEE IF STYLE EXITS          **/
       /* ******************************************/

  SY0BSBA();

   /* If the user is adding a new color, and replicating from a dev code,*/
   /* then the style groups have to match or it's an error.*/
  if (converseVar.eventKey is pf14 /* adding a new color*/
   && SY0BM001.PG4STNBR != " "     /* dev code entered*/
   && SY1REC.SYBSTGNB != VSYDVL03.SYBSTGNB)
    converseLib.validationFailed(242); /* Style group mis-match*/
    SY0BW01.SY0BW-SYGRP-MSG = " ";
    SY0BW01.SY0BW-SYGRP-TXT1 = "Dev Code = ";
    SY0BW01.SY0BW-SYGRP-PPS = VSYDVL03.SYBSTGNB;
    SY0BW01.SY0BW-SYGRP-TXT2 = ", Style = ";
    SY0BW01.SY0BW-SYGRP-PROD = SY1REC.SYBSTGNB;
    SY0BM001.SYMSCMSG = SY0BW01.SY0BW-SYGRP-MSG;
    set SY0BM001.PG4STNBR cursor, bold;
    exit stack;
  end

       /* ******************************************/
       /* *  CHECK TO SEE IF COLOR EXISTS         **/
       /* ******************************************/

  SY0BSBD();

       /* ******************************************/
       /* *    CHECK TO SEE IF SIZE EXISTS        **/
       /* ******************************************/

  SY0BSBE();

       /* ******************************************/
       /* *  If user requests transfer to SY01,   **/
       /* *     then try to do it.                **/
       /* ******************************************/

  if (converseVar.validationMsgNum == 0 /* we have no errors*/
   && SY0BM001.SY0BMESF == "Y")         /* and edit style flag Yes*/
    set SY0BW03 empty;
    move SY0BM001 to SY0BW03 withV60Compat;
    SY0BW03.SYWPFOPT = "PF13B";
    COMMAREA.CAUSERA = SY0BW03.SYWTRANF;
    COMMAREA.CATOAP = "SY01";
    XSEXIT();
    converseLib.validationFailed(1); /* had transfer problems*/
    SY0BM001.SYMSCMSG = COMMAREA.CAMSG;
    exit stack;
  end

       /* ******************************************/
       /* *  if style number changes, clear out   **/
       /* *  selective info on screens.           **/
       /* ******************************************/

  if (converseVar.validationMsgNum == 0
   && SY0BM001.SY1STNBR != SY0BW03.SY0BW-P-STNBR)
    if (SYWREC.XDR-PROD-REG-CD[1] != "02") /* If not EAO*/
      SY0BM008.XDR-PROD-REG-CD = " ";
      SY0BM008.XDR-PROD-REG-SDESC = " ";
    end
    SY0BM008.SY0BM-MKG-CD[1] = " ";
    SY0BM008.SY0BM-MKG-SDESC[1] = " ";
    SY0BM008.SY0BM-MKG-CD[2] = " ";
    SY0BM008.SY0BM-MKG-SDESC[2] = " ";
    SY0BM008.SY0BM-MKG-CD[3] = " ";
    SY0BM008.SY0BM-MKG-SDESC[3] = " ";
    SY0BM008.SY0BM-MKG-CD[4] = " ";
    SY0BM008.SY0BM-MKG-SDESC[4] = " ";
    SY0BM008.SY0BM-MKG-CD[5] = " ";
    SY0BM008.SY0BM-MKG-SDESC[5] = " ";
    SY0BM008.SY0BM-MKG-CD[6] = " ";
    SY0BM008.SY0BM-MKG-SDESC[6] = " ";
  end

       /* ******************************************/
       /* *  move style number to other screens   **/
       /* ******************************************/

  if (SY0BM001.PG4STNBR == " ") /* not duping from sty dev.*/
    SY0BM002.SY1STYNM = " ";
    SY0BM002.SY1SSTNM = " ";
  end
  SY0BM002.SY1STNBR = SY0BM001.SY1STNBR;
  SY0BM002.XGPDESC = SY0BM001.XGPDESC;
  SY0BM006.XGPDESC = SY0BM001.XGPDESC;
  SY0BM007.XGPDESC = SY0BM001.XGPDESC;
  SY0BM003.SY1STNBR = SY0BM001.SY1STNBR;
  SY0BM005.SY1STNBR = SY0BM001.SY1STNBR;
  SY0BM005.SY2CLRID = SY0BM001.SY2CLRID;
  SY0BM005.XDMCD = SY0BM001.XDMCD;
  if (SY0BM001.XDMCD in XDMTBL.XDMCD)
    SY0BM005.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
  end
  SY0BM006.SY1STNBR = SY0BM001.SY1STNBR;
  SY0BM007.SY1STNBR = SY0BM001.SY1STNBR;
  SY0BM008.SY1STNBR = SY0BM001.SY1STNBR;

   /* *** BY SETTING SY0BWBCF TO YES THE PROGRAM WILL*/
   /* *** ALWAYS MOVE TODAYS DATE -1 TO BACKORDER DATE.*/
   /* *** if sy0bwbcf is set no 'no then the program will*/
   /* *** not move todays date into the map field. this is*/
   /* *** used to get around the backup screen function.*/
   /* *** which caused the date to always be reset.*/
   /* ****/
  SY0BW01.SY0BWBCF = "Y";

end // end SY0B010

// show add style screen 1
Function SY0B015()

       /* *************************************************/
       /* *   SET-UP FOR SCREEN SY0BM002                 **/
       /* *                                              **/
       /* *************************************************/


  SY0BM002.SYMTTLNM = "  PRODUCT STYLE - ADD  1 OF 2  ";
  SY0BM002.SYMPRONM = "SY0B010";
  SY0BM002.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;
  SY0B102(); /* set autoskips*/

  if (converseVar.eventKey is pf12
   || converseVar.validationMsgNum > 0)
    /* next sentence*/
  else
    set SY0BM002.SY1STYNM cursor;
  end

  converseVar.segmentedMode = 1;




   /* ***********************************************************/
  converse SY0BM002 ;
   /* ***********************************************************/


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf12)
    /* next sentence*/
  else
    exit stack;
  end

       /* ******************************************************/
       /* *     CLEAR ANY LEFTOVER MESSAGE FIELDS             **/
       /* *     AND SET THE SCREEN ATTRIBUTES TO NORMAL.**/
       /* ******************************************************/

  SY0BSDB();


       /* ******************************************************/
       /* *     CHECK TO SEE IF THE FUNCTION KEYS PF1,PF4     **/
       /* *     WERE PRESSED.                                 **/
       /* ******************************************************/

  SY0BSEA();


       /* ******************************************************/
       /* *     VALIDATE REQUIRED FIELDS FROM THE SCREEN      **/
       /* *     SY0BM002, and move to other screens.          **/
       /* ******************************************************/

  SY0BSEB();

   /* MOVE SY0BM002.SY4SZSCL TO SY0BW01.SY4SZSCL;*/
  SY0BM003.SY1STYNM = SY0BM002.SY1STYNM;
  SY0BM005.SY1STYNM = SY0BM002.SY1STYNM;
  SY0BM006.SY1STYNM = SY0BM002.SY1STYNM;
  SY0BM008.SY1STYNM = SY0BM002.SY1STYNM;
  SY0BM007.SY1SSTNM = SY0BM002.SY1SSTNM;
  SY0BM006.SY4SZSCL = SY0BM002.SY4SZSCL;
  SY0BM002.XGPDESC = SY0BM001.XGPDESC;
  SY0BM003.XGPDESC = SY0BM001.XGPDESC;
  SY0BM005.XGPDESC = SY0BM001.XGPDESC;
  SY0BM006.XGPDESC = SY0BM001.XGPDESC;
  SY0BM007.XGPDESC = SY0BM001.XGPDESC;
  SY0BM008.XGPDESC = SY0BM001.XGPDESC;
  SY0BM008.SY1BSTNB = SY0BM002.SY1BSTNB;
  SY0BM008.SY0BMBSN = SY0BM002.SY0BMBSN;


end // end SY0B015

// show add style screen 2
Function SY0B020()

       /* *************************************/
       /* *  SET-UP FOR SY0BM003 SCREEN      **/
       /* *                                  **/
       /* *************************************/


  SY0BM003.SYMTTLNM = "  PRODUCT STYLE - ADD  2 OF 2 ";
  SY0BM003.SYMPRONM = "SY0B020";
  SY0BM003.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;
  SY0B103(); /* set autoskips*/

  if (converseVar.eventKey is pf12
   || converseVar.validationMsgNum > 0)
    /* next sentence*/
  else
    if (SY0BM001.XGPCD == "02"
     || SY0BM001.XGPCD == "03")
      set SY0BM003.XFMCD cursor;
    else
      set SY0BM003.XSPCD cursor;
    end
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY0BM003 ;
   /* ***********************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf12)
    /* next sentence*/
  else
    exit stack;
  end

       /* ******************************************************/
       /* *     CLEAR ANY LEFTOVER MESSAGE FIELDS             **/
       /* *     AND SET THE SCREEN ATTRIBUTES TO NORMAL.      **/
       /* ******************************************************/

  SY0BSDC();


       /* ******************************************************/
       /* *     CHECK TO SEE IF THE FUNCTION KEYS PF1,PF4     **/
       /* *     WERE PRESSED.                                 **/
       /* ******************************************************/

  SY0BSFA();


       /* ******************************************************/
       /* *     VALIDATE REQUIRED FIELDS FROM THE SCREEN      **/
       /* *     SY0BM003.                                     **/
       /* ******************************************************/

  SY0BSBO();


end // end SY0B020

// show add color/dim. screen
Function SY0B025()


       /* *************************************/
       /* *  SET-UP FOR SY0BM005 SCREEN      **/
       /* *                                  **/
       /* *************************************/

  SY0BM005.SYMTTLNM = "  PRODUCT COLOR/DIM - ADD 1 OF 2";
  SY0BM005.SYMPRONM = "SY0B025";
  SY0BM005.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;
  SY0BW03.SYWPFOPT = " "; /* reset transfer option*/
  SY0B105(); /* set autoskips*/

  if (converseVar.validationMsgNum > 0
   || converseVar.eventKey is pf12
   || SY0BW01.SY0BWPOP == "Y")
    if (SY0BW01.SY0BWOPT == "PF13T"
     || SY0BW01.SY0BWOPT == "PF14T")
      set SY0BM005.SY2CLRID protect;
      set SY0BM005.XDMCD protect;
      if (SY0BM001.XGPCD == "02")
        set SY0BM005.PG9CLRNB protect;
      end
    end
  else
    if (SY0BM005.SY2PKGFL == " ")
      SY0BM005.SY2PKGFL = "N";
    end

    if (SY0BM005.SY2ALNOR == " ")
      SY0BM005.SY2ALNOR = "Y";
    end

  /*  IF SY0BM005.SY2POFBD EQ ' ';*/
  /*     MOVE 0 TO SY0BM005.SY2POFBD;*/
  /*   END;*/

  /*   IF SY0BM005.SY2POFXD EQ ' ';*/
  /*     MOVE 0 TO SY0BM005.SY2POFXD;*/
  /*   END;*/

  /*   IF SY0BM005.SY2FOFBD EQ ' ';*/
  /*     MOVE 0 TO SY0BM005.SY2FOFBD;*/
  /*   END;*/

  /*   IF SY0BM005.SY2FOFXD EQ ' ';*/
  /*     MOVE 0 TO SY0BM005.SY2FOFXD;*/
  /*   END;*/

  /*   IF SY0BM005.SY2NOFBD EQ ' ';*/
  /*     MOVE 0 TO SY0BM005.SY2NOFBD;*/
  /*   END;*/

  /*   IF SY0BM005.SY2NOFXD EQ ' ';*/
  /*     MOVE 0 TO SY0BM005.SY2NOFXD;*/
  /*   END;*/

    if (SY0BW01.SY0BWOPT == "PF13T"
     || SY0BW01.SY0BWOPT == "PF14T")
      set SY0BM005.SY2CLRID protect;
      set SY0BM005.XDMCD protect;
      set SY0BM005.SY2CLRDS cursor;
      if (SY0BM001.XGPCD == "02")
        set SY0BM005.PG9CLRNB protect;
      end
      if (SY0BW01.SY0BWBCF == "Y")
        SY0BM005.SY2BOEDT = SY0BW01.TA2GRGAN;
        SY0BM005.SY2BOSWI = "Y";
      else
        /* next sentence*/
      end
    else
      set SY0BM005.SY2CLRID cursor;
      if (SY0BW01.SY0BWBCF == "Y")
        SY0BM005.SY2BOEDT = SY0BW01.TA2GRGAN;
        SY0BM005.SY2BOSWI = "Y";
      else
        /* next sentence*/
      end
    end
  end

  if (SY0BW01.SY0BWPOP == "Y") /* we did converse popup*/
    converseLib.clearScreen();
    
  end

  if (SY0BM001.XGPCD == "02") /* footwear*/
    SY0BM005.SY0BMVP1 = "P/L/S/T"; /* change order of colors*/
  else
    SY0BM005.SY0BMVP1 = "P/S/T/L";
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY0BM005 ;
   /* ***********************************************************/

  SY0BW01.SY0BWPOP = "N"; /* init flag to no*/
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf12)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf3
     && SY0BW01.SY0BWOPT == "PF14B")
      converseLib.validationFailed(47); /* can't backup when in add color only mode*/
      exit stack;
    else
      if (converseVar.eventKey is pf3
       && SY0BW01.SY0BWOPT == "PF14T")
        converseLib.validationFailed(47); /* can't backup when in add color only mode*/
        exit stack;
      else
        exit stack;
      end
    end
  end

       /* ******************************************************/
       /* *     CLEAR ANY LEFTOVER MESSAGE FIELDS             **/
       /* *     AND SET THE SCREEN ATTRIBUTES TO NORMAL.      **/
       /* ******************************************************/

  SY0BSDD();

       /* ******************************************************/
       /* *     CHECK TO SEE IF THE FUNCTION KEYS PF1,PF4     **/
       /* *     WERE PRESSED.                                 **/
       /* ******************************************************/

  SY0BSGA();

       /* ******************************************************/
       /* *     VALIDATE REQUIRED FIELDS FROM THE SCREEN      **/
       /* *     SY0BM005.                                     **/
       /* ******************************************************/

  SY0BSGB();

  SY0BM006.SY2CLRID = SY0BM005.SY2CLRID;
  SY0BM007.SY2CLRID = SY0BM005.SY2CLRID;
  SY0BM008.SY2CLRID = SY0BM005.SY2CLRID;
  SY0BM006.SY2CLRDS = SY0BM005.SY2CLRDS;
  SY0BM008.SY2CLRDS = SY0BM005.SY2CLRDS;
  SY0BM007.SY2CLRAB = SY0BM005.SY2CLRAB;
  SY0BM006.XDMCD = SY0BM005.XDMCD;
  SY0BM007.XDMCD = SY0BM005.XDMCD;
  SY0BM008.XDMCD = SY0BM005.XDMCD;
  if (SY0BM005.XDMCD in XDMTBL.XDMCD)
    SY0BM006.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
  else
    SY0BM006.XDMDESC = " ";
  end
  SY0BM007.XDMDESC = SY0BM006.XDMDESC;


end // end SY0B025

// show add color/dim. screen 2
Function SY0B026()


       /* *************************************/
       /* *  SET-UP FOR SY0BM008 SCREEN      **/
       /* *                                  **/
       /* *************************************/

  SY0BM008.SYMTTLNM = "  PRODUCT COLOR/DIM - ADD 2 OF 2";
  SY0BM008.SYMPRONM = "SY0B026";
  SY0BM008.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;

  if (SY0BM001.XGPCD != "02"
   && SY0BM001.XGPCD != "03")
    SY0BM008.SY2BCLCD = " ";
    SY0BM008.SY2SSCIN = " ";
    SY0BM008.SY2TDIND = " ";
    SY0BM008.PC3POIDT = 0;
    SY0BM008.SY2FDSMO = 0;
    SY0BM008.SY2FNSMO = 0;
    SY0BM008.SY2PDCMO = 0;
    SY0BM008.SY2PNCMO = 0;
  else
    if (SY0BM002.SY1BSTNB == " ")
      SY0BM008.SY2BCLCD = " ";
    end
  end

  SY0B108(); /* set autoskips*/

  if (converseVar.validationMsgNum == 0) /* if no errors, set cursor position*/
    if (SY0BM001.XGPCD == "03")
      if (SY0BM002.SY1BSTNB == " ") /* no blank style*/
        set SY0BM008.XWHCD[1] cursor;
      else
        set SY0BM008.SY2BCLCD cursor;
      end
    else
      if (SY0BM001.XGPCD != "02")
        set SY0BM008.XWHCD[1] cursor;
      else
        set SY0BM008.SY2RSTNB cursor;
      end
    end
  end

   /* set-up some date defaults for screen*/

  if (converseVar.validationMsgNum == 0 /* if no errors*/
   && SY0BM001.XGPCD == "02")           /* and only for footwear*/
    if (SY0BM008.SY2PDCMO == 0)
  /*  */
  /* ------------------- y2k out begin ---------------------*/
  /*  */
  /* MOVE 9912 TO SY0BM008.SY2PDCMO;*/
  /*  */
  /* ------------------- y2k out end -----------------------*/
  /*  */
  /*  */
  /* ------------------- y2k in  begin ---------------------*/
  /* The default date is changed from 19991231 to 20431231*/
      SY0BM008.SY2PDCMO = 4312;
  /*  */
  /* ------------------- y2k in  end -----------------------*/
  /*  */
    end
    if (SY0BM008.SY2PNCMO == 0)
  /*  */
  /* ------------------- y2k out begin ---------------------*/
  /*  */
  /* MOVE 9912 TO SY0BM008.SY2PNCMO;*/
  /*  */
  /* ------------------- y2k out end -----------------------*/
  /*  */
  /*  */
  /* ------------------- y2k in  begin ---------------------*/
  /* The default date is changed from 19991231 to 20431231*/
      SY0BM008.SY2PNCMO = 4312;
  /*  */
  /* ------------------- y2k in  end -----------------------*/
  /*  */
    end
    if (SY0BM008.SY2FDSMO == 0
     && SY0BM005.SY2FOFBD != 0)
      SY0BW01.SY0BWDMP = SY0BM005.SY2FOFBD;
      SY0BW01.SY0BWTMO = SY0BW01.SY0BWDMM;
      SY0BW01.SY0BWTYR = SY0BW01.SY0BWDYY;
      if (SY0BW01.SY0BWTMO == 01)
        SY0BW01.SY0BWTMO = 12;
  /*  */
  /* ------------------- y2k out begin ------------------*/
  /*  */
  /* SY0BW01.SY0BWTYR = SY0BW01.SY0BWTYR - 1;*/
  /*  */
  /* ------------------- y2k out end   ------------------*/
  /*  */
  /*  */
  /* ------------------- y2k in begin  ------------------*/
  /*  */
        if (SY0BW01.SY0BWTYR == 0)
          SY0BW01.SY0BWTYR = 99;
        else
          SY0BW01.SY0BWTYR = SY0BW01.SY0BWTYR - 1;
        end
  /*  */
  /* ------------------- y2k in end ---------------------*/
  /*  */
      else
        SY0BW01.SY0BWTMO = SY0BW01.SY0BWTMO - 1;
      end
      SY0BM008.SY2FDSMO = SY0BW01.SY0BWDTT;
    end
    if (SY0BM008.SY2FNSMO == 0
     && SY0BM005.SY2NOFBD != 0)
      SY0BW01.SY0BWDMP = SY0BM005.SY2NOFBD;
      SY0BW01.SY0BWTMO = SY0BW01.SY0BWDMM;
      SY0BW01.SY0BWTYR = SY0BW01.SY0BWDYY;
      if (SY0BW01.SY0BWTMO == 01)
        SY0BW01.SY0BWTMO = 12;
  /*  */
  /* ------------------- y2k out begin ------------------*/
  /*  */
  /* SY0BW01.SY0BWTYR = SY0BW01.SY0BWTYR - 1;*/
  /*  */
  /* ------------------- y2k out end --------------------*/
  /*  */
  /*  */
  /* ------------------- y2k in begin -------------------*/
  /*  */
        if (SY0BW01.SY0BWTYR == 0)
          SY0BW01.SY0BWTYR = 99;
        else
          SY0BW01.SY0BWTYR = SY0BW01.SY0BWTYR - 1;
        end
  /*  */
  /* ------------------- y2k in end ---------------------*/
  /*  */
      else
        SY0BW01.SY0BWTMO = SY0BW01.SY0BWTMO - 1;
      end
      SY0BM008.SY2FNSMO = SY0BW01.SY0BWDTT;
    end
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY0BM008 ;
   /* ***********************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf12)
    /* next sentence*/
  else
    exit stack;
  end

       /* ******************************************************/
       /* *     CLEAR ANY LEFTOVER MESSAGE FIELDS             **/
       /* *     AND SET THE SCREEN ATTRIBUTES TO NORMAL.      **/
       /* ******************************************************/

  SY0BSDF();

       /* ******************************************************/
       /* *     CHECK TO SEE IF THE FUNCTION KEYS PF1,PF4     **/
       /* *     WERE PRESSED.                                 **/
       /* ******************************************************/

  SY0BSGD();

       /* ******************************************************/
       /* *     VALIDATE REQUIRED FIELDS FROM THE SCREEN      **/
       /* *     SY0BM008.                                     **/
       /* ******************************************************/

  SY0BSGE();

end // end SY0B026

// show add size screen
Function SY0B030()


       /* *************************************/
       /* *  SET-UP FOR SY0BM006 SCREEN      **/
       /* *                                  **/
       /* *************************************/

  SY0BM006.SYMTTLNM = "  PRODUCT SIZE - ADD     ";
  SY0BM006.SYMPRONM = "SY0B030";
  SY0BM006.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;

       /* *************************************/
       /* *  SET SCREEN FIELDS TO PROTECT    **/
       /* *  WHEN ADDING SIZES TO EXISTING   **/
       /* *  SIZES.                          **/
       /* *************************************/

  SY0BSHC();

       /* *************************************/
       /* *  SET SIZE DESC TO SHOW BLANK     **/
       /* *  SIZES WHEN USING BLANK STYLE    **/
       /* *  AND COLOR.                      **/
       /* *************************************/

  if (SY0BM002.SY1BSTNB != " " /* Blank style entered*/
   && SY0BM008.SY2BCLCD != " ") /* and blank color*/
    SY0BS-BLANK(); /* set-up blank sizes*/
  else
    SY0BW01.SY0BWIDX = 1;
    while (SY0BW01.SY0BWIDX <= 40)
      set SY0BM006.SY0BMBSI[SY0BWIDX] initialAttributes;
      SY0BM006.SY0BMBSI[SY0BWIDX] = " ";
      SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
    end
  end

       /* *************************************/
       /* *  SET CREATE UPC FLAG BASED ON    **/
       /* *  GPC AND WHAT KIND OF PRODUCT IS **/
       /* *  BEING ENTERED.                  **/
       /* *************************************/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    SY0BM006.SY0BMUPC = "Y"; /* default to yes*/
    SY0BM006.XQACD = "01";
  end

  if (SY0BM001.XGPCD == "02" /* if working with footwear*/
   && SY0BM001.PG4STNBR != " ") /* style dev entered*/
    SY0BM006.SY0BMVP1 = "DEV. SIZE RUN:";
    SY0BM006.SY0BMVP2 = VSYDPC02.PG-SZ-RNG-COMNT;
    set SY0BM006.SY0BM-PRM-PROMPT initialAttributes;
    set SY0BM006.SY0BM-PRM-TXT initialAttributes;
    SY0BM006.SY0BM-PRM-TXT = VSYDPC02.RB-PRM-SZ-RNG-TXT;
  else
    SY0BM006.SY0BMVP1 = "DEC SIZE SCALE:";
    SY0BM006.SY0BMVP2 = SY0BM002.SY1DECSZ;
    set SY0BM006.SY0BM-PRM-PROMPT skip, invisible;
    set SY0BM006.SY0BM-PRM-TXT skip, invisible;
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY0BM006 ;
   /* ***********************************************************/


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf12)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
      if (SY0BW01.SY0BWOPT == "PF15T")
        converseLib.validationFailed(48); /* can't use pf3 for size add*/
        exit stack;
      else
        SY0BSDE(); /* set screen attributes to normal*/
        exit stack;
      end
    else
      exit stack;
    end
  end

       /* ******************************************************/
       /* *     CLEAR ANY LEFTOVER MESSAGE FIELDS             **/
       /* *     AND SET THE SCREEN ATTRIBUTES TO NORMAL.      **/
       /* ******************************************************/

  SY0BSDE();

       /* ******************************************************/
       /* *     CHECK TO SEE IF THE FUNCTION KEYS PF1,PF4     **/
       /* *     WERE PRESSED.                                 **/
       /* ******************************************************/

  SY0BSHA();

       /* ******************************************************/
       /* *     VALIDATE REQUIRED FIELDS FROM THE SCREEN      **/
       /* *     SY0BM006.                                     **/
       /* ******************************************************/

  SY0BSHB();


end // end SY0B030

// show add confirmation screen
Function SY0B035()


       /* *************************************/
       /* *  SET-UP FOR SY0BM007 SCREEN      **/
       /* *                                  **/
       /* *************************************/

  SY0BM007.SYMTTLNM = "  PRODUCT - ADD CONFIRMATION    ";
  SY0BM007.SYMPRONM = "SY0B035";
  SY0BM007.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;

  converseVar.segmentedMode = 1;

   /* Check for style development x-ref data*/
  if (SY0BM001.XGPCD == "02"
   && SY0BW01.SY0BWOPT != "PF15T") /* Not just adding sizes*/
    if (SY0BM001.PG4STNBR == " "
     || SY0BM001.PG9CLRNB == 0
     || SY0BM005.PG9CLRNB == 0)
      SY0BM007.SYMSCMSG = "WARNING - No Development X-Ref will be Created!";
    end
  end

   /* ***********************************************************/
  converse SY0BM007 ;
   /* ***********************************************************/

  SY0BM007.SYMSCMSG = " ";

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16)
    /* next sentence*/
  else
    exit stack;
  end


       /* ******************************************************/
       /* *     CHECK TO SEE IF THE FUNCTION KEYS PF1,PF4     **/
       /* *     WERE PRESSED.                                 **/
       /* ******************************************************/

  SY0BSIA();

       /* ******************************************************/
       /* *    ADD STYLE/COLOR/SIZE RECORDS TO THEIR TABLES   **/
       /* *                                                   **/
       /* ******************************************************/

  SY0BSIB();

       /* ******************************************************/
       /* *    CHECK ROYALTIES AND TRANSFER TO RY0C IF WE     **/
       /* *    NEED TO ENTER THEM.                            **/
       /* ******************************************************/

  if (converseVar.validationMsgNum == 0) /* No Errors*/
    if (SY0BW01.SY0BWOPT == "PF13T"
     && SY0BM003.XRYCD != "00"
     && SY0BM003.XRYCD != "  ")
      SY0BM001.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;
      set SY0BW03 empty;
      move SY0BM001 to SY0BW03 withV60Compat;
      if (converseVar.eventKey is pf14)
        SY0BW03.SYWPFOPT = "PF14B";
        SY0BW03.SY0BMDSY = SY0BW03.SY0BW-P-STNBR;
        SY0BW03.SY0BMDCL = SY0BW03.SY0BW-P-CLRID;
        SY0BW03.SY0BMDDM = SY0BW03.SY0BW-P-XDMCD;
      else
        if (converseVar.eventKey is pf16)
          SY0BW03.SYWPFOPT = "PF16B";
        else
          SY0BW03.SYWPFOPT = "PF13B";
        end
      end
      COMMAREA.CAUSERA = SY0BW03.SYWTRANF;
      COMMAREA.CATOAP = "RY0C";
      XSEXIT();
      converseLib.validationFailed(1); /* Transfer Problems*/
      SY0BM001.SYMSCMSG = COMMAREA.CAMSG;
      exit stack;
    end
    if (SY0BW01.SY0BWOPT == "PF14T"
     || SY0BW01.SY0BWOPT == "PF14B")
      if (SY1REC.SY1RYELG == "C")
        SY0BM001.SY0BM-PREV-PROD = SY0BW03.SY0BM-PREV-PROD;
        set SY0BW03 empty;
        move SY0BM001 to SY0BW03 withV60Compat;
        if (converseVar.eventKey is pf14)
          SY0BW03.SYWPFOPT = "PF14B";
          SY0BW03.SY0BMDSY = SY0BW03.SY0BW-P-STNBR;
          SY0BW03.SY0BMDCL = SY0BW03.SY0BW-P-CLRID;
          SY0BW03.SY0BMDDM = SY0BW03.SY0BW-P-XDMCD;
        else
          if (converseVar.eventKey is pf16)
            SY0BW03.SYWPFOPT = "PF16B";
          else
            SY0BW03.SYWPFOPT = "PF13B";
          end
        end
        COMMAREA.CAUSERA = SY0BW03.SYWTRANF;
        COMMAREA.CATOAP = "RY0C";
        XSEXIT();
        converseLib.validationFailed(1); /* Transfer Problems*/
        SY0BM001.SYMSCMSG = COMMAREA.CAMSG;
        exit stack;
      end
    end
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "SY0G";
    XSEXIT();
    SY0BM007.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM007 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end

  if (converseVar.eventKey is pf13)
    SY0BM001.SY0BMDSY = " ";
    SY0BM001.SY0BMDCL = " ";
    SY0BM001.SY0BMDDM = "00";
    SY0BM001.PG4STNBR = " ";
    SY0BM001.PG9CLRNB = 0;
  else
    if (converseVar.eventKey is pf14)
      SY0BM005.SY2CLRID = " ";
      SY0BM005.SY2CLRDS = " ";
      SY0BM005.SY2CLRAB = " ";
      SY0BM005.XDMCD = "00";
      SY0BM001.PG9CLRNB = 0;
      SY0BM005.PG9CLRNB = 0;
    else
      /* next sentence*/
    end
  end


end // end SY0B035

// Set Map M002 fields Autoskip
Function SY0B102()

       /* ******************************************/
       /* *  set sy0bm002 screen fields autoskip  **/
       /* *  based on GPC user is using           **/
       /* ******************************************/


  if (SY0BM001.XGPCD == "02")
    SY0BM002.SY1BSTNB = " ";
    set SY0BM002.SY1BSTNB skip;
  else
    if (SY0BM001.XGPCD == "03")
      SY0BM002.SYBSTGNB = " ";
      set SY0BM002.SYBSTGNB skip;
      SY0BM002.XCWCD = "000";
      set SY0BM002.XCWCD skip;
    else
      SY0BM002.SY1BSTNB = " ";
      set SY0BM002.SY1BSTNB skip;
      SY0BM002.SYBSTGNB = " ";
      set SY0BM002.SYBSTGNB skip;
      SY0BM002.XGACD = "00";
      set SY0BM002.XGACD skip;
      SY0BM002.XGCCD = "00";
      set SY0BM002.XGCCD skip;
      SY0BM002.SY1FNSHG = "0";
      set SY0BM002.SY1FNSHG skip;
      SY0BM002.SY1DUTYS = "N";
      set SY0BM002.SY1DUTYS skip;
      SY0BM002.SY1TECHS = "N";
      set SY0BM002.SY1TECHS skip;
      SY0BM002.XCWCD = "000";
      set SY0BM002.XCWCD skip;
    end
  end

end // end SY0B102

// Set map M003 fields autoskip
Function SY0B103()

       /* ******************************************/
       /* *  set sy0bm003 screen fields autoskip  **/
       /* *  based on GPC user is using           **/
       /* ******************************************/

  if (SY0BM001.XGPCD == "02")
    if (SY0BM003.XFMCD == "  ")
      SY0BM003.XFMCD = "00";
    end
    SY0BM003.PG1FCTCD = " ";
    set SY0BM003.PG1FCTCD skip;
  else
    if (SY0BM001.XGPCD == "03")
      SY0BM003.FY7MLDCD = " ";
      set SY0BM003.FY7MLDCD skip;
      SY0BM003.FY8LSTCD = " ";
      set SY0BM003.FY8LSTCD skip;
      SY0BM003.XMLCD[1] = "00";
      set SY0BM003.XMLCD[1] skip;
      SY0BM003.XMLCD[2] = "00";
      set SY0BM003.XMLCD[2] skip;
      SY0BM003.XMLCD[3] = "00";
      set SY0BM003.XMLCD[3] skip;
      SY0BM003.XMLCD[4] = "00";
      set SY0BM003.XMLCD[4] skip;
      SY0BM003.FK-NBR-AIRBAG-SHOE = 0;
      set SY0BM003.FK-NBR-AIRBAG-SHOE skip;
      SY0BM003.PG-AIRBAG-NBR1 = " ";
      set SY0BM003.PG-AIRBAG-NBR1 skip;
      SY0BM003.PG-AIRBAG-NBR2 = " ";
      set SY0BM003.PG-AIRBAG-NBR2 skip;
      SY0BM003.PG-AIRBAG-NBR3 = " ";
      set SY0BM003.PG-AIRBAG-NBR3 skip;
    else
      SY0BM003.XFMCD = "00";
      set SY0BM003.XFMCD skip;
      SY0BM003.XBTCD = "00";
      set SY0BM003.XBTCD skip;
      SY0BM003.XSUCD = "00";
      set SY0BM003.XSUCD skip;
      SY0BM003.FY7MLDCD = " ";
      set SY0BM003.FY7MLDCD skip;
      SY0BM003.FY8LSTCD = " ";
      set SY0BM003.FY8LSTCD skip;
      SY0BM003.XCNCD = "00";
      set SY0BM003.XCNCD skip;
      if (SY0BM003.XFCCD1 == "  ")
        SY0BM003.XFCCD1 = "00";
      end
      if (SY0BM003.XFCCD2 == "  ")
        SY0BM003.XFCCD2 = "00";
      end
      SY0BM003.XFCCD3 = "00";
      set SY0BM003.XFCCD3 skip;
      SY0BM003.XFCCD4 = "00";
      set SY0BM003.XFCCD4 skip;
      SY0BM003.XFCCD5 = "00";
      set SY0BM003.XFCCD5 skip;
      SY0BM003.XFCCD6 = "00";
      set SY0BM003.XFCCD6 skip;
      SY0BM003.XMLCD[1] = "00";
      set SY0BM003.XMLCD[1] skip;
      SY0BM003.XMLCD[2] = "00";
      set SY0BM003.XMLCD[2] skip;
      SY0BM003.XMLCD[3] = "00";
      set SY0BM003.XMLCD[3] skip;
      SY0BM003.XMLCD[4] = "00";
      set SY0BM003.XMLCD[4] skip;
      SY0BM003.FK-NBR-AIRBAG-SHOE = 0;
      set SY0BM003.FK-NBR-AIRBAG-SHOE skip;
      SY0BM003.PG-AIRBAG-NBR1 = " ";
      set SY0BM003.PG-AIRBAG-NBR1 skip;
      SY0BM003.PG-AIRBAG-NBR2 = " ";
      set SY0BM003.PG-AIRBAG-NBR2 skip;
      SY0BM003.PG-AIRBAG-NBR3 = " ";
      set SY0BM003.PG-AIRBAG-NBR3 skip;
      SY0BM003.PG1FCTCD = " ";
      set SY0BM003.PG1FCTCD skip;
      if (SY0BM001.XGPCD != "07")
        SY0BM003.XRYCD = "00";
        set SY0BM003.XRYCD skip;
      end
    end
  end

end // end SY0B103

// Set map m005 fields autoskip
Function SY0B105()

       /* ******************************************/
       /* *  set sy0bm005 screen fields autoskip  **/
       /* *  based on GPC being used by user      **/
       /* ******************************************/


  if (SY0BM001.XGPCD == "02")
    if (SY0BM001.PG4STNBR == " ") /* no dev. number entered*/
      SY0BM005.PG9CLRNB = 0;
      set SY0BM005.PG9CLRNB skip, invisible;
    end
  else
    if (SY0BM001.XGPCD == "03")
      set SY0BM005.PG9CLRNB skip, invisible;
      SY0BM005.SY2PKGFL = "N";
      set SY0BM005.SY2PKGFL skip;
      SY0BM005.XPLCD = " ";
      SY0BM005.XPLSDESC = " ";
      set SY0BM005.XPLCD skip;
    else
      set SY0BM005.PG9CLRNB skip, invisible;
      SY0BM005.SY2CLRDS = "NOT APPLICABLE";
      SY0BM005.SY2CLRAB = "N/A";
      SY0BM005.SY2PKGFL = "N";
      set SY0BM005.SY2PKGFL skip;
       /*----------------------------------------------------------------------*/
      /* Commented to activate Product Line & Cat */
      /* fields for C2CIM  project TPR#76440*/
       /*----------------------------------------------------------------------*/
      /*MOVE ' ' TO SY0BM005.XPCCD;   */
     /*SET SY0BM005.XPCCD AUTOSKIP;*/
     /*MOVE ' ' TO SY0BM005.XPLCD;*/
     /*MOVE ' ' TO SY0BM005.XPLSDESC;*/
     /* SET SY0BM005.XPLCD AUTOSKIP;*/
      SY0BM005.XCLCD[1] = "000";
      set SY0BM005.XCLCD[1] skip;
      SY0BM005.XCLCD[2] = "000";
      set SY0BM005.XCLCD[2] skip;
      SY0BM005.XCLCD[3] = "000";
      set SY0BM005.XCLCD[3] skip;
      SY0BM005.XCLCD[4] = "000";
      set SY0BM005.XCLCD[4] skip;
      SY0BM005.XOGCD = "00";
      set SY0BM005.XOGCD skip;
      SY0BM005.XMCCD1 = "000";
      set SY0BM005.XMCCD1 skip;
      SY0BM005.XMCCD2 = " ";
      set SY0BM005.XMCCD2 skip;
      SY0BM005.XMCCD3 = " ";
      set SY0BM005.XMCCD3 skip;
      SY0BM005.XMCCD4 = " ";
      set SY0BM005.XMCCD4 skip;
      SY0BM005.SY2MCP1 = 0;
      set SY0BM005.SY2MCP1 skip;
      SY0BM005.SY2MCP2 = 0;
      set SY0BM005.SY2MCP2 skip;
      SY0BM005.SY2MCP3 = 0;
      set SY0BM005.SY2MCP3 skip;
      SY0BM005.SY2MCP4 = 0;
      set SY0BM005.SY2MCP4 skip;
    end
  end

end // end SY0B105

// Set map M008 fields autoskip
Function SY0B108()

       /* ******************************************/
       /* *  set sy0bm008 screen fields autoskip  **/
       /* *  based on GPC being used by user      **/
       /* ******************************************/


  if (SY0BM001.XGPCD == "02")
    SY0BM008.SY2BCLCD = " ";
    set SY0BM008.SY2BCLCD skip;
    if (SY0BM008.XDR-PROD-REG-CD == "  ")
      SY0BM008.XDR-PROD-REG-CD = "01";
    end
  else
    SY0BM008.SY2RSTNB = " ";
    set SY0BM008.SY2RSTNB skip;
    SY0BM008.SY2SSCIN = " ";
    set SY0BM008.SY2SSCIN skip;
    SY0BM008.SY2TDIND = " ";
    set SY0BM008.SY2TDIND skip;
    SY0BM008.SY-DUTY-RT-CD = "  ";
    set SY0BM008.SY-DUTY-RT-CD skip;
    SY0BM008.PC3POIDT = 0;
    set SY0BM008.PC3POIDT skip;
    SY0BM008.SY2FDSMO = 0;
    set SY0BM008.SY2FDSMO skip;
    SY0BM008.SY2FNSMO = 0;
    set SY0BM008.SY2FNSMO skip;
    SY0BM008.SY2PDCMO = 0;
    set SY0BM008.SY2PDCMO skip;
    SY0BM008.SY2PNCMO = 0;
    set SY0BM008.SY2PNCMO skip;
    SY0BM008.PG4DMGRN = " ";
    set SY0BM008.PG4DMGRN skip;
    if (SYWREC.XDR-PROD-REG-CD[SYWREGX] != "02") /* EAO User*/
      SY0BM008.PG1SC4CD = " ";
      set SY0BM008.PG1SC4CD skip;
    end
    if (SY0BM002.SY1BSTNB == " ") /* no blank style*/
      SY0BM008.SY2BCLCD = " "; /* so cannot enter blank color*/
      set SY0BM008.SY2BCLCD skip;
    end
    if (SY0BM001.XGPCD != "03")
      if (SY0BM008.XDR-PROD-REG-CD == "  ")
        SY0BM008.XDR-PROD-REG-CD = "01";
      end
    end
  end

end // end SY0B108

// Load Footwear Tooling
Function SY0B200()

   /* Open cursor on VTLINV01 table*/
  VTLINV01.TOOL-GRP-REF-ID = SY0BM003.FY7MLDCD;
  call "VTLINV01" ("S1", SQLCA, VTLINV01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* Error on Open*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B";
    TA1REC.TA1LOCAT[1] = "SY0B100  ";
    TA1REC.TA1LOCAT[2] = "VTLINV01 ";
    TA1REC.TA1LOCAT[3] = "S1       ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM003";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VTLINV01";
    TA1TBLKE = SY1REC.SY1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* table error....*/
    exit stack;
  end

   /* Scan tooling rows for Outsole & Last codes*/
  SYWREC.SYWINDEX = 1;
  while (SYWREC.SYWINDEX <= 3)
    SY0BS-LOAD-TOOLING();
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end


   /* Close cursor on VTLINV01 table*/
  call "VTLINV01" ("C1", SQLCA, VTLINV01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* Error on Open*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B";
    TA1REC.TA1LOCAT[1] = "SY0B100  ";
    TA1REC.TA1LOCAT[2] = "VTLINV01 ";
    TA1REC.TA1LOCAT[3] = "C1       ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM003";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VTLINV01";
    TA1TBLKE = SY1REC.SY1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* table error....*/
    exit stack;
  end

end // end SY0B200

// Insert VPRDRG01 Row
Function SY0BS-ADD-PRDRG()

   /* Insert PRDRG01 logic*/

  set VPRDRG01 empty;
  VPRDRG01.SY-PROD-ID = VPRDXF01.SY-PROD-ID;
  if (VSYREG02.XDR-PROD-REG-CD in SYRGTBL.XDR-PROD-REG-CD)
    VPRDRG01.REG-ID = SYRGTBL.REG-ID[sysVar.arrayIndex];
  else
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY0BS-AD";
    TA1REC.TA1LOCAT[3] = "D-PRDRG ";
    TA1REC.TA1LOCAT[4] = "LOOKUP  ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VPRDRG01";
    TA1REC.TA1TBLKE = VSYREG02.VSYREG02-KEY;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* Color table error*/
    return;
  end

  VPRDRG01.SY-CURR-SESN-NBR = 1;
  VPRDRG01.SY-ALW-NEW-ORD-FL = VSYREG02.SY-ALW-NEW-ORD-FL;
  VPRDRG01.OP-HMDL-HOT-FL = VSYREG02.OP-HMDL-HOT-FL;
  VPRDRG01.SY-RSTR-XSO-IND = SY2REC.SY2RPRDI;
  VPRDRG01.SY-FRST-SLS-MO = VSYREG02.SY-FRST-DOM-SLS-MO;
  VPRDRG01.SY-PROJ-CLS-MO-DT = VSYREG02.SY-PROJ-DOM-CLS-MO;
  VPRDRG01.SY-BO-SW = SY2REC.SY2BOSWI;
  VPRDRG01.SY-BO-SW-EDT = SY2REC.SY2BOEDT;
  VPRDRG01.SY-SFTY-STKCLS-IND = VSYREG02.SY-SFTY-STKCLS-IND;
  VPRDRG01.PG-SCHED-SPCLT-CD = VSYREG02.PG-SCHED-SPCLT-CD;
  VPRDRG01.ZZ-SDT = SY0BWZZZ.ZZZSDT;
  VPRDRG01.ZZ-CHNG-DT = SY0BWZZZ.ZZZCHGDT;
  VPRDRG01.ZZ-CHNG-HHMM = SY0BWZZZ.ZZZCHGTM;
  VPRDRG01.ZZ-CHNG-CNT = 0;

  call "VPRDRG01" ("A ", SQLCA, VPRDRG01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY0BS-AD";
    TA1REC.TA1LOCAT[3] = "D-PRDRG ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VPRDRG01";
    TA1REC.TA1TBLKE = VSYREG02.VSYREG02-KEY;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* Color table error*/
    return;
  end

end // end SY0BS-ADD-PRDRG

// Insert VPRDXF01 Row
Function SY0BS-ADD-PRDXF()
   /* **  Maintenance Log  ***********************************/
   /* June 8, 1995 BCourt  Color once existed so the product*/
   /* cross-reference row & VPRICE do exist.*/
   /* VCOLOR and VSYREG do NOT exist.*/
   /* Insert row only when does not exist.*/
   /* ********************************************************/

   /* Insert PRDXF01 logic*/

   /* First, we need to get the next available prod-id*/
  VCTLID01.LT-DB2-NM = "SY_PROD_ID";
  VCTLID01.ZZ-CHNG-DT = SY0BWZZZ.ZZZCHGDT;
  VCTLID01.ZZ-CHNG-HHMM = SY0BWZZZ.ZZZCHGTM;

  call "VCTLID01" ("SU", SQLCA, VCTLID01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[1] = "SU             ";
    TA1REC.TA1LOCAT[2] = "SY0BS-ADD-PRDXF";
    TA1REC.TA1LOCAT[3] = "               ";
    TA1REC.TA1LOCAT[4] = "               ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCTLID01";
    SY0BW01.SY0BW-NXT-ID = VCTLID01.SY-NXT-ID;
    TA1REC.TA1TBLKE = SY0BW01.SY0BW-NXT-ID;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(20); /* Region table error*/
    return;
  end

   /* Now, insert the row into the xref table*/
  VPRDXF01.XGP-GPC-CD = SY2REC.XGPCD;
  VPRDXF01.SY-STY-NBR = SY2REC.SY1STNBR;
  VPRDXF01.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  VPRDXF01.XDM-DIM-CD = SY2REC.XDMCD;
  VPRDXF01.SY-PROD-ID = VCTLID01.SY-NXT-ID;
  VPRDXF01.ZZ-SDT = SY0BWZZZ.ZZZSDT;
  VPRDXF01.ZZ-CHNG-DT = SY0BWZZZ.ZZZCHGDT;
  VPRDXF01.ZZ-CHNG-HHMM = SY0BWZZZ.ZZZCHGTM;
  VPRDXF01.ZZ-CHNG-CNT = 0;

  call "VPRDXF01" ("A ", SQLCA, VPRDXF01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "ADD            ";
    TA1REC.TA1LOCAT[2] = "SY0BS-ADD-PRDXF";
    TA1REC.TA1LOCAT[3] = "               ";
    TA1REC.TA1LOCAT[4] = "               ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VPRDXF01";
    TA1REC.TA1TBLKE = VPRDXF01.VPRDXF01-KEY;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* Color table error*/
    return;
  end

end // end SY0BS-ADD-PRDXF

// Insert VSTYXF01 Row
Function SY0BS-ADD-STYXF()

   /* Insert STYXF01 logic*/

   /* First, we need to get the next available sty-id*/
  VCTLID01.LT-DB2-NM = "SY_STY_ID";
  VCTLID01.ZZ-CHNG-DT = SY0BWZZZ.ZZZCHGDT;
  VCTLID01.ZZ-CHNG-HHMM = SY0BWZZZ.ZZZCHGTM;

  call "VCTLID01" ("SU", SQLCA, VCTLID01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[1] = "SU             ";
    TA1REC.TA1LOCAT[2] = "SY0BS-ADD-STYXF";
    TA1REC.TA1LOCAT[3] = "               ";
    TA1REC.TA1LOCAT[4] = "               ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VCTLID01";
    SY0BW01.SY0BW-NXT-ID = VCTLID01.SY-NXT-ID;
    TA1REC.TA1TBLKE = SY0BW01.SY0BW-NXT-ID;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(20); /* Region table error*/
    return;
  end

   /* Now, insert the row into the xref table*/
  VSTYXF01.XGP-GPC-CD = SY1REC.XGPCD;
  VSTYXF01.SY-STY-NBR = SY1REC.SY1STNBR;
  VSTYXF01.SY-STY-ID = VCTLID01.SY-NXT-ID;
  VSTYXF01.ZZ-SDT = SY0BWZZZ.ZZZSDT;
  VSTYXF01.ZZ-CHNG-DT = SY0BWZZZ.ZZZCHGDT;
  VSTYXF01.ZZ-CHNG-HHMM = SY0BWZZZ.ZZZCHGTM;
  VSTYXF01.ZZ-CHNG-CNT = 0;

  call "VSTYXF01" ("A ", SQLCA, VSTYXF01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[1] = "ADD            ";
    TA1REC.TA1LOCAT[2] = "SY0BS-ADD-STYXF";
    TA1REC.TA1LOCAT[3] = "               ";
    TA1REC.TA1LOCAT[4] = "               ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSTYXF01";
    TA1REC.TA1TBLKE = VSTYXF01.VSTYXF01-KEY;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(20); /* Style table error*/
    return;
  end

end // end SY0BS-ADD-STYXF

// Process SYREG regional Row
Function SY0BS-ADD-SYREG()

   /* Process SYREG Regional row for each marketing region entered*/

  TA1REC.TA1PGMNM = "SY0B";
  TA1REC.TA1MAP = "SY0BM008";

  SY0BWIDX = 1;

  while (SY0BWIDX <= 6
   && SQLCA.VAGen_SQLCODE == 0)
    if (SY0BM008.SY0BM-MKG-CD[SY0BWIDX] != "  ")
      VSYREG02.XDR-PROD-REG-CD = SY0BM008.SY0BM-MKG-CD[SY0BWIDX];
      VSYREG02.ZZ-SDT = SY0BWZZZ.ZZZSDT;
      VSYREG02.ZZ-CHNG-DT = SY0BWZZZ.ZZZSDT;
      VSYREG02.ZZ-CHNG-HHMM = SY0BWZZZ.ZZZCHGTM;
      XPSY007-ADD-SYREG(); /* insert syreg row*/
      if (SQLCA.VAGen_SQLCODE == 0)
        SY0BS-ADD-PRDRG();
      end

      if (SQLCA.VAGen_SQLCODE == 0)
        SYAREC.SYAUDTYP = "A";
        SYAREC.ZZZSDT = SY0BWZZZ.ZZZSDT;
        SYAREC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;
        XPSY005-AUD-SYREG(); /* syreg audit insert*/

        SY9REC.SY9TGTYP = "A";
        SY9REC.ZZZSDT = SY0BWZZZ.ZZZSDT;
        SY9REC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;
        XPSY006-TAG-SYREG(); /* syreg tag insert*/
        SY0BWIDX = SY0BWIDX + 1;
      end
    else
      return;
    end
  end


end // end SY0BS-ADD-SYREG

// Insert VTRDRV01 Row
Function SY0BS-ADD-TRDRV()

   /* Insert TRDRV01 logic*/

  VTRDRV01.SY-STY-ID = VSTYXF01.SY-STY-ID;
  VTRDRV01.ZZ-SDT = SY0BWZZZ.ZZZSDT;

  call "VTRDRV01" ("A ", SQLCA, VTRDRV01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != -803)
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY0BS-AD";
    TA1REC.TA1LOCAT[3] = "D-TRDRV ";
    TA1REC.TA1LOCAT[4] = "        ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VTRDRV01";
    TA1REC.TA1TBLKE = SY1REC.SY1KEY;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(20); /* Style table error*/
    return;
  end

end // end SY0BS-ADD-TRDRV

// get duplicate color/dim
Function SY0BS-BLANK()


       /* ******************************************/
       /* *  GET SIZE INFO FOR BLANK STYLE/COLOR  **/
       /* *  AND USE IT TO SET HIGH-LIGHTING ON   **/
       /* *  SIZE DESCRIPTIONS.                   **/
       /* ******************************************/

  set SQLCA empty;
  set SY0BW02 empty;
  SY0BW02.XGPCD = SY0BM001.XGPCD;
  SY0BW02.SY1BSTNB = SY0BM002.SY1BSTNB;
  SY0BW02.SY2BCLCD = SY0BM008.SY2BCLCD;
  SY0BW02.XDMCD = "00";

  call "IO0140" ("S ", SQLCA, SY0BW02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100)
    SY0BW01.SY0BWIDX = 1;
    while (SY0BW01.SY0BWIDX <= 40)
      if (SY0BW02.XDVCD[SY0BWIDX] != " "
       && SY0BW02.XDVCD[SY0BWIDX] != "03")
        set SY0BM006.SY0BMBSI[SY0BWIDX] skip; /* (AND NORMAL)*/
        SY0BM006.SY0BMBSI[SY0BWIDX] = "*";
      else
        set SY0BM006.SY0BMBSI[SY0BWIDX] initialAttributes;
        SY0BM006.SY0BMBSI[SY0BWIDX] = " ";
      end
      SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SY0BSBC ";
    TA1REC.TA1LOCAT[3] = "IO0140  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM??";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSIZE001";
    TA1TBLKE = SY3REC.SY3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(22); /* size table error*/
    exit stack;
  end
end // end SY0BS-BLANK

// Check Airbag Code for XFC Load
Function SY0BS-CHK-BAG()

   /* This routine will check the Airbag 'code' on the front of the*/
   /* airbag Number. This will be used to load the XFC special*/
   /* feature 1 field on the screen.*/
   /*  */
  if (SY0BW01.XFCCD[SY0BWX1] == "00") /* No value*/
    if (SY0BW01.SY0BW-AIRBAG-CD == "A" /* Code for Sequoia*/
     && SY0BW01.XFCCD[1] != "SQ"       
     && SY0BW01.XFCCD[2] != "SQ"       
     && SY0BW01.XFCCD[3] != "SQ")     
      SY0BW01.XFCCD[SY0BWX1] = "SQ"; /* Move in*/
      SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 + 1;
    else
      if (SY0BW01.SY0BW-AIRBAG-CD == "B" /* Code for Blo Molded*/
       && SY0BW01.XFCCD[1] != "BM"       
       && SY0BW01.XFCCD[2] != "BM"       
       && SY0BW01.XFCCD[3] != "BM")     
        SY0BW01.XFCCD[SY0BWX1] = "BM"; /* Move in*/
        SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 + 1;
      else
        if (SY0BW01.SY0BW-AIRBAG-CD == "T" /* Code for Tensel Air*/
         && SY0BW01.XFCCD[1] != "FA"       
         && SY0BW01.XFCCD[2] != "FA"       
         && SY0BW01.XFCCD[3] != "FA")     
          SY0BW01.XFCCD[SY0BWX1] = "TA"; /* Move in*/
          SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 + 1;
        end
      end
    end
  end

end // end SY0BS-CHK-BAG

// Check VPRDXF01 existence
Function SY0BS-CHK-PRDXF()
   /* **  Maintenance Log  ***********************************/
   /* June 8, 1995 BCourt  Color once existed so the product*/
   /* cross-reference row & VPRICE do exist.*/
   /* VCOLOR and VSYREG do NOT exist.*/
   /* Add check for prior existence and add*/
   /* only when it does not exist.*/
   /* ********************************************************/


   /* Check for existence*/
   /* Use 'old key' values of gpc/style/color/dimension.*/
   /* ('new' key is the sy-prod-id)*/
  VPRDXF01.XGP-GPC-CD = SY2REC.XGPCD;
  VPRDXF01.SY-STY-NBR = SY2REC.SY1STNBR;
  VPRDXF01.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  VPRDXF01.XDM-DIM-CD = SY2REC.XDMCD;

  call "VPRDXF01" ("SB", SQLCA, VPRDXF01) {isNoRefresh = yes, isExternal = yes}; /* select type 'b'*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists, leave alone.*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* row does not exist, so*/
      SY0BS-ADD-PRDXF(); /* insert new row*/
    else
      TA1REC.TA1LOCAT[1] = "CHECK   ";
      TA1REC.TA1LOCAT[2] = "SY0BS-CH";
      TA1REC.TA1LOCAT[3] = "K-PRDXF ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VPRDXF01";
      TA1REC.TA1TBLKE = VPRDXF01.VPRDXF01-KEY;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* Color table error*/
      return;
    end
  end

end // end SY0BS-CHK-PRDXF

// Check VSTYXF01 existence
Function SY0BS-CHK-STYXF()
   /* **  Maintenance Log  ***********************************/
   /* Sept 6, 1995 MHALST  Style once existed so the style*/
   /* cross-reference row exists.*/
   /* Add check for prior existence and add*/
   /* only when it does not exist.*/
   /* ********************************************************/


   /* Check for existence*/
   /* Use 'old key' values of gpc/style*/
   /* ('new' key is the sy-sty-id)*/
  VSTYXF01.XGP-GPC-CD = SY1REC.XGPCD;
  VSTYXF01.SY-STY-NBR = SY1REC.SY1STNBR;

  call "VSTYXF01" ("SB", SQLCA, VSTYXF01) {isNoRefresh = yes, isExternal = yes}; /* select type 'b'*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row already exists, leave alone.*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* row does not exist, so*/
      SY0BS-ADD-STYXF(); /* insert new row*/
    else
      TA1REC.TA1LOCAT[1] = "CHECK   ";
      TA1REC.TA1LOCAT[2] = "SY0BS-CH";
      TA1REC.TA1LOCAT[3] = "K-STYXF ";
      TA1REC.TA1LOCAT[4] = "        ";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSTYXF01";
      TA1REC.TA1TBLKE = VSTYXF01.VSTYXF01-KEY;
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* Color table error*/
      return;
    end
  end

end // end SY0BS-CHK-STYXF

// Check for VUCASE01 data
Function SY0BS-CHK-UCASE()


       /* ******************************************/
       /* *   WE ARE DEFAULTING UNITS PER CASE,   **/
       /* *   SO CHECK FOR EXISTANCE OF DEFAULT   **/
       /* *   VUCASE01 ROW. IF WE DO NOT FIND     **/
       /* *   ONE, WE WILL INSERT IT.             **/
       /* *                                       **/
       /* ******************************************/

  SWPREC.XGPCD = SY1REC.XGPCD;
  SWPREC.SY1STNBR = SY1REC.SY1STNBR;
  SWPREC.SY2CLRID = "***";
  SWPREC.XDMCD = "**";
  SWPREC.XWHCD = "**";
  SWPREC.XXX-REC-SEQ-NBR = 1;

  call "IO0090" ("S ", SQLCA, SWPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100)
    SY0BS-INS-UCASE(); /* Insert the data*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Already have one*/
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "SY0BS-CH";
      TA1REC.TA1LOCAT[2] = "K-UCASE ";
      TA1REC.TA1LOCAT[3] = "IO0090  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM007";
      TA1REC.TA1DBASE = "DSTLOC";
      TA1REC.TA1TBLVU = "VUCASE01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(23); /* Corp table error...*/
      set SY0BM007.SY1STNBR cursor, bold;
      exit stack;

    end
  end

end // end SY0BS-CHK-UCASE

// add VCASE record to table
Function SY0BS-INS-UCASE()


       /* ******************************************/
       /* *   ADD UCASE RECORD TO UCASE TABLE     **/
       /* ******************************************/


  set SWPREC empty;
  set SQLCA empty;

  move SY0BWZZZ to SWPREC withV60Compat; /* ZZ Family*/
  SWPREC.XGPCD = SY1REC.XGPCD;
  SWPREC.SY1STNBR = SY1REC.SY1STNBR;
  SWPREC.SY2CLRID = "***";
  SWPREC.XDMCD = "**";
  SWPREC.XWHCD = "**";
  SWPREC.XXX-REC-SEQ-NBR = 1;
  SWPREC.SY1UNPCS = SY1REC.SY1UNPCS;

  call "IO0090" ("A ", SQLCA, SWPREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected Error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "SY0BS-IN";
    TA1REC.TA1LOCAT[2] = "S-UCASE ";
    TA1REC.TA1LOCAT[3] = "IO0090  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DSTLOC";
    TA1REC.TA1TBLVU = "VUCASE01";
    TA1TBLKE = SY1REC.SY1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* Corp table error...*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end

end // end SY0BS-INS-UCASE

// retrieve tooling data
Function SY0BS-LOAD-TOOLING()


       /* ***************************************/
       /* *  retrieve footwear tooling data    **/
       /* ***************************************/

   /* Fetch next row from VTLINV01*/
  call "VTLINV01" ("N1", SQLCA, VTLINV01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 100) /* If at end of fetches*/
    SYWREC.SYWINDEX = 9; /* set index to stop looping*/
    return; /* and exit*/
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected error*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B";
      TA1REC.TA1LOCAT[1] = "SY0BS-LOA";
      TA1REC.TA1LOCAT[2] = "D-TOOLING";
      TA1REC.TA1LOCAT[3] = " ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM003";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VTLINV01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(23); /* table error....*/
      exit stack;
    end
  end


  VTLCMP01.TOOL-CMPNT-TYP-CD = VTLINV01.TOOL-CMPNT-TYP-CD;
  VTLCMP01.TOOL-CMPNT-ID = VTLINV01.TOOL-CMPNT-ID;

  set SQLCA empty;

  call "VTLCMP01" ("S ", SQLCA, VTLCMP01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VTLCMP01.TOOL-CMPNT-TYP-CD == "OS") /* Got an Outsole*/
      SY0BM003.TOOL-CMPNT-NAME = VTLCMP01.TOOL-CMPNT-NAME;
    end
    if (VTLCMP01.TOOL-CMPNT-TYP-CD == "LT") /* Got a Last*/
      SY0BM003.FY8LSTCD = VTLCMP01.TOOL-CMPNT-NAME;
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B";
    TA1REC.TA1LOCAT[1] = "SY0BS-LOA";
    TA1REC.TA1LOCAT[2] = "D-TOOLING";
    TA1REC.TA1LOCAT[3] = " ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM003";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VTLCMP01";
    TA1TBLKE = SY1REC.SY1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* table error....*/
    exit stack;
  end


end // end SY0BS-LOAD-TOOLING

// Load SY0BW04 table
Function SY0BS-LOAD-XPC()
       /* ***************************************/
       /* *  Load the SY0BW04 table for        **/
       /* *  equipment category searches.      **/
       /* ***************************************/

   /* Open cursor on DCORP.VSUMCD01 data*/
  set YSMREC empty;
  set SY0BW04 empty;
  YSMREC.YSMTBLPF = "XPC";
  YSMREC.YSMSYSPF = "EU";
  YSMREC.YSMSUMID = 0001;
  YSMREC.YSMSUMCD = "**";
  YSMREC.YSMSRCVL = "****";

  call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B";
    TA1REC.TA1LOCAT[1] = "SY0BS-LOA";
    TA1REC.TA1LOCAT[2] = "D-XPC    ";
    TA1REC.TA1LOCAT[3] = "OPEN     ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM003";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1TBLKE = SY1REC.SY1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* table error....*/
    exit stack;
  end

   /* Fetch DCORP.VSUMCD01 data and add to table*/
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      SY0BW04.SY0BW-XPC-COUNT = SY0BW04.SY0BW-XPC-COUNT + 1;
      if (SY0BW04.SY0BW-XPC-COUNT < 201)
        SYWINDXA = SY0BW04.SY0BW-XPC-COUNT;
        SY0BW04.XPC-PROD-CAT-CD[SYWINDXA] = YSMREC.YSMSRCVL;
        SY0BW04.SY0BW-XPC-CMPLT-FL[SYWINDXA] = "N";
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* End of Scan*/
        SY0BW04.SY0BW-XPC-LOADED-FL = "Y";
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B";
        TA1REC.TA1LOCAT[1] = "SY0BS-LOA";
        TA1REC.TA1LOCAT[2] = "D-XPC    ";
        TA1REC.TA1LOCAT[3] = "FETCH    ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY0BM003";
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VSUMCD01";
        TA1TBLKE = SY1REC.SY1KEY;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(23); /* table error....*/
        exit stack;
      end
    end
  end

   /* Close cursor on DCORP.VSUMCD01 data*/
  call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected error*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B";
    TA1REC.TA1LOCAT[1] = "SY0BS-LOA";
    TA1REC.TA1LOCAT[2] = "D-XPC    ";
    TA1REC.TA1LOCAT[3] = "CLOSE    ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM003";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1TBLKE = SY1REC.SY1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* table error....*/
    exit stack;
  end

   /* At this point, we have loaded all equipment categories. Now*/
   /* look at each category loaded to determine if it should be*/
   /* automatically Spain compliant.*/

  SYWINDXA = 1;
  while (SYWINDXA <= SY0BW04.SY0BW-XPC-COUNT)
    YSMREC.YSMTBLPF = "XPC";
    YSMREC.YSMSYSPF = "SY";
    YSMREC.YSMSUMID = 0001;
    YSMREC.YSMSRCVL = SY0BW04.XPC-PROD-CAT-CD[SYWINDXA];
    call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      SY0BW04.SY0BW-XPC-CMPLT-FL[SYWINDXA] = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        SY0BW04.SY0BW-XPC-LOADED-FL = "N";
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B";
        TA1REC.TA1LOCAT[1] = "SY0BS-LOA";
        TA1REC.TA1LOCAT[2] = "D-XPC    ";
        TA1REC.TA1LOCAT[3] = "SELECT   ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY0BM003";
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VSUMCD01";
        TA1TBLKE = YSMREC.YSMSRCVL;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(23); /* table error....*/
        exit stack;
      end
    end
    SYWINDXA = SYWINDXA + 1;
  end

end // end SY0BS-LOAD-XPC

// Seach SY0BW04 for XPC match
Function SY0BS-SEARCH-XPC()

   /* Search the category table in the SY0BW04 record. If we*/
   /* find a match, insert special feature code '68' onto*/
   /* the SY1REC (VSTYLE01) to show the style as Spain compliant.*/

  if (SY1REC.XFCCD1 == "68" /* If the code is already set*/
   || SY1REC.XFCCD2 == "68" 
   || SY1REC.XFCCD3 == "68" 
   || SY1REC.XFCCD4 == "68" 
   || SY1REC.XFCCD5 == "68" 
   || SY1REC.XFCCD6 == "68")
    return; /* (we have nothing to do)*/
  end

  if (SY0BW04.SY0BW-XPC-LOADED-FL != "Y") /* Table is not loaded*/
    SY0BS-LOAD-XPC(); /* so go and do it*/
  end

  SY0BW04.SY0BW-XPC-FOUND-FL = "N";
  SYWINDXA = 1;
  while (SYWINDXA <= SY0BW04.SY0BW-XPC-COUNT)
    if (SY0BW04.XPC-PROD-CAT-CD[SYWINDXA] == SY0BM005.XPCCD)
      SY0BW04.SY0BW-XPC-FOUND-FL = "Y";
      if (SY0BW04.SY0BW-XPC-CMPLT-FL[SYWINDXA] == "Y")
        SY0BS-SET-XFC(); /* Set the value 68*/
      end
      SYWINDXA = 999; /* End the WHILE loop*/
    else
      SYWINDXA = SYWINDXA + 1;
    end
  end

   /* If the found flag is set N, that means this product was*/
   /* a regular footwear product and not equipment. So, the*/
   /* default is that all regular footwear is Spain compliant*/
  if (SY0BW04.SY0BW-XPC-FOUND-FL == "N") /* Not equipment category*/
    SY0BS-SET-XFC(); /* Set the value 68*/
  end

end // end SY0BS-SEARCH-XPC

// Set XFC code 68 on SY1REC
Function SY0BS-SET-XFC()

   /* If we get here, we have determined that this style*/
   /* should have special feature 68. Look for an available*/
   /* place to put it.*/

  if (SY1REC.XFCCD1 == "00"
   || SY1REC.XFCCD1 == "  ")
    SY1REC.XFCCD1 = "68";
  else
    if (SY1REC.XFCCD2 == "00"
     || SY1REC.XFCCD2 == "  ")
      SY1REC.XFCCD2 = "68";
    else
      if (SY1REC.XFCCD3 == "00"
       || SY1REC.XFCCD3 == "  ")
        SY1REC.XFCCD3 = "68";
      else
        if (SY1REC.XFCCD4 == "00"
         || SY1REC.XFCCD4 == "  ")
          SY1REC.XFCCD4 = "68";
        else
          if (SY1REC.XFCCD5 == "00"
           || SY1REC.XFCCD5 == "  ")
            SY1REC.XFCCD5 = "68";
          else
            if (SY1REC.XFCCD6 == "00"
             || SY1REC.XFCCD6 == "  ")
              SY1REC.XFCCD6 = "68";
            end
          end
        end
      end
    end
  end

end // end SY0BS-SET-XFC

// verify style
Function SY0BS-SY1-CHK()

       /* *********************************************/
       /* *  VERIFY IF STYLE ALREADY EXISTS          **/
       /* *  THIS ROUTINE IS NOW USED FOR ALL GPC    **/
       /* *  CODES. STYLE CANNOT EXIST IN ANY OTHER  **/
       /* *  GPC.                                    **/
       /* *********************************************/

  set SY1REC empty;
  set SQLCA empty;

  SYWREC.SYWINDXA = 1;
  while (XGPTBL.XGPCD[SYWINDXA] != "99")
    if (XGPTBL.XGPCD[SYWINDXA] != "00"
     && XGPTBL.XGPCD[SYWINDXA] != SY0BM001.XGPCD)
      SY1REC.XGPCD = XGPTBL.XGPCD[SYWINDXA];
      SY1REC.SY1STNBR = SY0BM001.SY1STNBR;
      call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        converseLib.validationFailed(177); /* style assigned another GPC*/
        set SY0BM001.SY1STNBR cursor, bold;
        exit stack;
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SY0B   ";
          TA1REC.TA1LOCAT[1] = "S       ";
          TA1REC.TA1LOCAT[2] = "SY0BSBA ";
          TA1REC.TA1LOCAT[3] = "IO0120  ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "SY0BM001";
          TA1REC.TA1DBASE = "DPROD.";
          TA1REC.TA1TBLVU = "VSTYLE01";
          TA1TBLKE = SY1REC.SY1KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          converseLib.validationFailed(20); /* style table error*/
          set SY0BM001.SY1STNBR cursor, bold;
          exit stack;
        end
      end
    end
    SYWREC.SYWINDXA = SYWREC.SYWINDXA + 1;
  end


end // end SY0BS-SY1-CHK

// verify style
Function SY0BS-SY2-CHK()

       /* *********************************************/
       /* *  VERIFY IF STYLE/COLOR ALREADY EXISTS    **/
       /* *  COLOR CANNOT EXIST BETWEEN GPC CODES    **/
       /* *********************************************/

  set SY2REC empty;
  set SQLCA empty;

  SYWREC.SYWINDXA = 1;
  while (XGPTBL.XGPCD[SYWINDXA] != "99")
    if (XGPTBL.XGPCD[SYWINDXA] != "00"
     && XGPTBL.XGPCD[SYWINDXA] != SY0BM001.XGPCD)
      SY2REC.XGPCD = XGPTBL.XGPCD[SYWINDXA];
      SY2REC.SY1STNBR = SY0BM001.SY1STNBR;
      SY2REC.SY2CLRID = SY0BM001.SY2CLRID;
      SY2REC.XDMCD = SY0BM001.XDMCD;
      call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        converseLib.validationFailed(179); /* style/color already assigned*/
        set SY0BM001.SY2CLRID bold;
        set SY0BM001.SY1STNBR cursor, bold;
        exit stack;
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SY0B   ";
          TA1REC.TA1LOCAT[1] = "S       ";
          TA1REC.TA1LOCAT[2] = "SY0BSBD ";
          TA1REC.TA1LOCAT[3] = "IO0130  ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "SY0BM001";
          TA1REC.TA1DBASE = "DPROD.";
          TA1REC.TA1TBLVU = "VCOLOR01";
          TA1TBLKE = SY2REC.SY2KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          converseLib.validationFailed(21); /* style table error*/
          set SY0BM001.SY2CLRID bold;
          set SY0BM001.SY1STNBR cursor, bold;
          exit stack;
        end
      end
    end
    SYWREC.SYWINDXA = SYWREC.SYWINDXA + 1;
  end

end // end SY0BS-SY2-CHK

// verify style
Function SY0BS-SY2-CHK5()

       /* *********************************************/
       /* *  VERIFY IF STYLE/COLOR ALREADY EXISTS    **/
       /* *  COLOR CANNOT EXIST BETWEEN GPC CODES    **/
       /* *********************************************/

  set SY2REC empty;
  set SQLCA empty;

  SYWREC.SYWINDXA = 1;
  while (XGPTBL.XGPCD[SYWINDXA] != "99")
    if (XGPTBL.XGPCD[SYWINDXA] != "00"
     && XGPTBL.XGPCD[SYWINDXA] != SY0BM001.XGPCD)
      SY2REC.XGPCD = XGPTBL.XGPCD[SYWINDXA];
      SY2REC.SY1STNBR = SY0BM001.SY1STNBR;
      SY2REC.SY2CLRID = SY0BM005.SY2CLRID;
      SY2REC.XDMCD = SY0BM005.XDMCD;
      call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE == 0)
        converseLib.validationFailed(179); /* style/color already assigned*/
        set SY0BM005.SY2CLRID cursor, bold;
        exit stack;
      else
        if (SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1TYPE = "DB2 ";
          TA1REC.TA1FUNC = "RETN";
          TA1REC.TA1PGMNM = "SY0B   ";
          TA1REC.TA1LOCAT[1] = "S       ";
          TA1REC.TA1LOCAT[2] = "SY0BSGC ";
          TA1REC.TA1LOCAT[3] = "IO0130  ";
          TA1REC.TA1LOCAT[4] = " ";
          TA1REC.TA1MAP = "SY0BM001";
          TA1REC.TA1DBASE = "DPROD.";
          TA1REC.TA1TBLVU = "VCOLOR01";
          TA1TBLKE = SY2REC.SY2KEY;
          move SQLCA to ERRSQLCA withV60Compat;
          call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
          converseLib.validationFailed(21); /* style table error*/
          set SY0BM005.SY2CLRID cursor, bold;
          exit stack;
        end
      end
    end
    SYWREC.SYWINDXA = SYWREC.SYWINDXA + 1;
  end

end // end SY0BS-SY2-CHK5

// verify development region
Function SY0BS-VAL-XDR()

       /* ******************************************/
       /* *  VERIFY DEVELOPMENT REGION CODE AND   **/
       /* *  GET DESCRIPTION.                     **/
       /* ******************************************/

  if (SY0BM008.XDR-PROD-REG-CD == "  ")
    if (SY0BM001.XGPCD == "02")
      SY0BM008.XDR-PROD-REG-CD = "01";
    end
  end

  if (SY0BM008.XDR-PROD-REG-CD in XDRTBL.XDR-PROD-REG-CD)
    SY0BM008.XDR-PROD-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
  else
    SY0BM008.XDR-PROD-REG-SDESC = "INVALID";
    converseLib.validationFailed(3); /* Invalid Code*/
    set SY0BM008.XDR-PROD-REG-CD cursor, bold;
  end

end // end SY0BS-VAL-XDR

// get marketing region desc (6)
Function SY0BS-VAL-XDR-6()

       /* ******************************************/
       /* *   GET ALL SIX MARKETING REGION CODES  **/
       /* ******************************************/

  if (SY0BM008.SY0BM-MKG-CD[1] == "  ")
    if (SY0BM001.XGPCD == "03")
      set SY0BM008.SY0BM-MKG-CD[1] cursor, bold;
      converseLib.validationFailed(40); /* required for apparel*/
      SY0BM008.SY0BM-MKG-SDESC[1] = "INVALID";
    else
      SY0BM008.SY0BM-MKG-SDESC[1] = " ";
    end
  end

  SY0BWIDX = 1;

  while (SY0BWIDX <= 6)
    if (SY0BM008.SY0BM-MKG-CD[SY0BWIDX] == " ")
      SY0BM008.SY0BM-MKG-SDESC[SY0BWIDX] = " ";
    else
      if (SY0BM008.SY0BM-MKG-CD[SY0BWIDX] == "99")
        set SY0BM008.SY0BM-MKG-CD[SY0BWIDX] cursor, bold;
        SY0BM008.SY0BM-MKG-SDESC[SY0BWIDX] = "INVALID";
        converseLib.validationFailed(3); /* invalid*/
      else
        if (SY0BM008.SY0BM-MKG-CD[SY0BWIDX] in SYRGTBL.XDR-PROD-REG-CD)
          SY0BM008.SY0BM-MKG-SDESC[SY0BWIDX] = SYRGTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
        else
          set SY0BM008.SY0BM-MKG-CD[SY0BWIDX] cursor, bold;
          SY0BM008.SY0BM-MKG-SDESC[SY0BWIDX] = "INVALID";
          converseLib.validationFailed(3); /* invalid*/
        end
      end
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

   /* Now scan table for duplicate entries*/
  if (converseVar.validationMsgNum == 0)
    SY0BWX1 = 1;
    while (SY0BWX1 <= 6)
      if (SY0BM008.SY0BM-MKG-CD[SY0BWX1] != " ")
        SY0BWX2 = 1;
        while (SY0BWX2 <= 6)
          if (SY0BM008.SY0BM-MKG-CD[SY0BWX1] == 
          SY0BM008.SY0BM-MKG-CD[SY0BWX2]
           && SY0BWX1 != SY0BWX2)
            set SY0BM008.SY0BM-MKG-CD[SY0BWX1] cursor, bold;
            converseLib.validationFailed(206); /* duplicate detected*/
          end
          SY0BWX2 = SY0BWX2 + 1;
        end
      end
      SY0BWX1 = SY0BWX1 + 1;
    end
  end

end // end SY0BS-VAL-XDR-6

// VERIFY PRODUCT category code
Function SY0BS-VAL-XPL()

       /* ******************************************/
       /* *  VERIFY PRODUCT Line code and get     **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY0BM005.XPLCD == "  ")
    SY0BM005.XPLSDESC = " ";
    return;
  end

  SY0BW01.SY0BWIDX = 1;

  while (XPLTBL.XPLCD[SY0BWIDX] != "99")
    if (SY0BW01.SY0BWXGP == XPLTBL.XGPCD[SY0BWIDX]
     && SY0BM005.XPLCD == XPLTBL.XPLCD[SY0BWIDX])
      if (XPLTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM005.XPLSDESC = XPLTBL.XPLSDESC[SY0BWIDX];
        return;
      else
        SY0BM005.XPLSDESC = "INACTIVE";
        converseLib.validationFailed(33); /* inactive code*/
        return;
      end
    end
    SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
  end

  set SY0BM005.XPLCD cursor, bold;
  SY0BM005.XPLSDESC = "INVALID";
  converseLib.validationFailed(3); /* invalid code*/


end // end SY0BS-VAL-XPL

// clear screen attributes
Function SY0BSAA()

   /* ******************************************/
   /* *  SET SCREEN ATTRIBUTES TO NORMAL      **/
   /* ******************************************/

  set SY0BM001.SY1STNBR cursor, normal;
  set SY0BM001.SY2CLRID normal;
  set SY0BM001.XDMCD normal;
  set SY0BM001.XGPCD normal;
  set SY0BM001.SY0BMDSY normal;
  set SY0BM001.SY0BMDCL normal;
  set SY0BM001.SY0BMDDM normal;
  set SY0BM001.PG4STNBR normal;
  set SY0BM001.PG9CLRNB normal;

  SY0BM001.SYMSCMSG = " ";

end // end SY0BSAA

// check for fast path
Function SY0BSAB()

   /* ******************************************/
   /* *  CHECK FOR FAST PATH                  **/
   /* ******************************************/
  if (converseVar.validationMsgNum > 0)
    return;
  end



  if (converseVar.eventKey is enter
   && SY0BM001.CATOAP != " ")
    move SY0BM001 to COMMAREA withV60Compat;
    XSEXIT();
    SY0BM001.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM001 alarm;
    set SY0BM001.CATOAP cursor, bold;
    exit stack;
  else
       /* next sentence*/
  end


end // end SY0BSAB

// check for function keys
Function SY0BSAC()

   /* ******************************************/
   /* * CHECK FOR FUNCTION KEYS               **/
   /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end

  if (converseVar.eventKey is pf1)
    XSPF1();
    SY0BM001.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM001 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end

  if (converseVar.eventKey is pf4)
    XSPF4();
    SY0BM001.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM001 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


end // end SY0BSAC

// validate screen fields
Function SY0BSAD()

       /* ******************************************/
       /* * VALIDATE SY0BM001 SCREEN FIELDS       **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end


       /* ******************************************/
       /* * VALIDATE EDIT STYLE FLAG              **/
       /* ******************************************/

  if (SY0BM001.SY0BMESF == " "
   || SY0BM001.SY0BMESF == "N")
    SY0BW03.SYWPFOPT = " ";
  else
    if (SY0BM001.SY0BMESF == "Y")
      if (converseVar.eventKey is pf14)
         /* NEXT SENTENCE*/
      else
        converseLib.validationFailed(3);
        SY0BM001.SYMSCMSG = "Can only Edit Style when PF14 is used";
        set SY0BM001.SY0BMESF cursor, bold;
      end
    else
      converseLib.validationFailed(3);
      set SY0BM001.SY0BMESF cursor, bold;
    end
  end



       /* ******************************************/
       /* * VALIDATE GENERAL PRODUCT CLASS CODE   **/
       /* ******************************************/

  SY0BSAE();


       /* ***********************************************/
       /* *    IF DUP. COLOR PRESENT THEN YOU MUST     **/
       /* *    ALSO HAVE DUP. DIMINSION.               **/
       /* *    ezemno of 40 - required field           **/
       /* ***********************************************/


  if (SY0BM001.SY0BMDCL != " "
   && SY0BM001.SY0BMDDM == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY0BM001.SY0BMDDM cursor, bold;
  else
     /* next sentence*/
  end


       /* ***********************************************/
       /* *    IF DUP. COLOR PRESENT AND STYLE NUMBER  **/
       /* *    ABSENT THEN THERE IS AN ERROR CONDITION **/
       /* ***********************************************/


  if (SY0BM001.SY0BMDSY == " "
   && SY0BM001.SY0BMDCL != " ")
    converseLib.validationFailed(40); /* required field*/
    set SY0BM001.SY0BMDSY cursor, bold;
  else
     /* next sentence*/
  end


       /* ***********************************************/
       /* *    CHECK FOR PROPER USE OF STYLE DEV.      **/
       /* *    DATA                                    **/
       /* ***********************************************/


   /* check for good dev. data*/
  if (SY0BM001.PG4STNBR != " "
   && SY0BM001.PG9CLRNB == 0)
    converseLib.validationFailed(40); /* required field*/
    set SY0BM001.PG9CLRNB cursor, bold;
  else
    if (SY0BM001.PG4STNBR == " "
     && SY0BM001.PG9CLRNB != 0)
      converseLib.validationFailed(40); /* required field*/
      set SY0BM001.PG4STNBR cursor, bold;
    end
  end

  if (converseVar.validationMsgNum == 0 /* No errors*/
   && SY0BM001.SY0BMDSY != " "          /* have duplicate style*/
   && SY0BM001.PG4STNBR != " ")         /* and dev data*/
    converseLib.validationFailed(173); /* cannot enter both*/
    set SY0BM001.SY0BMDSY cursor, bold;
    set SY0BM001.PG4STNBR bold;
  end

  if (converseVar.validationMsgNum == 0
   && converseVar.eventKey is pf15
   && SY0BM001.PG4STNBR != " ")
    converseLib.validationFailed(41); /* cannot dup with PF15*/
    set SY0BM001.PG4STNBR bold;
  end

       /* **********************************************/
       /* *    DIMENSION CODE REQUIRED                **/
       /* **********************************************/

  if (SY0BM001.XDMCD == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY0BM001.XDMCD cursor, bold;
  else
    SY0BSAG(); /* validate dimension code*/
  end


       /* **********************************************/
       /* *    COLOR IDENTIFICATION CODE REQUIRED     **/
       /* **********************************************/

  if (SY0BM001.SY2CLRID == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY0BM001.SY2CLRID cursor, bold;
  else
     /* next sentence*/
  end


       /* **********************************************/
       /* *    STYLE CODE REQUIRED                    **/
       /* **********************************************/

  if (SY0BM001.SY1STNBR == " ")
    converseLib.validationFailed(40); /* required*/
    set SY0BM001.SY1STNBR cursor, bold;
  else
     /* next sentence*/
  end


end // end SY0BSAD

// validate gpc code
Function SY0BSAE()

       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY0BM001.XGPCD == "99" /* cannot ever use these codes*/
   || SY0BM001.XGPCD == "00")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM001.XGPCD cursor, bold;
    SY0BM001.XGPDESC = "INVALID";
    return;
  end

  if (SY0BM001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM001.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(33); /* status code is inactive*/
      set SY0BM001.XGPCD cursor, bold;
      SY0BM001.XGPDESC = "INACTIVE";
      exit stack;
    end
  else
    set SY0BM001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY0BM001.XGPDESC = "INVALID";
    exit stack;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/


   /* MOVE 'Y' TO COMMAREA.CAALVL(2);*/
   /* MOVE 'Y' TO COMMAREA.CAALVL(3);*/

  if (SY0BM001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY0BM001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY0BM001.XGPDESC = "INVALID";
    exit stack;
  else
    if (SY0BM001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY0BM001.XGPCD cursor, bold;
      SY0BM001.XGPDESC = "INVALID";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWXGP = SY0BM001.XGPCD;

end // end SY0BSAE

// call date routine
Function SY0BSAF()


  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0222)
    return;
  else
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0BSAF";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC) {isExternal = yes};
      converseLib.validationFailed(30); /* invalid date entered*/
      exit stack;
    else
      /* next sentence*/
    end
  end

end // end SY0BSAF

// validate dimension code
Function SY0BSAG()


       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  /*IF SY0BM001.XDMCD EQ '99';*/
  if (SY0BM001.XDMCD != "00")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM001.XDMCD cursor, bold;
    return;
  end

  if (SY0BM001.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
      if (SY0BM001.XGPCD == "03"
       && SY0BM001.XDMCD != "00")
        set SY0BM001.XDMCD cursor, bold;
        converseLib.validationFailed(3); /* invalid code*/
      end
    else
      set SY0BM001.XDMCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    set SY0BM001.XDMCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY0BSAG

// get life cycle effective date
Function SY0BSAH()

       /* ***************************************/
       /* *  the life cycle eff. date must be  **/
       /* *  todays date - 1 day.              **/
       /* *                                    **/
       /* ***************************************/

  TA2REC.TA2DTOPT = "GETDATE";
  SY0BSAF();
  SY0BW01.SY0BWTDT = TA2REC.TA2GRGGN;
  SY0BW01.TA2GRGAN = TA2REC.TA2GRGAN;
  SY0BW01.TA2JULNN = TA2REC.TA2JULNN;
  /*  */
  /* --------------------- Y2K OUT BEGIN -----------*/
  /*  */
  /* SY0BW01.TA2JULNN = SY0BW01.TA2JULNN - 1;*/
  /*  */
  /* --------------------- Y2K OUT END -------------*/
  /*  */
  /*  */
  /* --------------------- Y2K IN BEGIN -----------*/
  /*  */
  /* if the date is 1st. JAN 2000, then make it 31st. DEC 1999*/
  /* otherwise just subtract 1 to get the previous day*/
  /*  */
  if (SY0BW01.TA2JULNN == 00001)
    SY0BW01.TA2JULNN = 99365;
  else
    SY0BW01.TA2JULNN = SY0BW01.TA2JULNN - 1;
  end
  /*  */
  /* --------------------- Y2K IN END -------------*/
  /*  */
  TA2REC.TA2DTOPT = "JULGREG";
  TA2REC.TA2JULNN = SY0BW01.TA2JULNN;
  SY0BSAF();
  SY0BW01.SY2CEDT1 = TA2REC.TA2GRGGN;

end // end SY0BSAH

// move dup. sizes to sy0bm006
Function SY0BSB1()


       /* ******************************************/
       /* *   move sy3rec sizes to sy0bm006       **/
       /* *                                       **/
       /* ******************************************/

  SY0BWIDX = 40;

  while (SY0BWIDX > 0)
    if (SY3REC.SY3FRGUT[SY0BWIDX] != " "
     && SY3REC.XDVCD[SY0BWIDX] != " ")
      SY0BM006.SY3FRGUT[SY0BWIDX] = SY3REC.SY3FRGUT[SY0BWIDX];
      SY0BM006.XDVCD[SY0BWIDX] = SY3REC.XDVCD[SY0BWIDX];
    else
      set SY0BM006.SY3FRGUT[SY0BWIDX] initialAttributes;
      set SY0BM006.XDVCD[SY0BWIDX] initialAttributes;
    end
    SY0BWIDX = SY0BWIDX - 1;
  end
end // end SY0BSB1

// set sy0bm006 fringe/gut define
Function SY0BSB2()

       /* ***************************************/
       /* *  if size scale is changed          **/
       /* *  set sy0bm006 clear                **/
       /* ***************************************/

  SY0BW01.SY0BWIDX = 40;
  while (SY0BW01.SY0BWIDX > 0)
    SY0BM006.SY3FRGUT[SY0BWIDX] = " ";
    SY0BM006.XDVCD[SY0BWIDX] = " ";
    SY0BM006.SY4IDDSC[SY0BWIDX] = " ";
    SY0BWIDX = SY0BWIDX - 1;
  end
end // end SY0BSB2

// set fringe/gut fields clear
Function SY0BSB3()


       /* ***************************************/
       /* *  set sy0bm006 clear                **/
       /* ***************************************/

  SY0BW01.SY0BWIDX = 40;
  while (SY0BW01.SY0BWIDX > 0)
    SY0BM006.SY3FRGUT[SY0BWIDX] = " ";
    SY0BM006.XDVCD[SY0BWIDX] = " ";
    SY0BWIDX = SY0BWIDX - 1;
  end
end // end SY0BSB3

// verify style
Function SY0BSBA()

       /* *********************************************/
       /* *  VERIFY IF STYLE ALREADY EXISTS          **/
       /* *  IF PF13 PRESSED RECORD CAN NOT EXISTS   **/
       /* *  IF PF14,PF15 PRESSED MOVE STYLE RECORD  **/
       /* *   TO STYLE SCREENS 1 and 2.              **/
       /* *********************************************/


  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

  if (converseVar.eventKey is pf13) /* If adding a new style*/
    SY0BS-SY1-CHK(); /* Check for dups*/
  end

  set SY1REC empty;
  set SQLCA empty;

  SY1REC.XGPCD = SY0BM001.XGPCD;
  SY1REC.SY1STNBR = SY0BM001.SY1STNBR;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (converseVar.eventKey is pf13)
      converseLib.validationFailed(4); /* record already exists*/
      set SY0BM001.SY1STNBR cursor, bold;
      exit stack;
    else
      if (SY0BM001.SY0BMDSY != " " /* If duplicating*/
       && SY1REC.SY4SZSCL != SYWREC.SY4SZSCL) /* scales not =*/
        converseLib.validationFailed(100); /* Scales must be the same*/
        set SY0BM001.SY0BMDSY cursor, bold;
        exit stack;
      end
      move SY1REC to SY0BM002 withV60Compat;
      move SY1REC to SY0BM003 withV60Compat;
      move SY1REC to SY0BM005 withV60Compat;
      move SY1REC to SY0BM006 withV60Compat;
      move SY1REC to SY0BM007 withV60Compat;
      move SY1REC to SY0BM008 withV60Compat;
      SY0BSBN(); /* get size scale desc.*/
      SY0BSEF(); /* get blank style desc.*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (converseVar.eventKey is pf13)
        return;
      else
        converseLib.validationFailed(5); /* record does not exists*/
        set SY0BM001.SY1STNBR cursor, bold;
        exit stack;
      end
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY0BSBA ";
      TA1REC.TA1LOCAT[3] = "IO0120  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error*/
      set SY0BM001.SY1STNBR cursor, bold;
      exit stack;
    end
  end


end // end SY0BSBA

// get duplicate style
Function SY0BSBB()


       /* ******************************************/
       /* *      GET DUPLICATE STYLE DATA         **/
       /* *                                       **/
       /* *   1. IF DUP. STYLE EXISTS MOVE TO     **/
       /* *      TO STYLE SCREENS 1 AND 2.        **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;
  set SY1REC empty;

  SY1REC.XGPCD = SY0BM001.XGPCD;
  SY1REC.SY1STNBR = SY0BM001.SY0BMDSY;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SYWREC.SY4SZSCL = SY1REC.SY4SZSCL;
    if (converseVar.eventKey is pf13) /* If creating new style*/
      move SY1REC to SY0BM002 withV60Compat;
      move SY1REC to SY0BM003 withV60Compat;
      move SY1REC to SY0BM005 withV60Compat;
      move SY1REC to SY0BM006 withV60Compat;
      move SY1REC to SY0BM007 withV60Compat;
      move SY1REC to SY0BM008 withV60Compat;
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style record does not exists*/
      set SY0BM001.SY0BMDSY cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY0BSBB  ";
      TA1REC.TA1LOCAT[3] = "IO0120   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM??";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error....*/
      set SY0BM001.SY0BMDSY cursor, bold;
      exit stack;
    end
  end


end // end SY0BSBB

// get duplicate color/dim
Function SY0BSBC()


       /* ******************************************/
       /* *  GET DUP. COLOR/DIM RECORD            **/
       /* *  AND DUP. SIZES IF PF13 or PF14.      **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;
  set TA2REC empty;
  set SY2REC empty;
  set SY3REC empty;

   /* VERIFY DIM-CD IS 00 OR NOT*/
  if (SY0BM001.SY0BMDDM != "00")
    converseLib.validationFailed(3); /* Invalid code*/
    set SY0BM001.SY0BMDDM cursor, bold;
    exit stack;
  end

  SY2REC.XGPCD = SY0BM001.XGPCD;
  SY3REC.XGPCD = SY0BM001.XGPCD;
  SY2REC.SY1STNBR = SY0BM001.SY0BMDSY;
  SY3REC.SY1STNBR = SY0BM001.SY0BMDSY;
  SY2REC.SY2CLRID = SY0BM001.SY0BMDCL;
  SY3REC.SY2CLRID = SY0BM001.SY0BMDCL;
  SY2REC.XDMCD = SY0BM001.SY0BMDDM;
  SY3REC.XDMCD = SY0BM001.SY0BMDDM;


  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SY2REC to SY0BM005 withV60Compat;
    if (SY0BM001.XGPCD == "02")
      SY0BM005.XCLCD[1] = SY2REC.XCLCD1;
      SY0BM005.XCLCD[2] = SY2REC.XCLCD4;
      SY0BM005.XCLCD[3] = SY2REC.XCLCD2;
      SY0BM005.XCLCD[4] = SY2REC.XCLCD3;
    else
      SY0BM005.XCLCD[1] = SY2REC.XCLCD1;
      SY0BM005.XCLCD[2] = SY2REC.XCLCD2;
      SY0BM005.XCLCD[3] = SY2REC.XCLCD3;
      SY0BM005.XCLCD[4] = SY2REC.XCLCD4;
    end
    move SY2REC to SY0BM008 withV60Compat;
    /**/
    set TA2REC empty;
    TA2REC.TA2GRGGN = SY2REC.SY2POFBD;
    SY0BSJG(); /* reformat offering dates*/
    SY0BM005.SY2POFBD = TA2REC.TA2GRGAN;
    /**/
    set TA2REC empty;
    TA2REC.TA2GRGGN = SY2REC.SY2POFXD;
    SY0BSJG(); /* reformat offering dates*/
    SY0BM005.SY2POFXD = TA2REC.TA2GRGAN;
    /**/
    set TA2REC empty;
    TA2REC.TA2GRGGN = SY2REC.SY2FOFBD;
    SY0BSJG(); /* reformat offering dates*/
    SY0BM005.SY2FOFBD = TA2REC.TA2GRGAN;
    /**/
    set TA2REC empty;
    TA2REC.TA2GRGGN = SY2REC.SY2FOFXD;
    SY0BSJG(); /* reformat offering dates*/
    SY0BM005.SY2FOFXD = TA2REC.TA2GRGAN;
    /**/
    set TA2REC empty;
    TA2REC.TA2GRGGN = SY2REC.SY2NOFBD;
    SY0BSJG(); /* reformat offering dates*/
    SY0BM005.SY2NOFBD = TA2REC.TA2GRGAN;
    /**/
    set TA2REC empty;
    TA2REC.TA2GRGGN = SY2REC.SY2NOFXD;
    SY0BSJG(); /* reformat offering dates*/
    SY0BM005.SY2NOFXD = TA2REC.TA2GRGAN;
    /**/
    SY0BM006.SY2CLRID = SY2REC.SY2CLRID;
    SY0BM006.SY2CLRDS = SY2REC.SY2CLRDS;
    SY0BM006.XDMCD = SY2REC.XDMCD;
    SY0BM007.SY2CLRID = SY2REC.SY2CLRID;
    SY0BM007.SY2CLRAB = SY2REC.SY2CLRAB;
    SY0BM007.XDMCD = SY2REC.XDMCD;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(7);
                                   /* color/dimension record does not exist*/
      set SY0BM001.SY0BMDCL cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY0BSBC ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM??";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error*/
      set SY0BM001.SY0BMDCL cursor, bold;
      exit stack;
    end
  end


  if (converseVar.eventKey is pf15)
    converseLib.validationFailed(41); /* can not use duplicate size for pf15 key*/
    set SY0BM001.SY0BMDSY cursor, bold;
    exit stack;
  end


       /* ******************************************/
       /* *  GET DUP. SIZE RECORD.                **/
       /* *  THE SIZE SCREEN WILL ALWAY BE CLEARED**/
       /* *  SO THAT A FRESH SIZE ROW WILL BE     **/
       /* *  DISPLAYED.                           **/
       /* ******************************************/


  set SQLCA empty;

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY0BSB3();
                                   /* set fringe/gut sy0bm006 screen empty*/
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SY0BSBC ";
    TA1REC.TA1LOCAT[3] = "IO0140  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM??";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSIZE001";
    TA1TBLKE = SY3REC.SY3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(22); /* size table error*/
    exit stack;
  end
end // end SY0BSBC

// verify color/dim
Function SY0BSBD()


       /* *******************************************/
       /* *  VERIFY IF COLOR RECORD EXISTS          **/
       /* *   1. IF PF13,PF14 pressed the color     **/
       /* *      record can not exists.             **/
       /* *   2. IF PF15 PRESSED COLOR RECORD MUST  **/
       /* *      EXISTS AND MOVE COLOR RECORD TO    **/
       /* *      COLOR SCREEN.                      **/
       /* *                                         **/
       /* *******************************************/


  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

  SY0BS-SY2-CHK(); /* Check for dups between GPC 02 & 03*/

  set SY2REC empty;
  set SQLCA empty;

  SY2REC.XGPCD = SY0BM001.XGPCD;
  SY2REC.SY1STNBR = SY0BM001.SY1STNBR;
  SY2REC.SY2CLRID = SY0BM001.SY2CLRID;
  SY2REC.XDMCD = SY0BM001.XDMCD;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (converseVar.eventKey is pf15)
      move SY2REC to SY0BM005 withV60Compat;
      move SY2REC to SY0BM008 withV60Compat;
      SY0BM006.SY2CLRID = SY2REC.SY2CLRID;
      SY0BM006.SY2CLRDS = SY2REC.SY2CLRDS;
      SY0BM006.XDMCD = SY2REC.XDMCD;
      SY0BM007.SY2CLRID = SY2REC.SY2CLRID;
      SY0BM007.SY2CLRAB = SY2REC.SY2CLRAB;
      SY0BM007.XDMCD = SY2REC.XDMCD;
      return;
    else
      converseLib.validationFailed(2); /* color/dimension already exists*/
      set SY0BM001.SY2CLRID cursor, bold;
      exit stack;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (converseVar.eventKey is pf15)
        converseLib.validationFailed(7); /* color/dimension does not exists*/
        set SY0BM001.SY2CLRID cursor, bold;
        exit stack;
      else
        return;
      end
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY0BSBD ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM??";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error.....*/
      set SY0BM001.SY2CLRID cursor, bold;
      exit stack;
    end
  end

end // end SY0BSBD

// verify sizes
Function SY0BSBE()



       /* ********************************************/
       /* *   VERIFY IF SIZES EXISTS.               **/
       /* *     1. IF PF13,PF14 PRESSED SIZE RECORD **/
       /* *        can not exists.                  **/
       /* *     2. IF PF15 PRESSED SIZE RECORD MUST **/
       /* *        EXISTS AND MOVED TO SIZE SCREEN  **/
       /* *                                         **/
       /* ********************************************/


  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

  set SY3REC empty;
  set SQLCA empty;

  SY3REC.XGPCD = SY0BM001.XGPCD;
  SY3REC.SY1STNBR = SY0BM001.SY1STNBR;
  SY3REC.SY2CLRID = SY0BM001.SY2CLRID;
  SY3REC.XDMCD = SY0BM001.XDMCD;

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (converseVar.eventKey is pf15)
      if (SY2REC.XDR-PROD-REG-CD in SYWREC.XDR-PROD-REG-CD)
        SY0BSBN(); /* get size scale desc.*/
        move SY3REC to SY0BM006 withV60Compat;
        return;
      else
        converseLib.validationFailed(193); /* User is wrong region*/
        set SY0BM001.SY2CLRID cursor, bold;
        exit stack;
      end
    else
      converseLib.validationFailed(6); /* size record already exists*/
      set SY0BM001.SY2CLRID cursor, bold;
      exit stack;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (converseVar.eventKey is pf15)
        converseLib.validationFailed(8); /* size record does not exists*/
        set SY0BM001.SY2CLRID cursor, bold;
        exit stack;
      else
        return;
      end
    else

      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY0BSBE ";
      TA1REC.TA1LOCAT[3] = "IO0140  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM??";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSIZE001";
      TA1TBLKE = SY3REC.SY3KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(22); /* size table error....*/
      set SY0BM001.SY2CLRID cursor, bold;
      exit stack;
    end
  end


end // end SY0BSBE

// get code desc. for style #1
Function SY0BSBF()


       /* ******************************************/
       /* *   GET CODE DESC. FOR STYLE SCREENS    **/
       /* *   1 AND 2.                            **/
       /* *                                       **/
       /* ******************************************/


       /* ******************************************/
       /* *    GET COST CATEGORY CODE DESC.       **/
       /* ******************************************/

  SY0BSBJ();


       /* ******************************************/
       /* *   GET GENDER CODE DESC.               **/
       /* ******************************************/


  SY0BSBK();

       /* ******************************************/
       /* *   GET GENDER AGE CODE DESC.           **/
       /* ******************************************/

  SY0BSBL();

       /* ******************************************/
       /* *   GET UNIT OF MEASURE CODE DESC.      **/
       /* ******************************************/

  SY0BSBM();

       /* ******************************************/
       /* *   GET BRAND CODE DESC.                **/
       /* ******************************************/

  SY0BSCQ();

       /* ******************************************/
       /* *    GET SIZE SCALE CODE DESC.          **/
       /* ******************************************/

  SY0BSBN();


end // end SY0BSBF

// get code desc. for color
Function SY0BSBG()
       /* ********************************************/
       /* *   GET THE CODE DESC. FOR THE COLOR      **/
       /* *   SCREEN  (SY0BM005)                    **/
       /* ********************************************/

   /* Set-up key area in SY0BW01 and look-up in YSNTBL*/
  SY0BW01.SY0BW-YSN-FL = "Y";
  SY0BW01.XGP-GPC-CD = SY0BM001.XGPCD;
  if (SYWREC.XDR-PROD-REG-CD[1] == "02") /* Europe*/
    SY0BW01.XDR-PROD-REG-CD = "02";
  else
    SY0BW01.XDR-PROD-REG-CD = "01";
  end
  if (SY0BM005.XSECD in XSETBL.XSECD)
    if (XSETBL.XSESETYP[sysVar.arrayIndex] == " ") /* Season not in XSN*/
      SY0BW01.SY0BW-YSN-FL = "N";
    else
      SY0BW01.XSE-SESN-CD = XSETBL.XSESETYP[sysVar.arrayIndex];
    end
  end
  if (SY0BM005.XSNYR > 70)
    SY0BW01.XSN-SESN-YR-RNG = 1900 + SY0BM005.XSNYR;
  else
    SY0BW01.XSN-SESN-YR-RNG = 2000 + SY0BM005.XSNYR;
  end
  SY0BW01.SY0BWIDX = 1;
  while (SY0BW01.SY0BWIDX > 0
   && SY0BW01.SY0BW-YSN-FL == "Y")
    if (YSNTBL.XGPCD[SY0BWIDX] == "99") /* At end of table*/
      SY0BW01.SY0BW-YSN-FL = "N";
    else
      if (YSNTBL.XGPCD[SY0BWIDX] == SY0BW01.XGP-GPC-CD
       && YSNTBL.XDR-PROD-REG-CD[SY0BWIDX] == SY0BW01.XDR-PROD-REG-CD
       && YSNTBL.XSECD[SY0BWIDX] == SY0BW01.XSE-SESN-CD
       && YSNTBL.XSNYR[SY0BWIDX] == SY0BW01.XSN-SESN-YR-RNG
       && YSNTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BW01.XSN-SESN-BDT = YSNTBL.XSN-SESN-BDT[SY0BWIDX];
        SY0BW01.XSN-SESN-XDT = YSNTBL.XSN-SESN-XDT[SY0BWIDX];
        SY0BW01.SY0BWIDX = 0; /* To terminate loop*/
      else
        SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
      end
    end
  end

       /* ********************************************/
       /* * verify prop beginning offering date     **/
       /* ********************************************/

  SY0BSJA();

       /* ********************************************/
       /* * verify prop ending offering date        **/
       /* ********************************************/

  SY0BSJB();

       /* ********************************************/
       /* * verify futures beginning offering date  **/
       /* ********************************************/

  SY0BSJC();

       /* ********************************************/
       /* * verify futures ending offering date     **/
       /* ********************************************/

  SY0BSJD();

       /* ********************************************/
       /* * verify n.i.l.  beginning offering date  **/
       /* ********************************************/

  SY0BSJE();

       /* ********************************************/
       /* * verify n.i.l.  ending offering date     **/
       /* ********************************************/

  SY0BSJF();

  if (SY2REC.SY2POFXD < SY2REC.SY2POFBD
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(132); /* end date < begin date*/
    set SY0BM005.SY2POFXD cursor, bold;
  end

  if (SY2REC.SY2FOFXD < SY2REC.SY2FOFBD
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(132); /* end date < begin date*/
    set SY0BM005.SY2FOFXD cursor, bold;
  end

  if (SY2REC.SY2NOFXD < SY2REC.SY2NOFBD
   && converseVar.validationMsgNum == 0)
    converseLib.validationFailed(132); /* end date < begin date*/
    set SY0BM005.SY2NOFXD cursor, bold;
  end

       /* ********************************************/
       /* * GET MATERIAL CONTENT UPPER CODE DESC.   **/
       /* ********************************************/

  SY0BSCA();

       /* ********************************************/
       /* *    GET OPTIONAL GROUP CODE DESC.        **/
       /* ********************************************/

  SY0BSCB();

       /* ********************************************/
       /* *   GET LOGO COLOR CODE DESC.             **/
       /* ********************************************/

  SY0BSCT();

       /* ********************************************/
       /* *   GET TERTIARY COLOR CODE DESC.         **/
       /* ********************************************/

  SY0BSCC();

       /* ********************************************/
       /* *   GET SECONDARY COLOR CODE DESC.        **/
       /* ********************************************/
  SY0BSCD();

       /* ********************************************/
       /* *    GET PRIMARY COLOR CODE DESC.         **/
       /* ********************************************/

  SY0BSCE();

       /* ********************************************/
       /* *   GET PRODUCT TYPE CODE DESC.           **/
       /* ********************************************/

  SY0BSCF();

       /* ********************************************/
       /* *    GET DIVISION CODE DESC.              **/
       /* ********************************************/

  SY0BSCG();

       /* ********************************************/
       /* *    GET SEASON CODE DESC.                **/
       /* ********************************************/

  SY0BSCH();

       /* ********************************************/
       /* *    GET DIMENSION CODE AND DESC.         **/
       /* ********************************************/

  SY0BSDA();

       /* ********************************************/
       /* *   GET PRODUCT line code desc.           **/
       /* ********************************************/

  SY0BS-VAL-XPL();

       /* ********************************************/
       /* *   GET PRODUCT category code desc.       **/
       /* ********************************************/

  SY0BSCO();

       /* ********************************************/
       /* *   GET PRODUCT Collection code desc.     **/
       /* ********************************************/

  SY0BSCP();


end // end SY0BSBG

// get warehouse code desc.
Function SY0BSBI()

       /* ******************************************/
       /* *   GET ALL SIX WAREHOUSE CODES         **/
       /* ******************************************/


  SY0BWIDX = 1;

  while (SY0BWIDX <= 6)
    if (SY0BM008.XWHCD[SY0BWIDX] == "99")
      converseLib.validationFailed(3); /* invalid code*/
      SY0BM008.XWHABRV[SY0BWIDX] = "INVALID";
      set SY0BM008.XWHCD[SY0BWIDX] cursor, bold;
    else
      if (SY0BM008.XWHCD[SY0BWIDX] == " ")
        SY0BM008.XWHABRV[SY0BWIDX] = " ";
      else
        if (SY0BM008.XWHCD[SY0BWIDX] == "99")
          set SY0BM008.XWHCD[SY0BWIDX] cursor, bold;
          SY0BM008.XWHABRV[SY0BWIDX] = "INVALID";
          converseLib.validationFailed(3); /* invalid*/
        else
          if (SY0BM008.XWHCD[SY0BWIDX] in XWHTBL.XWHCD)
            if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
              SY0BM008.XWHABRV[SY0BWIDX] = XWHTBL.XWHABRV[sysVar.arrayIndex];
            else
              SY0BM008.XWHABRV[SY0BWIDX] = "INACTIVE";
              set SY0BM008.XWHCD[SY0BWIDX] cursor, bold;
              converseLib.validationFailed(33); /* status is inactive*/
            end
          else
            set SY0BM008.XWHCD[SY0BWIDX] cursor, bold;
            SY0BM008.XWHABRV[SY0BWIDX] = "INVALID";
            converseLib.validationFailed(3); /* invalid*/
          end
        end
      end
    end
    SY0BWIDX = SY0BWIDX + 1;
  end
end // end SY0BSBI

// get cost category code desc.
Function SY0BSBJ()

       /* ******************************************/
       /* * VERIFY COST CAT. CODE AND GET         **/
       /* * COST CAT. CODE DESC.                  **/
       /* ******************************************/


  if (SY0BM002.XCWCD == "  ")
    SY0BM002.XCWDESC = " ";
    return;
  else
    if (SY0BM002.XCWCD == "999")
      converseLib.validationFailed(3); /* invalid code*/
      SY0BM002.XCWDESC = "INVALID ";
      set SY0BM002.XCWCD cursor, bold;
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XCWTBL.XCWCD[SY0BWIDX] != "999")
    if (SY0BM002.XCWCD == XCWTBL.XCWCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XCWTBL.XGPCD[SY0BWIDX])
      if (XCWTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM002.XCWDESC = XCWTBL.XCWDESC[SY0BWIDX];
        return;
      else
        SY0BM002.XCWDESC = "INACTIVE";
        set SY0BM002.XCWCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM002.XCWCD cursor, bold;
  SY0BM002.XCWDESC = "INVALID";


end // end SY0BSBJ

// get gender code desc.
Function SY0BSBK()

       /* ******************************************/
       /* *  VERIFY GENDER CODE AND GET DESC.     **/
       /* ******************************************/

  if (SY0BM002.XGCCD == "99")
    SY0BM002.XGCDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM002.XGCCD cursor, bold;
    return;
  end


  if (SY0BM002.XGCCD in XGCTBL.XGCCD)
    if (XGCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM002.XGCDESC = XGCTBL.XGCDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(33); /* status code is inactive*/
      set SY0BM002.XGCCD cursor, bold;
      SY0BM002.XGCDESC = "INACTIVE";
    end
  else
    set SY0BM002.XGCCD cursor, bold;
    SY0BM002.XGCDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY0BSBK

// get gender age code desc.
Function SY0BSBL()

        /* ******************************************/
        /* * VERIFY GENDER AGE CODE AND GET GENDER **/
        /* * AGE DESC.                             **/
        /* ******************************************/


  if (SY0BM002.XGACD == "99")
    SY0BM002.XGADESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM002.XGACD cursor, bold;
    return;
  end

  SY0BW01.SY0BWIDX = 1;

  while (XGATBL.XGACD[SY0BWIDX] != "99")
    if (SY0BM002.XGACD == XGATBL.XGACD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XGATBL.XGPCD[SY0BWIDX])
      if (XGATBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM002.XGADESC = XGATBL.XGADESC[SY0BWIDX];
        if (SY0BM002.XGCCD == XGATBL.XGCCD[SY0BWIDX])
          return;
        else
          set SY0BM002.XGACD cursor, bold;
          converseLib.validationFailed(139); /* gender-age invalid with current*/
                                   /* gender-code*/
          return;
        end
      else
        SY0BM002.XGADESC = "INACTIVE";
        set SY0BM002.XGACD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM002.XGACD cursor, bold;
  SY0BM002.XGADESC = "INVALID";


end // end SY0BSBL

// get uom code desc.
Function SY0BSBM()

       /* ***************************************/
       /* *  verify uom code and get uom       **/
       /* *  description.                      **/
       /* ***************************************/

  if (SY0BM002.XUMCD == "99")
    SY0BM002.XUMDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM002.XUMCD cursor, bold;
    return;
  end

  if (SY0BM002.XUMCD in XUMTBL.XUMCD)
    if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM002.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(33); /* status code is inactive*/
      set SY0BM002.XUMCD cursor, bold;
      SY0BM002.XUMDESC = "INACTIVE";
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    SY0BM002.XUMDESC = "INVALID";
    set SY0BM002.XUMCD cursor, bold;
  end
end // end SY0BSBM

// get size scale code desc.
Function SY0BSBN()

       /* ******************************************/
       /* * VERIFY SIZE SCALE CODE AND            **/
       /* * GET THE SIZE SCALE DESC.              **/
       /* ******************************************/

  if (SY0BM002.SY4SZSCL == " ")
    set SY0BM002.SY4SZSCL cursor, bold;
    converseLib.validationFailed(40); /* required field*/
    return;
  else
    /* next sentence*/
  end


  if (SY0BW01.SY4SZSCL == SY0BM002.SY4SZSCL)
    SY0BM002.SY4ZDESC = SY4REC.SY4ZDESC;
    move SY4REC to SY0BM006 withV60Compat;
    return;
  else
    SY4REC.SY4SZSCL = SY0BM002.SY4SZSCL;
    SY0BW01.SY4SZSCL = SY0BM002.SY4SZSCL;
    set SQLCA empty;

    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      SY0BSB2(); /* set fringe/gut fields to empty*/
      SY0BM002.SY4ZDESC = SY4REC.SY4ZDESC;
      move SY4REC to SY0BM006 withV60Compat;
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        SY0BW01.SY4SZSCL = "  ";
        SY0BM002.SY4ZDESC = "INVALID";
        converseLib.validationFailed(3); /* invalid code*/
        set SY0BM002.SY4SZSCL cursor, bold;
        return;
      else
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B   ";
        TA1REC.TA1LOCAT[1] = "S        ";
        TA1REC.TA1LOCAT[2] = "SY0BSBN  ";
        TA1REC.TA1LOCAT[3] = "IO0040   ";
        TA1REC.TA1LOCAT[4] = " ";
        TA1REC.TA1MAP = "SY0BM002";
        TA1REC.TA1DBASE = "DPROD.";
        TA1REC.TA1TBLVU = "VSCALE01";
        TA1TBLKE = SY4REC.SY4SZSCL;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(53); /* size scale record error*/
        return;
      end
    end
  end


end // end SY0BSBN

// get code desc. for style #2
Function SY0BSBO()

       /* ******************************************/
       /* *   GET CODE DESC. FOR THE SECOND       **/
       /* *   STYLE SCREEN. (SY0BM003)            **/
       /* *                                       **/
       /* ******************************************/


       /* ******************************************/
       /* * GET FORCASTER CODE DESC.              **/
       /* ******************************************/

  SY0BSCS();

       /* ******************************************/
       /* * GET MATERIAL LOWER CONTENT CODE DESC. **/
       /* ******************************************/

  SY0BSBP();

       /* ******************************************/
       /* *   GET SPECIAL FEATURE CODE DESC.      **/
       /* ******************************************/

  SY0BSBQ();

       /* ******************************************/
       /* *    GET CONSTRUCTION CODE DESC.        **/
       /* ******************************************/

  SY0BSBT();

       /* ******************************************/
       /* *   GET ROYALRY CODE DESC.              **/
       /* ******************************************/

  SY0BSBU();

       /* ******************************************/
       /* *    VALIDATE MOLD AND LAST.            **/
       /* ******************************************/

  if (SY0BM001.XGPCD == "02" /* if footwear GPC*/
   && SY0BM001.SY1STNBR > "000000") /* not equip. code*/
    SY0B200(); /* Check tooling tables*/
    if (SY0BM003.FY8LSTCD == " ") /* cannot be blank*/
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.FY8LSTCD cursor, modified, bold;
    end
    if (SY0BM003.FY7MLDCD == " ") /* cannot be blank*/
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.FY7MLDCD cursor, modified, bold;
    end
  end

       /* ******************************************/
       /* *    GET BODY TYPE CODE DESC.           **/
       /* ******************************************/

  SY0BSBX();

       /* ******************************************/
       /* *   GET SILHOUETTE CODE DESC.           **/
       /* ******************************************/

  SY0BSBV();

       /* ******************************************/
       /* *     GET SPORT ACTIVITY CODE DESC.     **/
       /* ******************************************/

  SY0BSBW();


       /* ******************************************/
       /* *     GET FAMILY CODE DESC.             **/
       /* ******************************************/

  SY0BSBY();


end // end SY0BSBO

// get mat. lower content cd desc
Function SY0BSBP()

       /* ******************************************/
       /* *  GET MATERIAL CONTENT LOWER CODE      **/
       /* *  AND THE DESCRIPTION.                 **/
       /* *  NOTE: These are now called outsole & **/
       /* *        midsole (primary & secondary). **/
       /* ******************************************/

  if (SY0BM003.XMLCD[1] == " ")
    SY0BM003.XMLCD[1] = "00";
  end

  if (SY0BM003.XMLCD[1] == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM003.XMLCD[1] cursor, bold;
    SY0BM003.XMLDESC[1] = "INVALID  ";
  else
    SY0BM003.XMLDESC[1] = " ";
    SY0BW01.SY0BWIDX = 1;
    while (XMLTBL.XMLCD[SY0BWIDX] != "99"
     && SY0BM003.XMLDESC[1] == " ")
      if (SY0BM003.XMLCD[1] == XMLTBL.XMLCD[SY0BWIDX])
        if (XMLTBL.XXXSTAT[SY0BWIDX] == "A")
          SY0BM003.XMLDESC[1] = XMLTBL.XMLDESC[SY0BWIDX];
        else
          SY0BM003.XMLDESC[1] = "INACTIVE";
          set SY0BM003.XMLCD[1] cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
        end
      end
      SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
    end
    if (SY0BM003.XMLDESC[1] == " ")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XMLCD[1] cursor, bold;
      SY0BM003.XMLDESC[1] = "INVALID";
    end
  end

  if (SY0BM003.XMLCD[2] == " ")
    SY0BM003.XMLCD[2] = "00";
  end

  if (SY0BM003.XMLCD[2] == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM003.XMLCD[2] cursor, bold;
    SY0BM003.XMLDESC[2] = "INVALID  ";
  else
    SY0BM003.XMLDESC[2] = " ";
    SY0BW01.SY0BWIDX = 1;
    while (XMLTBL.XMLCD[SY0BWIDX] != "99"
     && SY0BM003.XMLDESC[2] == " ")
      if (SY0BM003.XMLCD[2] == XMLTBL.XMLCD[SY0BWIDX])
        if (XMLTBL.XXXSTAT[SY0BWIDX] == "A")
          SY0BM003.XMLDESC[2] = XMLTBL.XMLDESC[SY0BWIDX];
        else
          SY0BM003.XMLDESC[2] = "INACTIVE";
          set SY0BM003.XMLCD[2] cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
        end
      end
      SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
    end
    if (SY0BM003.XMLDESC[2] == " ")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XMLCD[2] cursor, bold;
      SY0BM003.XMLDESC[2] = "INVALID";
    end
  end

  if (SY0BM003.XMLCD[3] == " ")
    SY0BM003.XMLCD[3] = "00";
  end

  if (SY0BM003.XMLCD[3] == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM003.XMLCD[3] cursor, bold;
    SY0BM003.XMLDESC[3] = "INVALID  ";
  else
    SY0BM003.XMLDESC[3] = " ";
    SY0BW01.SY0BWIDX = 1;
    while (XMLTBL.XMLCD[SY0BWIDX] != "99"
     && SY0BM003.XMLDESC[3] == " ")
      if (SY0BM003.XMLCD[3] == XMLTBL.XMLCD[SY0BWIDX])
        if (XMLTBL.XXXSTAT[SY0BWIDX] == "A")
          SY0BM003.XMLDESC[3] = XMLTBL.XMLDESC[SY0BWIDX];
        else
          SY0BM003.XMLDESC[3] = "INACTIVE";
          set SY0BM003.XMLCD[3] cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
        end
      end
      SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
    end
    if (SY0BM003.XMLDESC[3] == " ")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XMLCD[3] cursor, bold;
      SY0BM003.XMLDESC[3] = "INVALID";
    end
  end

  if (SY0BM003.XMLCD[4] == " ")
    SY0BM003.XMLCD[4] = "00";
  end

  if (SY0BM003.XMLCD[4] == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM003.XMLCD[4] cursor, bold;
    SY0BM003.XMLDESC[4] = "INVALID  ";
  else
    SY0BM003.XMLDESC[4] = " ";
    SY0BW01.SY0BWIDX = 1;
    while (XMLTBL.XMLCD[SY0BWIDX] != "99"
     && SY0BM003.XMLDESC[4] == " ")
      if (SY0BM003.XMLCD[4] == XMLTBL.XMLCD[SY0BWIDX])
        if (XMLTBL.XXXSTAT[SY0BWIDX] == "A")
          SY0BM003.XMLDESC[4] = XMLTBL.XMLDESC[SY0BWIDX];
        else
          SY0BM003.XMLDESC[4] = "INACTIVE";
          set SY0BM003.XMLCD[4] cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
        end
      end
      SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
    end
    if (SY0BM003.XMLDESC[4] == " ")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XMLCD[4] cursor, bold;
      SY0BM003.XMLDESC[4] = "INVALID";
    end
  end


end // end SY0BSBP

// get special feature code desc.
Function SY0BSBQ()

       /* ******************************************/
       /* *   VERIFY CODE AND GET DESCRIPTION     **/
       /* *   FOR THE all SPECIAL FEATURE CODES.  **/
       /* *                                       **/
       /* ******************************************/

   /* verify the 6th special feature code*/

  SY0BSCI();

   /* verify the 5th special feature code*/

  SY0BSCJ();

   /* verify the 4th special feature code*/

  SY0BSCK();

   /* verify the 3rd special feature code*/

  SY0BSCL();

   /* verify the 2nd special feature code*/

  SY0BSCM();

   /* verify the 1st special feature code*/

  SY0BSCN();
end // end SY0BSBQ

// get construction code desc.
Function SY0BSBT()

       /* ******************************************/
       /* * VERIFY CONSTRUCTION CODE AND GET      **/
       /* * THE DESC.                             **/
       /* ******************************************/


  if (SY0BM003.XCNCD == "  ")
    SY0BM003.XCNDESC = " ";
    return;
  else
    if (SY0BM003.XCNCD == "99")
      converseLib.validationFailed(3); /* invalid code*/
      SY0BM003.XCNDESC = "INVALID";
      set SY0BM003.XCNCD cursor, bold;
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XCNTBL.XCNCD[SY0BWIDX] != "99")
    if (SY0BM003.XCNCD == XCNTBL.XCNCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XCNTBL.XGPCD[SY0BWIDX])
      if (XCNTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.XCNDESC = XCNTBL.XCNDESC[SY0BWIDX];
        return;
      else
        SY0BM003.XCNDESC = "INACTIVE";
        set SY0BM003.XCNCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XCNCD cursor, bold;
  SY0BM003.XCNDESC = "INVALID";


end // end SY0BSBT

// get royalty code desc.
Function SY0BSBU()

       /* ******************************************/
       /* * VERIFY ROYALTY CODE AND GET           **/
       /* * THE DESC.                             **/
       /* ******************************************/


  if (SY0BM003.XRYCD == "  ")
    SY0BM003.XRYDESC = " ";
    return;
  else
    if (SY0BM003.XRYCD == "99")
      converseLib.validationFailed(3); /* invalid code*/
      SY0BM003.XRYDESC = "INVALID";
      set SY0BM003.XRYCD cursor, bold;
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XRYTBL.XRYCD[SY0BWIDX] != "99")
    if (SY0BM003.XRYCD == XRYTBL.XRYCD[SY0BWIDX]
     && SY0BM001.XGPCD == XRYTBL.XGPCD[SY0BWIDX])
      if (XRYTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.XRYDESC = XRYTBL.XRYDESC[SY0BWIDX];
        return;
      else
        SY0BM003.XRYDESC = "INACTIVE";
        set SY0BM003.XRYCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XRYCD cursor, bold;
  SY0BM003.XRYDESC = "INVALID";


end // end SY0BSBU

// get silhouette code desc.
Function SY0BSBV()

       /* ******************************************/
       /* * VERIFY SILHOUETTE CODE AND GET        **/
       /* * THE DESC.                             **/
       /* ******************************************/


  if (SY0BM003.XSUCD == "99")
    SY0BM003.XSUDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM003.XSUCD cursor, bold;
    return;
  else
    /* next sentence*/
  end

  SY0BW01.SY0BWIDX = 1;

  while (XSUTBL.XSUCD[SY0BWIDX] != "99")
    if (SY0BM003.XSUCD == XSUTBL.XSUCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XSUTBL.XGPCD[SY0BWIDX])
      if (XSUTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.XSUDESC = XSUTBL.XSUDESC[SY0BWIDX];
        if (XSUTBL.XGPCD[SY0BWIDX] == "03") /* apparel*/
          if (SY0BM003.XBTCD == XSUTBL.XBTCD[SY0BWIDX])
            return;
          else
            set SY0BM003.XSUCD cursor, bold;
            converseLib.validationFailed(140); /* silh. invalid with current body-type*/
            return;
          end
        else
          return;
        end
      else
        SY0BM003.XSUDESC = "INACTIVE";
        set SY0BM003.XSUCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XSUCD cursor, bold;
  SY0BM003.XSUDESC = "INVALID";


end // end SY0BSBV

// get sport activity code desc.
Function SY0BSBW()

       /* ******************************************/
       /* *  VERIFY SPORT ACTIVITY CODE AND       **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY0BM003.XSPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    SY0BM003.XSPDESC = "INVALID";
    set SY0BM003.XSPCD cursor, bold;
    return;
  end


  if (SY0BM003.XSPCD in XSPTBL.XSPCD)
    if (XSPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM003.XSPDESC = XSPTBL.XSPDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(33); /* status code is inactive*/
      set SY0BM003.XSPCD cursor, bold;
      SY0BM003.XSPDESC = "INACTIVE";
    end
  else
    set SY0BM003.XSPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY0BM003.XSPDESC = "INVALID";
  end

end // end SY0BSBW

// get body type code desc.
Function SY0BSBX()

       /* ******************************************/
       /* * VERIFY BODY TYPE CODE AND GET         **/
       /* * THE DESC.                             **/
       /* ******************************************/


  if (SY0BM003.XBTCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    SY0BM003.XBTDESC = "INVALID";
    set SY0BM003.XBTCD cursor, bold;
    return;
  else
    /* next sentence*/
  end

  SY0BW01.SY0BWIDX = 1;

  while (XBTTBL.XBTCD[SY0BWIDX] != "99")
    if (SY0BM003.XBTCD == XBTTBL.XBTCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XBTTBL.XGPCD[SY0BWIDX])
      if (XBTTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.XBTDESC = XBTTBL.XBTDESC[SY0BWIDX];
        return;
      else
        SY0BM003.XBTDESC = "INACTIVE";
        set SY0BM003.XBTCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XBTCD cursor, bold;
  SY0BM003.XBTDESC = "INVALID";


end // end SY0BSBX

// get family code desc.
Function SY0BSBY()

       /* ******************************************/
       /* *  VERIFY FAMILY CODE AND GET           **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY0BM003.XFMCD == "  ")
    SY0BM003.XFMDESC = "00";
  else
    if (SY0BM003.XFMCD == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XFMCD cursor, bold;
      SY0BM003.XFMDESC = "INVALID";
      return;
    end
  end

  if (SY0BM003.XFMCD in XFMTBL.XFMCD)
    if (XFMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM003.XFMDESC = XFMTBL.XFMDESC[sysVar.arrayIndex];
      if (XFMTBL.XGP-GPC-CD[sysVar.arrayIndex] == "  "
       || XFMTBL.XGP-GPC-CD[sysVar.arrayIndex] == SY0BM001.XGPCD)
         /* NEXT SENTENCE*/
      else
        set SY0BM003.XFMCD cursor, bold;
        converseLib.validationFailed(3); /* invalid code*/
        SY0BM003.SYMSCMSG = "    GPC OF PRODUCT INVALID FOR THIS FAMILY CODE";
      end
    else
      converseLib.validationFailed(33); /* status code is inactive*/
      set SY0BM003.XFMCD cursor, bold;
      SY0BM003.XFMDESC = "INACTIVE";
    end
  else
    set SY0BM003.XFMCD cursor, bold;
    SY0BM003.XFMDESC = " ";
    SY0BM003.XFMDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY0BSBY

// verify mat. content upper cd.
Function SY0BSCA()


       /* ******************************************/
       /* *  VERIFY four material content codes   **/
       /* *  and get their descriptions.          **/
       /* ******************************************/

  SY0BW01.SY0BW-VAL-PCT = "N";
  SY0BW01.SY0BW-XMC-PCT = 0;

  if (SY0BM005.XMCCD1 == "  ")
    SY0BM005.XMCSDESC[1] = " ";
  else
    if (SY0BM005.XMCCD1 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY0BM005.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        set SY0BM005.XMCCD1 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY0BM005.XMCSDESC[1] = "INACTIVE";
      end
    else
      set SY0BM005.XMCCD1 cursor, bold;
      SY0BM005.XMCSDESC[1] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end
  if (SY0BM005.XMCCD1 == "  "
   || SY0BM005.XMCCD1 == "000")
    if (SY0BM005.SY2MCP1 != 0)
      converseLib.validationFailed(148); /* Material percent must be 0*/
      set SY0BM005.SY2MCP1 cursor, bold;
    end
  else
    SY0BW01.SY0BW-VAL-PCT = "Y";
    SY0BW01.SY0BW-XMC-PCT = SY0BW01.SY0BW-XMC-PCT + SY0BM005.SY2MCP1;
  end


  if (SY0BM005.XMCCD2 == "  ")
    SY0BM005.XMCSDESC[2] = " ";
  else
    if (SY0BM005.XMCCD2 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY0BM005.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        set SY0BM005.XMCCD2 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY0BM005.XMCSDESC[2] = "INACTIVE";
      end
    else
      set SY0BM005.XMCCD2 cursor, bold;
      SY0BM005.XMCSDESC[2] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end
  if (SY0BM005.XMCCD2 == "  "
   || SY0BM005.XMCCD2 == "000")
    if (SY0BM005.SY2MCP2 != 0)
      converseLib.validationFailed(148); /* Material percent must be 0*/
      set SY0BM005.SY2MCP2 cursor, bold;
    end
  else
    SY0BW01.SY0BW-VAL-PCT = "Y";
    SY0BW01.SY0BW-XMC-PCT = SY0BW01.SY0BW-XMC-PCT + SY0BM005.SY2MCP2;
  end


  if (SY0BM005.XMCCD3 == "  ")
    SY0BM005.XMCSDESC[3] = " ";
  else
    if (SY0BM005.XMCCD3 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY0BM005.XMCSDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        set SY0BM005.XMCCD3 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY0BM005.XMCSDESC[3] = "INACTIVE";
      end
    else
      set SY0BM005.XMCCD3 cursor, bold;
      SY0BM005.XMCSDESC[3] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end
  if (SY0BM005.XMCCD3 == "  "
   || SY0BM005.XMCCD3 == "000")
    if (SY0BM005.SY2MCP3 != 0)
      converseLib.validationFailed(148); /* Material percent must be 0*/
      set SY0BM005.SY2MCP3 cursor, bold;
    end
  else
    SY0BW01.SY0BW-VAL-PCT = "Y";
    SY0BW01.SY0BW-XMC-PCT = SY0BW01.SY0BW-XMC-PCT + SY0BM005.SY2MCP3;
  end


  if (SY0BM005.XMCCD4 == "  ")
    SY0BM005.XMCSDESC[4] = " ";
  else
    if (SY0BM005.XMCCD4 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY0BM005.XMCSDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        set SY0BM005.XMCCD4 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY0BM005.XMCSDESC[4] = "INACTIVE";
      end
    else
      set SY0BM005.XMCCD4 cursor, bold;
      SY0BM005.XMCSDESC[4] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end
  if (SY0BM005.XMCCD4 == "  "
   || SY0BM005.XMCCD4 == "000")
    if (SY0BM005.SY2MCP4 != 0)
      converseLib.validationFailed(148); /* Material percent must be 0*/
      set SY0BM005.SY2MCP4 cursor, bold;
    end
  else
    SY0BW01.SY0BW-VAL-PCT = "Y";
    SY0BW01.SY0BW-XMC-PCT = SY0BW01.SY0BW-XMC-PCT + SY0BM005.SY2MCP4;
  end

  if (converseVar.validationMsgNum == 0
   && SY0BW01.SY0BW-VAL-PCT == "Y")
    if ((SY0BM001.XGPCD == "03" && SY0BW01.SY0BW-XMC-PCT != 100)
     || SY0BW01.SY0BW-XMC-PCT > 100)
      converseLib.validationFailed(191); /* Percents must add to 100*/
      set SY0BM005.SY2MCP1 cursor, bold;
      set SY0BM005.SY2MCP2 bold;
      set SY0BM005.SY2MCP3 bold;
      set SY0BM005.SY2MCP4 bold;
    end
  end

end // end SY0BSCA

// verify optional group code
Function SY0BSCB()

       /* ******************************************/
       /* *  VERIFY OPTIONAL GROUP CODE AND GET   **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY0BM001.XGPCD == "02" /* If Footwear*/
   && SY0BM005.XDVCD == "02") /* and Division 02*/
    SY0BM005.XOGCD = "B0";
  end

  if (SY0BM005.XOGCD == "  ")
    SY0BM005.XOGDESC = " ";
    return;
  else
    if (SY0BM005.XOGCD == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM005.XOGCD cursor, bold;
      SY0BM005.XOGDESC = "INVALID";
      return;
    end
  end

  if (SY0BM005.XOGCD in XOGTBL.XOGCD)
    if (XOGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XOGDESC = XOGTBL.XOGDESC[sysVar.arrayIndex];
    else
      set SY0BM005.XOGCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
      SY0BM005.XOGDESC = "INACTIVE";
    end
  else
    set SY0BM005.XOGCD cursor, bold;
    SY0BM005.XOGDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY0BSCB

// verify tertiary color code
Function SY0BSCC()

       /* ******************************************/
       /* *  VERIFY TERTIARY COLOR CODE AND       **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  if (SY0BM005.XCLCD[3] == "  ")
    SY0BM005.XCLCD[3] = "000";
  else
    if (SY0BM005.XCLCD[3] == "999")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM005.XCLCD[3] cursor, bold;
      SY0BM005.XCLABRV[3] = "INVALID";
      return;
    end
  end

  if (SY0BM005.XCLCD[3] == "?") /* user wants popup window*/
    XPXX001(); /* init popup stuff*/
    SY0BW01.SY0BWPOP = "Y"; /* yes, we have displayed*/
    XX0XW02.XX0XWHDR = "Color Codes - Tertiary";
    while (XX0XW02.XX0XWEND == "N")
      XPXCL01(); /* converse window*/
    end
    if (XX0XW02.XX0XWERR == "N" /* no error*/
     && XX0XW02.XX0XWPIX > 0)   /* have index*/
      SY0BM005.XCLCD[3] = XCLTBL.XCLCD[XX0XWPIX];
    end
  end

  if (SY0BM005.XCLCD[3] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY0BM005.XCLABRV[3] = "INACTIVE";
      set SY0BM005.XCLCD[3] cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM005.XCLCD[3] cursor, bold;
    SY0BM005.XCLABRV[3] = "INVALID";
  end

end // end SY0BSCC

// VERIFY SECONDARY COLOR CODE
Function SY0BSCD()

       /* ******************************************/
       /* *  VERIFY SECONDARY COLOR CODE AND GET  **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY0BM005.XCLCD[2] == "  ")
    SY0BM005.XCLCD[2] = "000";
  else
    if (SY0BM005.XCLCD[2] == "999")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM005.XCLCD[2] cursor, bold;
      SY0BM005.XCLABRV[2] = "INVALID";
      return;
    end
  end

  if (SY0BM005.XCLCD[2] == "?") /* user wants popup window*/
    XPXX001(); /* init popup stuff*/
    SY0BW01.SY0BWPOP = "Y"; /* yes, we have displayed*/
    XX0XW02.XX0XWHDR = "Color Codes - Secondary";
    while (XX0XW02.XX0XWEND == "N")
      XPXCL01(); /* converse window*/
    end
    if (XX0XW02.XX0XWERR == "N" /* no error*/
     && XX0XW02.XX0XWPIX > 0)   /* have index*/
      SY0BM005.XCLCD[2] = XCLTBL.XCLCD[XX0XWPIX];
    end
  end

  if (SY0BM005.XCLCD[2] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XCLABRV[2] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY0BM005.XCLABRV[2] = "INACTIVE";
      set SY0BM005.XCLCD[2] cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM005.XCLCD[2] cursor, bold;
    SY0BM005.XCLABRV[2] = "INVALID";
  end

end // end SY0BSCD

// verify primary color code
Function SY0BSCE()


       /* ******************************************/
       /* *  verify primary color code and        **/
       /* *  get the description.                 **/
       /* ******************************************/

  if (SY0BM005.XCLCD[1] == "  ")
    SY0BM005.XCLCD[1] = "000";
  else
    if (SY0BM005.XCLCD[1] == "999")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM005.XCLCD[1] cursor, bold;
      SY0BM005.XCLABRV[1] = "INVALID";
      return;
    end
  end

  if (SY0BM005.XCLCD[1] == "?") /* user wants popup window*/
    XPXX001(); /* init popup stuff*/
    SY0BW01.SY0BWPOP = "Y"; /* yes, we have displayed*/
    XX0XW02.XX0XWHDR = "Color Codes - Primary";
    while (XX0XW02.XX0XWEND == "N")
      XPXCL01(); /* converse window*/
    end
    if (XX0XW02.XX0XWERR == "N" /* no error*/
     && XX0XW02.XX0XWPIX > 0)   /* have index*/
      SY0BM005.XCLCD[1] = XCLTBL.XCLCD[XX0XWPIX];
    end
  end

  if (SY0BM005.XCLCD[1] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY0BM005.XCLABRV[1] = "INACTIVE";
      set SY0BM005.XCLCD[1] cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM005.XCLCD[1] cursor, bold;
    SY0BM005.XCLABRV[1] = "INVALID";
  end

end // end SY0BSCE

// VERIFY PRODUCT TYPE CODE
Function SY0BSCF()

       /* ******************************************/
       /* *  VERIFY PRODUCT TYPE CODE AND GET     **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY0BM005.XPRCD in XPRTBL.XPRCD
   && SY0BM005.XPRCD != "99")
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
    else
      set SY0BM005.XPRCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
      SY0BM005.XPRDESC = "INACTIVE";
    end
  else
    set SY0BM005.XPRCD cursor, bold;
    SY0BM005.XPRDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY0BSCF

// VERIFY DIVISION CODE
Function SY0BSCG()

       /* ******************************************/
       /* *  VERIFY DIVISION CODE AND GET         **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY0BM005.XDVCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM005.XDVCD cursor, bold;
    SY0BM005.XDVDESC = "INVALID";
    return;
  end

  if (SY0BM005.XDVCD in XDVTBL.XDVCD)
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    else
      set SY0BM005.XDVCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
      SY0BM005.XDVDESC = "INACTIVE";
    end
  else
    set SY0BM005.XDVCD cursor, bold;
    SY0BM005.XDVDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY0BSCG

// VERIFY SEASON CODE
Function SY0BSCH()

       /* ******************************************/
       /* *  VERIFY SEASON CODE AND GET           **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY0BM005.XSECD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM005.XSECD cursor, bold;
    SY0BM005.XSEDESC = "INVALID";
    return;
  end


  if (SY0BM005.XSECD in XSETBL.XSECD)
    if (XSETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
    else
      set SY0BM005.XSECD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
      SY0BM005.XSEDESC = "INACTIVE";
    end
  else
    set SY0BM005.XSECD cursor, bold;
    SY0BM005.XSEDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY0BSCH

// verify 6th special feature cd
Function SY0BSCI()

       /* ******************************************/
       /* *   VERIFY CODE AND GET DESCRIPTION     **/
       /* *   FOR THE 6TH SPECIAL FEATURE CODE.   **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BM003.XFCCD6 == " ")
    SY0BM003.SY0BMFC6 = " ";
    return;
  else
    if (SY0BM003.XFCCD6 == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XFCCD6 cursor, bold;
      SY0BM003.SY0BMFC6 = "INVALID";
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XFCTBL.XFCCD[SY0BWIDX] != "99")
    if (SY0BM003.XFCCD6 == XFCTBL.XFCCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XFCTBL.XGPCD[SY0BWIDX])
      if (XFCTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.SY0BMFC6 = XFCTBL.XFCABRV[SY0BWIDX];
        return;
      else
        SY0BM003.SY0BMFC6 = "INACTIVE";
        set SY0BM003.XFCCD6 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XFCCD6 cursor, bold;
  SY0BM003.SY0BMFC6 = "INVALID";


end // end SY0BSCI

// verify 5th special feature cd
Function SY0BSCJ()

       /* ******************************************/
       /* *   VERIFY CODE AND GET DESCRIPTION     **/
       /* *   FOR THE 5TH SPECIAL FEATURE CODE.   **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BM003.XFCCD5 == " ")
    SY0BM003.SY0BMFC5 = " ";
    return;
  else
    if (SY0BM003.XFCCD5 == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XFCCD5 cursor, bold;
      SY0BM003.SY0BMFC5 = "INVALID";
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XFCTBL.XFCCD[SY0BWIDX] != "99")
    if (SY0BM003.XFCCD5 == XFCTBL.XFCCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XFCTBL.XGPCD[SY0BWIDX])
      if (XFCTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.SY0BMFC5 = XFCTBL.XFCABRV[SY0BWIDX];
        return;
      else
        SY0BM003.SY0BMFC5 = "INACTIVE";
        set SY0BM003.XFCCD5 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XFCCD5 cursor, bold;
  SY0BM003.SY0BMFC5 = "INVALID";


end // end SY0BSCJ

// verify 4th special feature cd
Function SY0BSCK()

       /* ******************************************/
       /* *   VERIFY CODE AND GET DESCRIPTION     **/
       /* *   FOR THE 4TH SPECIAL FEATURE CODE.   **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BM003.XFCCD4 == " ")
    SY0BM003.SY0BMFC4 = " ";
    return;
  else
    if (SY0BM003.XFCCD4 == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XFCCD4 cursor, bold;
      SY0BM003.SY0BMFC4 = "INVALID";
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XFCTBL.XFCCD[SY0BWIDX] != "99")
    if (SY0BM003.XFCCD4 == XFCTBL.XFCCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XFCTBL.XGPCD[SY0BWIDX])
      if (XFCTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.SY0BMFC4 = XFCTBL.XFCABRV[SY0BWIDX];
        return;
      else
        SY0BM003.SY0BMFC4 = "INACTIVE";
        set SY0BM003.XFCCD4 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XFCCD4 cursor, bold;
  SY0BM003.SY0BMFC4 = "INVALID";



end // end SY0BSCK

// verify 3rd special feature cd
Function SY0BSCL()

       /* ******************************************/
       /* *   VERIFY CODE AND GET DESCRIPTION     **/
       /* *   FOR THE 3RD SPECIAL FEATURE CODE.   **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BM003.XFCCD3 == " ")
    SY0BM003.SY0BMFC3 = " ";
    return;
  else
    if (SY0BM003.XFCCD3 == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XFCCD3 cursor, bold;
      SY0BM003.SY0BMFC3 = "INVALID";
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XFCTBL.XFCCD[SY0BWIDX] != "99")
    if (SY0BM003.XFCCD3 == XFCTBL.XFCCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XFCTBL.XGPCD[SY0BWIDX])
      if (XFCTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.SY0BMFC3 = XFCTBL.XFCABRV[SY0BWIDX];
        return;
      else
        SY0BM003.SY0BMFC3 = "INACTIVE";
        set SY0BM003.XFCCD3 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XFCCD3 cursor, bold;
  SY0BM003.SY0BMFC3 = "INVALID";



end // end SY0BSCL

// verify 2nd special feature cd
Function SY0BSCM()

       /* ******************************************/
       /* *   VERIFY CODE AND GET DESCRIPTION     **/
       /* *   FOR THE 2nd SPECIAL FEATURE CODE.   **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BM003.XFCCD2 == " ")
    SY0BM003.SY0BMFC2 = " ";
    return;
  else
    if (SY0BM003.XFCCD2 == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XFCCD2 cursor, bold;
      SY0BM003.SY0BMFC2 = "INVALID";
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XFCTBL.XFCCD[SY0BWIDX] != "99")
    if (SY0BM003.XFCCD2 == XFCTBL.XFCCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XFCTBL.XGPCD[SY0BWIDX])
      if (XFCTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.SY0BMFC2 = XFCTBL.XFCABRV[SY0BWIDX];
        return;
      else
        SY0BM003.SY0BMFC2 = "INACTIVE";
        set SY0BM003.XFCCD2 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XFCCD2 cursor, bold;
  SY0BM003.SY0BMFC2 = "INVALID";



end // end SY0BSCM

// verify 1st special feature cd
Function SY0BSCN()

       /* ******************************************/
       /* *   VERIFY CODE AND GET DESCRIPTION     **/
       /* *   FOR THE 1ST SPECIAL FEATURE CODE.   **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BM003.XFCCD1 == " ")
    SY0BM003.SY0BMFC1 = " ";
    return;
  else
    if (SY0BM003.XFCCD1 == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM003.XFCCD1 cursor, bold;
      SY0BM003.SY0BMFC1 = "INVALID";
      return;
    else
      /* next sentence*/
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (XFCTBL.XFCCD[SY0BWIDX] != "99")
    if (SY0BM003.XFCCD1 == XFCTBL.XFCCD[SY0BWIDX]
     && SY0BW01.SY0BWXGP == XFCTBL.XGPCD[SY0BWIDX])
      if (XFCTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM003.SY0BMFC1 = XFCTBL.XFCABRV[SY0BWIDX];
        return;
      else
        SY0BM003.SY0BMFC1 = "INACTIVE";
        set SY0BM003.XFCCD1 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    else
      /* next sentence*/
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM003.XFCCD1 cursor, bold;
  SY0BM003.SY0BMFC1 = "INVALID";




end // end SY0BSCN

// VERIFY PRODUCT category code
Function SY0BSCO()

       /* ******************************************/
       /* *  VERIFY PRODUCT category code and get **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY0BM005.XPCCD == "  ")
    SY0BM005.XPCSDESC = " ";
    return;
  end

  SY0BW01.SY0BWIDX = 1;

  while (XPCTBL.XPCCD[SY0BWIDX] != "99")
    if (SY0BW01.SY0BWXGP == XPCTBL.XGPCD[SY0BWIDX]
     && SY0BM005.XPCCD == XPCTBL.XPCCD[SY0BWIDX])
      if (XPCTBL.XXXSTAT[SY0BWIDX] == "A")
        SY0BM005.XPCSDESC = XPCTBL.XPCSDESC[SY0BWIDX];
        return;
      else
        SY0BM005.XPCSDESC = "INACTIVE";
        converseLib.validationFailed(33); /* inactive code*/
        return;
      end
    end
    SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
  end

  set SY0BM005.XPCCD cursor, bold;
  SY0BM005.XPCSDESC = "INVALID";
  converseLib.validationFailed(3); /* invalid code*/


end // end SY0BSCO

// VERIFY COLLECTION CODE
Function SY0BSCP()

       /* ******************************************/
       /* *  VERIFY COLLECTION CODE AND GET       **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY0BM005.YCQCD == "  ")
    SY0BM005.YCQCD = "00";
  end

  if (SY0BM005.YCQCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM005.YCQCD cursor, bold;
    SY0BM005.YCQDESC = "INVALID";
    return;
  end

  if (SY0BM005.YCQCD in YCQTBL.YCQCD)
    if (YCQTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.YCQDESC = YCQTBL.YCQDESC[sysVar.arrayIndex];
    else
      set SY0BM005.YCQCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
      SY0BM005.YCQDESC = "INACTIVE";
    end
  else
    set SY0BM005.YCQCD cursor, bold;
    SY0BM005.YCQDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY0BSCP

// get brand code
Function SY0BSCQ()

       /* ******************************************/
       /* *  GET brand description                **/
       /* ******************************************/

  if (SY0BM002.XBCCD == " ")
    SY0BM002.XBCDESC = " ";
    return;
  end

  if (SY0BM002.XBCCD in XBCTBL.XBCCD)
    SY0BM002.XBCDESC = XBCTBL.XBCDESC[sysVar.arrayIndex];
  else
    SY0BM002.XBCDESC = "INVALID";
  end

end // end SY0BSCQ

// get brand code
Function SY0BSCR()

       /* ******************************************/
       /* *  VALIDATE Brand Code                  **/
       /* ******************************************/

  SY0BM002.XBCDESC = " "; /* clear desc.*/

  if (SY0BM002.XBCCD == "00" /* These brands are active, but*/
   || SY0BM002.XBCCD == "05") /* not valid for new products*/
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM002.XBCCD cursor, bold;
    return;
  end

  if (SY0BM002.XBCCD in XBCTBL.XBCCD)
    if (XBCTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* code is active*/
      SY0BM002.XBCDESC = XBCTBL.XBCDESC[sysVar.arrayIndex];
    else
      converseLib.validationFailed(33); /* status is inactive*/
      set SY0BM002.XBCCD cursor, bold;
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM002.XBCCD cursor, bold;
  end

end // end SY0BSCR

// Get/Validate Forcaster Code
Function SY0BSCS()

   /* Forcaster Code*/

  if (SY0BM003.PG1FCTCD != "  ")
    PG1REC.XGPCD = SY0BM001.XGPCD;
    PG1REC.PG1SC4CD = " ";
    PG1REC.PG1FCTCD = SY0BM003.PG1FCTCD;
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      if (SY0BM003.PG1FCTCD == "99") /* can never use this one*/
        converseLib.validationFailed(3); /* invalid code*/
        set SY0BM003.PG1FCTCD cursor, modified, bold;
        SY0BM003.SY0BMFNM = " ";
      else
        SY0BM003.SY0BMFNM = PG1REC.XXXUSER;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(143); /* scheduler code not found*/
        set SY0BM003.PG1FCTCD cursor, modified, bold;
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B";
        TA1REC.TA1LOCAT[1] = "S";
        TA1REC.TA1LOCAT[2] = "SY0BSCS";
        TA1REC.TA1MAP = "SY0BM003";
        TA1REC.TA1DBASE = "DPRODG";
        TA1REC.TA1TBLVU = "VSUSER01";
        TA1REC.TA1TBLKE = PG1REC.PG1FCTCD;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(20);
        set SY0BM003.PG1FCTCD cursor, bold;
        exit stack;
      end
    end
  else
    SY0BM003.SY0BMFNM = " "; /* blank out name*/
  end

end // end SY0BSCS

// verify logo color code
Function SY0BSCT()

       /* ******************************************/
       /* *  VERIFY TERTIARY COLOR CODE AND       **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  if (SY0BM005.XCLCD[4] == "  ")
    SY0BM005.XCLCD[4] = "000";
  else
    if (SY0BM005.XCLCD[4] == "999")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM005.XCLCD[4] cursor, bold;
      SY0BM005.XCLABRV[4] = "INVALID";
      return;
    end
  end

  if (SY0BM005.XCLCD[4] == "?") /* user wants popup window*/
    XPXX001(); /* init popup stuff*/
    SY0BW01.SY0BWPOP = "Y"; /* yes, we have displayed*/
    XX0XW02.XX0XWHDR = "Color Codes - Logo";
    while (XX0XW02.XX0XWEND == "N")
      XPXCL01(); /* converse window*/
    end
    if (XX0XW02.XX0XWERR == "N" /* no error*/
     && XX0XW02.XX0XWPIX > 0)   /* have index*/
      SY0BM005.XCLCD[4] = XCLTBL.XCLCD[XX0XWPIX];
    end
  end

  if (SY0BM005.XCLCD[4] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XCLABRV[4] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY0BM005.XCLABRV[4] = "INACTIVE";
      set SY0BM005.XCLCD[4] cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM005.XCLCD[4] cursor, bold;
    SY0BM005.XCLABRV[4] = "INVALID";
  end

end // end SY0BSCT

// verify dimension code
Function SY0BSDA()

       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  /*IF SY0BM005.XDMCD EQ '99';*/
  if (SY0BM005.XDMCD != "00")
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM005.XDMCD cursor, bold;
    SY0BM005.XDMABRV = " ";
    return;
  end

  if (SY0BM005.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY0BM005.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
      if (SY0BM001.XGPCD == "03"
       && SY0BM005.XDMCD != "00")
        set SY0BM005.XDMCD cursor, bold;
        converseLib.validationFailed(3); /* invalid code*/
      end
    else
      set SY0BM005.XDMCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
      SY0BM005.XDMABRV = " ";
    end
  else
    set SY0BM005.XDMCD cursor, bold;
    SY0BM005.XDMABRV = " ";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY0BSDA

// set scr. 2 attributes normal
Function SY0BSDB()


       /* ******************************************/
       /* *  set sy0bm002 screen attributes to    **/
       /* *  normal                               **/
       /* ******************************************/

  set SY0BM002.SY1STYNM normal;
  set SY0BM002.SY1SSTNM normal;
  set SY0BM002.SY4SZSCL normal;
  set SY0BM002.XBCCD normal;
  set SY0BM002.XUMCD normal;
  set SY0BM002.XGACD normal;
  set SY0BM002.XGCCD normal;
  set SY0BM002.SY1FNSHG normal;
  set SY0BM002.SY1DUTYS normal;
  set SY0BM002.SY1DECSZ normal;
  set SY0BM002.SY1TECHS normal;
  set SY0BM002.XCWCD normal;

  SY0BM002.SYMSCMSG = " ";

end // end SY0BSDB

// set scr. 3 attributes normal
Function SY0BSDC()


       /* ******************************************/
       /* *  set sy0bm003 screen attributes to    **/
       /* *  normal                               **/
       /* ******************************************/

  set SY0BM003.XFMCD normal;
  set SY0BM003.XSPCD normal;
  set SY0BM003.XBTCD normal;
  set SY0BM003.XSUCD normal;
  set SY0BM003.XRYCD normal;
  set SY0BM003.XCNCD normal;
  set SY0BM003.XFCCD1 normal;
  set SY0BM003.XFCCD2 normal;
  set SY0BM003.XFCCD3 normal;
  set SY0BM003.XFCCD4 normal;
  set SY0BM003.XFCCD5 normal;
  set SY0BM003.XFCCD6 normal;
  set SY0BM003.XMLCD[1] normal;
  set SY0BM003.XMLCD[2] normal;
  set SY0BM003.XMLCD[3] normal;
  set SY0BM003.XMLCD[4] normal;
  set SY0BM003.PG1FCTCD normal;
  set SY0BM003.FK-NBR-AIRBAG-SHOE normal;

  SY0BM003.SYMSCMSG = " ";

end // end SY0BSDC

// set scr. 5 attributes normal
Function SY0BSDD()


       /* ******************************************/
       /* *  set sy0bm005 screen attributes to    **/
       /* *  normal                               **/
       /* ******************************************/


  set SY0BM005.SY2CLRID normal;
  set SY0BM005.PG9CLRNB normal;
  set SY0BM005.SY2CLRAB normal;
  set SY0BM005.SY2CLRDS normal;
  set SY0BM005.YCQCD normal;
  set SY0BM005.SY2PKGFL normal;
  set SY0BM005.SY2ALNOR normal;
  set SY0BM005.SY2POFBD normal;
  set SY0BM005.SY2POFXD normal;
  set SY0BM005.SY2FOFBD normal;
  set SY0BM005.SY2FOFXD normal;
  set SY0BM005.SY2NOFBD normal;
  set SY0BM005.SY2NOFXD normal;
  set SY0BM005.XDMCD normal;
  set SY0BM005.XSECD normal;
  set SY0BM005.XDVCD normal;
  set SY0BM005.XPRCD normal;
  set SY0BM005.XPCCD normal;
  set SY0BM005.XPLCD normal;
  set SY0BM005.XCLCD[1] normal;
  set SY0BM005.XCLCD[2] normal;
  set SY0BM005.XCLCD[3] normal;
  set SY0BM005.XCLCD[4] normal;
  set SY0BM005.XOGCD normal;
  set SY0BM005.XMCCD1 normal;
  set SY0BM005.XMCCD2 normal;
  set SY0BM005.XMCCD3 normal;
  set SY0BM005.XMCCD4 normal;
  set SY0BM005.SY2MCP1 normal;
  set SY0BM005.SY2MCP2 normal;
  set SY0BM005.SY2MCP3 normal;
  set SY0BM005.SY2MCP4 normal;
  set SY0BM005.SY2BOSWI normal;
  set SY0BM005.SY2BOEDT normal;

  SY0BM005.SYMSCMSG = " ";

end // end SY0BSDD

// set scr. 6 attributes normal
Function SY0BSDE()

       /* **************************************/
       /* *  set screen 6 attributes normal   **/
       /* **************************************/


  SY0BWIDX = 40;

  set SY0BM006.SY0BMUPC normal;
  set SY0BM006.XQACD normal;

  while (SY0BWIDX > 0)
    set SY0BM006.SY3FRGUT[SY0BWIDX] normal;
    set SY0BM006.XDVCD[SY0BWIDX] normal;
    SY0BWIDX = SY0BWIDX - 1;
  end

  SY0BM006.SYMSCMSG = " ";

end // end SY0BSDE

// set scr. 8 attributes normal
Function SY0BSDF()


       /* ******************************************/
       /* *  set sy0bm008 screen attributes to    **/
       /* *  normal                               **/
       /* ******************************************/


  set SY0BM008.SY2RSTNB normal;
  set SY0BM008.SY2BCLCD normal;
  set SY0BM008.SY2SSCIN normal;
  set SY0BM008.SY2TDIND normal;
  set SY0BM008.PC3POIDT normal;
  set SY0BM008.SY2FDSMO normal;
  set SY0BM008.SY2FNSMO normal;
  set SY0BM008.SY2PDCMO normal;
  set SY0BM008.SY2PNCMO normal;
  set SY0BM008.PG1SC4CD normal;
  set SY0BM008.XWHCD[1] normal;
  set SY0BM008.XWHCD[2] normal;
  set SY0BM008.XWHCD[3] normal;
  set SY0BM008.XWHCD[4] normal;
  set SY0BM008.XWHCD[5] normal;
  set SY0BM008.XWHCD[6] normal;
  set SY0BM008.SY-DUTY-RT-CD normal;
  set SY0BM008.XDR-PROD-REG-CD normal;
  set SY0BM008.SY0BM-MKG-CD[1] normal;
  set SY0BM008.SY0BM-MKG-CD[2] normal;
  set SY0BM008.SY0BM-MKG-CD[3] normal;
  set SY0BM008.SY0BM-MKG-CD[4] normal;
  set SY0BM008.SY0BM-MKG-CD[5] normal;
  set SY0BM008.SY0BM-MKG-CD[6] normal;

  SY0BM005.SYMSCMSG = " ";

end // end SY0BSDF

// check for function keys
Function SY0BSEA()

       /* ******************************************/
       /* * CHECK FOR FUNCTION KEYS               **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SY0BM002.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM002 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SY0BM002.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM002 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


end // end SY0BSEA

// validate sy0bm002 screen
Function SY0BSEB()

       /* ******************************************/
       /* *  validate table code and get desc.    **/
       /* ******************************************/

       /* ******************************************/
       /* *    GET COST CATEGORY CODE DESC.       **/
       /* ******************************************/

  SY0BSBJ();


       /* ******************************************/
       /* *   validate technical switch           **/
       /* ******************************************/

  if (SY0BM002.SY1TECHS == "Y"
   || SY0BM002.SY1TECHS == "N")
     /* next sentence*/
  else
    converseLib.validationFailed(36); /* enter a 'y' or 'n'*/
    set SY0BM002.SY1TECHS cursor, bold;
  end



        /* ******************************************/
        /* * VERIFY dec size ranges                **/
        /* ******************************************/

  SY0BSED();


       /* ******************************************/
       /* *  validate duty switch                 **/
       /* ******************************************/


  if (SY0BM002.SY1DUTYS == "Y"
   || SY0BM002.SY1DUTYS == "N")
     /* next sentence*/
  else
    converseLib.validationFailed(36); /* please enter a 'y' or 'n'*/
    set SY0BM002.SY1DUTYS cursor, bold;
  end

       /* ******************************************/
       /* * validate finshed goods                **/
       /* ******************************************/

  if (SY0BM002.SY1FNSHG == "0"
   || SY0BM002.SY1FNSHG == "1"
   || SY0BM002.SY1FNSHG == "2"
   || SY0BM002.SY1FNSHG == "3")
     /* next sentenct*/
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY0BM002.SY1FNSHG cursor, bold;
  end


       /* ******************************************/
       /* *   GET GENDER CODE DESC.               **/
       /* ******************************************/


  SY0BSBK();

       /* ******************************************/
       /* *   GET GENDER AGE CODE DESC.           **/
       /* ******************************************/

  SY0BSBL();

       /* ******************************************/
       /* *   GET UNIT OF MEASURE CODE DESC.      **/
       /* ******************************************/

  SY0BSBM();

       /* ******************************************/
       /* *    GET BRAND DESC. (Validate)         **/
       /* ******************************************/

  SY0BSCR();

       /* ******************************************/
       /* *    GET SIZE SCALE CODE DESC.          **/
       /* ******************************************/

  SY0BSBN();


       /* ******************************************/
       /* *    GET STYLE GROUP NUMBER.            **/
       /* ******************************************/

  SY0BSEE();


       /* ******************************************/
       /* *    GET BLANK STYLE NUMBER.            **/
       /* ******************************************/

  SY0BSEF();


       /* ******************************************/
       /* * STYLE DESCRIPTION AND SHORT STYLE     **/
       /* * DESCRIPTION CAN NOT BE BLANK          **/
       /* ******************************************/


  if (SY0BM002.SY1SSTNM == " ")
    set SY0BM002.SY1SSTNM cursor, bold;
    converseLib.validationFailed(40); /* required field*/
  end

  if (SY0BM002.SY1STYNM == " ")
    set SY0BM002.SY1STYNM cursor, bold;
    converseLib.validationFailed(40); /* required field*/
  end

       /* ******************************************/
       /* * CROSS CHECK SIZE SCALE TO GENDER AGE  **/
       /* * FOR FOOTWEAR PRODUCTS                 **/
       /* ******************************************/

  if (SY0BM001.XGPCD == "02")
    if (SY0BM002.SY4SZSCL == "01") /* If adult scale*/
      if (SY0BM002.XGACD == "00" /* Gender Age should be these*/
       || SY0BM002.XGACD == "70" 
       || SY0BM002.XGACD == "71" 
       || SY0BM002.XGACD == "72" 
       || SY0BM002.XGACD == "73" 
       || SY0BM002.XGACD == "79")
         /* Next Sentence*/
      else
        converseLib.validationFailed(3); /* INVALID CODE*/
        SY0BM002.SYMSCMSG = "Size Scale does not Match Gender Age";
        set SY0BM002.SY4SZSCL cursor, bold;
        set SY0BM002.XGACD bold;
      end
    end
    if (SY0BM002.SY4SZSCL == "02") /* If youth scale*/
      if (SY0BM002.XGACD == "00" /* Gender Age should be these*/
       || SY0BM002.XGACD == "74" 
       || SY0BM002.XGACD == "75" 
       || SY0BM002.XGACD == "76" 
       || SY0BM002.XGACD == "77" 
       || SY0BM002.XGACD == "80" 
       || SY0BM002.XGACD == "83" 
       || SY0BM002.XGACD == "84")
         /* Next Sentence*/
      else
        converseLib.validationFailed(3); /* INVALID CODE*/
        SY0BM002.SYMSCMSG = "Size Scale does not Match Gender Age";
        set SY0BM002.SY4SZSCL cursor, bold;
        set SY0BM002.XGACD bold;
      end
    end
    if (SY0BM002.SY4SZSCL == "03") /* If infant scale*/
      if (SY0BM002.XGACD == "00" /* Gender Age should be these*/
       || SY0BM002.XGACD == "78" 
       || SY0BM002.XGACD == "94" 
       || SY0BM002.XGACD == "96" 
       || SY0BM002.XGACD == "98")
         /* Next Sentence*/
      else
        converseLib.validationFailed(3); /* INVALID CODE*/
        SY0BM002.SYMSCMSG = "Size Scale does not Match Gender Age";
        set SY0BM002.SY4SZSCL cursor, bold;
        set SY0BM002.XGACD bold;
      end
    end
    if (SY0BM002.SY4SZSCL == "13") /* If large adult scale*/
      if (SY0BM002.XGACD == "00" /* Gender Age should be these*/
       || SY0BM002.XGACD == "71")
         /* Next Sentence*/
      else
        converseLib.validationFailed(3); /* INVALID CODE*/
        SY0BM002.SYMSCMSG = "Size Scale does not Match Gender Age";
        set SY0BM002.SY4SZSCL cursor, bold;
        set SY0BM002.XGACD bold;
      end
    end
  end

end // end SY0BSEB

// verify dec size range
Function SY0BSED()

        /* ******************************************/
        /* * VERIFY dec size ranges                **/
        /* ******************************************/

  if (SY0BM002.SY1DECSZ == " ")
    if (SY0BM001.XGPCD != "03") /* Not apparel*/
      return;
    else
      if (SY0BM002.SY4SZSCL == "06"
       || SY0BM002.SY4SZSCL == "10")
        set SY0BM002.SY1DECSZ cursor, bold;
        converseLib.validationFailed(40); /* required field*/
        return;
      else
        if (SY0BM002.SY4SZSCL in SY0BTST.SY4SZSCL)
          SY0BM002.SY1DECSZ = SY0BTST.SY1DECSZ[sysVar.arrayIndex];
          return;
        else
          SY0BM002.SY1DECSZ = "001";
          return;
        end
      end
    end
  else
    if (SY0BM002.SY1DECSZ == "999")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM002.SY1DECSZ cursor, bold;
      return;
    end
  end

  SY0BW01.SY0BWIDX = 1;

  while (SY0BTST.SY1DECSZ[SY0BWIDX] != "999")
    if (SY0BM002.SY1DECSZ == SY0BTST.SY1DECSZ[SY0BWIDX])
      if (SY0BM002.SY4SZSCL == SY0BTST.SY4SZSCL[SY0BWIDX])
        if (SY0BTST.XXXSTAT[SY0BWIDX] == "A")
          return;
        else
          set SY0BM002.SY1DECSZ cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          return;
        end
      end
    end
    SY0BWIDX = SY0BWIDX + 1;
  end

  converseLib.validationFailed(3); /* invalid code*/
  set SY0BM002.SY1DECSZ cursor, bold;


end // end SY0BSED

// Get/Validate Style Group Num
Function SY0BSEE()

   /* This routine will validate the style group number.*/
   /* NOTE: When the style group table is properly loaded and*/
        /* the maintenance program in place, the check for*/
        /* style group = spaces should be removed.*/

  if (SY0BM001.XGPCD != "02") /* if not footwear gpc*/
    if (SY0BM002.SYBSTGNB == " ") /* or number = spaces*/
      SY0BM002.SYBSTGNM = " ";
      return; /* nothing to do*/
    end
  end

  SYBREC.SYBSTGNB = SY0BM002.SYBSTGNB;
  call "IO3150" ("S ", SQLCA, SYBREC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    SY0BM002.SYBSTGNM = SYBREC.SYBSTGNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style does not exist*/
      set SY0BM002.SYBSTGNB cursor, bold;
      SY0BM002.SYBSTGNM = " ";
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B";
      TA1REC.TA1LOCAT[1] = "S";
      TA1REC.TA1LOCAT[2] = "SY0BSEE";
      TA1REC.TA1MAP = "SY0BM002";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSYGRP01";
      TA1REC.TA1TBLKE = SYBREC.SYBSTGNB;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20);
      set SY0BM002.SYBSTGNB cursor, bold;
      exit stack;
    end
  end

end // end SY0BSEE

// Get/Validate Blank Style
Function SY0BSEF()

   /* This routine will validate the blank style number.*/

  if (SY0BM002.SY1BSTNB == " ") /* or number = spaces*/
    SY0BM002.SY0BMBSN = " "; /* blank out desc*/
    SY0BM008.SY0BMBSN = " "; /* blank out desc*/
    return; /* nothing to do*/
  end

  SY1REC.SY1STNBR = SY0BM002.SY1BSTNB;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    SY0BM002.SY0BMBSN = SY1REC.SY1STYNM;
    SY0BM008.SY0BMBSN = SY1REC.SY1STYNM;
    if (SY1REC.SY4SZSCL != SY0BM002.SY4SZSCL) /* Scales not the same*/
      set SY0BM002.SY1BSTNB cursor, bold;
      set SY0BM002.SY4SZSCL bold;
      converseLib.validationFailed(87); /* Scales not the same*/
      SY0BW01.SY0BWDSC = SY1REC.SY4SZSCL;
      SY0BM002.SYMSCMSG = SY0BW01.SY0BW-MSG;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style does not exist*/
      set SY0BM002.SY1BSTNB cursor, bold;
      SY0BM002.SY0BMBSN = " ";
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B";
      TA1REC.TA1LOCAT[1] = "S";
      TA1REC.TA1LOCAT[2] = "SY0BSEF";
      TA1REC.TA1MAP = "SY0BM002";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20);
      set SY0BM002.SY1BSTNB cursor, bold;
      exit stack;
    end
  end

end // end SY0BSEF

// Get/Validate Root Style
Function SY0BSEG()

   /* This routine will validate the Root style number.*/

  if (SY0BM008.SY2RSTNB == " ") /* number = spaces*/
    SY0BM008.SY0BMRSN = " "; /* blank out desc*/
    return; /* nothing to do*/
  end

  SY1REC.SY1STNBR = SY0BM008.SY2RSTNB;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    SY0BM008.SY0BMRSN = SY1REC.SY1STYNM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (SY0BM001.XGPCD == "03") /* apparel gpc*/
        converseLib.validationFailed(5); /* style does not exist*/
        set SY0BM008.SY2RSTNB cursor, bold;
        SY0BM008.SY0BMRSN = " ";
      else
        SY0BM008.SY0BMRSN = "N/A";
      end
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B";
      TA1REC.TA1LOCAT[1] = "S";
      TA1REC.TA1LOCAT[2] = "SY0BSEG";
      TA1REC.TA1MAP = "SY0BM008";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20);
      set SY0BM008.SY2RSTNB cursor, bold;
      exit stack;
    end
  end

end // end SY0BSEG

// check for function keys
Function SY0BSFA()


       /* ******************************************/
       /* * CHECK FOR FUNCTION KEYS               **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SY0BM003.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM003 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SY0BM003.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM003 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


end // end SY0BSFA

// check pf keys
Function SY0BSGA()


       /* ******************************************/
       /* * CHECK FOR FUNCTION KEYS               **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SY0BM005.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM005 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SY0BM005.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM005 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


end // end SY0BSGA

// validate color req. fields
Function SY0BSGB()

       /* ******************************************/
       /* *  verify if color record exists.       **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BW01.SY0BWOPT == "PF14B")
    SY0BSGC();
  else
    /* next sentence*/
  end


      /* ** validate backorder date ***/

  SY0BW01.SY0BWDMP = SY0BM005.SY2BOEDT;
  /*  */
  /* -------------- y2k out begin -------------------*/
  /*  */
  /* MOVE 19 TO SY0BW01.SY0BWDCC;*/
  /*  */
  /* -------------- y2k out end ---------------------*/
  /*  */
  /*  */
  /* -------------- y2k in begin --------------------*/
  /*  */
  if (SY0BW01.SY0BWDYY > 60)
    SY0BW01.SY0BWDCC = 19;
  else
    SY0BW01.SY0BWDCC = 20;
  end
  /*  */
  /* -------------- y2k in end ---------------------*/
  /*  */

  SY0BW01.SY0BWTMM = SY0BW01.SY0BWDMM;
  SY0BW01.SY0BWTDD = SY0BW01.SY0BWDDD;
  SY0BW01.SY0BWTYY = SY0BW01.SY0BWDYY;
  SY0BW01.SY0BWTCC = SY0BW01.SY0BWDCC;

  if (SY0BW01.SY0BWTCK >= SY0BW01.SY0BWTDT) /* check for input date gt today*/
    TA2REC.TA2GRGGN = SY0BW01.SY0BWTCK;
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DTOPT = "GREGGREG";

    SY0BSAF();

    if (TA2REC.TA2RTNCD == 0222)
      converseLib.validationFailed(30); /* invalid date*/
      set SY0BM005.SY2BOEDT cursor, bold;
    else
      /* next sentence*/
    end
  else
    converseLib.validationFailed(30);
    set SY0BM005.SY2BOEDT cursor, bold;
  end


     /* *** validate backorder switch*/

  if (SY0BM005.SY2BOSWI == "Y"
   || SY0BM005.SY2BOSWI == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(36); /* enter a 'y' or 'n'*/
    set SY0BM005.SY2BOSWI cursor, bold;
  end

  if (SY0BM001.XGPCD == "03"
   && SY0BM003.XFMCD == "07"
   && SY0BM005.XSECD == "PR"
   && SY0BM005.XSNYR == 99)
    SY0BM005.SY2BOSWI = "N";
  end

     /* *** validate package flag*/

  if (SY0BM005.SY2PKGFL == "Y")
    if (SY0BM002.XUMCD == "01")
      converseLib.validationFailed(153); /* package flag must be n*/
      set SY0BM005.SY2PKGFL cursor, bold;
    end
  else
    if (SY0BM005.SY2PKGFL != "N")
      converseLib.validationFailed(36); /* enter a 'y' or 'n'*/
      set SY0BM005.SY2PKGFL cursor, bold;
    end
  end


     /* *** validate allow-new-orders flag*/

  if (SY0BM005.SY2ALNOR == "Y"
   || SY0BM005.SY2ALNOR == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(36); /* enter a 'y' or 'n'*/
    set SY0BM005.SY2ALNOR cursor, bold;
  end


       /* ******************************************/
       /* *  validate and retrieve the codes for  **/
       /* *  sy0bm005 screen                      **/
       /* ******************************************/

  SY0BSBG();


  if (SY0BM005.SY2CLRAB == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY0BM005.SY2CLRAB cursor, bold;
  else
    /* next sentence*/
  end

  if (SY0BM005.SY2CLRDS == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY0BM005.SY2CLRDS cursor, bold;
  else
    /* next sentence*/
  end

  if (SY0BM005.SY2CLRID == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY0BM005.SY2CLRID cursor, bold;
  else
    /* next sentence*/
  end


end // end SY0BSGB

// verify if color exists
Function SY0BSGC()


       /* *******************************************/
       /* *  VERIFY IF COLOR RECORD EXISTS          **/
       /* *   1. IF PF14 pressed the color          **/
       /* *      record can not exists.             **/
       /* *                                         **/
       /* *******************************************/


  if (converseVar.validationMsgNum > 0)
    exit stack;
  end

  SY0BS-SY2-CHK5(); /* Check for dups between GPC 02 & 03*/

  SY2REC.XGPCD = SY0BM001.XGPCD;
  SY2REC.SY1STNBR = SY0BM001.SY1STNBR;
  SY2REC.SY2CLRID = SY0BM005.SY2CLRID;
  SY2REC.XDMCD = SY0BM005.XDMCD;

  set SQLCA empty;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.validationFailed(2); /* color/dimension already exists*/
    set SY0BM005.SY2CLRID cursor, bold;
    exit stack;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SY0BM001.SY2CLRID = SY0BM005.SY2CLRID;
      SY0BM001.XDMCD = SY0BM005.XDMCD;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY0BSIG  ";
      TA1REC.TA1LOCAT[3] = "IO0130   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM005";
      TA1REC.TA1DBASE = "SY2REC";
      TA1REC.TA1TBLVU = "DPROD.VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error.....*/
      set SY0BM005.SY2CLRID cursor, bold;
      exit stack;
    end
  end

   /* Now get new color data from style dev.*/
  if (SY0BM001.XGPCD == "02" /* only for footwear*/
   && SY0BM001.PG4STNBR != " ") /* and we have dev. number*/
    if (SY0BM005.PG9CLRNB != 0)
      if (SY0BM005.PG9CLRNB != SY0BM001.PG9CLRNB)
        SY0BSKG(); /* try to get number*/
      end
    else
      converseLib.validationFailed(40); /* Required field*/
      set SY0BM005.PG9CLRNB cursor, bold;
    end
  end

end // end SY0BSGC

// check pf keys
Function SY0BSGD()


       /* ******************************************/
       /* * CHECK FOR FUNCTION KEYS               **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SY0BM008.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM008 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SY0BM008.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM008 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


end // end SY0BSGD

// Edit fields SY0BM008
Function SY0BSGE()

   /* Edit the enterable fields on map SY0BM008*/


   /* Marketing regions*/

  SY0BS-VAL-XDR-6();


   /* Development region*/

  SY0BS-VAL-XDR();


   /* Specialist/scheduler*/

  if (SY0BM008.PG1SC4CD != "  "
   || SY0BM001.XGPCD == "02")
    PG1REC.XGPCD = SY0BM001.XGPCD;
    PG1REC.PG1SC4CD = SY0BM008.PG1SC4CD;
    PG1REC.PG1FCTCD = " ";
    call "IO1200" ("S ", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      SY0BM008.XXXUSER = PG1REC.XXXUSER;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(143); /* scheduler code not found*/
        set SY0BM008.PG1SC4CD cursor, modified, bold;
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B";
        TA1REC.TA1LOCAT[1] = "S";
        TA1REC.TA1LOCAT[2] = "SY0BSGE";
        TA1REC.TA1MAP = "SY0BM008";
        TA1REC.TA1DBASE = "DPRODG";
        TA1REC.TA1TBLVU = "VSUSER01";
        TA1REC.TA1TBLKE = PG1REC.PG1SC4CD;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(20);
        set SY0BM008.PG1SC4CD cursor, bold;
        exit stack;
      end
    end
  end

   /* projected NIL closeout month*/

  if (SY0BM008.SY2PNCMO == 0)
  /*  */
  /* ----------------- y2k out begin ---------------*/
  /*  */
  /* MOVE 9912 TO SY0BM008.SY2PNCMO;*/
  /*  */
  /* ----------------- y2k out end -----------------*/
  /*  */
  /*  */
  /* ----------------- y2k in begin ---------------*/
  /* Default date is changed from 19991231 to 20431231*/
  /*  */
    SY0BM008.SY2PNCMO = 4312;
  /*  */
  /* ----------------- y2k in  end -----------------*/
  /*  */
  else
    SY0BW01.SY0BWDTT = SY0BM008.SY2PNCMO;
    SY0BSGF();
    if (SY0BW01.SY0BWDVF == "N") /* date not valid*/
      set SY0BM008.SY2PNCMO cursor, modified, bold;
    end
  end


   /* projected Domestic closeout month*/

  if (SY0BM008.SY2PDCMO == 0)
  /*  */
  /* ----------------- y2k out begin ---------------*/
  /*  */
  /* MOVE 9912 TO SY0BM008.SY2PDCMO;*/
  /*  */
  /* ----------------- y2k out end -----------------*/
  /*  */
  /*  */
  /* ----------------- y2k in begin ---------------*/
  /* Default date is changed from 19991231 to 20431231*/
  /*  */
    SY0BM008.SY2PDCMO = 4312;
  /*  */
  /* ----------------- y2k in  end -----------------*/
  /*  */
  else
    SY0BW01.SY0BWDTT = SY0BM008.SY2PDCMO;
    SY0BSGF();
    if (SY0BW01.SY0BWDVF == "N") /* date not valid*/
      set SY0BM008.SY2PDCMO cursor, modified, bold;
    end
  end


   /* first NIL sales month*/

  if (SY0BM008.SY2FNSMO != 0
   || SY0BM001.XGPCD == "02")
    SY0BW01.SY0BWDTT = SY0BM008.SY2FNSMO;
    SY0BSGF();
    if (SY0BW01.SY0BWDVF == "N") /* date not valid*/
      set SY0BM008.SY2FNSMO cursor, modified, bold;
    end
  end


   /* first domestic sales month*/

  if (SY0BM008.SY2FDSMO != 0
   || SY0BM001.XGPCD == "02")
    SY0BW01.SY0BWDTT = SY0BM008.SY2FDSMO;
    SY0BSGF();
    if (SY0BW01.SY0BWDVF == "N") /* date not valid*/
      set SY0BM008.SY2FDSMO cursor, modified, bold;
    end
  end

   /* first po id*/

  if (SY0BM008.PC3POIDT != 0
   || SY0BM001.XGPCD == "02")
    SY0BSGG();
    if (SY0BW01.SY0BWDVF == "N") /* date not valid*/
      set SY0BM008.PC3POIDT cursor, modified, bold;
    end
  end


   /* Duty Rate code*/

  if (SY0BM008.SY-DUTY-RT-CD != "  "
   || SY0BM001.XGPCD == "02") /* required for footwear*/
    VDTYRT01.SY-DUTY-RT-CD = SY0BM008.SY-DUTY-RT-CD;
    call "IO6320" ("S ", SQLCA, VDTYRT01) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(3); /* Invalid Code*/
      set SY0BM008.SY-DUTY-RT-CD cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B";
        TA1REC.TA1LOCAT[1] = "S";
        TA1REC.TA1LOCAT[2] = "SY0BSGE";
        TA1REC.TA1MAP = "SY0BM008";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VDTYRT01";
        TA1REC.TA1TBLKE = SY0BM008.SY-DUTY-RT-CD;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(23);
        set SY0BM008.SY-DUTY-RT-CD cursor, bold;
        exit stack;
      end
    end
  end


   /* Warehouse codes*/

  SY0BSBI();

   /* Tech. Difficulty*/

  if (SY0BM008.SY2TDIND != " ")
    if (SY0BM008.SY2TDIND < "A"
     || SY0BM008.SY2TDIND > "Z")
      converseLib.validationFailed(3); /* INVALID CODE*/
      SY0BM008.SYMSCMSG = "Values are A thru Z or space";
      set SY0BM008.SY2TDIND cursor, modified, bold;
    end
  end


   /* safety stock class*/

  if (SY0BM008.SY2SSCIN == "A"
   || SY0BM008.SY2SSCIN == "B"
   || SY0BM008.SY2SSCIN == "C"
   || SY0BM008.SY2SSCIN == "D"
   || SY0BM008.SY2SSCIN == " ")
    /* next sentence (valid values)*/
  else
    converseLib.validationFailed(3); /* valid values are A, B, C or D*/
    SY0BM008.SYMSCMSG = "Values are A, B, C, or D";
    set SY0BM008.SY2SSCIN cursor, modified, bold;
  end


   /* blank color*/

  if (SY0BM008.SY2BCLCD != " ")
    SY2REC.XGPCD = SY0BM001.XGPCD;
    SY2REC.SY1STNBR = SY0BM008.SY1BSTNB;
    SY2REC.SY2CLRID = SY0BM008.SY2BCLCD;
    SY2REC.XDMCD = SY0BM008.XDMCD;
    call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 0)
      SY0BM008.SY0BMBCN = SY2REC.SY2CLRDS;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(7); /* color/dim does not exist*/
        set SY0BM008.SY2BCLCD cursor, modified, bold;
        SY0BM008.SY0BMBCN = " ";
      else
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B";
        TA1REC.TA1LOCAT[1] = "S";
        TA1REC.TA1LOCAT[2] = "SY0BSGE";
        TA1REC.TA1MAP = "SY0BM008";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VCOLOR01";
        TA1REC.TA1TBLKE = SY0BM008.SY1BSTNB;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(20);
        set SY0BM008.SY2BCLCD cursor, bold;
        exit stack;
      end
    end
  end


   /* Validate Root Sytle Number*/

  SY0BSEG();

end // end SY0BSGE

// Validate YYMM format dates
Function SY0BSGF()

   /* This routine will validate dates in YYMM format.  The date*/
   /* is in the field SY0BW01.SY0BWDVF and the routine will set*/
   /* the flag SY0BW01.SY0BWDVF to N if the date is invalid and*/
   /* Y if the date is valid.*/

  SY0BW01.SY0BWDVF = "Y"; /* set flag to valid*/

   /* NOTE:  The year part of date cannot be checked because any*/
         /* numeric value is valid here.*/

  if (SY0BW01.SY0BWTMO < 1
   || SY0BW01.SY0BWTMO > 12)
    SY0BW01.SY0BWDVF = "N"; /* date not valid*/
    converseLib.validationFailed(30); /* invalid date entered*/
    return;
  end

   /* now check that date not < current date*/

  SY0BW01.SY0BWDTT-YYMM = SY0BW01.SY0BWDTT;
  if (SY0BW01.SY0BWDTT-YYMM > 6000)
    SY0BW01.SY0BWDTT-CC = 19;
  else
    SY0BW01.SY0BWDTT-CC = 20;
  end
  SY0BW01.SY0BWYM-YYMM = SY0BW01.SY0BWYM;
  if (SY0BW01.SY0BWYM-YYMM > 6000)
    SY0BW01.SY0BWYM-CC = 19;
  else
    SY0BW01.SY0BWYM-CC = 20;
  end
  if (SY0BW01.SY0BWDTT-CMP < SY0BW01.SY0BWYM-CMP)
    converseLib.validationFailed(30); /* date not valid*/
    SY0BW01.SY0BWDVF = "N";
  end

end // end SY0BSGF

// Validate PO Id
Function SY0BSGG()

   /* This routine will validate the po id field.*/

  SY0BW01.SY0BWDVF = "Y"; /* set flag to valid*/
  SY0BW01.SY0BWPO = SY0BM008.PC3POIDT;

   /* NOTE:  The year part of date cannot be checked because any*/
         /* numeric value is valid here.*/

  if (SY0BW01.SY0BWPM1 < 1
   || SY0BW01.SY0BWPM1 > 12
   || SY0BW01.SY0BWPM2 < 1
   || SY0BW01.SY0BWPM2 > 12)
    SY0BW01.SY0BWDVF = "N"; /* date not valid*/
    converseLib.validationFailed(30); /* invalid date entered*/
    return;
  end

   /* now check that date not < current date*/

  /*  */
  /* --------------------- y2k out begin ----------------*/
  /*  */
  /* IF SY0BW01.SY0BWPYR GE 50;*/
  /* IF SY0BW01.SY0BWPYR LT SY0BW01.SY0BWYY;*/
  /* MOVE 30 TO EZEMNO;           /* date not valid*/
  /* MOVE 'N' TO SY0BW01.SY0BWDVF;*/
  /* END;*/
  /* END;*/
  /*  */
  /* --------------------- y2k out end ------------------*/
  /*  */
  /*  */
  /* --------------------- y2k in  begin ----------------*/
  /*  */
  if (SY0BW01.SY0BWPYR >= 50)
    SY0BW01.SY0BWPYR-YY = SY0BW01.SY0BWPYR;
    if (SY0BW01.SY0BWPYR-YY > 60)
      SY0BW01.SY0BWPYR-CC = 19;
    else
      SY0BW01.SY0BWPYR-CC = 20;
    end
    SY0BW01.SY0BWYY-YY = SY0BW01.SY0BWYY;
    if (SY0BW01.SY0BWYY-YY > 60)
      SY0BW01.SY0BWYY-CC = 19;
    else
      SY0BW01.SY0BWYY-CC = 20;
    end
    if (SY0BW01.SY0BWPYR-CMP < SY0BW01.SY0BWYY-CMP)
      converseLib.validationFailed(30); /* date not valid*/
      SY0BW01.SY0BWDVF = "N";
    end
  end
  /*  */
  /* --------------------- y2k in  end ------------------*/
  /*  */

end // end SY0BSGG

// check for pf keys
Function SY0BSHA()

       /* ******************************************/
       /* * CHECK FOR FUNCTION KEYS               **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SY0BM006.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM006 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SY0BM006.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM006 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


end // end SY0BSHA

// validate size fields
Function SY0BSHB()

       /* **************************************/
       /* *  VALIDATE EACH OF THE 40 POSSIBLE **/
       /* *  SIZES.                           **/
       /* *                                   **/
       /* **************************************/

   /* load ibm/dec relative sizes into work area*/

  if (SY0BM002.SY1DECSZ != "   ")
    if (SY0BM002.SY1DECSZ in SY0BTST.SY1DECSZ)
      SY0BW01.SY0BWSTB = SY0BTSRP[sysVar.arrayIndex];
    else
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM006.SY0BMVP2 cursor, bold;
    end
  end

  SY0BW01.SY0BWGUT = "N";
  SY0BWIDX = 40;
  SY0BWSIN = 40;

  while (SY0BWIDX > 0)
    if (SY0BM006.SY3FRGUT[SY0BWIDX] == " "
     && SY0BM006.XDVCD[SY0BWIDX] == " ")
      /* next sentence*/
    else
      SY0BW01.SY0BWGUT = "Y";
      if (SY0BM006.SY3FRGUT[SY0BWIDX] == " "
       && SY0BM006.XDVCD[SY0BWIDX] != " ")
        converseLib.validationFailed(12);
                                   /* MUST HAVE BOTH FRING/GUT AND DIVISION*/
        set SY0BM006.SY3FRGUT[SY0BWIDX] cursor, bold;
      else
        if (SY0BM006.SY3FRGUT[SY0BWIDX] != " "
         && SY0BM006.XDVCD[SY0BWIDX] == " ")
          converseLib.validationFailed(12);
                                   /* MUST HAVE BOTH FRING/GUT AND DIVISION*/
          set SY0BM006.XDVCD[SY0BWIDX] cursor, bold;
        else
          if (SY0BM006.SY3FRGUT[SY0BWIDX] == "F"
           || SY0BM006.SY3FRGUT[SY0BWIDX] == "G"
           || SY0BM006.SY3FRGUT[SY0BWIDX] == "X")
            if (SY0BM006.XDVCD[SY0BWIDX] == "99")
              converseLib.validationFailed(3); /* INVALID CODE*/
              set SY0BM006.XDVCD[SY0BWIDX] cursor, bold;
            else
              if (SY0BM006.XDVCD[SY0BWIDX] in XDVTBL.XDVCD)
                if (SY0BM006.XDVCD[SY0BWIDX] == SY0BM005.XDVCD
                 || SY0BM006.XDVCD[SY0BWIDX] == "02"
                 || SY0BM006.XDVCD[SY0BWIDX] == "03")
                  /* next sentence*/
                else
                  converseLib.validationFailed(147); /* div must = color div*/
                  set SY0BM006.XDVCD[SY0BWIDX] cursor, bold;
                end
              else
                set SY0BM006.XDVCD[SY0BWIDX] cursor, bold;
                converseLib.validationFailed(3); /* INVALID CODE*/
              end
            end
          else
            set SY0BM006.SY3FRGUT[SY0BWIDX] cursor, bold;
            converseLib.validationFailed(3); /* INVALID CODE*/
          end
        end
      end
    end


      /* if a dec size scale has been set up,*/
    /* insure that all sizes are translatable to that scale*/
    /* NOTE: Check removed on 2/18/91 by MHALST*/

    /* IF SY0BM006.SY1DECSZ NE '   ';*/
      /* IF SY0BM006.XDVCD(SY0BWIDX) NE '03';*/
        /* IF SY0BW01.SY0BWSIN IN SY0BW01.SY0BWSOC;*/
          /* ; next sentence*/
        /* ELSE ;*/
          /* MOVE 137 TO EZEMNO*/
          /* SET SY0BM006.SY3FRGUT(SY0BWIDX) CURSOR,BRIGHT;*/
          /* SET SY0BM006.XDVCD(SY0BWIDX) BRIGHT;*/
        /* END ;*/
      /* ELSE ;*/
        /* IF SY0BW01.SY0BWFLG EQ 'Y'     ;   promo first time*/
          /* IF SY0BW01.SY0BWSIN IN SY0BW01.SY0BWSOC;check tbl*/
            /* ; next sentence*/
          /* ELSE ;*/
            /* MOVE 138 TO EZEMNO  ; force size for promo*/
            /* SET SY0BM006.SY3FRGUT(SY0BWIDX) CURSOR,BRIGHT;*/
            /* SET SY0BM006.XDVCD(SY0BWIDX) BRIGHT;*/
          /* END ;*/
        /* END ;*/
      /* END ;*/
    /* END ;*/


    SY0BWIDX = SY0BWIDX - 1;
    SY0BWSIN = SY0BWSIN - 1;
  end

  SY0BW01.SY0BWFLG = "N"; /* turn off first time flag*/

  if (SY0BW01.SY0BWGUT == "N")
    converseLib.validationFailed(10); /* AT LEAST ONE SIZE MUST BE ENTERED*/
    set SY0BM006.SY3FRGUT[1] cursor, bold;
    set SY0BM006.XDVCD[1] bold;
  end

   /* Now validate that at least one size has a division*/
   /* equal to the color division code (GPC=02 only).*/
  if (SY0BM001.XGPCD == "02"
   && converseVar.validationMsgNum == 0)
    SYWREC.SYWINDEX = 1;
    SYWREC.SYWINDXA = 0;
    while (SYWREC.SYWINDEX <= 40)
      if (SY0BM006.SY3FRGUT[SYWINDEX] != " ")
        if (SY0BM006.XDVCD[SYWINDEX] == SY0BM005.XDVCD)
          SYWREC.SYWINDXA = 01; /* we have a match*/
          SYWREC.SYWINDEX = 41; /* so stop the search*/
        end
      end
      SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
    end
    if (SYWREC.SYWINDXA == 0) /* Need to tell them*/
      converseLib.validationFailed(240); /* No size xdv matches color*/
    end
  end


   /* now validate the upc flag and quality fields*/

  if (SY0BM006.SY0BMUPC == "Y"
   || SY0BM006.SY0BMUPC == "N"
   || SY0BM006.SY0BMUPC == "F")
    /* next sentence*/
  else
    converseLib.validationFailed(36); /* value must by Y or N*/
    set SY0BM006.SY0BMUPC cursor, bold;
  end

  if (SY0BM006.SY0BMUPC == "Y"
   || SY0BM006.SY0BMUPC == "F")
    if (SY0BM006.XQACD == "01"
     || SY0BM006.XQACD == "02")
      /* next sentence*/
    else
      converseLib.validationFailed(3); /* invalid code*/
      set SY0BM006.XQACD cursor, bold;
    end
  end

end // end SY0BSHB

// set screen fields protect
Function SY0BSHC()


       /* *************************************/
       /* *  IF THE SY0BWOPT IS PF15T        **/
       /* *   THEN THE EXISTING SIZES        **/
       /* *   MUST BE SET TO PROTECT AND     **/
       /* *   THE CURSOR PLACED ON THE       **/
       /* *   NEXT UNPROTECTD SIZE FIELD.    **/
       /* *************************************/

  SY0BWIDX = 40;

  while (SY0BWIDX > 0)
    if (SY0BW01.SY0BWOPT == "PF15T")
      if (SY3REC.SY3FRGUT[SY0BWIDX] != " ")
        set SY0BM006.SY3FRGUT[SY0BWIDX] protect;
        set SY0BM006.XDVCD[SY0BWIDX] protect;
      else
        if (SY4REC.SY4IDDSC[SY0BWIDX] == " ")
          set SY0BM006.SY3FRGUT[SY0BWIDX] protect;
          set SY0BM006.XDVCD[SY0BWIDX] protect;
        else
          if (converseVar.validationMsgNum > 0)
            /* next sentence*/
          else
            set SY0BM006.SY3FRGUT[SY0BWIDX] cursor;
          end
        end
      end
    else
      if (SY4REC.SY4IDDSC[SY0BWIDX] == " ")
        set SY0BM006.SY3FRGUT[SY0BWIDX] protect;
        set SY0BM006.XDVCD[SY0BWIDX] protect;
      else
        if (converseVar.validationMsgNum > 0)
          /* next sentence*/
        else
          set SY0BM006.SY3FRGUT[SY0BWIDX] cursor;
        end
        /* next sentence*/
      end
    end
    SY0BWIDX = SY0BWIDX - 1;
  end
  if (SY0BM002.SY4SZSCL == "01"
   || SY0BM002.SY4SZSCL == "13")
    set SY0BM006.SY3FRGUT[40] protect;
    set SY0BM006.XDVCD[40] protect;
  end
end // end SY0BSHC

// check for pf keys
Function SY0BSIA()

       /* ******************************************/
       /* * CHECK FOR FUNCTION KEYS               **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end


  if (converseVar.eventKey is pf1)
    XSPF1();
    SY0BM007.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM007 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


  if (converseVar.eventKey is pf4)
    XSPF4();
    SY0BM007.SYMSCMSG = COMMAREA.CAMSG;
    set SY0BM007 alarm;
    converseLib.validationFailed(1);
    exit stack;
  end


end // end SY0BSIA

// add records to db2 tables
Function SY0BSIB()

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  SY0BSAF();

       /* ******************************************/
       /* *   set up zzz family record for adds  **/
       /* ******************************************/

  SY0BWZZZ.ZZZSDT = TA2REC.TA2GRGGN;
  SY0BWZZZ.ZZZCHGDT = TA2REC.TA2GRGGN;
  SY0BWZZZ.ZZZCHGTM = TA2REC.TA2TIMHM;
  SY0BWZZZ.ZZZCHGCT = 0;

       /* ******************************************/
       /* *   ADD STYLE RECORD TO STYLE TABLE     **/
       /* ******************************************/

  SY0BSIC();

       /* ******************************************/
       /* *   ADD COLOR RECORD TO COLOR TABLE     **/
       /* ******************************************/

  SY0BSID();

       /* ******************************************/
       /* *   ADD SIZE RECORD TO SIZE TABLE       **/
       /* ******************************************/

  SY0BSIE();

       /* ******************************************/
       /* *   UPDATE STYLE DEV COLOR ROW          **/
       /* ******************************************/

  SY0BSKC();

       /* ******************************************/
       /* *   commit style/color/size records     **/
       /* *   to their tables.                    **/
       /* ******************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  set SY0BW03 empty;

  if (converseVar.validationMsgNum == 0) /* No errors - save into previous key*/
    SY0BW03.SY0BW-P-XGPCD = SY0BM001.XGPCD;
    SY0BW03.SY0BW-P-STNBR = SY0BM001.SY1STNBR;
    SY0BW03.SY0BW-P-CLRID = SY0BM001.SY2CLRID;
    SY0BW03.SY0BW-P-XDMCD = SY0BM001.XDMCD;
  end

end // end SY0BSIB

// add style record to table
Function SY0BSIC()


       /* ******************************************/
       /* *   ADD STYLE RECORD TO STYLE TABLE     **/
       /* *    1. SCREENS SY0BM002 & SY0BM003     **/
       /* *       ARE MOVED TO THE ST1REC AND     **/
       /* *       THEN ADDED TO THE STYLE TABLE.  **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       THE TABLE IS ROLLED BACK TO     **/
       /* *       ITS BEFORE CONDITION.           **/
       /* *                                       **/
       /* ******************************************/


  if (SY0BW01.SY0BWOPT == "PF13T")
    /* next sentence*/
  else
    return;
  end


  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SY1REC empty;
  set SQLCA empty;

  move SY0BM002 to SY1REC withV60Compat;
  move SY0BM003 to SY1REC withV60Compat;
  move SY0BWZZZ to SY1REC withV60Compat;
  SY1REC.XGPCD = SY0BM001.XGPCD;
  SY1REC.XQTCD1 = "000";
  SY1REC.XQTCD2 = "000";
  SY1REC.SY1COMPF = "1";
  SY1REC.SY1PRCZS = "S";
  if (SY1REC.XRYCD == "00"
   || SY1REC.XRYCD == " ")
    SY1REC.SY1RYELG = "N";
  else
    SY1REC.SY1RYELG = "S";
  end

   /* Spain ruling - For footwear and equipment, check to see*/
   /* if special feature 68 should be added to indicate Spain*/
   /* compliant products.*/
  if (SY1REC.XGPCD == "02")
    SY0BS-SEARCH-XPC();
  end

   /* For footwear, default the units per case field. This*/
   /* also includes inserting a row into the VUCASE01 table.*/
  if (SY1REC.XGPCD == "02" /* Footwear only*/
   && SY1REC.SY1STNBR > "100000") /* Exclude equipment*/
    if (SY1REC.SY4SZSCL == "01" /* Adult footwear*/
     || SY1REC.SY4SZSCL == "02" /* Childrens footwear*/
     || SY1REC.SY4SZSCL == "13") /* Adult footwear*/
      SY1REC.SY1UNPCS = 12; /* Default to 12*/
    end
    if (SY1REC.SY4SZSCL == "03") /* Infant footwear*/
      SY1REC.SY1UNPCS = 24; /* Default to 12*/
    end
    if (SY1REC.SY1UNPCS != 0) /* We set it*/
      SY0BS-CHK-UCASE(); /* Check for UCASE data*/
    end
  end

  call "IO0120" ("A ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY0BSIG(); /* write audit file*/
    SY0BSIH(); /* write tag file*/
    SY0BS-CHK-STYXF(); /* Check style xref*/
    if (SQLCA.VAGen_SQLCODE == 0
     && VSTYXF01.XGP-GPC-CD == "03")
      SY0BS-ADD-TRDRV(); /* tag for legal review*/
    end
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(4); /* style record  exists*/
      set SY0BM007.SY1STNBR cursor, bold;
      SY0BM007.SYMSCMSG = "...  USE PA2 TO START OVER  ";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "A       ";
      TA1REC.TA1LOCAT[2] = "SY0BSIC ";
      TA1REC.TA1LOCAT[3] = "IO0120  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM007";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error...*/
      set SY0BM007.SY1STNBR cursor, bold;
      exit stack;

    end
  end


end // end SY0BSIC

// add color record to table
Function SY0BSID()
       /* ******************************************/
       /* *   ADD COLOR RECORD TO COLOR TABLE     **/
       /* *    1. SCREEN SY0BM005 IS MOVED TO     **/
       /* *       SY2REC AND THEN ADDED TO THE    **/
       /* *       COLOR TABLE.                    **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       THE TABLE IS ROLLED BACK.       **/
       /* *                                       **/
   /* ** maintenance log ****************************/
   /* * 06-08-95  BCourt  Instead of assuming a new**/
   /* *     color means a new product xref ID, first*/
   /* *     check to see if VPRDXF01 exists.       **/
   /* ***********************************************/

        /* ** style and color records already exist ***/
        /* ** we do not need to add them for pf15   ***/

  if (SY0BW01.SY0BWOPT == "PF15T")
    return;
  else
    /* next sentence*/
  end


  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;
  set SY2REC empty;

  move SY0BM005 to SY2REC withV60Compat; /* group move - screen to color table.*/
  move SY0BM008 to SY2REC withV60Compat; /* group move - screen to color table.*/

  if (SY2REC.PC3POIDT != 0) /* need to add century*/
    if (SY2REC.PC3POIDT < 500000) /* year < 50*/
      SY2REC.PC3POIDT = SY2REC.PC3POIDT + 20000000;
    else
      SY2REC.PC3POIDT = SY2REC.PC3POIDT + 19000000;
    end
  end

  if (SY2REC.SY2FDSMO != 0) /* need to add century*/
    if (SY2REC.SY2FDSMO < 6000) /* year < 60*/
      SY2REC.SY2FDSMO = SY2REC.SY2FDSMO + 200000; /* century 20*/
    else
      SY2REC.SY2FDSMO = SY2REC.SY2FDSMO + 190000; /* century 19*/
    end
  end

  if (SY2REC.SY2FNSMO != 0) /* need to add century*/
    if (SY2REC.SY2FNSMO < 6000) /* year < 60*/
      SY2REC.SY2FNSMO = SY2REC.SY2FNSMO + 200000; /* century 20*/
    else
      SY2REC.SY2FNSMO = SY2REC.SY2FNSMO + 190000; /* century 19*/
    end
  end

  if (SY2REC.SY2PDCMO != 0) /* need to add century*/
    if (SY2REC.SY2PDCMO < 6000) /* year < 60*/
      SY2REC.SY2PDCMO = SY2REC.SY2PDCMO + 200000; /* century 20*/
    else
      SY2REC.SY2PDCMO = SY2REC.SY2PDCMO + 190000; /* century 19*/
    end
  end

  if (SY2REC.SY2PNCMO != 0) /* need to add century*/
    if (SY2REC.SY2PNCMO < 6000) /* year < 60*/
      SY2REC.SY2PNCMO = SY2REC.SY2PNCMO + 200000; /* century 20*/
    else
      SY2REC.SY2PNCMO = SY2REC.SY2PNCMO + 190000; /* century 19*/
    end
  end

  /*  */
  /* ------------------ y2k in begin ---------------*/
  /*  */
  set TA2REC empty;
  /*  */
  /* ------------------ y2k in end -----------------*/
  /*  */
  TA2REC.TA2GRGAN = SY0BM005.SY2BOEDT;
  SY0BSJH(); /* validate and reformat date*/
  SY2REC.SY2BOEDT = TA2REC.TA2GRGGN;

  if (SY0BM005.SY2POFBD > 0)
  /*  */
  /* ------------------ y2k in begin ---------------*/
  /*  */
    set TA2REC empty;
  /*  */
  /* ------------------ y2k in end -----------------*/
  /*  */
    TA2REC.TA2GRGAN = SY0BM005.SY2POFBD;
    SY0BSJH(); /* validate and reformat date*/
    SY2REC.SY2POFBD = TA2REC.TA2GRGGN;
  else
    SY2REC.SY2POFBD = 0;
  end

  if (SY0BM005.SY2POFXD > 0)
  /*  */
  /* ------------------ y2k in begin ---------------*/
  /*  */
    set TA2REC empty;
  /*  */
  /* ------------------ y2k in end -----------------*/
  /*  */
    TA2REC.TA2GRGAN = SY0BM005.SY2POFXD;
    SY0BSJH(); /* validate and reformat date*/
    SY2REC.SY2POFXD = TA2REC.TA2GRGGN;
  else
    SY2REC.SY2POFXD = 0;
  end

  if (SY0BM005.SY2FOFBD > 0)
  /*  */
  /* ------------------ y2k in begin ---------------*/
  /*  */
    set TA2REC empty;
  /*  */
  /* ------------------ y2k in end -----------------*/
  /*  */
    TA2REC.TA2GRGAN = SY0BM005.SY2FOFBD;
    SY0BSJH(); /* validate and reformat date*/
    SY2REC.SY2FOFBD = TA2REC.TA2GRGGN;
  else
    SY2REC.SY2FOFBD = 0;
  end

  if (SY0BM005.SY2FOFXD > 0)
  /*  */
  /* ------------------ y2k in begin ---------------*/
  /*  */
    set TA2REC empty;
  /*  */
  /* ------------------ y2k in end -----------------*/
  /*  */
    TA2REC.TA2GRGAN = SY0BM005.SY2FOFXD;
    SY0BSJH(); /* validate and reformat date*/
    SY2REC.SY2FOFXD = TA2REC.TA2GRGGN;
  else
    SY2REC.SY2FOFXD = 0;
  end

  if (SY0BM005.SY2NOFBD > 0)
  /*  */
  /* ------------------ y2k in begin ---------------*/
  /*  */
    set TA2REC empty;
  /*  */
  /* ------------------ y2k in end -----------------*/
  /*  */
    TA2REC.TA2GRGAN = SY0BM005.SY2NOFBD;
    SY0BSJH(); /* validate and reformat date*/
    SY2REC.SY2NOFBD = TA2REC.TA2GRGGN;
  else
    SY2REC.SY2NOFBD = 0;
  end

  if (SY0BM005.SY2NOFXD > 0)
  /*  */
  /* ------------------ y2k in begin ---------------*/
  /*  */
    set TA2REC empty;
  /*  */
  /* ------------------ y2k in end -----------------*/
  /*  */
    TA2REC.TA2GRGAN = SY0BM005.SY2NOFXD;
    SY0BSJH(); /* validate and reformat date*/
    SY2REC.SY2NOFXD = TA2REC.TA2GRGGN;
  else
    SY2REC.SY2NOFXD = 0;
  end

  if (SY0BM001.XGPCD == "02") /* it's footwear*/
    SY2REC.XCLCD1 = SY0BM005.XCLCD[1];
    SY2REC.XCLCD4 = SY0BM005.XCLCD[2];
    SY2REC.XCLCD2 = SY0BM005.XCLCD[3];
    SY2REC.XCLCD3 = SY0BM005.XCLCD[4];
  else
    SY2REC.XCLCD1 = SY0BM005.XCLCD[1];
    SY2REC.XCLCD2 = SY0BM005.XCLCD[2];
    SY2REC.XCLCD3 = SY0BM005.XCLCD[3];
    SY2REC.XCLCD4 = SY0BM005.XCLCD[4];
  end

  move SY0BWZZZ to SY2REC withV60Compat;
  SY2REC.XLCCD1 = "05";
  SY2REC.XGPCD = SY0BM001.XGPCD;
  SY2REC.SY2UPCFL = "N";
  SY2REC.SY2RPRDI = "N";
  SY2REC.OPZHMIND = "N";
  SY2REC.SY2COEDT = SY2REC.ZZZSDT; /* Collection Eff. Date*/
  SY2REC.SY2CEDT1 = SY0BW01.SY2CEDT1; /* move todays date - 1 day*/

  /*  */
  /* ---------------- y2k out begin --------------------*/
  /*  */
  /* IF SY2REC.XSNYR > 0;*/
  /* IF SY2REC.XSNYR > 60;*/
  /* SY2REC.XSNYR = SY2REC.XSNYR + 1900;*/
  /* ELSE;*/
  /* SY2REC.XSNYR = SY2REC.XSNYR + 2000;*/
  /* END;*/
  /* END;*/
  /*  */
  /* ---------------- y2k out end ----------------------*/
  /*  */
  /*  */
  /* ---------------- y2k in begin --------------------*/
  /*  */
  if (SY2REC.XSECD == "00"
   || SY2REC.XSECD == "PR")
    SY2REC.XSNYR = 0000;
  else
    if (SY2REC.XSNYR > 60)
      SY2REC.XSNYR = SY2REC.XSNYR + 1900;
    else
      SY2REC.XSNYR = SY2REC.XSNYR + 2000;
    end
  end
  /*  */
  /* ---------------- y2k in  end ----------------------*/
  /*  */


  call "IO0130" ("A ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes}; /* dprod.vcolor01*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SY0BSII(); /* write audit*/
    SY0BSIJ(); /* write tag*/
    SY0BS-CHK-PRDXF(); /* check xref row exists or add it.*/
    SY0BS-ADD-SYREG(); /* build marketing region rows*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(2); /* color/dimension record exists*/
      set SY0BM007.SY2CLRID cursor, bold;
      SY0BM007.SYMSCMSG = ".. USE PA2 TO RESTART ...  ";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "A        ";
      TA1REC.TA1LOCAT[2] = "SY0BSID  ";
      TA1REC.TA1LOCAT[3] = "IO0130   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM007";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error....*/
      set SY0BM007.SY2CLRID cursor, bold;
      exit stack;

    end
  end


end // end SY0BSID

// add size record to table
Function SY0BSIE()


       /* ******************************************/
       /* *   ADD SIZE  RECORD TO SIZE  TABLE     **/
       /* *    1. SCREEN SY0BM006 IS MOVED TO     **/
       /* *       SY3REC AND THEN ADDED TO THE    **/
       /* *       size  TABLE.                    **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       THE TABLE IS ROLLED BACK.       **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BW01.SY0BWOPT == "PF15T")
    SY0BSIF(); /* size table change routine*/
    return;
  else
    /* next sentence*/
  end


  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;
  set SY3REC empty;

  move SY0BM006 to SY3REC withV60Compat;
  move SY0BWZZZ to SY3REC withV60Compat;
  SY3REC.XGPCD = SY0BM001.XGPCD;

  set SQLCA empty;

  call "IO0140" ("A ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY0BSIK(); /* write audit*/
    SY0BSIL(); /* write tag*/
    if (SY0BM006.SY0BMUPC == "Y" /* create upc*/
     || SY0BM006.SY0BMUPC == "F")
      SY0BSIU();
    end
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -803)
      converseLib.validationFailed(6); /* size  record  exists*/
      set SY0BM007.SY1STNBR cursor, bold;
      SY0BM007.SYMSCMSG = " USE CHANGE TO MODIFY THE RECORD ";
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "ADD     ";
      TA1REC.TA1LOCAT[2] = "SY0BSIE ";
      TA1REC.TA1LOCAT[3] = "IO0140  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM007";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSIZE001";
      TA1TBLKE = SY3REC.SY3KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(22); /* size table error ....*/
      set SY0BM007.SY1STNBR cursor, bold;
      exit stack;
    end
  end


end // end SY0BSIE

// update size record
Function SY0BSIF()


       /* ******************************************/
       /* * UPDATE SIZE  RECORD TO SIZE  TABLE    **/
       /* *    1. SCREEN SY0BM006 IS MOVED TO     **/
       /* *       SY3REC AND IF PF15 WAS PRESSED  **/
       /* *       THEN THE SIZE TABLE IS UPDATED. **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       ALL TABLES ARE  ROLLED BACK.    **/
       /* *                                       **/
       /* ******************************************/



  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;

  SYFREC.SY3DATA = SY3REC.SY3DATA;
  move SY0BM006 to SY3REC withV60Compat;
  SY3REC.ZZZCHGTM = SY0BWZZZ.ZZZCHGTM;
  SY3REC.ZZZCHGDT = SY0BWZZZ.ZZZCHGDT;
  SY3REC.ZZZCHGCT = SYFREC.ZZZCHGCT;


  call "IO0140" ("U ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY0BSIM(); /* write audit change  record*/
    SY0BSIN(); /* write tag change record*/
    if (SY0BM006.SY0BMUPC == "Y" /* create upc*/
     || SY0BM006.SY0BMUPC == "F")
      SY0BSIU-CHG();
    end
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(37); /* unable to process update*/
      set SY0BM007.SY1STNBR cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "UPDATE   ";
      TA1REC.TA1LOCAT[2] = "SY0BSIF  ";
      TA1REC.TA1LOCAT[3] = "IO0140   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM007";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSIZE001";
      TA1TBLKE = SY3REC.SY3KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      exit stack;
    end
  end

end // end SY0BSIF

// write style audit record
Function SY0BSIG()

       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR STYLE ADD.   **/
       /* *                                       **/
       /* ******************************************/


  set SYAREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SYAREC.SYAUDTYP = "A";
  SYAREC.XXXTBLNM = "VSTYLE01";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "SY0BSIG  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTYLE01 ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY1REC.XGPCD;
  SYAREC.SY1STNBR = SY1REC.SY1STNBR;
  SYAREC.ZZZSDT = SY0BWZZZ.ZZZSDT;
  SYAREC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;
  SYAREC.SYABFLN = 0;
  SYAREC.SYAAFT = SY1REC.SY1DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "ADD      ";
    TA1REC.TA1LOCAT[2] = "SY0BSIG  ";
    TA1REC.TA1LOCAT[3] = "IO0530   ";
    TA1REC.TA1LOCAT[4] = "STYLETBL";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end



end // end SY0BSIG

// write style tag record
Function SY0BSIH()


       /* ******************************************/
       /* *   WRITE TAG RECORD FOR STYLE ADD.     **/
       /* *                                       **/
       /* ******************************************/


  set SY9REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SY9REC.SY9TGTYP = "A";
  SYAREC.XXXTBLNM = "VSTYLE01";
  SY9REC.XGPCD = SY1REC.XGPCD;
  SY9REC.SY1STNBR = SY1REC.SY1STNBR;
  SY9REC.ZZZSDT = SY0BWZZZ.ZZZSDT;
  SY9REC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;

  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY0BSIH ";
    TA1REC.TA1LOCAT[3] = "IO0520  ";
    TA1REC.TA1LOCAT[4] = "STYLETBL";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYTAG01";
    TA1TBLKE = SY9REC.SY9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(45); /* tag table error...*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end


end // end SY0BSIH

// write color audit record
Function SY0BSII()


       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR COLOR ADD.   **/
       /* *                                       **/
       /* ******************************************/


  set SYAREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SYAREC.SYAUDTYP = "A";
  SYAREC.XXXTBLNM = "VCOLOR01";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "SY0BSIG  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTYLE01 ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY2REC.XGPCD;
  SYAREC.SY1STNBR = SY2REC.SY1STNBR;
  SYAREC.SY2CLRID = SY2REC.SY2CLRID;
  SYAREC.XDMCD = SY2REC.XDMCD;
  SYAREC.ZZZSDT = SY0BWZZZ.ZZZSDT;
  SYAREC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;
  SYAREC.SYABFLN = 0;
  SYAREC.SYAAFT = SY2REC.SY2DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY0BSI  ";
    TA1REC.TA1LOCAT[3] = "IO0530  ";
    TA1REC.TA1LOCAT[4] = "COLORTBL";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end

end // end SY0BSII

// write color tag record
Function SY0BSIJ()


       /* ******************************************/
       /* *   WRITE TAG RECORD FOR COLOR ADD.     **/
       /* *                                       **/
       /* ******************************************/


  set SY9REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SY9REC.SY9TGTYP = "A";
  SY9REC.XGPCD = SY2REC.XGPCD;
  SY9REC.SY1STNBR = SY2REC.SY1STNBR;
  SY9REC.SY2CLRID = SY2REC.SY2CLRID;
  SY9REC.XDMCD = SY2REC.XDMCD;
  SY9REC.ZZZSDT = SY0BWZZZ.ZZZSDT;
  SY9REC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;

  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SY0BSI  ";
    TA1REC.TA1LOCAT[3] = "IO0520  ";
    TA1REC.TA1LOCAT[4] = "COLORTBL";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYTAG01";
    TA1TBLKE = SY9REC.SY9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(45); /* tag table error...*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end



end // end SY0BSIJ

// write size audit record
Function SY0BSIK()


       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR SIZE ADD.    **/
       /* *                                       **/
       /* ******************************************/


  set SYAREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SYAREC.SYAUDTYP = "A";
  SYAREC.XXXTBLNM = "VSIZE001";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "SY0BSIG  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTYLE01 ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY3REC.XGPCD;
  SYAREC.SY1STNBR = SY3REC.SY1STNBR;
  SYAREC.SY2CLRID = SY3REC.SY2CLRID;
  SYAREC.XDMCD = SY3REC.XDMCD;
  SYAREC.ZZZSDT = SY0BWZZZ.ZZZSDT;
  SYAREC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;
  SYAREC.SYABFLN = 0;
  SYAREC.SYAAFT = SY3REC.SY3DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY0BSIK ";
    TA1REC.TA1LOCAT[3] = "IO0530  ";
    TA1REC.TA1LOCAT[4] = "SIZETBL ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end


end // end SY0BSIK

// write size tag record
Function SY0BSIL()


       /* ******************************************/
       /* *   WRITE TAG RECORD FOR SIZE ADD.      **/
       /* *                                       **/
       /* ******************************************/


  set SY9REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SY9REC.SY9TGTYP = "A";
  SY9REC.XGPCD = SY3REC.XGPCD;
  SY9REC.SY1STNBR = SY3REC.SY1STNBR;
  SY9REC.SY2CLRID = SY3REC.SY2CLRID;
  SY9REC.XDMCD = SY3REC.XDMCD;
  SY9REC.ZZZSDT = SY0BWZZZ.ZZZSDT;
  SY9REC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;

  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SY0BSIL ";
    TA1REC.TA1LOCAT[3] = "IO0520  ";
    TA1REC.TA1LOCAT[4] = "SIZETBL ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYTAG01";
    TA1TBLKE = SY9REC.SY9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(45); /* tag table error...*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end


end // end SY0BSIL

// write change size audit
Function SY0BSIM()


       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR SIZE CHANGE. **/
       /* *                                       **/
       /* ******************************************/


  set SYAREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SYAREC.SYAUDTYP = "A";
  SYAREC.XXXTBLNM = "VSIZE001";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "SY0BSIG  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSTYLE01 ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY3REC.XGPCD;
  SYAREC.SY1STNBR = SY3REC.SY1STNBR;
  SYAREC.SY2CLRID = SY3REC.SY2CLRID;
  SYAREC.XDMCD = SY3REC.XDMCD;
  SYAREC.ZZZSDT = SY0BWZZZ.ZZZSDT;
  SYAREC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;
  SYAREC.SYABFR = SYFREC.SY3DATA;
  SYAREC.SYAAFT = SY3REC.SY3DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "ADD      ";
    TA1REC.TA1LOCAT[2] = "SY0BSIM  ";
    TA1REC.TA1LOCAT[3] = "IO0530   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end



end // end SY0BSIM

// write change size tag
Function SY0BSIN()


       /* ******************************************/
       /* *   WRITE TAG RECORD FOR SIZE CHANGE.   **/
       /* *                                       **/
       /* ******************************************/


  set SY9REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SY9REC.SY9TGTYP = "C";
  SY9REC.XGPCD = SY3REC.XGPCD;
  SY9REC.SY1STNBR = SY3REC.SY1STNBR;
  SY9REC.SY2CLRID = SY3REC.SY2CLRID;
  SY9REC.XDMCD = SY3REC.XDMCD;
  SY9REC.ZZZSDT = SY0BWZZZ.ZZZSDT;
  SY9REC.ZZZSTM = SY0BWZZZ.ZZZCHGTM;

  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "UPDATE   ";
    TA1REC.TA1LOCAT[2] = "SY0BSIN  ";
    TA1REC.TA1LOCAT[3] = "IO0520   ";
    TA1REC.TA1LOCAT[4] = "SIZETBL ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYTAG01";
    TA1TBLKE = SY9REC.SY9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(45); /* tag table error...*/
    set SY0BM007.SY1STNBR cursor, bold;
    exit stack;
  end



end // end SY0BSIN

// create UPC data for sizes
Function SY0BSIU()


       /* ******************************************/
       /* * CREATE UPC DATA FOR ALL SIZES         **/
       /* *    1. THIS STATEMENT GROUP WIL CALL   **/
       /* *       SY1280 TO CREATE UPC NUMBERS.   **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       ALL TABLES ARE  ROLLED BACK.    **/
       /* *                                       **/
       /* ******************************************/



  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;
  set SYUREC empty;

  SYUREC.XGPCD = SY3REC.XGPCD;
  SYUREC.SY1STNBR = SY3REC.SY1STNBR;
  SYUREC.SY2CLRID = SY3REC.SY2CLRID;
  SYUREC.XDMCD = SY3REC.XDMCD;
  SYUREC.XQACD = SY0BM006.XQACD;
  SYUREC.XBCCD = SY1REC.XBCCD;
  SYUREC.SYUPCFCD = "C"; /* create function*/
  if (SY0BM006.SY0BMUPC == "F") /* Forcing UPC assignment*/
    SYUREC.SYUPCOGP = "Y";
  else
    if (SY0BM006.SY0BMUPC == "N") /* Forcing NO UPC assignment*/
      SYUREC.SYUPCOGP = "N";
    end
  end

  SY0BW01.SY0BWIDX = 1;
  while (SY0BW01.SY0BWIDX <= 40)
    if (SY3REC.XDVCD[SY0BWIDX] != "  ")
      if (SY0BM006.XQACD == "01" /* first quality*/
       && SY3REC.SY3FRGUT[SY0BWIDX] == "X") /* then cannot be X*/
        /* next sentence (will not make UPC for this)*/
      else
        SYUREC.SY5SZID[SY0BWIDX] = SY0BWIDX;
      end
    end
    SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
  end

  call "SY1280" (SYUREC) {isNoRefresh = yes, isExternal = yes};

  if (SYUREC.SYUPCRCD > 50) /* bad problems*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "SY0BSIU  ";
    TA1REC.TA1LOCAT[2] = "SY1280   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYUPC01";
    TA1TBLKE = SY3REC.SY3KEY;
    SQLCA.SQLCAREC = SYUREC.SQLCAREC;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    exit stack;
  end

end // end SY0BSIU

// create UPC data for sizes
Function SY0BSIU-CHG()


       /* ******************************************/
       /* * CREATE UPC DATA FOR ALL SIZES         **/
       /* *    1. THIS STATEMENT GROUP WIL CALL   **/
       /* *       SY1280 TO CREATE UPC NUMBERS.   **/
       /* *       (NEW SIZES ON EXISTING VSIZE)   **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       ALL TABLES ARE  ROLLED BACK.    **/
       /* *                                       **/
       /* ******************************************/



  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;
  set SYUREC empty;

  SYUREC.XGPCD = SY3REC.XGPCD;
  SYUREC.SY1STNBR = SY3REC.SY1STNBR;
  SYUREC.SY2CLRID = SY3REC.SY2CLRID;
  SYUREC.XDMCD = SY3REC.XDMCD;
  SYUREC.XQACD = SY0BM006.XQACD;
  SYUREC.XBCCD = SY1REC.XBCCD;
  SYUREC.SYUPCFCD = "C"; /* create function*/
  if (SY0BM006.SY0BMUPC == "F") /* Forcing UPC assignment*/
    SYUREC.SYUPCOGP = "Y";
  else
    if (SY0BM006.SY0BMUPC == "N") /* Forcing NO UPC assignment*/
      SYUREC.SYUPCOGP = "N";
    end
  end
  SY0BW01.SY0BWIDX = 1;
  while (SY0BW01.SY0BWIDX <= 40)
    if (SY3REC.XDVCD[SY0BWIDX] != "  ") /* We have size entry*/
      if (SY2REC.SY2UPCFL != "Y" /* No UPC's for color*/
       || SYFREC.XDVCD[SY0BWIDX] == "  ") /* New size*/
        if ((SY0BM006.XQACD == "01" /* first quality*/
         && SY3REC.SY3FRGUT[SY0BWIDX] == "X")) /* cannot be X*/
          /* next sentence (will not make UPC for this)*/
        else
          SYUREC.SY5SZID[SY0BWIDX] = SY0BWIDX;
        end
      end
    end
    SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
  end

  call "SY1280" (SYUREC) {isNoRefresh = yes, isExternal = yes};

  if (SYUREC.SYUPCRCD > 50) /* bad problems*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "SY0BSIU-C";
    TA1REC.TA1LOCAT[2] = "SY1280   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYUPC02";
    TA1TBLKE = SY3REC.SY3KEY;
    SQLCA.SQLCAREC = SYUREC.SQLCAREC;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    exit stack;
  end

end // end SY0BSIU-CHG

// verify prop beg. offering date
Function SY0BSJA()

       /* ******************************************/
       /* *  VERIFY prop beginning offering date  **/
       /* ******************************************/

  set TA2REC empty;

  if (SY0BM005.SY2POFBD != 0)
    TA2REC.TA2GRGAN = SY0BM005.SY2POFBD;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";

    SY0BSAF();

    if (TA2REC.TA2RTNCD == 222)
      converseLib.validationFailed(30); /* invalid date entered*/
      set SY0BM005.SY2POFBD cursor, bold;
      return;
    else
      if (TA2REC.TA2RTNCD > 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B   ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "SY0BSJA ";
        TA1REC.TA1LOCAT[3] = "TA0040  ";
        TA1REC.TA1LOCAT[4] = "GREGGREG";
        TA1REC.TA1MAP = "SY0BM005";
        TA1REC.TA1TBLVU = "DATE ";
        TA1TBLKE = SY0BM005.SY2POFBD;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(30); /* invalid date entered*/
        set SY0BM005.SY2POFBD cursor, bold;
        return;
      else
        SY2REC.SY2POFBD = TA2REC.TA2GRGGN;
        return;
      end
    end
  else
    if (SY0BM001.XGPCD == "05")
      return;
    else
      if (SY0BM001.XGPCD != "03")
        set SY0BM005.SY2POFBD cursor, bold;
        converseLib.validationFailed(40); /* required field (for footwear)*/
        return;
      end
    end
  end


  if (SY0BM005.XSECD in XSETBL.XSECD)
    if (XSETBL.XSESETYP[sysVar.arrayIndex] == " ") /* Season not in XSN*/
      TA2REC.TA2DTOPT = "GETDATE";
      SY0BSAF();
      SY2REC.SY2POFBD = TA2REC.TA2GRGGN;
      SY0BM005.SY2POFBD = TA2REC.TA2GRGAN;
      return;
    end
  else
    return; /* Cannot continue with bad XSE*/
  end

  SY0BW01.SY0BWSSN = XSETBL.XSESETYP[sysVar.arrayIndex];
  SY0BW01.SY0BWSYR = SY0BM005.XSNYR;
  if (SY0BW01.SY0BW-YSN-FL == "N") /* Cannot use YSN*/
    set SY0BM005.SY2POFBD cursor, bold;
    converseLib.validationFailed(130); /* Not on xsntbl - enter date*/
    return;
  else
    SY2REC.SY2POFBD = SY0BW01.XSN-SESN-BDT;
    TA2REC.TA2GRGGN = SY0BW01.XSN-SESN-BDT;
    SY0BSJG(); /* convert date - ccyymmdd to mmddyy*/
    SY0BM005.SY2POFBD = TA2REC.TA2GRGAN;
  end

end // end SY0BSJA

// verify prop end. offering date
Function SY0BSJB()

       /* ******************************************/
       /* *  VERIFY prop ending offering date     **/
       /* ******************************************/

  set TA2REC empty;

  if (SY0BM005.SY2POFXD != 0)
    TA2REC.TA2GRGAN = SY0BM005.SY2POFXD;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";

    SY0BSAF();

    if (TA2REC.TA2RTNCD == 222)
      converseLib.validationFailed(30); /* invalid date entered*/
      set SY0BM005.SY2POFXD cursor, bold;
      return;
    else
      if (TA2REC.TA2RTNCD > 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B   ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "SY0BSJB ";
        TA1REC.TA1LOCAT[3] = "TA0040  ";
        TA1REC.TA1LOCAT[4] = "GREGGREG";
        TA1REC.TA1MAP = "SY0BM005";
        TA1REC.TA1TBLVU = "DATE ";
        TA1TBLKE = SY0BM005.SY2POFXD;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(30); /* invalid date entered*/
        set SY0BM005.SY2POFXD cursor, bold;
        return;
      else
        SY2REC.SY2POFXD = TA2REC.TA2GRGGN;
        return;
      end
    end
  else
    if (SY0BM001.XGPCD == "05")
      return;
    else
      if (SY0BM001.XGPCD != "02"
       && SY0BM001.XGPCD != "03")
        SY2REC.SY2POFXD = 020431231;
        SY0BM005.SY2POFXD = 123143;
        return;
      end
    end
  end

  if (SY0BM005.XSECD in XSETBL.XSECD)
    if (XSETBL.XSESETYP[sysVar.arrayIndex] == " ")
      SY2REC.SY2POFXD = 020431231;
      SY0BM005.SY2POFXD = 123143;
      return;
    end
  else
    return;
  end

  SY0BW01.SY0BWSSN = XSETBL.XSESETYP[sysVar.arrayIndex];
  SY0BW01.SY0BWSYR = SY0BM005.XSNYR;
  if (SY0BW01.SY0BW-YSN-FL == "Y")
    SY2REC.SY2POFXD = SY0BW01.XSN-SESN-XDT;
    TA2REC.TA2GRGGN = SY0BW01.XSN-SESN-XDT;

    SY0BSJG(); /* convert date - ccyymmdd to mmddyy*/

    SY0BM005.SY2POFXD = TA2REC.TA2GRGAN;
    return;
  else
    set SY0BM005.SY2POFXD cursor, bold;
    converseLib.validationFailed(130); /* Not on xsntbl - enter date*/
    return;
  end

end // end SY0BSJB

// verify fut. beg. offering date
Function SY0BSJC()

       /* ******************************************/
       /* * verify futures beginning offering date**/
       /* ******************************************/

  set TA2REC empty;
  if (SY0BM005.SY2FOFBD == 0 /* if date is zero*/
   && SY0BM001.XGPCD != "02") /* and not footwear*/
    SY0BM005.SY2FOFBD = SY0BM005.SY2POFBD; /* move in this date*/
  end

  if (SY0BM005.SY2FOFBD != 0)
    TA2REC.TA2GRGAN = SY0BM005.SY2FOFBD;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";

    SY0BSAF();

    if (TA2REC.TA2RTNCD == 222)
      converseLib.validationFailed(30); /* invalid date entered*/
      set SY0BM005.SY2FOFBD cursor, bold;
      return;
    else
      if (TA2REC.TA2RTNCD > 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B   ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "SY0BSJA ";
        TA1REC.TA1LOCAT[3] = "TA0040  ";
        TA1REC.TA1LOCAT[4] = "GREGGREG";
        TA1REC.TA1MAP = "SY0BM005";
        TA1REC.TA1TBLVU = "DATE ";
        TA1TBLKE = SY0BM005.SY2FOFBD;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(30); /* invalid date entered*/
        set SY0BM005.SY2FOFBD cursor, bold;
        return;
      else
        SY2REC.SY2FOFBD = TA2REC.TA2GRGGN;
        return;
      end
    end
  else
    if (SY0BM001.XGPCD == "05")
      return;
    else
      if (SY0BM001.XGPCD != "03")
        set SY0BM005.SY2FOFBD cursor, bold;
        converseLib.validationFailed(40); /* required field (for footwear)*/
        return;
      end
    end
  end


  if (SY0BM005.XSECD in XSETBL.XSECD)
    if (XSETBL.XSESETYP[sysVar.arrayIndex] == " ") /* Season not in XSN*/
      TA2REC.TA2DTOPT = "GETDATE";
      SY0BSAF();
      SY2REC.SY2FOFBD = TA2REC.TA2GRGGN;
      SY0BM005.SY2FOFBD = TA2REC.TA2GRGAN;
      return;
    end
  else
    return; /* Cannot continue with bad XSE*/
  end

  SY0BW01.SY0BWSSN = XSETBL.XSESETYP[sysVar.arrayIndex];
  SY0BW01.SY0BWSYR = SY0BM005.XSNYR;
  if (SY0BW01.SY0BW-YSN-FL == "Y")
    SY2REC.SY2FOFBD = SY0BW01.XSN-SESN-BDT;
    TA2REC.TA2GRGGN = SY0BW01.XSN-SESN-BDT;

    SY0BSJG(); /* convert date - ccyymmdd to mmddyy*/

    SY0BM005.SY2FOFBD = TA2REC.TA2GRGAN;
    return;
  else
    set SY0BM005.SY2FOFBD cursor, bold;
    converseLib.validationFailed(130); /* Not on xsntbl - enter date*/
    return;
  end

end // end SY0BSJC

// verify fut. end. offering date
Function SY0BSJD()

       /* ******************************************/
       /* * verify futures ending offering date   **/
       /* ******************************************/

  set TA2REC empty;

  if (SY0BM005.SY2FOFXD != 0)
    TA2REC.TA2GRGAN = SY0BM005.SY2FOFXD;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";

    SY0BSAF();

    if (TA2REC.TA2RTNCD == 222)
      converseLib.validationFailed(30); /* invalid date entered*/
      set SY0BM005.SY2FOFXD cursor, bold;
      return;
    else
      if (TA2REC.TA2RTNCD > 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B   ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "SY0BSJB ";
        TA1REC.TA1LOCAT[3] = "TA0040  ";
        TA1REC.TA1LOCAT[4] = "GREGGREG";
        TA1REC.TA1MAP = "SY0BM005";
        TA1REC.TA1TBLVU = "DATE ";
        TA1TBLKE = SY0BM005.SY2FOFXD;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(30); /* invalid date entered*/
        set SY0BM005.SY2FOFXD cursor, bold;
        return;
      else
        SY2REC.SY2FOFXD = TA2REC.TA2GRGGN;
        return;
      end
    end
  else
    if (SY0BM001.XGPCD == "05")
      return;
    else
      if (SY0BM001.XGPCD != "02"
       && SY0BM001.XGPCD != "03")
        SY2REC.SY2FOFXD = 020431231;
        SY0BM005.SY2FOFXD = 123143;
        return;
      end
    end
  end

  if (SY0BM005.XSECD in XSETBL.XSECD)
    if (XSETBL.XSESETYP[sysVar.arrayIndex] == " ")
      SY2REC.SY2FOFXD = 020431231;
      SY0BM005.SY2FOFXD = 123143;
      return;
    end
  else
    return;
  end

  SY0BW01.SY0BWSSN = XSETBL.XSESETYP[sysVar.arrayIndex];
  SY0BW01.SY0BWSYR = SY0BM005.XSNYR;
  if (SY0BW01.SY0BW-YSN-FL == "Y")
    SYWREC.SYW-FUTR-OFFER-XDT = SY0BW01.XSN-SESN-XDT;
    if (SY0BM001.XGPCD == "03")
      SYWREC.SYW-FUTR-OFFER-XDR = SY0BW01.XDR-PROD-REG-CD;
      XPSY010();
    end
    SY0BW01.SY0BW-FUTR-OFFER-XDT = SYWREC.SYW-FUTR-OFFER-XDT;
    SY2REC.SY2FOFXD = SYWREC.SYW-FUTR-OFFER-XDT;
    TA2REC.TA2GRGGN = SYWREC.SYW-FUTR-OFFER-XDT;

    SY0BSJG(); /* convert date - ccyymmdd to mmddyy*/

    SY0BM005.SY2FOFXD = TA2REC.TA2GRGAN;
    return;
  else
    set SY0BM005.SY2FOFXD cursor, bold;
    converseLib.validationFailed(130); /* Not on xsntbl - enter date*/
    return;
  end

end // end SY0BSJD

// verify nil begin offering date
Function SY0BSJE()

       /* ******************************************/
       /* *  Verify nil  beginning offering date  **/
       /* ******************************************/

  set TA2REC empty;

  if (SY0BM005.SY2NOFBD == 0 /* if date is zero*/
   && SY0BM001.XGPCD != "02") /* and not footwear*/
    if (SY0BM001.XGPCD == "03") /* for apparel, - one month*/
      SY0BW01.SY0BW-OFFER-DATE = SY0BM005.SY2POFBD;
      if (SY0BW01.SY0BW-OFFER-DATE-MM > 01)
        SY0BW01.SY0BW-OFFER-DATE-MM = SY0BW01.SY0BW-OFFER-DATE-MM - 1;
      else
        SY0BW01.SY0BW-OFFER-DATE-MM = 12;
        SY0BW01.SY0BW-OFFER-DATE-YY = SY0BW01.SY0BW-OFFER-DATE-YY - 1;
      end
      SY0BM005.SY2NOFBD = SY0BW01.SY0BW-OFFER-DATE;
    else
      SY0BM005.SY2NOFBD = SY0BM005.SY2POFBD; /* move in prop date*/
    end
  end

  if (SY0BM005.SY2NOFBD != 0)
    TA2REC.TA2GRGAN = SY0BM005.SY2NOFBD;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";

    SY0BSAF();

    if (TA2REC.TA2RTNCD == 222)
      converseLib.validationFailed(30); /* invalid date entered*/
      set SY0BM005.SY2NOFBD cursor, bold;
      return;
    else
      if (TA2REC.TA2RTNCD > 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B   ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "SY0BSJA ";
        TA1REC.TA1LOCAT[3] = "TA0040  ";
        TA1REC.TA1LOCAT[4] = "GREGGREG";
        TA1REC.TA1MAP = "SY0BM005";
        TA1REC.TA1TBLVU = "DATE ";
        TA1TBLKE = SY0BM005.SY2NOFBD;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(30); /* invalid date entered*/
        set SY0BM005.SY2NOFBD cursor, bold;
        return;
      else
        SY2REC.SY2NOFBD = TA2REC.TA2GRGGN;
        return;
      end
    end
  else
    set SY0BM005.SY2NOFBD cursor, bold;
    converseLib.validationFailed(40); /* required field*/
    return;
  end

end // end SY0BSJE

// verify nil end. offering date
Function SY0BSJF()

       /* ******************************************/
       /* *  VERIFY nil  ending offering date     **/
       /* ******************************************/

  set TA2REC empty;

  if (SY0BM005.SY2NOFXD != 0)
    TA2REC.TA2GRGAN = SY0BM005.SY2NOFXD;
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DTOPT = "GREGGREG";

    SY0BSAF();

    if (TA2REC.TA2RTNCD == 222)
      converseLib.validationFailed(30); /* invalid date entered*/
      set SY0BM005.SY2NOFXD cursor, bold;
      return;
    else
      if (TA2REC.TA2RTNCD > 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY0B   ";
        TA1REC.TA1LOCAT[1] = "S       ";
        TA1REC.TA1LOCAT[2] = "SY0BSJB ";
        TA1REC.TA1LOCAT[3] = "TA0040  ";
        TA1REC.TA1LOCAT[4] = "GREGGREG";
        TA1REC.TA1MAP = "SY0BM005";
        TA1REC.TA1TBLVU = "DATE ";
        TA1TBLKE = SY0BM005.SY2NOFXD;
        move SQLCA to ERRSQLCA withV60Compat;
        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(30); /* invalid date entered*/
        set SY0BM005.SY2NOFXD cursor, bold;
        return;
      else
        SY2REC.SY2NOFXD = TA2REC.TA2GRGGN;
        return;
      end
    end
  else
    if (SY0BM001.XGPCD == "05")
      return;
    else
      if (SY0BM001.XGPCD != "03")
        SY2REC.SY2NOFXD = 020431231;
        SY0BM005.SY2NOFXD = 123143;
        return;
      end
    end
  end

  if (SY0BM005.XSECD in XSETBL.XSECD)
    if (XSETBL.XSESETYP[sysVar.arrayIndex] == " ")
      SY2REC.SY2NOFXD = 020431231;
      SY0BM005.SY2NOFXD = 123143;
      return;
    end
  else
    set SY0BM005.SY2NOFXD cursor, bold;
    converseLib.validationFailed(130); /* Not on xsntbl - enter date*/
    return;
  end

  SY0BW01.SY0BWSSN = XSETBL.XSESETYP[sysVar.arrayIndex];
  SY0BW01.SY0BWSYR = SY0BM005.XSNYR;
  SY0BW01.SY0BWIDX = 1;
  while (SY0BW01.SY0BWIDX > 0)
    if (YSNTBL.XGPCD[SY0BWIDX] == "99") /* At end of table*/
      if (converseVar.validationMsgNum == 0 /* No other errors*/
       && SY0BM005.SY2POFXD != 0)           /* and we have a prop date*/
        SY0BM005.SY2NOFXD = SY0BM005.SY2POFXD;
        SY2REC.SY2NOFXD = SY2REC.SY2POFXD;
      else
        set SY0BM005.SY2NOFXD cursor, bold;
        converseLib.validationFailed(130); /* Not on xsntbl*/
        return;
      end
    else
      if (YSNTBL.XGPCD[SY0BWIDX] == SY0BW01.XGP-GPC-CD
       && YSNTBL.XDR-PROD-REG-CD[SY0BWIDX] == "04"
       && YSNTBL.XSECD[SY0BWIDX] == SY0BW01.XSE-SESN-CD
       && YSNTBL.XSNYR[SY0BWIDX] == SY0BW01.XSN-SESN-YR-RNG
       && YSNTBL.XXXSTAT[SY0BWIDX] == "A")
        SY2REC.SY2NOFXD = YSNTBL.XSN-SESN-XDT[SY0BWIDX];
        TA2REC.TA2GRGGN = YSNTBL.XSN-SESN-XDT[SY0BWIDX];
        SY0BSJG(); /* convert date*/
        SY0BM005.SY2NOFXD = TA2REC.TA2GRGAN;
        return;
      else
        SY0BW01.SY0BWIDX = SY0BW01.SY0BWIDX + 1;
      end
    end
  end

end // end SY0BSJF

// reformat offering dates
Function SY0BSJG()


       /* ******************************************/
       /* *   reformat offering dates             **/
       /* *        from ccyymmdd to mmddyy        **/
       /* *        for sy0bm005 screen display.   **/
       /* ******************************************/

  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2DTOPT = "GREGGREG";

  SY0BSAF(); /* call date routine*/

  if (TA2REC.TA2RTNCD == 0
   || TA2REC.TA2RTNCD == 222)
    return;
  else
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SY0BSJG ";
    TA1REC.TA1LOCAT[3] = "TA0040  ";
    TA1REC.TA1LOCAT[4] = "GREGGREG";
    TA1REC.TA1MAP = "SY0BM005";
    TA1REC.TA1TBLVU = "DATE ";
    TA1TBLKE = TA2REC.TA2GRGGN;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(30); /* invalid date entered*/
    set SY0BM007.SY2CLRID cursor, bold;
    exit stack;
  end


end // end SY0BSJG

// reformat offering dates
Function SY0BSJH()


       /* ******************************************/
       /* *   reformat screen date                **/
       /* *        from mmddyy to ccyymmdd        **/
       /* *        for sy0bm005 to sy2rec moves.  **/
       /* ******************************************/

  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DTOPT = "GREGGREG";

  SY0BSAF(); /* call date routine*/

  if (TA2REC.TA2RTNCD > 0)
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SY0BSJH ";
    TA1REC.TA1LOCAT[3] = "TA0040  ";
    TA1REC.TA1LOCAT[4] = "GREGGREG";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1TBLVU = "DATE ";
    TA1TBLKE = TA2REC.TA2GRGAN;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(30); /* invalid date entered*/
    set SY0BM007.SY2CLRID cursor, bold;
    exit stack;
  end


end // end SY0BSJH

// Get style dev. to dup from
Function SY0BSKA()


       /* ******************************************/
       /* *      GET STYLE DEVELOPMENT STYLE TO   **/
       /* *      PRE-LOAD SCREENS.                **/
       /* *                                       **/
       /* *   1. IF DUP. STYLE EXISTS MOVE TO     **/
       /* *      TO STYLE SCREENS 1 AND 2.        **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;
  set VSYDVL03 empty;

  VSYDVL03.PG4STNBR = SY0BM001.PG4STNBR;

  call "VSYDVL03" ("S ", SQLCA, VSYDVL03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VSYDVL03.PG4DLTFL == "Y") /* project being deleted*/
      converseLib.validationFailed(181); /* so tell user*/
      set SY0BM001.PG4STNBR cursor, bold;
      exit stack;
    end
    if (SY0BM001.SY0BMDSY == " ") /* not duping from style*/
      SY0BSKD(); /* clear all screens*/
      move VSYDVL03 to SY0BM002 withV60Compat;
      if (VSYDVL03.RB-STYGRP-CNSMR-NM != " ") /* If we have consumer nm*/
        SY0BM002.SY1STYNM = VSYDVL03.RB-STYGRP-CNSMR-NM; /* Move it in*/
      end
      move VSYDVL03 to SY0BM003 withV60Compat;
      move VSYDVL03 to SY0BM005 withV60Compat;
      /* MOVE VSYDVL03 TO SY0BM006;*/
      /* MOVE VSYDVL03 TO SY0BM007;*/
      move VSYDVL03 to SY0BM008 withV60Compat;
      if (VSYDVL03.PG4SZRNG != " ")
        SY0BM002.SY4ZDESC = VSYDVL03.PG4SZRNG;
      end
      SY0BSKE(); /* default remaining fields*/
    end
    SY0BM008.SY2RSTNB = VSYDVL03.PG4STNBR;
    SY0BSKF(); /* Reformat Offer Dates*/
    /* reformat production and delivery dates to po id*/
    SY0BW01.SY0BWDTT = VSYDVL03.PG2FPDMO;
    SY0BW01.SY0BWPYR = SY0BW01.SY0BWTYR;
    SY0BW01.SY0BWPM1 = SY0BW01.SY0BWTMO;
    SY0BW01.SY0BWDTT = VSYDVL03.PG4FDLMO;
    SY0BW01.SY0BWPM2 = SY0BW01.SY0BWTMO;
    SY0BM008.PC3POIDT = SY0BW01.SY0BWPO;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(169); /* style record does not exists*/
      set SY0BM001.PG4STNBR cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY0BSKA  ";
      TA1REC.TA1LOCAT[3] = "VSYDVL03 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM001";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYDVL01";
      TA1TBLKE = VSYDVL03.PG4STNBR;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error....*/
      set SY0BM001.PG4STNBR cursor, bold;
      exit stack;
    end
  end


end // end SY0BSKA

// Get style dev. color for dup
Function SY0BSKB()


       /* ******************************************/
       /* *      GET STYLE DEVELOPMENT COLOR TO   **/
       /* *      PRE-LOAD SCREENS.                **/
       /* *                                       **/
       /* *   1. IF DUP. COLOR EXISTS MOVE TO     **/
       /* *      TO STYLE SCREENS 5 AND 8.        **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;
  set VSYDPC02 empty;

  VSYDPC02.PG-STYDV-NBR = SY0BM001.PG4STNBR;
  VSYDPC02.PG-STYDV-COLR-NBR = SY0BM001.PG9CLRNB;

  call "VSYDPC02" ("S ", SQLCA, VSYDPC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VSYDPC02.PG-STY-STAT-IND == "Y") /* passed edits*/
      SY0BM005.SY2CLRDS = VSYDPC02.SY-STY-COLR-DESC;
      SY0BM008.SY2CLRDS = VSYDPC02.SY-STY-COLR-DESC;
      SY0BM006.SY0BMVP2 = VSYDPC02.PG-SZ-RNG-COMNT;
      SY0BM006.SY0BM-PRM-TXT = VSYDPC02.RB-PRM-SZ-RNG-TXT;
      if (VSYDPC02.PG-SZ-RNG-COMNT != " ")
        SY0BM002.SY4ZDESC = VSYDPC02.PG-SZ-RNG-COMNT;
      else
        if (VSYDPC02.RB-PRM-SZ-RNG-TXT != " ")
          SY0BM002.SY4ZDESC = VSYDPC02.RB-PRM-SZ-RNG-TXT;
        end
      end
      if (VSYDPC02.XDV-DIV-CD != " ")
        SY0BM005.XDVCD = VSYDPC02.XDV-DIV-CD;
      end
      if (SY0BM001.XGPCD == "02")
        SY0BM005.XCLCD[1] = VSYDPC02.XCL-COLR-CD[1];
        SY0BM005.XCLCD[2] = VSYDPC02.XCL-COLR-CD[4];
        SY0BM005.XCLCD[3] = VSYDPC02.XCL-COLR-CD[2];
        SY0BM005.XCLCD[4] = VSYDPC02.XCL-COLR-CD[3];
      else
        SY0BM005.XCLCD[1] = VSYDPC02.XCL-COLR-CD[1];
        SY0BM005.XCLCD[2] = VSYDPC02.XCL-COLR-CD[2];
        SY0BM005.XCLCD[3] = VSYDPC02.XCL-COLR-CD[3];
        SY0BM005.XCLCD[4] = VSYDPC02.XCL-COLR-CD[4];
      end
      SY0BM005.PG9CLRNB = SY0BM001.PG9CLRNB;
      return;
    else
      if (VSYDPC02.PG-STY-STAT-IND == "N")
        converseLib.validationFailed(171); /* style dev. not passed edits*/
        set SY0BM001.PG9CLRNB cursor, bold;
      else
        if (VSYDPC02.PG-STY-STAT-IND != "Y")
          converseLib.validationFailed(172); /* style dev. color allready created*/
          set SY0BM001.PG9CLRNB cursor, bold;
        end
      end
      exit stack;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(170); /* style dev color not found*/
      set SY0BM001.PG9CLRNB cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY0BSKB  ";
      TA1REC.TA1LOCAT[3] = "VSYDPC02 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM001";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYDPC02";
      TA1TBLKE = VSYDVL03.PG4STNBR;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* style table error....*/
      set SY0BM001.PG9CLRNB cursor, bold;
      exit stack;
    end
  end


end // end SY0BSKB

// update style dev color row
Function SY0BSKC()


       /* ******************************************/
       /* *   UPDATE STYLE DEV COLOR ROW TO SHOW  **/
       /* *   WE ADDED IT TO PRODUCT TABLES       **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       THE TABLE IS ROLLED BACK.       **/
       /* *                                       **/
       /* ******************************************/

  if (SY0BW01.SY0BWOPT == "PF15T"     /* no update on add sizes*/
   || SY0BM001.PG4STNBR == " "        /* or no style dev*/
   || VSYDPC02.PG-STY-STAT-IND != "Y" /* or status not correct*/
   || converseVar.validationMsgNum > 0) /* or other errors*/
    return;
  end

  set SQLCA empty;
  VSYDPC02.PG-STY-STAT-IND = "C";
  VSYDPC02.SY-COLR-CD-ID = SY0BM001.SY2CLRID;
  VSYDPC02.ZZ-CHNG-DT = SY0BWZZZ.ZZZCHGDT;
  VSYDPC02.ZZ-CHNG-HHMM = SY0BWZZZ.ZZZCHGTM;

  call "VSYDPC02" ("U ", SQLCA, VSYDPC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "UPDATE  ";
    TA1REC.TA1LOCAT[2] = "SY0BSKC ";
    TA1REC.TA1LOCAT[3] = "VSYDPC02";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "VSYDPC02";
    TA1TBLKE = VSYDVL03.PG4STNBR;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* color table error ...*/
    exit stack;
  end

   /* Check for existance of X-Ref Row*/

  VSYDVX02.PG-STYDV-NBR = SY0BM001.PG4STNBR;
  VSYDVX02.PG-STYDV-COLR-NBR = SY0BM001.PG9CLRNB;
  call "VSYDVX02" ("S ", SQLCA, VSYDVX02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* Record allready exists*/
    return; /* so exit*/
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "SELECT  ";
      TA1REC.TA1LOCAT[2] = "SY0BSKC ";
      TA1REC.TA1LOCAT[3] = "VSYDVX02";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM007";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYDVX02";
      TA1TBLKE = VSYDVX02.PG-STYDV-NBR;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error ...*/
      exit stack;
    end
  end

   /* Record not on file so add it*/

  set SQLCA empty;
  set VSYDVX02 empty;
  VSYDVX02.PG-STYDV-NBR = SY0BM001.PG4STNBR;
  VSYDVX02.PG-STYDV-COLR-NBR = SY0BM001.PG9CLRNB;
  VSYDVX02.XGP-GPC-CD = SY0BM001.XGPCD;
  VSYDVX02.SY-STY-NBR = SY0BM001.SY1STNBR;
  VSYDVX02.SY-COLR-CD-ID = SY0BM001.SY2CLRID;
  VSYDVX02.XDM-DIM-CD = SY0BM001.XDMCD;
  VSYDVX02.RB-STY-ID = VSYDPC02.RB-STY-ID;
  VSYDVX02.RB-SG-COLR-ID = VSYDPC02.RB-SG-COLR-ID;
  VSYDVX02.RB-DIM-IND = VSYDPC02.RB-DIM-IND;
  VSYDVX02.ZZ-SDT = SY0BWZZZ.ZZZSDT;
  VSYDVX02.ZZ-CHNG-DT = SY0BWZZZ.ZZZCHGDT;
  VSYDVX02.ZZ-CHNG-HHMM = SY0BWZZZ.ZZZCHGTM;

  call "VSYDVX02" ("A ", SQLCA, VSYDVX02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0B   ";
    TA1REC.TA1LOCAT[1] = "INSERT  ";
    TA1REC.TA1LOCAT[2] = "SY0BSKC ";
    TA1REC.TA1LOCAT[3] = "VSYDVX02";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0BM007";
    TA1REC.TA1DBASE = "DPRODG";
    TA1REC.TA1TBLVU = "VSYDVX02";
    TA1TBLKE = VSYDVX02.PG-STYDV-NBR;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* color table error ...*/
    exit stack;
  end


end // end SY0BSKC

// Get style dev. to dup from
Function SY0BSKD()
  set SY0BM002 initial;
  set SY0BM003 initial;
  set SY0BM005 initial;
  set SY0BM006 initial;
  set SY0BM007 initial;
  set SY0BM008 initial;
  SY0BM002.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM003.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM005.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM006.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM007.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0BM008.SYMCURDT = VGVar.currentShortGregorianDate;

end // end SY0BSKD

// Get style dev. to dup from
Function SY0BSKE()

   /* Default Gender based on Gender Age*/
  if (SY0BM002.XGACD in XGATBL.XGACD)
    SY0BM002.XGCCD = XGATBL.XGCCD[sysVar.arrayIndex];
  end

  SY0BM002.XUMCD = "01";
  SY0BM002.SY1FNSHG = "1";
  SY0BM002.SY1DUTYS = "N";
  SY0BM002.XCWCD = "000";

   /* Default Nbr of Airbags*/
  SY0BW01.FK-NBR-AIRBAG-SHOE = 0;
  if (VSYDVL03.PG4AIRB1 != " ")
    SY0BM003.PG-AIRBAG-NBR1 = VSYDVL03.PG4AIRB1;
    SY0BW01.FK-NBR-AIRBAG-SHOE = SY0BW01.FK-NBR-AIRBAG-SHOE + 1;
  end
  if (VSYDVL03.PG4AIRB2 != " ")
    SY0BM003.PG-AIRBAG-NBR2 = VSYDVL03.PG4AIRB2;
    SY0BW01.FK-NBR-AIRBAG-SHOE = SY0BW01.FK-NBR-AIRBAG-SHOE + 1;
  end
  if (VSYDVL03.PG4AIRB3 != " ")
    SY0BM003.PG-AIRBAG-NBR3 = VSYDVL03.PG4AIRB3;
    SY0BW01.FK-NBR-AIRBAG-SHOE = SY0BW01.FK-NBR-AIRBAG-SHOE + 1;
  end
  if (SY0BW01.FK-NBR-AIRBAG-SHOE > VSYDVL03.FK-NBR-AIRBAG-SHOE)
    SY0BM003.FK-NBR-AIRBAG-SHOE = SY0BW01.FK-NBR-AIRBAG-SHOE;
  else
    SY0BM003.FK-NBR-AIRBAG-SHOE = VSYDVL03.FK-NBR-AIRBAG-SHOE;
  end

  if (SY0BM003.XBTCD == " ")
    SY0BM003.XBTCD = "01";
  end
  SY0BM003.XRYCD = "00";

  if (SY0BM003.XFCCD1 == " ")
    SY0BM003.XFCCD1 = "00";
  end
  if (SY0BM003.XFCCD2 == " ")
    SY0BM003.XFCCD2 = "00";
  end
  if (SY0BM003.XFCCD3 == " ")
    SY0BM003.XFCCD3 = "00";
  end
  if (SY0BM003.XFCCD4 == " ")
    SY0BM003.XFCCD4 = "00";
  end
  if (SY0BM003.XFCCD5 == " ")
    SY0BM003.XFCCD5 = "00";
  end
  if (SY0BM003.XFCCD6 == " ")
    SY0BM003.XFCCD6 = "00";
  end
  SY0BW01.XFCCD[1] = "00"; /* Init table*/
  SY0BW01.XFCCD[2] = "00";
  SY0BW01.XFCCD[3] = "00";
  SY0BW01.XFCCD[4] = "00";
  SY0BW01.XFCCD[5] = "00";
  SY0BW01.XFCCD[6] = "00";
  SY0BW01.SY0BWX1 = 6; /* Init index*/
  if (SY0BM003.XFCCD6 != "00")
    SY0BW01.XFCCD[SY0BWX1] = SY0BM003.XFCCD6;
    SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 - 1;
  end
  if (SY0BM003.XFCCD5 != "00")
    SY0BW01.XFCCD[SY0BWX1] = SY0BM003.XFCCD5;
    SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 - 1;
  end
  if (SY0BM003.XFCCD4 != "00")
    SY0BW01.XFCCD[SY0BWX1] = SY0BM003.XFCCD4;
    SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 - 1;
  end
  if (SY0BM003.XFCCD3 != "00")
    SY0BW01.XFCCD[SY0BWX1] = SY0BM003.XFCCD3;
    SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 - 1;
  end
  if (SY0BM003.XFCCD2 != "00")
    SY0BW01.XFCCD[SY0BWX1] = SY0BM003.XFCCD2;
    SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 - 1;
  end
  if (SY0BM003.XFCCD1 != "00")
    SY0BW01.XFCCD[SY0BWX1] = SY0BM003.XFCCD1;
    SY0BW01.SY0BWX1 = SY0BW01.SY0BWX1 - 1;
  end
  SY0BW01.SY0BWX1 = 1; /* Init index*/
  if (VSYDVL03.PG4AIRB1 != " ")
    SY0BW01.SY0BW-AIRBAG = VSYDVL03.PG4AIRB1;
    SY0BS-CHK-BAG();
  end
  if (VSYDVL03.PG4AIRB2 != " ")
    SY0BW01.SY0BW-AIRBAG = VSYDVL03.PG4AIRB2;
    SY0BS-CHK-BAG();
  end
  if (VSYDVL03.PG4AIRB3 != " ")
    SY0BW01.SY0BW-AIRBAG = VSYDVL03.PG4AIRB3;
    SY0BS-CHK-BAG();
  end
  SY0BM003.XFCCD1 = SY0BW01.XFCCD[1]; /* Move table back to screen*/
  SY0BM003.XFCCD2 = SY0BW01.XFCCD[2];
  SY0BM003.XFCCD3 = SY0BW01.XFCCD[3];
  SY0BM003.XFCCD4 = SY0BW01.XFCCD[4];
  SY0BM003.XFCCD5 = SY0BW01.XFCCD[5];
  SY0BM003.XFCCD6 = SY0BW01.XFCCD[6];

  if (VSYDVL03.XMCCD[1] == " ")
    SY0BM005.XMCCD1 = "000";
  else
    SY0BM005.XMCCD1 = VSYDVL03.XMCCD[1];
  end
  if (VSYDVL03.XMCCD[2] == " ")
    SY0BM005.XMCCD2 = "000";
  else
    SY0BM005.XMCCD2 = VSYDVL03.XMCCD[2];
  end
  if (VSYDVL03.XMCCD[3] == " ")
    SY0BM005.XMCCD3 = "000";
  else
    SY0BM005.XMCCD3 = VSYDVL03.XMCCD[3];
  end
  if (VSYDVL03.XMCCD[4] == " ")
    SY0BM005.XMCCD4 = "000";
  else
    SY0BM005.XMCCD4 = VSYDVL03.XMCCD[4];
  end

end // end SY0BSKE

// Reformat Offer Dates
Function SY0BSKF()


       /* ******************************************/
       /* *  REFORMAT OFFER DATES FROM VSYDVL03     **/
       /* *  FOR DISPLAY ON SCREEN                **/
       /* ******************************************/

  set TA2REC empty;
  TA2REC.TA2GRGGN = VSYDVL03.SY2POFBD;
  SY0BSJG(); /* reformat offering dates*/
  SY0BM005.SY2POFBD = TA2REC.TA2GRGAN;

  set TA2REC empty;
  TA2REC.TA2GRGGN = VSYDVL03.SY2FOFBD;
  SY0BSJG(); /* reformat offering dates*/
  SY0BM005.SY2FOFBD = TA2REC.TA2GRGAN;

  if (VSYDVL03.SY2POFBD != 0)
    set TA2REC empty;
    SY0BW01.SY0BWTCK = VSYDVL03.SY2POFBD;
    if (SY0BW01.SY0BWTMM == 01)
      SY0BW01.SY0BWTMM = 01;
      SY0BW01.SY0BWTCY = SY0BW01.SY0BWTCY - 1;
    else
      SY0BW01.SY0BWTMM = SY0BW01.SY0BWTMM - 1;
    end
    TA2REC.TA2GRGGN = SY0BW01.SY0BWTCK;
    SY0BSJG(); /* reformat offering dates*/
    SY0BM005.SY2NOFBD = TA2REC.TA2GRGAN;
  end

  if (VSYDVL03.PG4FSLMO != 0) /* sales month not zero*/
    SY0BM008.SY2FDSMO = VSYDVL03.PG4FSLMO;
    SY0BM008.SY2FNSMO = VSYDVL03.PG4FSLMO;
  else
    SY0BM008.SY2FDSMO = 0; /* will default later*/
    SY0BM008.SY2FNSMO = 0; /* here, too*/
  end
  SY0BM008.SY2PDCMO = VSYDVL03.SY2PDCMO;
  SY0BM008.SY2PNCMO = VSYDVL03.SY2PNCMO;

end // end SY0BSKF

// Get style dev. color for dup
Function SY0BSKG()


       /* ******************************************/
       /* *      GET STYLE DEVELOPMENT COLOR TO   **/
       /* *      PRE-LOAD SCREENS.                **/
       /* *                                       **/
       /* *   1. IF DUP. COLOR EXISTS MOVE TO     **/
       /* *      TO STYLE SCREENS 5 AND 8.        **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;
  set VSYDPC02 empty;

  VSYDPC02.PG-STYDV-NBR = SY0BM001.PG4STNBR;
  VSYDPC02.PG-STYDV-COLR-NBR = SY0BM005.PG9CLRNB;

  call "VSYDPC02" ("S ", SQLCA, VSYDPC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VSYDPC02.PG-STY-STAT-IND == "Y") /* passed edits*/
      SY0BM005.SY2CLRDS = VSYDPC02.SY-STY-COLR-DESC;
      if (SY0BM001.XGPCD == "02")
        SY0BM005.XCLCD[1] = VSYDPC02.XCL-COLR-CD[1];
        SY0BM005.XCLCD[2] = VSYDPC02.XCL-COLR-CD[4];
        SY0BM005.XCLCD[3] = VSYDPC02.XCL-COLR-CD[2];
        SY0BM005.XCLCD[4] = VSYDPC02.XCL-COLR-CD[3];
      else
        SY0BM005.XCLCD[1] = VSYDPC02.XCL-COLR-CD[1];
        SY0BM005.XCLCD[2] = VSYDPC02.XCL-COLR-CD[2];
        SY0BM005.XCLCD[3] = VSYDPC02.XCL-COLR-CD[3];
        SY0BM005.XCLCD[4] = VSYDPC02.XCL-COLR-CD[4];
      end
      SY0BM001.PG9CLRNB = SY0BM005.PG9CLRNB;
      converseLib.validationFailed(14); /* no errors - enter to continue*/
      return;
    else
      if (VSYDPC02.PG-STY-STAT-IND == "N")
        converseLib.validationFailed(171); /* style dev. not passed edits*/
        set SY0BM005.PG9CLRNB cursor, bold;
      else
        if (VSYDPC02.PG-STY-STAT-IND != "Y")
          converseLib.validationFailed(172); /* style dev. color allready created*/
          set SY0BM005.PG9CLRNB cursor, bold;
        end
      end
      exit stack;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(170); /* style dev color not found*/
      set SY0BM005.PG9CLRNB cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0B   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY0BSKG  ";
      TA1REC.TA1LOCAT[3] = "VSYDPC02 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0BM001";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYDPC02";
      TA1TBLKE = VSYDVL03.PG4STNBR;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* style table error....*/
      set SY0BM005.PG9CLRNB cursor, bold;
      exit stack;
    end
  end


end // end SY0BSKG

// Insert VSYREG01 Row
Function XPSY007-ADD-SYREG()

   /* Insert SYREG01 logic - performed for each region entered*/

  VSYREG02.XGP-GPC-CD = SY2REC.XGPCD;
  VSYREG02.SY-STY-NBR = SY2REC.SY1STNBR;
  VSYREG02.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  VSYREG02.XDM-DIM-CD = SY2REC.XDMCD;
   /* current marketing region moved to VSYREG02.XDR-PROD-REG-CD*/
  VSYREG02.PG-SCHED-SPCLT-CD = SY2REC.PG1SC4CD;
  VSYREG02.PG-FCST-CD = SY1REC.PG1FCTCD;
  VSYREG02.XSE-SESN-CD = SY2REC.XSECD;
  VSYREG02.XSN-SESN-YR-RNG = SY2REC.XSNYR;
  VSYREG02.SY-PROP-OFFER-BDT = SY2REC.SY2POFBD;
  VSYREG02.SY-PROP-OFFER-XDT = SY2REC.SY2POFXD;
  VSYREG02.SY-FUTR-OFFER-BDT = SY2REC.SY2FOFBD;
  VSYREG02.SY-FUTR-OFFER-XDT = SY2REC.SY2FOFXD;
  VSYREG02.SY-FRST-DOM-SLS-MO = SY2REC.SY2FDSMO;
  VSYREG02.SY-PROJ-DOM-CLS-MO = SY2REC.SY2PDCMO;
  VSYREG02.XPR-PROD-TYP-CD = SY2REC.XPRCD;
  VSYREG02.SY-ALW-NEW-ORD-FL = SY2REC.SY2ALNOR;
  VSYREG02.OP-HMDL-HOT-FL = SY2REC.OPZHMIND;
  VSYREG02.SY-SFTY-STKCLS-IND = SY2REC.SY2SSCIN;
  VSYREG02.XLC-LIFE-CYC-CD[1] = SY2REC.XLCCD1;
  VSYREG02.XLC-LIFE-CYC-CD[2] = SY2REC.XLCCD2;
  VSYREG02.XLC-LIFE-CYC-CD[3] = SY2REC.XLCCD3;
  VSYREG02.XLC-LIFE-CYC-CD[4] = SY2REC.XLCCD4;
  VSYREG02.SY-LIFE-CYC-EDT[1] = SY2REC.SY2CEDT1;
  VSYREG02.SY-LIFE-CYC-EDT[2] = SY2REC.SY2CEDT2;
  VSYREG02.SY-LIFE-CYC-EDT[3] = SY2REC.SY2CEDT3;
  VSYREG02.SY-LIFE-CYC-EDT[4] = SY2REC.SY2CEDT4;

  call "VSYREG02" ("A ", SQLCA, VSYREG02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
  ) /* NEXT SENTENCE*/
  else
    TA1REC.TA1LOCAT[1] = "ADD            ";
    TA1REC.TA1LOCAT[2] = "XPSY007-ADD-SYREG";
    TA1REC.TA1LOCAT[3] = "VSYREG02       ";
    TA1REC.TA1LOCAT[4] = "               ";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYREG02";
    TA1REC.TA1TBLKE = VSYREG02.VSYREG02-KEY;
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(23); /* Region table error*/
    return;
  end

end // end XPSY007-ADD-SYREG

Record SY0BW01 type basicRecord
  3 SY0BWDTT-CMP SY0BWDTT-CMP ; 
    4 SY0BWDTT-CC SY0BWDTT-CC ; 
    4 SY0BWDTT-YYMM SY0BWDTT-YYMM ; 
  3 SY0BWYM-CMP SY0BWYM-CMP ; 
    4 SY0BWYM-CC SY0BWYM-CC ; 
    4 SY0BWYM-YYMM SY0BWYM-YYMM ; 
  3 SY0BWPYR-CMP SY0BWPYR-CMP ; 
    4 SY0BWPYR-CC SY0BWPYR-CC ; 
    4 SY0BWPYR-YY SY0BWPYR-YY ; 
  3 SY0BWYY-CMP SY0BWYY-CMP ; 
    4 SY0BWYY-CC SY0BWYY-CC ; 
    4 SY0BWYY-YY SY0BWYY-YY ; 
  3 SY0BWREC SY0BWREC ; 
  3 TA2JULNN TA2JULNN ; 
  3 TA2GRGAN TA2GRGAN ; 
  3 SY2CEDT1 SY2CEDT1 ; 
  3 SY0BWTDT SY0BWTDT ; 
    4 * char(2) ; 
    4 SY0BWYM SY0BWYM ; 
      5 SY0BWYY SY0BWYY ; 
      5 SY0BWMM SY0BWMM ; 
    4 * char(2) ; 
  3 SY0BWXGP SY0BWXGP ; 
  3 SY0BW-MSG SY0BW-MSG ; 
    4 SY0BW-TEXT SY0BW-TEXT ; 
    4 SY0BWDSC SY0BWDSC ; 
  3 SY4SZSCL SY4SZSCL ; 
  3 SY0BWOPT SY0BWOPT ; 
  3 SY0BWXWH SY0BWXWH ; 
  3 SY0BWGUT SY0BWGUT ; 
  3 SY0BWDAT SY0BWDAT ; 
    4 SY0BWDMP SY0BWDMP ; 
      5 SY0BWDMM SY0BWDMM ; 
      5 SY0BWDDD SY0BWDDD ; 
      5 SY0BWDYY SY0BWDYY ; 
    4 SY0BWDCC SY0BWDCC ; 
  3 SY0BWBCF SY0BWBCF ; 
  3 SY0BWTCK SY0BWTCK ; 
    4 SY0BWTCY SY0BWTCY ; 
      5 SY0BWTCC SY0BWTCC ; 
      5 SY0BWTYY SY0BWTYY ; 
    4 SY0BWTMM SY0BWTMM ; 
    4 SY0BWTDD SY0BWTDD ; 
  3 SY0BWIDX SY0BWIDX ; 
  3 SY0BWSAB SY0BWSAB ; 
    4 SY0BWSSN SY0BWSSN ; 
    4 SY0BWSYR SY0BWSYR ; 
  3 SY0BW-YSN-DATA SY0BW-YSN-DATA ; 
    4 SY0BW-YSN-FL SY0BW-YSN-FL ; 
    4 XGP-GPC-CD XGP-GPC-CD ; 
    4 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
    4 XSE-SESN-CD XSE-SESN-CD ; 
    4 XSN-SESN-YR-RNG XSN-SESN-YR-RNG ; 
    4 XSN-SESN-BDT XSN-SESN-BDT ; 
    4 XSN-SESN-XDT XSN-SESN-XDT ; 
  3 SY0BWSTB SY0BWSTB ; 
    4 SY0BWSBK SY0BWSBK [10] ; 
      5 SY0BWSOC SY0BWSOC ; 
      5 SY0BWSFL SY0BWSFL ; 
  3 SY0BWSIN SY0BWSIN ; 
  3 SY0BWFLG SY0BWFLG ; 
  3 SY0BWDTT SY0BWDTT ; 
    4 SY0BWTYR SY0BWTYR ; 
    4 SY0BWTMO SY0BWTMO ; 
  3 SY0BWPO SY0BWPO ; 
    4 SY0BWPYR SY0BWPYR ; 
    4 SY0BWPM1 SY0BWPM1 ; 
    4 SY0BWPM2 SY0BWPM2 ; 
  3 SY0BWDVF SY0BWDVF ; 
  3 SY0BWPOP SY0BWPOP ; 
  3 SY1STNBR SY1STNBR ; 
    4 * char(5) ; 
    4 SY0BW-DIGIT-6 SY0BW-DIGIT-6 ; 
  3 SY0BW-OFFER-DATE SY0BW-OFFER-DATE ; 
    4 SY0BW-OFFER-DATE-MM SY0BW-OFFER-DATE-MM ; 
    4 SY0BW-OFFER-DATE-DD SY0BW-OFFER-DATE-DD ; 
    4 SY0BW-OFFER-DATE-YY SY0BW-OFFER-DATE-YY ; 
  3 SY0BW-FUTR-OFFER-XDT SY0BW-FUTR-OFFER-XDT ; 
    4 SY0BW-FUTR-OFFER-YY SY0BW-FUTR-OFFER-YY ; 
    4 SY0BW-FUTR-OFFER-MM SY0BW-FUTR-OFFER-MM ; 
    4 SY0BW-FUTR-OFFER-DD SY0BW-FUTR-OFFER-DD ; 
  3 SY0BWX1 SY0BWX1 ; 
  3 SY0BWX2 SY0BWX2 ; 
  3 XFCCD XFCCD [6] ; 
  3 FK-NBR-AIRBAG-SHOE FK-NBR-AIRBAG-SHOE ; 
  3 SY0BW-AIRBAG SY0BW-AIRBAG ; 
    4 SY0BW-AIRBAG-CD SY0BW-AIRBAG-CD ; 
    4 * char(7) ; 
  3 SY0BW-VAL-PCT SY0BW-VAL-PCT ; 
  3 SY0BW-XMC-PCT SY0BW-XMC-PCT ; 
  3 SY0BW-NXT-ID SY0BW-NXT-ID ; 
  3 SY0BW-SYGRP-MSG SY0BW-SYGRP-MSG ; 
    4 * char(10) ; 
    4 SY0BW-SYGRP-TXT1 SY0BW-SYGRP-TXT1 ; 
    4 SY0BW-SYGRP-PPS SY0BW-SYGRP-PPS ; 
    4 SY0BW-SYGRP-TXT2 SY0BW-SYGRP-TXT2 ; 
    4 SY0BW-SYGRP-PROD SY0BW-SYGRP-PROD ; 
end // end SY0BW01

//*** RECORD=SY0BW02 ****
// ************************************************************
// 
//     SY0BW02 - SY0B work record for blank sizes.
// 
//               This is a copy of SY3REC to be used to
//               retrieve size information when a blank
//               style/color is used. The data retrieved
//               is used to set the high-lighting on the
//               size description to indicate to the user
//               what sizes are on the blank.
// 
// ************************************************************
// ***********************
Record SY0BW02 type basicRecord
  5 SY3DATA SY3DATA ; 
    10 SY3KEY SY3KEY ; 
      15 XGPCD XGPCD ; 
      15 SY1BSTNB SY1BSTNB ; 
      15 SY2BCLCD SY2BCLCD ; 
      15 XDMCD XDMCD ; 
    10 XDVCD XDVCD [40] ; 
    10 SY3FRGUT SY3FRGUT [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end SY0BW02

//*** RECORD=SY0BW03 ****
// **************  style record working storage ***************
// 
// this is a working storage record which will define all the
// data items passed between SY0B and SY01. Note that SY01
// will not use all these items, but we will need to reset some
// things when the user returns to SY0B from SY01.
// 
// ************************************************************
// ***********************
Record SY0BW03 type basicRecord
  5 SYWTRANF SYWTRANF ; 
    10 SYWPFOPT SYWPFOPT ; 
    10 XGPCD XGPCD ; 
    10 XGPABRV XGPABRV ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SYWPDATA SYWPDATA ; 
      15 SY0BMDSY SY0BMDSY ; 
      15 SY0BMDCL SY0BMDCL ; 
      15 SY0BMDDM SY0BMDDM ; 
      15 PG4STNBR PG4STNBR ; 
      15 PG9CLRNB PG9CLRNB ; 
      15 SY0BM-PREV-PROD SY0BM-PREV-PROD ; 
        20 SY0BW-P-XGPCD SY0BW-P-XGPCD ; 
        20 * char(1) ; 
        20 SY0BW-P-STNBR SY0BW-P-STNBR ; 
        20 * char(1) ; 
        20 SY0BW-P-CLRID SY0BW-P-CLRID ; 
        20 * char(1) ; 
        20 SY0BW-P-XDMCD SY0BW-P-XDMCD ; 
      15 * char(15) ; 
end // end SY0BW03

//*** RECORD=SY0BW04 ****
// ************************************************************
// *  SY0BW04 - WORKING STORAGE RECORD
// *    This record holds a table of equipment category codes.
// *    Each code contains a flag indicating if the code should
// *    automatically be considered Spain compliant. This will
// *    control the automatic assignment of special feature
// *    code 68 to the style.
// ************************************************************
// ***********************
Record SY0BW04 type basicRecord
  10 SY0BW-XPC-LOADED-FL SY0BW-XPC-LOADED-FL ; 
  10 SY0BW-XPC-FOUND-FL SY0BW-XPC-FOUND-FL ; 
  10 SY0BW-XPC-COUNT SY0BW-XPC-COUNT ; 
  10 SY0BW-XPC-ENTRY SY0BW-XPC-ENTRY [200] ; 
    15 XPC-PROD-CAT-CD XPC-PROD-CAT-CD ; 
    15 SY0BW-XPC-CMPLT-FL SY0BW-XPC-CMPLT-FL ; 
end // end SY0BW04

//*** RECORD=VCTLID01 ****
// *******************  STYLE  TABLE  *************************
// 
// DB2 TABLE:           DPROD.VCTLID01
// 
// COPYLIB MEMBER:      DCTLID01
// IO MODULE:           VCTLID01
// 
// KEY TO DB2 TABLE:    LT_DB2_NM
// 
// DATE CREATED:        MAY. 11, 1995
// 
// MAINTENANCE LOG:
// 
// DATE     INIT       COMMENTS
// -------- ------     -------------------------------------
// 05-11-95 MHALST     created csp record
// ************************************************************
// ************************
Record VCTLID01 type basicRecord
  5 VCTLID01-GROUP VCTLID01-GROUP ; 
    10 SY-NXT-ID SY-NXT-ID ; 
    10 LT-DB2-NM LT-DB2-NM ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VCTLID01

//*** RECORD=VPRDRG01 ****
// *******************  STYLE  TABLE  *************************
// 
// DB2 TABLE:           DPROD.VPRDRG01
// 
// COPYLIB MEMBER:      DPRDRG01
// IO MODULE:           VPRDRG01
// 
// KEY TO DB2 TABLE:    SY-PROD-ID
//                      REG-ID
// 
// DATE CREATED:        MAY 15, 1995
// 
// MAINTENANCE LOG:
// 
// DATE     INIT       COMMENTS
// -------- ------     -------------------------------------
// 05-15-95 MHALST     created csp record
// ************************************************************
// ************************
Record VPRDRG01 type basicRecord
  5 VPRDRG01-GROUP VPRDRG01-GROUP ; 
    10 VPRDRG01-KEY VPRDRG01-KEY ; 
      15 SY-PROD-ID SY-PROD-ID ; 
      15 REG-ID REG-ID ; 
    10 SY-CURR-SESN-NBR SY-CURR-SESN-NBR ; 
    10 SY-ALW-NEW-ORD-FL SY-ALW-NEW-ORD-FL ; 
    10 OP-HMDL-HOT-FL OP-HMDL-HOT-FL ; 
    10 SY-RSTR-XSO-IND SY-RSTR-XSO-IND ; 
    10 SY-FRST-SLS-MO SY-FRST-SLS-MO ; 
    10 SY-PROJ-CLS-MO-DT SY-PROJ-CLS-MO-DT ; 
    10 SY-BO-SW SY-BO-SW ; 
    10 SY-BO-SW-EDT SY-BO-SW-EDT ; 
    10 SY-SFTY-STKCLS-IND SY-SFTY-STKCLS-IND ; 
    10 SY-MKT-CAOV-FL SY-MKT-CAOV-FL ; 
    10 XWH-WHSE-CD XWH-WHSE-CD [6] ; 
    10 PG-SCHED-SPCLT-CD PG-SCHED-SPCLT-CD ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VPRDRG01

// LT_DB2_NM
DataItem LT-DB2-NM char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_NXT_ID
DataItem SY-NXT-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous Product Entered
DataItem SY0BM-PREV-PROD char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY0BMDCL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY0BMDDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY0BMDSY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Airbag Work Field
DataItem SY0BW-AIRBAG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Airbag Code
DataItem SY0BW-AIRBAG-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Rightmost digit of style nbr
DataItem SY0BW-DIGIT-6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Offer Date Day
DataItem SY0BW-FUTR-OFFER-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Offer Date Month
DataItem SY0BW-FUTR-OFFER-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Offer Date Work Field
DataItem SY0BW-FUTR-OFFER-XDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Offer Date Century & Year
DataItem SY0BW-FUTR-OFFER-YY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Message for SYMSCMSG line
DataItem SY0BW-MSG char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work field for Identifiers
DataItem SY0BW-NXT-ID num(10)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Offer Date Work Field
DataItem SY0BW-OFFER-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Offer Date Day
DataItem SY0BW-OFFER-DATE-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Offer Date Month
DataItem SY0BW-OFFER-DATE-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Offer Date Century & Year
DataItem SY0BW-OFFER-DATE-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous Color
DataItem SY0BW-P-CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous Style
DataItem SY0BW-P-STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous Dimension
DataItem SY0BW-P-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Previous GPCD
DataItem SY0BW-P-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Text of Message
DataItem SY0BW-TEXT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Validate XMC Percents (Y/N)
DataItem SY0BW-VAL-PCT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Total of XMC Percents
DataItem SY0BW-XMC-PCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Compliant Flag
DataItem SY0BW-XPC-CMPLT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count of entries in table
DataItem SY0BW-XPC-COUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Group level occurs
DataItem SY0BW-XPC-ENTRY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Found Category flag
DataItem SY0BW-XPC-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Table is loaded flag
DataItem SY0BW-XPC-LOADED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key data for YSN table search
DataItem SY0BW-YSN-DATA char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Found YSN data (Y/N)
DataItem SY0BW-YSN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// backorder don't chg. dt. flag
DataItem SY0BWBCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// backorder check date
DataItem SY0BWDAT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// backorder date century
DataItem SY0BWDCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// backorder date day
DataItem SY0BWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// backorder date month
DataItem SY0BWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// backorder map date
DataItem SY0BWDMP num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY_SZ_SCL_CD
DataItem SY0BWDSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Test Date Field
DataItem SY0BWDTT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWDTT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sy0bwdtt for comparison
DataItem SY0BWDTT-CMP num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWDTT-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date Valid Flag (Y/N)
DataItem SY0BWDVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// backorder date year
DataItem SY0BWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time flag
DataItem SY0BWFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fringe/gut flag
DataItem SY0BWGUT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// index used for table searchs
DataItem SY0BWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// todays month
DataItem SY0BWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// pf13,pf14,pf15 add option
DataItem SY0BWOPT char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO Id Work Month 1
DataItem SY0BWPM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO Id Work Month 2
DataItem SY0BWPM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO Id Work Area
DataItem SY0BWPO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Did we display popup (Y/N)
DataItem SY0BWPOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PO Id Work Year
DataItem SY0BWPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWPYR-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWPYR-CMP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWPYR-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage record
DataItem SY0BWREC char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season and year - ssyy format
DataItem SY0BWSAB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ibm/dec relative size buckets
DataItem SY0BWSBK char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem SY0BWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric index for compares
DataItem SY0BWSIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ibm/dec relative sizes
DataItem SY0BWSOC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// season-code     - ss   format
DataItem SY0BWSSN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ibm/dec size translation array
DataItem SY0BWSTB char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season-year     -   yy format
DataItem SY0BWSYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today  map century
DataItem SY0BWTCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today check date
DataItem SY0BWTCK num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today check year (CCYY)
DataItem SY0BWTCY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today map day
DataItem SY0BWTDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// todays date in ccyymmdd form
DataItem SY0BWTDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today map month
DataItem SY0BWTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Test Date MM
DataItem SY0BWTMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Test Date YY
DataItem SY0BWTYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// today map year
DataItem SY0BWTYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subscript
DataItem SY0BWX1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Subscript
DataItem SY0BWX2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general product class code
DataItem SY0BWXGP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SY0BWXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// todays date (yymm)
DataItem SY0BWYM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWYM-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sy0bwym for comparison
DataItem SY0BWYM-CMP num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWYM-YYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// todays year
DataItem SY0BWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWYY-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWYY-CMP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0BWYY-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data group item entire row
DataItem VCTLID01-GROUP char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data group item entire row
DataItem VPRDRG01-GROUP char(56)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key into Table
DataItem VPRDRG01-KEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

