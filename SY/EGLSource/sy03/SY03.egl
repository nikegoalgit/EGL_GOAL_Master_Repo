package sy03;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import mn.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SY03 ****
// this application will change a row in the size tables.
// the user can not delete existing size records.
// the change is determined by comparing sy3rec to syfrec.
// 
// ************************************************************
// maintenance:
// 
//  rev.
// number     who      when       why
// ------    -------  --------    -----------------------------
//  00       jricha   06-24-86    created application
//           VCowan   04-17-89    added XSSEGTR logic
//  -spl-    jwood    04-17-89    added noncsp option logic
//  P0117    MHALST   08-22-89    add cross check of division
//           MHALST   11-13-89    DB2 changes and add SYZTBL
//           MHALST   04-02-90    DB2 changes, remove XTV
//           MHALST   10-08-90    DB2 changes and SYAREC
//           MHALST   02-14-91    DB2 changes TO SY2REC
//           JRAMOS   02-23-93    Flag a given color as invalid
//                                if the Nike Dept id = 'EAO '
//                                and the color product region
//                                not = '02'
//           MHALST   10-03-95    Add MN0V for users region
//           MHALST   06-04-96    Add color xdv to screen
//           MHALST   02-19-98    Add option to check UPC codes
//           MHALST   03-24-99    Add new screen to allow 2nd
//                                qual UPC assignment.
//           MHALST   05-31-01    Require a least 1 size xdv to
//                                be equal to color xdv.
//           DROBI2    11-05-03    Add table XDRTBL.
//           MHALST   08-26-04   Add new force create option
//  for SY1280 call.
// MHALST  02-25-05   Correct logic for UPC force assignment
// MHALST  03-24-05   Allow B-grade UPC assignment with no
//  region
//                  access record present.
// ************************************************************
// 
// 
// io modules    table
// use           view name
// ----------    -----------
//   IO0040      dprod.vscale01
//   IO0120      dprod.vstyle01
//   IO0130      dprod.vcolor01
//   IO0140      dprod.vsize001
//   IO0530      dprod.vsyaud01
//   IO0520      dprod.vsytag01
// 
// 
// *********************
Program SY03 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  MNVREC MNVREC; // record
  SQLCA SQLCA; // record
  SY03W01 SY03W01; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY4REC SY4REC; // record
  SY9REC SY9REC; // record
  SYAREC SYAREC; // record
  SYFREC SYFREC; // record
  SYUREC SYUREC; // record
  SYWREC SYWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDRTBL {deleteAfterUse = yes}; // table
  use SYZTBL {deleteAfterUse = yes}; // table
  use SYRGTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use SY03M.SY03M001,  // forms
      SY03M.SY03M005
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SY03001: SY03001();

    if (SY03W01.SY03W-PGM-MODE == "1")
      goto SY03005;
    else
      goto SY03050;
    end

    SY03005: SY03005();


    if (converseVar.eventKey is pa2)
      goto SY03001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY03005;
      else
        if (converseVar.eventKey is pf12
         || converseVar.eventKey is enter)
          goto SY03010;
        else
          converseLib.validationFailed(19);
          goto SY03005;
        end
      end
    end
    SY03010: SY03010();


    if (converseVar.eventKey is pa2)
      goto SY03001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY03010;
      else
        if (converseVar.eventKey is pf12)
          goto SY03010;
        else
          if (converseVar.eventKey is enter)
            goto SY03005;
          else
            converseLib.validationFailed(19);
            goto SY03005;
          end
        end
      end
    end
    SY03050: SY03050();

    if (converseVar.eventKey is pa2)
      goto SY03001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY03050;
      else
        if (converseVar.eventKey is pf12
         || converseVar.eventKey is enter)
          goto SY03055;
        else
          converseLib.validationFailed(19);
          goto SY03050;
        end
      end
    end

    SY03055: SY03055();

    if (converseVar.eventKey is pa2)
      goto SY03001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY03055;
      else
        if (converseVar.eventKey is pf12)
          goto SY03055;
        else
          if (converseVar.eventKey is enter)
            goto SY03050;
          else
            converseLib.validationFailed(19);
            goto SY03055;
          end
        end
      end
    end

  end // end main
end // end SY03

// init. screen
Function SY03001()


       /* *****************************************/
       /* * 1. init. application.                **/
       /* * 2. set all rec & maps to empty       **/
       /* *    and clear.                        **/
       /* * 3. if the commarea.xgpcd is diff.    **/
       /* *    than the sywrec.xgpcd use the     **/
       /* *    sywrec.xgpcd because the user     **/
       /* *    must have transfered into this    **/
       /* *    application with the sywrec.xgpcd **/
       /* * 4. validate the gpc code.            **/
       /* *                                      **/
       /* *****************************************/

  XSENTRY(); /* security check*/

  XSSEGTR(); /* set segemented transaction id*/

  set SYWREC empty;

  set SY1REC empty;
  set SY2REC empty;
  set SY3REC empty;
  set SYFREC empty;
  set SY9REC empty;
  set SYAREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set SY03M001 initial;
  set SY03M005 initial;

  SYWREC.SYWMSGFL = "N";
  SYWREC.SYWTRANF = COMMAREA.CAUSERA;
   /* Determine if we want 2nd Qual UPC mode*/
  if ((COMMAREA.CAFROMAP == "SY0M"
   && SYWREC.SYWPFOPT == "PF18")
   || (COMMAREA.CAALVL[1] == "Y"
   || COMMAREA.CACLVL[1] == "Y"))
    SY03W01.SY03W-PGM-MODE = "2";
  else /* Go into size change mode*/
    SY03W01.SY03W-PGM-MODE = "1";
  end

  if (SYWREC.XGPCD == " ")
    SY03M001.XGPCD = COMMAREA.XGPCD;
    SY03M005.XGPCD = COMMAREA.XGPCD;
  else
    if (SYWREC.XGPCD == COMMAREA.XGPCD)
      SY03M001.XGPCD = COMMAREA.XGPCD;
      SY03M005.XGPCD = COMMAREA.XGPCD;
    else
      SY03M001.XGPCD = SYWREC.XGPCD;
      SY03M005.XGPCD = SYWREC.XGPCD;
    end
  end


  SY03M001.SYMREV = "01";
  SY03M005.SYMREV = "01";

  SY03SAA(); /* validate gpc code*/
  SY03M005.XGPABRV = SY03M001.XGPABRV;

  SYWREC.SYWMSGFL = "N";
  SY03M001.XDMCD = "00";
  SY03M005.XDMCD = "00";

   /* Now, find out what region user is and set-up table of*/
   /* valid regions the user can access.*/
   /* We skip this for the B-grade UPC assignment function.*/
  if (SY03W01.SY03W-PGM-MODE == "1") /* User is changing size data*/
    XPSY008(); /* Get users region*/
    if (SYWREC.SYW-REG-TBL-SIZE == 0)
      converseLib.validationFailed(124); /* User Id not authorized*/
    end
  end

end // end SY03001

// get size row data
Function SY03005()

       /* ***************************************/
       /* *  1. display screen sy03m001 and    **/
       /* *  let user enter xgpcd, style number**/
       /* *  color id and dimension codes.     **/
       /* *                                    **/
       /* *  2. the user can transfer to       **/
       /* *     any application from this      **/
       /* *     screen.                        **/
       /* *                                    **/
       /* *                                    **/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/


  SY03M001.SYMTTLNM = " PRODUCT SIZE - CHG ";
  SY03M001.SYMPRONM = "SY03005";
  SY03M001.SYMCURDT = VGVar.currentShortGregorianDate;


  SY03SBA(); /* set screen fields to protect.*/


  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    /* next sentence*/
  else
    set SY03M001.SY1STNBR cursor;
    SY03M001.XDMCD = "00";
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY03M001 ;
   /* ***********************************************************/

  SYWREC.SYWMSGFL = "N";

       /* ***************************************/
       /* *  set screen sy03m001 to normal     **/
       /* ***************************************/

  SY03SBD();

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY03SBC();

       /* ***************************************/
       /* *  validate screen fields            **/
       /* ***************************************/

  SY03SBB();

       /* ***************************************/
       /* *  validate  gpc codes               **/
       /* ***************************************/

  SY03SBE();

       /* ***************************************/
       /* *  get existing style row            **/
       /* ***************************************/

  SY03SBF();

       /* ***************************************/
       /* *  get existing color row            **/
       /* ***************************************/

  SY03SBG();


       /* ***************************************/
       /* *  get size row data                 **/
       /* ***************************************/

  SY03SBH();


  SY03SBO(); /* set size fields to normal*/


end // end SY03005

// update size row data
Function SY03010()

       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/


  SY03M001.SYMTTLNM = "  PRODUCT SIZE  - CHG ";
  SY03M001.SYMPRONM = "SY03010";
  SY03M001.SYMCURDT = VGVar.currentShortGregorianDate;

  SY03SCA(); /* set screen fields blank & protect*/




  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY03M001 ;
   /* ***********************************************************/

  SYWREC.SYWMSGFL = "N";

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY03SCB();

       /* ***************************************/
       /* *  set sy03m001 screen to normal     **/
       /* ***************************************/

  SY03SCI();

       /* ***************************************/
       /* * validate codes for sy03m001 screen **/
       /* ***************************************/

  SY03SCJ();

       /* ***************************************/
       /* * check if any changes were made and **/
       /* * if so update the color row.        **/
       /* ***************************************/

  if (converseVar.eventKey is pf12
   || converseVar.validationMsgNum > 0)
    exit stack;
  else
    SY03SCC();
  end


       /* ***************************************/
       /* *  transfer to other applications.   **/
       /* ***************************************/

  SY03SCD();


       /* ***************************************/
       /* * reset screen for new color record. **/
       /* ***************************************/

  set SY03M001 empty;
  SY03M001.XGPCD = SYWREC.XGPCD;
  SY03M001.XGPABRV = SYWREC.XGPABRV;

  SY03SBD(); /* set entry fields to normal*/

end // end SY03010

// get size row data
Function SY03050()

       /* ***************************************/
       /* *  1. display screen SY03M005 and    **/
       /* *  let user enter xgpcd, style number**/
       /* *  color id and dimension codes.     **/
       /* *                                    **/
       /* *  2. the user can transfer to       **/
       /* *     any application from this      **/
       /* *     screen.                        **/
       /* *                                    **/
       /* ***************************************/


  SY03M005.SYMPRONM = "SY03050";
  SY03M005.SYMCURDT = VGVar.currentShortGregorianDate;


  SY03SFA(); /* set screen fields to protect.*/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    /* next sentence*/
  else
    set SY03M005.SY1STNBR cursor;
    SY03M005.XDMCD = "00";
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY03M005 ;
   /* ***********************************************************/

  SYWREC.SYWMSGFL = "N";

       /* ***************************************/
       /* *  set screen SY03M005 to normal     **/
       /* ***************************************/

  SY03SFD();

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY03SFC();

       /* ***************************************/
       /* *  validate screen fields            **/
       /* ***************************************/

  SY03SFB();

       /* ***************************************/
       /* *  validate  gpc codes               **/
       /* ***************************************/

  SY03SFE();

       /* ***************************************/
       /* *  get existing style row            **/
       /* ***************************************/

  SY03SFF();

       /* ***************************************/
       /* *  get existing color row            **/
       /* ***************************************/

  SY03SFG();

       /* ***************************************/
       /* *  get size row data                 **/
       /* ***************************************/

  SY03SFH();

       /* ***************************************/
       /* *  get UPC information               **/
       /* ***************************************/

  SY03SFJ();


  SY03SFO(); /* set size fields to normal*/

end // end SY03050

// update UPC data
Function SY03055()

       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/


  SY03M005.SYMPRONM = "SY03055";
  SY03M005.SYMCURDT = VGVar.currentShortGregorianDate;

  SY03SGA(); /* set screen fields blank & protect*/

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY03M005 ;
   /* ***********************************************************/

  SYWREC.SYWMSGFL = "N";

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY03SGB();

       /* ***************************************/
       /* *  set SY03M005 screen to normal     **/
       /* ***************************************/

  SY03SGI();

       /* ***************************************/
       /* * validate codes for SY03M005 screen **/
       /* ***************************************/

  SY03SGJ();

       /* ***************************************/
       /* * check if any changes were made and **/
       /* * if so update the color row.        **/
       /* ***************************************/

  if (converseVar.eventKey is pf12
   || converseVar.validationMsgNum > 0)
    exit stack;
  else
    SY03SGC();
  end

       /* ***************************************/
       /* * reset screen for new color record. **/
       /* ***************************************/

  set SY03M005 empty;
  SY03M005.XGPCD = SYWREC.XGPCD;
  SY03M005.XGPABRV = SYWREC.XGPABRV;
  SY03M005.XDMCD = "00";

  SY03SFD(); /* set entry fields to normal*/

end // end SY03055

// check UPC data for sizes
Function SY03S-CHK-UPC()


       /* ******************************************/
       /* * CREATE UPC DATA FOR ALL SIZES         **/
       /* *    1. THIS STATEMENT GROUP WIL CALL   **/
       /* *       SY1280 TO CHECK UPC NUMBERS.    **/
       /* *       ANY SIZES WITHOUT UPC CODES WILL**/
       /* *       GET THEM.                       **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       ALL TABLES ARE  ROLLED BACK.    **/
       /* *                                       **/
       /* ******************************************/


  if (converseVar.validationMsgNum > 0 /* There were errors*/
   || SY2REC.SY2UPCFL == "H")          /* UPC's in History*/
    return;
  end

  set SQLCA empty;
  set SYUREC empty;

  SYUREC.XGPCD = SY3REC.XGPCD;
  SYUREC.SY1STNBR = SY3REC.SY1STNBR;
  SYUREC.SY2CLRID = SY3REC.SY2CLRID;
  SYUREC.XDMCD = SY3REC.XDMCD;
  SYUREC.XBCCD = SY1REC.XBCCD;
  SYUREC.XQACD = "01";
  SYUREC.SYUPCFCD = "C"; /* create function*/
  if (SY03M001.SY03M-CHK-UPC-FL == "F") /* We want to force UPC creation*/
    SYUREC.SYUPCOGP = "Y";
  end
  SYWREC.SYWINDEX = 1;
  while (SYWREC.SYWINDEX <= 40)
    if (SY3REC.XDVCD[SYWINDEX] != "  ") /* We have size entry*/
      SYUREC.SY5SZID[SYWINDEX] = SYWINDEX;
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end

  call "SY1280" (SYUREC) {isNoRefresh = yes, isExternal = yes};

  if (SYUREC.SYUPCRCD > 50) /* bad problems*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY03   ";
    TA1REC.TA1LOCAT[1] = "SY03S-CHK";
    TA1REC.TA1LOCAT[2] = "SY1280   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY03M001";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYUPC02";
    TA1TBLKE = SY3REC.SY3KEY;
    SQLCA.SQLCAREC = SYUREC.SQLCAREC;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    exit stack;
  end

end // end SY03S-CHK-UPC

// Create UPC data (SY1280)
Function SY03S-CREATE-UPC()


       /* ******************************************/
       /* * CREATE UPC DATA FOR SIZES             **/
       /* *    1. THIS STATEMENT GROUP WIL CALL   **/
       /* *       SY1280 TO CREATE 2ND QUALITY    **/
       /* *       UPC CODES.                      **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       ALL TABLES ARE  ROLLED BACK.    **/
       /* ******************************************/

  set SQLCA empty;
  set SYUREC empty;

  SYUREC.XGPCD = SY3REC.XGPCD;
  SYUREC.SY1STNBR = SY3REC.SY1STNBR;
  SYUREC.SY2CLRID = SY3REC.SY2CLRID;
  SYUREC.XDMCD = SY3REC.XDMCD;
  SYUREC.XBCCD = SY1REC.XBCCD;
  SYUREC.XQACD = "02";
  SYUREC.SYUPCFCD = "C"; /* create function*/
  SYUREC.SYUPCOGP = "Y"; /* we will force the assignment*/
  SYWREC.SYWINDEX = 1;
  while (SYWREC.SYWINDEX <= 40)
    if (SY03M005.SY03M-UPC-FL[SYWINDEX] == "Y"
     && SY03W01.SY03W-UPC-FL[SYWINDEX] == "N")
      SYUREC.SY5SZID[SYWINDEX] = SYWINDEX;
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end

  call "SY1280" (SYUREC) {isNoRefresh = yes, isExternal = yes};

  if (SYUREC.SYUPCRCD > 50) /* bad problems*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY03   ";
    TA1REC.TA1LOCAT[1] = "SY03S-CRE";
    TA1REC.TA1LOCAT[2] = "SY1280   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY03M005";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYUPC02";
    TA1TBLKE = SY3REC.SY3KEY;
    SQLCA.SQLCAREC = SYUREC.SQLCAREC;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(22); /* Size table error*/
    exit stack;
  end

end // end SY03S-CREATE-UPC

// Get UPC data for sizes
Function SY03S-GET-UPC()

       /* ******************************************/
       /* * GET 2ND QUALITY UPC DATA FOR ANY      **/
       /* * SIZES THAT HAVE IT.                   **/
       /* ******************************************/

  set SQLCA empty;
  set SYUREC empty;

  SYUREC.XGPCD = SY3REC.XGPCD;
  SYUREC.SY1STNBR = SY3REC.SY1STNBR;
  SYUREC.SY2CLRID = SY3REC.SY2CLRID;
  SYUREC.XDMCD = SY3REC.XDMCD;
  SYUREC.XQACD = "02";
  SYUREC.SYUPCFCD = "D"; /* Display function*/
  SYUREC.SYUPCDFN = "K"; /* Search by Key*/

  call "SY1280" (SYUREC) {isNoRefresh = yes, isExternal = yes};

  if (SYUREC.SYUPCRCD > 50) /* bad problems*/
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY03   ";
    TA1REC.TA1LOCAT[1] = "SY03S-GET";
    TA1REC.TA1LOCAT[2] = "SY1280   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY03M005";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYUPC02";
    TA1TBLKE = SY3REC.SY3KEY;
    SQLCA.SQLCAREC = SYUREC.SQLCAREC;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(22); /* Size table error*/
    exit stack;
  end

end // end SY03S-GET-UPC

// validate gpc code
Function SY03SAA()


       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY03M001.XGPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY03M001.XGPCD cursor, bold;
    SY03M001.XGPABRV = "INVALID";
    return;
  end

  if (SY03M001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY03M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(65); /* status code is inactive*/
      set SY03M001.XGPCD cursor, bold;
      SY03M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  else
    set SY03M001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY03M001.XGPABRV = "INVALID";
    exit stack;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/



  if (SY03M001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY03M001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY03M001.XGPABRV = "INVALID";
    exit stack;
  else
    if (SY03M001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY03M001.XGPCD cursor, bold;
      SY03M001.XGPABRV = "INVALID CODE";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end


end // end SY03SAA

// set fields protect
Function SY03SBA()


       /* *************************************/
       /* *  set empty size scale desc.      **/
       /* *  to dark and autoskip            **/
       /* *                                  **/
       /* *************************************/

  SY03M001.SY03M-CHK-UPC-FL = "N";
  set SY03M001.SY03M-CHK-UPC-FL skip;

  SYWREC.SYWINDEX = 40;
  while (SYWINDEX > 0)
    set SY03M001.SY3FRGUT[SYWINDEX] skip, invisible;
    set SY03M001.SY4IDDSC[SYWINDEX] skip, invisible;
    set SY03M001.XDVCD[SYWINDEX] skip, invisible;
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end


end // end SY03SBA

// validate screen entered fields
Function SY03SBB()


  if (converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    return;
  end

  if (SY03M001.SY1STNBR == " ")
    converseLib.validationFailed(40);
    set SY03M001.SY1STNBR cursor, bold;
    exit stack;
  else
    /* next sentence*/
  end

  if (SY03M001.SY2CLRID == " ")
    converseLib.validationFailed(40);
    set SY03M001.SY2CLRID cursor, bold;
    exit stack;
  else
    /* next sentence*/
  end

  if (SY03M001.XDMCD == " ")
    converseLib.validationFailed(40);
    set SY03M001.XDMCD cursor, bold;
    exit stack;
  else
    /* next sentence*/
  end

  if (SY03M001.XGPCD == " ")
    converseLib.validationFailed(40);
    set SY03M001.XGPCD cursor, bold;
    set SY03M001.SY2CLRID cursor, bold;
  else
    /* next sentence*/
  end


end // end SY03SBB

// check pf keys & transfer
Function SY03SBC()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY03M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY03M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY03SBM(); /* transfer to sy0m application*/
        SY03M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY03M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY03M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY03M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is pf13)
            SYWREC.SYWPFOPT = " ";
            COMMAREA.CAUSERA = SYWREC.SYWTRANF;
            SY03SBJ(); /* transfer to sy01 style  application*/
            SY03M001.SYMSCMSG = COMMAREA.CAMSG;
            set SY03M001 alarm;
            converseLib.validationFailed(1);
            exit stack;
          else
            if (converseVar.eventKey is pf14)
              SYWREC.SYWPFOPT = "PF14 ";
              COMMAREA.CAUSERA = SYWREC.SYWTRANF;
              SY03SBJ(); /* transfer to sy01 style application*/
              SY03M001.SYMSCMSG = COMMAREA.CAMSG;
              set SY03M001 alarm;
              converseLib.validationFailed(1);
              exit stack;
            else
              if (converseVar.eventKey is pf15)
                SYWREC.SYWPFOPT = " ";
                COMMAREA.CAUSERA = SYWREC.SYWTRANF;
                SY03SBK(); /* transfer to sy04 color menu application*/
                SY03M001.SYMSCMSG = COMMAREA.CAMSG;
                set SY03M001 alarm;
                converseLib.validationFailed(1);
                exit stack;
              else
                if (converseVar.eventKey is pf16)
                  SYWREC.SYWPFOPT = " ";
                  COMMAREA.CAUSERA = SYWREC.SYWTRANF;
                  SY03SBL(); /* transfer to sy02 chg. color*/
                                   /* application*/
                  SY03M001.SYMSCMSG = COMMAREA.CAMSG;
                  set SY03M001 alarm;
                  converseLib.validationFailed(1);
                  exit stack;
                else
                  if (converseVar.eventKey is enter
                   || converseVar.eventKey is pf12)
                    return;
                  else
                    exit stack;
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end SY03SBC

// set fields normal
Function SY03SBD()

       /* **************************************/
       /* *  set screen attributes normal   **/
       /* **************************************/


  set SY03M001.SY1STNBR normal;
  set SY03M001.SY2CLRID normal;
  set SY03M001.XDMCD normal;
  set SY03M001.XGPCD normal;



end // end SY03SBD

// validate gpc code
Function SY03SBE()


       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY03M001.XGPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY03M001.XGPCD cursor, bold;
    SY03M001.XGPABRV = "INVALID";
    return;
  end

  if (SY03M001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY03M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(65); /* status code is inactive*/
      set SY03M001.XGPCD cursor, bold;
      SY03M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.SYWMSGFL = "Y";
    end
  else
    set SY03M001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY03M001.XGPABRV = "INVALID";
    exit stack;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/



  if (SY03M001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY03M001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY03M001.XGPABRV = "INVALID";
    exit stack;
  else
    if (SY03M001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY03M001.XGPCD cursor, bold;
      SY03M001.XGPABRV = "INVALID CODE";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end




end // end SY03SBE

// validate & retrive style
Function SY03SBF()


       /* ******************************************/
       /* *     GET  STYLE DATA                   **/
       /* *                                       **/
       /* ******************************************/

  set SY1REC empty;
  set SQLCA empty;

  SY1REC.SY1STNBR = SY03M001.SY1STNBR;
  SY1REC.XGPCD = SY03M001.XGPCD;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY03M001.SY1STYNM = SY1REC.SY1STYNM;
    SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;
    SY03SBI(); /* get size scale descriptions*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style record does not exists*/
      set SY03M001.SY1STNBR cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY03   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY03SBF  ";
      TA1REC.TA1LOCAT[3] = "IO0120   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY02M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error....*/
      set SY03M001.SY1STNBR cursor, bold;
      exit stack;
    end
  end


end // end SY03SBF

// validate & retrive color
Function SY03SBG()


       /* ******************************************/
       /* *  GET  COLOR/DIM RECORD                **/
       /* ******************************************/

  set SQLCA empty;
  set SY2REC empty;

  SY2REC.XGPCD = SY03M001.XGPCD;
  SY2REC.SY1STNBR = SY03M001.SY1STNBR;
  SY2REC.SY2CLRID = SY03M001.SY2CLRID;
  SY2REC.XDMCD = SY03M001.XDMCD;


  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    if (SY2REC.XDR-PROD-REG-CD in SYWREC.XDR-PROD-REG-CD)
         /* ok, color is valid*/
    else
      converseLib.validationFailed(193); /* else color invalid*/
      set SY03M001.SY2CLRID cursor, bold;
      exit stack;
    end

    SY03M001.SY2CLRDS = SY2REC.SY2CLRDS;
    SY03SBN(); /* get dimension description*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(7);
                                   /* color/dimension record does not exist*/
      set SY03M001.SY2CLRID cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY03   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY03SBG ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY03M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error*/
      set SY03M001.SY2CLRID cursor, bold;
      exit stack;
    end
  end

   /* Now load Color division and abrv to screen*/
  SY03M001.SY03M-COLR-XDV = SY2REC.XDVCD;
  if (SY03M001.SY03M-COLR-XDV in XDVTBL.XDVCD)
    SY03M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
  else
    SY03M001.XDVDESC = "UNKNOWN";
  end

end // end SY03SBG

// validate & retrive size
Function SY03SBH()


       /* ********************************************/
       /* *   VERIFY IF SIZES EXISTS.               **/
       /* ********************************************/


  set SY3REC empty;
  set SQLCA empty;

  SY3REC.XGPCD = SY03M001.XGPCD;
  SY3REC.SY1STNBR = SY03M001.SY1STNBR;
  SY3REC.SY2CLRID = SY03M001.SY2CLRID;
  SY3REC.XDMCD = SY03M001.XDMCD;

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SY3REC to SY03M001 withV60Compat;
    SYFREC.SY3DATA = SY3REC.SY3DATA;
    SYWREC.SYWMSGFL = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(8); /* size record does not exists*/
      set SY03M001.SY2CLRID cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY03   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY03SBH ";
      TA1REC.TA1LOCAT[3] = "IO0140  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY03M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSIZE001";
      TA1TBLKE = SY3REC.SY3KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(22); /* size table error....*/
      set SY03M001.SY2CLRID cursor, bold;
      exit stack;
    end
  end


end // end SY03SBH

// get size descriptions
Function SY03SBI()

       /* ******************************************/
       /* * VERIFY SIZE SCALE CODE AND            **/
       /* * GET THE SIZE SCALE DESC.              **/
       /* ******************************************/

  set SQLCA empty;
  set SY4REC empty;

  SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SY4REC to SY03M001 withV60Compat;
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY03   ";
    TA1REC.TA1LOCAT[1] = "S        ";
    TA1REC.TA1LOCAT[2] = "SY03SBI  ";
    TA1REC.TA1LOCAT[3] = "IO0040   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY03M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSCALE01";
    TA1TBLKE = SY4REC.SY4SZSCL;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(53); /* size scale record error*/
    set SY03M001.SY1STNBR cursor, bold;
    exit stack;
  end


end // end SY03SBI

// transfer to sy01 application
Function SY03SBJ()

       /* ***************************************/
       /* * transfer to produt change color    **/
       /* * application                        **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY01";
  XSEXIT();


end // end SY03SBJ

// transfer to sy04 application
Function SY03SBK()

       /* ***************************************/
       /* * transfer to produt style color     **/
       /* * menu application                   **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY04";
  XSEXIT();


end // end SY03SBK

// transfer to sy03 application
Function SY03SBL()

       /* ***************************************/
       /* * transfer to produt change size     **/
       /* * application                        **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY02";
  XSEXIT();


end // end SY03SBL

// transfer to to sy0m menu
Function SY03SBM()

       /* ***************************************/
       /* * transfer to produt style chg. sub. **/
       /* * menu.                              **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY0M";
  XSEXIT();


end // end SY03SBM

// retrieve dimension desc.
Function SY03SBN()


       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY03M001.XDMCD == " ")
    return;
  else
    /* next sentence*/
  end

  if (SY03M001.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY03M001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    else
      SY03M001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      set SY03M001.XDMCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    set SY03M001.XDMCD cursor, bold;
    SY03M001.XDMDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY03SBN

// set size fields to normal
Function SY03SBO()



       /* *************************************/
       /* *  set size fields to normal for   **/
       /* *  the next converse               **/
       /* *                                  **/
       /* *************************************/

  set SY03M001.SY03M-CHK-UPC-FL normal;

  SYWREC.SYWINDEX = 40;
  while (SYWREC.SYWINDEX > 0)
    set SY03M001.SY3FRGUT[SYWINDEX] normal;
    set SY03M001.SY4IDDSC[SYWINDEX] skip;
    set SY03M001.XDVCD[SYWINDEX] normal;
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end


end // end SY03SBO

// set fields protect
Function SY03SCA()


       /* *************************************/
       /* *  set empty size scale desc.      **/
       /* *  to dark and autoskip            **/
       /* *                                  **/
       /* *************************************/

  set SY03M001.SY1STNBR skip;
  set SY03M001.SY2CLRID skip;
  set SY03M001.XGPCD skip;
  set SY03M001.XDMCD skip;


  SYWREC.SYWINDEX = 40;

  while (SYWREC.SYWINDEX > 0)
    if (SY3REC.SY3FRGUT[SYWINDEX] == " ")
      set SY03M001.SY3FRGUT[SYWINDEX] skip, invisible;
      set SY03M001.XDVCD[SYWINDEX] skip, invisible;
      set SY03M001.SY4IDDSC[SYWINDEX] skip, invisible;
    else
      if (converseVar.validationMsgNum > 0)
        /* next sentence*/
      else
        set SY03M001.SY3FRGUT[SYWINDEX] cursor;
      end
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end
end // end SY03SCA

// check pf keys
Function SY03SCB()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY03M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY03M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY03SBM(); /* transfer to sy0m application*/
        SY03M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY03M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY03M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY03M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is enter
           || converseVar.eventKey is pf12
           || converseVar.eventKey is pf13
           || converseVar.eventKey is pf14
           || converseVar.eventKey is pf15
           || converseVar.eventKey is pf16)
            return;
          else
            exit stack;
          end
        end
      end
    end
  end


end // end SY03SCB

// check for screen changes
Function SY03SCC()


       /* ***************************************/
       /* *  check if changes made. if no      **/
       /* *  changes return, else update style.**/
       /* ***************************************/

  move SY03M001 to SY3REC withV60Compat;

  if (SY03M001.SY03M-CHK-UPC-FL == "Y" /* Check UPC assignment*/
   || SY03M001.SY03M-CHK-UPC-FL == "F")
    SY03S-CHK-UPC();
  end

  if (SYFREC.SY3DATA != SY3REC.SY3DATA
   || (SY03M001.SY03M-CHK-UPC-FL == "Y"
   && SYUREC.SYUPCRCD == 00))
    /* next sentence*/
  else
    converseLib.validationFailed(57);
    SYWREC.SYWMSGFL = "Y";
    return;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  SY03SCE(); /* get todays date*/

       /* ******************************************/
       /* *   set up zzz family record for adds   **/
       /* *   zzzchgct is not updated because     **/
       /* *   the io module will take care of it. **/
       /* ******************************************/

  SYWREC.ZZZSDT = TA2REC.TA2GRGGN;
  SYWREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  SYWREC.ZZZCHGTM = TA2REC.TA2TIMHM;

       /* ******************************************/
       /* *   CHANGE SIZE RECORD IN SIZE TABLE    **/
       /* ******************************************/

  SY03SCF();


       /* ******************************************/
       /* *   commit size  records to db2         **/
       /* ******************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  converseLib.validationFailed(11);
  SYWREC.SYWMSGFL = "Y";

end // end SY03SCC

// transfer to applications
Function SY03SCD()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf13)
      SYWREC.SYWPFOPT = " ";
      COMMAREA.CAUSERA = SYWREC.SYWTRANF;
      SY03SBJ(); /* transfer to sy04 color menu application*/
      SY03M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY03M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf14)
        SYWREC.SYWPFOPT = "PF14 ";
        COMMAREA.CAUSERA = SYWREC.SYWTRANF;
        SY03SBJ(); /* transfer to sy04 color menu application*/
        SY03M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY03M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          SYWREC.SYWPFOPT = " ";
          COMMAREA.CAUSERA = SYWREC.SYWTRANF;
          SY03SBK(); /* transfer to sy04 color menu application*/
          SY03M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY03M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is pf16)
            SYWREC.SYWPFOPT = " ";
            COMMAREA.CAUSERA = SYWREC.SYWTRANF;
            SY03SBL(); /* transfer to sy02 chg. color*/
                                   /* application*/
            SY03M001.SYMSCMSG = COMMAREA.CAMSG;
            set SY03M001 alarm;
            converseLib.validationFailed(1);
            exit stack;
          else
            if (converseVar.eventKey is enter
             || converseVar.eventKey is pf12)
              return;
            else
              exit stack;
            end
          end
        end
      end
    end
  end





end // end SY03SCD

// cobol date routine
Function SY03SCE()
   /* GET SY02SAB*/

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0222)
    return;
  else
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY03SCE";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC) {isExternal = yes};
      converseLib.validationFailed(30); /* invalid date entered*/
      exit stack;
    else
      /* next sentence*/
    end
  end


end // end SY03SCE

// update size table
Function SY03SCF()


       /* ******************************************/
       /* * UPDATE SIZE  RECORD TO SIZE  TABLE    **/
       /* *    1. SCREEN SY0BM006 IS MOVED TO     **/
       /* *       SY3REC AND IF PF15 WAS PRESSED  **/
       /* *       THEN THE SIZE TABLE IS UPDATED. **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       ALL TABLES ARE  ROLLED BACK.    **/
       /* *                                       **/
       /* ******************************************/



  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;

  SY3REC.ZZZCHGTM = SYWREC.ZZZCHGTM;
  SY3REC.ZZZCHGDT = SYWREC.ZZZCHGDT;


  call "IO0140" ("U ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY03SCG(); /* write audit change  record*/
    SY03SCH(); /* write tag change record*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(37); /* unable to process update*/
      set SY03M001.SY1STNBR cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY03   ";
      TA1REC.TA1LOCAT[1] = "UPDATE   ";
      TA1REC.TA1LOCAT[2] = "SY03SCF  ";
      TA1REC.TA1LOCAT[3] = "IO0140   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY03M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSIZE001";
      TA1TBLKE = SY3REC.SY3KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(22);
      set SY03M001.SY2CLRID cursor, bold;
      exit stack;
    end
  end

end // end SY03SCF

// write change size audit
Function SY03SCG()


       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR SIZE CHANGE. **/
       /* *                                       **/
       /* ******************************************/


  set SYAREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SYAREC.SYAUDTYP = "C";
  SYAREC.XXXTBLNM = "VSIZE001";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY03   ";
    TA1REC.TA1LOCAT[1] = "SY03SCG  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSIZE001 ";
    TA1REC.TA1MAP = "SY03M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY3REC.XGPCD;
  SYAREC.SY1STNBR = SY3REC.SY1STNBR;
  SYAREC.SY2CLRID = SY3REC.SY2CLRID;
  SYAREC.XDMCD = SY3REC.XDMCD;
  SYAREC.ZZZSDT = SYWREC.ZZZSDT;
  SYAREC.ZZZSTM = SYWREC.ZZZCHGTM;
  SYAREC.SYABFR = SYFREC.SY3DATA;
  SYAREC.SYAAFT = SY3REC.SY3DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY03   ";
    TA1REC.TA1LOCAT[1] = "ADD      ";
    TA1REC.TA1LOCAT[2] = "SY03SCG  ";
    TA1REC.TA1LOCAT[3] = "IO0530   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY0B3001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY03M001.SY1STNBR cursor, bold;
    exit stack;
  end


end // end SY03SCG

// write chage size tag
Function SY03SCH()


       /* ******************************************/
       /* *   WRITE TAG RECORD FOR SIZE CHANGE.   **/
       /* *                                       **/
       /* ******************************************/


  set SY9REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SY9REC.SY9TGTYP = "C";
  SY9REC.XGPCD = SY3REC.XGPCD;
  SY9REC.SY1STNBR = SY3REC.SY1STNBR;
  SY9REC.SY2CLRID = SY3REC.SY2CLRID;
  SY9REC.XDMCD = SY3REC.XDMCD;
  SY9REC.ZZZSDT = SYWREC.ZZZSDT;
  SY9REC.ZZZSTM = SYWREC.ZZZCHGTM;

  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY03   ";
    TA1REC.TA1LOCAT[1] = "UPDATE   ";
    TA1REC.TA1LOCAT[2] = "SY03SCH  ";
    TA1REC.TA1LOCAT[3] = "IO0520   ";
    TA1REC.TA1LOCAT[4] = "SIZETBL ";
    TA1REC.TA1MAP = "SY03M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYTAG01";
    TA1TBLKE = SY9REC.SY9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(45); /* tag table error...*/
    set SY03M001.SY1STNBR cursor, bold;
    exit stack;
  end



end // end SY03SCH

// set size fields normal
Function SY03SCI()


       /* **************************************/
       /* *  set sy03m001 attributes normal   **/
       /* **************************************/

  set SY03M001.SY03M-CHK-UPC-FL normal;

  SYWREC.SYWINDEX = 40;
  while (SYWREC.SYWINDEX > 0)
    if (SY03M001.SY3FRGUT[SYWINDEX] == " ")
      /* next sentence*/
    else
      set SY03M001.SY3FRGUT[SYWINDEX] normal;
      set SY03M001.XDVCD[SYWINDEX] normal;
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end

  SY03M001.SYMSCMSG = " ";

end // end SY03SCI

// validate sy03m001 fields
Function SY03SCJ()


       /* **************************************/
       /* *  VALIDATE EACH OF THE 40 POSSIBLE **/
       /* *  SIZES.                           **/
       /* *                                   **/
       /* **************************************/

  if (SY03M001.SY03M-CHK-UPC-FL == "Y"
   || SY03M001.SY03M-CHK-UPC-FL == "N"
   || SY03M001.SY03M-CHK-UPC-FL == "F")
    /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(36); /* Value must be Y or N*/
    set SY03M001.SY03M-CHK-UPC-FL cursor, bold;
  end

  SYWREC.SYWGUTFG = "N";
  SYWREC.SYWINDEX = 40;

  while (SYWREC.SYWINDEX > 0)
    if (SY3REC.SY3FRGUT[SYWINDEX] == " "
     && SY3REC.XDVCD[SYWINDEX] == " ")
      /* next sentence*/
    else
      if (SY03M001.SY3FRGUT[SYWINDEX] == " "
       && SY03M001.XDVCD[SYWINDEX] == " ")
        converseLib.validationFailed(67); /* cannot delete a size*/
        set SY03M001.SY3FRGUT[SYWINDEX] cursor, bold;
        set SY03M001.XDVCD[SYWINDEX] cursor, bold;
        SY03M001.SY3FRGUT[SYWINDEX] = SY3REC.SY3FRGUT[SYWINDEX];
        SY03M001.XDVCD[SYWINDEX] = SY3REC.XDVCD[SYWINDEX];
      else
        if (SY03M001.SY3FRGUT[SYWINDEX] == " "
         && SY03M001.XDVCD[SYWINDEX] != " ")
          converseLib.validationFailed(12);
                                   /* MUST HAVE BOTH FRING/GUT AND DIVISION*/
          set SY03M001.SY3FRGUT[SYWINDEX] cursor, bold;
        else
          if (SY03M001.SY3FRGUT[SYWINDEX] != " "
           && SY03M001.XDVCD[SYWINDEX] == " ")
            converseLib.validationFailed(12);
                                   /* MUST HAVE BOTH FRING/GUT AND DIVISION*/
            set SY03M001.XDVCD[SYWINDEX] cursor, bold;
          else
            SY03SCM(); /* validate division code*/
            SY03SCL(); /* validate fringe/gut*/
          end
        end
      end
    end

    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end

   /* Now validate that at least one size has a division*/
   /* equal to the color division code (GPC=02 only).*/
  if (SY3REC.XGPCD == "02"
   && converseVar.validationMsgNum == 0)
    SYWREC.SYWINDEX = 1;
    SYWREC.SYWINDXA = 0;
    while (SYWREC.SYWINDEX <= 40)
      if (SY3REC.SY3FRGUT[SYWINDEX] != " ")
        if (SY03M001.XDVCD[SYWINDEX] == SY2REC.XDVCD)
          SYWREC.SYWINDXA = 01; /* we have a match*/
          SYWREC.SYWINDEX = 41; /* so stop the search*/
        end
      end
      SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
    end
    if (SYWREC.SYWINDXA == 0) /* Need to tell them*/
      converseLib.validationFailed(240); /* No size xdv matches color*/
    end
  end

end // end SY03SCJ

// validate size fringe/gut
Function SY03SCL()


       /* **************************************/
       /* *  VALIDATE EACH OF THE 40 POSSIBLE **/
       /* *  SIZES for fringe/gut             **/
       /* *                                   **/
       /* **************************************/

  if (SY03M001.SY3FRGUT[SYWINDEX] == "F"
   || SY03M001.SY3FRGUT[SYWINDEX] == "G"
   || SY03M001.SY3FRGUT[SYWINDEX] == "X")
    return;
  else
    set SY03M001.SY3FRGUT[SYWINDEX] cursor, bold;
    converseLib.validationFailed(3); /* INVALID CODE*/
  end





end // end SY03SCL

// validate division code
Function SY03SCM()


       /* **************************************/
       /* *  VALIDATE EACH OF THE 40 POSSIBLE **/
       /* *  SIZES for division codes.        **/
       /* *                                   **/
       /* **************************************/

  if (SY03M001.XDVCD[SYWINDEX] == "99")
    converseLib.validationFailed(3); /* INVALID CODE*/
    set SY03M001.XDVCD[SYWINDEX] cursor, bold;
  else
    if (SY03M001.XDVCD[SYWINDEX] in XDVTBL.XDVCD)
      if (SY03M001.XDVCD[SYWINDEX] >= SY2REC.XDVCD)
        /* next sentence*/
      else
        converseLib.validationFailed(147); /* size div should = color div*/
        set SY03M001.XDVCD[SYWINDEX] cursor, bold;
      end
    else
      set SY03M001.XDVCD[SYWINDEX] cursor, bold;
      converseLib.validationFailed(3); /* INVALID CODE*/
    end
  end

end // end SY03SCM

// set fields protect
Function SY03SFA()


       /* *************************************/
       /* *  set empty size scale desc.      **/
       /* *  to dark and autoskip            **/
       /* *                                  **/
       /* *************************************/

  SYWREC.SYWINDEX = 40;
  while (SYWINDEX > 0)
    set SY03M005.SY4IDDSC[SYWINDEX] skip, invisible;
    set SY03M005.SY03M-UPC-FL[SYWINDEX] skip, invisible;
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end


end // end SY03SFA

// validate screen entered fields
Function SY03SFB()


  if (converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
    /* next sentence*/
  else
    return;
  end

  if (SY03M005.SY1STNBR == " ")
    converseLib.validationFailed(40);
    set SY03M005.SY1STNBR cursor, bold;
    exit stack;
  else
    /* next sentence*/
  end

  if (SY03M005.SY2CLRID == " ")
    converseLib.validationFailed(40);
    set SY03M005.SY2CLRID cursor, bold;
    exit stack;
  else
    /* next sentence*/
  end

  if (SY03M005.XDMCD == " ")
    converseLib.validationFailed(40);
    set SY03M005.XDMCD cursor, bold;
    exit stack;
  else
    /* next sentence*/
  end

  if (SY03M005.XGPCD == " ")
    converseLib.validationFailed(40);
    set SY03M005.XGPCD cursor, bold;
    set SY03M005.SY2CLRID cursor, bold;
  else
    /* next sentence*/
  end


end // end SY03SFB

// check pf keys & transfer
Function SY03SFC()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY03M005.SYMSCMSG = COMMAREA.CAMSG;
      set SY03M005 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY03SBM(); /* transfer to sy0m application*/
        SY03M005.SYMSCMSG = COMMAREA.CAMSG;
        set SY03M005 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY03M005.SYMSCMSG = COMMAREA.CAMSG;
          set SY03M005 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is enter
           || converseVar.eventKey is pf12)
            return;
          else
            exit stack;
          end
        end
      end
    end
  end

end // end SY03SFC

// set fields normal
Function SY03SFD()

       /* **************************************/
       /* *  set screen attributes normal   **/
       /* **************************************/

  set SY03M005.SY1STNBR normal;
  set SY03M005.SY2CLRID normal;
  set SY03M005.XDMCD normal;
  set SY03M005.XGPCD normal;

end // end SY03SFD

// validate gpc code
Function SY03SFE()

       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY03M005.XGPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY03M005.XGPCD cursor, bold;
    SY03M005.XGPABRV = "INVALID";
    return;
  end

  if (SY03M005.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY03M005.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(65); /* status code is inactive*/
      set SY03M005.XGPCD cursor, bold;
      SY03M005.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.SYWMSGFL = "Y";
    end
  else
    set SY03M005.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY03M005.XGPABRV = "INVALID";
    exit stack;
  end

       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/

  if (SY03M005.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY03M005.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY03M005.XGPABRV = "INVALID";
    exit stack;
  else
    if (SY03M005.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY03M005.XGPCD cursor, bold;
      SY03M005.XGPABRV = "INVALID CODE";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end

end // end SY03SFE

// validate & retrive style
Function SY03SFF()

       /* ******************************************/
       /* *     GET  STYLE DATA                   **/
       /* *                                       **/
       /* ******************************************/

  set SY1REC empty;
  set SQLCA empty;

  SY1REC.SY1STNBR = SY03M005.SY1STNBR;
  SY1REC.XGPCD = SY03M005.XGPCD;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY03M005.SY1STYNM = SY1REC.SY1STYNM;
    SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;
    SY03SFI(); /* get size scale descriptions*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style record does not exists*/
      set SY03M005.SY1STNBR cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY03   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY03SFF  ";
      TA1REC.TA1LOCAT[3] = "IO0120   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY02M005";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error....*/
      set SY03M005.SY1STNBR cursor, bold;
      exit stack;
    end
  end

end // end SY03SFF

// validate & retrive color
Function SY03SFG()

       /* ******************************************/
       /* *  GET  COLOR/DIM RECORD                **/
       /* ******************************************/

  set SQLCA empty;
  set SY2REC empty;

  SY2REC.XGPCD = SY03M005.XGPCD;
  SY2REC.SY1STNBR = SY03M005.SY1STNBR;
  SY2REC.SY2CLRID = SY03M005.SY2CLRID;
  SY2REC.XDMCD = SY03M005.XDMCD;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY03M005.SY2CLRDS = SY2REC.SY2CLRDS;
    SY03SFN(); /* get dimension description*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(7); /* color/dim record does not exist*/
      set SY03M005.SY2CLRID cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY03   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY03SFG ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY03M005";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error*/
      set SY03M005.SY2CLRID cursor, bold;
      exit stack;
    end
  end

end // end SY03SFG

// validate & retrive size
Function SY03SFH()

       /* ********************************************/
       /* *   VERIFY IF SIZES EXISTS.               **/
       /* ********************************************/

  set SY3REC empty;
  set SQLCA empty;

  SY3REC.XGPCD = SY03M005.XGPCD;
  SY3REC.SY1STNBR = SY03M005.SY1STNBR;
  SY3REC.SY2CLRID = SY03M005.SY2CLRID;
  SY3REC.XDMCD = SY03M005.XDMCD;

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SY3REC to SY03M005 withV60Compat;
    SYWREC.SYWMSGFL = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(8); /* size record does not exists*/
      set SY03M005.SY2CLRID cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY03   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY03SFH ";
      TA1REC.TA1LOCAT[3] = "IO0140  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY03M005";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VSIZE001";
      TA1TBLKE = SY3REC.SY3KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(22); /* size table error....*/
      set SY03M005.SY2CLRID cursor, bold;
      exit stack;
    end
  end

end // end SY03SFH

// get size descriptions
Function SY03SFI()

       /* ******************************************/
       /* * VERIFY SIZE SCALE CODE AND            **/
       /* * GET THE SIZE SCALE DESC.              **/
       /* ******************************************/

  set SQLCA empty;
  set SY4REC empty;

  SY4REC.SY4SZSCL = SY1REC.SY4SZSCL;

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SY4REC to SY03M005 withV60Compat;
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY03   ";
    TA1REC.TA1LOCAT[1] = "S        ";
    TA1REC.TA1LOCAT[2] = "SY03SFI  ";
    TA1REC.TA1LOCAT[3] = "IO0040   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY03M005";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSCALE01";
    TA1TBLKE = SY4REC.SY4SZSCL;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(53); /* size scale record error*/
    set SY03M005.SY1STNBR cursor, bold;
    exit stack;
  end

end // end SY03SFI

// Call Sy1280 & load W01
Function SY03SFJ()

       /* *************************************/
       /* *  Call SY1280 to check for UPC    **/
       /* *  codes. Use this data to load    **/
       /* *  UPC flag array in W01 record.   **/
       /* *************************************/

  SY03S-GET-UPC(); /* Call SY1280 to get UPC codes*/

  SYWREC.SYWINDEX = 40;
  while (SYWREC.SYWINDEX > 0)
    if (SYUREC.SYUPCRCD != 0 /* Codes not found or in History*/
     || SYUREC.SYUPCMID[SYWINDEX] == 0) /* Manufacturer Id is zero*/
      SY03W01.SY03W-UPC-FL[SYWINDEX] = "N";
    else
      SY03W01.SY03W-UPC-FL[SYWINDEX] = "Y";
    end
    SY03M005.SY03M-UPC-FL[SYWINDEX] = SY03W01.SY03W-UPC-FL[SYWINDEX];
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end

end // end SY03SFJ

// retrieve dimension desc.
Function SY03SFN()

       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY03M005.XDMCD == " ")
    return;
  else
    /* next sentence*/
  end

  if (SY03M005.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY03M005.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    else
      SY03M005.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      set SY03M005.XDMCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    set SY03M005.XDMCD cursor, bold;
    SY03M005.XDMDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY03SFN

// set size fields to normal
Function SY03SFO()

       /* *************************************/
       /* *  set size fields to normal for   **/
       /* *  the next converse               **/
       /* *                                  **/
       /* *************************************/

  SYWREC.SYWINDEX = 40;
  while (SYWREC.SYWINDEX > 0)
    set SY03M005.SY03M-UPC-FL[SYWINDEX] normal;
    set SY03M005.SY4IDDSC[SYWINDEX] initialAttributes;
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end

end // end SY03SFO

// set fields protect
Function SY03SGA()

       /* *************************************/
       /* *  set empty size scale desc.      **/
       /* *  to dark and autoskip            **/
       /* *                                  **/
       /* *************************************/

  set SY03M005.SY1STNBR skip;
  set SY03M005.SY2CLRID skip;
  set SY03M005.XGPCD skip;
  set SY03M005.XDMCD skip;

  SYWREC.SYWINDEX = 40;
  while (SYWREC.SYWINDEX > 0)
    if (SY3REC.SY3FRGUT[SYWINDEX] == " ")
      set SY03M005.SY4IDDSC[SYWINDEX] skip, invisible;
      set SY03M005.SY03M-UPC-FL[SYWINDEX] skip, invisible;
    else
      if (SY03W01.SY03W-UPC-FL[SYWINDEX] == "Y")
        set SY03M005.SY03M-UPC-FL[SYWINDEX] skip;
      else
        if (converseVar.validationMsgNum > 0)
          /* next sentence*/
        else
          set SY03M005.SY03M-UPC-FL[SYWINDEX] cursor;
        end
      end
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end

end // end SY03SGA

// check pf keys
Function SY03SGB()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY03M005.SYMSCMSG = COMMAREA.CAMSG;
      set SY03M005 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY03SBM(); /* transfer to sy0m application*/
        SY03M005.SYMSCMSG = COMMAREA.CAMSG;
        set SY03M005 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY03M005.SYMSCMSG = COMMAREA.CAMSG;
          set SY03M005 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is enter
           || converseVar.eventKey is pf12)
            return;
          else
            exit stack;
          end
        end
      end
    end
  end

end // end SY03SGB

// check for screen changes
Function SY03SGC()

       /* ***************************************/
       /* *  check if changes made. if no      **/
       /* *  changes return, else update UPC.  **/
       /* ***************************************/

  SY03W01.SY03W-CRE-UPC-FL = "N";
  SYWREC.SYWINDEX = 1;
  while (SYWREC.SYWINDEX <= 40)
    if (SY03M005.SY03M-UPC-FL[SYWINDEX] == "Y"
     && SY03W01.SY03W-UPC-FL[SYWINDEX] == "N")
      SY03W01.SY03W-CRE-UPC-FL = "Y";
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end

  if (SY03W01.SY03W-CRE-UPC-FL == "Y")
    SY03S-CREATE-UPC();
  else
    converseLib.validationFailed(57);
    SYWREC.SYWMSGFL = "Y";
    return;
  end

       /* ******************************************/
       /* *   commit size  records to db2         **/
       /* ******************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  converseLib.validationFailed(11);
  SYWREC.SYWMSGFL = "Y";

end // end SY03SGC

// set size fields normal
Function SY03SGI()

       /* **************************************/
       /* *  set sy03m001 attributes normal   **/
       /* **************************************/

  SYWREC.SYWINDEX = 40;
  while (SYWREC.SYWINDEX > 0)
    if (SY3REC.SY3FRGUT[SYWINDEX] == " ")
      /* next sentence*/
    else
      set SY03M005.SY03M-UPC-FL[SYWINDEX] normal;
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end

  SY03M001.SYMSCMSG = " ";

end // end SY03SGI

// validate sy03m001 fields
Function SY03SGJ()

       /* **************************************/
       /* *  VALIDATE EACH OF THE 40 POSSIBLE **/
       /* *  SIZES.                           **/
       /* *                                   **/
       /* **************************************/

  SYWREC.SYWINDEX = 40;
  while (SYWREC.SYWINDEX > 0)
    if (SY3REC.SY3FRGUT[SYWINDEX] == " ")
      /* next sentence*/
    else
      if (SY03M005.SY03M-UPC-FL[SYWINDEX] == " "
       || SY03M005.SY03M-UPC-FL[SYWINDEX] == "Y"
       || SY03M005.SY03M-UPC-FL[SYWINDEX] == "N")
        /* next sentence*/
      else
        converseLib.validationFailed(36); /* Value must by Y or N*/
        set SY03M005.SY03M-UPC-FL[SYWINDEX] cursor, bold;
      end
    end

    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end

end // end SY03SGJ

Record SY03W01 type basicRecord
  10 SY03W-PGM-MODE SY03W-PGM-MODE ; 
  10 SY03W-CRE-UPC-FL SY03W-CRE-UPC-FL ; 
  10 SY03W-UPC-FL SY03W-UPC-FL [40] ; 
end // end SY03W01

// Create UPC codes (Y/N)
DataItem SY03W-CRE-UPC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program Mode
DataItem SY03W-PGM-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Have 2nd Qual UPC (Y/N)
DataItem SY03W-UPC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

