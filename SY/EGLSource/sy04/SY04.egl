package sy04;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import mn.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import rd.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SY04 ****
// this application will allow the user to select all the color
// records and then chose all the records or some of the record
// to process. the chosen records are then allowed to be
// changed.
// 
// 
// ************************************************************
// maintenance:
// 
// project
// number    who       when      why
// ------    -------   --------  ------------------------------
//           jricha    06-24-86  created application
//           mbuhit    05-19-87  sy04sfq: increased length of
//               syarec.syabfr & syarec.syaaft.
//           mbuhit    10-08-87  added product-category maint.
//           mbuhit    11-20-87  sy04sfq: increased length of
//               syarec.syabfr & syarec.syaaft.
//           mbuhit    10-25-87  added package-flag maint.
//           mbuhit    01-30-88  update ending offering dates
//                               when season or sn-yr changes.
//           mbuhit    02-23-88  correct pr99 futures off date.
//           mbuhit    03-18-88  sy04sfq: increased length of
//               syarec.syabfr & syarec.syaaft. Also changes
// some field names to correspond with sy2rec.
//           mbuhit    03-30-88  add overlay matl content flds.
//  p090     mbuhit    01-13-89  sy04sfq: increased length of
//               syarec.syabfr & syarec.syaaft.
//                               also changed sy2sesny to xsnyr
//           mhalst    02-27-89  Phase IV changes
//  P0104    MHALST    03-28-89  Remove use of XTVCD.
//  P0100    MHALST    04-13-89  Add blank style to screen 2.
//  -spl-    jwood     04-17-89  Added xssegtr logic
//  -spl-    jwood     04-17-89  Added noncsp option to calls
//  P0102    MHALST    04-25-89  Extend NIL offering date.
//           MHALST    05-16-89  Audit changes for VCOLOR01.
//  P105     MHALST    08-30-89  Add material content %'s and
//                               edits for NIL users.
//           MHALST    11-13-89  DB2 changes and add SYZTBL
//           MHALST    12-18-89  Add edit for package flag
//           MHALST    05-23-90  Correct Root Style Edit
//           MHALST    06-12-90  Correct Root Style Edit again
//           MHALST    07-27-90  Change edit for XCL codes
//           MHALST    10-08-90  DB2 changes and SYAREC
// P148      MHALST    11-06-90  Correct edits for Season/Year
//           MHALST    02-14-91  DB2 changes to SY2REC
//           MHALST    06-11-91  DB2 changes, reorder XCL codes
//                               for Footwear (GPC = 02)
//           MHALST    07-02-91  Add Seasonal Product file
//           MHALST    03-09-92  Remove SY2PRDES
// PF183     MHALST    04-14-92  Add Duty Rate Code
//           MHALST    10-12-92  Add XDR Code
//           MHALST    01-14-93  Extend Offer Dates for Holiday
//           MHALST    02-22-93  If season code & year not
//                               changed, skip validation.
//           JRAMOS    02-23-93  Bypass a given color if its
//                               Product Region Cd = not '02'
//                               and the Nike Dept Id = 'EAO '
//           MHALST    03-26-93  Change defaulting for apparel
//                               futures ending offer date
// SY0211    MBUHIT    04/20/94  Update SYREG when needed.
//           MHALST    03/15/95  Add XPR to SYREG update.
//           MHALST    10/03/95  Add MN0V to get users region
//           MHALST    04/25/96  Correct futr offer dt calc.
//           MHALST    11/05/96  Correct futr offer dt (Euro)
//           MHALST    10/23/97  Protect fields if PPS product
//                               Expand season year to 4 char
//           MHALST    02/23/98  Open XMC percents
//           MHALST    01/02/00  Correct edit on BO date
//           MHALST    01/25/00  Add XPSY010 for futr offer dt
// TT#18943 PVENKA Removed references to DPROD.VSYSPF01
// ************************************************************
// 
// 
// io modules    table
// used          view name
// ----------    --------------
//  IO0120       dprod.vstyle01
//  IO0130       dprod.vcolor01
//  IO6640       dprod.vsyreg01
//  IO0530       dprod.vsyaud01
//  IO0520       dprod.vsytag01
// c2cim ssunna  Add Product line and product desc fields to
//  SY04M002 map for product  line/category derivation
//  divestiture
// 
// 
// *********************
Program SY04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  MNVREC MNVREC; // record
  SQLCA SQLCA; // record
  SY04W01 SY04W01; // record
  SY04WCOL SY04WCOL; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY9REC SY9REC; // record
  SYAREC SYAREC; // record
  SYDREC SYDREC; // record
  SYEREC SYEREC; // record
  SYVREC SYVREC; // record
  SYWREC SYWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VDTYRT01 VDTYRT01; // record
  VSYDVX02 VSYDVX02; // record
  VSYREG02 VSYREG02; // record
  XP0HW01 XP0HW01; // record
  XP0HW02 XP0HW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SYRGTBL {deleteAfterUse = yes}; // table
  use SYZTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XCLTBL {deleteAfterUse = yes}; // table
  use XOGTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use SY04M.SY04M001,  // forms
      SY04M.SY04M002, 
      SY04M.XP0HM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SY04001: SY04001();


    goto SY04005;

    SY04005: SY04005();


    if (converseVar.eventKey is pa2)
      goto SY04001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY04005;
      else
        if (converseVar.eventKey is pf12
         || converseVar.eventKey is enter)
          goto SY04010;
        else
          converseLib.validationFailed(19);
          goto SY04005;
        end
      end
    end


    SY04010: SY04010();


    if (converseVar.eventKey is pa2)
      goto SY04001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY04005;
      else
        if (converseVar.eventKey is pf12
         || converseVar.eventKey is enter)
          goto SY04015;
        else
          converseLib.validationFailed(19);
          goto SY04005;
        end
      end
    end


    SY04015: SY04015();


    if (converseVar.eventKey is pa2)
      goto SY04001;
    else
      if (converseVar.validationMsgNum > 0)
        goto SY04015;
      else
        if (converseVar.eventKey is pf7
         || converseVar.eventKey is pf8)
          goto SY04015;
        else
          if (converseVar.eventKey is pf12
           || converseVar.eventKey is enter)
            goto SY04020;
          else
            converseLib.validationFailed(19);
            goto SY04015;
          end
        end
      end
    end


    SY04020: SY04020();

    if (converseVar.validationMsgNum > 0
     && SYWMSGFL == "N")
      goto SY04005;
    else
      goto SY04025;
    end


    SY04025: SY04025();


    if (converseVar.eventKey is pa2)
      goto SY04001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY04025;
      else
        if (converseVar.eventKey is pf3)
          SY04WCOL.SY04WSEL[1] = " ";
          goto SY04015;
        else
          if (converseVar.eventKey is pf12)
            goto SY04025;
          else
            if (converseVar.eventKey is enter)
              goto SY04020;
            else
              converseLib.validationFailed(19);
              goto SY04025;
            end
          end
        end
      end
    end



  end // end main
end // end SY04

// init. application
Function SY04001()


       /* *****************************************/
       /* * 1. init. application.                **/
       /* * 2. set all rec & maps to empty       **/
       /* *    and clear.                        **/
       /* * 3. if the commarea.xgpcd is diff.    **/
       /* *    than the sywrec.xgpcd use the     **/
       /* *    sywrec.xgpcd because the user     **/
       /* *    must have transfered into this    **/
       /* *    application with the sywrec.xgpcd **/
       /* * 4. validate the gpc code.            **/
       /* *                                      **/
       /* *****************************************/


  XSENTRY();
  set SYWREC empty;

  set SY1REC empty;
  set SY2REC empty;
  set VSYREG02 empty;
  set SY9REC empty;
  set SYAREC empty;
  set SYVREC empty;
  set TA1REC empty;
  set TA2REC empty;
  set XP0HW01 empty;
  set XP0HW02 empty;
  set SY04M001 initial;
  set SY04M002 initial;

  SYWREC.SYWMSGFL = "N";

  SYWREC.SYWTRANF = COMMAREA.CAUSERA;

  if (SYWREC.XGPCD == " ")
    SY04M001.XGPCD = COMMAREA.XGPCD;
  else
    if (SYWREC.XGPCD == COMMAREA.XGPCD)
      SY04M001.XGPCD = COMMAREA.XGPCD;
    else
      SY04M001.XGPCD = SYWREC.XGPCD;
    end
  end


  SY04M001.SYMREV = "02";

  SY04SAA(); /* validate gpc code*/

  /*IF SY04M002.XGPCD EQ '03';*/
  /*  MOVE 'Y' TO SY04M002.SY04MSPF;*/
  /*ELSE;*/
  /*  MOVE 'N' TO SY04M002.SY04MSPF;*/
  /*END;*/

       /* *** get todays date*/
  TA2REC.TA2DTOPT = "GETDATE";
  SY04SAB();
  SYWREC.SYWTODAY = TA2REC.TA2GRGGN;

  SYWREC.SYWMSGFL = "N";
  SY04SBG(); /* set fields to normal*/

   /* Now, find out what region user is and set-up table of*/
   /* valid regions the user can access.*/
  XPSY008(); /* Get users region*/
  if (SYWREC.SYW-REG-TBL-SIZE == 0)
    converseLib.validationFailed(124); /* User Id not authorized*/
  end

end // end SY04001

// get style/life cycle selection
Function SY04005()


       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/

  SY04M001.SYMTTLNM = " COLOR/DIMENSION SELECT MENU - CHG ";
  SY04M001.SYMPRONM = "SY04005";
  SY04M001.SYMREV = "09"; /* program revision number!!!!!!!*/
  SY04M001.SYMCURDT = VGVar.currentShortGregorianDate;

  SY04SBG(); /* set fields protect*/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    /* next sentence*/
  else
    set SY04M001.SY1STNBR cursor;
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY04M001 ;
   /* ***********************************************************/


  SYWREC.SYWMSGFL = "N";

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY04SBB();

       /* ***************************************/
       /* *  validate style and gpc codes      **/
       /* ***************************************/

  SY04SBD();


       /* ***************************************/
       /* *  get existing style row            **/
       /* ***************************************/

  SY1REC.XGPCD = SY04M001.XGPCD;
  SY1REC.SY1STNBR = SY04M001.SY1STNBR;
  SY04SBE();

end // end SY04005

// get selected color rows
Function SY04010()

  SYWREC.SYWMSGFL = "N";

       /* ******************************************/
       /* *  select all colors and build working  **/
       /* *  storage section for records.         **/
       /* ******************************************/

  SY04SCA();

       /* ******************************************/
       /* *  build the color menu screen.         **/
       /* *                                       **/
       /* ******************************************/

  SY04SCI();


  converseLib.validationFailed(71);
  SYWREC.SYWMSGFL = "Y";
  SY04WCOL.SY04WMS8 = "          **  ";
  SY04WCOL.SY04WMS2 = " COLORS SELECTED ";
  SY04WCOL.SY04WMS7 = "AFTER SELECTION, PRESS \"ENTER\" ";
  SY04WCOL.SY04WMS1 = SY04WCOL.SY04WCCT;
  SY04M001.SYMSCMSG = SY04WCOL.SY04WMSG;

  SY04WCOL.SY04WUPD = 0; /* set # of colors updated to 0*/
  SYWREC.SYWINDXA = 0; /* to count seasonal records*/
  SY04WCOL.SY04W-XDR-FL = "N"; /* Have not displayed XDR popup*/

end // end SY04010

// select color rows to process
Function SY04015()


       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/

  SY04M001.SYMTTLNM = " COLOR/DIMENSION SELECT MENU - CHG ";
  SY04M001.SYMPRONM = "SY04015";
  SY04M001.SYMREV = "09"; /* program revision number!!!!!!!!*/
  SY04M001.SYMCURDT = VGVar.currentShortGregorianDate;

  set SY04M001.SY1STNBR skip;
  set SY04M001.XGPCD skip;
  set SY04M001.SY04MXLC skip;
  set SY04M001.SY04MSEL[1] cursor;
  converseVar.segmentedMode = 1;


   /* ***********************************************************/

  converse SY04M001 ;
   /* ***********************************************************/

  SYWREC.SYWMSGFL = "N";
  SY04M001.SYMSCMSG = " ";
       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY04SDA();

       /* ***************************************/
       /* *  check if we should pop-up region  **/
       /* *  window.                           **/
       /* ***************************************/

  if (SY04M001.SY04MSEL[1] != " "
   || SY04M001.SY04MSEL[2] != " "
   || SY04M001.SY04MSEL[3] != " "
   || SY04M001.SY04MSEL[4] != " "
   || SY04M001.SY04MSEL[5] != " "
   || SY04M001.SY04MSEL[6] != " "
   || SY04M001.SY04MSEL[7] != " "
   || SY04M001.SY04MSEL[8] != " "
   || SY04M001.SY04MSEL[9] != " "
   || SY04M001.SY04MSEL[10] != " "
   || SY04M001.SY04MSEL[11] != " "
   || SY04M001.SY04MSEL[12] != " ")
    SY04WCOL.SY04W-XDR-FL = "Y";
  end

       /* ***************************************/
       /* *  if ezeaid = pf7 scroll backward   **/
       /* *                                    **/
       /* ***************************************/

  if (converseVar.eventKey is pf7)
    SY04SDB();
  else
    /* next sentence*/
  end


       /* ***************************************/
       /* *  if ezeaid = pf8 scroll backward   **/
       /* *                                    **/
       /* ***************************************/

  if (converseVar.eventKey is pf8)
    SY04SDC();
  else
    /* next sentence*/
  end

       /* ***************************************/
       /* *  if ezeaid = enter check screen    **/
       /* *  and continue.                     **/
       /* ***************************************/

  if (converseVar.eventKey is enter)
    if (SY04WCOL.SY04W-XDR-FL == "Y")
      SY04S-GET-XP0HM(); /* Pop-up region window*/
    end
    SY04SDD();
  else
    /* next sentence*/
  end

  if (converseVar.eventKey is enter)
    SY04WCOL.SY04WCDX = 1;
  else
    /* next sentence*/
  end

end // end SY04015

// get the selected color row
Function SY04020()


       /* ***************************************/
       /* *  1. use the selected colros from   **/
       /* *  working storage to retrieve the   **/
       /* *  next color id from the color      **/
       /* *  table.                            **/
       /* *                                    **/
       /* *  2. the process will validate      **/
       /* *     and retrieve all code descs.   **/
       /* *                                    **/
       /* ***************************************/

  converseLib.clearScreen();
  set SY04M002 initial;
  SY04M002.XGPCD = SYWREC.XGPCD;
  SY04M002.XGPABRV = SYWREC.XGPABRV;
  SY04M002.SY1STYNM = SY1REC.SY1STYNM;

  SYWREC.SYWMSGFL = "N";

  if (SY04WCOL.SY04WSEL[1] == "A")
    SY04SEA(); /* process all color records*/
  else
    SY04SEB(); /* process only select color records*/
  end

       /* ***************************************/
       /* * get color id row  for              **/
       /* * sy02m001                           **/
       /* ***************************************/

  SY04SEC();

   /* If footwear, check if product is on PPS*/
  if (SY2REC.XGPCD == "02")
    SY04S-CHK-SYDVX();
  else
    SYWREC.SYW-ON-PPS-FL = "N";
  end

       /* ***************************************/
       /* * get code description for screens   **/
       /* * sy02m001                           **/
       /* ***************************************/

  SY04SED();

  SYWMSGFL = "Y";

  /*IF SY04M001.XGPCD EQ '03';*/
  /*  IF SY04M002.SY04MSPF EQ ' ';*/
  /*    MOVE 'Y' TO SY04M002.SY04MSPF;*/
  /*  END;*/
  /*  SET SY04M002.SY04MSPP DEFINED;*/
  /*  SET SY04M002.SY04MSPF NORMAL;*/
  /*ELSE;*/
  /*  SET SY04M002.SY04MSPP AUTOSKIP,DARK;*/
  /*  MOVE 'N' TO SY04M002.SY04MSPF;*/
  /*  SET SY04M002.SY04MSPF AUTOSKIP,DARK;*/
  /*END;*/

end // end SY04020

// update the selected color row
Function SY04025()


       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/


  SY04M002.SYMTTLNM = " PRODUCT MULTIPLE COLOR/DIMENSION - CHG ";
  SY04M002.SYMPRONM = "SY04025";
  SY04M002.SYMREV = "09"; /* program revison number!!!!!!!*/
  SY04M002.SYMCURDT = VGVar.currentShortGregorianDate;
  if (SY04M002.XGPCD == "02")
    SY04M002.SY04MVP1 = "P/L/S/T:";
    /* CODE COMMENTED OUT UNTIL PPS SYNC-UP COMPLETED*/
    if (SYWREC.SYW-ON-PPS-FL == "Y")
    /* SY04S-PPS-PROT;*/
      SY04M002.SY04M-PPS-PROMPT = "** PPS **";
    else
      SY04M002.SY04M-PPS-PROMPT = "         ";
    end
  else
    SY04M002.SY04MVP1 = "P/S/T/L:";
    SY04M002.SY04M-PPS-PROMPT = "        ";
  end

  set SY04M002.SY1STNBR protect;
  set SY04M002.XGPCD protect;
  set SY04M002.SY2CLRID protect;
  set SY04M002.XDMCD protect;

  if (COMMAREA.XDVCD == "02") /* NIL user*/
    SY04SBX(); /* set screen fields protect*/
  end

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    /* next sentence*/
  else
    if (COMMAREA.XDVCD == "02") /* NIL user*/
      set SY04M002.XMCCD1 cursor;
    else
      /* CODE COMMENTED OUT UNTIL PPS SYNC-UP COMPLETED*/
      /* IF SYWREC.SYW-ON-PPS-FL = 'Y';*/
      /* SET SY04M002.SY2CLRAB CURSOR;*/
      /* ELSE;*/
      set SY04M002.SY2CLRDS cursor;
      /* END;*/
    end
  end


  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY04M002 ;
   /* ***********************************************************/


  SYWREC.SYWMSGFL = "N";

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY04SFA();

       /* ***************************************/
       /* *  set sy02m001 screen to normal     **/
       /* ***************************************/

  SY04SFB();

       /* ***************************************/
       /* * validate codes for sy02m001 screen **/
       /* ***************************************/

  SY04SFC();

       /* ***************************************/
       /* * check if any changes were made and **/
       /* * if so update the color row.        **/
       /* ***************************************/

  if (converseVar.eventKey is pf12
   || converseVar.validationMsgNum > 0)
    exit stack;
  else
    if (converseVar.eventKey is pf3)
      SY04SDF();
      SY04SCI();
    else
      SY04SFD();
      if (SY04WCOL.SY04WSEL[1] == "A")
        /* next sentence*/
      else
        SY04WCOL.SY04WSEL[SY04WCDX] = " ";
      end
    end
  end


       /* ***************************************/
       /* *  transfer to other applications.   **/
       /* ***************************************/

  SY04SFE();



end // end SY04025

// Check for size update
Function SY04S-CHK-SIZE()
       /* ******************************************/
       /* * CHECK FOR SIZE UPDATE                 **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end

   /* First retrieve VSIZE001 row*/

  SY3REC.XGPCD = SY2REC.XGPCD;
  SY3REC.SY1STNBR = SY2REC.SY1STNBR;
  SY3REC.SY2CLRID = SY2REC.SY2CLRID;
  SY3REC.XDMCD = SY2REC.XDMCD;

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "U        ";
    TA1REC.TA1LOCAT[2] = "SY04S-CHK";
    TA1REC.TA1LOCAT[3] = "IO0140   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY04M002";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSIZE001";
    TA1TBLKE = SY3REC.SY3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(22); /* size table error....*/
    set SY04M002.SY2CLRID cursor, bold;
    exit stack;
  end

  set SYAREC empty;
  SYAREC.SYABFR = SY3REC.SY3DATA;

   /* Now scan the size divisions for changes*/
  SYWREC.SYWINDXA = 0;
  SYWREC.SYWINDXB = 1;
  while (SYWREC.SYWINDXB <= 40)
    if (SY3REC.XDVCD[SYWINDXB] == SYEREC.XDVCD)
      SY3REC.XDVCD[SYWINDXB] = SY2REC.XDVCD;
      SYWREC.SYWINDXA = SYWREC.SYWINDXB;
    end
    SYWREC.SYWINDXB = SYWREC.SYWINDXB + 1;
  end

  if (SYWREC.SYWINDXA == 0) /* Nothing changed*/
    return;
  end

  SY3REC.ZZZCHGDT = SYWREC.ZZZCHGDT;
  SY3REC.ZZZCHGTM = SYWREC.ZZZCHGTM;

  call "IO0140" ("U ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "U        ";
    TA1REC.TA1LOCAT[2] = "SY04S-CHK";
    TA1REC.TA1LOCAT[3] = "IO0140   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY04M002";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSIZE001";
    TA1TBLKE = SY3REC.SY3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(22); /* size table error....*/
    set SY04M002.SY2CLRID cursor, bold;
    exit stack;
  end

       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR SIZE UPDATE  **/
       /* *                                       **/
       /* ******************************************/

  SYAREC.SYAUDTYP = "C";
  SYAREC.XXXTBLNM = "VSIZE001";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "SY04S-CHK";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSIZE001 ";
    TA1REC.TA1MAP = "SY04M002";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY3REC.XGPCD;
  SYAREC.SY1STNBR = SY3REC.SY1STNBR;
  SYAREC.SY2CLRID = SY3REC.SY2CLRID;
  SYAREC.XDMCD = SY3REC.XDMCD;
  SYAREC.ZZZSDT = SYWREC.ZZZSDT;
  SYAREC.ZZZSTM = SYWREC.ZZZCHGTM;
  SYAREC.SYAAFT = SY3REC.SY3DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY04S-CH";
    TA1REC.TA1LOCAT[3] = "IO0530  ";
    TA1REC.TA1LOCAT[4] = "COLORTBL";
    TA1REC.TA1MAP = "SY04M002";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY04M002.SY1STNBR cursor, bold;
    exit stack;
  end

end // end SY04S-CHK-SIZE

// Check VSYDVX02 to set PPS flag
Function SY04S-CHK-SYDVX()

   /* *******************************************************/
   /* Read the DPRODG.VSYDVX02 table to set flag to*/
   /* indicate if this color came from PPS system.*/
   /* *******************************************************/

  VSYDVX02.XGP-GPC-CD = SY2REC.XGPCD;
  VSYDVX02.SY-STY-NBR = SY2REC.SY1STNBR;
  VSYDVX02.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  VSYDVX02.XDM-DIM-CD = SY2REC.XDMCD;

  call "VSYDVX02" ("SA", SQLCA, VSYDVX02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VSYDVX02.RB-SG-COLR-ID != 0)
      SYWREC.SYW-ON-PPS-FL = "Y";
    else
      SYWREC.SYW-ON-PPS-FL = "N";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SYWREC.SYW-ON-PPS-FL = "N";
    else
      converseLib.validationFailed(22); /* corp table error - contact sys dvl*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY04";
      TA1REC.TA1LOCAT[1] = "S-CHK-SYDVX";
      TA1REC.TA1LOCAT[2] = "VSYDVX02 ";
      TA1REC.TA1LOCAT[3] = "SA";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY04M001";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYDVX02";
      TA1REC.TA1TBLKE = VSYDVX02.VSYDVX02-KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      exit stack;
    end
  end

end // end SY04S-CHK-SYDVX

// get sel. regions for cur. clr.
Function SY04S-GET-SYREG()

   /* *******************************************************/
   /* get region rows for current color/dim and each user*/
   /* selected region.  Update season, year, offering dates.*/
   /* *******************************************************/

  XP0HWIX1 = 1;

  while (XP0HWIX1 <= 25)
    if (XP0HW01.XP0HWSEL[XP0HWIX1] == "S" /* user selected region*/
     && XP0HW01.XDR-PROD-REG-CD[XP0HWIX1] in SYWREC.XDR-PROD-REG-CD)
      VSYREG02.XDR-PROD-REG-CD = XP0HW01.XDR-PROD-REG-CD[XP0HWIX1];
      TA1REC.TA1PGMNM = "SY04";
      TA1REC.TA1MAP = "SY04M001";
      XPSY003-VAL-SYREG(); /* validate syreg row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* found:*/
        SYAREC.SYABFR = VSYREG02.VSYREG02-GROUP;
        VSYREG02.XPR-PROD-TYP-CD = SY2REC.XPRCD;
        VSYREG02.XSE-SESN-CD = SY2REC.XSECD;
        VSYREG02.XSN-SESN-YR-RNG = SY2REC.XSNYR;
        VSYREG02.SY-PROP-OFFER-XDT = SY2REC.SY2POFXD;
        VSYREG02.SY-FUTR-OFFER-XDT = SY2REC.SY2FOFXD;
        VSYREG02.ZZ-CHNG-DT = SYWREC.ZZZCHGDT;
        VSYREG02.ZZ-CHNG-HHMM = SYWREC.ZZZCHGTM;
        XPSY004-UPD-SYREG(); /* update current syreg row*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SYAREC.SYAUDTYP = "C";
          SYAREC.ZZZSDT = SYWREC.ZZZCHGDT;
          SYAREC.ZZZSTM = SYWREC.ZZZCHGTM;
          XPSY005-AUD-SYREG();
          SY9REC.SY9TGTYP = "C";
          SY9REC.ZZZSDT = SYWREC.ZZZCHGDT;
          SY9REC.ZZZSTM = SYWREC.ZZZCHGTM;
          XPSY006-TAG-SYREG();
        end
      end
    end
    XP0HWIX1 = XP0HWIX1 + 1;
  end


end // end SY04S-GET-SYREG

// Validate XDR region
Function SY04S-GET-XP0HM()

   /* Validate XDR Prod Region code*/

  XP0HW01.XP0HW-ONLY-SYREG-FL = "N";
  XP0HW01.XGPCD = SY04M001.XGPCD;
  XP0HW01.SY1STNBR = SY04M001.SY1STNBR;
  XP0HW01.SY2CLRID = " ";
  XP0HW01.XDMCD = " ";

  XP0H001(); /* so do it*/

  if (XP0HW02.XP0HWERR == "Y") /* we have an error*/
    if (XP0HW02.XP0HWENR == 0) /* Invalid function key*/
      converseLib.validationFailed(19);
    end
    if (XP0HW02.XP0HWENR == 1) /* No rows found*/
      converseLib.validationFailed(50);
    end
    if (XP0HW02.XP0HWENR == 2) /* Corp. Table Error*/
      converseLib.validationFailed(23);
    end
    return;
  else
    converseLib.clearScreen();
    
  end


end // end SY04S-GET-XP0HM

// GET ROW FROM YSNTBL
Function SY04S-GET-YSN()

       /* ******************************************/
       /* *  GET PROPER ROW FROM YSNTBL.          **/
       /* ******************************************/

  SY04W01.SY04W-FND-YSN = "N";
  SYWREC.SYWINDEX = 1;
  while (YSNTBL.XGPCD[SYWINDEX] != "99"
   && SY04W01.SY04W-FND-YSN == "N")
    if (YSNTBL.XGPCD[SYWINDEX] == SY04M001.XGPCD
     && YSNTBL.XDR-PROD-REG-CD[SYWINDEX] == SY04W01.XDR-PROD-REG-CD
     && YSNTBL.XSECD[SYWINDEX] == SY04W01.XSE-SESN-CD
     && YSNTBL.XSNYR[SYWINDEX] == SY04W01.SY04W-XSN-SESN-YR
     && YSNTBL.XXXSTAT[SYWINDEX] == "A")
      SY04W01.SY04W-FND-YSN = "Y";
    else
      SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
    end
  end

end // end SY04S-GET-YSN

// verify development region
Function SY04S-VAL-XDR()

       /* ******************************************/
       /* *  VERIFY DEVELOPMENT REGION CODE AND   **/
       /* *  GET DESCRIPTION.                     **/
       /* ******************************************/

  if (SY04M002.XDR-PROD-REG-CD == "  ")
    SY04M002.XDR-PROD-REG-SDESC = " ";
  else
    if (SY04M002.XDR-PROD-REG-CD in XDRTBL.XDR-PROD-REG-CD)
      SY04M002.XDR-PROD-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
    else
      SY04M002.XDR-PROD-REG-SDESC = "INVALID";
      converseLib.validationFailed(3); /* Invalid Code*/
      set SY04M002.XDR-PROD-REG-CD cursor, bold;
    end
  end

end // end SY04S-VAL-XDR

// validate gpc code
Function SY04SAA()
   /* GET SY04SBD*/


       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY04M001.XGPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M001.XGPCD cursor, bold;
    SY04M001.XGPABRV = "INVALID";
    return;
  end

  if (SY04M001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(33); /* status code is inactive*/
      set SY04M001.XGPCD cursor, bold;
      SY04M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  else
    set SY04M001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY04M001.XGPABRV = "INVALID";
    exit stack;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/



  if (SY04M001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY04M001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY04M001.XGPABRV = "INVALID";
    exit stack;
  else
    if (SY04M001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY04M001.XGPCD cursor, bold;
      SY04M001.XGPABRV = "INVALID CODE";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end



end // end SY04SAA

// cobol date routine
Function SY04SAB()


  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0222)
    return;
  else
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY04SAB";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC) {isExternal = yes};
      converseLib.validationFailed(30); /* invalid date entered*/
      exit stack;
    else
      /* next sentence*/
    end
  end





end // end SY04SAB

// transfer to sy0m application
Function SY04SBA()


       /* ***************************************/
       /* * transfer to produt sub menu        **/
       /* * application                        **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY0M";
  XSEXIT();


end // end SY04SBA

// check pf keys & transfer
Function SY04SBB()


       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY04M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY04M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY04SBA(); /* transfer to sy0m application*/
        SY04M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY04M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY04M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY04M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is pf13)
            SYWREC.SYWPFOPT = " ";
            COMMAREA.CAUSERA = SYWREC.SYWTRANF;
            SY04SBC(); /* transfer to sy04 color menu application*/
            SY04M001.SYMSCMSG = COMMAREA.CAMSG;
            set SY04M001 alarm;
            converseLib.validationFailed(1);
            exit stack;
          else
            if (converseVar.eventKey is pf14)
              SYWREC.SYWPFOPT = "PF14 ";
              COMMAREA.CAUSERA = SYWREC.SYWTRANF;
              SY04SBC(); /* transfer to sy04 color menu application*/
              SY04M001.SYMSCMSG = COMMAREA.CAMSG;
              set SY04M001 alarm;
              converseLib.validationFailed(1);
              exit stack;
            else
              if (converseVar.eventKey is pf16)
                SYWREC.SYWPFOPT = "     ";
                COMMAREA.CAUSERA = SYWREC.SYWTRANF;
                SY04SBH(); /* transfer to sy02 color  application*/
                SY04M001.SYMSCMSG = COMMAREA.CAMSG;
                set SY04M001 alarm;
                converseLib.validationFailed(1);
                exit stack;
              else
                if (converseVar.eventKey is pf17)
                  SYWREC.SYWPFOPT = " ";
                  COMMAREA.CAUSERA = SYWREC.SYWTRANF;
                  SY04SBF(); /* transfer to sy03 chg. size*/
                                   /* application*/
                  SY04M001.SYMSCMSG = COMMAREA.CAMSG;
                  set SY04M001 alarm;
                  converseLib.validationFailed(1);
                  exit stack;
                else
                  if (converseVar.eventKey is enter)
                    return;
                  else
                    exit stack;
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end SY04SBB

// transfer to sy01 appl.
Function SY04SBC()


       /* ***************************************/
       /* * transfer to produt change color    **/
       /* * application                        **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY01";
  XSEXIT();


end // end SY04SBC

// validate gpc code
Function SY04SBD()


       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY04M001.XGPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M001.XGPCD cursor, bold;
    SY04M001.XGPABRV = "INVALID";
    return;
  end

  if (SY04M001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(33); /* status code is inactive*/
      set SY04M001.XGPCD cursor, bold;
      SY04M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  else
    set SY04M001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY04M001.XGPABRV = "INVALID";
    exit stack;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/



  if (SY04M001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY04M001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY04M001.XGPABRV = "INVALID";
    exit stack;
  else
    if (SY04M001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY04M001.XGPCD cursor, bold;
      SY04M001.XGPABRV = "INVALID CODE";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end



end // end SY04SBD

// get style row data
Function SY04SBE()


       /* ******************************************/
       /* *     GET  STYLE DATA                   **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;
  SY1REC.SY1STNBR = SY04M001.SY1STNBR;
  SY1REC.XGPCD = SY04M001.XGPCD;

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY04M001.SY1STYNM = SY1REC.SY1STYNM;
    SY04M002.SY1STYNM = SY1REC.SY1STYNM;
    SY04M002.SY1BSTNB = SY1REC.SY1BSTNB;
    SYWREC.XGPCD = SY1REC.XGPCD;
    SYWREC.SYWMSGFL = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style record does not exists*/
      set SY04M001.SY1STNBR cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY04   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY04SBE  ";
      TA1REC.TA1LOCAT[3] = "IO0120   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY04M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error....*/
      set SY04M001.SY1STNBR cursor, bold;
      exit stack;
    end
  end


end // end SY04SBE

// transfer to sy03 appl.
Function SY04SBF()


       /* ***************************************/
       /* * transfer to produt change size     **/
       /* * application                        **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY03";
  XSEXIT();


end // end SY04SBF

// set fields to normal
Function SY04SBG()


       /* ***************************************/
       /* *  set sy04m001 screen to normal     **/
       /* *  and to protect.                   **/
       /* ***************************************/

  SY04WCOL.SY04WSDX = 1;

  set SY04M001.SY1STNBR normal;
  set SY04M001.SY04MXLC normal;

  while (SY04WCOL.SY04WSDX <= 12)
    set SY04M001.SY2CLRID[SY04WSDX] protect;
    set SY04M001.SY2CLRAB[SY04WSDX] protect;
    set SY04M001.XDMCD[SY04WSDX] protect;
    set SY04M001.XDMABRV[SY04WSDX] protect;
    set SY04M001.XLCCD[SY04WSDX] protect;
    set SY04M001.XLCDESC[SY04WSDX] protect;
    SY04WCOL.SY04WSDX = SY04WCOL.SY04WSDX + 1;
  end


end // end SY04SBG

// transfer to sy02 appl.
Function SY04SBH()


       /* ***************************************/
       /* * transfer to produt change color    **/
       /* * application                        **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY02";
  XSEXIT();


end // end SY04SBH

// set screen fields protect
Function SY04SBX()


       /* ******************************************/
       /* *  set sy04M002 screen attributes to    **/
       /* *  protect. A NIL user can only change  **/
       /* *  the overlay percents.                **/
       /* ******************************************/

  /*SET SY04M002.SY04MSPP AUTOSKIP,DARK;*/
  /*SET SY04M002.SY04MSPF AUTOSKIP,DARK;*/
  /*MOVE 'N' TO SY04M002.SY04MSPF;*/
  set SY04M002.SY2CLRAB protect;
  set SY04M002.SY2CLRDS protect;
  set SY04M002.SY2BCLCD protect;
  set SY04M002.XSNYR protect;
  set SY04M002.XSECD protect;
  set SY04M002.XDVCD protect;
  set SY04M002.XPRCD protect;
  set SY04M002.XPCCD protect;
  set SY04M002.XCLCD[1] protect;
  set SY04M002.XCLCD[2] protect;
  set SY04M002.XCLCD[3] protect;
  set SY04M002.XCLCD[4] protect;
  set SY04M002.XWHCD[1] protect;
  set SY04M002.XWHCD[2] protect;
  set SY04M002.XWHCD[3] protect;
  set SY04M002.XWHCD[4] protect;
  set SY04M002.SY-DUTY-RT-CD protect;
  set SY04M002.XOGCD protect;
  set SY04M002.XDR-PROD-REG-CD protect;
  set SY04M002.SY2BOSWI protect;
  set SY04M002.SY2BOEDT protect;
  set SY04M002.SY2PKGFL protect;

end // end SY04SBX

// select color records
Function SY04SCA()


       /* ******************************************/
       /* *  GET  COLOR/DIM RECORD                **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;
  set SY2REC empty;
  set SY04WCOL empty;

  SY2REC.XGPCD = SY04M001.XGPCD;
  SY2REC.SY1STNBR = SY04M001.SY1STNBR;


  call "IO0130" ("SS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY04WCOL.SY04WCDX = 1;
    while (SQLCA.VAGen_SQLCODE == 0
     && converseVar.validationMsgNum == 0)
      SY04SCB(); /* select the next color record*/
    end
    SY04SCC(); /* close selected set*/
    SY04WCOL.SY04WCCT = SY04WCOL.SY04WCDX;
    SY04WCOL.SY04WCCT = SY04WCOL.SY04WCCT - 1;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "SS      ";
    TA1REC.TA1LOCAT[2] = "SY04SCA ";
    TA1REC.TA1LOCAT[3] = "IO0130  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY04M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1TBLKE = SY2REC.SY2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* color table error*/
    set SY04M001.SY1STNBR cursor, bold;
    exit stack;
  end


end // end SY04SCA

// select the next color record
Function SY04SCB()


       /* ******************************************/
       /* *  select the next color record.        **/
       /* *                                       **/
       /* ******************************************/

  call "IO0130" ("SN", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    if (SY2REC.XDR-PROD-REG-CD in SYWREC.XDR-PROD-REG-CD)
      SY04SCD(); /* ok, move to storage*/
    else
      /* color bypassed*/
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY04   ";
      TA1REC.TA1LOCAT[1] = "SN      ";
      TA1REC.TA1LOCAT[2] = "SY04SCB ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY04M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      SY04SCC(); /* close selected set*/
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error*/
      set SY04M001.SY1STNBR cursor, bold;
      return;
    end
  end


end // end SY04SCB

// close selected color set
Function SY04SCC()


       /* ******************************************/
       /* *  close color/dim selected set         **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;

  call "IO0130" ("CS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "CS      ";
    TA1REC.TA1LOCAT[2] = "SY04SCC ";
    TA1REC.TA1LOCAT[3] = "IO0130  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY04M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1TBLKE = SY2REC.SY2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* color table error*/
    set SY04M001.SY1STNBR cursor, bold;
    exit stack;
  end


end // end SY04SCC

// move sy2rec to work in-storage
Function SY04SCD()


       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/



  if (SYWREC.SYWTODAY >= SY2REC.SY2CEDT1)
    SY04SCE(); /* move to work instorage*/
  else
    if (SYWREC.SYWTODAY >= SY2REC.SY2CEDT2)
      SY04SCF(); /* move to work instorage*/
    else
      if (SYWREC.SYWTODAY >= SY2REC.SY2CEDT3)
        SY04SCG(); /* move to work instorage*/
      else
        if (SYWREC.SYWTODAY >= SY2REC.SY2CEDT4)
          SY04SCH(); /* move to work instorage*/
        else
          return;
        end
      end
    end
  end


end // end SY04SCD

// move xlccd1 to work in-storage
Function SY04SCE()


       /* ***************************************/
       /* *  if the user did not specify       **/
       /* *  a life cycle code to match aginst **/
       /* *  then bring back all current life  **/
       /* *  cycle code data.                  **/
       /* *  if life cycle code was specified  **/
       /* *  and the current life cycle code   **/
       /* *  matches then bring back the data  **/
       /* *  otherwise get another color record**/
       /* *                                    **/
       /* ***************************************/


  if (SY04M001.SY04MXLC == " ")
    SY04WCOL.XLCCD[SY04WCDX] = SY2REC.XLCCD1;
    SY04WCOL.SY2CLRID[SY04WCDX] = SY2REC.SY2CLRID;
    SY04WCOL.SY2CLRAB[SY04WCDX] = SY2REC.SY2CLRAB;
    SY04WCOL.XDMCD[SY04WCDX] = SY2REC.XDMCD;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
  else
    if (SY04M001.SY04MXLC == SY2REC.XLCCD1)
      SY04WCOL.XLCCD[SY04WCDX] = SY2REC.XLCCD1;
      SY04WCOL.SY2CLRID[SY04WCDX] = SY2REC.SY2CLRID;
      SY04WCOL.SY2CLRAB[SY04WCDX] = SY2REC.SY2CLRAB;
      SY04WCOL.XDMCD[SY04WCDX] = SY2REC.XDMCD;
      SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
    else
      return;
    end
  end
end // end SY04SCE

// move xlccd2 to work in-storage
Function SY04SCF()
   /* GET SY04SCE*/


       /* ***************************************/
       /* *  if the user did not specify       **/
       /* *  a life cycle code to match aginst **/
       /* *  then bring back all current life  **/
       /* *  cycle code data.                  **/
       /* *  if life cycle code was specified  **/
       /* *  and the current life cycle code   **/
       /* *  matches then bring back the data  **/
       /* *  otherwise get another color record**/
       /* *                                    **/
       /* ***************************************/


  if (SY04M001.SY04MXLC == " ")
    SY04WCOL.XLCCD[SY04WCDX] = SY2REC.XLCCD2;
    SY04WCOL.SY2CLRID[SY04WCDX] = SY2REC.SY2CLRID;
    SY04WCOL.SY2CLRAB[SY04WCDX] = SY2REC.SY2CLRAB;
    SY04WCOL.XDMCD[SY04WCDX] = SY2REC.XDMCD;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
  else
    if (SY04M001.SY04MXLC == SY2REC.XLCCD2)
      SY04WCOL.XLCCD[SY04WCDX] = SY2REC.XLCCD2;
      SY04WCOL.SY2CLRID[SY04WCDX] = SY2REC.SY2CLRID;
      SY04WCOL.SY2CLRAB[SY04WCDX] = SY2REC.SY2CLRAB;
      SY04WCOL.XDMCD[SY04WCDX] = SY2REC.XDMCD;
      SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
    else
      return;
    end
  end
end // end SY04SCF

// move xlccd3 to work in-storage
Function SY04SCG()


       /* ***************************************/
       /* *  if the user did not specify       **/
       /* *  a life cycle code to match aginst **/
       /* *  then bring back all current life  **/
       /* *  cycle code data.                  **/
       /* *  if life cycle code was specified  **/
       /* *  and the current life cycle code   **/
       /* *  matches then bring back the data  **/
       /* *  otherwise get another color record**/
       /* *                                    **/
       /* ***************************************/


  if (SY04M001.SY04MXLC == " ")
    SY04WCOL.XLCCD[SY04WCDX] = SY2REC.XLCCD3;
    SY04WCOL.SY2CLRID[SY04WCDX] = SY2REC.SY2CLRID;
    SY04WCOL.SY2CLRAB[SY04WCDX] = SY2REC.SY2CLRAB;
    SY04WCOL.XDMCD[SY04WCDX] = SY2REC.XDMCD;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
  else
    if (SY04M001.SY04MXLC == SY2REC.XLCCD3)
      SY04WCOL.XLCCD[SY04WCDX] = SY2REC.XLCCD3;
      SY04WCOL.SY2CLRID[SY04WCDX] = SY2REC.SY2CLRID;
      SY04WCOL.SY2CLRAB[SY04WCDX] = SY2REC.SY2CLRAB;
      SY04WCOL.XDMCD[SY04WCDX] = SY2REC.XDMCD;
      SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
    else
      return;
    end
  end
end // end SY04SCG

// move xlccd4 to work in-storage
Function SY04SCH()


       /* ***************************************/
       /* *  if the user did not specify       **/
       /* *  a life cycle code to match aginst **/
       /* *  then bring back all current life  **/
       /* *  cycle code data.                  **/
       /* *  if life cycle code was specified  **/
       /* *  and the current life cycle code   **/
       /* *  matches then bring back the data  **/
       /* *  otherwise get another color record**/
       /* *                                    **/
       /* ***************************************/


  if (SY04M001.SY04MXLC == " ")
    SY04WCOL.XLCCD[SY04WCDX] = SY2REC.XLCCD4;
    SY04WCOL.SY2CLRID[SY04WCDX] = SY2REC.SY2CLRID;
    SY04WCOL.SY2CLRAB[SY04WCDX] = SY2REC.SY2CLRAB;
    SY04WCOL.XDMCD[SY04WCDX] = SY2REC.XDMCD;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
  else
    if (SY04M001.SY04MXLC == SY2REC.XLCCD4)
      SY04WCOL.XLCCD[SY04WCDX] = SY2REC.XLCCD4;
      SY04WCOL.SY2CLRID[SY04WCDX] = SY2REC.SY2CLRID;
      SY04WCOL.SY2CLRAB[SY04WCDX] = SY2REC.SY2CLRAB;
      SY04WCOL.XDMCD[SY04WCDX] = SY2REC.XDMCD;
      SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
    else
      return;
    end
  end
end // end SY04SCH

// build color screen menu
Function SY04SCI()


       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/

  SY04WCOL.SY04WCDX = 1; /* reset index to 1*/
  SY04WCOL.SY04WSDX = 1;
  SY04WCOL.SY04WTOP = 1;

  while (SY04WCOL.SY04WSDX <= 12
   && SY04WCOL.SY2CLRID[SY04WCDX] != " ")
    SY04M001.SY04MSEL[SY04WSDX] = SY04WCOL.SY04WSEL[SY04WCDX];
    SY04M001.SY2CLRID[SY04WSDX] = SY04WCOL.SY2CLRID[SY04WCDX];
    SY04M001.SY2CLRAB[SY04WSDX] = SY04WCOL.SY2CLRAB[SY04WCDX];
    SY04M001.XDMCD[SY04WSDX] = SY04WCOL.XDMCD[SY04WCDX];
    SY04M001.XLCCD[SY04WSDX] = SY04WCOL.XLCCD[SY04WCDX];
    SY04SCJ(); /* retrieve dimension desc.*/
    SY04SCK(); /* retrieve life cycle desc.*/
    SY04WCOL.SY04WSDX = SY04WCOL.SY04WSDX + 1;
    SY04WCOL.SY04WTOP = SY04WCOL.SY04WTOP + 1;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
  end


end // end SY04SCI

// retrieve dimension desc.
Function SY04SCJ()


       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY04M001.XDMCD[SY04WSDX] == " ")
    return;
  else
    /* next sentence*/
  end

  if (SY04M001.XDMCD[SY04WSDX] in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M001.XDMABRV[SY04WSDX] = XDMTBL.XDMABRV[sysVar.arrayIndex];
    else
      SY04M001.XDMABRV[SY04WSDX] = XDMTBL.XDMABRV[sysVar.arrayIndex];
    end
  else
    set SY04M001.XDMCD cursor, bold;
    SY04M001.XDMABRV[SY04WSDX] = "INVALID ";
  end

end // end SY04SCJ

// retrieve life cycle desc.
Function SY04SCK()


       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY04M001.XLCCD[SY04WSDX] == " ")
    return;
  else
    /* next sentence*/
  end

  if (SY04M001.XLCCD[SY04WSDX] in XLCTBL.XLCCD)
    if (XLCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M001.XLCDESC[SY04WSDX] = XLCTBL.XLCDESC[sysVar.arrayIndex];
    else
      SY04M001.XLCDESC[SY04WSDX] = XLCTBL.XLCDESC[sysVar.arrayIndex];
    end
  else
    set SY04M001.XLCCD cursor, bold;
    SY04M001.XLCDESC[SY04WSDX] = "INVALID ";
  end

end // end SY04SCK

// check pf keys
Function SY04SDA()


       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY04M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY04M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY04SBA(); /* transfer to sy0m application*/
        SY04M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY04M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY04M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY04M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is pf13)
            SYWREC.SYWPFOPT = " ";
            COMMAREA.CAUSERA = SYWREC.SYWTRANF;
            SY04SBC(); /* transfer to sy04 color menu application*/
            SY04M001.SYMSCMSG = COMMAREA.CAMSG;
            set SY04M001 alarm;
            converseLib.validationFailed(1);
            exit stack;
          else
            if (converseVar.eventKey is pf14)
              SYWREC.SYWPFOPT = "PF14 ";
              COMMAREA.CAUSERA = SYWREC.SYWTRANF;
              SY04SBC(); /* transfer to sy04 color menu application*/
              SY04M001.SYMSCMSG = COMMAREA.CAMSG;
              set SY04M001 alarm;
              converseLib.validationFailed(1);
              exit stack;
            else
              if (converseVar.eventKey is pf16)
                SYWREC.SYWPFOPT = " ";
                COMMAREA.CAUSERA = SYWREC.SYWTRANF;
                SY04SBH(); /* transfer to sy04 color menu application*/
                SY04M001.SYMSCMSG = COMMAREA.CAMSG;
                set SY04M001 alarm;
                converseLib.validationFailed(1);
                exit stack;
              else
                if (converseVar.eventKey is pf17)
                  SYWREC.SYWPFOPT = " ";
                  COMMAREA.CAUSERA = SYWREC.SYWTRANF;
                  SY04SBF(); /* transfer to sy03 chg. size*/
                                   /* application*/
                  SY04M001.SYMSCMSG = COMMAREA.CAMSG;
                  set SY04M001 alarm;
                  converseLib.validationFailed(1);
                  exit stack;
                else
                  if (converseVar.eventKey is enter
                   || converseVar.eventKey is pf7
                   || converseVar.eventKey is pf8)
                    return;
                  else
                    exit stack;
                  end
                end
              end
            end
          end
        end
      end
    end
  end




end // end SY04SDA

// process pf7
Function SY04SDB()


       /* ***************************************/
       /* * check to see if the user selected  **/
       /* * a color record                     **/
       /* ***************************************/

  if (SY04WCOL.SY04WCDX < 13)
    converseLib.validationFailed(69);
                                   /* you are at the beginning for scolling*/
    exit stack;
  else
    /* next sentence*/
  end


  SY04SDE(); /* move selected item  to working*/
                                   /* storage*/
  SY04SDF(); /* clear screen contents*/

       /* ***************************************/
       /* *  pf7 scroll backwards from the top **/
       /* *  of the screen.                    **/
       /* ***************************************/

  if (SY04WCOL.SY04WTOP < 12)
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX - SY04WCOL.SY04WTOP;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX - 11;
  else
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX - 24;
  end

  if (SY04WCOL.SY04WCDX <= 12)
    SY04WCOL.SY04WCDX = 1;
  else
    /* next sentence*/
  end

  SY04WCOL.SY04WSDX = 1;
  SY04WCOL.SY04WTOP = 1;

  while (SY04WCOL.SY04WSDX <= 12
   && SY04WCOL.SY2CLRID[SY04WCDX] != " ")
    SY04M001.SY04MSEL[SY04WSDX] = SY04WCOL.SY04WSEL[SY04WCDX];
    SY04M001.SY2CLRID[SY04WSDX] = SY04WCOL.SY2CLRID[SY04WCDX];
    SY04M001.SY2CLRAB[SY04WSDX] = SY04WCOL.SY2CLRAB[SY04WCDX];
    SY04M001.XDMCD[SY04WSDX] = SY04WCOL.XDMCD[SY04WCDX];
    SY04M001.XLCCD[SY04WSDX] = SY04WCOL.XLCCD[SY04WCDX];
    SY04SCJ(); /* retrieve dimension desc.*/
    SY04SCK(); /* retrieve life cycle desc.*/
    SY04WCOL.SY04WSDX = SY04WCOL.SY04WSDX + 1;
    SY04WCOL.SY04WTOP = SY04WCOL.SY04WTOP + 1;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
  end

  if (SY04WCOL.SY04WCDX == 13)
    SY04WCOL.SY04WTOP = SY04WCOL.SY04WTOP - 1;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX - 1;
  else
    /* next sentence*/
  end

  exit stack;

end // end SY04SDB

// process pf8
Function SY04SDC()


       /* ***************************************/
       /* * check to see if the user selected  **/
       /* * a color record                     **/
       /* ***************************************/

  if (SY04WCOL.SY04WCDX > SY04WCOL.SY04WCCT) /* no more records avail.*/
    converseLib.validationFailed(70); /* you are at the end for scrolling*/
    exit stack;
  else
    /* next sentence*/
  end

  SY04SDE(); /* move selected item  to working*/
                                   /* storage*/
  SY04SDF(); /* clear lower half of screen*/


       /* ***************************************/
       /* * scroll forward                     **/
       /* *                                    **/
       /* ***************************************/


  SY04WCOL.SY04WSDX = 1;
  SY04WCOL.SY04WTOP = 1;

  while (SY04WCOL.SY04WSDX <= 12
   && SY04WCOL.SY2CLRID[SY04WCDX] != " ")
    SY04M001.SY04MSEL[SY04WSDX] = SY04WCOL.SY04WSEL[SY04WCDX];
    SY04M001.SY2CLRID[SY04WSDX] = SY04WCOL.SY2CLRID[SY04WCDX];
    SY04M001.SY2CLRAB[SY04WSDX] = SY04WCOL.SY2CLRAB[SY04WCDX];
    SY04M001.XDMCD[SY04WSDX] = SY04WCOL.XDMCD[SY04WCDX];
    SY04M001.XLCCD[SY04WSDX] = SY04WCOL.XLCCD[SY04WCDX];
    SY04SCJ(); /* retrieve dimension desc.*/
    SY04SCK(); /* retrieve life cycle desc.*/
    SY04WCOL.SY04WSDX = SY04WCOL.SY04WSDX + 1;
    SY04WCOL.SY04WTOP = SY04WCOL.SY04WTOP + 1;
    SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
  end

  exit stack;

end // end SY04SDC

// process enter
Function SY04SDD()


       /* ***************************************/
       /* *  check screen to see if the user   **/
       /* *  wants to select all the colors    **/
       /* *  or only a few before processing   **/
       /* *  change colors.                    **/
       /* ***************************************/

  if (SY04WCOL.SY04WSEL[1] == "A")
    exit stack;
  else
    SY04SDE();
  end


end // end SY04SDD

// check for selected color
Function SY04SDE()

       /* ***************************************/
       /* * check to see if the user selected  **/
       /* * a color record                     **/
       /* ***************************************/

  SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX - SY04WCOL.SY04WTOP;
  SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;


  SY04WCOL.SY04WSDX = 1;

  while (SY04WCOL.SY04WSDX <= 12
   && SY04WCOL.SY2CLRID[SY04WCDX] != " ")
    if (SY04M001.SY04MSEL[SY04WSDX] == " ")
      SY04WCOL.SY04WSDX = SY04WCOL.SY04WSDX + 1;
      SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
    else
      SY04WCOL.SY04WSEL[SY04WCDX] = SY04M001.SY04MSEL[SY04WSDX];
      SY04WCOL.SY04WSDX = SY04WCOL.SY04WSDX + 1;
      SY04WCOL.SY04WCDX = SY04WCOL.SY04WCDX + 1;
    end
  end



end // end SY04SDE

// clear sy04m001 lower half
Function SY04SDF()

       /* ***************************************/
       /* *  clear sy04m001 lower screen       **/
       /* *  cleared.                          **/
       /* ***************************************/

  SY04WCOL.SY04WSDX = 1;

  while (SY04WCOL.SY04WSDX <= 12)
    SY04M001.SY04MSEL[SY04WSDX] = " ";
    SY04M001.SY2CLRID[SY04WSDX] = " ";
    SY04M001.SY2CLRAB[SY04WSDX] = " ";
    SY04M001.XDMCD[SY04WSDX] = " ";
    SY04M001.XDMABRV[SY04WSDX] = " ";
    SY04M001.XLCCD[SY04WSDX] = " ";
    SY04M001.XLCDESC[SY04WSDX] = " ";
    SY04WCOL.SY04WSDX = SY04WCOL.SY04WSDX + 1;
  end


end // end SY04SDF

// process all color records
Function SY04SEA()



       /* ***************************************/
       /* * read seq. thru working storage     **/
       /* * and process all color records      **/
       /* ***************************************/


   /* IF SY04WCOL.SY04WSEL(1) EQ 'A';*/
    /* ;next sentence*/
   /* ELSE ;*/
    /* MOVE ' ' TO SY04WCOL.SY04WSEL(SY04WCDX);*/
   /* END ;*/

  SY2REC.SY2CLRID = SY04WCOL.SY2CLRID[SY04WCDX];
  SY2REC.XDMCD = SY04WCOL.XDMCD[SY04WCDX];
  SY2REC.SY1STNBR = SY04M001.SY1STNBR;
  SY2REC.XGPCD = SY04M001.XGPCD;




       /* ***************************************/
       /* * compare working storage colors to  **/
       /* * total colors. if at end of working **/
       /* * storage colors ezeflo, you are done**/
       /* * processing colors.                 **/
       /* ***************************************/

  if (SY04WCOL.SY04WCDX > SY04WCOL.SY04WCCT)
    SY04SDF(); /* clear lower half of screen.*/
    converseLib.validationFailed(11);
    SY04WCOL.SY04WMSU = " ";
    SY04WCOL.SY04WMS3 = SY04WCOL.SY04WUPD; /* update color msg. area*/
    SY04WCOL.SY04WMS9 = " ** ";
    SY04WCOL.SY04WMS4 = "TOTAL COLOR RECORDS UPDATED - ";
    if (SY04M001.XGPCD == "03")
      SY04WCOL.SY04W-SPF-LIT = "SEASONAL RECORDS CREATED - ";
      SY04WCOL.SY04W-SPF-CNT = SYWREC.SYWINDXA;
    end
    SY04M001.SYMSCMSG = SY04WCOL.SY04WMSU;
    set SY04M001.SY1STNBR cursor, normal;
    set SY04M001.SY2CLRID normal;
    set SY04M001.XDMCD normal;
    set SY04M001.XGPCD normal;
    exit stack;
  else
    /* next sentence*/
  end

  SY04WCOL.SY04WCDX = SY04WCDX + 1;


end // end SY04SEA

// process selected color rec.
Function SY04SEB()


       /* ***************************************/
       /* * process only the selected color    **/
       /* * records                            **/
       /* ***************************************/

  SY04WCOL.SY04WCDX = 1;

  while (SY04WCOL.SY04WSEL[SY04WCDX] == " "
   && SY04WCOL.SY04WCDX <= 200
   && SY04WCOL.SY2CLRID[SY04WCDX] != " ")
    SY04WCOL.SY04WCDX = SY04WCDX + 1;
  end


       /* ***************************************/
       /* * compare working storage colors to  **/
       /* * total colors. if at end of working **/
       /* * storage colors ezeflo, you are done**/
       /* * processing colors.                 **/
       /* ***************************************/

  if (SY04WCOL.SY04WCDX > SY04WCOL.SY04WCCT)
    SY04SDF();
    converseLib.validationFailed(11);
    SY04WCOL.SY04WMSU = " ";
    SY04WCOL.SY04WMS3 = SY04WCOL.SY04WUPD; /* update color msg. area*/
    SY04WCOL.SY04WMS9 = " ** ";
    SY04WCOL.SY04WMS4 = "TOTAL COLOR RECORDS UPDATED -";
  /*  IF SY04M001.XGPCD EQ '03';*/
  /*    MOVE 'SEASONAL RECORDS CREATED - ' TO SY04WCOL.SY04W-SPF-LIT;*/
  /*    MOVE SYWREC.SYWINDXA TO SY04WCOL.SY04W-SPF-CNT;*/
  /*  END;*/
    SY04M001.SYMSCMSG = SY04WCOL.SY04WMSU;
    set SY04M001.SY1STNBR cursor, normal;
    set SY04M001.SY2CLRID normal;
    set SY04M001.XDMCD normal;
    set SY04M001.XGPCD normal;
    exit stack;
  else
    /* next sentence*/
  end


   /* MOVE ' ' TO SY04WCOL.SY04WSEL(SY04WCDX);*/
  SY2REC.SY2CLRID = SY04WCOL.SY2CLRID[SY04WCDX];
  SY2REC.XDMCD = SY04WCOL.XDMCD[SY04WCDX];
  SY2REC.SY1STNBR = SY04M001.SY1STNBR;
  SY2REC.XGPCD = SY04M001.XGPCD;


end // end SY04SEB

// get color data
Function SY04SEC()


       /* ******************************************/
       /* *  GET  COLOR/DIM RECORD                **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;

  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    move SY2REC to SY04M002 withV60Compat;
    SY04M002.XPLCD = SY2REC.XPLCD;
    SY04M002.SY1BSTNB = SY1REC.SY1BSTNB;
    SYEREC.SY2DATA = SY2REC.SY2DATA;
    SYWREC.XGPCD = SY2REC.XGPCD;
    if (SY2REC.XGPCD == "02")
      SY04M002.XCLCD[1] = SY2REC.XCLCD1;
      SY04M002.XCLCD[2] = SY2REC.XCLCD4;
      SY04M002.XCLCD[3] = SY2REC.XCLCD2;
      SY04M002.XCLCD[4] = SY2REC.XCLCD3;
    else
      SY04M002.XCLCD[1] = SY2REC.XCLCD1;
      SY04M002.XCLCD[2] = SY2REC.XCLCD2;
      SY04M002.XCLCD[3] = SY2REC.XCLCD3;
      SY04M002.XCLCD[4] = SY2REC.XCLCD4;
    end
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "S       ";
    TA1REC.TA1LOCAT[2] = "SY04SEC ";
    TA1REC.TA1LOCAT[3] = "IO0130  ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY04M002";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VCOLOR01";
    TA1TBLKE = SY2REC.SY2KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(21); /* color table error*/
    set SY04M002.SY2CLRID cursor, bold;
    exit stack;
  end


end // end SY04SEC

// retrieve color desc.
Function SY04SED()


       /* ********************************************/
       /* * GET BLANK COLOR DESC.                   **/
       /* ********************************************/

  SY04SEP();


       /* ********************************************/
       /* * GET Root Style DESC.                    **/
       /* ********************************************/

  SY04SFU();
  if (converseVar.validationMsgNum == 5) /* root style not found*/
    SY04M002.SY04MRSN = "UNKNOWN"; /* set name*/
    converseLib.validationFailed(0); /* and reset msgno*/
  end

       /* ********************************************/
       /* * GET MATERIAL CONTENT UPPER CODE DESC.   **/
       /* ********************************************/

  SY04SEF();

       /* ********************************************/
       /* *    GET DEVELOPMENT CODE DESC.           **/
       /* ********************************************/

  SY04S-VAL-XDR();

       /* ********************************************/
       /* *    GET OPTIONAL GROUP CODE DESC.        **/
       /* ********************************************/

  SY04SEG();

       /* ********************************************/
       /* *    GET WAREHOUSE CODES DESC.            **/
       /* ********************************************/

  SY04SFV();

       /* ********************************************/
       /* *   GET COLOR CODE 4 DESC.                **/
       /* ********************************************/

  SY04SFW();

       /* ********************************************/
       /* *   GET COLOR CODE 3 DESC.                **/
       /* ********************************************/

  SY04SEH();

       /* ********************************************/
       /* *   GET COLOR CODE 2 DESC.                **/
       /* ********************************************/
  SY04SEI();

       /* ********************************************/
       /* *    GET COLOR CODE 1 DESC.               **/
       /* ********************************************/

  SY04SEJ();

       /* ********************************************/
       /* *   GET PRODUCT TYPE CODE DESC.           **/
       /* ********************************************/

  SY04SEK();

       /* ********************************************/
       /* *    GET DIVISION CODE DESC.              **/
       /* ********************************************/

  SY04SEL();

       /* ********************************************/
       /* *    GET SEASON CODE DESC.                **/
       /* ********************************************/

  SY04SEM();

       /* ********************************************/
       /* *    GET DIMENSION CODE AND DESC.         **/
       /* ********************************************/

  SY04SEN();

       /* ********************************************/
       /* *   GET PRODUCT category code desc.       **/
       /* ********************************************/

  SY04SEO();


       /* ********************************************/
       /* *   GET PRODUCT Line code desc.       **/
       /* ********************************************/

  SY04SEQ();

      /* ** format backorder date for screen sy04m002.  ***/

  SYWREC.SYWTODCK = SY04M002.SY2BOEDT;

  SYWREC.SYWBKDMM = SYWREC.SYWTODMM;
  SYWREC.SYWBKDDD = SYWREC.SYWTODDD;
  SYWREC.SYWBKDYY = SYWREC.SYWTODYY;
  SY04M002.SY2BOEDT = SYWREC.SYWBKMAP;


end // end SY04SED

// verify mat. content upper cd.
Function SY04SEF()

       /* ******************************************/
       /* *  VERIFY four material content codes   **/
       /* *  and get their descriptions           **/
       /* ******************************************/

  if (SY04M002.XMCCD1 != "  ")
    if (SY04M002.XMCCD1 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY04M002.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        SY04M002.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        set SY04M002.XMCCD1 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
      end
    else
      set SY04M002.XMCCD1 cursor, bold;
      SY04M002.XMCSDESC = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY04M002.XMCCD2 != "  ")
    if (SY04M002.XMCCD2 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY04M002.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        SY04M002.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        set SY04M002.XMCCD2 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
      end
    else
      set SY04M002.XMCCD2 cursor, bold;
      SY04M002.XMCSDESC = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY04M002.XMCCD3 != "  ")
    if (SY04M002.XMCCD3 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY04M002.XMCSDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        SY04M002.XMCSDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        set SY04M002.XMCCD3 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
      end
    else
      set SY04M002.XMCCD3 cursor, bold;
      SY04M002.XMCSDESC = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY04M002.XMCCD4 != "  ")
    if (SY04M002.XMCCD4 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY04M002.XMCSDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        SY04M002.XMCSDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        set SY04M002.XMCCD4 cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
      end
    else
      set SY04M002.XMCCD4 cursor, bold;
      SY04M002.XMCSDESC = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


end // end SY04SEF

// verify optional group code
Function SY04SEG()

       /* ******************************************/
       /* *  VERIFY OPTIONAL GROUP CODE AND GET   **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY04M002.XOGCD == "  ")
    return;
  else
    /* next sentence*/
  end

  if (SY04M002.XOGCD in XOGTBL.XOGCD)
    if (XOGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex];
    else
      SY04M002.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex];
      set SY04M002.XOGCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    set SY04M002.XOGCD cursor, bold;
    SY04M002.XOGABRV = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY04SEG

// verify tertiary color code
Function SY04SEH()

       /* ******************************************/
       /* *  VERIFY TERTIARY COLOR CODE AND       **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  if (SY04M002.XCLCD[3] == "  ")
    SY04M002.XCLCD[3] = "000";
  end

  if (SY04M002.XCLCD[3] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY04M002.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY04M002.XCLCD[3] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XCLCD[3] cursor, bold;
    SY04M002.XCLABRV[3] = "INVALID";
  end

end // end SY04SEH

// verify secondary color code
Function SY04SEI()

       /* ******************************************/
       /* *  VERIFY SECONDARY COLOR CODE AND GET  **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY04M002.XCLCD[2] == "  ")
    SY04M002.XCLCD[2] = "000";
  end

  if (SY04M002.XCLCD[2] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XCLABRV[2] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY04M002.XCLABRV[2] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY04M002.XCLCD[2] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XCLCD[2] cursor, bold;
    SY04M002.XCLABRV[2] = "INVALID";
  end

end // end SY04SEI

// verify primary color code
Function SY04SEJ()


       /* ******************************************/
       /* *  verify primary color code and        **/
       /* *  get the description.                 **/
       /* ******************************************/

  if (SY04M002.XCLCD[1] == "  ")
    SY04M002.XCLCD[1] = "000";
  end

  if (SY04M002.XCLCD[1] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY04M002.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY04M002.XCLCD[1] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XCLCD[1] cursor, bold;
    SY04M002.XCLABRV[1] = "INVALID";
  end

end // end SY04SEJ

// VERIFY PRODUCT TYPE CODE
Function SY04SEK()

       /* ******************************************/
       /* *  VERIFY PRODUCT TYPE CODE AND GET     **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY04M002.XPRCD == " ")
    return;
  end

  if (SY04M002.XPRCD in XPRTBL.XPRCD)
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
    else
      SY04M002.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
      set SY04M002.XPRCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    set SY04M002.XPRCD cursor, bold;
    SY04M002.XPRDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY04SEK

// VERIFY DIVISION CODE
Function SY04SEL()

       /* ******************************************/
       /* *  VERIFY DIVISION CODE AND GET         **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY04M002.XDVCD == "99")
    return;
  else
    /* next sentence*/
  end

  if (SY04M002.XDVCD in XDVTBL.XDVCD)
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    else
      SY04M002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      set SY04M002.XDVCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    set SY04M002.XDVCD cursor, bold;
    SY04M002.XDVDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY04SEL

// VERIFY SEASON CODE
Function SY04SEM()

       /* ******************************************/
       /* *  VERIFY SEASON CODE AND GET           **/
       /* *  THE DESC.                            **/
       /* ******************************************/


  if (SY04M002.XSECD in XSETBL.XSECD)
    SY04M002.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
  else
    set SY04M002.XSECD cursor, bold;
    SY04M002.XSEDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY04SEM

// verify dimension code
Function SY04SEN()

       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY04M002.XDMCD == " ")
    return;
  else
    /* next sentence*/
  end

  if (SY04M002.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    else
      SY04M002.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      set SY04M002.XDMCD cursor, bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    set SY04M002.XDMCD cursor, bold;
    SY04M002.XDMDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY04SEN

// VERIFY PRODUCT category code
Function SY04SEO()

       /* ******************************************/
       /* *  VERIFY PRODUCT category code and get **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY04M002.XPCCD == "  "
   && SY04M002.XGPCD != "03")
    converseLib.validationFailed(245);
    set SY04M002.XPCCD cursor, bold;
    SY04M002.XPCDESC = "INVALID";
    return;
  else
    if (SY04M002.XPCCD == "  ")
      return;
    end
  end

  SYWREC.SYWINDEX = 1;

  while (XPCTBL.XPCCD[SYWINDEX] != "99")
    if (SYWREC.XGPCD == XPCTBL.XGPCD[SYWINDEX]
     && SY04M002.XPCCD == XPCTBL.XPCCD[SYWINDEX])
      if (XPCTBL.XXXSTAT[SYWINDEX] == "A")
        SY04M002.XPCDESC = XPCTBL.XPCDESC[SYWINDEX];
        return;
      else
        SY04M002.XPCDESC = "INACTIVE";
        set SY04M002.XPCCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end

  set SY04M002.XPCCD cursor, bold;
  SY04M002.XPCDESC = "INVALID";
  converseLib.validationFailed(3); /* invalid code*/


end // end SY04SEO

// Get Blank Style/Color
Function SY04SEP()

  if (SY04M002.SY2BCLCD == " ")
    SY04M002.SY04MBCN = " ";
    return;
  end

  SY04W01.SY2DATA = SY2REC.SY2DATA;
  set SY2REC empty;
  set SQLCA empty;
  SY2REC.XGPCD = SY04M002.XGPCD;
  SY2REC.SY1STNBR = SY1REC.SY1BSTNB;
  SY2REC.SY2CLRID = SY04M002.SY2BCLCD;
  SY2REC.XDMCD = SY04M002.XDMCD;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    SY04M002.SY04MBCN = SY2REC.SY2CLRDS;
    SY2REC.SY2DATA = SY04W01.SY2DATA;
  else
    SY2REC.SY2DATA = SY04W01.SY2DATA;
    if (SQLCA.VAGen_SQLCODE == 100)
      SY04M002.SY04MBCN = " ";
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY04";
      TA1REC.TA1LOCAT[1] = "S";
      TA1REC.TA1LOCAT[2] = "SY04SFT";
      TA1REC.TA1MAP = "SY04M002";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20);
      set SY04M002.SY2BCLCD cursor, bold;
      exit stack;
    end
  end

end // end SY04SEP

Function SY04SEQ()
       /* ******************************************/
       /* *  VERIFY PRODUCT Line code and get **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/


  if (SY04M002.XPLCD == "  " /*verify line is blank for*/
   && SY04M002.XGPCD != "03") /* GPC 01, 02, or 04*/
    converseLib.validationFailed(243);
    set SY04M002.XPLCD cursor, bold;
    SY04M002.XPLDESC = "INVALID";
    return;
  else
    if (SY04M002.XPLCD == "  ") /*verify line is blank for GPC 03*/
      return;
    end
  end

  SYWREC.SYWINDEX = 1;
   /**/
  while (XPLTBL.XPLCD[SYWINDEX] != "99")
    if (SYWREC.XGPCD == XPLTBL.XGPCD[SYWINDEX]
     && SY04M002.XPLCD == XPLTBL.XPLCD[SYWINDEX])
      if (XPLTBL.XXXSTAT[SYWINDEX] == "A")
        SY04M002.XPLDESC = XPLTBL.XPLDESC[SYWINDEX];
        return;
      else
        SY04M002.XPLDESC = "INACTIVE";
        set SY04M002.XPLCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end


  set SY04M002.XPLCD cursor, bold;
  SY04M002.XPLDESC = "INVALID";
  converseLib.validationFailed(244); /* invalid Product line code*/

end // end SY04SEQ

// check pf keys & transfer
Function SY04SFA()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY04M002.SYMSCMSG = COMMAREA.CAMSG;
      set SY04M002 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf4)
        XSPF4();
        SY04M002.SYMSCMSG = COMMAREA.CAMSG;
        set SY04M002 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is enter
         || converseVar.eventKey is pf3
         || converseVar.eventKey is pf12
         || converseVar.eventKey is pf13
         || converseVar.eventKey is pf14
         || converseVar.eventKey is pf15
         || converseVar.eventKey is pf17)
          return;
        else
          exit stack;
        end
      end
    end
  end


end // end SY04SFA

// set screen att. normal
Function SY04SFB()


       /* ******************************************/
       /* *  set sy04m002 screen attributes to    **/
       /* *  normal                               **/
       /* ******************************************/


  set SY04M002.XGPCD normal;
  set SY04M002.SY1STNBR normal;
  set SY04M002.SY2CLRID normal;
  /*IF SY04M001.XGPCD EQ '03';*/
  /*  SET SY04M002.SY04MSPF NORMAL;*/
  /*END;*/
  set SY04M002.SY2CLRAB normal;
  set SY04M002.SY2CLRDS normal;
  set SY04M002.SY2RSTNB normal;
  set SY04M002.SY2BCLCD normal;
  set SY04M002.XDMCD normal;
  set SY04M002.XSECD normal;
  set SY04M002.XDVCD normal;
  set SY04M002.XPRCD normal;
  set SY04M002.XPCCD normal;
  set SY04M002.XPLCD normal;
  set SY04M002.XCLCD[1] normal;
  set SY04M002.XCLCD[2] normal;
  set SY04M002.XCLCD[3] normal;
  set SY04M002.XCLCD[4] normal;
  set SY04M002.XWHCD[1] normal;
  set SY04M002.XWHCD[2] normal;
  set SY04M002.XWHCD[3] normal;
  set SY04M002.XWHCD[4] normal;
  set SY04M002.SY-DUTY-RT-CD normal;
  set SY04M002.XOGCD normal;
  set SY04M002.XDR-PROD-REG-CD normal;
  set SY04M002.XMCCD1 normal;
  set SY04M002.XMCCD2 normal;
  set SY04M002.XMCCD3 normal;
  set SY04M002.XMCCD4 normal;
  set SY04M002.SY2MCP1 normal;
  set SY04M002.SY2MCP2 normal;
  set SY04M002.SY2MCP3 normal;
  set SY04M002.SY2MCP4 normal;
  set SY04M002.SY2BOSWI normal;
  set SY04M002.SY2BOEDT normal;
  set SY04M002.SY2PKGFL normal;

  SY04M002.SYMSCMSG = " ";

end // end SY04SFB

// validate sy02m001 screen
Function SY04SFC()


      /* ** validate backorder date ***/

  SYWREC.SYWBKMAP = SY04M002.SY2BOEDT;
  if (SYWREC.SYWBKDYY < 60)
    SYWREC.SYWBKDCC = 20;
  else
    SYWREC.SYWBKDCC = 19;
  end

       /* **** move backorder date to work in storage*/
       /* **** field, and then move them again*/
       /* **** so that the dates can be compared.*/

  SYWREC.SYWTODMM = SYWREC.SYWBKDMM;
  SYWREC.SYWTODDD = SYWREC.SYWBKDDD;
  SYWREC.SYWTODYY = SYWREC.SYWBKDYY;
  SYWREC.SYWTODCC = SYWREC.SYWBKDCC;

  if (SYWREC.SYWTODCK == SYEREC.SY2BOEDT)
    SYWREC.SYWBKDHL = SYWREC.SYWTODCK;
  else
    if (SYWREC.SYWTODCK >= SYWREC.SYWTODAY) /* check for input date gt today*/
      TA2REC.TA2GRGGN = SYWREC.SYWTODCK; /* if date gt today is it valid*/
      TA2REC.TA2GRTYP = "G";
      TA2REC.TA2DTOPT = "GREGGREG";

      SY04SAB();
      if (TA2REC.TA2RTNCD == 0)
        SYWREC.SYWBKDHL = SYWREC.SYWTODCK; /* this is a backorder hold date*/
      else
        if (TA2REC.TA2RTNCD == 00222)
          converseLib.validationFailed(30); /* invalid date*/
          set SY04M002.SY2BOEDT cursor, bold;
        else
          converseLib.validationFailed(42);
          set SY04M002.SY2BOEDT cursor, bold;
        end
      end
    else
      converseLib.validationFailed(30);
      set SY04M002.SY2BOEDT cursor, bold;
    end
  end


     /* *** validate backorder switch*/

  if (SY04M002.SY2BOSWI == "Y"
   || SY04M002.SY2BOSWI == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(36); /* enter a 'y' or 'n'*/
    set SY04M002.SY2BOSWI cursor, bold;
  end


     /* *** validate package flag*/

  if (SY04M002.SY2PKGFL == "Y")
    if (SY1REC.XUMCD == "01")
      converseLib.validationFailed(153); /* package flag must be n*/
      set SY04M002.SY2PKGFL cursor, bold;
    end
  else
    if (SY04M002.SY2PKGFL != "N")
      converseLib.validationFailed(36); /* enter a 'y' or 'n'*/
      set SY04M002.SY2PKGFL cursor, bold;
    end
  end


       /* ******************************************/
       /* *  validate and retrieve the codes for  **/
       /* *  sy0bm005 screen                      **/
       /* ******************************************/

  SY04SFF();


  if (SY04M002.SY2CLRAB == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY04M002.SY2CLRAB cursor, bold;
  else
    /* next sentence*/
  end

  if (SY04M002.SY2CLRDS == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY04M002.SY2CLRDS cursor, bold;
  else
    /* next sentence*/
  end


end // end SY04SFC

// if changes update color
Function SY04SFD()


       /* ***************************************/
       /* *  check if changes made. if no      **/
       /* *  changes return, else update color.**/
       /* *  Update region if fields changed.  **/
       /* ***************************************/

   /* set up zzz family record for adds/updates*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  SY04SAB();
  SYWREC.ZZZSDT = TA2REC.TA2GRGGN;
  SYWREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  SYWREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  /*IF SY04M002.SY04MSPF EQ 'Y';     /* user requests seasonal*/
  /*  SY04SPF();                     /* so do it*/
  /*END;*/

  move SY04M002 to SY2REC withV60Compat;
  if (SY2REC.XGPCD == "02")
    SY2REC.XCLCD1 = SY04M002.XCLCD[1];
    SY2REC.XCLCD4 = SY04M002.XCLCD[2];
    SY2REC.XCLCD2 = SY04M002.XCLCD[3];
    SY2REC.XCLCD3 = SY04M002.XCLCD[4];
  else
    SY2REC.XCLCD1 = SY04M002.XCLCD[1];
    SY2REC.XCLCD2 = SY04M002.XCLCD[2];
    SY2REC.XCLCD3 = SY04M002.XCLCD[3];
    SY2REC.XCLCD4 = SY04M002.XCLCD[4];
  end
  SY2REC.SY2BOEDT = SYWREC.SYWBKDHL; /* moves valid formated dt*/

  if (SYEREC.SY2DATA != SY2REC.SY2DATA)
    /* next sentence*/
  else
    converseLib.validationFailed(57);
    SYWREC.SYWMSGFL = "Y";
    return;
  end

       /* ***************************************/
       /* *  if season or season-year changed, **/
       /* *  update offering ending dates,     **/
       /* *  update all regions for this color **/
       /* ***************************************/

  if (SYEREC.XSECD == SY2REC.XSECD
   && SYEREC.XSNYR == SY2REC.XSNYR)
    /* next sentence*/
  else
    if (SY2REC.XGPCD == "03") /* for apparel only,*/
      SY04SGA(); /* update offering ending dates*/
    end
  end

  if (SYEREC.XSECD == SY2REC.XSECD
   && SYEREC.XSNYR == SY2REC.XSNYR
   && SYEREC.XPRCD == SY2REC.XPRCD)
    /* next sentence*/
  else
    SY04S-GET-SYREG(); /* update all regions for this color*/
  end


       /* ***********************************************       */
       /* *   IF LINE CODE CHANGED, VERIFY   **/
       /* *   LINE CODE VALUE IS VALID             **/
       /* ************************************************/
  /*     */
  if (SYEREC.XPLCD != SY2REC.XPLCD) /* if line code changed*/
    SY04SEQ(); /* verify line code is valid*/
  end

       /* ******************************************/
       /* *   ADD COLOR RECORD TO COLOR TABLE     **/
       /* ******************************************/

  SY04SFP();

       /* ******************************************/
       /* *   CHECK FOR SIZE UPDATE               **/
       /* ******************************************/

  if (SY2REC.XDVCD != SYEREC.XDVCD /* Division has changed*/
   && SY2REC.XGPCD != "03")        /* and not Apparel*/
    SY04S-CHK-SIZE(); /* So check on size*/
  end


       /* ******************************************/
       /* *   commit style/color/size records     **/
       /* *   to their tables.                    **/
       /* ******************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  converseLib.validationFailed(11);
  SYWREC.SYWMSGFL = "Y";

end // end SY04SFD

// transfer after updated
Function SY04SFE()


       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf13)
      SYWREC.SYWPFOPT = " ";
      COMMAREA.CAUSERA = SYWREC.SYWTRANF;
      SY04SBC(); /* transfer to sy04 color menu application*/
      SY04M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY04M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf14)
        SYWREC.SYWPFOPT = "PF14 ";
        COMMAREA.CAUSERA = SYWREC.SYWTRANF;
        SY04SBC(); /* transfer to sy04 color menu application*/
        SY04M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY04M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf17)
          SYWREC.SYWPFOPT = " ";
          COMMAREA.CAUSERA = SYWREC.SYWTRANF;
          SY04SBF(); /* transfer to sy03 chg. size*/
                                   /* application*/
          SY04M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY04M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          exit stack;
        end
      end
    end
  end


end // end SY04SFE

// validate sy04m002 codes
Function SY04SFF()


       /* ********************************************/
       /* * VALIDATE SEASONAL FLAG                  **/
       /* ********************************************/

  /*IF SY04M002.XGPCD NE '03';*/
  /*  MOVE 'N' TO SY04M002.SY04MSPF;*/
  /*ELSE;*/
  /*  IF SY04M002.SY04MSPF NE 'Y'*/
  /*    AND SY04M002.SY04MSPF NE 'N';*/
  /*    MOVE 36 TO EZEMNO;           /* VALUE MUST BE Y OR N*/
  /*    SET SY04M002.SY04MSPF CURSOR,BRIGHT;*/
  /*  END;*/
  /*END;*/

       /* ********************************************/
       /* * GET MATERIAL CONTENT UPPER CODE DESC.   **/
       /* ********************************************/

  SY04SFG();

       /* ********************************************/
       /* *    GET DEVELOPEMTN REGION CODE DESC.    **/
       /* ********************************************/

  SY04S-VAL-XDR();

       /* ********************************************/
       /* *    GET OPTIONAL GROUP CODE DESC.        **/
       /* ********************************************/

  SY04SFH();

       /* ********************************************/
       /* *    VALIDATE DUTY RATE CODE.             **/
       /* ********************************************/

  if (SY04M002.SY-DUTY-RT-CD != "  ")
    VDTYRT01.SY-DUTY-RT-CD = SY04M002.SY-DUTY-RT-CD;
    call "IO6320" ("S ", SQLCA, VDTYRT01) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(3); /* Invalid Code*/
      set SY04M002.SY-DUTY-RT-CD cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY04";
        TA1REC.TA1LOCAT[1] = "S";
        TA1REC.TA1LOCAT[2] = "SY04SFF";
        TA1REC.TA1MAP = "SY04M002";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VDTYRT01";
        TA1REC.TA1TBLKE = SY04M002.SY-DUTY-RT-CD;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(23);
        set SY04M002.SY-DUTY-RT-CD cursor, bold;
        exit stack;
      end
    end
  end


       /* ********************************************/
       /* *    GET WAREHOUSE CODE DESC.             **/
       /* ********************************************/

  SY04SFV();

       /* ********************************************/
       /* *   GET COLOR CODE 4 DESC.                **/
       /* ********************************************/

  SY04SFW();

       /* ********************************************/
       /* *   GET COLOR CODE 3 DESC.                **/
       /* ********************************************/

  SY04SFI();

       /* ********************************************/
       /* *   GET COLOR CODE 2 DESC.                **/
       /* ********************************************/
  SY04SFJ();

       /* ********************************************/
       /* *    GET COLOR CODE 1 DESC.               **/
       /* ********************************************/

  SY04SFK();

       /* ********************************************/
       /* *   GET PRODUCT TYPE CODE DESC.           **/
       /* ********************************************/

  SY04SFL();

       /* ********************************************/
       /* *    GET DIVISION CODE DESC.              **/
       /* ********************************************/

  SY04SFM();

       /* ********************************************/
       /* *    GET SEASON CODE DESC.                **/
       /* ********************************************/

  SY04SFN();

       /* ********************************************/
       /* *    GET DIMENSION CODE AND DESC.         **/
       /* ********************************************/

  SY04SFO();

       /* ********************************************/
       /* *   GET PRODUCT category code and desc.   **/
       /* ********************************************/

  SY04SFS();

       /* ********************************************/
       /* *   GET PRODUCT Line code and desc.   **/
       /* ********************************************/

  SY04SEQ();


       /* ********************************************/
       /* *   GET BLANK COLOR Desc.                 **/
       /* ********************************************/

  SY04SFT();


       /* ********************************************/
       /* *   GET Root Style Desc.                  **/
       /* ********************************************/

  SY04SFU();


end // end SY04SFF

// verify mat. content upper cd.
Function SY04SFG()


       /* ******************************************/
       /* *  VERIFY four material content codes   **/
       /* *  and get their descriptions.          **/
       /* ******************************************/

  if (SY04M002.XMCCD1 == "  ")
    SY04M002.XMCSDESC[1] = " ";
  else
    if (SY04M002.XMCCD1 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY04M002.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        if (SY04M002.XMCCD1 == SYEREC.XMCCD1)
          return;
        else
          set SY04M002.XMCCD1 cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY04M002.XMCSDESC[1] = "INACTIVE";
        end
      end
    else
      set SY04M002.XMCCD1 cursor, bold;
      SY04M002.XMCSDESC[1] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY04M002.XMCCD2 == "  ")
    SY04M002.XMCSDESC[2] = " ";
  else
    if (SY04M002.XMCCD2 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY04M002.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        if (SY04M002.XMCCD2 == SYEREC.XMCCD2)
          return;
        else
          set SY04M002.XMCCD2 cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY04M002.XMCSDESC[2] = "INACTIVE";
        end
      end
    else
      set SY04M002.XMCCD2 cursor, bold;
      SY04M002.XMCSDESC[2] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY04M002.XMCCD3 == "  ")
    SY04M002.XMCSDESC[3] = " ";
  else
    if (SY04M002.XMCCD3 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY04M002.XMCSDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        if (SY04M002.XMCCD3 == SYEREC.XMCCD3)
          return;
        else
          set SY04M002.XMCCD3 cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY04M002.XMCSDESC[3] = "INACTIVE";
        end
      end
    else
      set SY04M002.XMCCD3 cursor, bold;
      SY04M002.XMCSDESC[3] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY04M002.XMCCD4 == "  ")
    SY04M002.XMCSDESC[4] = " ";
  else
    if (SY04M002.XMCCD4 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY04M002.XMCSDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        if (SY04M002.XMCCD4 == SYEREC.XMCCD4)
          return;
        else
          set SY04M002.XMCCD4 cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY04M002.XMCSDESC[4] = "INACTIVE";
        end
      end
    else
      set SY04M002.XMCCD4 cursor, bold;
      SY04M002.XMCSDESC[4] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end

   /* If we have no errors at this point, validate the*/
   /* percentage fields*/
  if (converseVar.validationMsgNum != 0) /* We have other errors*/
    return; /* so exit.*/
  end

  if ((SY04M002.XMCCD4 == "000"
   || SY04M002.XMCCD4 == "   ")
   && SY04M002.SY2MCP4 != 0) /* can't have % with no code*/
    converseLib.validationFailed(148); /* % must be zero*/
    set SY04M002.SY2MCP4 cursor, bold;
  end
  if ((SY04M002.XMCCD3 == "000"
   || SY04M002.XMCCD3 == "   ")
   && SY04M002.SY2MCP3 != 0) /* can't have % with no code*/
    converseLib.validationFailed(148); /* % must be zero*/
    set SY04M002.SY2MCP3 cursor, bold;
  end
  if ((SY04M002.XMCCD2 == "000"
   || SY04M002.XMCCD2 == "   ")
   && SY04M002.SY2MCP2 != 0) /* can't have % with no code*/
    converseLib.validationFailed(148); /* % must be zero*/
    set SY04M002.SY2MCP2 cursor, bold;
  end
  if ((SY04M002.XMCCD1 == "000"
   || SY04M002.XMCCD1 == "   ")
   && SY04M002.SY2MCP1 != 0) /* can't have % with no code*/
    converseLib.validationFailed(148); /* % must be zero*/
    set SY04M002.SY2MCP1 cursor, bold;
  end

   /* Now if the user has entered percentages, they cannot total*/
   /* more than 100% or it's an error.*/
  SYWREC.SYWINDEX = SY04M002.SY2MCP1 + SY04M002.SY2MCP2 +   SY04M002.SY2MCP3 + SY04M002.SY2MCP4;
  if (SYWREC.SYWINDEX > 100) /* More than 100%*/
    converseLib.validationFailed(191); /* Percents do not = 100%*/
    if (SY04M002.SY2MCP4 > 0)
      set SY04M002.SY2MCP4 cursor, bold;
    end
    if (SY04M002.SY2MCP3 > 0)
      set SY04M002.SY2MCP3 cursor, bold;
    end
    if (SY04M002.SY2MCP2 > 0)
      set SY04M002.SY2MCP2 cursor, bold;
    end
    if (SY04M002.SY2MCP1 > 0)
      set SY04M002.SY2MCP1 cursor, bold;
    end
  end

end // end SY04SFG

// verify optional group code
Function SY04SFH()

       /* ******************************************/
       /* *  VERIFY OPTIONAL GROUP CODE AND GET   **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY04M002.XOGCD == "  ")
    SY04M002.XOGABRV = " ";
    return;
  else
    if (SY04M002.XOGCD == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY04M002.XOGCD cursor, bold;
      SY04M002.XOGABRV = "INVALID";
      return;
    end
  end

  if (SY04M002.XOGCD in XOGTBL.XOGCD)
    if (XOGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex];
    else
      if (SY04M002.XOGCD == SYEREC.XOGCD)
        return;
      else
        set SY04M002.XOGCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY04M002.XOGABRV = "INACTIVE";
      end
    end
  else
    set SY04M002.XOGCD cursor, bold;
    SY04M002.XOGABRV = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY04SFH

// verify tertiary color code
Function SY04SFI()

       /* ******************************************/
       /* *  VERIFY TERTIARY COLOR CODE AND       **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  if (SY04M002.XCLCD[3] == "  ")
    SY04M002.XCLCD[3] = "000";
  end

  if (SY04M002.XCLCD[3] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY04M002.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY04M002.XCLCD[3] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XCLCD[3] cursor, bold;
    SY04M002.XCLABRV[3] = "INVALID";
  end

end // end SY04SFI

// VERIFY SECONDARY COLOR CODE
Function SY04SFJ()

       /* ******************************************/
       /* *  VERIFY SECONDARY COLOR CODE AND GET  **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY04M002.XCLCD[2] == "  ")
    SY04M002.XCLCD[2] = "000";
  end

  if (SY04M002.XCLCD[2] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XCLABRV[2] = XCLTBL.XCLABRV2[sysVar.arrayIndex];
    else
      SY04M002.XCLABRV[2] = XCLTBL.XCLABRV2[sysVar.arrayIndex];
      set SY04M002.XCLCD[2] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XCLCD[2] cursor, bold;
    SY04M002.XCLABRV[2] = "INVALID";
  end

end // end SY04SFJ

// verify primary color code
Function SY04SFK()


       /* ******************************************/
       /* *  verify primary color code and        **/
       /* *  get the description.                 **/
       /* ******************************************/

  if (SY04M002.XCLCD[1] == "  ")
    SY04M002.XCLCD[1] = "000";
  end

  if (SY04M002.XCLCD[1] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY04M002.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY04M002.XCLCD[1] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XCLCD[1] cursor, bold;
    SY04M002.XCLABRV[1] = "INVALID";
  end

end // end SY04SFK

// VERIFY PRODUCT TYPE CODE
Function SY04SFL()

       /* ******************************************/
       /* *  VERIFY PRODUCT TYPE CODE AND GET     **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY04M002.XPRCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XPRCD cursor, bold;
    SY04M002.XPRDESC = "INVALID";
    return;
  end

  if (SY04M002.XPRCD in XPRTBL.XPRCD)
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
    else
      if (SY04M002.XPRCD == SYEREC.XPRCD)
        return;
      else
        set SY04M002.XPRCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY04M002.XPRDESC = "INACTIVE";
      end
    end
  else
    set SY04M002.XPRCD cursor, bold;
    SY04M002.XPRDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY04SFL

// VERIFY DIVISION CODE
Function SY04SFM()

       /* ******************************************/
       /* *  VERIFY DIVISION CODE AND GET         **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY04M002.XDVCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XDVCD cursor, bold;
    SY04M002.XDVDESC = "INVALID";
    return;
  end

  if (SY04M002.XDVCD in XDVTBL.XDVCD)
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    else
      if (SY04M002.XDVCD == SYEREC.XDVCD)
        return;
      else
        set SY04M002.XDVCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY04M002.XDVDESC = "INACTIVE";
      end
    end
  else
    set SY04M002.XDVCD cursor, bold;
    SY04M002.XDVDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY04SFM

// VERIFY SEASON CODE
Function SY04SFN()

       /* ******************************************/
       /* *  VERIFY SEASON CODE AND GET           **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY04M002.XSECD == SY2REC.XSECD /* if code not changed*/
   && SY04M002.XSNYR == SY2REC.XSNYR)
    return; /* don't need to validate, so get out*/
  end

  if (SY04M002.XSECD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XSECD cursor, bold;
    SY04M002.XSEDESC = "INVALID";
    return;
  end

  if (SY04M002.XSECD in XSETBL.XSECD)
    if (XSETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
    else
      if (SY04M002.XSECD == SYEREC.XSECD)
        return;
      else
        set SY04M002.XSECD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY04M002.XSEDESC = "INACTIVE";
        return;
      end
    end
  else
    set SY04M002.XSECD cursor, bold;
    SY04M002.XSEDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
    return;
  end

  if (XSETBL.XSESETYP[sysVar.arrayIndex] == " ") /* NO ENTRY IN XSN*/
    SY04W01.SY2POFXD = 020431231;
    SY04W01.SY2FOFXD = 020431231;
    SY04W01.SY2NOFXD = 020431231;
    return;
  end

  SY04W01.XSE-SESN-CD = XSETBL.XSESETYP[sysVar.arrayIndex];
  SY04W01.SY04W-XSN-SESN-YR = SY04M002.XSNYR;
  if (SYWREC.XDR-PROD-REG-CD[1] == "02")
    SY04W01.XDR-PROD-REG-CD = "02";
  else
    SY04W01.XDR-PROD-REG-CD = "01";
  end

  SY04S-GET-YSN();

  if (SY04W01.SY04W-FND-YSN == "Y")
    if (SY2REC.XGPCD == "02")
      SY04W01.SY2POFXD = YSNTBL.XSN-SESN-XDT[SYWINDEX];
      SY04W01.SY2FOFXD = YSNTBL.XSN-SESN-XDT[SYWINDEX];
    else
      SY04W01.SY2POFXD = YSNTBL.XSN-SESN-XDT[SYWINDEX];

      SYWREC.SYW-FUTR-OFFER-XDT = YSNTBL.XSN-SESN-XDT[SYWINDEX];
      SYWREC.SYW-FUTR-OFFER-XDR = SY04W01.XDR-PROD-REG-CD;
      XPSY010();
      SY04W01.SY04W-FUTR-OFFER-XDT = SYWREC.SYW-FUTR-OFFER-XDT;
      SY04W01.SY2FOFXD = SYWREC.SYW-FUTR-OFFER-XDT;
    end
  else
    converseLib.validationFailed(130); /* Season not on YSN table*/
    set SY04M002.XSECD cursor, bold;
    set SY04M002.XSNYR bold;
    return;
  end

  if (SY04M001.XGPCD == "03")
    SY04W01.XDR-PROD-REG-CD = "03";
    if (SY04W01.XSE-SESN-CD == "CL"
     || SY04W01.XSE-SESN-CD == "LS")
      SY04W01.XSE-SESN-CD = "SP";
    end
  else
    SY04W01.XDR-PROD-REG-CD = "02";
  end

  SY04S-GET-YSN();

  if (SY04W01.SY04W-FND-YSN == "Y")
    SY04W01.SY2NOFXD = YSNTBL.XSN-SESN-XDT[SYWINDEX];
  else
    converseLib.validationFailed(130); /* Season not on YSN table*/
    set SY04M002.XSECD cursor, bold;
    set SY04M002.XSNYR bold;
  end

end // end SY04SFN

// verify dimension code
Function SY04SFO()

       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY04M002.XDMCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XDMCD cursor, bold;
    SY04M002.XDMDESC = "INVALID";
    return;
  end

  if (SY04M002.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    else
      if (SY04M002.XDMCD == SYEREC.XDMCD)
        return;
      else
        set SY04M002.XDMCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY04M002.XDMDESC = "INACTIVE";
      end
    end
  else
    set SY04M002.XDMCD cursor, bold;
    SY04M002.XDMDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY04SFO

// write changed color record
Function SY04SFP()


       /* ******************************************/
       /* * UPDATE COLOR RECORD IN COLOR TABLE    **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       THE TABLE IS ROLLED BACK.       **/
       /* *                                       **/
       /* ******************************************/



  set SQLCA empty;

  SY2REC.ZZZCHGDT = SYWREC.ZZZCHGDT;
  SY2REC.ZZZCHGTM = SYWREC.ZZZCHGTM;

  call "IO0130" ("U ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY04SFQ(); /* write audit*/
    SY04SFR(); /* write tag*/
    SY04WCOL.SY04WUPD = SY04WCOL.SY04WUPD + 1;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(37); /* unable to process update try again.*/
      set SY04M002.SY2CLRID cursor, bold;
      SY04M002.SYMSCMSG = ".. PLEASE TRY AGAIN   ...  ";
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY04   ";
      TA1REC.TA1LOCAT[1] = "U        ";
      TA1REC.TA1LOCAT[2] = "SY04SFP  ";
      TA1REC.TA1LOCAT[3] = "IO0130   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY04M002";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error....*/
      set SY04M002.SY2CLRID cursor, bold;
      exit stack;
    end
  end


end // end SY04SFP

// write color chg. audit record
Function SY04SFQ()


       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR COLOR UPDATE **/
       /* *                                       **/
       /* ******************************************/


  set SYAREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SYAREC.SYAUDTYP = "C";
  SYAREC.XXXTBLNM = "VCOLOR01";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "SY04SFQ  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCOLOR01 ";
    TA1REC.TA1MAP = "SY04M002";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY2REC.XGPCD;
  SYAREC.SY1STNBR = SY2REC.SY1STNBR;
  SYAREC.SY2CLRID = SY2REC.SY2CLRID;
  SYAREC.XDMCD = SY2REC.XDMCD;
  SYAREC.ZZZSDT = SYWREC.ZZZSDT;
  SYAREC.ZZZSTM = SYWREC.ZZZCHGTM;
  SYAREC.SYABFR = SYEREC.SY2DATA;
  SYAREC.SYAAFT = SY2REC.SY2DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "CHANGE  ";
    TA1REC.TA1LOCAT[2] = "SY04SFQ ";
    TA1REC.TA1LOCAT[3] = "IO0530  ";
    TA1REC.TA1LOCAT[4] = "COLORTBL";
    TA1REC.TA1MAP = "SY04M002";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY04M002.SY1STNBR cursor, bold;
    exit stack;
  end

end // end SY04SFQ

// write color chg. tag  record
Function SY04SFR()


       /* ******************************************/
       /* *   WRITE TAG RECORD FOR COLOR UPDATE   **/
       /* *                                       **/
       /* ******************************************/


  set SY9REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SY9REC.SY9TGTYP = "C";
  SY9REC.XGPCD = SY2REC.XGPCD;
  SY9REC.SY1STNBR = SY2REC.SY1STNBR;
  SY9REC.SY2CLRID = SY2REC.SY2CLRID;
  SY9REC.XDMCD = SY2REC.XDMCD;
  SY9REC.ZZZSDT = SYWREC.ZZZSDT;
  SY9REC.ZZZSTM = SYWREC.ZZZCHGTM;

  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY04   ";
    TA1REC.TA1LOCAT[1] = "CHANGE  ";
    TA1REC.TA1LOCAT[2] = "SY04SFR ";
    TA1REC.TA1LOCAT[3] = "IO0520  ";
    TA1REC.TA1LOCAT[4] = "COLORTBL";
    TA1REC.TA1MAP = "SY04M002";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYTAG01";
    TA1TBLKE = SY9REC.SY9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(45); /* tag table error...*/
    set SY04M002.SY1STNBR cursor, bold;
    exit stack;
  end



end // end SY04SFR

// VERIFY PRODUCT category code
Function SY04SFS()

       /* ******************************************/
       /* *  VERIFY PRODUCT category code and get **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY04M002.XPCCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XPCCD cursor, bold;
    SY04M002.XPCDESC = "INVALID";
    return;
  end

  if (SY04M002.XPCCD == "  " /*Verify product category is non-blank*/
   && SY04M002.XGPCD != "03") /* GPC 01, 02,  and 04*/
    converseLib.validationFailed(245);
    set SY04M002.XPCCD cursor, bold;
    SY04M002.XPCDESC = "INVALID";
    return;
  else
    if (SY04M002.XPCCD == "  ")
      return;
    end
  end

  SYWREC.SYWINDEX = 1;

  while (XPCTBL.XPCCD[SYWINDEX] != "99")
    if (SYWREC.XGPCD == XPCTBL.XGPCD[SYWINDEX]
     && SY04M002.XPCCD == XPCTBL.XPCCD[SYWINDEX])
      if (XPCTBL.XXXSTAT[SYWINDEX] == "A")
        SY04M002.XPCDESC = XPCTBL.XPCDESC[SYWINDEX];
        return;
      else
        if (SY04M002.XPCCD == SYEREC.XPCCD)
          return;
        else
          set SY04M002.XPCCD cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY04M002.XPCDESC = "INACTIVE";
          return;
        end
      end
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end

  set SY04M002.XPCCD cursor, bold;
  SY04M002.XPCDESC = "INVALID";
  converseLib.validationFailed(3); /* invalid code*/


end // end SY04SFS

// Get Blank Style/Color
Function SY04SFT()

  if (SY04M002.SY2BCLCD == " ")
    SY04M002.SY04MBCN = " ";
    return;
  end

  SY04W01.SY2DATA = SY2REC.SY2DATA;
  set SY2REC empty;
  set SQLCA empty;
  SY2REC.XGPCD = SY04M002.XGPCD;
  SY2REC.SY1STNBR = SY1REC.SY1BSTNB;
  SY2REC.SY2CLRID = SY04M002.SY2BCLCD;
  SY2REC.XDMCD = SY04M002.XDMCD;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    SY04M002.SY04MBCN = SY2REC.SY2CLRDS;
    SY2REC.SY2DATA = SY04W01.SY2DATA;
  else
    SY2REC.SY2DATA = SY04W01.SY2DATA;
    if (SQLCA.VAGen_SQLCODE == 100)
      SY04M002.SY04MBCN = " ";
      converseLib.validationFailed(7); /* color/dim not found*/
      set SY04M002.SY2BCLCD cursor, modified, bold;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY04";
      TA1REC.TA1LOCAT[1] = "S";
      TA1REC.TA1LOCAT[2] = "SY04SFT";
      TA1REC.TA1MAP = "SY04M002";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20);
      set SY04M002.SY2BCLCD cursor, bold;
      exit stack;
    end
  end

end // end SY04SFT

// get root style name
Function SY04SFU()


       /* ******************************************/
       /* *     GET  root style name              **/
       /* *                                       **/
       /* ******************************************/

  if (SY04M002.SY2RSTNB == " "
   || SY2REC.XGPCD != "03")
    SY04M002.SY04MRSN = " ";
    return;
  end

  set SQLCA empty;

  SYDREC.XGPCD = SY2REC.XGPCD;
  SYDREC.SY1STNBR = SY04M002.SY2RSTNB;


  call "IO0120" ("S ", SQLCA, SYDREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY04M002.SY04MRSN = SYDREC.SY1STYNM;
    return;

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style record does not exists*/
      set SY04M002.SY2RSTNB cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY04   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY04SFU  ";
      TA1REC.TA1LOCAT[3] = "IO0120   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY04M002";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SYDREC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error....*/
      set SY04M002.SY2RSTNB cursor, bold;
      exit stack;
    end
  end


end // end SY04SFU

// Get Warehouse Codes
Function SY04SFV()

       /* ******************************************/
       /* *  VERIFY WAREHOUSE CODES AND           **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  SYWREC.SYWINDEX = 4;
  while (SYWREC.SYWINDEX >= 1)
    if (SY04M002.XWHCD[SYWINDEX] != " ")
      if (SY04M002.XWHCD[SYWINDEX] in XWHTBL.XWHCD)
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          SY04M002.XWHSABRV[SYWINDEX] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        else
          SY04M002.XWHSABRV[SYWINDEX] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
          set SY04M002.XWHCD[SYWINDEX] bold;
          converseLib.validationFailed(66); /* status code is inactive*/
        end
      else
        converseLib.validationFailed(3); /* invalid code*/
        set SY04M002.XWHCD[SYWINDEX] cursor, bold;
        SY04M002.XWHSABRV[SYWINDEX] = "INVALD";
      end
    else
      SY04M002.XWHSABRV[SYWINDEX] = " ";
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX - 1;
  end

end // end SY04SFV

// Get LOGO Color
Function SY04SFW()

       /* ******************************************/
       /* *  VERIFY LOGO COLOR CODE AND           **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  if (SY04M002.XCLCD[4] == "  ")
    SY04M002.XCLCD[4] = "000";
  end

  if (SY04M002.XCLCD[4] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY04M002.XCLABRV[4] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY04M002.XCLABRV[4] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY04M002.XCLCD[4] bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY04M002.XCLCD[4] cursor, bold;
    SY04M002.XCLABRV[4] = "INVALD";
  end

end // end SY04SFW

// modify offering ending dates
Function SY04SGA()

       /* ******************************************/
       /* *  modify offering ending dates         **/
       /* ******************************************/


  if (SY04W01.SY2POFXD > SY2REC.SY2POFXD)
    SY2REC.SY2POFXD = SY04W01.SY2POFXD;
  end
  if (SY04W01.SY2FOFXD > SY2REC.SY2FOFXD)
    SY2REC.SY2FOFXD = SY04W01.SY2FOFXD;
  end
  if (SY04W01.SY2NOFXD > SY2REC.SY2NOFXD)
    SY2REC.SY2NOFXD = SY04W01.SY2NOFXD;
  end

end // end SY04SGA

Record SY04W01 type basicRecord
  10 SY2DATA SY2DATA ; 
  10 SY04W-FUTR-OFFER-XDT SY04W-FUTR-OFFER-XDT ; 
    15 SY04W-FUTR-OFFER-YY SY04W-FUTR-OFFER-YY ; 
    15 SY04W-FUTR-OFFER-MM SY04W-FUTR-OFFER-MM ; 
    15 SY04W-FUTR-OFFER-DD SY04W-FUTR-OFFER-DD ; 
  10 SY2POFXD SY2POFXD ; 
  10 SY2FOFXD SY2FOFXD ; 
  10 SY2NOFXD SY2NOFXD ; 
  10 SY04W-YSN-DATA SY04W-YSN-DATA ; 
    15 SY04W-FND-YSN SY04W-FND-YSN ; 
    15 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
    15 XSE-SESN-CD XSE-SESN-CD ; 
    15 SY04W-XSN-SESN-YR SY04W-XSN-SESN-YR ; 
end // end SY04W01

Record SY04WCOL type basicRecord
  10 SY04WDAT SY04WDAT [200] ; 
    15 SY04WSEL SY04WSEL ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY2CLRAB SY2CLRAB ; 
    15 XDMCD XDMCD ; 
    15 XLCCD XLCCD ; 
  10 SY04WUPD SY04WUPD ; 
  10 SY04W-XDR-FL SY04W-XDR-FL ; 
  10 SY04WCCT SY04WCCT ; 
  10 SY04WSDX SY04WSDX ; 
  10 SY04WTOP SY04WTOP ; 
  10 SY04WCDX SY04WCDX ; 
  10 SY04WMSG SY04WMSG ; 
    15 SY04WMS8 SY04WMS8 ; 
    15 SY04WMS1 SY04WMS1 ; 
    15 SY04WMS2 SY04WMS2 ; 
    15 SY04WMS7 SY04WMS7 ; 
  10 SY04WMSU SY04WMSU ; 
    15 SY04WMS9 SY04WMS9 ; 
    15 SY04WMS4 SY04WMS4 ; 
    15 SY04WMS3 SY04WMS3 ; 
    15 * char(3) ; 
    15 SY04W-SPF-LIT SY04W-SPF-LIT ; 
    15 SY04W-SPF-CNT SY04W-SPF-CNT ; 
end // end SY04WCOL

DataItem SY04W-FND-YSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY04W-FUTR-OFFER-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY04W-FUTR-OFFER-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work field for date calc.
DataItem SY04W-FUTR-OFFER-XDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY04W-FUTR-OFFER-YY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY04W-SPF-CNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY04W-SPF-LIT char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display XDR pop-up (Y/N)
DataItem SY04W-XDR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY04W-XSN-SESN-YR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY04W-YSN-DATA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot. # of colors selected
DataItem SY04WCCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage index
DataItem SY04WCDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY04WDAT char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// # of colors selected
DataItem SY04WMS1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// msg. for colors selected
DataItem SY04WMS2 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// # of colors updated
DataItem SY04WMS3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// msg. for colors updated
DataItem SY04WMS4 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg. for colors selected
DataItem SY04WMS7 char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg. for colors selected
DataItem SY04WMS8 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg. for colors selected
DataItem SY04WMS9 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total colors selected msg
DataItem SY04WMSG char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total colors updated msg
DataItem SY04WMSU char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen index
DataItem SY04WSDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sy04m001 select field
DataItem SY04WSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last screen entry
DataItem SY04WTOP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// # of colors updated
DataItem SY04WUPD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

