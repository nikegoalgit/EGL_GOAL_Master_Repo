package sy0a;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import sy.common.*;
import ta.common.*;
//*** PROGRAM=SY0A ****
// ;
// ;   **********************************************
// ;   *           size scale add application       *
// ;   **********************************************
// ;
// ;       this application will only add a size scale row
// ;    to the size scale table.
// ;
// ;
// ;      date created:   feb. 12,1986
// ;      by:             jim richardson
// ;
// ;
// ;      maintenance log
// ;      date       init.     comments
// ;      --------   ------    -------------------------------
// ;
// ;      04-14-89   JWOOD     ADDED XSSEGTR LOGIC
// ;      04-17-89   JWOOD     ADDED noncsp opt.  to calls
// ;
// *********************
Program SY0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  SY0AW01 SY0AW01; // record
  SY0BWZZZ SY0BWZZZ; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SY0AM.SY0AM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SY0A001: SY0A001();
    goto SY0A002;
    SY0A002: SY0A002();


    if (converseVar.eventKey is pa2)
      goto SY0A001;
    end

     /* ******   display size scale row *****/

    if (SY0AW01.SY0AINQR == "Y")
      goto SY0A003;
    end


     /* IF SY0AW01.SY0AFLG1 = 'Y';*/
      /* OR EZEAID IS PF3;*/
      /* SY0A002;*/
     /* END ;*/
    goto SY0A002;


    SY0A003: SY0A003();


    if (converseVar.eventKey is pa2)
      goto SY0A001;
    end


    goto SY0A002;

  end // end main
end // end SY0A

Function SY0A001()


  XSENTRY();
  XSSEGTR(); /* set segmented transaction id*/


  set SY0AW01 empty;
  set TA2REC empty;
  set TA1REC empty;
  set SY0BWZZZ empty;
  set ERRSQLCA empty;
  set SQLCA empty;
  set SY4REC empty;
  set SY0AM001 initial;


end // end SY0A001

// add size scale screen
Function SY0A002()


   /* *****************************/
   /* *    init. screen          **/
   /* *****************************/


  SY0AM001.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0AM001.SYMPRONM = "SY0A002";
  SY0AM001.SYMTTLNM = " PRODUCT SIZE SCALE - ADD ";

  if (converseVar.eventKey is pf12
   || SY0AW01.SY0AFLG1 == "Y")
    /* next sentence*/
  else
    SY0AM001.SYMSCMSG = "ENTER SIZE SCALE INFORMATION ";
  end


   /* ***********************************************************/
  converse SY0AM001 ;
   /* ***********************************************************/


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf1
   || converseVar.eventKey is pf4)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "MN0N";
      XSEXIT();
    else
      exit stack;
    end
  end



   /* *********** set fields to normal*/

  SY0AW01.SY0AFLG1 = "N"; /* error flag field*/
  SY0AW01.SY0AINQR = "N"; /* inquire flag*/
  SY0AM001.SYMSCMSG = " ";
  SY0AM001.VAGen_EZEMSG = " ";
  set SY0AM001.SY4SZSCL cursor, initialAttributes;
  SY0AS08(); /* set size fields to normal*/


  if (SY0AW01.SY0AFLG1 == "Y")
    exit stack;
  end



   /* ***********************************/
   /* *   process fast path            **/
   /* ***********************************/

  SY0AS02();

  if (SY0AW01.SY0AFLG1 == "Y")
    exit stack;
  end



   /* *********************************************/
   /* * 1.  check to see if size scale exsists.  **/
   /* * 2.  validate size scale screen.          **/
   /* *********************************************/

  SY0AS03();

  if (SY0AW01.SY0AFLG1 == "Y"
   || SY0AW01.SY0AINQR == "Y")
    exit stack;
  end



   /* ******************************************************/
   /* *   add valid size scale rows.                      **/
   /* ******************************************************/


  SY0AS10(); /* get zzz-dates etc.*/


  SY0AS04();


  if (SY0AW01.SY0AFLG1 == "Y")
    exit stack;
  end


   /* ************************************/
   /* *   flow stage for sy0a002        **/
   /* ************************************/
end // end SY0A002

// display exsisting size scale
Function SY0A003()


   /* **********************************/
   /* *    init. screen               **/
   /* *                               **/
   /* *    protect all screen fields. **/
   /* **********************************/


  SY0AM001.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0AM001.SYMPRONM = "SY0A003";
  move SY4REC to SY0AM001 byName;
  SY0AM001.SYMTTLNM = " SIZE SCALE - INQUIRY  ";
  SY0AM001.VAGen_EZEMSG = " PRESS 'ENTER'  TO CONTINUE ";
  SY0AM001.SYMSCMSG = " INQUIRE ONLY SCREEN ";
  set SY0AM001.SY4SZSCL protect;
  set SY0AM001.SY4ZDESC protect;
  SY0AS09();



   /* ***********************************************************/
  converse SY0AM001 ;
   /* ***********************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf1)
    /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "MN0N";
      XSEXIT();
    else
      exit stack;
    end
  end



   /* ***************************************/
   /* *   set screen fields to normal      **/
   /* ***************************************/

  SY0AW01.SY0AFLG1 = "N";
  SY0AM001.SYMSCMSG = " ";
  SY0AM001.VAGen_EZEMSG = " ";
  SY0AW01.SY0AINQR = "N";
  set SY0AM001.SY4SZSCL cursor, normal;
  converseLib.clearScreen();
  set SY0AM001 initial;



  if (converseVar.eventKey is pa2)
    exit stack;
  end


   /* ***************************************/
   /* *   process fast path                **/
   /* ***************************************/

  SY0AS02();

  if (SY0AW01.SY0AFLG1 == "Y")
    exit stack;
  end



   /* ************************************/
   /* *   flow stage for sy0a003        **/
   /* ************************************/
end // end SY0A003

// process the fast path
Function SY0AS02()



  if (converseVar.eventKey is enter
   && SY0AM001.CATOAP != " ")
    move SY0AM001 to COMMAREA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    XSEXIT();
    SY0AM001.SYMSCMSG = COMMAREA.CAMSG;
    set SY0AM001 alarm;
    set SY0AM001.CATOAP cursor, bold;
    SY0AW01.SY0AFLG1 = "Y";
    return;
  end



end // end SY0AS02

// validate screen fields
Function SY0AS03()


   /* **********************************************/
   /* *     check to see if size scale exsists.   **/
   /* **********************************************/

  if (converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
    SY0AS06();
  end



   /* **********************************************/
   /* *   there can not be any spaces between     **/
   /* *   sizes.                                  **/
   /* **********************************************/

  SY0AW01.SY0AZIDX = 1;
  SY0AW01.SY0ASPFG = "N";
  SY0AW01.SY0ASZFG = "N";
  while (SY0AW01.SY0AZIDX <= 40
   && SY0AW01.SY0ASZFG == "N")
    SY0AS05();
    if (SY0AW01.SY0ASZFG == "N")
      SY0AW01.SY0AZIDX = SY0AW01.SY0AZIDX + 1;
    end
  end



  if (SY0AM001.SY4ZDESC == " ")
    SY0AW01.SY0AFLG1 = "Y";
    set SY0AM001.SY4ZDESC cursor, bold;
    SY0AM001.SYMSCMSG = " ADD SIZE SCALE DESCRIPTION ";
  end




  if (SY0AM001.SY4SZSCL == " ")
    SY0AW01.SY0AFLG1 = "Y";
    set SY0AM001.SY4SZSCL cursor, bold;
    SY0AM001.SYMSCMSG = " ADD SIZE SCALE CODE ";
    return;
  end



  if (SQLCA.VAGen_SQLCODE == 100
   && SY0AW01.SY0AFLG1 == "N"
   && converseVar.eventKey is pf12)
    SY0AM001.SYMSCMSG = " RECORD DOES NOT EXIST - PRESS ENTER TO ADD ";
  end



end // end SY0AS03

// add size scale row
Function SY0AS04()



   /* **********************************************************/
   /* *   1. size scale rows can only be added if the users   **/
   /* *      hit enter.                                       **/
   /* **********************************************************/


  if (converseVar.eventKey is enter
   && SY0AW01.SY0AFLG1 == "N")
    set SQLCA empty;
    set ERRSQLCA empty;
    set SY4REC empty;
    move SY0AM001 to SY4REC withV60Compat;
    move SY0BWZZZ to SY4REC withV60Compat;

    call "IO0040" ("A ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)
      converseLib.clearScreen();
      set SY0AM001 initial;
      SY0AM001.SYMSCMSG = " SIZE SCALE ADDED  ";
      SY0AW01.SY0AFLG1 = "Y";
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0A   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY0AS06  ";
      TA1REC.TA1LOCAT[3] = "IO0040   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0AM001";
      TA1REC.TA1DBASE = "SY4REC";
      TA1REC.TA1TBLVU = "DPROD.VSCALE01";
      TA1TBLKE = SY4REC.SY4SZSCL;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      SY0AW01.SY0AFLG1 = "Y";
      SY0AW01.SY0AFLG1 = "Y";
      SY0AM001.SYMSCMSG = " SIZE SCALE TABLE FATAL ERROR...";
      set SY0AM001 alarm;
      exit stack;
    end
    return;
  end


end // end SY0AS04

// sizes must be contiguous
Function SY0AS05()



  if (SY0AM001.SY4IDDSC[1] == " ")
    SY0AW01.SY0ASZFG = "Y";
    SY0AW01.SY0AFLG1 = "Y";
    set SY0AM001.SY4IDDSC[SY0AZIDX] cursor, bold;
    SY0AM001.SYMSCMSG = " THERE CAN BE NO SPACES BETWEEN SIZES ";
    return;
  else
    if (SY0AM001.SY4IDDSC[SY0AZIDX] != " "
     && SY0AW01.SY0ASPFG == "Y")
      SY0AW01.SY0ASZFG = "Y";
      SY0AW01.SY0AFLG1 = "Y";
      SY0AW01.SY0AZIDX = SY0AW01.SY0AZIDX - 1;
      set SY0AM001.SY4IDDSC[SY0AZIDX] cursor, bold;
      SY0AM001.SYMSCMSG = " THERE CAN BE NO SPACES BETWEEN SIZES ";
      return;
    else
      if (SY0AW01.SY0ASPFG == "Y")
         /* end*/
      else
        if (SY0AM001.SY4IDDSC[SY0AZIDX] == " ")
          SY0AW01.SY0ASPFG = "Y";
        end
      end
    end
  end
end // end SY0AS05

// check if size scale exsist.
Function SY0AS06()


  set SQLCA empty;
  set ERRSQLCA empty;

  move SY0AM001 to SY4REC withV60Compat;
  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    converseLib.clearScreen();
    set SY0AM001 initial;
    move SY4REC to SY0AM001 withV60Compat;
    SY0AW01.SY0AINQR = "Y";
    SY0AM001.SYMSCMSG = "RECORD ALREADY EXSITS ";
    exit stack;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0A   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY0AS06  ";
      TA1REC.TA1LOCAT[3] = "IO0040   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0AM001";
      TA1REC.TA1DBASE = "SY4REC";
      TA1REC.TA1TBLVU = "DPROD.VSCALE01";
      TA1TBLKE = SY4REC.SY4SZSCL;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      SY0AW01.SY0AFLG1 = "Y";
      SY0AM001.SYMSCMSG = " SIZE SCALE TABLE FATAL ERROR...";
      exit stack;
    end
    return;
  end


end // end SY0AS06

// set sizes to normal
Function SY0AS08()



  if (SY0AM001.SY4ZDESC != " ")
    set SY0AM001.SY4ZDESC initialAttributes;
  end


   /* ******  set all size desc. fields to normal. *****/

  SY0AW01.SY0AZIDX = 1;
  while (SY0AW01.SY0AZIDX <= 40)
    set SY0AM001.SY4IDDSC[SY0AZIDX] normal;
    SY0AW01.SY0AZIDX = SY0AW01.SY0AZIDX + 1;
  end


end // end SY0AS08

// protect all size fields
Function SY0AS09()



  SY0AW01.SY0AZIDX = 1;
  while (SY0AW01.SY0AZIDX <= 40)
    set SY0AM001.SY4IDDSC[SY0AZIDX] protect;
    SY0AW01.SY0AZIDX = SY0AW01.SY0AZIDX + 1;
  end


end // end SY0AS09

// get zzz-date/time
Function SY0AS10()


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0222)
    return;
  else
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0BSAF";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC) {isExternal = yes};
      converseLib.validationFailed(30);
      SY0AW01.SY0AINQR = "Y";
      exit stack;
    else
      /* next sentence*/
    end
  end


  SY0BWZZZ.ZZZSDT = TA2REC.TA2GRGGN;
  SY0BWZZZ.ZZZCHGDT = TA2REC.TA2GRGGN;
  SY0BWZZZ.ZZZCHGTM = TA2REC.TA2TIMHM;
  SY0BWZZZ.ZZZCHGCT = 0;


end // end SY0AS10

Record SY0AW01 type basicRecord
  10 SY0AFLG1 SY0AFLG1 ; 
  10 SY0AFLG2 SY0AFLG2 ; 
  10 SY0AFLG3 SY0AFLG3 ; 
  10 SY0ASPFG SY0ASPFG ; 
  10 SY0ASZFG SY0ASZFG ; 
  10 SY0AZIDX SY0AZIDX ; 
  10 SY0ARDCT SY0ARDCT ; 
  10 SY0AHDTM SY0AHDTM ; 
    15 SY0AHH SY0AHH ; 
    15 SY0AHD1 SY0AHD1 ; 
    15 SY0AMM SY0AMM ; 
    15 SY0AHD2 SY0AHD2 ; 
    15 SY0ASS SY0ASS ; 
  10 SY0ACHTM SY0ACHTM ; 
    15 SY0ACHHH SY0ACHHH ; 
    15 SY0ACHMM SY0ACHMM ; 
  10 SY0AINQR SY0AINQR ; 
end // end SY0AW01

// time change hh. for zz
DataItem SY0ACHHH smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time change mm. for zz
DataItem SY0ACHMM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// time change for zz
DataItem SY0ACHTM int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag.
DataItem SY0AFLG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special branching flag.
DataItem SY0AFLG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special branching flag.
DataItem SY0AFLG3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp. ':'
DataItem SY0AHD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp ':'
DataItem SY0AHD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp. field for time
DataItem SY0AHDTM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TEMP. HOUR
DataItem SY0AHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inquiry flag
DataItem SY0AINQR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp. minitute
DataItem SY0AMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change count for zz
DataItem SY0ARDCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// spaces exsists flag
DataItem SY0ASPFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp. second
DataItem SY0ASS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag for sizes
DataItem SY0ASZFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size bucket counter
DataItem SY0AZIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

