package sy0q;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import mn.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sy.common.*;
import ta.common.*;
import ty.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SY0Q ****
// ************************************************************
// * this program allows the user to make corrections to the  *
// * size price table (sy5rec) in the product data base.      *
// * the user may do any of the following:                    *
// *    1.  change a 1st or 2nd quality price                 *
// *    2.  change a 1st or 2nd quality effective date        *
// *        (if this change requires resorting the dates,     *
// *         the program will also perform this function)     *
// *    3.  change a 1st or 2nd quality mark down flag        *
// *    4.  delete a 1st or 2nd quality price line            *
// *                                                          *
// * if the user deletes or changes the effective date, the   *
// * program will validate that the product has a current     *
// * price before the update will be applied. if there are no *
// * errors, the update will be 'committed' as well as both   *
// * audit and tag records being generated.                   *
// ************************************************************
// *maintenance history:
// *chg #   date    who   remarks
// *----- -------- ------ -------------------------------------
// *      09/01/86 mhalst enhance program to allow entry of
// *                      zero prices for gpc ^= 02 or 03.
// *      04-17-89 VCowan added XSSEGTR logic
// -spl-  04-17-89 jwood  added noncsp option logic
// *      09-25-89 MHALST Add price type check for NIL
// *      11-13-89 MHALST Data base changes and add SYZTBL
// *      10-08-90 MHALST Data base changes and SYAREC
// *      02-11-91 MHALST Data base changes SY5REC
// *      04-26-93 MHALST Add S & E to Status Ind.
// *      03-03-94 MHALST DB2 changes, add XCT & ZFC
// *      10-02-95 MHALST Add SY1550 & MN0V.
// *      11-19-97 NGANGO Y2K MODIFICATION.
// *      Regenerated to pickup XX0XS01 changes.
// *      02-25-99 JNARAS Changed the process SY0QS65
// *                      to accept -1 AND +1  for the
// *                      SY0QMRND field.
// *      10-22-99 JNARAS Changed SY0Q500 to use (R roundi
// *                      ng function when rounding factor
// *                      is not given.
// * EURO 02-07-00 MHALST Add options to allow automatic
// *                      maintenance to EURO data.
// *      12-11-01 MHALST Don't allow changes to past data
// ************************************************************
// *********************
Program SY0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  MNVREC MNVREC; // record
  SQLCA SQLCA; // record
  SY0QW01 SY0QW01; // record
  SY0QW02 SY0QW02; // record
  SY0QW03 SY0QW03; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY5REC SY5REC; // record
  SY9REC SY9REC; // record
  SYAREC SYAREC; // record
  SYWREC SYWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VZFC0001 VZFC0001; // record
  WSY1550 WSY1550; // record
  XP0GW01 XP0GW01; // record
  XP0GW02 XP0GW02; // record
  XX0XW02 XX0XW02; // record
  ZFCWREC ZFCWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SYRGTBL {deleteAfterUse = yes}; // table
  use SYEUTBL {deleteAfterUse = yes}; // table
  use SYZTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLCTBL {deleteAfterUse = yes}; // table
  use XPYTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use SY0QM.SY0QM001,  // forms
      SY0QM.XP0GM001, 
      SY0QM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SY0Q100: SY0Q100();
    goto SY0Q200;
    SY0Q200: SY0Q200();
    if (converseVar.eventKey is pa2) /* user wants to restart*/
      goto SY0Q100; /* go all the way to the top*/
    end
    if (converseVar.validationMsgNum == 0) /* pf key problems?*/
      goto SY0Q300; /* no - go validate the fields*/
    else
      goto SY0Q200; /* bad pf key - reconverse map*/
    end
    SY0Q300: SY0Q300();
    if (converseVar.validationMsgNum != 0)
      goto SY0Q200; /* errors - reconverse screen*/
    else
      goto SY0Q400; /* good data - on to next screen*/
    end
    SY0Q400: SY0Q400();
    if (converseVar.eventKey is pa2) /* restart program*/
      goto SY0Q100; /* go all the way to the top*/
    else
      if (converseVar.validationMsgNum != 0) /* we have pf problems*/
        goto SY0Q400; /* go back and reconverse*/
      else
        goto SY0Q500; /* go and check the change*/
      end
    end
    SY0Q500: SY0Q500();
    if (converseVar.validationMsgNum != 0) /* errors in calc data*/
      goto SY0Q400; /* go back and show them*/
    else
      goto SY0Q525; /* update 1st qual data*/
    end
    SY0Q525: SY0Q525();
    if (converseVar.validationMsgNum == 0) /* no errors, update 2nd qual*/
      goto SY0Q550;
    else
      goto SY0Q400; /* go back and reconverse*/
    end
    SY0Q550: SY0Q550();
    if (converseVar.validationMsgNum != 0 /* errors in data - reconverse*/
     || converseVar.eventKey is pf12)     /* validate only*/
      goto SY0Q400; /* go and reconverse*/
    else
      goto SY0Q600; /* go and update*/
    end
    SY0Q600: SY0Q600();
    goto SY0Q200;
  end // end main
end // end SY0Q

// program initialization
Function SY0Q100()
  XSENTRY(); /* check security*/
  XSSEGTR(); /* set segemented transaction id*/
  set SY0QW01 empty;
  set TA1REC empty;
  set TA2REC empty;
  set SYWREC empty;
  TA1REC.TA1LOC = "SY0Q100"; /* in case we need ta0020*/
  TA2REC.TA2DTOPT = "GETDATE "; /* we want current date*/
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* go get it*/
  SY0QW01.SY0QWCUD = TA2REC.TA2GRGGN; /* and move it*/
  set SY0QM001 initial;
  SY0QM001.SYMCURDT = VGVar.currentShortGregorianDate;
  SY0QW01.SY0QWREV = "00";
  SY0QM001.SY0QWREV = SY0QW01.SY0QWREV; /* program revision number*/
  SY0QM001.XGPCD = COMMAREA.XGPCD;
  SY0QW01.XGPCD = COMMAREA.XGPCD;
  SY0QSTP();
                                   /* set-up to converse top half of screen*/
  SY0QS05(); /* get gpc description*/
  if (converseVar.validationMsgNum != 0)
    set SY0QM001.XGPCD cursor, bold;
  else
    /* next sentence*/
  end

   /* Now, find out what region user is and set-up table of*/
   /* valid country/currenties the user can enter.*/
  set WSY1550 empty;
  XPSY008(); /* Get users region*/
  if (SYWREC.SYW-REG-TBL-SIZE > 0)
    if (SYWREC.SYW-ALL-REGIONS-FL == "Y")
      SY0QM001.XCTCD = "USA";
      SY0QM001.ZFC-CRCY-CD = "USD";
    else
      XPSY009(); /* Get countries for region*/
      if (WSY1550-RETURN-CODE == 00
       && WSY1550-TABLE-SIZE == 1)
        SY0QM001.XCTCD = WSY1550.XCT-CTRY-CD[1];
        SY0QM001.ZFC-CRCY-CD = WSY1550.ZFC-CRCY-CD[1];
      end
    end
  else /* No region for user, tell them*/
    converseLib.validationFailed(124); /* User Id not authorized*/
  end
  if (SY0QM001.XCTCD != " ")
    if (SY0QM001.XCTCD in XCTTBL.XCTCD)
      SY0QM001.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
    SY0QS-GET-ZFC();
  else
    set SY0QM001.XCTCD cursor;
  end


end // end SY0Q100

// top half converse of screen
Function SY0Q200()
  TA1REC.TA1LOC = "SY0Q200"; /* in case we need ta0020*/
  SY0QM001.SYMPRONM = "SY0Q200"; /* move it onto screen*/
  if (converseVar.validationMsgNum == 0
   || converseVar.validationMsgNum == 11) /* file update successfull*/
    set SY0QM001.SY1STNBR cursor;
  else
    /* next sentence*/
  end
  converse SY0QM001 ;
  SY0QSTP(); /* set fields back to normal*/
  converseLib.validationFailed(0); /* set to zero before validations*/
  SY0QM001.SYMSCMSG = " "; /* blank out user message area*/

  if (converseVar.eventKey is pf3) /* 'stop run'*/
    COMMAREA.CATOAP = "SY0N";
    COMMAREA.CAITEM = " ";
    XSEXIT(); /* give it a try*/
    /* we should not return unless we have a problem*/
    /* and since i'm not sure what to do, we will die.*/
    exit program;
  end

  if (converseVar.eventKey is pa2) /* user wants to restart*/
    exit stack; /* we will deal with this in flow*/
  end

  if (converseVar.eventKey is pf4) /* we want to return to menu*/
    XSPF4();
    /* we should not return form xspf4 unless we have a problem*/
    /* so set-up for the error and map reconverse*/
    converseLib.validationFailed(1); /* for if statement in flow*/
    SY0QM001.SYMSCMSG = COMMAREA.CAMSG;
  else
    if (converseVar.eventKey is pf12
     || converseVar.eventKey is enter)
      if (SY0QM001.CATOAP != "    ") /* user requesting program*/
        COMMAREA.CATOAP = SY0QM001.CATOAP;
        COMMAREA.CAITEM = SY0QM001.CAITEM;
        XSEXIT(); /* give it a try*/
        /* we should not return form xspf4 unless we have a problem*/
        /* so set-up for the error and map reconverse*/
        converseLib.validationFailed(1); /* for if statement in flow*/
        SY0QM001.SYMSCMSG = COMMAREA.CAMSG;
        set SY0QM001.CATOAP cursor, bold;
      else
        /* next sentence              ;good pf key entered*/
      end

    else /* any left overs after this if are*/
                                   /* errors*/
      converseLib.validationFailed(19); /* INVALID PF KEY ENTERED*/
    end
  end
end // end SY0Q200

// validate screen fields
Function SY0Q300()
  TA1REC.TA1LOC = "SY0Q300"; /* in case we need to call ta0020*/
  SY0QS05(); /* validate gpc*/
  SY0QS65(); /* validate 2nd qual calc data*/
  SY0QS16(); /* validate price type entered*/
  SY0QS15(); /* validate dimension code*/
  SY0QS10(); /* validate style number*/

  SY0QS-POPUPS(); /* check for pop-up displays*/

  SY0QS-GET-ZFC(); /* get currency description*/

  SY0QM001.XCTDESC = " ";
  if (SY0QM001.XCTCD in XCTTBL.XCTCD)
    SY0QM001.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    if (XCTTBL.XXXSTAT[sysVar.arrayIndex] == "I") /* code is inactive*/
      converseLib.validationFailed(33);
      set SY0QM001.XCTCD cursor, bold;
    end
  else
    converseLib.validationFailed(3);
    set SY0QM001.XCTCD cursor, bold;
  end

   /* Now check that country/currency is valid for region*/
  if (converseVar.validationMsgNum == 0 /* If no errors*/
   && SYWREC.SYW-ALL-REGIONS-FL == "N")
    WSY1550-IDX = 1;
    SYWREC.SYW-XCT-ZFC-FL = "N";
    while (WSY1550-IDX <= WSY1550-TABLE-SIZE
     && SYWREC.SYW-XCT-ZFC-FL == "N")
      if (SY0QM001.XCTCD == WSY1550.XCT-CTRY-CD[WSY1550-IDX]
       && SY0QM001.ZFC-CRCY-CD == WSY1550.ZFC-CRCY-CD[WSY1550-IDX])
        SYWREC.SYW-XCT-ZFC-FL = "Y";
      else
        WSY1550-IDX = WSY1550-IDX + 1;
      end
    end
    if (SYWREC.SYW-XCT-ZFC-FL == "N") /* Not found in table*/
      converseLib.validationFailed(127); /* so not allowed to use*/
      set SY0QM001.XCTCD cursor, bold;
      set SY0QM001.ZFC-CRCY-CD bold;
    end
  end

  if (converseVar.validationMsgNum != 0)
    /* next sentence (errors in input data)*/
  else
    SY0QS20(); /* validate color code*/
  end

  if (converseVar.validationMsgNum == 0) /* no errors - try for price records*/
    SY0QW01.XQACD = "01"; /* try for 1st qual record*/
    SY0QS25(); /* try to get the size-price record*/
    if (converseVar.validationMsgNum != 0) /* did not find 1st qual record*/
      /* next sentence (dont try for 2nd qual record*/
    else
      SY0QW03.SY5DATA[1] = SY5REC.SY5DATA; /* save for update*/
      SY0QW01.XQACD = "02"; /* try for 2nd qual record*/
      SY0QS25();
      if (converseVar.validationMsgNum != 0)
        converseLib.validationFailed(0); /* not error if no 2nd qual rec*/
        SY0QW01.SY0QW2YN = "N"; /* no 2nd qual record*/
      else
        SY0QW01.SY0QW2YN = "Y";
        SY0QW03.SY5DATA[2] = SY5REC.SY5DATA; /* save for update*/
      end
    end
  else
    /* next sentence (errors in input data)*/
  end

  if (converseVar.validationMsgNum == 0) /* no errors - set-up for sy0q400*/
    /* **********************************************************/
    /* *  Now check to see if this country/currency can        **/
    /* *  also update the matching EUR or Local row.           **/
    /* **********************************************************/
    SYWREC.SYWINDEX = 1;
    SY0QW01.SY0QW-SYEUTBL-FLAG = "N";
    SY0QM001.SY0QM-EURO-CHG-FL = " ";
    while (SYEUTBL.XCT-CTRY-CD[SYWINDEX] != "9999"
     && SY0QW01.SY0QW-SYEUTBL-FLAG == "N")
      if ((SYEUTBL.SY-PMRY-CRCY-IND[SYWINDEX] == "L"
       && SY0QM001.XCTCD == SYEUTBL.XCT-CTRY-CD[SYWINDEX]
       && SY0QM001.ZFC-CRCY-CD == SYEUTBL.ZFC-CRCY-CD[SYWINDEX])
       || (SYEUTBL.SY-PMRY-CRCY-IND[SYWINDEX] == "E"
       && SY0QM001.XCTCD == SYEUTBL.XCT-CTRY-CD[SYWINDEX]
       && SY0QM001.ZFC-CRCY-CD == "EUR"))
        SY0QW01.SY0QW-SYEUTBL-FLAG = "Y";
        SY0QM001.SY0QM-EURO-CHG-FL = "Y";
      else
        SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
      end
    end
    SY0QSBM(); /* protect top & enable bottom*/
  end

end // end SY0Q300

// bottom half converse
Function SY0Q400()
  TA1REC.TA1LOC = "SY0Q400"; /* in case we need ta0020*/
  SY0QM001.SYMPRONM = "SY0Q400"; /* put process on screen*/
  if (SY0QW01.SY0QW2YN == "N") /* no second qual record*/
    set SY0QM001.SY0QW2ND skip; /* so set all 2nd fields skip*/
    set SY0QM001.SY0QWED2 skip;
    set SY0QM001.SY0QWMD2 skip;
    set SY0QM001.SY0QWDE2 skip;
  else
    if (SY0QM001.SY0QWPRC == "Y") /* if we figure it, they cannot*/
      set SY0QM001.SY0QW2ND skip; /* so entry of price not valid*/
    end
  end
  if (converseVar.validationMsgNum != 0 /* if no errors set cursor on change number*/
   || converseVar.eventKey is pf12)    
    if (SY0QM001.SY0QW1ST is modified) /* if modified, set modified*/
      set SY0QM001.SY0QW1ST modified; /* (these are the only fields where*/
    end /* modified data tags are used)*/
    if (SY0QM001.SY0QW2ND is modified)
      set SY0QM001.SY0QW2ND modified;
    end
    if (converseVar.eventKey is pf12)
      set SY0QM001.SY0QWCNM cursor;
    end
  else
    set SY0QM001.SY0QWCNM cursor;
  end

   /* move data from work area to screen*/

  SY0QWIDX = 1;
  while (SY0QWIDX < 7)
    SY0QM001.SY0QWT1[SY0QWIDX] = SY0QW01.SY0QWT1[SY0QWIDX];
    SY0QM001.SY0QWTE1[SY0QWIDX] = SY0QW01.SY0QWTE1[SY0QWIDX];
    SY0QM001.SY0QWTM1[SY0QWIDX] = SY0QW01.SY0QWTM1[SY0QWIDX];
    if (SY0QW01.SY0QW2YN == "Y") /* yes, we have a 2nd qual record*/
      SY0QM001.SY0QWT2[SY0QWIDX] = SY0QW01.SY0QWT2[SY0QWIDX];
      SY0QM001.SY0QWTE2[SY0QWIDX] = SY0QW01.SY0QWTE2[SY0QWIDX];
      SY0QM001.SY0QWTM2[SY0QWIDX] = SY0QW01.SY0QWTM2[SY0QWIDX];
    else /* no 2nd qual - move 0 and blanks*/
      SY0QM001.SY0QWT2[SY0QWIDX] = 0;
      SY0QM001.SY0QWTE2[SY0QWIDX] = 0;
      SY0QM001.SY0QWTM2[SY0QWIDX] = " ";
    end
    SY0QWIDX = SY0QWIDX + 1;
  end
  converse SY0QM001 ;
  SY0QSBM(); /* reset screen before error check*/
  SY0QM001.SYMSCMSG = " "; /* clear user message area*/
  converseLib.validationFailed(0); /* no errors (yet)*/

  if (converseVar.eventKey is enter /* THESE ARE VALID PF KEYS*/
   || converseVar.eventKey is pf12)
    if (SY0QM001.CATOAP != "    ") /* user requesting transfer*/
      COMMAREA.CATOAP = SY0QM001.CATOAP;
      COMMAREA.CAITEM = SY0QM001.CAITEM;
      XSEXIT(); /* give it a try*/
      /* if we return, we have a problem - so move in the message*/
      converseLib.validationFailed(1); /* to trigger flow*/
      SY0QM001.SYMSCMSG = COMMAREA.CAMSG;
      set SY0QM001.CATOAP cursor, bold;
      exit stack; /* to flow stage*/
    else
      exit stack; /* no transfer - to flow stage*/
    end
  end

  if (converseVar.eventKey is pa2) /* let pa2 pass (dealt with in flow section)*/
    exit stack; /* and goto flow stage*/
  end

  if (converseVar.eventKey is pf3) /* return to product menu*/
    COMMAREA.CATOAP = "SY0N"; /* move in product menu name*/
    COMMAREA.CAITEM = " ";
    XSEXIT(); /* try and get there*/
    /* if we return, something is very strange - so quit*/
    exit program; /* 'stop run'*/
  end

  if (converseVar.eventKey is pf4) /* user wants top level menu*/
    XSPF4(); /* try and get there*/
    /* if we return something is strange, so show it to user*/
    converseLib.validationFailed(1); /* to trigger proper flow*/
    SY0QM001.SYMSCMSG = COMMAREA.CAMSG;
    exit stack;
  end

  converseLib.validationFailed(19); /* invalid pf key*/
end // end SY0Q400

// calc. 2nd qual price
Function SY0Q500()
   /* ************************************************************/
   /* * this process will take the line of validated 2nd qual   **/
   /* * calc data and use it to determine the 2nd qual price    **/
   /* * on the change line.                                     **/
   /* ************************************************************/
  TA1REC.TA1LOC = "SY0Q500"; /* in case we need ta0020*/
  SY0QS65(); /* validate 2nd qual line*/
  if (SY0QM001.SY0QWPRC == "N" /* no 2nd qual calc needed*/
   || converseVar.validationMsgNum != 0) /* or errors in data*/
    exit stack;
  else
    if (SY0QW01.SY0QW2YN == "N") /* we have no 2nd qual record*/
      converseLib.validationFailed(80); /* so tell user about it*/
      set SY0QM001.SY0QWPRC cursor, bold;
      exit stack; /* and get out of routine*/
    else
      if (SY0QM001.SY0QW1ST is modified /* user entered something*/
       && SY0QM001.SY0QW1ST == 0)       /* and it was zero*/
        SY0QM001.SY0QW2ND = 0; /* zero 2nd qual change price*/
        exit stack; /* and exit this routine*/
      end
    end
  end



   /* now multiply the 1st quality price by the percentage*/
   /* entered by the user.  then seperate the cents from*/
   /* the whole dollar amounts so we can check for the*/
   /* proper rounding.*/

  SY0QW01.SY0QW2ND = SY0QM001.SY0QW1ST * SY0QW01.SY0QWPER;
  SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + SY0QM001.SY0QWCON;
  SY0QW01.SY0QWHDL = SY0QW01.SY0QW2ND;
  SY0QW01.SY0QWFRC = SY0QW01.SY0QW2ND - SY0QW01.SY0QWHDL;



   /* now if the user is not requesting rounding, or the value*/
   /* of the cents is 0 or 50 (these two values are valid for*/
   /* all rounding options) our work is done - so exit.*/

   /* tcs changes begin 10/22/99*/
   /* if the user is not requesting rounding use R function to round*/
  if (SY0QM001.SY0QWRND == 0) /* no rounding required*/
    SY0QW01.SY0QW2ND = mathLib.round(SY0QM001.SY0QW1ST * SY0QW01.SY0QWPER, -mathLib.decimals(SY0QW01.SY0QW2ND));
    SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + SY0QM001.SY0QWCON;
    SY0QM001.SY0QW2ND = SY0QW01.SY0QW2ND;
    exit stack;
  end
   /* tcs changes end   10/22/99*/

   /* tcs changes begin 11/03/99*/
  if (SY0QM001.SY0QWRND != -1
   && SY0QM001.SY0QWRND != +1)
   /* tcs changes end   11/03/99*/
    if (SY0QW01.SY0QWFRC == 0
     || SY0QW01.SY0QWFRC == .50)
      SY0QM001.SY0QW2ND = SY0QW01.SY0QW2ND;
      exit stack;
    end
  end



   /* now begin the checks for the type of rounding we need*/
   /* to perform. the first check is for 50 or -50.*/

  SY0QW01.SY0QW2ND = SY0QW01.SY0QWHDL;
  if (SY0QM001.SY0QWRND == .50
   || SY0QM001.SY0QWRND == -.50)
    if (SY0QM001.SY0QWRND == .50) /* rounding up*/
      if (SY0QW01.SY0QWFRC < .50)
        SY0QW01.SY0QWFRC = .50;
      else
        SY0QW01.SY0QWFRC = 0;
        SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + 1;
      end
    else /* rounding down*/
      if (SY0QW01.SY0QWFRC < .50)
        SY0QW01.SY0QWFRC = 0;
      else
        SY0QW01.SY0QWFRC = .50;
      end
    end
    SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + SY0QW01.SY0QWFRC;
    SY0QM001.SY0QW2ND = SY0QW01.SY0QW2ND;
    exit stack;
  end


  SY0QW01.SY0QW2ND = SY0QW01.SY0QWHDL;
  if (SY0QM001.SY0QWRND == 1.00
   || SY0QM001.SY0QWRND == -1.00)
    if (SY0QM001.SY0QWRND == 1.00)
      SY0QW01.SY0QWFRC = 0;
      SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + 1;
    end
    if (SY0QM001.SY0QWRND == -1.00)
      SY0QW01.SY0QWFRC = 0;
      SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + SY0QW01.SY0QWFRC;
    end
    SY0QM001.SY0QW2ND = SY0QW01.SY0QW2ND;
    exit stack;
  end


   /* at this point in the process, the only rounding numbers*/
   /* to deal with are .25 and -.25, so if the fraction is =*/
   /* to .25 or .75 our work is done!*/

  if (SY0QW01.SY0QWFRC == .25 /* don't need to round these*/
   || SY0QW01.SY0QWFRC == .75)
    SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + SY0QW01.SY0QWFRC;
    SY0QM001.SY0QW2ND = SY0QW01.SY0QW2ND;
    exit stack; /* all done so exit to flow*/
  end
  if (SY0QM001.SY0QWRND == .25) /* user wants to round up*/
    if (SY0QW01.SY0QWFRC < .25)
      SY0QW01.SY0QWFRC = .25;
    else
      if (SY0QW01.SY0QWFRC < .50)
        SY0QW01.SY0QWFRC = .50;
      else
        if (SY0QW01.SY0QWFRC < .75)
          SY0QW01.SY0QWFRC = .75;
        else /* rounding up to next whole dollar*/
          SY0QW01.SY0QWFRC = 0;
          SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + 1;
        end
      end
    end
  else /* the only thing that can be left is*/
                                   /* -.25*/
    if (SY0QW01.SY0QWFRC < .25)
      SY0QW01.SY0QWFRC = 0;
    else
      if (SY0QW01.SY0QWFRC < .50)
        SY0QW01.SY0QWFRC = .25;
      else
        if (SY0QW01.SY0QWFRC < .75)
          SY0QW01.SY0QWFRC = .50;
        else
          SY0QW01.SY0QWFRC = .75;
        end
      end
    end
  end
  SY0QW01.SY0QW2ND = SY0QW01.SY0QW2ND + SY0QW01.SY0QWFRC;
  SY0QM001.SY0QW2ND = SY0QW01.SY0QW2ND;
end // end SY0Q500

// modify price data(1st qual)
Function SY0Q525()
   /* ************************************************************/
   /* * this process will take the line of price data and       **/
   /* * modify the price data 'in memory'. this process will    **/
   /* * deal with only the 1st quality prices.                  **/
   /* ************************************************************/
  TA1REC.TA1LOC = "SY0Q525"; /* in case we need ta0020*/
  SY0QW01.SY0QWSW = 1; /* checking 1st qual date change*/
  if (SY0QM001.SY0QWCNM == 0 /* change number not in valid range*/
   || SY0QM001.SY0QWCNM > 6)
    converseLib.validationFailed(40); /* tell the user*/
    set SY0QM001.SY0QWCNM cursor, bold;
    exit stack; /* can't continue*/
  end

  if (SY0QM001.SY0QW1ST is modified) /* have they entered a price?*/
    SY0QW01.SY0QWFMD = "Y"; /* set flag to say yes*/
    if (SY0QM001.SY0QW1ST is blanks)
      SY0QSFM();
    end /* is it nulls*/
  else
    SY0QW01.SY0QWFMD = "N";
  end

  if (SY0QW01.SY0QWFMD == "N" /* do we have anything to change?*/
   && SY0QM001.SY0QWED1 == 0  
   && SY0QM001.SY0QWMD1 == " "
   && SY0QM001.SY0QWDE1 == " ")
    SY0QW01.SY0QWCFG = "N"; /* set flag to show no changes*/
    SY0QW03.SY0QW-CHG-01-FL = "N";
    exit stack; /* no changes to 1st qual data*/
  else
    SY0QW01.SY0QWCFG = "Y"; /* yes, something may get changed*/
    SY0QW03.SY0QW-CHG-01-FL = "Y";
  end

   /* Validate the matching EUR/Local price data*/
  if (SY0QM001.SY0QM-EURO-CHG-FL == "Y")
    if (SYEUTBL.SY-PMRY-CRCY-IND[SYWINDEX] == "L") /* Local to EUR*/
      SY0QW01.ZFC-CRCY-CD = "EUR";
    else /* From EUR to Local*/
      SY0QW01.ZFC-CRCY-CD = SYEUTBL.ZFC-CRCY-CD[SYWINDEX];
    end
    SY0QW01.XQACD = "01"; /* try for 1st qual record*/
    SY0QS25-EURO(); /* try to get the price record*/
    if (converseVar.validationMsgNum == 0) /* found 1st qual record*/
      SY0QW03.SY5DATA[3] = SY5REC.SY5DATA; /* save for update*/
    else
      exit stack;
    end
  end

  SY0QWIDX = SY0QM001.SY0QWCNM;
  if (SY0QW01.SY0QWTE1[SY0QWIDX] == 0) /* nothing for user to change*/
    set SY0QM001.SY0QWCNM bold;
    converseLib.validationFailed(81); /* enter existing price occurance*/
    exit stack;
  else
   /* Now check to see if user is changing data in the past*/
    if (SY0QW01.SY0QWTE1[SY0QWIDX] < SY0QW01.SY0QWCUD) /* In the past?*/
      set SY0QM001.SY0QWCNM cursor, bold;
      converseLib.validationFailed(134); /* Data in the past cannot be changed*/
      exit stack;
    end
  end

  if (SY0QM001.SY0QWDE1 == "D")
    if (SY0QWIDX == 1
     && SY0QW01.SY0QWTE1[2] == 0
     && SY0QW01.SY0QWTE1[3] == 0
     && SY0QW01.SY0QWTE1[4] == 0
     && SY0QW01.SY0QWTE1[5] == 0
     && SY0QW01.SY0QWTE1[6] == 0)
      converseLib.validationFailed(82); /* cannot delete last price entry*/
      set SY0QM001.SY0QWDE1 cursor, bold;
      exit stack; /* to flow stage*/
    else
      SY0QS70(); /* do we have a current price?*/
      if (converseVar.validationMsgNum != 0) /* no - so get out*/
        exit stack;
      end
    end
    if (converseVar.eventKey is pf12) /* user only wants to validate*/
      /* next sentence              ;don't do the update*/
    else
      SY0QW01.SY0QWT1[SY0QWIDX] = 0;
      SY0QW01.SY0QWTE1[SY0QWIDX] = 0;
      SY0QW01.SY0QWTM1[SY0QWIDX] = " ";
      SY0QS35(); /* go and reorganize table*/
      if (SY0QM001.SY0QM-EURO-CHG-FL == "Y")
        SY0QW01.SY0QWT3[SY0QWIDX] = 0;
        SY0QW01.SY0QWTE3[SY0QWIDX] = 0;
        SY0QW01.SY0QWTM3[SY0QWIDX] = " ";
        SY0QS35-EURO(); /* go and reorganize table*/
      end
      exit stack; /* now go to flow stage*/
    end
  else
    if (SY0QM001.SY0QWDE1 != " ")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0QM001.SY0QWDE1 cursor, bold;
      exit stack;
    else
      /* next sentence (valid delete flag)*/
    end
  end

  if (SY0QW01.SY0QWFMD == "Y") /* something has been entered*/
    if (SY0QM001.XGPCD == "02" /* zero price is invalid for*/
     || SY0QM001.XGPCD == "03") /* gpc codes 02 and 03*/
      if (SY0QM001.SY0QW1ST == 0)
        converseLib.validationFailed(84); /* zero price invalid*/
        exit stack;
      end
    end
  end

  if (SY0QW01.SY0QWFMD == "Y" /* something has been entered*/
   && converseVar.eventKey is enter)
    SY0QW01.SY0QWT1[SY0QWIDX] = SY0QM001.SY0QW1ST;
    if (SY0QM001.SY0QM-EURO-CHG-FL == "Y")
      if (SYEUTBL.SY-PMRY-CRCY-IND[SYWINDEX] == "L")
        if (SY0QM001.SY0QW1ST == 0.01
         || (SY0QM001.SY0QW1ST == 1.00
         && SY0QM001.ZFC-CRCY-CD == "ITL"))
          SY0QW01.SY0QWT3[SY0QWIDX] = 0.01;
        else
          SY0QW01.SY0QWT3[SY0QWIDX] = mathLib.round(SY0QM001.SY0QW1ST /           SYEUTBL.TY-EURO-RATE-AMT[SYWINDEX], -mathLib.decimals(SY0QW01.SY0QWT3[SY0QWIDX]));
        end
      else
        if (SY0QM001.SY0QW1ST == 0.01)
          if (SY0QM001.ZFC-CRCY-CD == "ITL")
            SY0QW01.SY0QWT3[SY0QWIDX] = 1.00;
          else
            SY0QW01.SY0QWT3[SY0QWIDX] = SY0QM001.SY0QW1ST;
          end
        else
          SY0QW01.SY0QWT3[SY0QWIDX] = mathLib.round(SY0QM001.SY0QW1ST *           SYEUTBL.TY-EURO-RATE-AMT[SYWINDEX], -mathLib.decimals(SY0QW01.SY0QWT3[SY0QWIDX]));
        end
      end
    end
  else
    /* next sentence*/
  end

  if (SY0QM001.SY0QWMD1 == " "
   || SY0QM001.SY0QWMD1 == "*"
   || SY0QM001.SY0QWMD1 == "M"
   || SY0QM001.SY0QWMD1 == "O"
   || SY0QM001.SY0QWMD1 == "S"
   || SY0QM001.SY0QWMD1 == "E")
    if (converseVar.eventKey is enter
     && SY0QM001.SY0QWMD1 != " ")
      if (SY0QM001.SY0QWMD1 == "*") /* this means set to spaces*/
        SY0QW01.SY0QWTM1[SY0QWIDX] = " "; /* do it*/
        SY0QW01.SY0QWTM3[SY0QWIDX] = " "; /* do it*/
      else
        SY0QW01.SY0QWTM1[SY0QWIDX] = SY0QM001.SY0QWMD1;
        SY0QW01.SY0QWTM3[SY0QWIDX] = SY0QM001.SY0QWMD1;
      end
    end
  else
    converseLib.validationFailed(3); /* invalid value*/
    set SY0QM001.SY0QWMD1 cursor, bold;
  end

  if (SY0QM001.SY0QWED1 != 0) /* we have something to validate*/
    TA2REC.TA2GRGAN = SY0QM001.SY0QWED1; /* move in date*/
    SY0QS30(); /* go and validate date*/
    SY0QS70(); /* check if we still have a curr. price*/
    if (converseVar.validationMsgNum != 0) /* error in date*/
      set SY0QM001.SY0QWED1 cursor, bold;
      exit stack;
    else
      if (converseVar.eventKey is enter)
        SY0QW01.SY0QWTE1[SY0QWIDX] = TA2REC.TA2GRGGN;
        SY0QS35(); /* reorder table*/
        if (SY0QM001.SY0QM-EURO-CHG-FL == "Y")
          SY0QW01.SY0QWTE3[SY0QWIDX] = TA2REC.TA2GRGGN;
          SY0QS35-EURO(); /* go and reorganize table*/
        end
      end
    end
  else
    /* next sentence (effective date not being changed)*/
  end

end // end SY0Q525

// modify price data(2nd qual)
Function SY0Q550()
   /* ************************************************************/
   /* * this process will take the line of price data and       **/
   /* * modify the price data 'in memory'. this process will    **/
   /* * deal with only the 2nd quality prices.                  **/
   /* ************************************************************/
  TA1REC.TA1LOC = "SY0Q550"; /* in case we need ta0020*/
  SY0QW01.SY0QWSW = 2; /* 2nd qual date checking*/

  if (SY0QW01.SY0QWFMD == "Y" /* 1st qual price entered*/
   && SY0QM001.SY0QWPRC == "Y") /* and auto-calc 2nd qual*/
    /* next sentence (then skip next test and*/
                   /* leave modified flag on)*/
  else
    if (SY0QM001.SY0QW2ND is modified) /* they entered something*/
      SY0QW01.SY0QWFMD = "Y"; /* set it to yes*/
      if (SY0QM001.SY0QW2ND is blanks)
        SY0QSFM();
      end /* set no if nulls*/
    else
      SY0QW01.SY0QWFMD = "N"; /* they haven't changed it*/
    end
  end

  if (SY0QW01.SY0QWFMD == "N" /* do we have anything to change?*/
   && SY0QM001.SY0QWED2 == 0  
   && SY0QM001.SY0QWMD2 == " "
   && SY0QM001.SY0QWDE2 == " ")
    if (SY0QW01.SY0QWCFG == "N") /* user has not changed anything*/
      converseLib.validationFailed(73); /* enter data for update*/
      exit stack;
    else
      SY0QW03.SY0QW-CHG-02-FL = "N";
      exit stack; /* nothing to change - to flow*/
    end
  else
    SY0QW03.SY0QW-CHG-02-FL = "Y";
  end

   /* Validate the matching EUR/Local price data*/
  if (SY0QM001.SY0QM-EURO-CHG-FL == "Y")
    if (SYEUTBL.SY-PMRY-CRCY-IND[SYWINDEX] == "L") /* Local to EUR*/
      SY0QW01.ZFC-CRCY-CD = "EUR";
    else /* From EUR to Local*/
      SY0QW01.ZFC-CRCY-CD = SYEUTBL.ZFC-CRCY-CD[SYWINDEX];
    end
    SY0QW01.XQACD = "02"; /* try for 1st qual record*/
    SY0QS25-EURO(); /* try to get the price record*/
    if (converseVar.validationMsgNum == 0) /* found 1st qual record*/
      SY0QW03.SY5DATA[4] = SY5REC.SY5DATA; /* save for update*/
    else
      exit stack;
    end
  end

  SY0QWIDX = SY0QM001.SY0QWCNM;
  if (SY0QW01.SY0QWTE2[SY0QWIDX] == 0)
    if (SY0QM001.SY0QWPRC == "N") /* no 2nd qual calc*/
      set SY0QM001.SY0QWCNM cursor, bold;
      converseLib.validationFailed(81); /* no data in this row*/
    else
      SY0QM001.SY0QW2ND = 0; /* zero 2nd qual price if error*/
      set SY0QM001.SY0QWPRC cursor, bold;
      converseLib.validationFailed(80); /* must have 2nd qual rec to calc*/
    end
    exit stack;
  else
   /* Now check to see if user is changing data in the past*/
    if (SY0QW01.SY0QWTE2[SY0QWIDX] < SY0QW01.SY0QWCUD) /* In the past?*/
      set SY0QM001.SY0QWCNM cursor, bold;
      converseLib.validationFailed(134); /* Data in the past cannot be changed*/
      exit stack;
    end
  end

  if (SY0QM001.SY0QWDE2 == "D")
    if (SY0QWIDX == 1
     && SY0QW01.SY0QWTE2[2] == 0
     && SY0QW01.SY0QWTE2[3] == 0
     && SY0QW01.SY0QWTE2[4] == 0
     && SY0QW01.SY0QWTE2[5] == 0
     && SY0QW01.SY0QWTE2[6] == 0)
      converseLib.validationFailed(82); /* cannot delete last price entry*/
      set SY0QM001.SY0QWDE2 cursor, bold;
      exit stack; /* go to flow*/
    else
      SY0QS70(); /* do we still have a current price?*/
      if (converseVar.validationMsgNum != 0) /* no, so exit*/
        exit stack;
      end
    end
    if (converseVar.eventKey is pf12) /* user only wants to validate*/
      /* next sentence              ;so don't change anything*/
    else
      SY0QW01.SY0QWT2[SY0QWIDX] = 0;
      SY0QW01.SY0QWTE2[SY0QWIDX] = 0;
      SY0QW01.SY0QWTM2[SY0QWIDX] = " ";
      SY0QS36(); /* go and reorganize table*/
      if (SY0QM001.SY0QM-EURO-CHG-FL == "Y")
        SY0QW01.SY0QWT4[SY0QWIDX] = 0;
        SY0QW01.SY0QWTE4[SY0QWIDX] = 0;
        SY0QW01.SY0QWTM4[SY0QWIDX] = " ";
        SY0QS36-EURO(); /* go and reorganize table*/
      end
      exit stack; /* now go to flow stage*/
    end
  else
    if (SY0QM001.SY0QWDE2 != " ")
      converseLib.validationFailed(3); /* invalid code*/
      set SY0QM001.SY0QWDE2 bold;
      exit stack;
    else
      /* next sentence (valid delete flag)*/
    end
  end

  if (SY0QW01.SY0QWFMD == "Y" /* changing price*/
   && SY0QW01.SY0QW2YN == "N") /* no 2nd qual record - error*/
    converseLib.validationFailed(26);
    exit stack;
  end
  if (SY0QW01.SY0QWFMD == "Y") /* we have something to change*/
    if (SY0QM001.XGPCD == "02"
     || SY0QM001.XGPCD == "03")
      if (SY0QM001.SY0QW2ND == 0)
        converseLib.validationFailed(84); /* zero price invalid*/
        exit stack;
      end
    end
  end
  if (SY0QW01.SY0QWFMD == "Y" /* we have something to change*/
   && converseVar.eventKey is enter)
    SY0QW01.SY0QWT2[SY0QWIDX] = SY0QM001.SY0QW2ND;
    if (SY0QM001.SY0QM-EURO-CHG-FL == "Y")
      if (SYEUTBL.SY-PMRY-CRCY-IND[SYWINDEX] == "L")
        if (SY0QM001.SY0QW2ND == 0.01
         || (SY0QM001.SY0QW2ND == 1.00
         && SY0QM001.ZFC-CRCY-CD == "ITL"))
          SY0QW01.SY0QWT4[SY0QWIDX] = 0.01;
        else
          SY0QW01.SY0QWT4[SY0QWIDX] = mathLib.round(SY0QM001.SY0QW2ND /           SYEUTBL.TY-EURO-RATE-AMT[SYWINDEX], -mathLib.decimals(SY0QW01.SY0QWT4[SY0QWIDX]));
        end
      else
        if (SY0QM001.SY0QW2ND == 0.01)
          if (SY0QM001.ZFC-CRCY-CD == "ITL")
            SY0QW01.SY0QWT4[SY0QWIDX] = 1.00;
          else
            SY0QW01.SY0QWT4[SY0QWIDX] = SY0QM001.SY0QW2ND;
          end
        else
          SY0QW01.SY0QWT4[SY0QWIDX] = mathLib.round(SY0QM001.SY0QW2ND *           SYEUTBL.TY-EURO-RATE-AMT[SYWINDEX], -mathLib.decimals(SY0QW01.SY0QWT4[SY0QWIDX]));
        end
      end
    end
  else
    /* next sentence*/
  end

  if (SY0QM001.SY0QWMD2 == " "
   || SY0QM001.SY0QWMD2 == "*"
   || SY0QM001.SY0QWMD2 == "M"
   || SY0QM001.SY0QWMD2 == "O"
   || SY0QM001.SY0QWMD2 == "S"
   || SY0QM001.SY0QWMD2 == "E")
    if (converseVar.eventKey is enter
     && SY0QM001.SY0QWMD2 != " ")
      if (SY0QM001.SY0QWMD2 == "*") /* this means set to spaces*/
        SY0QW01.SY0QWTM2[SY0QWIDX] = " "; /* do it*/
        SY0QW01.SY0QWTM4[SY0QWIDX] = " "; /* do it*/
      else
        SY0QW01.SY0QWTM2[SY0QWIDX] = SY0QM001.SY0QWMD2;
        SY0QW01.SY0QWTM4[SY0QWIDX] = SY0QM001.SY0QWMD2;
      end
    end
  else
    converseLib.validationFailed(3); /* invalid value*/
    set SY0QM001.SY0QWMD2 cursor, bold;
  end

  if (SY0QM001.SY0QWED2 != 0) /* we have something to validate*/
    TA2REC.TA2GRGAN = SY0QM001.SY0QWED2; /* move in date*/
    SY0QS30(); /* go and validate date*/
    SY0QS70(); /* do we still have a curr. price*/
    if (converseVar.validationMsgNum != 0) /* errors in date*/
      set SY0QM001.SY0QWED2 cursor, bold;
      exit stack;
    else
      if (converseVar.eventKey is enter) /* user wants to change it*/
        SY0QW01.SY0QWTE2[SY0QWIDX] = TA2REC.TA2GRGGN;
        SY0QS36(); /* reorder table*/
        if (SY0QM001.SY0QM-EURO-CHG-FL == "Y")
          SY0QW01.SY0QWTE4[SY0QWIDX] = TA2REC.TA2GRGGN;
          SY0QS36-EURO(); /* reorder table*/
        end
      end
    end
  else
    /* next sentence (effective date not being changed)*/
  end

end // end SY0Q550

// update price, audit, & tag
Function SY0Q600()
   /* ************************************************************/
   /* * this module will 'perform' the following:               **/
   /* *   1. write 'before' audit record                        **/
   /* *   2. move price data from sy0qw01 to sy5rec             **/
   /* *   3. write 'after' audit record                         **/
   /* *   4. update price record to data base                   **/
   /* *   5. write tag record                                   **/
   /* *   6. clear screen and set-up for sy0q200 process        **/
   /* ************************************************************/
  TA1REC.TA1LOC = "SY0Q600"; /* in case we need to call ta0020*/
  TA2REC.TA2DTOPT = "GETDATE ";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* get current date/time*/

  if (SY0QW03.SY0QW-CHG-02-FL == "Y") /* we have a 2nd qual record*/
    SY5REC.SY5DATA = SY0QW03.SY5DATA[2]; /* move record*/
    SYAREC.SYABFR = SY5REC.SY5DATA; /* move record into before*/
    SY0QWIDX = 1; /* set index to 1*/
    while (SY0QWIDX < 7) /* move new data into record*/
      SY5REC.SY5PRCUN[SY0QWIDX] = SY0QW01.SY0QWT2[SY0QWIDX];
      SY5REC.SY5PCEDT[SY0QWIDX] = SY0QW01.SY0QWTE2[SY0QWIDX];
      SY5REC.SY5PSIND[SY0QWIDX] = SY0QW01.SY0QWTM2[SY0QWIDX];
      SY0QWIDX = SY0QWIDX + 1;
    end
    SY0QS40(); /* update sy5rec (size-price)*/
    SYAREC.SYAAFT = SY5REC.SY5DATA; /* move in after image*/
    SY0QS45(); /* create audit record*/
  end

  if (SY0QW03.SY0QW-CHG-01-FL == "Y") /* we have a 1st qual record*/
    SY5REC.SY5DATA = SY0QW03.SY5DATA[1]; /* move in record*/
    SYAREC.SYABFR = SY5REC.SY5DATA; /* move record into before*/
    SY0QWIDX = 1; /* set index to 1*/
    while (SY0QWIDX < 7) /* move new data into record*/
      SY5REC.SY5PRCUN[SY0QWIDX] = SY0QW01.SY0QWT1[SY0QWIDX];
      SY5REC.SY5PCEDT[SY0QWIDX] = SY0QW01.SY0QWTE1[SY0QWIDX];
      SY5REC.SY5PSIND[SY0QWIDX] = SY0QW01.SY0QWTM1[SY0QWIDX];
      SY0QWIDX = SY0QWIDX + 1;
    end
    SY0QS40(); /* update sy5rec (size-price)*/
    SYAREC.SYAAFT = SY5REC.SY5DATA; /* move in after image*/
    SY0QS45(); /* create audit record*/
    SY0QS50(); /* create tag record*/
  end

  if (SY0QM001.SY0QM-EURO-CHG-FL == "Y") /* Have EURO updates*/
    SY0Q650(); /* Go and do them*/
  end

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* commit db2 changes*/
  SY0QSCR(); /* clear bottom of screen*/
  converseLib.validationFailed(11); /* file update successfull*/
  SY0QSTP();
end // end SY0Q600

// update price, audit, & tag
Function SY0Q650()
   /* ************************************************************/
   /* * this module performs matching update for EURO changes   **/
   /* * this module will 'perform' the following:               **/
   /* *   1. write 'before' audit record                        **/
   /* *   2. move price data from sy0qw01 to sy5rec             **/
   /* *   3. write 'after' audit record                         **/
   /* *   4. update price record to data base                   **/
   /* *   5. write tag record                                   **/
   /* *   6. clear screen and set-up for sy0q200 process        **/
   /* ************************************************************/
  TA1REC.TA1LOC = "SY0Q650"; /* in case we need to call ta0020*/

  if (SY0QW03.SY0QW-CHG-02-FL == "Y") /* we have a 2nd qual record*/
    SY5REC.SY5DATA = SY0QW03.SY5DATA[4]; /* move record*/
    SYAREC.SYABFR = SY5REC.SY5DATA; /* move record into before*/
    SY0QWIDX = 1; /* set index to 1*/
    while (SY0QWIDX < 7) /* move new data into record*/
      SY5REC.SY5PRCUN[SY0QWIDX] = SY0QW01.SY0QWT4[SY0QWIDX];
      SY5REC.SY5PCEDT[SY0QWIDX] = SY0QW01.SY0QWTE4[SY0QWIDX];
      SY5REC.SY5PSIND[SY0QWIDX] = SY0QW01.SY0QWTM4[SY0QWIDX];
      SY0QWIDX = SY0QWIDX + 1;
    end
    SY0QS40(); /* update sy5rec (size-price)*/
    SYAREC.SYAAFT = SY5REC.SY5DATA; /* move in after image*/
    SY0QS45(); /* create audit record*/
  end

  if (SY0QW03.SY0QW-CHG-01-FL == "Y") /* we have a 1st qual record*/
    SY5REC.SY5DATA = SY0QW03.SY5DATA[3]; /* move record*/
    SYAREC.SYABFR = SY5REC.SY5DATA; /* move record into before*/
    SY0QWIDX = 1; /* set index to 1*/
    while (SY0QWIDX < 7) /* move new data into record*/
      SY5REC.SY5PRCUN[SY0QWIDX] = SY0QW01.SY0QWT3[SY0QWIDX];
      SY5REC.SY5PCEDT[SY0QWIDX] = SY0QW01.SY0QWTE3[SY0QWIDX];
      SY5REC.SY5PSIND[SY0QWIDX] = SY0QW01.SY0QWTM3[SY0QWIDX];
      SY0QWIDX = SY0QWIDX + 1;
    end
    SY0QS40(); /* update sy5rec (size-price)*/
    SYAREC.SYAAFT = SY5REC.SY5DATA; /* move in after image*/
    SY0QS45(); /* create audit record*/
  end

end // end SY0Q650

// Get Currency code Desc.
Function SY0QS-GET-ZFC()


       /* ******************************************/
       /* *     GET CURRENCY DESCRIPTION          **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;
  SY0QM001.ZFC-CRCY-DESC = " ";

  VZFC0001.ZFC-CRCY-CD = SY0QM001.ZFC-CRCY-CD;

  call "DC0060" ("S ", SQLCA, VZFC0001) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY0QM001.ZFC-CRCY-DESC = VZFC0001.ZFC-CRCY-DESC;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SY0QM001.VAGen_EZEMSG = "INVALID CURRENCY CODE";
      set SY0QM001.ZFC-CRCY-CD cursor, bold;
      converseLib.validationFailed(3);
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY0Q   ";
      TA1REC.TA1LOCAT[1] = "SY0QS-   ";
      TA1REC.TA1LOCAT[2] = "GET-ZFC  ";
      TA1REC.TA1LOCAT[3] = "DC0060   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY0QM001";
      TA1REC.TA1DBASE = "CORP";
      TA1REC.TA1TBLVU = "VZFC0001";
      TA1TBLKE = VZFC0001.ZFC-CRCY-CD;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
      converseLib.validationFailed(23); /* corp table error....*/
      set SY0QM001.ZFC-CRCY-CD cursor, bold;
    end
  end

end // end SY0QS-GET-ZFC

// Check for & Display popups
Function SY0QS-POPUPS()

   /* Examine screen and display any pop-up requests to user*/

  XP0GW01.XP0GW-SEL-COLR-CD = SY0QM001.SY2CLRID;
  if (XP0GW01.XP0GW-SEL-COLR-CD1 == "?" /* We want pop-up*/
   || XP0GW01.XP0GW-SEL-COLR-CD2 == "?" 
   || XP0GW01.XP0GW-SEL-COLR-CD3 == "?")
    XP0GW01.XGPCD = SY0QM001.XGPCD;
    XP0GW01.SY1STNBR = SY0QM001.SY1STNBR;
    XP0G001(); /* so do it*/
    if (XP0GW02.XP0GWERR == "Y") /* we have an error*/
      if (XP0GW02.XP0GWENR == 0) /* Invalid function key*/
        converseLib.validationFailed(19);
      end
      if (XP0GW02.XP0GWENR == 1) /* No colors found*/
        converseLib.validationFailed(7);
      end
      if (XP0GW02.XP0GWENR == 2) /* DB2 Error*/
        converseLib.validationFailed(21);
      end
    else
      if (XP0GW02.XP0GWPIX != 0) /* and user selected*/
        SY0QM001.SY2CLRID = XP0GW01.SY2CLRID[XP0GWPIX];
        SY0QM001.XDMCD = XP0GW01.XDMCD[XP0GWPIX];
      else
        converseLib.validationFailed(59); /* No colors selected*/
      end
    end
  end


  if (SY0QM001.XCTCD == "?") /* Show pop-up*/
    XPXX001(); /* init pop-up*/
    XX0XW02.XX0XWHDR = "    Country Codes";
    while (XX0XW02.XX0XWEND == "N")
      XPXCT01(); /* show the window*/
    end
    if (XX0XW02.XX0XWERR == "N" /* no errors*/
     && XX0XW02.XX0XWPIX > 0)   /* user selected something*/
      SY0QM001.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
    end
  end

  if (SY0QM001.ZFC-CRCY-CD == "?") /* Show pop-up*/
    XPXX001(); /* init pop-up*/
    XX0XW02.XX0XWHDR = "    Currency Codes";
    while (XX0XW02.XX0XWEND == "N")
      XPZFC-POP(); /* show the window*/
    end
    if (XX0XW02.XX0XWERR == "N" /* no errors*/
     && XX0XW02.XX0XWPIX > 0)   /* user selected something*/
      SY0QM001.ZFC-CRCY-CD = ZFCWREC.ZFC-CRCY-CD[XX0XWPIX];
    end
  end

  converseLib.clearScreen();
   /* Refresh map*/

end // end SY0QS-POPUPS

// get gpc description
Function SY0QS05()
  if (SY0QM001.XGPCD in XGPTBL.XGPCD)
    SY0QM001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    if (SY0QM001.XGPCD == "02"
     && COMMAREA.CAALVL[2] != "Y")
      converseLib.validationFailed(35);
      set SY0QM001.XGPCD cursor, bold;
    else
      if (SY0QM001.XGPCD == "03"
       && COMMAREA.CAALVL[3] != "Y")
        converseLib.validationFailed(35);
        set SY0QM001.XGPCD cursor, bold;
      else
        /* next sentence*/
      end
    end
  else
    converseLib.validationFailed(31);
    set SY0QM001.XGPCD cursor, bold;
  end
end // end SY0QS05

// select style from db2
Function SY0QS10()
  TA1REC.TA1LOCAT[1] = "SY0QS10"; /* in case we need ta0020*/
  SY1REC.XGPCD = SY0QM001.XGPCD;
  SY1REC.SY1STNBR = SY0QM001.SY1STNBR;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(5);
    set SY0QM001.SY1STNBR cursor, bold;
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      SY0QS55();
      converseLib.validationFailed(20);
      return;
    else
      /* next sentence (we found the record)*/
    end
  end
  SY0QM001.SY1SSTNM = SY1REC.SY1SSTNM;
  if (SY1REC.XUMCD in XUMTBL.XUMCD)
    SY0QM001.XUMDESC = XUMTBL.XUMDESC[sysVar.arrayIndex];
  else
    SY0QM001.XUMDESC = "?????";
  end
end // end SY0QS10

// get dimension code desc
Function SY0QS15()
  if (SY0QM001.XDMCD == "  "
   || SY0QM001.XDMCD == "**")
    SY0QM001.XDMCD = "**";
    SY0QM001.XDMABRV = " ";
    return;
  else
    /* next sentence*/
  end
  if (SY0QM001.XDMCD in XDMTBL.XDMCD)
    SY0QM001.XDMABRV = XDMTBL.XDMABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(3);
    set SY0QM001.XDMCD cursor, bold;
    set SY0QM001.SY2CLRID bold;
  end
end // end SY0QS15

// get price type description
Function SY0QS16()
   /* ************************************************************/
   /* * sy0qs16                                                 **/
   /* *          this statement group will get the price type   **/
   /* *          description from the price type table. the     **/
   /* *          input price type will be from the sy0qm001     **/
   /* *          screen (sy0qm001.xpycd).                       **/
   /* ************************************************************/

  if (SY0QM001.XPYCD in XPYTBL.XPYCD)
    if (COMMAREA.XDVCD == "02" /* NIL user*/
     && COMMAREA.XDVCD != XPYTBL.XDVCD[sysVar.arrayIndex])
      converseLib.validationFailed(3);
      set SY0QM001.XPYCD cursor, bold;
    else
      SY0QM001.XPYDESC = XPYTBL.XPYDESC[sysVar.arrayIndex];
    end
  else
    converseLib.validationFailed(3);
    set SY0QM001.XPYCD cursor, bold;
  end
end // end SY0QS16

// get style/color from db2
Function SY0QS20()
  TA1REC.TA1LOCAT[1] = "SY0QS20"; /* in case we need ta0020*/
  if (SY0QM001.SY2CLRID == "   "
   || SY0QM001.SY2CLRID == "***")
    SY0QM001.SY2CLRID = "***";
    SY0QM001.SY2CLRAB = " ";
    return;
  else
    /* next sentence*/
  end
  SY2REC.XGPCD = SY0QM001.XGPCD;
  SY2REC.SY1STNBR = SY0QM001.SY1STNBR;
  SY2REC.SY2CLRID = SY0QM001.SY2CLRID;
  SY2REC.XDMCD = SY0QM001.XDMCD;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(7); /* style record does not exist*/
    set SY0QM001.SY2CLRID cursor, bold;
    set SY0QM001.XDMCD bold;
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      SY0QS55(); /* go call ta0020 to report error*/
      converseLib.validationFailed(21);
      return;
    else
      SY0QM001.SY2CLRAB = SY2REC.SY2CLRAB;
    end
  end
end // end SY0QS20

// get size/price data from db2
Function SY0QS25()
  TA1REC.TA1LOCAT[1] = "SY0QS25"; /* in case we need ta0020*/
  SY5REC.XGPCD = SY0QM001.XGPCD;
  SY5REC.SY1STNBR = SY0QM001.SY1STNBR;
  SY5REC.SY2CLRID = SY0QM001.SY2CLRID;
  SY5REC.XDMCD = SY0QM001.XDMCD;
  SY5REC.SY5SZID = 0;
  SY5REC.XPYCD = SY0QM001.XPYCD;
  SY5REC.XQACD = SY0QW01.XQACD;
  SY5REC.XCT-CTRY-CD = SY0QM001.XCTCD;
  SY5REC.ZFC-CRCY-CD = SY0QM001.ZFC-CRCY-CD;
  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    if (SY0QW01.XQACD == "02") /* ARE WE TRYING FOR 2ND QUAL?*/
      converseLib.validationFailed(18); /* to trigger proper logic in process*/
      return; /* and return to process*/
    else
      converseLib.validationFailed(18); /* size record does not exist*/
      set SY0QM001.SY1STNBR cursor, bold;
      set SY0QM001.SY2CLRID bold;
      set SY0QM001.XDMCD bold;
      set SY0QM001.XPYCD bold;
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      SY0QS55(); /* go call ta0020 to report error*/
      converseLib.validationFailed(22);
      return;
    else

      /* now load price data into working storage*/

      SY0QWIDX = 1;
      while (SY0QWIDX < 7)
        SY0QS60(); /* load price data into tables*/
        SY0QWIDX = SY0QWIDX + 1;
      end
    end
  end
end // end SY0QS25

// get size/price data from db2
Function SY0QS25-EURO()
  TA1REC.TA1LOCAT[1] = "SY0QS25E"; /* in case we need ta0020*/
  SY5REC.XGPCD = SY0QM001.XGPCD;
  SY5REC.SY1STNBR = SY0QM001.SY1STNBR;
  SY5REC.SY2CLRID = SY0QM001.SY2CLRID;
  SY5REC.XDMCD = SY0QM001.XDMCD;
  SY5REC.SY5SZID = 0;
  SY5REC.XPYCD = SY0QM001.XPYCD;
  SY5REC.XQACD = SY0QW01.XQACD;
  SY5REC.XCT-CTRY-CD = SY0QM001.XCTCD;
  SY5REC.ZFC-CRCY-CD = SY0QW01.ZFC-CRCY-CD;
  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (SY0QW01.XQACD == "01")
      if (SY5REC.SY5PCEDT[1] != SY0QW01.SY0QWTE1[1]
       || SY5REC.SY5PCEDT[2] != SY0QW01.SY0QWTE1[2]
       || SY5REC.SY5PCEDT[3] != SY0QW01.SY0QWTE1[3]
       || SY5REC.SY5PCEDT[4] != SY0QW01.SY0QWTE1[4]
       || SY5REC.SY5PCEDT[5] != SY0QW01.SY0QWTE1[5]
       || SY5REC.SY5PCEDT[6] != SY0QW01.SY0QWTE1[6])
        converseLib.validationFailed(110); /* 1st Qual dates don't match*/
        return;
      else
        SY0QWIDX = 1;
        while (SY0QWIDX < 7)
          SY0QS60-EURO(); /* Move to work table*/
          SY0QWIDX = SY0QWIDX + 1;
        end
      end
    else
      if (SY5REC.SY5PCEDT[1] != SY0QW01.SY0QWTE2[1]
       || SY5REC.SY5PCEDT[2] != SY0QW01.SY0QWTE2[2]
       || SY5REC.SY5PCEDT[3] != SY0QW01.SY0QWTE2[3]
       || SY5REC.SY5PCEDT[4] != SY0QW01.SY0QWTE2[4]
       || SY5REC.SY5PCEDT[5] != SY0QW01.SY0QWTE2[5]
       || SY5REC.SY5PCEDT[6] != SY0QW01.SY0QWTE2[6])
        converseLib.validationFailed(111); /* 2nd Qual dates don't match*/
        return;
      else
        SY0QWIDX = 1;
        while (SY0QWIDX < 7)
          SY0QS60-EURO(); /* Move to work table*/
          SY0QWIDX = SY0QWIDX + 1;
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      if (SY0QW01.ZFC-CRCY-CD == "EUR")
        converseLib.validationFailed(95); /* Matching EUR not found*/
      else
        converseLib.validationFailed(96); /* Matching Local not found*/
      end
      set SY0QM001.SY0QM-EURO-CHG-FL cursor, bold;
      return;
    else
      SY0QS55(); /* go call ta0020 to report error*/
      converseLib.validationFailed(22);
      return;
    end
  end
end // end SY0QS25-EURO

// date verify routine
Function SY0QS30()
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2DYAOD = 0;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  if (TA2REC.TA2RTNCD == 0) /* Good date*/
    if (TA2REC.TA2GRGGN < SY0QW01.SY0QWCUD) /* less than today*/
      converseLib.validationFailed(134); /* past date invalid*/
      return; /* go back*/
    end
  else /* Bad date format*/
    converseLib.validationFailed(30); /* invalid date entered*/
    return; /* go back*/
  end
  if (SY0QW01.SY0QWSW == 1) /* checking 1st qual date change*/
    if (TA2REC.TA2GRGGN in SY0QW01.SY0QWTE1) /* in table?*/
      converseLib.validationFailed(16); /* date already in table*/
    else
      /* next sentence (ok if date not in table)*/
    end
  else
    if (TA2REC.TA2GRGGN in SY0QW01.SY0QWTE2) /* in table?*/
      converseLib.validationFailed(16); /* date already in table*/
    else
      /* next sentence (ok if date not in table)*/
    end
  end
end // end SY0QS30

// sort dates in 1st qual tbl
Function SY0QS35()
  SY0QW01.SY0QWMVF = "Y"; /* initialize moved flag*/
  while (SY0QW01.SY0QWMVF == "Y") /* keep sorting 'til nothing moves*/
    SY0QWIDX = 1;
    SY0QWIX2 = 2;
    SY0QW01.SY0QWMVF = "N";
    while (SY0QWIX2 < 7) /* start loop thru table*/
      if (SY0QW01.SY0QWTE1[SY0QWIX2] > SY0QW01.SY0QWTE1[SY0QWIDX])
        SY0QWHLN = SY0QWTB1[SY0QWIX2];
        SY0QWTB1[SY0QWIX2] = SY0QWTB1[SY0QWIDX];
        SY0QWTB1[SY0QWIDX] = SY0QWHLN;
        SY0QW01.SY0QWMVF = "Y";
      end
      SY0QWIDX = SY0QWIDX + 1;
      SY0QWIX2 = SY0QWIX2 + 1;
    end
  end
  SY0QWIDX = SY0QM001.SY0QWCNM; /* restore index*/
end // end SY0QS35

// sort dates in 1st qual tbl
Function SY0QS35-EURO()
  SY0QW01.SY0QWMVF = "Y"; /* initialize moved flag*/
  while (SY0QW01.SY0QWMVF == "Y") /* keep sorting 'til nothing moves*/
    SY0QWIDX = 1;
    SY0QWIX2 = 2;
    SY0QW01.SY0QWMVF = "N";
    while (SY0QWIX2 < 7) /* start loop thru table*/
      if (SY0QW01.SY0QWTE3[SY0QWIX2] > SY0QW01.SY0QWTE3[SY0QWIDX])
        SY0QWHLN = SY0QWTB3[SY0QWIX2];
        SY0QWTB3[SY0QWIX2] = SY0QWTB3[SY0QWIDX];
        SY0QWTB3[SY0QWIDX] = SY0QWHLN;
        SY0QW01.SY0QWMVF = "Y";
      end
      SY0QWIDX = SY0QWIDX + 1;
      SY0QWIX2 = SY0QWIX2 + 1;
    end
  end
  SY0QWIDX = SY0QM001.SY0QWCNM; /* restore index*/
end // end SY0QS35-EURO

// sort dates in 2nd qual tbl
Function SY0QS36()
  SY0QW01.SY0QWMVF = "Y"; /* initialize moved flag*/
  while (SY0QW01.SY0QWMVF == "Y") /* keep sorting 'til nothing moves*/
    SY0QWIDX = 1;
    SY0QWIX2 = 2;
    SY0QW01.SY0QWMVF = "N";
    while (SY0QWIX2 < 7) /* start loop thru table*/
      if (SY0QW01.SY0QWTE2[SY0QWIX2] > SY0QW01.SY0QWTE2[SY0QWIDX])
        SY0QWHLN = SY0QWTB2[SY0QWIX2];
        SY0QWTB2[SY0QWIX2] = SY0QWTB2[SY0QWIDX];
        SY0QWTB2[SY0QWIDX] = SY0QWHLN;
        SY0QW01.SY0QWMVF = "Y";
      end
      SY0QWIDX = SY0QWIDX + 1;
      SY0QWIX2 = SY0QWIX2 + 1;
    end
  end
  SY0QWIDX = SY0QM001.SY0QWCNM; /* restore index*/
end // end SY0QS36

// sort dates in 2nd qual tbl
Function SY0QS36-EURO()
  SY0QW01.SY0QWMVF = "Y"; /* initialize moved flag*/
  while (SY0QW01.SY0QWMVF == "Y") /* keep sorting 'til nothing moves*/
    SY0QWIDX = 1;
    SY0QWIX2 = 2;
    SY0QW01.SY0QWMVF = "N";
    while (SY0QWIX2 < 7) /* start loop thru table*/
      if (SY0QW01.SY0QWTE4[SY0QWIX2] > SY0QW01.SY0QWTE4[SY0QWIDX])
        SY0QWHLN = SY0QWTB4[SY0QWIX2];
        SY0QWTB4[SY0QWIX2] = SY0QWTB4[SY0QWIDX];
        SY0QWTB4[SY0QWIDX] = SY0QWHLN;
        SY0QW01.SY0QWMVF = "Y";
      end
      SY0QWIDX = SY0QWIDX + 1;
      SY0QWIX2 = SY0QWIX2 + 1;
    end
  end
  SY0QWIDX = SY0QM001.SY0QWCNM; /* restore index*/
end // end SY0QS36-EURO

// update size-price table
Function SY0QS40()
  SY5REC.ZZZCHGDT = TA2REC.TA2GRGGN; /* date*/
  SY5REC.ZZZCHGTM = TA2REC.TA2TIMHM; /* and time*/
  call "IO0380" ("U ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0) /* should not get any errors*/
    SY0QS55(); /* go and report error*/
  end
end // end SY0QS40

// write audit record to db2
Function SY0QS45()
  SYAREC.SYAUDTYP = "C"; /* change to record*/
  SYAREC.XXXTBLNM = "VPRICE01"; /* table name for sy5rec*/
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY0Q   ";
    TA1REC.TA1LOCAT[1] = "SY0QS45  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VPRICE01 ";
    TA1REC.TA1MAP = "SY0QM001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID; /* user id*/
  SYAREC.XGPCD = SY5REC.XGPCD; /* gpc code*/
  SYAREC.SY1STNBR = SY5REC.SY1STNBR; /* style number*/
  SYAREC.SY2CLRID = SY5REC.SY2CLRID; /* color id*/
  SYAREC.XDMCD = SY5REC.XDMCD; /* dimension code*/
  SYAREC.SY5SZID = SY5REC.SY5SZID; /* size id*/
  SYAREC.SYATYPCD = SY5REC.XPYCD; /* price type*/
  SYAREC.XQACD = SY5REC.XQACD; /* quality code*/
  SYAREC.ZZZSDT = TA2REC.TA2GRGGN; /* date*/
  SYAREC.ZZZSTM = TA2REC.TA2TIMHM; /* time*/
  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes}; /* try to add it*/
  if (SQLCA.VAGen_SQLCODE != 0)
    SY0QS55(); /* go and report error*/
  end
end // end SY0QS45

// create tag record for db2
Function SY0QS50()
  SY9REC.SY9TGTYP = "C"; /* change to record*/
  SY9REC.XGPCD = SY5REC.XGPCD; /* gpc code*/
  SY9REC.SY1STNBR = SY5REC.SY1STNBR; /* style number*/
  SY9REC.SY2CLRID = SY5REC.SY2CLRID; /* color id*/
  SY9REC.XDMCD = SY5REC.XDMCD; /* dimension code*/
  SY9REC.ZZZSDT = TA2REC.TA2GRGGN; /* date*/
  SY9REC.ZZZSTM = TA2REC.TA2TIMHM; /* time*/
  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes}; /* try to add the record*/
  if (SQLCA.VAGen_SQLCODE == 0 /* no errors*/
   || SQLCA.VAGen_SQLCODE == -603) /* tag already exists*/
    /* next sentence*/
  else
    SY0QS55(); /* go and report error*/
  end
end // end SY0QS50

// report db2 errors (ta0020)
Function SY0QS55()
  move SQLCA to ERRSQLCA withV60Compat; /* save db2 comm area*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SY0Q    ";
  TA1REC.TA1LOCAT[2] = "SY0QS55 ";
  TA1REC.TA1MAP = "SY0QM001";
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* reset db2*/
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* report error*/
  XSPF4(); /* return to main menu*/
  exit program; /* just in case xspf4 fails*/
end // end SY0QS55

// load price data into table
Function SY0QS60()

   /* this routine will load the price data from the sy5rec into*/
   /* working storage tables.  the program will check the quality*/
   /* field in the record and load to the proper table.*/

  if (SY5REC.XQACD == "01") /* we have a 1st qual record*/
    SY0QW01.SY0QWT1[SY0QWIDX] = SY5REC.SY5PRCUN[SY0QWIDX];
    SY0QW01.SY0QWTM1[SY0QWIDX] = SY5REC.SY5PSIND[SY0QWIDX];
    SY0QW01.SY0QWTE1[SY0QWIDX] = SY5REC.SY5PCEDT[SY0QWIDX];
  else /* we have a 2nd qual record*/
    SY0QW01.SY0QWT2[SY0QWIDX] = SY5REC.SY5PRCUN[SY0QWIDX];
    SY0QW01.SY0QWTM2[SY0QWIDX] = SY5REC.SY5PSIND[SY0QWIDX];
    SY0QW01.SY0QWTE2[SY0QWIDX] = SY5REC.SY5PCEDT[SY0QWIDX];
  end
end // end SY0QS60

// load price data into table
Function SY0QS60-EURO()

   /* this routine will load the price data from the sy5rec into*/
   /* working storage tables.  the program will check the quality*/
   /* field in the record and load to the proper table.*/

  if (SY5REC.XQACD == "01") /* we have a 1st qual record*/
    SY0QW01.SY0QWT3[SY0QWIDX] = SY5REC.SY5PRCUN[SY0QWIDX];
    SY0QW01.SY0QWTM3[SY0QWIDX] = SY5REC.SY5PSIND[SY0QWIDX];
    SY0QW01.SY0QWTE3[SY0QWIDX] = SY5REC.SY5PCEDT[SY0QWIDX];
  else /* we have a 2nd qual record*/
    SY0QW01.SY0QWT4[SY0QWIDX] = SY5REC.SY5PRCUN[SY0QWIDX];
    SY0QW01.SY0QWTM4[SY0QWIDX] = SY5REC.SY5PSIND[SY0QWIDX];
    SY0QW01.SY0QWTE4[SY0QWIDX] = SY5REC.SY5PCEDT[SY0QWIDX];
  end
end // end SY0QS60-EURO

// validate 2nd qual calc data
Function SY0QS65()
  if (SY0QM001.SY0QWPRC == "N") /* if we are not calculating*/
    SY0QM001.SY0QWPER = 0; /* then zero the other fields*/
    SY0QM001.SY0QWCON = 0;
    SY0QM001.SY0QWRND = 0;
    return; /* no 2nd qual calc data*/
  else
    if (SY0QM001.SY0QWPRC != "Y") /* invalid (only y or n allowed)*/
      converseLib.validationFailed(36);
      set SY0QM001.SY0QWPRC cursor, bold;
      return; /* and exit*/
    else
      /* next sentence*/
    end
  end
  if (SY0QM001.SY0QWPER == 0) /* one of these must have somthing*/
    converseLib.validationFailed(40); /* error*/
    set SY0QM001.SY0QWPER cursor, bold;
    return; /* get out of routine*/
  end
  SY0QW01.SY0QWPER = SY0QM001.SY0QWPER / 100;
  SY0QW01.SY0QWCON = SY0QM001.SY0QWCON;
  if (SY0QM001.SY0QWRND == 0
   || SY0QM001.SY0QWRND == .25
   || SY0QM001.SY0QWRND == .50
   || SY0QM001.SY0QWRND == 1.00
   || SY0QM001.SY0QWRND == -.25
   || SY0QM001.SY0QWRND == -.50
   || SY0QM001.SY0QWRND == -1.00)
    SY0QW01.SY0QWRND = SY0QM001.SY0QWRND;
  else
    converseLib.validationFailed(46); /* invalid rounding factor*/
    set SY0QM001.SY0QWRND cursor, bold;
  end
end // end SY0QS65

// current price validation
Function SY0QS70()
   /* ***********************************************************/
   /* *this routine will look at all the effective dates in    **/
   /* *either the 1st or 2nd qual price tables + the line item **/
   /* *being changed or deleted to determine if we still have  **/
   /* *a current price for this item (current price is defined **/
   /* *as having an effective date = or < than the current     **/
   /* *system date). if this is not the case, we will move an  **/
   /* *error message number to ezemno.                         **/
   /* ***********************************************************/

  SY0QW01.SY0QWCPF = "N"; /* set flag to no*/
  SY0QWIX2 = 1; /* initialize index*/
  while (SY0QWIX2 < 7 /* start the loop*/
   && SY0QW01.SY0QWCPF == "N")
    if (SY0QW01.SY0QWSW == 1) /* working with 1st qual stuff*/
      if (SY0QWIX2 == SY0QWIDX) /* this is the item we're changing*/
        if (SY0QM001.SY0QWDE1 == "Y") /* we're deleting it*/
          /* next sentence (we don't want to compare if deleted)*/
        else
          if (TA2REC.TA2GRGGN <= SY0QW01.SY0QWCUD)
            SY0QW01.SY0QWCPF = "Y"; /* we have a current price*/
          end
        end
      else
        if (SY0QW01.SY0QWTE1[SY0QWIX2] <= SY0QW01.SY0QWCUD
         && SY0QW01.SY0QWTE1[SY0QWIX2] != 0)
          SY0QW01.SY0QWCPF = "Y"; /* we have a current price*/
        end
      end
    else /* checking 2nd qual changes and tables*/
      if (SY0QWIX2 == SY0QWIDX) /* this is the item we're changing*/
        if (SY0QM001.SY0QWDE2 == "Y") /* we're deleting it*/
          /* next sentence (we don't want to compare if deleted)*/
        else
          if (TA2REC.TA2GRGGN <= SY0QW01.SY0QWCUD)
            SY0QW01.SY0QWCPF = "Y"; /* we have a current price*/
          end
        end
      else
        if (SY0QW01.SY0QWTE2[SY0QWIX2] <= SY0QW01.SY0QWCUD
         && SY0QW01.SY0QWTE2[SY0QWIX2] != 0)
          SY0QW01.SY0QWCPF = "Y"; /* we have a current price*/
        end
      end
    end
    SY0QWIX2 = SY0QWIX2 + 1;
  end
  if (SY0QW01.SY0QWCPF == "N") /* we have no current price*/
    converseLib.validationFailed(82); /* no current price*/
  end
end // end SY0QS70

// set screen for bottom converse
Function SY0QSBM()
  set SY0QM001.XGPCD skip;
  set SY0QM001.SY1STNBR skip;
  set SY0QM001.SY2CLRID skip;
  set SY0QM001.XDMCD skip;
  set SY0QM001.XPYCD skip;
  if (SY0QW01.SY0QW-SYEUTBL-FLAG == "Y") /* Can maintain EUR/Local*/
    if (SYEUTBL.SY-PMRY-CRCY-IND[SYWINDEX] == "L")
      SY0QM001.SY0QM-EURO-P2 = "EURO: ";
    else
      SY0QM001.SY0QM-EURO-P2 = "LOCAL:";
    end
    SY0QM001.SY0QM-EURO-P1 = "AUTO CHANGE TO";
    if (SY0QM001.SY0QM-EURO-CHG-FL == " ")
      SY0QM001.SY0QM-EURO-CHG-FL = "Y";
    end
    set SY0QM001.SY0QM-EURO-CHG-FL normal;
  else /* No dual maintenance, hide screen data*/
    SY0QM001.SY0QM-EURO-P1 = " ";
    SY0QM001.SY0QM-EURO-P2 = " ";
    SY0QM001.SY0QM-EURO-CHG-FL = " ";
    set SY0QM001.SY0QM-EURO-CHG-FL skip;
  end
  set SY0QM001.SY0QWPRC normal;
  set SY0QM001.SY0QWPER normal;
  set SY0QM001.SY0QWCON normal;
  set SY0QM001.SY0QWRND normal;
  set SY0QM001.SY0QWCNM normal;
  set SY0QM001.SY0QW1ST normal;
  set SY0QM001.SY0QW2ND normal;
  set SY0QM001.SY0QWED1 normal;
  set SY0QM001.SY0QWED2 normal;
  set SY0QM001.SY0QWMD1 normal;
  set SY0QM001.SY0QWMD2 normal;
  set SY0QM001.SY0QWDE1 normal;
  set SY0QM001.SY0QWDE2 normal;
  set SY0QM001.CATOAP normal;
  set SY0QM001.CAITEM skip;
end // end SY0QSBM

// clear bottom half of screen
Function SY0QSCR()
  move SY0QM001 to SY0QW02 withV60Compat; /* move fields to hold record*/
  SY0QW02.SY0QWHP = SY0QM001.SY0QWPER; /* hold percent*/
  SY0QW02.SY0QWHC = SY0QM001.SY0QWCON; /* hold constant*/
  SY0QW02.SY0QWHR = SY0QM001.SY0QWRND; /* hold round*/
  set SY0QM001 initial; /* clear out the map*/
  move SY0QW02 to SY0QM001 withV60Compat; /* move back in the fields we saved*/
  if (SY0QW02.SY0QWHP != 0) /* if not zero move it*/
    SY0QM001.SY0QWPER = SY0QW02.SY0QWHP;
  end
  if (SY0QW02.SY0QWHC != 0)
    SY0QM001.SY0QWCON = SY0QW02.SY0QWHC;
  end
  if (SY0QW02.SY0QWHR != 0)
    SY0QM001.SY0QWRND = SY0QW02.SY0QWHR;
  end
end // end SY0QSCR

// test statement to set flag
Function SY0QSFM()
   /* this statement group is used in a test statement to*/
   /* check if the user has really entered anything into*/
   /* the field to change. this is neccessary because the*/
   /* user may have entered data into the field in error*/
   /* and used the erase eof key to correct. this action*/
   /* will set the field modified.*/

  SY0QW01.SY0QWFMD = "N"; /* nothing in field*/
end // end SY0QSFM

// set screen for top converse
Function SY0QSTP()
  set SY0QM001.XGPCD normal;
  set SY0QM001.XCTCD normal;
  set SY0QM001.ZFC-CRCY-CD normal;
  set SY0QM001.SY1STNBR normal;
  set SY0QM001.SY2CLRID normal;
  set SY0QM001.XDMCD normal;
  set SY0QM001.XPYCD normal;
  set SY0QM001.SY0QWPRC normal;
  set SY0QM001.SY0QWPER normal;
  set SY0QM001.SY0QWCON normal;
  set SY0QM001.SY0QWRND normal;
  SY0QM001.SY0QM-EURO-P1 = " ";
  SY0QM001.SY0QM-EURO-P2 = " ";
  SY0QM001.SY0QM-EURO-CHG-FL = " ";
  set SY0QM001.SY0QM-EURO-CHG-FL skip;
  set SY0QM001.SY0QWCNM skip;
  set SY0QM001.SY0QW1ST skip;
  set SY0QM001.SY0QW2ND skip;
  set SY0QM001.SY0QWED1 skip;
  set SY0QM001.SY0QWED2 skip;
  set SY0QM001.SY0QWMD1 skip;
  set SY0QM001.SY0QWMD2 skip;
  set SY0QM001.SY0QWDE1 skip;
  set SY0QM001.SY0QWDE2 skip;
  set SY0QM001.CATOAP normal;
  set SY0QM001.CAITEM skip;
end // end SY0QSTP

//*** RECORD=SY0QW01 ****
// ************************************************************
// * this is the 'working storage section' of this program.   *
// * this record holds all intermediate work fields, flags,   *
// * indexes, and other work variables used by all processes  *
// * and statement groups in the program except for statement *
// * group sy0qscr.                                           *
// ************************************************************
// ***********************
Record SY0QW01 type basicRecord
  5 SY0QWREC SY0QWREC ; 
    10 SY0QWREV SY0QWREV ; 
    10 SY0QWPRC SY0QWPRC ; 
    10 SY0QWPER SY0QWPER ; 
    10 SY0QWCON SY0QWCON ; 
    10 SY0QWRND SY0QWRND ; 
    10 SY0QWCNM SY0QWCNM ; 
    10 SY0QW1ST SY0QW1ST ; 
    10 SY0QW2ND SY0QW2ND ; 
    10 SY0QWED1 SY0QWED1 ; 
    10 SY0QWED2 SY0QWED2 ; 
    10 SY0QWMD1 SY0QWMD1 ; 
    10 SY0QWMD2 SY0QWMD2 ; 
    10 SY0QWDE1 SY0QWDE1 ; 
    10 SY0QWDE2 SY0QWDE2 ; 
    10 SY0QWTB1 SY0QWTB1 [6] ; 
      15 SY0QWT1 SY0QWT1 ; 
      15 SY0QWTE1 SY0QWTE1 ; 
      15 SY0QWTM1 SY0QWTM1 ; 
    10 SY0QWTB2 SY0QWTB2 [6] ; 
      15 SY0QWT2 SY0QWT2 ; 
      15 SY0QWTE2 SY0QWTE2 ; 
      15 SY0QWTM2 SY0QWTM2 ; 
    10 SY0QWTB3 SY0QWTB3 [6] ; 
      15 SY0QWT3 SY0QWT3 ; 
      15 SY0QWTE3 SY0QWTE3 ; 
      15 SY0QWTM3 SY0QWTM3 ; 
    10 SY0QWTB4 SY0QWTB4 [6] ; 
      15 SY0QWT4 SY0QWT4 ; 
      15 SY0QWTE4 SY0QWTE4 ; 
      15 SY0QWTM4 SY0QWTM4 ; 
    10 XGPCD XGPCD ; 
    10 XQACD XQACD ; 
    10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
    10 SY0QWIDX SY0QWIDX ; 
    10 SY0QW2YN SY0QW2YN ; 
    10 SY0QWHLN SY0QWHLN ; 
    10 SY0QWMVF SY0QWMVF ; 
    10 SY0QWIX2 SY0QWIX2 ; 
    10 SY0QWHDL SY0QWHDL ; 
    10 SY0QWFRC SY0QWFRC ; 
    10 SY0QWSW SY0QWSW ; 
    10 SY0QWCFG SY0QWCFG ; 
    10 SY0QWCPF SY0QWCPF ; 
    10 SY0QWCUD SY0QWCUD ; 
    10 SY0QWFMD SY0QWFMD ; 
    10 SY0QW-SYEUTBL-FLAG SY0QW-SYEUTBL-FLAG ; 
end // end SY0QW01

//*** RECORD=SY0QW02 ****
// ************************************************************
// * this record is used only by the statement group sy0qscr  *
// * to replace the 'top half' of the screen after the map    *
// * has been set cleared. this record should be used only in *
// * sy0qscl.                                                 *
// ************************************************************
// ***********************
Record SY0QW02 type basicRecord
  10 SYMCURDT SYMCURDT ; 
  10 SYMPRONM SYMPRONM ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 XUMDESC XUMDESC ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDMCD XDMCD ; 
  10 XDMABRV XDMABRV ; 
  10 XPYCD XPYCD ; 
  10 XPYDESC XPYDESC ; 
  10 XCTCD XCTCD ; 
  10 XCTDESC XCTDESC ; 
  10 ZFC-CRCY-CD ZFC-CRCY-CD ; 
  10 ZFC-CRCY-DESC ZFC-CRCY-DESC ; 
  10 SY0QWREV SY0QWREV ; 
  10 XGPABRV XGPABRV ; 
  10 SY0QWPRC SY0QWPRC ; 
  10 SY0QWHP SY0QWHP ; 
  10 SY0QWHC SY0QWHC ; 
  10 SY0QWHR SY0QWHR ; 
end // end SY0QW02

//*** RECORD=SY0QW03 ****
// ************************************************************
// * SY0QW03 - WORKING STORAGE RECORD FOR SY0Q
// *
// *   This is an exact image of SY5REC with one exception;
// *   the data occurs 4 times. SY0Q must handle up to 4 price
// *   records at the same time. Here is what is contained in
// *   each occurance:
// *
// *      SY5DATA(1) = Quality 01 for Local Currency
// *      SY5DATA(2) = Quality 02 for Local Currency
// *      SY5DATA(3) = Quality 01 for EUR   Currency
// *      SY5DATA(4) = Quality 02 for EUR   Currency
// *
// ************************************************************
// ***********************
Record SY0QW03 type basicRecord
  10 SY5DATA SY5DATA [4] ; 
  10 SY0QW-CHG-01-FL SY0QW-CHG-01-FL ; 
  10 SY0QW-PRC-01-FL SY0QW-PRC-01-FL ; 
  10 SY0QW-PRC-01-EDT SY0QW-PRC-01-EDT ; 
  10 SY0QW-PRC-01-AMT SY0QW-PRC-01-AMT ; 
  10 SY0QW-CHG-02-FL SY0QW-CHG-02-FL ; 
  10 SY0QW-PRC-02-FL SY0QW-PRC-02-FL ; 
  10 SY0QW-PRC-02-EDT SY0QW-PRC-02-EDT ; 
  10 SY0QW-PRC-02-AMT SY0QW-PRC-02-AMT ; 
end // end SY0QW03

// Quality 01 row changes
DataItem SY0QW-CHG-01-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Quality 02 row changes
DataItem SY0QW-CHG-02-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY0QW-PRC-01-AMT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0QW-PRC-01-EDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Quality 01 row changes
DataItem SY0QW-PRC-01-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY0QW-PRC-02-AMT decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY0QW-PRC-02-EDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Quality 01 row changes
DataItem SY0QW-PRC-02-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Found row in SYEUTBL
DataItem SY0QW-SYEUTBL-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change 1st qual price
DataItem SY0QW1ST num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change 2nd qual price
DataItem SY0QW2ND num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual record?(y/n)
DataItem SY0QW2YN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// anything entered to change?
DataItem SY0QWCFG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line number to change
DataItem SY0QWCNM num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// constant to +/- to price
DataItem SY0QWCON num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current price flag
DataItem SY0QWCPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current system date
DataItem SY0QWCUD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// delete 1st qual line item(y/n)
DataItem SY0QWDE1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// delete 2nd qual line (y/n)
DataItem SY0QWDE2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change 1st qual eff date
DataItem SY0QWED1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// change 2nd qual eff date
DataItem SY0QWED2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// field been modified (y/n)?
DataItem SY0QWFMD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work area for cents
DataItem SY0QWFRC num(2,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold constant
DataItem SY0QWHC num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work area for dollars
DataItem SY0QWHDL num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold line from table
DataItem SY0QWHLN char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold percent of price
DataItem SY0QWHP num(6,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hold rounding factor
DataItem SY0QWHR num(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// index for tables
DataItem SY0QWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index for table
DataItem SY0QWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change 1st qual mark down flag
DataItem SY0QWMD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// change 2nd qual mark down flag
DataItem SY0QWMD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// has a line moved(y/n)?
DataItem SY0QWMVF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percent of price to use
DataItem SY0QWPER num(5,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// calc 2nd qual price(Y/N)
DataItem SY0QWPRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// top level group item
DataItem SY0QWREC char(565)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// revision of program
DataItem SY0QWREV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rounding factor
DataItem SY0QWRND num(3,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// switch for sy0qs30+70
DataItem SY0QWSW num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 1st qual price display
DataItem SY0QWT1 num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual price display
DataItem SY0QWT2 num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st qual price display
DataItem SY0QWT3 num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual price display
DataItem SY0QWT4 num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st qual table
DataItem SY0QWTB1 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual table
DataItem SY0QWTB2 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st qual table
DataItem SY0QWTB3 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual table
DataItem SY0QWTB4 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st qual date display
DataItem SY0QWTE1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual date display
DataItem SY0QWTE2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st qual date display
DataItem SY0QWTE3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual date display
DataItem SY0QWTE4 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 1st qual mark down flag dispy
DataItem SY0QWTM1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual mark down display
DataItem SY0QWTM2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st qual mark down flag dispy
DataItem SY0QWTM3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 2nd qual mark down display
DataItem SY0QWTM4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process name
DataItem SYMPRONM char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

