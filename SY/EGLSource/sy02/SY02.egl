package sy02;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import mn.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import rd.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SY02 ****
// this application will change the color table in db2.
// the change is determined by comparing sy2rec to syerec.
// if changes are made to sy2rec then also change syerec.
// 
// ************************************************************
// maintenance:
// 
// project
// number    who     when      why
// ------   ------   -------   --------------------------------
//          jricha   06-24-86  created application
//          hdenso   12-11-86  req 0298-add century/sy2sesny
//          mbuhit   05-19-87  sy02scp: increased length of
//              syarec.syabfln &syarec.syaftln.
//          mbuhit   10-07-87  added product category, desc.
//          mbuhit   11-20-87  sy02scp: increased length of
//              syarec.syabfln &syarec.syaftln.
//          mbuhit   11-25-87  add package-flag maintenance.
//          mbuhit   01-30-88  update ending offfering dates
//                             when season or sn-yr changes.
//          mbuhit   02-23-88  correct pf99 futures off. date.
//          mbuhit   03-18-88  sy02scp: increased length of
//              syarec.syabfln &syarec.syaftln. Also changed
//              some field names to correspond with sy2rec.
//          mbuhit   03-30-88  add overlay matl content fields.
//  p090    mbuhit   01-13-89  sy02scp: increased length of
//              syarec.syabfln &syarec.syaftln.
//                             changed sy2sesny to xsnyr.
//          mhalst   02-27-89  Phase IV code changes
//  P0104   MHALST   03-28-89  Remove use of XTVCD.
//  P0100   MHALST   04-13-89  Add Blank style number to screen
//  -spl-   jwood    04-17-89  Added xssegtr logic
//  -spl-   jwood    04-17-89  Added noncsp option to calls
//  P0102   MHALST   04-24-89  Enhance program to extend NIL
//                             offering dates (SY02SGA).
//          MHALST   05-16-89  Audit changes for VCOLOR01.
//  P105    MHALST   08-30-89  Add Material content %'s and
//                             field protection for NIL users.
//          MHALST   11-13-89  Data base changes, add SYZTBL
//          MHALST   12-18-89  Add edit to package flag
//          MHALST   05-23-90  Correct root style edit
//          MHALST   06-12-90  Correct root style edit again
//          MHALST   07-27-90  Change edit for XCL codes
//          MHALST   10-08-90  DB2 Changes and SYAREC
// P148     MHALST   11-06-90  Correct edits for Season/Year
//          MHALST   02-14-91  DB2 Changes to SY2REC
//          MHALST   06-11-91  DB2 Changes, change order of XCL
//                             codes for GPC 02.
//          MHALST   07-02-91  Add Seasonal Product file
//          MHALST   03-09-92  Remove SY2PRDES
// PF183    MHALST   04-14-92  Add Duty Rate Code
//          MHALST   10-12-92  Add XDR table
//          MHALST   01-14-93  Expand Offer Dates for Holiday
//          MHALST   02-22-93  Don't check season code/year
//                             unless user changes it.
//          JRAMOS   02-23-93  Flag a given color as erroneous
//                             if the Nike Dept Id (COMMAREA)
//                             = 'EAO ' and the color product
//                             region code not = '02'.
//          MHALST   03-26-93  Change date defaulting for
//                             futures ending offer date.
//  sy0211  MBUHIT   04/20/94  Update SYREG table when needed.
//  sy0211  MHALST   08/23/94  Change pop-up location for XDR
//          MHALST   03/15/95  Add XPR to SYREG update
//          MHALST   10/03/95  Add MN0V to get users region
//          MHALST   04/25/96  Correct futr offer xdt calc.
//          MHALST   11/05/96  Correct futr offer xdt (Euro)
//          MHALST   10/23/97  Protect screen fields if on PPS
//          MHALST   02/23/98  Unlock XMC percentage fields
//          MHALST   01/02/00  Correct edit on BO date
//          MHALST   01/25/00  Add XPSY010 for futr offer date
// TT#118943 PVENKA  Removing  references to DPROD.VSYSPF01
// ************************************************************
// 
// 
//  IO modules       TABLE
//  USED             view name
// -----------       --------------
//  IO0120           dprod.vstyle01
//  IO0130           dprod.vcolor01
//  IO6640           dprod.vsyreg01
//  IO0530           dprod.vsyaud01
//  IO0520           dprod.vsytag01
// C2CIM  SSUNNA    Add Product line and product line 
//  description to the sy04m002 map.
// 
// 
// *********************
Program SY02 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SY00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  MNVREC MNVREC; // record
  SQLCA SQLCA; // record
  SY02W01 SY02W01; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  SY3REC SY3REC; // record
  SY9REC SY9REC; // record
  SYAREC SYAREC; // record
  SYDREC SYDREC; // record
  SYEREC SYEREC; // record
  SYVREC SYVREC; // record
  SYWREC SYWREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  VDTYRT01 VDTYRT01; // record
  VSYDVX02 VSYDVX02; // record
  VSYREG02 VSYREG02; // record
  XP0HW01 XP0HW01; // record
  XP0HW02 XP0HW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SYRGTBL {deleteAfterUse = yes}; // table
  use SYZTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XCLTBL {deleteAfterUse = yes}; // table
  use XOGTBL {deleteAfterUse = yes}; // table
  use XDRTBL {deleteAfterUse = yes}; // table
  use XMCTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use SY02M.SY02M001,  // forms
      SY02M.XP0HM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SY02001: SY02001();

    goto SY02005;

    SY02005: SY02005();


    if (converseVar.eventKey is pa2)
      goto SY02001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY02005;
      else
        if (converseVar.eventKey is pf12
         || converseVar.eventKey is enter)
          goto SY02010;
        else
          converseLib.validationFailed(19);
          goto SY02005;
        end
      end
    end
    SY02010: SY02010();


    if (converseVar.eventKey is pa2)
      goto SY02001;
    else
      if (converseVar.validationMsgNum > 0
       && SYWREC.SYWMSGFL == "N")
        goto SY02010;
      else
        if (converseVar.eventKey is pf12)
          goto SY02010;
        else
          if (converseVar.eventKey is enter)
            goto SY02005;
          else
            converseLib.validationFailed(19);
            goto SY02010;
          end
        end
      end
    end
  end // end main
end // end SY02

// init. application
Function SY02001()


       /* *****************************************/
       /* * 1. init. application.                **/
       /* * 2. set all rec & maps to empty       **/
       /* *    and clear.                        **/
       /* * 3. if the commarea.xgpcd is diff.    **/
       /* *    than the sywrec.xgpcd use the     **/
       /* *    sywrec.xgpcd because the user     **/
       /* *    must have transfered into this    **/
       /* *    application with the sywrec.xgpcd **/
       /* * 4. validate the gpc code.            **/
       /* *                                      **/
       /* *****************************************/

  XSENTRY();

  XSSEGTR(); /* set segmented transaction id*/

  set SYWREC empty;

  set SY1REC empty;
  set SY2REC empty;
  set VSYREG02 empty;
  set SY9REC empty;
  set SYAREC empty;
  set SYVREC empty;
  set TA2REC empty;
  set SY02M001 initial;

  SYWREC.SYWMSGFL = "N";
  SYWREC.SYWTRANF = COMMAREA.CAUSERA;


  if (SYWREC.XGPCD == " ")
    SY02M001.XGPCD = COMMAREA.XGPCD;
  else
    if (SYWREC.XGPCD == COMMAREA.XGPCD)
      SY02M001.XGPCD = COMMAREA.XGPCD;
    else
      SY02M001.XGPCD = SYWREC.XGPCD;
    end
  end


  SY02M001.SYMREV = "03";
  /*IF SY02M001.XGPCD EQ '03';*/
  /*  MOVE 'Y' TO SY02M001.SY02MSPF;*/
  /*ELSE;*/
  /*  MOVE 'N' TO SY02M001.SY02MSPF;*/
  /*END;*/

  SY02SAA(); /* validate gpc code*/

   /* Now, find out what region user is and set-up table of*/
   /* valid regions the user can access.*/
  XPSY008(); /* Get users region*/
  if (SYWREC.SYW-REG-TBL-SIZE == 0)
    converseLib.validationFailed(124); /* User Id not authorized*/
  end

       /* *** get todays date*/
  TA2REC.TA2DTOPT = "GETDATE";
  SY02SAB();
  SYWREC.SYWTODAY = TA2REC.TA2GRGGN;

  SYWREC.SYWMSGFL = "N";

end // end SY02001

// get color screen row data
Function SY02005()


       /* ***************************************/
       /* *  1. display screen sy02m001 and    **/
       /* *  let user enter xgpcd, style number**/
       /* *  color id and dimension codes.     **/
       /* *                                    **/
       /* *  2. the process will validate      **/
       /* *     and retrieve all code descs.   **/
       /* *                                    **/
       /* *  3. the user can transfer to       **/
       /* *     any application from this      **/
       /* *     screen.                        **/
       /* *                                    **/
       /* *                                    **/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/


  SY02M001.SYMTTLNM = "  PRODUCT COLOR/DIMENSION - CHG ";
  SY02M001.SYMPRONM = "SY02005";
  SY02M001.SYMCURDT = VGVar.currentShortGregorianDate;
  SY02M001.SYMREV = "09"; /* program revision number!!!!!!!*/
  SY02M001.SY02M-PPS-PROMPT = " ";
  if (SY02M001.XGPCD == "02") /* footwear*/
    SY02M001.SY02MVP1 = "P/L/S/T:"; /* change prompt*/
  else
    SY02M001.SY02MVP1 = "P/S/T/L:";
  end

  /*IF SY02M001.XGPCD EQ '03';       /* apparel*/
  /*  IF SY02M001.SY02MSPF EQ ' ';*/
  /*  MOVE 'Y' TO SY02M001.SY02MSPF;*/
  /*END;*/
  /*  MOVE 'CREATE SPF(Y/N):' TO SY02M001.SY02MSPP;*/
  /*  SET SY02M001.SY02MSPP DEFINED;*/
  /*  SET SY02M001.SY02MSPF NORMAL;*/
  /*ELSE;*/
  /*  SET SY02M001.SY02MSPP AUTOSKIP,DARK;*/
  /*  SET SY02M001.SY02MSPF AUTOSKIP,DARK;*/
  /*  MOVE 'N' TO SY02M001.SY02MSPF;*/
  /*END;*/

  SY02SBU(); /* set screen fields to protect.*/


  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    /* next sentence*/
  else
    set SY02M001.SY1STNBR cursor;
    SY02M001.XDMCD = "00";
  end

  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY02M001 ;
   /* ***********************************************************/

  SYWREC.SYWMSGFL = "N";

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY02SBA();

       /* ***************************************/
       /* *  set screen sy02m001 to normal     **/
       /* ***************************************/

  SY02SBF();

       /* ***************************************/
       /* *  validate style and gpc codes      **/
       /* ***************************************/

  SY02SBB();


       /* ***************************************/
       /* *  get existing style row            **/
       /* ***************************************/

  SY1REC.XGPCD = SY02M001.XGPCD;
  SY1REC.SY1STNBR = SY02M001.SY1STNBR;
  SY02SBC();

       /* ***************************************/
       /* * get color id row  for              **/
       /* * sy02m001                           **/
       /* ***************************************/

  SY02SBD();

  if (SY2REC.XGPCD == "02") /* If footwear*/
    SY02S-CHK-SYDVX(); /* check if on PPS system*/
    if (SYWREC.SYW-ON-PPS-FL == "Y")
      SY02M001.SY02M-PPS-PROMPT = "** PPS **";
    else
      SY02M001.SY02M-PPS-PROMPT = " ";
    end
  else
    SY02M001.SY02M-PPS-PROMPT = " ";
  end

       /* ***************************************/
       /* * get code description for screens   **/
       /* * sy02m001                           **/
       /* ***************************************/

  SY02SBE();
  SYWREC.SYWMSGFL = "Y";

end // end SY02005

// update color screen row data
Function SY02010()


       /* ***************************************/
       /* *                                    **/
       /* *                                    **/
       /* ***************************************/


  SY02M001.SYMTTLNM = "  PRODUCT COLOR/DIMENSION - CHG ";
  SY02M001.SYMPRONM = "SY02010";
  SY02M001.SYMCURDT = VGVar.currentShortGregorianDate;
  SY02M001.SYMREV = "09"; /* program revision number!!!!!!!*/
  if (SY02M001.XGPCD == "02") /* FOOTWEAR*/
    SY02M001.SY02MVP1 = "P/L/S/T:";
    /* CODE COMMENTED OUT UNTIL PPS SYNC-UP COMPLETED*/
    /* IF SYWREC.SYW-ON-PPS-FL = 'Y';   /* Product on PPS*/
    /* SY02S-PPS-PROT;                /* Protect items on PPS*/
    /* END;*/
  else
    SY02M001.SY02MVP1 = "P/S/T/L:";
  end


  set SY02M001.SY1STNBR protect;
  set SY02M001.XGPCD protect;
  set SY02M001.SY2CLRID protect;
  set SY02M001.XDMCD protect;

  if (COMMAREA.XDVCD == "02") /* NIL user*/
    SY02SBX(); /* protect fields from update*/
  end

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    /* next sentence*/
  else
    if (COMMAREA.XDVCD == "02") /* NIL user*/
      set SY02M001.XMCCD1 cursor;
    else
      /* CODE COMMENTED OUT UNTIL PPS SYNC-UP COMPLETED*/
      /* IF SYWREC.SYW-ON-PPS-FL = 'Y';*/
      /* SET SY02M001.SY2CLRAB CURSOR;*/
      /* ELSE;*/
      set SY02M001.SY2CLRDS cursor;
      /* END;*/
    end
  end


  converseVar.segmentedMode = 1;


   /* ***********************************************************/
  converse SY02M001 ;
   /* ***********************************************************/

  SYWREC.SYWMSGFL = "N";

       /* ***************************************/
       /* *  check pf keys and transfer to     **/
       /* *  other applications.               **/
       /* ***************************************/

  SY02SCA();

       /* ***************************************/
       /* *  set sy02m001 screen to normal     **/
       /* ***************************************/

  SY02SBF();

       /* ***************************************/
       /* * validate codes for sy02m001 screen **/
       /* ***************************************/

  SY02SCB();

       /* ***************************************/
       /* * check if any changes were made and **/
       /* * if so update the color row.        **/
       /* ***************************************/

  if (converseVar.eventKey is pf12
   || converseVar.validationMsgNum > 0)
    exit stack;
  else
    SY02SCD();
  end


       /* ***************************************/
       /* *  transfer to other applications.   **/
       /* ***************************************/

  SY02SCE();


       /* ***************************************/
       /* * reset screen for new color record. **/
       /* ***************************************/

  set SY02M001 empty;
  SY02M001.XGPCD = SYWREC.XGPCD;
  SY02M001.XGPABRV = SYWREC.XGPABRV;

   /* Check for seasonal product file warning*/
  if (SY02M001.XGPCD == "03"
   && SY02W01.SYWMSGFL == "Y")
    SY02M001.SYMSCMSG = "   Seasonal Data Previously Created";
  end


end // end SY02010

// Check for size update
Function SY02S-CHK-SIZE()
       /* ******************************************/
       /* * CHECK FOR SIZE UPDATE                 **/
       /* ******************************************/

  if (converseVar.validationMsgNum > 0)
    return;
  end

   /* First retrieve VSIZE001 row*/

  SY3REC.XGPCD = SY2REC.XGPCD;
  SY3REC.SY1STNBR = SY2REC.SY1STNBR;
  SY3REC.SY2CLRID = SY2REC.SY2CLRID;
  SY3REC.XDMCD = SY2REC.XDMCD;

  call "IO0140" ("S ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY02   ";
    TA1REC.TA1LOCAT[1] = "U        ";
    TA1REC.TA1LOCAT[2] = "SY02S-CHK";
    TA1REC.TA1LOCAT[3] = "IO0140   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY02M001";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSIZE001";
    TA1TBLKE = SY3REC.SY3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(22); /* size table error....*/
    set SY02M001.SY2CLRID cursor, bold;
    exit stack;
  end

  set SYAREC empty;
  SYAREC.SYABFR = SY3REC.SY3DATA;

   /* Now scan the size divisions for changes*/
  SYWREC.SYWINDXA = 0;
  SYWREC.SYWINDXB = 1;
  while (SYWREC.SYWINDXB <= 40)
    if (SY3REC.XDVCD[SYWINDXB] == SYEREC.XDVCD)
      SY3REC.XDVCD[SYWINDXB] = SY2REC.XDVCD;
      SYWREC.SYWINDXA = SYWREC.SYWINDXB;
    end
    SYWREC.SYWINDXB = SYWREC.SYWINDXB + 1;
  end

  if (SYWREC.SYWINDXA == 0) /* Nothing changed*/
    return;
  end

  SY3REC.ZZZCHGDT = SYWREC.ZZZCHGDT;
  SY3REC.ZZZCHGTM = SYWREC.ZZZCHGTM;

  call "IO0140" ("U ", SQLCA, SY3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY02   ";
    TA1REC.TA1LOCAT[1] = "U        ";
    TA1REC.TA1LOCAT[2] = "SY02S-CHK";
    TA1REC.TA1LOCAT[3] = "IO0140   ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "SY02M001";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSIZE001";
    TA1TBLKE = SY3REC.SY3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(22); /* size table error....*/
    set SY02M001.SY2CLRID cursor, bold;
    exit stack;
  end

       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR SIZE UPDATE  **/
       /* *                                       **/
       /* ******************************************/

  SYAREC.SYAUDTYP = "C";
  SYAREC.XXXTBLNM = "VSIZE001";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY02   ";
    TA1REC.TA1LOCAT[1] = "SY02S-CHK";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VSIZE001 ";
    TA1REC.TA1MAP = "SY02M001";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY3REC.XGPCD;
  SYAREC.SY1STNBR = SY3REC.SY1STNBR;
  SYAREC.SY2CLRID = SY3REC.SY2CLRID;
  SYAREC.XDMCD = SY3REC.XDMCD;
  SYAREC.ZZZSDT = SYWREC.ZZZSDT;
  SYAREC.ZZZSTM = SYWREC.ZZZCHGTM;
  SYAREC.SYAAFT = SY3REC.SY3DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY02   ";
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY02S-CH";
    TA1REC.TA1LOCAT[3] = "IO0530  ";
    TA1REC.TA1LOCAT[4] = "COLORTBL";
    TA1REC.TA1MAP = "SY02M001";
    TA1REC.TA1DBASE = "DPROD";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY02M001.SY1STNBR cursor, bold;
    exit stack;
  end

end // end SY02S-CHK-SIZE

// Check VSYDVX02 to set PPS flag
Function SY02S-CHK-SYDVX()

   /* *******************************************************/
   /* Read the DPRODG.VSYDVX02 table to set flag to*/
   /* indicate if this color came from PPS system.*/
   /* *******************************************************/

  VSYDVX02.XGP-GPC-CD = SY2REC.XGPCD;
  VSYDVX02.SY-STY-NBR = SY2REC.SY1STNBR;
  VSYDVX02.SY-COLR-CD-ID = SY2REC.SY2CLRID;
  VSYDVX02.XDM-DIM-CD = SY2REC.XDMCD;

  call "VSYDVX02" ("SA", SQLCA, VSYDVX02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VSYDVX02.RB-SG-COLR-ID != 0)
      SYWREC.SYW-ON-PPS-FL = "Y";
    else
      SYWREC.SYW-ON-PPS-FL = "N";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SYWREC.SYW-ON-PPS-FL = "N";
    else
      converseLib.validationFailed(22); /* corp table error - contact sys dvl*/
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY02";
      TA1REC.TA1LOCAT[1] = "S-CHK-SYDVX";
      TA1REC.TA1LOCAT[2] = "VSYDVX02 ";
      TA1REC.TA1LOCAT[3] = "SA";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY02M001";
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYDVX02";
      TA1REC.TA1TBLKE = VSYDVX02.VSYDVX02-KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      exit stack;
    end
  end

end // end SY02S-CHK-SYDVX

// get sel. regions for cur. clr.
Function SY02S-GET-SYREG()

   /* *******************************************************/
   /* get region rows for current color/dim and each user*/
   /* selected region.  Update season, year, offering dates.*/
   /* *******************************************************/

  XP0HWIX1 = 1;

  while (XP0HWIX1 <= 25)
    if (XP0HW01.XP0HWSEL[XP0HWIX1] == "S"       /* user selected region*/
     && XP0HW01.XP0HW-SYREG-FL[XP0HWIX1] == "Y" /* color/region exists*/
     && XP0HW01.XDR-PROD-REG-CD[XP0HWIX1] in SYWREC.XDR-PROD-REG-CD)
      VSYREG02.XDR-PROD-REG-CD = XP0HW01.XDR-PROD-REG-CD[XP0HWIX1];
      TA1REC.TA1PGMNM = "SY02";
      TA1REC.TA1MAP = "SY02M001";
      XPSY003-VAL-SYREG(); /* validate syreg row*/
      if (SQLCA.VAGen_SQLCODE == 0 /* found:*/
       && VSYREG02.XLC-LIFE-CYC-CD[1] <= "10") /* and active*/
        SYAREC.SYABFR = VSYREG02.VSYREG02-GROUP;
        VSYREG02.XPR-PROD-TYP-CD = SY2REC.XPRCD;
        VSYREG02.XSE-SESN-CD = SY2REC.XSECD;
        VSYREG02.XSN-SESN-YR-RNG = SY2REC.XSNYR;
        VSYREG02.SY-PROP-OFFER-XDT = SY2REC.SY2POFXD;
        VSYREG02.SY-FUTR-OFFER-XDT = SY2REC.SY2FOFXD;
        VSYREG02.ZZ-CHNG-DT = SYWREC.ZZZCHGDT;
        VSYREG02.ZZ-CHNG-HHMM = SYWREC.ZZZCHGTM;
        XPSY004-UPD-SYREG(); /* update current syreg row*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SYAREC.SYAUDTYP = "C";
          SYAREC.ZZZSDT = SYWREC.ZZZCHGDT;
          SYAREC.ZZZSTM = SYWREC.ZZZCHGTM;
          XPSY005-AUD-SYREG();
          SY9REC.SY9TGTYP = "C";
          SY9REC.ZZZSDT = SYWREC.ZZZCHGDT;
          SY9REC.ZZZSTM = SYWREC.ZZZCHGTM;
          XPSY006-TAG-SYREG();
        end
      end
    end
    XP0HWIX1 = XP0HWIX1 + 1;
  end


end // end SY02S-GET-SYREG

// Validate XDR region
Function SY02S-GET-XP0HM()

   /* Validate XDR Prod Region code*/

  XP0HW01.XP0HW-ONLY-SYREG-FL = "N";
  if (SY02M001.XGPCD == "02")
    XP0HW01.XP0HW-AUTO-SEL-FL = "Y"; /* if only 1 rgn, suppress map*/
  else
    XP0HW01.XP0HW-AUTO-SEL-FL = "N"; /* if only 1 rgn, display map*/
  end
  XP0HW01.XGPCD = SY02M001.XGPCD;
  XP0HW01.SY1STNBR = SY02M001.SY1STNBR;
  XP0HW01.SY2CLRID = SY02M001.SY2CLRID;
  XP0HW01.XDMCD = SY02M001.XDMCD;

  XP0H001(); /* so do it*/

  if (XP0HW02.XP0HWERR == "Y") /* we have an error*/
    if (XP0HW02.XP0HWENR == 0) /* Invalid function key*/
      converseLib.validationFailed(19);
    end
    if (XP0HW02.XP0HWENR == 1) /* No rows found*/
      converseLib.validationFailed(50);
    end
    if (XP0HW02.XP0HWENR == 2) /* Corp. Table Error*/
      converseLib.validationFailed(23);
    end
    return;
  else
    converseLib.clearScreen();
    
  end


end // end SY02S-GET-XP0HM

// GET ROW FROM YSNTBL
Function SY02S-GET-YSN()

       /* ******************************************/
       /* *  GET PROPER ROW FROM YSNTBL.          **/
       /* ******************************************/

  SY02W01.SY02W-FND-YSN = "N";
  SYWREC.SYWINDEX = 1;
  while (YSNTBL.XGPCD[SYWINDEX] != "99"
   && SY02W01.SY02W-FND-YSN == "N")
    if (YSNTBL.XGPCD[SYWINDEX] == SY02M001.XGPCD
     && YSNTBL.XDR-PROD-REG-CD[SYWINDEX] == SY02W01.XDR-PROD-REG-CD
     && YSNTBL.XSECD[SYWINDEX] == SY02W01.XSE-SESN-CD
     && YSNTBL.XSNYR[SYWINDEX] == SY02W01.SY02W-XSN-SESN-YR
     && YSNTBL.XXXSTAT[SYWINDEX] == "A")
      SY02W01.SY02W-FND-YSN = "Y";
    else
      SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
    end
  end

end // end SY02S-GET-YSN

// verify development region
Function SY02S-VAL-XDR()

       /* ******************************************/
       /* *  VERIFY DEVELOPMENT REGION CODE AND   **/
       /* *  GET DESCRIPTION.                     **/
       /* ******************************************/

  if (SY02M001.XDR-PROD-REG-CD == "  ")
    SY02M001.XDR-PROD-REG-SDESC = " ";
  else
    if (SY02M001.XDR-PROD-REG-CD in XDRTBL.XDR-PROD-REG-CD)
      SY02M001.XDR-PROD-REG-SDESC = XDRTBL.XDR-PROD-REG-SDESC[sysVar.arrayIndex];
    else
      SY02M001.XDR-PROD-REG-SDESC = "INVALID";
      converseLib.validationFailed(3); /* Invalid Code*/
      set SY02M001.XDR-PROD-REG-CD cursor, bold;
    end
  end

end // end SY02S-VAL-XDR

// validate gpc code
Function SY02SAA()


       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY02M001.XGPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XGPCD cursor, bold;
    SY02M001.XGPABRV = "INVALID";
    return;
  end

  if (SY02M001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(65); /* status code is inactive*/
      set SY02M001.XGPCD cursor, bold;
      SY02M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  else
    set SY02M001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY02M001.XGPABRV = "INVALID";
    exit stack;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/



  if (SY02M001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY02M001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY02M001.XGPABRV = "INVALID";
    exit stack;
  else
    if (SY02M001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY02M001.XGPCD cursor, bold;
      SY02M001.XGPABRV = "INVALID CODE";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end



end // end SY02SAA

// cobol date routine
Function SY02SAB()


  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0222)
    return;
  else
    if (TA2REC.TA2RTNCD != 0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY02SAB";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC) {isExternal = yes};
      converseLib.validationFailed(30); /* invalid date entered*/
      exit stack;
    else
      /* next sentence*/
    end
  end





end // end SY02SAB

// check pfkeys & transfer
Function SY02SBA()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY02M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY02M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY02SBG(); /* transfer to sy0m application*/
        SY02M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY02M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY02M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY02M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is pf13)
            SYWREC.SYWPFOPT = " ";
            COMMAREA.CAUSERA = SYWREC.SYWTRANF;
            SY02SBH(); /* transfer to sy04 color menu application*/
            SY02M001.SYMSCMSG = COMMAREA.CAMSG;
            set SY02M001 alarm;
            converseLib.validationFailed(1);
            exit stack;
          else
            if (converseVar.eventKey is pf14)
              SYWREC.SYWPFOPT = "PF14 ";
              COMMAREA.CAUSERA = SYWREC.SYWTRANF;
              SY02SBH(); /* transfer to sy04 color menu application*/
              SY02M001.SYMSCMSG = COMMAREA.CAMSG;
              set SY02M001 alarm;
              converseLib.validationFailed(1);
              exit stack;
            else
              if (converseVar.eventKey is pf15)
                SYWREC.SYWPFOPT = " ";
                COMMAREA.CAUSERA = SYWREC.SYWTRANF;
                SY02SBJ(); /* transfer to sy04 color menu application*/
                SY02M001.SYMSCMSG = COMMAREA.CAMSG;
                set SY02M001 alarm;
                converseLib.validationFailed(1);
                exit stack;
              else
                if (converseVar.eventKey is pf17)
                  SYWREC.SYWPFOPT = " ";
                  COMMAREA.CAUSERA = SYWREC.SYWTRANF;
                  SY02SBK(); /* transfer to sy03 chg. size*/
                                   /* application*/
                  SY02M001.SYMSCMSG = COMMAREA.CAMSG;
                  set SY02M001 alarm;
                  converseLib.validationFailed(1);
                  exit stack;
                else
                  if (converseVar.eventKey is enter
                   || converseVar.eventKey is pf12)
                    return;
                  else
                    exit stack;
                  end
                end
              end
            end
          end
        end
      end
    end
  end


end // end SY02SBA

// validate entry fields
Function SY02SBB()


       /* ***************************************/
       /* * gpc code and a style number must   **/
       /* * be valid before continuing.        **/
       /* ***************************************/

  if (SY02M001.SY1STNBR == " ")
    converseLib.validationFailed(32);
    set SY02M001.SY1STNBR cursor, bold;
  else
    /* next sentence*/
  end

  if (SY02M001.XGPCD == " ")
    converseLib.validationFailed(40);
    set SY02M001.XGPCD cursor, bold;
  else
    SY02SBV();
    SYWREC.XGPCD = SY02M001.XGPCD;
    SYWREC.XGPABRV = SY02M001.XGPABRV;
  end

  if (SY02M001.SY2CLRID != " "
   && SY02M001.XDMCD == " ")
    converseLib.validationFailed(40);
    set SY02M001.XDMCD cursor, bold;
  else
    /* next sentence*/
  end

  if (SY02M001.XDMCD != " "
   && SY02M001.SY2CLRID == " ")
    converseLib.validationFailed(40);
    set SY02M001.SY2CLRID cursor, bold;
  else
    /* next sentence*/
  end
end // end SY02SBB

// get style row
Function SY02SBC()


       /* ******************************************/
       /* *     GET  STYLE DATA                   **/
       /* *                                       **/
       /* ******************************************/

  set SQLCA empty;


  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY02M001.SY1STYNM = SY1REC.SY1STYNM;
    SY02M001.SY1BSTNB = SY1REC.SY1BSTNB;
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style record does not exists*/
      set SY02M001.SY1STNBR cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY02   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY02SBC  ";
      TA1REC.TA1LOCAT[3] = "IO0120   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY02M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SY1REC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error....*/
      set SY02M001.SY1STNBR cursor, bold;
      exit stack;
    end
  end


end // end SY02SBC

// get color row
Function SY02SBD()


       /* ******************************************/
       /* *  GET  COLOR/DIM RECORD                **/
       /* ******************************************/

  set SQLCA empty;
  set SY2REC empty;

  SY2REC.XGPCD = SY02M001.XGPCD;
  SY2REC.SY1STNBR = SY02M001.SY1STNBR;
  SY2REC.SY2CLRID = SY02M001.SY2CLRID;
  SY2REC.XDMCD = SY02M001.XDMCD;


  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    if (SY2REC.XDR-PROD-REG-CD in SYWREC.XDR-PROD-REG-CD)
          /* OK, color valid  */
    else
      converseLib.validationFailed(193); /* else color invalid*/
      set SY02M001.SY2CLRID cursor, bold;
      exit stack;
    end

    move SY2REC to SY02M001 withV60Compat;
    SY02M001.XPCCD = SY2REC.XPCCD;
    SY02M001.XPLCD = SY2REC.XPLCD;
    SYEREC.SY2DATA = SY2REC.SY2DATA;
    SYWREC.XGPCD = SY2REC.XGPCD;
    if (SY2REC.XGPCD == "02")
      SY02M001.XCLCD[1] = SY2REC.XCLCD1;
      SY02M001.XCLCD[2] = SY2REC.XCLCD4;
      SY02M001.XCLCD[3] = SY2REC.XCLCD2;
      SY02M001.XCLCD[4] = SY2REC.XCLCD3;
    else
      SY02M001.XCLCD[1] = SY2REC.XCLCD1;
      SY02M001.XCLCD[2] = SY2REC.XCLCD2;
      SY02M001.XCLCD[3] = SY2REC.XCLCD3;
      SY02M001.XCLCD[4] = SY2REC.XCLCD4;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(7);
                                   /* color/dimension record does not exist*/
      set SY02M001.SY2CLRID cursor, bold;
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY02   ";
      TA1REC.TA1LOCAT[1] = "S       ";
      TA1REC.TA1LOCAT[2] = "SY02SBD ";
      TA1REC.TA1LOCAT[3] = "IO0130  ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY02M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error*/
      set SY02M001.SY2CLRID cursor, bold;
      exit stack;
    end
  end


end // end SY02SBD

// get color code desc.
Function SY02SBE()

       /* ********************************************/
       /* *   GET THE CODE DESC. FOR THE COLOR      **/
       /* *   SCREEN. (SY02M001)                    **/
       /* ********************************************/


       /* ********************************************/
       /* * GET MATERIAL CONTENT UPPER CODE DESC.   **/
       /* ********************************************/

  SY02SBL();

       /* ********************************************/
       /* *    GET DEVELOPMENT REGION CODE DESC.    **/
       /* ********************************************/

  SY02S-VAL-XDR();

       /* ********************************************/
       /* *    GET OPTIONAL GROUP CODE DESC.        **/
       /* ********************************************/

  SY02SBM();

       /* ********************************************/
       /* *    GET WAREHOUSE CODE DESC.             **/
       /* ********************************************/

  SY02SBZ();

       /* ********************************************/
       /* *   GET COLOR CODE 4 DESC.                **/
       /* ********************************************/

  SY02SBY();

       /* ********************************************/
       /* *   GET COLOR CODE 3 DESC.                **/
       /* ********************************************/

  SY02SBN();

       /* ********************************************/
       /* *   GET COLOR CODE 2 DESC.                **/
       /* ********************************************/
  SY02SBO();

       /* ********************************************/
       /* *    GET COLOR CODE 1 DESC.               **/
       /* ********************************************/

  SY02SBP();

       /* ********************************************/
       /* *   GET PRODUCT TYPE CODE DESC.           **/
       /* ********************************************/

  SY02SBQ();

       /* ********************************************/
       /* *    GET DIVISION CODE DESC.              **/
       /* ********************************************/

  SY02SBR();

       /* ********************************************/
       /* *    GET SEASON CODE DESC.                **/
       /* ********************************************/

  SY02SBS();

       /* ********************************************/
       /* *    GET DIMENSION CODE AND DESC.         **/
       /* ********************************************/

  SY02SBT();

       /* ********************************************/
       /* *   GET PRODUCT category code desc.       **/
       /* ********************************************/

  SY02SBW();

       /**********************************************/
       /* *  GET PRODUCT Line code desc. **/
       /* ********************************************/

  SY02SCU();

       /* ********************************************/
       /* *   GET Blank Color Description           **/
       /* ********************************************/

  SY02SCS();

       /* ********************************************/
       /* *   GET Root Style Description            **/
       /* ********************************************/

  SY02SCT();

      /* ** format backorder date for screen sy02m001.  ***/

  SYWREC.SYWTODCK = SY02M001.SY2BOEDT;

  SYWREC.SYWBKDMM = SYWREC.SYWTODMM;
  SYWREC.SYWBKDDD = SYWREC.SYWTODDD;
  SYWREC.SYWBKDYY = SYWREC.SYWTODYY;
  SY02M001.SY2BOEDT = SYWREC.SYWBKMAP;


end // end SY02SBE

// set screen att. normal
Function SY02SBF()


       /* ******************************************/
       /* *  set sy02m001 screen attributes to    **/
       /* *  normal                               **/
       /* ******************************************/


  set SY02M001.XGPCD normal;
  set SY02M001.SY1STNBR normal;
  /*IF SY02M001.XGPCD EQ '03';*/
  /*  SET SY02M001.SY02MSPF NORMAL;*/
  /*END;*/
  set SY02M001.SY2CLRID normal;
  set SY02M001.SY2CLRAB normal;
  set SY02M001.SY2CLRDS normal;
  set SY02M001.SY2RSTNB normal;
  set SY02M001.SY2BCLCD normal;
  set SY02M001.XDMCD normal;
  set SY02M001.XSECD normal;
  set SY02M001.XSNYR normal;
  set SY02M001.XDVCD normal;
  set SY02M001.XPCCD normal;
  set SY02M001.XPLCD normal;
  set SY02M001.XPRCD normal;
  set SY02M001.XCLCD[1] normal;
  set SY02M001.XCLCD[2] normal;
  set SY02M001.XCLCD[3] normal;
  set SY02M001.XCLCD[4] normal;
  set SY02M001.XOGCD normal;
  set SY02M001.XDR-PROD-REG-CD normal;
  set SY02M001.XWHCD[1] normal;
  set SY02M001.XWHCD[2] normal;
  set SY02M001.XWHCD[3] normal;
  set SY02M001.XWHCD[4] normal;
  set SY02M001.SY-DUTY-RT-CD normal;
  set SY02M001.XMCCD1 normal;
  set SY02M001.XMCCD2 normal;
  set SY02M001.XMCCD3 normal;
  set SY02M001.XMCCD4 normal;
  set SY02M001.SY2MCP1 normal;
  set SY02M001.SY2MCP2 normal;
  set SY02M001.SY2MCP3 normal;
  set SY02M001.SY2MCP4 normal;
  set SY02M001.SY2BOSWI normal;
  set SY02M001.SY2BOEDT normal;
  set SY02M001.SY2PKGFL normal;

  SY02M001.SYMSCMSG = " ";

end // end SY02SBF

// transfer to sy0m applicaion
Function SY02SBG()

       /* ***************************************/
       /* * transfer to produt style chg. sub. **/
       /* * menu.                              **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY0M";
  XSEXIT();


end // end SY02SBG

// transfer to sy01 application
Function SY02SBH()

       /* ***************************************/
       /* * transfer to produt change color    **/
       /* * application                        **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY01";
  XSEXIT();


end // end SY02SBH

// transfer to sy04 application
Function SY02SBJ()

       /* ***************************************/
       /* * transfer to produt style color     **/
       /* * menu application                   **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY04";
  XSEXIT();


end // end SY02SBJ

// transfer to sy03 application
Function SY02SBK()

       /* ***************************************/
       /* * transfer to produt change size     **/
       /* * application                        **/
       /* ***************************************/

  COMMAREA.CATOAP = "SY03";
  XSEXIT();


end // end SY02SBK

// verify mat. content upper cd.
Function SY02SBL()


       /* ******************************************/
       /* *  VERIFY four material content codes,  **/
       /* *  and get their descriptions.          **/
       /* ******************************************/

  if (SY02M001.XMCCD1 != "  ")
    if (SY02M001.XMCCD1 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY02M001.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        SY02M001.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        set SY02M001.XMCCD1 bold;
        converseLib.validationFailed(66); /* status code is inactive*/
      end
    else
      set SY02M001.XMCCD1 cursor, bold;
      SY02M001.XMCSDESC[1] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY02M001.XMCCD2 != "  ")
    if (SY02M001.XMCCD2 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY02M001.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        SY02M001.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        set SY02M001.XMCCD2 bold;
        converseLib.validationFailed(66); /* status code is inactive*/
      end
    else
      set SY02M001.XMCCD2 cursor, bold;
      SY02M001.XMCSDESC[2] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY02M001.XMCCD3 != "  ")
    if (SY02M001.XMCCD3 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY02M001.XMCSDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        SY02M001.XMCSDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        set SY02M001.XMCCD3 bold;
        converseLib.validationFailed(66); /* status code is inactive*/
      end
    else
      set SY02M001.XMCCD3 cursor, bold;
      SY02M001.XMCSDESC[3] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY02M001.XMCCD4 != "  ")
    if (SY02M001.XMCCD4 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY02M001.XMCSDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        SY02M001.XMCSDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
        set SY02M001.XMCCD4 bold;
        converseLib.validationFailed(66); /* status code is inactive*/
      end
    else
      set SY02M001.XMCCD4 cursor, bold;
      SY02M001.XMCSDESC[4] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


end // end SY02SBL

// verify optional group code
Function SY02SBM()

       /* ******************************************/
       /* *  VERIFY OPTIONAL GROUP CODE AND GET   **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY02M001.XOGCD == "  ")
    return;
  else
    /* next sentence*/
  end

  if (SY02M001.XOGCD in XOGTBL.XOGCD)
    if (XOGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex];
    else
      SY02M001.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex];
      set SY02M001.XOGCD bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    set SY02M001.XOGCD cursor, bold;
    SY02M001.XOGABRV = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY02SBM

// verify tertiary color code
Function SY02SBN()

       /* ******************************************/
       /* *  VERIFY COLOR CODE 3 AND              **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  if (SY02M001.XCLCD[3] == "  ")
    SY02M001.XCLCD[3] = "000";
  end

  if (SY02M001.XCLCD[3] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY02M001.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY02M001.XCLCD[3] bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XCLCD[3] cursor, bold;
    SY02M001.XCLABRV[3] = "INVALID";
  end

end // end SY02SBN

// VERIFY SECONDARY COLOR CODE
Function SY02SBO()

       /* ******************************************/
       /* *  VERIFY COLOR CODE 2 AND GET          **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY02M001.XCLCD[2] == "  ")
    SY02M001.XCLCD[2] = "000";
  end

  if (SY02M001.XCLCD[2] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XCLABRV[2] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY02M001.XCLABRV[2] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY02M001.XCLCD[2] bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XCLCD[2] cursor, bold;
    SY02M001.XCLABRV[2] = "INVALID";
  end

end // end SY02SBO

// verify primary color code
Function SY02SBP()


       /* ******************************************/
       /* *  verify color code 1 and              **/
       /* *  get the description.                 **/
       /* ******************************************/

  if (SY02M001.XCLCD[1] == "  ")
    SY02M001.XCLCD[1] = "000";
  end

  if (SY02M001.XCLCD[1] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY02M001.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY02M001.XCLCD[1] bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XCLCD[1] cursor, bold;
    SY02M001.XCLABRV[1] = "INVALID";
  end

end // end SY02SBP

// VERIFY PRODUCT TYPE CODE
Function SY02SBQ()

       /* ******************************************/
       /* *  VERIFY PRODUCT TYPE CODE AND GET     **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY02M001.XPRCD == " ")
    return;
  end

  if (SY02M001.XPRCD in XPRTBL.XPRCD)
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
    else
      SY02M001.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
      set SY02M001.XPRCD bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    set SY02M001.XPRCD cursor, bold;
    SY02M001.XPRDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY02SBQ

// VERIFY DIVISION CODE
Function SY02SBR()

       /* ******************************************/
       /* *  VERIFY DIVISION CODE AND GET         **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY02M001.XDVCD == "99")
    return;
  else
    /* next sentence*/
  end

  if (SY02M001.XDVCD in XDVTBL.XDVCD)
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    else
      SY02M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
      set SY02M001.XDVCD bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    set SY02M001.XDVCD cursor, bold;
    SY02M001.XDVDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY02SBR

// VERIFY SEASON CODE
Function SY02SBS()

       /* ******************************************/
       /* *  VERIFY SEASON CODE AND GET           **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY02M001.XSECD in XSETBL.XSECD)
    if (XSETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
    else
      SY02M001.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
      set SY02M001.XSECD bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    set SY02M001.XSECD cursor, bold;
    SY02M001.XSEDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY02SBS

// verify dimension code
Function SY02SBT()

       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY02M001.XDMCD == " ")
    return;
  else
    /* next sentence*/
  end

  if (SY02M001.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      set SY02M001.XDMCD protect;
    else
      SY02M001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
      set SY02M001.XDMCD protect, bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    set SY02M001.XDMCD protect, bold;
    SY02M001.XDMDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY02SBT

// set screen fields protect
Function SY02SBU()


       /* ******************************************/
       /* *  set sy02m001 screen attributes to    **/
       /* *  protect                              **/
       /* ******************************************/

  /*IF SY02M001.XGPCD EQ '03';*/
  /*  SET SY02M001.SY02MSPF PROTECT;*/
  /*END;*/
  set SY02M001.SY2CLRAB protect;
  set SY02M001.SY2CLRDS protect;
  set SY02M001.SY2BCLCD protect;
  set SY02M001.SY2RSTNB protect;
  set SY02M001.XSNYR protect;
  set SY02M001.XSECD protect;
  set SY02M001.XDVCD protect;
  set SY02M001.XPRCD protect;
  /*SET SY02M001.XPCCD PROTECT;*/
  set SY02M001.XCLCD[1] protect;
  set SY02M001.XCLCD[2] protect;
  set SY02M001.XCLCD[3] protect;
  set SY02M001.XCLCD[4] protect;
  set SY02M001.XOGCD protect;
  set SY02M001.XDR-PROD-REG-CD protect;
  set SY02M001.XWHCD[1] protect;
  set SY02M001.XWHCD[2] protect;
  set SY02M001.XWHCD[3] protect;
  set SY02M001.XWHCD[4] protect;
  set SY02M001.SY-DUTY-RT-CD protect;
  set SY02M001.XMCCD1 protect;
  set SY02M001.XMCCD2 protect;
  set SY02M001.XMCCD3 protect;
  set SY02M001.XMCCD4 protect;
  set SY02M001.SY2MCP1 protect;
  set SY02M001.SY2MCP2 protect;
  set SY02M001.SY2MCP3 protect;
  set SY02M001.SY2MCP4 protect;
  set SY02M001.SY2BOSWI protect;
  set SY02M001.SY2BOEDT protect;
  set SY02M001.SY2PKGFL protect;

end // end SY02SBU

// validate gpc codes
Function SY02SBV()


       /* ******************************************/
       /* *  VERIFY GENERAL PRODUCT CLASS CODE    **/
       /* ******************************************/

  if (SY02M001.XGPCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XGPCD cursor, bold;
    SY02M001.XGPABRV = "INVALID";
    return;
  end

  if (SY02M001.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
      SYWREC.XGPCD = XGPTBL.XGPCD[sysVar.arrayIndex];
    else
      converseLib.validationFailed(65); /* status code is inactive*/
      set SY02M001.XGPCD cursor, bold;
      SY02M001.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    end
  else
    set SY02M001.XGPCD cursor, bold;
    converseLib.validationFailed(3); /* invalid code*/
    SY02M001.XGPABRV = "INVALID";
    exit stack;
  end


       /* ******************************************/
       /* *  CHECK IF USER  IS AUTHORIZED         **/
       /* *  FOR THIS GPC CODE                    **/
       /* ******************************************/



  if (SY02M001.XGPCD == "02"
   && COMMAREA.CAALVL[2] == "N")
    set SY02M001.XGPCD cursor, bold;
    converseLib.validationFailed(35); /* not authorized to access gpc*/
    SY02M001.XGPABRV = "INVALID";
    exit stack;
  else
    if (SY02M001.XGPCD == "03"
     && COMMAREA.CAALVL[3] == "N")
      set SY02M001.XGPCD cursor, bold;
      SY02M001.XGPABRV = "INVALID CODE";
      converseLib.validationFailed(35); /* not authorized to access gpc*/
      exit stack;
    else
      /* next sentence*/
    end
  end



end // end SY02SBV

// VERIFY PRODUCT category code
Function SY02SBW()

       /* ******************************************/
       /* *  VERIFY PRODUCT category code and get **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  /*IF SY02M001.XPCCD = '  '*/
  /*  AND SY02M001.XGPCD = '03';*/
  /*  MOVE 3 TO EZEMNO;*/
  /*  SET SY02M001.XPCCD CURSOR,BRIGHT;*/
  /*  MOVE 'INVALID' TO SY02M001.XPCDESC;*/
  /*  EZERTN();*/
  /*ELSE;*/
  /*  IF SY02M001.XPCCD = '  ';*/
  /*    EZERTN();*/
  /*  END;*/
  /*END;*/

  if (SY02M001.XPCCD == "  "
   && SY02M001.XGPCD != "03")
    converseLib.validationFailed(245);
    set SY02M001.XPCCD cursor, bold;
    SY02M001.XPCDESC = "INVALID";
    return;
  else
    if (SY02M001.XPCCD == "  ")
      return;
    end
  end

  SYWREC.SYWINDEX = 1;

  while (XPCTBL.XPCCD[SYWINDEX] != "99")
    if (SYWREC.XGPCD == XPCTBL.XGPCD[SYWINDEX]
     && SY02M001.XPCCD == XPCTBL.XPCCD[SYWINDEX])
      if (XPCTBL.XXXSTAT[SYWINDEX] == "A")
        SY02M001.XPCDESC = XPCTBL.XPCDESC[SYWINDEX];
        return;
      else
        SY02M001.XPCDESC = "INACTIVE";
        set SY02M001.XPCCD bold;
        converseLib.validationFailed(66); /* status code is inactive*/
        return;
      end
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end


  set SY02M001.XPCCD cursor, bold;
  SY02M001.XPCDESC = "INVALID";
  converseLib.validationFailed(3); /* invalid code*/


end // end SY02SBW

// set screen fields protect
Function SY02SBX()


       /* ******************************************/
       /* *  set sy02m001 screen attributes to    **/
       /* *  protect. A NIL user can only change  **/
       /* *  the overlay percents.                **/
       /* ******************************************/

  /*MOVE 'N' TO SY02M001.SY02MSPF;*/
  /*SET SY02M001.SY02MSPP AUTOSKIP,DARK;*/
  /*SET SY02M001.SY02MSPF AUTOSKIP,DARK;*/
  set SY02M001.SY2CLRAB protect;
  set SY02M001.SY2CLRDS protect;
  set SY02M001.SY2BCLCD protect;
  set SY02M001.XSNYR protect;
  set SY02M001.XSECD protect;
  set SY02M001.XDVCD protect;
  set SY02M001.XPRCD protect;
  set SY02M001.XPCCD protect;
  set SY02M001.XCLCD[1] protect;
  set SY02M001.XCLCD[2] protect;
  set SY02M001.XCLCD[3] protect;
  set SY02M001.XCLCD[4] protect;
  set SY02M001.XOGCD protect;
  set SY02M001.XDR-PROD-REG-CD protect;
  set SY02M001.XWHCD[1] protect;
  set SY02M001.XWHCD[2] protect;
  set SY02M001.XWHCD[3] protect;
  set SY02M001.XWHCD[4] protect;
  set SY02M001.SY-DUTY-RT-CD protect;
  set SY02M001.SY2BOSWI protect;
  set SY02M001.SY2BOEDT protect;
  set SY02M001.SY2PKGFL protect;

end // end SY02SBX

// Get LOGO Color
Function SY02SBY()

       /* ******************************************/
       /* *  VERIFY COLOR CODE 4 AND              **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  if (SY02M001.XCLCD[4] == "  ")
    SY02M001.XCLCD[4] = "000";
  end

  if (SY02M001.XCLCD[4] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XCLABRV[4] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY02M001.XCLABRV[4] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY02M001.XCLCD[4] bold;
      converseLib.validationFailed(66); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XCLCD[4] cursor, bold;
    SY02M001.XCLABRV[4] = "INVALD";
  end

end // end SY02SBY

// Get Warehouse Codes
Function SY02SBZ()

       /* ******************************************/
       /* *  VERIFY WAREHOUSE CODES AND           **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  SYWREC.SYWINDXA = 4;
  while (SYWREC.SYWINDXA >= 1)
    if (SY02M001.XWHCD[SYWINDXA] != " ")
      if (SY02M001.XWHCD[SYWINDXA] in XWHTBL.XWHCD)
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          SY02M001.XWHSABRV[SYWINDXA] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
        else
          SY02M001.XWHSABRV[SYWINDXA] = XWHTBL.XWHSABRV[sysVar.arrayIndex];
          set SY02M001.XWHCD[SYWINDXA] bold;
          converseLib.validationFailed(66); /* status code is inactive*/
        end
      else
        converseLib.validationFailed(3); /* invalid code*/
        set SY02M001.XWHCD[SYWINDXA] cursor, bold;
        SY02M001.XWHSABRV[SYWINDXA] = "INVALD";
      end
    else
      SY02M001.XWHSABRV[SYWINDXA] = " ";
    end
    SYWREC.SYWINDXA = SYWREC.SYWINDXA - 1;
  end

end // end SY02SBZ

// check pf keys & transfer
Function SY02SCA()

       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf1)
      XSPF1();
      SY02M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY02M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf3)
        SY02SBG(); /* transfer to sy0m application*/
        SY02M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY02M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
          SY02M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY02M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is enter
           || converseVar.eventKey is pf12
           || converseVar.eventKey is pf13
           || converseVar.eventKey is pf14
           || converseVar.eventKey is pf15
           || converseVar.eventKey is pf17)
            return;
          else
            exit stack;
          end
        end
      end
    end
  end


end // end SY02SCA

// validate sy02m001 screen
Function SY02SCB()


      /* ** validate backorder date ***/

  SYWREC.SYWBKMAP = SY02M001.SY2BOEDT;
  if (SYWREC.SYWBKDYY < 70)
    SYWREC.SYWBKDCC = 20;
  else
    SYWREC.SYWBKDCC = 19;
  end

       /* **** move backorder date to work in storage*/
       /* **** field, and then move them again*/
       /* **** so that the dates can be compared.*/

  SYWREC.SYWTODMM = SYWREC.SYWBKDMM;
  SYWREC.SYWTODDD = SYWREC.SYWBKDDD;
  SYWREC.SYWTODYY = SYWREC.SYWBKDYY;
  SYWREC.SYWTODCC = SYWREC.SYWBKDCC;

  if (SYWREC.SYWTODCK == SYEREC.SY2BOEDT)
    SYWREC.SYWBKDHL = SYWREC.SYWTODCK;
  else
    if (SYWREC.SYWTODCK >= SYWREC.SYWTODAY) /* check for input date gt today*/
      TA2REC.TA2GRGGN = SYWREC.SYWTODCK; /* if date gt today is it valid*/
      TA2REC.TA2GRTYP = "G";
      TA2REC.TA2DTOPT = "GREGGREG";

      SY02SAB();
      if (TA2REC.TA2RTNCD == 0)
        SYWREC.SYWBKDHL = SYWREC.SYWTODCK; /* this is a backorder hold date*/
      else
        if (TA2REC.TA2RTNCD == 00222)
          converseLib.validationFailed(30); /* invalid date*/
          set SY02M001.SY2BOEDT cursor, bold;
        else
          converseLib.validationFailed(42);
          set SY02M001.SY2BOEDT cursor, bold;
        end
      end
    else
      converseLib.validationFailed(30);
      set SY02M001.SY2BOEDT cursor, bold;
    end
  end


     /* *** validate backorder switch*/

  if (SY02M001.SY2BOSWI == "Y"
   || SY02M001.SY2BOSWI == "N")
    /* next sentence*/
  else
    converseLib.validationFailed(36); /* enter a 'y' or 'n'*/
    set SY02M001.SY2BOSWI cursor, bold;
  end


     /* *** validate package flag*/

  if (SY02M001.SY2PKGFL == "Y")
    if (SY1REC.XUMCD == "01")
      converseLib.validationFailed(153); /* package flag must by n*/
      set SY02M001.SY2PKGFL cursor, bold;
    end
  else
    if (SY02M001.SY2PKGFL != "N")
      converseLib.validationFailed(36); /* enter a 'y' or 'n'*/
      set SY02M001.SY2PKGFL cursor, bold;
    end
  end


       /* ******************************************/
       /* *  validate and retrieve the codes for  **/
       /* *  sy0bm005 screen                      **/
       /* ******************************************/

  SY02SCC();


  if (SY02M001.SY2CLRAB == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY02M001.SY2CLRAB cursor, bold;
  else
    /* next sentence*/
  end

  if (SY02M001.SY2CLRDS == " ")
    converseLib.validationFailed(40); /* required field*/
    set SY02M001.SY2CLRDS cursor, bold;
  else
    /* next sentence*/
  end


end // end SY02SCB

// validate codes
Function SY02SCC()


       /* ********************************************/
       /* * CHECK SEASONAL PRODUCT FILE FLAG        **/
       /* ********************************************/

  /*IF SY02M001.XGPCD NE '03';       /* If it's not apparel*/
  /*  MOVE 'N' TO SY02M001.SY02MSPF; /* default flag*/
  /*ELSE;*/
  /*  IF SY02M001.SY02MSPF NE 'N'*/
  /*    AND SY02M001.SY02MSPF NE 'Y';*/
  /*    MOVE 36 TO EZEMNO;           /* value must by y or n*/
  /*    SET SY02M001.SY02MSPF CURSOR,BRIGHT;*/
  /*  END;*/
  /*END;*/

       /* ********************************************/
       /* * GET MATERIAL CONTENT UPPER CODE DESC.   **/
       /* ********************************************/

  SY02SCF();

       /* ********************************************/
       /* *    GET DEVELOPMENT REGION CODE DESC.    **/
       /* ********************************************/

  SY02S-VAL-XDR();

       /* ********************************************/
       /* *    GET OPTIONAL GROUP CODE DESC.        **/
       /* ********************************************/

  SY02SCG();

       /* ********************************************/
       /* *    VALIDATE DUTY RATE CODE.             **/
       /* ********************************************/

  if (SY02M001.SY-DUTY-RT-CD != "  ")
    VDTYRT01.SY-DUTY-RT-CD = SY02M001.SY-DUTY-RT-CD;
    call "IO6320" ("S ", SQLCA, VDTYRT01) {isNoRefresh = yes, isExternal = yes};
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(3); /* Invalid Code*/
      set SY02M001.SY-DUTY-RT-CD cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1TYPE = "DB2";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SY02";
        TA1REC.TA1LOCAT[1] = "S";
        TA1REC.TA1LOCAT[2] = "SY02SCC";
        TA1REC.TA1MAP = "SY02M001";
        TA1REC.TA1DBASE = "DPROD";
        TA1REC.TA1TBLVU = "VDTYRT01";
        TA1REC.TA1TBLKE = SY02M001.SY-DUTY-RT-CD;
        move SQLCA to ERRSQLCA withV60Compat;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        converseLib.validationFailed(23);
        set SY02M001.SY-DUTY-RT-CD cursor, bold;
      end
    end
  end

       /* ********************************************/
       /* *    GET WAREHOUSE CODE DESC.             **/
       /* ********************************************/

  SY02SBZ();

       /* ********************************************/
       /* *   GET COLOR CODE 4 DESC.                **/
       /* ********************************************/

  SY02SBY();

       /* ********************************************/
       /* *   GET COLOR CODE 3 DESC.                **/
       /* ********************************************/

  SY02SCH();

       /* ********************************************/
       /* *   GET COLOR CODE 2 DESC.                **/
       /* ********************************************/
  SY02SCI();

       /* ********************************************/
       /* *    GET COLOR CODE 1 DESC.               **/
       /* ********************************************/

  SY02SCJ();

       /* ********************************************/
       /* *   GET PRODUCT TYPE CODE DESC.           **/
       /* ********************************************/

  SY02SCK();

       /* ********************************************/
       /* *    GET DIVISION CODE DESC.              **/
       /* ********************************************/

  SY02SCL();

       /* ********************************************/
       /* *    GET SEASON CODE DESC.                **/
       /* ********************************************/

  SY02SCM();

       /* ********************************************/
       /* *    GET DIMENSION CODE AND DESC.         **/
       /* ********************************************/

  SY02SCN();

       /* ********************************************/
       /* *   GET PRODUCT category code desc.       **/
       /* ********************************************/

  SY02SCR();

       /* ********************************************/
       /* *   GET PRODUCT Line code desc.       **/
       /* ********************************************/

  SY02SCU();


       /* ********************************************/
       /* *   GET Blank Color Description           **/
       /* ********************************************/

  SY02SCS();

       /* ********************************************/
       /* *   GET Root Style Description            **/
       /* ********************************************/

  SY02SCT();


end // end SY02SCC

// if changes update color
Function SY02SCD()


       /* ***************************************/
       /* *  check if changes made. if no      **/
       /* *  changes return, else update style.**/
       /* ***************************************/

   /* set up zzz family record for updates/inserts*/
  set TA2REC empty;
  TA2REC.TA2DTOPT = "GETDATE";
  SY02SAB();
  SYWREC.ZZZSDT = TA2REC.TA2GRGGN;
  SYWREC.ZZZCHGDT = TA2REC.TA2GRGGN;
  SYWREC.ZZZCHGTM = TA2REC.TA2TIMHM;

  SY02W01.SYWMSGFL = "N"; /* set flag default no*/
  /*IF SY02M001.SY02MSPF EQ 'Y';     /* user requested seasonal recs.*/
  /*  SY02SPF();                     /* create seasonal record*/
  /*END;*/

  move SY02M001 to SY2REC withV60Compat;
  if (SY2REC.XGPCD == "02")
    SY2REC.XCLCD1 = SY02M001.XCLCD[1];
    SY2REC.XCLCD4 = SY02M001.XCLCD[2];
    SY2REC.XCLCD2 = SY02M001.XCLCD[3];
    SY2REC.XCLCD3 = SY02M001.XCLCD[4];
  else
    SY2REC.XCLCD1 = SY02M001.XCLCD[1];
    SY2REC.XCLCD2 = SY02M001.XCLCD[2];
    SY2REC.XCLCD3 = SY02M001.XCLCD[3];
    SY2REC.XCLCD4 = SY02M001.XCLCD[4];
  end
  SY2REC.SY2BOEDT = SYWREC.SYWBKDHL; /* moves valid formated dt*/

  if (SYEREC.SY2DATA != SY2REC.SY2DATA)
    /* next sentence*/
  else
    converseLib.validationFailed(57);
    SYWREC.SYWMSGFL = "Y";
    return;
  end

       /* ***************************************/
       /* *  if season or sn-yr has changed,   **/
       /* *  update apparel offering dates,    **/
       /* *  update color's selected regions.  **/
       /* ***************************************/

  if (SYEREC.XSECD == SY2REC.XSECD
   && SYEREC.XSNYR == SY2REC.XSNYR)
     /* next sentence*/
  else
    if (SY2REC.XGPCD == "03")
      SY02SGA(); /* update offering ending dates*/
    end
  end

  if (SYEREC.XSECD == SY2REC.XSECD
   && SYEREC.XSNYR == SY2REC.XSNYR
   && SYEREC.XPRCD == SY2REC.XPRCD)
     /* next sentence*/
  else
    SY02S-GET-XP0HM(); /* Converse pop-up window*/
    SY02S-GET-SYREG(); /* update selected regions*/
  end

       /* ******************************************/
       /* *   UPD COLOR RECORD TO COLOR TABLE     **/
       /* ******************************************/

  SY02SCO();

       /* ******************************************/
       /* *   CHECK FOR SIZE UPDATE ON XDV CHG    **/
       /* ******************************************/

  if (SYEREC.XDVCD != SY2REC.XDVCD /* User has changed division*/
   && SY2REC.XGPCD != "03")        /* and not Apparel*/
    SY02S-CHK-SIZE(); /* So check size divisions*/
  end


       /* ******************************************/
       /* *   commit style/color/size records     **/
       /* *   to their tables.                    **/
       /* ******************************************/

  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

  converseLib.validationFailed(11);
  SYWREC.SYWMSGFL = "Y";

end // end SY02SCD

// transfer after updated
Function SY02SCE()


       /* *******************************************/
       /* *    check function keys and transfer to **/
       /* *    other application as nessary.       **/
       /* *******************************************/

  if (converseVar.validationMsgNum > 0
   && SYWREC.SYWMSGFL == "N")
    exit stack;
  else
    if (converseVar.eventKey is pf13)
      COMMAREA.CAUSERA = SYWREC.SYWTRANF;
      SY02SBH(); /* transfer to sy04 color menu application*/
      SY02M001.SYMSCMSG = COMMAREA.CAMSG;
      set SY02M001 alarm;
      converseLib.validationFailed(1);
      exit stack;
    else
      if (converseVar.eventKey is pf14)
        SYWREC.SYWPFOPT = "PF14 ";
        COMMAREA.CAUSERA = SYWREC.SYWTRANF;
        SY02SBH(); /* transfer to sy04 color menu application*/
        SY02M001.SYMSCMSG = COMMAREA.CAMSG;
        set SY02M001 alarm;
        converseLib.validationFailed(1);
        exit stack;
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CAUSERA = SYWREC.SYWTRANF;
          SY02SBJ(); /* transfer to sy04 color menu application*/
          SY02M001.SYMSCMSG = COMMAREA.CAMSG;
          set SY02M001 alarm;
          converseLib.validationFailed(1);
          exit stack;
        else
          if (converseVar.eventKey is pf17)
            COMMAREA.CAUSERA = SYWREC.SYWTRANF;
            SY02SBK(); /* transfer to sy03 chg. size*/
                                   /* application*/
            SY02M001.SYMSCMSG = COMMAREA.CAMSG;
            set SY02M001 alarm;
            converseLib.validationFailed(1);
            exit stack;
          else
            if (converseVar.eventKey is enter
             || converseVar.eventKey is pf12)
              return;
            else
              exit stack;
            end
          end
        end
      end
    end
  end


end // end SY02SCE

// verify mat. content upper cd.
Function SY02SCF()


       /* ******************************************/
       /* *  VERIFY four material content codes   **/
       /* *  and get their descriptions.          **/
       /* ******************************************/

  if (SY02M001.XMCCD1 == "  ")
    SY02M001.XMCSDESC[1] = " ";
  else
    if (SY02M001.XMCCD1 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY02M001.XMCSDESC[1] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        if (SY02M001.XMCCD1 == SYEREC.XMCCD1)
                 /* next sentence*/
        else
          set SY02M001.XMCCD1 cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY02M001.XMCSDESC[1] = "INACTIVE";
        end
      end
    else
      set SY02M001.XMCCD1 cursor, bold;
      SY02M001.XMCSDESC[1] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY02M001.XMCCD2 == "  ")
    SY02M001.XMCSDESC[2] = " ";
  else
    if (SY02M001.XMCCD2 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY02M001.XMCSDESC[2] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        if (SY02M001.XMCCD2 == SYEREC.XMCCD2)
                 /* next sentence*/
        else
          set SY02M001.XMCCD2 cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY02M001.XMCSDESC[2] = "INACTIVE";
        end
      end
    else
      set SY02M001.XMCCD2 cursor, bold;
      SY02M001.XMCSDESC[2] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY02M001.XMCCD3 == "  ")
    SY02M001.XMCSDESC[3] = " ";
  else
    if (SY02M001.XMCCD3 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY02M001.XMCSDESC[3] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        if (SY02M001.XMCCD3 == SYEREC.XMCCD3)
                 /* next sentence*/
        else
          set SY02M001.XMCCD3 cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY02M001.XMCSDESC[3] = "INACTIVE";
        end
      end
    else
      set SY02M001.XMCCD3 cursor, bold;
      SY02M001.XMCSDESC[3] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end


  if (SY02M001.XMCCD4 == "  ")
    SY02M001.XMCSDESC[4] = " ";
  else
    if (SY02M001.XMCCD4 in XMCTBL.XMCCD)
      if (XMCTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SY02M001.XMCSDESC[4] = XMCTBL.XMCSDESC[sysVar.arrayIndex];
      else
        if (SY02M001.XMCCD4 == SYEREC.XMCCD4)
                 /* next sentence*/
        else
          set SY02M001.XMCCD4 cursor, bold;
          converseLib.validationFailed(33); /* status code is inactive*/
          SY02M001.XMCSDESC[4] = "INACTIVE";
        end
      end
    else
      set SY02M001.XMCCD4 cursor, bold;
      SY02M001.XMCSDESC[4] = "INVALID";
      converseLib.validationFailed(3); /* invalid code*/
    end
  end

   /* If we have no errors at this point, validate the*/
   /* percentage fields*/
  if (converseVar.validationMsgNum != 0) /* We have other errors*/
    return; /* so exit.*/
  end

  if ((SY02M001.XMCCD4 == "000"
   || SY02M001.XMCCD4 == "   ")
   && SY02M001.SY2MCP4 != 0) /* can't have % with no code*/
    converseLib.validationFailed(148); /* % must be zero*/
    set SY02M001.SY2MCP4 cursor, bold;
  end
  if ((SY02M001.XMCCD3 == "000"
   || SY02M001.XMCCD3 == "   ")
   && SY02M001.SY2MCP3 != 0) /* can't have % with no code*/
    converseLib.validationFailed(148); /* % must be zero*/
    set SY02M001.SY2MCP3 cursor, bold;
  end
  if ((SY02M001.XMCCD2 == "000"
   || SY02M001.XMCCD2 == "   ")
   && SY02M001.SY2MCP2 != 0) /* can't have % with no code*/
    converseLib.validationFailed(148); /* % must be zero*/
    set SY02M001.SY2MCP2 cursor, bold;
  end
  if ((SY02M001.XMCCD1 == "000"
   || SY02M001.XMCCD1 == "   ")
   && SY02M001.SY2MCP1 != 0) /* can't have % with no code*/
    converseLib.validationFailed(148); /* % must be zero*/
    set SY02M001.SY2MCP1 cursor, bold;
  end

   /* Now if the user has entered percentages, they cannot total*/
   /* more than 100% or it's an error.*/
  SYWREC.SYWINDEX = SY02M001.SY2MCP1 + SY02M001.SY2MCP2 +   SY02M001.SY2MCP3 + SY02M001.SY2MCP4;
  if (SYWREC.SYWINDEX > 100) /* Total greater than 100%*/
    converseLib.validationFailed(191); /* Percents do not = 100%*/
    if (SY02M001.SY2MCP4 > 0)
      set SY02M001.SY2MCP4 cursor, bold;
    end
    if (SY02M001.SY2MCP3 > 0)
      set SY02M001.SY2MCP3 cursor, bold;
    end
    if (SY02M001.SY2MCP2 > 0)
      set SY02M001.SY2MCP2 cursor, bold;
    end
    if (SY02M001.SY2MCP1 > 0)
      set SY02M001.SY2MCP1 cursor, bold;
    end
  end

end // end SY02SCF

// verify optional group code
Function SY02SCG()

       /* ******************************************/
       /* *  VERIFY OPTIONAL GROUP CODE AND GET   **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY02M001.XOGCD == "  ")
    SY02M001.XOGABRV = " ";
    return;
  else
    if (SY02M001.XOGCD == "99")
      converseLib.validationFailed(3); /* invalid code*/
      set SY02M001.XOGCD cursor, bold;
      SY02M001.XOGABRV = "INVALID";
      return;
    end
  end

  if (SY02M001.XOGCD in XOGTBL.XOGCD)
    if (XOGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XOGABRV = XOGTBL.XOGABRV[sysVar.arrayIndex];
    else
      if (SY02M001.XOGCD == SYEREC.XOGCD)
        return;
      else
        set SY02M001.XOGCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY02M001.XOGABRV = "INACTIVE";
      end
    end
  else
    set SY02M001.XOGCD cursor, bold;
    SY02M001.XOGABRV = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY02SCG

// verify tertiary color code
Function SY02SCH()

       /* ******************************************/
       /* *  VERIFY TERTIARY COLOR CODE AND       **/
       /* *  GET THE DESCRIPTION.                 **/
       /* ******************************************/

  if (SY02M001.XCLCD[3] == "  ")
    SY02M001.XCLCD[3] = "000";
  end

  if (SY02M001.XCLCD[3] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY02M001.XCLABRV[3] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY02M001.XCLCD[3] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XCLCD[3] cursor, bold;
    SY02M001.XCLABRV[3] = "INVALID";
  end

end // end SY02SCH

// VERIFY SECONDARY COLOR CODE
Function SY02SCI()

       /* ******************************************/
       /* *  VERIFY SECONDARY COLOR CODE AND GET  **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY02M001.XCLCD[2] == "  ")
    SY02M001.XCLCD[2] = "000";
  end

  if (SY02M001.XCLCD[2] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XCLABRV[2] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY02M001.XCLABRV[2] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY02M001.XCLCD[2] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XCLCD[2] cursor, bold;
    SY02M001.XCLABRV[2] = "INVALID";
  end

end // end SY02SCI

// verify primary color code
Function SY02SCJ()


       /* ******************************************/
       /* *  verify primary color code and        **/
       /* *  get the description.                 **/
       /* ******************************************/

  if (SY02M001.XCLCD[1] == "  ")
    SY02M001.XCLCD[1] = "000";
  end

  if (SY02M001.XCLCD[1] in XCLTBL.XCLCD)
    if (XCLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
    else
      SY02M001.XCLABRV[1] = XCLTBL.XCLABRV1[sysVar.arrayIndex];
      set SY02M001.XCLCD[1] bold;
      converseLib.validationFailed(33); /* status code is inactive*/
    end
  else
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XCLCD[1] cursor, bold;
    SY02M001.XCLABRV[1] = "INVALID";
  end

end // end SY02SCJ

// VERIFY PRODUCT TYPE CODE
Function SY02SCK()

       /* ******************************************/
       /* *  VERIFY PRODUCT TYPE CODE AND GET     **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY02M001.XPRCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XPRCD cursor, bold;
    SY02M001.XPRDESC = "INVALID";
    return;
  end

  if (SY02M001.XPRCD in XPRTBL.XPRCD)
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex];
    else
      if (SY02M001.XPRCD == SYEREC.XPRCD)
        return;
      else
        set SY02M001.XPRCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY02M001.XPRDESC = "INACTIVE";
      end
    end
  else
    set SY02M001.XPRCD cursor, bold;
    SY02M001.XPRDESC = "INVALID";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY02SCK

// VERIFY DIVISION CODE
Function SY02SCL()

       /* ******************************************/
       /* *  VERIFY DIVISION CODE AND GET         **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY02M001.XDVCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XDVCD cursor, bold;
    SY02M001.XDVDESC = "INVALID";
    return;
  end

  if (SY02M001.XDVCD in XDVTBL.XDVCD)
    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex];
    else
      if (SY02M001.XDVCD == SYEREC.XDVCD)
        return;
      else
        set SY02M001.XDVCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY02M001.XDVDESC = "INACTIVE";
      end
    end
  else
    set SY02M001.XDVCD cursor, bold;
    SY02M001.XDVDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end


end // end SY02SCL

// VERIFY SEASON CODE
Function SY02SCM()

       /* ******************************************/
       /* *  VERIFY SEASON CODE AND GET           **/
       /* *  THE DESC.                            **/
       /* ******************************************/

  if (SY02M001.XSECD == SY2REC.XSECD /* if code not changed*/
   && SY02M001.XSNYR == SY2REC.XSNYR)
    return; /* we don't need to check any further*/
  end

  if (SY02M001.XSECD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XSECD cursor, bold;
    SY02M001.XSEDESC = "INVALID";
    return;
  end

  if (SY02M001.XSECD in XSETBL.XSECD)
    if (XSETBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XSEDESC = XSETBL.XSEDESC[sysVar.arrayIndex];
    else
      if (SY02M001.XSECD == SYEREC.XSECD)
        return;
      else
        set SY02M001.XSECD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY02M001.XSEDESC = "INACTIVE";
        return;
      end
    end
  else
    set SY02M001.XSECD cursor, bold;
    SY02M001.XSEDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
    return;
  end

  if (XSETBL.XSESETYP[sysVar.arrayIndex] == " ") /* NO ENTRY IN XSN*/
    SY02W01.SY2POFXD = 020431231;
    SY02W01.SY2FOFXD = 020431231;
    SY02W01.SY2NOFXD = 020431231;
    return;
  end

  SY02W01.XSE-SESN-CD = XSETBL.XSESETYP[sysVar.arrayIndex];
  SY02W01.SY02W-XSN-SESN-YR = SY02M001.XSNYR;
  if (SYWREC.XDR-PROD-REG-CD[1] == "02")
    SY02W01.XDR-PROD-REG-CD = "02";
  else
    SY02W01.XDR-PROD-REG-CD = "01";
  end

  SY02S-GET-YSN();

  if (SY02W01.SY02W-FND-YSN == "Y")
    if (SY2REC.XGPCD == "02")
      SY02W01.SY2POFXD = YSNTBL.XSN-SESN-XDT[SYWINDEX];
      SY02W01.SY2FOFXD = YSNTBL.XSN-SESN-XDT[SYWINDEX];
    else
      SY02W01.SY2POFXD = YSNTBL.XSN-SESN-XDT[SYWINDEX];

      SYWREC.SYW-FUTR-OFFER-XDT = YSNTBL.XSN-SESN-XDT[SYWINDEX];
      SYWREC.SYW-FUTR-OFFER-XDR = SY02W01.XDR-PROD-REG-CD;
      XPSY010();
      SY02W01.SY02W-FUTR-OFFER-XDT = SYWREC.SYW-FUTR-OFFER-XDT;
      SY02W01.SY2FOFXD = SYWREC.SYW-FUTR-OFFER-XDT;
    end
  else
    converseLib.validationFailed(130); /* Season not on YSN table*/
    set SY02M001.XSECD cursor, bold;
    set SY02M001.XSNYR bold;
    return;
  end

  if (SY02M001.XGPCD == "03")
    SY02W01.XDR-PROD-REG-CD = "03";
    if (SY02W01.XSE-SESN-CD == "CL"
     || SY02W01.XSE-SESN-CD == "LS")
      SY02W01.XSE-SESN-CD = "SP";
    end
  else
    SY02W01.XDR-PROD-REG-CD = "02";
  end

  SY02S-GET-YSN();

  if (SY02W01.SY02W-FND-YSN == "Y")
    SY02W01.SY2NOFXD = YSNTBL.XSN-SESN-XDT[SYWINDEX];
  else
    converseLib.validationFailed(130); /* Season not on YSN table*/
    set SY02M001.XSECD cursor, bold;
    set SY02M001.XSNYR bold;
  end

end // end SY02SCM

// verify dimension code
Function SY02SCN()

       /* ******************************************/
       /* *  VERIFY DIMENSION CODE AND GET        **/
       /* *  GET THE DESC.                        **/
       /* ******************************************/

  if (SY02M001.XDMCD == "99")
    converseLib.validationFailed(3); /* invalid code*/
    set SY02M001.XDMCD cursor, bold;
    SY02M001.XDMDESC = "INVALID";
    return;
  end

  if (SY02M001.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SY02M001.XDMDESC = XDMTBL.XDMDESC[sysVar.arrayIndex];
    else
      if (SY02M001.XDMCD == SYEREC.XDMCD)
        return;
      else
        set SY02M001.XDMCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY02M001.XDMDESC = "INACTIVE";
      end
    end
  else
    set SY02M001.XDMCD cursor, bold;
    SY02M001.XDMDESC = "INVALID ";
    converseLib.validationFailed(3); /* invalid code*/
  end

end // end SY02SCN

// update color table
Function SY02SCO()


       /* ******************************************/
       /* * UPDATE COLOR RECORD IN COLOR TABLE    **/
       /* *                                       **/
       /* *       IF THERE ARE ANY SQL ERRORS     **/
       /* *       THE RECORD IS NOT ADDED AND     **/
       /* *       THE TABLE IS ROLLED BACK.       **/
       /* *                                       **/
       /* ******************************************/


  if (converseVar.validationMsgNum > 0)
    return;
  end

  set SQLCA empty;

  SY2REC.ZZZCHGDT = SYWREC.ZZZCHGDT;
  SY2REC.ZZZCHGTM = SYWREC.ZZZCHGTM;

  call "IO0130" ("U ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY02SCP(); /* write audit*/
    SY02SCQ(); /* write tag*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(37); /* unable to process update try again.*/
      set SY02M001.SY2CLRID cursor, bold;
      SY02M001.SYMSCMSG = ".. PLEASE TRY AGAIN   ...  ";
      exit stack;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY02   ";
      TA1REC.TA1LOCAT[1] = "U        ";
      TA1REC.TA1LOCAT[2] = "SY02SCO  ";
      TA1REC.TA1LOCAT[3] = "IO0130   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY02M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1TBLKE = SY2REC.SY2KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(21); /* color table error....*/
      set SY02M001.SY2CLRID cursor, bold;
      exit stack;
    end
  end


end // end SY02SCO

// write color update audit rec.
Function SY02SCP()


       /* ******************************************/
       /* *   WRITE AUDIT RECORD FOR COLOR UPDATE **/
       /* *                                       **/
       /* ******************************************/


  set SYAREC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SYAREC.SYAUDTYP = "C";
  SYAREC.XXXTBLNM = "VCOLOR01";
  if (SYAREC.XXXTBLNM in SYZTBL.XXXTBLNM)
    SYAREC.SYASRTSQ = SYZTBL.SYASRTSQ[sysVar.arrayIndex];
    SYAREC.SYABFLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
    SYAREC.SYAFTLN = SYZTBL.SYZIMLEN[sysVar.arrayIndex];
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY02   ";
    TA1REC.TA1LOCAT[1] = "SY02SCP  ";
    TA1REC.TA1LOCAT[2] = "SYZTBL   ";
    TA1REC.TA1LOCAT[3] = "VCOLOR01 ";
    TA1REC.TA1MAP = "SY02M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = "TABLE NOT FOUND";
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    exit stack;
  end
  SYAREC.XNDCD = COMMAREA.XNDCD;
  SYAREC.XXXUSRID = COMMAREA.CAUSERID;
  SYAREC.XGPCD = SY2REC.XGPCD;
  SYAREC.SY1STNBR = SY2REC.SY1STNBR;
  SYAREC.SY2CLRID = SY2REC.SY2CLRID;
  SYAREC.XDMCD = SY2REC.XDMCD;
  SYAREC.ZZZSDT = SYWREC.ZZZSDT;
  SYAREC.ZZZSTM = SYWREC.ZZZCHGTM;
  SYAREC.SYABFR = SYEREC.SY2DATA;
  SYAREC.SYAAFT = SY2REC.SY2DATA;

  call "IO0530" ("A ", SQLCA, SYAREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY02   ";
    TA1REC.TA1LOCAT[1] = "ADD     ";
    TA1REC.TA1LOCAT[2] = "SY02SCP ";
    TA1REC.TA1LOCAT[3] = "IO0530  ";
    TA1REC.TA1LOCAT[4] = "COLORTBL";
    TA1REC.TA1MAP = "SY02M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYAUD01";
    TA1TBLKE = SYAREC.SYAKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(44); /* audit table error....*/
    set SY02M001.SY1STNBR cursor, bold;
    exit stack;
  end

end // end SY02SCP

// write color update tag record.
Function SY02SCQ()


       /* ******************************************/
       /* *   WRITE TAG RECORD FOR COLOR UPDATE   **/
       /* *                                       **/
       /* ******************************************/


  set SY9REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  SY9REC.SY9TGTYP = "C";
  SY9REC.XGPCD = SY2REC.XGPCD;
  SY9REC.SY1STNBR = SY2REC.SY1STNBR;
  SY9REC.SY2CLRID = SY2REC.SY2CLRID;
  SY9REC.XDMCD = SY2REC.XDMCD;
  SY9REC.ZZZSDT = SYWREC.ZZZSDT;
  SY9REC.ZZZSTM = SYWREC.ZZZCHGTM;

  call "IO0520" ("A ", SQLCA, SY9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "SY02   ";
    TA1REC.TA1LOCAT[1] = "A       ";
    TA1REC.TA1LOCAT[2] = "SY02SCQ ";
    TA1REC.TA1LOCAT[3] = "IO0520  ";
    TA1REC.TA1LOCAT[4] = "COLORTBL";
    TA1REC.TA1MAP = "SY02M001";
    TA1REC.TA1DBASE = "DPROD.";
    TA1REC.TA1TBLVU = "VSYTAG01";
    TA1TBLKE = SY9REC.SY9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    converseLib.validationFailed(45); /* tag table error...*/
    set SY02M001.SY1STNBR cursor, bold;
    exit stack;
  end



end // end SY02SCQ

// VERIFY PRODUCT category code
Function SY02SCR()

       /* ******************************************/
       /* *  VERIFY PRODUCT category code and get **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY02M001.XPCCD == "  "
   && SY02M001.XGPCD != "03")
    converseLib.validationFailed(245);
    set SY02M001.XPCCD cursor, bold;
    SY02M001.XPCDESC = "INVALID";
    return;
  else
    if (SY02M001.XPCCD == "  ")
      return;
    end
  end


  SYWREC.SYWINDEX = 1;

  while (XPCTBL.XPCCD[SYWINDEX] != "99")
    if (SYWREC.XGPCD == XPCTBL.XGPCD[SYWINDEX]
     && SY02M001.XPCCD == XPCTBL.XPCCD[SYWINDEX])
      if (XPCTBL.XXXSTAT[SYWINDEX] == "A")
        SY02M001.XPCDESC = XPCTBL.XPCDESC[SYWINDEX];
        return;
      else
        set SY02M001.XPCCD cursor, bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        SY02M001.XPCDESC = "INACTIVE";
        return;
      end
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end


  set SY02M001.XPCCD cursor, bold;
  SY02M001.XPCDESC = "INVALID";
  converseLib.validationFailed(3); /* invalid code*/


end // end SY02SCR

// Get Blank Style/Color
Function SY02SCS()

  if (SY02M001.SY2BCLCD == " ")
    SY02M001.SY02MBCN = " ";
    return;
  end

  SY02W01.SY2DATA = SY2REC.SY2DATA;
  set SY2REC empty;
  set SQLCA empty;
  SY2REC.XGPCD = SY02M001.XGPCD;
  SY2REC.SY1STNBR = SY1REC.SY1BSTNB;
  SY2REC.SY2CLRID = SY02M001.SY2BCLCD;
  SY2REC.XDMCD = SY02M001.XDMCD;
  call "IO0130" ("S ", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    SY02M001.SY02MBCN = SY2REC.SY2CLRDS;
    SY2REC.SY2DATA = SY02W01.SY2DATA;
  else
    SY2REC.SY2DATA = SY02W01.SY2DATA;
    if (SQLCA.VAGen_SQLCODE == 100)
      SY02M001.SY02MBCN = " ";
      converseLib.validationFailed(7); /* color/dim not found*/
      set SY02M001.SY2BCLCD cursor, modified, bold;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY02";
      TA1REC.TA1LOCAT[1] = "S";
      TA1REC.TA1LOCAT[2] = "SY02SCS";
      TA1REC.TA1MAP = "SY02M001";
      TA1REC.TA1DBASE = "DPROD";
      TA1REC.TA1TBLVU = "VCOLOR01";
      TA1REC.TA1TBLKE = SY1REC.SY1STNBR;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20);
      set SY02M001.SY2BCLCD cursor, bold;
      exit stack;
    end
  end

end // end SY02SCS

// get root style name
Function SY02SCT()


       /* ******************************************/
       /* *     GET  root style name              **/
       /* *                                       **/
       /* ******************************************/

  if (SY02M001.SY2RSTNB == " "
   || SY2REC.XGPCD != "03")
    SY02M001.SY02MRSN = " ";
    return;
  end

  set SQLCA empty;

  SYDREC.XGPCD = SY2REC.XGPCD;
  SYDREC.SY1STNBR = SY02M001.SY2RSTNB;


  call "IO0120" ("S ", SQLCA, SYDREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SY02M001.SY02MRSN = SYDREC.SY1STYNM;
    return;

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(5); /* style record does not exists*/
      set SY02M001.SY2RSTNB cursor, bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SY02   ";
      TA1REC.TA1LOCAT[1] = "S        ";
      TA1REC.TA1LOCAT[2] = "SY02SCT  ";
      TA1REC.TA1LOCAT[3] = "IO0120   ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1MAP = "SY02M001";
      TA1REC.TA1DBASE = "DPROD.";
      TA1REC.TA1TBLVU = "VSTYLE01";
      TA1TBLKE = SYDREC.SY1KEY;
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      converseLib.validationFailed(20); /* style table error....*/
      set SY02M001.SY2RSTNB cursor, bold;
      exit stack;
    end
  end


end // end SY02SCT

// VERIFY PRODUCT LINE CODE
Function SY02SCU()

       /* ******************************************/
       /* *  VERIFY PRODUCT Linecode and get **/
       /* *  THE DESCRIPTION.                     **/
       /* ******************************************/

  if (SY02M001.XPLCD == "  "
   && SY02M001.XGPCD != "03")
    converseLib.validationFailed(243);
    set SY02M001.XPLCD cursor, bold;
    SY02M001.XPLDESC = "INVALID";
    return;
  else
    if (SY02M001.XPLCD == "  ")
      return;
    end
  end

  SYWREC.SYWINDEX = 1;

  while (XPLTBL.XPLCD[SYWINDEX] != "99")
    if (SYWREC.XGPCD == XPLTBL.XGPCD[SYWINDEX]
     && SY02M001.XPLCD == XPLTBL.XPLCD[SYWINDEX])
      if (XPLTBL.XXXSTAT[SYWINDEX] == "A")
        SY02M001.XPLDESC = XPLTBL.XPLDESC[SYWINDEX];
        return;
      else
        SY02M001.XPLDESC = "INACTIVE";
        set SY02M001.XPLCD bold;
        converseLib.validationFailed(33); /* status code is inactive*/
        return;
      end
    end
    SYWREC.SYWINDEX = SYWREC.SYWINDEX + 1;
  end


  set SY02M001.XPLCD cursor, bold;
  SY02M001.XPLDESC = "INVALID";
  converseLib.validationFailed(244); /* invalid Product line code*/


end // end SY02SCU

// modify offering ending dates
Function SY02SGA()

       /* ******************************************/
       /* *  modify offering ending dates         **/
       /* ******************************************/


  if (SY02W01.SY2POFXD > SY2REC.SY2POFXD)
    SY2REC.SY2POFXD = SY02W01.SY2POFXD;
  end
  if (SY02W01.SY2FOFXD > SY2REC.SY2FOFXD)
    SY2REC.SY2FOFXD = SY02W01.SY2FOFXD;
  end
  if (SY02W01.SY2NOFXD > SY2REC.SY2NOFXD)
    SY2REC.SY2NOFXD = SY02W01.SY2NOFXD;
  end

end // end SY02SGA

Record SY02W01 type basicRecord
  10 SY2DATA SY2DATA ; 
  10 SYWMSGFL SYWMSGFL ; 
  10 SY02W-FUTR-OFFER-XDT SY02W-FUTR-OFFER-XDT ; 
    15 SY02W-FUTR-OFFER-YY SY02W-FUTR-OFFER-YY ; 
    15 SY02W-FUTR-OFFER-MM SY02W-FUTR-OFFER-MM ; 
    15 SY02W-FUTR-OFFER-DD SY02W-FUTR-OFFER-DD ; 
  10 SY2POFXD SY2POFXD ; 
  10 SY2FOFXD SY2FOFXD ; 
  10 SY2NOFXD SY2NOFXD ; 
  10 SY02W-YSN-DATA SY02W-YSN-DATA ; 
    15 SY02W-FND-YSN SY02W-FND-YSN ; 
    15 XDR-PROD-REG-CD XDR-PROD-REG-CD ; 
    15 XSE-SESN-CD XSE-SESN-CD ; 
    15 SY02W-XSN-SESN-YR SY02W-XSN-SESN-YR ; 
end // end SY02W01

DataItem SY02W-FND-YSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SY02W-FUTR-OFFER-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY02W-FUTR-OFFER-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work date for recalculation
DataItem SY02W-FUTR-OFFER-XDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY02W-FUTR-OFFER-YY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY02W-XSN-SESN-YR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SY02W-YSN-DATA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

