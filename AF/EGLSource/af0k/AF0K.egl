package af0k;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XDVCD;
import corpx1.XDVTBL;
import corpx1.XGACD;
import corpx1.XGATBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx2.XPCABRV;
import corpx2.XPCCD;
import corpx2.XPLCD;
import corpx2.XPRCD;
import corpx2.XSNBDT;
import corpx2.XSNXDT;
import corpy2.YSNTBL;
import pg.common.PG1REC;
import pg.common.PG2REC;
import sy.common.SY1REC;
import sy.common.SY1STNBR;
import sy.common.SY5REC;
import sy.common.SY6REC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0K ****
// This application is designed to allow forecasters to inquire
// on Long and Short information summarized to category.
// Subtotals will be displayed at the line, G/A, type, and
// division breaks.  A grand total will be displayed on the
// screen.  The information is displayed on two maps.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
// CONTROL   DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------ ----------------------------------
//          06/03/93  TDODSO New application.
//          02-10-95  KJ     XSN->YSN
// Y2KPROJ  01-02-98  PHARWO y2k changes to map001, map002,
//                           af0ks-0033, af0k-2520, af0ks-0133
//          05-28-99  craymo AF0KS-0033 and AF0KS-0133, modify
//                           logic to disallow data entry
//                           beyond SU 2000.
// *********************
Program AF0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0KW01 AF0KW01; // record
  AF0KW02 AF0KW02; // record
  AF1REC AF1REC; // record
  AF2REC AF2REC; // record
  AF5REC AF5REC; // record
  AF9REC AF9REC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use AF0KM.AF0KM001,  // forms
      AF0KM.AF0KM002,
      AF0KM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/

    set AF0KW01 empty; /* Initialize working storage*/
    set AF0KW02 empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AF5REC empty; /* Initialize working storage*/
    set AF9REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set SY1REC empty; /* Initialize working storage*/
    set SY5REC empty; /* Initialize working storage*/
    set SY6REC empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TAEREC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0KM001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF0K"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/

    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    AF0KW01.AF0KW-PAGE-FULL = "N"; /* Indicate full page*/
    AF0KW01.AF0KW-TSL = +430; /* Set TSQ length*/

          /* (Define Map Environment, Assign/Edit Defaults)*/

    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/


                    /* (Set Map Item Values)*/

    AF0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/


    if (XP1REC.XOWCD == " ")
      XP1REC.XOWCD = "00";
      XP1REC.XOWABRV = "N/A";
    end

    if (XP1REC.XDVCD == " ")
      XP1REC.XDVCD = "01";
      XP1REC.XDVABRV = "NIKE D";
    end

                    /* (Process Passed Items)*/

    /* MOVE XP1REC.XXXUSER TO AF0KM001.XXXUSER;/* Fcster code to map*/
    /* MOVE XP1REC.XSECD TO AF0KM001.XSECD;/* Season cd to map*/
    /* MOVE XP1REC.XSNYR TO AF0KM001.XSNYR;/* Season yr to map*/
    /* MOVE XP1REC.XDVCD TO AF0KM001.XDVCD;/* div code to map*/
    /* MOVE XP1REC.XDVABRV TO AF0KM001.XDVABRV;/* div abrev to map*/
    /* MOVE XP1REC.XOWCD TO AF0KM001.XOWCD;/* div code to map*/
    /* MOVE XP1REC.XOWABRV TO AF0KM001.XOWABRV;/* div abrev to map*/
    /* MOVE XP1REC.XPRCD TO AF0KM001.XPRCD;/* product type to map*/
    /* MOVE XP1REC.XPRABRV TO AF0KM001.XPRABRV;/* type abrev to map*/
    /* MOVE XP1REC.XPLCD TO AF0KM001.XPLCD;/* product line to map*/
    /* MOVE XP1REC.XPLABRV TO AF0KM001.XPLABRV;/* line abrev to map*/
    /* MOVE XP1REC.XGACD TO AF0KM001.XGACD;/* Gender age cd to map*/
    /* MOVE XP1REC.XGAABRV TO AF0KM001.XGAABRV;/* ga abrev to map*/
    /* MOVE ' ' TO AF0KM001.PG2SCRFL;   /* Finish type indicator*/

    /* MOVE ' ' TO XP1REC.XXXUSER;*/
    /* MOVE ' ' TO XP1REC.XSECD;*/
    /* MOVE 0 TO XP1REC.XSNYR;*/
    /* MOVE ' ' TO XP1REC.XPRCD;*/
    /* MOVE ' ' TO XP1REC.XPRABRV;*/
    /* MOVE ' ' TO XP1REC.XPLCD;*/
    /* MOVE ' ' TO XP1REC.XPLABRV;*/
    /* MOVE ' ' TO XP1REC.XGACD;*/
    /* MOVE ' ' TO XP1REC.XGAABRV;*/

    set AF0KM001.XSECD cursor; /* Set cursor position*/


                      /* (Converse Main Process)*/

    goto AF0K-0000; /* Main Process*/



    AF0K-0000: AF0K-0000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/

    goto AF0K-0000; /* Converse Apparel Fcst/Buy Prototype*/


  end // end main
end // end AF0K

// Main Processing Loop
Function AF0K-0000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/



  AF0K-1000(); /* Obtain the data to display*/

  if (AFWREC.AFWMAP == "1" /* Map 1 requested*/
  )                       
    AF0K-1200(); /* Format and display the map*/
    AF0K-1300(); /* Check attention identifier*/
    AF0K-1400(); /* Reset fields to normal intensity*/
    AF0K-1500(); /* Verify the entered data*/
    AF0K-1600(); /* Process valid input request*/

  else /* Map 2 requested*/

    AF0K-2200(); /* Format and display the map*/
    AF0K-2300(); /* Check attention identifier*/
    AF0K-2400(); /* Reset fields to normal intensity*/
    AF0K-2500(); /* Verify the entered data*/
    AF0K-2600(); /* Process valid input request*/

  end

end // end AF0K-0000

// Obtain Data to Display
Function AF0K-1000()
   /* *=================================**/
   /* *  Check Data Selection Criteria  **/
   /* *=================================**/

  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AF0KW01.AF0KWPND == "Y"           /* Pop-up window processing active*/
   || converseVar.eventKey is pa2       /* PA2 was pressed*/
   || converseVar.eventKey is pf7       /* PF7 was pressed*/
   || converseVar.eventKey is pf8       /* PF8 was pressed*/
   || converseVar.eventKey is pf10      /* PF10 was pressed*/
   || converseVar.eventKey is pf11      /* PF11 was pressed*/
   || AFWREC.AFWFIRST == " ")           /* First time through*/
    return; /* Then exit to next process*/
  end


     /* *========================================**/
     /* * Set Select Using New Keys              **/
     /* * And Obtain Data to display             **/
     /* *========================================**/

  if (AFWREC.AFWSWR == "Y") /* New Selection Criteria Entered*/

    set AF0KW02 empty; /* Clear work record*/
    AF0K-1005(); /* Purge TSQ*/
    AF0K-1010(); /* Obtain data to display*/

  end

end // end AF0K-1000

// Purge TSQ
Function AF0K-1005()
  /* GET AF0K-1010*/
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  set TA5REC empty;

  TA5REC.TA5APPID = "AF0K"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (AF0KW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                  /* ; subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AF0KM001.XXXPRCNM = "AF0K-1010";
    TA1REC.TA1PGMNM = "AF0K"; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF0KM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  end

  AF0KW01.AF0KW-CURRENT-PAGE = 1; /* Reset current page number*/
  AF0KW01.AF0KW-LAST-PAGE = 0; /* Reset last page number*/
  AF0KW01.AF0KW-MAX-PAGE = 0; /* Reset highest page number*/


end // end AF0K-1005

// Get data from DACAST tables
Function AF0K-1010()

   /* ------------------------------------------------------------*/
   /* Get data from DACAST.VAFSTY01 and DACAST.VAFCLR01*/
   /* ------------------------------------------------------------*/

  AF0KW01.AF0KW-END-OF-STYLE = "N";
  AF0KW01.AF0KW-PAGE-FULL = "N";

   /* *==========================================**/
   /* *  Select Set from DACAST.VAFSTY01         **/
   /* *==========================================**/


  AF0K-1015(); /* Declare cursor*/
  AF0K-1020(); /* Fetch row*/

  if (AF0KW01.AF0KW-END-OF-STYLE == "N") /* Save keys to WS*/

    AF0KW01.XDVCD = AF2REC.XDVCD;
    AF0KW01.XPRCD = AF2REC.XPRCD;
    AF0KW01.XGACD = AF2REC.AF-OVRD-XGA-CD;
    AF0KW01.XPLCD = AF2REC.XPLCD;
    AF0KW01.XPCCD = AF2REC.XPCCD;

  else

    AF0K-1030(); /* Close cursor for AFSTY*/
    converseLib.validationFailed(15); /* No data found to display*/
    return;

  end

  while (AF0KW01.AF0KW-END-OF-STYLE == "N")
    AF0K-1025(); /* Process data until end of cursor*/
  end

  AF0K-1060(); /* Category control break*/
  AF0K-1055(); /* Line control break*/
  AF0K-1050(); /* GA control break*/
  AF0K-1045(); /* Type control break*/
  AF0K-1040(); /* Div control break*/
  AF0K-1035(); /* Total processing*/

   /* *==========================================**/
   /* *  Close DACAST.VAFSTY01 cursor            **/
   /* *==========================================**/

  AF0K-1030();

end // end AF0K-1010

// Select set from AFSTY
Function AF0K-1015()
   /* ------------------------------------------------------------*/
   /* Select the target row/s on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/

  set AF2REC empty; /* Reset rec work area*/

  if (XP1REC.XPRCD == " ") /* No Product Type*/
    AF2REC.XPRCD = "**"; /* Get all Product Types*/
  else
    AF2REC.XPRCD = XP1REC.XPRCD;
  end

  if (XP1REC.XPLCD == " ") /* No Product Line*/
    AF2REC.XPLCD = "**"; /* Get all Product Lines*/
  else
    AF2REC.XPLCD = XP1REC.XPLCD;
  end

  if (XP1REC.XGACD == " ") /* No GA code*/
    AF2REC.XGACD = "**"; /* Get all GA codes*/
  else
    AF2REC.XGACD = XP1REC.XGACD;
  end

  if (XP1REC.XOWCD == " ") /* No og specified*/
    AF2REC.XOWCD = "**"; /* Get all owner groups*/
  else
    AF2REC.XOWCD = XP1REC.XOWCD;
  end

  if (XP1REC.XDVCD == " ") /* No division*/
    AF2REC.XDVCD = "**"; /* Get all divisions*/
  else
    AF2REC.XDVCD = XP1REC.XDVCD;
  end

  if (XP1REC.XXXUSER == " ") /* No user specified*/
    AF2REC.PG1FCTCD = "**"; /* Get all users*/
  else
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD; /* Forecaster cd*/
  end

  AF2REC.XSNYR = XP1REC.XSNYR; /* Sesn yr*/
  AF2REC.XSECD = XP1REC.XSECD; /* Sesn cd*/

   /* *=======================================================**/
   /* *  Obtain Data from DACAST.VAFSTY01 and DACAST.VAFCLR01 **/
   /* *=======================================================**/

  if (AF0KW01.AF0KW-FINISH-TYPE == " ")

    try
      call "AF1960" ("S2", SQLCA, AF2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
    end

  else

    AF5REC.PG2SCRFL = AF0KW01.AF0KW-FINISH-TYPE;
    try
      call "AF1960" ("SS", SQLCA, AF2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
    end

  end


   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and Normal return code*/

    return; /* Return to calling process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "1015"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "AFSTYCLR"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0KM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  AF0KM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0K-1015

// Fetch row from AFSTY set
Function AF0K-1020()
   /* ------------------------------------------------------------*/
   /* Fetch the target row/s on a 'select next' call.*/
   /* This processing loop will continue until the next style to*/
     /* be processed is retrieved (current style + 1). If done*/
     /* for the first time after a new select has been made, it*/
     /* will retrieve the first style in the set --*/
     /* (current style + 0).*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


   /* *===========================**/
   /* *  Execute I/O Module Call  **/
   /* *===========================**/

  if (AF0KW01.AF0KW-FINISH-TYPE == " ")

    try
      call "AF1960" ("N2", SQLCA, AF2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
    end /* Fetch*/

  else

    try
      call "AF1960" ("SN", SQLCA, AF2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
    end /* Fetch*/

  end

  if (sysVar.errorCode == "00000000") /* Call successful*/

    converseLib.validationFailed(0);

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Loop through*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* No more rows found*/

        AF0KW01.AF0KW-END-OF-STYLE = "Y";

        return; /* Return to calling process*/

      end

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "1020"; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "AFSTYCLR"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0KM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  AF0KM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to redisplay map*/



end // end AF0K-1020

// Process AFSTY row
Function AF0K-1025()
  /*  */
  /* Control break processing*/
  /*  */

  if (AF2REC.XDVCD != AF0KW01.XDVCD)

    AF0K-1060(); /* Category break*/
    AF0K-1055(); /* Line break*/
    AF0K-1050(); /* GA break*/
    AF0K-1045(); /* Type break*/
    AF0K-1040(); /* Div break*/

  else
    if (AF2REC.XPRCD != AF0KW01.XPRCD)

      AF0K-1060(); /* Cat break*/
      AF0K-1055(); /* Line break*/
      AF0K-1050(); /* GA break*/
      AF0K-1045(); /* Type break*/

    else
      if (AF2REC.AF-OVRD-XGA-CD != AF0KW01.XGACD)

        AF0K-1060(); /* Cat break*/
        AF0K-1055(); /* Line break*/
        AF0K-1050(); /* GA break*/

      else
        if (AF2REC.XPLCD != AF0KW01.XPLCD)

          AF0K-1060(); /* Cat break*/
          AF0K-1055(); /* Line break*/

        else
          if (AF2REC.XPCCD != AF0KW01.XPCCD)

            AF0K-1060(); /* Cat break*/

          end
        end
      end
    end
  end

  if (AF0KW01.AF0KW-PAGE-FULL == "Y")

    AF0KS-0012(); /* Add page to TSQ*/
    AF0KW01.AF0KW-PAGE-FULL = "N";

  end

  /*  */
  /* Move current key to hold key*/
  /*  */

  AF0KW01.XDVCD = AF2REC.XDVCD;
  AF0KW01.XPRCD = AF2REC.XPRCD;
  AF0KW01.XGACD = AF2REC.AF-OVRD-XGA-CD;
  AF0KW01.XPLCD = AF2REC.XPLCD;
  AF0KW01.XPCCD = AF2REC.XPCCD;

  AF0K-1075(); /* Accumulate dollars and qtys*/

  AF0K-1020(); /* Fetch next AFSTY row*/

end // end AF0K-1025

// Close AFSTY01 cursor
Function AF0K-1030()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/


  if (AF0KW01.AF0KW-FINISH-TYPE == " ")

    try
      call "AF1960" ("C2", SQLCA, AF2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
    end /* Close set*/

  else

    try
      call "AF1960" ("CS", SQLCA, AF2REC, AF5REC) {isNoRefresh = yes, isExternal = yes};
    end /* Close set*/

  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to calling process*/

  end


  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "114 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  AF0KM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  AF0KM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/

  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  converseLib.clearScreen();
   /* Clear screen before redisplay*/

  exit stack; /* Exit to redisplay map*/



end // end AF0K-1030

// End of style cursor processing
Function AF0K-1035()

  AF0KS-0001(); /* Move Grand Totals to TSQ*/

  AF0KS-0012(); /* Add page to TSQ*/

end // end AF0K-1035

// Div control break
Function AF0K-1040()
  AF0KS-0002(); /* Get Abrev*/
  AF0KS-0003(); /* Move data to TSQ*/

  AF0KW01.AF0KW-PAGE-FULL = "Y";

  AF0KW01.AF0KW-DIV-BKGS = 0; /* Zero out subtotals*/
  AF0KW01.AF0KW-DIV-FCST = 0;
  AF0KW01.AF0KW-DIV-PURC = 0;
  AF0KW01.AF0KW-DIV-LONG = 0;
  AF0KW01.AF0KW-DIV-SHRT = 0;
  AF0KW01.AF0KW-DIV-BLAQ = 0;
  AF0KW01.AF0KW-DIV-BLAD = 0;
  AF0KW01.AF0KW-DIV-COST = 0;

end // end AF0K-1040

// Type control break
Function AF0K-1045()
  AF0KS-0004(); /* Get Abrev*/

  AF0KS-0005(); /* Move data to TSQ*/

  AF0KW01.AF0KW-PAGE-FULL = "Y";

  AF0KW01.AF0KW-TYP-BKGS = 0; /* Zero out subtotals*/
  AF0KW01.AF0KW-TYP-FCST = 0;
  AF0KW01.AF0KW-TYP-PURC = 0;
  AF0KW01.AF0KW-TYP-LONG = 0;
  AF0KW01.AF0KW-TYP-SHRT = 0;
  AF0KW01.AF0KW-TYP-BLAQ = 0;
  AF0KW01.AF0KW-TYP-BLAD = 0;
  AF0KW01.AF0KW-TYP-COST = 0;

end // end AF0K-1045

// GA control break
Function AF0K-1050()
  AF0KS-0006(); /* Get Abrev*/

  AF0KS-0007(); /* Move data to TSQ*/

  AF0KW01.AF0KW-PAGE-FULL = "Y";

  AF0KW01.AF0KW-GA-BKGS = 0; /* Zero out subtotals*/
  AF0KW01.AF0KW-GA-FCST = 0;
  AF0KW01.AF0KW-GA-PURC = 0;
  AF0KW01.AF0KW-GA-LONG = 0;
  AF0KW01.AF0KW-GA-SHRT = 0;
  AF0KW01.AF0KW-GA-BLAQ = 0;
  AF0KW01.AF0KW-GA-BLAD = 0;
  AF0KW01.AF0KW-GA-COST = 0;

end // end AF0K-1050

// Line control break
Function AF0K-1055()
  if (XP1REC.XPLABRV == " ")

    AF0KS-0008(); /* Get Abrev from table*/

  else

    AF0KW02.AF0KW-LIN-ABREV = XP1REC.XPLABRV;

  end

  AF0KS-0009(); /* Move subtotals to TSQ*/

  AF0KW01.AF0KW-PAGE-FULL = "Y";

  AF0KW01.AF0KW-LIN-BKGS = 0; /* Zero out subtotals*/
  AF0KW01.AF0KW-LIN-FCST = 0;
  AF0KW01.AF0KW-LIN-PURC = 0;
  AF0KW01.AF0KW-LIN-LONG = 0;
  AF0KW01.AF0KW-LIN-SHRT = 0;
  AF0KW01.AF0KW-LIN-BLAQ = 0;
  AF0KW01.AF0KW-LIN-BLAD = 0;
  AF0KW01.AF0KW-LIN-COST = 0;

end // end AF0K-1055

// Category control break
Function AF0K-1060()
  if (AF0KW-SCRN-LNS < 6)
    AF0KW-SCRN-LNS = AF0KW-SCRN-LNS + 1;
    AF0KW02.XPCCD[AF0KW-SCRN-LNS] = AF0KW01.XPCCD;
    AF0KS-0010(); /* get category abrev;*/
    AF0KS-0011(); /* move category data to TSQ;*/

  else

    AF0KS-0012(); /* Add page to TSQ*/
    AF0KW-SCRN-LNS = 1; /* Reset Index*/
    AF0KW02.XPCCD[AF0KW-SCRN-LNS] = AF0KW01.XPCCD;
    AF0KS-0010(); /* get category abrev;*/
    AF0KS-0011(); /* move category data to TSQ;*/

  end
end // end AF0K-1060

// Process row
Function AF0K-1075()
  if (AF2REC.SY1STNBR != AF0KW01.SY1STNBR
  )
    AF0KS-0036(); /* Accumulate Forecast amounts*/

  end

  AF0KW01.SY1STNBR = AF2REC.SY1STNBR;
  AF0KS-0013(); /* Get Unit Price*/

  AF0KS-0014(); /* Get Cost Price*/

  if (AF5REC.AF5LGSHQ < 0
  )
    AF0KS-0015(); /* Accumulate Short amounts*/

  else

    AF0KS-0016(); /* Accumulate Long amounts*/

  end

  AF0KS-0017(); /* / Accumulate BLA qtys and amounts*/

  AF0KS-0018(); /* / Accumulate Bookings amounts*/

  AF0KS-0019(); /* / Accumulate Purchased amounts*/
end // end AF0K-1075

// Display Map 1
Function AF0K-1200()

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    if (AF0KW01.AF0KWPND != "Y") /* Pop windows not active*/
      set AF0KM001 initial; /* Clear map output area*/
      AF0KM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
      AF0K-1210(); /* Format the data on the page*/

    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (AFWREC.AFWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(AFWREC.AFWNMO);
      end /* Information message number*/
    end

  end

  if (converseVar.validationMsgNum != 0) /* ===> Error message to display*/
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf10)
    /* don't clear map detail*/
    else
      AF0KS-0037(); /* ===> Clear map detail*/
    end
    set AF0KM001 alarm; /* ===> Indicate sound alarm*/
  end


  converse AF0KM001 ;

end // end AF0K-1200

// Format data to screen
Function AF0K-1210()
   /* FORMAT DATA ON SCREEN*/
   /* -------------------------------------------*/
   /* --             MOVE HEADER FIELDS        --*/
   /* -------------------------------------------*/

  AF0KS-0020(); /* move header fields*/

  if (AF0KW01.AF0KW-CURRENT-PAGE != AF0KW01.AF0KW-LAST-PAGE) /* on same page*/
    if (AF0KW01.AF0KW-MAX-PAGE > 0)
      AF0K-1220(); /* Obtain Tsq Page;*/
    end
  end

  AF0KS-0021(); /* Move Cat data to map*/
  AF0KS-0022(); /* Move Lin data to map*/
  AF0KS-0023(); /* Move GA data to map*/
  AF0KS-0024(); /* Move Type data to map*/
  AF0KS-0025(); /* Move Div data to map*/
  AF0KS-0026(); /* Move Ttl data to map*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

end // end AF0K-1210

// Get page from TSQ
Function AF0K-1220()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AF0KW02.AF0KW-TSQ-LENGTH = AF0KW01.AF0KW-TSL; /* temp tsq length*/
  TA5REC.TA5APPID = "AF0K"; /* Application identification*/
  TA5REC.TA5TSQIX = AF0KW01.AF0KW-CURRENT-PAGE; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AF0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "AF0K"; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF0KM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AF0KM001.XXXPRCNM = "AF0K-2110"; /* prcess name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AF0K-1220

// Check Attention keys
Function AF0K-1300()
  /* GET AF0K-3000*/
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AF0KM001 initial; /* Clear the map fields*/
    set AF0KM002 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end



  if (AF0KM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0KM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0KM001.CAITEM; /* Application data*/

      XSAFS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AF0KM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "3000"; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AF0KM001.CAITEM > " ") /* Application data was entered*/
    set AF0KM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end

  if (AF0KM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0KM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0KM002.CAITEM; /* Application data*/

      XSAFS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AF0KM002.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "3000"; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AF0KM001.CAITEM > " ") /* Application data was entered*/
    set AF0KM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0KM001"; /* Appl find code*/
    end

    XSAFS01(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf11) /* and PF11 was not pressed*/

    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (AFWREC.AFWFIRST == " ") /* First time through*/

    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "130 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end

  end






end // end AF0K-1300

// Reset highlighted fields
Function AF0K-1400()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0KM001.XXXUSER initialAttributes; /* Forecaster cd*/
  set AF0KM001.XSECD initialAttributes; /* Sesn cd*/
  set AF0KM001.XSNYR initialAttributes; /* Sesn yr*/
  set AF0KM001.XPRCD initialAttributes; /* Product type cd*/
  set AF0KM001.XGACD initialAttributes; /* Gender Age cd*/
  set AF0KM001.XPLCD initialAttributes; /* Product line cd*/
  set AF0KM001.XDVCD initialAttributes; /* Division cd*/
  set AF0KM001.XOWCD initialAttributes; /* Owner group cd*/
  set AF0KM001.PG2SCRFL initialAttributes; /* BLANKS indicator*/

  AFWREC.AFWIDX2 = 0;

  while (AFWREC.AFWIDX2 < 6)
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1;
    set AF0KM001.XPCCD[AFWIDX2] initialAttributes;
    set AF0KM001.XPCABRV[AFWIDX2] initialAttributes;
    set AF0KM001.AF0KM-CAT-BKGS[AFWIDX2] initialAttributes;
    set AF0KM001.AF0KM-CAT-FCST[AFWIDX2] initialAttributes;
    set AF0KM001.AF0KM-CAT-PURC[AFWIDX2] initialAttributes;
    set AF0KM001.AF0KM-CAT-LONG[AFWIDX2] initialAttributes;
    set AF0KM001.AF0KM-CAT-SHRT[AFWIDX2] initialAttributes;
  end

  set AF0KM001.AF0KM-LIN-ABREV initialAttributes;
  set AF0KM001.AF0KM-LIN-TTL initialAttributes;
  set AF0KM001.AF0KM-LIN-BKGS initialAttributes;
  set AF0KM001.AF0KM-LIN-FCST initialAttributes;
  set AF0KM001.AF0KM-LIN-PURC initialAttributes;
  set AF0KM001.AF0KM-LIN-LONG initialAttributes;
  set AF0KM001.AF0KM-LIN-SHRT initialAttributes;

  set AF0KM001.AF0KM-GA-ABREV initialAttributes;
  set AF0KM001.AF0KM-GA-TTL initialAttributes;
  set AF0KM001.AF0KM-GA-BKGS initialAttributes;
  set AF0KM001.AF0KM-GA-FCST initialAttributes;
  set AF0KM001.AF0KM-GA-PURC initialAttributes;
  set AF0KM001.AF0KM-GA-LONG initialAttributes;
  set AF0KM001.AF0KM-GA-SHRT initialAttributes;

  set AF0KM001.AF0KM-TYP-ABREV initialAttributes;
  set AF0KM001.AF0KM-TYP-TTL initialAttributes;
  set AF0KM001.AF0KM-TYP-BKGS initialAttributes;
  set AF0KM001.AF0KM-TYP-FCST initialAttributes;
  set AF0KM001.AF0KM-TYP-PURC initialAttributes;
  set AF0KM001.AF0KM-TYP-LONG initialAttributes;
  set AF0KM001.AF0KM-TYP-SHRT initialAttributes;

  set AF0KM001.AF0KM-DIV-ABREV initialAttributes;
  set AF0KM001.AF0KM-DIV-TTL initialAttributes;
  set AF0KM001.AF0KM-DIV-BKGS initialAttributes;
  set AF0KM001.AF0KM-DIV-FCST initialAttributes;
  set AF0KM001.AF0KM-DIV-PURC initialAttributes;
  set AF0KM001.AF0KM-DIV-LONG initialAttributes;
  set AF0KM001.AF0KM-DIV-SHRT initialAttributes;

  set AF0KM001.AF0KM-TTL initialAttributes;
  set AF0KM001.AF0KM-TTL-BKGS initialAttributes;
  set AF0KM001.AF0KM-TTL-FCST initialAttributes;
  set AF0KM001.AF0KM-TTL-PURC initialAttributes;
  set AF0KM001.AF0KM-TTL-LONG initialAttributes;
  set AF0KM001.AF0KM-TTL-SHRT initialAttributes;


  AF0KM001.XXXPRCNM = "AF0K    "; /* Reset process name*/

  set AF0KM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0KM001.CAITEM initialAttributes; /* Commarea application data*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0KM001.XSECD == "?"
   || AF0KM001.XDVCD == "?"
   || AF0KM001.XPRCD == "?"
   || AF0KM001.XGACD == "?"
   || AF0KM001.XPLCD == "?"
   || AF0KM001.XOWCD == "?")

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "1400"; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    AF0KW01.AF0KWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/

  end



   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/

  if (AF0KM001.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0KM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0KM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end
    set AF0KM001.XSECD cursor;

  end

   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division cd*/
   /* *============================**/

  if (AF0KM001.XDVCD == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0KM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
      AF0KM001.XDVCD = " "; /* Move selected code to map*/
      AF0KM001.XDVABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0KM001.XDVABRV = XP1REC.XDVABRV; /* Move desc to map*/
    end
    set AF0KM001.XDVCD cursor;

  end

   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product type cd*/
   /* *============================**/

  if (AF0KM001.XPRCD == "?") /* Pop-up window requested*/

    XP1REC.XPRCD = AF0KM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
      AF0KM001.XPRCD = " "; /* Move selected code to map*/
      AF0KM001.XPRABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
      AF0KM001.XPRABRV = XP1REC.XPRABRV; /* Move desc to map*/
    end
    set AF0KM001.XPRCD cursor;

  end

   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/

  if (AF0KM001.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0KM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
      AF0KM001.XGACD = " "; /* Move selected code to map*/
      AF0KM001.XGAABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/
      AF0KM001.XGAABRV = XP1REC.XGAABRV; /* Move desc to map*/
    end
    set AF0KM001.XGACD cursor;

  end

   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product line cd*/
   /* *============================**/

  if (AF0KM001.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0KM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
      AF0KM001.XPLCD = " "; /* Move selected code to map*/
      AF0KM001.XPLABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0KM001.XPLABRV = XP1REC.XPLABRV; /* Move desc to map*/
    end
    set AF0KM001.XPLCD cursor;

  end

   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner group cd*/
   /* *============================**/

  if (AF0KM001.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0KM001.XOWCD; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Display whse 51 only*/

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
      AF0KM001.XOWCD = " "; /* Move selected code to map*/
      AF0KM001.XOWABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM001.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
      AF0KM001.XOWABRV = XP1REC.XOWABRV; /* Move desc to map*/
    end
    set AF0KM001.XOWCD cursor;

  end

   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/

  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0KW01.AF0KWPND = "Y"; /* Activate pop-up window ind*/

  exit stack; /* Exit to redisplay map*/

end // end AF0K-1400

// Edit Input data
Function AF0K-1500()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWR = "N";
  AFWREC.AFWFIRST = "N";

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or Scroll forward request*/
   || converseVar.eventKey is pf11) /* or Scroll right request*/

    AF0K-1510(); /* Verify scroll request*/

    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end

  else

    AF0K-1520(); /* Verify selection criteria*/

  end


  if (converseVar.validationMsgNum != 0) /* Errors found*/

    exit stack; /* Exit to redisplay map*/

  else

    if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
      exit stack; /* Go back to start of applic*/
    end

  end



end // end AF0K-1500

// Verify scroll request
Function AF0K-1510()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7) /* Scroll back request*/

    if (AF0KW01.AF0KW-CURRENT-PAGE <= 1)
      AFWREC.AFWPRCSN = "1510"; /* Process number*/
      AF0KM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    end

  end


  if (converseVar.eventKey is pf8) /* Scroll forward request*/

    if (AF0KW01.AF0KW-CURRENT-PAGE >= AF0KW01.AF0KW-MAX-PAGE)
      AFWREC.AFWPRCSN = "1510"; /* Process number*/
      AF0KM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    end

  end


  if (converseVar.eventKey is pf10) /* ===> Scroll left requested*/

    AF0KM001.XXXPRCNM = "1510";
    converseLib.validationFailed(49); /* no scroll forward*/

  end

end // end AF0K-1510

// Verify selection criteria
Function AF0K-1520()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *************************************************************/


  AF0KW01.AFWSWR = AFWREC.AFWSWR; /* Save data select setting*/

  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  AFWREC.AFWFIRST = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/



   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/


  if (XP1REC.XPLCD != AF0KM001.XPLCD     /* Start line cd*/
   || AF0KM001.XPLCD == " "              /**/
   || XP1REC.XGACD != AF0KM001.XGACD     /* Start G/A cd*/
   || AF0KM001.XGACD == " "              /**/
   || XP1REC.XPRCD != AF0KM001.XPRCD     /* Start type  cd*/
   || AF0KM001.XPRCD == " "              /**/
   || XP1REC.XDVCD != AF0KM001.XDVCD     /* Start div cd*/
   || AF0KM001.XDVCD == " "              /**/
   || XP1REC.XP1XSNYY != AF0KM001.XSNYR  /* Season yr*/
   || AF0KM001.XSNYR == 0                /* Map fld zeroed out*/
   || XP1REC.XSECD != AF0KM001.XSECD     /* Season cd*/
   || AF0KM001.XSECD == " "              /* Map fld spaced out*/
   || XP1REC.XXXUSER != AF0KM001.XXXUSER /* Forecaster cd*/
   || AF0KM001.XXXUSER == " "            /**/
   || XP1REC.XOWCD != AF0KM001.XOWCD     /* start own gp cd*/
   || AF0KM001.XOWCD == " "              /**/
   || AF0KW01.AF0KW-FINISH-TYPE != AF0KM001.PG2SCRFL
   || AF0KM001.PG2SCRFL == " "           /**/
   || AF0KM001.PG2SCRFL == "*")          /**/

    AFWREC.AFWSWR = "Y"; /* New criteria entered*/

  end


   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/

  if (AFWREC.AFWSWR == "Y" /* New keys entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/

    converseLib.validationFailed(42); /* Request not permitted*/
    AFWREC.AFWPRCSN = "1520"; /* Process number*/
    exit stack; /* Exit to reselect data*/

  end

   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/


  if (AFWREC.AFWSWR == "Y") /* New criteria entered*/

    AF0KS-0033(); /* Edit season yr*/
    if (XP1REC.XP1MNO != 0) /* Validation error present*/
      AF0KS-0027(); /* Edit finish type flag*/
      AF0KS-0028(); /* Edit product line cd*/
      AF0KS-0029(); /* Edit gender/age cd*/
      AF0KS-0030(); /* Edit product type cd*/
      AF0KS-0031(); /* Edit owner group selection*/
      AF0KS-0032(); /* Edit division.*/
      AF0KS-0034(); /* Edit season cd*/
      AF0KS-0035(); /* Edit forecaster cd*/
    end

  end

  if (XP1REC.XP1MNO != 0) /* Validation error present*/

    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/

  end



end // end AF0K-1520

// Process Valid request
Function AF0K-1600()

   /* ------------------------------------------------------------*/
   /* Save Current page as previous page*/
   /* ------------------------------------------------------------*/

  AF0KW01.AF0KW-LAST-PAGE = AF0KW01.AF0KW-CURRENT-PAGE;

   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7) /* Scroll back requested*/


    AF0KW01.AF0KW-CURRENT-PAGE = AF0KW01.AF0KW-CURRENT-PAGE - 1;
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    AF0KW01.AF0KW-CURRENT-PAGE = AF0KW01.AF0KW-CURRENT-PAGE + 1;
    return; /* Return to previous process*/

  end



   /* ------------------------------------------------------------*/
   /* Shift Screen Right request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Display AF0kM002*/

    AFWREC.AFWMAP = "2"; /* Indicate Map 2 to process*/
    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* 'ENTER' Key Processing.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter key pressed*/

        /* (Redisplay current data)*/

  end


end // end AF0K-1600

// Display Map 2
Function AF0K-2200()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    if (AF0KW01.AF0KWPND != "Y") /* Pop up windows not active*/
      set AF0KM002 initial; /* Clear map output area*/
      AF0KM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
      AF0K-2210(); /* Format the data on the page*/

    end

    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (AFWREC.AFWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(AFWREC.AFWNMO);
      end /* Information message number*/
    end

  end

  if (converseVar.validationMsgNum != 0) /* ===> No error message to display*/
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf11)
  /* don't clear out map detail*/
    else
      AF0KS-0137(); /* ===> Clear out map detail*/
    end
    set AF0KM002 alarm; /* ===> Indicate sound alarm*/
  end

  converse AF0KM002 ;



end // end AF0K-2200

// Format data to map
Function AF0K-2210()
  /* GET AF0K-1210*/
   /* FORMAT DATA ON SCREEN*/
   /* -------------------------------------------*/
   /* --             MOVE HEADER FIELDS        --*/
   /* -------------------------------------------*/

  AF0KS-0120(); /* move header fields*/

  if (AF0KW01.AF0KW-CURRENT-PAGE != AF0KW01.AF0KW-LAST-PAGE) /* on same page*/
    if (AF0KW01.AF0KW-MAX-PAGE > 0)
      AF0K-2220(); /* Obtain Tsq Page;*/
    end
  end

  AF0KS-0121(); /* Move Cat data to map*/
  AF0KS-0122(); /* Move Lin data to map*/
  AF0KS-0123(); /* Move GA data to map*/
  AF0KS-0124(); /* Move Type data to map*/
  AF0KS-0125(); /* Move Div data to map*/
  AF0KS-0126(); /* Move Ttl data to map*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

end // end AF0K-2210

// Obtain page from TSQ
Function AF0K-2220()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  AF0KW02.AF0KW-TSQ-LENGTH = AF0KW01.AF0KW-TSL; /* temp tsq length*/
  TA5REC.TA5APPID = "AF0K"; /* Application identification*/
  TA5REC.TA5TSQIX = AF0KW01.AF0KW-CURRENT-PAGE; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (AF0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "AF0K"; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF0KM002"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    AF0KM002.XXXPRCNM = "AF0K-2110"; /* prcess name*/
    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end AF0K-2220

// Check Attention ids
Function AF0K-2300()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AF0KM002 initial; /* Clear the map fields*/

    exit stack; /* Exit to redisplay map*/

  end



  if (AF0KM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0KM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0KM002.CAITEM; /* Application data*/

      XSAFS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AF0KM002.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "2300"; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AF0KM002.CAITEM > " ") /* Application data was entered*/
    set AF0KM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "2300"; /* Process number*/
    exit stack; /* Redisplay map*/
  end

  if (AF0KM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0KM002.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0KM002.CAITEM; /* Application data*/

      XSAFS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    set AF0KM002.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "2300"; /* Process number*/
    exit stack; /* Exit to redisplay map*/

  end


  if (AF0KM002.CAITEM > " ") /* Application data was entered*/
    set AF0KM002.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "2300"; /* Process number*/
    exit stack; /* Redisplay map*/
  end


  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0KM002"; /* Appl find code*/
    end

    XSAFS01(); /* Exit to another application*/

    exit stack; /* Exit to redisplay map*/

  end


  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10) /* and PF11 was not pressed*/

    AFWREC.AFWPRCSN = "2300"; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/


    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end

    exit stack; /* Exit to redisplay map*/

  end


  if (AFWREC.AFWFIRST == " ") /* First time through*/

    if (converseVar.eventKey not enter)
      AFWREC.AFWPRCSN = "2300"; /* Process number*/
      converseLib.validationFailed(4); /* Indicate invalid attention key*/
      exit stack; /* Exit to redisplay map*/
    end

  end


end // end AF0K-2300

// Reset highlighted flds
Function AF0K-2400()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0KM002.XXXUSER initialAttributes; /* Forecaster cd*/
  set AF0KM002.XSECD initialAttributes; /* Sesn cd*/
  set AF0KM002.XSNYR initialAttributes; /* Sesn yr*/
  set AF0KM002.XPRCD initialAttributes; /* Product type cd*/
  set AF0KM002.XGACD initialAttributes; /* Gender Age cd*/
  set AF0KM002.XPLCD initialAttributes; /* Product line cd*/
  set AF0KM002.XDVCD initialAttributes; /* Division cd*/
  set AF0KM002.XOWCD initialAttributes; /* Owner group cd*/
  set AF0KM002.PG2SCRFL initialAttributes; /* BLANKS indicator*/

  AFWREC.AFWIDX2 = 0;

  while (AFWREC.AFWIDX2 < 6)
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1;
    set AF0KM002.XPCCD[AFWIDX2] initialAttributes;
    set AF0KM002.XPCABRV[AFWIDX2] initialAttributes;
    set AF0KM002.AF0KM-CAT-BLAQ[AFWIDX2] initialAttributes;
    set AF0KM002.AF0KM-CAT-BLAD[AFWIDX2] initialAttributes;
    set AF0KM002.AF0KM-CAT-COST[AFWIDX2] initialAttributes;
  end

  set AF0KM002.AF0KM-LIN-ABREV initialAttributes;
  set AF0KM002.AF0KM-LIN-TTL initialAttributes;
  set AF0KM002.AF0KM-LIN-BLAQ initialAttributes;
  set AF0KM002.AF0KM-LIN-BLAD initialAttributes;
  set AF0KM002.AF0KM-LIN-COST initialAttributes;

  set AF0KM002.AF0KM-GA-ABREV initialAttributes;
  set AF0KM002.AF0KM-GA-TTL initialAttributes;
  set AF0KM002.AF0KM-GA-BLAQ initialAttributes;
  set AF0KM002.AF0KM-GA-BLAD initialAttributes;
  set AF0KM002.AF0KM-GA-COST initialAttributes;

  set AF0KM002.AF0KM-TYP-ABREV initialAttributes;
  set AF0KM002.AF0KM-TYP-TTL initialAttributes;
  set AF0KM002.AF0KM-TYP-BLAQ initialAttributes;
  set AF0KM002.AF0KM-TYP-BLAD initialAttributes;
  set AF0KM002.AF0KM-TYP-COST initialAttributes;

  set AF0KM002.AF0KM-DIV-ABREV initialAttributes;
  set AF0KM002.AF0KM-DIV-TTL initialAttributes;
  set AF0KM002.AF0KM-DIV-BLAQ initialAttributes;
  set AF0KM002.AF0KM-DIV-BLAD initialAttributes;
  set AF0KM002.AF0KM-DIV-COST initialAttributes;

  set AF0KM002.AF0KM-TTL initialAttributes;
  set AF0KM002.AF0KM-TTL-BLAQ initialAttributes;
  set AF0KM002.AF0KM-TTL-BLAD initialAttributes;
  set AF0KM002.AF0KM-TTL-COST initialAttributes;


  AF0KM002.XXXPRCNM = "AF0K    "; /* Reset process name*/

  set AF0KM002.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0KM002.CAITEM initialAttributes; /* Commarea application data*/


   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0KM002.XSECD == "?"
   || AF0KM002.XDVCD == "?"
   || AF0KM002.XPRCD == "?"
   || AF0KM002.XGACD == "?"
   || AF0KM002.XPLCD == "?"
   || AF0KM002.XOWCD == "?")

    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "2400"; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    AF0KW01.AF0KWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/

  end



   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/

  if (AF0KM002.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0KM002.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0KM002.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end
    set AF0KM002.XSECD cursor; /* Set cursor*/

  end

   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division cd*/
   /* *============================**/

  if (AF0KM002.XDVCD == "?") /* Pop-up window requested*/

    XP1REC.XDVCD = AF0KM002.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSDV(); /* Pop-up window func requested*/

    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
      AF0KM002.XDVCD = " "; /* Move selected code to map*/
      AF0KM002.XDVABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM002.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0KM002.XDVABRV = XP1REC.XDVABRV; /* Move desc to map*/
    end
    set AF0KM002.XDVCD cursor; /* Set cursor*/

  end

   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product type cd*/
   /* *============================**/

  if (AF0KM002.XPRCD == "?") /* Pop-up window requested*/

    XP1REC.XPRCD = AF0KM002.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPR(); /* Pop-up window func requested*/

    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
      AF0KM002.XPRCD = " "; /* Move selected code to map*/
      AF0KM002.XPRABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM002.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
      AF0KM002.XPRABRV = XP1REC.XPRABRV; /* Move desc to map*/
    end
    set AF0KM002.XPRCD cursor; /* Set cursor*/

  end

   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/

  if (AF0KM002.XGACD == "?") /* Pop-up window requested*/

    XP1REC.XGACD = AF0KM002.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSGA(); /* Pop-up window func requested*/

    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
      AF0KM002.XGACD = " "; /* Move selected code to map*/
      AF0KM002.XGAABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM002.XGACD = XP1REC.XGACD; /* Move selected code to map*/
      AF0KM002.XGAABRV = XP1REC.XGAABRV; /* Move desc to map*/
    end
    set AF0KM002.XGACD cursor; /* Set cursor*/

  end

   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product line cd*/
   /* *============================**/

  if (AF0KM002.XPLCD == "?") /* Pop-up window requested*/

    XP1REC.XPLCD = AF0KM002.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/

    XSAFSPL(); /* Pop-up window func requested*/

    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
      AF0KM002.XPLCD = " "; /* Move selected code to map*/
      AF0KM002.XPLABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM002.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
      AF0KM002.XPLABRV = XP1REC.XPLABRV; /* Move desc to map*/
    end
    set AF0KM002.XPLCD cursor; /* Set cursor*/

  end

   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner group cd*/
   /* *============================**/

  if (AF0KM002.XOWCD == "?") /* Pop-up window requested*/

    XP1REC.XOWCD = AF0KM002.XOWCD; /* Set XP1REC field*/
    XP1REC.XWHCD = "51"; /* Display whse 51 only*/

    XSAFSOW(); /* Pop-up window func requested*/

    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
      AF0KM002.XOWCD = " "; /* Move selected code to map*/
      AF0KM002.XOWABRV = " "; /* Move desc to map*/
    else /* Else*/
      AF0KM002.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
      AF0KM002.XOWABRV = XP1REC.XOWABRV; /* Move desc to map*/
    end
    set AF0KM002.XOWCD cursor; /* Set cursor*/

  end

   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/

  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0KW01.AF0KWPND = "Y"; /* Activate pop-up window ind*/

  exit stack; /* Exit to redisplay map*/

end // end AF0K-2400

// Edit Input data
Function AF0K-2500()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWR = "N";
  AFWREC.AFWFIRST = "N";


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or Scroll forward request*/
   || converseVar.eventKey is pf10) /* or Scroll left request*/

    AF0K-2510(); /* Verify scroll request*/

    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end

  else

    AF0K-2520(); /* Verify selection criteria*/

  end


  if (converseVar.validationMsgNum != 0) /* Errors found*/

    exit stack; /* Exit to redisplay map*/

  else

    if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
      exit stack; /* Go back to start of applic*/
    end

  end


end // end AF0K-2500

// Verify scroll request
Function AF0K-2510()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7) /* Scroll back request*/

    if (AF0KW01.AF0KW-CURRENT-PAGE <= 1)
      AFWREC.AFWPRCSN = "2510"; /* Process number*/
      AF0KM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    end

  end


  if (converseVar.eventKey is pf8) /* Scroll forward request*/

    if (AF0KW01.AF0KW-CURRENT-PAGE >= AF0KW01.AF0KW-MAX-PAGE)
      AFWREC.AFWPRCSN = "2510"; /* Process number*/
      AF0KM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(3); /* No more pages to display*/
    end

  end


  if (converseVar.eventKey is pf11) /* ===> Scroll right requested*/

    AF0KM002.XXXPRCNM = "2510";
    converseLib.validationFailed(50); /* no scroll forward*/

  end

end // end AF0K-2510

// Verify selection criteria
Function AF0K-2520()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *************************************************************/


  AF0KW01.AFWSWR = AFWREC.AFWSWR; /* Save data select setting*/

  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  AFWREC.AFWFIRST = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/

   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/


  if (XP1REC.XPLCD != AF0KM002.XPLCD     /* Start line cd*/
   || AF0KM002.XPLCD == " "              /**/
   || XP1REC.XGACD != AF0KM002.XGACD     /* Start G/A cd*/
   || AF0KM002.XGACD == " "              /**/
   || XP1REC.XPRCD != AF0KM002.XPRCD     /* Start type  cd*/
   || AF0KM002.XPRCD == " "              /**/
   || XP1REC.XDVCD != AF0KM002.XDVCD     /* Start div cd*/
   || AF0KM002.XDVCD == " "              /**/
   || XP1REC.XP1XSNYY != AF0KM002.XSNYR  /* Season yr*/
   /* -----------------------  Y2K OUT*/
   /* BEGIN  ------------------------*/
   /**/
   /* OR AF0KM002.XSNYR EQ 0         /**/
   /* Map fld zeroed out*/
   /**/
   /* ------------------------  Y2K OUT END*/
   /* -------------------------*/
   || XP1REC.XSECD != AF0KM002.XSECD     /* Season cd*/
   || AF0KM002.XSECD == " "              /* Map fld spaced out*/
   || XP1REC.XXXUSER != AF0KM002.XXXUSER /* Forecaster cd*/
   || AF0KM002.XXXUSER == " "            /**/
   || XP1REC.XOWCD != AF0KM002.XOWCD     /* start own gp cd*/
   || AF0KM002.XOWCD == " "              /**/
   || AF0KW01.AF0KW-FINISH-TYPE != AF0KM002.PG2SCRFL
   || AF0KM002.PG2SCRFL == " "           /**/
   || AF0KM002.PG2SCRFL == "*")          /**/

    AFWREC.AFWSWR = "Y"; /* New criteria entered*/

  end



   /* *=========================**/
   /* * Check Attn ID Response  **/
   /* *=========================**/

  if (AFWREC.AFWSWR == "Y" /* New keys entered*/
   && converseVar.eventKey not enter) /* Enter key not pressed*/

    converseLib.validationFailed(42); /* Request not permitted*/
    AFWREC.AFWPRCSN = "2520"; /* Process number*/
    exit stack; /* Exit to reselect data*/

  end

   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/


  if (AFWREC.AFWSWR == "Y") /* New criteria entered*/

    AF0KS-0133(); /* Edit season yr*/
    if (XP1REC.XP1MNO != 0) /* Validation error present*/
      AF0KS-0127(); /* Edit finish type flag*/
      AF0KS-0128(); /* Edit product line cd*/
      AF0KS-0129(); /* Edit gender/age cd*/
      AF0KS-0130(); /* Edit product type cd*/
      AF0KS-0131(); /* Edit owner group selection*/
      AF0KS-0132(); /* Edit division.*/
      AF0KS-0134(); /* Edit season cd*/
      AF0KS-0135(); /* Edit forecaster cd*/
    end

  end

  if (XP1REC.XP1MNO != 0) /* Validation error present*/

    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/

  end



end // end AF0K-2520

// Process Valid request
Function AF0K-2600()

   /* ------------------------------------------------------------*/
   /* Save current page as previous page*/
   /* ------------------------------------------------------------*/

  AF0KW01.AF0KW-LAST-PAGE = AF0KW01.AF0KW-CURRENT-PAGE;

   /* ------------------------------------------------------------*/
   /* Scroll Request.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7) /* Scroll back requested*/


    AF0KW01.AF0KW-CURRENT-PAGE = AF0KW01.AF0KW-CURRENT-PAGE - 1;
    return; /* Return to previous process*/

  end


  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    AF0KW01.AF0KW-CURRENT-PAGE = AF0KW01.AF0KW-CURRENT-PAGE + 1;
    return; /* Return to previous process*/

  end



   /* ------------------------------------------------------------*/
   /* Shift Screen Right request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* Display AF0kM002*/

    AFWREC.AFWMAP = "2"; /* Indicate Map 2 to process*/
    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Shift Screen Left request.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Display AF0kM001*/

    AFWREC.AFWMAP = "1"; /* Indicate Map 1 to process*/
    exit stack; /* Exit to display map*/

  end



   /* ------------------------------------------------------------*/
   /* 'ENTER' Key Processing.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter key pressed*/

        /* (Redisplay current data)*/

  end


end // end AF0K-2600

// Move Grand Totals
Function AF0KS-0001()
  AF0KW02.AF0KW-TTL-BKGS = AF0KW01.AF0KW-TTL-BKGS;

  AF0KW02.AF0KW-TTL-FCST = AF0KW01.AF0KW-TTL-FCST;

  AF0KW02.AF0KW-TTL-PURC = AF0KW01.AF0KW-TTL-PURC;

  AF0KW02.AF0KW-TTL-LONG = AF0KW01.AF0KW-TTL-LONG;

  AF0KW02.AF0KW-TTL-SHRT = AF0KW01.AF0KW-TTL-SHRT;

  AF0KW02.AF0KW-TTL-BLAQ = AF0KW01.AF0KW-TTL-BLAQ;

  AF0KW02.AF0KW-TTL-BLAD = AF0KW01.AF0KW-TTL-BLAD;

  AF0KW02.AF0KW-TTL-COST = AF0KW01.AF0KW-TTL-COST;

  AF0KW01.AF0KW-TTL-BKGS = 0;
  AF0KW01.AF0KW-TTL-FCST = 0;
  AF0KW01.AF0KW-TTL-PURC = 0;
  AF0KW01.AF0KW-TTL-LONG = 0;
  AF0KW01.AF0KW-TTL-SHRT = 0;
  AF0KW01.AF0KW-TTL-BLAQ = 0;
  AF0KW01.AF0KW-TTL-BLAD = 0;
  AF0KW01.AF0KW-TTL-COST = 0;

end // end AF0KS-0001

// Get Div Abrev
Function AF0KS-0002()

  if (AF0KW01.XDVCD in XDVTBL.XDVCD)

    AF0KW02.AF0KW-DIV-ABREV = XDVTBL.XDVABRV[sysVar.arrayIndex];

  end

end // end AF0KS-0002

// Move Div Subtotals
Function AF0KS-0003()
  AF0KW02.AF0KW-DIV-BKGS = AF0KW01.AF0KW-DIV-BKGS;

  AF0KW02.AF0KW-DIV-FCST = AF0KW01.AF0KW-DIV-FCST;

  AF0KW02.AF0KW-DIV-PURC = AF0KW01.AF0KW-DIV-PURC;

  AF0KW02.AF0KW-DIV-LONG = AF0KW01.AF0KW-DIV-LONG;

  AF0KW02.AF0KW-DIV-SHRT = AF0KW01.AF0KW-DIV-SHRT;

  AF0KW02.AF0KW-DIV-BLAQ = AF0KW01.AF0KW-DIV-BLAQ;

  AF0KW02.AF0KW-DIV-BLAD = AF0KW01.AF0KW-DIV-BLAD;

  AF0KW02.AF0KW-DIV-COST = AF0KW01.AF0KW-DIV-COST;

  AF0KW01.AF0KW-DIV-BKGS = 0;
  AF0KW01.AF0KW-DIV-FCST = 0;
  AF0KW01.AF0KW-DIV-PURC = 0;
  AF0KW01.AF0KW-DIV-LONG = 0;
  AF0KW01.AF0KW-DIV-SHRT = 0;
  AF0KW01.AF0KW-DIV-BLAQ = 0;
  AF0KW01.AF0KW-DIV-BLAD = 0;
  AF0KW01.AF0KW-DIV-COST = 0;

end // end AF0KS-0003

// Get Type Abrev
Function AF0KS-0004()

  if (AF0KW01.XPRCD in XPRTBL.XPRCD)

    AF0KW02.AF0KW-TYP-ABREV = XPRTBL.XPRABRV[sysVar.arrayIndex];

  end

end // end AF0KS-0004

// Move Type Subtotals
Function AF0KS-0005()
  AF0KW02.AF0KW-TYP-BKGS = AF0KW01.AF0KW-TYP-BKGS;

  AF0KW02.AF0KW-TYP-FCST = AF0KW01.AF0KW-TYP-FCST;

  AF0KW02.AF0KW-TYP-PURC = AF0KW01.AF0KW-TYP-PURC;

  AF0KW02.AF0KW-TYP-LONG = AF0KW01.AF0KW-TYP-LONG;

  AF0KW02.AF0KW-TYP-SHRT = AF0KW01.AF0KW-TYP-SHRT;

  AF0KW02.AF0KW-TYP-BLAQ = AF0KW01.AF0KW-TYP-BLAQ;

  AF0KW02.AF0KW-TYP-BLAD = AF0KW01.AF0KW-TYP-BLAD;

  AF0KW02.AF0KW-TYP-COST = AF0KW01.AF0KW-TYP-COST;

  AF0KW01.AF0KW-TYP-BKGS = 0;
  AF0KW01.AF0KW-TYP-FCST = 0;
  AF0KW01.AF0KW-TYP-PURC = 0;
  AF0KW01.AF0KW-TYP-LONG = 0;
  AF0KW01.AF0KW-TYP-SHRT = 0;
  AF0KW01.AF0KW-TYP-BLAQ = 0;
  AF0KW01.AF0KW-TYP-BLAD = 0;
  AF0KW01.AF0KW-TYP-COST = 0;

end // end AF0KS-0005

// Get GA Abrev
Function AF0KS-0006()

  AF0KW01.AF0KW-TABLE-CODE1 = AF0KW01.XGACD;
  AF0KW01.AF0KW-TABLE-CODE2 = "03";

  if (AF0KW01.AF0KW-TABLE-KEY in XGATBL.XGAKEY)

    AF0KW02.AF0KW-GA-ABREV = XGATBL.XGAABRV[sysVar.arrayIndex];

  end
end // end AF0KS-0006

// Move GA Subtotals
Function AF0KS-0007()
  AF0KW02.AF0KW-GA-BKGS = AF0KW01.AF0KW-GA-BKGS;

  AF0KW02.AF0KW-GA-FCST = AF0KW01.AF0KW-GA-FCST;

  AF0KW02.AF0KW-GA-PURC = AF0KW01.AF0KW-GA-PURC;

  AF0KW02.AF0KW-GA-LONG = AF0KW01.AF0KW-GA-LONG;

  AF0KW02.AF0KW-GA-SHRT = AF0KW01.AF0KW-GA-SHRT;

  AF0KW02.AF0KW-GA-BLAQ = AF0KW01.AF0KW-GA-BLAQ;

  AF0KW02.AF0KW-GA-BLAD = AF0KW01.AF0KW-GA-BLAD;

  AF0KW02.AF0KW-GA-COST = AF0KW01.AF0KW-GA-COST;

  AF0KW01.AF0KW-GA-BKGS = 0;
  AF0KW01.AF0KW-GA-FCST = 0;
  AF0KW01.AF0KW-GA-PURC = 0;
  AF0KW01.AF0KW-GA-LONG = 0;
  AF0KW01.AF0KW-GA-SHRT = 0;
  AF0KW01.AF0KW-GA-BLAQ = 0;
  AF0KW01.AF0KW-GA-BLAD = 0;
  AF0KW01.AF0KW-GA-COST = 0;

end // end AF0KS-0007

// Get Product Line abrev
Function AF0KS-0008()
  AF0KW01.AF0KW-TABLE-CODE1 = AF0KW01.XPLCD;
  AF0KW01.AF0KW-TABLE-CODE2 = "03";

  if (AF0KW01.AF0KW-TABLE-KEY in XPLTBL.XPLKEY)

    AF0KW02.AF0KW-LIN-ABREV = XPLTBL.XPLABRV[sysVar.arrayIndex];

  end

end // end AF0KS-0008

// Move Product Line Subtotals
Function AF0KS-0009()
  AF0KW02.AF0KW-LIN-BKGS = AF0KW01.AF0KW-LIN-BKGS;

  AF0KW02.AF0KW-LIN-FCST = AF0KW01.AF0KW-LIN-FCST;

  AF0KW02.AF0KW-LIN-PURC = AF0KW01.AF0KW-LIN-PURC;

  AF0KW02.AF0KW-LIN-LONG = AF0KW01.AF0KW-LIN-LONG;

  AF0KW02.AF0KW-LIN-SHRT = AF0KW01.AF0KW-LIN-SHRT;

  AF0KW02.AF0KW-LIN-BLAQ = AF0KW01.AF0KW-LIN-BLAQ;

  AF0KW02.AF0KW-LIN-BLAD = AF0KW01.AF0KW-LIN-BLAD;

  AF0KW02.AF0KW-LIN-COST = AF0KW01.AF0KW-LIN-COST;

  AF0KW01.AF0KW-LIN-BKGS = 0;
  AF0KW01.AF0KW-LIN-FCST = 0;
  AF0KW01.AF0KW-LIN-PURC = 0;
  AF0KW01.AF0KW-LIN-LONG = 0;
  AF0KW01.AF0KW-LIN-SHRT = 0;
  AF0KW01.AF0KW-LIN-BLAQ = 0;
  AF0KW01.AF0KW-LIN-BLAD = 0;
  AF0KW01.AF0KW-LIN-COST = 0;
end // end AF0KS-0009

// Get Category Abrev
Function AF0KS-0010()
  AF0KW01.AF0KW-TABLE-CODE1 = AF0KW01.XPCCD;
  AF0KW01.AF0KW-TABLE-CODE2 = "03";

  if (AF0KW01.AF0KW-TABLE-KEY in XPCTBL.XPCKEY)

    AF0KW02.XPCABRV[AF0KW-SCRN-LNS] = XPCTBL.XPCABRV[sysVar.arrayIndex];

  end

end // end AF0KS-0010

// Move Category Subtotals
Function AF0KS-0011()
  AF0KW02.AF0KW-CAT-BKGS[AF0KW-SCRN-LNS] = AF0KW01.AF0KW-CAT-BKGS;
  AF0KW02.AF0KW-CAT-FCST[AF0KW-SCRN-LNS] = AF0KW01.AF0KW-CAT-FCST;
  AF0KW02.AF0KW-CAT-PURC[AF0KW-SCRN-LNS] = AF0KW01.AF0KW-CAT-PURC;
  AF0KW02.AF0KW-CAT-LONG[AF0KW-SCRN-LNS] = AF0KW01.AF0KW-CAT-LONG;
  AF0KW02.AF0KW-CAT-SHRT[AF0KW-SCRN-LNS] = AF0KW01.AF0KW-CAT-SHRT;
  AF0KW02.AF0KW-CAT-BLAQ[AF0KW-SCRN-LNS] = AF0KW01.AF0KW-CAT-BLAQ;
  AF0KW02.AF0KW-CAT-BLAD[AF0KW-SCRN-LNS] = AF0KW01.AF0KW-CAT-BLAD;
  AF0KW02.AF0KW-CAT-COST[AF0KW-SCRN-LNS] = AF0KW01.AF0KW-CAT-COST;
  AF0KW01.AF0KW-CAT-BKGS = 0;
  AF0KW01.AF0KW-CAT-FCST = 0;
  AF0KW01.AF0KW-CAT-PURC = 0;
  AF0KW01.AF0KW-CAT-LONG = 0;
  AF0KW01.AF0KW-CAT-SHRT = 0;
  AF0KW01.AF0KW-CAT-BLAQ = 0;
  AF0KW01.AF0KW-CAT-BLAD = 0;
  AF0KW01.AF0KW-CAT-COST = 0;

end // end AF0KS-0011

// Add page to TSQ
Function AF0KS-0012()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  set TA5REC empty;
  AF0KW02.AF0KW-TSQ-LENGTH = AF0KW01.AF0KW-TSL; /* Temp storage lngth*/
  TA5REC.TA5APPID = "AF0K"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (AF0KW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
                                  /* ;subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "AF0K"; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "AF0KM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AF0KM001.XXXPRCNM = "AF0K-1432"; /* PROCESS NAME*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    return; /* Return to previous process*/

  end

  AF0KW01.AF0KW-MAX-PAGE = TA5REC.TA5TSQIX; /* Highest page number*/

  set AF0KW02 empty; /* Clear temporary storage record*/
end // end AF0KS-0012

// Get Unit price
Function AF0KS-0013()
   /* ------------------------------------------------------------*/
             /* Obtain Data from PRICE SUBROUTINE*/
   /* ------------------------------------------------------------*/

   /* *===================**/
   /* *  Selection Fields **/
   /* *===================**/

  set AF1REC empty; /* Reset rec work area*/

  AF1REC.XSECD = AF2REC.XSECD;
  AF1REC.XSNYR = AF2REC.XSNYR;
  AF1REC.XGPCD = "03"; /* GPC cd*/
  AF1REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  AF1REC.SY2CLRID = AF5REC.SY2CLRID; /* Color*/
  AF1REC.XPYCD = "01"; /* Price type*/
  AF1REC.XQACD = "01"; /* Price quality*/


  try
    call "AF1730" (AF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


  if (sysVar.errorCode != "00000000" /* Call NOT successful*/
   || AF1REC.AF1-RETURN-CODE == 1    /* and normal return code*/
   || AF1REC.AF1-RETURN-CODE == 3)   /* and normal return code*/

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    SQLCA.VAGen_SQLCODE = AF1REC.AF1-ERROR-SQLCODE;

    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "0013"; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "DECLARE TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/

    AF0KM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    AF0KM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

    exit stack; /* Exit to redisplay map*/

  else

    return;

  end

end // end AF0KS-0013

// Get Cost
Function AF0KS-0014()
   /* ------------------------------------------------------------*/
             /* Obtain Data from DPROD.VDCOST01*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch first row to obtain price.*/
   /* Close set cursor.*/
   /* ------------------------------------------------------------*/

   /* *=====================**/
   /* *  Select unique row  **/
   /* *=====================**/

  set SY6REC empty; /* Reset rec work area*/

  SY6REC.XGPCD = "03"; /* GPC cd*/
  SY6REC.SY1STNBR = AF2REC.SY1STNBR; /* Style no.*/
  SY6REC.SY2CLRID = AF5REC.SY2CLRID; /* Color*/
  SY6REC.XDMCD = "00"; /* dimininsion code*/
  SY6REC.XCOCD = "01"; /* Cost type*/
  SY6REC.XQACD = "01"; /* Cost quality*/


  try
    call "IO0360" ("S ", SQLCA, SY6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/


  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Data Found*/

    if (SY6REC.SY6CSEDT[1] <= AF0KW01.XSNBDT) /* Get price/sn start dt*/
      AF0KW01.AF0KW-COST = SY6REC.SY6CSTUN[1];
    else
      if (SY6REC.SY6CSEDT[2] <= AF0KW01.XSNBDT)
        AF0KW01.AF0KW-COST = SY6REC.SY6CSTUN[2];
      else
        if (SY6REC.SY6CSEDT[3] <= AF0KW01.XSNBDT)
          AF0KW01.AF0KW-COST = SY6REC.SY6CSTUN[3];
        else
          if (SY6REC.SY6CSEDT[4] <= AF0KW01.XSNBDT)
            AF0KW01.AF0KW-COST = SY6REC.SY6CSTUN[4];
          else
            if (SY6REC.SY6CSEDT[5] <= AF0KW01.XSNBDT)
              AF0KW01.AF0KW-COST = SY6REC.SY6CSTUN[5];
            else
              if (SY6REC.SY6CSEDT[6] <= AF0KW01.XSNBDT)
                AF0KW01.AF0KW-COST = SY6REC.SY6CSTUN[6];
              else
                AF0KW01.AF0KW-COST = 1.00; /* Default to $1.00*/
              end
            end
          end
        end
      end
    end

  else

    if (sysVar.errorCode == "00000000" /* Call successful*/
     && SQLCA.VAGen_SQLCODE == 100)    /* No data found*/

      AF0KW01.AF0KW-COST = 1.00; /* Default to $1.00*/

    else

      TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/

      if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
        converseLib.validationFailed(11); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        converseLib.validationFailed(10); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
        converseLib.clearScreen();
         /* Clear screen before redisplay*/
      end

      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      AFWREC.AFWPRCSN = "S11 "; /* Process number*/
      TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
      TA1REC.TA1LOC = "GET DPROD.VDCOST01 ROW";
      TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
      TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
      TA1REC.TA1TBLVU = "VDCOST01"; /* Table view name*/
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis rtn*/
      AF0KM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      AF0KM002.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

      exit stack; /* Exit to redisplay map*/

    end

  end



end // end AF0KS-0014

// Accumulate Short dollars
Function AF0KS-0015()
  AF0KW01.AF0KW-CLR-SHRT = mathLib.round(AF5REC.AF5LGSHQ * AF1REC.SY5PRCUN * -1, -mathLib.decimals(AF0KW01.AF0KW-CLR-SHRT));
  AF0KW01.AF0KW-CAT-SHRT = AF0KW01.AF0KW-CAT-SHRT +   AF0KW01.AF0KW-CLR-SHRT;
  AF0KW01.AF0KW-LIN-SHRT = AF0KW01.AF0KW-LIN-SHRT +   AF0KW01.AF0KW-CLR-SHRT;
  AF0KW01.AF0KW-GA-SHRT = AF0KW01.AF0KW-GA-SHRT + AF0KW01.AF0KW-CLR-SHRT;
  AF0KW01.AF0KW-TYP-SHRT = AF0KW01.AF0KW-TYP-SHRT +   AF0KW01.AF0KW-CLR-SHRT;
  AF0KW01.AF0KW-DIV-SHRT = AF0KW01.AF0KW-DIV-SHRT +   AF0KW01.AF0KW-CLR-SHRT;
  AF0KW01.AF0KW-TTL-SHRT = AF0KW01.AF0KW-TTL-SHRT +   AF0KW01.AF0KW-CLR-SHRT;
  AF0KW01.AF0KW-CLR-SHRT = 0;
end // end AF0KS-0015

// Accumulate Long & Long at cost
Function AF0KS-0016()
  /*  */
  /* Accumulate Long dollars*/
  /*  */
  AF0KW01.AF0KW-CLR-LONG = AF5REC.AF5LGSHQ * AF1REC.SY5PRCUN;
  AF0KW01.AF0KW-CAT-LONG = AF0KW01.AF0KW-CAT-LONG +   AF0KW01.AF0KW-CLR-LONG;
  AF0KW01.AF0KW-LIN-LONG = AF0KW01.AF0KW-LIN-LONG +   AF0KW01.AF0KW-CLR-LONG;
  AF0KW01.AF0KW-GA-LONG = AF0KW01.AF0KW-GA-LONG + AF0KW01.AF0KW-CLR-LONG;
  AF0KW01.AF0KW-TYP-LONG = AF0KW01.AF0KW-TYP-LONG +   AF0KW01.AF0KW-CLR-LONG;
  AF0KW01.AF0KW-DIV-LONG = AF0KW01.AF0KW-DIV-LONG +   AF0KW01.AF0KW-CLR-LONG;
  AF0KW01.AF0KW-TTL-LONG = AF0KW01.AF0KW-TTL-LONG +   AF0KW01.AF0KW-CLR-LONG;
  AF0KW01.AF0KW-CLR-LONG = 0;

  /*  */
  /* Accumulate Long dollars at cost*/
  /*  */

  AF0KW01.AF0KW-CLR-COST = AF5REC.AF5LGSHQ * AF0KW01.AF0KW-COST;
  AF0KW01.AF0KW-CAT-COST = AF0KW01.AF0KW-CAT-COST +   AF0KW01.AF0KW-CLR-COST;
  AF0KW01.AF0KW-LIN-COST = AF0KW01.AF0KW-LIN-COST +   AF0KW01.AF0KW-CLR-COST;
  AF0KW01.AF0KW-GA-COST = AF0KW01.AF0KW-GA-COST + AF0KW01.AF0KW-CLR-COST;
  AF0KW01.AF0KW-TYP-COST = AF0KW01.AF0KW-TYP-COST +   AF0KW01.AF0KW-CLR-COST;
  AF0KW01.AF0KW-DIV-COST = AF0KW01.AF0KW-DIV-COST +   AF0KW01.AF0KW-CLR-COST;
  AF0KW01.AF0KW-TTL-COST = AF0KW01.AF0KW-TTL-COST +   AF0KW01.AF0KW-CLR-COST;
  AF0KW01.AF0KW-CLR-COST = 0;

end // end AF0KS-0016

// Accumulate BLA qtys & dollars
Function AF0KS-0017()
  /*  */
  /* Accumulate BLA qtys*/
  /*  */
  AF0KW01.AF0KW-CAT-BLAQ = AF5REC.AF5BLAQ +   AF0KW01.AF0KW-CAT-BLAQ;
  AF0KW01.AF0KW-LIN-BLAQ = AF5REC.AF5BLAQ +   AF0KW01.AF0KW-LIN-BLAQ;
  AF0KW01.AF0KW-GA-BLAQ = AF5REC.AF5BLAQ + AF0KW01.AF0KW-GA-BLAQ;
  AF0KW01.AF0KW-TYP-BLAQ = AF5REC.AF5BLAQ +   AF0KW01.AF0KW-TYP-BLAQ;
  AF0KW01.AF0KW-DIV-BLAQ = AF5REC.AF5BLAQ +   AF0KW01.AF0KW-DIV-BLAQ;
  AF0KW01.AF0KW-TTL-BLAQ = AF5REC.AF5BLAQ +   AF0KW01.AF0KW-TTL-BLAQ;
  /*  */
  /* Accumulate BLA dollars*/
  /*  */
  AF0KW01.AF0KW-CLR-BLAD = AF5REC.AF5BLAQ * AF1REC.SY5PRCUN;

  AF0KW01.AF0KW-CAT-BLAD = AF0KW01.AF0KW-CAT-BLAD +   AF0KW01.AF0KW-CLR-BLAD;
  AF0KW01.AF0KW-LIN-BLAD = AF0KW01.AF0KW-LIN-BLAD +   AF0KW01.AF0KW-CLR-BLAD;
  AF0KW01.AF0KW-GA-BLAD = AF0KW01.AF0KW-GA-BLAD + AF0KW01.AF0KW-CLR-BLAD;
  AF0KW01.AF0KW-TYP-BLAD = AF0KW01.AF0KW-TYP-BLAD +   AF0KW01.AF0KW-CLR-BLAD;
  AF0KW01.AF0KW-DIV-BLAD = AF0KW01.AF0KW-DIV-BLAD +   AF0KW01.AF0KW-CLR-BLAD;
  AF0KW01.AF0KW-TTL-BLAD = AF0KW01.AF0KW-TTL-BLAD +   AF0KW01.AF0KW-CLR-BLAD;
  AF0KW01.AF0KW-CLR-BLAD = 0;

end // end AF0KS-0017

// Accumulate Bookings dollars
Function AF0KS-0018()
  /*  */
  /* Accumulate Bookings dollars*/
  /*  */
  AF0KW01.AF0KW-CLR-BKGS = mathLib.round(AF5REC.AF5BKQ * AF1REC.SY5PRCUN, -mathLib.decimals(AF0KW01.AF0KW-CLR-BKGS));

  AF0KW01.AF0KW-CAT-BKGS = AF0KW01.AF0KW-CAT-BKGS +   AF0KW01.AF0KW-CLR-BKGS;
  AF0KW01.AF0KW-LIN-BKGS = AF0KW01.AF0KW-LIN-BKGS +   AF0KW01.AF0KW-CLR-BKGS;
  AF0KW01.AF0KW-GA-BKGS = AF0KW01.AF0KW-GA-BKGS + AF0KW01.AF0KW-CLR-BKGS;
  AF0KW01.AF0KW-TYP-BKGS = AF0KW01.AF0KW-TYP-BKGS +   AF0KW01.AF0KW-CLR-BKGS;
  AF0KW01.AF0KW-DIV-BKGS = AF0KW01.AF0KW-DIV-BKGS +   AF0KW01.AF0KW-CLR-BKGS;
  AF0KW01.AF0KW-TTL-BKGS = AF0KW01.AF0KW-TTL-BKGS +   AF0KW01.AF0KW-CLR-BKGS;
  AF0KW01.AF0KW-CLR-BKGS = 0;

end // end AF0KS-0018

// Accumulate Purchase dollars
Function AF0KS-0019()
  /*  */
  /* Accumulate Purchase dollars*/
  /*  */
  AF0KW01.AF0KW-CLR-PURC = mathLib.round(AF5REC.AF5PRSCQ * AF1REC.SY5PRCUN, -mathLib.decimals(AF0KW01.AF0KW-CLR-PURC));

  AF0KW01.AF0KW-CAT-PURC = AF0KW01.AF0KW-CAT-PURC +   AF0KW01.AF0KW-CLR-PURC;
  AF0KW01.AF0KW-LIN-PURC = AF0KW01.AF0KW-LIN-PURC +   AF0KW01.AF0KW-CLR-PURC;
  AF0KW01.AF0KW-GA-PURC = AF0KW01.AF0KW-GA-PURC + AF0KW01.AF0KW-CLR-PURC;
  AF0KW01.AF0KW-TYP-PURC = AF0KW01.AF0KW-TYP-PURC +   AF0KW01.AF0KW-CLR-PURC;
  AF0KW01.AF0KW-DIV-PURC = AF0KW01.AF0KW-DIV-PURC +   AF0KW01.AF0KW-CLR-PURC;
  AF0KW01.AF0KW-TTL-PURC = AF0KW01.AF0KW-TTL-PURC +   AF0KW01.AF0KW-CLR-PURC;
  AF0KW01.AF0KW-CLR-PURC = 0;

end // end AF0KS-0019

// Move Header fields
Function AF0KS-0020()
   /* -------------------------------------------*/
   /* --             MOVE HEADER FIELDS        --*/
   /* -------------------------------------------*/

  AF0KM001.XPRCD = XP1REC.XPRCD; /* Type code*/
  AF0KM001.XPRABRV = XP1REC.XPRABRV; /* Type abrev*/
  AF0KM001.XGACD = XP1REC.XGACD; /* GA code*/
  AF0KM001.XGAABRV = XP1REC.XGAABRV; /* GA abrev*/
  AF0KM001.XPLCD = XP1REC.XPLCD; /* Line code*/
  AF0KM001.XPLABRV = XP1REC.XPLABRV; /* Line abrev*/
  AF0KM001.XOWCD = XP1REC.XOWCD; /* Owner Group Cd*/
  AF0KM001.XOWABRV = XP1REC.XOWABRV; /* OG abrev*/
  AF0KM001.XDVCD = XP1REC.XDVCD; /* Division Cd*/
  AF0KM001.XDVABRV = XP1REC.XDVABRV; /* Div abrev*/
  AF0KM001.XSECD = XP1REC.XSECD; /* Season Cd*/
  AF0KM001.XSNYR = XP1REC.XP1XSNYY; /* Season Year*/
  AF0KM001.PG2SCRFL = AF0KW01.AF0KW-FINISH-TYPE; /* Finish Type*/
  AF0KM001.XXXUSER = XP1REC.XXXUSER; /* Forecaster ID*/

end // end AF0KS-0020

// Format Cat totals
Function AF0KS-0021()
   /* -----------------------------------------------------------------*/
   /* Move data from temp storage area to map*/
   /* -----------------------------------------------------------------*/

  AFWREC.AFWIDX1 = 1;
  while (AFWIDX1 <= 6)
    if (AF0KW02.XPCCD[AFWIDX1] > " ") /* Data Row Has Been Retrieved*/

      AF0KM001.XPCCD[AFWIDX1] = AF0KW02.XPCCD[AFWIDX1];
      AF0KM001.XPCABRV[AFWIDX1] = AF0KW02.XPCABRV[AFWIDX1];
      AF0KM001.AF0KM-CAT-BKGS[AFWIDX1] = AF0KW02.AF0KW-CAT-BKGS[AFWIDX1];
      AF0KM001.AF0KM-CAT-FCST[AFWIDX1] = AF0KW02.AF0KW-CAT-FCST[AFWIDX1];
      AF0KM001.AF0KM-CAT-PURC[AFWIDX1] = AF0KW02.AF0KW-CAT-PURC[AFWIDX1];
      AF0KM001.AF0KM-CAT-LONG[AFWIDX1] = AF0KW02.AF0KW-CAT-LONG[AFWIDX1];
      AF0KM001.AF0KM-CAT-SHRT[AFWIDX1] = AF0KW02.AF0KW-CAT-SHRT[AFWIDX1];
    end

    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;

  end


end // end AF0KS-0021

// Format Line totals
Function AF0KS-0022()

  if (AF0KW02.AF0KW-LIN-ABREV > " ") /* Line total*/

    AF0KM001.AF0KM-LIN-ABREV = AF0KW02.AF0KW-LIN-ABREV;
    AF0KM001.AF0KM-LIN-TTL = "SUBTOTAL";
    AF0KM001.AF0KM-LIN-BKGS = AF0KW02.AF0KW-LIN-BKGS;
    AF0KM001.AF0KM-LIN-FCST = AF0KW02.AF0KW-LIN-FCST;
    AF0KM001.AF0KM-LIN-PURC = AF0KW02.AF0KW-LIN-PURC;
    AF0KM001.AF0KM-LIN-LONG = AF0KW02.AF0KW-LIN-LONG;
    AF0KM001.AF0KM-LIN-SHRT = AF0KW02.AF0KW-LIN-SHRT;

  else

    set AF0KM001.AF0KM-LIN-ABREV invisible, protect;
    set AF0KM001.AF0KM-LIN-TTL invisible, protect;
    set AF0KM001.AF0KM-LIN-BKGS invisible, protect;
    set AF0KM001.AF0KM-LIN-FCST invisible, protect;
    set AF0KM001.AF0KM-LIN-PURC invisible, protect;
    set AF0KM001.AF0KM-LIN-LONG invisible, protect;
    set AF0KM001.AF0KM-LIN-SHRT invisible, protect;

  end

end // end AF0KS-0022

// Format GA totals
Function AF0KS-0023()

  if (AF0KW02.AF0KW-GA-ABREV > " ") /* Line total*/

    AF0KM001.AF0KM-GA-ABREV = AF0KW02.AF0KW-GA-ABREV;
    AF0KM001.AF0KM-GA-TTL = "SUBTOTAL";
    AF0KM001.AF0KM-GA-BKGS = AF0KW02.AF0KW-GA-BKGS;
    AF0KM001.AF0KM-GA-FCST = AF0KW02.AF0KW-GA-FCST;
    AF0KM001.AF0KM-GA-PURC = AF0KW02.AF0KW-GA-PURC;
    AF0KM001.AF0KM-GA-LONG = AF0KW02.AF0KW-GA-LONG;
    AF0KM001.AF0KM-GA-SHRT = AF0KW02.AF0KW-GA-SHRT;

  else
    set AF0KM001.AF0KM-GA-ABREV invisible, protect;
    set AF0KM001.AF0KM-GA-TTL invisible, protect;
    set AF0KM001.AF0KM-GA-BKGS invisible, protect;
    set AF0KM001.AF0KM-GA-FCST invisible, protect;
    set AF0KM001.AF0KM-GA-PURC invisible, protect;
    set AF0KM001.AF0KM-GA-LONG invisible, protect;
    set AF0KM001.AF0KM-GA-SHRT invisible, protect;
  end

end // end AF0KS-0023

// Format Type totals
Function AF0KS-0024()

  if (AF0KW02.AF0KW-TYP-ABREV > " ") /* Line total*/

    AF0KM001.AF0KM-TYP-ABREV = AF0KW02.AF0KW-TYP-ABREV;
    AF0KM001.AF0KM-TYP-TTL = "SUBTOTAL";
    AF0KM001.AF0KM-TYP-BKGS = AF0KW02.AF0KW-TYP-BKGS;
    AF0KM001.AF0KM-TYP-FCST = AF0KW02.AF0KW-TYP-FCST;
    AF0KM001.AF0KM-TYP-PURC = AF0KW02.AF0KW-TYP-PURC;
    AF0KM001.AF0KM-TYP-LONG = AF0KW02.AF0KW-TYP-LONG;
    AF0KM001.AF0KM-TYP-SHRT = AF0KW02.AF0KW-TYP-SHRT;

  else
    set AF0KM001.AF0KM-TYP-ABREV invisible, protect;
    set AF0KM001.AF0KM-TYP-TTL invisible, protect;
    set AF0KM001.AF0KM-TYP-BKGS invisible, protect;
    set AF0KM001.AF0KM-TYP-FCST invisible, protect;
    set AF0KM001.AF0KM-TYP-PURC invisible, protect;
    set AF0KM001.AF0KM-TYP-LONG invisible, protect;
    set AF0KM001.AF0KM-TYP-SHRT invisible, protect;
  end

end // end AF0KS-0024

// Format Division totals
Function AF0KS-0025()

  if (AF0KW02.AF0KW-DIV-ABREV > " ") /* Line total*/

    AF0KM001.AF0KM-DIV-ABREV = AF0KW02.AF0KW-DIV-ABREV;
    AF0KM001.AF0KM-DIV-TTL = "SUBTOTAL";
    AF0KM001.AF0KM-DIV-BKGS = AF0KW02.AF0KW-DIV-BKGS;
    AF0KM001.AF0KM-DIV-FCST = AF0KW02.AF0KW-DIV-FCST;
    AF0KM001.AF0KM-DIV-PURC = AF0KW02.AF0KW-DIV-PURC;
    AF0KM001.AF0KM-DIV-LONG = AF0KW02.AF0KW-DIV-LONG;
    AF0KM001.AF0KM-DIV-SHRT = AF0KW02.AF0KW-DIV-SHRT;

  else
    set AF0KM001.AF0KM-DIV-ABREV invisible, protect;
    set AF0KM001.AF0KM-DIV-TTL invisible, protect;
    set AF0KM001.AF0KM-DIV-BKGS invisible, protect;
    set AF0KM001.AF0KM-DIV-FCST invisible, protect;
    set AF0KM001.AF0KM-DIV-PURC invisible, protect;
    set AF0KM001.AF0KM-DIV-LONG invisible, protect;
    set AF0KM001.AF0KM-DIV-SHRT invisible, protect;

  end
end // end AF0KS-0025

// Format Grand totals
Function AF0KS-0026()

  /*  */
  /* Check to see if subtotals have all been displayed*/
  /*  */

  if (AF0KW02.AF0KW-LIN-ABREV > " "
   && AF0KW02.AF0KW-GA-ABREV > " "
   && AF0KW02.AF0KW-TYP-ABREV > " "
   && AF0KW02.AF0KW-DIV-ABREV > " ")

    AF0KM001.AF0KM-TTL = "  GRAND TOTAL ";
    AF0KM001.AF0KM-TTL-BKGS = AF0KW02.AF0KW-TTL-BKGS;
    AF0KM001.AF0KM-TTL-FCST = AF0KW02.AF0KW-TTL-FCST;
    AF0KM001.AF0KM-TTL-PURC = AF0KW02.AF0KW-TTL-PURC;
    AF0KM001.AF0KM-TTL-LONG = AF0KW02.AF0KW-TTL-LONG;
    AF0KM001.AF0KM-TTL-SHRT = AF0KW02.AF0KW-TTL-SHRT;

  else
    set AF0KM001.AF0KM-TTL invisible, protect;
    set AF0KM001.AF0KM-TTL-BKGS invisible, protect;
    set AF0KM001.AF0KM-TTL-FCST invisible, protect;
    set AF0KM001.AF0KM-TTL-PURC invisible, protect;
    set AF0KM001.AF0KM-TTL-LONG invisible, protect;
    set AF0KM001.AF0KM-TTL-SHRT invisible, protect;

  end
end // end AF0KS-0026

// Edit Finish Type
Function AF0KS-0027()

  if (AF0KM001.PG2SCRFL == " "
   || AF0KM001.PG2SCRFL == "*")
    AF0KW01.AF0KW-FINISH-TYPE = " ";
    return;
  end

  if (AF0KM001.PG2SCRFL != "S"
   && AF0KM001.PG2SCRFL != "B"
   && AF0KM001.PG2SCRFL != "U"
   && AF0KM001.PG2SCRFL != "R")

                   /* (field in error)*/
    AF0KW01.AF0KW-FINISH-TYPE = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "0027"; /* Process number*/
    set AF0KM001.PG2SCRFL cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/

  else
                   /* (field is valid)*/
    AF0KW01.AF0KW-FINISH-TYPE = AF0KM001.PG2SCRFL;

  end

end // end AF0KS-0027

// Edit Product Line
Function AF0KS-0028()
  if (AF0KM001.XPLCD == " ") /* Map fld eq spaces*/
    XP1REC.XPLCD = " "; /* Space out save fld*/
    XP1REC.XPLABRV = " "; /* Space out save abrv*/
    AF0KM001.XPLABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end

  XP1REC.XPLCD = AF0KM001.XPLCD; /* save to wk map storage*/

  AF0KW01.AF0KW-TABLE-CODE1 = AF0KM001.XPLCD;
  AF0KW01.AF0KW-TABLE-CODE2 = "03";

  if (AF0KW01.AF0KW-TABLE-KEY in XPLTBL.XPLKEY)

    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0028"; /* Process number*/
  set AF0KM001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  XP1REC.XPLCD = " "; /* Space out save abrv*/
  XP1REC.XPLABRV = " "; /* Space out map abrv*/

end // end AF0KS-0028

// Edit GA
Function AF0KS-0029()

  if (AF0KM001.XGACD == " ") /* Map fld eq spaces*/
    XP1REC.XGACD = " "; /* Space out save fld*/
    XP1REC.XGAABRV = " "; /* Space out save desc*/
    AF0KM001.XGAABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  XP1REC.XGACD = AF0KM001.XGACD;

  AF0KW01.AF0KW-TABLE-CODE1 = AF0KM001.XGACD;
  AF0KW01.AF0KW-TABLE-CODE2 = "03";

  if (AF0KW01.AF0KW-TABLE-KEY in XGATBL.XGAKEY)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0029"; /* Process number*/
  set AF0KM001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  XP1REC.XGACD = " "; /* Space out save fld*/
  XP1REC.XGAABRV = " "; /* Space out save abrv*/
  AF0KM001.XGAABRV = " "; /* Space out map desc*/


end // end AF0KS-0029

// Edit Product Type
Function AF0KS-0030()
  if (AF0KM001.XPRCD == " ") /* Map fld eq spaces*/
    XP1REC.XPRCD = " "; /* Space out save fld*/
    XP1REC.XPRABRV = " "; /* Space out save abrv*/
    AF0KM001.XPRABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end

  XP1REC.XPRCD = AF0KM001.XPRCD; /* save to wk map storage*/

  if (AF0KM001.XPRCD in XPRTBL.XPRCD)

    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0030"; /* Process number*/
  set AF0KM001.XPRCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  XP1REC.XPRCD = " "; /* Space out save fld*/
  XP1REC.XPRABRV = " "; /* Space out save abrv*/
  AF0KM001.XPRABRV = " "; /* Space out map abrv*/




end // end AF0KS-0030

// Edit Owner group
Function AF0KS-0031()

  if (AF0KM001.XOWCD == " " /* Map fld eq spaces*/
   || AF0KM001.XOWCD == "**") /* Map fld eq ***/
    XP1REC.XOWCD = "  "; /* Wildcard save fld*/
    XP1REC.XOWABRV = "  "; /* Wildcard save fld*/
    AF0KM001.XOWCD = "**";
    AF0KM001.XOWABRV = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XOWCD = AF0KM001.XOWCD; /* save to wk map storage*/

  AF0KW01.AF0KW-TABLE-CODE1 = "51";
  AF0KW01.AF0KW-TABLE-CODE2 = AF0KM001.XOWCD;

  if (AF0KW01.AF0KW-TABLE-KEY in XOWTBL.XOWKEY)

    if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      AF0KM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0031"; /* Process number*/
  set AF0KM001.XOWCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  AF0KM001.XOWABRV = " "; /* Space out map abrv*/
  XP1REC.XOWCD = " ";
  XP1REC.XOWABRV = " ";




end // end AF0KS-0031

// Edit Division
Function AF0KS-0032()
  if (AF0KM001.XDVCD == " ") /* Map fld eq spaces*/
    XP1REC.XDVCD = " "; /* Space out save fld*/
    XP1REC.XDVABRV = " "; /* Space out save desc*/
    AF0KM001.XDVABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  XP1REC.XDVCD = AF0KM001.XDVCD; /* save to wk map storage*/

  if (AF0KM001.XDVCD in XDVTBL.XDVCD)

    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || AF0KM001.XDVCD == "05")                 
      XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0KM001.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0032"; /* Process number*/
  set AF0KM001.XDVCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  XP1REC.XDVCD = " "; /* Space out save desc*/
  XP1REC.XDVABRV = " "; /* Space out save desc*/
  AF0KM001.XDVABRV = " "; /* Space out map desc*/




end // end AF0KS-0032

// Edit Season year
Function AF0KS-0033()

  XP1REC.XP1XSNYR = 0; /* initialize xsnyr wk area*/
  XP1REC.XP1XSNYY = AF0KM001.XSNYR; /* move to wk area*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* XP1REC.XP1XSNYR = XP1REC.XP1XSNYY + 1900;/* move century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (XP1REC.XP1XSNYY > 60)
    XP1REC.XP1XSNCC = 19; /* move century*/
  else
    XP1REC.XP1XSNCC = 20; /* move century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

  XP1REC.XSNYR = XP1REC.XP1XSNYR; /* move to binary format*/

  /* *********************************************************/
  /* do not allow user to enter anything beyond SU 2000  **/
  /* *********************************************************/

  if (XP1REC.XP1XSNYR < 2000)
    AF0KS-0033S();
  else
    if (XP1REC.XP1XSNYR == 2000)
      if (AF0KM001.XSECD == "SP"
       || AF0KM001.XSECD == "SU")
        AF0KS-0033S();
      else
  /* field in error*/
        AFWREC.AFWPRCSN = "S033"; /* Process number*/
        set AF0KM001.XSNYR cursor, bold; /* highlight field*/
        set AF0KM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
        XP1REC.XP1XSNYR = 0; /* Reset working storage*/
      end
    else
  /* field in error*/
      if (XP1REC.XP1XSNYR > 2000)
        AFWREC.AFWPRCSN = "S033"; /* Process number*/
        set AF0KM001.XSNYR cursor, bold; /* highlight field*/
        set AF0KM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
        XP1REC.XP1XSNYR = 0; /* Reset working storage*/
      end
    end
  end

end // end AF0KS-0033

// Season year search
Function AF0KS-0033S()

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == XP1REC.XSNYR
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

  AFWREC.AFWPRCSN = "S33S"; /* Process number*/
  set AF0KM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
  XP1REC.XP1XSNYR = 0; /* Reset working storage*/
end // end AF0KS-0033S

// Edit Season code
Function AF0KS-0034()

  if (AF0KM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0KM001.XSECD; /* save to working storage*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "0034"; /* Process number*/
    set AF0KM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/

  end

  AF0KW01.AF0KW-TABLE-CODE1 = XP1REC.XSECD;
  AF0KW01.AF0KW-TABLE-CODE2 = XP1REC.XP1XSNYY;


  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5]
     == AF0KW01.AF0KW-TABLE-KEY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      AF0KW01.XSNBDT = YSNTBL.XSN-SESN-BDT[AFWIDX5]; /* save to wk*/
      AF0KW01.XSNXDT = YSNTBL.XSN-SESN-XDT[AFWIDX5]; /* save to wk*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  set AF0KM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
  XP1REC.XSECD = 0; /* Zero-out save area*/
  XP1REC.XP1XSNYR = 0; /* Zero-out save area*/
end // end AF0KS-0034

// Edit Forecaster
Function AF0KS-0035()

  if (AF0KM001.XXXUSER == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  XP1REC.XXXUSER = AF0KM001.XXXUSER; /* Move to wk map storage*/


   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0KM001.XXXUSER; /* Forecaster id*/


   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0KM001.XXXUSER cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "0035"; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.XXXUSER = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0KM001.XXXUSER; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end
      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0KE12"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0KM001.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AF0KS-0035

// Accumulate Forecast dollars
Function AF0KS-0036()

  AF0KW01.AF0KW-TTL-FCST = AF0KW01.AF0KW-TTL-FCST + AF2REC.AF2FSTDL;
  AF0KW01.AF0KW-DIV-FCST = AF0KW01.AF0KW-DIV-FCST + AF2REC.AF2FSTDL;
  AF0KW01.AF0KW-TYP-FCST = AF0KW01.AF0KW-TYP-FCST + AF2REC.AF2FSTDL;
  AF0KW01.AF0KW-GA-FCST = AF0KW01.AF0KW-GA-FCST + AF2REC.AF2FSTDL;
  AF0KW01.AF0KW-LIN-FCST = AF0KW01.AF0KW-LIN-FCST + AF2REC.AF2FSTDL;
  AF0KW01.AF0KW-CAT-FCST = AF0KW01.AF0KW-CAT-FCST + AF2REC.AF2FSTDL;

end // end AF0KS-0036

// Clear map detail
Function AF0KS-0037()
   /* ------------------------------------------------------------*/
   /* Clear out map detail when a error exists*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWIDX2 = 0;

  while (AFWREC.AFWIDX2 < 6)
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1;
    AF0KM001.XPCCD[AFWIDX2] = " ";
    AF0KM001.XPCABRV[AFWIDX2] = " ";
    AF0KM001.AF0KM-CAT-BKGS[AFWIDX2] = 0;
    AF0KM001.AF0KM-CAT-FCST[AFWIDX2] = 0;
    AF0KM001.AF0KM-CAT-PURC[AFWIDX2] = 0;
    AF0KM001.AF0KM-CAT-LONG[AFWIDX2] = 0;
    AF0KM001.AF0KM-CAT-SHRT[AFWIDX2] = 0;
  end

  AF0KM001.AF0KM-LIN-ABREV = " ";
  AF0KM001.AF0KM-LIN-TTL = " ";
  AF0KM001.AF0KM-LIN-BKGS = 0;
  AF0KM001.AF0KM-LIN-FCST = 0;
  AF0KM001.AF0KM-LIN-PURC = 0;
  AF0KM001.AF0KM-LIN-LONG = 0;
  AF0KM001.AF0KM-LIN-SHRT = 0;

  AF0KM001.AF0KM-GA-ABREV = " ";
  AF0KM001.AF0KM-GA-TTL = " ";
  AF0KM001.AF0KM-GA-BKGS = 0;
  AF0KM001.AF0KM-GA-FCST = 0;
  AF0KM001.AF0KM-GA-PURC = 0;
  AF0KM001.AF0KM-GA-LONG = 0;
  AF0KM001.AF0KM-GA-SHRT = 0;

  AF0KM001.AF0KM-TYP-ABREV = " ";
  AF0KM001.AF0KM-TYP-TTL = " ";
  AF0KM001.AF0KM-TYP-BKGS = 0;
  AF0KM001.AF0KM-TYP-FCST = 0;
  AF0KM001.AF0KM-TYP-PURC = 0;
  AF0KM001.AF0KM-TYP-LONG = 0;
  AF0KM001.AF0KM-TYP-SHRT = 0;

  AF0KM001.AF0KM-DIV-ABREV = " ";
  AF0KM001.AF0KM-DIV-TTL = " ";
  AF0KM001.AF0KM-DIV-BKGS = 0;
  AF0KM001.AF0KM-DIV-FCST = 0;
  AF0KM001.AF0KM-DIV-PURC = 0;
  AF0KM001.AF0KM-DIV-LONG = 0;
  AF0KM001.AF0KM-DIV-SHRT = 0;

  AF0KM001.AF0KM-TTL = " ";
  AF0KM001.AF0KM-TTL-BKGS = 0;
  AF0KM001.AF0KM-TTL-FCST = 0;
  AF0KM001.AF0KM-TTL-PURC = 0;
  AF0KM001.AF0KM-TTL-LONG = 0;
  AF0KM001.AF0KM-TTL-SHRT = 0;


end // end AF0KS-0037

// Move header data
Function AF0KS-0120()
   /* -------------------------------------------*/
   /* --             MOVE HEADER FIELDS        --*/
   /* -------------------------------------------*/

  AF0KM002.XPRCD = XP1REC.XPRCD; /* Type code*/
  AF0KM002.XPRABRV = XP1REC.XPRABRV; /* Type abrev*/
  AF0KM002.XGACD = XP1REC.XGACD; /* GA code*/
  AF0KM002.XGAABRV = XP1REC.XGAABRV; /* GA abrev*/
  AF0KM002.XPLCD = XP1REC.XPLCD; /* Line code*/
  AF0KM002.XPLABRV = XP1REC.XPLABRV; /* Line abrev*/
  AF0KM002.XOWCD = XP1REC.XOWCD; /* Owner Group Cd*/
  AF0KM002.XOWABRV = XP1REC.XOWABRV; /* OG abrev*/
  AF0KM002.XDVCD = XP1REC.XDVCD; /* Division Cd*/
  AF0KM002.XDVABRV = XP1REC.XDVABRV; /* Div abrev*/
  AF0KM002.XSECD = XP1REC.XSECD; /* Season Cd*/
  AF0KM002.XSNYR = XP1REC.XP1XSNYY; /* Season Year*/
  AF0KM002.PG2SCRFL = AF0KW01.AF0KW-FINISH-TYPE; /* Finish Type*/
  AF0KM002.XXXUSER = XP1REC.XXXUSER; /* Forecaster ID*/

end // end AF0KS-0120

// Format Cat subtotals
Function AF0KS-0121()
   /* -----------------------------------------------------------------*/
   /* Move data from temp storage area to map*/
   /* -----------------------------------------------------------------*/

  AFWREC.AFWIDX1 = 1;
  while (AFWIDX1 <= 6)
    if (AF0KW02.XPCCD[AFWIDX1] > " ") /* Data Row Has Been Retrieved*/
      AF0KM002.XPCCD[AFWIDX1] = AF0KW02.XPCCD[AFWIDX1];
      AF0KM002.XPCABRV[AFWIDX1] = AF0KW02.XPCABRV[AFWIDX1];
      AF0KM002.AF0KM-CAT-BLAQ[AFWIDX1] = AF0KW02.AF0KW-CAT-BLAQ[AFWIDX1];
      AF0KM002.AF0KM-CAT-BLAD[AFWIDX1] = AF0KW02.AF0KW-CAT-BLAD[AFWIDX1];
      AF0KM002.AF0KM-CAT-COST[AFWIDX1] = AF0KW02.AF0KW-CAT-COST[AFWIDX1];
  /* ELSE;*/
  /* SET AF0KM002.XPCCD(AFWIDX1) DARK,PROTECT;*/
  /* SET AF0KM002.XPCABRV(AFWIDX1) DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-CAT-BLAQ(AFWIDX1) DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-CAT-BLAD(AFWIDX1) DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-CAT-COST(AFWIDX1) DARK,PROTECT;*/
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
  end

end // end AF0KS-0121

// Format Line subtotals
Function AF0KS-0122()

  if (AF0KW02.AF0KW-LIN-ABREV > " ") /* Line total*/
    AF0KM002.AF0KM-LIN-ABREV = AF0KW02.AF0KW-LIN-ABREV;
    AF0KM002.AF0KM-LIN-TTL = "SUBTOTAL";
    AF0KM002.AF0KM-LIN-BLAQ = AF0KW02.AF0KW-LIN-BLAQ;
    AF0KM002.AF0KM-LIN-BLAD = AF0KW02.AF0KW-LIN-BLAD;
    AF0KM002.AF0KM-LIN-COST = AF0KW02.AF0KW-LIN-COST;

  /* ELSE*/

  /* SET AF0KM002.AF0KM-LIN-ABREV DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-LIN-BLAQ DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-LIN-BLAD DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-LIN-COST DARK,PROTECT;*/

  end

end // end AF0KS-0122

// Format GA subtotals
Function AF0KS-0123()

  if (AF0KW02.AF0KW-GA-ABREV > " ") /* Line total*/
    AF0KM002.AF0KM-GA-ABREV = AF0KW02.AF0KW-GA-ABREV;
    AF0KM002.AF0KM-GA-TTL = "SUBTOTAL";
    AF0KM002.AF0KM-GA-BLAQ = AF0KW02.AF0KW-GA-BLAQ;
    AF0KM002.AF0KM-GA-BLAD = AF0KW02.AF0KW-GA-BLAD;
    AF0KM002.AF0KM-GA-COST = AF0KW02.AF0KW-GA-COST;

  /* ELSE*/

  /* SET AF0KM002.AF0KM-GA-ABREV DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-GA-BLAQ DARK,PROTECT;*/
  /* sET AF0KM002.AF0KM-GA-BLAD DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-GA-COST DARK,PROTECT;*/

  end

end // end AF0KS-0123

// Format Type subtotals
Function AF0KS-0124()

  if (AF0KW02.AF0KW-TYP-ABREV > " ") /* Line total*/
    AF0KM002.AF0KM-TYP-ABREV = AF0KW02.AF0KW-TYP-ABREV;
    AF0KM002.AF0KM-TYP-TTL = "SUBTOTAL";
    AF0KM002.AF0KM-TYP-BLAQ = AF0KW02.AF0KW-TYP-BLAQ;
    AF0KM002.AF0KM-TYP-BLAD = AF0KW02.AF0KW-TYP-BLAD;
    AF0KM002.AF0KM-TYP-COST = AF0KW02.AF0KW-TYP-COST;

  /* ELSE*/

  /* SET AF0KM002.AF0KM-TYP-ABREV DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-TYP-BLAQ DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-TYP-BLAD DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-TYP-COST DARK,PROTECT;*/

  end

end // end AF0KS-0124

// Format Div subtotals
Function AF0KS-0125()

  if (AF0KW02.AF0KW-DIV-ABREV > " ") /* Line total*/

    AF0KM002.AF0KM-DIV-ABREV = AF0KW02.AF0KW-DIV-ABREV;
    AF0KM002.AF0KM-DIV-TTL = "SUBTOTAL";
    AF0KM002.AF0KM-DIV-BLAQ = AF0KW02.AF0KW-DIV-BLAQ;
    AF0KM002.AF0KM-DIV-BLAD = AF0KW02.AF0KW-DIV-BLAD;
    AF0KM002.AF0KM-DIV-COST = AF0KW02.AF0KW-DIV-COST;

  /* ELSE*/

  /* SET AF0KM002.AF0KM-DIV-ABREV DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-DIV-BLAQ DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-DIV-BLAD DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-DIV-COST DARK,PROTECT;*/

  end

end // end AF0KS-0125

// Format Grand totals
Function AF0KS-0126()
  /*  */
  /* Check to see if subtotals have all been displayed*/
  /*  */

  if (AF0KW02.AF0KW-LIN-ABREV > " "
   && AF0KW02.AF0KW-GA-ABREV > " "
   && AF0KW02.AF0KW-TYP-ABREV > " "
   && AF0KW02.AF0KW-DIV-ABREV > " ")

    AF0KM002.AF0KM-TTL = "  GRAND TOTAL ";
    AF0KM002.AF0KM-TTL-BLAQ = AF0KW02.AF0KW-TTL-BLAQ;
    AF0KM002.AF0KM-TTL-BLAD = AF0KW02.AF0KW-TTL-BLAD;
    AF0KM002.AF0KM-TTL-COST = AF0KW02.AF0KW-TTL-COST;

  /* ELSE*/

  /* SET AF0KM002.AF0KM-TTL-BLAQ DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-TTL-BLAD DARK,PROTECT;*/
  /* SET AF0KM002.AF0KM-TTL-COST DARK,PROTECT;*/

  end
end // end AF0KS-0126

// Edit Finish type
Function AF0KS-0127()

  if (AF0KM002.PG2SCRFL == " "
   || AF0KM002.PG2SCRFL == "*")
    AF0KW01.AF0KW-FINISH-TYPE = " ";
    return;
  end

  if (AF0KM002.PG2SCRFL != "S"
   && AF0KM002.PG2SCRFL != "B"
   && AF0KM002.PG2SCRFL != "U"
   && AF0KM002.PG2SCRFL != "R")

                   /* (field in error)*/
    AF0KW01.AF0KW-FINISH-TYPE = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "0027"; /* Process number*/
    set AF0KM002.PG2SCRFL cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/

  else
                   /* (field is valid)*/
    AF0KW01.AF0KW-FINISH-TYPE = AF0KM002.PG2SCRFL;

  end

end // end AF0KS-0127

// Edit Line
Function AF0KS-0128()
  /* GET AF0KS-0028*/
  if (AF0KM002.XPLCD == " ") /* Map fld eq spaces*/
    XP1REC.XPLCD = " "; /* Space out save fld*/
    XP1REC.XPLABRV = " "; /* Space out save abrv*/
    AF0KM002.XPLABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end

  XP1REC.XPLCD = AF0KM002.XPLCD; /* save to wk map storage*/

  AF0KW01.AF0KW-TABLE-CODE1 = AF0KM002.XPLCD;
  AF0KW01.AF0KW-TABLE-CODE2 = "03";

  if (AF0KW01.AF0KW-TABLE-KEY in XPLTBL.XPLKEY)

    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0028"; /* Process number*/
  set AF0KM002.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  XP1REC.XPLCD = " "; /* Space out save abrv*/
  XP1REC.XPLABRV = " "; /* Space out map abrv*/

end // end AF0KS-0128

// Edit GA
Function AF0KS-0129()
  /* GET AF0KS-0029*/

  if (AF0KM002.XGACD == " ") /* Map fld eq spaces*/
    XP1REC.XGACD = " "; /* Space out save fld*/
    XP1REC.XGAABRV = " "; /* Space out save desc*/
    AF0KM002.XGAABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  XP1REC.XGACD = AF0KM002.XGACD;

  AF0KW01.AF0KW-TABLE-CODE1 = AF0KM002.XGACD;
  AF0KW01.AF0KW-TABLE-CODE2 = "03";

  if (AF0KW01.AF0KW-TABLE-KEY in XGATBL.XGAKEY)

    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0029"; /* Process number*/
  set AF0KM002.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  XP1REC.XGACD = " "; /* Space out save fld*/
  XP1REC.XGAABRV = " "; /* Space out save abrv*/
  AF0KM002.XGAABRV = " "; /* Space out map desc*/


end // end AF0KS-0129

// Edit Type
Function AF0KS-0130()
  /* GET AF0KS-0030*/
  if (AF0KM002.XPRCD == " ") /* Map fld eq spaces*/
    XP1REC.XPRCD = " "; /* Space out save fld*/
    XP1REC.XPRABRV = " "; /* Space out save abrv*/
    AF0KM002.XPRABRV = " "; /* Space out map abrv*/
    return; /* Return to calling process*/
  end

  XP1REC.XPRCD = AF0KM002.XPRCD; /* save to wk map storage*/

  if (AF0KM002.XPRCD in XPRTBL.XPRCD)

    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0030"; /* Process number*/
  set AF0KM002.XPRCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  XP1REC.XPRCD = " "; /* Space out save fld*/
  XP1REC.XPRABRV = " "; /* Space out save abrv*/
  AF0KM002.XPRABRV = " "; /* Space out map abrv*/




end // end AF0KS-0130

// Edit Owner
Function AF0KS-0131()
  /* GET AF0KS-0031*/

  if (AF0KM002.XOWCD == " " /* Map fld eq spaces*/
   || AF0KM002.XOWCD == "**") /* Map fld eq ***/
    XP1REC.XOWCD = "  "; /* Wildcard save fld*/
    XP1REC.XOWABRV = "  "; /* Wildcard save fld*/
    AF0KM002.XOWCD = "**";
    AF0KM002.XOWABRV = " ";
    return; /* Return to calling process*/
  end

  XP1REC.XOWCD = AF0KM002.XOWCD; /* save to wk map storage*/

  AF0KW01.AF0KW-TABLE-CODE1 = "51";
  AF0KW01.AF0KW-TABLE-CODE2 = AF0KM002.XOWCD;

  if (AF0KW01.AF0KW-TABLE-KEY in XOWTBL.XOWKEY)

    if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/

      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
      AF0KM002.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/

    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0031"; /* Process number*/
  set AF0KM002.XOWCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  AF0KM002.XOWABRV = " "; /* Space out map abrv*/
  XP1REC.XOWCD = " ";
  XP1REC.XOWABRV = " ";




end // end AF0KS-0131

// Edit Division
Function AF0KS-0132()
  /* GET AF0KS-0032*/
  if (AF0KM002.XDVCD == " ") /* Map fld eq spaces*/
    XP1REC.XDVCD = " "; /* Space out save fld*/
    XP1REC.XDVABRV = " "; /* Space out save desc*/
    AF0KM002.XDVABRV = " "; /* Space out map desc*/
    return; /* Return to calling process*/
  end

  XP1REC.XDVCD = AF0KM002.XDVCD; /* save to wk map storage*/

  if (AF0KM002.XDVCD in XDVTBL.XDVCD)

    if (XDVTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     || AF0KM002.XDVCD == "05")                 
      XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0KM002.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To map*/
      return; /* Exit to calling process*/
    end

  end

                   /* (field in error)*/
  AFWREC.AFWPRCSN = "0032"; /* Process number*/
  set AF0KM002.XDVCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  XP1REC.XDVCD = " "; /* Space out save desc*/
  XP1REC.XDVABRV = " "; /* Space out save desc*/
  AF0KM002.XDVABRV = " "; /* Space out map desc*/




end // end AF0KS-0132

// Edit Season Yr
Function AF0KS-0133()

  XP1REC.XP1XSNYR = 0; /* initialize xsnyr wk area*/
  XP1REC.XP1XSNYY = AF0KM002.XSNYR; /* move to wk area*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* XP1REC.XP1XSNYR = XP1REC.XP1XSNYY + 1900;/* move century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (XP1REC.XP1XSNYY > 60)
    XP1REC.XP1XSNCC = 19; /* move century*/
  else
    XP1REC.XP1XSNCC = 20; /* move century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/

  XP1REC.XSNYR = XP1REC.XP1XSNYR; /* move to binary format*/

  if (XP1REC.XP1XSNYR < 2000)
    AF0KS-0133S();
  else
    if (XP1REC.XP1XSNYR == 2000)
      if (AF0KM002.XSECD == "SP"
       || AF0KM002.XSECD == "SU")
        AF0KS-0133S();
      else
  /* field in error*/
        AFWREC.AFWPRCSN = "S133"; /* Process number*/
        set AF0KM002.XSNYR cursor, bold; /* highlight field*/
        set AF0KM002.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
        XP1REC.XP1XSNYR = 0; /* Reset working storage*/
      end
    else
      if (XP1REC.XP1XSNYR > 2000)
  /* field in error*/
        AFWREC.AFWPRCSN = "S133"; /* Process number*/
        set AF0KM002.XSNYR cursor, bold; /* highlight field*/
        set AF0KM002.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
        XP1REC.XP1XSNYR = 0; /* Reset working storage*/
      end
    end
  end

end // end AF0KS-0133

// Season Yr search
Function AF0KS-0133S()

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == XP1REC.XSNYR
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

  AFWREC.AFWPRCSN = "133S"; /* Process number*/
  set AF0KM002.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
  XP1REC.XP1XSNYR = 0; /* Reset working storage*/

end // end AF0KS-0133S

// Edit Season code
Function AF0KS-0134()

  if (AF0KM002.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0KM002.XSECD; /* save to working storage*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "0034"; /* Process number*/
    set AF0KM002.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/

  end

  AF0KW01.AF0KW-TABLE-CODE1 = XP1REC.XSECD;
  AF0KW01.AF0KW-TABLE-CODE2 = XP1REC.XP1XSNYY;

  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5]
     == AF0KW01.AF0KW-TABLE-KEY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      AF0KW01.XSNBDT = YSNTBL.XSN-SESN-BDT[AFWIDX5]; /* save to wk*/
      AF0KW01.XSNXDT = YSNTBL.XSN-SESN-XDT[AFWIDX5]; /* save to wk*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S22 "; /* Process number*/
  set AF0KM002.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
  XP1REC.XSECD = 0; /* Zero-out save area*/
  XP1REC.XP1XSNYR = 0; /* Zero-out save area*/


end // end AF0KS-0134

// Edit Forecaster
Function AF0KS-0135()

  if (AF0KM002.XXXUSER == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end

  XP1REC.XXXUSER = AF0KM002.XXXUSER; /* Move to wk map storage*/


   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/

  set PG1REC empty; /* Clear row storage area*/

  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0KM002.XXXUSER; /* Forecaster id*/


   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/

  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/

  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0KM002.XXXUSER cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "0035"; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.XXXUSER = " "; /* Space out save area*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/

      /* ***** EXIT PROCESS HERE ******/

    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0KM002.XXXUSER; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/

          /* ***** EXIT PROCESS HERE ******/

        end
      end
    end
  end

   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/

  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0KE12"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0KM002.XXXUSER; /* MOVE SIGNON to ERROR-DIAG*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  return; /* Return to previous process*/



end // end AF0KS-0135

// Clear map detail
Function AF0KS-0137()
   /* ------------------------------------------------------------*/
   /* Clear out map detail when a error exists*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWIDX2 = 0;

  while (AFWREC.AFWIDX2 < 6)
    AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1;
    AF0KM002.XPCCD[AFWIDX2] = " ";
    AF0KM002.XPCABRV[AFWIDX2] = " ";
    AF0KM002.AF0KM-CAT-BLAQ[AFWIDX2] = 0;
    AF0KM002.AF0KM-CAT-BLAD[AFWIDX2] = 0;
    AF0KM002.AF0KM-CAT-COST[AFWIDX2] = 0;
  end

  AF0KM002.AF0KM-LIN-ABREV = " ";
  AF0KM002.AF0KM-LIN-TTL = " ";
  AF0KM002.AF0KM-LIN-BLAQ = 0;
  AF0KM002.AF0KM-LIN-BLAD = 0;
  AF0KM002.AF0KM-LIN-COST = 0;

  AF0KM002.AF0KM-GA-ABREV = " ";
  AF0KM002.AF0KM-GA-TTL = " ";
  AF0KM002.AF0KM-GA-BLAQ = 0;
  AF0KM002.AF0KM-GA-BLAD = 0;
  AF0KM002.AF0KM-GA-COST = 0;

  AF0KM002.AF0KM-TYP-ABREV = " ";
  AF0KM002.AF0KM-TYP-TTL = " ";
  AF0KM002.AF0KM-TYP-BLAQ = 0;
  AF0KM002.AF0KM-TYP-BLAD = 0;
  AF0KM002.AF0KM-TYP-COST = 0;

  AF0KM002.AF0KM-DIV-ABREV = " ";
  AF0KM002.AF0KM-DIV-TTL = " ";
  AF0KM002.AF0KM-DIV-BLAQ = 0;
  AF0KM002.AF0KM-DIV-BLAD = 0;
  AF0KM002.AF0KM-DIV-COST = 0;

  AF0KM002.AF0KM-TTL = " ";
  AF0KM002.AF0KM-TTL-BLAQ = 0;
  AF0KM002.AF0KM-TTL-BLAD = 0;
  AF0KM002.AF0KM-TTL-COST = 0;


end // end AF0KS-0137

//*** RECORD=AF0KW01 ****
// Working Storage (1) for AF0K - Program-defined Variables
// ***********************
Record AF0KW01 type basicRecord
  10 AF0KW-KEY AF0KW-KEY ; 
    15 XDVCD XDVCD ; 
    15 XPRCD XPRCD ; 
    15 XGACD XGACD ; 
    15 XPLCD XPLCD ; 
    15 XPCCD XPCCD ; 
    15 SY1STNBR SY1STNBR ; 
  10 * char(1) ; 
  10 AF0KW-TTL-BKGS AF0KW-TTL-BKGS ; 
  10 AF0KW-TTL-FCST AF0KW-TTL-FCST ; 
  10 AF0KW-TTL-PURC AF0KW-TTL-PURC ; 
  10 AF0KW-TTL-LONG AF0KW-TTL-LONG ; 
  10 AF0KW-TTL-SHRT AF0KW-TTL-SHRT ; 
  10 AF0KW-TTL-BLAQ AF0KW-TTL-BLAQ ; 
  10 AF0KW-TTL-BLAD AF0KW-TTL-BLAD ; 
  10 AF0KW-TTL-COST AF0KW-TTL-COST ; 
  10 * char(1) ; 
  10 AF0KW-DIV-BKGS AF0KW-DIV-BKGS ; 
  10 AF0KW-DIV-FCST AF0KW-DIV-FCST ; 
  10 AF0KW-DIV-PURC AF0KW-DIV-PURC ; 
  10 AF0KW-DIV-LONG AF0KW-DIV-LONG ; 
  10 AF0KW-DIV-SHRT AF0KW-DIV-SHRT ; 
  10 AF0KW-DIV-BLAQ AF0KW-DIV-BLAQ ; 
  10 AF0KW-DIV-BLAD AF0KW-DIV-BLAD ; 
  10 AF0KW-DIV-COST AF0KW-DIV-COST ; 
  10 * char(1) ; 
  10 AF0KW-TYP-BKGS AF0KW-TYP-BKGS ; 
  10 AF0KW-TYP-FCST AF0KW-TYP-FCST ; 
  10 AF0KW-TYP-PURC AF0KW-TYP-PURC ; 
  10 AF0KW-TYP-LONG AF0KW-TYP-LONG ; 
  10 AF0KW-TYP-SHRT AF0KW-TYP-SHRT ; 
  10 AF0KW-TYP-BLAQ AF0KW-TYP-BLAQ ; 
  10 AF0KW-TYP-BLAD AF0KW-TYP-BLAD ; 
  10 AF0KW-TYP-COST AF0KW-TYP-COST ; 
  10 * char(1) ; 
  10 AF0KW-GA-BKGS AF0KW-GA-BKGS ; 
  10 AF0KW-GA-FCST AF0KW-GA-FCST ; 
  10 AF0KW-GA-PURC AF0KW-GA-PURC ; 
  10 AF0KW-GA-LONG AF0KW-GA-LONG ; 
  10 AF0KW-GA-SHRT AF0KW-GA-SHRT ; 
  10 AF0KW-GA-BLAQ AF0KW-GA-BLAQ ; 
  10 AF0KW-GA-BLAD AF0KW-GA-BLAD ; 
  10 AF0KW-GA-COST AF0KW-GA-COST ; 
  10 * char(1) ; 
  10 AF0KW-LIN-BKGS AF0KW-LIN-BKGS ; 
  10 AF0KW-LIN-FCST AF0KW-LIN-FCST ; 
  10 AF0KW-LIN-PURC AF0KW-LIN-PURC ; 
  10 AF0KW-LIN-LONG AF0KW-LIN-LONG ; 
  10 AF0KW-LIN-SHRT AF0KW-LIN-SHRT ; 
  10 AF0KW-LIN-BLAQ AF0KW-LIN-BLAQ ; 
  10 AF0KW-LIN-BLAD AF0KW-LIN-BLAD ; 
  10 AF0KW-LIN-COST AF0KW-LIN-COST ; 
  10 * char(1) ; 
  10 AF0KW-CAT-BKGS AF0KW-CAT-BKGS ; 
  10 AF0KW-CAT-FCST AF0KW-CAT-FCST ; 
  10 AF0KW-CAT-PURC AF0KW-CAT-PURC ; 
  10 AF0KW-CAT-LONG AF0KW-CAT-LONG ; 
  10 AF0KW-CAT-SHRT AF0KW-CAT-SHRT ; 
  10 AF0KW-CAT-BLAQ AF0KW-CAT-BLAQ ; 
  10 AF0KW-CAT-BLAD AF0KW-CAT-BLAD ; 
  10 AF0KW-CAT-COST AF0KW-CAT-COST ; 
  10 * char(1) ; 
  10 AF0KW-CLR-BKGS AF0KW-CLR-BKGS ; 
  10 AF0KW-CLR-FCST AF0KW-CLR-FCST ; 
  10 AF0KW-CLR-PURC AF0KW-CLR-PURC ; 
  10 AF0KW-CLR-LONG AF0KW-CLR-LONG ; 
  10 AF0KW-CLR-SHRT AF0KW-CLR-SHRT ; 
  10 AF0KW-CLR-BLAD AF0KW-CLR-BLAD ; 
  10 AF0KW-CLR-COST AF0KW-CLR-COST ; 
  10 * char(1) ; 
  10 XSNBDT XSNBDT ; 
  10 XSNXDT XSNXDT ; 
  10 * char(3) ; 
  10 AFWSWR AFWSWR ; 
  10 AF0KW-PAGE-FULL AF0KW-PAGE-FULL ; 
  10 AF0KW-END-OF-STYLE AF0KW-END-OF-STYLE ; 
  10 AF0KW-END-OF-CLR AF0KW-END-OF-CLR ; 
  10 AF0KW-MAX-PAGE AF0KW-MAX-PAGE ; 
  10 AF0KW-WORK-PAGE AF0KW-WORK-PAGE ; 
  10 AF0KW-CURRENT-PAGE AF0KW-CURRENT-PAGE ; 
  10 AF0KW-LAST-PAGE AF0KW-LAST-PAGE ; 
  10 AF0KW-TSL AF0KW-TSL ; 
  10 AF0KW-COST AF0KW-COST ; 
  10 AF0KWPND AF0KWPND ; 
  10 AF0KWPSA AF0KWPSA ; 
  10 * char(3) ; 
  10 AF0KW-TABLE-KEY AF0KW-TABLE-KEY ; 
    15 AF0KW-TABLE-CODE1 AF0KW-TABLE-CODE1 ; 
    15 AF0KW-TABLE-CODE2 AF0KW-TABLE-CODE2 ; 
  10 AF0KW-FINISH-TYPE AF0KW-FINISH-TYPE ; 
end // end AF0KW01

//*** RECORD=AF0KW02 ****
// Working Storage (2) for AF0K - TSQ page
// ***********************
Record AF0KW02 type basicRecord
  5 * char(430) ; 
    10 AF0KW-TSQ-LENGTH AF0KW-TSQ-LENGTH ; 
    10 AF0KW-SCRN-LNS AF0KW-SCRN-LNS ; 
    10 * char(40) [6] ; 
      15 XPCCD XPCCD ; 
      15 XPCABRV XPCABRV ; 
      15 AF0KW-CAT-BKGS AF0KW-CAT-BKGS ; 
      15 AF0KW-CAT-FCST AF0KW-CAT-FCST ; 
      15 AF0KW-CAT-PURC AF0KW-CAT-PURC ; 
      15 AF0KW-CAT-LONG AF0KW-CAT-LONG ; 
      15 AF0KW-CAT-SHRT AF0KW-CAT-SHRT ; 
      15 AF0KW-CAT-BLAQ AF0KW-CAT-BLAQ ; 
      15 AF0KW-CAT-BLAD AF0KW-CAT-BLAD ; 
      15 AF0KW-CAT-COST AF0KW-CAT-COST ; 
    10 AF0KW-LIN-ABREV AF0KW-LIN-ABREV ; 
    10 AF0KW-LIN-BKGS AF0KW-LIN-BKGS ; 
    10 AF0KW-LIN-FCST AF0KW-LIN-FCST ; 
    10 AF0KW-LIN-PURC AF0KW-LIN-PURC ; 
    10 AF0KW-LIN-LONG AF0KW-LIN-LONG ; 
    10 AF0KW-LIN-SHRT AF0KW-LIN-SHRT ; 
    10 AF0KW-LIN-BLAQ AF0KW-LIN-BLAQ ; 
    10 AF0KW-LIN-BLAD AF0KW-LIN-BLAD ; 
    10 AF0KW-LIN-COST AF0KW-LIN-COST ; 
    10 AF0KW-GA-ABREV AF0KW-GA-ABREV ; 
    10 AF0KW-GA-BKGS AF0KW-GA-BKGS ; 
    10 AF0KW-GA-FCST AF0KW-GA-FCST ; 
    10 AF0KW-GA-PURC AF0KW-GA-PURC ; 
    10 AF0KW-GA-LONG AF0KW-GA-LONG ; 
    10 AF0KW-GA-SHRT AF0KW-GA-SHRT ; 
    10 AF0KW-GA-BLAQ AF0KW-GA-BLAQ ; 
    10 AF0KW-GA-BLAD AF0KW-GA-BLAD ; 
    10 AF0KW-GA-COST AF0KW-GA-COST ; 
    10 AF0KW-TYP-ABREV AF0KW-TYP-ABREV ; 
    10 AF0KW-TYP-BKGS AF0KW-TYP-BKGS ; 
    10 AF0KW-TYP-FCST AF0KW-TYP-FCST ; 
    10 AF0KW-TYP-PURC AF0KW-TYP-PURC ; 
    10 AF0KW-TYP-LONG AF0KW-TYP-LONG ; 
    10 AF0KW-TYP-SHRT AF0KW-TYP-SHRT ; 
    10 AF0KW-TYP-BLAQ AF0KW-TYP-BLAQ ; 
    10 AF0KW-TYP-BLAD AF0KW-TYP-BLAD ; 
    10 AF0KW-TYP-COST AF0KW-TYP-COST ; 
    10 AF0KW-DIV-ABREV AF0KW-DIV-ABREV ; 
    10 AF0KW-DIV-BKGS AF0KW-DIV-BKGS ; 
    10 AF0KW-DIV-FCST AF0KW-DIV-FCST ; 
    10 AF0KW-DIV-PURC AF0KW-DIV-PURC ; 
    10 AF0KW-DIV-LONG AF0KW-DIV-LONG ; 
    10 AF0KW-DIV-SHRT AF0KW-DIV-SHRT ; 
    10 AF0KW-DIV-BLAQ AF0KW-DIV-BLAQ ; 
    10 AF0KW-DIV-BLAD AF0KW-DIV-BLAD ; 
    10 AF0KW-DIV-COST AF0KW-DIV-COST ; 
    10 AF0KW-TTL-BKGS AF0KW-TTL-BKGS ; 
    10 AF0KW-TTL-FCST AF0KW-TTL-FCST ; 
    10 AF0KW-TTL-PURC AF0KW-TTL-PURC ; 
    10 AF0KW-TTL-LONG AF0KW-TTL-LONG ; 
    10 AF0KW-TTL-SHRT AF0KW-TTL-SHRT ; 
    10 AF0KW-TTL-BLAQ AF0KW-TTL-BLAQ ; 
    10 AF0KW-TTL-BLAD AF0KW-TTL-BLAD ; 
    10 AF0KW-TTL-COST AF0KW-TTL-COST ; 
end // end AF0KW02

// Cat Bookings Dollars
DataItem AF0KW-CAT-BKGS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cat BLA Dollars
DataItem AF0KW-CAT-BLAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cat BLA Qty
DataItem AF0KW-CAT-BLAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cat Long Cost Dollars
DataItem AF0KW-CAT-COST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cat Forecast Dollars
DataItem AF0KW-CAT-FCST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cat Long Dollars
DataItem AF0KW-CAT-LONG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cat Purchased Dollars
DataItem AF0KW-CAT-PURC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cat Short Dollars
DataItem AF0KW-CAT-SHRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Clr Bookings Dollars
DataItem AF0KW-CLR-BKGS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Clr BLA Dollars
DataItem AF0KW-CLR-BLAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Clr Long Cost Dollars
DataItem AF0KW-CLR-COST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Clr Forecast Dollars
DataItem AF0KW-CLR-FCST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Clr Long Dollars
DataItem AF0KW-CLR-LONG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Clr Purchased Dollars
DataItem AF0KW-CLR-PURC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Clr Short Dollars
DataItem AF0KW-CLR-SHRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wholesale unit cost
DataItem AF0KW-COST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current page count
DataItem AF0KW-CURRENT-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDV_DIV_ABRV
DataItem AF0KW-DIV-ABREV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Div Bookings Dollars
DataItem AF0KW-DIV-BKGS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div BLA Dollars
DataItem AF0KW-DIV-BLAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div BLA Qty
DataItem AF0KW-DIV-BLAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div Long Cost Dollars
DataItem AF0KW-DIV-COST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div Forecast Dollars
DataItem AF0KW-DIV-FCST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div Long Dollars
DataItem AF0KW-DIV-LONG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div Purchased Dollars
DataItem AF0KW-DIV-PURC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div Short Dollars
DataItem AF0KW-DIV-SHRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Color cursor end switch
DataItem AF0KW-END-OF-CLR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style cursor end switch
DataItem AF0KW-END-OF-STYLE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Finish type indicator
DataItem AF0KW-FINISH-TYPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGA_GNDR_AGE_ABRV
DataItem AF0KW-GA-ABREV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Div Bookings Dollars
DataItem AF0KW-GA-BKGS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GA BLA Dollars
DataItem AF0KW-GA-BLAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GA BLA Qty
DataItem AF0KW-GA-BLAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GA Long Cost Dollars
DataItem AF0KW-GA-COST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div Forecast Dollars
DataItem AF0KW-GA-FCST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GA Long Dollars
DataItem AF0KW-GA-LONG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Div Purchased Dollars
DataItem AF0KW-GA-PURC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GA Short Dollars
DataItem AF0KW-GA-SHRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Control Break Key
DataItem AF0KW-KEY char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Last page count
DataItem AF0KW-LAST-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XPL_PROD_LN_ABRV
DataItem AF0KW-LIN-ABREV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line Bookings Dollars
DataItem AF0KW-LIN-BKGS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line BLA Dollars
DataItem AF0KW-LIN-BLAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line BLA Qty
DataItem AF0KW-LIN-BLAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line Long Cost Dollars
DataItem AF0KW-LIN-COST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line Forecast Dollars
DataItem AF0KW-LIN-FCST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line Long Dollars
DataItem AF0KW-LIN-LONG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line Purchased Dollars
DataItem AF0KW-LIN-PURC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line Short Dollars
DataItem AF0KW-LIN-SHRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Max page count
DataItem AF0KW-MAX-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Full page indicator
DataItem AF0KW-PAGE-FULL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Booked Dollars
DataItem AF0KW-SCRN-LNS smallint {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// table code value
DataItem AF0KW-TABLE-CODE1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem AF0KW-TABLE-CODE2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table key
DataItem AF0KW-TABLE-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page length for TSQ
DataItem AF0KW-TSL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Booked Dollars
DataItem AF0KW-TSQ-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// Ttl Bookings Dollars
DataItem AF0KW-TTL-BKGS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ttl BLA Dollars
DataItem AF0KW-TTL-BLAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ttl BLA Qty
DataItem AF0KW-TTL-BLAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ttl Long Cost Dollars
DataItem AF0KW-TTL-COST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ttl Forecast Dollars
DataItem AF0KW-TTL-FCST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ttl Long Dollars
DataItem AF0KW-TTL-LONG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ttl Purchased Dollars
DataItem AF0KW-TTL-PURC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ttl Short Dollars
DataItem AF0KW-TTL-SHRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XPR-PROD-TYP-ABRV
DataItem AF0KW-TYP-ABREV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type Bookings Dollars
DataItem AF0KW-TYP-BKGS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type BLA Dollars
DataItem AF0KW-TYP-BLAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type BLA Qty
DataItem AF0KW-TYP-BLAQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type Long Cost Dollars
DataItem AF0KW-TYP-COST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type Forecast Dollars
DataItem AF0KW-TYP-FCST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type Long Dollars
DataItem AF0KW-TYP-LONG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type Purchased Dollars
DataItem AF0KW-TYP-PURC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Type Short Dollars
DataItem AF0KW-TYP-SHRT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk page count
DataItem AF0KW-WORK-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0KWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page start address
DataItem AF0KWPSA smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

