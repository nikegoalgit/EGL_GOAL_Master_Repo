package af09;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XSAFS01;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpz3.ZZZCHGCT;
import pg.common.PG1REC;
import ta.common.TA1REC;
import ta.common.TA3REC;
import ta.common.TAEREC;
//*** PROGRAM=AF09 ****
// This application is a prototype for the Apparel Forecast/Buy
// system.  It will display multiple rows from a DB2 table for
// the user to view and/or modify.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit to any allowed application via FAST PATH
// or PF key at any time.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 06/28/88   userid   New application.
// *********************
Program AF09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF09W00 AF09W00; // record
  AF09W02 AF09W02; // record
  AFNREC AFNREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use AF09M.AF09M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the event code maintenance process.*/
     /* ------------------------------------------------------------*/


    set AFWREC empty; /* Initialize working storage*/
    set AF09W00 empty; /* Initialize working storage*/
    set AF09W02 empty; /* Initialize working storage*/
    set AFNREC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF09M001 initial; /* Initialize map output area*/
    AFWREC.AFWAPPL = "AF09"; /* Initialize appl ID for this appl*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "Y"; /* Indicate request for data*/
    move " " to AF09M001.AF09MATT[1] for all;
    AF09W00.AF09WSZM = sysVar.arrayIndex; /* calculate the size of the map*/

    goto AF09100; /* Converse event code maintenance pro*/


    AF09100: AF09100();
     /* ------------------------------------------------------------*/
     /* Flow to converse the event code maintenance process.*/
     /* ------------------------------------------------------------*/

    goto AF09100;


  end // end main
end // end AF09

// Driver process for 100 map
Function AF09100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF09110(); /* Obtain the data to display*/

  AF09120(); /* Format and display the map*/

  AF09130(); /* Check attention identifier*/

  AF09140(); /* Reset fields to normal intensity*/

  AF09150(); /* Verify the entered data*/

  AF09160(); /* Process valid input request*/


end // end AF09100

// Obtain the data to display
Function AF09110()
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data.*/
   /* At end of rows, close the selected set cursor.*/
   /* Indicate that the request for data was completed.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.AFWSWR != "Y") /* Data was not requested*/
    return; /* Return to previous process*/
  end

  if (AF09W00.AF09WOPT == "A") /* add option requested*/
    AFWREC.AFWIXM = 0; /* Initialize display line number*/
    set AF09W02 empty; /* Clear temporary storage record*/
    return; /* Return to previous process*/
  end

  AF09112(); /* Select set and open the cursor*/

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AFWREC.AFWSWC = "N"; /* Initialize end of file switch*/
    set AF09W02 empty; /* Clear temporary storage record*/
    while (AFWREC.AFWSWC == "N") /* Until cursor end of file*/
      AF09113(); /* Obtain data*/
      if (converseVar.validationMsgNum != 0) /* Errors were found*/
        AFWREC.AFWSWC = "Y"; /* Force end of file*/
      end
    end
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AF09115(); /* Close the selected set cursor*/
  end

  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
  end

end // end AF09110

// Select set and open cursor
Function AF09112()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5990" ("SS", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AFWREC.AFWPRCSN = "112 "; /* process number*/
      AF09M001.XXXPRCNM = AFWREC.AFWERLOC;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      AFWREC.AFWPRCSN = "112 "; /* process number*/
      AF09M001.XXXPRCNM = AFWREC.AFWERLOC;
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "112 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/
    TA1REC.TA1TBLKE = AFNREC.AFNEVNCD; /* Table key*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    AF09M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end

end // end AF09112

// Fetch next row and format
Function AF09113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5990" ("SN", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    AFWREC.AFWSWC = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      AFWREC.AFWPRCSN = "113 "; /* process name*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      AFWREC.AFWPRCSN = "113 "; /* process name*/
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AF09M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

    return; /* Return to previous process*/

  end
  AF09W02.AF09WIDX = AF09W02.AF09WIDX + 1; /* Increment line index*/
  AF09W02.AFNEVNCD[AF09WIDX] = AFNREC.AFNEVNCD;
  AF09W02.AFNEDESC[AF09WIDX] = AFNREC.AFNEDESC;
  AF09W02.ZZZCHGCT[AF09WIDX] = AFNREC.ZZZCHGCT;

end // end AF09113

// Close selected set cursor
Function AF09115()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5990" ("CS", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "115 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/

    try
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* Error diag. routine*/

    AF09M001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    return; /* Return to previous process*/
  end

end // end AF09115

// Format and display the map
Function AF09120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error message to display*/
    set AF09M001 alarm; /* Indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* No error message to display*/
   || AFWREC.AFWFIRST == " ")           /* or first time through*/
    if (AFWREC.AFWFIRST == " ") /* First time through*/
      if (COMMAREA.CAITEM > " ") /* Application data exists*/
        AF09M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
        set AF09M001.CAITEM modified; /* Set MDT on*/
        COMMAREA.CAITEM = " "; /* Clear application data*/
      end
    else
      set AF09M001 initial; /* Clear map output area*/
    end
    AFWREC.AFWFIRST = "N"; /* turn 'first time through' OFF*/
    AF09M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (AF09W00.AF09WOPT != "A")
        AF09121(); /* Format the data on the page*/
        AF09M001.AF09MPFT = "13:ADD";
      else
        set AF09M001.AF09MDL1 skip, invisible; /* hide title*/
        set AF09M001.AF09MDL2 skip, invisible; /* hide title*/
        AFWREC.AFWIXM = 1; /* Initialize line index*/
        while (AFWREC.AFWIXM <= AF09W00.AF09WSZM) /* Until end of lines*/
          set AF09M001.AF09MATT[AFWIXM] skip, invisible;
          set AF09M001.AFNEVNCD[AFWIXM] normal;
          set AF09M001.AFNEDESC[AFWIXM] normal;
          AF09124(); /* clear fields*/
          AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
        end
        set AF09M001.AFNEVNCD[1] cursor, normal;
        AF09M001.AF09MPFT = "13:MAINT.";
      end
    end
    if (converseVar.validationMsgNum == 0) /* No error message to display*/
      if (AFWREC.AFWNMO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(AFWREC.AFWNMO);
      end /* Information message number*/
    end
  end

  AFWREC.AFWIXM = 1; /* initialize line index*/
  if (AF09W00.AF09WOPT != "A")
    while (AFWREC.AFWIXM <= AF09W00.AF09WSZM) /* until end of lines*/
      if (AF09M001.AFNEVNCD[AFWIXM] == 0)
        AF09125();
      end
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* increment line index*/
    end
  end

  AFWREC.AFWNMO = 0; /* Reset information message number*/
  AF09M001.XXXPRCNM = AFWREC.AFWERLOC;

  converse AF09M001 ;

  AFWREC.AFWPRCSN = "0000";

end // end AF09120

// Format the selected data
Function AF09121()

  if (AF09W00.AF09WOPT == "A") /* option not equal to add*/
    return; /* Return to previous process*/
  end

  AFWREC.AFWIXM = 1; /* Initialize line index*/
  AFWREC.AFWIDX1 = 1; /* Initialize line index*/

  while (AFWREC.AFWIXM <= AF09W02.AF09WIDX) /* Until end of lines*/
    set AF09M001.AF09MATT[AFWIXM] normal; /* Display select flag*/
    set AF09M001.AFNEVNCD[AFWIXM] skip; /* Display select flag*/
    set AF09M001.AFNEDESC[AFWIXM] normal; /* Display select flag*/
    if (AF09W02.AFNEVNCD[AFWIXM] == "08")
      set AF09M001.AFNEDESC[AFWIXM] skip;
      set AF09M001.AF09MATT[AFWIXM] skip;
    end
    AF09M001.AF09MATT[AFWIXM] = " ";
    AF09M001.AFNEDESC[AFWIXM] = AF09W02.AFNEDESC[AFWIXM];
    AF09M001.AFNEVNCD[AFWIXM] = AF09W02.AFNEVNCD[AFWIXM];
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Increment line index*/
  end

  set AF09M001.AF09MATT[1] cursor, normal; /* Display select flag*/

  while (AFWREC.AFWIXM <= AF09W00.AF09WSZM) /* Until end of lines*/
    AF09124(); /* clear fields*/
    AF09125(); /* protect fields*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
  end

end // end AF09121

// clear unused fields
Function AF09124()
  AF09M001.AF09MATT[AFWIXM] = " ";
  AF09M001.AFNEVNCD[AFWIXM] = "  ";
  AF09M001.AFNEDESC[AFWIXM] = "          ";
end // end AF09124

// protect unused fields
Function AF09125()
  set AF09M001.AF09MATT[AFWIXM] skip, invisible; /* Display select flag*/
  set AF09M001.AFNEVNCD[AFWIXM] skip, invisible; /* Display select flag*/
  set AF09M001.AFNEDESC[AFWIXM] skip, invisible; /* Display select flag*/
end // end AF09125

// Check attention identifier
Function AF09130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    set AF09M001 initial; /* Clear the map fields*/
    exit stack; /* Exit to redisplay map*/
  end

  if (AF09M001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF09M001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF09M001.CAITEM; /* Application data*/
      XSAFS01(); /* Exit to another application*/
    else
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      AFWREC.AFWPRCSN = "130 "; /* process name*/
    end

    set AF09M001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    XSAFS01(); /* Exit to another application*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "AF04"; /* forecast performance sub menu*/
    XSAFS01(); /* Exit to another application*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13) /* and PF13 was not pressed*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    exit stack; /* Exit to redisplay map*/
  end

end // end AF09130

// Reset highlighted fields
Function AF09140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  if (AF09W00.AF09WOPT == "A")
    set AF09M001.AF09MDL1 skip, invisible; /* Display select flag*/
    set AF09M001.AF09MDL2 skip, invisible; /* Display select flag*/
  end

  AFWREC.AFWIXM = 1; /* Initialize line index*/

  while (AFWREC.AFWIXM <= AF09W00.AF09WSZM) /* Until end of lines*/
    if (AF09W00.AF09WOPT == "A")
      set AF09M001.AF09MATT[AFWIXM] skip, invisible; /* set default attrs*/
      set AF09M001.AFNEVNCD[AFWIXM] normal;
      set AF09M001.AFNEDESC[AFWIXM] normal;
    else
      if (AF09M001.AFNEVNCD[AFWIXM] != " ")
        set AF09M001.AF09MATT[AFWIXM] normal; /* set default attrs*/
        set AF09M001.AFNEVNCD[AFWIXM] skip;
        set AF09M001.AFNEDESC[AFWIXM] normal;
      else
        AF09124(); /* clear fields*/
        AF09125(); /* protect fields*/
      end
    end
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
  end

  set AF09M001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF09M001.CAITEM initialAttributes; /* Commarea application data*/

end // end AF09140

// Verify the entered data
Function AF09150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWIXM = 1; /* initialize line index*/
  while (AFWREC.AFWIXM <= AF09W00.AF09WSZM) /* until end of lines*/
    AF09W02.AF09WATT[AFWIXM] = " ";
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
  end

  if (AF09M001.CAITEM > " ") /* Application data was entered*/
    set AF09M001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/
    AFWREC.AFWPRCSN = "150 "; /* Process number*/
  end

  AF09152(); /* Verify selection criteria*/

  if (AFWREC.AFWSWR == "Y") /* If new selection criteria entered*/
    exit stack; /* Go back to start of appl*/
  else /* Else(selection criteria not changed)*/
    AF09W00.AF09WNOU = 0; /* count of screen changes*/
    if (AF09W00.AF09WOPT == "A") /* if add option selected*/
      AFWREC.AFWIXM = AF09W00.AF09WSZM; /* Initialize line index*/
      while (AFWREC.AFWIXM > 0) /* Until end of lines*/
        AF09153(); /* Verify any add data*/
        AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* Increment line index*/
      end
    else
      AFWREC.AFWIXM = AF09W02.AF09WIDX; /* Initialize line index*/
      while (AFWREC.AFWIXM > 0) /* Until end of lines*/
        AF09154(); /* Verify any change  data*/
        AFWREC.AFWIXM = AFWREC.AFWIXM - 1; /* Increment line index*/
      end
    end
    if (AF09W00.AF09WNOU <= 0) /* no changes made*/
      exit stack; /* Exit to redisplay map*/
    end
  end

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to redisplay map*/
  end

end // end AF09150

// Edit selection criteria
Function AF09152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* ===== working storage record, if any has changed,     =====*/
   /* ===== validate all selection criteria fields and turn  =====*/
   /* ===== on switch which allows later processing to purge =====*/
   /* ===== temporary storage and re-load it with newly      =====*/
   /* ===== selected data.                                   =====*/
   /* ============================================================*/

  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/

  if (converseVar.eventKey is pf13)
    if (AF09W00.AF09WOPT == "A")
      AF09W00.AF09WOPT = " ";
    else
      AF09W00.AF09WOPT = "A";
    end
    AFWREC.AFWSWR = "Y"; /* initialize switch to 'OFF'*/
    return; /* return to previous process*/
  end

end // end AF09152

// Verify any add data
Function AF09153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (AF09M001.AFNEVNCD[AFWIXM] == "00"
   && AF09M001.AFNEDESC[AFWIXM] == "          ")
    return;
  end
  AF09W00.AF09WNOU = AF09W00.AF09WNOU + 1;
   /* -------------------------------------------*/
   /* -- validate the event code 1 to 24*/
   /* -------------------------------------------*/
  if (AF09M001.AFNEVNCD[AFWIXM] < 25
   && AF09M001.AFNEVNCD[AFWIXM] > 0)
  else
    set AF09M001.AFNEVNCD[AFWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(98); /* Indicate error msg*/
    AFWREC.AFWPRCSN = "153 "; /* process number*/
  end
   /* -------------------------------------------*/
   /* -- validate existing event code*/
   /* -------------------------------------------*/
  if (converseVar.validationMsgNum == 0) /* Indicate error msg*/
    AF09155(); /* Validate event code does not exist*/
  end

end // end AF09153

// verify any changed data
Function AF09154()

  AFWREC.AFWIDX1 = AFWREC.AFWIXM;
  if (AF09M001.AF09MATT[AFWIXM] == "D")
    if (AF09M001.AFNEVNCD[AFWIDX1] == "08")
      converseLib.validationFailed(097);
      AFWREC.AFWPRCSN = "154";
      set AF09M001.AF09MATT[AFWIDX1] cursor, bold;
      return; /* return to previous process*/
    else
      AF09W02.AF09WATT[AFWIDX1] = "D";
      AF09W00.AF09WNOU = AF09WNOU + 1;
      return; /* return to previous process*/
    end
  end
  if (AF09M001.AF09MATT[AFWIXM] != " ")
    set AF09M001.AF09MATT[AFWIXM] cursor, bold; /* Highlight field*/
    converseLib.validationFailed(19); /* Indicate error msg*/
    AFWREC.AFWPRCSN = "154 "; /* Process number*/
    return; /* return to previous process*/
  end

  if (AF09W02.AFNEDESC[AFWIDX1] == AF09M001.AFNEDESC[AFWIXM])
    return; /* return to previous process*/
  end

  if (AF09M001.AFNEVNCD[AFWIDX1] == "08")
    AFWREC.AFWNMO = 097;
    AFWREC.AFWPRCSN = "154";
    return; /* return to previous process*/
  end

  AF09W00.AF09WNOU = AF09WNOU + 1;
  AFWREC.AFWPRCSN = "154 "; /* Process number*/
  AF09W02.AF09WATT[AFWIDX1] = "C";

end // end AF09154

// find duplicate event code
Function AF09155()

  set AFNREC empty;

  AFNREC.AFNEVNCD = AF09M001.AFNEVNCD[AFWIXM];

   /* ------------------------------------------------------------*/
   /* find row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5990" ("S ", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      converseLib.validationFailed(95); /* duplicate exists*/
      AFWREC.AFWPRCSN = "155 ";
      set AF09M001.AFNEVNCD[AFWIXM] cursor, bold;
      return; /* return*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not on database*/
        return; /* return*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    AFWREC.AFWPRCSN = "155 "; /* process name*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    AFWREC.AFWPRCSN = "155 "; /* process name*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "155 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "EDIT EVENT CODE FOR DUP ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end AF09155

// Process valid input request
Function AF09160()
  if (converseVar.eventKey is pf13)
    return; /* Return to previous process*/
  end

  if (converseVar.validationMsgNum != 0)
    return;
  end

  if (AF09W00.AF09WOPT == "A") /* if add option selected*/
    AFWREC.AFWIXM = 1; /* Initialize line index*/
    while (AFWREC.AFWIXM <= AF09W00.AF09WSZM) /* Until end of lines*/
      if (AF09M001.AFNEVNCD[AFWIXM] != "00")
        AF09161(); /* Update add data*/
      end
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    end
    AF09W00.AF09WOPT = " ";
    AFWREC.AFWSWR = "Y";
  else
    AFWREC.AFWIXM = 1; /* Initialize line index*/
    while (AFWREC.AFWIXM <= AF09W02.AF09WIDX) /* Until end of lines*/
      if (AF09W02.AF09WATT[AFWIXM] == "D")
        AF09162(); /* Delete  data*/
        AFWREC.AFWNMO = 014;
        AFWREC.AFWPRCSN = "160"; /* process number*/
      else
        if (AF09W02.AF09WATT[AFWIXM] == "C")
          AF09163(); /* Update  change  data*/
          AFWREC.AFWPRCSN = "160"; /* process number*/
          AFWREC.AFWNMO = 013;
        end
      end
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
    end
    AFWREC.AFWSWR = "Y";
  end

end // end AF09160

// Add data to database
Function AF09161()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/

  set AFNREC empty;

  XX0XS01();
  AFNREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AFNREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AFNREC.AFNEVNCD = AF09M001.AFNEVNCD[AFWIXM];
  AFNREC.AFNEDESC = AF09M001.AFNEDESC[AFWIXM];

   /* ------------------------------------------------------------*/
   /* Add new row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5990" ("A ", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      AFWREC.AFWNMO = 094;
      AFWREC.AFWPRCSN = "161 ";
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    converseLib.validationFailed(11); /* Indicate not available*/
    AFWREC.AFWPRCSN = "161 "; /* process name*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    AFWREC.AFWPRCSN = "161 "; /* process name*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "161 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end AF09161

// Delete data from database
Function AF09162()
  set AFNREC empty;

  AFNREC.AFNEVNCD = AF09W02.AFNEVNCD[AFWIXM];
  AFNREC.ZZZCHGCT = AF09W02.ZZZCHGCT[AFWIXM];

   /* ------------------------------------------------------------*/
   /* delete row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5990" ("D ", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    AFWREC.AFWPRCSN = "162 "; /* process name*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    AFWREC.AFWPRCSN = "162 "; /* process name*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "162 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "DELETE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end AF09162

// Change data on database
Function AF09163()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/

  set AFNREC empty;

  XX0XS01();
  AFNREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AFNREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AFNREC.ZZZCHGCT = AF09W02.ZZZCHGCT[AFWIXM];
  AFNREC.AFNEVNCD = AF09M001.AFNEVNCD[AFWIXM];
  AFNREC.AFNEDESC = AF09M001.AFNEDESC[AFWIXM];

   /* ------------------------------------------------------------*/
   /* update row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5990" ("U ", SQLCA, AFNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    AFWREC.AFWPRCSN = "163 "; /* process name*/
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    AFWREC.AFWPRCSN = "163 "; /* process name*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "163 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VEVENT01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end AF09163

//*** RECORD=AF09W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AF09W00 type basicRecord
  10 AF09WACT AF09WACT ; 
  10 AF09WBEG AF09WBEG ; 
  10 AF09WMAX AF09WMAX ; 
  10 AF09WMNO AF09WMNO ; 
  10 AF09WNOU AF09WNOU ; 
  10 AF09WOPT AF09WOPT ; 
  10 AF09WNXT AF09WNXT ; 
  10 AF09WSZA AF09WSZA ; 
  10 AF09WSZM AF09WSZM ; 
  10 AF09WDT1 AF09WDT1 ; 
    15 AF09WCC1 AF09WCC1 ; 
    15 AF09WYY1 AF09WYY1 ; 
    15 AF09WMM1 AF09WMM1 ; 
  10 AF09WDT2 AF09WDT2 ; 
    15 AF09WCC2 AF09WCC2 ; 
    15 AF09WYY2 AF09WYY2 ; 
  10 AF09WDT3 AF09WDT3 ; 
    15 AF09WYY3 AF09WYY3 ; 
    15 AF09WMM3 AF09WMM3 ; 
  10 AF09WPN AF09WPN ; 
  10 AF09WSA AF09WSA ; 
    15 AF09WHSS AF09WHSS ; 
    15 AF09WYR AF09WYR ; 
  10 AF09WXSY AF09WXSY ; 
  10 AF09W1ST AF09W1ST ; 
  10 AF09WSMG AF09WSMG ; 
    15 AF09WAS1 AF09WAS1 ; 
    15 AF09WSCH AF09WSCH ; 
    15 AF09WAS2 AF09WAS2 ; 
end // end AF09W00

//*** RECORD=AF09W02 ****
// Temporary storage record for AF09 - Event Code/Description
// ***********************
Record AF09W02 type basicRecord
  10 AF09WIDX AF09WIDX ; 
  10 * char(15) [24] ; 
    15 AFNEVNCD AFNEVNCD ; 
    15 AFNEDESC AFNEDESC ; 
    15 AF09WATT AF09WATT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end AF09W02

// first time thru indicator
DataItem AF09W1ST char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// number of active snapshots
DataItem AF09WACT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// asterisks
DataItem AF09WAS1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// asterisks
DataItem AF09WAS2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Action to be taken
DataItem AF09WATT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Beginning member in array
DataItem AF09WBEG num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// working century
DataItem AF09WCC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working century
DataItem AF09WCC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date - buy stat date
DataItem AF09WDT1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date  - sesn yr range
DataItem AF09WDT2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working date - buy month
DataItem AF09WDT3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season cd
DataItem AF09WHSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem AF09WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of snapshots loaded
DataItem AF09WMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// working month
DataItem AF09WMM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working month
DataItem AF09WMM3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// message number
DataItem AF09WMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no changes made
DataItem AF09WNOU num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next member in array
DataItem AF09WNXT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// option requested
DataItem AF09WOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF09WPN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF09WSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pg1sc4cd
DataItem AF09WSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// scheduler error msg
DataItem AF09WSMG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// affrec array size
DataItem AF09WSZA num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AF09WSZM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// xsnyr work area
DataItem AF09WXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF09WYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AF09WYY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AF09WYY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year
DataItem AF09WYY3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

