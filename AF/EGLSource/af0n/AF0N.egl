package af0n;

import af.common.*;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XSAFS01;
import corpcom3.XSAFSSE;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpx1.XSETBL;
import corpy2.YSNTBL;
import corpz3.ZZZCHGCT;
import sy.common.SY1REC;
import sy.common.SY2REC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0N ****
// This application is designed to enter Supply/Demand Snapshot
// rows to the supply/demand Snapshot database.  The user will
// be able to inquire on existing rows, delete (inactivate)
// existing rows, change existing rows, and add new rows to the
// database.
// 
// This application will be maintaining DACAST.VDMANX01 table.
// 
// Supply/Demand Snapshots Screen:
// 1)  The user will enter this screen initially with cursor
// positioned in the season field.  The option key field is
// required to required to request data.  If option equals 'A',
// then season and  year arre  required fields.  If option
// equals 'D' then the user may specify certain selection
// criteria and delete (set inactive) rows.  If no option is
// entered,  then 'I' is assumed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          06/20/89  FWALKE  New application.
//          04/30/93  jricha  changed screen title.
//          04/04/94  mhuynh  allowed 50 sets of entries,
//                            instead of 35.
//          02-15-95  kj      xsn->ysn
// *********************
Program AF0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0NW00 AF0NW00; // record
  AF0NW01 AF0NW01; // record
  AFFREC AFFREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use AF0NM.AF0NM001, // form
  AF0NM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set AF0NM001 initial; /* M001 input/output*/
    set AF0NW00 empty; /* Working storage*/
    set AF0NW01 empty; /* Working storage*/
    set AFWREC empty; /* Common working storage values*/
    set AFFREC empty; /* Common record layout*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    AFWREC.AFWAPPL = "AF0N"; /* Initialize application id*/
    AFWREC.AFWPRCSN = "0000"; /* Initialize process number to zero*/
    AFWREC.AFWMAP = "1"; /* Map to be displayed switch*/
    AFWREC.AFWSWR = "N"; /* Request for data switch*/
    move " " to AFFREC.XSECD[1] for all;
    AF0NW00.AF0NWSZA = sysVar.arrayIndex; /* determine AFFREC array size*/
    move " " to AF0NM001.AF0NMSEL[1] for all;
    AF0NW00.AF0NWSZM = sysVar.arrayIndex; /* determine screen array size*/


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AF0N001; /* Converse the main process*/

    AF0N001: AF0N001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto AF0N001; /* Converse the main process*/


  end // end main
end // end AF0N

// Main process to display a map
Function AF0N001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Master Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0N100(); /* Display map 1*/


end // end AF0N001

// List the rows in the table
Function AF0N100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  AF0N110(); /* Obtain the data to display*/

  AF0N120(); /* Format and display the map*/

  AF0N130(); /* Check attention identifier*/

  AF0N140(); /* Reset fields to normal intensity*/

  AF0N150(); /* Verify the entered data*/

  AF0N160(); /* Process valid input request*/


end // end AF0N100

// Obtain the data to display
Function AF0N110()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.AFWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    return; /* Return to previous process*/
  end

  AFWREC.TA5TSQIX = 0;
   /* ------------------------------------------------------------*/
   /* obtain the row from database ( this db only has one row.*/
   /* ------------------------------------------------------------*/

  AF0N112(); /* obtain row*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (AFWREC.TA5TSQIX <= 0) /* No data to display*/

    AFWREC.AFWPRCSN = "110"; /* Module identification*/
    AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
    set AF0NM001.XSECD cursor, bold; /* Highlight*/
    set AF0NM001.XSNYR bold; /* Highlight*/
    converseLib.validationFailed(15); /* Indicate no data to display*/

  else
    AF0N113(); /* process vdman row*/
  end

   /* ------------------------------------------------------------*/
   /* If no error was found, indicate request for data complete.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error was found*/
    AFWREC.AFWSWR = "N"; /* Request for data switch*/
  end


end // end AF0N110

// obtain vdmanx01 row
Function AF0N112()

   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  AFWREC.AFWSWC = "N"; /* End of cursor switch*/

  set AFFREC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4190" ("S ", SQLCA, AFFREC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If successful, save the data in display storage.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/
    AFWREC.TA5TSQIX = AFWREC.TA5TSQIX + 1;

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  AFWREC.AFWPRCSN = "112"; /* Module identification*/
  AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = AFWREC.AFWPRCSN; /* Program number*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANX01"; /* Table view name*/
  TA1REC.TA1TBLKE = SY2REC.SY2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end AF0N112

// process vdmanx01 row
Function AF0N113()
  AF0NW00.AF0NWACT = 0;
  AF0NW00.AF0NWMAX = 0;
  AFWREC.AFWIX2 = 1;
  while (AFWREC.AFWIX2 <= AF0NW00.AF0NWSZA /* do until end of array*/
   && AFFREC.AFFASODT[AFWIX2] != 0) /* do until no more loaded*/
    AF0NW00.AF0NWMAX = AF0NW00.AF0NWMAX + 1;
    if (AFFREC.AFFASOST[AFWIX2] == "A")
      AF0NW00.AF0NWACT = AF0NW00.AF0NWACT + 1;
    end
    AFWREC.AFWIX2 = AFWREC.AFWIX2 + 1;
  end
  if (AF0NW00.AF0NWMAX > 0
   && AF0NW00.AF0NWBEG <= 0)
    AF0NW00.AF0NWBEG = 1; /* set start key to beginning;*/
  end
  return; /* Exit to display map*/


end // end AF0N113

// Format and converse the map
Function AF0N120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    set AF0NM001 alarm; /* indicate sound alarm*/
  end

  if (converseVar.validationMsgNum == 0 /* Error was found*/
   || AF0NW00.AF0NW1ST == " ")          /* first time through*/


    if (AF0NW00.AF0NW1ST == " ")
      AF0NW00.AF0NW1ST = "Y";
      AF0NM001.XSECD = XP1REC.XSECD;
      AF0NM001.XSNYR = XP1REC.XSNYR;
      if (COMMAREA.CAITEM > " ") /* Application data exists*/
        AF0NM001.CATOAP = " "; /* TO application*/
        AF0NM001.CAITEM = " "; /* Application data*/
        set AF0NM001.CAITEM modified; /* set mdt on*/
      end
    end
    AF0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    if (converseVar.validationMsgNum == 0) /* Error was found*/

      AF0N121(); /* Format the data on the map*/

    end
  end
  if (converseVar.validationMsgNum == 0) /* warning message moved*/
    if (AF0NW00.AF0NWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AF0NW00.AF0NWMNO);
    end
  end
  AF0NW00.AF0NWMNO = 0;
   /* ------------------------------------------------------------*/
   /* If map is not formatted, format the data to be displayed.*/
   /* ------------------------------------------------------------*/

  if (AF0NM001.XXXCURDT == 0) /* Map is not formatted*/
    AF0NM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/



  converse AF0NM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  AF0NW00.AF0NWMNO = 0; /* Message number*/
  AFWREC.AFWPRCSN = "    "; /* Module identification*/
  AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
  COMMAREA.CATOAP = AF0NM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = AF0NM001.CAITEM; /* Application data*/


end // end AF0N120

// Format the display data
Function AF0N121()
   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  if (AF0NM001.AF0NMOPT != "D")
    set AF0NM001.AF0NMDEL skip, invisible;
  else
    set AF0NM001.AF0NMDEL initialAttributes;
  end
  if (AF0NW00.AF0NWMAX == 0
   && AF0NM001.AF0NMOPT != "A")
    AFWREC.AFWIXM = 1; /* Initialize line index*/
    while (AFWREC.AFWIXM <= AF0NW00.AF0NWSZM) /* Until screen is full*/
      AF0NS03(); /* clear unused fields*/
      AF0NS04(); /* protect unused fields*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    end

    return; /* Return to previous process*/
  end
  AFWREC.AFWIDX2 = AF0NW00.AF0NWBEG;
  AFWREC.AFWIXM = 0; /* Initialize line index*/

  if (AF0NM001.AF0NMOPT == "A")
    AFWREC.AFWIXM = 1; /* Initialize line index*/
    AF0NM001.AF0NMSCD[1] = AF0NM001.XSECD;
    AF0NM001.AF0NMSYR[1] = AF0NM001.XSNYR;
    AF0NM001.AF0NMCMT[1] = " ";
    set AF0NM001.AF0NMCMT[1] initialAttributes;
    AF0NM001.AF0NMSTA[1] = "N";
    AF0NW01.AF0NWDTX = VGVar.currentShortGregorianDate;
    AF0NW01.AF0NWDYY = AF0NW01.AF0NWDTY;
    AF0NW01.AF0NWDMM = AF0NW01.AF0NWDTM;
    AF0NW01.AF0NWDDD = AF0NW01.AF0NWDTD;
    AF0NM001.AF0NMAOD[1] = AF0NW01.AF0NWDAT;
    AF0NW01.AF0NWIX2[1] = 0;
  else
    while (AFWREC.AFWIXM < AF0NW00.AF0NWSZM   /* Until screen is full*/
     && AFWREC.AFWIDX2 <= AF0NW00.AF0NWMAX /* Until screen is full*/
     && AFWREC.AFWIDX2 != 0)
      if (AF0NM001.XSECD <= " ")
        AF0NW01.AF0NWSCL = "  ";
        AF0NW01.AF0NWSCH = "99";
      else
        AF0NW01.AF0NWSCL = AF0NM001.XSECD;
        AF0NW01.AF0NWSCH = AF0NM001.XSECD;
      end
      if (AF0NM001.XSNYR <= 00)
        AF0NW01.AF0NWRYL = +0;
        AF0NW01.AF0NWRYH = +9999;
      else
        AF0NW01.AF0NWRYL = AF0NM001.XSNYR;
        AF0NW01.AF0NWRYH = AF0NM001.XSNYR;
        AF0NW01.AF0NWRYH = AF0NW01.AF0NWRYH + 1900;
        AF0NW01.AF0NWRYL = AF0NW01.AF0NWRYL + 1900;
      end

      if (AFFREC.XSECD[AFWIDX2] >= AF0NW01.AF0NWSCL
       && AFFREC.XSECD[AFWIDX2] <= AF0NW01.AF0NWSCH
       && AFFREC.XSNYR[AFWIDX2] >= AF0NW01.AF0NWRYL
       && AFFREC.XSNYR[AFWIDX2] <= AF0NW01.AF0NWRYH)
        AF0NS05(); /* Load screen with array data*/
      end
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1;
    end
  end
  AF0NW00.AF0NWNXT = AFWREC.AFWIDX2;

  if (AFWREC.AFWIXM == 0) /* No data to display*/
    AFWREC.AFWPRCSN = "110"; /* Module identification*/
    AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
    set AF0NM001.XSECD cursor, bold; /* Highlight*/
    set AF0NM001.XSNYR bold; /* Highlight*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
  end

  while (AFWREC.AFWIXM < AF0NW00.AF0NWSZM) /* Until screen is full*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    AF0NS03(); /* clear unused fields*/
    AF0NS04(); /* protect unused fields*/
  end

end // end AF0N121

// Check attention identifier
Function AF0N130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set AF0NM001 initial; /* Clear the map fields*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    if (AFWREC.AFWSWR == "Y") /* Data was requested*/

      AFWREC.AFWSWR = "N"; /* Request for data switch*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (AF0NM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      XSAFS01(); /* Exit to another application*/

    else

      converseLib.validationFailed(5); /* Indicate PF key not valid*/

    end

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    AFWREC.AFWPRCSN = "130"; /* Module identification*/
    AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
    set AF0NM001.CATOAP cursor, bold; /* Highlight*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0NM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "AF0A"; /* TO application*/
    end

    XSAFS01(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* If transfer failed, display returned error message.*/
    /* ------------------------------------------------------------*/

    AFWREC.AFWPRCSN = "130"; /* Module identification*/
    AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    AFWREC.AFWPRCSN = "130"; /* Module identification*/
    AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before display*/

    end

    exit stack; /* Exit to display map*/

  end


end // end AF0N130

// Reset highlighted fields
Function AF0N140()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set AF0NM001.XSECD initialAttributes; /* season code*/
  set AF0NM001.XSNYR initialAttributes; /* season yr*/
  set AF0NM001.AF0NMOPT initialAttributes; /* selection option*/
  if (AF0NM001.AF0NMOPT != "D")
    set AF0NM001.AF0NMDEL skip, invisible;
  else
    set AF0NM001.AF0NMDEL initialAttributes;
  end
  AFWREC.AFWIXM = 1;

  while (AFWREC.AFWIXM <= AF0NW00.AF0NWSZM) /* Until screen is full*/
    if (AF0NM001.AF0NMSCD[AFWIXM] > " ")
      set AF0NM001.AF0NMSCD[AFWIXM] skip;
      set AF0NM001.AF0NMSYR[AFWIXM] skip;
      set AF0NM001.AF0NMSTA[AFWIXM] skip;
      set AF0NM001.AF0NMAOD[AFWIXM] skip;
      set AF0NM001.AF0NMCMT[AFWIXM] initialAttributes;
      set AF0NM001.AF0NMSEL[AFWIXM] skip, invisible;
      if (AF0NM001.AF0NMOPT == "D")
        set AF0NM001.AF0NMSEL[AFWIXM] initialAttributes;
        set AF0NM001.AF0NMCMT[AFWIXM] skip;
      end
      if (AF0NM001.AF0NMOPT == "I" /* inquiry only attib.*/
       && COMMAREA.CACHGFL == "N")
        set AF0NM001.AF0NMCMT[AFWIXM] skip;
      end
    else
      AF0NS04(); /* protect unused fields*/
    end
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
  end

  set AF0NM001.CATOAP initialAttributes; /* TO application*/
  set AF0NM001.CAITEM initialAttributes; /* Application data*/

   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/

  if (AF0NM001.XSECD == "?")
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end

  else

    AF0NW00.AF0NWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/

  end

   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season cd*/
   /* *============================**/

  if (AF0NM001.XSECD == "?") /* Pop-up window requested*/

    XP1REC.XSECD = AF0NM001.XSECD; /* Set XP1REC field*/

    XSAFSSE(); /* Pop-up window func requested*/

    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0NM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end

  end


   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/


  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0NW00.AF0NWPND = "Y"; /* Activate pop-up window ind*/

  exit stack; /* Exit to redisplay map*/



end // end AF0N140

// Verify the entered data
Function AF0N150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (AF0NM001.CAITEM > " ") /* Application data was entered*/

    AFWREC.AFWPRCSN = "150"; /* Module identification*/
    AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
    set AF0NM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    AF0N151(); /* Verify scroll request*/

  else
    AF0N152(); /* Verify any changed data*/
    if (AFWREC.AFWSWR == "Y") /* No Errors continue*/
      exit stack; /* go back to start of appl.*/
    end
    if (AF0NW00.AF0NWMAX == 0
     && AF0NM001.AF0NMOPT != "A")
      exit stack; /* go back to start of appl.*/
    end
    if (AF0NM001.AF0NMOPT == "A") /* only check for add options*/
      AF0N153(); /* Validate data*/
    else
      if (AF0NM001.AF0NMOPT == "D") /* only check for delete options*/
        AF0N154(); /* Validate data*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Errors were found*/
   || AF0NW00.AF0NWMNO != 0)            /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

end // end AF0N150

// Verify scroll request
Function AF0N151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    AFWREC.AFWIDX2 = AF0NW00.AF0NWBEG + 0;
    AFWREC.AFWIXM = AF0NW00.AF0NWSZM;
    while (AFWREC.AFWIDX2 > 0
     && AFWREC.AFWIXM > 0)
      AFWREC.AFWIXM = AFWREC.AFWIXM - 1;
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 - 1;
    end
    if (AFWREC.AFWIDX2 <= 0)
      AFWREC.AFWPRCSN = "151 "; /* Process number*/
      AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
      converseLib.validationFailed(2); /* No previous page to display*/
    end

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AF0NW00.AF0NWNXT > AF0NW00.AF0NWMAX) /* and no more pages*/

    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/

  end

   /* ----------------------------------------------------------*/
   /* NOTE: input data will be ignored if pf7 or 8 was pressed*/
   /* ----------------------------------------------------------*/

end // end AF0N151

// Verify any changed data
Function AF0N152()
   /* ============================================================*/
   /* ===== E D I T    S E L E C T I O N    C R I T E R I A  =====*/
   /* =====                                                  =====*/
   /* ===== Compare selection criteria on screen to data on  =====*/
   /* =====  working storage  record. If any has changed,    =====*/
   /* =====  validate all selection criteria fields.         =====*/
   /* ===== Validate report request selection if no criteria =====*/
   /* =====  fields changed and no errors found.             =====*/
   /* ============================================================*/


  AFWREC.AFWSWR = "N"; /* Reset data select ind*/
  XP1REC.XP1MNO = 0; /* Reset error ind*/

          /* (Check Selection Criteria)*/

  if (AF0NM001.XSNYR != XP1REC.XSNYR) /* NE Saved Season yr*/
    XP1REC.XSNYR = AF0NM001.XSNYR;
    AFWREC.AFWSWR = "Y";
  else
    if (AF0NM001.AF0NMOPT == "A") /* option*/
      if (AF0NM001.XSNYR == " " /* NE Saved Season yr*/
       || AF0NM001.XSNYR == 0)  /* or Cleared out*/
        XP1REC.XSNYR = AF0NM001.XSNYR;
        AFWREC.AFWSWR = "Y";
      end
    end
  end

  if (AF0NM001.XSECD != XP1REC.XSECD) /* NE Saved Season cd*/
    XP1REC.XSECD = AF0NM001.XSECD;
    AFWREC.AFWSWR = "Y";
  else
    if (AF0NM001.AF0NMOPT == "A") /* option*/
      if (AF0NM001.XSECD == " ") /* NE Saved Season cd*/
        XP1REC.XSECD = AF0NM001.XSECD;
        AFWREC.AFWSWR = "Y";
      end
    end
  end

  if (AF0NM001.AF0NMOPT != AF0NW01.AF0NWOPT /* option*/
   || AF0NM001.AF0NMOPT == " ")             /* no option entered*/

    if (AF0NM001.AF0NMOPT == " ") /* default option entered*/
      AF0NW01.AF0NWOPT = "I";
      AF0NM001.AF0NMOPT = "I";
    else
      AF0NW01.AF0NWOPT = AF0NM001.AF0NMOPT;
    end
    AFWREC.AFWSWR = "Y";
  end


              /* (Validate Selection Criteria)*/

  if (AFWREC.AFWSWR == "Y") /* If any selection criteria changed*/

    AF0NW00.AF0NW1ST = "Y";
    AF0NW00.AF0NWBEG = 0;
    AF0NS02(); /* Validate Season yr*/
    AF0NS01(); /* Validate Season cd*/
    AF0NS00(); /* Validate option*/
    AFWREC.AFWIXM = 1; /* Initialize line index*/
    while (AFWREC.AFWIXM <= AF0NW00.AF0NWSZM) /* Until screen is full*/
      AF0NS03(); /* clear unused fields*/
      AF0NS04(); /* protect unused fields*/
      AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    end

  end

              /* (Set-up Exit Requirements)*/

  if (XP1REC.XP1MNO == 0
   && converseVar.validationMsgNum == 0)
    if (AF0NM001.AF0NMOPT == "A") /* option*/
      set AF0NM001.AF0NMCMT[1] cursor;
    else
      if (AF0NM001.AF0NMOPT == "D") /* option*/
        set AF0NM001.AF0NMSEL[1] cursor;
      else
        set AF0NM001.AF0NMOPT cursor;
      end
    end
  end
  if (converseVar.validationMsgNum == 0)
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end
  end
  if (AF0NW00.AF0NWMAX <= 0
   && AF0NM001.AF0NMOPT != "A")
    AFWREC.AFWSWR = "Y";
  end
  converseLib.clearScreen();

end // end AF0N152

// Validate data for add option
Function AF0N153()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

   /* *****************************************/
   /* ** issue near the end messages*/
   /* *****************************************/
  if (AF0NW00.AF0NWMAX >= 45)
    if (AF0NW00.AF0NWMAX >= 50)
      AF0NW00.AF0NW1ST = "Y";
      converseLib.validationFailed(57);
      return; /* Return to previous process*/
    end
    if (AF0NW00.AF0NWACT >= 48
     && AF0NW00.AF0NWMAX <= 49)
      AF0NW00.AF0NW1ST = "Y";
      converseLib.validationFailed(57);
      return; /* Return to previous process*/
    end
    if (AF0NW00.AF0NW1ST == "Y")
      if (AF0NW00.AF0NWACT <= 47)
        AF0NW00.AF0NW1ST = "N";
        converseLib.validationFailed(56);
        return; /* Return to previous process*/
      end
    end

  end

  XX0XS01(); /* Get current date from EZEDTE*/

   /* *****************************************/
   /* ** validate for dups*/
   /* *****************************************/
  AFWREC.AFWIX2 = AF0NW00.AF0NWMAX;
  AFWREC.AFWYYMM = AF0NM001.XSNYR;
  AFWREC.AFWYYMM = AFWREC.AFWYYMM + 1900;
  while (AFWREC.AFWIX2 >= 1) /* max are loaded*/
    if (AF0NM001.XSECD == AFFREC.XSECD[AFWIX2]
     && AFWREC.AFWYYMM == AFFREC.XSNYR[AFWIX2]
     && XX0XW01.XX0XWDAT == AFFREC.AFFASODT[AFWIX2])
      AFWREC.AFWPRCSN = "153"; /* Module identification*/
      AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
      set AF0NM001.XSECD cursor; /* Set cursor*/
      set AF0NM001.AF0NMSCD[1] skip, bold; /* Highlight*/
      set AF0NM001.AF0NMSYR[1] skip, bold; /* Highlight*/
      set AF0NM001.AF0NMAOD[1] skip, bold; /* Highlight*/
      converseLib.validationFailed(31); /* can not add an existing row*/
      return; /* Exit to display map*/
    end
    AFWREC.AFWIX2 = AFWREC.AFWIX2 - 1;
  end

end // end AF0N153

// validate data for delete opt.
Function AF0N154()
   /* *****************************************/
   /* ** validate for invalid selection code*/
   /* *****************************************/

  AFWREC.AFWIXM = AF0NW00.AF0NWSZM; /* initialize line index*/
  while (AFWREC.AFWIXM >= 1) /* Until screen is full*/
    if (AF0NM001.AF0NMSEL[AFWIXM] != " ")
      if (AF0NM001.AF0NMSEL[AFWIXM] == "D")
        if (AF0NM001.AF0NMSTA[AFWIXM] == "I")
          AFWREC.AFWPRCSN = "154"; /* Module identification*/
          AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
          set AF0NM001.AF0NMSEL[AFWIXM] cursor, bold; /* Highlight*/
          converseLib.validationFailed(61); /* can not add an existing row*/
        end
      else
        AFWREC.AFWPRCSN = "154"; /* Module identification*/
        AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Move to map*/
        set AF0NM001.AF0NMSEL[AFWIXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(19); /* can not add an existing row*/
      end
    end
    AFWREC.AFWIXM = AFWREC.AFWIXM - 1;
  end

  return; /* Exit to display map*/
end // end AF0N154

// Process valid input request
Function AF0N160()
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* Update any changed data.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    AF0NW00.AF0NWBEG = AF0NW00.AF0NWNXT + 0;

    return; /* Return to previous process*/

  end
  if (converseVar.eventKey is pf7) /* Scroll backward requested*/

    AFWREC.AFWIDX2 = AF0NW00.AF0NWBEG - 1;
    AFWREC.AFWIXM = AF0NW00.AF0NWSZM;
    while (AFWREC.AFWIDX2 > 0
     && AFWREC.AFWIXM > 0)
      AF0NW00.AF0NWBEG = AFWREC.AFWIDX2 + 0; /* calc next page line*/
      AFWREC.AFWIXM = AFWREC.AFWIXM - 1;
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 - 1;
    end
    if (AFWREC.AFWIDX2 <= 0)
      AF0NW00.AF0NWBEG = 1;
    end


    return; /* Return to previous process*/
  end

  if (AF0NM001.AF0NMOPT == "A")
    AF0N161(); /* process add changes*/
  else
    if (AF0NM001.AF0NMOPT == "D")
      AF0N162(); /* process delete changes*/
    else
      if (AF0NM001.AF0NMOPT == "I")
        AF0N163(); /* process inquiry changes*/
      end
    end
  end
  set AF0NM001.AF0NMOPT cursor;


end // end AF0N160

// Process add changes
Function AF0N161()
  AFWREC.AFWIDX2 = AF0NW00.AF0NWMAX + 1;
  AFFREC.XSECD[AFWIDX2] = AF0NM001.AF0NMSCD[1];
  AFFREC.XSNYR[AFWIDX2] = AF0NM001.AF0NMSYR[1];
  AFFREC.XSNYR[AFWIDX2] = AFFREC.XSNYR[AFWIDX2] + 1900;
  AFFREC.AFFASOCM[AFWIDX2] = AF0NM001.AF0NMCMT[1];
  AFFREC.AFFASOST[AFWIDX2] = AF0NM001.AF0NMSTA[1];
  AF0NW01.AF0NWDAT = AF0NM001.AF0NMAOD[1];
  AF0NW01.AF0NWDTY = AF0NW01.AF0NWDYY;
  AF0NW01.AF0NWDTM = AF0NW01.AF0NWDMM;
  AF0NW01.AF0NWDTD = AF0NW01.AF0NWDDD;
  AFFREC.AFFASODT[AFWIDX2] = AF0NW01.AF0NWDTX;
  AFFREC.AFFASODT[AFWIDX2] = AFFREC.AFFASODT[AFWIDX2] + 19000000;

  AF0N164(); /* update the vdmanx01 database*/

  AFWREC.AFWSWR = "Y";
  AF0NW00.AF0NWMAX = AF0NW00.AF0NWMAX + 1;
  AF0NM001.AF0NMOPT = "I";

end // end AF0N161

// process delete changes
Function AF0N162()
  AFWREC.AFWIXM = 0; /* Initialize line index*/
  AFWREC.AFWIDX3 = 0; /* Initialize line index*/
  while (AFWREC.AFWIXM < AF0NW00.AF0NWSZM) /* Until screen is full*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    if (AF0NM001.AF0NMSCD[AFWIXM] > " ")
      AFWREC.AFWIDX2 = AF0NW01.AF0NWIX2[AFWIXM];
      if (AF0NM001.AF0NMSEL[AFWIXM] == "D")
        AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1;
        AFFREC.AFFASOST[AFWIDX2] = "I";
      end
    end
  end


  if (AFWREC.AFWIDX3 > 0)
    AF0N164(); /* update the vdmanx01 database*/
  end
  AFWREC.AFWSWR = "Y";
  AF0NM001.AF0NMOPT = "I";

end // end AF0N162

// process inquiry changes
Function AF0N163()
  AFWREC.AFWIXM = 0; /* Initialize line index*/
  AFWREC.AFWIDX3 = 0; /* Initialize line index*/
  while (AFWREC.AFWIXM < AF0NW00.AF0NWSZM) /* Until screen is full*/
    AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
    if (AF0NM001.AF0NMSCD[AFWIXM] > " ")
      AFWREC.AFWIDX2 = AF0NW01.AF0NWIX2[AFWIXM];
      if (AF0NM001.AF0NMCMT[AFWIXM] != AFFREC.AFFASOCM[AFWIDX2])
        AFWREC.AFWIDX3 = AFWREC.AFWIDX3 + 1;
        AFFREC.AFFASOCM[AFWIDX2] = AF0NM001.AF0NMCMT[AFWIXM];
      end
    end
  end


  if (AFWREC.AFWIDX3 > 0)
    AF0N164(); /* update the vdmanx01 database*/
  end
  AFWREC.AFWSWR = "Y";

end // end AF0N163

// Update VDMANX01 database
Function AF0N164()
   /* ------------------------------------------------------------*/
   /* Format the data from the internal array.*/
   /* ------------------------------------------------------------*/


  XX0XS01();
  XP1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  XP1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  AFFREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  AFFREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/


   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal  array display line.*/
   /* ------------------------------------------------------------*/

  try
    call "IO4190" ("U ", SQLCA, AFFREC) {isNoRefresh = yes, isExternal = yes};
  end /* get unique call*/
   /* ****************************************************/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      AF0NW00.AF0NWMNO = 013; /* update successfull message*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* ; commit*/
      return; /* return*/
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 100)    /* Resource not available*/

    converseLib.validationFailed(12); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else
    if (sysVar.errorCode == "00000000" /* successful call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/

    else

      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "164 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE OF THE SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANX01"; /* Table view name*/

  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

  AF0NM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/

  exit stack; /* Exit to display map*/


end // end AF0N164

// validate  option
Function AF0NS00()
  if (AF0NM001.AF0NMOPT == "I"
   || AF0NM001.AF0NMOPT == "A"
   || AF0NM001.AF0NMOPT == "D")
    if (AF0NM001.AF0NMOPT == "A"
     && COMMAREA.CAADDFL != "Y")
      AF0NW01.AF0NWOPT = " "; /* Space out save area*/
      set AF0NM001.AF0NMOPT cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 60; /* Indicate error message*/
      AFWREC.AFWPRCSN = "S00 "; /* Process number*/
    end
    if (AF0NM001.AF0NMOPT == "D"
     && COMMAREA.CADELFL != "Y")
      AF0NW01.AF0NWOPT = " "; /* Space out save area*/
      set AF0NM001.AF0NMOPT cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 60; /* Indicate error message*/
      AFWREC.AFWPRCSN = "S00 "; /* Process number*/
    end
  else

    AF0NW01.AF0NWOPT = " "; /* Space out save area*/
    set AF0NM001.AF0NMOPT cursor, bold; /* Highlight field*/
    XP1REC.XP1MNO = 49; /* Indicate error message*/
    AFWREC.AFWPRCSN = "S00 "; /* Process number*/

  end




end // end AF0NS00

// edit season code
Function AF0NS01()
  if (AF0NM001.AF0NMOPT != "A") /* option is not add option*/
    if (AF0NM001.XSECD == " ") /* Season cd is not required*/
      return; /* return to calling process;*/
    end
  end


  if (AF0NM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0NM001.XSECD; /* save to working storage*/

  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S20 "; /* Process number*/
    set AF0NM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/

  end


end // end AF0NS01

// edit season year
Function AF0NS02()

  if (AF0NM001.AF0NMOPT != "A") /* if option not add*/
    if (AF0NM001.XSNYR == " " /* year is not required*/
     || AF0NM001.XSNYR == 0) 
      return; /* return to calling process*/
    end
  end

  AF0NW00.AF0NWXSY = 0; /* initialize xsnyr wk area*/
  AF0NW00.AF0NWXSY = XP1REC.XSNYR; /* move to wk area*/
  AF0NW00.AF0NWXSY = AF0NW00.AF0NWXSY + 1900; /* move century*/



  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0NW00.AF0NWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")

      if (YSNTBL.XXXSTAT[AFWIDX5] == "I") /* Inactive status*/
                       /* (field in error)*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
        set AF0NM001.XSNYR cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 35; /* indicate error message*/
        AFWREC.AFWPRCSN = "S02 "; /* Process number*/

      end
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end

                     /* (field in error)*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
  set AF0NM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  AFWREC.AFWPRCSN = "S02 "; /* Process number*/

end // end AF0NS02

// Clear unused flds
Function AF0NS03()
  AF0NM001.AF0NMSEL[AFWIXM] = " ";
  AF0NM001.AF0NMSCD[AFWIXM] = " ";
  AF0NM001.AF0NMSYR[AFWIXM] = 0;
  AF0NM001.AF0NMCMT[AFWIXM] = " ";
  AF0NM001.AF0NMSTA[AFWIXM] = " ";
  AF0NM001.AF0NMAOD[AFWIXM] = " ";
  AF0NW01.AF0NWIX2[AFWIXM] = 0;
end // end AF0NS03

// Clear and protect unused flds
Function AF0NS04()
  set AF0NM001.AF0NMSCD[AFWIXM] skip;
  set AF0NM001.AF0NMSYR[AFWIXM] skip;
  set AF0NM001.AF0NMCMT[AFWIXM] skip, invisible;
  set AF0NM001.AF0NMSTA[AFWIXM] skip;
  set AF0NM001.AF0NMAOD[AFWIXM] skip;
  set AF0NM001.AF0NMSEL[AFWIXM] skip, invisible;
end // end AF0NS04

// Load array data to screen
Function AF0NS05()
  AFWREC.AFWIXM = AFWREC.AFWIXM + 1;
  AF0NW01.AF0NWIX2[AFWIXM] = AFWIDX2;
  AF0NM001.AF0NMSEL[AFWIXM] = " ";
  AF0NM001.AF0NMSCD[AFWIXM] = AFFREC.XSECD[AFWIDX2];
  AF0NW01.AF0NWYRW = AFFREC.XSNYR[AFWIDX2];
  AF0NM001.AF0NMSYR[AFWIXM] = AF0NW01.AF0NWYRY;
  AF0NM001.AF0NMCMT[AFWIXM] = AFFREC.AFFASOCM[AFWIDX2];
  AF0NM001.AF0NMSTA[AFWIXM] = AFFREC.AFFASOST[AFWIDX2];
  AF0NW01.AF0NWDTW = AFFREC.AFFASODT[AFWIDX2];
  AF0NW01.AF0NWDYY = AF0NW01.AF0NWDTY;
  AF0NW01.AF0NWDMM = AF0NW01.AF0NWDTM;
  AF0NW01.AF0NWDDD = AF0NW01.AF0NWDTD;
  AF0NM001.AF0NMAOD[AFWIXM] = AF0NW01.AF0NWDAT;
  set AF0NM001.AF0NMSCD[AFWIXM] skip;
  set AF0NM001.AF0NMSYR[AFWIXM] skip;
  set AF0NM001.AF0NMSTA[AFWIXM] skip;
  set AF0NM001.AF0NMAOD[AFWIXM] skip;
  set AF0NM001.AF0NMCMT[AFWIXM] initialAttributes;
  set AF0NM001.AF0NMSEL[AFWIXM] skip, invisible;
  if (AF0NM001.AF0NMOPT == "D")
    set AF0NM001.AF0NMSEL[AFWIXM] initialAttributes;
    set AF0NM001.AF0NMCMT[AFWIXM] skip;
  end
  if (AF0NM001.AF0NMOPT == "I" /* inquiry only attib.*/
   && COMMAREA.CACHGFL == "N")
    set AF0NM001.AF0NMCMT[AFWIXM] skip;
  end
end // end AF0NS05

//*** RECORD=AF0NW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record AF0NW00 type basicRecord
  10 AF0NWACT AF0NWACT ; 
  10 AF0NWBEG AF0NWBEG ; 
  10 AF0NWMAX AF0NWMAX ; 
  10 AF0NWMNO AF0NWMNO ; 
  10 AF0NWNXT AF0NWNXT ; 
  10 AF0NWSZA AF0NWSZA ; 
  10 AF0NWSZM AF0NWSZM ; 
  10 AF0NWPND AF0NWPND ; 
  10 AF0NWXSA AF0NWXSA ; 
    15 AF0NWXSS AF0NWXSS ; 
    15 AF0NWXYR AF0NWXYR ; 
  10 AF0NWXSY AF0NWXSY ; 
  10 AF0NW1ST AF0NW1ST ; 
end // end AF0NW00

//*** RECORD=AF0NW01 ****
// ************************************************************
// Temporary storage record - for s/d snapshots screen
// ************************************************************
// ***********************
Record AF0NW01 type basicRecord
  5 AF0NWGRP AF0NWGRP ; 
    10 AF0NWDTW AF0NWDTW ; 
      15 AF0NWDTC AF0NWDTC ; 
      15 AF0NWDTX AF0NWDTX ; 
        20 AF0NWDTY AF0NWDTY ; 
        20 AF0NWDTM AF0NWDTM ; 
        20 AF0NWDTD AF0NWDTD ; 
    10 AF0NWDAT AF0NWDAT ; 
      15 AF0NWDMM AF0NWDMM ; 
      15 AF0NWDDD AF0NWDDD ; 
      15 AF0NWDYY AF0NWDYY ; 
    10 AF0NWOPT AF0NWOPT ; 
    10 AF0NWSCL AF0NWSCL ; 
    10 AF0NWSCH AF0NWSCH ; 
    10 AF0NWRYL AF0NWRYL ; 
    10 AF0NWRYH AF0NWRYH ; 
    10 AF0NWYRW AF0NWYRW ; 
      15 AF0NWYRC AF0NWYRC ; 
      15 AF0NWYRY AF0NWYRY ; 
    10 * char(4) [13] ; 
      15 AF0NWIX2 AF0NWIX2 ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end AF0NW01

// first time thru indicator
DataItem AF0NW1ST char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// number of active snapshots
DataItem AF0NWACT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// Beginning member in array
DataItem AF0NWBEG num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem AF0NWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date day
DataItem AF0NWDDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date month
DataItem AF0NWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date wk century
DataItem AF0NWDTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date wk day
DataItem AF0NWDTD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date wk month
DataItem AF0NWDTM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date wk area
DataItem AF0NWDTW num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0NWDTX num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date wk year
DataItem AF0NWDTY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date year
DataItem AF0NWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem AF0NWGRP char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map index to the above
DataItem AF0NWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of snapshots loaded
DataItem AF0NWMAX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// message number
DataItem AF0NWMNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next member in array
DataItem AF0NWNXT num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// saved option
DataItem AF0NWOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0NWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high key for xsyrn
DataItem AF0NWRYH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// low key for xsyrn
DataItem AF0NWRYL num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high key for xsecd
DataItem AF0NWSCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// low key for xsecd
DataItem AF0NWSCL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// affrec array size
DataItem AF0NWSZA num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// af0n map array size
DataItem AF0NWSZM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// XSN wk abrv
DataItem AF0NWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0NWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0NWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0NWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// century
DataItem AF0NWYRC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working year area
DataItem AF0NWYRW num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// year
DataItem AF0NWYRY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

