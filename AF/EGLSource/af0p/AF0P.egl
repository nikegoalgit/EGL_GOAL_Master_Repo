package af0p;

import af.common.AF-MO;
import af.common.AF1REC;
import af.common.AF2REC;
import af.common.AFDREC;
import af.common.AFWREC;
import corpcom2.XP1REC;
import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPAF001;
import corpcom3.XSAFS01;
import corpcom3.XSAFSDV;
import corpcom3.XSAFSGA;
import corpcom3.XSAFSOW;
import corpcom3.XSAFSPC;
import corpcom3.XSAFSPL;
import corpcom3.XSAFSPR;
import corpcom3.XSAFSSE;
import corpcom3.XSAFSSU;
import corpcom4.XSPG201;
import corpcom5.COMMAREA;
import corpcom5.CU-CO-ID;
import corpcom5.CU-STOR-ID;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.ZZ-LDT;
import corpx1.XCT-CTRY-CD;
import corpx1.XDM-DIM-CD;
import corpx1.XDV-DIV-CD;
import corpx1.XDVTBL;
import corpx1.XGA-GNDR-AGE-CD;
import corpx1.XGATBL;
import corpx1.XOWTBL;
import corpx1.XPCTBL;
import corpx1.XPLTBL;
import corpx1.XPRTBL;
import corpx1.XSETBL;
import corpx1.XSUTBL;
import corpx2.XOW-OWN-GRP-CD;
import corpx2.XOWABRV;
import corpx2.XPC-PROD-CAT-CD;
import corpx2.XPL-PROD-LN-CD;
import corpx2.XPR-PROD-TYP-CD;
import corpx2.XSE-SESN-CD;
import corpx2.XSN-SESN-YR-RNG;
import corpx2.XWH-WHSE-CD;
import corpy2.YSNTBL;
import corpz3.ZZ-CHNG-CNT;
import corpz3.ZZ-CHNG-DT;
import corpz3.ZZ-CHNG-HHMM;
import corpz3.ZZ-SDT;
import pg.common.PG1REC;
import pg.common.PG2REC;
import pt.common.PT3REC;
import sy.common.SY-COLR-CD-ID;
import sy.common.SY-STY-NBR;
import sy.common.SY-SZ-ID;
import sy.common.SY-SZ-SCL-CD;
import sy.common.SY4REC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
//*** PROGRAM=AF0P ****
// This  application  is  designed  to  display  size percent
// comparison inquiry data. The user can enter the Forecaster
// code, Season, Year, Gender Age, Category, Silhouette, Style,
// Book  Variance  Percentage  and  BLA Variance Percentage to
// select data to be displayed onscreen. Except for Season Code
// and  Year,  all  selection  criteria  fields can be either
// specifically or globally set.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 04/02/90   JRAMOS   New application.
// 03-08-94   LREIN    March table change
// 04-08-94   LREIN    Protect enterable fields for corp look
// 07-27-94   LREIN    Dont include negative amts in calc of
//                     BLA pcts
// 02-15-95   kj       XSN->YSN
// 05-19-97   sames    corrected variance calculations
// y2kfix 12-17-97 pharwo year 2000 changes to map af0pm001 and
//                     af0p152, af0ps20, af0ps21, af0ps06.
// 05-26-99   craymo   AF0PS20 - added logic to disallow any
//                     data entry beyond SU 2000.
// *********************
Program AF0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "AF00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AF0PW01 AF0PW01; // record
  AF0PW02 AF0PW02; // record
  AF1REC AF1REC; // record
  AF2REC AF2REC; // record
  AFDREC AFDREC; // record
  AFWREC AFWREC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PG1REC PG1REC; // record
  PG2REC PG2REC; // record
  PT3REC PT3REC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VAFSIZ01 VAFSIZ01; // record
  VTRDFC02 VTRDFC02; // record
  XP1REC XP1REC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGATBL {deleteAfterUse = yes}; // table
  use XDVTBL {deleteAfterUse = yes}; // table
  use XPRTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XPLTBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XSETBL {deleteAfterUse = yes}; // table
  use YSNTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use AF0PM.AF0PM001, // form
  AF0PM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPAF001: XPAF001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Main Process.*/
     /* ------------------------------------------------------------*/
    ;
    set AF0PW01 empty; /* Initialize working storage*/
    set AF0PW02 empty; /* Initialize working storage*/
    set AF1REC empty; /* Initialize working storage*/
    set AF2REC empty; /* Initialize working storage*/
    set AFWREC empty; /* Initialize working storage*/
    set ERRSQLCA empty; /* Initialize working storage*/
    set PG1REC empty; /* Initialize working storage*/
    set PG2REC empty; /* Initialize working storage*/
    set PT3REC empty; /* Initialize working storage*/
    set SQLCA empty; /* Initialize working storage*/
    set TA1REC empty; /* Initialize working storage*/
    set TA5REC empty; /* Initialize working storage*/
    set SY4REC empty;
    set TAEREC empty; /* Initialize working storage*/
    set VAFSIZ01 empty;
    set VTRDFC02 empty;
    set XX0XW01 empty; /* Initialize working storage*/
    set XX0XW02 empty; /* Initialize working storage*/
    set AF0PM001 initial; /* Initialize map output area*/
    ;
    ;
                   /* (Define Map Environment)*/
    ;
    AFWREC.AFWAPPL = "AF0P"; /* Initialize appl ID for this appl*/
    ;
    AFWREC.AFWPRCSN = "M001"; /* Indicate map to system*/
    AFWREC.XXXMAPNM = AFWREC.AFWERLOC; /* Move map name to afwrec*/
    AFWREC.AFWPRCSN = "0000"; /* Re-initialize process name*/
    ;
    AFWREC.AFWMAP = "1"; /* Indicate map to be displayed*/
    AFWREC.AFWSWR = "N"; /* Indicate request for data*/
    ;
    XP1REC.XDVCD = "01"; /* Nike Domestic Div cd*/
    XP1REC.XDVABRV = "NIKE D"; /* Nike Domestic Div abrv*/
    ;
    ;
                      /* (Set TSQ Record Size)*/
    ;
    AFWREC.AFWTSL = +1057; /* Current TSQ size*/
     /* MOVE +937 TO AFWREC.AFWTSL;      /* Current TSQ size*/
     /* MOVE +762 TO AFWREC.AFWTSL;      /* Current TSQ size*/
    ;
    ;
                      /* (Set Map Item Values)*/
    ;
    AF0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* To map current date*/
    ;
    ;
                      /* (Process Passed Items)*/
    ;
    AF0PM001.PG1FCTCD = XP1REC.XXXUSER; /* Fcster code to map*/
    AF0PM001.XSECD = XP1REC.XSECD; /* Season cd to map*/
    AF0PM001.XSNYR = XP1REC.XSNYR; /* Season yr to map*/
    AF0PM001.XPLCD = XP1REC.XPLCD; /* Product line cd to map*/
    AF0PM001.XGACD = XP1REC.XGACD; /* Gender age cd to map*/
    AF0PM001.XPRCD = XP1REC.XPRCD; /* Product type cd to map*/
    AF0PM001.XPCCD = XP1REC.XPCCD; /* Category cd to map*/
    AF0PM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd to map*/
    AF0PM001.SY1STNBR = XP1REC.SY1STNBR; /* Style cd to map*/
    ;
    if (XP1REC.SY1STNBR != " ")
      AF0PM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Style desc to map*/
    end
    ;
    XP1REC.XOWCD = " ";
    AF0PM001.XDVCD = XP1REC.XDVCD; /* Division cd to map*/
    AF0PM001.XDVABRV = XP1REC.XDVABRV; /* Division abrv to map*/
    XP1REC.XGPCD = "03"; /* Apparel GPC cd*/
    AF0PM001.XOWCD = "  "; /* OWNER GROUP*/
    AF0PM001.AF0PM-BLNK-FL = "N"; /* blank only indicator*/
    goto AF0P001; /* converse Main Process*/
    ;
    ;
    AF0P001: AF0P001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the Apparel Fcst/Buy Prototype process.*/
     /* ------------------------------------------------------------*/
    ;
    goto AF0P001; /* Converse Apparel Fcst/Buy Prototype*/
    ;
    ;
  end // end main
end // end AF0P

// Choose which map to display
Function AF0P001()
  ;
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0P110(); /* Obtain the data to display*/
  ;
  AF0P120(); /* Format and display the map*/
  ;
  AF0P130(); /* Check attention identifier*/
  ;
  AF0P140(); /* Reset fields to normal intensity*/
  ;
  AF0P150(); /* Verify the entered data*/
  ;
  AF0P160(); /* Process valid input request*/
  ;
  ;
  ;
end // end AF0P001

// Obtain data to display
Function AF0P110()
  ;
   /* ------------------------------------------------------------*/
   /* If data was not requested, return to the previous process.*/
   /* Purge any existing queue in temporary storage.*/
   /* Check for User Response and process appropriate data base.*/
   /* If no errors found from data retrieve, indicate that the*/
     /* request for data was completed.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* 'PRESS ENTER TO CONFIRM ACTION'*/
    if (AF0PW01.AF0PWFCI == "N" /* forecast % not changed*/
     && AFWREC.AFWSWU == "Y")   /* confirmation map has been sent*/
      AF0P114(); /* update the database*/
      return; /* return to previous process*/
    end
  end
  ;
  if (converseVar.validationMsgNum != 0 /* Errors detected*/
   || AFWREC.AFWSWR != "Y")             /* or Data was not requested*/
    return; /* Return to previous process*/
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Purge TSQ data set.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0P122(); /* Purge any temporary storage*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
             /* Obtain Data from DACAST.VAFSTY01*/
   /* Select and open the cursor for the set to be formatted.*/
   /* Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At the end of the set, add any partial page to the queue,*/
      /* then close the selected set cursor.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0P111(); /* Select Set DACAST.VAFSTY01 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    set AF0PW02 empty; /* Clear map work area*/
    AFWREC.AFWSWC = "N"; /* Reset EOF indicator*/
    AFWREC.AFWIXM = 1; /* Set store pointer*/
    AF0PW01.AF0PWSIX = 0; /* Initialize pointer save area*/
    ;
             /* (Store All Style Rows Retrieved)*/
    ;
    while (AFWREC.AFWSWC == "N") /* Until all rows processed*/
      ;
      AF0P112(); /* Process style rows*/
      ;
      if (AFWREC.AFWIXM > 3) /* Page is full*/
        AF0P126(); /* Add page to TSQ*/
      end
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AFWREC.AFWSWC = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0 /* No errors found*/
   && AF0PW01.AF0PWSIX > 1)             /* Page was formatted*/
    ;
    AFWREC.AFWIDX2 = AF0PW01.AF0PWSIX; /* Set start line*/
    while (AFWREC.AFWIDX2 <= 3) /* Until end of lines*/
      ;
      if (AFWREC.AFWIDX2 == 2) /* Second line group*/
        AF0PW02.AF0PWLD2 = "*"; /* No data for this line group*/
      else
        if (AFWREC.AFWIDX2 == 3) /* Third line group*/
          AF0PW02.AF0PWLD3 = "*"; /* No data for this line group*/
        end
      end
      ;
      AFWREC.AFWIDX2 = AFWREC.AFWIDX2 + 1; /* Increment line index*/
      ;
    end
    ;
    AF0P126(); /* Add page to temporary storage*/
    ;
  end
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    AF0P113(); /* Close size cursor*/
  end
  ;
  ;
  AFWREC.AFWTSP = 1; /* Set TSQ page to 1*/
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check Obtain Data Status.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0) /* No errors were found*/
    ;
    AFWREC.AFWSWR = "N"; /* Request for data completed*/
    ;
  end
  ;
  ;
end // end AF0P110

// Select set DACAST.VAFSTY01
Function AF0P111()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set AF2REC empty; /* Clear record work area*/
  ;
          /* (Style No.)*/
  if (XP1REC.SY1STNBR != " ") /* Specific style set requested*/
    AF2REC.SY1STNBR = XP1REC.SY1STNBR;
  else
    AF2REC.SY1STNBR = "**"; /* Obtain all styles*/
  end
  ;
       /* (Forecaster code)*/
  if (XP1REC.PG1FCTCD != " ")
    AF2REC.PG1FCTCD = XP1REC.PG1FCTCD;
  else
    AF2REC.PG1FCTCD = "**";
  end
  ;
            /* (Product Type)*/
  if (XP1REC.XPRCD != "  ")
    AF2REC.XPRCD = XP1REC.XPRCD;
  else
    AF2REC.XPRCD = "**";
  end
  ;
            /* (Owner Group)*/
  if (XP1REC.XOWCD != "  ")
    AF2REC.XOWCD = XP1REC.XOWCD;
  else
    AF2REC.XOWCD = "**";
  end
  ;
            /* (Gender Age)*/
  if (XP1REC.XGACD != "  ")
    AF2REC.XGACD = XP1REC.XGACD;
  else
    AF2REC.XGACD = "**";
  end
  ;
            /* (Product Line)*/
  if (XP1REC.XPLCD != "  ")
    AF2REC.XPLCD = XP1REC.XPLCD;
  else
    AF2REC.XPLCD = "**";
  end
  ;
          /* (Product Category)*/
  if (XP1REC.XPCCD != " ")
    AF2REC.XPCCD = XP1REC.XPCCD;
  else
    AF2REC.XPCCD = "**";
  end
  ;
          /* (Silhouette)*/
  if (XP1REC.XSUCD != " ")
    AF2REC.XSUCD = XP1REC.XSUCD;
  else
    AF2REC.XSUCD = "**";
  end
  ;
         /* (Season code)*/
  AF2REC.XSECD = XP1REC.XSECD;
  ;
         /* (Season year)*/
  AF2REC.XSNYR = XP1REC.XSNYR;
  ;
         /* (Division)*/
  AF2REC.XDVCD = XP1REC.XDVCD;
  ;
  ;
   /* *==========================**/
   /* *  Access DACAST.VAFSTY01  **/
   /* *==========================**/
  ;
  try
    call "IO3510" ("S2", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "111 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF2REC.AF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0P111

// Process DACAST.VAFSTY01 rows
Function AF0P112()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* Format the data in the internal array display line for*/
      /* TSQ storage.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VAFSTY01 **/
   /* *=========================**/
  ;
  try
    call "IO3510" ("N2", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch the next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      AF0PW01.AF0PWQUA = "N"; /* Reset display qualify flag*/
      ;
      AF0PS02(); /* Obtain size descriptions*/
      ;
      if (AF0PW01.AF0PW-BLNK-FL == "Y" /* if BLANKS only requested*/
       && PG2REC.PG2SCRFL != "B")      /* vsyclr01 style not a BLANK*/
        return;
      else
        if (AF0PW01.AF0PW-BLNK-FL == "N" /* if BLANKS only not requested*/
         && PG2REC.PG2SCRFL == "B")      /* vsyclr01 style is a BLANK*/
          return;
        end
      end
      ;
      AF0PS03(); /* Store/calculate style data*/
      ;
      if (AF0PW01.AF0PWQUA == "Y") /* Style qualified for display*/
        AFWREC.AFWIXM = AFWREC.AFWIXM + 1; /* Increment line index*/
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      ;
      AFWREC.AFWSWC = "Y"; /* Indicate end of file*/
      AF0PW01.AF0PWSIX = AFWREC.AFWIXM; /* Save index*/
      ;
      return; /* Return to previous process*/
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "112 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0P112

// Close DACAST.VAFSTY01 cursor
Function AF0P113()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.VAFSTY01 **/
   /* *=========================**/
  ;
  try
    call "IO3510" ("C2", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "113 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0P113

// Process forecast % updates
Function AF0P114()
   /* ------------------------------------------------------------*/
   /* Read the table row to be updated.*/
    /* performed 3 times for each style on the page.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *-----------------------------------------**/
   /* *     rewrite first line                  **/
   /* *-----------------------------------------**/
  ;
  if (AF0PW02.AF0PWLD1 != "*" /* Valid line*/
   && AF0PW02.AF0PWOG1 != "**") /* corporate look*/
    ;
    set AF2REC empty; /* Clear record work area*/
    ;
    AF2REC.SY1STNBR = AF0PW02.AF0PWST1;
    AF2REC.XDMCD = AF0PW02.AF0PWDM1;
    AF2REC.XOWCD = AF0PW02.AF0PWOG1;
    AF2REC.XDVCD = XP1REC.XDVCD;
    AF2REC.XSECD = XP1REC.XSECD;
    AF2REC.XSNYR = XP1REC.XSNYR;
    /* MOVE '00' TO AF2REC.XOWCD; /* owner group default to '00'*/
    ;
    ;
    AF0PS27(); /* Read DACAST.VAFSTY01*/
    ;
    AFWREC.AFWIDX1 = 1;
    while (AFWIDX1 <= 10)
      AF2REC.AF2SZPCT[AFWIDX1] = AF0PW02.AF0PWFP1[AFWIDX1];
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    end
    ;
    ;
    AF0PS28(); /* Update DACAST.VAFSTY01*/
    ;
  end
  ;
  ;
   /* *-----------------------------------------**/
   /* *     rewrite second line                 **/
   /* *-----------------------------------------**/
  ;
  if (AF0PW02.AF0PWLD2 != "*" /* Valid line*/
   && AF0PW02.AF0PWOG2 != "**") /* corporate look*/
    ;
    set AF2REC empty; /* Clear record work area*/
    ;
    AF2REC.SY1STNBR = AF0PW02.AF0PWST2;
    AF2REC.XDMCD = AF0PW02.AF0PWDM2;
    AF2REC.XOWCD = AF0PW02.AF0PWOG2;
    AF2REC.XDVCD = XP1REC.XDVCD;
    AF2REC.XSECD = XP1REC.XSECD;
    AF2REC.XSNYR = XP1REC.XSNYR;
    /* MOVE '00' TO AF2REC.XOWCD; /* owner group default to '00'*/
    ;
    ;
    AF0PS27(); /* Read DACAST.VAFSTY01*/
    ;
    AFWREC.AFWIDX1 = 1;
    while (AFWIDX1 <= 10)
      AF2REC.AF2SZPCT[AFWIDX1] = AF0PW02.AF0PWFP2[AFWIDX1];
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    end
    ;
    ;
    AF0PS28(); /* Update DACAST.VAFSTY01*/
    ;
  end
  ;
   /* *-----------------------------------------**/
   /* *     rewrite third line                  **/
   /* *-----------------------------------------**/
  ;
  if (AF0PW02.AF0PWLD3 != "*" /* Valid line*/
   && AF0PW02.AF0PWOG3 != "**") /* corporate look*/
    ;
    set AF2REC empty; /* Clear record work area*/
    ;
    AF2REC.SY1STNBR = AF0PW02.AF0PWST3;
    AF2REC.XDMCD = AF0PW02.AF0PWDM3;
    AF2REC.XOWCD = AF0PW02.AF0PWOG3;
    AF2REC.XDVCD = XP1REC.XDVCD;
    AF2REC.XSECD = XP1REC.XSECD;
    AF2REC.XSNYR = XP1REC.XSNYR;
    /* MOVE '00' TO AF2REC.XOWCD; /* owner group default to '00'*/
    ;
    ;
    AF0PS27(); /* Read DACAST.VAFSTY01*/
    ;
    AFWREC.AFWIDX1 = 1;
    while (AFWIDX1 <= 10)
      AF2REC.AF2SZPCT[AFWIDX1] = AF0PW02.AF0PWFP3[AFWIDX1];
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    end
    ;
    ;
    AF0PS28(); /* Update DACAST.VAFSTY01*/
    ;
  end
  ;
   /* *-----------------------------------------**/
   /* *     update temporary storage queue      **/
   /* *-----------------------------------------**/
  ;
  AF0PW02.AF0PWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application id*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* TSQ item number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  ;
  AF0PS29(); /* Update TSQ*/
  ;
  ;
  AFWREC.AFWNMO = 1; /* info msg update ok*/
  AFWREC.AFWSWU = "N"; /* initialize update switch*/
end // end AF0P114

// Format and display the map
Function AF0P120()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any errors detected.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0PW01.AF0PWPND != "Y") /* No pop-up windows active*/
    ;
    if (AFWREC.AFWFIRST != " ") /* Not the first time*/
      ;
      if (converseVar.validationMsgNum == 0) /* No error found*/
        AF0P121(); /* Format the data on the map*/
      else
        AFWREC.AFWNMO = converseVar.validationMsgNum; /* Message number*/
      end
      ;
    else
      ;
      AF0PS01(); /* Clear map detail area*/
      set AF0PM001.XSECD cursor; /* Set cursor*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  AF0PM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  AF0PM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  AF0PM001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWNMO != 0) /* Message to display*/
    if (AFWREC.AFWNMO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(AFWREC.AFWNMO);
    end /* Message number*/
  end
  ;
  ;
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    set AF0PM001 alarm; /* Indicate sound alarm*/
  else
    if (AF0PW01.AF0PWFCI == "Y") /* If forecast % have been changed*/
      AFWREC.AFWSWU = "Y"; /* sending confirmation map*/
      converseLib.validationFailed(25);
    end
  end
  ;
  ;
  converse AF0PM001 ;
  ;
  ;
   /* ----------------------------------------------------------*/
    /* Clear message work area and save fast path information*/
   /* ----------------------------------------------------------*/
  ;
  AFWREC.AFWNMO = 0; /* Info message number*/
  ;
  COMMAREA.CATOAP = AF0PM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = AF0PM001.CAITEM; /* Application data*/
  ;
  ;
  ;
end // end AF0P120

// Format data into map
Function AF0P121()
  ;
   /* ------------------------------------------------------------*/
   /* Clear Map for New Data to Display.*/
   /* ------------------------------------------------------------*/
  set AF0PM001 initial; /* Clear map for display*/
  ;
   /* ------------------------------------------------------------*/
   /* Format Map Header Information from XP1REC/work fields.*/
   /* ------------------------------------------------------------*/
  ;
  AF0PM001.PG1FCTCD = XP1REC.XXXUSER; /* Forecaster*/
  AF0PM001.XSECD = XP1REC.XSECD; /* Season cd*/
  AF0PM001.XSNYR = XP1REC.XSNYR; /* Season yr*/
  AF0PM001.XOWCD = XP1REC.XOWCD; /* OG*/
  AF0PM001.XOWABRV = XP1REC.XOWABRV; /* OG*/
  AF0PM001.XPRCD = XP1REC.XPRCD; /* Product type cd*/
  AF0PM001.XGACD = XP1REC.XGACD; /* G/A cd*/
  AF0PM001.XPLCD = XP1REC.XPLCD; /* Product line cd*/
  AF0PM001.XPCCD = XP1REC.XPCCD; /* Category cd*/
  AF0PM001.XSUCD = XP1REC.XSUCD; /* Silhouette cd*/
  AF0PM001.SY1STNBR = XP1REC.SY1STNBR; /* Style no.*/
  AF0PM001.SY1SSTNM = XP1REC.SY1SSTNM; /* Short Style name*/
  AF0PM001.XDVCD = XP1REC.XDVCD; /* Division cd*/
  AF0PM001.XDVABRV = XP1REC.XDVABRV; /* Division abbreviation*/
  AF0PM001.AF0PMBKV = AF0PW01.AF0PWBKV; /* Bookings var*/
  AF0PM001.AF0PMBLV = AF0PW01.AF0PWBLV; /* BLA var*/
  AF0PM001.AF0PM-BLNK-FL = AF0PW01.AF0PW-BLNK-FL; /* blank indicator*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if there are pages to display. If none, set message*/
     /* and redisplay map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AFWREC.TA5TSQIX == 0) /* No data to display*/
    ;
    AF0PS01(); /* Clear detail data from map*/
    ;
    set AF0PM001.XSECD cursor; /* Set cursor position*/
    AFWREC.AFWPRCSN = "121 "; /* Process number*/
    converseLib.validationFailed(15); /* Indicate no data to display*/
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
  set AF0PM001.XSECD cursor; /* Set cursor position*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the map detail data obtained.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (AF0PW01.AF0PWFCI == "Y") /* Forecast has been changed*/
     /* next sentence*/
  else
    AF0P127(); /* Obtain TSQ page*/
  end
  ;
  ;
  if (AF0PW02.AF0PWLD1 != "*") /* Valid line*/
    ;
    AF0PM001.AF0PMST[1] = AF0PW02.AF0PWST1; /* Style*/
    AF0PM001.AF0PMSD[1] = AF0PW02.AF0PWSS1; /* Style desc*/
    AF0PM001.AF0PMOG[1] = AF0PW02.AF0PWOG1; /* Owner Group*/
    ;
    AF0PW01.AF0PWTBK = 0; /* Initialize wk total*/
    AF0PW01.AF0PWTBL = 0; /* Initialize wk total*/
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Get line totals*/
      ;
      AF0PW01.AF0PWTBK = AF0PW01.AF0PWTBK + AF0PW02.AF0PWBK1[AFWIDX1];
      ;
      if (AF0PW02.AF0PWBL1[AFWIDX1] > 0)
        AF0PW01.AF0PWTBL = AF0PW01.AF0PWTBL + AF0PW02.AF0PWBL1[AFWIDX1];
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Compute individual pcnts*/
      ;
      if (AF0PW02.AF0PWSZ1[AFWIDX1] != " ")
        AF0PM001.AF0PMSZ1[AFWIDX1] = AF0PW02.AF0PWSZ1[AFWIDX1];
        ;
        if (COMMAREA.CACHGFL != "Y"
         || AF0PM001.AF0PMOG[1] == "**") /* corp look*/
          set AF0PM001.AF0PMFP1[AFWIDX1] protect;
        end
        ;
      else
        set AF0PM001.AF0PMSZ1[AFWIDX1] skip, invisible;
        set AF0PM001.AF0PMFP1[AFWIDX1] skip, invisible;
      end
      if (AF0PW01.AF0PWTBK > 0)
        AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK1[AFWIDX1];
        AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWQT1 / AF0PW01.AF0PWTBK, -mathLib.decimals(AF0PW01.AF0PWQT4));
        AF0PW01.AF0PWBK1 = mathLib.round(AF0PW01.AF0PWQT4 * 100, -mathLib.decimals(AF0PW01.AF0PWBK1));
        AF0PM001.AF0PMBK1[AFWIDX1] = AF0PW01.AF0PWBK1;
      else
        AF0PM001.AF0PMBK1[AFWIDX1] = 0;
      end
      ;
      AF0PM001.AF0PMFP1[AFWIDX1] = AF0PW02.AF0PWFP1[AFWIDX1];
      ;
      if (AF0PW01.AF0PWTBL > 0
       && AF0PW02.AF0PWBL1[AFWIDX1] > 0)
        AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL1[AFWIDX1];
        AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWQT1 / AF0PW01.AF0PWTBL, -mathLib.decimals(AF0PW01.AF0PWQT4));
        AF0PW01.AF0PWPCW = mathLib.round(AF0PW01.AF0PWQT4 * 100, -mathLib.decimals(AF0PW01.AF0PWPCW));
        AF0PM001.AF0PMBL1[AFWIDX1] = AF0PW01.AF0PWPCW;
      else
        AF0PM001.AF0PMBL1[AFWIDX1] = 0;
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
    AF0PM001.AF0PMKT[1] = mathLib.round(AF0PW01.AF0PWTBK + 0, -mathLib.decimals(AF0PM001.AF0PMKT[1]));
    AF0PM001.AF0PMFT[1] = AF0PW02.AF0PWFT1; /* Fcst $ total*/
    ;
    ;
    if (AF0PW02.AF0PWFT1 > 0)
      AF0PW01.AF0PWPCT = mathLib.round(AF0PW01.AF0PWTBK / AF0PW02.AF0PWFT1, -mathLib.decimals(AF0PW01.AF0PWPCT));
      AF0PW01.AF0PWPFC = mathLib.round(AF0PW01.AF0PWPCT * 100, -mathLib.decimals(AF0PW01.AF0PWPFC));
      AF0PM001.AF0PMKD[1] = AF0PW01.AF0PWPFC;
    else
      AF0PM001.AF0PMKD[1] = 0;
    end
    ;
  else
    ;
    set AF0PM001.AF0PMHS[1] skip, invisible; /* Protect,dark hdgs*/
    set AF0PM001.AF0PMST[1] skip, invisible;
    set AF0PM001.AF0PMHO[1] skip, invisible;
    set AF0PM001.AF0PMOG[1] skip, invisible;
    set AF0PM001.AF0PMSD[1] skip, invisible;
    set AF0PM001.AF0PMHT[1] skip, invisible;
    set AF0PM001.AF0PMHB[1] skip, invisible;
    set AF0PM001.AF0PMHK[1] skip, invisible;
    set AF0PM001.AF0PMHF[1] skip, invisible;
    set AF0PM001.AF0PMHL[1] skip, invisible;
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Process all map items*/
      ;
      set AF0PM001.AF0PMSZ1[AFWIDX1] skip, invisible; /* Protect,dark dtl*/
      set AF0PM001.AF0PMBK1[AFWIDX1] skip, invisible;
      set AF0PM001.AF0PMFP1[AFWIDX1] skip, invisible;
      set AF0PM001.AF0PMBL1[AFWIDX1] skip, invisible;
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
  end
  ;
  ;
  if (AF0PW02.AF0PWLD2 != "*") /* Valid line*/
    ;
    AF0PM001.AF0PMST[2] = AF0PW02.AF0PWST2; /* Style*/
    AF0PM001.AF0PMSD[2] = AF0PW02.AF0PWSS2; /* Style desc*/
    AF0PM001.AF0PMOG[2] = AF0PW02.AF0PWOG2; /* Owner Group*/
    ;
    AF0PW01.AF0PWTBK = 0; /* Initialize wk total*/
    AF0PW01.AF0PWTBL = 0; /* Initialize wk total*/
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Get line totals*/
      ;
      AF0PW01.AF0PWTBK = AF0PW01.AF0PWTBK + AF0PW02.AF0PWBK2[AFWIDX1];
      ;
      if (AF0PW02.AF0PWBL2[AFWIDX1] > 0)
        AF0PW01.AF0PWTBL = AF0PW01.AF0PWTBL + AF0PW02.AF0PWBL2[AFWIDX1];
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Compute individual pcents*/
      ;
      if (AF0PW02.AF0PWSZ2[AFWIDX1] != " ")
        AF0PM001.AF0PMSZ2[AFWIDX1] = AF0PW02.AF0PWSZ2[AFWIDX1];
        ;
        if (COMMAREA.CACHGFL != "Y"
         || AF0PM001.AF0PMOG[2] == "**") /* corp look*/
          set AF0PM001.AF0PMFP2[AFWIDX1] protect;
        end
        ;
      else
        set AF0PM001.AF0PMSZ2[AFWIDX1] skip, invisible;
        set AF0PM001.AF0PMFP2[AFWIDX1] skip, invisible;
      end
      if (AF0PW01.AF0PWTBK > 0)
        AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK2[AFWIDX1];
        AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWQT1 / AF0PW01.AF0PWTBK, -mathLib.decimals(AF0PW01.AF0PWQT4));
        AF0PW01.AF0PWBK2 = mathLib.round(AF0PW01.AF0PWQT4 * 100, -mathLib.decimals(AF0PW01.AF0PWBK2));
        AF0PM001.AF0PMBK2[AFWIDX1] = AF0PW01.AF0PWBK2;
      else
        AF0PM001.AF0PMBK2[AFWIDX1] = 0;
      end
      ;
      AF0PM001.AF0PMFP2[AFWIDX1] = AF0PW02.AF0PWFP2[AFWIDX1];
      ;
      if (AF0PW01.AF0PWTBL > 0
       && AF0PW02.AF0PWBL2[AFWIDX1] > 0)
        AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL2[AFWIDX1];
        AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWQT1 / AF0PW01.AF0PWTBL, -mathLib.decimals(AF0PW01.AF0PWQT4));
        AF0PW01.AF0PWPCW = mathLib.round(AF0PW01.AF0PWQT4 * 100, -mathLib.decimals(AF0PW01.AF0PWPCW));
        AF0PM001.AF0PMBL2[AFWIDX1] = AF0PW01.AF0PWPCW;
      else
        AF0PM001.AF0PMBL2[AFWIDX1] = 0;
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
    AF0PM001.AF0PMKT[2] = mathLib.round(AF0PW01.AF0PWTBK + 0, -mathLib.decimals(AF0PM001.AF0PMKT[2]));
    AF0PM001.AF0PMFT[2] = AF0PW02.AF0PWFT2; /* Fcst totals*/
    ;
    if (AF0PW02.AF0PWFT2 > 0)
      AF0PW01.AF0PWPCT = mathLib.round(AF0PW01.AF0PWTBK / AF0PW02.AF0PWFT2, -mathLib.decimals(AF0PW01.AF0PWPCT));
      AF0PW01.AF0PWPFC = mathLib.round(AF0PW01.AF0PWPCT * 100, -mathLib.decimals(AF0PW01.AF0PWPFC));
      AF0PM001.AF0PMKD[2] = AF0PW01.AF0PWPFC;
    else
      AF0PM001.AF0PMKD[2] = 0;
    end
    ;
  else
    ;
    set AF0PM001.AF0PMHS[2] skip, invisible; /* Protect,dark hdgs*/
    set AF0PM001.AF0PMST[2] skip, invisible;
    set AF0PM001.AF0PMSD[2] skip, invisible;
    set AF0PM001.AF0PMHO[2] skip, invisible;
    set AF0PM001.AF0PMOG[2] skip, invisible;
    set AF0PM001.AF0PMHT[2] skip, invisible;
    set AF0PM001.AF0PMHB[2] skip, invisible;
    set AF0PM001.AF0PMHK[2] skip, invisible;
    set AF0PM001.AF0PMHF[2] skip, invisible;
    set AF0PM001.AF0PMHL[2] skip, invisible;
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Process all map items*/
      ;
      set AF0PM001.AF0PMSZ2[AFWIDX1] skip, invisible; /* Protect,dark dtl*/
      set AF0PM001.AF0PMBK2[AFWIDX1] skip, invisible;
      set AF0PM001.AF0PMFP2[AFWIDX1] skip, invisible;
      set AF0PM001.AF0PMBL2[AFWIDX1] skip, invisible;
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
  end
  ;
  ;
  if (AF0PW02.AF0PWLD3 != "*") /* Valid line*/
    ;
    AF0PM001.AF0PMST[3] = AF0PW02.AF0PWST3; /* Style*/
    AF0PM001.AF0PMSD[3] = AF0PW02.AF0PWSS3; /* Style desc*/
    AF0PM001.AF0PMOG[3] = AF0PW02.AF0PWOG3; /* Owner Group*/
    ;
    AF0PW01.AF0PWTBK = 0; /* Initialize wk total*/
    AF0PW01.AF0PWTBL = 0; /* Initialize wk total*/
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Get line totals*/
      ;
      AF0PW01.AF0PWTBK = AF0PW01.AF0PWTBK + AF0PW02.AF0PWBK3[AFWIDX1];
      ;
      if (AF0PW02.AF0PWBL3[AFWIDX1] > 0)
        AF0PW01.AF0PWTBL = AF0PW01.AF0PWTBL + AF0PW02.AF0PWBL3[AFWIDX1];
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Compute individual pcents*/
      ;
      if (AF0PW02.AF0PWSZ3[AFWIDX1] != " ")
        AF0PM001.AF0PMSZ3[AFWIDX1] = AF0PW02.AF0PWSZ3[AFWIDX1];
        ;
        if (COMMAREA.CACHGFL != "Y"
         || AF0PM001.AF0PMOG[3] == "**") /* corp look*/
          set AF0PM001.AF0PMFP3[AFWIDX1] protect;
        end
        ;
      else
        set AF0PM001.AF0PMSZ3[AFWIDX1] skip, invisible;
        set AF0PM001.AF0PMFP3[AFWIDX1] skip, invisible;
      end
      if (AF0PW01.AF0PWTBK > 0)
        AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK3[AFWIDX1];
        AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWQT1 / AF0PW01.AF0PWTBK, -mathLib.decimals(AF0PW01.AF0PWQT4));
        AF0PW01.AF0PWBK3 = mathLib.round(AF0PW01.AF0PWQT4 * 100, -mathLib.decimals(AF0PW01.AF0PWBK3));
        AF0PM001.AF0PMBK3[AFWIDX1] = AF0PW01.AF0PWBK3;
      else
        AF0PM001.AF0PMBK3[AFWIDX1] = 0;
      end
      ;
      AF0PM001.AF0PMFP3[AFWIDX1] = AF0PW02.AF0PWFP3[AFWIDX1];
      ;
      if (AF0PW01.AF0PWTBL > 0
       && AF0PW02.AF0PWBL3[AFWIDX1] > 0)
        AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL3[AFWIDX1];
        AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWQT1 / AF0PW01.AF0PWTBL, -mathLib.decimals(AF0PW01.AF0PWQT4));
        AF0PW01.AF0PWPCW = mathLib.round(AF0PW01.AF0PWQT4 * 100, -mathLib.decimals(AF0PW01.AF0PWPCW));
        AF0PM001.AF0PMBL3[AFWIDX1] = AF0PW01.AF0PWPCW;
      else
        AF0PM001.AF0PMBL3[AFWIDX1] = 0;
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
    AF0PM001.AF0PMKT[3] = mathLib.round(AF0PW01.AF0PWTBK + 0, -mathLib.decimals(AF0PM001.AF0PMKT[3]));
    AF0PM001.AF0PMFT[3] = AF0PW02.AF0PWFT3; /* Fcst totals*/
    ;
    if (AF0PW02.AF0PWFT3 > 0)
      AF0PW01.AF0PWPCT = mathLib.round(AF0PW01.AF0PWTBK / AF0PW02.AF0PWFT3, -mathLib.decimals(AF0PW01.AF0PWPCT));
      AF0PW01.AF0PWPFC = mathLib.round(AF0PW01.AF0PWPCT * 100, -mathLib.decimals(AF0PW01.AF0PWPFC));
      AF0PM001.AF0PMKD[3] = AF0PW01.AF0PWPFC;
    else
      AF0PM001.AF0PMKD[3] = 0;
    end
    ;
  else
    ;
    set AF0PM001.AF0PMHS[3] skip, invisible; /* Protect,dark hdgs*/
    set AF0PM001.AF0PMST[3] skip, invisible;
    set AF0PM001.AF0PMSD[3] skip, invisible;
    set AF0PM001.AF0PMHO[3] skip, invisible;
    set AF0PM001.AF0PMOG[3] skip, invisible;
    set AF0PM001.AF0PMHT[3] skip, invisible;
    set AF0PM001.AF0PMHB[3] skip, invisible;
    set AF0PM001.AF0PMHK[3] skip, invisible;
    set AF0PM001.AF0PMHF[3] skip, invisible;
    set AF0PM001.AF0PMHL[3] skip, invisible;
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Process all map items*/
      ;
      set AF0PM001.AF0PMSZ3[AFWIDX1] skip, invisible; /* Protect,dark dtl*/
      set AF0PM001.AF0PMBK3[AFWIDX1] skip, invisible;
      set AF0PM001.AF0PMFP3[AFWIDX1] skip, invisible;
      set AF0PM001.AF0PMBL3[AFWIDX1] skip, invisible;
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
    end
    ;
  end
  ;
  ;
end // end AF0P121

// Delete TSQ data set
Function AF0P122()
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  ;
  ;
  call "TA0050" (AF0PW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ; subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    AFWREC.AFWPRCSN = "122 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
  end
  ;
  ;
  ;
  AFWREC.AFWTSP = 0; /* Reset current page number*/
  AFWREC.TA5TSQIX = 0; /* Reset highest page number*/
  ;
  ;
end // end AF0P122

// Write to TSQ data set
Function AF0P126()
  ;
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  AF0PW02.AF0PWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  ;
  ;
  call "TA0050" (AF0PW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ;subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "126 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
  AFWREC.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
  ;
  AFWREC.AFWIXM = 1; /* Reset display line number*/
  ;
  set AF0PW02 empty; /* Clear temporary storage record*/
  ;
  ;
  ;
end // end AF0P126

// Read TSQ data set
Function AF0P127()
  ;
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AF0PW02.AF0PWLEN = AFWREC.AFWTSL; /* Temporary storage length*/
  TA5REC.TA5APPID = AFWREC.AFWAPPL; /* Application identification*/
  TA5REC.TA5TSQIX = AFWREC.AFWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  ;
  call "TA0050" (AF0PW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage subroutine*/
  ;
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "127 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(5); /* Indicate no data to display*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
end // end AF0P127

// Check attention identifier
Function AF0P130()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    AF0PW01.AF0PWFCI = "N"; /* init new fcst indicator*/
    AFWREC.AFWSWU = "N"; /* init confirmation map sent*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
  if (AF0PM001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      COMMAREA.CATOAP = AF0PM001.CATOAP; /* TO application*/
      COMMAREA.CAITEM = AF0PM001.CAITEM; /* Application data*/
      ;
      XSAFS01(); /* Exit to another application*/
      ;
    else
      ;
      converseLib.validationFailed(5); /* Indicate PF key not valid*/
      ;
    end
    ;
    set AF0PM001.CATOAP cursor, modified, bold; /* Highlight*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AF0PM001.CAITEM > " ") /* Application data was entered*/
    set AF0PM001.CAITEM cursor, modified, bold; /* Highlight data*/
    converseLib.validationFailed(7); /* Enter only with fast path*/
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    exit stack; /* Redisplay map*/
  end
  ;
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "AF0PM001"; /* Appl find code*/
    end
    ;
    XSAFS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
    ;
    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  if (AFWREC.AFWFIRST == " " /* First time through*/
   && converseVar.eventKey not enter) /* and Enter was not pressed*/
    ;
    AFWREC.AFWPRCSN = "130 "; /* Process number*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    ;
  end
  ;
  ;
  ;
end // end AF0P130

// Reset hilght flds; disp pop-up
Function AF0P140()
   /* ------------------------------------------------------------*/
   /* Reset editable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  ;
  set AF0PM001.PG1FCTCD normal; /* Forecaster cd*/
  set AF0PM001.XSECD normal; /* Sesn cd*/
  set AF0PM001.XSNYR normal; /* Sesn yr*/
  set AF0PM001.XPRCD normal; /* Product Type cd*/
  set AF0PM001.XGACD normal; /* Gender Age cd*/
  set AF0PM001.XPLCD normal; /* Product Line cd*/
  set AF0PM001.XPCCD normal; /* Category cd*/
  set AF0PM001.XSUCD normal; /* Silhouette cd*/
  set AF0PM001.SY1STNBR normal; /* Style no.*/
  set AF0PM001.XDVCD normal; /* Division cd*/
  set AF0PM001.XOWCD normal; /* Owner Group cd*/
  set AF0PM001.AF0PM-BLNK-FL normal; /* Blank indicator*/
  ;
  AFWREC.AFWIDX1 = 1;
  while (AFWREC.AFWIDX1 <= 10)
    if (AF0PM001.AF0PMSZ1[AFWIDX1] != " ")
      set AF0PM001.AF0PMFP1[AFWIDX1] normal;
    end
    if (AF0PM001.AF0PMSZ2[AFWIDX1] != " ")
      set AF0PM001.AF0PMFP2[AFWIDX1] normal;
    end
    if (AF0PM001.AF0PMSZ3[AFWIDX1] != " ")
      set AF0PM001.AF0PMFP3[AFWIDX1] normal;
    end
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
  end
  ;
  AF0PM001.XXXPRCNM = "AF0P    "; /* Reset process name*/
  ;
  set AF0PM001.AF0PM-SIZE-PCT-MSG[1] initialAttributes;
  set AF0PM001.AF0PM-SIZE-PCT-TTL[1] initialAttributes;
  set AF0PM001.AF0PM-SIZE-PCT-MSG[2] initialAttributes;
  set AF0PM001.AF0PM-SIZE-PCT-TTL[2] initialAttributes;
  set AF0PM001.AF0PM-SIZE-PCT-MSG[3] initialAttributes;
  set AF0PM001.AF0PM-SIZE-PCT-TTL[3] initialAttributes;
  set AF0PM001.CATOAP initialAttributes; /* Commarea TO application*/
  set AF0PM001.CAITEM initialAttributes; /* Commarea application data*/
  ;
  ;
   /* *==========================================**/
   /* *  If no pop-up windows requested, return  **/
   /* *==========================================**/
  ;
  if (AF0PM001.XSECD == "?"
   || AF0PM001.XPRCD == "?"
   || AF0PM001.XGACD == "?"
   || AF0PM001.XPLCD == "?"
   || AF0PM001.XPCCD == "?"
   || AF0PM001.XSUCD == "?"
   || AF0PM001.XDVCD == "?"
   || AF0PM001.XOWCD == "?")
    ;
    if (converseVar.eventKey not enter) /* Enter key not pressed*/
      AFWREC.AFWPRCSN = "140 "; /* Process number*/
      converseLib.validationFailed(4); /* Indicate key not valid*/
      exit stack; /* Exit to display map*/
    end
    ;
  else
    ;
    AF0PW01.AF0PWPND = " "; /* Deactivate pop-up window ind*/
    return; /* Exit to next process*/
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XSECD   * Season yr*/
   /* *============================**/
  ;
  if (AF0PM001.XSECD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSECD = AF0PM001.XSECD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSE(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSECD == "?") /* Check results*/
      XP1REC.XSECD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0PM001.XSECD = XP1REC.XSECD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XPRCD   * Product Type cd*/
   /* *============================**/
  ;
  if (AF0PM001.XPRCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPRCD = AF0PM001.XPRCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPR(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPRCD == "?") /* Check results*/
      XP1REC.XPRCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0PM001.XPRCD = XP1REC.XPRCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XGACD   * Gender/Age cd*/
   /* *============================**/
  ;
  if (AF0PM001.XGACD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XGACD = AF0PM001.XGACD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSGA(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XGACD == "?") /* Check results*/
      XP1REC.XGACD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0PM001.XGACD = XP1REC.XGACD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XPLCD   * Product Line cd*/
   /* *============================**/
  ;
  if (AF0PM001.XPLCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPLCD = AF0PM001.XPLCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPL(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPLCD == "?") /* Check results*/
      XP1REC.XPLCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0PM001.XPLCD = XP1REC.XPLCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XPCCD   * Category cd*/
   /* *============================**/
  ;
  if (AF0PM001.XPCCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XPCCD = AF0PM001.XPCCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSPC(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XPCCD == "?") /* Check results*/
      XP1REC.XPCCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0PM001.XPCCD = XP1REC.XPCCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *=============================**/
   /* *  Pop-up Window for XSUCD    * Sihouette cd*/
   /* *=============================**/
  ;
  ;
  if (AF0PM001.XSUCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XSUCD = AF0PM001.XSUCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSSU(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XSUCD == "?") /* Check results*/
      XP1REC.XSUCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0PM001.XSUCD = XP1REC.XSUCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XDVCD   * Division cd*/
   /* *============================**/
  ;
  if (AF0PM001.XDVCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XDVCD = AF0PM001.XDVCD; /* Set XP1REC field*/
    XP1REC.XGPCD = "03"; /* Display Apparel only*/
    ;
    XSAFSDV(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XDVCD == "?") /* Check results*/
      XP1REC.XDVCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0PM001.XDVCD = XP1REC.XDVCD; /* Move selected code to map*/
      AF0PM001.XDVABRV = XP1REC.XDVABRV; /* Move selected abrv to map*/
    end
    ;
  end
  ;
  ;
   /* *============================**/
   /* *  Pop-up Window for XOWCD   * Owner Group Cd*/
   /* *============================**/
  ;
  if (AF0PM001.XOWCD == "?") /* Pop-up window requested*/
    ;
    XP1REC.XOWCD = AF0PM001.XOWCD; /* Set XP1REC field*/
    XP1REC.XGACD = "03"; /* Display Apparel only*/
    ;
    XSAFSOW(); /* Pop-up window func requested*/
    ;
    if (XP1REC.XOWCD == "?") /* Check results*/
      XP1REC.XOWCD = " "; /* Space out invalid data*/
    else /* Else*/
      AF0PM001.XOWCD = XP1REC.XOWCD; /* Move selected code to map*/
    end
    ;
  end
  ;
  ;
  ;
   /* *================================**/
   /* *  Reset Map, Redisplay Changes  **/
   /* *================================**/
  ;
  ;
  converseLib.clearScreen();
   /* Reset screen before display*/
  AF0PW01.AF0PWPND = "Y"; /* Activate pop-up window ind*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0P140

// Verify Entered Data
Function AF0P150()
   /* ------------------------------------------------------------*/
   /* Verify if a valid request to scroll was entered.*/
   /* Verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or Scroll forward request*/
    ;
    AF0P151(); /* Verify scroll request*/
    ;
    if (converseVar.validationMsgNum != 0) /* Errors found*/
      exit stack; /* Exit to redisplay map*/
    end
    ;
  else
    ;
    if (converseVar.eventKey is pf5)
      ;
      AFWREC.AFWIDX1 = 1;
      ;
      while (AFWREC.AFWIDX1 <= 10)
        if (AF0PM001.AF0PMOG[1] != "**")
          if (AF0PM001.AF0PMBK1[AFWIDX1] != 0
           || AF0PM001.AF0PMFP1[AFWIDX1] != 0)
            AF0PM001.AF0PMFP1[AFWIDX1] = AF0PM001.AF0PMBK1[AFWIDX1];
          end
        end
        if (AF0PM001.AF0PMOG[2] != "**")
          if (AF0PM001.AF0PMBK2[AFWIDX1] != 0
           || AF0PM001.AF0PMFP2[AFWIDX1] != 0)
            AF0PM001.AF0PMFP2[AFWIDX1] = AF0PM001.AF0PMBK2[AFWIDX1];
          end
        end
        if (AF0PM001.AF0PMOG[3] != "**")
          if (AF0PM001.AF0PMBK3[AFWIDX1] != 0
           || AF0PM001.AF0PMFP3[AFWIDX1] != 0)
            AF0PM001.AF0PMFP3[AFWIDX1] = AF0PM001.AF0PMBK3[AFWIDX1];
          end
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
        ;
      end
    end
    ;
  end
  ;
  AF0P152();
  ;
  if (AFWREC.AFWSWR == "Y") /* Selection criteria changed*/
    exit stack; /* Go back to start of applic*/
  end
  ;
  ;
  ;
end // end AF0P150

// Verify Scroll Request
Function AF0P151()
   /* ------------------------------------------------------------*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && AFWREC.AFWTSP < 2)          /* and no previous pages*/
    ;
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && AFWREC.AFWTSP >= AFWREC.TA5TSQIX) /* and no more pages*/
    ;
    AFWREC.AFWPRCSN = "151 "; /* Process number*/
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
  ;
end // end AF0P151

// Verify Selection Criteria
Function AF0P152()
   /* *************************************************************/
   /* ***** E D I T    S E L E C T I O N    C R I T E R I A  ******/
   /* *****                                                  ******/
   /* ***** Compare selection criteria on screen to data on  ******/
   /* ***** working storage  record: if any has changed,     ******/
   /* ***** validate all selection criteria fields and turn  ******/
   /* ***** on switch which allows later processing to       ******/
   /* ***** re-load with newly selected data.                ******/
   /* *****                                                  ******/
   /* *************************************************************/
  ;
  AFWREC.AFWFIRST = "N"; /* initialize switch to 'OFF'*/
  AFWREC.AFWSWR = "N"; /* initialize switch to 'OFF'*/
  AF0PW01.AF0PWFCI = "N"; /* initialize switch to 'OFF'*/
  XP1REC.XP1MNO = 0; /* initialize msg hold area*/
  ;
  ;
  ;
   /* *============================**/
   /* *  Check Selection Criteria  **/
   /* *============================**/
  ;
  ;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* AF0PW01.AF0PWYR = XP1REC.XSNYR - 1900;/* Get year*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  AF0PW01.AF0PWYR1 = XP1REC.XSNYR; /* store xp1rec snyr*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  ;
  ;
  if (AF0PW01.AF0PW-BLNK-FL != AF0PM001.AF0PM-BLNK-FL /* blank indicator*/
   || AF0PW01.AF0PWXOW != AF0PM001.XOWCD              /* OWNER GROUP.*/
   || AF0PW01.AF0PWSTY != AF0PM001.SY1STNBR           /* Style no.*/
   || AF0PW01.AF0PWDIV != AF0PM001.XDVCD              /* DIV cd*/
   || AF0PW01.AF0PWSIL != AF0PM001.XSUCD              /* SIL cd*/
   || AF0PW01.AF0PWCAT != AF0PM001.XPCCD              /* CAT cd*/
   || AF0PW01.AF0PWLIN != AF0PM001.XPLCD              /* PR LIN cd*/
   || AF0PW01.AF0PWGA != AF0PM001.XGACD               /* G/A cd*/
   || AF0PW01.AF0PWTYP != AF0PM001.XPRCD              /* PR TYP  cd*/
   || AF0PW01.AF0PWYR != AF0PM001.XSNYR               /* Season yr*/
   /* --------------  Y2K OUT BEGIN*/
   /* ------------------ */
   /**/
   /* OR AF0PM001.XSNYR EQ 0*/
   /**/
   /* ----------------  Y2K OUT END*/
   /* ------------------ */
   /* Map fld zeroed out*/
   || XP1REC.XSECD != AF0PM001.XSECD                  /* Season cd*/
   || AF0PM001.XSECD == " "                           /* Map fld spaced out*/
   || AF0PW01.AF0PWUSR != AF0PM001.PG1FCTCD           /* Forecaster cd*/
   || AF0PW01.AF0PWBKV != AF0PM001.AF0PMBKV           /* Book variance*/
   || AF0PW01.AF0PWBLV != AF0PM001.AF0PMBLV)          /* BLA variance*/
    ;
    AFWREC.AFWSWR = "Y"; /* New criteria entered*/
    ;
  end
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || AFWREC.AFWSWR == "Y")
       /* NEXT SENTENCE*/
  else
    AFWREC.AFWIDX1 = 1;
    while (AFWREC.AFWIDX1 <= 10)
      if (AF0PW02.AF0PWFP1[AFWIDX1] != AF0PM001.AF0PMFP1[AFWIDX1]
       || AF0PW02.AF0PWFP2[AFWIDX1] != AF0PM001.AF0PMFP2[AFWIDX1]
       || AF0PW02.AF0PWFP3[AFWIDX1] != AF0PM001.AF0PMFP3[AFWIDX1])
        AF0PW01.AF0PWFCI = "Y"; /* New forecast entered*/
        AFWREC.AFWSWU = "N"; /* Confirmation map not sent*/
        AFWREC.AFWIDX1 = 10; /* end loop*/
      end
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* increment counter*/
      ;
    end
  end
  ;
  ;
   /* *===========================**/
   /* *  Edit Selection Criteria  **/
   /* *===========================**/
  ;
  ;
  AF0PS20(); /* Edit season yr*/
  if (XP1REC.XP1MNO == 0) /* Validation error present*/
    AF0PS31(); /* Edit blank only indicator*/
    AF0PS30(); /* Edit owner group cd*/
    AF0PS26(); /* Edit forecast percents*/
    AF0PS13(); /* Edit style no.*/
    AF0PS23(); /* Edit division cd*/
    AF0PS17(); /* Edit silhouette cd*/
    AF0PS18(); /* Edit category cd*/
    AF0PS24(); /* Edit product line cd*/
    AF0PS19(); /* Edit gender/age cd*/
    AF0PS25(); /* Edit product type cd*/
    AF0PS21(); /* Edit season cd*/
    AF0PS22(); /* Edit forecaster cd*/
  end
  ;
  AF0PW01.AF0PWBKV = AF0PM001.AF0PMBKV; /* Book variance*/
  AF0PW01.AF0PWBLV = AF0PM001.AF0PMBLV; /* BLA variance*/
  ;
  ;
  if (XP1REC.XP1MNO != 0) /* Validation error present*/
    if (XP1REC.XP1MNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(XP1REC.XP1MNO);
    end /* Set message for display*/
    AFWREC.AFWSWR = "N"; /* Do not select new data*/
    ;
    if (AF0PW01.AF0PWFCI != "Y") /* forecast % not changed*/
      AF0PS01(); /* Clear map detail area*/
    end
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
end // end AF0P152

// Process Valid Request
Function AF0P160()
  ;
   /* F EZEAID IS PF5                ; copy bookings data*/
  ;
   /* IF AF0PW02.AF0PWLD1 NE '*'    ; valid line*/
    /* MOVE 1 TO AFWREC.AFWIDX1    ; initialize counter*/
    /* WHILE AFWIDX1 LE 10;*/
      /* IF AF0PM001.AF0PMBK1(AFWIDX1) NE 0;*/
   /* MOVE AF0PM001.AF0PMBK1(AFWIDX1)TOAF0PM001.AF0PMFP1(AFWIDX1);*/
    /* END ;*/
   /* MOVE AF0PM001.AF0PMFP1(AFWIDX1)TO AF0PW02.AF0PWFP1(AFWIDX1);*/
      /* AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;*/
    /* END ;*/
   /* END ;*/
   /* ;*/
   /* IF AF0PW02.AF0PWLD2 NE '*'    ; valid line*/
    /* MOVE 1 TO AFWREC.AFWIDX1    ; initialize counter*/
    /* WHILE AFWIDX1 LE 10;*/
      /* IF AF0PM001.AF0PMBK2(AFWIDX1) NE 0;*/
   /* MOVE AF0PM001.AF0PMBK2(AFWIDX1)TOAF0PM001.AF0PMFP2(AFWIDX1);*/
      /* END ;*/
   /* MOVE AF0PM001.AF0PMFP2(AFWIDX1)TOAF0PW02.AF0PWFP2(AFWIDX1);*/
      /* AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;*/
    /* END ;*/
   /* END ;*/
   /* ;*/
   /* IF AF0PW02.AF0PWLD3 NE '*'    ; valid line*/
     /* MOVE 1 TO AFWREC.AFWIDX1    ; initialize counter*/
     /* WHILE AFWIDX1 LE 10;*/
       /* IF AF0PM001.AF0PMBK3(AFWIDX1) NE 0;*/
   /* MOVE AF0PM001.AF0PMBK3(AFWIDX1)TOAF0PM001.AF0PMFP3(AFWIDX1);*/
       /* END ;*/
   /* MOVE AF0PM001.AF0PMFP3(AFWIDX1)TOAF0PW02.AF0PWFP3(AFWIDX1);*/
       /* AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;*/
     /* END ;*/
   /* END ;*/
   /* ;*/
   /* EZERTN                        ; Return to previous process*/
   /* ;*/
   /* ND ;*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a scroll request, adjust temporary storage page number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP - 1; /* Decrement page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    AFWREC.AFWTSP = AFWREC.AFWTSP + 1; /* Increment page number*/
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
end // end AF0P160

// Clear map detail area
Function AF0PS01()
   /* ------------------------------------------------------------*/
   /* Protect,Darken AF0PM001 Map Detail Area.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  ;
  while (AFWREC.AFWIDX1 <= 3) /* Process all map flds.*/
    ;
    if (AFWREC.AFWFIRST == " ") /* first time*/
      set AF0PM001.AF0PMHK[AFWIDX1] skip, invisible; /* Bookings hdg*/
      set AF0PM001.AF0PMHF[AFWIDX1] skip, invisible; /* Forecast hdg*/
      set AF0PM001.AF0PMLT[AFWIDX1] skip, invisible; /* BLA total*/
      set AF0PM001.AF0PMHS[AFWIDX1] skip, invisible; /* Style hdg*/
    end
    set AF0PM001.AF0PMST[AFWIDX1] skip, invisible; /* Style*/
    set AF0PM001.AF0PMSD[AFWIDX1] skip, invisible; /* Style desc*/
    set AF0PM001.AF0PMHO[AFWIDX1] skip, invisible; /* Owner Group*/
    set AF0PM001.AF0PMOG[AFWIDX1] skip, invisible; /* Owner Group*/
    set AF0PM001.AF0PMHT[AFWIDX1] skip, invisible; /* Style shdg 1*/
    set AF0PM001.AF0PMHB[AFWIDX1] skip, invisible; /* Style shdg 2*/
    set AF0PM001.AF0PMHL[AFWIDX1] skip, invisible; /* BLA hdg*/
    set AF0PM001.AF0PMKT[AFWIDX1] skip, invisible; /* Bookings total*/
    set AF0PM001.AF0PMFT[AFWIDX1] skip, invisible; /* Forecast total*/
    set AF0PM001.AF0PMKD[AFWIDX1] skip, invisible; /* Pcent Booked*/
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  ;
  while (AFWREC.AFWIDX1 <= 10) /* Process all map flds.*/
    ;
    if (AFWREC.AFWFIRST == " ") /* first time*/
      set AF0PM001.AF0PMSZ1[AFWIDX1] skip, invisible; /* Size desc hdg*/
    end
    ;
    set AF0PM001.AF0PMSZ2[AFWIDX1] skip, invisible; /* Size desc hdg*/
    set AF0PM001.AF0PMSZ3[AFWIDX1] skip, invisible; /* Size desc hdg*/
    ;
    set AF0PM001.AF0PMBK1[AFWIDX1] skip, invisible; /* Bookings Line 1*/
    set AF0PM001.AF0PMFP1[AFWIDX1] skip, invisible; /* Forecast Line 1*/
    set AF0PM001.AF0PMBL1[AFWIDX1] skip, invisible; /* BLA Line 1*/
    ;
    set AF0PM001.AF0PMBK2[AFWIDX1] skip, invisible; /* Bookings Line 2*/
    set AF0PM001.AF0PMFP2[AFWIDX1] skip, invisible; /* Forecast Line 2*/
    set AF0PM001.AF0PMBL2[AFWIDX1] skip, invisible; /* BLA Line 2*/
    ;
    set AF0PM001.AF0PMBK3[AFWIDX1] skip, invisible; /* Bookings Line 3*/
    set AF0PM001.AF0PMFP3[AFWIDX1] skip, invisible; /* Forecast Line 3*/
    set AF0PM001.AF0PMBL3[AFWIDX1] skip, invisible; /* BLA Line 3*/
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0PS01

// Obtain size scale/descriptions
Function AF0PS02()
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain key information from DPRODG.VSYCLR01 thru XSPG201.*/
   /* ------------------------------------------------------------*/
  ;
  set PG2REC empty; /* Row storage area*/
  ;
  PG2REC.XGPCD = XP1REC.XGPCD; /* ===> GPC*/
  PG2REC.SY1STNBR = AF2REC.SY1STNBR; /* ===> color code*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  ;
  XSPG201(); /* ======>verify first row on table*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* Row not found*/
    ;
    AFWREC.AFWPRCSN = "S02"; /* Module identification*/
    set AF0PM001.SY1STNBR cursor, bold; /* Highlight field*/
    converseLib.validationFailed(10); /* Indicate error message*/
    exit stack; /* Exit to redisplay map*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Obtain valid sizes descriptions for a given scale*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1PGMNM = "AF0PS02 "; /* program name*/
  TA1REC.TA1MAP = "AF0PM001"; /* processing map*/
  ;
  set SY4REC empty;
  SY4REC.SY4SZSCL = AF2REC.SY4SZSCL;
  ;
  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* call for size ids*/
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    /* CONTINUE*/
  else
    ;
    ;
    if (sysVar.errorCode == "00000000" /* successful call*/
     && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
      ;
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
      ;
    else
      ;
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      ;
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
      ;
    end
    ;
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "S02 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
    TA1REC.TA1TBLKE = AF2REC.AF2KEY; /* Table key*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
    ;
    exit stack; /* Return to previous process*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Store all retrieved size descriptions.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX4 = 1; /* Reset loop index*/
  AFWREC.AFWIDX5 = 0; /* Reset store index*/
  ;
  ;
  while (AFWREC.AFWIDX4 <= 10) /* Find valid sizes on afsty01*/
    ;
    AFWREC.AFWIDX3 = 0;
    if (AF2REC.SY5SZID[AFWIDX4] > 0) /* Valid size found*/
      ;
      AFWREC.AFWIDX3 = AF2REC.SY5SZID[AFWIDX4]; /* size id*/
      AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Add store index*/
      if (AFWREC.AFWIDX5 <= 10) /* Within save array limits*/
        ;
        if (AFWREC.AFWIXM == 1) /* Map line group 1*/
          AF0PW02.AF0PWSN1[AFWIDX5] = AF2REC.SY5SZID[AFWIDX4];
          AF0PW02.AF0PWSZ1[AFWIDX5] = SY4REC.SY4IDDSC[AFWIDX3];
        else
          if (AFWREC.AFWIXM == 2) /* Map line group 2*/
            AF0PW02.AF0PWSN2[AFWIDX5] = AF2REC.SY5SZID[AFWIDX4];
            AF0PW02.AF0PWSZ2[AFWIDX5] = SY4REC.SY4IDDSC[AFWIDX3];
          else
            if (AFWREC.AFWIXM == 3) /* Map line group 3*/
              AF0PW02.AF0PWSN3[AFWIDX5] = AF2REC.SY5SZID[AFWIDX4];
              AF0PW02.AF0PWSZ3[AFWIDX5] = SY4REC.SY4IDDSC[AFWIDX3];
            end
          end
        end
        ;
      end
      ;
    end
    ;
    AFWREC.AFWIDX4 = AFWREC.AFWIDX4 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Center all retrieved size descriptions within save field*/
   /* ------------------------------------------------------------*/
  ;
  ;
  AFWREC.AFWIDX5 = 1; /* Set loop index*/
  ;
  ;
  while (AFWREC.AFWIDX5 <= 10) /* Center size descriptions*/
    ;
    AF0PW01.AF0PWSDS = " "; /* Initialize wk area*/
    AF0PW01.AF0PWSDC = " "; /* Initialize wk area*/
    ;
    if (AFWREC.AFWIXM == 1) /* First line group*/
      AF0PW01.AF0PWSDS = AF0PW02.AF0PWSZ1[AFWIDX5];
    else
      if (AFWREC.AFWIXM == 2) /* Second line group*/
        AF0PW01.AF0PWSDS = AF0PW02.AF0PWSZ2[AFWIDX5];
      else
        if (AFWREC.AFWIXM == 3) /* Third line group*/
          AF0PW01.AF0PWSDS = AF0PW02.AF0PWSZ3[AFWIDX5];
        end
      end
    end
    ;
    if (AF0PW01.AF0PWSD5 != " ")
      if (AF0PW01.AF0PWSD4 != " ")
        if (AF0PW01.AF0PWSD3 != " ")
          if (AF0PW01.AF0PWSD2 != " ")
            if (AF0PW01.AF0PWSD1 != " ")
              AF0PW01.AF0PWSC1 = AF0PW01.AF0PWSD1;
              AF0PW01.AF0PWSC2 = AF0PW01.AF0PWSD2;
              AF0PW01.AF0PWSC3 = AF0PW01.AF0PWSD3;
              AF0PW01.AF0PWSC4 = AF0PW01.AF0PWSD4;
              AF0PW01.AF0PWSC5 = AF0PW01.AF0PWSD5;
            else
              AF0PW01.AF0PWSC2 = AF0PW01.AF0PWSD2;
              AF0PW01.AF0PWSC3 = AF0PW01.AF0PWSD3;
              AF0PW01.AF0PWSC4 = AF0PW01.AF0PWSD4;
              AF0PW01.AF0PWSC5 = AF0PW01.AF0PWSD5;
            end
          else
            AF0PW01.AF0PWSC2 = AF0PW01.AF0PWSD3;
            AF0PW01.AF0PWSC3 = AF0PW01.AF0PWSD4;
            AF0PW01.AF0PWSC4 = AF0PW01.AF0PWSD5;
          end
        else
          AF0PW01.AF0PWSC3 = AF0PW01.AF0PWSD4;
          AF0PW01.AF0PWSC4 = AF0PW01.AF0PWSD5;
        end
      else
        AF0PW01.AF0PWSC3 = AF0PW01.AF0PWSD5;
      end
      ;
      if (AFWREC.AFWIXM == 1) /* First line group*/
        AF0PW02.AF0PWSZ1[AFWIDX5] = AF0PW01.AF0PWSDC;
      else
        if (AFWREC.AFWIXM == 2) /* Second line group*/
          AF0PW02.AF0PWSZ2[AFWIDX5] = AF0PW01.AF0PWSDC;
        else
          if (AFWREC.AFWIXM == 3) /* third line group*/
            AF0PW02.AF0PWSZ3[AFWIDX5] = AF0PW01.AF0PWSDC;
          end
        end
      end
      ;
    end
    ;
    AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1; /* Loop through*/
    ;
  end
  ;
  ;
  ;
end // end AF0PS02

// Process/store style data
Function AF0PS03()
  ;
   /* ------------------------------------------------------------*/
   /* Store Style Name / Description in Map wk area.*/
   /* ------------------------------------------------------------*/
  ;
  if (AFWREC.AFWIXM == 1) /* First line group*/
    ;
    AF0PW02.AF0PWST1 = PG2REC.SY1STNBR; /* style*/
    AF0PW02.AF0PWSS1 = PG2REC.SY1STYNM; /* style desc*/
    AF0PW02.AF0PWDM1 = PG2REC.XDMCD; /* dimension*/
    AF0PW02.AF0PWFT1 = AF2REC.AF2FSTDL; /* fcst $ total*/
    AF0PW02.AF0PWOG1 = AF2REC.XOWCD; /* owner group*/
    ;
  else
    ;
    if (AFWREC.AFWIXM == 2) /* Second line group*/
      ;
      AF0PW02.AF0PWST2 = PG2REC.SY1STNBR; /* style*/
      AF0PW02.AF0PWSS2 = PG2REC.SY1STYNM; /* style desc*/
      AF0PW02.AF0PWDM2 = PG2REC.XDMCD; /* dimension*/
      AF0PW02.AF0PWFT2 = AF2REC.AF2FSTDL; /* fcst $ total*/
      AF0PW02.AF0PWOG2 = AF2REC.XOWCD; /* owner group*/
      ;
    else
      ;
      if (AFWREC.AFWIXM == 3) /* Third line group*/
        ;
        AF0PW02.AF0PWST3 = PG2REC.SY1STNBR; /* style*/
        AF0PW02.AF0PWSS3 = PG2REC.SY1STYNM; /* style desc*/
        AF0PW02.AF0PWDM3 = PG2REC.XDMCD; /* dimension*/
        AF0PW02.AF0PWFT3 = AF2REC.AF2FSTDL; /* fcst $ total*/
        AF0PW02.AF0PWOG3 = AF2REC.XOWCD; /* fcst $ total*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process DACAST.VAFSIZ01 records for the style.*/
   /* ------------------------------------------------------------*/
  ;
  AF0PS04(); /* Select Set DACAST.VDMANO01 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set first row count*/
    AF0PW01.AF0PWEOF = "N"; /* Reset EOF indicator*/
    while (AF0PW01.AF0PWEOF == "N") /* Until all rows processed*/
      ;
      AF0PS05(); /* Process AFSIZ ROWS*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AF0PW01.AF0PWEOF = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
    AF0PS09(); /* Close DACAST.Vafsiz01 cursor*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Calculate Forecasted figures for the style.*/
   /* ------------------------------------------------------------*/
  ;
  AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
  while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
    ;
    if (AF2REC.SY5SZID[AFWIDX1] > 0) /* Valid size found*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line group*/
        ;
        if (AF2REC.SY5SZID[AFWIDX1] in AF0PW02.AF0PWSN1)
          AF0PW02.AF0PWFP1[sysVar.arrayIndex] = AF2REC.AF2SZPCT[AFWIDX1];
          AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD1[sysVar.arrayIndex];
          AF0PW01.AF0PWQT4 = mathLib.round(AF2REC.AF2SZPCT[AFWIDX1] * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
          AF0PW01.AF0PWQT3 = mathLib.round(AF2REC.AF2FSTDL * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWQT3));
          AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT3;
          AF0PW02.AF0PWFD1[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
        end
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* Second line group*/
          ;
          if (AF2REC.SY5SZID[AFWIDX1] in AF0PW02.AF0PWSN2)
            AF0PW02.AF0PWFP2[sysVar.arrayIndex] = AF2REC.AF2SZPCT[AFWIDX1];
            AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD2[sysVar.arrayIndex];
            AF0PW01.AF0PWQT4 = mathLib.round(AF2REC.AF2SZPCT[AFWIDX1] * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
            AF0PW01.AF0PWQT3 = mathLib.round(AF2REC.AF2FSTDL * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWQT3));
            AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT3;
            AF0PW02.AF0PWFD2[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
          end
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* Third line group*/
            ;
            if (AF2REC.SY5SZID[AFWIDX1] in AF0PW02.AF0PWSN3)
              AF0PW02.AF0PWFP3[sysVar.arrayIndex] = AF2REC.AF2SZPCT[AFWIDX1];
              AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD3[sysVar.arrayIndex];
              AF0PW01.AF0PWQT4 = mathLib.round(AF2REC.AF2SZPCT[AFWIDX1] * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
              AF0PW01.AF0PWQT3 = mathLib.round(AF2REC.AF2FSTDL * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWQT3));
              AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT3;
              AF0PW02.AF0PWFD3[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
            end
            ;
          end
          ;
        end
        ;
      end
      ;
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* ADUJUST BOOKINGS UP AND BLA DOWN BY AIRSPEED*/
   /* ------------------------------------------------------------*/
  ;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
  AF0PS33(); /* Process AIRSPEED  bookings*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Reset Variance qualification indicators.*/
   /* ------------------------------------------------------------*/
  ;
  AF0PW01.AF0PWQBK = "N"; /* Bookings variance ind*/
  AF0PW01.AF0PWQBL = "N"; /* BLA variance ind*/
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Verify if calculated data meets Booked pcent variance norm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0PW01.AF0PWBKV == 0) /* Accept all variances*/
    AF0PW01.AF0PWQBK = "Y"; /* Indicate variance test passed*/
  else
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line group*/
        ;
        if (AF0PW02.AF0PWSN1[AFWIDX1] > 0) /* Valid size found*/
          ;
          AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD1[AFWIDX1];
          AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWBKV * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
          AF0PW01.AF0PWPVR = mathLib.round(AF0PW01.AF0PWQT1 * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWPVR));
          AF0PW01.AF0PWNVR = AF0PW01.AF0PWPVR * -1;
          AF0PW01.AF0PWQT2 = AF0PW02.AF0PWFD1[AFWIDX1];
          AF0PW01.AF0PWQT3 = AF0PW02.AF0PWBK1[AFWIDX1];
          AF0PW01.AF0PWVAR = AF0PW01.AF0PWQT2 - AF0PW01.AF0PWQT3;
          ;
          if (AF0PW01.AF0PWVAR > AF0PW01.AF0PWPVR /* GT positive var*/
           || AF0PW01.AF0PWVAR < AF0PW01.AF0PWNVR) /* LT negative var*/
            ;
            AF0PW01.AF0PWQBK = "Y"; /* Passed variance test*/
            AFWREC.AFWIDX1 = 999; /* Terminate loop*/
            ;
          end
          ;
        end
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* Second line group*/
          ;
          if (AF0PW02.AF0PWSN2[AFWIDX1] > 0) /* Valid size found*/
            ;
            AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD2[AFWIDX1];
            AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWBKV * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
            AF0PW01.AF0PWPVR = mathLib.round(AF0PW01.AF0PWQT1 * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWPVR));
            AF0PW01.AF0PWNVR = AF0PW01.AF0PWPVR * -1;
            AF0PW01.AF0PWQT2 = AF0PW02.AF0PWFD2[AFWIDX1];
            AF0PW01.AF0PWQT3 = AF0PW02.AF0PWBK2[AFWIDX1];
            AF0PW01.AF0PWVAR = AF0PW01.AF0PWQT2 - AF0PW01.AF0PWQT3;
            ;
            if (AF0PW01.AF0PWVAR > AF0PW01.AF0PWPVR /* GT positive var*/
             || AF0PW01.AF0PWVAR < AF0PW01.AF0PWNVR) /* LT negative var*/
              ;
              AF0PW01.AF0PWQBK = "Y"; /* Passed variance test*/
              AFWREC.AFWIDX1 = 999; /* Terminate loop*/
              ;
            end
            ;
          end
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* Third line group*/
            ;
            if (AF0PW02.AF0PWSN3[AFWIDX1] > 0) /* Valid size found*/
              ;
              AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD3[AFWIDX1];
              AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWBKV * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
              AF0PW01.AF0PWPVR = mathLib.round(AF0PW01.AF0PWQT1 * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWPVR));
              AF0PW01.AF0PWNVR = AF0PW01.AF0PWPVR * -1;
              AF0PW01.AF0PWQT2 = AF0PW02.AF0PWFD3[AFWIDX1];
              AF0PW01.AF0PWQT3 = AF0PW02.AF0PWBK3[AFWIDX1];
              AF0PW01.AF0PWVAR = AF0PW01.AF0PWQT2 - AF0PW01.AF0PWQT3;
              ;
              if (AF0PW01.AF0PWVAR > AF0PW01.AF0PWPVR /* GT positive var*/
               || AF0PW01.AF0PWVAR < AF0PW01.AF0PWNVR) /* LT negative var*/
                ;
                AF0PW01.AF0PWQBK = "Y"; /* Passed variance test*/
                AFWREC.AFWIDX1 = 999; /* Terminate loop*/
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
      end
      ;
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* verify if calculated data meets BLA pcent variance norm.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0PW01.AF0PWBLV == 0) /* Accept all variances*/
    AF0PW01.AF0PWQBL = "Y"; /* Indicate variance test passed*/
  else
    ;
    AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
    while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
      ;
      if (AFWREC.AFWIXM == 1) /* First line group*/
        ;
        if (AF0PW02.AF0PWSN1[AFWIDX1] > 0) /* Valid size found*/
          ;
          AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD1[AFWIDX1];
          AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWBLV * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
          AF0PW01.AF0PWPVR = mathLib.round(AF0PW01.AF0PWQT1 * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWPVR));
          AF0PW01.AF0PWNVR = AF0PW01.AF0PWPVR * -1;
          AF0PW01.AF0PWQT2 = AF0PW02.AF0PWFD1[AFWIDX1];
          AF0PW01.AF0PWQT3 = AF0PW02.AF0PWBL1[AFWIDX1];
          AF0PW01.AF0PWVAR = AF0PW01.AF0PWQT2 - AF0PW01.AF0PWQT3;
          ;
          if (AF0PW01.AF0PWVAR > AF0PW01.AF0PWPVR /* GT positive var*/
           || AF0PW01.AF0PWVAR < AF0PW01.AF0PWNVR) /* LT negative var*/
            ;
            AF0PW01.AF0PWQBL = "Y"; /* Passed variance test*/
            AFWREC.AFWIDX1 = 999; /* Terminate loop*/
            ;
          end
          ;
        end
        ;
      else
        ;
        if (AFWREC.AFWIXM == 2) /* Second line group*/
          ;
          if (AF0PW02.AF0PWSN2[AFWIDX1] > 0) /* Valid size found*/
            ;
            AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD2[AFWIDX1];
            AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWBLV * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
            AF0PW01.AF0PWPVR = mathLib.round(AF0PW01.AF0PWQT1 * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWPVR));
            AF0PW01.AF0PWNVR = AF0PW01.AF0PWPVR * -1;
            AF0PW01.AF0PWQT2 = AF0PW02.AF0PWFD2[AFWIDX1];
            AF0PW01.AF0PWQT3 = AF0PW02.AF0PWBL2[AFWIDX1];
            AF0PW01.AF0PWVAR = AF0PW01.AF0PWQT2 - AF0PW01.AF0PWQT3;
            ;
            if (AF0PW01.AF0PWVAR > AF0PW01.AF0PWPVR /* GT positive var*/
             || AF0PW01.AF0PWVAR < AF0PW01.AF0PWNVR) /* LT negative var*/
              ;
              AF0PW01.AF0PWQBL = "Y"; /* Passed variance test*/
              AFWREC.AFWIDX1 = 999; /* Terminate loop*/
              ;
            end
            ;
          end
          ;
        else
          ;
          if (AFWREC.AFWIXM == 3) /* Third line group*/
            ;
            if (AF0PW02.AF0PWSN3[AFWIDX1] > 0) /* Valid size found*/
              ;
              AF0PW01.AF0PWQT1 = AF0PW02.AF0PWFD3[AFWIDX1];
              AF0PW01.AF0PWQT4 = mathLib.round(AF0PW01.AF0PWBLV * 0.01, -mathLib.decimals(AF0PW01.AF0PWQT4));
              AF0PW01.AF0PWPVR = mathLib.round(AF0PW01.AF0PWQT1 * AF0PW01.AF0PWQT4, -mathLib.decimals(AF0PW01.AF0PWPVR));
              AF0PW01.AF0PWNVR = AF0PW01.AF0PWPVR * -1;
              AF0PW01.AF0PWQT2 = AF0PW02.AF0PWFD3[AFWIDX1];
              AF0PW01.AF0PWQT3 = AF0PW02.AF0PWBL3[AFWIDX1];
              AF0PW01.AF0PWVAR = AF0PW01.AF0PWQT2 - AF0PW01.AF0PWQT3;
              ;
              if (AF0PW01.AF0PWVAR > AF0PW01.AF0PWPVR /* GT positive var*/
               || AF0PW01.AF0PWVAR < AF0PW01.AF0PWNVR) /* LT negative var*/
                ;
                AF0PW01.AF0PWQBL = "Y"; /* Passed variance test*/
                AFWREC.AFWIDX1 = 999; /* Terminate loop*/
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
      end
      ;
      ;
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
      ;
      ;
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Check if style is qualified for display.*/
   /* ------------------------------------------------------------*/
  ;
  if (AF0PW01.AF0PWQBK == "Y" /* Passed Book variance test*/
   && AF0PW01.AF0PWQBL == "Y") /* Passed BLA variance test*/
    ;
    AF0PW01.AF0PWQUA = "Y"; /* Style is qualified for display*/
    ;
  else
    ;
           /* (Clear calculation wk area)*/
    ;
    if (AFWREC.AFWIXM == 1) /* First line group*/
      ;
      AF0PW02.AF0PWST1 = " "; /* Clear style*/
      AF0PW02.AF0PWOG1 = " "; /* Clear Owner Group*/
      AF0PW02.AF0PWSS1 = " "; /* Clear style desc*/
      AF0PW02.AF0PWFT1 = 0; /* Clear style $ total*/
      move 0 to AF0PW02.AF0PWSN1[1] for all; /* Clear size id array*/
      move "     " to AF0PW02.AF0PWSZ1[1] for all; /* Clear size desc array*/
      move 0 to AF0PW02.AF0PWBK1[1] for all; /* Clear bookings array*/
      move 0 to AF0PW02.AF0PWFD1[1] for all; /* Clear forecast $ array*/
      move 0 to AF0PW02.AF0PWFP1[1] for all; /* Clear forecast % array*/
      move 0 to AF0PW02.AF0PWBL1[1] for all; /* Clear BLA array*/
      /* -----------------------  Y2K OUT BEGIN  ------------------------*/
      /*  */
      move 0 to AF0PW02.AF0PWAS1[1] for all; /* Clear air speed array*/
      /*  */
      /* ------------------------  Y2K OUT END  -------------------------*/
      ;
    else
      ;
      if (AFWREC.AFWIXM == 2) /* Second line group*/
        ;
        AF0PW02.AF0PWST2 = " "; /* Clear style*/
        AF0PW02.AF0PWOG2 = " "; /* Clear Owner Group*/
        AF0PW02.AF0PWSS2 = " "; /* Clear style desc*/
        AF0PW02.AF0PWFT2 = 0; /* Clear style $ total*/
        move 0 to AF0PW02.AF0PWSN2[1] for all; /* Clear size id array*/
        move "     " to AF0PW02.AF0PWSZ2[1] for all; /* Clear size desc array*/
        move 0 to AF0PW02.AF0PWBK2[1] for all; /* Clear bookings array*/
        move 0 to AF0PW02.AF0PWFD2[1] for all; /* Clear forecast $ array*/
        move 0 to AF0PW02.AF0PWFP2[1] for all; /* Clear forecast % array*/
        move 0 to AF0PW02.AF0PWBL2[1] for all; /* Clear BLA array*/
                                  /* -----------------------  Y2K OUT*/
                                   /* BEGIN  ------------------------*/
        /*  */
        move 0 to AF0PW02.AF0PWAS2[1] for all; /* Clear AIR array*/
        /*  */
                                  /* ------------------------  Y2K OUT END*/
                                   /* -------------------------*/
        ;
      else
        ;
        if (AFWREC.AFWIXM == 3) /* Third line group*/
          ;
          AF0PW02.AF0PWST3 = " "; /* Clear style*/
          AF0PW02.AF0PWOG3 = " "; /* Clear Owner Group*/
          AF0PW02.AF0PWSS3 = " "; /* Clear style desc*/
          AF0PW02.AF0PWFT3 = 0; /* Clear style $ total*/
          move 0 to AF0PW02.AF0PWSN3[1] for all; /* Clear size id array*/
          move "     " to AF0PW02.AF0PWSZ3[1] for all; /* Clear size desc array*/
          move 0 to AF0PW02.AF0PWBK3[1] for all; /* Clear bookings array*/
          move 0 to AF0PW02.AF0PWFD3[1] for all; /* Clear forecast $ array*/
          move 0 to AF0PW02.AF0PWFP3[1] for all; /* Clear forecast % array*/
          move 0 to AF0PW02.AF0PWBL3[1] for all; /* Clear BLA array*/
          move 0 to AF0PW02.AF0PWAS3[1] for all; /* Clear AIR array*/
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end AF0PS03

// Select set DACAST.VAFSIZ01
Function AF0PS04()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set VAFSIZ01 empty; /* Clear record work area*/
  ;
  VAFSIZ01.SY-STY-NBR = AF2REC.SY1STNBR; /* Style*/
  VAFSIZ01.SY-COLR-CD-ID = "*"; /* Obtain all colors*/
  VAFSIZ01.XOW-OWN-GRP-CD = AF2REC.XOWCD;
  VAFSIZ01.XDM-DIM-CD = AF2REC.XDMCD; /* dimension cd*/
  VAFSIZ01.XDV-DIV-CD = AF2REC.XDVCD; /* division cd*/
  VAFSIZ01.XSE-SESN-CD = AF2REC.XSECD; /* season cd*/
  VAFSIZ01.XSN-SESN-YR-RNG = AF2REC.XSNYR;
  ;
   /* *--------E V I L  H A R D  C O D E--------**/
  if (VAFSIZ01.XDV-DIV-CD == "05") /* side 1*/
    VAFSIZ01.XDV-DIV-CD = "01"; /* bookings are in domestic*/
  end
   /* *--------E V I L  H A R D  C O D E--------**/
  ;
   /* *==========================**/
   /* *  Access DACAST.VAFSIZ01   **/
   /* *==========================**/
  ;
  try
    call "IO7150" ("S1", SQLCA, VAFSIZ01) {isNoRefresh = yes, isExternal = yes};
  end /* Select table set*/
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S04 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSIZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = VAFSIZ01.VAFSIZ01-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0PS04

// Process DACAST.VAFSIZ01 rows
Function AF0PS05()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=========================**/
   /* *  Access DACAST.VDMANO01 **/
   /* *=========================**/
  ;
  try
    call "IO7150" ("N1", SQLCA, VAFSIZ01) {isNoRefresh = yes, isExternal = yes};
  end /* get next row*/
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      AF0PS32(); /* get price*/
      ;
      if (AFWREC.AFWIDX5 == 1) /* First row retrieved*/
        AFWREC.AFWIDX5 = 99; /* Reset first row count*/
        AF0PS06(); /* Select set DMODEL.VABASM01*/
        ;
        if (converseVar.validationMsgNum == 0) /* No errors found*/
          ;
                    /* (Calculate BLA qtys)*/
          ;
          AF0PW01.AF0PWEF1 = "N"; /* Reset EOF flag*/
          ;
          while (AF0PW01.AF0PWEF1 == "N") /* Process all rows*/
            AF0PS07(); /* Process DMODEL.VABASM01 data*/
            ;
            if (converseVar.validationMsgNum != 0) /* Errors found*/
              AF0PW01.AF0PWEF1 = "Y"; /* Terminate loop*/
            end
            ;
          end
          ;
          AF0PS08(); /* Close DMODEL.VABASM01 cursor*/
        end
        ;
      end
      ;
            /* (Calculate Bookings Qtys - Part 1)*/
      ;
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (VAFSIZ01.SY-SZ-ID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFWREC.AFWIXM == 1) /* First line group*/
            ;
            if (VAFSIZ01.SY-SZ-ID[AFWIDX1] in AF0PW02.AF0PWSN1)
              AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK1[sysVar.arrayIndex];
              AF0PW01.AF0PWQT2 = mathLib.round(VAFSIZ01.AF-BOOK-QTY[AFWIDX1] *               AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
              AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
              AF0PW02.AF0PWBK1[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
            end
            ;
          else
            ;
            if (AFWREC.AFWIXM == 2) /* Second line group*/
              ;
              if (VAFSIZ01.SY-SZ-ID[AFWIDX1] in AF0PW02.AF0PWSN2)
                AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK2[sysVar.arrayIndex];
                AF0PW01.AF0PWQT2 = mathLib.round(VAFSIZ01.AF-BOOK-QTY[AFWIDX1] *                 AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
                AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
                AF0PW02.AF0PWBK2[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
              end
              ;
            else
              ;
              if (AFWREC.AFWIXM == 3) /* Third line group*/
                ;
                if (VAFSIZ01.SY-SZ-ID[AFWIDX1] in AF0PW02.AF0PWSN3)
                  AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK3[sysVar.arrayIndex];
                  AF0PW01.AF0PWQT2 = mathLib.round(VAFSIZ01.AF-BOOK-QTY[AFWIDX1] *                   AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
                  AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
                  AF0PW02.AF0PWBK3[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AF0PW01.AF0PWEOF = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDMANO01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0PS05

// Select set DMODEL.VABASM02
Function AF0PS06()
  ;
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
   /* *=================**/
   /* *  Build DB Keys  **/
   /* *=================**/
  ;
  set PT3REC empty; /* Clear record work area*/
  ;
  PT3REC.XGPCD = XP1REC.XGPCD; /* GPC cd*/
  PT3REC.SY1STNBR = AF2REC.SY1STNBR; /* Style*/
  PT3REC.XDMCD = AF2REC.XDMCD; /* Dimension cd*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE 9999 TO PT3REC.PT3YYMM;     /* Division cd*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  PT3REC.PT3YYMM = 999999; /* Division cd*/
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  ;
  ;
  ;
   /* *==========================**/
   /* *  Access DMODEL.VABASM01  **/
   /* *==========================**/
  ;
  try
    call "VABASM02" ("S2", SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S06 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASM02"; /* Table view name*/
  TA1REC.TA1TBLKE = PT3REC.PT3KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0PS06

// Process DMODEL.VABASM02 rows
Function AF0PS07()
  ;
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* Process fetched row.*/
   /* If end of file, set end of file switch.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DMODEL.vabasm02 **/
   /* *=========================**/
  ;
  try
    call "VABASM02" ("N2", SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/
  ;
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000") /* successful call*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* no sql errors*/
      ;
      if (PT3REC.XOWCD != AF2REC.XOWCD)
        return;
      end
      ;
                /* (Calculate BLA Qtys)*/
      ;
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (PT3REC.SY5SZID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFWREC.AFWIXM == 1) /* First line group*/
            ;
            if (PT3REC.SY5SZID[AFWIDX1] in AF0PW02.AF0PWSN1)
              AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL1[sysVar.arrayIndex];
              AF0PW01.AF0PWQT2 = mathLib.round(PT3REC.PT3AVQT[AFWIDX1] *               AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
              AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
              AF0PW02.AF0PWBL1[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
            end
            ;
          else
            ;
            if (AFWREC.AFWIXM == 2) /* Second line group*/
              ;
              if (PT3REC.SY5SZID[AFWIDX1] in AF0PW02.AF0PWSN2)
                AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL2[sysVar.arrayIndex];
                AF0PW01.AF0PWQT2 = mathLib.round(PT3REC.PT3AVQT[AFWIDX1] *                 AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
                AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
                AF0PW02.AF0PWBL2[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
              end
              ;
            else
              ;
              if (AFWREC.AFWIXM == 3) /* Third line group*/
                ;
                if (PT3REC.SY5SZID[AFWIDX1] in AF0PW02.AF0PWSN3)
                  AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL3[sysVar.arrayIndex];
                  AF0PW01.AF0PWQT2 = mathLib.round(PT3REC.PT3AVQT[AFWIDX1] *                   AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
                  AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
                  AF0PW02.AF0PWBL3[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AF0PW01.AF0PWEF1 = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S07 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DMODEL "; /* Data base name*/
  TA1REC.TA1TBLVU = "VABASM02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0PS07

// Close DMODEL.VABASM02 cursor
Function AF0PS08()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DMODEL.VABASM02 **/
   /* *=========================**/
  ;
  try
    call "VABASM02" ("C2", SQLCA, PT3REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S08 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DMODEL  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VABASM02"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0PS08

// Close DACAST.VAFSIZ01 cursor
Function AF0PS09()
  ;
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=========================**/
   /* *  Access DACAST.Vafsiz01 **/
   /* *=========================**/
  ;
  try
    call "IO7150" ("C1", SQLCA, VAFSIZ01) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S09 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VAFSIZ01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0PS09

// Edit Style no.
Function AF0PS13()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *==============================**/
   /* *  Check Map Input for Spaces  **/
   /* *==============================**/
  ;
  if (AF0PM001.SY1STNBR == " ") /* Style = spaces*/
    AF0PW01.AF0PWSTY = "      "; /* Clear wk map storage*/
    XP1REC.SY1STNBR = "      "; /* Clear save area*/
    XP1REC.SY1SSTNM = "      "; /* Clear save area*/
    return; /* Exit to calling process*/
  end
  ;
  AF0PW01.AF0PWSTY = AF0PM001.SY1STNBR; /* Save to wk map storage*/
  ;
  ;
   /* *==================================**/
   /* *  Check Style in DPRODG.VSYCLR01  **/
   /* *==================================**/
  ;
  AF0PS14(); /* Select set style*/
  ;
  AF0PS15(); /* Validate style*/
  ;
  AF0PS16(); /* Close style cursor*/
  ;
  ;
  ;
end // end AF0PS13

// Select set style
Function AF0PS14()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select set' call.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
   /* *=================**/
   /* *  Build DB keys  **/
   /* *=================**/
  ;
  set PG2REC empty; /* Reset rec work area*/
  ;
  PG2REC.XGPCD = "03"; /* GPC cd*/
  PG2REC.SY1STNBR = AF0PM001.SY1STNBR; /* Style no.*/
  ;
  ;
   /* *===================================**/
   /* *  Select Set from DPRODG.VSYCLR01  **/
   /* *===================================**/
  ;
  try
    call "IO3120" ("SS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S14 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0PS14

// Process retrieved style
Function AF0PS15()
   /* ------------------------------------------------------------*/
   /* Select the target row on a 'select next' call and validate.*/
   /* For validation purposes only one (1) valid row retrieved*/
     /* will be enough to satisfy the existence check.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("SN", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If call successful, process retrieved row.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Return code normal*/
                     /* (Field is valid)*/
      XP1REC.SY1STNBR = AF0PM001.SY1STNBR; /* Save to wk st*/
      AF0PM001.SY1SSTNM = PG2REC.SY1SSTNM; /* Move to map*/
      XP1REC.SY1SSTNM = PG2REC.SY1SSTNM; /* Save to wk st*/
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* No data found*/
                    /* (Field in error)*/
      set AF0PM001.SY1STNBR cursor, bold; /* Highlight field*/
      XP1REC.XP1MNO = 33; /* Indicate not found*/
      AFWREC.AFWPRCSN = "S15 "; /* Process number*/
      XP1REC.SY1STNBR = " "; /* Space out wk storage*/
      return; /* Exit to calling rtn*/
      ;
    end
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* Resource not available*/
      converseLib.validationFailed(11); /* Indicate not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
    else
      converseLib.validationFailed(10); /* Indicate system error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      converseLib.clearScreen();
       /* Clear screen before redisplay*/
    end
    ;
  end
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S15 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "GET DPRODG.VSYCLR01 ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
  ;
end // end AF0PS15

// Close style cursor
Function AF0PS16()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  try
    call "IO3120" ("CS", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close set*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to calling process*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to calling process*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  AFWREC.AFWPRCSN = "S16 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYCLR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  converseLib.validationFailed(10); /* Indicate system error*/
  ;
  converseLib.clearScreen();
   /* Clear screen before redisplay*/
  ;
  ;
  ;
end // end AF0PS16

// Edit Silhouette cd
Function AF0PS17()
  if (AF0PM001.XSUCD == " ") /* Field eq spaces*/
    AF0PW01.AF0PWSIL = " "; /* Space out save area*/
    XP1REC.XSUCD = " "; /* Space out save area*/
    XP1REC.XSUDESC = " "; /* Space out save area*/
    XP1REC.XSUABRV = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0PW01.AF0PWSIL = AF0PM001.XSUCD; /* save to wk map storage*/
  ;
  ;
  if (AF0PM001.XSUCD in XSUTBL.XSUCD)
    ;
    if (XSUTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XSUTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                      /* (field is valid)*/
      XP1REC.XSUCD = AF0PM001.XSUCD; /* save to wk storage*/
      XP1REC.XSUDESC = XSUTBL.XSUDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XSUABRV = XSUTBL.XSUABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S17 "; /* Process number*/
  set AF0PM001.XSUCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 34; /* indicate error message*/
  XP1REC.XSUDESC = " "; /* To wk storage*/
  XP1REC.XSUABRV = " "; /* To wk storage*/
  ;
  ;
  ;
end // end AF0PS17

// Edit Category cd
Function AF0PS18()
  ;
  ;
  if (AF0PM001.XPCCD == " ") /* Map fld spaces*/
    AF0PW01.AF0PWCAT = " "; /* Space out save area*/
    XP1REC.XPCCD = " "; /* Space out save area*/
    XP1REC.XPCABRV = " "; /* Space out save area*/
    XP1REC.XPCDESC = " "; /* Space out save area*/
    return; /* Return to calling routine*/
  end
  ;
  AF0PW01.AF0PWCAT = AF0PM001.XPCCD; /* save to wk map storage*/
  ;
  ;
  if (AF0PM001.XPCCD in XPCTBL.XPCCD)
    ;
    if (XPCTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPCTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                       /* (field is valid)*/
      XP1REC.XPCCD = AF0PM001.XPCCD; /* save to wk storage*/
      XP1REC.XPCDESC = XPCTBL.XPCDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XPCABRV = XPCTBL.XPCABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S18 "; /* Process number*/
  set AF0PM001.XPCCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 35; /* indicate error message*/
  XP1REC.XPCDESC = " "; /* To wk storage*/
  XP1REC.XPCABRV = " "; /* To wk storage*/
  ;
  ;
  ;
end // end AF0PS18

// Edit Gender/Age cd
Function AF0PS19()
  if (AF0PM001.XGACD == " ") /* Field eq spaces*/
    AF0PW01.AF0PWGA = " "; /* Space out save area*/
    XP1REC.XGACD = " "; /* Space out save area*/
    XP1REC.XGADESC = " "; /* Space out save area*/
    XP1REC.XGAABRV = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0PW01.AF0PWGA = AF0PM001.XGACD; /* save to wk map storage*/
  ;
  ;
  if (AF0PM001.XGACD in XGATBL.XGACD)
    ;
    if (XGATBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XGATBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                      /* (field is valid)*/
      XP1REC.XGACD = AF0PM001.XGACD; /* save to wk storage*/
      XP1REC.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XGAABRV = XGATBL.XGAABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S19 "; /* Process number*/
  set AF0PM001.XGACD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 36; /* indicate error message*/
  XP1REC.XGADESC = " "; /* To wk storage*/
  XP1REC.XGAABRV = " "; /* To wk storage*/
  ;
  ;
  ;
end // end AF0PS19

// Edit Season yr
Function AF0PS20()
  ;
  ;
  AF0PW01.AF0PWXSY = 0; /* initialize xsnyr wk area*/
  AF0PW01.AF0PWXSY = AF0PM001.XSNYR; /* move to wk area*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* AF0PW01.AF0PWXSY = AF0PW01.AF0PWXSY + 1900;/* move century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AF0PW01.AF0PWXYY > 60)
    AF0PW01.AF0PWXCC = 19; /* move century*/
  else
    AF0PW01.AF0PWXCC = 20; /* move century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  ;
  if (AF0PW01.AF0PWXSY < 2000)
    AF0PS20S();
  else
    if (AF0PW01.AF0PWXSY == 2000)
      if (AF0PM001.XSECD == "SP"
       || AF0PM001.XSECD == "SU")
        AF0PS20S();
      else
        /* field in error*/
        AFWREC.AFWPRCSN = "S20 "; /* Process number*/
        set AF0PM001.XSNYR cursor, bold; /* highlight field*/
        set AF0PM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
      end
    else
      if (AF0PW01.AF0PWXSY > 2000)
        AFWREC.AFWPRCSN = "S20 "; /* Process number*/
        set AF0PM001.XSNYR cursor, bold; /* highlight field*/
        set AF0PM001.XSECD cursor, bold; /* highlight field*/
        XP1REC.XP1MNO = 138; /* indicate error message*/
        XP1REC.XSNYR = 0; /* Reset working storage*/
      end
    end
  end
end // end AF0PS20

// Season yr search
Function AF0PS20S()
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNYR[AFWIDX5] == AF0PW01.AF0PWXSY
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      XP1REC.XSNYR = AF0PW01.AF0PWXSY; /* save to working storage*/
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
                     /* (field in error)*/
  AFWREC.AFWPRCSN = "S20S"; /* Process number*/
  set AF0PM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Reset working storage*/
end // end AF0PS20S

// Edit Season cd
Function AF0PS21()
  ;
  ;
  if (AF0PM001.XSECD in XSETBL.XSECD)
                     /* (field is valid)*/
    XP1REC.XSECD = AF0PM001.XSECD; /* save to working storage*/
    ;
  else
                     /* (field in error)*/
    AFWREC.AFWPRCSN = "S21 "; /* Process number*/
    set AF0PM001.XSECD cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 16; /* indicate error message*/
    XP1REC.XSECD = " "; /* save to working storage*/
    return; /* return to calling process*/
    ;
  end
  ;
  AF0PW01.AF0PWXSS = " "; /* Initialize wk area*/
  AF0PW01.AF0PWXYR = +0; /* Initialize wk area*/
  ;
  AF0PW01.AF0PWXSS = XP1REC.XSECD; /* To XSECD wk area*/
  AF0PW01.AF0PWXYR = XP1REC.XSNYR; /* Format wk area*/
  ;
  AF0PW01.AF0PWXSY = 0; /* initialize xsnyr wk area*/
  AF0PW01.AF0PWXSY = AF0PM001.XSNYR; /* move to wk area*/
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* AF0PW01.AF0PWXSY = AF0PW01.AF0PWXSY + 1900;/* move century*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (AF0PW01.AF0PWXYY > 60)
    AF0PW01.AF0PWXCC = 19; /* move century*/
  else
    AF0PW01.AF0PWXCC = 20; /* move century*/
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  ;
  AFWREC.AFWIDX5 = 1; /* SET SEARCH INDEX TO 1*/
  while (AFWREC.AFWIDX5 != 9999) /* end of search condition*/
    if (YSNTBL.XSNABRV[AFWIDX5] == AF0PW01.AF0PWXSA
     && YSNTBL.XGPCD[AFWIDX5] == "03"
     && YSNTBL.XDR-PROD-REG-CD[AFWIDX5] == "01")
      ;
      return;
    else
      if (YSNTBL.XGPCD[AFWIDX5] != "99")
        AFWREC.AFWIDX5 = AFWREC.AFWIDX5 + 1;
      else
        AFWREC.AFWIDX5 = 9999; /* END OF TABLE*/
      end
    end
  end
  ;
              /* (season cd/yr combination invalid)*/
  AFWREC.AFWPRCSN = "S21 "; /* Process number*/
  set AF0PM001.XSNYR cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 26; /* indicate error message*/
  XP1REC.XSNYR = 0; /* Zero-out save area*/
  ;
end // end AF0PS21

// Edit Forecaster cd
Function AF0PS22()
  ;
  ;
  if (AF0PM001.PG1FCTCD == " ") /* Eq spaces*/
    XP1REC.XXXUSER = " "; /* Space out save area*/
    AF0PW01.AF0PWUSR = " "; /* Space out save area*/
    XP1REC.PG1FCTCD = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0PW01.AF0PWUSR = AF0PM001.PG1FCTCD; /* Move to wk map storage*/
  ;
  ;
   /* *=============================================**/
   /* Clear the row storage area and format the key.*/
   /* *=============================================**/
  ;
  set PG1REC empty; /* Clear row storage area*/
  ;
  PG1REC.XGPCD = "03"; /* 'APPAREL' GPC code*/
  PG1REC.PG1SC4CD = "  "; /* SCHEDULER CD*/
  PG1REC.PG1FCTCD = "**"; /* FORECASTER CD*/
  PG1REC.XXXUSER = AF0PM001.PG1FCTCD; /* Forecaster id*/
  ;
  ;
   /* *==============================================**/
    /* CALL IOMOD to retrieve row from DPRODG.VSUSER01*/
   /* *==============================================**/
  ;
  try
    call "IO1200" ("SA", SQLCA, PG1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
  ;
   /* *======================**/
   /* *  Check Call Results  **/
   /* *======================**/
  ;
  if (sysVar.errorCode != "00000000") /* CALL not sucessful*/
    converseLib.validationFailed(10); /* Indicate 'BAD CALL' error*/
    TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
  else /* (CALL to IOMOD, OK)*/
    if (SQLCA.VAGen_SQLCODE == 100) /* IF Row not found*/
                    /* (Field in Error)*/
      set AF0PM001.PG1FCTCD cursor, bold; /* Highlight field*/
      AFWREC.AFWPRCSN = "S22 "; /* Process number*/
      XP1REC.XP1MNO = 37; /* Indicate error msg*/
      XP1REC.PG1FCTCD = " "; /* Space out save area*/
      return; /* Return to calling process*/
      ;
      /* ***** EXIT PROCESS HERE ******/
      ;
    else /* ELSE (SQLCODE not = +100)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* IF Resource not available*/
        converseLib.validationFailed(11); /* Indicate 'DATA BASE BUSY' error*/
        TA1REC.TA1FUNC = "POST"; /* Post ERROR to Error-File*/
      else /* ELSE*/
        if (SQLCA.VAGen_SQLCODE != 0) /* IF Unknown DB2 Error occured*/
          converseLib.validationFailed(10); /* Indicate 'UNKNOWN ERROR' error*/
          TA1REC.TA1FUNC = "RETN"; /* Show user ERROR screen*/
        else /* ELSE ( SQLCODE = 0, OKAY ! )*/
                           /* (Field is Valid)*/
          XP1REC.XXXUSER = AF0PM001.PG1FCTCD; /* Move to XP1REC*/
          XP1REC.PG1FCTCD = PG1REC.PG1FCTCD; /* Move to XP1REC*/
          return; /* Return to 'CALLING' Process*/
          ;
          /* ***** EXIT PROCESS HERE ******/
          ;
        end
      end
    end
  end
  ;
   /* *************************************************************/
   /* ***** This section of code is only reached if an error ******/
   /* ***** which needs to be 'REPORTED' has occured above.  ******/
   /* *************************************************************/
  ;
  TA1REC.TA1TYPE = "DB2 "; /* DB2 ERROR*/
  TA1REC.TA1PGMNM = "AF0PE10"; /* Process name*/
  TA1REC.TA1LOC = "SELECT XXXUSER FROM MAP";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODG  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSUSER01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF0PM001.PG1FCTCD; /* MOVE SIGNON to ERROR-DIAG*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  return; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0PS22

// Edit Division cd
Function AF0PS23()
  if (AF0PM001.XDVCD == " ") /* Field eq spaces*/
    AF0PW01.AF0PWDIV = " "; /* Space out save area*/
    XP1REC.XDVCD = " "; /* Space out save area*/
    XP1REC.XDVABRV = " "; /* Space out save area*/
    XP1REC.XDVDESC = " "; /* Space out save area*/
    AF0PM001.XDVABRV = " "; /* Space out map abbrev*/
    ;
  else
    ;
    if (AF0PM001.XDVCD in XDVTBL.XDVCD)
                      /* (field is valid)*/
      AF0PW01.AF0PWDIV = AF0PM001.XDVCD; /* save to wk storage*/
      XP1REC.XDVCD = AF0PM001.XDVCD; /* save to wk storage*/
      XP1REC.XDVABRV = XDVTBL.XDVABRV[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XDVDESC = XDVTBL.XDVDESC[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
      ;
    end
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S23 "; /* Process number*/
  set AF0PM001.XDVCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 29; /* indicate error message*/
  XP1REC.XDVABRV = " "; /* To wk storage*/
  XP1REC.XDVDESC = " "; /* To wk storage*/
  ;
  ;
end // end AF0PS23

// Edit Product Line cd
Function AF0PS24()
  if (AF0PM001.XPLCD == " ") /* Field eq spaces*/
    AF0PW01.AF0PWLIN = " "; /* Space out save area*/
    XP1REC.XPLCD = " "; /* Space out save area*/
    XP1REC.XPLDESC = " "; /* Space out save area*/
    XP1REC.XPLABRV = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0PW01.AF0PWLIN = AF0PM001.XPLCD; /* save to wk map storage*/
  ;
  ;
  if (AF0PM001.XPLCD in XPLTBL.XPLCD)
    ;
    if (XPLTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* Active status*/
     && XPLTBL.XGPCD[sysVar.arrayIndex] == "03") /* Apparel cd*/
                      /* (field is valid)*/
      XP1REC.XPLCD = AF0PM001.XPLCD; /* save to wk storage*/
      XP1REC.XPLDESC = XPLTBL.XPLDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XPLABRV = XPLTBL.XPLABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S24 "; /* Process number*/
  set AF0PM001.XPLCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 81; /* indicate error message*/
  XP1REC.XPLDESC = " "; /* To wk storage*/
  XP1REC.XPLABRV = " "; /* To wk storage*/
  ;
  ;
  ;
end // end AF0PS24

// Edit Product Type cd
Function AF0PS25()
  if (AF0PM001.XPRCD == " ") /* Field eq spaces*/
    AF0PW01.AF0PWTYP = " "; /* Space out save area*/
    XP1REC.XPRCD = " "; /* Space out save area*/
    XP1REC.XPRDESC = " "; /* Space out save area*/
    XP1REC.XPRABRV = " "; /* Space out save area*/
    return; /* Return to calling process*/
  end
  ;
  AF0PW01.AF0PWTYP = AF0PM001.XPRCD; /* save to wk map storage*/
  ;
  ;
  if (AF0PM001.XPRCD in XPRTBL.XPRCD)
    ;
    if (XPRTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Active status*/
                      /* (field is valid)*/
      XP1REC.XPRCD = AF0PM001.XPRCD; /* save to wk storage*/
      XP1REC.XPRDESC = XPRTBL.XPRDESC[sysVar.arrayIndex]; /* To wk storage*/
      XP1REC.XPRABRV = XPRTBL.XPRABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
      ;
    end
    ;
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S25 "; /* Process number*/
  set AF0PM001.XPRCD cursor, bold; /* highlight field*/
  XP1REC.XP1MNO = 80; /* indicate error message*/
  XP1REC.XPRDESC = " "; /* To wk storage*/
  XP1REC.XPRABRV = " "; /* To wk storage*/
  ;
  ;
  ;
end // end AF0PS25

// Edit Forecast percentages
Function AF0PS26()
  ;
  if (AF0PW01.AF0PWFCI != "Y") /* if forecast % not changed*/
    return; /* go back*/
  end
  ;
  ;
   /* -------------------------------------------------;*/
    /* validate third line*/
   /* -------------------------------------------------;*/
  ;
  AF0PW01.AF0PWFCP = 0;
  AFWREC.AFWIDX1 = 1;
  ;
  while (AFWREC.AFWIDX1 <= 10)
    if (AF0PM001.AF0PMFP3[AFWIDX1] > 0)
      AF0PW01.AF0PWFCP = AF0PW01.AF0PWFCP + AF0PM001.AF0PMFP3[AFWIDX1];
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    ;
  end
  ;
  if (AF0PW01.AF0PWFCP != 0
   && AF0PM001.AF0PMOG[3] != "**") /* Not corporate look*/
    if (AF0PW01.AF0PWFCP != 100)
      XP1REC.XP1MNO = 127;
      AF0PM001.AF0PM-SIZE-PCT-MSG[3] = "SIZE %:";
      AF0PM001.AF0PM-SIZE-PCT-TTL[3] = AF0PW01.AF0PWFCP;
      AFWREC.AFWIDX1 = 1;
      while (AFWREC.AFWIDX1 <= 10)
        if (AF0PM001.AF0PMSZ3[AFWIDX1] != " ")
          if (AFWIDX1 != 1)
            set AF0PM001.AF0PMFP3[AFWIDX1] bold;
          else
            set AF0PM001.AF0PMFP3[AFWIDX1] cursor, bold;
          end
        end
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
      end
    end
  end
  ;
  if (AF0PW01.AF0PWFCP == 0
   || AF0PW01.AF0PWFCP == 100)
    AFWREC.AFWIDX1 = 1;
    while (AFWREC.AFWIDX1 <= 10)
      AF0PW02.AF0PWFP3[AFWIDX1] = AF0PM001.AF0PMFP3[AFWIDX1];
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    end
  end
  ;
  ;
   /* -------------------------------------------------;*/
    /* validate second line*/
   /* -------------------------------------------------;*/
  ;
  AF0PW01.AF0PWFCP = 0;
  AFWREC.AFWIDX1 = 1;
  ;
  while (AFWREC.AFWIDX1 <= 10)
    if (AF0PM001.AF0PMFP2[AFWIDX1] > 0)
      AF0PW01.AF0PWFCP = AF0PW01.AF0PWFCP + AF0PM001.AF0PMFP2[AFWIDX1];
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    ;
  end
  ;
  if (AF0PW01.AF0PWFCP != 0
   && AF0PM001.AF0PMOG[2] != "**") /* Not corporate look*/
    if (AF0PW01.AF0PWFCP != 100)
      XP1REC.XP1MNO = 127;
      AF0PM001.AF0PM-SIZE-PCT-MSG[2] = "SIZE %:";
      AF0PM001.AF0PM-SIZE-PCT-TTL[2] = AF0PW01.AF0PWFCP;
      AFWREC.AFWIDX1 = 1;
      while (AFWREC.AFWIDX1 <= 10)
        if (AF0PM001.AF0PMSZ2[AFWIDX1] != " ")
          if (AFWIDX1 != 1)
            set AF0PM001.AF0PMFP2[AFWIDX1] bold;
          else
            set AF0PM001.AF0PMFP2[AFWIDX1] cursor, bold;
          end
        end
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
      end
    end
  end
  ;
  if (AF0PW01.AF0PWFCP == 0
   || AF0PW01.AF0PWFCP == 100)
    AFWREC.AFWIDX1 = 1;
    while (AFWREC.AFWIDX1 <= 10)
      AF0PW02.AF0PWFP2[AFWIDX1] = AF0PM001.AF0PMFP2[AFWIDX1];
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    end
  end
  ;
  ;
   /* -------------------------------------------------;*/
    /* validate first line*/
   /* -------------------------------------------------;*/
  ;
  AF0PW01.AF0PWFCP = 0;
  AFWREC.AFWIDX1 = 1;
  ;
  while (AFWREC.AFWIDX1 <= 10)
    if (AF0PM001.AF0PMFP1[AFWIDX1] > 0)
      AF0PW01.AF0PWFCP = AF0PW01.AF0PWFCP + AF0PM001.AF0PMFP1[AFWIDX1];
    end
    ;
    AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    ;
  end
  ;
  if (AF0PW01.AF0PWFCP != 0
   && AF0PM001.AF0PMOG[1] != "**") /* Not corporate look*/
    if (AF0PW01.AF0PWFCP != 100)
      XP1REC.XP1MNO = 127;
      AF0PM001.AF0PM-SIZE-PCT-MSG[1] = "SIZE %:";
      AF0PM001.AF0PM-SIZE-PCT-TTL[1] = AF0PW01.AF0PWFCP;
      AFWREC.AFWIDX1 = 1;
      while (AFWREC.AFWIDX1 <= 10)
        if (AF0PM001.AF0PMFP1[AFWIDX1] > 0)
          if (AFWIDX1 != 1)
            set AF0PM001.AF0PMFP1[AFWIDX1] bold;
          else
            set AF0PM001.AF0PMFP1[AFWIDX1] cursor, bold;
          end
        end
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
      end
    end
  end
  ;
  if (AF0PW01.AF0PWFCP == 0
   || AF0PW01.AF0PWFCP == 100)
    AFWREC.AFWIDX1 = 1;
    while (AFWREC.AFWIDX1 <= 10)
      AF0PW02.AF0PWFP1[AFWIDX1] = AF0PM001.AF0PMFP1[AFWIDX1];
      AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1;
    end
  end
  ;
  ;
end // end AF0PS26

// Read DACAST.VAFSTY01
Function AF0PS27()
  ;
  ;
  try
    call "IO3510" ("S ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique row*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S27 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT UNIQUE TABLE ROW ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF2REC.AF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0PS27

// Update DACAST.VAFSTY01
Function AF0PS28()
  ;
  ;
  try
    call "IO3510" ("U ", SQLCA, AF2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique row*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S28 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "UPDATE UNIQUE TABLE ROW ";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VAFSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = AF2REC.AF2KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0PS28

// Update TSQ item
Function AF0PS29()
  ;
  ;
  call "TA0050" (AF0PW02, TA5REC) {isNoRefresh = yes}; /* Temporary storage*/
                                        /* ;subroutine*/
  ;
  if (TA5REC.TA5RTNCD != 0) /* Error was found*/
    ;
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S29 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "UPDATE TSQ PAGE              ";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    exit stack; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0PS29

// Edit Owner Group cd
Function AF0PS30()
  if (AF0PM001.XOWCD == AF0PW01.AF0PWXOW) /* EQ previous xow_cd*/
    return; /* Exit to calling process*/
  end
  ;
  if (AF0PM001.XOWCD == " ") /* Map fld eq spaces*/
    AF0PW01.AF0PWXOW = " "; /* Space out save fld*/
    AF0PW01.XOWABRV = " "; /* Space out save desc*/
    AF0PM001.XOWABRV = " "; /* Space out map desc*/
    XP1REC.XOWCD = " ";
    XP1REC.XOWABRV = " ";
    return; /* Return to calling process*/
  end
  ;
  if (AF0PM001.XOWCD == "**") /* corporate look*/
    AF0PW01.AF0PWXOW = "**";
    AF0PW01.XOWABRV = " "; /* Space out save desc*/
    AF0PM001.XOWABRV = "ALL";
    XP1REC.XOWCD = "**";
    XP1REC.XOWABRV = "ALL";
    return; /* Return to calling process*/
  else
    XP1REC.XWHCD = "51";
    XP1REC.XOWCD = AF0PM001.XOWCD;
    ;
    if (XP1REC.XOWKEY in XOWTBL.XOWKEY)
      AF0PW01.AF0PWXOW = AF0PM001.XOWCD; /* save to wk storage*/
      XP1REC.XOWCD = AF0PM001.XOWCD; /* save to wk storage*/
      AF0PW01.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
      AF0PM001.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk map*/
      XP1REC.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex]; /* To wk storage*/
      return; /* Exit to calling process*/
    end
  end
  ;
                   /* (field in error)*/
  AFWREC.AFWPRCSN = "S30 "; /* Process number*/
  XP1REC.XP1MNO = 121; /* indicate error message*/
  set AF0PM001.XOWCD cursor, bold; /* highlight field*/
  AF0PW01.XOWABRV = " "; /* Space out save desc*/
  AF0PM001.XOWABRV = " "; /* Space out save desc*/
  XP1REC.XOWABRV = " "; /* Space out save desc*/
  ;
  ;
  ;
end // end AF0PS30

// Edit Blank Only Indicator
Function AF0PS31()
  ;
  if (AF0PM001.AF0PM-BLNK-FL == " ")
    AF0PM001.AF0PM-BLNK-FL = "N";
    AF0PW01.AF0PW-BLNK-FL = "N";
    return;
  end
  ;
  if (AF0PM001.AF0PM-BLNK-FL != "Y"
   && AF0PM001.AF0PM-BLNK-FL != "N")
    ;
                   /* (field in error)*/
    AF0PW01.AF0PW-BLNK-FL = " "; /* Space out wk storage*/
    AFWREC.AFWPRCSN = "S31 "; /* Process number*/
    set AF0PM001.AF0PM-BLNK-FL cursor, bold; /* highlight field*/
    XP1REC.XP1MNO = 39; /* indicate error message*/
    ;
  else
    ;
                   /* (field is valid)*/
    AF0PW01.AF0PW-BLNK-FL = AF0PM001.AF0PM-BLNK-FL;
    ;
    ;
  end
  ;
  ;
end // end AF0PS31

// get price
Function AF0PS32()
   /* ------------------------------------------------------------*/
             /* Obtain Data from PRICE SUBROUTINE*/
   /* ------------------------------------------------------------*/
  ;
   /* *===================**/
   /* *  Selection Fields **/
   /* *===================**/
  ;
  set AF1REC empty; /* Reset rec work area*/
  ;
  AF1REC.XSECD = VAFSIZ01.XSE-SESN-CD;
  AF1REC.XSNYR = VAFSIZ01.XSN-SESN-YR-RNG;
  AF1REC.XGPCD = "03"; /* GPC cd*/
  AF1REC.SY1STNBR = VAFSIZ01.SY-STY-NBR; /* Style no.*/
  AF1REC.SY2CLRID = VAFSIZ01.SY-COLR-CD-ID; /* Color*/
  AF1REC.XPYCD = "01"; /* Price type*/
  AF1REC.XQACD = "01"; /* Price quality*/
  ;
  ;
  try
    call "AF1730" (AF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/
  ;
  ;
  if (sysVar.errorCode != "00000000" /* Call NOT successful*/
   || AF1REC.AF1-RETURN-CODE == 1    /* and normal return code*/
   || AF1REC.AF1-RETURN-CODE == 3)   /* and normal return code*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    SQLCA.VAGen_SQLCODE = AF1REC.AF1-ERROR-SQLCODE;
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "032"; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "DECLARE TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    ;
    return;
    ;
  end
  ;
end // end AF0PS32

// Process AIRSPEED  bookings
Function AF0PS33()
  ;
   /* ------------------------------------------------------------*/
    /* Process DACAST.vtrdfc02 records for the style.*/
   /* ------------------------------------------------------------*/
  ;
  AF0PS34(); /* Select Set DACAST.Vtrdfc0 data*/
  ;
  ;
  if (converseVar.validationMsgNum == 0) /* No errors found*/
    ;
    AFWREC.AFWIDX5 = 1; /* Set first row count*/
    AF0PW01.AF0PWEOF = "N"; /* Reset EOF indicator*/
    while (AF0PW01.AF0PWEOF == "N") /* Until all rows processed*/
      ;
      AF0PS35(); /* Process trdfc ROWS*/
      ;
      if (converseVar.validationMsgNum != 0) /* Errors found*/
        AF0PW01.AF0PWEOF = "Y"; /* Force loop end*/
      end
      ;
    end
    ;
    AF0PS36(); /* Close DACAST.vtrdfc02 cursor*/
    ;
  end
  ;
end // end AF0PS33

// Select Set DACAST.Vtrdfc0 dat
Function AF0PS34()
  ;
   /* ------------------------------------------------------------*/
    /* Select the set of table rows.*/
    /* If not available, return an error message to the user.*/
    /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/
  ;
    /* *=================**/
    /* *  Build DB Keys  **/
    /* *=================**/
  ;
  set VTRDFC02 empty; /* Clear record work area*/
  ;
  VTRDFC02.SY-STY-NBR = AF2REC.SY1STNBR; /* Style*/
  VTRDFC02.XDV-DIV-CD = AF2REC.XDVCD; /* division cd*/
  VTRDFC02.XSE-SESN-CD = AF2REC.XSECD; /* season cd*/
  VTRDFC02.XSN-SESN-YR-RNG = AF2REC.XSNYR;
  VTRDFC02.XOW-OWN-GRP-CD = AF2REC.XOWCD;
  ;
  ;
    /* *==========================**/
    /* *  Access DACAST.vtrdfc02   **/
    /* *==========================**/
  ;
  try
    call "VTRDFC02" ("S1", SQLCA, VTRDFC02) {isNoRefresh = yes, isExternal = yes};
  end /**/
  ;
    /* *======================**/
    /* *  Check Call Results  **/
    /* *======================**/
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == 0)      /* no sql errors*/
    return; /* return*/
  end
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* post error and continue process*/
  else
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
  end
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S34 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDFC02"; /* Table view name*/
  TA1REC.TA1TBLKE = VTRDFC02.VTRDFC02-GROUP; /* Table key*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
  ;
end // end AF0PS34

// process DACAST.VTRDFC0 rows
Function AF0PS35()
  ;
   /* ------------------------------------------------------------*/
    /* Fetch the next row from the selected set of rows.*/
    /* Process fetched row.*/
    /* If end of file, set end of file switch.*/
    /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
    /* *=========================**/
    /* *  Access DACAST.VTRDFC02 **/
    /* *=========================**/
  ;
  try
    call "VTRDFC02" ("N1", SQLCA, VTRDFC02) {isNoRefresh = yes, isExternal = yes};
  end /* get next row*/
  ;
    /* *======================**/
    /* *  Check Call Results  **/
    /* *======================**/
  ;
  ;
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    AF0PW01.AF0PWEOF = "Y"; /* Indicate end of file*/
    return; /* Return to previous process*/
  end
  ;
  if (sysVar.errorCode == "00000000"
   && SQLCA.VAGen_SQLCODE == 0)
    if (converseVar.validationMsgNum == 0) /* No errors found*/
      ;
             /* (RECalculate Bookings Qtys )*/
      AF0PS37();
      ;
      AFWREC.AFWIDX1 = 1; /* Initialize loop index*/
      while (AFWREC.AFWIDX1 <= 10) /* Process all sizes*/
        ;
        if (VTRDFC02.SY-SZ-ID[AFWIDX1] > 0) /* Valid size found*/
          ;
          if (AFWREC.AFWIXM == 1) /* First line group*/
            ;
            if (VTRDFC02.SY-SZ-ID[AFWIDX1] in AF0PW02.AF0PWSN1)
              AF0PW01.AF0PWQT2 = mathLib.round(VTRDFC02.AF-CUST-BOOK-QTY[AFWIDX1] * AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
              AF0PW02.AF0PWAS1[sysVar.arrayIndex] = mathLib.round(AF0PW02.AF0PWAS1[sysVar.arrayIndex]               + AF0PW01.AF0PWQT2, -mathLib.decimals(AF0PW02.AF0PWAS1[sysVar.arrayIndex]));
              if (AF0PW01.AF0PW-AIR-FL == "Y")
                 /*  */
                 /* BOOKINGS ADJUSTMENT*/
                 /*  */
                AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK1[sysVar.arrayIndex];
                AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
                AF0PW02.AF0PWBK1[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
                /*  */
                /* BLA ADJUSTMENT*/
                /*  */
                AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL1[sysVar.arrayIndex];
                AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 - AF0PW01.AF0PWQT2;
                if (AF0PW01.AF0PWQT1 < 0)
                  AF0PW01.AF0PWQT1 = 0;
                end
                AF0PW02.AF0PWBL1[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
              end
            end
            ;
          else
            ;
            if (AFWREC.AFWIXM == 2) /* Second line group*/
              ;
              if (VTRDFC02.SY-SZ-ID[AFWIDX1] in AF0PW02.AF0PWSN2)
                AF0PW01.AF0PWQT2 = mathLib.round(VTRDFC02.AF-CUST-BOOK-QTY[AFWIDX1] * AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
                AF0PW02.AF0PWAS2[sysVar.arrayIndex] = mathLib.round(AF0PW02.AF0PWAS2[sysVar.arrayIndex] + AF0PW01.AF0PWQT2, -mathLib.decimals(AF0PW02.AF0PWAS2[sysVar.arrayIndex]));
                if (AF0PW01.AF0PW-AIR-FL == "Y")
                 /*  */
                 /* BOOKINGS ADJUSTMENT*/
                 /*  */
                  AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK2[sysVar.arrayIndex];
                  AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
                  AF0PW02.AF0PWBK2[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
                 /*  */
                 /* BLA ADJUSTMENT*/
                 /*  */
                  AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL2[sysVar.arrayIndex];
                  AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 - AF0PW01.AF0PWQT2;
                  if (AF0PW01.AF0PWQT1 < 0)
                    AF0PW01.AF0PWQT1 = 0;
                  end
                  AF0PW02.AF0PWBL2[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
                end
              end
              ;
            else
              ;
              if (AFWREC.AFWIXM == 3) /* Third line group*/
                ;
                if (VAFSIZ01.SY-SZ-ID[AFWIDX1] in AF0PW02.AF0PWSN3)
                  AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBK3[sysVar.arrayIndex];
                  AF0PW01.AF0PWQT2 = mathLib.round(VTRDFC02.AF-CUST-BOOK-QTY[AFWIDX1] * AF1REC.SY5PRCUN, -mathLib.decimals(AF0PW01.AF0PWQT2));
                  AF0PW02.AF0PWAS3[sysVar.arrayIndex] = mathLib.round(AF0PW02.AF0PWAS3[sysVar.arrayIndex] + AF0PW01.AF0PWQT2, -mathLib.decimals(AF0PW02.AF0PWAS3[sysVar.arrayIndex]));
                  /* BOOKINGS ADJUSTMENT*/
                  AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 + AF0PW01.AF0PWQT2;
                  AF0PW02.AF0PWBK3[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
                  /* BLA ADJUSTMENT*/
                  AF0PW01.AF0PWQT1 = AF0PW02.AF0PWBL3[sysVar.arrayIndex];
                  AF0PW01.AF0PWQT1 = AF0PW01.AF0PWQT1 - AF0PW01.AF0PWQT2;
                  if (AF0PW01.AF0PWQT1 < 0)
                    AF0PW01.AF0PWQT1 = 0;
                  end
                  AF0PW02.AF0PWBL3[sysVar.arrayIndex] = AF0PW01.AF0PWQT1;
                end
                ;
              end
              ;
            end
            ;
          end
          ;
        end
        ;
        AFWREC.AFWIDX1 = AFWREC.AFWIDX1 + 1; /* Loop through*/
        ;
      end
      ;
      return; /* Return to calling process*/
      ;
    end
    ;
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      AF0PW01.AF0PWEOF = "Y"; /* Indicate end of file*/
      return; /* Return to previous process*/
    end
    ;
  end
  ;
  ;
  ;
   /* ------------------------------------------------------------*/
    /* If data not available, return an error message to user.*/
    /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
  ;
  ;
  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/
    ;
    converseLib.validationFailed(11); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  AFWREC.AFWPRCSN = "S05 "; /* Process number*/
  TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
  TA1REC.TA1LOC = "FETCH NEXT SELECTED TABLE ROW";
  TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
  TA1REC.TA1DBASE = "DACAST "; /* Data base name*/
  TA1REC.TA1TBLVU = "VTRDFC02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
  ;
  AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
  ;
  exit stack; /* Return to previous process*/
  ;
  ;
end // end AF0PS35

// close DACAST.VTRDFC0
Function AF0PS36()
  ;
  ;
   /* ------------------------------------------------------------*/
    /* Close the selected set of table rows.*/
    /* If any error, indicate a system error.*/
   /* ------------------------------------------------------------*/
  ;
  ;
    /* *=========================**/
    /* *  close  DACAST.vtrdfc02 **/
    /* *=========================**/
  ;
  try
    call "VTRDFC02" ("C1", SQLCA, VTRDFC02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/
  ;
  ;
    /* *======================**/
    /* *  Check Call Results  **/
    /* *======================**/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* Unexpected return code*/
   || sysVar.errorCode != "00000000") /* or unsuccessful call*/
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    AFWREC.AFWPRCSN = "S36 "; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DACAST  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VTRDFC02"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    converseLib.validationFailed(10); /* Indicate system error*/
    ;
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
end // end AF0PS36

// RECalculate Bookings Qtys
Function AF0PS37()
   /* ------------------------------------------------------------*/
              /* Obtain Data from PRICE SUBROUTINE*/
   /* ------------------------------------------------------------*/
  ;
    /* *===================**/
    /* *  Selection Fields **/
    /* *===================**/
  ;
  set AF1REC empty; /* Reset rec work area*/
  ;
  AF1REC.XSECD = VTRDFC02.XSE-SESN-CD;
  AF1REC.XSNYR = VTRDFC02.XSN-SESN-YR-RNG;
  AF1REC.XGPCD = "03"; /* GPC cd*/
  AF1REC.SY1STNBR = VTRDFC02.SY-STY-NBR; /* Style no.*/
  AF1REC.SY2CLRID = VTRDFC02.SY-COLR-CD-ID; /* Color*/
  AF1REC.XPYCD = "01"; /* Price type*/
  AF1REC.XQACD = "01"; /* Price quality*/
  ;
  ;
  try
    call "AF1730" (AF1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Access DB*/
  ;
  ;
  if (sysVar.errorCode != "00000000" /* Call NOT successful*/
   || AF1REC.AF1-RETURN-CODE == 1    /* and normal return code*/
   || AF1REC.AF1-RETURN-CODE == 3)   /* and normal return code*/
    ;
    converseLib.validationFailed(10); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before redisplay*/
    SQLCA.VAGen_SQLCODE = AF1REC.AF1-ERROR-SQLCODE;
    ;
    TA1REC.TA1MAP = sysVar.errorCode; /* Save CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* Save SQL commarea*/
    ;
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    AFWREC.AFWPRCSN = "037"; /* Process number*/
    TA1REC.TA1PGMNM = AFWREC.AFWERLOC; /* Error location*/
    TA1REC.TA1LOC = "DECLARE TABLE ROW";
    TA1REC.TA1MAP = AFWREC.XXXMAPNM; /* Map name*/
    TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPRICE01"; /* Table view name*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis*/
    ;
    AF0PM001.XXXPRCNM = AFWREC.AFWERLOC; /* Process name*/
    ;
    exit stack; /* Exit to redisplay map*/
    ;
  else
    ;
    return;
    ;
  end
  ;
end // end AF0PS37

//*** RECORD=AF0PW01 ****
// Working Storage (1) for AF0P - Program-defined Variables
// ***********************
Record AF0PW01 type basicRecord
  10 AF0PWBKV AF0PWBKV ; 
  10 AF0PWBLV AF0PWBLV ; 
  10 AF0PWEF1 AF0PWEF1 ; 
  10 AF0PWEOF AF0PWEOF ; 
  10 AF0PWUSR AF0PWUSR ; 
  10 AF0PWTYP AF0PWTYP ; 
  10 AF0PWGA AF0PWGA ; 
  10 AF0PWLIN AF0PWLIN ; 
  10 AF0PWCAT AF0PWCAT ; 
  10 AF0PWSIL AF0PWSIL ; 
  10 AF0PWSTY AF0PWSTY ; 
  10 AF0PWDIV AF0PWDIV ; 
  10 AF0PWXOW AF0PWXOW ; 
  10 AF0PWNVR AF0PWNVR ; 
  10 AF0PWPCT AF0PWPCT ; 
  10 AF0PWPCW AF0PWPCW ; 
  10 AF0PWPFC AF0PWPFC ; 
  10 AF0PWPND AF0PWPND ; 
  10 AF0PWPVR AF0PWPVR ; 
  10 AF0PWQBK AF0PWQBK ; 
  10 AF0PWQBL AF0PWQBL ; 
  10 AF0PWQUA AF0PWQUA ; 
  10 AF0PWQT1 AF0PWQT1 ; 
  10 AF0PWQT2 AF0PWQT2 ; 
  10 AF0PWQT3 AF0PWQT3 ; 
  10 AF0PWQT4 AF0PWQT4 ; 
  10 AF0PWBK1 AF0PWBK1 [10] ; 
  10 AF0PWBK2 AF0PWBK2 [10] ; 
  10 AF0PWBK3 AF0PWBK3 [10] ; 
  10 AF0PWFC1 AF0PWFC1 [10] ; 
  10 AF0PWFC2 AF0PWFC2 [10] ; 
  10 AF0PWFC3 AF0PWFC3 [10] ; 
  10 AF0PWSDC AF0PWSDC ; 
    15 AF0PWSC1 AF0PWSC1 ; 
    15 AF0PWSC2 AF0PWSC2 ; 
    15 AF0PWSC3 AF0PWSC3 ; 
    15 AF0PWSC4 AF0PWSC4 ; 
    15 AF0PWSC5 AF0PWSC5 ; 
  10 AF0PWSDS AF0PWSDS ; 
    15 AF0PWSD1 AF0PWSD1 ; 
    15 AF0PWSD2 AF0PWSD2 ; 
    15 AF0PWSD3 AF0PWSD3 ; 
    15 AF0PWSD4 AF0PWSD4 ; 
    15 AF0PWSD5 AF0PWSD5 ; 
  10 AF0PWSIX AF0PWSIX ; 
  10 AF0PWTBK AF0PWTBK ; 
  10 AF0PWTBL AF0PWTBL ; 
  10 AF0PWTFC AF0PWTFC ; 
  10 AF0PWVAR AF0PWVAR ; 
  10 AF0PWXSY AF0PWXSY ; 
    15 AF0PWXCC AF0PWXCC ; 
    15 AF0PWXYY AF0PWXYY ; 
  10 AF0PWXSA AF0PWXSA ; 
    15 AF0PWXSS AF0PWXSS ; 
    15 AF0PWXYR AF0PWXYR ; 
  10 AF0PWYR1 AF0PWYR1 ; 
    15 AF0PWYCC AF0PWYCC ; 
    15 AF0PWYR AF0PWYR ; 
  10 AF0PWPF5 AF0PWPF5 ; 
  10 AF0PWFCI AF0PWFCI ; 
  10 AF0PWFCP AF0PWFCP ; 
  10 XOWABRV XOWABRV ; 
  10 AF0PW-BLNK-FL AF0PW-BLNK-FL ; 
  10 AF0PW-AIR-FL AF0PW-AIR-FL ; 
end // end AF0PW01

//*** RECORD=AF0PW02 ****
// Working Storage (2) for AF0P - Program-defined Variables
// ***********************
Record AF0PW02 type basicRecord
  5 AF0PWLEN AF0PWLEN ; 
  5 AF0PWLN1 AF0PWLN1 ; 
    10 AF0PWLD1 AF0PWLD1 ; 
    10 AF0PWST1 AF0PWST1 ; 
    10 AF0PWSS1 AF0PWSS1 ; 
    10 AF0PWDM1 AF0PWDM1 ; 
    10 AF0PWOG1 AF0PWOG1 ; 
    10 AF0PWSN1 AF0PWSN1 [10] ; 
    10 AF0PWSZ1 AF0PWSZ1 [10] ; 
    10 AF0PWBK1 AF0PWBK1 [10] ; 
    10 AF0PWFD1 AF0PWFD1 [10] ; 
    10 AF0PWFP1 AF0PWFP1 [10] ; 
    10 AF0PWFT1 AF0PWFT1 ; 
    10 AF0PWBL1 AF0PWBL1 [10] ; 
    10 AF0PWAS1 AF0PWAS1 [10] ; 
  5 AF0PWLN2 AF0PWLN2 ; 
    10 AF0PWLD2 AF0PWLD2 ; 
    10 AF0PWST2 AF0PWST2 ; 
    10 AF0PWSS2 AF0PWSS2 ; 
    10 AF0PWDM2 AF0PWDM2 ; 
    10 AF0PWOG2 AF0PWOG2 ; 
    10 AF0PWSN2 AF0PWSN2 [10] ; 
    10 AF0PWSZ2 AF0PWSZ2 [10] ; 
    10 AF0PWBK2 AF0PWBK2 [10] ; 
    10 AF0PWFD2 AF0PWFD2 [10] ; 
    10 AF0PWFP2 AF0PWFP2 [10] ; 
    10 AF0PWFT2 AF0PWFT2 ; 
    10 AF0PWBL2 AF0PWBL2 [10] ; 
    10 AF0PWAS2 AF0PWAS2 [10] ; 
  5 AF0PWLN3 AF0PWLN3 ; 
    10 AF0PWLD3 AF0PWLD3 ; 
    10 AF0PWST3 AF0PWST3 ; 
    10 AF0PWSS3 AF0PWSS3 ; 
    10 AF0PWDM3 AF0PWDM3 ; 
    10 AF0PWOG3 AF0PWOG3 ; 
    10 AF0PWSN3 AF0PWSN3 [10] ; 
    10 AF0PWSZ3 AF0PWSZ3 [10] ; 
    10 AF0PWBK3 AF0PWBK3 [10] ; 
    10 AF0PWFD3 AF0PWFD3 [10] ; 
    10 AF0PWFP3 AF0PWFP3 [10] ; 
    10 AF0PWFT3 AF0PWFT3 ; 
    10 AF0PWBL3 AF0PWBL3 [10] ; 
    10 AF0PWAS3 AF0PWAS3 [10] ; 
  5 AF0PWKT AF0PWKT [3] ; 
  5 AF0PWFT AF0PWFT [3] ; 
  5 AF0PWLT AF0PWLT [3] ; 
  5 AF0PWKD AF0PWKD [3] ; 
end // end AF0PW02

//*** RECORD=VAFSIZ01 ****
// ************************************************************
// DB2 TABLE:      DACAST.VAFSIZ01
// COPYLIB MEMBER: DAFSIZ01 <-- yes that's right
// I/O MOD:        IO7150
// I/O MOD KEY:    xse-sesn-cd
//                 xsn-sesn-yr-rng
//                 xdv-div-cd
//                 sy-sty-nbr
//                 sy-colr-cd-id
//                 xow-own-grp-cd
//                 xdm-dim-cd
// *******************MAINTENANCE HISTORY**********************
// SVC REQ   DATE   USERID  COMMENT
// ------- -------- ------  -----------------------------------
// AF0432  04-08-94 LREIN   Initial creation
// ************************
Record VAFSIZ01 type basicRecord
  5 VAFSIZ01-GROUP VAFSIZ01-GROUP ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 XDV-DIV-CD XDV-DIV-CD ; 
    10 XSE-SESN-CD XSE-SESN-CD ; 
    10 XSN-SESN-YR-RNG XSN-SESN-YR-RNG ; 
    10 CU-CO-ID CU-CO-ID ; 
    10 CU-STOR-ID CU-STOR-ID ; 
    10 XCT-CTRY-CD XCT-CTRY-CD ; 
    10 XGA-GNDR-AGE-CD XGA-GNDR-AGE-CD ; 
    10 XPC-PROD-CAT-CD XPC-PROD-CAT-CD ; 
    10 XSU-SILH-CD XSU-SILH-CD ; 
    10 XPL-PROD-LN-CD XPL-PROD-LN-CD ; 
    10 XPR-PROD-TYP-CD XPR-PROD-TYP-CD ; 
    10 SY-SZ-SCL-CD SY-SZ-SCL-CD ; 
    10 XOW-OWN-GRP-CD XOW-OWN-GRP-CD ; 
    10 SY-SZ-ID SY-SZ-ID [10] ; 
    10 AF-BOOK-QTY AF-BOOK-QTY [10] ; 
    10 ZZ-LDT ZZ-LDT ; 
end // end VAFSIZ01

//*** RECORD=VTRDFC02 ****
// *********** demand snapshot detail information *************
// 
// DB2 TABLE:           DACAST.VDMANY01
// 
// COPYLIB MEMBER:      DCL00695
// 
// I/O MOD:             IO4200
// 
// KEY TO DB2 TABLE:    sy1stnbr    xdvcd
//                      sy2clrcd    xdmcd
//                      affasodt    xprcd
//                      xsecd       xplcd
//                      xsnyr
//                      afbndtpr
// 
// DATE CREATED:        06/07/89
// 
// MAINTENANCE LOG:
// 
//   DATE    USERID     COMMENT
// --------  ------     ---------------------------------------
// 06-07-89  cepple     INITIAL RECORD CREATION
// 08/30/90  Wkinca     Add Dim / Div, Product Type & Line
// 10-03-91  kjohns     Add xowcd.
// 07-12-93  TDODSO     ADDED KUCCOID
//                      ADDED KUMSTRID
//                      ADDED XCTCD
//                      ADDED AF-CNCL-SOT1-QTY1 THRU QTY10
//                      ADDED AF-CNCL-SOT2-QTY1 THRU QTY10
//                      ADDED AF-CNCL-SOT3-QTY1 THRU QTY10
//                      ADDED AF-CNCL-SOT4-QTY1 THRU QTY10
//                      ADDED AF-CNCL-SOT5-QTY1 THRU QTY10
// 11-01-93  LREIN      Added SOT6 to all qtys
//                      ADDED AF-LDMD-SOT1-QTY1 THRU QTY10
//                      ADDED AF-LDMD-SOT2-QTY1 THRU QTY10
//                      ADDED AF-LDMD-SOT3-QTY1 THRU QTY10
//                      ADDED AF-LDMD-SOT4-QTY1 THRU QTY10
//                      ADDED AF-LDMD-SOT5-QTY1 THRU QTY10
//                      ADDED AF-LDMD-SOT6-QTY1 THRU QTY10
// 12-06-1997  TTHAN1   Y2KFIX - CHANGE SIZE OF AFBNDTPR FROM 4
//                      TO 9.
// ************************
Record VTRDFC02 type basicRecord
  5 VTRDFC02-GROUP VTRDFC02-GROUP ; 
    10 VTRDFC02-KEY VTRDFC02-KEY ; 
      15 SY-STY-NBR SY-STY-NBR ; 
      15 SY-COLR-CD-ID SY-COLR-CD-ID ; 
      15 XDM-DIM-CD XDM-DIM-CD ; 
      15 XWH-WHSE-CD XWH-WHSE-CD ; 
      15 XDV-DIV-CD XDV-DIV-CD ; 
      15 XSE-SESN-CD XSE-SESN-CD ; 
      15 XSN-SESN-YR-RNG XSN-SESN-YR-RNG ; 
      15 AF-MO AF-MO ; 
      15 XXX-SUM-XOT-CD XXX-SUM-XOT-CD ; 
      15 CU-CO-ID CU-CO-ID ; 
      15 CU-STOR-ID CU-STOR-ID ; 
      15 XCT-CTRY-CD XCT-CTRY-CD ; 
    10 XGA-GNDR-AGE-CD XGA-GNDR-AGE-CD ; 
    10 XPC-PROD-CAT-CD XPC-PROD-CAT-CD ; 
    10 XSU-SILH-CD XSU-SILH-CD ; 
    10 XPL-PROD-LN-CD XPL-PROD-LN-CD ; 
    10 XPR-PROD-TYP-CD XPR-PROD-TYP-CD ; 
    10 SY-SZ-SCL-CD SY-SZ-SCL-CD ; 
    10 XOW-OWN-GRP-CD XOW-OWN-GRP-CD ; 
    10 SY-SZ-ID SY-SZ-ID [10] ; 
    10 AF-CUST-BOOK-QTY AF-CUST-BOOK-QTY [10] ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VTRDFC02

// booked quantity
DataItem AF-BOOK-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// AF_CNCL_SOT1_QTY
DataItem AF-CUST-BOOK-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Blank only indicator
DataItem AF0PW-AIR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Blank only indicator
DataItem AF0PW-BLNK-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk BLA 1
DataItem AF0PWAS1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk BLA 2
DataItem AF0PWAS2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk BLA 3
DataItem AF0PWAS3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Bookings 1
DataItem AF0PWBK1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Bookings 2
DataItem AF0PWBK2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Bookings 3
DataItem AF0PWBK3 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bookings variance wk fld
DataItem AF0PWBKV num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk BLA 1
DataItem AF0PWBL1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk BLA 2
DataItem AF0PWBL2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk BLA 3
DataItem AF0PWBL3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BLA variance wk fld
DataItem AF0PWBLV num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start category save
DataItem AF0PWCAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start division save
DataItem AF0PWDIV char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dimension 1
DataItem AF0PWDM1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dimension 2
DataItem AF0PWDM2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dimension 3
DataItem AF0PWDM3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Secondary EOF indicator
DataItem AF0PWEF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EOF indicator
DataItem AF0PWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk Forecasts 1
DataItem AF0PWFC1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecasts 2
DataItem AF0PWFC2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecasts 3
DataItem AF0PWFC3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast % change indicator
DataItem AF0PWFCI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// percentage work area
DataItem AF0PWFCP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast $ 1
DataItem AF0PWFD1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast $ 2
DataItem AF0PWFD2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast $ 3
DataItem AF0PWFD3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast % 1
DataItem AF0PWFP1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast % 2
DataItem AF0PWFP2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast % 3
DataItem AF0PWFP3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast total 1-3
DataItem AF0PWFT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast total $ 1
DataItem AF0PWFT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast total $ 2
DataItem AF0PWFT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Forecast total $ 3
DataItem AF0PWFT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start gender/age save
DataItem AF0PWGA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pcent Booked 1-3
DataItem AF0PWKD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bookings total 1-3
DataItem AF0PWKT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Line data indicator 1
DataItem AF0PWLD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line data indicator 2
DataItem AF0PWLD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line data indicator 3
DataItem AF0PWLD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ Length
DataItem AF0PWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start product line save
DataItem AF0PWLIN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 1 group
DataItem AF0PWLN1 char(335)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 2 group
DataItem AF0PWLN2 char(335)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line 3 group
DataItem AF0PWLN3 char(335)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BLA total 1-3
DataItem AF0PWLT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Negative variance
DataItem AF0PWNVR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// owner grp 1
DataItem AF0PWOG1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner grp 2
DataItem AF0PWOG2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner grp 3
DataItem AF0PWOG3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk raw pcent variance
DataItem AF0PWPCT bin(4,3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pcent for display
DataItem AF0PWPCW num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF5 indicator
DataItem AF0PWPF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pcent to bookings
DataItem AF0PWPFC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window processing ind
DataItem AF0PWPND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Positive variance
DataItem AF0PWPVR bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Bookings variance test ind
DataItem AF0PWQBK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// BLA Variance test ind
DataItem AF0PWQBL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Wk Quantity/Amt 1
DataItem AF0PWQT1 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Quantity/Amt 2
DataItem AF0PWQT2 decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Quantity/Amt 3
DataItem AF0PWQT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk Quantity/Amt 4
DataItem AF0PWQT4 bin(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style qualify indicator
DataItem AF0PWQUA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 1 subfld 1
DataItem AF0PWSC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 1 subfld 2
DataItem AF0PWSC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 1 subfld 3
DataItem AF0PWSC3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 1 subfld 4
DataItem AF0PWSC4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 1 subfld 5
DataItem AF0PWSC5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 2 subfld 1
DataItem AF0PWSD1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 2 subfld 2
DataItem AF0PWSD2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 2 subfld 3
DataItem AF0PWSD3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 2 subfld 4
DataItem AF0PWSD4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 2 subfld 5
DataItem AF0PWSD5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 1
DataItem AF0PWSDC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size desc work 2
DataItem AF0PWSDS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start silhouette save
DataItem AF0PWSIL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved style store index
DataItem AF0PWSIX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size id 1
DataItem AF0PWSN1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size id 2
DataItem AF0PWSN2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size id 3
DataItem AF0PWSN3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Style desc 1
DataItem AF0PWSS1 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style desc 2
DataItem AF0PWSS2 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style desc 3
DataItem AF0PWSS3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style 1
DataItem AF0PWST1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style 2
DataItem AF0PWST2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style 3
DataItem AF0PWST3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start style save
DataItem AF0PWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size description 1
DataItem AF0PWSZ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size description 2
DataItem AF0PWSZ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size description 3
DataItem AF0PWSZ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bookings line totals
DataItem AF0PWTBK int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// BLA line totals
DataItem AF0PWTBL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Forecast line totals
DataItem AF0PWTFC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start product type save
DataItem AF0PWTYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Start xxxuser save
DataItem AF0PWUSR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Qty/amt variance
DataItem AF0PWVAR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xsnyr work area
DataItem AF0PWXCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save owner group
DataItem AF0PWXOW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk abrv
DataItem AF0PWXSA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSN wk season cd
DataItem AF0PWXSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xsnyr work area
DataItem AF0PWXSY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN wk season yr
DataItem AF0PWXYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xsnyr work area
DataItem AF0PWXYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk season yr
DataItem AF0PWYCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk season yr
DataItem AF0PWYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Wk season yr
DataItem AF0PWYR1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem VAFSIZ01-GROUP char(107)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group item for record level
DataItem VTRDFC02-GROUP char(121)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// afgrec key
DataItem VTRDFC02-KEY char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// silhouette code
DataItem XSU-SILH-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSU_SILH_CD
DataItem XXX-SUM-XOT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

